{"home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.rolling_window": [[19, 23], ["numpy.lib.stride_tricks.as_strided"], "function", ["None"], ["def", "rolling_window", "(", "a", ",", "window", ")", ":", "\n", "    ", "shape", "=", "a", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "a", ".", "shape", "[", "-", "1", "]", "-", "window", "+", "1", ",", "window", ")", "\n", "strides", "=", "a", ".", "strides", "+", "(", "a", ".", "strides", "[", "-", "1", "]", ",", ")", "\n", "return", "np", ".", "lib", ".", "stride_tricks", ".", "as_strided", "(", "a", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.window_func": [[24, 28], ["results_plotter.rolling_window", "numpy.np.mean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.rolling_window", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "def", "window_func", "(", "x", ",", "y", ",", "window", ",", "func", ")", ":", "\n", "    ", "yw", "=", "rolling_window", "(", "y", ",", "window", ")", "\n", "yw_func", "=", "func", "(", "yw", ",", "axis", "=", "-", "1", ")", "\n", "return", "x", "[", "window", "-", "1", ":", "]", ",", "yw_func", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.ts2xy": [[29, 42], ["numpy.cumsum", "numpy.arange", "len"], "function", ["None"], ["", "def", "ts2xy", "(", "ts", ",", "xaxis", ")", ":", "\n", "    ", "if", "xaxis", "==", "X_TIMESTEPS", ":", "\n", "        ", "x", "=", "np", ".", "cumsum", "(", "ts", ".", "l", ".", "values", ")", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "elif", "xaxis", "==", "X_EPISODES", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "len", "(", "ts", ")", ")", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "elif", "xaxis", "==", "X_WALLTIME", ":", "\n", "        ", "x", "=", "ts", ".", "t", ".", "values", "/", "3600.", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.plot_curves": [[43, 57], ["matplotlib.figure", "max", "enumerate", "matplotlib.xlim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.scatter", "results_plotter.window_func", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.window_func", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot"], ["", "def", "plot_curves", "(", "xy_list", ",", "xaxis", ",", "title", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "2", ")", ")", "\n", "maxx", "=", "max", "(", "xy", "[", "0", "]", "[", "-", "1", "]", "for", "xy", "in", "xy_list", ")", "\n", "minx", "=", "0", "\n", "for", "(", "i", ",", "(", "x", ",", "y", ")", ")", "in", "enumerate", "(", "xy_list", ")", ":", "\n", "        ", "color", "=", "COLORS", "[", "i", "]", "\n", "plt", ".", "scatter", "(", "x", ",", "y", ",", "s", "=", "2", ")", "\n", "x", ",", "y_mean", "=", "window_func", "(", "x", ",", "y", ",", "EPISODES_WINDOW", ",", "np", ".", "mean", ")", "#So returns average of last EPISODE_WINDOW episodes", "\n", "plt", ".", "plot", "(", "x", ",", "y_mean", ",", "color", "=", "color", ")", "\n", "", "plt", ".", "xlim", "(", "minx", ",", "maxx", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "xaxis", ")", "\n", "plt", ".", "ylabel", "(", "\"Episode Rewards\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.plot_results": [[58, 66], ["results_plotter.plot_curves", "baselines.bench.monitor.load_results", "tslist.append", "results_plotter.ts2xy", "baselines.bench.monitor.load_results.l.cumsum"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.plot_curves", "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.load_results", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.ts2xy"], ["", "def", "plot_results", "(", "dirs", ",", "num_timesteps", ",", "xaxis", ",", "task_name", ")", ":", "\n", "    ", "tslist", "=", "[", "]", "\n", "for", "dir", "in", "dirs", ":", "\n", "        ", "ts", "=", "load_results", "(", "dir", ")", "\n", "ts", "=", "ts", "[", "ts", ".", "l", ".", "cumsum", "(", ")", "<=", "num_timesteps", "]", "\n", "tslist", ".", "append", "(", "ts", ")", "\n", "", "xy_list", "=", "[", "ts2xy", "(", "ts", ",", "xaxis", ")", "for", "ts", "in", "tslist", "]", "\n", "plot_curves", "(", "xy_list", ",", "xaxis", ",", "task_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.main": [[73, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "results_plotter.plot_results", "matplotlib.show", "os.path.abspath", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.results_plotter.plot_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "import", "argparse", "\n", "import", "os", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--dirs'", ",", "help", "=", "'List of log directories'", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "'./log'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--num_timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "10e6", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--xaxis'", ",", "help", "=", "'Varible on X-axis'", ",", "default", "=", "X_TIMESTEPS", ")", "\n", "parser", ".", "add_argument", "(", "'--task_name'", ",", "help", "=", "'Title of plot'", ",", "default", "=", "'Breakout'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "dirs", "=", "[", "os", ".", "path", ".", "abspath", "(", "dir", ")", "for", "dir", "in", "args", ".", "dirs", "]", "\n", "plot_results", "(", "args", ".", "dirs", ",", "args", ".", "num_timesteps", ",", "args", ".", "xaxis", ",", "args", ".", "task_name", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.KVWriter.writekvs": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.SeqWriter.writeseq": [[27, 29], ["None"], "methods", ["None"], ["    ", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat.__init__": [[31, 39], ["isinstance", "open", "hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename_or_file", ")", ":", "\n", "        ", "if", "isinstance", "(", "filename_or_file", ",", "str", ")", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "filename_or_file", ",", "'wt'", ")", "\n", "self", ".", "own_file", "=", "True", "\n", "", "else", ":", "\n", "            ", "assert", "hasattr", "(", "filename_or_file", ",", "'read'", ")", ",", "'expected file or str, got %s'", "%", "filename_or_file", "\n", "self", ".", "file", "=", "filename_or_file", "\n", "self", ".", "own_file", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat.writekvs": [[40, 73], ["sorted", "sorted", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "kvs.items", "isinstance", "logger.HumanOutputFormat._truncate", "len", "print", "max", "max", "key2str.items", "lines.append", "str", "map", "map", "logger.HumanOutputFormat._truncate", "key2str.keys", "key2str.values", "len", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat._truncate"], ["", "", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "valstr", "=", "'%-8.3g'", "%", "(", "val", ",", ")", "\n", "", "else", ":", "\n", "                ", "valstr", "=", "str", "(", "val", ")", "\n", "", "key2str", "[", "self", ".", "_truncate", "(", "key", ")", "]", "=", "self", ".", "_truncate", "(", "valstr", ")", "\n", "\n", "# Find max widths", "\n", "", "if", "len", "(", "key2str", ")", "==", "0", ":", "\n", "            ", "print", "(", "'WARNING: tried to write empty key-value dict'", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "keywidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "valwidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "", "dashes", "=", "'-'", "*", "(", "keywidth", "+", "valwidth", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "key2str", ".", "items", "(", ")", ")", ":", "\n", "            ", "lines", ".", "append", "(", "'| %s%s | %s%s |'", "%", "(", "\n", "key", ",", "\n", "' '", "*", "(", "keywidth", "-", "len", "(", "key", ")", ")", ",", "\n", "val", ",", "\n", "' '", "*", "(", "valwidth", "-", "len", "(", "val", ")", ")", ",", "\n", ")", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ".", "join", "(", "lines", ")", "+", "'\\n'", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat._truncate": [[74, 76], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", "[", ":", "20", "]", "+", "'...'", "if", "len", "(", "s", ")", ">", "23", "else", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat.writeseq": [[77, 82], ["logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "for", "arg", "in", "seq", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "arg", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat.close": [[83, 86], ["logger.HumanOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "own_file", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.JSONOutputFormat.__init__": [[88, 90], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "'wt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.JSONOutputFormat.writekvs": [[91, 98], ["sorted", "logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "kvs.items", "hasattr", "v.tolist.tolist.tolist", "float", "json.dumps"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'dtype'", ")", ":", "\n", "                ", "v", "=", "v", ".", "tolist", "(", ")", "\n", "kvs", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "kvs", ")", "+", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.JSONOutputFormat.close": [[99, 101], ["logger.JSONOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.CSVOutputFormat.__init__": [[103, 107], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "'w+t'", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "sep", "=", "','", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.CSVOutputFormat.writekvs": [[108, 133], ["enumerate", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.flush", "kvs.keys", "logger.CSVOutputFormat.keys.extend", "logger.CSVOutputFormat.file.seek", "logger.CSVOutputFormat.file.readlines", "logger.CSVOutputFormat.file.seek", "enumerate", "logger.CSVOutputFormat.file.write", "kvs.get", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "str", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Add our current row to the history", "\n", "        ", "extra_keys", "=", "kvs", ".", "keys", "(", ")", "-", "self", ".", "keys", "\n", "if", "extra_keys", ":", "\n", "            ", "self", ".", "keys", ".", "extend", "(", "extra_keys", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "lines", "=", "self", ".", "file", ".", "readlines", "(", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "                ", "if", "i", ">", "0", ":", "\n", "                    ", "self", ".", "file", ".", "write", "(", "','", ")", "\n", "", "self", ".", "file", ".", "write", "(", "k", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "sep", "*", "len", "(", "extra_keys", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "", "", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "','", ")", "\n", "", "v", "=", "kvs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.CSVOutputFormat.close": [[134, 136], ["logger.CSVOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.TensorBoardOutputFormat.__init__": [[142, 156], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "pywrap_tensorflow.EventsWriter", "os.abspath", "os.abspath", "compat.as_bytes"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "step", "=", "1", "\n", "prefix", "=", "'events'", "\n", "path", "=", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "dir", ")", ",", "prefix", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", "import", "pywrap_tensorflow", "\n", "from", "tensorflow", ".", "core", ".", "util", "import", "event_pb2", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "compat", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "event_pb2", "=", "event_pb2", "\n", "self", ".", "pywrap_tensorflow", "=", "pywrap_tensorflow", "\n", "self", ".", "writer", "=", "pywrap_tensorflow", ".", "EventsWriter", "(", "compat", ".", "as_bytes", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.TensorBoardOutputFormat.writekvs": [[157, 167], ["logger.TensorBoardOutputFormat.tf.Summary", "logger.TensorBoardOutputFormat.event_pb2.Event", "logger.TensorBoardOutputFormat.writer.WriteEvent", "logger.TensorBoardOutputFormat.writer.Flush", "logger.TensorBoardOutputFormat.tf.Summary.Value", "float", "time.time", "logger.TensorBoardOutputFormat.writekvs.summary_val"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "def", "summary_val", "(", "k", ",", "v", ")", ":", "\n", "            ", "kwargs", "=", "{", "'tag'", ":", "k", ",", "'simple_value'", ":", "float", "(", "v", ")", "}", "\n", "return", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "**", "kwargs", ")", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "summary_val", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kvs", ".", "items", "(", ")", "]", ")", "\n", "event", "=", "self", ".", "event_pb2", ".", "Event", "(", "wall_time", "=", "time", ".", "time", "(", ")", ",", "summary", "=", "summary", ")", "\n", "event", ".", "step", "=", "self", ".", "step", "# is there any reason why you'd want to specify the step?", "\n", "self", ".", "writer", ".", "WriteEvent", "(", "event", ")", "\n", "self", ".", "writer", ".", "Flush", "(", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.TensorBoardOutputFormat.close": [[168, 172], ["logger.TensorBoardOutputFormat.writer.Close"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "Close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.ProfileKV.__init__": [[267, 269], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "\"wait_\"", "+", "n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.ProfileKV.__enter__": [[269, 271], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t1", "=", "time", ".", "time", "(", ")", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.ProfileKV.__exit__": [[271, 273], ["time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "name2val", "[", "self", ".", "n", "]", "+=", "time", ".", "time", "(", ")", "-", "self", ".", "t1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.__init__": [[297, 303], ["collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ",", "output_formats", ")", ":", "\n", "        ", "self", ".", "name2val", "=", "defaultdict", "(", "float", ")", "# values this iteration", "\n", "self", ".", "name2cnt", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "level", "=", "INFO", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "output_formats", "=", "output_formats", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.logkv": [[306, 308], ["None"], "methods", ["None"], ["", "def", "logkv", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "name2val", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.logkv_mean": [[309, 316], ["None"], "methods", ["None"], ["", "def", "logkv_mean", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "if", "val", "is", "None", ":", "\n", "            ", "self", ".", "name2val", "[", "key", "]", "=", "None", "\n", "return", "\n", "", "oldval", ",", "cnt", "=", "self", ".", "name2val", "[", "key", "]", ",", "self", ".", "name2cnt", "[", "key", "]", "\n", "self", ".", "name2val", "[", "key", "]", "=", "oldval", "*", "cnt", "/", "(", "cnt", "+", "1", ")", "+", "val", "/", "(", "cnt", "+", "1", ")", "\n", "self", ".", "name2cnt", "[", "key", "]", "=", "cnt", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.dumpkvs": [[317, 324], ["logger.Logger.name2val.clear", "logger.Logger.name2cnt.clear", "isinstance", "fmt.writekvs"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.TensorBoardOutputFormat.writekvs"], ["", "def", "dumpkvs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "level", "==", "DISABLED", ":", "return", "\n", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "KVWriter", ")", ":", "\n", "                ", "fmt", ".", "writekvs", "(", "self", ".", "name2val", ")", "\n", "", "", "self", ".", "name2val", ".", "clear", "(", ")", "\n", "self", ".", "name2cnt", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.log": [[325, 328], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger._do_log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "        ", "if", "self", ".", "level", "<=", "level", ":", "\n", "            ", "self", ".", "_do_log", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.set_level": [[331, 333], ["None"], "methods", ["None"], ["", "", "def", "set_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.get_dir": [[334, 336], ["None"], "methods", ["None"], ["", "def", "get_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger.close": [[337, 340], ["fmt.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.Logger._do_log": [[343, 347], ["isinstance", "fmt.writeseq", "map"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.HumanOutputFormat.writeseq"], ["", "", "def", "_do_log", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "SeqWriter", ")", ":", "\n", "                ", "fmt", ".", "writeseq", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__init__": [[385, 389], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dir", "=", "None", ",", "format_strs", "=", "None", ")", ":", "\n", "        ", "self", ".", "dir", "=", "dir", "\n", "self", ".", "format_strs", "=", "format_strs", "\n", "self", ".", "prevlogger", "=", "None", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__": [[389, 392], ["logger.configure"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "prevlogger", "=", "Logger", ".", "CURRENT", "\n", "configure", "(", "dir", "=", "self", ".", "dir", ",", "format_strs", "=", "self", ".", "format_strs", ")", "\n", "", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__exit__": [[392, 395], ["Logger.CURRENT.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "self", ".", "prevlogger", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.make_output_format": [[173, 187], ["os.makedirs", "os.makedirs", "logger.HumanOutputFormat", "logger.HumanOutputFormat", "os.join", "logger.JSONOutputFormat", "os.join", "logger.CSVOutputFormat", "os.join", "logger.TensorBoardOutputFormat", "ValueError", "os.join"], "function", ["None"], ["", "", "", "def", "make_output_format", "(", "format", ",", "ev_dir", ",", "log_suffix", "=", "''", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "ev_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "format", "==", "'stdout'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "format", "==", "'log'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'log%s.txt'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'json'", ":", "\n", "        ", "return", "JSONOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress%s.json'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'csv'", ":", "\n", "        ", "return", "CSVOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress%s.csv'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'tensorboard'", ":", "\n", "        ", "return", "TensorBoardOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'tb%s'", "%", "log_suffix", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown format specified: %s'", "%", "(", "format", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv": [[192, 199], ["Logger.CURRENT.logkv"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv"], ["", "", "def", "logkv", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    Log a value of some diagnostic\n    Call this once for each diagnostic quantity, each iteration\n    If called many times, last value will be used.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "logkv", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv_mean": [[200, 205], ["Logger.CURRENT.logkv_mean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv_mean"], ["", "def", "logkv_mean", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    The same as logkv(), but if called many times, values averaged.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "logkv_mean", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkvs": [[206, 212], ["d.items", "logger.logkv"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv"], ["", "def", "logkvs", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Log a dictionary of key-value pairs\n    \"\"\"", "\n", "for", "(", "k", ",", "v", ")", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "logkv", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs": [[213, 221], ["Logger.CURRENT.dumpkvs"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs"], ["", "", "def", "dumpkvs", "(", ")", ":", "\n", "    ", "\"\"\"\n    Write all of the diagnostics from the current iteration\n\n    level: int. (see logger.py docs) If the global logger level is higher than\n                the level argument here, don't print to stdout.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.getkvs": [[222, 224], ["None"], "function", ["None"], ["", "def", "getkvs", "(", ")", ":", "\n", "    ", "return", "Logger", ".", "CURRENT", ".", "name2val", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log": [[226, 231], ["Logger.CURRENT.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Write the sequence of args, with no separators, to the console and output files (if you've configured an output file).\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "log", "(", "*", "args", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.debug": [[232, 234], ["logger.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "debug", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info": [[235, 237], ["logger.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "info", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.warn": [[238, 240], ["logger.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "warn", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.error": [[241, 243], ["logger.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "error", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.set_level": [[245, 250], ["Logger.CURRENT.set_level"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.set_level"], ["", "def", "set_level", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Set logging threshold on current logger.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "set_level", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir": [[251, 257], ["Logger.CURRENT.get_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["", "def", "get_dir", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get directory that log files are being written to.\n    will be None if there is no output directory (i.e., if you didn't call start)\n    \"\"\"", "\n", "return", "Logger", ".", "CURRENT", ".", "get_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.profile": [[274, 286], ["logger.ProfileKV", "func"], "function", ["None"], ["", "", "def", "profile", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n    Usage:\n    @profile(\"my_func\")\n    def my_func(): code\n    \"\"\"", "\n", "def", "decorator_with_name", "(", "func", ")", ":", "\n", "        ", "def", "func_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "with", "ProfileKV", "(", "n", ")", ":", "\n", "                ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "func_wrapper", "\n", "", "return", "decorator_with_name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure": [[350, 377], ["isinstance", "os.makedirs", "os.makedirs", "MPI.COMM_WORLD.Get_rank", "logger.Logger", "logger.log", "os.getenv", "os.getenv", "os.join", "logger.make_output_format", "tempfile.gettempdir", "datetime.datetime.now().strftime", "os.getenv", "os.getenv", "os.getenv", "os.getenv", "format_strs.split.split", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.make_output_format"], ["def", "configure", "(", "dir", "=", "None", ",", "format_strs", "=", "None", ")", ":", "\n", "    ", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "os", ".", "getenv", "(", "'OPENAI_LOGDIR'", ")", "\n", "", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"openai-%Y-%m-%d-%H-%M-%S-%f\"", ")", ")", "\n", "", "assert", "isinstance", "(", "dir", ",", "str", ")", "\n", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_suffix", "=", "''", "\n", "from", "mpi4py", "import", "MPI", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", ">", "0", ":", "\n", "        ", "log_suffix", "=", "\"-rank%03i\"", "%", "rank", "\n", "\n", "", "if", "format_strs", "is", "None", ":", "\n", "        ", "strs", ",", "strs_mpi", "=", "os", ".", "getenv", "(", "'OPENAI_LOG_FORMAT'", ")", ",", "os", ".", "getenv", "(", "'OPENAI_LOG_FORMAT_MPI'", ")", "\n", "format_strs", "=", "strs_mpi", "if", "rank", ">", "0", "else", "strs", "\n", "if", "format_strs", "is", "not", "None", ":", "\n", "            ", "format_strs", "=", "format_strs", ".", "split", "(", "','", ")", "\n", "", "else", ":", "\n", "            ", "format_strs", "=", "LOG_OUTPUT_FORMATS_MPI", "if", "rank", ">", "0", "else", "LOG_OUTPUT_FORMATS", "\n", "\n", "", "", "output_formats", "=", "[", "make_output_format", "(", "f", ",", "dir", ",", "log_suffix", ")", "for", "f", "in", "format_strs", "]", "\n", "\n", "Logger", ".", "CURRENT", "=", "Logger", "(", "dir", "=", "dir", ",", "output_formats", "=", "output_formats", ")", "\n", "log", "(", "'Logging to %s'", "%", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.reset": [[378, 383], ["Logger.CURRENT.close", "logger.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "if", "Logger", ".", "CURRENT", "is", "not", "Logger", ".", "DEFAULT", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "Logger", ".", "DEFAULT", "\n", "log", "(", "'Reset logger'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger._demo": [[398, 425], ["logger.info", "logger.debug", "logger.set_level", "logger.debug", "os.path.exists", "os.path.exists", "logger.configure", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.info", "logger.logkv_mean", "logger.logkv_mean", "logger.logkv", "logger.dumpkvs", "logger.info", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.dumpkvs", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.debug", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.set_level", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.debug", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv_mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv_mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs"], ["", "", "def", "_demo", "(", ")", ":", "\n", "    ", "info", "(", "\"hi\"", ")", "\n", "debug", "(", "\"shouldn't appear\"", ")", "\n", "set_level", "(", "DEBUG", ")", "\n", "debug", "(", "\"should appear\"", ")", "\n", "dir", "=", "\"/tmp/testlogging\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir", ")", "\n", "", "configure", "(", "dir", "=", "dir", ")", "\n", "logkv", "(", "\"a\"", ",", "3", ")", "\n", "logkv", "(", "\"b\"", ",", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see a = 5.5\"", ")", "\n", "logkv_mean", "(", "\"b\"", ",", "-", "22.5", ")", "\n", "logkv_mean", "(", "\"b\"", ",", "-", "44.4", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see b = 33.3\"", ")", "\n", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "\n", "logkv", "(", "\"a\"", ",", "\"longasslongasslongasslongasslongasslongassvalue\"", ")", "\n", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.read_json": [[431, 438], ["pandas.DataFrame", "open", "ds.append", "json.loads"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "import", "pandas", "\n", "ds", "=", "[", "]", "\n", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "ds", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "", "", "return", "pandas", ".", "DataFrame", "(", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.read_csv": [[439, 442], ["pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.read_csv"], ["", "def", "read_csv", "(", "fname", ")", ":", "\n", "    ", "import", "pandas", "\n", "return", "pandas", ".", "read_csv", "(", "fname", ",", "index_col", "=", "None", ",", "comment", "=", "'#'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.read_tb": [[443, 476], ["os.isdir", "collections.defaultdict", "np.empty", "sorted", "enumerate", "pandas.DataFrame", "glob", "os.basename().startswith", "tf.train.summary_iterator", "collections.defaultdict.keys", "os.join", "NotImplementedError", "len", "os.basename", "max", "tag2pairs[].append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "read_tb", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    path : a tensorboard file OR a directory, where we will find all TB files\n           of the form events.*\n    \"\"\"", "\n", "import", "pandas", "\n", "import", "numpy", "as", "np", "\n", "from", "glob", "import", "glob", "\n", "from", "collections", "import", "defaultdict", "\n", "import", "tensorflow", "as", "tf", "\n", "if", "osp", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "fnames", "=", "glob", "(", "osp", ".", "join", "(", "path", ",", "\"events.*\"", ")", ")", "\n", "", "elif", "osp", ".", "basename", "(", "path", ")", ".", "startswith", "(", "\"events.\"", ")", ":", "\n", "        ", "fnames", "=", "[", "path", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Expected tensorboard file or directory containing them. Got %s\"", "%", "path", ")", "\n", "", "tag2pairs", "=", "defaultdict", "(", "list", ")", "\n", "maxstep", "=", "0", "\n", "for", "fname", "in", "fnames", ":", "\n", "        ", "for", "summary", "in", "tf", ".", "train", ".", "summary_iterator", "(", "fname", ")", ":", "\n", "            ", "if", "summary", ".", "step", ">", "0", ":", "\n", "                ", "for", "v", "in", "summary", ".", "summary", ".", "value", ":", "\n", "                    ", "pair", "=", "(", "summary", ".", "step", ",", "v", ".", "simple_value", ")", "\n", "tag2pairs", "[", "v", ".", "tag", "]", ".", "append", "(", "pair", ")", "\n", "", "maxstep", "=", "max", "(", "summary", ".", "step", ",", "maxstep", ")", "\n", "", "", "", "data", "=", "np", ".", "empty", "(", "(", "maxstep", ",", "len", "(", "tag2pairs", ")", ")", ")", "\n", "data", "[", ":", "]", "=", "np", ".", "nan", "\n", "tags", "=", "sorted", "(", "tag2pairs", ".", "keys", "(", ")", ")", "\n", "for", "(", "colidx", ",", "tag", ")", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "pairs", "=", "tag2pairs", "[", "tag", "]", "\n", "for", "(", "step", ",", "value", ")", "in", "pairs", ":", "\n", "            ", "data", "[", "step", "-", "1", ",", "colidx", "]", "=", "value", "\n", "", "", "return", "pandas", ".", "DataFrame", "(", "data", ",", "columns", "=", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c.Model.__init__": [[19, 85], ["int", "baselines.common.tf_util.make_session", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "policy", "policy", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "baselines.a2c.utils.find_trainable_variables", "tensorflow.gradients", "list", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer.apply_gradients", "baselines.a2c.utils.Scheduler", "tensorflow.global_variables_initializer().run", "baselines.a2c.utils.mse", "baselines.a2c.utils.cat_entropy", "tensorflow.clip_by_global_norm", "zip", "range", "baselines.common.tf_util.make_session.run", "baselines.common.tf_util.make_session.run", "baselines.a2c.utils.make_path", "joblib.dump", "joblib.load", "zip", "baselines.common.tf_util.make_session.run", "tensorflow.squeeze", "len", "baselines.a2c.utils.Scheduler.value", "os.dirname", "restores.append", "tensorflow.global_variables_initializer", "p.assign"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.find_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.mse", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.make_path", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "policy", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "nsteps", ",", "\n", "ent_coef", "=", "0.01", ",", "vf_coef", "=", "0.5", ",", "max_grad_norm", "=", "0.5", ",", "lr", "=", "7e-4", ",", "\n", "alpha", "=", "0.99", ",", "epsilon", "=", "1e-5", ",", "total_timesteps", "=", "int", "(", "80e6", ")", ",", "lrschedule", "=", "'linear'", ")", ":", "\n", "\n", "        ", "sess", "=", "tf_util", ".", "make_session", "(", ")", "\n", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "\n", "A", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "nbatch", "]", ")", "\n", "ADV", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "\n", "R", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "\n", "LR", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "\n", "step_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "1", ",", "reuse", "=", "False", ")", "\n", "train_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", "*", "nsteps", ",", "nsteps", ",", "reuse", "=", "True", ")", "\n", "\n", "neglogpac", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "train_model", ".", "pi", ",", "labels", "=", "A", ")", "\n", "pg_loss", "=", "tf", ".", "reduce_mean", "(", "ADV", "*", "neglogpac", ")", "\n", "vf_loss", "=", "tf", ".", "reduce_mean", "(", "mse", "(", "tf", ".", "squeeze", "(", "train_model", ".", "vf", ")", ",", "R", ")", ")", "\n", "entropy", "=", "tf", ".", "reduce_mean", "(", "cat_entropy", "(", "train_model", ".", "pi", ")", ")", "\n", "loss", "=", "pg_loss", "-", "entropy", "*", "ent_coef", "+", "vf_loss", "*", "vf_coef", "\n", "\n", "params", "=", "find_trainable_variables", "(", "\"model\"", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "params", ")", "\n", "if", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "grads", ",", "grad_norm", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "max_grad_norm", ")", "\n", "", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "trainer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "LR", ",", "decay", "=", "alpha", ",", "epsilon", "=", "epsilon", ")", "\n", "_train", "=", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "lr", "=", "Scheduler", "(", "v", "=", "lr", ",", "nvalues", "=", "total_timesteps", ",", "schedule", "=", "lrschedule", ")", "\n", "\n", "def", "train", "(", "obs", ",", "states", ",", "rewards", ",", "masks", ",", "actions", ",", "values", ")", ":", "\n", "            ", "advs", "=", "rewards", "-", "values", "\n", "for", "step", "in", "range", "(", "len", "(", "obs", ")", ")", ":", "\n", "                ", "cur_lr", "=", "lr", ".", "value", "(", ")", "\n", "", "td_map", "=", "{", "train_model", ".", "X", ":", "obs", ",", "A", ":", "actions", ",", "ADV", ":", "advs", ",", "R", ":", "rewards", ",", "LR", ":", "cur_lr", "}", "\n", "if", "states", "is", "not", "None", ":", "\n", "                ", "td_map", "[", "train_model", ".", "S", "]", "=", "states", "\n", "td_map", "[", "train_model", ".", "M", "]", "=", "masks", "\n", "", "policy_loss", ",", "value_loss", ",", "policy_entropy", ",", "_", "=", "sess", ".", "run", "(", "\n", "[", "pg_loss", ",", "vf_loss", ",", "entropy", ",", "_train", "]", ",", "\n", "td_map", "\n", ")", "\n", "return", "policy_loss", ",", "value_loss", ",", "policy_entropy", "\n", "\n", "", "def", "save", "(", "save_path", ")", ":", "\n", "            ", "ps", "=", "sess", ".", "run", "(", "params", ")", "\n", "make_path", "(", "osp", ".", "dirname", "(", "save_path", ")", ")", "\n", "joblib", ".", "dump", "(", "ps", ",", "save_path", ")", "\n", "\n", "", "def", "load", "(", "load_path", ")", ":", "\n", "            ", "loaded_params", "=", "joblib", ".", "load", "(", "load_path", ")", "\n", "restores", "=", "[", "]", "\n", "for", "p", ",", "loaded_p", "in", "zip", "(", "params", ",", "loaded_params", ")", ":", "\n", "                ", "restores", ".", "append", "(", "p", ".", "assign", "(", "loaded_p", ")", ")", "\n", "", "sess", ".", "run", "(", "restores", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "train_model", "=", "train_model", "\n", "self", ".", "step_model", "=", "step_model", "\n", "self", ".", "step", "=", "step_model", ".", "step", "\n", "self", ".", "value", "=", "step_model", ".", "value", "\n", "self", ".", "initial_state", "=", "step_model", ".", "initial_state", "\n", "self", ".", "save", "=", "save", "\n", "self", ".", "load", "=", "load", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c.Runner.__init__": [[88, 92], ["baselines.common.runners.AbstractEnvRunner.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "model", ",", "nsteps", "=", "5", ",", "gamma", "=", "0.99", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "episodes_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c.Runner.run": [[93, 141], ["range", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes().reshape", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "a2c.Runner.model.value().tolist", "enumerate", "mb_rewards.flatten.flatten.flatten", "mb_actions.flatten.flatten.flatten", "mb_values.flatten.flatten.flatten", "mb_masks.flatten.flatten.flatten", "a2c.Runner.model.step", "numpy.asarray().swapaxes().reshape.append", "mb_actions.flatten.flatten.append", "mb_values.flatten.flatten.append", "numpy.asarray().swapaxes.append", "a2c.Runner.env.step", "enumerate", "mb_rewards.flatten.flatten.append", "zip", "baselines.a2c.utils.discount_with_dones.tolist", "dones.tolist.tolist.tolist", "numpy.copy", "info.get", "numpy.asarray().swapaxes", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "a2c.Runner.model.value", "baselines.a2c.utils.discount_with_dones", "epinfos.append", "baselines.a2c.utils.discount_with_dones", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.discount_with_dones", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.discount_with_dones"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "mb_obs", ",", "mb_rewards", ",", "mb_actions", ",", "mb_values", ",", "mb_dones", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "mb_states", "=", "self", ".", "states", "\n", "epinfos", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "nsteps", ")", ":", "\n", "            ", "actions", ",", "values", ",", "states", ",", "_", "=", "self", ".", "model", ".", "step", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", "\n", "mb_obs", ".", "append", "(", "np", ".", "copy", "(", "self", ".", "obs", ")", ")", "\n", "mb_actions", ".", "append", "(", "actions", ")", "\n", "mb_values", ".", "append", "(", "values", ")", "\n", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "for", "info", "in", "infos", ":", "\n", "                ", "maybeepinfo", "=", "info", ".", "get", "(", "'episode'", ")", "\n", "if", "maybeepinfo", ":", "\n", "                    ", "self", ".", "episodes_count", "+=", "1", "\n", "epinfos", ".", "append", "(", "maybeepinfo", ")", "\n", "\n", "", "", "self", ".", "states", "=", "states", "\n", "self", ".", "dones", "=", "dones", "\n", "for", "n", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "                ", "if", "done", ":", "\n", "                    ", "self", ".", "obs", "[", "n", "]", "=", "self", ".", "obs", "[", "n", "]", "*", "0", "\n", "", "", "self", ".", "obs", "=", "obs", "\n", "mb_rewards", ".", "append", "(", "rewards", ")", "\n", "", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "#batch of steps to batch of rollouts", "\n", "mb_obs", "=", "np", ".", "asarray", "(", "mb_obs", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "swapaxes", "(", "1", ",", "0", ")", ".", "reshape", "(", "self", ".", "batch_ob_shape", ")", "\n", "mb_rewards", "=", "np", ".", "asarray", "(", "mb_rewards", ",", "dtype", "=", "np", ".", "float32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_actions", "=", "np", ".", "asarray", "(", "mb_actions", ",", "dtype", "=", "np", ".", "int32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_values", "=", "np", ".", "asarray", "(", "mb_values", ",", "dtype", "=", "np", ".", "float32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_dones", "=", "np", ".", "asarray", "(", "mb_dones", ",", "dtype", "=", "np", ".", "bool", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_masks", "=", "mb_dones", "[", ":", ",", ":", "-", "1", "]", "\n", "mb_dones", "=", "mb_dones", "[", ":", ",", "1", ":", "]", "\n", "last_values", "=", "self", ".", "model", ".", "value", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", ".", "tolist", "(", ")", "\n", "#discount/bootstrap off value fn", "\n", "for", "n", ",", "(", "rewards", ",", "dones", ",", "value", ")", "in", "enumerate", "(", "zip", "(", "mb_rewards", ",", "mb_dones", ",", "last_values", ")", ")", ":", "\n", "            ", "rewards", "=", "rewards", ".", "tolist", "(", ")", "\n", "dones", "=", "dones", ".", "tolist", "(", ")", "\n", "if", "dones", "[", "-", "1", "]", "==", "0", ":", "\n", "                ", "rewards", "=", "discount_with_dones", "(", "rewards", "+", "[", "value", "]", ",", "dones", "+", "[", "0", "]", ",", "self", ".", "gamma", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "rewards", "=", "discount_with_dones", "(", "rewards", ",", "dones", ",", "self", ".", "gamma", ")", "\n", "", "mb_rewards", "[", "n", "]", "=", "rewards", "\n", "", "mb_rewards", "=", "mb_rewards", ".", "flatten", "(", ")", "\n", "mb_actions", "=", "mb_actions", ".", "flatten", "(", ")", "\n", "mb_values", "=", "mb_values", ".", "flatten", "(", ")", "\n", "mb_masks", "=", "mb_masks", ".", "flatten", "(", ")", "\n", "return", "mb_obs", ",", "mb_states", ",", "mb_rewards", ",", "mb_masks", ",", "mb_actions", ",", "mb_values", ",", "epinfos", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c.learn": [[142, 177], ["int", "baselines.common.set_global_seeds", "a2c.Model", "a2c.Runner", "collections.deque", "time.time", "range", "env.close", "a2c.Runner.run", "collections.deque.extend", "Model.train", "int", "time.time", "baselines.common.explained_variance", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.logkv", "baselines.logger.dump_tabular", "baselines.logger.logkv", "a2c.safemean", "a2c.safemean", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.explained_variance", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.safemean", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.safemean"], ["", "", "def", "learn", "(", "policy", ",", "env", ",", "seed", ",", "nsteps", "=", "5", ",", "total_timesteps", "=", "int", "(", "80e6", ")", ",", "vf_coef", "=", "0.5", ",", "ent_coef", "=", "0.01", ",", "max_grad_norm", "=", "0.5", ",", "lr", "=", "7e-4", ",", "lrschedule", "=", "'linear'", ",", "epsilon", "=", "1e-5", ",", "alpha", "=", "0.99", ",", "gamma", "=", "0.99", ",", "log_interval", "=", "100", ")", ":", "\n", "    ", "set_global_seeds", "(", "seed", ")", "\n", "\n", "nenvs", "=", "env", ".", "num_envs", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "model", "=", "Model", "(", "policy", "=", "policy", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "nenvs", "=", "nenvs", ",", "nsteps", "=", "nsteps", ",", "ent_coef", "=", "ent_coef", ",", "vf_coef", "=", "vf_coef", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "lr", "=", "lr", ",", "alpha", "=", "alpha", ",", "epsilon", "=", "epsilon", ",", "total_timesteps", "=", "total_timesteps", ",", "lrschedule", "=", "lrschedule", ")", "\n", "runner", "=", "Runner", "(", "env", ",", "model", ",", "nsteps", "=", "nsteps", ",", "gamma", "=", "gamma", ")", "\n", "\n", "epinfobuf", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "\n", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "for", "update", "in", "range", "(", "1", ",", "total_timesteps", "//", "nbatch", "+", "1", ")", ":", "\n", "        ", "obs", ",", "states", ",", "rewards", ",", "masks", ",", "actions", ",", "values", ",", "epinfos", "=", "runner", ".", "run", "(", ")", "\n", "epinfobuf", ".", "extend", "(", "epinfos", ")", "\n", "policy_loss", ",", "value_loss", ",", "policy_entropy", "=", "model", ".", "train", "(", "obs", ",", "states", ",", "rewards", ",", "masks", ",", "actions", ",", "values", ")", "\n", "nseconds", "=", "time", ".", "time", "(", ")", "-", "tstart", "\n", "fps", "=", "int", "(", "(", "update", "*", "nbatch", ")", "/", "nseconds", ")", "\n", "if", "update", "%", "log_interval", "==", "0", "or", "update", "==", "1", ":", "\n", "            ", "ev", "=", "explained_variance", "(", "values", ",", "rewards", ")", "\n", "logger", ".", "record_tabular", "(", "\"nupdates\"", ",", "update", ")", "\n", "logger", ".", "record_tabular", "(", "\"total_timesteps\"", ",", "update", "*", "nbatch", ")", "\n", "logger", ".", "record_tabular", "(", "\"fps\"", ",", "fps", ")", "\n", "logger", ".", "logkv", "(", "'eprewmean'", ",", "safemean", "(", "[", "epinfo", "[", "'r'", "]", "for", "epinfo", "in", "epinfobuf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "'eplenmean'", ",", "safemean", "(", "[", "epinfo", "[", "'l'", "]", "for", "epinfo", "in", "epinfobuf", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"policy_entropy\"", ",", "float", "(", "policy_entropy", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"value_loss\"", ",", "float", "(", "value_loss", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"explained_variance\"", ",", "float", "(", "ev", ")", ")", "\n", "logger", ".", "logkv", "(", "'time_elapsed'", ",", "nseconds", ")", "\n", "logger", ".", "dump_tabular", "(", ")", "\n", "logger", ".", "logkv", "(", "'episodes'", ",", "runner", ".", "episodes_count", ")", "\n", "", "", "env", ".", "close", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c.safemean": [[178, 180], ["numpy.mean", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "def", "safemean", "(", "xs", ")", ":", "\n", "    ", "return", "np", ".", "nan", "if", "len", "(", "xs", ")", "==", "0", "else", "np", ".", "mean", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.run_atari_sil.train": [[9, 22], ["baselines.common.vec_env.vec_frame_stack.VecFrameStack", "baselines.a2c.a2c_sil.learn", "baselines.common.vec_env.vec_frame_stack.VecFrameStack.close", "baselines.common.cmd_util.make_atari_env", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env"], ["def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ",", "policy", ",", "lrschedule", ",", "num_env", ",", "sil_update", ",", "sil_beta", ")", ":", "\n", "    ", "if", "policy", "==", "'cnn'", ":", "\n", "        ", "policy_fn", "=", "CnnPolicy", "\n", "", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env_args", "=", "{", "'episode_life'", ":", "False", ",", "'clip_rewards'", ":", "False", "}", "\n", "env", "=", "VecFrameStack", "(", "\n", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ",", "wrapper_kwargs", "=", "env_args", ")", ",", "4", ")", "\n", "learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ",", "\n", "sil_update", "=", "sil_update", ",", "sil_beta", "=", "sil_beta", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.run_atari_sil.main": [[23, 36], ["baselines.common.cmd_util.atari_arg_parser", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.parse_args", "baselines.logger.configure", "run_atari_sil.train"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "help", "=", "'Policy architecture'", ",", "choices", "=", "[", "'cnn'", ",", "'lstm'", ",", "'lnlstm'", "]", ",", "default", "=", "'cnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "help", "=", "'Learning rate schedule'", ",", "choices", "=", "[", "'constant'", ",", "'linear'", "]", ",", "default", "=", "'constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--sil-update'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Number of updates per iteration\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sil-beta'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"Beta for weighted IS\"", ")", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "default", "=", "'/tmp/a2c'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "policy", "=", "args", ".", "policy", ",", "lrschedule", "=", "args", ".", "lrschedule", ",", "\n", "sil_update", "=", "args", ".", "sil_update", ",", "sil_beta", "=", "args", ".", "sil_beta", ",", "\n", "num_env", "=", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.policies.LnLstmPolicy.__init__": [[22, 54], ["baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.distributions.make_pdtype", "policies.LnLstmPolicy.pd.sample", "policies.LnLstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.lnlstm", "baselines.a2c.utils.seq_to_batch", "baselines.a2c.utils.fc", "policies.LnLstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lnlstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lnlstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.policies.LstmPolicy.__init__": [[57, 90], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "policies.LstmPolicy.pd.sample", "policies.LstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.lstm", "baselines.a2c.utils.seq_to_batch", "baselines.a2c.utils.fc", "policies.LstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "X", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.policies.CnnPolicy.__init__": [[93, 124], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "policies.CnnPolicy.pd.sample", "policies.CnnPolicy.pd.neglogp", "baselines.a2c.utils.cat_entropy", "tensorflow.variable_scope", "policies.nature_cnn", "policies.CnnPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "baselines.a2c.utils.fc"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ",", "**", "conv_kwargs", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "#X, processed_x = observation_input(ob_space, nbatch)", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "None", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ",", "**", "conv_kwargs", ")", "\n", "vf", "=", "fc", "(", "h", ",", "'v'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "self", ".", "entropy", "=", "cat_entropy", "(", "self", ".", "pi", ")", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "def", "neg_log_prob", "(", "actions", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "pi", ",", "labels", "=", "actions", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "neg_log_prob", "=", "neg_log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.policies.MlpPolicy.__init__": [[126, 156], ["baselines.common.distributions.make_pdtype", "policies.MlpPolicy.pd.sample", "policies.MlpPolicy.pd.neglogp", "tensorflow.variable_scope", "baselines.common.input.observation_input", "tensorflow.layers.flatten", "activ", "activ", "activ", "activ", "policies.MlpPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "activ", "=", "tf", ".", "tanh", "\n", "processed_x", "=", "tf", ".", "layers", ".", "flatten", "(", "processed_x", ")", "\n", "pi_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'pi_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "pi_h2", "=", "activ", "(", "fc", "(", "pi_h1", ",", "'pi_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'vf_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h2", "=", "activ", "(", "fc", "(", "vf_h1", ",", "'vf_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf", "=", "fc", "(", "vf_h2", ",", "'vf'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "pi_h2", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.policies.nature_cnn": [[8, 20], ["activ", "activ", "activ", "baselines.a2c.utils.conv_to_fc", "activ", "tensorflow.cast", "baselines.a2c.utils.conv", "baselines.a2c.utils.conv", "baselines.a2c.utils.conv", "baselines.a2c.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv_to_fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["def", "nature_cnn", "(", "unscaled_images", ",", "**", "conv_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    CNN from Nature paper.\n    \"\"\"", "\n", "scaled_images", "=", "tf", ".", "cast", "(", "unscaled_images", ",", "tf", ".", "float32", ")", "/", "255.", "\n", "activ", "=", "tf", ".", "nn", ".", "relu", "\n", "h", "=", "activ", "(", "conv", "(", "scaled_images", ",", "'c1'", ",", "nf", "=", "32", ",", "rf", "=", "8", ",", "stride", "=", "4", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "**", "conv_kwargs", ")", ")", "\n", "h2", "=", "activ", "(", "conv", "(", "h", ",", "'c2'", ",", "nf", "=", "64", ",", "rf", "=", "4", ",", "stride", "=", "2", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "activ", "(", "conv", "(", "h2", ",", "'c3'", ",", "nf", "=", "64", ",", "rf", "=", "3", ",", "stride", "=", "1", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "conv_to_fc", "(", "h3", ")", "\n", "return", "activ", "(", "fc", "(", "h3", ",", "'fc1'", ",", "nh", "=", "512", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c_sil.Model.__init__": [[20, 99], ["int", "baselines.common.tf_util.make_session", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "policy", "policy", "policy", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "baselines.a2c.utils.find_trainable_variables", "tensorflow.gradients", "list", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer.apply_gradients", "baselines.a2c.utils.Scheduler", "baselines.common.self_imitation.SelfImitation", "a2c_sil.Model.sil.build_train_op", "tensorflow.global_variables_initializer().run", "baselines.a2c.utils.mse", "baselines.a2c.utils.cat_entropy", "tensorflow.clip_by_global_norm", "zip", "range", "baselines.common.tf_util.make_session.run", "baselines.a2c.utils.Scheduler.value", "a2c_sil.Model.sil.train", "baselines.common.tf_util.make_session.run", "baselines.a2c.utils.make_path", "joblib.dump", "joblib.load", "zip", "baselines.common.tf_util.make_session.run", "tensorflow.squeeze", "len", "baselines.a2c.utils.Scheduler.value", "os.dirname", "restores.append", "tensorflow.global_variables_initializer", "p.assign"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.find_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.build_train_op", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.mse", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.make_path", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "policy", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "nsteps", ",", "\n", "ent_coef", "=", "0.01", ",", "vf_coef", "=", "0.5", ",", "max_grad_norm", "=", "0.5", ",", "lr", "=", "7e-4", ",", "\n", "alpha", "=", "0.99", ",", "epsilon", "=", "1e-5", ",", "total_timesteps", "=", "int", "(", "80e6", ")", ",", "lrschedule", "=", "'linear'", ",", "\n", "sil_update", "=", "4", ",", "sil_beta", "=", "0.0", ")", ":", "\n", "\n", "        ", "sess", "=", "tf_util", ".", "make_session", "(", ")", "\n", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "\n", "A", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "nbatch", "]", ")", "\n", "ADV", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "\n", "R", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "\n", "LR", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "\n", "step_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "1", ",", "reuse", "=", "False", ")", "\n", "train_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", "*", "nsteps", ",", "nsteps", ",", "reuse", "=", "True", ")", "\n", "sil_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "nsteps", ",", "reuse", "=", "True", ")", "\n", "\n", "neglogpac", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "train_model", ".", "pi", ",", "labels", "=", "A", ")", "\n", "pg_loss", "=", "tf", ".", "reduce_mean", "(", "ADV", "*", "neglogpac", ")", "\n", "vf_loss", "=", "tf", ".", "reduce_mean", "(", "mse", "(", "tf", ".", "squeeze", "(", "train_model", ".", "vf", ")", ",", "R", ")", ")", "\n", "entropy", "=", "tf", ".", "reduce_mean", "(", "cat_entropy", "(", "train_model", ".", "pi", ")", ")", "\n", "loss", "=", "pg_loss", "-", "entropy", "*", "ent_coef", "+", "vf_loss", "*", "vf_coef", "\n", "value_avg", "=", "tf", ".", "reduce_mean", "(", "train_model", ".", "vf", ")", "\n", "\n", "params", "=", "find_trainable_variables", "(", "\"model\"", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "params", ")", "\n", "if", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "grads", ",", "grad_norm", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "max_grad_norm", ")", "\n", "", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "trainer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "LR", ",", "decay", "=", "alpha", ",", "epsilon", "=", "epsilon", ")", "\n", "_train", "=", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "lr", "=", "Scheduler", "(", "v", "=", "lr", ",", "nvalues", "=", "total_timesteps", ",", "schedule", "=", "lrschedule", ")", "\n", "\n", "def", "train", "(", "obs", ",", "states", ",", "rewards", ",", "masks", ",", "actions", ",", "values", ")", ":", "\n", "            ", "advs", "=", "rewards", "-", "values", "\n", "for", "step", "in", "range", "(", "len", "(", "obs", ")", ")", ":", "\n", "                ", "cur_lr", "=", "lr", ".", "value", "(", ")", "\n", "", "td_map", "=", "{", "train_model", ".", "X", ":", "obs", ",", "A", ":", "actions", ",", "ADV", ":", "advs", ",", "R", ":", "rewards", ",", "LR", ":", "cur_lr", "}", "\n", "if", "states", "is", "not", "None", ":", "\n", "                ", "td_map", "[", "train_model", ".", "S", "]", "=", "states", "\n", "td_map", "[", "train_model", ".", "M", "]", "=", "masks", "\n", "", "policy_loss", ",", "value_loss", ",", "policy_entropy", ",", "v_avg", ",", "_", "=", "sess", ".", "run", "(", "\n", "[", "pg_loss", ",", "vf_loss", ",", "entropy", ",", "value_avg", ",", "_train", "]", ",", "\n", "td_map", "\n", ")", "\n", "return", "policy_loss", ",", "value_loss", ",", "policy_entropy", ",", "v_avg", "\n", "\n", "", "self", ".", "sil", "=", "SelfImitation", "(", "sil_model", ".", "X", ",", "sil_model", ".", "vf", ",", "\n", "sil_model", ".", "entropy", ",", "sil_model", ".", "value", ",", "sil_model", ".", "neg_log_prob", ",", "\n", "ac_space", ",", "np", ".", "sign", ",", "n_env", "=", "nenvs", ",", "n_update", "=", "sil_update", ",", "beta", "=", "sil_beta", ")", "\n", "self", ".", "sil", ".", "build_train_op", "(", "params", ",", "trainer", ",", "LR", ",", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "\n", "def", "sil_train", "(", ")", ":", "\n", "            ", "cur_lr", "=", "lr", ".", "value", "(", ")", "\n", "return", "self", ".", "sil", ".", "train", "(", "sess", ",", "cur_lr", ")", "\n", "\n", "", "def", "save", "(", "save_path", ")", ":", "\n", "            ", "ps", "=", "sess", ".", "run", "(", "params", ")", "\n", "make_path", "(", "osp", ".", "dirname", "(", "save_path", ")", ")", "\n", "joblib", ".", "dump", "(", "ps", ",", "save_path", ")", "\n", "\n", "", "def", "load", "(", "load_path", ")", ":", "\n", "            ", "loaded_params", "=", "joblib", ".", "load", "(", "load_path", ")", "\n", "restores", "=", "[", "]", "\n", "for", "p", ",", "loaded_p", "in", "zip", "(", "params", ",", "loaded_params", ")", ":", "\n", "                ", "restores", ".", "append", "(", "p", ".", "assign", "(", "loaded_p", ")", ")", "\n", "", "sess", ".", "run", "(", "restores", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "train_model", "=", "train_model", "\n", "self", ".", "sil_train", "=", "sil_train", "\n", "self", ".", "step_model", "=", "step_model", "\n", "self", ".", "step", "=", "step_model", ".", "step", "\n", "self", ".", "value", "=", "step_model", ".", "value", "\n", "self", ".", "initial_state", "=", "step_model", ".", "initial_state", "\n", "self", ".", "save", "=", "save", "\n", "self", ".", "load", "=", "load", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c_sil.Runner.__init__": [[102, 105], ["baselines.common.runners.AbstractEnvRunner.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "model", ",", "nsteps", "=", "5", ",", "gamma", "=", "0.99", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c_sil.Runner.run": [[106, 153], ["range", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes().reshape", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "a2c_sil.Runner.model.value().tolist", "enumerate", "mb_rewards.flatten.flatten.flatten", "mb_raw_rewards.flatten.flatten.flatten", "mb_actions.flatten.flatten.flatten", "mb_values.flatten.flatten.flatten", "mb_masks.flatten.flatten.flatten", "a2c_sil.Runner.model.step", "numpy.asarray().swapaxes().reshape.append", "mb_actions.flatten.flatten.append", "mb_values.flatten.flatten.append", "numpy.asarray().swapaxes.append", "a2c_sil.Runner.env.step", "numpy.sign", "hasattr", "enumerate", "mb_rewards.flatten.flatten.append", "mb_raw_rewards.flatten.flatten.append", "zip", "baselines.a2c.utils.discount_with_dones.tolist", "dones.tolist.tolist.tolist", "numpy.copy", "a2c_sil.Runner.model.sil.step", "numpy.asarray().swapaxes", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "a2c_sil.Runner.model.value", "baselines.a2c.utils.discount_with_dones", "baselines.a2c.utils.discount_with_dones", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.discount_with_dones", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.discount_with_dones"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "mb_obs", ",", "mb_rewards", ",", "mb_actions", ",", "mb_values", ",", "mb_dones", ",", "mb_raw_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "mb_states", "=", "self", ".", "states", "\n", "for", "n", "in", "range", "(", "self", ".", "nsteps", ")", ":", "\n", "            ", "actions", ",", "values", ",", "states", ",", "_", "=", "self", ".", "model", ".", "step", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", "\n", "mb_obs", ".", "append", "(", "np", ".", "copy", "(", "self", ".", "obs", ")", ")", "\n", "mb_actions", ".", "append", "(", "actions", ")", "\n", "mb_values", ".", "append", "(", "values", ")", "\n", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "obs", ",", "raw_rewards", ",", "dones", ",", "_", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "rewards", "=", "np", ".", "sign", "(", "raw_rewards", ")", "\n", "self", ".", "states", "=", "states", "\n", "self", ".", "dones", "=", "dones", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'sil'", ")", ":", "\n", "                ", "self", ".", "model", ".", "sil", ".", "step", "(", "self", ".", "obs", ",", "actions", ",", "raw_rewards", ",", "dones", ")", "\n", "", "for", "n", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "                ", "if", "done", ":", "\n", "                    ", "self", ".", "obs", "[", "n", "]", "=", "self", ".", "obs", "[", "n", "]", "*", "0", "\n", "", "", "self", ".", "obs", "=", "obs", "\n", "mb_rewards", ".", "append", "(", "rewards", ")", "\n", "mb_raw_rewards", ".", "append", "(", "raw_rewards", ")", "\n", "", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "#batch of steps to batch of rollouts", "\n", "mb_obs", "=", "np", ".", "asarray", "(", "mb_obs", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "swapaxes", "(", "1", ",", "0", ")", ".", "reshape", "(", "self", ".", "batch_ob_shape", ")", "\n", "mb_rewards", "=", "np", ".", "asarray", "(", "mb_rewards", ",", "dtype", "=", "np", ".", "float32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_raw_rewards", "=", "np", ".", "asarray", "(", "mb_raw_rewards", ",", "dtype", "=", "np", ".", "float32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_actions", "=", "np", ".", "asarray", "(", "mb_actions", ",", "dtype", "=", "np", ".", "int32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_values", "=", "np", ".", "asarray", "(", "mb_values", ",", "dtype", "=", "np", ".", "float32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_dones", "=", "np", ".", "asarray", "(", "mb_dones", ",", "dtype", "=", "np", ".", "bool", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_masks", "=", "mb_dones", "[", ":", ",", ":", "-", "1", "]", "\n", "mb_dones", "=", "mb_dones", "[", ":", ",", "1", ":", "]", "\n", "last_values", "=", "self", ".", "model", ".", "value", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", ".", "tolist", "(", ")", "\n", "#discount/bootstrap off value fn", "\n", "for", "n", ",", "(", "rewards", ",", "dones", ",", "value", ")", "in", "enumerate", "(", "zip", "(", "mb_rewards", ",", "mb_dones", ",", "last_values", ")", ")", ":", "\n", "            ", "rewards", "=", "rewards", ".", "tolist", "(", ")", "\n", "dones", "=", "dones", ".", "tolist", "(", ")", "\n", "if", "dones", "[", "-", "1", "]", "==", "0", ":", "\n", "                ", "rewards", "=", "discount_with_dones", "(", "rewards", "+", "[", "value", "]", ",", "dones", "+", "[", "0", "]", ",", "self", ".", "gamma", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "rewards", "=", "discount_with_dones", "(", "rewards", ",", "dones", ",", "self", ".", "gamma", ")", "\n", "", "mb_rewards", "[", "n", "]", "=", "rewards", "\n", "", "mb_rewards", "=", "mb_rewards", ".", "flatten", "(", ")", "\n", "mb_raw_rewards", "=", "mb_raw_rewards", ".", "flatten", "(", ")", "\n", "mb_actions", "=", "mb_actions", ".", "flatten", "(", ")", "\n", "mb_values", "=", "mb_values", ".", "flatten", "(", ")", "\n", "mb_masks", "=", "mb_masks", ".", "flatten", "(", ")", "\n", "return", "mb_obs", ",", "mb_states", ",", "mb_rewards", ",", "mb_masks", ",", "mb_actions", ",", "mb_values", ",", "mb_raw_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.a2c_sil.learn": [[154, 191], ["int", "baselines.common.set_global_seeds", "a2c_sil.Model", "a2c_sil.Runner", "baselines.a2c.utils.EpisodeStats", "time.time", "range", "env.close", "a2c_sil.Runner.run", "baselines.a2c.utils.EpisodeStats.feed", "Model.train", "Model.sil_train", "int", "time.time", "baselines.common.explained_variance", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.dump_tabular", "float", "float", "float", "baselines.a2c.utils.EpisodeStats.mean_reward", "float", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "Model.sil.get_best_reward", "float", "float", "float", "Model.sil.num_episodes", "Model.sil.num_steps"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.feed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.explained_variance", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.mean_reward", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.get_best_reward", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.num_episodes", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.num_steps"], ["", "", "def", "learn", "(", "policy", ",", "env", ",", "seed", ",", "nsteps", "=", "5", ",", "total_timesteps", "=", "int", "(", "80e6", ")", ",", "vf_coef", "=", "0.5", ",", "ent_coef", "=", "0.01", ",", "max_grad_norm", "=", "0.5", ",", "lr", "=", "7e-4", ",", "lrschedule", "=", "'linear'", ",", "epsilon", "=", "1e-5", ",", "alpha", "=", "0.99", ",", "gamma", "=", "0.99", ",", "log_interval", "=", "100", ",", "sil_update", "=", "4", ",", "sil_beta", "=", "0.0", ")", ":", "\n", "    ", "set_global_seeds", "(", "seed", ")", "\n", "\n", "nenvs", "=", "env", ".", "num_envs", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "model", "=", "Model", "(", "policy", "=", "policy", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "nenvs", "=", "nenvs", ",", "nsteps", "=", "nsteps", ",", "ent_coef", "=", "ent_coef", ",", "vf_coef", "=", "vf_coef", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "lr", "=", "lr", ",", "alpha", "=", "alpha", ",", "epsilon", "=", "epsilon", ",", "total_timesteps", "=", "total_timesteps", ",", "lrschedule", "=", "lrschedule", ",", "sil_update", "=", "sil_update", ",", "sil_beta", "=", "sil_beta", ")", "\n", "runner", "=", "Runner", "(", "env", ",", "model", ",", "nsteps", "=", "nsteps", ",", "gamma", "=", "gamma", ")", "\n", "\n", "episode_stats", "=", "EpisodeStats", "(", "nsteps", ",", "nenvs", ")", "\n", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "for", "update", "in", "range", "(", "1", ",", "total_timesteps", "//", "nbatch", "+", "1", ")", ":", "\n", "        ", "obs", ",", "states", ",", "rewards", ",", "masks", ",", "actions", ",", "values", ",", "raw_rewards", "=", "runner", ".", "run", "(", ")", "\n", "episode_stats", ".", "feed", "(", "raw_rewards", ",", "masks", ")", "\n", "policy_loss", ",", "value_loss", ",", "policy_entropy", ",", "v_avg", "=", "model", ".", "train", "(", "obs", ",", "states", ",", "rewards", ",", "masks", ",", "actions", ",", "values", ")", "\n", "sil_loss", ",", "sil_adv", ",", "sil_samples", ",", "sil_nlogp", "=", "model", ".", "sil_train", "(", ")", "\n", "nseconds", "=", "time", ".", "time", "(", ")", "-", "tstart", "\n", "fps", "=", "int", "(", "(", "update", "*", "nbatch", ")", "/", "nseconds", ")", "\n", "if", "update", "%", "log_interval", "==", "0", "or", "update", "==", "1", ":", "\n", "            ", "ev", "=", "explained_variance", "(", "values", ",", "rewards", ")", "\n", "logger", ".", "record_tabular", "(", "\"nupdates\"", ",", "update", ")", "\n", "logger", ".", "record_tabular", "(", "\"total_timesteps\"", ",", "update", "*", "nbatch", ")", "\n", "logger", ".", "record_tabular", "(", "\"fps\"", ",", "fps", ")", "\n", "logger", ".", "record_tabular", "(", "\"policy_entropy\"", ",", "float", "(", "policy_entropy", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"value_loss\"", ",", "float", "(", "value_loss", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"explained_variance\"", ",", "float", "(", "ev", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"episode_reward\"", ",", "episode_stats", ".", "mean_reward", "(", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"best_episode_reward\"", ",", "float", "(", "model", ".", "sil", ".", "get_best_reward", "(", ")", ")", ")", "\n", "if", "sil_update", ">", "0", ":", "\n", "                ", "logger", ".", "record_tabular", "(", "\"sil_num_episodes\"", ",", "float", "(", "model", ".", "sil", ".", "num_episodes", "(", ")", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"sil_valid_samples\"", ",", "float", "(", "sil_samples", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"sil_steps\"", ",", "float", "(", "model", ".", "sil", ".", "num_steps", "(", ")", ")", ")", "\n", "", "logger", ".", "dump_tabular", "(", ")", "\n", "", "", "env", ".", "close", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.Scheduler.__init__": [[207, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "v", ",", "nvalues", ",", "schedule", ")", ":", "\n", "        ", "self", ".", "n", "=", "0.", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "nvalues", "=", "nvalues", "\n", "self", ".", "schedule", "=", "schedules", "[", "schedule", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.Scheduler.value": [[213, 217], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "current_value", "=", "self", ".", "v", "*", "self", ".", "schedule", "(", "self", ".", "n", "/", "self", ".", "nvalues", ")", "\n", "self", ".", "n", "+=", "1.", "\n", "return", "current_value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.Scheduler.value_steps": [[218, 220], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value_steps", "(", "self", ",", "steps", ")", ":", "\n", "        ", "return", "self", ".", "v", "*", "self", ".", "schedule", "(", "steps", "/", "self", ".", "nvalues", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.EpisodeStats.__init__": [[223, 231], ["range", "collections.deque", "collections.deque", "utils.EpisodeStats.episode_rewards.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "nsteps", ",", "nenvs", ")", ":", "\n", "        ", "self", ".", "episode_rewards", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nenvs", ")", ":", "\n", "            ", "self", ".", "episode_rewards", ".", "append", "(", "[", "]", ")", "\n", "", "self", ".", "lenbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode lengths", "\n", "self", ".", "rewbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode rewards", "\n", "self", ".", "nsteps", "=", "nsteps", "\n", "self", ".", "nenvs", "=", "nenvs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.EpisodeStats.feed": [[232, 244], ["numpy.reshape", "numpy.reshape", "range", "range", "utils.EpisodeStats.episode_rewards[].append", "len", "sum", "utils.EpisodeStats.lenbuffer.append", "utils.EpisodeStats.rewbuffer.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "feed", "(", "self", ",", "rewards", ",", "masks", ")", ":", "\n", "        ", "rewards", "=", "np", ".", "reshape", "(", "rewards", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "masks", "=", "np", ".", "reshape", "(", "masks", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "nenvs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "self", ".", "nsteps", ")", ":", "\n", "                ", "self", ".", "episode_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", "[", "j", "]", ")", "\n", "if", "masks", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "l", "=", "len", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "s", "=", "sum", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "self", ".", "lenbuffer", ".", "append", "(", "l", ")", "\n", "self", ".", "rewbuffer", ".", "append", "(", "s", ")", "\n", "self", ".", "episode_rewards", "[", "i", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.EpisodeStats.mean_length": [[245, 250], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "", "", "def", "mean_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "lenbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "lenbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "# on the first params dump, no episodes are finished", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.EpisodeStats.mean_reward": [[251, 256], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "def", "mean_reward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rewbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "rewbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.sample": [[8, 11], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["def", "sample", "(", "logits", ")", ":", "\n", "    ", "noise", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "noise", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.cat_entropy": [[12, 18], ["tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy", "(", "logits", ")", ":", "\n", "    ", "a0", "=", "logits", "-", "tf", ".", "reduce_max", "(", "logits", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.cat_entropy_softmax": [[19, 21], ["tensorflow.reduce_sum", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy_softmax", "(", "p0", ")", ":", "\n", "    ", "return", "-", "tf", ".", "reduce_sum", "(", "p0", "*", "tf", ".", "log", "(", "p0", "+", "1e-6", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.mse": [[22, 24], ["tensorflow.square"], "function", ["None"], ["", "def", "mse", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "square", "(", "pred", "-", "target", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.ortho_init": [[25, 41], ["tuple", "numpy.random.normal", "numpy.linalg.svd", "q.reshape.reshape", "len", "len", "numpy.prod"], "function", ["None"], ["", "def", "ortho_init", "(", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_ortho_init", "(", "shape", ",", "dtype", ",", "partition_info", "=", "None", ")", ":", "\n", "#lasagne ortho init for tf", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "flat_shape", "=", "shape", "\n", "", "elif", "len", "(", "shape", ")", "==", "4", ":", "# assumes NHWC", "\n", "            ", "flat_shape", "=", "(", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "# pick the one with the correct shape", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "(", "scale", "*", "q", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "_ortho_init", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.conv": [[42, 62], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "x.get_shape", "tensorflow.reshape", "tensorflow.nn.conv2d", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "def", "conv", "(", "x", ",", "scope", ",", "*", ",", "nf", ",", "rf", ",", "stride", ",", "pad", "=", "'VALID'", ",", "init_scale", "=", "1.0", ",", "data_format", "=", "'NHWC'", ",", "one_dim_bias", "=", "False", ")", ":", "\n", "    ", "if", "data_format", "==", "'NHWC'", ":", "\n", "        ", "channel_ax", "=", "3", "\n", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "bshape", "=", "[", "1", ",", "1", ",", "1", ",", "nf", "]", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "        ", "channel_ax", "=", "1", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "bshape", "=", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "bias_var_shape", "=", "[", "nf", "]", "if", "one_dim_bias", "else", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "channel_ax", "]", ".", "value", "\n", "wshape", "=", "[", "rf", ",", "rf", ",", "nin", ",", "nf", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "wshape", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "bias_var_shape", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "if", "not", "one_dim_bias", "and", "data_format", "==", "'NHWC'", ":", "\n", "            ", "b", "=", "tf", ".", "reshape", "(", "b", ",", "bshape", ")", "\n", "", "return", "b", "+", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "strides", ",", "padding", "=", "pad", ",", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.fc": [[63, 69], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "x.get_shape", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "fc", "(", "x", ",", "scope", ",", "nh", ",", "*", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "nin", ",", "nh", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_bias", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.batch_to_seq": [[70, 76], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.squeeze", "tensorflow.split"], "function", ["None"], ["", "", "def", "batch_to_seq", "(", "h", ",", "nbatch", ",", "nsteps", ",", "flat", "=", "False", ")", ":", "\n", "    ", "if", "flat", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", "]", ")", "\n", "", "else", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", ",", "-", "1", "]", ")", "\n", "", "return", "[", "tf", ".", "squeeze", "(", "v", ",", "[", "1", "]", ")", "for", "v", "in", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "nsteps", ",", "value", "=", "h", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.seq_to_batch": [[77, 85], ["h[].get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "h[].get_shape", "len", "tensorflow.concat", "tensorflow.stack", "h[].get_shape"], "function", ["None"], ["", "def", "seq_to_batch", "(", "h", ",", "flat", "=", "False", ")", ":", "\n", "    ", "shape", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "not", "flat", ":", "\n", "        ", "assert", "(", "len", "(", "shape", ")", ">", "1", ")", "\n", "nh", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "h", ")", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "values", "=", "h", ",", "axis", "=", "1", ")", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.lstm": [[86, 109], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "lstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "tf", ".", "matmul", "(", "x", ",", "wx", ")", "+", "tf", ".", "matmul", "(", "h", ",", "wh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "c", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils._ln": [[110, 115], ["tensorflow.nn.moments", "tensorflow.sqrt"], "function", ["None"], ["", "def", "_ln", "(", "x", ",", "g", ",", "b", ",", "e", "=", "1e-5", ",", "axes", "=", "[", "1", "]", ")", ":", "\n", "    ", "u", ",", "s", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "axes", ",", "keep_dims", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "tf", ".", "sqrt", "(", "s", "+", "e", ")", "\n", "x", "=", "x", "*", "g", "+", "b", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.lnlstm": [[116, 148], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils._ln", "utils._ln", "utils._ln", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln"], ["", "def", "lnlstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gx", "=", "tf", ".", "get_variable", "(", "\"gx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bx", "=", "tf", ".", "get_variable", "(", "\"bx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gh", "=", "tf", ".", "get_variable", "(", "\"gh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bh", "=", "tf", ".", "get_variable", "(", "\"bh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "gc", "=", "tf", ".", "get_variable", "(", "\"gc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bc", "=", "tf", ".", "get_variable", "(", "\"bc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "_ln", "(", "tf", ".", "matmul", "(", "x", ",", "wx", ")", ",", "gx", ",", "bx", ")", "+", "_ln", "(", "tf", ".", "matmul", "(", "h", ",", "wh", ")", ",", "gh", ",", "bh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "_ln", "(", "c", ",", "gc", ",", "bc", ")", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.conv_to_fc": [[149, 153], ["numpy.prod", "tensorflow.reshape", "tf.reshape.get_shape"], "function", ["None"], ["", "def", "conv_to_fc", "(", "x", ")", ":", "\n", "    ", "nh", "=", "np", ".", "prod", "(", "[", "v", ".", "value", "for", "v", "in", "x", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.discount_with_dones": [[154, 161], ["zip", "discounted.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "discount_with_dones", "(", "rewards", ",", "dones", ",", "gamma", ")", ":", "\n", "    ", "discounted", "=", "[", "]", "\n", "r", "=", "0", "\n", "for", "reward", ",", "done", "in", "zip", "(", "rewards", "[", ":", ":", "-", "1", "]", ",", "dones", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "        ", "r", "=", "reward", "+", "gamma", "*", "r", "*", "(", "1.", "-", "done", ")", "# fixed off by one bug", "\n", "discounted", ".", "append", "(", "r", ")", "\n", "", "return", "discounted", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.find_trainable_variables": [[162, 165], ["tensorflow.variable_scope", "tensorflow.trainable_variables"], "function", ["None"], ["", "def", "find_trainable_variables", "(", "key", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "key", ")", ":", "\n", "        ", "return", "tf", ".", "trainable_variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.make_path": [[166, 168], ["os.makedirs"], "function", ["None"], ["", "", "def", "make_path", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "makedirs", "(", "f", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.constant": [[169, 171], ["None"], "function", ["None"], ["", "def", "constant", "(", "p", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.linear": [[172, 174], ["None"], "function", ["None"], ["", "def", "linear", "(", "p", ")", ":", "\n", "    ", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.middle_drop": [[175, 180], ["None"], "function", ["None"], ["", "def", "middle_drop", "(", "p", ")", ":", "\n", "    ", "eps", "=", "0.75", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.double_linear_con": [[181, 187], ["None"], "function", ["None"], ["", "def", "double_linear_con", "(", "p", ")", ":", "\n", "    ", "p", "*=", "2", "\n", "eps", "=", "0.125", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.double_middle_drop": [[188, 196], ["None"], "function", ["None"], ["", "def", "double_middle_drop", "(", "p", ")", ":", "\n", "    ", "eps1", "=", "0.75", "\n", "eps2", "=", "0.25", "\n", "if", "1", "-", "p", "<", "eps1", ":", "\n", "        ", "if", "1", "-", "p", "<", "eps2", ":", "\n", "            ", "return", "eps2", "*", "0.5", "\n", "", "return", "eps1", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.get_by_index": [[259, 266], ["tensorflow.gather", "len", "len", "tensorflow.reshape", "x.get_shape", "idx.get_shape", "tensorflow.range"], "function", ["None"], ["", "", "", "def", "get_by_index", "(", "x", ",", "idx", ")", ":", "\n", "    ", "assert", "(", "len", "(", "x", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "assert", "(", "len", "(", "idx", ".", "get_shape", "(", ")", ")", "==", "1", ")", "\n", "idx_flattened", "=", "tf", ".", "range", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ")", "*", "x", ".", "shape", "[", "1", "]", "+", "idx", "\n", "y", "=", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", ",", "# flatten input", "\n", "idx_flattened", ")", "# use flattened indices", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.check_shape": [[267, 272], ["zip", "t.get_shape().as_list", "str", "str", "t.get_shape", "t.get_shape", "str"], "function", ["None"], ["", "def", "check_shape", "(", "ts", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "for", "(", "t", ",", "shape", ")", "in", "zip", "(", "ts", ",", "shapes", ")", ":", "\n", "        ", "assert", "t", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "shape", ",", "\"id \"", "+", "str", "(", "i", ")", "+", "\" shape \"", "+", "str", "(", "t", ".", "get_shape", "(", ")", ")", "+", "str", "(", "shape", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.avg_norm": [[273, 275], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["None"], ["", "", "def", "avg_norm", "(", "t", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "t", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.gradient_add": [[276, 285], ["print"], "function", ["None"], ["", "def", "gradient_add", "(", "g1", ",", "g2", ",", "param", ")", ":", "\n", "    ", "print", "(", "[", "g1", ",", "g2", ",", "param", ".", "name", "]", ")", "\n", "assert", "(", "not", "(", "g1", "is", "None", "and", "g2", "is", "None", ")", ")", ",", "param", ".", "name", "\n", "if", "g1", "is", "None", ":", "\n", "        ", "return", "g2", "\n", "", "elif", "g2", "is", "None", ":", "\n", "        ", "return", "g1", "\n", "", "else", ":", "\n", "        ", "return", "g1", "+", "g2", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.utils.q_explained_variance": [[286, 291], ["tensorflow.nn.moments", "tensorflow.nn.moments", "utils.check_shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape"], ["", "", "def", "q_explained_variance", "(", "qpred", ",", "q", ")", ":", "\n", "    ", "_", ",", "vary", "=", "tf", ".", "nn", ".", "moments", "(", "q", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "_", ",", "varpred", "=", "tf", ".", "nn", ".", "moments", "(", "q", "-", "qpred", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "check_shape", "(", "[", "vary", ",", "varpred", "]", ",", "[", "[", "]", "]", "*", "2", ")", "\n", "return", "1.0", "-", "(", "varpred", "/", "vary", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.run_atari.train": [[9, 19], ["baselines.common.vec_env.vec_frame_stack.VecFrameStack", "baselines.a2c.a2c.learn", "baselines.common.vec_env.vec_frame_stack.VecFrameStack.close", "baselines.common.cmd_util.make_atari_env", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env"], ["def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ",", "policy", ",", "lrschedule", ",", "num_env", ")", ":", "\n", "    ", "if", "policy", "==", "'cnn'", ":", "\n", "        ", "policy_fn", "=", "CnnPolicy", "\n", "", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env", "=", "VecFrameStack", "(", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ")", ",", "4", ")", "\n", "learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.a2c.run_atari.main": [[20, 29], ["baselines.common.cmd_util.atari_arg_parser", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.parse_args", "baselines.logger.configure", "run_atari.train"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "help", "=", "'Policy architecture'", ",", "choices", "=", "[", "'cnn'", ",", "'lstm'", ",", "'lnlstm'", "]", ",", "default", "=", "'cnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "help", "=", "'Learning rate schedule'", ",", "choices", "=", "[", "'constant'", ",", "'linear'", "]", ",", "default", "=", "'constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "policy", "=", "args", ".", "policy", ",", "lrschedule", "=", "args", ".", "lrschedule", ",", "num_env", "=", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.buffer.SortedBuffer.__init__": [[4, 12], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "int", "(", "2e4", ")", ",", "ob_space", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ob_shape", "=", "ob_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "ob_dim", "=", "1", "\n", "for", "dim", "in", "self", ".", "ob_shape", ":", "\n", "            ", "self", ".", "ob_dim", "*=", "dim", "\n", "", "self", ".", "data", "=", "None", "\n", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.buffer.SortedBuffer.insert": [[13, 24], ["numpy.concatenate", "numpy.searchsorted", "numpy.insert", "obs.astype().reshape", "numpy.expand_dims", "numpy.expand_dims", "numpy.repeat", "obs.astype"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert"], ["", "def", "insert", "(", "self", ",", "obs", ",", "acs", ",", "ret", ")", ":", "\n", "        ", "num", "=", "obs", ".", "shape", "[", "0", "]", "\n", "_data", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "astype", "(", "float", ")", ".", "reshape", "(", "num", ",", "-", "1", ")", ",", "np", ".", "expand_dims", "(", "acs", ",", "axis", "=", "1", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "ret", ",", "num", ")", ",", "axis", "=", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "data", "=", "_data", "\n", "", "else", ":", "\n", "            ", "insert_index", "=", "np", ".", "searchsorted", "(", "self", ".", "data", "[", ":", ",", "-", "1", "]", ",", "ret", ",", "side", "=", "'right'", ")", "\n", "self", ".", "data", "=", "np", ".", "insert", "(", "self", ".", "data", ",", "insert_index", ",", "_data", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "data", ".", "shape", "[", "0", "]", ">", "self", ".", "size", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "-", "self", ".", "size", ":", "]", "\n", "", "", "self", ".", "index", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.buffer.SortedBuffer.sample": [[25, 32], ["numpy.random.choice", "obs.reshape.reshape.reshape", "sampled_data[].astype", "range", "max"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "k", "=", "5000", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "max", "(", "0", ",", "self", ".", "index", "-", "k", ")", ",", "self", ".", "index", ")", ",", "batch_size", ")", "\n", "sampled_data", "=", "self", ".", "data", "[", "idx", "]", "\n", "obs", "=", "sampled_data", "[", ":", ",", ":", "self", ".", "ob_dim", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "(", "batch_size", ",", ")", "+", "self", ".", "ob_shape", ")", "\n", "acs", "=", "sampled_data", "[", ":", ",", "self", ".", "ob_dim", "]", ".", "astype", "(", "int", ")", "\n", "return", "obs", ",", "acs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.policies.LnLstmPolicy.__init__": [[22, 54], ["baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.distributions.make_pdtype", "policies.LnLstmPolicy.pd.sample", "policies.LnLstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.ssrl_exploration.utils.batch_to_seq", "baselines.ssrl_exploration.utils.batch_to_seq", "baselines.ssrl_exploration.utils.lnlstm", "baselines.ssrl_exploration.utils.seq_to_batch", "baselines.ssrl_exploration.utils.fc", "policies.LnLstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lnlstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lnlstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.policies.LstmPolicy.__init__": [[57, 90], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "policies.LstmPolicy.pd.sample", "policies.LstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.ssrl_exploration.utils.batch_to_seq", "baselines.ssrl_exploration.utils.batch_to_seq", "baselines.ssrl_exploration.utils.lstm", "baselines.ssrl_exploration.utils.seq_to_batch", "baselines.ssrl_exploration.utils.fc", "policies.LstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "X", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.policies.CnnPolicy.__init__": [[93, 126], ["baselines.common.distributions.make_pdtype", "tensorflow.placeholder", "policies.CnnPolicy.pd.sample", "policies.CnnPolicy.pd.neglogp", "baselines.ssrl_exploration.utils.cat_entropy", "tensorflow.variable_scope", "policies.nature_cnn", "policies.CnnPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "baselines.ssrl_exploration.utils.fc"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ",", "**", "conv_kwargs", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "#X, processed_x = observation_input(ob_space, nbatch)", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "None", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ",", "**", "conv_kwargs", ")", "\n", "vf", "=", "fc", "(", "h", ",", "'v'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "self", ".", "entropy", "=", "cat_entropy", "(", "self", ".", "pi", ")", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "def", "neg_log_prob", "(", "actions", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "pi", ",", "labels", "=", "actions", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "neg_log_prob", "=", "neg_log_prob", "\n", "\n", "", "", "class", "MlpPolicy", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ")", ":", "#pylint: disable=W0613", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.policies.MlpPolicy.__init__": [[128, 160], ["baselines.common.distributions.make_pdtype", "policies.MlpPolicy.pd.sample", "policies.MlpPolicy.pd.neglogp", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.layers.flatten", "activ", "activ", "activ", "activ", "policies.MlpPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "baselines.ssrl_exploration.utils.fc", "baselines.ssrl_exploration.utils.fc", "baselines.ssrl_exploration.utils.fc", "baselines.ssrl_exploration.utils.fc", "baselines.ssrl_exploration.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "activ", "=", "tf", ".", "tanh", "\n", "processed_x", "=", "tf", ".", "layers", ".", "flatten", "(", "processed_x", ")", "\n", "pi_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'pi_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "pi_h2", "=", "activ", "(", "fc", "(", "pi_h1", ",", "'pi_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'vf_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h2", "=", "activ", "(", "fc", "(", "vf_h1", ",", "'vf_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf", "=", "fc", "(", "vf_h2", ",", "'vf'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "pi_h2", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.policies.nature_cnn": [[8, 20], ["activ", "activ", "activ", "baselines.ssrl_exploration.utils.conv_to_fc", "activ", "tensorflow.cast", "baselines.ssrl_exploration.utils.conv", "baselines.ssrl_exploration.utils.conv", "baselines.ssrl_exploration.utils.conv", "baselines.ssrl_exploration.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv_to_fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["def", "nature_cnn", "(", "unscaled_images", ",", "**", "conv_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    CNN from Nature paper.\n    \"\"\"", "\n", "scaled_images", "=", "tf", ".", "cast", "(", "unscaled_images", ",", "tf", ".", "float32", ")", "/", "255.", "\n", "activ", "=", "tf", ".", "nn", ".", "relu", "\n", "h", "=", "activ", "(", "conv", "(", "scaled_images", ",", "'c1'", ",", "nf", "=", "32", ",", "rf", "=", "8", ",", "stride", "=", "4", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "**", "conv_kwargs", ")", ")", "\n", "h2", "=", "activ", "(", "conv", "(", "h", ",", "'c2'", ",", "nf", "=", "64", ",", "rf", "=", "4", ",", "stride", "=", "2", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "activ", "(", "conv", "(", "h2", ",", "'c3'", ",", "nf", "=", "64", ",", "rf", "=", "3", ",", "stride", "=", "1", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "conv_to_fc", "(", "h3", ")", "\n", "return", "activ", "(", "fc", "(", "h3", ",", "'fc1'", ",", "nh", "=", "512", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.runner.runner": [[12, 33], ["range", "runner.traj_1_generator", "obs_list.append", "acs_list.append", "len_list.append", "ret_list.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.traj_1_generator", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["def", "runner", "(", "env", ",", "model", ",", "number_trajs", ")", ":", "\n", "\n", "    ", "obs_list", "=", "[", "]", "\n", "acs_list", "=", "[", "]", "\n", "len_list", "=", "[", "]", "\n", "ret_list", "=", "[", "]", "\n", "total_t", "=", "0", "\n", "#for _ in tqdm(range(number_trajs)):", "\n", "for", "_", "in", "range", "(", "number_trajs", ")", ":", "\n", "        ", "traj", ",", "t", "=", "traj_1_generator", "(", "model", ",", "env", ")", "\n", "obs", ",", "acs", ",", "ep_len", ",", "ep_ret", "=", "traj", "[", "'ob'", "]", ",", "traj", "[", "'ac'", "]", ",", "traj", "[", "'ep_len'", "]", ",", "traj", "[", "'ep_ret'", "]", "\n", "obs_list", ".", "append", "(", "obs", ")", "\n", "acs_list", ".", "append", "(", "acs", ")", "\n", "len_list", ".", "append", "(", "ep_len", ")", "\n", "ret_list", ".", "append", "(", "ep_ret", ")", "\n", "total_t", "+=", "t", "\n", "#avg_len = sum(len_list)/len(len_list)", "\n", "#avg_ret = sum(ret_list)/len(ret_list)", "\n", "#print(\"Average length:\", avg_len)", "\n", "#print(\"Average return:\", avg_ret)", "\n", "", "return", "obs_list", ",", "acs_list", ",", "ret_list", ",", "total_t", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.runner.traj_1_generator": [[36, 73], ["env.action_space.sample", "env.reset", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "model.step", "np.array.append", "np.array.append", "np.array.append", "env.step", "np.array.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "traj_1_generator", "(", "model", ",", "env", ")", ":", "\n", "\n", "    ", "t", "=", "0", "\n", "ac", "=", "env", ".", "action_space", ".", "sample", "(", ")", "# not used, just so we have the datatype", "\n", "new", "=", "True", "# marks if we're on first timestep of an episode", "\n", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "cur_ep_ret", "=", "0", "# return in current episode", "\n", "cur_ep_len", "=", "0", "# len of current episode", "\n", "\n", "# Initialize history arrays", "\n", "obs", "=", "[", "]", "\n", "rews", "=", "[", "]", "\n", "news", "=", "[", "]", "\n", "acs", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "ac", "=", "model", ".", "step", "(", "ob", "[", "'image'", "]", ")", "\n", "obs", ".", "append", "(", "ob", "[", "'image'", "]", ")", "\n", "news", ".", "append", "(", "new", ")", "\n", "acs", ".", "append", "(", "ac", ")", "\n", "\n", "ob", ",", "rew", ",", "new", ",", "_", "=", "env", ".", "step", "(", "ac", ")", "\n", "rews", ".", "append", "(", "rew", ")", "\n", "\n", "cur_ep_ret", "+=", "rew", "\n", "cur_ep_len", "+=", "1", "\n", "if", "new", ":", "\n", "            ", "break", "\n", "", "t", "+=", "1", "\n", "\n", "", "obs", "=", "np", ".", "array", "(", "obs", ")", "\n", "rews", "=", "np", ".", "array", "(", "rews", ")", "\n", "news", "=", "np", ".", "array", "(", "news", ")", "\n", "acs", "=", "np", ".", "array", "(", "acs", ")", "\n", "traj", "=", "{", "\"ob\"", ":", "obs", ",", "\"rew\"", ":", "rews", ",", "\"new\"", ":", "news", ",", "\"ac\"", ":", "acs", ",", "\n", "\"ep_ret\"", ":", "cur_ep_ret", ",", "\"ep_len\"", ":", "cur_ep_len", "}", "\n", "return", "traj", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.SortedBuffer.__init__": [[4, 13], ["int", "count_buffer.Counter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "int", "(", "2e4", ")", ",", "ob_space", "=", "None", ",", "beta", "=", "0.001", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ob_shape", "=", "ob_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "ob_dim", "=", "1", "\n", "for", "dim", "in", "self", ".", "ob_shape", ":", "\n", "            ", "self", ".", "ob_dim", "*=", "dim", "\n", "", "self", ".", "data", "=", "None", "\n", "self", ".", "index", "=", "0", "\n", "self", ".", "counter", "=", "Counter", "(", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.SortedBuffer.insert": [[14, 27], ["numpy.concatenate", "count_buffer.SortedBuffer.counter.add", "numpy.repeat", "numpy.concatenate", "count_buffer.SortedBuffer.counter.get_bonus", "obs.astype().reshape", "numpy.expand_dims", "numpy.zeros", "numpy.expand_dims", "numpy.zeros", "count_buffer.SortedBuffer.data[].astype", "numpy.repeat", "obs.astype", "count_buffer.SortedBuffer.data[].argsort"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.add", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.Counter.get_bonus"], ["", "def", "insert", "(", "self", ",", "obs", ",", "acs", ",", "ret", ")", ":", "\n", "        ", "num", "=", "obs", ".", "shape", "[", "0", "]", "\n", "_data", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "astype", "(", "float", ")", ".", "reshape", "(", "num", ",", "-", "1", ")", ",", "np", ".", "expand_dims", "(", "acs", ",", "axis", "=", "1", ")", ",", "np", ".", "zeros", "(", "(", "num", ",", "1", ")", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "ret", ",", "num", ")", ",", "axis", "=", "1", ")", ",", "np", ".", "zeros", "(", "(", "num", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "episode_index", "=", "self", ".", "counter", ".", "add", "(", "_data", "[", ":", ",", ":", "self", ".", "ob_dim", "]", ")", "\n", "_data", "[", ":", ",", "-", "3", "]", "=", "np", ".", "repeat", "(", "episode_index", ",", "num", ")", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "data", "=", "_data", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "_data", ")", ",", "axis", "=", "0", ")", "\n", "bonus", "=", "self", ".", "counter", ".", "get_bonus", "(", "self", ".", "data", "[", ":", ",", "-", "3", "]", ".", "astype", "(", "int", ")", ")", "\n", "self", ".", "data", "[", ":", ",", "-", "1", "]", "=", "self", ".", "data", "[", ":", ",", "-", "2", "]", "+", "bonus", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "data", "[", ":", ",", "-", "1", "]", ".", "argsort", "(", ")", "]", "[", "-", "self", ".", "size", ":", "]", "\n", "", "self", ".", "index", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.SortedBuffer.sample": [[28, 35], ["numpy.random.choice", "obs.reshape.reshape.reshape", "sampled_data[].astype", "range", "max"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "k", "=", "5000", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "max", "(", "0", ",", "self", ".", "index", "-", "k", ")", ",", "self", ".", "index", ")", ",", "batch_size", ")", "\n", "sampled_data", "=", "self", ".", "data", "[", "idx", "]", "\n", "obs", "=", "sampled_data", "[", ":", ",", ":", "self", ".", "ob_dim", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "(", "batch_size", ",", ")", "+", "self", ".", "ob_shape", ")", "\n", "acs", "=", "sampled_data", "[", ":", ",", "self", ".", "ob_dim", "]", ".", "astype", "(", "int", ")", "\n", "return", "obs", ",", "acs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.Counter.__init__": [[37, 43], ["dict", "dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "0.001", ")", ":", "\n", "        ", "self", ".", "counts", "=", "dict", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "episodes", "=", "dict", "(", ")", "\n", "self", ".", "episode_bonus", "=", "dict", "(", ")", "\n", "self", ".", "episode_index", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.Counter.add": [[44, 55], ["count_buffer.Counter.update_bonus", "tuple"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.Counter.update_bonus"], ["", "def", "add", "(", "self", ",", "obs", ")", ":", "\n", "        ", "for", "ob", "in", "obs", ":", "\n", "            ", "ob", "=", "tuple", "(", "ob", ")", "\n", "if", "ob", "not", "in", "self", ".", "counts", ":", "\n", "                ", "self", ".", "counts", "[", "ob", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "counts", "[", "ob", "]", "+=", "1", "\n", "", "", "self", ".", "episode_index", "+=", "1", "\n", "self", ".", "episodes", "[", "self", ".", "episode_index", "]", "=", "obs", "\n", "self", ".", "update_bonus", "(", ")", "\n", "return", "self", ".", "episode_index", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.Counter.update_bonus": [[56, 67], ["numpy.sum", "tuple", "numpy.sum.append", "numpy.sqrt", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "update_bonus", "(", "self", ")", ":", "\n", "        ", "for", "idx", "in", "self", ".", "episodes", ":", "\n", "            ", "bonus", "=", "[", "]", "\n", "obs", "=", "self", ".", "episodes", "[", "idx", "]", "\n", "for", "ob", "in", "obs", ":", "\n", "                ", "ob", "=", "tuple", "(", "ob", ")", "\n", "count", "=", "self", ".", "counts", "[", "ob", "]", "\n", "bonus", ".", "append", "(", "count", ")", "\n", "", "bonus", "=", "self", ".", "beta", "/", "np", ".", "sqrt", "(", "np", ".", "array", "(", "bonus", ")", ")", "\n", "bonus", "=", "np", ".", "sum", "(", "bonus", ")", "\n", "self", ".", "episode_bonus", "[", "idx", "]", "=", "bonus", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.count_buffer.Counter.get_bonus": [[68, 76], ["numpy.array", "bonus.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "", "def", "get_bonus", "(", "self", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "episodes", "=", "{", "k", ":", "self", ".", "episodes", "[", "k", "]", "for", "k", "in", "idxs", "}", "\n", "self", ".", "episode_bonus", "=", "{", "k", ":", "self", ".", "episode_bonus", "[", "k", "]", "for", "k", "in", "idxs", "}", "\n", "#print(self.episode_bonus)", "\n", "bonus", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "            ", "bonus", ".", "append", "(", "self", ".", "episode_bonus", "[", "idx", "]", ")", "\n", "", "return", "np", ".", "array", "(", "bonus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.ssrl.argsparser": [[14, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "argsparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Tensorflow Implementation of Reinforcement Learning via Imitation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--env_id'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'MiniGrid-MultiRoom-N4-S5-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_timesteps'", ",", "help", "=", "'the number of timesteps'", ",", "type", "=", "int", ",", "default", "=", "2.1e5", ")", "\n", "parser", ".", "add_argument", "(", "'--buffer_size'", ",", "help", "=", "'the size of the sorted buffer'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "'the batch size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--ent_coef'", ",", "help", "=", "'the weight of the entropy'", ",", "default", "=", "0.00", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "help", "=", "'the learning rate'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--rollout_steps'", ",", "help", "=", "'the number of rollouts in each iteration'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--train_steps'", ",", "help", "=", "'the number of training updates in each iteration'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--log_every'", ",", "help", "=", "'log every iteration'", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_num'", ",", "help", "=", "'the number of evaluation number'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--count_exp'", ",", "help", "=", "'whether using count-based exploration'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "help", "=", "'hyperparameter for count-based exploration'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.ssrl.learn": [[32, 84], ["env.seed", "eval_env.seed", "baselines.common.set_global_seeds", "tensorflow.Session().__enter__", "baselines.ssrl_exploration.model.Model", "collections.deque", "SortedBuffer", "SortedBuffer", "baselines.ssrl_exploration.runner.runner", "collections.deque.extend", "zip", "range", "range", "tensorflow.Session", "SortedBuffer.insert", "SortedBuffer.sample", "baselines.ssrl_exploration.model.Model.train", "int", "int", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.dumpkvs", "numpy.mean", "baselines.ssrl_exploration.runner.runner", "baselines.logger.logkv", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "def", "learn", "(", "env", ",", "eval_env", ",", "seed", ",", "num_timesteps", ",", "batch_size", ",", "buffer_size", ",", "ent_coef", ",", "lr", ",", "rollout_steps", ",", "train_steps", ",", "log_every", ",", "eval_num", ",", "count_exp", ",", "beta", ")", ":", "\n", "# Seed", "\n", "    ", "env", ".", "seed", "(", "seed", ")", "\n", "eval_env", ".", "seed", "(", "seed", ")", "\n", "set_global_seeds", "(", "seed", ")", "\n", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "\n", "# Buffer", "\n", "if", "count_exp", ":", "\n", "        ", "from", "baselines", ".", "ssrl_exploration", ".", "count_buffer", "import", "SortedBuffer", "\n", "buf", "=", "SortedBuffer", "(", "size", "=", "int", "(", "buffer_size", ")", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "beta", "=", "beta", ")", "\n", "", "else", ":", "\n", "        ", "from", "baselines", ".", "ssrl_exploration", ".", "buffer", "import", "SortedBuffer", "\n", "buf", "=", "SortedBuffer", "(", "size", "=", "int", "(", "buffer_size", ")", ",", "\n", "ob_space", "=", "ob_space", ")", "\n", "\n", "\n", "# Model", "\n", "", "tf", ".", "Session", "(", ")", ".", "__enter__", "(", ")", "\n", "model", "=", "Model", "(", "ob_space", ",", "ac_space", ",", "batch_size", ",", "lr", ",", "ent_coef", ")", "\n", "\n", "ret_buf", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "total_t", "=", "0", "\n", "total_episodes", "=", "0", "\n", "while", "total_t", "<", "num_timesteps", ":", "\n", "        ", "obs_list", ",", "acs_list", ",", "ret_list", ",", "t", "=", "runner", "(", "env", ",", "model", ",", "rollout_steps", ")", "\n", "ret_buf", ".", "extend", "(", "ret_list", ")", "\n", "#total_t += t", "\n", "total_episodes", "+=", "rollout_steps", "\n", "for", "obs", ",", "acs", ",", "ret", "in", "zip", "(", "obs_list", ",", "acs_list", ",", "ret_list", ")", ":", "\n", "            ", "buf", ".", "insert", "(", "obs", ",", "acs", ",", "ret", ")", "\n", "#print(buf.data.shape, buf.data)", "\n", "#print(ret_list)", "\n", "", "for", "_", "in", "range", "(", "train_steps", ")", ":", "\n", "            ", "obs", ",", "acs", "=", "buf", ".", "sample", "(", "batch_size", ",", "k", "=", "buffer_size", ")", "\n", "loss", "=", "model", ".", "train", "(", "obs", ",", "acs", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "t", ")", ":", "\n", "            ", "total_t", "+=", "1", "\n", "if", "total_t", "%", "log_every", "==", "0", ":", "\n", "                ", "logger", ".", "logkv", "(", "\"total_timesteps\"", ",", "total_t", ")", "\n", "logger", ".", "logkv", "(", "\"total_episodes\"", ",", "total_episodes", ")", "\n", "logger", ".", "logkv", "(", "\"rollout_return\"", ",", "np", ".", "mean", "(", "[", "r", "for", "r", "in", "ret_buf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "\"loss\"", ",", "loss", ")", "\n", "if", "eval_num", ">", "0", ":", "\n", "                    ", "obs_list", ",", "acs_list", ",", "ret_list", ",", "t", "=", "runner", "(", "eval_env", ",", "model", ",", "eval_num", ")", "\n", "logger", ".", "logkv", "(", "\"eval_return\"", ",", "np", ".", "mean", "(", "ret_list", ")", ")", "\n", "", "logger", ".", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.ssrl.main": [[85, 96], ["ssrl.argsparser", "argsparser.parse_args", "baselines.logger.configure", "gym.make", "gym.make", "ssrl.learn", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.argsparser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argsparser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "\n", "\n", "env", "=", "gym", ".", "make", "(", "args", ".", "env_id", ")", "\n", "eval_env", "=", "gym", ".", "make", "(", "args", ".", "env_id", ")", "\n", "\n", "# Learn", "\n", "learn", "(", "env", ",", "eval_env", ",", "args", ".", "seed", ",", "int", "(", "args", ".", "num_timesteps", ")", ",", "args", ".", "batch_size", ",", "args", ".", "buffer_size", ",", "args", ".", "ent_coef", ",", "args", ".", "lr", ",", "args", ".", "rollout_steps", ",", "args", ".", "train_steps", ",", "args", ".", "log_every", ",", "args", ".", "eval_num", ",", "args", ".", "count_exp", ",", "args", ".", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.model.Model.__init__": [[8, 43], ["tensorflow.get_default_session", "baselines.ssrl_exploration.policies.MlpPolicy", "baselines.ssrl_exploration.policies.MlpPolicy", "model.Model.train_model.pdtype.sample_placeholder", "model.Model.train_model.pd.sample", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.gradients", "list", "tensorflow.train.AdamOptimizer", "model.Model.trainer.apply_gradients", "tensorflow.global_variables_initializer().run", "tensorflow.variable_scope", "tensorflow.trainable_variables", "zip", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "ob_space", ",", "ac_space", ",", "batch_size", "=", "128", ",", "lr", "=", "5e-4", ",", "ent_coef", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "self", ".", "ob_space", "=", "ob_space", "\n", "self", ".", "ac_space", "=", "ac_space", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "act_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "1", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "False", ")", "\n", "self", ".", "train_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "batch_size", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "True", ")", "\n", "\n", "self", ".", "ob_ph", "=", "self", ".", "train_model", ".", "X", "\n", "self", ".", "ac_ph", "=", "self", ".", "train_model", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "self", ".", "ac", "=", "self", ".", "train_model", ".", "pd", ".", "sample", "(", ")", "\n", "self", ".", "neglogpac", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "train_model", ".", "pi", ",", "labels", "=", "self", ".", "ac_ph", ")", "\n", "\n", "#self.loss = tf.reduce_mean(self.neglogpac) - ent_coef * tf.reduce_mean(self.train_model.entropy)", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "neglogpac", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ")", ":", "\n", "            ", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "params", ")", "\n", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "self", ".", "trainer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "self", ".", "_train", "=", "self", ".", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.model.Model.step": [[44, 47], ["model.Model.act_model.step", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "ob", ")", ":", "\n", "        ", "a", "=", "self", ".", "act_model", ".", "step", "(", "np", ".", "expand_dims", "(", "ob", ",", "axis", "=", "0", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.model.Model.train": [[48, 53], ["model.Model.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "train", "(", "self", ",", "obs", ",", "acs", ")", ":", "\n", "        ", "td_map", "=", "{", "self", ".", "ob_ph", ":", "obs", ",", "self", ".", "ac_ph", ":", "acs", "}", "\n", "train_loss", ",", "_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "_train", "]", ",", "td_map", ")", "\n", "#print(\"Training loss: {}\".format(train_loss))", "\n", "return", "train_loss", "\n", "#print(\"Training loss: {}\".format(train_loss))", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.Scheduler.__init__": [[207, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "v", ",", "nvalues", ",", "schedule", ")", ":", "\n", "        ", "self", ".", "n", "=", "0.", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "nvalues", "=", "nvalues", "\n", "self", ".", "schedule", "=", "schedules", "[", "schedule", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.Scheduler.value": [[213, 217], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "current_value", "=", "self", ".", "v", "*", "self", ".", "schedule", "(", "self", ".", "n", "/", "self", ".", "nvalues", ")", "\n", "self", ".", "n", "+=", "1.", "\n", "return", "current_value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.Scheduler.value_steps": [[218, 220], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value_steps", "(", "self", ",", "steps", ")", ":", "\n", "        ", "return", "self", ".", "v", "*", "self", ".", "schedule", "(", "steps", "/", "self", ".", "nvalues", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.EpisodeStats.__init__": [[223, 231], ["range", "collections.deque", "collections.deque", "utils.EpisodeStats.episode_rewards.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "nsteps", ",", "nenvs", ")", ":", "\n", "        ", "self", ".", "episode_rewards", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nenvs", ")", ":", "\n", "            ", "self", ".", "episode_rewards", ".", "append", "(", "[", "]", ")", "\n", "", "self", ".", "lenbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode lengths", "\n", "self", ".", "rewbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode rewards", "\n", "self", ".", "nsteps", "=", "nsteps", "\n", "self", ".", "nenvs", "=", "nenvs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.EpisodeStats.feed": [[232, 244], ["numpy.reshape", "numpy.reshape", "range", "range", "utils.EpisodeStats.episode_rewards[].append", "len", "sum", "utils.EpisodeStats.lenbuffer.append", "utils.EpisodeStats.rewbuffer.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "feed", "(", "self", ",", "rewards", ",", "masks", ")", ":", "\n", "        ", "rewards", "=", "np", ".", "reshape", "(", "rewards", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "masks", "=", "np", ".", "reshape", "(", "masks", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "nenvs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "self", ".", "nsteps", ")", ":", "\n", "                ", "self", ".", "episode_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", "[", "j", "]", ")", "\n", "if", "masks", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "l", "=", "len", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "s", "=", "sum", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "self", ".", "lenbuffer", ".", "append", "(", "l", ")", "\n", "self", ".", "rewbuffer", ".", "append", "(", "s", ")", "\n", "self", ".", "episode_rewards", "[", "i", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.EpisodeStats.mean_length": [[245, 250], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "", "", "def", "mean_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "lenbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "lenbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "# on the first params dump, no episodes are finished", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.EpisodeStats.mean_reward": [[251, 256], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "def", "mean_reward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rewbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "rewbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.sample": [[8, 11], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["def", "sample", "(", "logits", ")", ":", "\n", "    ", "noise", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "noise", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.cat_entropy": [[12, 18], ["tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy", "(", "logits", ")", ":", "\n", "    ", "a0", "=", "logits", "-", "tf", ".", "reduce_max", "(", "logits", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.cat_entropy_softmax": [[19, 21], ["tensorflow.reduce_sum", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy_softmax", "(", "p0", ")", ":", "\n", "    ", "return", "-", "tf", ".", "reduce_sum", "(", "p0", "*", "tf", ".", "log", "(", "p0", "+", "1e-6", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.mse": [[22, 24], ["tensorflow.square"], "function", ["None"], ["", "def", "mse", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "square", "(", "pred", "-", "target", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.ortho_init": [[25, 41], ["tuple", "numpy.random.normal", "numpy.linalg.svd", "q.reshape.reshape", "len", "len", "numpy.prod"], "function", ["None"], ["", "def", "ortho_init", "(", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_ortho_init", "(", "shape", ",", "dtype", ",", "partition_info", "=", "None", ")", ":", "\n", "#lasagne ortho init for tf", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "flat_shape", "=", "shape", "\n", "", "elif", "len", "(", "shape", ")", "==", "4", ":", "# assumes NHWC", "\n", "            ", "flat_shape", "=", "(", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "# pick the one with the correct shape", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "(", "scale", "*", "q", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "_ortho_init", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.conv": [[42, 62], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "x.get_shape", "tensorflow.reshape", "tensorflow.nn.conv2d", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "def", "conv", "(", "x", ",", "scope", ",", "*", ",", "nf", ",", "rf", ",", "stride", ",", "pad", "=", "'VALID'", ",", "init_scale", "=", "1.0", ",", "data_format", "=", "'NHWC'", ",", "one_dim_bias", "=", "False", ")", ":", "\n", "    ", "if", "data_format", "==", "'NHWC'", ":", "\n", "        ", "channel_ax", "=", "3", "\n", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "bshape", "=", "[", "1", ",", "1", ",", "1", ",", "nf", "]", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "        ", "channel_ax", "=", "1", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "bshape", "=", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "bias_var_shape", "=", "[", "nf", "]", "if", "one_dim_bias", "else", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "channel_ax", "]", ".", "value", "\n", "wshape", "=", "[", "rf", ",", "rf", ",", "nin", ",", "nf", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "wshape", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "bias_var_shape", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "if", "not", "one_dim_bias", "and", "data_format", "==", "'NHWC'", ":", "\n", "            ", "b", "=", "tf", ".", "reshape", "(", "b", ",", "bshape", ")", "\n", "", "return", "b", "+", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "strides", ",", "padding", "=", "pad", ",", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.fc": [[63, 69], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "x.get_shape", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "fc", "(", "x", ",", "scope", ",", "nh", ",", "*", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "nin", ",", "nh", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_bias", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.batch_to_seq": [[70, 76], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.squeeze", "tensorflow.split"], "function", ["None"], ["", "", "def", "batch_to_seq", "(", "h", ",", "nbatch", ",", "nsteps", ",", "flat", "=", "False", ")", ":", "\n", "    ", "if", "flat", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", "]", ")", "\n", "", "else", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", ",", "-", "1", "]", ")", "\n", "", "return", "[", "tf", ".", "squeeze", "(", "v", ",", "[", "1", "]", ")", "for", "v", "in", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "nsteps", ",", "value", "=", "h", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.seq_to_batch": [[77, 85], ["h[].get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "h[].get_shape", "len", "tensorflow.concat", "tensorflow.stack", "h[].get_shape"], "function", ["None"], ["", "def", "seq_to_batch", "(", "h", ",", "flat", "=", "False", ")", ":", "\n", "    ", "shape", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "not", "flat", ":", "\n", "        ", "assert", "(", "len", "(", "shape", ")", ">", "1", ")", "\n", "nh", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "h", ")", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "values", "=", "h", ",", "axis", "=", "1", ")", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.lstm": [[86, 109], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "lstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "tf", ".", "matmul", "(", "x", ",", "wx", ")", "+", "tf", ".", "matmul", "(", "h", ",", "wh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "c", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils._ln": [[110, 115], ["tensorflow.nn.moments", "tensorflow.sqrt"], "function", ["None"], ["", "def", "_ln", "(", "x", ",", "g", ",", "b", ",", "e", "=", "1e-5", ",", "axes", "=", "[", "1", "]", ")", ":", "\n", "    ", "u", ",", "s", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "axes", ",", "keep_dims", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "tf", ".", "sqrt", "(", "s", "+", "e", ")", "\n", "x", "=", "x", "*", "g", "+", "b", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.lnlstm": [[116, 148], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils._ln", "utils._ln", "utils._ln", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln"], ["", "def", "lnlstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gx", "=", "tf", ".", "get_variable", "(", "\"gx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bx", "=", "tf", ".", "get_variable", "(", "\"bx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gh", "=", "tf", ".", "get_variable", "(", "\"gh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bh", "=", "tf", ".", "get_variable", "(", "\"bh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "gc", "=", "tf", ".", "get_variable", "(", "\"gc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bc", "=", "tf", ".", "get_variable", "(", "\"bc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "_ln", "(", "tf", ".", "matmul", "(", "x", ",", "wx", ")", ",", "gx", ",", "bx", ")", "+", "_ln", "(", "tf", ".", "matmul", "(", "h", ",", "wh", ")", ",", "gh", ",", "bh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "_ln", "(", "c", ",", "gc", ",", "bc", ")", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.conv_to_fc": [[149, 153], ["numpy.prod", "tensorflow.reshape", "tf.reshape.get_shape"], "function", ["None"], ["", "def", "conv_to_fc", "(", "x", ")", ":", "\n", "    ", "nh", "=", "np", ".", "prod", "(", "[", "v", ".", "value", "for", "v", "in", "x", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.discount_with_dones": [[154, 161], ["zip", "discounted.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "discount_with_dones", "(", "rewards", ",", "dones", ",", "gamma", ")", ":", "\n", "    ", "discounted", "=", "[", "]", "\n", "r", "=", "0", "\n", "for", "reward", ",", "done", "in", "zip", "(", "rewards", "[", ":", ":", "-", "1", "]", ",", "dones", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "        ", "r", "=", "reward", "+", "gamma", "*", "r", "*", "(", "1.", "-", "done", ")", "# fixed off by one bug", "\n", "discounted", ".", "append", "(", "r", ")", "\n", "", "return", "discounted", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.find_trainable_variables": [[162, 165], ["tensorflow.variable_scope", "tensorflow.trainable_variables"], "function", ["None"], ["", "def", "find_trainable_variables", "(", "key", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "key", ")", ":", "\n", "        ", "return", "tf", ".", "trainable_variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.make_path": [[166, 168], ["os.makedirs"], "function", ["None"], ["", "", "def", "make_path", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "makedirs", "(", "f", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.constant": [[169, 171], ["None"], "function", ["None"], ["", "def", "constant", "(", "p", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.linear": [[172, 174], ["None"], "function", ["None"], ["", "def", "linear", "(", "p", ")", ":", "\n", "    ", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.middle_drop": [[175, 180], ["None"], "function", ["None"], ["", "def", "middle_drop", "(", "p", ")", ":", "\n", "    ", "eps", "=", "0.75", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.double_linear_con": [[181, 187], ["None"], "function", ["None"], ["", "def", "double_linear_con", "(", "p", ")", ":", "\n", "    ", "p", "*=", "2", "\n", "eps", "=", "0.125", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.double_middle_drop": [[188, 196], ["None"], "function", ["None"], ["", "def", "double_middle_drop", "(", "p", ")", ":", "\n", "    ", "eps1", "=", "0.75", "\n", "eps2", "=", "0.25", "\n", "if", "1", "-", "p", "<", "eps1", ":", "\n", "        ", "if", "1", "-", "p", "<", "eps2", ":", "\n", "            ", "return", "eps2", "*", "0.5", "\n", "", "return", "eps1", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.get_by_index": [[259, 266], ["tensorflow.gather", "len", "len", "tensorflow.reshape", "x.get_shape", "idx.get_shape", "tensorflow.range"], "function", ["None"], ["", "", "", "def", "get_by_index", "(", "x", ",", "idx", ")", ":", "\n", "    ", "assert", "(", "len", "(", "x", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "assert", "(", "len", "(", "idx", ".", "get_shape", "(", ")", ")", "==", "1", ")", "\n", "idx_flattened", "=", "tf", ".", "range", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ")", "*", "x", ".", "shape", "[", "1", "]", "+", "idx", "\n", "y", "=", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", ",", "# flatten input", "\n", "idx_flattened", ")", "# use flattened indices", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.check_shape": [[267, 272], ["zip", "t.get_shape().as_list", "str", "str", "t.get_shape", "t.get_shape", "str"], "function", ["None"], ["", "def", "check_shape", "(", "ts", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "for", "(", "t", ",", "shape", ")", "in", "zip", "(", "ts", ",", "shapes", ")", ":", "\n", "        ", "assert", "t", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "shape", ",", "\"id \"", "+", "str", "(", "i", ")", "+", "\" shape \"", "+", "str", "(", "t", ".", "get_shape", "(", ")", ")", "+", "str", "(", "shape", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.avg_norm": [[273, 275], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["None"], ["", "", "def", "avg_norm", "(", "t", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "t", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.gradient_add": [[276, 285], ["print"], "function", ["None"], ["", "def", "gradient_add", "(", "g1", ",", "g2", ",", "param", ")", ":", "\n", "    ", "print", "(", "[", "g1", ",", "g2", ",", "param", ".", "name", "]", ")", "\n", "assert", "(", "not", "(", "g1", "is", "None", "and", "g2", "is", "None", ")", ")", ",", "param", ".", "name", "\n", "if", "g1", "is", "None", ":", "\n", "        ", "return", "g2", "\n", "", "elif", "g2", "is", "None", ":", "\n", "        ", "return", "g1", "\n", "", "else", ":", "\n", "        ", "return", "g1", "+", "g2", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_exploration.utils.q_explained_variance": [[286, 291], ["tensorflow.nn.moments", "tensorflow.nn.moments", "utils.check_shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape"], ["", "", "def", "q_explained_variance", "(", "qpred", ",", "q", ")", ":", "\n", "    ", "_", ",", "vary", "=", "tf", ".", "nn", ".", "moments", "(", "q", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "_", ",", "varpred", "=", "tf", ".", "nn", ".", "moments", "(", "q", "-", "qpred", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "check_shape", "(", "[", "vary", ",", "varpred", "]", ",", "[", "[", "]", "]", "*", "2", ")", "\n", "return", "1.0", "-", "(", "varpred", "/", "vary", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.nosharing_cnn_policy.CnnPolicy.__init__": [[8, 12], ["tensorflow.variable_scope", "nosharing_cnn_policy.CnnPolicy._init", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy._init"], ["def", "__init__", "(", "self", ",", "name", ",", "ob_space", ",", "ac_space", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "_init", "(", "ob_space", ",", "ac_space", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.nosharing_cnn_policy.CnnPolicy._init": [[13, 46], ["isinstance", "baselines.common.distributions.make_pdtype", "baselines.get_placeholder", "tensorflow.placeholder", "nosharing_cnn_policy.CnnPolicy.pd.sample", "baselines.function", "tensorflow.variable_scope", "tensorflow.nn.relu", "tensorflow.nn.relu", "baselines.flattenallbut0", "tensorflow.nn.relu", "tensorflow.layers.dense", "baselines.common.distributions.make_pdtype.pdfromflat", "tensorflow.variable_scope", "tensorflow.nn.relu", "tensorflow.nn.relu", "baselines.flattenallbut0", "tensorflow.nn.relu", "tensorflow.layers.dense", "baselines.conv2d", "baselines.conv2d", "tensorflow.layers.dense", "baselines.conv2d", "baselines.conv2d", "tensorflow.layers.dense", "list", "baselines.common.distributions.make_pdtype.param_shape", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.normc_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flattenallbut0", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flattenallbut0", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer"], ["", "", "def", "_init", "(", "self", ",", "ob_space", ",", "ac_space", ")", ":", "\n", "        ", "assert", "isinstance", "(", "ob_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "\n", "self", ".", "pdtype", "=", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "sequence_length", "=", "None", "\n", "\n", "ob", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"ob\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "sequence_length", "]", "+", "list", "(", "ob_space", ".", "shape", ")", ")", "\n", "\n", "obscaled", "=", "ob", "/", "255.0", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"pol\"", ")", ":", "\n", "            ", "x", "=", "obscaled", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "8", ",", "\"l1\"", ",", "[", "8", ",", "8", "]", ",", "[", "4", ",", "4", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "16", ",", "\"l2\"", ",", "[", "4", ",", "4", "]", ",", "[", "2", ",", "2", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "U", ".", "flattenallbut0", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "layers", ".", "dense", "(", "x", ",", "128", ",", "name", "=", "'lin'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", ",", "name", "=", "'logits'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "self", ".", "pd", "=", "pdtype", ".", "pdfromflat", "(", "logits", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"vf\"", ")", ":", "\n", "            ", "x", "=", "obscaled", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "8", ",", "\"l1\"", ",", "[", "8", ",", "8", "]", ",", "[", "4", ",", "4", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "16", ",", "\"l2\"", ",", "[", "4", ",", "4", "]", ",", "[", "2", ",", "2", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "U", ".", "flattenallbut0", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "layers", ".", "dense", "(", "x", ",", "128", ",", "name", "=", "'lin'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "self", ".", "vpred", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "1", ",", "name", "=", "'value'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", "\n", "self", ".", "vpredz", "=", "self", ".", "vpred", "\n", "\n", "", "self", ".", "state_in", "=", "[", "]", "\n", "self", ".", "state_out", "=", "[", "]", "\n", "\n", "stochastic", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "ac", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "self", ".", "_act", "=", "U", ".", "function", "(", "[", "stochastic", ",", "ob", "]", ",", "[", "ac", ",", "self", ".", "vpred", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.nosharing_cnn_policy.CnnPolicy.act": [[47, 50], ["nosharing_cnn_policy.CnnPolicy._act"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "stochastic", ",", "ob", ")", ":", "\n", "        ", "ac1", ",", "vpred1", "=", "self", ".", "_act", "(", "stochastic", ",", "ob", "[", "None", "]", ")", "\n", "return", "ac1", "[", "0", "]", ",", "vpred1", "[", "0", "]", "\n", "", "def", "get_variables", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.nosharing_cnn_policy.CnnPolicy.get_variables": [[50, 52], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "scope", ")", "\n", "", "def", "get_trainable_variables", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.nosharing_cnn_policy.CnnPolicy.get_trainable_variables": [[52, 54], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "", "def", "get_initial_state", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.nosharing_cnn_policy.CnnPolicy.get_initial_state": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_initial_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.run_mujoco.train": [[9, 28], ["U.single_threaded_session", "U.single_threaded_session.__enter__", "mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.common.cmd_util.make_mujoco_env", "baselines.trpo_mpi.trpo_mpi.learn", "baselines.common.cmd_util.make_mujoco_env.close", "baselines.logger.configure", "baselines.logger.configure", "baselines.logger.set_level", "baselines.ppo1.mlp_policy.MlpPolicy", "mpi4py.MPI.COMM_WORLD.Get_rank"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_mujoco_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.set_level"], ["def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ")", ":", "\n", "    ", "import", "baselines", ".", "common", ".", "tf_util", "as", "U", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "configure", "(", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "configure", "(", "format_strs", "=", "[", "]", ")", "\n", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "", "workerseed", "=", "seed", "+", "10000", "*", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "def", "policy_fn", "(", "name", ",", "ob_space", ",", "ac_space", ")", ":", "\n", "        ", "return", "MlpPolicy", "(", "name", "=", "name", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "\n", "hid_size", "=", "32", ",", "num_hid_layers", "=", "2", ")", "\n", "", "env", "=", "make_mujoco_env", "(", "env_id", ",", "workerseed", ")", "\n", "trpo_mpi", ".", "learn", "(", "env", ",", "policy_fn", ",", "timesteps_per_batch", "=", "1024", ",", "max_kl", "=", "0.01", ",", "cg_iters", "=", "10", ",", "cg_damping", "=", "0.1", ",", "\n", "max_timesteps", "=", "num_timesteps", ",", "gamma", "=", "0.99", ",", "lam", "=", "0.98", ",", "vf_iters", "=", "5", ",", "vf_stepsize", "=", "1e-3", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.run_mujoco.main": [[29, 32], ["baselines.common.cmd_util.mujoco_arg_parser().parse_args", "run_mujoco.train", "baselines.common.cmd_util.mujoco_arg_parser"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.mujoco_arg_parser"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "mujoco_arg_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.trpo_mpi.traj_segment_generator": [[13, 68], ["env.action_space.sample", "env.reset", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "np.array.copy", "pi.act", "env.step", "pi.act", "ep_rets.append", "ep_lens.append", "env.reset", "range", "range"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["def", "traj_segment_generator", "(", "pi", ",", "env", ",", "horizon", ",", "stochastic", ")", ":", "\n", "# Initialize state variables", "\n", "    ", "t", "=", "0", "\n", "ac", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "new", "=", "True", "\n", "rew", "=", "0.0", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "\n", "cur_ep_ret", "=", "0", "\n", "cur_ep_len", "=", "0", "\n", "ep_rets", "=", "[", "]", "\n", "ep_lens", "=", "[", "]", "\n", "\n", "# Initialize history arrays", "\n", "obs", "=", "np", ".", "array", "(", "[", "ob", "for", "_", "in", "range", "(", "horizon", ")", "]", ")", "\n", "rews", "=", "np", ".", "zeros", "(", "horizon", ",", "'float32'", ")", "\n", "vpreds", "=", "np", ".", "zeros", "(", "horizon", ",", "'float32'", ")", "\n", "news", "=", "np", ".", "zeros", "(", "horizon", ",", "'int32'", ")", "\n", "acs", "=", "np", ".", "array", "(", "[", "ac", "for", "_", "in", "range", "(", "horizon", ")", "]", ")", "\n", "prevacs", "=", "acs", ".", "copy", "(", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "prevac", "=", "ac", "\n", "ac", ",", "vpred", "=", "pi", ".", "act", "(", "stochastic", ",", "ob", ")", "\n", "# Slight weirdness here because we need value function at time T", "\n", "# before returning segment [0, T-1] so we get the correct", "\n", "# terminal value", "\n", "if", "t", ">", "0", "and", "t", "%", "horizon", "==", "0", ":", "\n", "            ", "yield", "{", "\"ob\"", ":", "obs", ",", "\"rew\"", ":", "rews", ",", "\"vpred\"", ":", "vpreds", ",", "\"new\"", ":", "news", ",", "\n", "\"ac\"", ":", "acs", ",", "\"prevac\"", ":", "prevacs", ",", "\"nextvpred\"", ":", "vpred", "*", "(", "1", "-", "new", ")", ",", "\n", "\"ep_rets\"", ":", "ep_rets", ",", "\"ep_lens\"", ":", "ep_lens", "}", "\n", "_", ",", "vpred", "=", "pi", ".", "act", "(", "stochastic", ",", "ob", ")", "\n", "# Be careful!!! if you change the downstream algorithm to aggregate", "\n", "# several of these batches, then be sure to do a deepcopy", "\n", "ep_rets", "=", "[", "]", "\n", "ep_lens", "=", "[", "]", "\n", "", "i", "=", "t", "%", "horizon", "\n", "obs", "[", "i", "]", "=", "ob", "\n", "vpreds", "[", "i", "]", "=", "vpred", "\n", "news", "[", "i", "]", "=", "new", "\n", "acs", "[", "i", "]", "=", "ac", "\n", "prevacs", "[", "i", "]", "=", "prevac", "\n", "\n", "ob", ",", "rew", ",", "new", ",", "_", "=", "env", ".", "step", "(", "ac", ")", "\n", "rews", "[", "i", "]", "=", "rew", "\n", "\n", "cur_ep_ret", "+=", "rew", "\n", "cur_ep_len", "+=", "1", "\n", "if", "new", ":", "\n", "            ", "ep_rets", ".", "append", "(", "cur_ep_ret", ")", "\n", "ep_lens", ".", "append", "(", "cur_ep_len", ")", "\n", "cur_ep_ret", "=", "0", "\n", "cur_ep_len", "=", "0", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "t", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.trpo_mpi.add_vtarg_and_adv": [[69, 81], ["numpy.append", "numpy.append", "len", "numpy.empty", "reversed", "range"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "", "def", "add_vtarg_and_adv", "(", "seg", ",", "gamma", ",", "lam", ")", ":", "\n", "    ", "new", "=", "np", ".", "append", "(", "seg", "[", "\"new\"", "]", ",", "0", ")", "# last element is only used for last vtarg, but we already zeroed it if last new = 1", "\n", "vpred", "=", "np", ".", "append", "(", "seg", "[", "\"vpred\"", "]", ",", "seg", "[", "\"nextvpred\"", "]", ")", "\n", "T", "=", "len", "(", "seg", "[", "\"rew\"", "]", ")", "\n", "seg", "[", "\"adv\"", "]", "=", "gaelam", "=", "np", ".", "empty", "(", "T", ",", "'float32'", ")", "\n", "rew", "=", "seg", "[", "\"rew\"", "]", "\n", "lastgaelam", "=", "0", "\n", "for", "t", "in", "reversed", "(", "range", "(", "T", ")", ")", ":", "\n", "        ", "nonterminal", "=", "1", "-", "new", "[", "t", "+", "1", "]", "\n", "delta", "=", "rew", "[", "t", "]", "+", "gamma", "*", "vpred", "[", "t", "+", "1", "]", "*", "nonterminal", "-", "vpred", "[", "t", "]", "\n", "gaelam", "[", "t", "]", "=", "lastgaelam", "=", "delta", "+", "gamma", "*", "lam", "*", "nonterminal", "*", "lastgaelam", "\n", "", "seg", "[", "\"tdlamret\"", "]", "=", "seg", "[", "\"adv\"", "]", "+", "seg", "[", "\"vpred\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.trpo_mpi.learn": [[82, 289], ["mpi4py.MPI.COMM_WORLD.Get_size", "mpi4py.MPI.COMM_WORLD.Get_rank", "numpy.set_printoptions", "policy_fn", "policy_fn", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.get_placeholder_cached", "policy_fn.pdtype.sample_placeholder", "policy_fn.pd.kl", "policy_fn.pd.entropy", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.exp", "tensorflow.reduce_mean", "policy_fn.get_trainable_variables", "baselines.common.mpi_adam.MpiAdam", "baselines.GetFlat", "baselines.SetFromFlat", "tensorflow.gradients", "tensorflow.placeholder", "tensorflow.add_n", "baselines.flatgrad", "baselines.function", "baselines.function", "baselines.function", "baselines.function", "baselines.function", "baselines.initialize", "U.GetFlat.", "mpi4py.MPI.COMM_WORLD.Bcast", "U.SetFromFlat.", "baselines.common.mpi_adam.MpiAdam.sync", "print", "trpo_mpi.traj_segment_generator", "time.time", "collections.deque", "collections.deque", "tensorflow.square", "var.get_shape().as_list", "baselines.intprod", "tangents.append", "baselines.flatgrad", "isinstance", "numpy.empty_like", "mpi4py.MPI.COMM_WORLD.Allreduce", "get_flat.sum", "sum", "baselines.logger.log", "trpo_mpi.add_vtarg_and_adv", "hasattr", "hasattr", "U.function.", "trpo_mpi.learn.allmean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.kl", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.traj_segment_generator", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.add_vtarg_and_adv"], ["", "def", "learn", "(", "env", ",", "policy_fn", ",", "*", ",", "\n", "timesteps_per_batch", ",", "# what to train on", "\n", "max_kl", ",", "cg_iters", ",", "\n", "gamma", ",", "lam", ",", "# advantage estimation", "\n", "entcoeff", "=", "0.0", ",", "\n", "cg_damping", "=", "1e-2", ",", "\n", "vf_stepsize", "=", "3e-4", ",", "\n", "vf_iters", "=", "3", ",", "\n", "max_timesteps", "=", "0", ",", "max_episodes", "=", "0", ",", "max_iters", "=", "0", ",", "# time constraint", "\n", "callback", "=", "None", "\n", ")", ":", "\n", "    ", "nworkers", "=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "3", ")", "\n", "# Setup losses and stuff", "\n", "# ----------------------------------------", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "pi", "=", "policy_fn", "(", "\"pi\"", ",", "ob_space", ",", "ac_space", ")", "\n", "oldpi", "=", "policy_fn", "(", "\"oldpi\"", ",", "ob_space", ",", "ac_space", ")", "\n", "atarg", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "# Target advantage function (if applicable)", "\n", "ret", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "# Empirical return", "\n", "\n", "ob", "=", "U", ".", "get_placeholder_cached", "(", "name", "=", "\"ob\"", ")", "\n", "ac", "=", "pi", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "\n", "kloldnew", "=", "oldpi", ".", "pd", ".", "kl", "(", "pi", ".", "pd", ")", "\n", "ent", "=", "pi", ".", "pd", ".", "entropy", "(", ")", "\n", "meankl", "=", "tf", ".", "reduce_mean", "(", "kloldnew", ")", "\n", "meanent", "=", "tf", ".", "reduce_mean", "(", "ent", ")", "\n", "entbonus", "=", "entcoeff", "*", "meanent", "\n", "\n", "vferr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "pi", ".", "vpred", "-", "ret", ")", ")", "\n", "\n", "ratio", "=", "tf", ".", "exp", "(", "pi", ".", "pd", ".", "logp", "(", "ac", ")", "-", "oldpi", ".", "pd", ".", "logp", "(", "ac", ")", ")", "# advantage * pnew / pold", "\n", "surrgain", "=", "tf", ".", "reduce_mean", "(", "ratio", "*", "atarg", ")", "\n", "\n", "optimgain", "=", "surrgain", "+", "entbonus", "\n", "losses", "=", "[", "optimgain", ",", "meankl", ",", "entbonus", ",", "surrgain", ",", "meanent", "]", "\n", "loss_names", "=", "[", "\"optimgain\"", ",", "\"meankl\"", ",", "\"entloss\"", ",", "\"surrgain\"", ",", "\"entropy\"", "]", "\n", "\n", "dist", "=", "meankl", "\n", "\n", "all_var_list", "=", "pi", ".", "get_trainable_variables", "(", ")", "\n", "var_list", "=", "[", "v", "for", "v", "in", "all_var_list", "if", "v", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ".", "startswith", "(", "\"pol\"", ")", "]", "\n", "vf_var_list", "=", "[", "v", "for", "v", "in", "all_var_list", "if", "v", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ".", "startswith", "(", "\"vf\"", ")", "]", "\n", "vfadam", "=", "MpiAdam", "(", "vf_var_list", ")", "\n", "\n", "get_flat", "=", "U", ".", "GetFlat", "(", "var_list", ")", "\n", "set_from_flat", "=", "U", ".", "SetFromFlat", "(", "var_list", ")", "\n", "klgrads", "=", "tf", ".", "gradients", "(", "dist", ",", "var_list", ")", "\n", "flat_tangent", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "\"flat_tan\"", ")", "\n", "shapes", "=", "[", "var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "for", "var", "in", "var_list", "]", "\n", "start", "=", "0", "\n", "tangents", "=", "[", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "sz", "=", "U", ".", "intprod", "(", "shape", ")", "\n", "tangents", ".", "append", "(", "tf", ".", "reshape", "(", "flat_tangent", "[", "start", ":", "start", "+", "sz", "]", ",", "shape", ")", ")", "\n", "start", "+=", "sz", "\n", "", "gvp", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "reduce_sum", "(", "g", "*", "tangent", ")", "for", "(", "g", ",", "tangent", ")", "in", "zipsame", "(", "klgrads", ",", "tangents", ")", "]", ")", "#pylint: disable=E1111", "\n", "fvp", "=", "U", ".", "flatgrad", "(", "gvp", ",", "var_list", ")", "\n", "\n", "assign_old_eq_new", "=", "U", ".", "function", "(", "[", "]", ",", "[", "]", ",", "updates", "=", "[", "tf", ".", "assign", "(", "oldv", ",", "newv", ")", "\n", "for", "(", "oldv", ",", "newv", ")", "in", "zipsame", "(", "oldpi", ".", "get_variables", "(", ")", ",", "pi", ".", "get_variables", "(", ")", ")", "]", ")", "\n", "compute_losses", "=", "U", ".", "function", "(", "[", "ob", ",", "ac", ",", "atarg", "]", ",", "losses", ")", "\n", "compute_lossandgrad", "=", "U", ".", "function", "(", "[", "ob", ",", "ac", ",", "atarg", "]", ",", "losses", "+", "[", "U", ".", "flatgrad", "(", "optimgain", ",", "var_list", ")", "]", ")", "\n", "compute_fvp", "=", "U", ".", "function", "(", "[", "flat_tangent", ",", "ob", ",", "ac", ",", "atarg", "]", ",", "fvp", ")", "\n", "compute_vflossandgrad", "=", "U", ".", "function", "(", "[", "ob", ",", "ret", "]", ",", "U", ".", "flatgrad", "(", "vferr", ",", "vf_var_list", ")", ")", "\n", "\n", "@", "contextmanager", "\n", "def", "timed", "(", "msg", ")", ":", "\n", "        ", "if", "rank", "==", "0", ":", "\n", "            ", "print", "(", "colorize", "(", "msg", ",", "color", "=", "'magenta'", ")", ")", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "yield", "\n", "print", "(", "colorize", "(", "\"done in %.3f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", ",", "color", "=", "'magenta'", ")", ")", "\n", "", "else", ":", "\n", "            ", "yield", "\n", "\n", "", "", "def", "allmean", "(", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "\n", "out", "=", "np", ".", "empty_like", "(", "x", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "x", ",", "out", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "out", "/=", "nworkers", "\n", "return", "out", "\n", "\n", "", "U", ".", "initialize", "(", ")", "\n", "th_init", "=", "get_flat", "(", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Bcast", "(", "th_init", ",", "root", "=", "0", ")", "\n", "set_from_flat", "(", "th_init", ")", "\n", "vfadam", ".", "sync", "(", ")", "\n", "print", "(", "\"Init param sum\"", ",", "th_init", ".", "sum", "(", ")", ",", "flush", "=", "True", ")", "\n", "\n", "# Prepare for rollouts", "\n", "# ----------------------------------------", "\n", "seg_gen", "=", "traj_segment_generator", "(", "pi", ",", "env", ",", "timesteps_per_batch", ",", "stochastic", "=", "True", ")", "\n", "\n", "episodes_so_far", "=", "0", "\n", "timesteps_so_far", "=", "0", "\n", "iters_so_far", "=", "0", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "lenbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode lengths", "\n", "rewbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode rewards", "\n", "\n", "assert", "sum", "(", "[", "max_iters", ">", "0", ",", "max_timesteps", ">", "0", ",", "max_episodes", ">", "0", "]", ")", "==", "1", "\n", "\n", "while", "True", ":", "\n", "        ", "if", "callback", ":", "callback", "(", "locals", "(", ")", ",", "globals", "(", ")", ")", "\n", "if", "max_timesteps", "and", "timesteps_so_far", ">=", "max_timesteps", ":", "\n", "            ", "break", "\n", "", "elif", "max_episodes", "and", "episodes_so_far", ">=", "max_episodes", ":", "\n", "            ", "break", "\n", "", "elif", "max_iters", "and", "iters_so_far", ">=", "max_iters", ":", "\n", "            ", "break", "\n", "", "logger", ".", "log", "(", "\"********** Iteration %i ************\"", "%", "iters_so_far", ")", "\n", "\n", "with", "timed", "(", "\"sampling\"", ")", ":", "\n", "            ", "seg", "=", "seg_gen", ".", "__next__", "(", ")", "\n", "", "add_vtarg_and_adv", "(", "seg", ",", "gamma", ",", "lam", ")", "\n", "\n", "# ob, ac, atarg, ret, td1ret = map(np.concatenate, (obs, acs, atargs, rets, td1rets))", "\n", "ob", ",", "ac", ",", "atarg", ",", "tdlamret", "=", "seg", "[", "\"ob\"", "]", ",", "seg", "[", "\"ac\"", "]", ",", "seg", "[", "\"adv\"", "]", ",", "seg", "[", "\"tdlamret\"", "]", "\n", "vpredbefore", "=", "seg", "[", "\"vpred\"", "]", "# predicted value function before udpate", "\n", "atarg", "=", "(", "atarg", "-", "atarg", ".", "mean", "(", ")", ")", "/", "atarg", ".", "std", "(", ")", "# standardized advantage function estimate", "\n", "\n", "if", "hasattr", "(", "pi", ",", "\"ret_rms\"", ")", ":", "pi", ".", "ret_rms", ".", "update", "(", "tdlamret", ")", "\n", "if", "hasattr", "(", "pi", ",", "\"ob_rms\"", ")", ":", "pi", ".", "ob_rms", ".", "update", "(", "ob", ")", "# update running mean/std for policy", "\n", "\n", "args", "=", "seg", "[", "\"ob\"", "]", ",", "seg", "[", "\"ac\"", "]", ",", "atarg", "\n", "fvpargs", "=", "[", "arr", "[", ":", ":", "5", "]", "for", "arr", "in", "args", "]", "\n", "def", "fisher_vector_product", "(", "p", ")", ":", "\n", "            ", "return", "allmean", "(", "compute_fvp", "(", "p", ",", "*", "fvpargs", ")", ")", "+", "cg_damping", "*", "p", "\n", "\n", "", "assign_old_eq_new", "(", ")", "# set old parameter values to new parameter values", "\n", "with", "timed", "(", "\"computegrad\"", ")", ":", "\n", "            ", "*", "lossbefore", ",", "g", "=", "compute_lossandgrad", "(", "*", "args", ")", "\n", "", "lossbefore", "=", "allmean", "(", "np", ".", "array", "(", "lossbefore", ")", ")", "\n", "g", "=", "allmean", "(", "g", ")", "\n", "if", "np", ".", "allclose", "(", "g", ",", "0", ")", ":", "\n", "            ", "logger", ".", "log", "(", "\"Got zero gradient. not updating\"", ")", "\n", "", "else", ":", "\n", "            ", "with", "timed", "(", "\"cg\"", ")", ":", "\n", "                ", "stepdir", "=", "cg", "(", "fisher_vector_product", ",", "g", ",", "cg_iters", "=", "cg_iters", ",", "verbose", "=", "rank", "==", "0", ")", "\n", "", "assert", "np", ".", "isfinite", "(", "stepdir", ")", ".", "all", "(", ")", "\n", "shs", "=", ".5", "*", "stepdir", ".", "dot", "(", "fisher_vector_product", "(", "stepdir", ")", ")", "\n", "lm", "=", "np", ".", "sqrt", "(", "shs", "/", "max_kl", ")", "\n", "# logger.log(\"lagrange multiplier:\", lm, \"gnorm:\", np.linalg.norm(g))", "\n", "fullstep", "=", "stepdir", "/", "lm", "\n", "expectedimprove", "=", "g", ".", "dot", "(", "fullstep", ")", "\n", "surrbefore", "=", "lossbefore", "[", "0", "]", "\n", "stepsize", "=", "1.0", "\n", "thbefore", "=", "get_flat", "(", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "thnew", "=", "thbefore", "+", "fullstep", "*", "stepsize", "\n", "set_from_flat", "(", "thnew", ")", "\n", "meanlosses", "=", "surr", ",", "kl", ",", "*", "_", "=", "allmean", "(", "np", ".", "array", "(", "compute_losses", "(", "*", "args", ")", ")", ")", "\n", "improve", "=", "surr", "-", "surrbefore", "\n", "logger", ".", "log", "(", "\"Expected: %.3f Actual: %.3f\"", "%", "(", "expectedimprove", ",", "improve", ")", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "meanlosses", ")", ".", "all", "(", ")", ":", "\n", "                    ", "logger", ".", "log", "(", "\"Got non-finite value of losses -- bad!\"", ")", "\n", "", "elif", "kl", ">", "max_kl", "*", "1.5", ":", "\n", "                    ", "logger", ".", "log", "(", "\"violated KL constraint. shrinking step.\"", ")", "\n", "", "elif", "improve", "<", "0", ":", "\n", "                    ", "logger", ".", "log", "(", "\"surrogate didn't improve. shrinking step.\"", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "log", "(", "\"Stepsize OK!\"", ")", "\n", "break", "\n", "", "stepsize", "*=", ".5", "\n", "", "else", ":", "\n", "                ", "logger", ".", "log", "(", "\"couldn't compute a good step\"", ")", "\n", "set_from_flat", "(", "thbefore", ")", "\n", "", "if", "nworkers", ">", "1", "and", "iters_so_far", "%", "20", "==", "0", ":", "\n", "                ", "paramsums", "=", "MPI", ".", "COMM_WORLD", ".", "allgather", "(", "(", "thnew", ".", "sum", "(", ")", ",", "vfadam", ".", "getflat", "(", ")", ".", "sum", "(", ")", ")", ")", "# list of tuples", "\n", "assert", "all", "(", "np", ".", "allclose", "(", "ps", ",", "paramsums", "[", "0", "]", ")", "for", "ps", "in", "paramsums", "[", "1", ":", "]", ")", "\n", "\n", "", "", "for", "(", "lossname", ",", "lossval", ")", "in", "zip", "(", "loss_names", ",", "meanlosses", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "lossname", ",", "lossval", ")", "\n", "\n", "", "with", "timed", "(", "\"vf\"", ")", ":", "\n", "\n", "            ", "for", "_", "in", "range", "(", "vf_iters", ")", ":", "\n", "                ", "for", "(", "mbob", ",", "mbret", ")", "in", "dataset", ".", "iterbatches", "(", "(", "seg", "[", "\"ob\"", "]", ",", "seg", "[", "\"tdlamret\"", "]", ")", ",", "\n", "include_final_partial_batch", "=", "False", ",", "batch_size", "=", "64", ")", ":", "\n", "                    ", "g", "=", "allmean", "(", "compute_vflossandgrad", "(", "mbob", ",", "mbret", ")", ")", "\n", "vfadam", ".", "update", "(", "g", ",", "vf_stepsize", ")", "\n", "\n", "", "", "", "logger", ".", "record_tabular", "(", "\"ev_tdlam_before\"", ",", "explained_variance", "(", "vpredbefore", ",", "tdlamret", ")", ")", "\n", "\n", "lrlocal", "=", "(", "seg", "[", "\"ep_lens\"", "]", ",", "seg", "[", "\"ep_rets\"", "]", ")", "# local values", "\n", "listoflrpairs", "=", "MPI", ".", "COMM_WORLD", ".", "allgather", "(", "lrlocal", ")", "# list of tuples", "\n", "lens", ",", "rews", "=", "map", "(", "flatten_lists", ",", "zip", "(", "*", "listoflrpairs", ")", ")", "\n", "lenbuffer", ".", "extend", "(", "lens", ")", "\n", "rewbuffer", ".", "extend", "(", "rews", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "\"EpLenMean\"", ",", "np", ".", "mean", "(", "lenbuffer", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"EpRewMean\"", ",", "np", ".", "mean", "(", "rewbuffer", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"EpThisIter\"", ",", "len", "(", "lens", ")", ")", "\n", "episodes_so_far", "+=", "len", "(", "lens", ")", "\n", "timesteps_so_far", "+=", "sum", "(", "lens", ")", "\n", "iters_so_far", "+=", "1", "\n", "\n", "logger", ".", "record_tabular", "(", "\"EpisodesSoFar\"", ",", "episodes_so_far", ")", "\n", "logger", ".", "record_tabular", "(", "\"TimestepsSoFar\"", ",", "timesteps_so_far", ")", "\n", "logger", ".", "record_tabular", "(", "\"TimeElapsed\"", ",", "time", ".", "time", "(", ")", "-", "tstart", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.trpo_mpi.flatten_lists": [[290, 292], ["None"], "function", ["None"], ["", "", "", "def", "flatten_lists", "(", "listoflists", ")", ":", "\n", "    ", "return", "[", "el", "for", "list_", "in", "listoflists", "for", "el", "in", "list_", "]", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.run_atari.train": [[11, 37], ["mpi4py.MPI.COMM_WORLD.Get_rank", "U.single_threaded_session", "U.single_threaded_session.__enter__", "baselines.common.set_global_seeds", "baselines.common.atari_wrappers.make_atari", "baselines.bench.Monitor", "baselines.common.atari_wrappers.wrap_deepmind.seed", "baselines.common.atari_wrappers.wrap_deepmind", "baselines.common.atari_wrappers.wrap_deepmind.seed", "trpo_mpi.learn", "baselines.common.atari_wrappers.wrap_deepmind.close", "baselines.logger.configure", "baselines.logger.configure", "CnnPolicy", "mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.logger.get_dir", "os.join", "int", "baselines.logger.get_dir", "str"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.make_atari", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.wrap_deepmind", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["        ", "policy_fn", "=", "CnnPolicy", "\n", "", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env", "=", "VecFrameStack", "(", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ")", ",", "4", ")", "\n", "learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "help", "=", "'Policy architecture'", ",", "choices", "=", "[", "'cnn'", ",", "'lstm'", ",", "'lnlstm'", "]", ",", "default", "=", "'cnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "help", "=", "'Learning rate schedule'", ",", "choices", "=", "[", "'constant'", ",", "'linear'", "]", ",", "default", "=", "'constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "policy", "=", "args", ".", "policy", ",", "lrschedule", "=", "args", ".", "lrschedule", ",", "num_env", "=", "16", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.trpo_mpi.run_atari.main": [[38, 41], ["baselines.common.cmd_util.atari_arg_parser().parse_args", "run_atari.train", "baselines.common.cmd_util.atari_arg_parser"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.__init__": [[12, 48], ["collections.deque", "collections.deque", "numpy.empty", "numpy.empty", "numpy.empty", "rollout.RolloutWorker.reset_all_rollouts", "rollout.RolloutWorker.clear_history", "make_env", "key.replace", "range", "dims.keys", "key.startswith"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.clear_history"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "make_env", ",", "policy", ",", "dims", ",", "logger", ",", "T", ",", "rollout_batch_size", "=", "1", ",", "\n", "exploit", "=", "False", ",", "use_target_net", "=", "False", ",", "compute_Q", "=", "False", ",", "noise_eps", "=", "0", ",", "\n", "random_eps", "=", "0", ",", "history_len", "=", "100", ",", "render", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Rollout worker generates experience by interacting with one or many environments.\n\n        Args:\n            make_env (function): a factory function that creates a new instance of the environment\n                when called\n            policy (object): the policy that is used to act\n            dims (dict of ints): the dimensions for observations (o), goals (g), and actions (u)\n            logger (object): the logger that is used by the rollout worker\n            rollout_batch_size (int): the number of parallel rollouts that should be used\n            exploit (boolean): whether or not to exploit, i.e. to act optimally according to the\n                current policy without any exploration\n            use_target_net (boolean): whether or not to use the target net for rollouts\n            compute_Q (boolean): whether or not to compute the Q values alongside the actions\n            noise_eps (float): scale of the additive Gaussian noise\n            random_eps (float): probability of selecting a completely random action\n            history_len (int): length of history for statistics smoothing\n            render (boolean): whether or not to render the rollouts\n        \"\"\"", "\n", "self", ".", "envs", "=", "[", "make_env", "(", ")", "for", "_", "in", "range", "(", "rollout_batch_size", ")", "]", "\n", "assert", "self", ".", "T", ">", "0", "\n", "\n", "self", ".", "info_keys", "=", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "for", "key", "in", "dims", ".", "keys", "(", ")", "if", "key", ".", "startswith", "(", "'info_'", ")", "]", "\n", "\n", "self", ".", "success_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "self", ".", "Q_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "\n", "self", ".", "n_episodes", "=", "0", "\n", "self", ".", "g", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ",", "np", ".", "float32", ")", "# goals", "\n", "self", ".", "initial_o", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ",", "np", ".", "float32", ")", "# observations", "\n", "self", ".", "initial_ag", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ",", "np", ".", "float32", ")", "# achieved goals", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "self", ".", "clear_history", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.reset_rollout": [[49, 57], ["rollout.RolloutWorker.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset_rollout", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"Resets the `i`-th rollout environment, re-samples a new goal, and updates the `initial_o`\n        and `g` arrays accordingly.\n        \"\"\"", "\n", "obs", "=", "self", ".", "envs", "[", "i", "]", ".", "reset", "(", ")", "\n", "self", ".", "initial_o", "[", "i", "]", "=", "obs", "[", "'observation'", "]", "\n", "self", ".", "initial_ag", "[", "i", "]", "=", "obs", "[", "'achieved_goal'", "]", "\n", "self", ".", "g", "[", "i", "]", "=", "obs", "[", "'desired_goal'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.reset_all_rollouts": [[58, 63], ["range", "rollout.RolloutWorker.reset_rollout"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.reset_rollout"], ["", "def", "reset_all_rollouts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets all `rollout_batch_size` rollout workers.\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "rollout_batch_size", ")", ":", "\n", "            ", "self", ".", "reset_rollout", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.generate_rollouts": [[64, 151], ["rollout.RolloutWorker.reset_all_rollouts", "numpy.empty", "numpy.empty", "range", "obs.append", "achieved_goals.append", "dict", "zip", "numpy.mean", "rollout.RolloutWorker.success_history.append", "baselines.her.util.convert_episode_to_batch_major", "numpy.empty", "rollout.RolloutWorker.policy.get_actions", "numpy.empty", "numpy.empty", "numpy.zeros", "range", "numpy.isnan().any", "obs.append", "achieved_goals.append", "successes.append", "acts.append", "goals.append", "numpy.empty.copy", "numpy.empty.copy", "numpy.array", "rollout.RolloutWorker.Q_history.append", "Qs.append", "u.reshape.reshape.reshape", "rollout.RolloutWorker.logger.warning", "rollout.RolloutWorker.reset_all_rollouts", "rollout.RolloutWorker.generate_rollouts", "numpy.empty.copy", "numpy.empty.copy", "numpy.zeros.copy", "u.reshape.reshape.copy", "rollout.RolloutWorker.g.copy", "numpy.mean", "rollout.RolloutWorker.envs[].step", "enumerate", "numpy.isnan", "rollout.RolloutWorker.envs[].render", "rollout.RolloutWorker.generate_rollouts"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.convert_episode_to_batch_major", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.get_actions", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.generate_rollouts"], ["", "", "def", "generate_rollouts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs `rollout_batch_size` rollouts in parallel for time horizon `T` with the current\n        policy acting on it accordingly.\n        \"\"\"", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "\n", "# compute observations", "\n", "o", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ",", "np", ".", "float32", ")", "# observations", "\n", "ag", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ",", "np", ".", "float32", ")", "# achieved goals", "\n", "o", "[", ":", "]", "=", "self", ".", "initial_o", "\n", "ag", "[", ":", "]", "=", "self", ".", "initial_ag", "\n", "\n", "# generate episodes", "\n", "obs", ",", "achieved_goals", ",", "acts", ",", "goals", ",", "successes", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "info_values", "=", "[", "np", ".", "empty", "(", "(", "self", ".", "T", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'info_'", "+", "key", "]", ")", ",", "np", ".", "float32", ")", "for", "key", "in", "self", ".", "info_keys", "]", "\n", "Qs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "policy_output", "=", "self", ".", "policy", ".", "get_actions", "(", "\n", "o", ",", "ag", ",", "self", ".", "g", ",", "\n", "compute_Q", "=", "self", ".", "compute_Q", ",", "\n", "noise_eps", "=", "self", ".", "noise_eps", "if", "not", "self", ".", "exploit", "else", "0.", ",", "\n", "random_eps", "=", "self", ".", "random_eps", "if", "not", "self", ".", "exploit", "else", "0.", ",", "\n", "use_target_net", "=", "self", ".", "use_target_net", ")", "\n", "\n", "if", "self", ".", "compute_Q", ":", "\n", "                ", "u", ",", "Q", "=", "policy_output", "\n", "Qs", ".", "append", "(", "Q", ")", "\n", "", "else", ":", "\n", "                ", "u", "=", "policy_output", "\n", "\n", "", "if", "u", ".", "ndim", "==", "1", ":", "\n", "# The non-batched case should still have a reasonable shape.", "\n", "                ", "u", "=", "u", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "o_new", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ")", "\n", "ag_new", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ")", "\n", "success", "=", "np", ".", "zeros", "(", "self", ".", "rollout_batch_size", ")", "\n", "# compute new states and observations", "\n", "for", "i", "in", "range", "(", "self", ".", "rollout_batch_size", ")", ":", "\n", "                ", "try", ":", "\n", "# We fully ignore the reward here because it will have to be re-computed", "\n", "# for HER.", "\n", "                    ", "curr_o_new", ",", "_", ",", "_", ",", "info", "=", "self", ".", "envs", "[", "i", "]", ".", "step", "(", "u", "[", "i", "]", ")", "\n", "if", "'is_success'", "in", "info", ":", "\n", "                        ", "success", "[", "i", "]", "=", "info", "[", "'is_success'", "]", "\n", "", "o_new", "[", "i", "]", "=", "curr_o_new", "[", "'observation'", "]", "\n", "ag_new", "[", "i", "]", "=", "curr_o_new", "[", "'achieved_goal'", "]", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "self", ".", "info_keys", ")", ":", "\n", "                        ", "info_values", "[", "idx", "]", "[", "t", ",", "i", "]", "=", "info", "[", "key", "]", "\n", "", "if", "self", ".", "render", ":", "\n", "                        ", "self", ".", "envs", "[", "i", "]", ".", "render", "(", ")", "\n", "", "", "except", "MujocoException", "as", "e", ":", "\n", "                    ", "return", "self", ".", "generate_rollouts", "(", ")", "\n", "\n", "", "", "if", "np", ".", "isnan", "(", "o_new", ")", ".", "any", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "'NaN caught during rollout generation. Trying again...'", ")", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "return", "self", ".", "generate_rollouts", "(", ")", "\n", "\n", "", "obs", ".", "append", "(", "o", ".", "copy", "(", ")", ")", "\n", "achieved_goals", ".", "append", "(", "ag", ".", "copy", "(", ")", ")", "\n", "successes", ".", "append", "(", "success", ".", "copy", "(", ")", ")", "\n", "acts", ".", "append", "(", "u", ".", "copy", "(", ")", ")", "\n", "goals", ".", "append", "(", "self", ".", "g", ".", "copy", "(", ")", ")", "\n", "o", "[", "...", "]", "=", "o_new", "\n", "ag", "[", "...", "]", "=", "ag_new", "\n", "", "obs", ".", "append", "(", "o", ".", "copy", "(", ")", ")", "\n", "achieved_goals", ".", "append", "(", "ag", ".", "copy", "(", ")", ")", "\n", "self", ".", "initial_o", "[", ":", "]", "=", "o", "\n", "\n", "episode", "=", "dict", "(", "o", "=", "obs", ",", "\n", "u", "=", "acts", ",", "\n", "g", "=", "goals", ",", "\n", "ag", "=", "achieved_goals", ")", "\n", "for", "key", ",", "value", "in", "zip", "(", "self", ".", "info_keys", ",", "info_values", ")", ":", "\n", "            ", "episode", "[", "'info_{}'", ".", "format", "(", "key", ")", "]", "=", "value", "\n", "\n", "# stats", "\n", "", "successful", "=", "np", ".", "array", "(", "successes", ")", "[", "-", "1", ",", ":", "]", "\n", "assert", "successful", ".", "shape", "==", "(", "self", ".", "rollout_batch_size", ",", ")", "\n", "success_rate", "=", "np", ".", "mean", "(", "successful", ")", "\n", "self", ".", "success_history", ".", "append", "(", "success_rate", ")", "\n", "if", "self", ".", "compute_Q", ":", "\n", "            ", "self", ".", "Q_history", ".", "append", "(", "np", ".", "mean", "(", "Qs", ")", ")", "\n", "", "self", ".", "n_episodes", "+=", "self", ".", "rollout_batch_size", "\n", "\n", "return", "convert_episode_to_batch_major", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.clear_history": [[152, 157], ["rollout.RolloutWorker.success_history.clear", "rollout.RolloutWorker.Q_history.clear"], "methods", ["None"], ["", "def", "clear_history", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears all histories that are used for statistics\n        \"\"\"", "\n", "self", ".", "success_history", ".", "clear", "(", ")", "\n", "self", ".", "Q_history", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.current_success_rate": [[158, 160], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "def", "current_success_rate", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "success_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.current_mean_Q": [[161, 163], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "def", "current_mean_Q", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "Q_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.save_policy": [[164, 169], ["open", "pickle.dump"], "methods", ["None"], ["", "def", "save_policy", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Pickles the current policy for later inspection.\n        \"\"\"", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "policy", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.logs": [[170, 183], ["numpy.mean", "prefix.endswith", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "def", "logs", "(", "self", ",", "prefix", "=", "'worker'", ")", ":", "\n", "        ", "\"\"\"Generates a dictionary that contains all collected statistics.\n        \"\"\"", "\n", "logs", "=", "[", "]", "\n", "logs", "+=", "[", "(", "'success_rate'", ",", "np", ".", "mean", "(", "self", ".", "success_history", ")", ")", "]", "\n", "if", "self", ".", "compute_Q", ":", "\n", "            ", "logs", "+=", "[", "(", "'mean_Q'", ",", "np", ".", "mean", "(", "self", ".", "Q_history", ")", ")", "]", "\n", "", "logs", "+=", "[", "(", "'episode'", ",", "self", ".", "n_episodes", ")", "]", "\n", "\n", "if", "prefix", "is", "not", "''", "and", "not", "prefix", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "[", "(", "prefix", "+", "'/'", "+", "key", ",", "val", ")", "for", "key", ",", "val", "in", "logs", "]", "\n", "", "else", ":", "\n", "            ", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed": [[184, 189], ["enumerate", "env.seed"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "\"\"\"Seeds each environment with a distinct seed derived from the passed in global seed.\n        \"\"\"", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "self", ".", "envs", ")", ":", "\n", "            ", "env", ".", "seed", "(", "seed", "+", "1000", "*", "idx", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.__init__": [[7, 31], ["threading.Lock", "numpy.empty", "buffer_shapes.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_shapes", ",", "size_in_transitions", ",", "T", ",", "sample_transitions", ")", ":", "\n", "        ", "\"\"\"Creates a replay buffer.\n\n        Args:\n            buffer_shapes (dict of ints): the shape for all buffers that are used in the replay\n                buffer\n            size_in_transitions (int): the size of the buffer, measured in transitions\n            T (int): the time horizon for episodes\n            sample_transitions (function): a function that samples from the replay buffer\n        \"\"\"", "\n", "self", ".", "buffer_shapes", "=", "buffer_shapes", "\n", "self", ".", "size", "=", "size_in_transitions", "//", "T", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "sample_transitions", "=", "sample_transitions", "\n", "\n", "# self.buffers is {key: array(size_in_episodes x T or T+1 x dim_key)}", "\n", "self", ".", "buffers", "=", "{", "key", ":", "np", ".", "empty", "(", "[", "self", ".", "size", ",", "*", "shape", "]", ")", "\n", "for", "key", ",", "shape", "in", "buffer_shapes", ".", "items", "(", ")", "}", "\n", "\n", "# memory management", "\n", "self", ".", "current_size", "=", "0", "\n", "self", ".", "n_transitions_stored", "=", "0", "\n", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.full": [[32, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "==", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.sample": [[37, 56], ["replay_buffer.ReplayBuffer.sample_transitions", "replay_buffer.ReplayBuffer.buffers.keys", "list", "replay_buffer.ReplayBuffer.buffers.keys"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Returns a dict {key: array(batch_size x shapes[key])}\n        \"\"\"", "\n", "buffers", "=", "{", "}", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "assert", "self", ".", "current_size", ">", "0", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "buffers", "[", "key", "]", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "\n", "\n", "", "", "buffers", "[", "'o_2'", "]", "=", "buffers", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "buffers", "[", "'ag_2'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "transitions", "=", "self", ".", "sample_transitions", "(", "buffers", ",", "batch_size", ")", "\n", "\n", "for", "key", "in", "(", "[", "'r'", ",", "'o_2'", ",", "'ag_2'", "]", "+", "list", "(", "self", ".", "buffers", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "assert", "key", "in", "transitions", ",", "\"key %s missing from transitions\"", "%", "key", "\n", "\n", "", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.store_episode": [[57, 72], ["numpy.all", "len", "replay_buffer.ReplayBuffer._get_storage_idx", "replay_buffer.ReplayBuffer.buffers.keys", "episode_batch.keys", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer._get_storage_idx"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ")", ":", "\n", "        ", "\"\"\"episode_batch: array(batch_size x (T or T+1) x dim_key)\n        \"\"\"", "\n", "batch_sizes", "=", "[", "len", "(", "episode_batch", "[", "key", "]", ")", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "batch_sizes", ")", "==", "batch_sizes", "[", "0", "]", ")", "\n", "batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "idxs", "=", "self", ".", "_get_storage_idx", "(", "batch_size", ")", "\n", "\n", "# load inputs into buffers", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "buffers", "[", "key", "]", "[", "idxs", "]", "=", "episode_batch", "[", "key", "]", "\n", "\n", "", "self", ".", "n_transitions_stored", "+=", "batch_size", "*", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.get_current_episode_size": [[73, 76], ["None"], "methods", ["None"], ["", "", "def", "get_current_episode_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.get_current_size": [[77, 80], ["None"], "methods", ["None"], ["", "", "def", "get_current_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "*", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.get_transitions_stored": [[81, 84], ["None"], "methods", ["None"], ["", "", "def", "get_transitions_stored", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "n_transitions_stored", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.clear_buffer": [[85, 88], ["None"], "methods", ["None"], ["", "", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "current_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer._get_storage_idx": [[89, 109], ["min", "numpy.arange", "numpy.arange", "numpy.random.randint", "numpy.concatenate", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min"], ["", "", "def", "_get_storage_idx", "(", "self", ",", "inc", "=", "None", ")", ":", "\n", "        ", "inc", "=", "inc", "or", "1", "# size increment", "\n", "assert", "inc", "<=", "self", ".", "size", ",", "\"Batch committed to replay is too large!\"", "\n", "# go consecutively until you hit the end, and then go randomly.", "\n", "if", "self", ".", "current_size", "+", "inc", "<=", "self", ".", "size", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "", "elif", "self", ".", "current_size", "<", "self", ".", "size", ":", "\n", "            ", "overflow", "=", "inc", "-", "(", "self", ".", "size", "-", "self", ".", "current_size", ")", "\n", "idx_a", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "size", ")", "\n", "idx_b", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "current_size", ",", "overflow", ")", "\n", "idx", "=", "np", ".", "concatenate", "(", "[", "idx_a", ",", "idx_b", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "size", ",", "inc", ")", "\n", "\n", "# update replay size", "\n", "", "self", ".", "current_size", "=", "min", "(", "self", ".", "size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "\n", "if", "inc", "==", "1", ":", "\n", "            ", "idx", "=", "idx", "[", "0", "]", "\n", "", "return", "idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.__init__": [[20, 94], ["baselines.her.util.import_function", "ddpg.dims_to_shapes", "collections.OrderedDict", "sorted", "baselines.her.replay_buffer.ReplayBuffer", "ddpg.DDPG.input_dims.keys", "key.startswith", "tensorflow.variable_scope", "tensorflow.contrib.staging.StagingArea", "ddpg.DDPG.staging_tf.put", "ddpg.DDPG._create_network", "tensorflow.placeholder", "dims_to_shapes.items", "list", "ddpg.DDPG.stage_shapes.values", "ddpg.DDPG.stage_shapes.values", "ddpg.DDPG.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.import_function", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.dims_to_shapes", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.put", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._create_network"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "input_dims", ",", "buffer_size", ",", "hidden", ",", "layers", ",", "network_class", ",", "polyak", ",", "batch_size", ",", "\n", "Q_lr", ",", "pi_lr", ",", "norm_eps", ",", "norm_clip", ",", "max_u", ",", "action_l2", ",", "clip_obs", ",", "scope", ",", "T", ",", "\n", "rollout_batch_size", ",", "subtract_goals", ",", "relative_goals", ",", "clip_pos_returns", ",", "clip_return", ",", "\n", "sample_transitions", ",", "gamma", ",", "reuse", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Implementation of DDPG that is used in combination with Hindsight Experience Replay (HER).\n\n        Args:\n            input_dims (dict of ints): dimensions for the observation (o), the goal (g), and the\n                actions (u)\n            buffer_size (int): number of transitions that are stored in the replay buffer\n            hidden (int): number of units in the hidden layers\n            layers (int): number of hidden layers\n            network_class (str): the network class that should be used (e.g. 'baselines.her.ActorCritic')\n            polyak (float): coefficient for Polyak-averaging of the target network\n            batch_size (int): batch size for training\n            Q_lr (float): learning rate for the Q (critic) network\n            pi_lr (float): learning rate for the pi (actor) network\n            norm_eps (float): a small value used in the normalizer to avoid numerical instabilities\n            norm_clip (float): normalized inputs are clipped to be in [-norm_clip, norm_clip]\n            max_u (float): maximum action magnitude, i.e. actions are in [-max_u, max_u]\n            action_l2 (float): coefficient for L2 penalty on the actions\n            clip_obs (float): clip observations before normalization to be in [-clip_obs, clip_obs]\n            scope (str): the scope used for the TensorFlow graph\n            T (int): the time horizon for rollouts\n            rollout_batch_size (int): number of parallel rollouts per DDPG agent\n            subtract_goals (function): function that subtracts goals from each other\n            relative_goals (boolean): whether or not relative goals should be fed into the network\n            clip_pos_returns (boolean): whether or not positive returns should be clipped\n            clip_return (float): clip returns to be in [-clip_return, clip_return]\n            sample_transitions (function) function that samples from the replay buffer\n            gamma (float): gamma used for Q learning updates\n            reuse (boolean): whether or not the networks should be reused\n        \"\"\"", "\n", "if", "self", ".", "clip_return", "is", "None", ":", "\n", "            ", "self", ".", "clip_return", "=", "np", ".", "inf", "\n", "\n", "", "self", ".", "create_actor_critic", "=", "import_function", "(", "self", ".", "network_class", ")", "\n", "\n", "input_shapes", "=", "dims_to_shapes", "(", "self", ".", "input_dims", ")", "\n", "self", ".", "dimo", "=", "self", ".", "input_dims", "[", "'o'", "]", "\n", "self", ".", "dimg", "=", "self", ".", "input_dims", "[", "'g'", "]", "\n", "self", ".", "dimu", "=", "self", ".", "input_dims", "[", "'u'", "]", "\n", "\n", "# Prepare staging area for feeding data to the model.", "\n", "stage_shapes", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "sorted", "(", "self", ".", "input_dims", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "continue", "\n", "", "stage_shapes", "[", "key", "]", "=", "(", "None", ",", "*", "input_shapes", "[", "key", "]", ")", "\n", "", "for", "key", "in", "[", "'o'", ",", "'g'", "]", ":", "\n", "            ", "stage_shapes", "[", "key", "+", "'_2'", "]", "=", "stage_shapes", "[", "key", "]", "\n", "", "stage_shapes", "[", "'r'", "]", "=", "(", "None", ",", ")", "\n", "self", ".", "stage_shapes", "=", "stage_shapes", "\n", "\n", "# Create network.", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "self", ".", "staging_tf", "=", "StagingArea", "(", "\n", "dtypes", "=", "[", "tf", ".", "float32", "for", "_", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", ",", "\n", "shapes", "=", "list", "(", "self", ".", "stage_shapes", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "buffer_ph_tf", "=", "[", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ")", "for", "shape", "in", "self", ".", "stage_shapes", ".", "values", "(", ")", "]", "\n", "self", ".", "stage_op", "=", "self", ".", "staging_tf", ".", "put", "(", "self", ".", "buffer_ph_tf", ")", "\n", "\n", "self", ".", "_create_network", "(", "reuse", "=", "reuse", ")", "\n", "\n", "# Configure the replay buffer.", "\n", "", "buffer_shapes", "=", "{", "key", ":", "(", "self", ".", "T", "if", "key", "!=", "'o'", "else", "self", ".", "T", "+", "1", ",", "*", "input_shapes", "[", "key", "]", ")", "\n", "for", "key", ",", "val", "in", "input_shapes", ".", "items", "(", ")", "}", "\n", "buffer_shapes", "[", "'g'", "]", "=", "(", "buffer_shapes", "[", "'g'", "]", "[", "0", "]", ",", "self", ".", "dimg", ")", "\n", "buffer_shapes", "[", "'ag'", "]", "=", "(", "self", ".", "T", "+", "1", ",", "self", ".", "dimg", ")", "\n", "\n", "buffer_size", "=", "(", "self", ".", "buffer_size", "//", "self", ".", "rollout_batch_size", ")", "*", "self", ".", "rollout_batch_size", "\n", "self", ".", "buffer", "=", "ReplayBuffer", "(", "buffer_shapes", ",", "buffer_size", ",", "self", ".", "T", ",", "self", ".", "sample_transitions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._random_action": [[95, 97], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "_random_action", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "self", ".", "max_u", ",", "high", "=", "self", ".", "max_u", ",", "size", "=", "(", "n", ",", "self", ".", "dimu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._preprocess_og": [[98, 108], ["numpy.clip", "numpy.clip", "g.reshape.reshape.reshape", "ag.reshape.reshape.reshape", "ddpg.DDPG.subtract_goals", "g.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "_preprocess_og", "(", "self", ",", "o", ",", "ag", ",", "g", ")", ":", "\n", "        ", "if", "self", ".", "relative_goals", ":", "\n", "            ", "g_shape", "=", "g", ".", "shape", "\n", "g", "=", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "ag", "=", "ag", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "g", "=", "self", ".", "subtract_goals", "(", "g", ",", "ag", ")", "\n", "g", "=", "g", ".", "reshape", "(", "*", "g_shape", ")", "\n", "", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "g", "=", "np", ".", "clip", "(", "g", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "return", "o", ",", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.get_actions": [[109, 140], ["ddpg.DDPG._preprocess_og", "ddpg.DDPG.sess.run", "numpy.clip", "u.copy.copy.copy", "o.reshape", "g.reshape", "numpy.zeros", "numpy.random.randn", "numpy.random.binomial().reshape", "len", "ddpg.DDPG._random_action", "numpy.random.binomial"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._random_action"], ["", "def", "get_actions", "(", "self", ",", "o", ",", "ag", ",", "g", ",", "noise_eps", "=", "0.", ",", "random_eps", "=", "0.", ",", "use_target_net", "=", "False", ",", "\n", "compute_Q", "=", "False", ")", ":", "\n", "        ", "o", ",", "g", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "policy", "=", "self", ".", "target", "if", "use_target_net", "else", "self", ".", "main", "\n", "# values to compute", "\n", "vals", "=", "[", "policy", ".", "pi_tf", "]", "\n", "if", "compute_Q", ":", "\n", "            ", "vals", "+=", "[", "policy", ".", "Q_pi_tf", "]", "\n", "# feed", "\n", "", "feed", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "policy", ".", "u_tf", ":", "np", ".", "zeros", "(", "(", "o", ".", "size", "//", "self", ".", "dimo", ",", "self", ".", "dimu", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "}", "\n", "\n", "ret", "=", "self", ".", "sess", ".", "run", "(", "vals", ",", "feed_dict", "=", "feed", ")", "\n", "# action postprocessing", "\n", "u", "=", "ret", "[", "0", "]", "\n", "noise", "=", "noise_eps", "*", "self", ".", "max_u", "*", "np", ".", "random", ".", "randn", "(", "*", "u", ".", "shape", ")", "# gaussian noise", "\n", "u", "+=", "noise", "\n", "u", "=", "np", ".", "clip", "(", "u", ",", "-", "self", ".", "max_u", ",", "self", ".", "max_u", ")", "\n", "u", "+=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random_eps", ",", "u", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "(", "self", ".", "_random_action", "(", "u", ".", "shape", "[", "0", "]", ")", "-", "u", ")", "# eps-greedy", "\n", "if", "u", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "u", "=", "u", "[", "0", "]", "\n", "", "u", "=", "u", ".", "copy", "(", ")", "\n", "ret", "[", "0", "]", "=", "u", "\n", "\n", "if", "len", "(", "ret", ")", "==", "1", ":", "\n", "            ", "return", "ret", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.store_episode": [[141, 165], ["ddpg.DDPG.buffer.store_episode", "baselines.her.util.transitions_in_episode_batch", "ddpg.DDPG.sample_transitions", "ddpg.DDPG._preprocess_og", "ddpg.DDPG.o_stats.update", "ddpg.DDPG.g_stats.update", "ddpg.DDPG.o_stats.recompute_stats", "ddpg.DDPG.g_stats.recompute_stats"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.store_episode", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.transitions_in_episode_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.recompute_stats", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.recompute_stats"], ["", "", "def", "store_episode", "(", "self", ",", "episode_batch", ",", "update_stats", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        episode_batch: array of batch_size x (T or T+1) x dim_key\n                       'o' is of size T+1, others are of size T\n        \"\"\"", "\n", "\n", "self", ".", "buffer", ".", "store_episode", "(", "episode_batch", ")", "\n", "\n", "if", "update_stats", ":", "\n", "# add transitions to normalizer", "\n", "            ", "episode_batch", "[", "'o_2'", "]", "=", "episode_batch", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "episode_batch", "[", "'ag_2'", "]", "=", "episode_batch", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "num_normalizing_transitions", "=", "transitions_in_episode_batch", "(", "episode_batch", ")", "\n", "transitions", "=", "self", ".", "sample_transitions", "(", "episode_batch", ",", "num_normalizing_transitions", ")", "\n", "\n", "o", ",", "o_2", ",", "g", ",", "ag", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g'", "]", ",", "transitions", "[", "'ag'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "# No need to preprocess the o_2 and g_2 since this is only used for stats", "\n", "\n", "self", ".", "o_stats", ".", "update", "(", "transitions", "[", "'o'", "]", ")", "\n", "self", ".", "g_stats", ".", "update", "(", "transitions", "[", "'g'", "]", ")", "\n", "\n", "self", ".", "o_stats", ".", "recompute_stats", "(", ")", "\n", "self", ".", "g_stats", ".", "recompute_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.get_current_buffer_size": [[166, 168], ["ddpg.DDPG.buffer.get_current_size"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.replay_buffer.ReplayBuffer.get_current_size"], ["", "", "def", "get_current_buffer_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "get_current_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._sync_optimizers": [[169, 172], ["ddpg.DDPG.Q_adam.sync", "ddpg.DDPG.pi_adam.sync"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync"], ["", "def", "_sync_optimizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "sync", "(", ")", "\n", "self", ".", "pi_adam", ".", "sync", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._grads": [[173, 182], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "_grads", "(", "self", ")", ":", "\n", "# Avoid feed_dict here for performance!", "\n", "        ", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "Q_loss_tf", ",", "\n", "self", ".", "main", ".", "Q_pi_tf", ",", "\n", "self", ".", "Q_grad_tf", ",", "\n", "self", ".", "pi_grad_tf", "\n", "]", ")", "\n", "return", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._update": [[183, 186], ["ddpg.DDPG.Q_adam.update", "ddpg.DDPG.pi_adam.update"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "_update", "(", "self", ",", "Q_grad", ",", "pi_grad", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "update", "(", "Q_grad", ",", "self", ".", "Q_lr", ")", "\n", "self", ".", "pi_adam", ".", "update", "(", "pi_grad", ",", "self", ".", "pi_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.sample_batch": [[187, 196], ["ddpg.DDPG.buffer.sample", "ddpg.DDPG._preprocess_og", "ddpg.DDPG._preprocess_og", "ddpg.DDPG.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._preprocess_og"], ["", "def", "sample_batch", "(", "self", ")", ":", "\n", "        ", "transitions", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "o", ",", "o_2", ",", "g", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g'", "]", "\n", "ag", ",", "ag_2", "=", "transitions", "[", "'ag'", "]", ",", "transitions", "[", "'ag_2'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g_2'", "]", "=", "self", ".", "_preprocess_og", "(", "o_2", ",", "ag_2", ",", "g", ")", "\n", "\n", "transitions_batch", "=", "[", "transitions", "[", "key", "]", "for", "key", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", "\n", "return", "transitions_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.stage_batch": [[197, 202], ["ddpg.DDPG.sess.run", "ddpg.DDPG.sample_batch", "len", "len", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.sample_batch"], ["", "def", "stage_batch", "(", "self", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "self", ".", "sample_batch", "(", ")", "\n", "", "assert", "len", "(", "self", ".", "buffer_ph_tf", ")", "==", "len", "(", "batch", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "stage_op", ",", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "buffer_ph_tf", ",", "batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.train": [[203, 209], ["ddpg.DDPG._grads", "ddpg.DDPG._update", "ddpg.DDPG.stage_batch"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._grads", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._update", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.stage_batch"], ["", "def", "train", "(", "self", ",", "stage", "=", "True", ")", ":", "\n", "        ", "if", "stage", ":", "\n", "            ", "self", ".", "stage_batch", "(", ")", "\n", "", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "=", "self", ".", "_grads", "(", ")", "\n", "self", ".", "_update", "(", "Q_grad", ",", "pi_grad", ")", "\n", "return", "critic_loss", ",", "actor_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._init_target_net": [[210, 212], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "_init_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "init_target_net_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.update_target_net": [[213, 215], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "update_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "update_target_net_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.clear_buffer": [[216, 218], ["ddpg.DDPG.buffer.clear_buffer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.clear_buffer"], ["", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer", ".", "clear_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars": [[219, 223], ["tensorflow.get_collection", "len"], "methods", ["None"], ["", "def", "_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "assert", "len", "(", "res", ")", ">", "0", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._global_vars": [[224, 227], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "_global_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._create_network": [[228, 301], ["baselines.logger.info", "tensorflow.get_default_session", "ddpg.DDPG.staging_tf.get", "collections.OrderedDict", "tensorflow.reshape", "tensorflow.clip_by_value", "tensorflow.reduce_mean", "tensorflow.gradients", "tensorflow.gradients", "zip", "zip", "baselines.her.util.flatten_grads", "baselines.her.util.flatten_grads", "baselines.common.mpi_adam.MpiAdam", "baselines.common.mpi_adam.MpiAdam", "list", "list", "tensorflow.variables_initializer().run", "ddpg.DDPG._sync_optimizers", "ddpg.DDPG._init_target_net", "tensorflow.InteractiveSession", "tensorflow.variable_scope", "baselines.her.normalizer.Normalizer", "tensorflow.variable_scope", "baselines.her.normalizer.Normalizer", "tensorflow.variable_scope", "ddpg.DDPG.create_actor_critic", "vs.reuse_variables", "tensorflow.variable_scope", "collections.OrderedDict.copy", "ddpg.DDPG.create_actor_critic", "vs.reuse_variables", "len", "len", "tensorflow.square", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "len", "len", "len", "len", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._global_vars", "ddpg.DDPG._global_vars", "map", "map", "vs.reuse_variables", "vs.reuse_variables", "vs.reuse_variables", "vs.reuse_variables", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "tensorflow.square", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "zip", "zip", "tensorflow.variables_initializer", "enumerate", "tensorflow.stop_gradient", "v[].assign", "v[].assign", "ddpg.DDPG._global_vars", "ddpg.DDPG.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.flatten_grads", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.flatten_grads", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._sync_optimizers", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._init_target_net", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._global_vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._global_vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._global_vars"], ["", "def", "_create_network", "(", "self", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating a DDPG agent with action space %d x %s...\"", "%", "(", "self", ".", "dimu", ",", "self", ".", "max_u", ")", ")", "\n", "\n", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "self", ".", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "\n", "# running averages", "\n", "", "with", "tf", ".", "variable_scope", "(", "'o_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "o_stats", "=", "Normalizer", "(", "self", ".", "dimo", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'g_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "g_stats", "=", "Normalizer", "(", "self", ".", "dimg", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "\n", "# mini-batch sampling.", "\n", "", "batch", "=", "self", ".", "staging_tf", ".", "get", "(", ")", "\n", "batch_tf", "=", "OrderedDict", "(", "[", "(", "key", ",", "batch", "[", "i", "]", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "stage_shapes", ".", "keys", "(", ")", ")", "]", ")", "\n", "batch_tf", "[", "'r'", "]", "=", "tf", ".", "reshape", "(", "batch_tf", "[", "'r'", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "# networks", "\n", "with", "tf", ".", "variable_scope", "(", "'main'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "main", "=", "self", ".", "create_actor_critic", "(", "batch_tf", ",", "net_type", "=", "'main'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'target'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "target_batch_tf", "=", "batch_tf", ".", "copy", "(", ")", "\n", "target_batch_tf", "[", "'o'", "]", "=", "batch_tf", "[", "'o_2'", "]", "\n", "target_batch_tf", "[", "'g'", "]", "=", "batch_tf", "[", "'g_2'", "]", "\n", "self", ".", "target", "=", "self", ".", "create_actor_critic", "(", "\n", "target_batch_tf", ",", "net_type", "=", "'target'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "assert", "len", "(", "self", ".", "_vars", "(", "\"main\"", ")", ")", "==", "len", "(", "self", ".", "_vars", "(", "\"target\"", ")", ")", "\n", "\n", "# loss functions", "\n", "target_Q_pi_tf", "=", "self", ".", "target", ".", "Q_pi_tf", "\n", "clip_range", "=", "(", "-", "self", ".", "clip_return", ",", "0.", "if", "self", ".", "clip_pos_returns", "else", "np", ".", "inf", ")", "\n", "target_tf", "=", "tf", ".", "clip_by_value", "(", "batch_tf", "[", "'r'", "]", "+", "self", ".", "gamma", "*", "target_Q_pi_tf", ",", "*", "clip_range", ")", "\n", "self", ".", "Q_loss_tf", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "tf", ".", "stop_gradient", "(", "target_tf", ")", "-", "self", ".", "main", ".", "Q_tf", ")", ")", "\n", "self", ".", "pi_loss_tf", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "main", ".", "Q_pi_tf", ")", "\n", "self", ".", "pi_loss_tf", "+=", "self", ".", "action_l2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "main", ".", "pi_tf", "/", "self", ".", "max_u", ")", ")", "\n", "Q_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "Q_loss_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "pi_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "pi_loss_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "==", "len", "(", "Q_grads_tf", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "==", "len", "(", "pi_grads_tf", ")", "\n", "self", ".", "Q_grads_vars_tf", "=", "zip", "(", "Q_grads_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "self", ".", "pi_grads_vars_tf", "=", "zip", "(", "pi_grads_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "self", ".", "Q_grad_tf", "=", "flatten_grads", "(", "grads", "=", "Q_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "self", ".", "pi_grad_tf", "=", "flatten_grads", "(", "grads", "=", "pi_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "\n", "# optimizers", "\n", "self", ".", "Q_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "self", ".", "pi_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "\n", "# polyak averaging", "\n", "self", ".", "main_vars", "=", "self", ".", "_vars", "(", "'main/Q'", ")", "+", "self", ".", "_vars", "(", "'main/pi'", ")", "\n", "self", ".", "target_vars", "=", "self", ".", "_vars", "(", "'target/Q'", ")", "+", "self", ".", "_vars", "(", "'target/pi'", ")", "\n", "self", ".", "stats_vars", "=", "self", ".", "_global_vars", "(", "'o_stats'", ")", "+", "self", ".", "_global_vars", "(", "'g_stats'", ")", "\n", "self", ".", "init_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "self", ".", "update_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "self", ".", "polyak", "*", "v", "[", "0", "]", "+", "(", "1.", "-", "self", ".", "polyak", ")", "*", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "\n", "# initialize all variables", "\n", "tf", ".", "variables_initializer", "(", "self", ".", "_global_vars", "(", "''", ")", ")", ".", "run", "(", ")", "\n", "self", ".", "_sync_optimizers", "(", ")", "\n", "self", ".", "_init_target_net", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.logs": [[302, 313], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "prefix.endswith", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "logs", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "logs", "=", "[", "]", "\n", "logs", "+=", "[", "(", "'stats_o/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_o/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "\n", "if", "prefix", "is", "not", "''", "and", "not", "prefix", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "[", "(", "prefix", "+", "'/'", "+", "key", ",", "val", ")", "for", "key", ",", "val", "in", "logs", "]", "\n", "", "else", ":", "\n", "            ", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.__getstate__": [[314, 325], ["ddpg.DDPG.sess.run", "ddpg.DDPG.__dict__.items", "all", "ddpg.DDPG._global_vars"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._global_vars"], ["", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Our policies can be loaded from pkl, but after unpickling you cannot continue training.\n        \"\"\"", "\n", "excluded_subnames", "=", "[", "'_tf'", ",", "'_op'", ",", "'_vars'", ",", "'_adam'", ",", "'buffer'", ",", "'sess'", ",", "'_stats'", ",", "\n", "'main'", ",", "'target'", ",", "'lock'", ",", "'env'", ",", "'sample_transitions'", ",", "\n", "'stage_shapes'", ",", "'create_actor_critic'", "]", "\n", "\n", "state", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "all", "(", "[", "not", "subname", "in", "k", "for", "subname", "in", "excluded_subnames", "]", ")", "}", "\n", "state", "[", "'buffer_size'", "]", "=", "self", ".", "buffer_size", "\n", "state", "[", "'tf'", "]", "=", "self", ".", "sess", ".", "run", "(", "[", "x", "for", "x", "in", "self", ".", "_global_vars", "(", "''", ")", "if", "'buffer'", "not", "in", "x", ".", "name", "]", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.__setstate__": [[326, 341], ["ddpg.DDPG.__init__", "state.items", "ddpg.DDPG.sess.run", "len", "len", "tensorflow.assign", "ddpg.DDPG._global_vars", "zip"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG._global_vars"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'sample_transitions'", "not", "in", "state", ":", "\n", "# We don't need this for playing the policy.", "\n", "            ", "state", "[", "'sample_transitions'", "]", "=", "None", "\n", "\n", "", "self", ".", "__init__", "(", "**", "state", ")", "\n", "# set up stats (they are overwritten in __init__)", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "[", "-", "6", ":", "]", "==", "'_stats'", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "# load TF variables", "\n", "", "", "vars", "=", "[", "x", "for", "x", "in", "self", ".", "_global_vars", "(", "''", ")", "if", "'buffer'", "not", "in", "x", ".", "name", "]", "\n", "assert", "(", "len", "(", "vars", ")", "==", "len", "(", "state", "[", "\"tf\"", "]", ")", ")", "\n", "node", "=", "[", "tf", ".", "assign", "(", "var", ",", "val", ")", "for", "var", ",", "val", "in", "zip", "(", "vars", ",", "state", "[", "\"tf\"", "]", ")", "]", "\n", "self", ".", "sess", ".", "run", "(", "node", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.dims_to_shapes": [[15, 17], ["tuple", "tuple", "input_dims.items"], "function", ["None"], ["def", "dims_to_shapes", "(", "input_dims", ")", ":", "\n", "    ", "return", "{", "key", ":", "tuple", "(", "[", "val", "]", ")", "if", "val", ">", "0", "else", "tuple", "(", ")", "for", "key", ",", "val", "in", "input_dims", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer.__init__": [[11, 63], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.group", "tensorflow.group", "threading.Lock", "tensorflow.get_default_session", "normalizer.Normalizer.count_tf.assign_add", "normalizer.Normalizer.sum_tf.assign_add", "normalizer.Normalizer.sumsq_tf.assign_add", "tensorflow.assign", "tensorflow.assign", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.sqrt", "tensorflow.maximum", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "eps", "=", "1e-2", ",", "default_clip_range", "=", "np", ".", "inf", ",", "sess", "=", "None", ")", ":", "\n", "        ", "\"\"\"A normalizer that ensures that observations are approximately distributed according to\n        a standard Normal distribution (i.e. have mean zero and variance one).\n\n        Args:\n            size (int): the size of the observation to be normalized\n            eps (float): a small constant that avoids underflows\n            default_clip_range (float): normalized observations are clipped to be in\n                [-default_clip_range, default_clip_range]\n            sess (object): the TensorFlow session to be used\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "default_clip_range", "=", "default_clip_range", "\n", "self", ".", "sess", "=", "sess", "if", "sess", "is", "not", "None", "else", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "self", ".", "local_sum", "=", "np", ".", "zeros", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_sumsq", "=", "np", ".", "zeros", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_count", "=", "np", ".", "zeros", "(", "1", ",", "np", ".", "float32", ")", "\n", "\n", "self", ".", "sum_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_sum", ".", "shape", ",", "name", "=", "'sum'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sumsq_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_sumsq", ".", "shape", ",", "name", "=", "'sumsq'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "count_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_count", ".", "shape", ",", "name", "=", "'count'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "mean", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "name", "=", "'mean'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "std", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "name", "=", "'std'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "count_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'count_pl'", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sum_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'sum_pl'", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sumsq_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'sumsq_pl'", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "update_op", "=", "tf", ".", "group", "(", "\n", "self", ".", "count_tf", ".", "assign_add", "(", "self", ".", "count_pl", ")", ",", "\n", "self", ".", "sum_tf", ".", "assign_add", "(", "self", ".", "sum_pl", ")", ",", "\n", "self", ".", "sumsq_tf", ".", "assign_add", "(", "self", ".", "sumsq_pl", ")", "\n", ")", "\n", "self", ".", "recompute_op", "=", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "self", ".", "mean", ",", "self", ".", "sum_tf", "/", "self", ".", "count_tf", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "std", ",", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "\n", "tf", ".", "square", "(", "self", ".", "eps", ")", ",", "\n", "self", ".", "sumsq_tf", "/", "self", ".", "count_tf", "-", "tf", ".", "square", "(", "self", ".", "sum_tf", "/", "self", ".", "count_tf", ")", "\n", ")", ")", ")", ",", "\n", ")", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer.update": [[64, 71], ["v.reshape.reshape.reshape", "v.reshape.reshape.sum", "numpy.square().sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "update", "(", "self", ",", "v", ")", ":", "\n", "        ", "v", "=", "v", ".", "reshape", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "local_sum", "+=", "v", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_sumsq", "+=", "(", "np", ".", "square", "(", "v", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_count", "[", "0", "]", "+=", "v", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer.normalize": [[72, 78], ["baselines.her.util.reshape_for_broadcasting", "baselines.her.util.reshape_for_broadcasting", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.reshape_for_broadcasting", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.reshape_for_broadcasting"], ["", "", "def", "normalize", "(", "self", ",", "v", ",", "clip_range", "=", "None", ")", ":", "\n", "        ", "if", "clip_range", "is", "None", ":", "\n", "            ", "clip_range", "=", "self", ".", "default_clip_range", "\n", "", "mean", "=", "reshape_for_broadcasting", "(", "self", ".", "mean", ",", "v", ")", "\n", "std", "=", "reshape_for_broadcasting", "(", "self", ".", "std", ",", "v", ")", "\n", "return", "tf", ".", "clip_by_value", "(", "(", "v", "-", "mean", ")", "/", "std", ",", "-", "clip_range", ",", "clip_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer.denormalize": [[79, 83], ["baselines.her.util.reshape_for_broadcasting", "baselines.her.util.reshape_for_broadcasting"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.reshape_for_broadcasting", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.reshape_for_broadcasting"], ["", "def", "denormalize", "(", "self", ",", "v", ")", ":", "\n", "        ", "mean", "=", "reshape_for_broadcasting", "(", "self", ".", "mean", ",", "v", ")", "\n", "std", "=", "reshape_for_broadcasting", "(", "self", ".", "std", ",", "v", ")", "\n", "return", "mean", "+", "v", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer._mpi_average": [[84, 89], ["numpy.zeros_like", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi4py.MPI.COMM_WORLD.Get_size"], "methods", ["None"], ["", "def", "_mpi_average", "(", "self", ",", "x", ")", ":", "\n", "        ", "buf", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "x", ",", "buf", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "buf", "/=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "return", "buf", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer.synchronize": [[90, 95], ["normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer._mpi_average", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer._mpi_average", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer._mpi_average"], ["", "def", "synchronize", "(", "self", ",", "local_sum", ",", "local_sumsq", ",", "local_count", ",", "root", "=", "None", ")", ":", "\n", "        ", "local_sum", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sum", ")", "\n", "local_sumsq", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sumsq", ")", "\n", "local_count", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_count", ")", "\n", "return", "local_sum", ",", "local_sumsq", ",", "local_count", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.Normalizer.recompute_stats": [[96, 119], ["normalizer.Normalizer.synchronize", "normalizer.Normalizer.sess.run", "normalizer.Normalizer.sess.run", "normalizer.Normalizer.local_count.copy", "normalizer.Normalizer.local_sum.copy", "normalizer.Normalizer.local_sumsq.copy"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.synchronize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy"], ["", "def", "recompute_stats", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "# Copy over results.", "\n", "            ", "local_count", "=", "self", ".", "local_count", ".", "copy", "(", ")", "\n", "local_sum", "=", "self", ".", "local_sum", ".", "copy", "(", ")", "\n", "local_sumsq", "=", "self", ".", "local_sumsq", ".", "copy", "(", ")", "\n", "\n", "# Reset.", "\n", "self", ".", "local_count", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sum", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sumsq", "[", "...", "]", "=", "0", "\n", "\n", "# We perform the synchronization outside of the lock to keep the critical section as short", "\n", "# as possible.", "\n", "", "synced_sum", ",", "synced_sumsq", ",", "synced_count", "=", "self", ".", "synchronize", "(", "\n", "local_sum", "=", "local_sum", ",", "local_sumsq", "=", "local_sumsq", ",", "local_count", "=", "local_count", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "update_op", ",", "feed_dict", "=", "{", "\n", "self", ".", "count_pl", ":", "synced_count", ",", "\n", "self", ".", "sum_pl", ":", "synced_sum", ",", "\n", "self", ".", "sumsq_pl", ":", "synced_sumsq", ",", "\n", "}", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "recompute_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.__init__": [[122, 126], ["tensorflow.zeros", "tensorflow.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "std", "=", "1.", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "mean", "=", "tf", ".", "zeros", "(", "self", ".", "size", ",", "tf", ".", "float32", ")", "\n", "self", ".", "std", "=", "std", "*", "tf", ".", "ones", "(", "self", ".", "size", ",", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.update": [[127, 129], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.normalize": [[130, 132], ["None"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "x", ",", "clip_range", "=", "None", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.denormalize": [[133, 135], ["None"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "std", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.synchronize": [[136, 138], ["None"], "methods", ["None"], ["", "def", "synchronize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.normalizer.IdentityNormalizer.recompute_stats": [[139, 141], ["None"], "methods", ["None"], ["", "def", "recompute_stats", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.her.make_sample_her_transitions": [[4, 64], ["numpy.random.randint", "numpy.random.randint", "numpy.where", "future_offset.astype.astype", "transitions.items", "reward_fun", "[].copy", "numpy.random.uniform", "key.startswith", "transitions[].reshape", "episode_batch.keys", "numpy.random.uniform", "transitions.keys", "key.replace"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy"], ["def", "make_sample_her_transitions", "(", "replay_strategy", ",", "replay_k", ",", "reward_fun", ")", ":", "\n", "    ", "\"\"\"Creates a sample function that can be used for HER experience replay.\n\n    Args:\n        replay_strategy (in ['future', 'none']): the HER replay strategy; if set to 'none',\n            regular DDPG experience replay is used\n        replay_k (int): the ratio between HER replays and regular replays (e.g. k = 4 -> 4 times\n            as many HER replays as regular replays are used)\n        reward_fun (function): function to re-compute the reward with substituted goals\n    \"\"\"", "\n", "if", "replay_strategy", "==", "'future'", ":", "\n", "        ", "future_p", "=", "1", "-", "(", "1.", "/", "(", "1", "+", "replay_k", ")", ")", "\n", "", "else", ":", "# 'replay_strategy' == 'none'", "\n", "        ", "future_p", "=", "0", "\n", "\n", "", "def", "_sample_her_transitions", "(", "episode_batch", ",", "batch_size_in_transitions", ")", ":", "\n", "        ", "\"\"\"episode_batch is {key: array(buffer_size x T x dim_key)}\n        \"\"\"", "\n", "T", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "1", "]", "\n", "rollout_batch_size", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size_in_transitions", "\n", "\n", "# Select which episodes and time steps to use.", "\n", "episode_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "rollout_batch_size", ",", "batch_size", ")", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "T", ",", "size", "=", "batch_size", ")", "\n", "transitions", "=", "{", "key", ":", "episode_batch", "[", "key", "]", "[", "episode_idxs", ",", "t_samples", "]", ".", "copy", "(", ")", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "}", "\n", "\n", "# Select future time indexes proportional with probability future_p. These", "\n", "# will be used for HER replay by substituting in future goals.", "\n", "her_indexes", "=", "np", ".", "where", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "<", "future_p", ")", "\n", "future_offset", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "*", "(", "T", "-", "t_samples", ")", "\n", "future_offset", "=", "future_offset", ".", "astype", "(", "int", ")", "\n", "future_t", "=", "(", "t_samples", "+", "1", "+", "future_offset", ")", "[", "her_indexes", "]", "\n", "\n", "# Replace goal with achieved goal but only for the previously-selected", "\n", "# HER transitions (as defined by her_indexes). For the other transitions,", "\n", "# keep the original goal.", "\n", "future_ag", "=", "episode_batch", "[", "'ag'", "]", "[", "episode_idxs", "[", "her_indexes", "]", ",", "future_t", "]", "\n", "transitions", "[", "'g'", "]", "[", "her_indexes", "]", "=", "future_ag", "\n", "\n", "# Reconstruct info dictionary for reward  computation.", "\n", "info", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "transitions", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "info", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "]", "=", "value", "\n", "\n", "# Re-compute reward since we may have substituted the goal.", "\n", "", "", "reward_params", "=", "{", "k", ":", "transitions", "[", "k", "]", "for", "k", "in", "[", "'ag_2'", ",", "'g'", "]", "}", "\n", "reward_params", "[", "'info'", "]", "=", "info", "\n", "transitions", "[", "'r'", "]", "=", "reward_fun", "(", "**", "reward_params", ")", "\n", "\n", "transitions", "=", "{", "k", ":", "transitions", "[", "k", "]", ".", "reshape", "(", "batch_size", ",", "*", "transitions", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "k", "in", "transitions", ".", "keys", "(", ")", "}", "\n", "\n", "assert", "(", "transitions", "[", "'u'", "]", ".", "shape", "[", "0", "]", "==", "batch_size_in_transitions", ")", "\n", "\n", "return", "transitions", "\n", "\n", "", "return", "_sample_her_transitions", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.actor_critic.ActorCritic.__init__": [[6, 45], ["actor_critic.ActorCritic.o_stats.normalize", "actor_critic.ActorCritic.g_stats.normalize", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.concat", "baselines.her.util.nn", "tensorflow.concat", "baselines.her.util.nn", "tensorflow.tanh", "baselines.her.util.nn"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.nn", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.nn", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.nn"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "inputs_tf", ",", "dimo", ",", "dimg", ",", "dimu", ",", "max_u", ",", "o_stats", ",", "g_stats", ",", "hidden", ",", "layers", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The actor-critic network and related training code.\n\n        Args:\n            inputs_tf (dict of tensors): all necessary inputs for the network: the\n                observation (o), the goal (g), and the action (u)\n            dimo (int): the dimension of the observations\n            dimg (int): the dimension of the goals\n            dimu (int): the dimension of the actions\n            max_u (float): the maximum magnitude of actions; action outputs will be scaled\n                accordingly\n            o_stats (baselines.her.Normalizer): normalizer for observations\n            g_stats (baselines.her.Normalizer): normalizer for goals\n            hidden (int): number of hidden units that should be used in hidden layers\n            layers (int): number of hidden layers\n        \"\"\"", "\n", "self", ".", "o_tf", "=", "inputs_tf", "[", "'o'", "]", "\n", "self", ".", "g_tf", "=", "inputs_tf", "[", "'g'", "]", "\n", "self", ".", "u_tf", "=", "inputs_tf", "[", "'u'", "]", "\n", "\n", "# Prepare inputs for actor and critic.", "\n", "o", "=", "self", ".", "o_stats", ".", "normalize", "(", "self", ".", "o_tf", ")", "\n", "g", "=", "self", ".", "g_stats", ".", "normalize", "(", "self", ".", "g_tf", ")", "\n", "input_pi", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", "]", ")", "# for actor", "\n", "\n", "# Networks.", "\n", "with", "tf", ".", "variable_scope", "(", "'pi'", ")", ":", "\n", "            ", "self", ".", "pi_tf", "=", "self", ".", "max_u", "*", "tf", ".", "tanh", "(", "nn", "(", "\n", "input_pi", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "self", ".", "dimu", "]", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Q'", ")", ":", "\n", "# for policy training", "\n", "            ", "input_Q", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", ",", "self", ".", "pi_tf", "/", "self", ".", "max_u", "]", ")", "\n", "self", ".", "Q_pi_tf", "=", "nn", "(", "input_Q", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "1", "]", ")", "\n", "# for critic training", "\n", "input_Q", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", ",", "self", ".", "u_tf", "/", "self", ".", "max_u", "]", ")", "\n", "self", ".", "_input_Q", "=", "input_Q", "# exposed for tests", "\n", "self", ".", "Q_tf", "=", "nn", "(", "input_Q", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "1", "]", ",", "reuse", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.store_args": [[14, 39], ["inspect.getfullargspec", "functools.wraps", "dict", "dict.update", "dict.copy", "zip", "defaults.copy.update", "util..__dict__.update", "method", "zip", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["def", "store_args", "(", "method", ")", ":", "\n", "    ", "\"\"\"Stores provided method args as instance attributes.\n    \"\"\"", "\n", "argspec", "=", "inspect", ".", "getfullargspec", "(", "method", ")", "\n", "defaults", "=", "{", "}", "\n", "if", "argspec", ".", "defaults", "is", "not", "None", ":", "\n", "        ", "defaults", "=", "dict", "(", "\n", "zip", "(", "argspec", ".", "args", "[", "-", "len", "(", "argspec", ".", "defaults", ")", ":", "]", ",", "argspec", ".", "defaults", ")", ")", "\n", "", "if", "argspec", ".", "kwonlydefaults", "is", "not", "None", ":", "\n", "        ", "defaults", ".", "update", "(", "argspec", ".", "kwonlydefaults", ")", "\n", "", "arg_names", "=", "argspec", ".", "args", "[", "1", ":", "]", "\n", "\n", "@", "functools", ".", "wraps", "(", "method", ")", "\n", "def", "wrapper", "(", "*", "positional_args", ",", "**", "keyword_args", ")", ":", "\n", "        ", "self", "=", "positional_args", "[", "0", "]", "\n", "# Get default arg values", "\n", "args", "=", "defaults", ".", "copy", "(", ")", "\n", "# Add provided arg values", "\n", "for", "name", ",", "value", "in", "zip", "(", "arg_names", ",", "positional_args", "[", "1", ":", "]", ")", ":", "\n", "            ", "args", "[", "name", "]", "=", "value", "\n", "", "args", ".", "update", "(", "keyword_args", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "args", ")", "\n", "return", "method", "(", "*", "positional_args", ",", "**", "keyword_args", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.import_function": [[41, 48], ["spec.split", "importlib.import_module", "getattr"], "function", ["None"], ["", "def", "import_function", "(", "spec", ")", ":", "\n", "    ", "\"\"\"Import a function identified by a string like \"pkg.module:fn_name\".\n    \"\"\"", "\n", "mod_name", ",", "fn_name", "=", "spec", ".", "split", "(", "':'", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "mod_name", ")", "\n", "fn", "=", "getattr", "(", "module", ",", "fn_name", ")", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.flatten_grads": [[50, 55], ["tensorflow.concat", "tensorflow.reshape", "zip", "baselines.common.tf_util.numel"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.numel"], ["", "def", "flatten_grads", "(", "var_list", ",", "grads", ")", ":", "\n", "    ", "\"\"\"Flattens a variables and their gradients.\n    \"\"\"", "\n", "return", "tf", ".", "concat", "(", "[", "tf", ".", "reshape", "(", "grad", ",", "[", "U", ".", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.nn": [[57, 73], ["enumerate", "tensorflow.layers.dense", "tensorflow.reshape", "activation", "tensorflow.contrib.layers.xavier_initializer", "len", "str"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense"], ["", "def", "nn", "(", "input", ",", "layers_sizes", ",", "reuse", "=", "None", ",", "flatten", "=", "False", ",", "name", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Creates a simple neural network\n    \"\"\"", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "layers_sizes", ")", ":", "\n", "        ", "activation", "=", "tf", ".", "nn", ".", "relu", "if", "i", "<", "len", "(", "layers_sizes", ")", "-", "1", "else", "None", "\n", "input", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "input", ",", "\n", "units", "=", "size", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "reuse", "=", "reuse", ",", "\n", "name", "=", "name", "+", "'_'", "+", "str", "(", "i", ")", ")", "\n", "if", "activation", ":", "\n", "            ", "input", "=", "activation", "(", "input", ")", "\n", "", "", "if", "flatten", ":", "\n", "        ", "assert", "layers_sizes", "[", "-", "1", "]", "==", "1", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", "]", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.install_mpi_excepthook": [[75, 86], ["old_hook", "sys.stdout.flush", "sys.stderr.flush", "MPI.COMM_WORLD.Abort"], "function", ["None"], ["", "def", "install_mpi_excepthook", "(", ")", ":", "\n", "    ", "import", "sys", "\n", "from", "mpi4py", "import", "MPI", "\n", "old_hook", "=", "sys", ".", "excepthook", "\n", "\n", "def", "new_hook", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "        ", "old_hook", "(", "a", ",", "b", ",", "c", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Abort", "(", ")", "\n", "", "sys", ".", "excepthook", "=", "new_hook", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.mpi_fork": [[88, 112], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "util.install_mpi_excepthook", "str"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.install_mpi_excepthook"], ["", "def", "mpi_fork", "(", "n", ",", "extra_mpi_args", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Re-launches the current script with workers\n    Returns \"parent\" for original parent, \"child\" for MPI children\n    \"\"\"", "\n", "if", "n", "<=", "1", ":", "\n", "        ", "return", "\"child\"", "\n", "", "if", "os", ".", "getenv", "(", "\"IN_MPI\"", ")", "is", "None", ":", "\n", "        ", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", ".", "update", "(", "\n", "MKL_NUM_THREADS", "=", "\"1\"", ",", "\n", "OMP_NUM_THREADS", "=", "\"1\"", ",", "\n", "IN_MPI", "=", "\"1\"", "\n", ")", "\n", "# \"-bind-to core\" is crucial for good performance", "\n", "args", "=", "[", "\"mpirun\"", ",", "\"-np\"", ",", "str", "(", "n", ")", "]", "+", "extra_mpi_args", "+", "[", "sys", ".", "executable", "]", "\n", "\n", "args", "+=", "sys", ".", "argv", "\n", "subprocess", ".", "check_call", "(", "args", ",", "env", "=", "env", ")", "\n", "return", "\"parent\"", "\n", "", "else", ":", "\n", "        ", "install_mpi_excepthook", "(", ")", "\n", "return", "\"child\"", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.convert_episode_to_batch_major": [[114, 125], ["episode.keys", "numpy.array().copy", "np.array().copy.swapaxes", "numpy.array"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy"], ["", "", "def", "convert_episode_to_batch_major", "(", "episode", ")", ":", "\n", "    ", "\"\"\"Converts an episode to have the batch dimension in the major (first)\n    dimension.\n    \"\"\"", "\n", "episode_batch", "=", "{", "}", "\n", "for", "key", "in", "episode", ".", "keys", "(", ")", ":", "\n", "        ", "val", "=", "np", ".", "array", "(", "episode", "[", "key", "]", ")", ".", "copy", "(", ")", "\n", "# make inputs batch-major instead of time-major", "\n", "episode_batch", "[", "key", "]", "=", "val", ".", "swapaxes", "(", "0", ",", "1", ")", "\n", "\n", "", "return", "episode_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.transitions_in_episode_batch": [[127, 132], ["None"], "function", ["None"], ["", "def", "transitions_in_episode_batch", "(", "episode_batch", ")", ":", "\n", "    ", "\"\"\"Number of transitions in a given episode batch.\n    \"\"\"", "\n", "shape", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "\n", "return", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.her.util.reshape_for_broadcasting": [[134, 141], ["len", "tensorflow.reshape", "target.get_shape", "tensorflow.cast"], "function", ["None"], ["", "def", "reshape_for_broadcasting", "(", "source", ",", "target", ")", ":", "\n", "    ", "\"\"\"Reshapes a tensor (source) to have the correct shape and dtype of the target\n    before broadcasting it with MPI.\n    \"\"\"", "\n", "dim", "=", "len", "(", "target", ".", "get_shape", "(", ")", ")", "\n", "shape", "=", "(", "[", "1", "]", "*", "(", "dim", "-", "1", ")", ")", "+", "[", "-", "1", "]", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "source", ",", "target", ".", "dtype", ")", ",", "shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.cached_make_env": [[53, 63], ["config.prepare_params.make_env"], "function", ["None"], ["def", "cached_make_env", "(", "make_env", ")", ":", "\n", "    ", "\"\"\"\n    Only creates a new environment from the provided function if one has not yet already been\n    created. This is useful here because we need to infer certain properties of the env, e.g.\n    its observation and action spaces, without any intend of actually using it.\n    \"\"\"", "\n", "if", "make_env", "not", "in", "CACHED_ENVS", ":", "\n", "        ", "env", "=", "make_env", "(", ")", "\n", "CACHED_ENVS", "[", "make_env", "]", "=", "env", "\n", "", "return", "CACHED_ENVS", "[", "make_env", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.prepare_params": [[65, 96], ["dict", "config.cached_make_env", "hasattr", "cached_make_env.reset", "gym.make", "isinstance", "numpy.array"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "prepare_params", "(", "kwargs", ")", ":", "\n", "# DDPG params", "\n", "    ", "ddpg_params", "=", "dict", "(", ")", "\n", "\n", "env_name", "=", "kwargs", "[", "'env_name'", "]", "\n", "\n", "def", "make_env", "(", ")", ":", "\n", "        ", "return", "gym", ".", "make", "(", "env_name", ")", "\n", "", "kwargs", "[", "'make_env'", "]", "=", "make_env", "\n", "tmp_env", "=", "cached_make_env", "(", "kwargs", "[", "'make_env'", "]", ")", "\n", "assert", "hasattr", "(", "tmp_env", ",", "'_max_episode_steps'", ")", "\n", "kwargs", "[", "'T'", "]", "=", "tmp_env", ".", "_max_episode_steps", "\n", "tmp_env", ".", "reset", "(", ")", "\n", "kwargs", "[", "'max_u'", "]", "=", "np", ".", "array", "(", "kwargs", "[", "'max_u'", "]", ")", "if", "isinstance", "(", "kwargs", "[", "'max_u'", "]", ",", "list", ")", "else", "kwargs", "[", "'max_u'", "]", "\n", "kwargs", "[", "'gamma'", "]", "=", "1.", "-", "1.", "/", "kwargs", "[", "'T'", "]", "\n", "if", "'lr'", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'pi_lr'", "]", "=", "kwargs", "[", "'lr'", "]", "\n", "kwargs", "[", "'Q_lr'", "]", "=", "kwargs", "[", "'lr'", "]", "\n", "del", "kwargs", "[", "'lr'", "]", "\n", "", "for", "name", "in", "[", "'buffer_size'", ",", "'hidden'", ",", "'layers'", ",", "\n", "'network_class'", ",", "\n", "'polyak'", ",", "\n", "'batch_size'", ",", "'Q_lr'", ",", "'pi_lr'", ",", "\n", "'norm_eps'", ",", "'norm_clip'", ",", "'max_u'", ",", "\n", "'action_l2'", ",", "'clip_obs'", ",", "'scope'", ",", "'relative_goals'", "]", ":", "\n", "        ", "ddpg_params", "[", "name", "]", "=", "kwargs", "[", "name", "]", "\n", "kwargs", "[", "'_'", "+", "name", "]", "=", "kwargs", "[", "name", "]", "\n", "del", "kwargs", "[", "name", "]", "\n", "", "kwargs", "[", "'ddpg_params'", "]", "=", "ddpg_params", "\n", "\n", "return", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.log_params": [[98, 101], ["sorted", "params.keys", "baselines.logger.info"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info"], ["", "def", "log_params", "(", "params", ",", "logger", "=", "logger", ")", ":", "\n", "    ", "for", "key", "in", "sorted", "(", "params", ".", "keys", "(", ")", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "key", ",", "params", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.configure_her": [[103, 121], ["config.cached_make_env", "cached_make_env.reset", "baselines.her.her.make_sample_her_transitions", "cached_make_env.compute_reward"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.her.make_sample_her_transitions"], ["", "", "def", "configure_her", "(", "params", ")", ":", "\n", "    ", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "def", "reward_fun", "(", "ag_2", ",", "g", ",", "info", ")", ":", "# vectorized", "\n", "        ", "return", "env", ".", "compute_reward", "(", "achieved_goal", "=", "ag_2", ",", "desired_goal", "=", "g", ",", "info", "=", "info", ")", "\n", "\n", "# Prepare configuration for HER.", "\n", "", "her_params", "=", "{", "\n", "'reward_fun'", ":", "reward_fun", ",", "\n", "}", "\n", "for", "name", "in", "[", "'replay_strategy'", ",", "'replay_k'", "]", ":", "\n", "        ", "her_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "params", "[", "'_'", "+", "name", "]", "=", "her_params", "[", "name", "]", "\n", "del", "params", "[", "name", "]", "\n", "", "sample_her_transitions", "=", "make_sample_her_transitions", "(", "**", "her_params", ")", "\n", "\n", "return", "sample_her_transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.simple_goal_subtract": [[123, 126], ["None"], "function", ["None"], ["", "def", "simple_goal_subtract", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "a", ".", "shape", "==", "b", ".", "shape", "\n", "return", "a", "-", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.configure_ddpg": [[128, 154], ["config.configure_her", "dims.copy", "config.cached_make_env", "cached_make_env.reset", "ddpg_params.update", "baselines.her.ddpg.DDPG"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.configure_her", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "configure_ddpg", "(", "dims", ",", "params", ",", "reuse", "=", "False", ",", "use_mpi", "=", "True", ",", "clip_return", "=", "True", ")", ":", "\n", "    ", "sample_her_transitions", "=", "configure_her", "(", "params", ")", "\n", "# Extract relevant parameters.", "\n", "gamma", "=", "params", "[", "'gamma'", "]", "\n", "rollout_batch_size", "=", "params", "[", "'rollout_batch_size'", "]", "\n", "ddpg_params", "=", "params", "[", "'ddpg_params'", "]", "\n", "\n", "input_dims", "=", "dims", ".", "copy", "(", ")", "\n", "\n", "# DDPG agent", "\n", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "ddpg_params", ".", "update", "(", "{", "'input_dims'", ":", "input_dims", ",", "# agent takes an input observations", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "'clip_pos_returns'", ":", "True", ",", "# clip positive returns", "\n", "'clip_return'", ":", "(", "1.", "/", "(", "1.", "-", "gamma", ")", ")", "if", "clip_return", "else", "np", ".", "inf", ",", "# max abs of return", "\n", "'rollout_batch_size'", ":", "rollout_batch_size", ",", "\n", "'subtract_goals'", ":", "simple_goal_subtract", ",", "\n", "'sample_transitions'", ":", "sample_her_transitions", ",", "\n", "'gamma'", ":", "gamma", ",", "\n", "}", ")", "\n", "ddpg_params", "[", "'info'", "]", "=", "{", "\n", "'env_name'", ":", "params", "[", "'env_name'", "]", ",", "\n", "}", "\n", "policy", "=", "DDPG", "(", "reuse", "=", "reuse", ",", "**", "ddpg_params", ",", "use_mpi", "=", "use_mpi", ")", "\n", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.configure_dims": [[156, 172], ["config.cached_make_env", "cached_make_env.reset", "cached_make_env.step", "info.items", "cached_make_env.action_space.sample", "numpy.array", "value.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample"], ["", "def", "configure_dims", "(", "params", ")", ":", "\n", "    ", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "obs", ",", "_", ",", "_", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "\n", "dims", "=", "{", "\n", "'o'", ":", "obs", "[", "'observation'", "]", ".", "shape", "[", "0", "]", ",", "\n", "'u'", ":", "env", ".", "action_space", ".", "shape", "[", "0", "]", ",", "\n", "'g'", ":", "obs", "[", "'desired_goal'", "]", ".", "shape", "[", "0", "]", ",", "\n", "}", "\n", "for", "key", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "value", "=", "np", ".", "array", "(", "value", ")", "\n", "if", "value", ".", "ndim", "==", "0", ":", "\n", "            ", "value", "=", "value", ".", "reshape", "(", "1", ")", "\n", "", "dims", "[", "'info_{}'", ".", "format", "(", "key", ")", "]", "=", "value", ".", "shape", "[", "0", "]", "\n", "", "return", "dims", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.mpi_average": [[19, 25], ["isinstance", "baselines.common.mpi_moments.mpi_moments", "numpy.array"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.mpi_moments"], ["def", "mpi_average", "(", "value", ")", ":", "\n", "    ", "if", "value", "==", "[", "]", ":", "\n", "        ", "value", "=", "[", "0.", "]", "\n", "", "if", "not", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "        ", "value", "=", "[", "value", "]", "\n", "", "return", "mpi_moments", "(", "np", ".", "array", "(", "value", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.train": [[27, 83], ["mpi4py.MPI.COMM_WORLD.Get_rank", "os.path.join", "os.path.join", "os.path.join", "baselines.logger.info", "range", "baselines.logger.get_dir", "baselines.logger.get_dir", "baselines.logger.get_dir", "rollout_worker.clear_history", "range", "evaluator.clear_history", "range", "baselines.logger.record_tabular", "evaluator.logs", "rollout_worker.logs", "policy.logs", "train.mpi_average", "numpy.random.uniform", "np.random.uniform.copy", "mpi4py.MPI.COMM_WORLD.Bcast", "rollout_worker.generate_rollouts", "policy.store_episode", "range", "policy.update_target_net", "evaluator.generate_rollouts", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.dump_tabular", "evaluator.current_success_rate", "baselines.logger.info", "evaluator.save_policy", "evaluator.save_policy", "os.path.join.format", "baselines.logger.info", "evaluator.save_policy", "policy.train", "train.mpi_average", "train.mpi_average", "train.mpi_average"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.mpi_average", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.store_episode", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.update_target_net", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.current_success_rate", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.mpi_average", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.mpi_average", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.mpi_average"], ["", "def", "train", "(", "policy", ",", "rollout_worker", ",", "evaluator", ",", "\n", "n_epochs", ",", "n_test_rollouts", ",", "n_cycles", ",", "n_batches", ",", "policy_save_interval", ",", "\n", "save_policies", ",", "**", "kwargs", ")", ":", "\n", "    ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "latest_policy_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'policy_latest.pkl'", ")", "\n", "best_policy_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'policy_best.pkl'", ")", "\n", "periodic_policy_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'policy_{}.pkl'", ")", "\n", "\n", "logger", ".", "info", "(", "\"Training...\"", ")", "\n", "best_success_rate", "=", "-", "1", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "# train", "\n", "        ", "rollout_worker", ".", "clear_history", "(", ")", "\n", "for", "_", "in", "range", "(", "n_cycles", ")", ":", "\n", "            ", "episode", "=", "rollout_worker", ".", "generate_rollouts", "(", ")", "\n", "policy", ".", "store_episode", "(", "episode", ")", "\n", "for", "_", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "policy", ".", "train", "(", ")", "\n", "", "policy", ".", "update_target_net", "(", ")", "\n", "\n", "# test", "\n", "", "evaluator", ".", "clear_history", "(", ")", "\n", "for", "_", "in", "range", "(", "n_test_rollouts", ")", ":", "\n", "            ", "evaluator", ".", "generate_rollouts", "(", ")", "\n", "\n", "# record logs", "\n", "", "logger", ".", "record_tabular", "(", "'epoch'", ",", "epoch", ")", "\n", "for", "key", ",", "val", "in", "evaluator", ".", "logs", "(", "'test'", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "", "for", "key", ",", "val", "in", "rollout_worker", ".", "logs", "(", "'train'", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "", "for", "key", ",", "val", "in", "policy", ".", "logs", "(", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "logger", ".", "dump_tabular", "(", ")", "\n", "\n", "# save the policy if it's better than the previous ones", "\n", "", "success_rate", "=", "mpi_average", "(", "evaluator", ".", "current_success_rate", "(", ")", ")", "\n", "if", "rank", "==", "0", "and", "success_rate", ">=", "best_success_rate", "and", "save_policies", ":", "\n", "            ", "best_success_rate", "=", "success_rate", "\n", "logger", ".", "info", "(", "'New best success rate: {}. Saving policy to {} ...'", ".", "format", "(", "best_success_rate", ",", "best_policy_path", ")", ")", "\n", "evaluator", ".", "save_policy", "(", "best_policy_path", ")", "\n", "evaluator", ".", "save_policy", "(", "latest_policy_path", ")", "\n", "", "if", "rank", "==", "0", "and", "policy_save_interval", ">", "0", "and", "epoch", "%", "policy_save_interval", "==", "0", "and", "save_policies", ":", "\n", "            ", "policy_path", "=", "periodic_policy_path", ".", "format", "(", "epoch", ")", "\n", "logger", ".", "info", "(", "'Saving periodic policy to {} ...'", ".", "format", "(", "policy_path", ")", ")", "\n", "evaluator", ".", "save_policy", "(", "policy_path", ")", "\n", "\n", "# make sure that different threads have different seeds", "\n", "", "local_uniform", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "1", ",", ")", ")", "\n", "root_uniform", "=", "local_uniform", ".", "copy", "(", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Bcast", "(", "root_uniform", ",", "root", "=", "0", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "            ", "assert", "local_uniform", "[", "0", "]", "!=", "root_uniform", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.launch": [[85, 175], ["mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.logger.get_dir", "os.makedirs", "baselines.common.set_global_seeds", "config.prepare_params.update", "baselines.prepare_params", "baselines.log_params", "baselines.configure_dims", "baselines.configure_ddpg", "baselines.her.rollout.RolloutWorker", "baselines.her.rollout.RolloutWorker.seed", "baselines.her.rollout.RolloutWorker", "baselines.her.rollout.RolloutWorker.seed", "train.train", "U.single_threaded_session().__enter__", "baselines.logger.configure", "config.prepare_params.update", "open", "json.dump", "baselines.logger.warn", "baselines.logger.warn", "baselines.logger.warn", "baselines.logger.warn", "baselines.logger.warn", "baselines.her.util.mpi_fork", "sys.exit", "baselines.logger.configure", "os.path.join", "baselines.her.util.mpi_fork", "U.single_threaded_session", "baselines.logger.get_dir", "baselines.logger.get_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.prepare_params", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.log_params", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.configure_dims", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.configure_ddpg", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.warn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.warn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.warn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.warn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.warn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_fork.mpi_fork", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_fork.mpi_fork", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["", "", "", "def", "launch", "(", "\n", "env", ",", "logdir", ",", "n_epochs", ",", "num_cpu", ",", "seed", ",", "replay_strategy", ",", "policy_save_interval", ",", "clip_return", ",", "\n", "override_params", "=", "{", "}", ",", "save_policies", "=", "True", "\n", ")", ":", "\n", "# Fork for multi-CPU MPI implementation.", "\n", "    ", "if", "num_cpu", ">", "1", ":", "\n", "        ", "try", ":", "\n", "            ", "whoami", "=", "mpi_fork", "(", "num_cpu", ",", "[", "'--bind-to'", ",", "'core'", "]", ")", "\n", "", "except", "CalledProcessError", ":", "\n", "# fancy version of mpi call failed, try simple version", "\n", "            ", "whoami", "=", "mpi_fork", "(", "num_cpu", ")", "\n", "\n", "", "if", "whoami", "==", "'parent'", ":", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "", "import", "baselines", ".", "common", ".", "tf_util", "as", "U", "\n", "U", ".", "single_threaded_session", "(", ")", ".", "__enter__", "(", ")", "\n", "", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "# Configure logging", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "logdir", "or", "logger", ".", "get_dir", "(", ")", "is", "None", ":", "\n", "            ", "logger", ".", "configure", "(", "dir", "=", "logdir", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "configure", "(", ")", "\n", "", "logdir", "=", "logger", ".", "get_dir", "(", ")", "\n", "assert", "logdir", "is", "not", "None", "\n", "os", ".", "makedirs", "(", "logdir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Seed everything.", "\n", "rank_seed", "=", "seed", "+", "1000000", "*", "rank", "\n", "set_global_seeds", "(", "rank_seed", ")", "\n", "\n", "# Prepare params.", "\n", "params", "=", "config", ".", "DEFAULT_PARAMS", "\n", "params", "[", "'env_name'", "]", "=", "env", "\n", "params", "[", "'replay_strategy'", "]", "=", "replay_strategy", "\n", "if", "env", "in", "config", ".", "DEFAULT_ENV_PARAMS", ":", "\n", "        ", "params", ".", "update", "(", "config", ".", "DEFAULT_ENV_PARAMS", "[", "env", "]", ")", "# merge env-specific parameters in", "\n", "", "params", ".", "update", "(", "**", "override_params", ")", "# makes it possible to override any parameter", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'params.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "params", ",", "f", ")", "\n", "", "params", "=", "config", ".", "prepare_params", "(", "params", ")", "\n", "config", ".", "log_params", "(", "params", ",", "logger", "=", "logger", ")", "\n", "\n", "if", "num_cpu", "==", "1", ":", "\n", "        ", "logger", ".", "warn", "(", ")", "\n", "logger", ".", "warn", "(", "'*** Warning ***'", ")", "\n", "logger", ".", "warn", "(", "\n", "'You are running HER with just a single MPI worker. This will work, but the '", "+", "\n", "'experiments that we report in Plappert et al. (2018, https://arxiv.org/abs/1802.09464) '", "+", "\n", "'were obtained with --num_cpu 19. This makes a significant difference and if you '", "+", "\n", "'are looking to reproduce those results, be aware of this. Please also refer to '", "+", "\n", "'https://github.com/openai/baselines/issues/314 for further details.'", ")", "\n", "logger", ".", "warn", "(", "'****************'", ")", "\n", "logger", ".", "warn", "(", ")", "\n", "\n", "", "dims", "=", "config", ".", "configure_dims", "(", "params", ")", "\n", "policy", "=", "config", ".", "configure_ddpg", "(", "dims", "=", "dims", ",", "params", "=", "params", ",", "clip_return", "=", "clip_return", ")", "\n", "\n", "rollout_params", "=", "{", "\n", "'exploit'", ":", "False", ",", "\n", "'use_target_net'", ":", "False", ",", "\n", "'use_demo_states'", ":", "True", ",", "\n", "'compute_Q'", ":", "False", ",", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "}", "\n", "\n", "eval_params", "=", "{", "\n", "'exploit'", ":", "True", ",", "\n", "'use_target_net'", ":", "params", "[", "'test_with_polyak'", "]", ",", "\n", "'use_demo_states'", ":", "False", ",", "\n", "'compute_Q'", ":", "True", ",", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "}", "\n", "\n", "for", "name", "in", "[", "'T'", ",", "'rollout_batch_size'", ",", "'gamma'", ",", "'noise_eps'", ",", "'random_eps'", "]", ":", "\n", "        ", "rollout_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "eval_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "\n", "", "rollout_worker", "=", "RolloutWorker", "(", "params", "[", "'make_env'", "]", ",", "policy", ",", "dims", ",", "logger", ",", "**", "rollout_params", ")", "\n", "rollout_worker", ".", "seed", "(", "rank_seed", ")", "\n", "\n", "evaluator", "=", "RolloutWorker", "(", "params", "[", "'make_env'", "]", ",", "policy", ",", "dims", ",", "logger", ",", "**", "eval_params", ")", "\n", "evaluator", ".", "seed", "(", "rank_seed", ")", "\n", "\n", "train", "(", "\n", "logdir", "=", "logdir", ",", "policy", "=", "policy", ",", "rollout_worker", "=", "rollout_worker", ",", "\n", "evaluator", "=", "evaluator", ",", "n_epochs", "=", "n_epochs", ",", "n_test_rollouts", "=", "params", "[", "'n_test_rollouts'", "]", ",", "\n", "n_cycles", "=", "params", "[", "'n_cycles'", "]", ",", "n_batches", "=", "params", "[", "'n_batches'", "]", ",", "\n", "policy_save_interval", "=", "policy_save_interval", ",", "save_policies", "=", "save_policies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.main": [[177, 188], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "train.launch", "click.Choice"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.train.launch"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--env'", ",", "type", "=", "str", ",", "default", "=", "'FetchReach-v1'", ",", "help", "=", "'the name of the OpenAI Gym environment that you want to train on'", ")", "\n", "@", "click", ".", "option", "(", "'--logdir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'the path to where logs and policy pickles should go. If not specified, creates a folder in /tmp/'", ")", "\n", "@", "click", ".", "option", "(", "'--n_epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the number of training epochs to run'", ")", "\n", "@", "click", ".", "option", "(", "'--num_cpu'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the number of CPU cores to use (using MPI)'", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the random seed used to seed both the environment and the training code'", ")", "\n", "@", "click", ".", "option", "(", "'--policy_save_interval'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'the interval with which policy pickles are saved. If set to 0, only the best and latest policy will be pickled.'", ")", "\n", "@", "click", ".", "option", "(", "'--replay_strategy'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'future'", ",", "'none'", "]", ")", ",", "default", "=", "'future'", ",", "help", "=", "'the HER replay strategy to be used. \"future\" uses HER, \"none\" disables HER.'", ")", "\n", "@", "click", ".", "option", "(", "'--clip_return'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'whether or not returns should be clipped'", ")", "\n", "def", "main", "(", "**", "kwargs", ")", ":", "\n", "    ", "launch", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.plot.smooth_reward_curve": [[10, 17], ["int", "numpy.ceil", "numpy.convolve", "numpy.convolve", "numpy.ones", "numpy.ones_like", "numpy.ones", "len"], "function", ["None"], ["def", "smooth_reward_curve", "(", "x", ",", "y", ")", ":", "\n", "    ", "halfwidth", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "x", ")", "/", "60", ")", ")", "# Halfwidth of our smoothing convolution", "\n", "k", "=", "halfwidth", "\n", "xsmoo", "=", "x", "\n", "ysmoo", "=", "np", ".", "convolve", "(", "y", ",", "np", ".", "ones", "(", "2", "*", "k", "+", "1", ")", ",", "mode", "=", "'same'", ")", "/", "np", ".", "convolve", "(", "np", ".", "ones_like", "(", "y", ")", ",", "np", ".", "ones", "(", "2", "*", "k", "+", "1", ")", ",", "\n", "mode", "=", "'same'", ")", "\n", "return", "xsmoo", ",", "ysmoo", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.plot.load_results": [[19, 36], ["numpy.genfromtxt", "enumerate", "os.path.exists", "open", "len", "name.strip", "data.reshape.reshape", "len", "lines[].split"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.strip"], ["", "def", "load_results", "(", "file", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file", ")", ":", "\n", "        ", "return", "None", "\n", "", "with", "open", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "[", "line", "for", "line", "in", "f", "]", "\n", "", "if", "len", "(", "lines", ")", "<", "2", ":", "\n", "        ", "return", "None", "\n", "", "keys", "=", "[", "name", ".", "strip", "(", ")", "for", "name", "in", "lines", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "data", "=", "np", ".", "genfromtxt", "(", "file", ",", "delimiter", "=", "','", ",", "skip_header", "=", "1", ",", "filling_values", "=", "0.", ")", "\n", "if", "data", ".", "ndim", "==", "1", ":", "\n", "        ", "data", "=", "data", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "", "assert", "data", ".", "ndim", "==", "2", "\n", "assert", "data", ".", "shape", "[", "-", "1", "]", "==", "len", "(", "keys", ")", "\n", "result", "=", "{", "}", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "result", "[", "key", "]", "=", "data", "[", ":", ",", "idx", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.plot.pad": [[38, 52], ["numpy.max", "numpy.array", "numpy.concatenate", "padded_xs.append", "len", "padded_xs.append", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "pad", "(", "xs", ",", "value", "=", "np", ".", "nan", ")", ":", "\n", "    ", "maxlen", "=", "np", ".", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n", "padded_xs", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "        ", "if", "x", ".", "shape", "[", "0", "]", ">=", "maxlen", ":", "\n", "            ", "padded_xs", ".", "append", "(", "x", ")", "\n", "\n", "", "padding", "=", "np", ".", "ones", "(", "(", "maxlen", "-", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "*", "value", "\n", "x_padded", "=", "np", ".", "concatenate", "(", "[", "x", ",", "padding", "]", ",", "axis", "=", "0", ")", "\n", "assert", "x_padded", ".", "shape", "[", "1", ":", "]", "==", "x", ".", "shape", "[", "1", ":", "]", "\n", "assert", "x_padded", ".", "shape", "[", "0", "]", "==", "maxlen", "\n", "padded_xs", ".", "append", "(", "x_padded", ")", "\n", "", "return", "np", ".", "array", "(", "padded_xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.play.main": [[11, 57], ["click.command", "click.argument", "click.option", "click.option", "click.option", "baselines.common.set_global_seeds", "baselines.prepare_params", "baselines.log_params", "baselines.configure_dims", "baselines.her.rollout.RolloutWorker", "baselines.her.rollout.RolloutWorker.seed", "baselines.her.rollout.RolloutWorker.clear_history", "range", "baselines.her.rollout.RolloutWorker.logs", "baselines.logger.dump_tabular", "open", "pickle.load", "config.prepare_params.update", "bool", "baselines.her.rollout.RolloutWorker.generate_rollouts", "baselines.logger.record_tabular", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.prepare_params", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.log_params", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiment.config.configure_dims", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'policy_file'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "@", "click", ".", "option", "(", "'--n_test_rollouts'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "@", "click", ".", "option", "(", "'--render'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "def", "main", "(", "policy_file", ",", "seed", ",", "n_test_rollouts", ",", "render", ")", ":", "\n", "    ", "set_global_seeds", "(", "seed", ")", "\n", "\n", "# Load policy.", "\n", "with", "open", "(", "policy_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "policy", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "env_name", "=", "policy", ".", "info", "[", "'env_name'", "]", "\n", "\n", "# Prepare params.", "\n", "params", "=", "config", ".", "DEFAULT_PARAMS", "\n", "if", "env_name", "in", "config", ".", "DEFAULT_ENV_PARAMS", ":", "\n", "        ", "params", ".", "update", "(", "config", ".", "DEFAULT_ENV_PARAMS", "[", "env_name", "]", ")", "# merge env-specific parameters in", "\n", "", "params", "[", "'env_name'", "]", "=", "env_name", "\n", "params", "=", "config", ".", "prepare_params", "(", "params", ")", "\n", "config", ".", "log_params", "(", "params", ",", "logger", "=", "logger", ")", "\n", "\n", "dims", "=", "config", ".", "configure_dims", "(", "params", ")", "\n", "\n", "eval_params", "=", "{", "\n", "'exploit'", ":", "True", ",", "\n", "'use_target_net'", ":", "params", "[", "'test_with_polyak'", "]", ",", "\n", "'compute_Q'", ":", "True", ",", "\n", "'rollout_batch_size'", ":", "1", ",", "\n", "'render'", ":", "bool", "(", "render", ")", ",", "\n", "}", "\n", "\n", "for", "name", "in", "[", "'T'", ",", "'gamma'", ",", "'noise_eps'", ",", "'random_eps'", "]", ":", "\n", "        ", "eval_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "\n", "", "evaluator", "=", "RolloutWorker", "(", "params", "[", "'make_env'", "]", ",", "policy", ",", "dims", ",", "logger", ",", "**", "eval_params", ")", "\n", "evaluator", ".", "seed", "(", "seed", ")", "\n", "\n", "# Run evaluation.", "\n", "evaluator", ".", "clear_history", "(", ")", "\n", "for", "_", "in", "range", "(", "n_test_rollouts", ")", ":", "\n", "        ", "evaluator", ".", "generate_rollouts", "(", ")", "\n", "\n", "# record logs", "\n", "", "for", "key", ",", "val", "in", "evaluator", ".", "logs", "(", "'test'", ")", ":", "\n", "        ", "logger", ".", "record_tabular", "(", "key", ",", "np", ".", "mean", "(", "val", ")", ")", "\n", "", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.ActionNoise.reset": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.NormalActionNoise.__init__": [[9, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.NormalActionNoise.__call__": [[13, 15], ["numpy.random.normal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.NormalActionNoise.__repr__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'NormalActionNoise(mu={}, sigma={})'", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.OrnsteinUhlenbeckActionNoise.__init__": [[22, 29], ["noise.OrnsteinUhlenbeckActionNoise.reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ",", "theta", "=", ".15", ",", "dt", "=", "1e-2", ",", "x0", "=", "None", ")", ":", "\n", "        ", "self", ".", "theta", "=", "theta", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "dt", "=", "dt", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.OrnsteinUhlenbeckActionNoise.__call__": [[30, 34], ["numpy.random.normal", "numpy.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "x_prev", "+", "self", ".", "theta", "*", "(", "self", ".", "mu", "-", "self", ".", "x_prev", ")", "*", "self", ".", "dt", "+", "self", ".", "sigma", "*", "np", ".", "sqrt", "(", "self", ".", "dt", ")", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "mu", ".", "shape", ")", "\n", "self", ".", "x_prev", "=", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.OrnsteinUhlenbeckActionNoise.reset": [[35, 37], ["numpy.zeros_like"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "x_prev", "=", "self", ".", "x0", "if", "self", ".", "x0", "is", "not", "None", "else", "np", ".", "zeros_like", "(", "self", ".", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.noise.OrnsteinUhlenbeckActionNoise.__repr__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'OrnsteinUhlenbeckActionNoise(mu={}, sigma={})'", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.buffer.SortedBuffer.__init__": [[4, 11], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "int", "(", "2e4", ")", ",", "ob_space", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ob_shape", "=", "ob_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "ob_dim", "=", "1", "\n", "for", "dim", "in", "self", ".", "ob_shape", ":", "\n", "            ", "self", ".", "ob_dim", "*=", "dim", "\n", "", "self", ".", "data", "=", "None", "\n", "self", ".", "index", "=", "0", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.buffer.SortedBuffer.insert": [[12, 23], ["numpy.concatenate", "numpy.searchsorted", "numpy.insert", "numpy.expand_dims", "numpy.repeat"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert"], ["\n", "", "def", "insert", "(", "self", ",", "obs", ",", "acs", ",", "ret", ")", ":", "\n", "        ", "num", "=", "obs", ".", "shape", "[", "0", "]", "\n", "_data", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "astype", "(", "float", ")", ".", "reshape", "(", "num", ",", "-", "1", ")", ",", "np", ".", "expand_dims", "(", "acs", ",", "axis", "=", "1", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "ret", ",", "num", ")", ",", "axis", "=", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "data", "=", "_data", "\n", "", "else", ":", "\n", "            ", "insert_index", "=", "np", ".", "searchsorted", "(", "self", ".", "data", "[", ":", ",", "-", "1", "]", ",", "ret", ",", "side", "=", "'right'", ")", "\n", "self", ".", "data", "=", "np", ".", "insert", "(", "self", ".", "data", ",", "insert_index", ",", "_data", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "data", ".", "shape", "[", "0", "]", ">", "self", ".", "size", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "-", "self", ".", "size", ":", "]", "\n", "", "", "self", ".", "index", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.buffer.SortedBuffer.filter": [[24, 31], ["print", "print", "numpy.zeros"], "methods", ["None"], ["\n", "", "def", "sample", "(", "self", ",", "batch_size", ",", "k", "=", "5000", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "max", "(", "0", ",", "self", ".", "index", "-", "k", ")", ",", "self", ".", "index", ")", ",", "batch_size", ")", "\n", "sampled_data", "=", "self", ".", "data", "[", "idx", "]", "\n", "obs", "=", "sampled_data", "[", ":", ",", ":", "self", ".", "ob_dim", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "(", "batch_size", ",", ")", "+", "self", ".", "ob_shape", ")", "\n", "acs", "=", "sampled_data", "[", ":", ",", "self", ".", "ob_dim", "]", ".", "astype", "(", "int", ")", "\n", "return", "obs", ",", "acs", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.buffer.SortedBuffer.sample": [[32, 38], ["numpy.random.choice", "range", "max"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.mlp_policy.MlpPolicy.__init__": [[18, 24], ["tensorflow.variable_scope", "mlp_policy.MlpPolicy._init", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy._init"], ["def", "__init__", "(", "self", ",", "name", ",", "reuse", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "_init", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.mlp_policy.MlpPolicy._init": [[25, 63], ["isinstance", "baselines.common.distributions.make_pdtype", "baselines.get_placeholder", "tensorflow.clip_by_value", "range", "range", "baselines.common.distributions.make_pdtype.pdfromflat", "baselines.get_placeholder", "baselines.switch", "baselines.function", "tensorflow.variable_scope", "baselines.common.mpi_running_mean_std.RunningMeanStd", "tensorflow.nn.tanh", "baselines.acktr.utils.dense", "tensorflow.nn.tanh", "isinstance", "baselines.acktr.utils.dense", "tensorflow.get_variable", "tensorflow.concat", "baselines.acktr.utils.dense", "mlp_policy.MlpPolicy.pd.sample", "mlp_policy.MlpPolicy.pd.mode", "baselines.acktr.utils.dense", "baselines.acktr.utils.dense", "baselines.normc_initializer", "baselines.normc_initializer", "list", "baselines.normc_initializer", "tensorflow.zeros_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.common.distributions.make_pdtype.param_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.switch", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.mode", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape"], ["", "", "def", "_init", "(", "self", ",", "ob_space", ",", "ac_space", ",", "hid_size", ",", "num_hid_layers", ",", "gaussian_fixed_var", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "ob_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "\n", "self", ".", "pdtype", "=", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "sequence_length", "=", "None", "\n", "\n", "ob", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"ob\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "sequence_length", "]", "+", "list", "(", "ob_space", ".", "shape", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"obfilter\"", ")", ":", "\n", "            ", "self", ".", "ob_rms", "=", "RunningMeanStd", "(", "shape", "=", "ob_space", ".", "shape", ")", "\n", "\n", "", "obz", "=", "tf", ".", "clip_by_value", "(", "(", "ob", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "self", ".", "ob_rms", ".", "std", ",", "-", "5.0", ",", "5.0", ")", "\n", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "            ", "last_out", "=", "tf", ".", "nn", ".", "tanh", "(", "dense", "(", "last_out", ",", "hid_size", ",", "\"vffc%i\"", "%", "(", "i", "+", "1", ")", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "", "self", ".", "vpred", "=", "dense", "(", "last_out", ",", "1", ",", "\"vffinal\"", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "            ", "last_out", "=", "tf", ".", "nn", ".", "tanh", "(", "dense", "(", "last_out", ",", "hid_size", ",", "\"polfc%i\"", "%", "(", "i", "+", "1", ")", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "\n", "", "if", "gaussian_fixed_var", "and", "isinstance", "(", "ac_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "mean", "=", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", ",", "\"polfinal\"", ",", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "logstd", "=", "tf", ".", "get_variable", "(", "name", "=", "\"logstd\"", ",", "shape", "=", "[", "1", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "pdparam", "=", "tf", ".", "concat", "(", "[", "mean", ",", "mean", "*", "0.0", "+", "logstd", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "pdparam", "=", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", ",", "\"polfinal\"", ",", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "\n", "", "self", ".", "pd", "=", "pdtype", ".", "pdfromflat", "(", "pdparam", ")", "\n", "\n", "self", ".", "state_in", "=", "[", "]", "\n", "self", ".", "state_out", "=", "[", "]", "\n", "\n", "# change for BC", "\n", "stochastic", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"stochastic\"", ",", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "ac", "=", "U", ".", "switch", "(", "stochastic", ",", "self", ".", "pd", ".", "sample", "(", ")", ",", "self", ".", "pd", ".", "mode", "(", ")", ")", "\n", "self", ".", "ac", "=", "ac", "\n", "self", ".", "_act", "=", "U", ".", "function", "(", "[", "stochastic", ",", "ob", "]", ",", "[", "ac", ",", "self", ".", "vpred", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.mlp_policy.MlpPolicy.act": [[64, 67], ["mlp_policy.MlpPolicy._act"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "stochastic", ",", "ob", ")", ":", "\n", "        ", "ac1", ",", "vpred1", "=", "self", ".", "_act", "(", "stochastic", ",", "ob", "[", "None", "]", ")", "\n", "return", "ac1", "[", "0", "]", ",", "vpred1", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.mlp_policy.MlpPolicy.get_variables": [[68, 70], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.mlp_policy.MlpPolicy.get_trainable_variables": [[71, 73], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.mlp_policy.MlpPolicy.get_initial_state": [[74, 76], ["None"], "methods", ["None"], ["", "def", "get_initial_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.runner.runner": [[12, 33], ["range", "runner.traj_1_generator", "obs_list.append", "acs_list.append", "len_list.append", "ret_list.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.traj_1_generator", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["def", "runner", "(", "env", ",", "model", ",", "number_trajs", ")", ":", "\n", "\n", "    ", "obs_list", "=", "[", "]", "\n", "acs_list", "=", "[", "]", "\n", "len_list", "=", "[", "]", "\n", "ret_list", "=", "[", "]", "\n", "total_t", "=", "0", "\n", "#for _ in tqdm(range(number_trajs)):", "\n", "for", "_", "in", "range", "(", "number_trajs", ")", ":", "\n", "        ", "traj", ",", "t", "=", "traj_1_generator", "(", "model", ",", "env", ")", "\n", "obs", ",", "acs", ",", "ep_len", ",", "ep_ret", "=", "traj", "[", "'ob'", "]", ",", "traj", "[", "'ac'", "]", ",", "traj", "[", "'ep_len'", "]", ",", "traj", "[", "'ep_ret'", "]", "\n", "obs_list", ".", "append", "(", "obs", ")", "\n", "acs_list", ".", "append", "(", "acs", ")", "\n", "len_list", ".", "append", "(", "ep_len", ")", "\n", "ret_list", ".", "append", "(", "ep_ret", ")", "\n", "total_t", "+=", "t", "\n", "#avg_len = sum(len_list)/len(len_list)", "\n", "#avg_ret = sum(ret_list)/len(ret_list)", "\n", "#print(\"Average length:\", avg_len)", "\n", "#print(\"Average return:\", avg_ret)", "\n", "", "return", "obs_list", ",", "acs_list", ",", "ret_list", ",", "total_t", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.runner.traj_1_generator": [[36, 79], ["env.action_space.sample", "env.reset", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "action_noise.reset", "model.step", "np.array.append", "np.array.append", "np.array.append", "env.step", "np.array.append", "action_noise"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "traj_1_generator", "(", "model", ",", "env", ")", ":", "\n", "\n", "    ", "t", "=", "0", "\n", "ac", "=", "env", ".", "action_space", ".", "sample", "(", ")", "# not used, just so we have the datatype", "\n", "new", "=", "True", "# marks if we're on first timestep of an episode", "\n", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "cur_ep_ret", "=", "0", "# return in current episode", "\n", "cur_ep_len", "=", "0", "# len of current episode", "\n", "\n", "# Initialize history arrays", "\n", "obs", "=", "[", "]", "\n", "rews", "=", "[", "]", "\n", "news", "=", "[", "]", "\n", "acs", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "ac", "=", "model", ".", "step", "(", "ob", "[", "'image'", "]", ")", "\n", "obs", ".", "append", "(", "ob", "[", "'image'", "]", ")", "\n", "news", ".", "append", "(", "new", ")", "\n", "acs", ".", "append", "(", "ac", ")", "\n", "\n", "ob", ",", "rew", ",", "new", ",", "_", "=", "env", ".", "step", "(", "ac", ")", "\n", "rews", ".", "append", "(", "rew", ")", "\n", "\n", "cur_ep_ret", "+=", "rew", "\n", "cur_ep_len", "+=", "1", "\n", "if", "new", ":", "\n", "            ", "break", "\n", "", "t", "+=", "1", "\n", "\n", "", "obs", "=", "np", ".", "array", "(", "obs", ")", "\n", "rews", "=", "np", ".", "array", "(", "rews", ")", "\n", "news", "=", "np", ".", "array", "(", "news", ")", "\n", "acs", "=", "np", ".", "array", "(", "acs", ")", "\n", "traj", "=", "{", "\"ob\"", ":", "obs", ",", "\"rew\"", ":", "rews", ",", "\"new\"", ":", "news", ",", "\"ac\"", ":", "acs", ",", "\n", "\"ep_ret\"", ":", "cur_ep_ret", ",", "\"ep_len\"", ":", "cur_ep_len", "}", "\n", "return", "traj", ",", "t", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.ssrl.argsparser": [[16, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag"], ["parser", ".", "add_argument", "(", "'--env_id'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'MiniGrid-MultiRoom-N4-S5-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_timesteps'", ",", "help", "=", "'the number of timesteps'", ",", "type", "=", "int", ",", "default", "=", "2.1e5", ")", "\n", "parser", ".", "add_argument", "(", "'--buffer_size'", ",", "help", "=", "'the size of the sorted buffer'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "'the batch size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--ent_coef'", ",", "help", "=", "'the weight of the entropy'", ",", "default", "=", "0.00", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "help", "=", "'the learning rate'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--rollout_steps'", ",", "help", "=", "'the number of rollouts in each iteration'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--train_steps'", ",", "help", "=", "'the number of training updates in each iteration'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--log_every'", ",", "help", "=", "'log every iteration'", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_num'", ",", "help", "=", "'the number of evaluation number'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--count_exp'", ",", "help", "=", "'whether using count-based exploration'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "help", "=", "'hyperparameter for count-based exploration'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "return", "parser", "\n", "\n", "", "def", "learn", "(", "env", ",", "eval_env", ",", "seed", ",", "num_timesteps", ",", "batch_size", ",", "buffer_size", ",", "ent_coef", ",", "lr", ",", "rollout_steps", ",", "train_steps", ",", "log_every", ",", "eval_num", ",", "count_exp", ",", "beta", ")", ":", "\n", "# Seed", "\n", "    ", "env", ".", "seed", "(", "seed", ")", "\n", "eval_env", ".", "seed", "(", "seed", ")", "\n", "set_global_seeds", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.ssrl.learn": [[38, 87], ["env.seed", "eval_env.seed", "baselines.common.set_global_seeds", "baselines.ssrl_continuous.buffer.SortedBuffer", "baselines.common.tf_util.make_session().__enter__", "baselines.ssrl_continuous.model.Model", "baselines.common.tf_util.initialize", "baselines.ssrl_continuous.model.Model.adam.sync", "collections.deque", "time.time", "baselines.ssrl_continuous.runner.runner", "collections.deque.extend", "zip", "range", "range", "int", "baselines.common.tf_util.make_session", "baselines.ssrl_continuous.buffer.SortedBuffer.insert", "baselines.ssrl_continuous.buffer.SortedBuffer.sample", "baselines.ssrl_continuous.model.Model.train", "time.time", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.dumpkvs", "numpy.mean", "baselines.ssrl_continuous.runner.runner", "baselines.logger.logkv", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "\n", "# Buffer", "\n", "if", "count_exp", ":", "\n", "        ", "from", "baselines", ".", "ssrl_exploration", ".", "count_buffer", "import", "SortedBuffer", "\n", "buf", "=", "SortedBuffer", "(", "size", "=", "int", "(", "buffer_size", ")", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "beta", "=", "beta", ")", "\n", "", "else", ":", "\n", "        ", "from", "baselines", ".", "ssrl_exploration", ".", "buffer", "import", "SortedBuffer", "\n", "buf", "=", "SortedBuffer", "(", "size", "=", "int", "(", "buffer_size", ")", ",", "\n", "ob_space", "=", "ob_space", ")", "\n", "\n", "\n", "# Model", "\n", "", "tf", ".", "Session", "(", ")", ".", "__enter__", "(", ")", "\n", "model", "=", "Model", "(", "ob_space", ",", "ac_space", ",", "batch_size", ",", "lr", ",", "ent_coef", ")", "\n", "\n", "ret_buf", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "total_t", "=", "0", "\n", "total_episodes", "=", "0", "\n", "while", "total_t", "<", "num_timesteps", ":", "\n", "        ", "obs_list", ",", "acs_list", ",", "ret_list", ",", "t", "=", "runner", "(", "env", ",", "model", ",", "rollout_steps", ")", "\n", "ret_buf", ".", "extend", "(", "ret_list", ")", "\n", "#total_t += t", "\n", "total_episodes", "+=", "rollout_steps", "\n", "for", "obs", ",", "acs", ",", "ret", "in", "zip", "(", "obs_list", ",", "acs_list", ",", "ret_list", ")", ":", "\n", "            ", "buf", ".", "insert", "(", "obs", ",", "acs", ",", "ret", ")", "\n", "#print(buf.data.shape, buf.data)", "\n", "#print(ret_list)", "\n", "", "for", "_", "in", "range", "(", "train_steps", ")", ":", "\n", "            ", "obs", ",", "acs", "=", "buf", ".", "sample", "(", "batch_size", ",", "k", "=", "buffer_size", ")", "\n", "loss", "=", "model", ".", "train", "(", "obs", ",", "acs", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "t", ")", ":", "\n", "            ", "total_t", "+=", "1", "\n", "if", "total_t", "%", "log_every", "==", "0", ":", "\n", "                ", "logger", ".", "logkv", "(", "\"total_timesteps\"", ",", "total_t", ")", "\n", "logger", ".", "logkv", "(", "\"total_episodes\"", ",", "total_episodes", ")", "\n", "logger", ".", "logkv", "(", "\"rollout_return\"", ",", "np", ".", "mean", "(", "[", "r", "for", "r", "in", "ret_buf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "\"loss\"", ",", "loss", ")", "\n", "if", "eval_num", ">", "0", ":", "\n", "                    ", "obs_list", ",", "acs_list", ",", "ret_list", ",", "t", "=", "runner", "(", "eval_env", ",", "model", ",", "eval_num", ")", "\n", "logger", ".", "logkv", "(", "\"eval_return\"", ",", "np", ".", "mean", "(", "ret_list", ")", ")", "\n", "", "logger", ".", "dumpkvs", "(", ")", "\n", "\n", "", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argsparser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.ssrl.main": [[89, 116], ["ssrl.argsparser", "argsparser.parse_args", "baselines.logger.configure", "gym.make", "gym.make", "ssrl.learn", "parser.parse_args.noise_type.split", "int", "current_noise_type.strip.strip", "current_noise_type.strip.split", "baselines.ssrl_continuous.noise.NormalActionNoise", "current_noise_type.strip.split", "baselines.ssrl_continuous.noise.OrnsteinUhlenbeckActionNoise", "RuntimeError", "numpy.zeros", "float", "numpy.ones", "numpy.zeros", "float", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.argsparser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.strip"], ["\n", "\n", "env", "=", "gym", ".", "make", "(", "args", ".", "env_id", ")", "\n", "eval_env", "=", "gym", ".", "make", "(", "args", ".", "env_id", ")", "\n", "\n", "# Learn", "\n", "learn", "(", "env", ",", "eval_env", ",", "args", ".", "seed", ",", "int", "(", "args", ".", "num_timesteps", ")", ",", "args", ".", "batch_size", ",", "args", ".", "buffer_size", ",", "args", ".", "ent_coef", ",", "args", ".", "lr", ",", "args", ".", "rollout_steps", ",", "args", ".", "train_steps", ",", "args", ".", "log_every", ",", "args", ".", "eval_num", ",", "args", ".", "count_exp", ",", "args", ".", "beta", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.model.Model.__init__": [[10, 31], ["tensorflow.get_default_session", "baselines.ssrl_continuous.mlp_policy.MlpPolicy", "baselines.common.tf_util.get_placeholder_cached", "model.Model.pi.pdtype.sample_placeholder", "baselines.common.tf_util.get_placeholder_cached", "tensorflow.reduce_mean", "model.Model.pi.get_trainable_variables", "baselines.common.mpi_adam.MpiAdam", "baselines.common.tf_util.function", "tensorflow.square", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.reduce_mean", "baselines.common.tf_util.flatgrad", "model.Model.pi.pd.entropy"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy"], ["self", ".", "ob_space", "=", "ob_space", "\n", "self", ".", "ac_space", "=", "ac_space", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "act_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "1", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "False", ")", "\n", "self", ".", "train_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "batch_size", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "True", ")", "\n", "\n", "self", ".", "ob_ph", "=", "self", ".", "train_model", ".", "X", "\n", "self", ".", "ac_ph", "=", "self", ".", "train_model", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "self", ".", "ac", "=", "self", ".", "train_model", ".", "pd", ".", "sample", "(", ")", "\n", "self", ".", "neglogpac", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "train_model", ".", "pi", ",", "labels", "=", "self", ".", "ac_ph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.model.Model.step": [[32, 34], ["model.Model.pi.act"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act"], ["#self.loss = tf.reduce_mean(self.neglogpac) - ent_coef * tf.reduce_mean(self.train_model.entropy)", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "neglogpac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.model.Model.train": [[35, 39], ["model.Model.lossandgrad", "model.Model.adam.update"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["with", "tf", ".", "variable_scope", "(", "'model'", ")", ":", "\n", "            ", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "params", ")", "\n", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "self", ".", "trainer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.AdaptiveParamNoiseSpec.__init__": [[5, 11], ["None"], "methods", ["None"], ["        ", "pass", "\n", "\n", "\n", "", "", "class", "NormalActionNoise", "(", "ActionNoise", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.AdaptiveParamNoiseSpec.adapt": [[12, 19], ["None"], "methods", ["None"], ["\n", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'NormalActionNoise(mu={}, sigma={})'", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.AdaptiveParamNoiseSpec.get_stats": [[20, 25], ["None"], "methods", ["None"], ["# Based on http://math.stackexchange.com/questions/1287634/implementing-ornstein-uhlenbeck-in-matlab", "\n", "", "", "class", "OrnsteinUhlenbeckActionNoise", "(", "ActionNoise", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "mu", ",", "sigma", ",", "theta", "=", ".15", ",", "dt", "=", "1e-2", ",", "x0", "=", "None", ")", ":", "\n", "        ", "self", ".", "theta", "=", "theta", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.AdaptiveParamNoiseSpec.__repr__": [[26, 29], ["fmt.format"], "methods", ["None"], ["self", ".", "dt", "=", "dt", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.ActionNoise.reset": [[32, 34], ["None"], "methods", ["None"], ["self", ".", "x_prev", "=", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.NormalActionNoise.__init__": [[37, 40], ["None"], "methods", ["None"], ["\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'OrnsteinUhlenbeckActionNoise(mu={}, sigma={})'", ".", "format", "(", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.NormalActionNoise.__call__": [[41, 43], ["numpy.random.normal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.NormalActionNoise.__repr__": [[44, 46], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.OrnsteinUhlenbeckActionNoise.__init__": [[50, 57], ["noise.OrnsteinUhlenbeckActionNoise.reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.OrnsteinUhlenbeckActionNoise.__call__": [[58, 62], ["numpy.random.normal", "numpy.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.OrnsteinUhlenbeckActionNoise.reset": [[63, 65], ["numpy.zeros_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.OrnsteinUhlenbeckActionNoise.__repr__": [[66, 68], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Model.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Model.vars": [[9, 12], ["tensorflow.get_collection", "tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "vars", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Model.trainable_vars": [[13, 16], ["tensorflow.get_collection", "tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_vars", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Model.perturbable_vars": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "perturbable_vars", "(", "self", ")", ":", "\n", "        ", "return", "[", "var", "for", "var", "in", "self", ".", "trainable_vars", "if", "'LayerNorm'", "not", "in", "var", ".", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Actor.__init__": [[23, 27], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_actions", ",", "name", "=", "'actor'", ",", "layer_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Actor", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "nb_actions", "=", "nb_actions", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Actor.__call__": [[28, 47], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "scope.reuse_variables", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense"], ["", "def", "__call__", "(", "self", ",", "obs", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "x", "=", "obs", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "self", ".", "nb_actions", ",", "kernel_initializer", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "3e-3", ",", "maxval", "=", "3e-3", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "tanh", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Critic.__init__": [[50, 53], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'critic'", ",", "layer_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Critic.__call__": [[54, 73], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.concat", "tensorflow.concat", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.layers.dense", "tensorflow.layers.dense", "scope.reuse_variables", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.layers.layer_norm", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense"], ["", "def", "__call__", "(", "self", ",", "obs", ",", "action", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "x", "=", "obs", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "action", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "1", ",", "kernel_initializer", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "3e-3", ",", "maxval", "=", "3e-3", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Critic.output_vars": [[74, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_vars", "(", "self", ")", ":", "\n", "        ", "output_vars", "=", "[", "var", "for", "var", "in", "self", ".", "trainable_vars", "if", "'output'", "in", "var", ".", "name", "]", "\n", "return", "output_vars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.run": [[19, 80], ["mpi4py.MPI.COMM_WORLD.Get_rank", "gym.make", "baselines.bench.Monitor", "noise_type.split", "baselines.ddpg.memory.Memory", "baselines.ddpg.models.Critic", "baselines.ddpg.models.Actor", "baselines.logger.info", "tensorflow.reset_default_graph", "baselines.common.misc_util.set_global_seeds", "bench.Monitor.seed", "baselines.train", "bench.Monitor.close", "baselines.logger.set_level", "gym.make", "baselines.bench.Monitor", "baselines.bench.Monitor", "current_noise_type.strip.strip", "bench.Monitor.seed", "time.time", "bench.Monitor.close", "baselines.logger.info", "baselines.logger.get_dir", "os.path.join", "os.path.join", "int", "baselines.logger.get_dir", "baselines.logger.get_dir", "str", "baselines.logger.get_dir", "current_noise_type.strip.split", "AdaptiveParamNoiseSpec", "current_noise_type.strip.split", "NormalActionNoise", "time.time", "float", "float", "current_noise_type.strip.split", "OrnsteinUhlenbeckActionNoise", "RuntimeError", "np.zeros", "float", "np.ones", "np.zeros", "float", "np.ones"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.set_level", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.strip", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["def", "run", "(", "env_id", ",", "seed", ",", "noise_type", ",", "layer_norm", ",", "evaluation", ",", "**", "kwargs", ")", ":", "\n", "# Configure things.", "\n", "    ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "\n", "# Create envs.", "\n", "", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", "=", "bench", ".", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "str", "(", "rank", ")", ")", ")", "\n", "\n", "if", "evaluation", "and", "rank", "==", "0", ":", "\n", "        ", "eval_env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "eval_env", "=", "bench", ".", "Monitor", "(", "eval_env", ",", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'gym_eval'", ")", ")", "\n", "env", "=", "bench", ".", "Monitor", "(", "env", ",", "None", ")", "\n", "", "else", ":", "\n", "        ", "eval_env", "=", "None", "\n", "\n", "# Parse noise_type", "\n", "", "action_noise", "=", "None", "\n", "param_noise", "=", "None", "\n", "nb_actions", "=", "env", ".", "action_space", ".", "shape", "[", "-", "1", "]", "\n", "for", "current_noise_type", "in", "noise_type", ".", "split", "(", "','", ")", ":", "\n", "        ", "current_noise_type", "=", "current_noise_type", ".", "strip", "(", ")", "\n", "if", "current_noise_type", "==", "'none'", ":", "\n", "            ", "pass", "\n", "", "elif", "'adaptive-param'", "in", "current_noise_type", ":", "\n", "            ", "_", ",", "stddev", "=", "current_noise_type", ".", "split", "(", "'_'", ")", "\n", "param_noise", "=", "AdaptiveParamNoiseSpec", "(", "initial_stddev", "=", "float", "(", "stddev", ")", ",", "desired_action_stddev", "=", "float", "(", "stddev", ")", ")", "\n", "", "elif", "'normal'", "in", "current_noise_type", ":", "\n", "            ", "_", ",", "stddev", "=", "current_noise_type", ".", "split", "(", "'_'", ")", "\n", "action_noise", "=", "NormalActionNoise", "(", "mu", "=", "np", ".", "zeros", "(", "nb_actions", ")", ",", "sigma", "=", "float", "(", "stddev", ")", "*", "np", ".", "ones", "(", "nb_actions", ")", ")", "\n", "", "elif", "'ou'", "in", "current_noise_type", ":", "\n", "            ", "_", ",", "stddev", "=", "current_noise_type", ".", "split", "(", "'_'", ")", "\n", "action_noise", "=", "OrnsteinUhlenbeckActionNoise", "(", "mu", "=", "np", ".", "zeros", "(", "nb_actions", ")", ",", "sigma", "=", "float", "(", "stddev", ")", "*", "np", ".", "ones", "(", "nb_actions", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'unknown noise type \"{}\"'", ".", "format", "(", "current_noise_type", ")", ")", "\n", "\n", "# Configure components.", "\n", "", "", "memory", "=", "Memory", "(", "limit", "=", "int", "(", "1e6", ")", ",", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "observation_shape", "=", "env", ".", "observation_space", ".", "shape", ")", "\n", "critic", "=", "Critic", "(", "layer_norm", "=", "layer_norm", ")", "\n", "actor", "=", "Actor", "(", "nb_actions", ",", "layer_norm", "=", "layer_norm", ")", "\n", "\n", "# Seed everything to make things reproducible.", "\n", "seed", "=", "seed", "+", "1000000", "*", "rank", "\n", "logger", ".", "info", "(", "'rank {}: seed={}, logdir={}'", ".", "format", "(", "rank", ",", "seed", ",", "logger", ".", "get_dir", "(", ")", ")", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "set_global_seeds", "(", "seed", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "        ", "eval_env", ".", "seed", "(", "seed", ")", "\n", "\n", "# Disable logging for rank != 0 to avoid noise.", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "training", ".", "train", "(", "env", "=", "env", ",", "eval_env", "=", "eval_env", ",", "param_noise", "=", "param_noise", ",", "\n", "action_noise", "=", "action_noise", ",", "actor", "=", "actor", ",", "critic", "=", "critic", ",", "memory", "=", "memory", ",", "**", "kwargs", ")", "\n", "env", ".", "close", "(", ")", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "        ", "eval_env", ".", "close", "(", ")", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'total runtime: {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args": [[82, 116], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag", "baselines.common.misc_util.boolean_flag", "baselines.common.misc_util.boolean_flag", "baselines.common.misc_util.boolean_flag", "baselines.common.misc_util.boolean_flag", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag", "argparse.ArgumentParser.parse_args", "vars"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.models.Model.vars"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--env-id'", ",", "type", "=", "str", ",", "default", "=", "'InvertedPendulum-v2'", ")", "\n", "boolean_flag", "(", "parser", ",", "'render-eval'", ",", "default", "=", "False", ")", "\n", "boolean_flag", "(", "parser", ",", "'layer-norm'", ",", "default", "=", "True", ")", "\n", "boolean_flag", "(", "parser", ",", "'render'", ",", "default", "=", "False", ")", "\n", "boolean_flag", "(", "parser", ",", "'normalize-returns'", ",", "default", "=", "False", ")", "\n", "boolean_flag", "(", "parser", ",", "'normalize-observations'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-l2-reg'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "# per MPI worker", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "boolean_flag", "(", "parser", ",", "'popart'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-scale'", ",", "type", "=", "float", ",", "default", "=", "1.", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-norm'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--nb-epochs'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "# with default settings, perform 1M steps total", "\n", "parser", ".", "add_argument", "(", "'--nb-epoch-cycles'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--nb-train-steps'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "# per epoch cycle and MPI worker", "\n", "parser", ".", "add_argument", "(", "'--nb-eval-steps'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "# per epoch cycle and MPI worker", "\n", "parser", ".", "add_argument", "(", "'--nb-rollout-steps'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "# per epoch cycle and MPI worker", "\n", "parser", ".", "add_argument", "(", "'--noise-type'", ",", "type", "=", "str", ",", "default", "=", "'adaptive-param_0.2'", ")", "# choices are adaptive-param_xx, ou_xx, normal_xx, none", "\n", "parser", ".", "add_argument", "(", "'--num-timesteps'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "boolean_flag", "(", "parser", ",", "'evaluation'", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# we don't directly specify timesteps for this script, so make sure that if we do specify them", "\n", "# they agree with the other parameters", "\n", "if", "args", ".", "num_timesteps", "is", "not", "None", ":", "\n", "        ", "assert", "(", "args", ".", "num_timesteps", "==", "args", ".", "nb_epochs", "*", "args", ".", "nb_epoch_cycles", "*", "args", ".", "nb_rollout_steps", ")", "\n", "", "dict_args", "=", "vars", "(", "args", ")", "\n", "del", "dict_args", "[", "'num_timesteps'", "]", "\n", "return", "dict_args", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.__init__": [[64, 144], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "copy.copy.copy", "copy.copy.copy", "actor", "critic", "ddpg.denormalize", "critic", "ddpg.denormalize", "ddpg.denormalize", "ddpg.DDPG.setup_actor_optimizer", "ddpg.DDPG.setup_critic_optimizer", "ddpg.DDPG.setup_stats", "ddpg.DDPG.setup_target_network_updates", "ddpg.normalize", "ddpg.normalize", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "copy.copy.copy.", "ddpg.DDPG.setup_param_noise", "ddpg.DDPG.setup_popart", "tensorflow.variable_scope", "tensorflow.variable_scope", "baselines.common.mpi_running_mean_std.RunningMeanStd", "tensorflow.variable_scope", "tensorflow.variable_scope", "baselines.common.mpi_running_mean_std.RunningMeanStd", "copy.copy.copy."], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.denormalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.denormalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.denormalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_actor_optimizer", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_critic_optimizer", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_stats", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_target_network_updates", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_param_noise", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_popart"], ["# Prepare staging area for feeding data to the model.", "\n", "stage_shapes", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "sorted", "(", "self", ".", "input_dims", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "continue", "\n", "", "stage_shapes", "[", "key", "]", "=", "(", "None", ",", "*", "input_shapes", "[", "key", "]", ")", "\n", "", "for", "key", "in", "[", "'o'", ",", "'g'", "]", ":", "\n", "            ", "stage_shapes", "[", "key", "+", "'_2'", "]", "=", "stage_shapes", "[", "key", "]", "\n", "", "stage_shapes", "[", "'r'", "]", "=", "(", "None", ",", ")", "\n", "self", ".", "stage_shapes", "=", "stage_shapes", "\n", "\n", "# Create network.", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "self", ".", "staging_tf", "=", "StagingArea", "(", "\n", "dtypes", "=", "[", "tf", ".", "float32", "for", "_", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", ",", "\n", "shapes", "=", "list", "(", "self", ".", "stage_shapes", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "buffer_ph_tf", "=", "[", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ")", "for", "shape", "in", "self", ".", "stage_shapes", ".", "values", "(", ")", "]", "\n", "self", ".", "stage_op", "=", "self", ".", "staging_tf", ".", "put", "(", "self", ".", "buffer_ph_tf", ")", "\n", "\n", "self", ".", "_create_network", "(", "reuse", "=", "reuse", ")", "\n", "\n", "# Configure the replay buffer.", "\n", "", "buffer_shapes", "=", "{", "key", ":", "(", "self", ".", "T", "if", "key", "!=", "'o'", "else", "self", ".", "T", "+", "1", ",", "*", "input_shapes", "[", "key", "]", ")", "\n", "for", "key", ",", "val", "in", "input_shapes", ".", "items", "(", ")", "}", "\n", "buffer_shapes", "[", "'g'", "]", "=", "(", "buffer_shapes", "[", "'g'", "]", "[", "0", "]", ",", "self", ".", "dimg", ")", "\n", "buffer_shapes", "[", "'ag'", "]", "=", "(", "self", ".", "T", "+", "1", ",", "self", ".", "dimg", ")", "\n", "\n", "buffer_size", "=", "(", "self", ".", "buffer_size", "//", "self", ".", "rollout_batch_size", ")", "*", "self", ".", "rollout_batch_size", "\n", "self", ".", "buffer", "=", "ReplayBuffer", "(", "buffer_shapes", ",", "buffer_size", ",", "self", ".", "T", ",", "self", ".", "sample_transitions", ")", "\n", "\n", "", "def", "_random_action", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "self", ".", "max_u", ",", "high", "=", "self", ".", "max_u", ",", "size", "=", "(", "n", ",", "self", ".", "dimu", ")", ")", "\n", "\n", "", "def", "_preprocess_og", "(", "self", ",", "o", ",", "ag", ",", "g", ")", ":", "\n", "        ", "if", "self", ".", "relative_goals", ":", "\n", "            ", "g_shape", "=", "g", ".", "shape", "\n", "g", "=", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "ag", "=", "ag", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "g", "=", "self", ".", "subtract_goals", "(", "g", ",", "ag", ")", "\n", "g", "=", "g", ".", "reshape", "(", "*", "g_shape", ")", "\n", "", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "g", "=", "np", ".", "clip", "(", "g", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "return", "o", ",", "g", "\n", "\n", "", "def", "get_actions", "(", "self", ",", "o", ",", "ag", ",", "g", ",", "noise_eps", "=", "0.", ",", "random_eps", "=", "0.", ",", "use_target_net", "=", "False", ",", "\n", "compute_Q", "=", "False", ")", ":", "\n", "        ", "o", ",", "g", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "policy", "=", "self", ".", "target", "if", "use_target_net", "else", "self", ".", "main", "\n", "# values to compute", "\n", "vals", "=", "[", "policy", ".", "pi_tf", "]", "\n", "if", "compute_Q", ":", "\n", "            ", "vals", "+=", "[", "policy", ".", "Q_pi_tf", "]", "\n", "# feed", "\n", "", "feed", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "policy", ".", "u_tf", ":", "np", ".", "zeros", "(", "(", "o", ".", "size", "//", "self", ".", "dimo", ",", "self", ".", "dimu", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "}", "\n", "\n", "ret", "=", "self", ".", "sess", ".", "run", "(", "vals", ",", "feed_dict", "=", "feed", ")", "\n", "# action postprocessing", "\n", "u", "=", "ret", "[", "0", "]", "\n", "noise", "=", "noise_eps", "*", "self", ".", "max_u", "*", "np", ".", "random", ".", "randn", "(", "*", "u", ".", "shape", ")", "# gaussian noise", "\n", "u", "+=", "noise", "\n", "u", "=", "np", ".", "clip", "(", "u", ",", "-", "self", ".", "max_u", ",", "self", ".", "max_u", ")", "\n", "u", "+=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random_eps", ",", "u", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "(", "self", ".", "_random_action", "(", "u", ".", "shape", "[", "0", "]", ")", "-", "u", ")", "# eps-greedy", "\n", "if", "u", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "u", "=", "u", "[", "0", "]", "\n", "", "u", "=", "u", ".", "copy", "(", ")", "\n", "ret", "[", "0", "]", "=", "u", "\n", "\n", "if", "len", "(", "ret", ")", "==", "1", ":", "\n", "            ", "return", "ret", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "ret", "\n", "\n", "", "", "def", "store_episode", "(", "self", ",", "episode_batch", ",", "update_stats", "=", "True", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_target_network_updates": [[145, 150], ["ddpg.get_target_updates", "ddpg.get_target_updates"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.get_target_updates", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.get_target_updates"], ["\n", "\n", "self", ".", "buffer", ".", "store_episode", "(", "episode_batch", ")", "\n", "\n", "if", "update_stats", ":", "\n", "# add transitions to normalizer", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_param_noise": [[151, 167], ["copy.copy.copy", "copy.copy.copy.", "baselines.logger.info", "ddpg.get_perturbed_actor_updates", "copy.copy.copy", "copy.copy.copy.", "ddpg.get_perturbed_actor_updates", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.get_perturbed_actor_updates", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.get_perturbed_actor_updates"], ["            ", "episode_batch", "[", "'o_2'", "]", "=", "episode_batch", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "episode_batch", "[", "'ag_2'", "]", "=", "episode_batch", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "num_normalizing_transitions", "=", "transitions_in_episode_batch", "(", "episode_batch", ")", "\n", "transitions", "=", "self", ".", "sample_transitions", "(", "episode_batch", ",", "num_normalizing_transitions", ")", "\n", "\n", "o", ",", "o_2", ",", "g", ",", "ag", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g'", "]", ",", "transitions", "[", "'ag'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "# No need to preprocess the o_2 and g_2 since this is only used for stats", "\n", "\n", "self", ".", "o_stats", ".", "update", "(", "transitions", "[", "'o'", "]", ")", "\n", "self", ".", "g_stats", ".", "update", "(", "transitions", "[", "'g'", "]", ")", "\n", "\n", "self", ".", "o_stats", ".", "recompute_stats", "(", ")", "\n", "self", ".", "g_stats", ".", "recompute_stats", "(", ")", "\n", "\n", "", "", "def", "get_current_buffer_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "get_current_size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_actor_optimizer": [[168, 178], ["baselines.logger.info", "sum", "baselines.logger.info", "baselines.logger.info", "baselines.flatgrad", "baselines.common.mpi_adam.MpiAdam", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "var.get_shape().as_list", "functools.reduce", "var.get_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.reduce"], ["\n", "", "def", "_sync_optimizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "sync", "(", ")", "\n", "self", ".", "pi_adam", ".", "sync", "(", ")", "\n", "\n", "", "def", "_grads", "(", "self", ")", ":", "\n", "# Avoid feed_dict here for performance!", "\n", "        ", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "Q_loss_tf", ",", "\n", "self", ".", "main", ".", "Q_pi_tf", ",", "\n", "self", ".", "Q_grad_tf", ",", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_critic_optimizer": [[179, 200], ["baselines.logger.info", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "sum", "baselines.logger.info", "baselines.logger.info", "baselines.flatgrad", "baselines.common.mpi_adam.MpiAdam", "ddpg.normalize", "tensorflow.square", "tensorflow.square", "baselines.logger.info", "tensorflow.layers.apply_regularization", "tensorflow.layers.apply_regularization", "var.get_shape().as_list", "baselines.logger.info", "tensorflow.layers.l2_regularizer", "tensorflow.layers.l2_regularizer", "functools.reduce", "var.get_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.normalize", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.reduce"], ["self", ".", "pi_grad_tf", "\n", "]", ")", "\n", "return", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "\n", "\n", "", "def", "_update", "(", "self", ",", "Q_grad", ",", "pi_grad", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "update", "(", "Q_grad", ",", "self", ".", "Q_lr", ")", "\n", "self", ".", "pi_adam", ".", "update", "(", "pi_grad", ",", "self", ".", "pi_lr", ")", "\n", "\n", "", "def", "sample_batch", "(", "self", ")", ":", "\n", "        ", "transitions", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "o", ",", "o_2", ",", "g", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g'", "]", "\n", "ag", ",", "ag_2", "=", "transitions", "[", "'ag'", "]", ",", "transitions", "[", "'ag_2'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g_2'", "]", "=", "self", ".", "_preprocess_og", "(", "o_2", ",", "ag_2", ",", "g", ")", "\n", "\n", "transitions_batch", "=", "[", "transitions", "[", "key", "]", "for", "key", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", "\n", "return", "transitions_batch", "\n", "\n", "", "def", "stage_batch", "(", "self", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "self", ".", "sample_batch", "(", ")", "\n", "", "assert", "len", "(", "self", ".", "buffer_ph_tf", ")", "==", "len", "(", "batch", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_popart": [[201, 218], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "len", "M.assign", "b.assign", "M.get_shape", "b.get_shape"], "methods", ["None"], ["self", ".", "sess", ".", "run", "(", "self", ".", "stage_op", ",", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "buffer_ph_tf", ",", "batch", ")", ")", ")", "\n", "\n", "", "def", "train", "(", "self", ",", "stage", "=", "True", ")", ":", "\n", "        ", "if", "stage", ":", "\n", "            ", "self", ".", "stage_batch", "(", ")", "\n", "", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "=", "self", ".", "_grads", "(", ")", "\n", "self", ".", "_update", "(", "Q_grad", ",", "pi_grad", ")", "\n", "return", "critic_loss", ",", "actor_loss", "\n", "\n", "", "def", "_init_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "init_target_net_op", ")", "\n", "\n", "", "def", "update_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "update_target_net_op", ")", "\n", "\n", "", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer", ".", "clear_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.setup_stats": [[219, 254], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "ddpg.reduce_std", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ddpg.reduce_std", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ddpg.reduce_std", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ddpg.reduce_std"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.reduce_std", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.reduce_std", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.reduce_std", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.reduce_std"], ["", "def", "_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "assert", "len", "(", "res", ")", ">", "0", "\n", "return", "res", "\n", "\n", "", "def", "_global_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "return", "res", "\n", "\n", "", "def", "_create_network", "(", "self", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating a DDPG agent with action space %d x %s...\"", "%", "(", "self", ".", "dimu", ",", "self", ".", "max_u", ")", ")", "\n", "\n", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "self", ".", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "\n", "# running averages", "\n", "", "with", "tf", ".", "variable_scope", "(", "'o_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "o_stats", "=", "Normalizer", "(", "self", ".", "dimo", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'g_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "g_stats", "=", "Normalizer", "(", "self", ".", "dimg", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "\n", "# mini-batch sampling.", "\n", "", "batch", "=", "self", ".", "staging_tf", ".", "get", "(", ")", "\n", "batch_tf", "=", "OrderedDict", "(", "[", "(", "key", ",", "batch", "[", "i", "]", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "stage_shapes", ".", "keys", "(", ")", ")", "]", ")", "\n", "batch_tf", "[", "'r'", "]", "=", "tf", ".", "reshape", "(", "batch_tf", "[", "'r'", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "# networks", "\n", "with", "tf", ".", "variable_scope", "(", "'main'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.pi": [[255, 273], ["ddpg.DDPG.flatten", "numpy.clip", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.action_noise"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "self", ".", "main", "=", "self", ".", "create_actor_critic", "(", "batch_tf", ",", "net_type", "=", "'main'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'target'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "target_batch_tf", "=", "batch_tf", ".", "copy", "(", ")", "\n", "target_batch_tf", "[", "'o'", "]", "=", "batch_tf", "[", "'o_2'", "]", "\n", "target_batch_tf", "[", "'g'", "]", "=", "batch_tf", "[", "'g_2'", "]", "\n", "self", ".", "target", "=", "self", ".", "create_actor_critic", "(", "\n", "target_batch_tf", ",", "net_type", "=", "'target'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "assert", "len", "(", "self", ".", "_vars", "(", "\"main\"", ")", ")", "==", "len", "(", "self", ".", "_vars", "(", "\"target\"", ")", ")", "\n", "\n", "# loss functions", "\n", "target_Q_pi_tf", "=", "self", ".", "target", ".", "Q_pi_tf", "\n", "clip_range", "=", "(", "-", "self", ".", "clip_return", ",", "0.", "if", "self", ".", "clip_pos_returns", "else", "np", ".", "inf", ")", "\n", "target_tf", "=", "tf", ".", "clip_by_value", "(", "batch_tf", "[", "'r'", "]", "+", "self", ".", "gamma", "*", "target_Q_pi_tf", ",", "*", "clip_range", ")", "\n", "self", ".", "Q_loss_tf", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "tf", ".", "stop_gradient", "(", "target_tf", ")", "-", "self", ".", "main", ".", "Q_tf", ")", ")", "\n", "self", ".", "pi_loss_tf", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "main", ".", "Q_pi_tf", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.store_transition": [[274, 279], ["ddpg.DDPG.memory.append", "ddpg.DDPG.obs_rms.update", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["self", ".", "pi_loss_tf", "+=", "self", ".", "action_l2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "main", ".", "pi_tf", "/", "self", ".", "max_u", ")", ")", "\n", "Q_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "Q_loss_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "pi_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "pi_loss_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "==", "len", "(", "Q_grads_tf", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "==", "len", "(", "pi_grads_tf", ")", "\n", "self", ".", "Q_grads_vars_tf", "=", "zip", "(", "Q_grads_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.train": [[280, 323], ["ddpg.DDPG.memory.sample", "ddpg.DDPG.sess.run", "ddpg.DDPG.actor_optimizer.update", "ddpg.DDPG.critic_optimizer.update", "ddpg.DDPG.sess.run", "ddpg.DDPG.ret_rms.update", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.flatten", "batch[].astype", "numpy.array", "numpy.array", "batch[].astype"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["self", ".", "pi_grads_vars_tf", "=", "zip", "(", "pi_grads_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "self", ".", "Q_grad_tf", "=", "flatten_grads", "(", "grads", "=", "Q_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "self", ".", "pi_grad_tf", "=", "flatten_grads", "(", "grads", "=", "pi_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "\n", "# optimizers", "\n", "self", ".", "Q_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "self", ".", "pi_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "\n", "# polyak averaging", "\n", "self", ".", "main_vars", "=", "self", ".", "_vars", "(", "'main/Q'", ")", "+", "self", ".", "_vars", "(", "'main/pi'", ")", "\n", "self", ".", "target_vars", "=", "self", ".", "_vars", "(", "'target/Q'", ")", "+", "self", ".", "_vars", "(", "'target/pi'", ")", "\n", "self", ".", "stats_vars", "=", "self", ".", "_global_vars", "(", "'o_stats'", ")", "+", "self", ".", "_global_vars", "(", "'g_stats'", ")", "\n", "self", ".", "init_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "self", ".", "update_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "self", ".", "polyak", "*", "v", "[", "0", "]", "+", "(", "1.", "-", "self", ".", "polyak", ")", "*", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "\n", "# initialize all variables", "\n", "tf", ".", "variables_initializer", "(", "self", ".", "_global_vars", "(", "''", ")", ")", ".", "run", "(", ")", "\n", "self", ".", "_sync_optimizers", "(", ")", "\n", "self", ".", "_init_target_net", "(", ")", "\n", "\n", "", "def", "logs", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "logs", "=", "[", "]", "\n", "logs", "+=", "[", "(", "'stats_o/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_o/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "\n", "if", "prefix", "is", "not", "''", "and", "not", "prefix", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "[", "(", "prefix", "+", "'/'", "+", "key", ",", "val", ")", "for", "key", ",", "val", "in", "logs", "]", "\n", "", "else", ":", "\n", "            ", "return", "logs", "\n", "\n", "", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Our policies can be loaded from pkl, but after unpickling you cannot continue training.\n        \"\"\"", "\n", "excluded_subnames", "=", "[", "'_tf'", ",", "'_op'", ",", "'_vars'", ",", "'_adam'", ",", "'buffer'", ",", "'sess'", ",", "'_stats'", ",", "\n", "'main'", ",", "'target'", ",", "'lock'", ",", "'env'", ",", "'sample_transitions'", ",", "\n", "'stage_shapes'", ",", "'create_actor_critic'", "]", "\n", "\n", "state", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "all", "(", "[", "not", "subname", "in", "k", "for", "subname", "in", "excluded_subnames", "]", ")", "}", "\n", "state", "[", "'buffer_size'", "]", "=", "self", ".", "buffer_size", "\n", "state", "[", "'tf'", "]", "=", "self", ".", "sess", ".", "run", "(", "[", "x", "for", "x", "in", "self", ".", "_global_vars", "(", "''", ")", "if", "'buffer'", "not", "in", "x", ".", "name", "]", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.initialize": [[324, 330], ["ddpg.DDPG.sess.run", "ddpg.DDPG.actor_optimizer.sync", "ddpg.DDPG.critic_optimizer.sync", "ddpg.DDPG.sess.run", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["return", "state", "\n", "\n", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'sample_transitions'", "not", "in", "state", ":", "\n", "# We don't need this for playing the policy.", "\n", "            ", "state", "[", "'sample_transitions'", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.update_target_net": [[331, 333], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "self", ".", "__init__", "(", "**", "state", ")", "\n", "# set up stats (they are overwritten in __init__)", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.get_stats": [[334, 352], ["ddpg.DDPG.sess.run", "dict", "ddpg.DDPG.memory.sample", "len", "len", "zip", "ddpg.DDPG.param_noise.get_stats"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.get_stats"], ["            ", "if", "k", "[", "-", "6", ":", "]", "==", "'_stats'", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "# load TF variables", "\n", "", "", "vars", "=", "[", "x", "for", "x", "in", "self", ".", "_global_vars", "(", "''", ")", "if", "'buffer'", "not", "in", "x", ".", "name", "]", "\n", "assert", "(", "len", "(", "vars", ")", "==", "len", "(", "state", "[", "\"tf\"", "]", ")", ")", "\n", "node", "=", "[", "tf", ".", "assign", "(", "var", ",", "val", ")", "for", "var", ",", "val", "in", "zip", "(", "vars", ",", "state", "[", "\"tf\"", "]", ")", "]", "\n", "self", ".", "sess", ".", "run", "(", "node", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.adapt_param_noise": [[353, 370], ["ddpg.DDPG.memory.sample", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.param_noise.adapt", "mpi4py.MPI.COMM_WORLD.allreduce", "mpi4py.MPI.COMM_WORLD.Get_size"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.noise.AdaptiveParamNoiseSpec.adapt"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.reset": [[371, 378], ["ddpg.DDPG.action_noise.reset", "ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.normalize": [[14, 18], ["None"], "function", ["None"], ["\n", "def", "dims_to_shapes", "(", "input_dims", ")", ":", "\n", "    ", "return", "{", "key", ":", "tuple", "(", "[", "val", "]", ")", "if", "val", ">", "0", "else", "tuple", "(", ")", "for", "key", ",", "val", "in", "input_dims", ".", "items", "(", ")", "}", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.denormalize": [[20, 24], ["None"], "function", ["None"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "input_dims", ",", "buffer_size", ",", "hidden", ",", "layers", ",", "network_class", ",", "polyak", ",", "batch_size", ",", "\n", "Q_lr", ",", "pi_lr", ",", "norm_eps", ",", "norm_clip", ",", "max_u", ",", "action_l2", ",", "clip_obs", ",", "scope", ",", "T", ",", "\n", "rollout_batch_size", ",", "subtract_goals", ",", "relative_goals", ",", "clip_pos_returns", ",", "clip_return", ",", "\n", "sample_transitions", ",", "gamma", ",", "reuse", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.reduce_std": [[25, 27], ["tensorflow.sqrt", "ddpg.reduce_var"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.reduce_var"], ["        "]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.reduce_var": [[28, 32], ["tensorflow.reduce_mean", "tensorflow.square", "tensorflow.reduce_mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.get_target_updates": [[33, 45], ["baselines.logger.info", "zip", "len", "len", "baselines.logger.info", "init_updates.append", "soft_updates.append", "len", "len", "len", "len", "tensorflow.group", "tensorflow.group", "tensorflow.assign", "tensorflow.assign"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.get_perturbed_actor_updates": [[47, 61], ["zip", "tensorflow.group", "len", "len", "len", "len", "len", "len", "baselines.logger.info", "updates.append", "baselines.logger.info", "updates.append", "tensorflow.assign", "tensorflow.assign", "tensorflow.random_normal", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape"], ["\n", "if", "self", ".", "clip_return", "is", "None", ":", "\n", "            ", "self", ".", "clip_return", "=", "np", ".", "inf", "\n", "\n", "", "self", ".", "create_actor_critic", "=", "import_function", "(", "self", ".", "network_class", ")", "\n", "\n", "input_shapes", "=", "dims_to_shapes", "(", "self", ".", "input_dims", ")", "\n", "self", ".", "dimo", "=", "self", ".", "input_dims", "[", "'o'", "]", "\n", "self", ".", "dimg", "=", "self", ".", "input_dims", "[", "'g'", "]", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.training.train": [[15, 192], ["mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.logger.info", "baselines.ddpg.ddpg.DDPG", "baselines.logger.info", "baselines.logger.info", "collections.deque", "collections.deque", "str", "tensorflow.train.Saver", "baselines.single_threaded_session", "baselines.ddpg.ddpg.DDPG.initialize", "sess.graph.finalize", "baselines.ddpg.ddpg.DDPG.reset", "env.reset", "time.time", "time.time", "range", "baselines.ddpg.ddpg.DDPG.__dict__.items", "eval_env.reset", "range", "mpi4py.MPI.COMM_WORLD.Get_size", "baselines.ddpg.ddpg.DDPG.get_stats", "agent.get_stats.copy", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "mpi4py.MPI.COMM_WORLD.allreduce", "sorted", "baselines.logger.dump_tabular", "baselines.logger.info", "baselines.logger.get_dir", "numpy.abs", "range", "range", "time.time", "float", "float", "numpy.mean", "len", "isinstance", "numpy.array", "stats.copy.keys", "baselines.logger.record_tabular", "hasattr", "baselines.ddpg.ddpg.DDPG.pi", "env.step", "epoch_actions.append", "epoch_qs.append", "baselines.ddpg.ddpg.DDPG.store_transition", "baselines.ddpg.ddpg.DDPG.train", "epoch_critic_losses.append", "epoch_actor_losses.append", "baselines.ddpg.ddpg.DDPG.update_target_net", "range", "numpy.isscalar", "zip", "hasattr", "env.render", "env.render", "epoch_episode_rewards.append", "collections.deque.append", "epoch_episode_steps.append", "baselines.ddpg.ddpg.DDPG.reset", "env.reset", "baselines.ddpg.ddpg.DDPG.adapt_param_noise", "epoch_adaptive_distances.append", "baselines.ddpg.ddpg.DDPG.pi", "eval_env.step", "eval_qs.append", "ValueError", "training.train.as_scalar"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.get_stats", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.pi", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.store_transition", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.update_target_net", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.adapt_param_noise", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.ddpg.DDPG.pi", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["def", "train", "(", "env", ",", "nb_epochs", ",", "nb_epoch_cycles", ",", "render_eval", ",", "reward_scale", ",", "render", ",", "param_noise", ",", "actor", ",", "critic", ",", "\n", "normalize_returns", ",", "normalize_observations", ",", "critic_l2_reg", ",", "actor_lr", ",", "critic_lr", ",", "action_noise", ",", "\n", "popart", ",", "gamma", ",", "clip_norm", ",", "nb_train_steps", ",", "nb_rollout_steps", ",", "nb_eval_steps", ",", "batch_size", ",", "memory", ",", "\n", "tau", "=", "0.01", ",", "eval_env", "=", "None", ",", "param_noise_adaption_interval", "=", "50", ")", ":", "\n", "    ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "assert", "(", "np", ".", "abs", "(", "env", ".", "action_space", ".", "low", ")", "==", "env", ".", "action_space", ".", "high", ")", ".", "all", "(", ")", "# we assume symmetric actions.", "\n", "max_action", "=", "env", ".", "action_space", ".", "high", "\n", "logger", ".", "info", "(", "'scaling actions by {} before executing in env'", ".", "format", "(", "max_action", ")", ")", "\n", "agent", "=", "DDPG", "(", "actor", ",", "critic", ",", "memory", ",", "env", ".", "observation_space", ".", "shape", ",", "env", ".", "action_space", ".", "shape", ",", "\n", "gamma", "=", "gamma", ",", "tau", "=", "tau", ",", "normalize_returns", "=", "normalize_returns", ",", "normalize_observations", "=", "normalize_observations", ",", "\n", "batch_size", "=", "batch_size", ",", "action_noise", "=", "action_noise", ",", "param_noise", "=", "param_noise", ",", "critic_l2_reg", "=", "critic_l2_reg", ",", "\n", "actor_lr", "=", "actor_lr", ",", "critic_lr", "=", "critic_lr", ",", "enable_popart", "=", "popart", ",", "clip_norm", "=", "clip_norm", ",", "\n", "reward_scale", "=", "reward_scale", ")", "\n", "logger", ".", "info", "(", "'Using agent with the following configuration:'", ")", "\n", "logger", ".", "info", "(", "str", "(", "agent", ".", "__dict__", ".", "items", "(", ")", ")", ")", "\n", "\n", "# Set up logging stuff only for a single worker.", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "", "else", ":", "\n", "        ", "saver", "=", "None", "\n", "\n", "", "step", "=", "0", "\n", "episode", "=", "0", "\n", "eval_episode_rewards_history", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "episode_rewards_history", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "with", "U", ".", "single_threaded_session", "(", ")", "as", "sess", ":", "\n", "# Prepare everything.", "\n", "        ", "agent", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "agent", ".", "reset", "(", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "            ", "eval_obs", "=", "eval_env", ".", "reset", "(", ")", "\n", "", "done", "=", "False", "\n", "episode_reward", "=", "0.", "\n", "episode_step", "=", "0", "\n", "episodes", "=", "0", "\n", "t", "=", "0", "\n", "\n", "epoch", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_episode_rewards", "=", "[", "]", "\n", "epoch_episode_steps", "=", "[", "]", "\n", "epoch_episode_eval_rewards", "=", "[", "]", "\n", "epoch_episode_eval_steps", "=", "[", "]", "\n", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_actions", "=", "[", "]", "\n", "epoch_qs", "=", "[", "]", "\n", "epoch_episodes", "=", "0", "\n", "for", "epoch", "in", "range", "(", "nb_epochs", ")", ":", "\n", "            ", "for", "cycle", "in", "range", "(", "nb_epoch_cycles", ")", ":", "\n", "# Perform rollouts.", "\n", "                ", "for", "t_rollout", "in", "range", "(", "nb_rollout_steps", ")", ":", "\n", "# Predict next action.", "\n", "                    ", "action", ",", "q", "=", "agent", ".", "pi", "(", "obs", ",", "apply_noise", "=", "True", ",", "compute_Q", "=", "True", ")", "\n", "assert", "action", ".", "shape", "==", "env", ".", "action_space", ".", "shape", "\n", "\n", "# Execute next action.", "\n", "if", "rank", "==", "0", "and", "render", ":", "\n", "                        ", "env", ".", "render", "(", ")", "\n", "", "assert", "max_action", ".", "shape", "==", "action", ".", "shape", "\n", "new_obs", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "max_action", "*", "action", ")", "# scale for execution in env (as far as DDPG is concerned, every action is in [-1, 1])", "\n", "t", "+=", "1", "\n", "if", "rank", "==", "0", "and", "render", ":", "\n", "                        ", "env", ".", "render", "(", ")", "\n", "", "episode_reward", "+=", "r", "\n", "episode_step", "+=", "1", "\n", "\n", "# Book-keeping.", "\n", "epoch_actions", ".", "append", "(", "action", ")", "\n", "epoch_qs", ".", "append", "(", "q", ")", "\n", "agent", ".", "store_transition", "(", "obs", ",", "action", ",", "r", ",", "new_obs", ",", "done", ")", "\n", "obs", "=", "new_obs", "\n", "\n", "if", "done", ":", "\n", "# Episode done.", "\n", "                        ", "epoch_episode_rewards", ".", "append", "(", "episode_reward", ")", "\n", "episode_rewards_history", ".", "append", "(", "episode_reward", ")", "\n", "epoch_episode_steps", ".", "append", "(", "episode_step", ")", "\n", "episode_reward", "=", "0.", "\n", "episode_step", "=", "0", "\n", "epoch_episodes", "+=", "1", "\n", "episodes", "+=", "1", "\n", "\n", "agent", ".", "reset", "(", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "# Train.", "\n", "", "", "epoch_actor_losses", "=", "[", "]", "\n", "epoch_critic_losses", "=", "[", "]", "\n", "epoch_adaptive_distances", "=", "[", "]", "\n", "for", "t_train", "in", "range", "(", "nb_train_steps", ")", ":", "\n", "# Adapt param noise, if necessary.", "\n", "                    ", "if", "memory", ".", "nb_entries", ">=", "batch_size", "and", "t_train", "%", "param_noise_adaption_interval", "==", "0", ":", "\n", "                        ", "distance", "=", "agent", ".", "adapt_param_noise", "(", ")", "\n", "epoch_adaptive_distances", ".", "append", "(", "distance", ")", "\n", "\n", "", "cl", ",", "al", "=", "agent", ".", "train", "(", ")", "\n", "epoch_critic_losses", ".", "append", "(", "cl", ")", "\n", "epoch_actor_losses", ".", "append", "(", "al", ")", "\n", "agent", ".", "update_target_net", "(", ")", "\n", "\n", "# Evaluate.", "\n", "", "eval_episode_rewards", "=", "[", "]", "\n", "eval_qs", "=", "[", "]", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "                    ", "eval_episode_reward", "=", "0.", "\n", "for", "t_rollout", "in", "range", "(", "nb_eval_steps", ")", ":", "\n", "                        ", "eval_action", ",", "eval_q", "=", "agent", ".", "pi", "(", "eval_obs", ",", "apply_noise", "=", "False", ",", "compute_Q", "=", "True", ")", "\n", "eval_obs", ",", "eval_r", ",", "eval_done", ",", "eval_info", "=", "eval_env", ".", "step", "(", "max_action", "*", "eval_action", ")", "# scale for execution in env (as far as DDPG is concerned, every action is in [-1, 1])", "\n", "if", "render_eval", ":", "\n", "                            ", "eval_env", ".", "render", "(", ")", "\n", "", "eval_episode_reward", "+=", "eval_r", "\n", "\n", "eval_qs", ".", "append", "(", "eval_q", ")", "\n", "if", "eval_done", ":", "\n", "                            ", "eval_obs", "=", "eval_env", ".", "reset", "(", ")", "\n", "eval_episode_rewards", ".", "append", "(", "eval_episode_reward", ")", "\n", "eval_episode_rewards_history", ".", "append", "(", "eval_episode_reward", ")", "\n", "eval_episode_reward", "=", "0.", "\n", "\n", "", "", "", "", "mpi_size", "=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "# Log stats.", "\n", "# XXX shouldn't call np.mean on variable length lists", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "stats", "=", "agent", ".", "get_stats", "(", ")", "\n", "combined_stats", "=", "stats", ".", "copy", "(", ")", "\n", "combined_stats", "[", "'rollout/return'", "]", "=", "np", ".", "mean", "(", "epoch_episode_rewards", ")", "\n", "combined_stats", "[", "'rollout/return_history'", "]", "=", "np", ".", "mean", "(", "episode_rewards_history", ")", "\n", "combined_stats", "[", "'rollout/episode_steps'", "]", "=", "np", ".", "mean", "(", "epoch_episode_steps", ")", "\n", "combined_stats", "[", "'rollout/actions_mean'", "]", "=", "np", ".", "mean", "(", "epoch_actions", ")", "\n", "combined_stats", "[", "'rollout/Q_mean'", "]", "=", "np", ".", "mean", "(", "epoch_qs", ")", "\n", "combined_stats", "[", "'train/loss_actor'", "]", "=", "np", ".", "mean", "(", "epoch_actor_losses", ")", "\n", "combined_stats", "[", "'train/loss_critic'", "]", "=", "np", ".", "mean", "(", "epoch_critic_losses", ")", "\n", "combined_stats", "[", "'train/param_noise_distance'", "]", "=", "np", ".", "mean", "(", "epoch_adaptive_distances", ")", "\n", "combined_stats", "[", "'total/duration'", "]", "=", "duration", "\n", "combined_stats", "[", "'total/steps_per_second'", "]", "=", "float", "(", "t", ")", "/", "float", "(", "duration", ")", "\n", "combined_stats", "[", "'total/episodes'", "]", "=", "episodes", "\n", "combined_stats", "[", "'rollout/episodes'", "]", "=", "epoch_episodes", "\n", "combined_stats", "[", "'rollout/actions_std'", "]", "=", "np", ".", "std", "(", "epoch_actions", ")", "\n", "# Evaluation statistics.", "\n", "if", "eval_env", "is", "not", "None", ":", "\n", "                ", "combined_stats", "[", "'eval/return'", "]", "=", "eval_episode_rewards", "\n", "combined_stats", "[", "'eval/return_history'", "]", "=", "np", ".", "mean", "(", "eval_episode_rewards_history", ")", "\n", "combined_stats", "[", "'eval/Q'", "]", "=", "eval_qs", "\n", "combined_stats", "[", "'eval/episodes'", "]", "=", "len", "(", "eval_episode_rewards", ")", "\n", "", "def", "as_scalar", "(", "x", ")", ":", "\n", "                ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "assert", "x", ".", "size", "==", "1", "\n", "return", "x", "[", "0", "]", "\n", "", "elif", "np", ".", "isscalar", "(", "x", ")", ":", "\n", "                    ", "return", "x", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'expected scalar, got %s'", "%", "x", ")", "\n", "", "", "combined_stats_sums", "=", "MPI", ".", "COMM_WORLD", ".", "allreduce", "(", "np", ".", "array", "(", "[", "as_scalar", "(", "x", ")", "for", "x", "in", "combined_stats", ".", "values", "(", ")", "]", ")", ")", "\n", "combined_stats", "=", "{", "k", ":", "v", "/", "mpi_size", "for", "(", "k", ",", "v", ")", "in", "zip", "(", "combined_stats", ".", "keys", "(", ")", ",", "combined_stats_sums", ")", "}", "\n", "\n", "# Total statistics.", "\n", "combined_stats", "[", "'total/epochs'", "]", "=", "epoch", "+", "1", "\n", "combined_stats", "[", "'total/steps'", "]", "=", "t", "\n", "\n", "for", "key", "in", "sorted", "(", "combined_stats", ".", "keys", "(", ")", ")", ":", "\n", "                ", "logger", ".", "record_tabular", "(", "key", ",", "combined_stats", "[", "key", "]", ")", "\n", "", "logger", ".", "dump_tabular", "(", ")", "\n", "logger", ".", "info", "(", "''", ")", "\n", "logdir", "=", "logger", ".", "get_dir", "(", ")", "\n", "if", "rank", "==", "0", "and", "logdir", ":", "\n", "                ", "if", "hasattr", "(", "env", ",", "'get_state'", ")", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "'env_state.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "env", ".", "get_state", "(", ")", ",", "f", ")", "\n", "", "", "if", "eval_env", "and", "hasattr", "(", "eval_env", ",", "'get_state'", ")", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "'eval_env_state.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "eval_env", ".", "get_state", "(", ")", ",", "f", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.__init__": [[5, 10], ["numpy.zeros().astype", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxlen", ",", "shape", ",", "dtype", "=", "'float32'", ")", ":", "\n", "        ", "self", ".", "maxlen", "=", "maxlen", "\n", "self", ".", "start", "=", "0", "\n", "self", ".", "length", "=", "0", "\n", "self", ".", "data", "=", "np", ".", "zeros", "(", "(", "maxlen", ",", ")", "+", "shape", ")", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.__len__": [[11, 13], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.__getitem__": [[14, 18], ["KeyError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "0", "or", "idx", ">=", "self", ".", "length", ":", "\n", "            ", "raise", "KeyError", "(", ")", "\n", "", "return", "self", ".", "data", "[", "(", "self", ".", "start", "+", "idx", ")", "%", "self", ".", "maxlen", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.get_batch": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "idxs", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "(", "self", ".", "start", "+", "idxs", ")", "%", "self", ".", "maxlen", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.append": [[22, 33], ["RuntimeError"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "self", ".", "length", "<", "self", ".", "maxlen", ":", "\n", "# We have space, simply increase the length.", "\n", "            ", "self", ".", "length", "+=", "1", "\n", "", "elif", "self", ".", "length", "==", "self", ".", "maxlen", ":", "\n", "# No space, \"remove\" the first item.", "\n", "            ", "self", ".", "start", "=", "(", "self", ".", "start", "+", "1", ")", "%", "self", ".", "maxlen", "\n", "", "else", ":", "\n", "# This should never happen.", "\n", "            ", "raise", "RuntimeError", "(", ")", "\n", "", "self", ".", "data", "[", "(", "self", ".", "start", "+", "self", ".", "length", "-", "1", ")", "%", "self", ".", "maxlen", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.__init__": [[43, 51], ["memory.RingBuffer", "memory.RingBuffer", "memory.RingBuffer", "memory.RingBuffer", "memory.RingBuffer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "limit", ",", "action_shape", ",", "observation_shape", ")", ":", "\n", "        ", "self", ".", "limit", "=", "limit", "\n", "\n", "self", ".", "observations0", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "observation_shape", ")", "\n", "self", ".", "actions", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "action_shape", ")", "\n", "self", ".", "rewards", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "terminals1", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "observations1", "=", "RingBuffer", "(", "limit", ",", "shape", "=", "observation_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.sample": [[52, 70], ["numpy.random.random_integers", "memory.Memory.observations0.get_batch", "memory.Memory.observations1.get_batch", "memory.Memory.actions.get_batch", "memory.Memory.rewards.get_batch", "memory.Memory.terminals1.get_batch", "memory.array_min2d", "memory.array_min2d", "memory.array_min2d", "memory.array_min2d", "memory.array_min2d"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.RingBuffer.get_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.array_min2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.array_min2d"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "# Draw such that we always have a proceeding element.", "\n", "        ", "batch_idxs", "=", "np", ".", "random", ".", "random_integers", "(", "self", ".", "nb_entries", "-", "2", ",", "size", "=", "batch_size", ")", "\n", "\n", "obs0_batch", "=", "self", ".", "observations0", ".", "get_batch", "(", "batch_idxs", ")", "\n", "obs1_batch", "=", "self", ".", "observations1", ".", "get_batch", "(", "batch_idxs", ")", "\n", "action_batch", "=", "self", ".", "actions", ".", "get_batch", "(", "batch_idxs", ")", "\n", "reward_batch", "=", "self", ".", "rewards", ".", "get_batch", "(", "batch_idxs", ")", "\n", "terminal1_batch", "=", "self", ".", "terminals1", ".", "get_batch", "(", "batch_idxs", ")", "\n", "\n", "result", "=", "{", "\n", "'obs0'", ":", "array_min2d", "(", "obs0_batch", ")", ",", "\n", "'obs1'", ":", "array_min2d", "(", "obs1_batch", ")", ",", "\n", "'rewards'", ":", "array_min2d", "(", "reward_batch", ")", ",", "\n", "'actions'", ":", "array_min2d", "(", "action_batch", ")", ",", "\n", "'terminals1'", ":", "array_min2d", "(", "terminal1_batch", ")", ",", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append": [[71, 80], ["memory.Memory.observations0.append", "memory.Memory.actions.append", "memory.Memory.rewards.append", "memory.Memory.observations1.append", "memory.Memory.terminals1.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "append", "(", "self", ",", "obs0", ",", "action", ",", "reward", ",", "obs1", ",", "terminal1", ",", "training", "=", "True", ")", ":", "\n", "        ", "if", "not", "training", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "observations0", ".", "append", "(", "obs0", ")", "\n", "self", ".", "actions", ".", "append", "(", "action", ")", "\n", "self", ".", "rewards", ".", "append", "(", "reward", ")", "\n", "self", ".", "observations1", ".", "append", "(", "obs1", ")", "\n", "self", ".", "terminals1", ".", "append", "(", "terminal1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.nb_entries": [[81, 84], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nb_entries", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "observations0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.array_min2d": [[35, 40], ["numpy.array", "np.array.reshape"], "function", ["None"], ["", "", "def", "array_min2d", "(", "x", ")", ":", "\n", "    ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "if", "x", ".", "ndim", ">=", "2", ":", "\n", "        ", "return", "x", "\n", "", "return", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.test_identity.test_identity": [[8, 40], ["tensorflow.Graph().as_default", "baselines.common.identity_env.IdentityEnv", "random.seed", "tensorflow.set_random_seed", "baselines.deepq.models.mlp", "baselines.deepq.learn", "tensorflow.set_random_seed", "baselines.common.identity_env.IdentityEnv.reset", "range", "baselines.common.identity_env.IdentityEnv.step", "tensorflow.Graph", "deepq.learn."], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models.mlp", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["def", "test_identity", "(", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "env", "=", "IdentityEnv", "(", "10", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "param_noise", "=", "False", "\n", "model", "=", "deepq", ".", "models", ".", "mlp", "(", "[", "32", "]", ")", "\n", "act", "=", "deepq", ".", "learn", "(", "\n", "env", ",", "\n", "q_func", "=", "model", ",", "\n", "lr", "=", "1e-3", ",", "\n", "max_timesteps", "=", "10000", ",", "\n", "buffer_size", "=", "50000", ",", "\n", "exploration_fraction", "=", "0.1", ",", "\n", "exploration_final_eps", "=", "0.02", ",", "\n", "print_freq", "=", "10", ",", "\n", "param_noise", "=", "param_noise", ",", "\n", ")", "\n", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "N_TRIALS", "=", "1000", "\n", "sum_rew", "=", "0", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "for", "i", "in", "range", "(", "N_TRIALS", ")", ":", "\n", "            ", "obs", ",", "rew", ",", "done", ",", "_", "=", "env", ".", "step", "(", "act", "(", "[", "obs", "]", ")", ")", "\n", "sum_rew", "+=", "rew", "\n", "\n", "", "assert", "sum_rew", ">", "0.9", "*", "N_TRIALS", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models._mlp": [[5, 15], ["tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.relu", "tensorflow.layer_norm"], "function", ["None"], ["class", "Model", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n", "", "@", "property", "\n", "def", "vars", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "\n", "", "@", "property", "\n", "def", "trainable_vars", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models.mlp": [[17, 31], ["models._mlp"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models._mlp"], ["", "@", "property", "\n", "def", "perturbable_vars", "(", "self", ")", ":", "\n", "        ", "return", "[", "var", "for", "var", "in", "self", ".", "trainable_vars", "if", "'LayerNorm'", "not", "in", "var", ".", "name", "]", "\n", "\n", "\n", "", "", "class", "Actor", "(", "Model", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "nb_actions", ",", "name", "=", "'actor'", ",", "layer_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Actor", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "nb_actions", "=", "nb_actions", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "\n", "", "def", "__call__", "(", "self", ",", "obs", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models._cnn_to_mlp": [[33, 68], ["tensorflow.variable_scope", "tensorflow.flatten", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.reduce_mean", "tensorflow.convolution2d", "tensorflow.fully_connected", "tensorflow.nn.relu", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.expand_dims", "tensorflow.layer_norm", "tensorflow.fully_connected", "tensorflow.nn.relu", "tensorflow.layer_norm"], "function", ["None"], ["", "x", "=", "obs", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "self", ".", "nb_actions", ",", "kernel_initializer", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "3e-3", ",", "maxval", "=", "3e-3", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "tanh", "(", "x", ")", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "Critic", "(", "Model", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", "=", "'critic'", ",", "layer_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "\n", "", "def", "__call__", "(", "self", ",", "obs", ",", "action", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "x", "=", "obs", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "action", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "64", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "x", "=", "tc", ".", "layers", ".", "layer_norm", "(", "x", ",", "center", "=", "True", ",", "scale", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models.cnn_to_mlp": [[70, 91], ["models._cnn_to_mlp"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models._cnn_to_mlp"], ["\n", "x", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "1", ",", "kernel_initializer", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "3e-3", ",", "maxval", "=", "3e-3", ")", ")", "\n", "", "return", "x", "\n", "\n", "", "@", "property", "\n", "def", "output_vars", "(", "self", ")", ":", "\n", "        ", "output_vars", "=", "[", "var", "for", "var", "in", "self", ".", "trainable_vars", "if", "'output'", "in", "var", ".", "name", "]", "\n", "return", "output_vars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.__init__": [[22, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "act", ",", "act_params", ")", ":", "\n", "        ", "self", ".", "_act", "=", "act", "\n", "self", ".", "_act_params", "=", "act_params", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.load": [[26, 42], ["baselines.deepq.build_act", "tensorflow.Session", "tensorflow.Session.__enter__", "simple.ActWrapper", "open", "cloudpickle.load", "tempfile.TemporaryDirectory", "os.path.join", "zipfile.ZipFile().extractall", "baselines.common.tf_util.load_state", "open", "f.write", "os.path.join", "zipfile.ZipFile"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.build_act", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.load_state"], ["", "@", "staticmethod", "\n", "def", "load", "(", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "model_data", ",", "act_params", "=", "cloudpickle", ".", "load", "(", "f", ")", "\n", "", "act", "=", "deepq", ".", "build_act", "(", "**", "act_params", ")", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "td", ":", "\n", "            ", "arc_path", "=", "os", ".", "path", ".", "join", "(", "td", ",", "\"packed.zip\"", ")", "\n", "with", "open", "(", "arc_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "model_data", ")", "\n", "\n", "", "zipfile", ".", "ZipFile", "(", "arc_path", ",", "'r'", ",", "zipfile", ".", "ZIP_DEFLATED", ")", ".", "extractall", "(", "td", ")", "\n", "load_state", "(", "os", ".", "path", ".", "join", "(", "td", ",", "\"model\"", ")", ")", "\n", "\n", "", "return", "ActWrapper", "(", "act", ",", "act_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.__call__": [[43, 45], ["simple.ActWrapper._act"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_act", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save": [[46, 64], ["os.path.join", "tempfile.TemporaryDirectory", "baselines.common.tf_util.save_state", "os.path.join", "open", "cloudpickle.dump", "baselines.logger.get_dir", "os.path.join", "zipfile.ZipFile", "os.walk", "open", "f.read", "os.path.join", "zipf.write", "os.path.relpath"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.save_state", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["", "def", "save", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "\"\"\"Save model to a pickle located at `path`\"\"\"", "\n", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "\"model.pkl\"", ")", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "td", ":", "\n", "            ", "save_state", "(", "os", ".", "path", ".", "join", "(", "td", ",", "\"model\"", ")", ")", "\n", "arc_name", "=", "os", ".", "path", ".", "join", "(", "td", ",", "\"packed.zip\"", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "arc_name", ",", "'w'", ")", "as", "zipf", ":", "\n", "                ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "td", ")", ":", "\n", "                    ", "for", "fname", "in", "files", ":", "\n", "                        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "if", "file_path", "!=", "arc_name", ":", "\n", "                            ", "zipf", ".", "write", "(", "file_path", ",", "os", ".", "path", ".", "relpath", "(", "file_path", ",", "td", ")", ")", "\n", "", "", "", "", "with", "open", "(", "arc_name", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "model_data", "=", "f", ".", "read", "(", ")", "\n", "", "", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "cloudpickle", ".", "dump", "(", "(", "model_data", ",", "self", ".", "_act_params", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load": [[66, 81], ["simple.ActWrapper.load"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load"], ["", "", "", "def", "load", "(", "path", ")", ":", "\n", "    ", "\"\"\"Load act function that was returned by learn function.\n\n    Parameters\n    ----------\n    path: str\n        path to the act function pickle\n\n    Returns\n    -------\n    act: ActWrapper\n        function that takes a batch of observations\n        and returns actions.\n    \"\"\"", "\n", "return", "ActWrapper", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.learn": [[83, 311], ["tensorflow.Session", "tf.Session.__enter__", "baselines.deepq.build_train", "simple.ActWrapper", "baselines.common.schedules.LinearSchedule", "baselines.initialize", "update_target", "env.reset", "baselines.deepq.utils.ObservationInput", "baselines.deepq.replay_buffer.PrioritizedReplayBuffer", "baselines.common.schedules.LinearSchedule", "baselines.deepq.replay_buffer.ReplayBuffer", "tempfile.TemporaryDirectory", "os.path.join", "time.time", "range", "tensorflow.train.AdamOptimizer", "int", "tensorflow.train.latest_checkpoint", "baselines.common.tf_util.load_state", "baselines.logger.log", "env.step", "baselines.deepq.replay_buffer.ReplayBuffer.add", "round", "len", "baselines.common.tf_util.load_state", "callback", "baselines.common.schedules.LinearSchedule.value", "ActWrapper.", "float", "env.reset", "episode_rewards.append", "train", "update_target", "numpy.mean", "time.time", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.dump_tabular", "baselines.logger.log", "locals", "globals", "numpy.log", "baselines.deepq.replay_buffer.ReplayBuffer.sample", "baselines.deepq.replay_buffer.ReplayBuffer.sample", "baselines.deepq.replay_buffer.ReplayBuffer.update_priorities", "int", "baselines.common.tf_util.save_state", "numpy.array", "numpy.ones_like", "numpy.abs", "len", "baselines.logger.log", "baselines.common.schedules.LinearSchedule.value", "baselines.common.schedules.LinearSchedule.value", "baselines.common.schedules.LinearSchedule.value", "baselines.common.schedules.LinearSchedule.value", "float"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.build_train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.load_state", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.add", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.load_state", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_cartpole.callback", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.update_priorities", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.save_state", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value"], ["", "def", "learn", "(", "env", ",", "\n", "q_func", ",", "\n", "lr", "=", "5e-4", ",", "\n", "max_timesteps", "=", "100000", ",", "\n", "buffer_size", "=", "50000", ",", "\n", "exploration_fraction", "=", "0.1", ",", "\n", "exploration_final_eps", "=", "0.02", ",", "\n", "train_freq", "=", "1", ",", "\n", "batch_size", "=", "32", ",", "\n", "print_freq", "=", "100", ",", "\n", "checkpoint_freq", "=", "10000", ",", "\n", "checkpoint_path", "=", "None", ",", "\n", "learning_starts", "=", "1000", ",", "\n", "gamma", "=", "1.0", ",", "\n", "target_network_update_freq", "=", "500", ",", "\n", "prioritized_replay", "=", "False", ",", "\n", "prioritized_replay_alpha", "=", "0.6", ",", "\n", "prioritized_replay_beta0", "=", "0.4", ",", "\n", "prioritized_replay_beta_iters", "=", "None", ",", "\n", "prioritized_replay_eps", "=", "1e-6", ",", "\n", "param_noise", "=", "False", ",", "\n", "callback", "=", "None", ")", ":", "\n", "    ", "\"\"\"Train a deepq model.\n\n    Parameters\n    -------\n    env: gym.Env\n        environment to train on\n    q_func: (tf.Variable, int, str, bool) -> tf.Variable\n        the model that takes the following inputs:\n            observation_in: object\n                the output of observation placeholder\n            num_actions: int\n                number of actions\n            scope: str\n            reuse: bool\n                should be passed to outer variable scope\n        and returns a tensor of shape (batch_size, num_actions) with values of every action.\n    lr: float\n        learning rate for adam optimizer\n    max_timesteps: int\n        number of env steps to optimizer for\n    buffer_size: int\n        size of the replay buffer\n    exploration_fraction: float\n        fraction of entire training period over which the exploration rate is annealed\n    exploration_final_eps: float\n        final value of random action probability\n    train_freq: int\n        update the model every `train_freq` steps.\n        set to None to disable printing\n    batch_size: int\n        size of a batched sampled from replay buffer for training\n    print_freq: int\n        how often to print out training progress\n        set to None to disable printing\n    checkpoint_freq: int\n        how often to save the model. This is so that the best version is restored\n        at the end of the training. If you do not wish to restore the best version at\n        the end of the training set this variable to None.\n    learning_starts: int\n        how many steps of the model to collect transitions for before learning starts\n    gamma: float\n        discount factor\n    target_network_update_freq: int\n        update the target network every `target_network_update_freq` steps.\n    prioritized_replay: True\n        if True prioritized replay buffer will be used.\n    prioritized_replay_alpha: float\n        alpha parameter for prioritized replay buffer\n    prioritized_replay_beta0: float\n        initial value of beta for prioritized replay buffer\n    prioritized_replay_beta_iters: int\n        number of iterations over which beta will be annealed from initial value\n        to 1.0. If set to None equals to max_timesteps.\n    prioritized_replay_eps: float\n        epsilon to add to the TD errors when updating priorities.\n    callback: (locals, globals) -> None\n        function called at every steps with state of the algorithm.\n        If callback returns true training stops.\n\n    Returns\n    -------\n    act: ActWrapper\n        Wrapper over act function. Adds ability to save it and load it.\n        See header of baselines/deepq/categorical.py for details on the act function.\n    \"\"\"", "\n", "# Create all the functions necessary to train the model", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "# capture the shape outside the closure so that the env object is not serialized", "\n", "# by cloudpickle when serializing make_obs_ph", "\n", "\n", "def", "make_obs_ph", "(", "name", ")", ":", "\n", "        ", "return", "ObservationInput", "(", "env", ".", "observation_space", ",", "name", "=", "name", ")", "\n", "\n", "", "act", ",", "train", ",", "update_target", ",", "debug", "=", "deepq", ".", "build_train", "(", "\n", "make_obs_ph", "=", "make_obs_ph", ",", "\n", "q_func", "=", "q_func", ",", "\n", "num_actions", "=", "env", ".", "action_space", ".", "n", ",", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", ",", "\n", "gamma", "=", "gamma", ",", "\n", "grad_norm_clipping", "=", "10", ",", "\n", "param_noise", "=", "param_noise", "\n", ")", "\n", "\n", "act_params", "=", "{", "\n", "'make_obs_ph'", ":", "make_obs_ph", ",", "\n", "'q_func'", ":", "q_func", ",", "\n", "'num_actions'", ":", "env", ".", "action_space", ".", "n", ",", "\n", "}", "\n", "\n", "act", "=", "ActWrapper", "(", "act", ",", "act_params", ")", "\n", "\n", "# Create the replay buffer", "\n", "if", "prioritized_replay", ":", "\n", "        ", "replay_buffer", "=", "PrioritizedReplayBuffer", "(", "buffer_size", ",", "alpha", "=", "prioritized_replay_alpha", ")", "\n", "if", "prioritized_replay_beta_iters", "is", "None", ":", "\n", "            ", "prioritized_replay_beta_iters", "=", "max_timesteps", "\n", "", "beta_schedule", "=", "LinearSchedule", "(", "prioritized_replay_beta_iters", ",", "\n", "initial_p", "=", "prioritized_replay_beta0", ",", "\n", "final_p", "=", "1.0", ")", "\n", "", "else", ":", "\n", "        ", "replay_buffer", "=", "ReplayBuffer", "(", "buffer_size", ")", "\n", "beta_schedule", "=", "None", "\n", "# Create the schedule for exploration starting from 1.", "\n", "", "exploration", "=", "LinearSchedule", "(", "schedule_timesteps", "=", "int", "(", "exploration_fraction", "*", "max_timesteps", ")", ",", "\n", "initial_p", "=", "1.0", ",", "\n", "final_p", "=", "exploration_final_eps", ")", "\n", "\n", "# Initialize the parameters and copy them to the target network.", "\n", "U", ".", "initialize", "(", ")", "\n", "update_target", "(", ")", "\n", "\n", "episode_rewards", "=", "[", "0.0", "]", "\n", "saved_mean_reward", "=", "None", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "reset", "=", "True", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "td", ":", "\n", "        ", "td", "=", "checkpoint_path", "or", "td", "\n", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "td", ",", "\"model\"", ")", "\n", "model_saved", "=", "False", "\n", "if", "tf", ".", "train", ".", "latest_checkpoint", "(", "td", ")", "is", "not", "None", ":", "\n", "            ", "load_state", "(", "model_file", ")", "\n", "logger", ".", "log", "(", "'Loaded model from {}'", ".", "format", "(", "model_file", ")", ")", "\n", "model_saved", "=", "True", "\n", "", "tfirststart", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "max_timesteps", ")", ":", "\n", "            ", "if", "callback", "is", "not", "None", ":", "\n", "                ", "if", "callback", "(", "locals", "(", ")", ",", "globals", "(", ")", ")", ":", "\n", "                    ", "break", "\n", "# Take action and update exploration to the newest value", "\n", "", "", "kwargs", "=", "{", "}", "\n", "if", "not", "param_noise", ":", "\n", "                ", "update_eps", "=", "exploration", ".", "value", "(", "t", ")", "\n", "update_param_noise_threshold", "=", "0.", "\n", "", "else", ":", "\n", "                ", "update_eps", "=", "0.", "\n", "# Compute the threshold such that the KL divergence between perturbed and non-perturbed", "\n", "# policy is comparable to eps-greedy exploration with eps = exploration.value(t).", "\n", "# See Appendix C.1 in Parameter Space Noise for Exploration, Plappert et al., 2017", "\n", "# for detailed explanation.", "\n", "update_param_noise_threshold", "=", "-", "np", ".", "log", "(", "1.", "-", "exploration", ".", "value", "(", "t", ")", "+", "exploration", ".", "value", "(", "t", ")", "/", "float", "(", "env", ".", "action_space", ".", "n", ")", ")", "\n", "kwargs", "[", "'reset'", "]", "=", "reset", "\n", "kwargs", "[", "'update_param_noise_threshold'", "]", "=", "update_param_noise_threshold", "\n", "kwargs", "[", "'update_param_noise_scale'", "]", "=", "True", "\n", "", "action", "=", "act", "(", "np", ".", "array", "(", "obs", ")", "[", "None", "]", ",", "update_eps", "=", "update_eps", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "env_action", "=", "action", "\n", "reset", "=", "False", "\n", "new_obs", ",", "rew", ",", "done", ",", "_", "=", "env", ".", "step", "(", "env_action", ")", "\n", "# Store transition in the replay buffer.", "\n", "replay_buffer", ".", "add", "(", "obs", ",", "action", ",", "rew", ",", "new_obs", ",", "float", "(", "done", ")", ")", "\n", "obs", "=", "new_obs", "\n", "\n", "episode_rewards", "[", "-", "1", "]", "+=", "rew", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "episode_rewards", ".", "append", "(", "0.0", ")", "\n", "reset", "=", "True", "\n", "\n", "", "if", "t", ">", "learning_starts", "and", "t", "%", "train_freq", "==", "0", ":", "\n", "# Minimize the error in Bellman's equation on a batch sampled from replay buffer.", "\n", "                ", "if", "prioritized_replay", ":", "\n", "                    ", "experience", "=", "replay_buffer", ".", "sample", "(", "batch_size", ",", "beta", "=", "beta_schedule", ".", "value", "(", "t", ")", ")", "\n", "(", "obses_t", ",", "actions", ",", "rewards", ",", "obses_tp1", ",", "dones", ",", "weights", ",", "batch_idxes", ")", "=", "experience", "\n", "", "else", ":", "\n", "                    ", "obses_t", ",", "actions", ",", "rewards", ",", "obses_tp1", ",", "dones", "=", "replay_buffer", ".", "sample", "(", "batch_size", ")", "\n", "weights", ",", "batch_idxes", "=", "np", ".", "ones_like", "(", "rewards", ")", ",", "None", "\n", "", "td_errors", "=", "train", "(", "obses_t", ",", "actions", ",", "rewards", ",", "obses_tp1", ",", "dones", ",", "weights", ")", "\n", "if", "prioritized_replay", ":", "\n", "                    ", "new_priorities", "=", "np", ".", "abs", "(", "td_errors", ")", "+", "prioritized_replay_eps", "\n", "replay_buffer", ".", "update_priorities", "(", "batch_idxes", ",", "new_priorities", ")", "\n", "\n", "", "", "if", "t", ">", "learning_starts", "and", "t", "%", "target_network_update_freq", "==", "0", ":", "\n", "# Update target network periodically.", "\n", "                ", "update_target", "(", ")", "\n", "\n", "", "mean_100ep_reward", "=", "round", "(", "np", ".", "mean", "(", "episode_rewards", "[", "-", "101", ":", "-", "1", "]", ")", ",", "1", ")", "\n", "num_episodes", "=", "len", "(", "episode_rewards", ")", "\n", "if", "done", "and", "print_freq", "is", "not", "None", "and", "len", "(", "episode_rewards", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "tnow", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "record_tabular", "(", "\"steps\"", ",", "t", ")", "\n", "logger", ".", "record_tabular", "(", "\"episodes\"", ",", "num_episodes", ")", "\n", "logger", ".", "record_tabular", "(", "\"mean 100 episode reward\"", ",", "mean_100ep_reward", ")", "\n", "logger", ".", "record_tabular", "(", "\"% time spent exploring\"", ",", "int", "(", "100", "*", "exploration", ".", "value", "(", "t", ")", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'time_elapsed'", ",", "tnow", "-", "tfirststart", ")", "\n", "logger", ".", "dump_tabular", "(", ")", "\n", "\n", "", "if", "(", "checkpoint_freq", "is", "not", "None", "and", "t", ">", "learning_starts", "and", "\n", "num_episodes", ">", "100", "and", "t", "%", "checkpoint_freq", "==", "0", ")", ":", "\n", "                ", "if", "saved_mean_reward", "is", "None", "or", "mean_100ep_reward", ">", "saved_mean_reward", ":", "\n", "                    ", "if", "print_freq", "is", "not", "None", ":", "\n", "                        ", "logger", ".", "log", "(", "\"Saving model due to mean reward increase: {} -> {}\"", ".", "format", "(", "\n", "saved_mean_reward", ",", "mean_100ep_reward", ")", ")", "\n", "", "save_state", "(", "model_file", ")", "\n", "model_saved", "=", "True", "\n", "saved_mean_reward", "=", "mean_100ep_reward", "\n", "", "", "", "if", "model_saved", ":", "\n", "            ", "if", "print_freq", "is", "not", "None", ":", "\n", "                ", "logger", ".", "log", "(", "\"Restored model with mean reward: {}\"", ".", "format", "(", "saved_mean_reward", ")", ")", "\n", "", "load_state", "(", "model_file", ")", "\n", "\n", "", "", "return", "act", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.scope_vars": [[100, 118], ["tensorflow.get_collection", "isinstance"], "function", ["None"], ["def", "scope_vars", "(", "scope", ",", "trainable_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Get variables inside a scope\n    The scope can be specified as a string\n    Parameters\n    ----------\n    scope: str or VariableScope\n        scope in which the variables reside.\n    trainable_only: bool\n        whether or not to return only the variables that were marked as trainable.\n    Returns\n    -------\n    vars: [tf.Variable]\n        list of variables in `scope`.\n    \"\"\"", "\n", "return", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", "if", "trainable_only", "else", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\n", "scope", "=", "scope", "if", "isinstance", "(", "scope", ",", "str", ")", "else", "scope", ".", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.scope_name": [[121, 124], ["tensorflow.get_variable_scope"], "function", ["None"], ["", "def", "scope_name", "(", ")", ":", "\n", "    ", "\"\"\"Returns the name of current scope as a string, e.g. deepq/q_func\"\"\"", "\n", "return", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.absolute_scope_name": [[126, 129], ["build_graph.scope_name"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.scope_name"], ["", "def", "absolute_scope_name", "(", "relative_scope_name", ")", ":", "\n", "    ", "\"\"\"Appends parent scope name to `relative_scope_name`\"\"\"", "\n", "return", "scope_name", "(", ")", "+", "\"/\"", "+", "relative_scope_name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.default_param_noise_filter": [[131, 144], ["tensorflow.trainable_variables"], "function", ["None"], ["", "def", "default_param_noise_filter", "(", "var", ")", ":", "\n", "    ", "if", "var", "not", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "# We never perturb non-trainable vars.", "\n", "        ", "return", "False", "\n", "", "if", "\"fully_connected\"", "in", "var", ".", "name", ":", "\n", "# We perturb fully-connected layers.", "\n", "        ", "return", "True", "\n", "\n", "# The remaining layers are likely conv or layer norm layers, which we do not wish to", "\n", "# perturb (in the former case because they only extract features, in the latter case because", "\n", "# we use them for normalization purposes). If you change your network, you will likely want", "\n", "# to re-consider which layers to perturb and which to keep untouched.", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.build_act": [[146, 200], ["tensorflow.variable_scope", "make_obs_ph", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "q_func", "tensorflow.argmax", "tensorflow.random_uniform", "tensorflow.where", "tensorflow.cond", "tf.get_variable.assign", "baselines.function", "make_obs_ph.get", "tensorflow.shape", "tensorflow.stack", "tensorflow.random_uniform", "tensorflow.cond", "U.function.", "tensorflow.constant_initializer", "make_obs_ph.get", "tensorflow.stack"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get"], ["", "def", "build_act", "(", "make_obs_ph", ",", "q_func", ",", "num_actions", ",", "scope", "=", "\"deepq\"", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates the act function:\n\n    Parameters\n    ----------\n    make_obs_ph: str -> tf.placeholder or TfInput\n        a function that take a name and creates a placeholder of input with that name\n    q_func: (tf.Variable, int, str, bool) -> tf.Variable\n        the model that takes the following inputs:\n            observation_in: object\n                the output of observation placeholder\n            num_actions: int\n                number of actions\n            scope: str\n            reuse: bool\n                should be passed to outer variable scope\n        and returns a tensor of shape (batch_size, num_actions) with values of every action.\n    num_actions: int\n        number of actions.\n    scope: str or VariableScope\n        optional scope for variable_scope.\n    reuse: bool or None\n        whether or not the variables should be reused. To be able to reuse the scope must be given.\n\n    Returns\n    -------\n    act: (tf.Variable, bool, float) -> tf.Variable\n        function to select and action given observation.\n`       See the top of the file for details.\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "observations_ph", "=", "make_obs_ph", "(", "\"observation\"", ")", "\n", "stochastic_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "(", ")", ",", "name", "=", "\"stochastic\"", ")", "\n", "update_eps_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", ")", ",", "name", "=", "\"update_eps\"", ")", "\n", "\n", "eps", "=", "tf", ".", "get_variable", "(", "\"eps\"", ",", "(", ")", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "q_values", "=", "q_func", "(", "observations_ph", ".", "get", "(", ")", ",", "num_actions", ",", "scope", "=", "\"q_func\"", ")", "\n", "deterministic_actions", "=", "tf", ".", "argmax", "(", "q_values", ",", "axis", "=", "1", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "observations_ph", ".", "get", "(", ")", ")", "[", "0", "]", "\n", "random_actions", "=", "tf", ".", "random_uniform", "(", "tf", ".", "stack", "(", "[", "batch_size", "]", ")", ",", "minval", "=", "0", ",", "maxval", "=", "num_actions", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "chose_random", "=", "tf", ".", "random_uniform", "(", "tf", ".", "stack", "(", "[", "batch_size", "]", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "<", "eps", "\n", "stochastic_actions", "=", "tf", ".", "where", "(", "chose_random", ",", "random_actions", ",", "deterministic_actions", ")", "\n", "\n", "output_actions", "=", "tf", ".", "cond", "(", "stochastic_ph", ",", "lambda", ":", "stochastic_actions", ",", "lambda", ":", "deterministic_actions", ")", "\n", "update_eps_expr", "=", "eps", ".", "assign", "(", "tf", ".", "cond", "(", "update_eps_ph", ">=", "0", ",", "lambda", ":", "update_eps_ph", ",", "lambda", ":", "eps", ")", ")", "\n", "_act", "=", "U", ".", "function", "(", "inputs", "=", "[", "observations_ph", ",", "stochastic_ph", ",", "update_eps_ph", "]", ",", "\n", "outputs", "=", "output_actions", ",", "\n", "givens", "=", "{", "update_eps_ph", ":", "-", "1.0", ",", "stochastic_ph", ":", "True", "}", ",", "\n", "updates", "=", "[", "update_eps_expr", "]", ")", "\n", "def", "act", "(", "ob", ",", "stochastic", "=", "True", ",", "update_eps", "=", "-", "1", ")", ":", "\n", "            ", "return", "_act", "(", "ob", ",", "stochastic", ",", "update_eps", ")", "\n", "", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.build_act_with_param_noise": [[202, 315], ["tensorflow.variable_scope", "make_obs_ph", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "q_func", "q_func", "q_func", "build_graph.build_act_with_param_noise.perturb_vars"], "function", ["None"], ["", "", "def", "build_act_with_param_noise", "(", "make_obs_ph", ",", "q_func", ",", "num_actions", ",", "scope", "=", "\"deepq\"", ",", "reuse", "=", "None", ",", "param_noise_filter_func", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates the act function with support for parameter space noise exploration (https://arxiv.org/abs/1706.01905):\n\n    Parameters\n    ----------\n    make_obs_ph: str -> tf.placeholder or TfInput\n        a function that take a name and creates a placeholder of input with that name\n    q_func: (tf.Variable, int, str, bool) -> tf.Variable\n        the model that takes the following inputs:\n            observation_in: object\n                the output of observation placeholder\n            num_actions: int\n                number of actions\n            scope: str\n            reuse: bool\n                should be passed to outer variable scope\n        and returns a tensor of shape (batch_size, num_actions) with values of every action.\n    num_actions: int\n        number of actions.\n    scope: str or VariableScope\n        optional scope for variable_scope.\n    reuse: bool or None\n        whether or not the variables should be reused. To be able to reuse the scope must be given.\n    param_noise_filter_func: tf.Variable -> bool\n        function that decides whether or not a variable should be perturbed. Only applicable\n        if param_noise is True. If set to None, default_param_noise_filter is used by default.\n\n    Returns\n    -------\n    act: (tf.Variable, bool, float, bool, float, bool) -> tf.Variable\n        function to select and action given observation.\n`       See the top of the file for details.\n    \"\"\"", "\n", "if", "param_noise_filter_func", "is", "None", ":", "\n", "        ", "param_noise_filter_func", "=", "default_param_noise_filter", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "observations_ph", "=", "make_obs_ph", "(", "\"observation\"", ")", "\n", "stochastic_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "(", ")", ",", "name", "=", "\"stochastic\"", ")", "\n", "update_eps_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", ")", ",", "name", "=", "\"update_eps\"", ")", "\n", "update_param_noise_threshold_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", ")", ",", "name", "=", "\"update_param_noise_threshold\"", ")", "\n", "update_param_noise_scale_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "(", ")", ",", "name", "=", "\"update_param_noise_scale\"", ")", "\n", "reset_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "(", ")", ",", "name", "=", "\"reset\"", ")", "\n", "\n", "eps", "=", "tf", ".", "get_variable", "(", "\"eps\"", ",", "(", ")", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "param_noise_scale", "=", "tf", ".", "get_variable", "(", "\"param_noise_scale\"", ",", "(", ")", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", ",", "trainable", "=", "False", ")", "\n", "param_noise_threshold", "=", "tf", ".", "get_variable", "(", "\"param_noise_threshold\"", ",", "(", ")", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.05", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "# Unmodified Q.", "\n", "q_values", "=", "q_func", "(", "observations_ph", ".", "get", "(", ")", ",", "num_actions", ",", "scope", "=", "\"q_func\"", ")", "\n", "\n", "# Perturbable Q used for the actual rollout.", "\n", "q_values_perturbed", "=", "q_func", "(", "observations_ph", ".", "get", "(", ")", ",", "num_actions", ",", "scope", "=", "\"perturbed_q_func\"", ")", "\n", "# We have to wrap this code into a function due to the way tf.cond() works. See", "\n", "# https://stackoverflow.com/questions/37063952/confused-by-the-behavior-of-tf-cond for", "\n", "# a more detailed discussion.", "\n", "def", "perturb_vars", "(", "original_scope", ",", "perturbed_scope", ")", ":", "\n", "            ", "all_vars", "=", "scope_vars", "(", "absolute_scope_name", "(", "original_scope", ")", ")", "\n", "all_perturbed_vars", "=", "scope_vars", "(", "absolute_scope_name", "(", "perturbed_scope", ")", ")", "\n", "assert", "len", "(", "all_vars", ")", "==", "len", "(", "all_perturbed_vars", ")", "\n", "perturb_ops", "=", "[", "]", "\n", "for", "var", ",", "perturbed_var", "in", "zip", "(", "all_vars", ",", "all_perturbed_vars", ")", ":", "\n", "                ", "if", "param_noise_filter_func", "(", "perturbed_var", ")", ":", "\n", "# Perturb this variable.", "\n", "                    ", "op", "=", "tf", ".", "assign", "(", "perturbed_var", ",", "var", "+", "tf", ".", "random_normal", "(", "shape", "=", "tf", ".", "shape", "(", "var", ")", ",", "mean", "=", "0.", ",", "stddev", "=", "param_noise_scale", ")", ")", "\n", "", "else", ":", "\n", "# Do not perturb, just assign.", "\n", "                    ", "op", "=", "tf", ".", "assign", "(", "perturbed_var", ",", "var", ")", "\n", "", "perturb_ops", ".", "append", "(", "op", ")", "\n", "", "assert", "len", "(", "perturb_ops", ")", "==", "len", "(", "all_vars", ")", "\n", "return", "tf", ".", "group", "(", "*", "perturb_ops", ")", "\n", "\n", "# Set up functionality to re-compute `param_noise_scale`. This perturbs yet another copy", "\n", "# of the network and measures the effect of that perturbation in action space. If the perturbation", "\n", "# is too big, reduce scale of perturbation, otherwise increase.", "\n", "", "q_values_adaptive", "=", "q_func", "(", "observations_ph", ".", "get", "(", ")", ",", "num_actions", ",", "scope", "=", "\"adaptive_q_func\"", ")", "\n", "perturb_for_adaption", "=", "perturb_vars", "(", "original_scope", "=", "\"q_func\"", ",", "perturbed_scope", "=", "\"adaptive_q_func\"", ")", "\n", "kl", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax", "(", "q_values", ")", "*", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "softmax", "(", "q_values", ")", ")", "-", "tf", ".", "log", "(", "tf", ".", "nn", ".", "softmax", "(", "q_values_adaptive", ")", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "mean_kl", "=", "tf", ".", "reduce_mean", "(", "kl", ")", "\n", "def", "update_scale", "(", ")", ":", "\n", "            ", "with", "tf", ".", "control_dependencies", "(", "[", "perturb_for_adaption", "]", ")", ":", "\n", "                ", "update_scale_expr", "=", "tf", ".", "cond", "(", "mean_kl", "<", "param_noise_threshold", ",", "\n", "lambda", ":", "param_noise_scale", ".", "assign", "(", "param_noise_scale", "*", "1.01", ")", ",", "\n", "lambda", ":", "param_noise_scale", ".", "assign", "(", "param_noise_scale", "/", "1.01", ")", ",", "\n", ")", "\n", "", "return", "update_scale_expr", "\n", "\n", "# Functionality to update the threshold for parameter space noise.", "\n", "", "update_param_noise_threshold_expr", "=", "param_noise_threshold", ".", "assign", "(", "tf", ".", "cond", "(", "update_param_noise_threshold_ph", ">=", "0", ",", "\n", "lambda", ":", "update_param_noise_threshold_ph", ",", "lambda", ":", "param_noise_threshold", ")", ")", "\n", "\n", "# Put everything together.", "\n", "deterministic_actions", "=", "tf", ".", "argmax", "(", "q_values_perturbed", ",", "axis", "=", "1", ")", "\n", "batch_size", "=", "tf", ".", "shape", "(", "observations_ph", ".", "get", "(", ")", ")", "[", "0", "]", "\n", "random_actions", "=", "tf", ".", "random_uniform", "(", "tf", ".", "stack", "(", "[", "batch_size", "]", ")", ",", "minval", "=", "0", ",", "maxval", "=", "num_actions", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "chose_random", "=", "tf", ".", "random_uniform", "(", "tf", ".", "stack", "(", "[", "batch_size", "]", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "<", "eps", "\n", "stochastic_actions", "=", "tf", ".", "where", "(", "chose_random", ",", "random_actions", ",", "deterministic_actions", ")", "\n", "\n", "output_actions", "=", "tf", ".", "cond", "(", "stochastic_ph", ",", "lambda", ":", "stochastic_actions", ",", "lambda", ":", "deterministic_actions", ")", "\n", "update_eps_expr", "=", "eps", ".", "assign", "(", "tf", ".", "cond", "(", "update_eps_ph", ">=", "0", ",", "lambda", ":", "update_eps_ph", ",", "lambda", ":", "eps", ")", ")", "\n", "updates", "=", "[", "\n", "update_eps_expr", ",", "\n", "tf", ".", "cond", "(", "reset_ph", ",", "lambda", ":", "perturb_vars", "(", "original_scope", "=", "\"q_func\"", ",", "perturbed_scope", "=", "\"perturbed_q_func\"", ")", ",", "lambda", ":", "tf", ".", "group", "(", "*", "[", "]", ")", ")", ",", "\n", "tf", ".", "cond", "(", "update_param_noise_scale_ph", ",", "lambda", ":", "update_scale", "(", ")", ",", "lambda", ":", "tf", ".", "Variable", "(", "0.", ",", "trainable", "=", "False", ")", ")", ",", "\n", "update_param_noise_threshold_expr", ",", "\n", "]", "\n", "_act", "=", "U", ".", "function", "(", "inputs", "=", "[", "observations_ph", ",", "stochastic_ph", ",", "update_eps_ph", ",", "reset_ph", ",", "update_param_noise_threshold_ph", ",", "update_param_noise_scale_ph", "]", ",", "\n", "outputs", "=", "output_actions", ",", "\n", "givens", "=", "{", "update_eps_ph", ":", "-", "1.0", ",", "stochastic_ph", ":", "True", ",", "reset_ph", ":", "False", ",", "update_param_noise_threshold_ph", ":", "False", ",", "update_param_noise_scale_ph", ":", "False", "}", ",", "\n", "updates", "=", "updates", ")", "\n", "def", "act", "(", "ob", ",", "reset", ",", "update_param_noise_threshold", ",", "update_param_noise_scale", ",", "stochastic", "=", "True", ",", "update_eps", "=", "-", "1", ")", ":", "\n", "            ", "return", "_act", "(", "ob", ",", "stochastic", ",", "update_eps", ",", "reset", ",", "update_param_noise_threshold", ",", "update_param_noise_scale", ")", "\n", "", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.build_train": [[317, 450], ["build_graph.build_act_with_param_noise", "build_graph.build_act", "tensorflow.variable_scope", "make_obs_ph", "tensorflow.placeholder", "tensorflow.placeholder", "make_obs_ph", "tensorflow.placeholder", "tensorflow.placeholder", "q_func", "tensorflow.get_collection", "q_func", "tensorflow.get_collection", "tensorflow.reduce_sum", "baselines.huber_loss", "tensorflow.reduce_mean", "zip", "tensorflow.group", "baselines.function", "baselines.function", "baselines.function", "make_obs_ph.get", "make_obs_ph.get", "q_func", "tensorflow.argmax", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.stop_gradient", "optimizer.compute_gradients", "enumerate", "optimizer.apply_gradients", "optimizer.minimize", "sorted", "sorted", "tf.group.append", "tensorflow.one_hot", "make_obs_ph.get", "var_target.assign", "tensorflow.one_hot", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "tensorflow.clip_by_norm"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.build_act_with_param_noise", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.build_graph.build_act", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.huber_loss", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get"], ["", "", "def", "build_train", "(", "make_obs_ph", ",", "q_func", ",", "num_actions", ",", "optimizer", ",", "grad_norm_clipping", "=", "None", ",", "gamma", "=", "1.0", ",", "\n", "double_q", "=", "True", ",", "scope", "=", "\"deepq\"", ",", "reuse", "=", "None", ",", "param_noise", "=", "False", ",", "param_noise_filter_func", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates the train function:\n\n    Parameters\n    ----------\n    make_obs_ph: str -> tf.placeholder or TfInput\n        a function that takes a name and creates a placeholder of input with that name\n    q_func: (tf.Variable, int, str, bool) -> tf.Variable\n        the model that takes the following inputs:\n            observation_in: object\n                the output of observation placeholder\n            num_actions: int\n                number of actions\n            scope: str\n            reuse: bool\n                should be passed to outer variable scope\n        and returns a tensor of shape (batch_size, num_actions) with values of every action.\n    num_actions: int\n        number of actions\n    reuse: bool\n        whether or not to reuse the graph variables\n    optimizer: tf.train.Optimizer\n        optimizer to use for the Q-learning objective.\n    grad_norm_clipping: float or None\n        clip gradient norms to this value. If None no clipping is performed.\n    gamma: float\n        discount rate.\n    double_q: bool\n        if true will use Double Q Learning (https://arxiv.org/abs/1509.06461).\n        In general it is a good idea to keep it enabled.\n    scope: str or VariableScope\n        optional scope for variable_scope.\n    reuse: bool or None\n        whether or not the variables should be reused. To be able to reuse the scope must be given.\n    param_noise: bool\n        whether or not to use parameter space noise (https://arxiv.org/abs/1706.01905)\n    param_noise_filter_func: tf.Variable -> bool\n        function that decides whether or not a variable should be perturbed. Only applicable\n        if param_noise is True. If set to None, default_param_noise_filter is used by default.\n\n    Returns\n    -------\n    act: (tf.Variable, bool, float) -> tf.Variable\n        function to select and action given observation.\n`       See the top of the file for details.\n    train: (object, np.array, np.array, object, np.array, np.array) -> np.array\n        optimize the error in Bellman's equation.\n`       See the top of the file for details.\n    update_target: () -> ()\n        copy the parameters from optimized Q function to the target Q function.\n`       See the top of the file for details.\n    debug: {str: function}\n        a bunch of functions to print debug data like q_values.\n    \"\"\"", "\n", "if", "param_noise", ":", "\n", "        ", "act_f", "=", "build_act_with_param_noise", "(", "make_obs_ph", ",", "q_func", ",", "num_actions", ",", "scope", "=", "scope", ",", "reuse", "=", "reuse", ",", "\n", "param_noise_filter_func", "=", "param_noise_filter_func", ")", "\n", "", "else", ":", "\n", "        ", "act_f", "=", "build_act", "(", "make_obs_ph", ",", "q_func", ",", "num_actions", ",", "scope", "=", "scope", ",", "reuse", "=", "reuse", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# set up placeholders", "\n", "        ", "obs_t_input", "=", "make_obs_ph", "(", "\"obs_t\"", ")", "\n", "act_t_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"action\"", ")", "\n", "rew_t_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"reward\"", ")", "\n", "obs_tp1_input", "=", "make_obs_ph", "(", "\"obs_tp1\"", ")", "\n", "done_mask_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"done\"", ")", "\n", "importance_weights_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"weight\"", ")", "\n", "\n", "# q network evaluation", "\n", "q_t", "=", "q_func", "(", "obs_t_input", ".", "get", "(", ")", ",", "num_actions", ",", "scope", "=", "\"q_func\"", ",", "reuse", "=", "True", ")", "# reuse parameters from act", "\n", "q_func_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "+", "\"/q_func\"", ")", "\n", "\n", "# target q network evalution", "\n", "q_tp1", "=", "q_func", "(", "obs_tp1_input", ".", "get", "(", ")", ",", "num_actions", ",", "scope", "=", "\"target_q_func\"", ")", "\n", "target_q_func_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "+", "\"/target_q_func\"", ")", "\n", "\n", "# q scores for actions which we know were selected in the given state.", "\n", "q_t_selected", "=", "tf", ".", "reduce_sum", "(", "q_t", "*", "tf", ".", "one_hot", "(", "act_t_ph", ",", "num_actions", ")", ",", "1", ")", "\n", "\n", "# compute estimate of best possible value starting from state at t + 1", "\n", "if", "double_q", ":", "\n", "            ", "q_tp1_using_online_net", "=", "q_func", "(", "obs_tp1_input", ".", "get", "(", ")", ",", "num_actions", ",", "scope", "=", "\"q_func\"", ",", "reuse", "=", "True", ")", "\n", "q_tp1_best_using_online_net", "=", "tf", ".", "argmax", "(", "q_tp1_using_online_net", ",", "1", ")", "\n", "q_tp1_best", "=", "tf", ".", "reduce_sum", "(", "q_tp1", "*", "tf", ".", "one_hot", "(", "q_tp1_best_using_online_net", ",", "num_actions", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "q_tp1_best", "=", "tf", ".", "reduce_max", "(", "q_tp1", ",", "1", ")", "\n", "", "q_tp1_best_masked", "=", "(", "1.0", "-", "done_mask_ph", ")", "*", "q_tp1_best", "\n", "\n", "# compute RHS of bellman equation", "\n", "q_t_selected_target", "=", "rew_t_ph", "+", "gamma", "*", "q_tp1_best_masked", "\n", "\n", "# compute the error (potentially clipped)", "\n", "td_error", "=", "q_t_selected", "-", "tf", ".", "stop_gradient", "(", "q_t_selected_target", ")", "\n", "errors", "=", "U", ".", "huber_loss", "(", "td_error", ")", "\n", "weighted_error", "=", "tf", ".", "reduce_mean", "(", "importance_weights_ph", "*", "errors", ")", "\n", "\n", "# compute optimization op (potentially with gradient clipping)", "\n", "if", "grad_norm_clipping", "is", "not", "None", ":", "\n", "            ", "gradients", "=", "optimizer", ".", "compute_gradients", "(", "weighted_error", ",", "var_list", "=", "q_func_vars", ")", "\n", "for", "i", ",", "(", "grad", ",", "var", ")", "in", "enumerate", "(", "gradients", ")", ":", "\n", "                ", "if", "grad", "is", "not", "None", ":", "\n", "                    ", "gradients", "[", "i", "]", "=", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "grad_norm_clipping", ")", ",", "var", ")", "\n", "", "", "optimize_expr", "=", "optimizer", ".", "apply_gradients", "(", "gradients", ")", "\n", "", "else", ":", "\n", "            ", "optimize_expr", "=", "optimizer", ".", "minimize", "(", "weighted_error", ",", "var_list", "=", "q_func_vars", ")", "\n", "\n", "# update_target_fn will be called periodically to copy Q network to target Q network", "\n", "", "update_target_expr", "=", "[", "]", "\n", "for", "var", ",", "var_target", "in", "zip", "(", "sorted", "(", "q_func_vars", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", ",", "\n", "sorted", "(", "target_q_func_vars", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", ")", ":", "\n", "            ", "update_target_expr", ".", "append", "(", "var_target", ".", "assign", "(", "var", ")", ")", "\n", "", "update_target_expr", "=", "tf", ".", "group", "(", "*", "update_target_expr", ")", "\n", "\n", "# Create callable functions", "\n", "train", "=", "U", ".", "function", "(", "\n", "inputs", "=", "[", "\n", "obs_t_input", ",", "\n", "act_t_ph", ",", "\n", "rew_t_ph", ",", "\n", "obs_tp1_input", ",", "\n", "done_mask_ph", ",", "\n", "importance_weights_ph", "\n", "]", ",", "\n", "outputs", "=", "td_error", ",", "\n", "updates", "=", "[", "optimize_expr", "]", "\n", ")", "\n", "update_target", "=", "U", ".", "function", "(", "[", "]", ",", "[", "]", ",", "updates", "=", "[", "update_target_expr", "]", ")", "\n", "\n", "q_values", "=", "U", ".", "function", "(", "[", "obs_t_input", "]", ",", "q_t", ")", "\n", "\n", "return", "act_f", ",", "train", ",", "update_target", ",", "{", "'q_values'", ":", "q_values", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.ReplayBuffer.__init__": [[8, 20], ["None"], "methods", ["None"], ["        ", "\"\"\"Creates a replay buffer.\n\n        Args:\n            buffer_shapes (dict of ints): the shape for all buffers that are used in the replay\n                buffer\n            size_in_transitions (int): the size of the buffer, measured in transitions\n            T (int): the time horizon for episodes\n            sample_transitions (function): a function that samples from the replay buffer\n        \"\"\"", "\n", "self", ".", "buffer_shapes", "=", "buffer_shapes", "\n", "self", ".", "size", "=", "size_in_transitions", "//", "T", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "sample_transitions", "=", "sample_transitions", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.ReplayBuffer.__len__": [[21, 23], ["len"], "methods", ["None"], ["\n", "# self.buffers is {key: array(size_in_episodes x T or T+1 x dim_key)}", "\n", "self", ".", "buffers", "=", "{", "key", ":", "np", ".", "empty", "(", "[", "self", ".", "size", ",", "*", "shape", "]", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.ReplayBuffer.add": [[24, 32], ["len", "replay_buffer.ReplayBuffer._storage.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["for", "key", ",", "shape", "in", "buffer_shapes", ".", "items", "(", ")", "}", "\n", "\n", "# memory management", "\n", "self", ".", "current_size", "=", "0", "\n", "self", ".", "n_transitions_stored", "=", "0", "\n", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.ReplayBuffer._encode_sample": [[33, 44], ["obses_t.append", "actions.append", "rewards.append", "obses_tp1.append", "dones.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["def", "full", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "==", "self", ".", "size", "\n", "\n", "", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Returns a dict {key: array(batch_size x shapes[key])}\n        \"\"\"", "\n", "buffers", "=", "{", "}", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "assert", "self", ".", "current_size", ">", "0", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.ReplayBuffer.sample": [[45, 69], ["replay_buffer.ReplayBuffer._encode_sample", "random.randint", "range", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer._encode_sample"], ["                ", "buffers", "[", "key", "]", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "\n", "\n", "", "", "buffers", "[", "'o_2'", "]", "=", "buffers", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "buffers", "[", "'ag_2'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "transitions", "=", "self", ".", "sample_transitions", "(", "buffers", ",", "batch_size", ")", "\n", "\n", "for", "key", "in", "(", "[", "'r'", ",", "'o_2'", ",", "'ag_2'", "]", "+", "list", "(", "self", ".", "buffers", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "assert", "key", "in", "transitions", ",", "\"key %s missing from transitions\"", "%", "key", "\n", "\n", "", "return", "transitions", "\n", "\n", "", "def", "store_episode", "(", "self", ",", "episode_batch", ")", ":", "\n", "        ", "\"\"\"episode_batch: array(batch_size x (T or T+1) x dim_key)\n        \"\"\"", "\n", "batch_sizes", "=", "[", "len", "(", "episode_batch", "[", "key", "]", ")", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "batch_sizes", ")", "==", "batch_sizes", "[", "0", "]", ")", "\n", "batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "idxs", "=", "self", ".", "_get_storage_idx", "(", "batch_size", ")", "\n", "\n", "# load inputs into buffers", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "buffers", "[", "key", "]", "[", "idxs", "]", "=", "episode_batch", "[", "key", "]", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.PrioritizedReplayBuffer.__init__": [[72, 99], ["replay_buffer.ReplayBuffer.__init__", "baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.MinSegmentTree"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["\n", "", "", "def", "get_current_episode_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "\n", "\n", "", "", "def", "get_current_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "*", "self", ".", "T", "\n", "\n", "", "", "def", "get_transitions_stored", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "n_transitions_stored", "\n", "\n", "", "", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "current_size", "=", "0", "\n", "\n", "", "", "def", "_get_storage_idx", "(", "self", ",", "inc", "=", "None", ")", ":", "\n", "        ", "inc", "=", "inc", "or", "1", "# size increment", "\n", "assert", "inc", "<=", "self", ".", "size", ",", "\"Batch committed to replay is too large!\"", "\n", "# go consecutively until you hit the end, and then go randomly.", "\n", "if", "self", ".", "current_size", "+", "inc", "<=", "self", ".", "size", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "", "elif", "self", ".", "current_size", "<", "self", ".", "size", ":", "\n", "            ", "overflow", "=", "inc", "-", "(", "self", ".", "size", "-", "self", ".", "current_size", ")", "\n", "idx_a", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "size", ")", "\n", "idx_b", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "current_size", ",", "overflow", ")", "\n", "idx", "=", "np", ".", "concatenate", "(", "[", "idx_a", ",", "idx_b", "]", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.PrioritizedReplayBuffer.add": [[100, 106], ["replay_buffer.ReplayBuffer.add"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.add"], ["", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "size", ",", "inc", ")", "\n", "\n", "# update replay size", "\n", "", "self", ".", "current_size", "=", "min", "(", "self", ".", "size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "\n", "if", "inc", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.PrioritizedReplayBuffer._sample_proportional": [[107, 115], ["range", "replay_buffer.PrioritizedReplayBuffer._it_sum.find_prefixsum_idx", "res.append", "random.random", "replay_buffer.PrioritizedReplayBuffer._it_sum.sum", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["            ", "idx", "=", "idx", "[", "0", "]", "\n", "", "return", "idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.PrioritizedReplayBuffer.sample": [[116, 167], ["replay_buffer.PrioritizedReplayBuffer._sample_proportional", "numpy.array", "replay_buffer.PrioritizedReplayBuffer._encode_sample", "tuple", "replay_buffer.PrioritizedReplayBuffer._it_min.min", "replay_buffer.PrioritizedReplayBuffer._it_sum.sum", "numpy.array.append", "len", "replay_buffer.PrioritizedReplayBuffer._it_sum.sum", "list", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer._sample_proportional", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer._encode_sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.replay_buffer.PrioritizedReplayBuffer.update_priorities": [[168, 191], ["zip", "len", "len", "max", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.__init__.wrap_atari_dqn": [[6, 9], ["wrap_deepmind"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.wrap_deepmind"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.TfInput.__init__": [[11, 17], ["None"], "methods", ["None"], ["\n", "", "def", "cat_entropy", "(", "logits", ")", ":", "\n", "    ", "a0", "=", "logits", "-", "tf", ".", "reduce_max", "(", "logits", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.TfInput.get": [[18, 23], ["NotImplemented"], "methods", ["None"], ["\n", "", "def", "cat_entropy_softmax", "(", "p0", ")", ":", "\n", "    ", "return", "-", "tf", ".", "reduce_sum", "(", "p0", "*", "tf", ".", "log", "(", "p0", "+", "1e-6", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "def", "mse", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "square", "(", "pred", "-", "target", ")", "/", "2.", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.TfInput.make_feed_dict": [[24, 27], ["NotImplemented"], "methods", ["None"], ["\n", "", "def", "ortho_init", "(", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_ortho_init", "(", "shape", ",", "dtype", ",", "partition_info", "=", "None", ")", ":", "\n", "#lasagne ortho init for tf", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.PlaceholderTfInput.__init__": [[30, 34], ["utils.TfInput.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["            ", "flat_shape", "=", "shape", "\n", "", "elif", "len", "(", "shape", ")", "==", "4", ":", "# assumes NHWC", "\n", "            ", "flat_shape", "=", "(", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.PlaceholderTfInput.get": [[35, 37], ["None"], "methods", ["None"], ["", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "# pick the one with the correct shape", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.PlaceholderTfInput.make_feed_dict": [[38, 40], ["None"], "methods", ["None"], ["q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "(", "scale", "*", "q", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "_ortho_init", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.Uint8Input.__init__": [[43, 60], ["utils.PlaceholderTfInput.__init__", "tensorflow.placeholder", "tensorflow.cast", "utils.PlaceholderTfInput.get", "list"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get"], ["    ", "if", "data_format", "==", "'NHWC'", ":", "\n", "        ", "channel_ax", "=", "3", "\n", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "bshape", "=", "[", "1", ",", "1", ",", "1", ",", "nf", "]", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "        ", "channel_ax", "=", "1", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "bshape", "=", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "bias_var_shape", "=", "[", "nf", "]", "if", "one_dim_bias", "else", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "channel_ax", "]", ".", "value", "\n", "wshape", "=", "[", "rf", ",", "rf", ",", "nin", ",", "nf", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "wshape", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "bias_var_shape", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "if", "not", "one_dim_bias", "and", "data_format", "==", "'NHWC'", ":", "\n", "            ", "b", "=", "tf", ".", "reshape", "(", "b", ",", "bshape", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.Uint8Input.get": [[61, 63], ["None"], "methods", ["None"], ["", "return", "b", "+", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "strides", ",", "padding", "=", "pad", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "", "def", "fc", "(", "x", ",", "scope", ",", "nh", ",", "*", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.ObservationInput.__init__": [[66, 79], ["baselines.common.input.observation_input", "utils.PlaceholderTfInput.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "nin", ",", "nh", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_bias", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "+", "b", "\n", "\n", "", "", "def", "batch_to_seq", "(", "h", ",", "nbatch", ",", "nsteps", ",", "flat", "=", "False", ")", ":", "\n", "    ", "if", "flat", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", "]", ")", "\n", "", "else", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", ",", "-", "1", "]", ")", "\n", "", "return", "[", "tf", ".", "squeeze", "(", "v", ",", "[", "1", "]", ")", "for", "v", "in", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "nsteps", ",", "value", "=", "h", ")", "]", "\n", "\n", "", "def", "seq_to_batch", "(", "h", ",", "flat", "=", "False", ")", ":", "\n", "    ", "shape", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "not", "flat", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.ObservationInput.get": [[80, 82], ["None"], "methods", ["None"], ["        ", "assert", "(", "len", "(", "shape", ")", ">", "1", ")", "\n", "nh", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "h", ")", ",", "[", "-", "1", ",", "nh", "]", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.run_dqn.callback": [[9, 13], ["sum"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["def", "callback", "(", "lcl", ",", "_glb", ")", ":", "\n", "# stop training if reward exceeds 199", "\n", "    ", "is_solved", "=", "lcl", "[", "'t'", "]", ">", "100", "and", "sum", "(", "lcl", "[", "'episode_rewards'", "]", "[", "-", "101", ":", "-", "1", "]", ")", "/", "100", ">=", "199", "\n", "return", "is_solved", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.run_dqn.argsparser": [[14, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "argsparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Tensorflow Implementation of Reinforcement Learning via Imitation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--env_id'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'CartPole-v1'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.run_dqn.main": [[21, 43], ["run_dqn.argsparser", "argsparser.parse_args", "baselines.logger.configure", "gym.make", "gym.make.seed", "baselines.common.set_global_seeds", "baselines.deepq.models.mlp", "baselines.deepq.learn", "print", "deepq.learn.save"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.argsparser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models.mlp", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argsparser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "\n", "env", "=", "gym", ".", "make", "(", "args", ".", "env_id", ")", "\n", "env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "model", "=", "deepq", ".", "models", ".", "mlp", "(", "[", "64", "]", ")", "\n", "act", "=", "deepq", ".", "learn", "(", "\n", "env", ",", "\n", "q_func", "=", "model", ",", "\n", "lr", "=", "1e-3", ",", "\n", "max_timesteps", "=", "1000000", ",", "\n", "buffer_size", "=", "50000", ",", "\n", "exploration_fraction", "=", "0.01", ",", "\n", "exploration_final_eps", "=", "0.02", ",", "\n", "print_freq", "=", "10", "\n", "#callback=callback", "\n", ")", "\n", "print", "(", "\"Saving model to cartpole_model.pkl\"", ")", "\n", "act", ".", "save", "(", "\"cartpole_model.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.enjoy_cartpole.main": [[6, 18], ["gym.make", "baselines.deepq.load", "print", "gym.make.reset", "gym.make.render", "gym.make.step", "deepq.load."], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["def", "main", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"CartPole-v0\"", ")", "\n", "act", "=", "deepq", ".", "load", "(", "\"cartpole_model.pkl\"", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "obs", ",", "done", "=", "env", ".", "reset", "(", ")", ",", "False", "\n", "episode_rew", "=", "0", "\n", "while", "not", "done", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "obs", ",", "rew", ",", "done", ",", "_", "=", "env", ".", "step", "(", "act", "(", "obs", "[", "None", "]", ")", "[", "0", "]", ")", "\n", "episode_rew", "+=", "rew", "\n", "", "print", "(", "\"Episode reward\"", ",", "episode_rew", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.custom_cartpole.model": [[16, 23], ["tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected"], "function", ["None"], ["def", "model", "(", "inpt", ",", "num_actions", ",", "scope", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "\"\"\"This model takes as input an observation and returns values of all actions.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "out", "=", "inpt", "\n", "out", "=", "layers", ".", "fully_connected", "(", "out", ",", "num_outputs", "=", "64", ",", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ")", "\n", "out", "=", "layers", ".", "fully_connected", "(", "out", ",", "num_outputs", "=", "num_actions", ",", "activation_fn", "=", "None", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.enjoy_pong.main": [[5, 18], ["gym.make", "baselines.deepq.wrap_atari_dqn", "baselines.deepq.load", "print", "deepq.wrap_atari_dqn.reset", "deepq.wrap_atari_dqn.render", "deepq.wrap_atari_dqn.step", "deepq.load."], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.__init__.wrap_atari_dqn", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["def", "main", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"PongNoFrameskip-v4\"", ")", "\n", "env", "=", "deepq", ".", "wrap_atari_dqn", "(", "env", ")", "\n", "act", "=", "deepq", ".", "load", "(", "\"pong_model.pkl\"", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "obs", ",", "done", "=", "env", ".", "reset", "(", ")", ",", "False", "\n", "episode_rew", "=", "0", "\n", "while", "not", "done", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "obs", ",", "rew", ",", "done", ",", "_", "=", "env", ".", "step", "(", "act", "(", "obs", "[", "None", "]", ")", "[", "0", "]", ")", "\n", "episode_rew", "+=", "rew", "\n", "", "print", "(", "\"Episode reward\"", ",", "episode_rew", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.enjoy_mountaincar.main": [[6, 18], ["gym.make", "baselines.deepq.load", "print", "gym.make.reset", "gym.make.render", "gym.make.step", "deepq.load."], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["def", "main", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"MountainCar-v0\"", ")", "\n", "act", "=", "deepq", ".", "load", "(", "\"mountaincar_model.pkl\"", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "obs", ",", "done", "=", "env", ".", "reset", "(", ")", ",", "False", "\n", "episode_rew", "=", "0", "\n", "while", "not", "done", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "obs", ",", "rew", ",", "done", ",", "_", "=", "env", ".", "step", "(", "act", "(", "obs", "[", "None", "]", ")", "[", "0", "]", ")", "\n", "episode_rew", "+=", "rew", "\n", "", "print", "(", "\"Episode reward\"", ",", "episode_rew", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_mountaincar.main": [[6, 23], ["gym.make", "baselines.deepq.models.mlp", "baselines.deepq.learn", "print", "deepq.learn.save"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models.mlp", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save"], ["def", "main", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"MountainCar-v0\"", ")", "\n", "# Enabling layer_norm here is import for parameter space noise!", "\n", "model", "=", "deepq", ".", "models", ".", "mlp", "(", "[", "64", "]", ",", "layer_norm", "=", "True", ")", "\n", "act", "=", "deepq", ".", "learn", "(", "\n", "env", ",", "\n", "q_func", "=", "model", ",", "\n", "lr", "=", "1e-3", ",", "\n", "max_timesteps", "=", "100000", ",", "\n", "buffer_size", "=", "50000", ",", "\n", "exploration_fraction", "=", "0.1", ",", "\n", "exploration_final_eps", "=", "0.1", ",", "\n", "print_freq", "=", "10", ",", "\n", "param_noise", "=", "True", "\n", ")", "\n", "print", "(", "\"Saving model to mountaincar_model.pkl\"", ")", "\n", "act", ".", "save", "(", "\"mountaincar_model.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_cartpole.callback": [[6, 10], ["sum"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["def", "callback", "(", "lcl", ",", "_glb", ")", ":", "\n", "# stop training if reward exceeds 199", "\n", "    ", "is_solved", "=", "lcl", "[", "'t'", "]", ">", "100", "and", "sum", "(", "lcl", "[", "'episode_rewards'", "]", "[", "-", "101", ":", "-", "1", "]", ")", "/", "100", ">=", "199", "\n", "return", "is_solved", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_cartpole.main": [[12, 28], ["gym.make", "baselines.deepq.models.mlp", "baselines.deepq.learn", "print", "deepq.learn.save"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models.mlp", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save"], ["", "def", "main", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"CartPole-v0\"", ")", "\n", "model", "=", "deepq", ".", "models", ".", "mlp", "(", "[", "64", "]", ")", "\n", "act", "=", "deepq", ".", "learn", "(", "\n", "env", ",", "\n", "q_func", "=", "model", ",", "\n", "lr", "=", "1e-3", ",", "\n", "max_timesteps", "=", "1000000", ",", "\n", "buffer_size", "=", "50000", ",", "\n", "exploration_fraction", "=", "0.01", ",", "\n", "exploration_final_eps", "=", "0.02", ",", "\n", "print_freq", "=", "10", ",", "\n", "callback", "=", "callback", "\n", ")", "\n", "print", "(", "\"Saving model to cartpole_model.pkl\"", ")", "\n", "act", ".", "save", "(", "\"cartpole_model.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.run_atari.main": [[9, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "baselines.logger.configure", "baselines.common.set_global_seeds", "baselines.common.atari_wrappers.make_atari", "baselines.bench.Monitor", "baselines.deepq.wrap_atari_dqn", "baselines.deepq.models.cnn_to_mlp", "baselines.deepq.learn", "deepq.wrap_atari_dqn.close", "baselines.logger.get_dir", "int", "bool", "bool"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.make_atari", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.__init__.wrap_atari_dqn", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.models.cnn_to_mlp", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ",", "policy", ",", "lrschedule", ",", "num_env", ")", ":", "\n", "    ", "if", "policy", "==", "'cnn'", ":", "\n", "        ", "policy_fn", "=", "CnnPolicy", "\n", "", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env", "=", "VecFrameStack", "(", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ")", ",", "4", ")", "\n", "learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "help", "=", "'Policy architecture'", ",", "choices", "=", "[", "'cnn'", ",", "'lstm'", ",", "'lnlstm'", "]", ",", "default", "=", "'cnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "help", "=", "'Learning rate schedule'", ",", "choices", "=", "[", "'constant'", ",", "'linear'", "]", ",", "default", "=", "'constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "policy", "=", "args", ".", "policy", ",", "lrschedule", "=", "args", ".", "lrschedule", ",", "num_env", "=", "16", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.kfac_utils.gmatmul": [[3, 53], ["tf.transpose.get_shape", "tf.transpose.get_shape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "len", "len", "list", "list.remove", "list.insert", "tensorflow.transpose", "list", "list.remove", "list.insert", "tensorflow.transpose", "tf.transpose.get_shape", "tf.transpose.get_shape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tf.transpose.get_shape", "tf.transpose.get_shape", "range", "int", "range", "len", "len", "len", "list", "list.remove", "list.insert", "tensorflow.transpose", "list", "list.remove", "list.insert", "tensorflow.transpose", "tensorflow.matmul", "len", "len", "tf.transpose.get_shape", "tf.transpose.get_shape", "len", "range", "int", "range", "len", "len", "len", "len", "tf.transpose.get_shape", "tf.transpose.get_shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert"], ["def", "gmatmul", "(", "a", ",", "b", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "False", ",", "reduce_dim", "=", "None", ")", ":", "\n", "    ", "assert", "reduce_dim", "is", "not", "None", "\n", "\n", "# weird batch matmul", "\n", "if", "len", "(", "a", ".", "get_shape", "(", ")", ")", "==", "2", "and", "len", "(", "b", ".", "get_shape", "(", ")", ")", ">", "2", ":", "\n", "# reshape reduce_dim to the left most dim in b", "\n", "        ", "b_shape", "=", "b", ".", "get_shape", "(", ")", "\n", "if", "reduce_dim", "!=", "0", ":", "\n", "            ", "b_dims", "=", "list", "(", "range", "(", "len", "(", "b_shape", ")", ")", ")", "\n", "b_dims", ".", "remove", "(", "reduce_dim", ")", "\n", "b_dims", ".", "insert", "(", "0", ",", "reduce_dim", ")", "\n", "b", "=", "tf", ".", "transpose", "(", "b", ",", "b_dims", ")", "\n", "", "b_t_shape", "=", "b", ".", "get_shape", "(", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "int", "(", "b_shape", "[", "reduce_dim", "]", ")", ",", "-", "1", "]", ")", "\n", "result", "=", "tf", ".", "matmul", "(", "a", ",", "b", ",", "transpose_a", "=", "transpose_a", ",", "\n", "transpose_b", "=", "transpose_b", ")", "\n", "result", "=", "tf", ".", "reshape", "(", "result", ",", "b_t_shape", ")", "\n", "if", "reduce_dim", "!=", "0", ":", "\n", "            ", "b_dims", "=", "list", "(", "range", "(", "len", "(", "b_shape", ")", ")", ")", "\n", "b_dims", ".", "remove", "(", "0", ")", "\n", "b_dims", ".", "insert", "(", "reduce_dim", ",", "0", ")", "\n", "result", "=", "tf", ".", "transpose", "(", "result", ",", "b_dims", ")", "\n", "", "return", "result", "\n", "\n", "", "elif", "len", "(", "a", ".", "get_shape", "(", ")", ")", ">", "2", "and", "len", "(", "b", ".", "get_shape", "(", ")", ")", "==", "2", ":", "\n", "# reshape reduce_dim to the right most dim in a", "\n", "        ", "a_shape", "=", "a", ".", "get_shape", "(", ")", "\n", "outter_dim", "=", "len", "(", "a_shape", ")", "-", "1", "\n", "reduce_dim", "=", "len", "(", "a_shape", ")", "-", "reduce_dim", "-", "1", "\n", "if", "reduce_dim", "!=", "outter_dim", ":", "\n", "            ", "a_dims", "=", "list", "(", "range", "(", "len", "(", "a_shape", ")", ")", ")", "\n", "a_dims", ".", "remove", "(", "reduce_dim", ")", "\n", "a_dims", ".", "insert", "(", "outter_dim", ",", "reduce_dim", ")", "\n", "a", "=", "tf", ".", "transpose", "(", "a", ",", "a_dims", ")", "\n", "", "a_t_shape", "=", "a", ".", "get_shape", "(", ")", "\n", "a", "=", "tf", ".", "reshape", "(", "a", ",", "[", "-", "1", ",", "int", "(", "a_shape", "[", "reduce_dim", "]", ")", "]", ")", "\n", "result", "=", "tf", ".", "matmul", "(", "a", ",", "b", ",", "transpose_a", "=", "transpose_a", ",", "\n", "transpose_b", "=", "transpose_b", ")", "\n", "result", "=", "tf", ".", "reshape", "(", "result", ",", "a_t_shape", ")", "\n", "if", "reduce_dim", "!=", "outter_dim", ":", "\n", "            ", "a_dims", "=", "list", "(", "range", "(", "len", "(", "a_shape", ")", ")", ")", "\n", "a_dims", ".", "remove", "(", "outter_dim", ")", "\n", "a_dims", ".", "insert", "(", "reduce_dim", ",", "outter_dim", ")", "\n", "result", "=", "tf", ".", "transpose", "(", "result", ",", "a_dims", ")", "\n", "", "return", "result", "\n", "\n", "", "elif", "len", "(", "a", ".", "get_shape", "(", ")", ")", "==", "2", "and", "len", "(", "b", ".", "get_shape", "(", ")", ")", "==", "2", ":", "\n", "        ", "return", "tf", ".", "matmul", "(", "a", ",", "b", ",", "transpose_a", "=", "transpose_a", ",", "transpose_b", "=", "transpose_b", ")", "\n", "\n", "", "assert", "False", ",", "'something went wrong'", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.kfac_utils.clipoutNeg": [[55, 58], ["tensorflow.cast"], "function", ["None"], ["", "def", "clipoutNeg", "(", "vec", ",", "threshold", "=", "1e-6", ")", ":", "\n", "    ", "mask", "=", "tf", ".", "cast", "(", "vec", ">", "threshold", ",", "tf", ".", "float32", ")", "\n", "return", "mask", "*", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.kfac_utils.detectMinVal": [[60, 71], ["tensorflow.reduce_min", "tensorflow.reduce_max", "kfac_utils.clipoutNeg", "tensorflow.cond", "tensorflow.logical_or", "tensorflow.greater", "tensorflow.less", "tensorflow.Print", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.kfac_utils.clipoutNeg"], ["", "def", "detectMinVal", "(", "input_mat", ",", "var", ",", "threshold", "=", "1e-6", ",", "name", "=", "''", ",", "debug", "=", "False", ")", ":", "\n", "    ", "eigen_min", "=", "tf", ".", "reduce_min", "(", "input_mat", ")", "\n", "eigen_max", "=", "tf", ".", "reduce_max", "(", "input_mat", ")", "\n", "eigen_ratio", "=", "eigen_max", "/", "eigen_min", "\n", "input_mat_clipped", "=", "clipoutNeg", "(", "input_mat", ",", "threshold", ")", "\n", "\n", "if", "debug", ":", "\n", "        ", "input_mat_clipped", "=", "tf", ".", "cond", "(", "tf", ".", "logical_or", "(", "tf", ".", "greater", "(", "eigen_ratio", ",", "0.", ")", ",", "tf", ".", "less", "(", "eigen_ratio", ",", "-", "500", ")", ")", ",", "lambda", ":", "input_mat_clipped", ",", "lambda", ":", "tf", ".", "Print", "(", "\n", "input_mat_clipped", ",", "[", "tf", ".", "convert_to_tensor", "(", "'screwed ratio '", "+", "name", "+", "' eigen values!!!'", ")", ",", "tf", ".", "convert_to_tensor", "(", "var", ".", "name", ")", ",", "eigen_min", ",", "eigen_max", ",", "eigen_ratio", "]", ")", ")", "\n", "\n", "", "return", "input_mat_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.kfac_utils.factorReshape": [[73, 87], ["grad.get_shape", "tensorflow.reshape", "tensorflow.reshape", "len", "len", "tf.reshape.get_shape", "tf.reshape.get_shape", "len", "len"], "function", ["None"], ["", "def", "factorReshape", "(", "Q", ",", "e", ",", "grad", ",", "facIndx", "=", "0", ",", "ftype", "=", "'act'", ")", ":", "\n", "    ", "grad_shape", "=", "grad", ".", "get_shape", "(", ")", "\n", "if", "ftype", "==", "'act'", ":", "\n", "        ", "assert", "e", ".", "get_shape", "(", ")", "[", "0", "]", "==", "grad_shape", "[", "facIndx", "]", "\n", "expanded_shape", "=", "[", "1", ",", "]", "*", "len", "(", "grad_shape", ")", "\n", "expanded_shape", "[", "facIndx", "]", "=", "-", "1", "\n", "e", "=", "tf", ".", "reshape", "(", "e", ",", "expanded_shape", ")", "\n", "", "if", "ftype", "==", "'grad'", ":", "\n", "        ", "assert", "e", ".", "get_shape", "(", ")", "[", "0", "]", "==", "grad_shape", "[", "len", "(", "grad_shape", ")", "-", "facIndx", "-", "1", "]", "\n", "expanded_shape", "=", "[", "1", ",", "]", "*", "len", "(", "grad_shape", ")", "\n", "expanded_shape", "[", "len", "(", "grad_shape", ")", "-", "facIndx", "-", "1", "]", "=", "-", "1", "\n", "e", "=", "tf", ".", "reshape", "(", "e", ",", "expanded_shape", ")", "\n", "\n", "", "return", "Q", ",", "e", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.policies.GaussianMlpPolicy.__init__": [[7, 39], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "baselines.acktr.utils.dense", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.exp", "tensorflow.tile", "tensorflow.concat", "tensorflow.reduce_mean", "baselines.function", "baselines.function", "baselines.initialize", "baselines.acktr.utils.dense", "baselines.acktr.utils.dense", "tensorflow.zeros_initializer", "baselines.acktr.utils.kl_div", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "baselines.normc_initializer", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.random_normal", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "baselines.normc_initializer", "baselines.normc_initializer", "tensorflow.shape", "tensorflow.shape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log", "tensorflow.square", "tensorflow.square", "tensorflow.log", "tensorflow.log", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.kl_div", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["\n", "def", "nature_cnn", "(", "unscaled_images", ",", "**", "conv_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    CNN from Nature paper.\n    \"\"\"", "\n", "scaled_images", "=", "tf", ".", "cast", "(", "unscaled_images", ",", "tf", ".", "float32", ")", "/", "255.", "\n", "activ", "=", "tf", ".", "nn", ".", "relu", "\n", "h", "=", "activ", "(", "conv", "(", "scaled_images", ",", "'c1'", ",", "nf", "=", "32", ",", "rf", "=", "8", ",", "stride", "=", "4", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "**", "conv_kwargs", ")", ")", "\n", "h2", "=", "activ", "(", "conv", "(", "h", ",", "'c2'", ",", "nf", "=", "64", ",", "rf", "=", "4", ",", "stride", "=", "2", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "activ", "(", "conv", "(", "h2", ",", "'c3'", ",", "nf", "=", "64", ",", "rf", "=", "3", ",", "stride", "=", "1", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "conv_to_fc", "(", "h3", ")", "\n", "return", "activ", "(", "fc", "(", "h3", ",", "'fc1'", ",", "nh", "=", "512", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "\n", "", "class", "LnLstmPolicy", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lnlstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.policies.GaussianMlpPolicy.act": [[40, 43], ["policies.GaussianMlpPolicy._act"], "methods", ["None"], ["self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.run_mujoco.train": [[10, 27], ["baselines.common.cmd_util.make_mujoco_env", "tensorflow.Session", "baselines.acktr.acktr_cont.learn", "baselines.common.cmd_util.make_mujoco_env.close", "tensorflow.variable_scope", "baselines.acktr.value_functions.NeuralNetValueFunction", "tensorflow.variable_scope", "baselines.acktr.policies.GaussianMlpPolicy", "tensorflow.ConfigProto"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_mujoco_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["    ", "import", "baselines", ".", "common", ".", "tf_util", "as", "U", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "configure", "(", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "configure", "(", "format_strs", "=", "[", "]", ")", "\n", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "", "workerseed", "=", "seed", "+", "10000", "*", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "def", "policy_fn", "(", "name", ",", "ob_space", ",", "ac_space", ")", ":", "\n", "        ", "return", "MlpPolicy", "(", "name", "=", "name", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "\n", "hid_size", "=", "32", ",", "num_hid_layers", "=", "2", ")", "\n", "", "env", "=", "make_mujoco_env", "(", "env_id", ",", "workerseed", ")", "\n", "trpo_mpi", ".", "learn", "(", "env", ",", "policy_fn", ",", "timesteps_per_batch", "=", "1024", ",", "max_kl", "=", "0.01", ",", "cg_iters", "=", "10", ",", "cg_damping", "=", "0.1", ",", "\n", "max_timesteps", "=", "num_timesteps", ",", "gamma", "=", "0.99", ",", "lam", "=", "0.98", ",", "vf_iters", "=", "5", ",", "vf_stepsize", "=", "1e-3", ")", "\n", "env", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.run_mujoco.main": [[28, 32], ["baselines.common.cmd_util.mujoco_arg_parser().parse_args", "baselines.logger.configure", "run_mujoco.train", "baselines.common.cmd_util.mujoco_arg_parser"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.mujoco_arg_parser"], ["\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "mujoco_arg_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense": [[3, 20], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add", "len", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.matmul", "tensorflow.get_variable_scope().name.split", "tensorflow.constant_initializer", "tensorflow.nn.l2_loss", "x.get_shape", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope().name.split", "tensorflow.get_variable_scope"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "gym", "import", "spaces", "\n", "from", "collections", "import", "deque", "\n", "\n", "def", "sample", "(", "logits", ")", ":", "\n", "    ", "noise", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "noise", ")", ")", ",", "1", ")", "\n", "\n", "", "def", "cat_entropy", "(", "logits", ")", ":", "\n", "    ", "a0", "=", "logits", "-", "tf", ".", "reduce_max", "(", "logits", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "1", ")", "\n", "\n", "", "def", "cat_entropy_softmax", "(", "p0", ")", ":", "\n", "    ", "return", "-", "tf", ".", "reduce_sum", "(", "p0", "*", "tf", ".", "log", "(", "p0", "+", "1e-6", ")", ",", "axis", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.kl_div": [[21, 29], ["tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["\n", "", "def", "mse", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "square", "(", "pred", "-", "target", ")", "/", "2.", "\n", "\n", "", "def", "ortho_init", "(", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_ortho_init", "(", "shape", ",", "dtype", ",", "partition_info", "=", "None", ")", ":", "\n", "#lasagne ortho init for tf", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "len", "(", "shape", ")", "==", "2", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.run_atari.train": [[11, 16], ["baselines.common.vec_env.vec_frame_stack.VecFrameStack", "functools.partial", "baselines.acktr.acktr_disc.learn", "baselines.common.vec_env.vec_frame_stack.VecFrameStack.close", "baselines.common.cmd_util.make_atari_env", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env"], ["        ", "policy_fn", "=", "CnnPolicy", "\n", "", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env", "=", "VecFrameStack", "(", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ")", ",", "4", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.run_atari.main": [[17, 21], ["baselines.common.cmd_util.atari_arg_parser().parse_args", "baselines.logger.configure", "run_atari.train", "baselines.common.cmd_util.atari_arg_parser"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser"], ["learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.__init__": [[5, 24], ["None"], "methods", ["None"], ["        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ob_shape", "=", "ob_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "ob_dim", "=", "1", "\n", "for", "dim", "in", "self", ".", "ob_shape", ":", "\n", "            ", "self", ".", "ob_dim", "*=", "dim", "\n", "", "self", ".", "data", "=", "None", "\n", "self", ".", "index", "=", "0", "\n", "\n", "", "def", "insert", "(", "self", ",", "obs", ",", "acs", ",", "ret", ")", ":", "\n", "        ", "num", "=", "obs", ".", "shape", "[", "0", "]", "\n", "_data", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "astype", "(", "float", ")", ".", "reshape", "(", "num", ",", "-", "1", ")", ",", "np", ".", "expand_dims", "(", "acs", ",", "axis", "=", "1", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "ret", ",", "num", ")", ",", "axis", "=", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "data", "=", "_data", "\n", "", "else", ":", "\n", "            ", "insert_index", "=", "np", ".", "searchsorted", "(", "self", ".", "data", "[", ":", ",", "-", "1", "]", ",", "ret", ",", "side", "=", "'right'", ")", "\n", "self", ".", "data", "=", "np", ".", "insert", "(", "self", ".", "data", ",", "insert_index", ",", "_data", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "data", ".", "shape", "[", "0", "]", ">", "self", ".", "size", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "-", "self", ".", "size", ":", "]", "\n", "", "", "self", ".", "index", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.has_atleast": [[25, 29], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "k", "=", "5000", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "max", "(", "0", ",", "self", ".", "index", "-", "k", ")", ",", "self", ".", "index", ")", ",", "batch_size", ")", "\n", "sampled_data", "=", "self", ".", "data", "[", "idx", "]", "\n", "obs", "=", "sampled_data", "[", ":", ",", ":", "self", ".", "ob_dim", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "(", "batch_size", ",", ")", "+", "self", ".", "ob_shape", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.can_sample": [[30, 32], ["None"], "methods", ["None"], ["acs", "=", "sampled_data", "[", ":", ",", "self", ".", "ob_dim", "]", ".", "astype", "(", "int", ")", "\n", "return", "obs", ",", "acs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.decode": [[34, 52], ["numpy.empty", "numpy.zeros", "numpy.reshape().swapaxes", "numpy.reshape().swapaxes", "range", "numpy.reshape", "obs[].transpose", "numpy.reshape", "numpy.reshape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.put": [[53, 75], ["min", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "list", "list", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.take": [[76, 82], ["numpy.empty", "range", "list"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get": [[83, 104], ["buffer.Buffer.can_sample", "numpy.random.randint", "numpy.arange", "buffer.Buffer.take"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.can_sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.take"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.policies.AcerCnnPolicy.__init__": [[9, 42], ["tensorflow.placeholder", "baselines.a2c.utils.sample", "tensorflow.variable_scope", "baselines.ppo2.policies.nature_cnn", "baselines.a2c.utils.fc", "tensorflow.nn.softmax", "baselines.a2c.utils.fc", "sess.run", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "\"\"\"\n    CNN from Nature paper.\n    \"\"\"", "\n", "scaled_images", "=", "tf", ".", "cast", "(", "unscaled_images", ",", "tf", ".", "float32", ")", "/", "255.", "\n", "activ", "=", "tf", ".", "nn", ".", "relu", "\n", "h", "=", "activ", "(", "conv", "(", "scaled_images", ",", "'c1'", ",", "nf", "=", "32", ",", "rf", "=", "8", ",", "stride", "=", "4", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "**", "conv_kwargs", ")", ")", "\n", "h2", "=", "activ", "(", "conv", "(", "h", ",", "'c2'", ",", "nf", "=", "64", ",", "rf", "=", "4", ",", "stride", "=", "2", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "activ", "(", "conv", "(", "h2", ",", "'c3'", ",", "nf", "=", "64", ",", "rf", "=", "3", ",", "stride", "=", "1", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "conv_to_fc", "(", "h3", ")", "\n", "return", "activ", "(", "fc", "(", "h3", ",", "'fc1'", ",", "nh", "=", "512", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "\n", "", "class", "LnLstmPolicy", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lnlstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.policies.AcerLstmPolicy.__init__": [[45, 80], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.a2c.utils.sample", "numpy.zeros", "tensorflow.variable_scope", "baselines.ppo2.policies.nature_cnn", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.lstm", "baselines.a2c.utils.seq_to_batch", "baselines.a2c.utils.fc", "tensorflow.nn.softmax", "baselines.a2c.utils.fc", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n", "", "", "class", "LstmPolicy", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "X", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Model.__init__": [[58, 214], ["tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "policy", "policy", "baselines.a2c.utils.find_trainable_variables", "print", "tensorflow.train.ExponentialMovingAverage", "tensorflow.train.ExponentialMovingAverage.apply", "tensorflow.reduce_sum", "map", "baselines.a2c.utils.get_by_index", "baselines.a2c.utils.get_by_index", "baselines.a2c.utils.get_by_index", "acer_simple.q_retrace", "tensorflow.reduce_mean", "acer_simple.strip", "baselines.a2c.utils.check_shape", "baselines.a2c.utils.check_shape", "tensorflow.log", "tensorflow.log", "baselines.a2c.utils.check_shape", "tensorflow.reduce_sum", "baselines.a2c.utils.check_shape", "baselines.a2c.utils.q_explained_variance", "tensorflow.reduce_mean", "baselines.a2c.utils.check_shape", "list", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer.apply_gradients", "baselines.a2c.utils.Scheduler", "tensorflow.global_variables_initializer().run", "print", "tensorflow.train.ExponentialMovingAverage.average", "print", "tensorflow.variable_scope", "policy", "baselines.a2c.utils.cat_entropy_softmax", "tensorflow.stop_gradient", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.gradients", "tensorflow.reduce_sum", "tensorflow.maximum", "baselines.a2c.utils.avg_norm", "baselines.a2c.utils.avg_norm", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.global_norm", "tensorflow.global_norm", "tensorflow.gradients", "tensorflow.clip_by_global_norm", "zip", "tensorflow.control_dependencies", "tensorflow.group", "baselines.a2c.utils.Scheduler.value_steps", "tensorflow.Session.run", "baselines.a2c.utils.make_path", "joblib.dump", "len", "getter", "acer_simple.strip", "tensorflow.stop_gradient", "tensorflow.square", "tensorflow.abs", "tensorflow.abs", "baselines.a2c.utils.gradient_add", "baselines.a2c.utils.avg_norm", "os.dirname", "tensorflow.global_variables_initializer", "tensorflow.minimum", "tensorflow.reshape", "zip", "tensorflow.Session.run", "tensorflow.stop_gradient", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.find_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.get_by_index", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.get_by_index", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.get_by_index", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.q_retrace", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.strip", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.q_explained_variance", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy_softmax", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.avg_norm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.avg_norm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.Scheduler.value_steps", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.make_path", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.strip", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.gradient_add", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.avg_norm", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "policy", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "nsteps", ",", "nstack", ",", "num_procs", ",", "\n", "ent_coef", ",", "q_coef", ",", "gamma", ",", "max_grad_norm", ",", "lr", ",", "\n", "rprop_alpha", ",", "rprop_epsilon", ",", "total_timesteps", ",", "lrschedule", ",", "\n", "c", ",", "trust_region", ",", "alpha", ",", "delta", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "\n", "intra_op_parallelism_threads", "=", "num_procs", ",", "\n", "inter_op_parallelism_threads", "=", "num_procs", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "nact", "=", "ac_space", ".", "n", "\n", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "\n", "A", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "nbatch", "]", ")", "# actions", "\n", "D", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "# dones", "\n", "R", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "# rewards, not returns", "\n", "MU", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", ",", "nact", "]", ")", "# mu's", "\n", "LR", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "eps", "=", "1e-6", "\n", "\n", "step_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "1", ",", "nstack", ",", "reuse", "=", "False", ")", "\n", "train_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "nsteps", "+", "1", ",", "nstack", ",", "reuse", "=", "True", ")", "\n", "\n", "params", "=", "find_trainable_variables", "(", "\"model\"", ")", "\n", "print", "(", "\"Params {}\"", ".", "format", "(", "len", "(", "params", ")", ")", ")", "\n", "for", "var", "in", "params", ":", "\n", "            ", "print", "(", "var", ")", "\n", "\n", "# create polyak averaged model", "\n", "", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "alpha", ")", "\n", "ema_apply_op", "=", "ema", ".", "apply", "(", "params", ")", "\n", "\n", "def", "custom_getter", "(", "getter", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "v", "=", "ema", ".", "average", "(", "getter", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "print", "(", "v", ".", "name", ")", "\n", "return", "v", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"\"", ",", "custom_getter", "=", "custom_getter", ",", "reuse", "=", "True", ")", ":", "\n", "            ", "polyak_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nenvs", ",", "nsteps", "+", "1", ",", "nstack", ",", "reuse", "=", "True", ")", "\n", "\n", "# Notation: (var) = batch variable, (var)s = seqeuence variable, (var)_i = variable index by action at step i", "\n", "", "v", "=", "tf", ".", "reduce_sum", "(", "train_model", ".", "pi", "*", "train_model", ".", "q", ",", "axis", "=", "-", "1", ")", "# shape is [nenvs * (nsteps + 1)]", "\n", "\n", "# strip off last step", "\n", "f", ",", "f_pol", ",", "q", "=", "map", "(", "lambda", "var", ":", "strip", "(", "var", ",", "nenvs", ",", "nsteps", ")", ",", "[", "train_model", ".", "pi", ",", "polyak_model", ".", "pi", ",", "train_model", ".", "q", "]", ")", "\n", "# Get pi and q values for actions taken", "\n", "f_i", "=", "get_by_index", "(", "f", ",", "A", ")", "\n", "q_i", "=", "get_by_index", "(", "q", ",", "A", ")", "\n", "\n", "# Compute ratios for importance truncation", "\n", "rho", "=", "f", "/", "(", "MU", "+", "eps", ")", "\n", "rho_i", "=", "get_by_index", "(", "rho", ",", "A", ")", "\n", "\n", "# Calculate Q_retrace targets", "\n", "qret", "=", "q_retrace", "(", "R", ",", "D", ",", "q_i", ",", "v", ",", "rho_i", ",", "nenvs", ",", "nsteps", ",", "gamma", ")", "\n", "\n", "# Calculate losses", "\n", "# Entropy", "\n", "entropy", "=", "tf", ".", "reduce_mean", "(", "cat_entropy_softmax", "(", "f", ")", ")", "\n", "\n", "# Policy Graident loss, with truncated importance sampling & bias correction", "\n", "v", "=", "strip", "(", "v", ",", "nenvs", ",", "nsteps", ",", "True", ")", "\n", "check_shape", "(", "[", "qret", ",", "v", ",", "rho_i", ",", "f_i", "]", ",", "[", "[", "nenvs", "*", "nsteps", "]", "]", "*", "4", ")", "\n", "check_shape", "(", "[", "rho", ",", "f", ",", "q", "]", ",", "[", "[", "nenvs", "*", "nsteps", ",", "nact", "]", "]", "*", "2", ")", "\n", "\n", "# Truncated importance sampling", "\n", "adv", "=", "qret", "-", "v", "\n", "logf", "=", "tf", ".", "log", "(", "f_i", "+", "eps", ")", "\n", "gain_f", "=", "logf", "*", "tf", ".", "stop_gradient", "(", "adv", "*", "tf", ".", "minimum", "(", "c", ",", "rho_i", ")", ")", "# [nenvs * nsteps]", "\n", "loss_f", "=", "-", "tf", ".", "reduce_mean", "(", "gain_f", ")", "\n", "\n", "# Bias correction for the truncation", "\n", "adv_bc", "=", "(", "q", "-", "tf", ".", "reshape", "(", "v", ",", "[", "nenvs", "*", "nsteps", ",", "1", "]", ")", ")", "# [nenvs * nsteps, nact]", "\n", "logf_bc", "=", "tf", ".", "log", "(", "f", "+", "eps", ")", "# / (f_old + eps)", "\n", "check_shape", "(", "[", "adv_bc", ",", "logf_bc", "]", ",", "[", "[", "nenvs", "*", "nsteps", ",", "nact", "]", "]", "*", "2", ")", "\n", "gain_bc", "=", "tf", ".", "reduce_sum", "(", "logf_bc", "*", "tf", ".", "stop_gradient", "(", "adv_bc", "*", "tf", ".", "nn", ".", "relu", "(", "1.0", "-", "(", "c", "/", "(", "rho", "+", "eps", ")", ")", ")", "*", "f", ")", ",", "axis", "=", "1", ")", "#IMP: This is sum, as expectation wrt f", "\n", "loss_bc", "=", "-", "tf", ".", "reduce_mean", "(", "gain_bc", ")", "\n", "\n", "loss_policy", "=", "loss_f", "+", "loss_bc", "\n", "\n", "# Value/Q function loss, and explained variance", "\n", "check_shape", "(", "[", "qret", ",", "q_i", "]", ",", "[", "[", "nenvs", "*", "nsteps", "]", "]", "*", "2", ")", "\n", "ev", "=", "q_explained_variance", "(", "tf", ".", "reshape", "(", "q_i", ",", "[", "nenvs", ",", "nsteps", "]", ")", ",", "tf", ".", "reshape", "(", "qret", ",", "[", "nenvs", ",", "nsteps", "]", ")", ")", "\n", "loss_q", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "tf", ".", "stop_gradient", "(", "qret", ")", "-", "q_i", ")", "*", "0.5", ")", "\n", "\n", "# Net loss", "\n", "check_shape", "(", "[", "loss_policy", ",", "loss_q", ",", "entropy", "]", ",", "[", "[", "]", "]", "*", "3", ")", "\n", "loss", "=", "loss_policy", "+", "q_coef", "*", "loss_q", "-", "ent_coef", "*", "entropy", "\n", "\n", "if", "trust_region", ":", "\n", "            ", "g", "=", "tf", ".", "gradients", "(", "-", "(", "loss_policy", "-", "ent_coef", "*", "entropy", ")", "*", "nsteps", "*", "nenvs", ",", "f", ")", "#[nenvs * nsteps, nact]", "\n", "# k = tf.gradients(KL(f_pol || f), f)", "\n", "k", "=", "-", "f_pol", "/", "(", "f", "+", "eps", ")", "#[nenvs * nsteps, nact] # Directly computed gradient of KL divergence wrt f", "\n", "k_dot_g", "=", "tf", ".", "reduce_sum", "(", "k", "*", "g", ",", "axis", "=", "-", "1", ")", "\n", "adj", "=", "tf", ".", "maximum", "(", "0.0", ",", "(", "tf", ".", "reduce_sum", "(", "k", "*", "g", ",", "axis", "=", "-", "1", ")", "-", "delta", ")", "/", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "k", ")", ",", "axis", "=", "-", "1", ")", "+", "eps", ")", ")", "#[nenvs * nsteps]", "\n", "\n", "# Calculate stats (before doing adjustment) for logging.", "\n", "avg_norm_k", "=", "avg_norm", "(", "k", ")", "\n", "avg_norm_g", "=", "avg_norm", "(", "g", ")", "\n", "avg_norm_k_dot_g", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "k_dot_g", ")", ")", "\n", "avg_norm_adj", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "adj", ")", ")", "\n", "\n", "g", "=", "g", "-", "tf", ".", "reshape", "(", "adj", ",", "[", "nenvs", "*", "nsteps", ",", "1", "]", ")", "*", "k", "\n", "grads_f", "=", "-", "g", "/", "(", "nenvs", "*", "nsteps", ")", "# These are turst region adjusted gradients wrt f ie statistics of policy pi", "\n", "grads_policy", "=", "tf", ".", "gradients", "(", "f", ",", "params", ",", "grads_f", ")", "\n", "grads_q", "=", "tf", ".", "gradients", "(", "loss_q", "*", "q_coef", ",", "params", ")", "\n", "grads", "=", "[", "gradient_add", "(", "g1", ",", "g2", ",", "param", ")", "for", "(", "g1", ",", "g2", ",", "param", ")", "in", "zip", "(", "grads_policy", ",", "grads_q", ",", "params", ")", "]", "\n", "\n", "avg_norm_grads_f", "=", "avg_norm", "(", "grads_f", ")", "*", "(", "nsteps", "*", "nenvs", ")", "\n", "norm_grads_q", "=", "tf", ".", "global_norm", "(", "grads_q", ")", "\n", "norm_grads_policy", "=", "tf", ".", "global_norm", "(", "grads_policy", ")", "\n", "", "else", ":", "\n", "            ", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "params", ")", "\n", "\n", "", "if", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "grads", ",", "norm_grads", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "max_grad_norm", ")", "\n", "", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "trainer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "LR", ",", "decay", "=", "rprop_alpha", ",", "epsilon", "=", "rprop_epsilon", ")", "\n", "_opt_op", "=", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "# so when you call _train, you first do the gradient step, then you apply ema", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "_opt_op", "]", ")", ":", "\n", "            ", "_train", "=", "tf", ".", "group", "(", "ema_apply_op", ")", "\n", "\n", "", "lr", "=", "Scheduler", "(", "v", "=", "lr", ",", "nvalues", "=", "total_timesteps", ",", "schedule", "=", "lrschedule", ")", "\n", "\n", "# Ops/Summaries to run, and their names for logging", "\n", "run_ops", "=", "[", "_train", ",", "loss", ",", "loss_q", ",", "entropy", ",", "loss_policy", ",", "loss_f", ",", "loss_bc", ",", "ev", ",", "norm_grads", "]", "\n", "names_ops", "=", "[", "'loss'", ",", "'loss_q'", ",", "'entropy'", ",", "'loss_policy'", ",", "'loss_f'", ",", "'loss_bc'", ",", "'explained_variance'", ",", "\n", "'norm_grads'", "]", "\n", "if", "trust_region", ":", "\n", "            ", "run_ops", "=", "run_ops", "+", "[", "norm_grads_q", ",", "norm_grads_policy", ",", "avg_norm_grads_f", ",", "avg_norm_k", ",", "avg_norm_g", ",", "avg_norm_k_dot_g", ",", "\n", "avg_norm_adj", "]", "\n", "names_ops", "=", "names_ops", "+", "[", "'norm_grads_q'", ",", "'norm_grads_policy'", ",", "'avg_norm_grads_f'", ",", "'avg_norm_k'", ",", "'avg_norm_g'", ",", "\n", "'avg_norm_k_dot_g'", ",", "'avg_norm_adj'", "]", "\n", "\n", "", "def", "train", "(", "obs", ",", "actions", ",", "rewards", ",", "dones", ",", "mus", ",", "states", ",", "masks", ",", "steps", ")", ":", "\n", "            ", "cur_lr", "=", "lr", ".", "value_steps", "(", "steps", ")", "\n", "td_map", "=", "{", "train_model", ".", "X", ":", "obs", ",", "polyak_model", ".", "X", ":", "obs", ",", "A", ":", "actions", ",", "R", ":", "rewards", ",", "D", ":", "dones", ",", "MU", ":", "mus", ",", "LR", ":", "cur_lr", "}", "\n", "if", "states", "!=", "[", "]", ":", "\n", "                ", "td_map", "[", "train_model", ".", "S", "]", "=", "states", "\n", "td_map", "[", "train_model", ".", "M", "]", "=", "masks", "\n", "td_map", "[", "polyak_model", ".", "S", "]", "=", "states", "\n", "td_map", "[", "polyak_model", ".", "M", "]", "=", "masks", "\n", "", "return", "names_ops", ",", "sess", ".", "run", "(", "run_ops", ",", "td_map", ")", "[", "1", ":", "]", "# strip off _train", "\n", "\n", "", "def", "save", "(", "save_path", ")", ":", "\n", "            ", "ps", "=", "sess", ".", "run", "(", "params", ")", "\n", "make_path", "(", "osp", ".", "dirname", "(", "save_path", ")", ")", "\n", "joblib", ".", "dump", "(", "ps", ",", "save_path", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "save", "=", "save", "\n", "self", ".", "train_model", "=", "train_model", "\n", "self", ".", "step_model", "=", "step_model", "\n", "self", ".", "step", "=", "step_model", ".", "step", "\n", "self", ".", "initial_state", "=", "step_model", ".", "initial_state", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Runner.__init__": [[216, 228], ["baselines.common.runners.AbstractEnvRunner.__init__", "numpy.zeros", "env.reset", "acer_simple.Runner.update_obs"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Runner.update_obs"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "model", ",", "nsteps", ",", "nstack", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ")", "\n", "self", ".", "nstack", "=", "nstack", "\n", "nh", ",", "nw", ",", "nc", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "nc", "=", "nc", "# nc = 1 for atari, but just in case", "\n", "self", ".", "nenv", "=", "nenv", "=", "env", ".", "num_envs", "\n", "self", ".", "nact", "=", "env", ".", "action_space", ".", "n", "\n", "self", ".", "nbatch", "=", "nenv", "*", "nsteps", "\n", "self", ".", "batch_ob_shape", "=", "(", "nenv", "*", "(", "nsteps", "+", "1", ")", ",", "nh", ",", "nw", ",", "nc", "*", "nstack", ")", "\n", "self", ".", "obs", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nh", ",", "nw", ",", "nc", "*", "nstack", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "update_obs", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Runner.update_obs": [[229, 234], ["numpy.roll", "dones.astype"], "methods", ["None"], ["", "def", "update_obs", "(", "self", ",", "obs", ",", "dones", "=", "None", ")", ":", "\n", "        ", "if", "dones", "is", "not", "None", ":", "\n", "            ", "self", ".", "obs", "*=", "(", "1", "-", "dones", ".", "astype", "(", "np", ".", "uint8", ")", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "", "self", ".", "obs", "=", "np", ".", "roll", "(", "self", ".", "obs", ",", "shift", "=", "-", "self", ".", "nc", ",", "axis", "=", "3", ")", "\n", "self", ".", "obs", "[", ":", ",", ":", ",", ":", ",", "-", "self", ".", "nc", ":", "]", "=", "obs", "[", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Runner.run": [[235, 269], ["numpy.split", "range", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "numpy.asarray().swapaxes", "acer_simple.Runner.model.step", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes.append", "acer_simple.Runner.env.step", "acer_simple.Runner.update_obs", "numpy.asarray().swapaxes.append", "numpy.asarray().swapaxes.append", "numpy.copy", "numpy.copy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Runner.update_obs", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "enc_obs", "=", "np", ".", "split", "(", "self", ".", "obs", ",", "self", ".", "nstack", ",", "axis", "=", "3", ")", "# so now list of obs steps", "\n", "mb_obs", ",", "mb_actions", ",", "mb_mus", ",", "mb_dones", ",", "mb_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "nsteps", ")", ":", "\n", "            ", "actions", ",", "mus", ",", "states", "=", "self", ".", "model", ".", "step", "(", "self", ".", "obs", ",", "state", "=", "self", ".", "states", ",", "mask", "=", "self", ".", "dones", ")", "\n", "mb_obs", ".", "append", "(", "np", ".", "copy", "(", "self", ".", "obs", ")", ")", "\n", "mb_actions", ".", "append", "(", "actions", ")", "\n", "mb_mus", ".", "append", "(", "mus", ")", "\n", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "obs", ",", "rewards", ",", "dones", ",", "_", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "# states information for statefull models like LSTM", "\n", "self", ".", "states", "=", "states", "\n", "self", ".", "dones", "=", "dones", "\n", "self", ".", "update_obs", "(", "obs", ",", "dones", ")", "\n", "mb_rewards", ".", "append", "(", "rewards", ")", "\n", "enc_obs", ".", "append", "(", "obs", ")", "\n", "", "mb_obs", ".", "append", "(", "np", ".", "copy", "(", "self", ".", "obs", ")", ")", "\n", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "\n", "enc_obs", "=", "np", ".", "asarray", "(", "enc_obs", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_obs", "=", "np", ".", "asarray", "(", "mb_obs", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_actions", "=", "np", ".", "asarray", "(", "mb_actions", ",", "dtype", "=", "np", ".", "int32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_rewards", "=", "np", ".", "asarray", "(", "mb_rewards", ",", "dtype", "=", "np", ".", "float32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "mb_mus", "=", "np", ".", "asarray", "(", "mb_mus", ",", "dtype", "=", "np", ".", "float32", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "\n", "mb_dones", "=", "np", ".", "asarray", "(", "mb_dones", ",", "dtype", "=", "np", ".", "bool", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "\n", "mb_masks", "=", "mb_dones", "# Used for statefull models like LSTM's to mask state when done", "\n", "mb_dones", "=", "mb_dones", "[", ":", ",", "1", ":", "]", "# Used for calculating returns. The dones array is now aligned with rewards", "\n", "\n", "# shapes are now [nenv, nsteps, []]", "\n", "# When pulling from buffer, arrays will now be reshaped in place, preventing a deep copy.", "\n", "\n", "return", "enc_obs", ",", "mb_obs", ",", "mb_actions", ",", "mb_rewards", ",", "mb_mus", ",", "mb_dones", ",", "mb_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Acer.__init__": [[271, 279], ["baselines.a2c.utils.EpisodeStats"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "runner", ",", "model", ",", "buffer", ",", "log_interval", ")", ":", "\n", "        ", "self", ".", "runner", "=", "runner", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "buffer", "=", "buffer", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "tstart", "=", "None", "\n", "self", ".", "episode_stats", "=", "EpisodeStats", "(", "runner", ".", "nsteps", ",", "runner", ".", "nenv", ")", "\n", "self", ".", "steps", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Acer.call": [[280, 312], ["obs.reshape.reshape.reshape", "actions.reshape.reshape.reshape", "rewards.reshape.reshape.reshape", "mus.reshape.reshape.reshape", "dones.reshape.reshape.reshape", "masks.reshape.reshape.reshape", "model.train", "runner.run", "acer_simple.Acer.episode_stats.feed", "buffer.get", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "zip", "baselines.logger.dump_tabular", "buffer.put", "int", "acer_simple.Acer.episode_stats.mean_length", "acer_simple.Acer.episode_stats.mean_reward", "baselines.logger.record_tabular", "int", "float", "time.time"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.feed", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.put", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.mean_length", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.mean_reward"], ["", "def", "call", "(", "self", ",", "on_policy", ")", ":", "\n", "        ", "runner", ",", "model", ",", "buffer", ",", "steps", "=", "self", ".", "runner", ",", "self", ".", "model", ",", "self", ".", "buffer", ",", "self", ".", "steps", "\n", "if", "on_policy", ":", "\n", "            ", "enc_obs", ",", "obs", ",", "actions", ",", "rewards", ",", "mus", ",", "dones", ",", "masks", "=", "runner", ".", "run", "(", ")", "\n", "self", ".", "episode_stats", ".", "feed", "(", "rewards", ",", "dones", ")", "\n", "if", "buffer", "is", "not", "None", ":", "\n", "                ", "buffer", ".", "put", "(", "enc_obs", ",", "actions", ",", "rewards", ",", "mus", ",", "dones", ",", "masks", ")", "\n", "", "", "else", ":", "\n", "# get obs, actions, rewards, mus, dones from buffer.", "\n", "            ", "obs", ",", "actions", ",", "rewards", ",", "mus", ",", "dones", ",", "masks", "=", "buffer", ".", "get", "(", ")", "\n", "\n", "# reshape stuff correctly", "\n", "", "obs", "=", "obs", ".", "reshape", "(", "runner", ".", "batch_ob_shape", ")", "\n", "actions", "=", "actions", ".", "reshape", "(", "[", "runner", ".", "nbatch", "]", ")", "\n", "rewards", "=", "rewards", ".", "reshape", "(", "[", "runner", ".", "nbatch", "]", ")", "\n", "mus", "=", "mus", ".", "reshape", "(", "[", "runner", ".", "nbatch", ",", "runner", ".", "nact", "]", ")", "\n", "dones", "=", "dones", ".", "reshape", "(", "[", "runner", ".", "nbatch", "]", ")", "\n", "masks", "=", "masks", ".", "reshape", "(", "[", "runner", ".", "batch_ob_shape", "[", "0", "]", "]", ")", "\n", "\n", "names_ops", ",", "values_ops", "=", "model", ".", "train", "(", "obs", ",", "actions", ",", "rewards", ",", "dones", ",", "mus", ",", "model", ".", "initial_state", ",", "masks", ",", "steps", ")", "\n", "\n", "if", "on_policy", "and", "(", "int", "(", "steps", "/", "runner", ".", "nbatch", ")", "%", "self", ".", "log_interval", "==", "0", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "\"total_timesteps\"", ",", "steps", ")", "\n", "logger", ".", "record_tabular", "(", "\"fps\"", ",", "int", "(", "steps", "/", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ")", ")", "\n", "# IMP: In EpisodicLife env, during training, we get done=True at each loss of life, not just at the terminal state.", "\n", "# Thus, this is mean until end of life, not end of episode.", "\n", "# For true episode rewards, see the monitor files in the log folder.", "\n", "logger", ".", "record_tabular", "(", "\"mean_episode_length\"", ",", "self", ".", "episode_stats", ".", "mean_length", "(", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"mean_episode_reward\"", ",", "self", ".", "episode_stats", ".", "mean_reward", "(", ")", ")", "\n", "for", "name", ",", "val", "in", "zip", "(", "names_ops", ",", "values_ops", ")", ":", "\n", "                ", "logger", ".", "record_tabular", "(", "name", ",", "float", "(", "val", ")", ")", "\n", "", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.strip": [[20, 23], ["baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.seq_to_batch"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch"], ["def", "strip", "(", "var", ",", "nenvs", ",", "nsteps", ",", "flat", "=", "False", ")", ":", "\n", "    ", "vars", "=", "batch_to_seq", "(", "var", ",", "nenvs", ",", "nsteps", "+", "1", ",", "flat", ")", "\n", "return", "seq_to_batch", "(", "vars", "[", ":", "-", "1", "]", ",", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.q_retrace": [[24, 51], ["baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "range", "baselines.a2c.utils.seq_to_batch", "tensorflow.minimum", "baselines.a2c.utils.check_shape", "qrets.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "q_retrace", "(", "R", ",", "D", ",", "q_i", ",", "v", ",", "rho_i", ",", "nenvs", ",", "nsteps", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    Calculates q_retrace targets\n\n    :param R: Rewards\n    :param D: Dones\n    :param q_i: Q values for actions taken\n    :param v: V values\n    :param rho_i: Importance weight for each action\n    :return: Q_retrace values\n    \"\"\"", "\n", "rho_bar", "=", "batch_to_seq", "(", "tf", ".", "minimum", "(", "1.0", ",", "rho_i", ")", ",", "nenvs", ",", "nsteps", ",", "True", ")", "# list of len steps, shape [nenvs]", "\n", "rs", "=", "batch_to_seq", "(", "R", ",", "nenvs", ",", "nsteps", ",", "True", ")", "# list of len steps, shape [nenvs]", "\n", "ds", "=", "batch_to_seq", "(", "D", ",", "nenvs", ",", "nsteps", ",", "True", ")", "# list of len steps, shape [nenvs]", "\n", "q_is", "=", "batch_to_seq", "(", "q_i", ",", "nenvs", ",", "nsteps", ",", "True", ")", "\n", "vs", "=", "batch_to_seq", "(", "v", ",", "nenvs", ",", "nsteps", "+", "1", ",", "True", ")", "\n", "v_final", "=", "vs", "[", "-", "1", "]", "\n", "qret", "=", "v_final", "\n", "qrets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nsteps", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "check_shape", "(", "[", "qret", ",", "ds", "[", "i", "]", ",", "rs", "[", "i", "]", ",", "rho_bar", "[", "i", "]", ",", "q_is", "[", "i", "]", ",", "vs", "[", "i", "]", "]", ",", "[", "[", "nenvs", "]", "]", "*", "6", ")", "\n", "qret", "=", "rs", "[", "i", "]", "+", "gamma", "*", "qret", "*", "(", "1.0", "-", "ds", "[", "i", "]", ")", "\n", "qrets", ".", "append", "(", "qret", ")", "\n", "qret", "=", "(", "rho_bar", "[", "i", "]", "*", "(", "qret", "-", "q_is", "[", "i", "]", ")", ")", "+", "vs", "[", "i", "]", "\n", "", "qrets", "=", "qrets", "[", ":", ":", "-", "1", "]", "\n", "qret", "=", "seq_to_batch", "(", "qrets", ",", "flat", "=", "True", ")", "\n", "return", "qret", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.learn": [[314, 349], ["int", "print", "print", "tensorflow.reset_default_graph", "baselines.common.set_global_seeds", "len", "acer_simple.Model", "acer_simple.Runner", "acer_simple.Acer", "time.time", "range", "env.close", "locals", "baselines.acer.buffer.Buffer", "acer_simple.Acer.call", "baselines.acer.buffer.Buffer.has_atleast", "numpy.random.poisson", "range", "acer_simple.Acer.call"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Acer.call", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.has_atleast", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.acer_simple.Acer.call"], ["", "", "", "def", "learn", "(", "policy", ",", "env", ",", "seed", ",", "nsteps", "=", "20", ",", "nstack", "=", "4", ",", "total_timesteps", "=", "int", "(", "80e6", ")", ",", "q_coef", "=", "0.5", ",", "ent_coef", "=", "0.01", ",", "\n", "max_grad_norm", "=", "10", ",", "lr", "=", "7e-4", ",", "lrschedule", "=", "'linear'", ",", "rprop_epsilon", "=", "1e-5", ",", "rprop_alpha", "=", "0.99", ",", "gamma", "=", "0.99", ",", "\n", "log_interval", "=", "100", ",", "buffer_size", "=", "50000", ",", "replay_ratio", "=", "4", ",", "replay_start", "=", "10000", ",", "c", "=", "10.0", ",", "\n", "trust_region", "=", "True", ",", "alpha", "=", "0.99", ",", "delta", "=", "1", ")", ":", "\n", "    ", "print", "(", "\"Running Acer Simple\"", ")", "\n", "print", "(", "locals", "(", ")", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "set_global_seeds", "(", "seed", ")", "\n", "\n", "nenvs", "=", "env", ".", "num_envs", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "num_procs", "=", "len", "(", "env", ".", "remotes", ")", "# HACK", "\n", "model", "=", "Model", "(", "policy", "=", "policy", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "nenvs", "=", "nenvs", ",", "nsteps", "=", "nsteps", ",", "nstack", "=", "nstack", ",", "\n", "num_procs", "=", "num_procs", ",", "ent_coef", "=", "ent_coef", ",", "q_coef", "=", "q_coef", ",", "gamma", "=", "gamma", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "lr", "=", "lr", ",", "rprop_alpha", "=", "rprop_alpha", ",", "rprop_epsilon", "=", "rprop_epsilon", ",", "\n", "total_timesteps", "=", "total_timesteps", ",", "lrschedule", "=", "lrschedule", ",", "c", "=", "c", ",", "\n", "trust_region", "=", "trust_region", ",", "alpha", "=", "alpha", ",", "delta", "=", "delta", ")", "\n", "\n", "runner", "=", "Runner", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ",", "nstack", "=", "nstack", ")", "\n", "if", "replay_ratio", ">", "0", ":", "\n", "        ", "buffer", "=", "Buffer", "(", "env", "=", "env", ",", "nsteps", "=", "nsteps", ",", "nstack", "=", "nstack", ",", "size", "=", "buffer_size", ")", "\n", "", "else", ":", "\n", "        ", "buffer", "=", "None", "\n", "", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "acer", "=", "Acer", "(", "runner", ",", "model", ",", "buffer", ",", "log_interval", ")", "\n", "acer", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "for", "acer", ".", "steps", "in", "range", "(", "0", ",", "total_timesteps", ",", "nbatch", ")", ":", "#nbatch samples, 1 on_policy call and multiple off-policy calls", "\n", "        ", "acer", ".", "call", "(", "on_policy", "=", "True", ")", "\n", "if", "replay_ratio", ">", "0", "and", "buffer", ".", "has_atleast", "(", "replay_start", ")", ":", "\n", "            ", "n", "=", "np", ".", "random", ".", "poisson", "(", "replay_ratio", ")", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "                ", "acer", ".", "call", "(", "on_policy", "=", "False", ")", "# no simulation steps in this", "\n", "\n", "", "", "", "env", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.run_atari.train": [[7, 18], ["baselines.common.cmd_util.make_atari_env", "baselines.acer.acer_simple.learn", "baselines.common.cmd_util.make_atari_env.close", "print", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["from", "baselines", ".", "ppo2", ".", "policies", "import", "CnnPolicy", ",", "LstmPolicy", ",", "LnLstmPolicy", "\n", "\n", "def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ",", "policy", ",", "lrschedule", ",", "num_env", ")", ":", "\n", "    ", "if", "policy", "==", "'cnn'", ":", "\n", "        ", "policy_fn", "=", "CnnPolicy", "\n", "", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env", "=", "VecFrameStack", "(", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ")", ",", "4", ")", "\n", "learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ")", "\n", "env", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.run_atari.main": [[19, 28], ["baselines.common.cmd_util.atari_arg_parser", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.parse_args", "baselines.logger.configure", "run_atari.train"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train"], ["\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "help", "=", "'Policy architecture'", ",", "choices", "=", "[", "'cnn'", ",", "'lstm'", ",", "'lnlstm'", "]", ",", "default", "=", "'cnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "help", "=", "'Learning rate schedule'", ",", "choices", "=", "[", "'constant'", ",", "'linear'", "]", ",", "default", "=", "'constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "policy", "=", "args", ".", "policy", ",", "lrschedule", "=", "args", ".", "lrschedule", ",", "num_env", "=", "16", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2.Model.__init__": [[13, 87], ["tensorflow.get_default_session", "policy", "policy", "policy.pdtype.sample_placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "policy.pd.neglogp", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square", "tensorflow.exp", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.gradients", "list", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.global_variables_initializer().run", "policy.pd.entropy", "tensorflow.clip_by_value", "tensorflow.reduce_mean", "tensorflow.clip_by_value", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.to_float", "tensorflow.variable_scope", "tensorflow.trainable_variables", "tensorflow.clip_by_global_norm", "zip", "tensorflow.get_default_session.run", "joblib.dump", "joblib.load", "zip", "tensorflow.get_default_session.run", "tensorflow.maximum", "tensorflow.square", "tensorflow.greater", "tensorflow.get_default_session.run", "restores.append", "tensorflow.global_variables_initializer", "tensorflow.abs", "advs.mean", "advs.std", "p.assign"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "policy", ",", "ob_space", ",", "ac_space", ",", "nbatch_act", ",", "nbatch_train", ",", "\n", "nsteps", ",", "ent_coef", ",", "vf_coef", ",", "max_grad_norm", ")", ":", "\n", "        ", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "act_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch_act", ",", "1", ",", "reuse", "=", "False", ")", "\n", "train_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch_train", ",", "nsteps", ",", "reuse", "=", "True", ")", "\n", "\n", "A", "=", "train_model", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "ADV", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "R", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "OLDNEGLOGPAC", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "OLDVPRED", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "LR", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "CLIPRANGE", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "\n", "neglogpac", "=", "train_model", ".", "pd", ".", "neglogp", "(", "A", ")", "\n", "entropy", "=", "tf", ".", "reduce_mean", "(", "train_model", ".", "pd", ".", "entropy", "(", ")", ")", "\n", "\n", "vpred", "=", "train_model", ".", "vf", "\n", "vpredclipped", "=", "OLDVPRED", "+", "tf", ".", "clip_by_value", "(", "train_model", ".", "vf", "-", "OLDVPRED", ",", "-", "CLIPRANGE", ",", "CLIPRANGE", ")", "\n", "vf_losses1", "=", "tf", ".", "square", "(", "vpred", "-", "R", ")", "\n", "vf_losses2", "=", "tf", ".", "square", "(", "vpredclipped", "-", "R", ")", "\n", "vf_loss", "=", ".5", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "vf_losses1", ",", "vf_losses2", ")", ")", "\n", "ratio", "=", "tf", ".", "exp", "(", "OLDNEGLOGPAC", "-", "neglogpac", ")", "\n", "pg_losses", "=", "-", "ADV", "*", "ratio", "\n", "pg_losses2", "=", "-", "ADV", "*", "tf", ".", "clip_by_value", "(", "ratio", ",", "1.0", "-", "CLIPRANGE", ",", "1.0", "+", "CLIPRANGE", ")", "\n", "pg_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "pg_losses", ",", "pg_losses2", ")", ")", "\n", "approxkl", "=", ".5", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "neglogpac", "-", "OLDNEGLOGPAC", ")", ")", "\n", "clipfrac", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "to_float", "(", "tf", ".", "greater", "(", "tf", ".", "abs", "(", "ratio", "-", "1.0", ")", ",", "CLIPRANGE", ")", ")", ")", "\n", "loss", "=", "pg_loss", "-", "entropy", "*", "ent_coef", "+", "vf_loss", "*", "vf_coef", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ")", ":", "\n", "            ", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "params", ")", "\n", "if", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "grads", ",", "_grad_norm", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "max_grad_norm", ")", "\n", "", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "trainer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "LR", ",", "epsilon", "=", "1e-5", ")", "\n", "_train", "=", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "def", "train", "(", "lr", ",", "cliprange", ",", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ",", "states", "=", "None", ")", ":", "\n", "            ", "advs", "=", "returns", "-", "values", "\n", "advs", "=", "(", "advs", "-", "advs", ".", "mean", "(", ")", ")", "/", "(", "advs", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "td_map", "=", "{", "train_model", ".", "X", ":", "obs", ",", "A", ":", "actions", ",", "ADV", ":", "advs", ",", "R", ":", "returns", ",", "LR", ":", "lr", ",", "\n", "CLIPRANGE", ":", "cliprange", ",", "OLDNEGLOGPAC", ":", "neglogpacs", ",", "OLDVPRED", ":", "values", "}", "\n", "if", "states", "is", "not", "None", ":", "\n", "                ", "td_map", "[", "train_model", ".", "S", "]", "=", "states", "\n", "td_map", "[", "train_model", ".", "M", "]", "=", "masks", "\n", "", "return", "sess", ".", "run", "(", "\n", "[", "pg_loss", ",", "vf_loss", ",", "entropy", ",", "approxkl", ",", "clipfrac", ",", "_train", "]", ",", "\n", "td_map", "\n", ")", "[", ":", "-", "1", "]", "\n", "", "self", ".", "loss_names", "=", "[", "'policy_loss'", ",", "'value_loss'", ",", "'policy_entropy'", ",", "'approxkl'", ",", "'clipfrac'", "]", "\n", "\n", "def", "save", "(", "save_path", ")", ":", "\n", "            ", "ps", "=", "sess", ".", "run", "(", "params", ")", "\n", "joblib", ".", "dump", "(", "ps", ",", "save_path", ")", "\n", "\n", "", "def", "load", "(", "load_path", ")", ":", "\n", "            ", "loaded_params", "=", "joblib", ".", "load", "(", "load_path", ")", "\n", "restores", "=", "[", "]", "\n", "for", "p", ",", "loaded_p", "in", "zip", "(", "params", ",", "loaded_params", ")", ":", "\n", "                ", "restores", ".", "append", "(", "p", ".", "assign", "(", "loaded_p", ")", ")", "\n", "", "sess", ".", "run", "(", "restores", ")", "\n", "# If you want to load weights, also save/load observation scaling inside VecNormalize", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "train_model", "=", "train_model", "\n", "self", ".", "act_model", "=", "act_model", "\n", "self", ".", "step", "=", "act_model", ".", "step", "\n", "self", ".", "value", "=", "act_model", ".", "value", "\n", "self", ".", "initial_state", "=", "act_model", ".", "initial_state", "\n", "self", ".", "save", "=", "save", "\n", "self", ".", "load", "=", "load", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "sess", ")", "#pylint: disable=E1101", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2.Runner.__init__": [[90, 95], ["baselines.common.runners.AbstractEnvRunner.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "env", ",", "model", ",", "nsteps", ",", "gamma", ",", "lam", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ")", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "episodes_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2.Runner.run": [[96, 138], ["range", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "ppo2.Runner.model.value", "numpy.zeros_like", "numpy.zeros_like", "reversed", "ppo2.Runner.model.step", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "ppo2.Runner.env.step", "numpy.asarray.append", "range", "ppo2.Runner.obs.copy", "info.get", "map", "epinfos.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "mb_obs", ",", "mb_rewards", ",", "mb_actions", ",", "mb_values", ",", "mb_dones", ",", "mb_neglogpacs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "mb_states", "=", "self", ".", "states", "\n", "epinfos", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "nsteps", ")", ":", "\n", "            ", "actions", ",", "values", ",", "self", ".", "states", ",", "neglogpacs", "=", "self", ".", "model", ".", "step", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", "\n", "mb_obs", ".", "append", "(", "self", ".", "obs", ".", "copy", "(", ")", ")", "\n", "mb_actions", ".", "append", "(", "actions", ")", "\n", "mb_values", ".", "append", "(", "values", ")", "\n", "mb_neglogpacs", ".", "append", "(", "neglogpacs", ")", "\n", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "self", ".", "obs", "[", ":", "]", ",", "rewards", ",", "self", ".", "dones", ",", "infos", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "for", "info", "in", "infos", ":", "\n", "                ", "maybeepinfo", "=", "info", ".", "get", "(", "'episode'", ")", "\n", "if", "maybeepinfo", ":", "\n", "                    ", "self", ".", "episodes_count", "+=", "1", "\n", "epinfos", ".", "append", "(", "maybeepinfo", ")", "\n", "", "", "mb_rewards", ".", "append", "(", "rewards", ")", "\n", "#batch of steps to batch of rollouts", "\n", "", "mb_obs", "=", "np", ".", "asarray", "(", "mb_obs", ",", "dtype", "=", "self", ".", "obs", ".", "dtype", ")", "\n", "mb_rewards", "=", "np", ".", "asarray", "(", "mb_rewards", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mb_actions", "=", "np", ".", "asarray", "(", "mb_actions", ")", "\n", "mb_values", "=", "np", ".", "asarray", "(", "mb_values", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mb_neglogpacs", "=", "np", ".", "asarray", "(", "mb_neglogpacs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mb_dones", "=", "np", ".", "asarray", "(", "mb_dones", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "last_values", "=", "self", ".", "model", ".", "value", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", "\n", "#discount/bootstrap off value fn", "\n", "mb_returns", "=", "np", ".", "zeros_like", "(", "mb_rewards", ")", "\n", "mb_advs", "=", "np", ".", "zeros_like", "(", "mb_rewards", ")", "\n", "lastgaelam", "=", "0", "\n", "for", "t", "in", "reversed", "(", "range", "(", "self", ".", "nsteps", ")", ")", ":", "\n", "            ", "if", "t", "==", "self", ".", "nsteps", "-", "1", ":", "\n", "                ", "nextnonterminal", "=", "1.0", "-", "self", ".", "dones", "\n", "nextvalues", "=", "last_values", "\n", "", "else", ":", "\n", "                ", "nextnonterminal", "=", "1.0", "-", "mb_dones", "[", "t", "+", "1", "]", "\n", "nextvalues", "=", "mb_values", "[", "t", "+", "1", "]", "\n", "", "delta", "=", "mb_rewards", "[", "t", "]", "+", "self", ".", "gamma", "*", "nextvalues", "*", "nextnonterminal", "-", "mb_values", "[", "t", "]", "\n", "mb_advs", "[", "t", "]", "=", "lastgaelam", "=", "delta", "+", "self", ".", "gamma", "*", "self", ".", "lam", "*", "nextnonterminal", "*", "lastgaelam", "\n", "", "mb_returns", "=", "mb_advs", "+", "mb_values", "\n", "return", "(", "*", "map", "(", "sf01", ",", "(", "mb_obs", ",", "mb_returns", ",", "mb_dones", ",", "mb_actions", ",", "mb_values", ",", "mb_neglogpacs", ")", ")", ",", "\n", "mb_states", ",", "epinfos", ")", "\n", "# obs, returns, masks, actions, values, neglogpacs, states = runner.run()", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2.sf01": [[139, 145], ["arr.swapaxes().reshape", "arr.swapaxes"], "function", ["None"], ["", "", "def", "sf01", "(", "arr", ")", ":", "\n", "    ", "\"\"\"\n    swap and then flatten axes 0 and 1\n    \"\"\"", "\n", "s", "=", "arr", ".", "shape", "\n", "return", "arr", ".", "swapaxes", "(", "0", ",", "1", ")", ".", "reshape", "(", "s", "[", "0", "]", "*", "s", "[", "1", "]", ",", "*", "s", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2.constfn": [[146, 150], ["None"], "function", ["None"], ["", "def", "constfn", "(", "val", ")", ":", "\n", "    ", "def", "f", "(", "_", ")", ":", "\n", "        ", "return", "val", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2.learn": [[151, 244], ["isinstance", "isinstance", "int", "make_model", "ppo2.Runner", "collections.deque", "time.time", "range", "env.close", "ppo2.constfn", "callable", "ppo2.constfn", "callable", "ppo2.Model", "baselines.logger.get_dir", "make_model.load", "time.time", "constfn.", "constfn.", "ppo2.Runner.run", "collections.deque.extend", "numpy.mean", "time.time", "int", "open", "fh.write", "numpy.arange", "range", "numpy.arange", "numpy.arange().reshape", "range", "baselines.common.explained_variance", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "zip", "baselines.logger.dumpkvs", "baselines.logger.get_dir", "os.join", "os.makedirs", "os.makedirs", "os.join", "print", "make_model.save", "os.join", "cloudpickle.dumps", "numpy.random.shuffle", "range", "numpy.random.shuffle", "range", "float", "ppo2.safemean", "ppo2.safemean", "baselines.logger.logkv", "baselines.logger.get_dir", "baselines.logger.get_dir", "mblossvals.append", "numpy.arange", "flatinds[].ravel", "mblossvals.append", "make_model.train", "make_model.train"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.constfn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.constfn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.explained_variance", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.safemean", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.safemean", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train"], ["", "def", "learn", "(", "*", ",", "policy", ",", "env", ",", "nsteps", ",", "total_timesteps", ",", "ent_coef", ",", "lr", ",", "\n", "vf_coef", "=", "0.5", ",", "max_grad_norm", "=", "0.5", ",", "gamma", "=", "0.99", ",", "lam", "=", "0.95", ",", "\n", "log_interval", "=", "10", ",", "nminibatches", "=", "4", ",", "noptepochs", "=", "4", ",", "cliprange", "=", "0.2", ",", "\n", "save_interval", "=", "0", ",", "load_path", "=", "None", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "lr", ",", "float", ")", ":", "lr", "=", "constfn", "(", "lr", ")", "\n", "else", ":", "assert", "callable", "(", "lr", ")", "\n", "if", "isinstance", "(", "cliprange", ",", "float", ")", ":", "cliprange", "=", "constfn", "(", "cliprange", ")", "\n", "else", ":", "assert", "callable", "(", "cliprange", ")", "\n", "total_timesteps", "=", "int", "(", "total_timesteps", ")", "\n", "\n", "nenvs", "=", "env", ".", "num_envs", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "nbatch_train", "=", "nbatch", "//", "nminibatches", "\n", "\n", "make_model", "=", "lambda", ":", "Model", "(", "policy", "=", "policy", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "nbatch_act", "=", "nenvs", ",", "nbatch_train", "=", "nbatch_train", ",", "\n", "nsteps", "=", "nsteps", ",", "ent_coef", "=", "ent_coef", ",", "vf_coef", "=", "vf_coef", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "if", "save_interval", "and", "logger", ".", "get_dir", "(", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "with", "open", "(", "osp", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'make_model.pkl'", ")", ",", "'wb'", ")", "as", "fh", ":", "\n", "            ", "fh", ".", "write", "(", "cloudpickle", ".", "dumps", "(", "make_model", ")", ")", "\n", "", "", "model", "=", "make_model", "(", ")", "\n", "if", "load_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load", "(", "load_path", ")", "\n", "", "runner", "=", "Runner", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ",", "gamma", "=", "gamma", ",", "lam", "=", "lam", ")", "\n", "\n", "epinfobuf", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "tfirststart", "=", "time", ".", "time", "(", ")", "\n", "\n", "nupdates", "=", "total_timesteps", "//", "nbatch", "\n", "for", "update", "in", "range", "(", "1", ",", "nupdates", "+", "1", ")", ":", "\n", "        ", "assert", "nbatch", "%", "nminibatches", "==", "0", "\n", "nbatch_train", "=", "nbatch", "//", "nminibatches", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "frac", "=", "1.0", "-", "(", "update", "-", "1.0", ")", "/", "nupdates", "\n", "lrnow", "=", "lr", "(", "frac", ")", "\n", "cliprangenow", "=", "cliprange", "(", "frac", ")", "\n", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ",", "states", ",", "epinfos", "=", "runner", ".", "run", "(", ")", "#pylint: disable=E0632", "\n", "epinfobuf", ".", "extend", "(", "epinfos", ")", "\n", "mblossvals", "=", "[", "]", "\n", "if", "states", "is", "None", ":", "# nonrecurrent version", "\n", "            ", "inds", "=", "np", ".", "arange", "(", "nbatch", ")", "\n", "for", "_", "in", "range", "(", "noptepochs", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "for", "start", "in", "range", "(", "0", ",", "nbatch", ",", "nbatch_train", ")", ":", "\n", "                    ", "end", "=", "start", "+", "nbatch_train", "\n", "mbinds", "=", "inds", "[", "start", ":", "end", "]", "\n", "slices", "=", "(", "arr", "[", "mbinds", "]", "for", "arr", "in", "(", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ")", ")", "\n", "mblossvals", ".", "append", "(", "model", ".", "train", "(", "lrnow", ",", "cliprangenow", ",", "*", "slices", ")", ")", "\n", "", "", "", "else", ":", "# recurrent version", "\n", "            ", "assert", "nenvs", "%", "nminibatches", "==", "0", "\n", "envsperbatch", "=", "nenvs", "//", "nminibatches", "\n", "envinds", "=", "np", ".", "arange", "(", "nenvs", ")", "\n", "flatinds", "=", "np", ".", "arange", "(", "nenvs", "*", "nsteps", ")", ".", "reshape", "(", "nenvs", ",", "nsteps", ")", "\n", "envsperbatch", "=", "nbatch_train", "//", "nsteps", "\n", "for", "_", "in", "range", "(", "noptepochs", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "envinds", ")", "\n", "for", "start", "in", "range", "(", "0", ",", "nenvs", ",", "envsperbatch", ")", ":", "\n", "                    ", "end", "=", "start", "+", "envsperbatch", "\n", "mbenvinds", "=", "envinds", "[", "start", ":", "end", "]", "\n", "mbflatinds", "=", "flatinds", "[", "mbenvinds", "]", ".", "ravel", "(", ")", "\n", "slices", "=", "(", "arr", "[", "mbflatinds", "]", "for", "arr", "in", "(", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ")", ")", "\n", "mbstates", "=", "states", "[", "mbenvinds", "]", "\n", "mblossvals", ".", "append", "(", "model", ".", "train", "(", "lrnow", ",", "cliprangenow", ",", "*", "slices", ",", "mbstates", ")", ")", "\n", "\n", "", "", "", "lossvals", "=", "np", ".", "mean", "(", "mblossvals", ",", "axis", "=", "0", ")", "\n", "tnow", "=", "time", ".", "time", "(", ")", "\n", "fps", "=", "int", "(", "nbatch", "/", "(", "tnow", "-", "tstart", ")", ")", "\n", "if", "update", "%", "log_interval", "==", "0", "or", "update", "==", "1", ":", "\n", "            ", "ev", "=", "explained_variance", "(", "values", ",", "returns", ")", "\n", "logger", ".", "logkv", "(", "\"serial_timesteps\"", ",", "update", "*", "nsteps", ")", "\n", "logger", ".", "logkv", "(", "\"nupdates\"", ",", "update", ")", "\n", "logger", ".", "logkv", "(", "\"total_timesteps\"", ",", "update", "*", "nbatch", ")", "\n", "logger", ".", "logkv", "(", "\"fps\"", ",", "fps", ")", "\n", "logger", ".", "logkv", "(", "\"explained_variance\"", ",", "float", "(", "ev", ")", ")", "\n", "logger", ".", "logkv", "(", "'eprewmean'", ",", "safemean", "(", "[", "epinfo", "[", "'r'", "]", "for", "epinfo", "in", "epinfobuf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "'eplenmean'", ",", "safemean", "(", "[", "epinfo", "[", "'l'", "]", "for", "epinfo", "in", "epinfobuf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "'time_elapsed'", ",", "tnow", "-", "tfirststart", ")", "\n", "logger", ".", "logkv", "(", "'episodes'", ",", "runner", ".", "episodes_count", ")", "\n", "for", "(", "lossval", ",", "lossname", ")", "in", "zip", "(", "lossvals", ",", "model", ".", "loss_names", ")", ":", "\n", "                ", "logger", ".", "logkv", "(", "lossname", ",", "lossval", ")", "\n", "", "logger", ".", "dumpkvs", "(", ")", "\n", "", "if", "save_interval", "and", "(", "update", "%", "save_interval", "==", "0", "or", "update", "==", "1", ")", "and", "logger", ".", "get_dir", "(", ")", ":", "\n", "            ", "checkdir", "=", "osp", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "checkdir", ",", "exist_ok", "=", "True", ")", "\n", "savepath", "=", "osp", ".", "join", "(", "checkdir", ",", "'%.5i'", "%", "update", ")", "\n", "print", "(", "'Saving to'", ",", "savepath", ")", "\n", "model", ".", "save", "(", "savepath", ")", "\n", "", "", "env", ".", "close", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2.safemean": [[245, 247], ["numpy.mean", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "def", "safemean", "(", "xs", ")", ":", "\n", "    ", "return", "np", ".", "nan", "if", "len", "(", "xs", ")", "==", "0", "else", "np", ".", "mean", "(", "xs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.run_mujoco_sil.train": [[7, 45], ["tf.ConfigProto", "tf.Session().__enter__", "DummyVecEnv", "VecNormalize", "set_global_seeds", "ppo2_sil.learn", "gym.make", "baselines.bench.Monitor", "tf.Session", "baselines.logger.get_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ",", "lr", ",", "\n", "sil_update", ",", "sil_value", ",", "sil_alpha", ",", "sil_beta", ")", ":", "\n", "    ", "from", "baselines", ".", "common", "import", "set_global_seeds", "\n", "from", "baselines", ".", "common", ".", "vec_env", ".", "vec_normalize", "import", "VecNormalize", "\n", "from", "baselines", ".", "ppo2", "import", "ppo2_sil", "\n", "from", "baselines", ".", "ppo2", ".", "policies", "import", "MlpPolicy", "\n", "import", "gym", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "baselines", ".", "common", ".", "vec_env", ".", "dummy_vec_env", "import", "DummyVecEnv", "\n", "ncpu", "=", "1", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "\n", "intra_op_parallelism_threads", "=", "ncpu", ",", "\n", "inter_op_parallelism_threads", "=", "ncpu", ")", "\n", "tf", ".", "Session", "(", "config", "=", "config", ")", ".", "__enter__", "(", ")", "\n", "\n", "def", "make_env", "(", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", "=", "bench", ".", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", ",", "allow_early_resets", "=", "True", ")", "\n", "return", "env", "\n", "\n", "", "env", "=", "DummyVecEnv", "(", "[", "make_env", "]", ")", "\n", "env", "=", "VecNormalize", "(", "env", ")", "\n", "\n", "set_global_seeds", "(", "seed", ")", "\n", "policy", "=", "MlpPolicy", "\n", "model", "=", "ppo2_sil", ".", "learn", "(", "policy", "=", "policy", ",", "env", "=", "env", ",", "nsteps", "=", "2048", ",", "nminibatches", "=", "32", ",", "\n", "lam", "=", "0.95", ",", "gamma", "=", "0.99", ",", "noptepochs", "=", "10", ",", "log_interval", "=", "1", ",", "\n", "ent_coef", "=", "0.0", ",", "\n", "lr", "=", "lr", ",", "\n", "cliprange", "=", "0.2", ",", "\n", "total_timesteps", "=", "num_timesteps", ",", "\n", "sil_update", "=", "sil_update", ",", "\n", "sil_value", "=", "sil_value", ",", "\n", "sil_alpha", "=", "sil_alpha", ",", "\n", "sil_beta", "=", "sil_beta", ",", "\n", ")", "\n", "\n", "return", "model", ",", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.run_mujoco_sil.main": [[47, 71], ["baselines.common.cmd_util.mujoco_arg_parser", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.parse_args", "baselines.logger.configure", "run_mujoco_sil.train", "baselines.logger.log", "numpy.zeros", "env.reset", "env.render", "model.step", "env.step"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.mujoco_arg_parser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "mujoco_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sil-update'", ",", "type", "=", "float", ",", "default", "=", "10", ",", "help", "=", "\"Number of updates per iteration\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sil-value'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"Weight for value update\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sil-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.6", ",", "help", "=", "\"Alpha for prioritized replay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sil-beta'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"Beta for prioritized replay\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "model", ",", "env", "=", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "sil_update", "=", "args", ".", "sil_update", ",", "sil_value", "=", "args", ".", "sil_value", ",", "\n", "sil_alpha", "=", "args", ".", "sil_alpha", ",", "sil_beta", "=", "args", ".", "sil_beta", ")", "\n", "\n", "if", "args", ".", "play", ":", "\n", "        ", "logger", ".", "log", "(", "\"Running trained model\"", ")", "\n", "obs", "=", "np", ".", "zeros", "(", "(", "env", ".", "num_envs", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ")", "\n", "obs", "[", ":", "]", "=", "env", ".", "reset", "(", ")", "\n", "while", "True", ":", "\n", "            ", "actions", "=", "model", ".", "step", "(", "obs", ")", "[", "0", "]", "\n", "obs", "[", ":", "]", "=", "env", ".", "step", "(", "actions", ")", "[", "0", "]", "\n", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.policies.LnLstmPolicy.__init__": [[21, 53], ["baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.distributions.make_pdtype", "policies.LnLstmPolicy.pd.sample", "policies.LnLstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.lnlstm", "baselines.a2c.utils.seq_to_batch", "baselines.a2c.utils.fc", "policies.LnLstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lnlstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "class", "LnLstmPolicy", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lnlstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.policies.LstmPolicy.__init__": [[56, 89], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "policies.LstmPolicy.pd.sample", "policies.LstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.batch_to_seq", "baselines.a2c.utils.lstm", "baselines.a2c.utils.seq_to_batch", "baselines.a2c.utils.fc", "policies.LstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "X", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.policies.CnnPolicy.__init__": [[92, 115], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "policies.CnnPolicy.pd.sample", "policies.CnnPolicy.pd.neglogp", "tensorflow.variable_scope", "policies.nature_cnn", "policies.CnnPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "baselines.a2c.utils.fc"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ",", "**", "conv_kwargs", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "#X, processed_x = observation_input(ob_space, nbatch)", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "None", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ",", "**", "conv_kwargs", ")", "\n", "vf", "=", "fc", "(", "h", ",", "'v'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "self", ".", "entropy", "=", "cat_entropy", "(", "self", ".", "pi", ")", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "def", "neg_log_prob", "(", "actions", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.policies.MlpPolicy.__init__": [[117, 152], ["baselines.common.distributions.make_pdtype", "policies.MlpPolicy.pd.sample", "policies.MlpPolicy.pd.neglogp", "policies.MlpPolicy.pd.entropy", "tensorflow.variable_scope", "baselines.common.input.observation_input", "tensorflow.layers.flatten", "activ", "activ", "activ", "activ", "policies.MlpPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "policies.MlpPolicy.pd.neglogp", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "baselines.a2c.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["logits", "=", "self", ".", "pi", ",", "labels", "=", "actions", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "neg_log_prob", "=", "neg_log_prob", "\n", "\n", "", "", "class", "MlpPolicy", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "activ", "=", "tf", ".", "tanh", "\n", "processed_x", "=", "tf", ".", "layers", ".", "flatten", "(", "processed_x", ")", "\n", "pi_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'pi_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "pi_h2", "=", "activ", "(", "fc", "(", "pi_h1", ",", "'pi_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'vf_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h2", "=", "activ", "(", "fc", "(", "vf_h1", ",", "'vf_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf", "=", "fc", "(", "vf_h2", ",", "'vf'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "pi_h2", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.policies.nature_cnn": [[7, 19], ["activ", "activ", "activ", "baselines.a2c.utils.conv_to_fc", "activ", "tensorflow.cast", "baselines.a2c.utils.conv", "baselines.a2c.utils.conv", "baselines.a2c.utils.conv", "baselines.a2c.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv_to_fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["\n", "def", "nature_cnn", "(", "unscaled_images", ",", "**", "conv_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    CNN from Nature paper.\n    \"\"\"", "\n", "scaled_images", "=", "tf", ".", "cast", "(", "unscaled_images", ",", "tf", ".", "float32", ")", "/", "255.", "\n", "activ", "=", "tf", ".", "nn", ".", "relu", "\n", "h", "=", "activ", "(", "conv", "(", "scaled_images", ",", "'c1'", ",", "nf", "=", "32", ",", "rf", "=", "8", ",", "stride", "=", "4", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "**", "conv_kwargs", ")", ")", "\n", "h2", "=", "activ", "(", "conv", "(", "h", ",", "'c2'", ",", "nf", "=", "64", ",", "rf", "=", "4", ",", "stride", "=", "2", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "activ", "(", "conv", "(", "h2", ",", "'c3'", ",", "nf", "=", "64", ",", "rf", "=", "3", ",", "stride", "=", "1", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "conv_to_fc", "(", "h3", ")", "\n", "return", "activ", "(", "fc", "(", "h3", ",", "'fc1'", ",", "nh", "=", "512", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.Model.__init__": [[14, 107], ["tensorflow.get_default_session", "policy", "policy", "policy", "policy.pdtype.sample_placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "policy.pd.neglogp", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square", "tensorflow.exp", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.gradients", "list", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.apply_gradients", "baselines.common.self_imitation.SelfImitation", "ppo2_sil.Model.sil.set_loss_weight", "ppo2_sil.Model.sil.build_train_op", "tensorflow.global_variables_initializer().run", "policy.pd.entropy", "tensorflow.clip_by_value", "tensorflow.reduce_mean", "tensorflow.clip_by_value", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.to_float", "tensorflow.variable_scope", "tensorflow.trainable_variables", "tensorflow.clip_by_global_norm", "zip", "ppo2_sil.Model.sil.train", "tensorflow.get_default_session.run", "joblib.dump", "joblib.load", "zip", "tensorflow.get_default_session.run", "tensorflow.maximum", "tensorflow.square", "tensorflow.greater", "tensorflow.get_default_session.run", "restores.append", "tensorflow.global_variables_initializer", "tensorflow.abs", "advs.mean", "advs.std", "p.assign"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.set_loss_weight", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.build_train_op", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "policy", ",", "ob_space", ",", "ac_space", ",", "nbatch_act", ",", "nbatch_train", ",", "\n", "nsteps", ",", "ent_coef", ",", "vf_coef", ",", "max_grad_norm", ",", "gamma", "=", "0.99", ",", "\n", "sil_update", "=", "1", ",", "fn_reward", "=", "None", ",", "fn_obs", "=", "None", ",", "\n", "sil_value", "=", "0.01", ",", "sil_alpha", "=", "0.6", ",", "sil_beta", "=", "0.1", ")", ":", "\n", "        ", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "act_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch_act", ",", "1", ",", "reuse", "=", "False", ")", "\n", "train_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch_train", ",", "nsteps", ",", "reuse", "=", "True", ")", "\n", "sil_model", "=", "policy", "(", "sess", ",", "ob_space", ",", "ac_space", ",", "None", ",", "None", ",", "reuse", "=", "True", ")", "\n", "\n", "A", "=", "train_model", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "ADV", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "R", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "OLDNEGLOGPAC", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "OLDVPRED", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "LR", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "CLIPRANGE", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "\n", "neglogpac", "=", "train_model", ".", "pd", ".", "neglogp", "(", "A", ")", "\n", "entropy", "=", "tf", ".", "reduce_mean", "(", "train_model", ".", "pd", ".", "entropy", "(", ")", ")", "\n", "\n", "vpred", "=", "train_model", ".", "vf", "\n", "vpredclipped", "=", "OLDVPRED", "+", "tf", ".", "clip_by_value", "(", "train_model", ".", "vf", "-", "OLDVPRED", ",", "-", "CLIPRANGE", ",", "CLIPRANGE", ")", "\n", "vf_losses1", "=", "tf", ".", "square", "(", "vpred", "-", "R", ")", "\n", "vf_losses2", "=", "tf", ".", "square", "(", "vpredclipped", "-", "R", ")", "\n", "vf_loss", "=", ".5", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "vf_losses1", ",", "vf_losses2", ")", ")", "\n", "ratio", "=", "tf", ".", "exp", "(", "OLDNEGLOGPAC", "-", "neglogpac", ")", "\n", "pg_losses", "=", "-", "ADV", "*", "ratio", "\n", "pg_losses2", "=", "-", "ADV", "*", "tf", ".", "clip_by_value", "(", "ratio", ",", "1.0", "-", "CLIPRANGE", ",", "1.0", "+", "CLIPRANGE", ")", "\n", "pg_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "pg_losses", ",", "pg_losses2", ")", ")", "\n", "approxkl", "=", ".5", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "neglogpac", "-", "OLDNEGLOGPAC", ")", ")", "\n", "clipfrac", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "to_float", "(", "tf", ".", "greater", "(", "tf", ".", "abs", "(", "ratio", "-", "1.0", ")", ",", "CLIPRANGE", ")", ")", ")", "\n", "loss", "=", "pg_loss", "-", "entropy", "*", "ent_coef", "+", "vf_loss", "*", "vf_coef", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ")", ":", "\n", "            ", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "params", ")", "\n", "if", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "grads", ",", "_grad_norm", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "max_grad_norm", ")", "\n", "", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "trainer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "LR", ",", "epsilon", "=", "1e-5", ")", "\n", "_train", "=", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "def", "train", "(", "lr", ",", "cliprange", ",", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ",", "states", "=", "None", ")", ":", "\n", "            ", "advs", "=", "returns", "-", "values", "\n", "advs", "=", "(", "advs", "-", "advs", ".", "mean", "(", ")", ")", "/", "(", "advs", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "td_map", "=", "{", "train_model", ".", "X", ":", "obs", ",", "A", ":", "actions", ",", "ADV", ":", "advs", ",", "R", ":", "returns", ",", "LR", ":", "lr", ",", "\n", "CLIPRANGE", ":", "cliprange", ",", "OLDNEGLOGPAC", ":", "neglogpacs", ",", "OLDVPRED", ":", "values", "}", "\n", "if", "states", "is", "not", "None", ":", "\n", "                ", "td_map", "[", "train_model", ".", "S", "]", "=", "states", "\n", "td_map", "[", "train_model", ".", "M", "]", "=", "masks", "\n", "", "return", "sess", ".", "run", "(", "\n", "[", "pg_loss", ",", "vf_loss", ",", "entropy", ",", "approxkl", ",", "clipfrac", ",", "_train", "]", ",", "\n", "td_map", "\n", ")", "[", ":", "-", "1", "]", "\n", "", "self", ".", "loss_names", "=", "[", "'policy_loss'", ",", "'value_loss'", ",", "'policy_entropy'", ",", "'approxkl'", ",", "'clipfrac'", "]", "\n", "\n", "# Self-Imitation learning", "\n", "self", ".", "sil", "=", "SelfImitation", "(", "sil_model", ".", "X", ",", "sil_model", ".", "vf", ",", "\n", "sil_model", ".", "entropy", ",", "sil_model", ".", "value", ",", "sil_model", ".", "neg_log_prob", ",", "\n", "ac_space", ",", "fn_reward", "=", "fn_reward", ",", "fn_obs", "=", "fn_obs", ",", "\n", "n_env", "=", "nbatch_act", ",", "n_update", "=", "sil_update", ",", "\n", "w_value", "=", "sil_value", ",", "\n", "w_entropy", "=", "ent_coef", ",", "gamma", "=", "gamma", ",", "\n", "max_steps", "=", "50000", ",", "max_nlogp", "=", "100", ",", "\n", "alpha", "=", "sil_alpha", ",", "beta", "=", "sil_beta", ")", "\n", "\n", "self", ".", "sil", ".", "set_loss_weight", "(", "0.1", ")", "\n", "self", ".", "sil", ".", "build_train_op", "(", "params", ",", "trainer", ",", "LR", ")", "\n", "def", "sil_train", "(", "cur_lr", ")", ":", "\n", "            ", "return", "self", ".", "sil", ".", "train", "(", "sess", ",", "cur_lr", ")", "\n", "\n", "", "def", "save", "(", "save_path", ")", ":", "\n", "            ", "ps", "=", "sess", ".", "run", "(", "params", ")", "\n", "joblib", ".", "dump", "(", "ps", ",", "save_path", ")", "\n", "\n", "", "def", "load", "(", "load_path", ")", ":", "\n", "            ", "loaded_params", "=", "joblib", ".", "load", "(", "load_path", ")", "\n", "restores", "=", "[", "]", "\n", "for", "p", ",", "loaded_p", "in", "zip", "(", "params", ",", "loaded_params", ")", ":", "\n", "                ", "restores", ".", "append", "(", "p", ".", "assign", "(", "loaded_p", ")", ")", "\n", "", "sess", ".", "run", "(", "restores", ")", "\n", "# If you want to load weights, also save/load observation scaling inside VecNormalize", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "train_model", "=", "train_model", "\n", "self", ".", "sil_train", "=", "sil_train", "\n", "self", ".", "act_model", "=", "act_model", "\n", "self", ".", "step", "=", "act_model", ".", "step", "\n", "self", ".", "value", "=", "act_model", ".", "value", "\n", "self", ".", "initial_state", "=", "act_model", ".", "initial_state", "\n", "self", ".", "save", "=", "save", "\n", "self", ".", "load", "=", "load", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "sess", ")", "#pylint: disable=E1101", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.Runner.__init__": [[110, 115], ["baselines.common.runners.AbstractEnvRunner.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "env", ",", "model", ",", "nsteps", ",", "gamma", ",", "lam", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ")", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "episodes_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.Runner.run": [[116, 161], ["range", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "ppo2_sil.Runner.model.value", "numpy.zeros_like", "numpy.zeros_like", "reversed", "ppo2_sil.Runner.model.step", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "ppo2_sil.Runner.env.raw_obs.copy", "ppo2_sil.Runner.env.step", "numpy.asarray.append", "ppo2_sil.Runner.model.sil.step", "range", "ppo2_sil.Runner.obs.copy", "info.get", "ppo2_sil.Runner.dones.copy", "map", "epinfos.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "mb_obs", ",", "mb_rewards", ",", "mb_actions", ",", "mb_values", ",", "mb_dones", ",", "mb_neglogpacs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "mb_states", "=", "self", ".", "states", "\n", "epinfos", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "nsteps", ")", ":", "\n", "            ", "actions", ",", "values", ",", "self", ".", "states", ",", "neglogpacs", "=", "self", ".", "model", ".", "step", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", "\n", "mb_obs", ".", "append", "(", "self", ".", "obs", ".", "copy", "(", ")", ")", "\n", "mb_actions", ".", "append", "(", "actions", ")", "\n", "mb_values", ".", "append", "(", "values", ")", "\n", "mb_neglogpacs", ".", "append", "(", "neglogpacs", ")", "\n", "mb_dones", ".", "append", "(", "self", ".", "dones", ")", "\n", "last_obs", "=", "self", ".", "env", ".", "raw_obs", ".", "copy", "(", ")", "\n", "self", ".", "obs", "[", ":", "]", ",", "rewards", ",", "self", ".", "dones", ",", "infos", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "for", "info", "in", "infos", ":", "\n", "                ", "maybeepinfo", "=", "info", ".", "get", "(", "'episode'", ")", "\n", "if", "maybeepinfo", ":", "\n", "                    ", "self", ".", "episodes_count", "+=", "1", "\n", "epinfos", ".", "append", "(", "maybeepinfo", ")", "\n", "", "", "mb_rewards", ".", "append", "(", "rewards", ")", "\n", "self", ".", "model", ".", "sil", ".", "step", "(", "last_obs", ",", "actions", ",", "self", ".", "env", ".", "raw_reward", ",", "\n", "self", ".", "dones", ".", "copy", "(", ")", ")", "\n", "#batch of steps to batch of rollouts", "\n", "", "mb_obs", "=", "np", ".", "asarray", "(", "mb_obs", ",", "dtype", "=", "self", ".", "obs", ".", "dtype", ")", "\n", "mb_rewards", "=", "np", ".", "asarray", "(", "mb_rewards", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mb_actions", "=", "np", ".", "asarray", "(", "mb_actions", ")", "\n", "mb_values", "=", "np", ".", "asarray", "(", "mb_values", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mb_neglogpacs", "=", "np", ".", "asarray", "(", "mb_neglogpacs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mb_dones", "=", "np", ".", "asarray", "(", "mb_dones", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "last_values", "=", "self", ".", "model", ".", "value", "(", "self", ".", "obs", ",", "self", ".", "states", ",", "self", ".", "dones", ")", "\n", "#discount/bootstrap off value fn", "\n", "mb_returns", "=", "np", ".", "zeros_like", "(", "mb_rewards", ")", "\n", "mb_advs", "=", "np", ".", "zeros_like", "(", "mb_rewards", ")", "\n", "lastgaelam", "=", "0", "\n", "for", "t", "in", "reversed", "(", "range", "(", "self", ".", "nsteps", ")", ")", ":", "\n", "            ", "if", "t", "==", "self", ".", "nsteps", "-", "1", ":", "\n", "                ", "nextnonterminal", "=", "1.0", "-", "self", ".", "dones", "\n", "nextvalues", "=", "last_values", "\n", "", "else", ":", "\n", "                ", "nextnonterminal", "=", "1.0", "-", "mb_dones", "[", "t", "+", "1", "]", "\n", "nextvalues", "=", "mb_values", "[", "t", "+", "1", "]", "\n", "", "delta", "=", "mb_rewards", "[", "t", "]", "+", "self", ".", "gamma", "*", "nextvalues", "*", "nextnonterminal", "-", "mb_values", "[", "t", "]", "\n", "mb_advs", "[", "t", "]", "=", "lastgaelam", "=", "delta", "+", "self", ".", "gamma", "*", "self", ".", "lam", "*", "nextnonterminal", "*", "lastgaelam", "\n", "", "mb_returns", "=", "mb_advs", "+", "mb_values", "\n", "return", "(", "*", "map", "(", "sf01", ",", "(", "mb_obs", ",", "mb_returns", ",", "mb_dones", ",", "mb_actions", ",", "mb_values", ",", "mb_neglogpacs", ")", ")", ",", "\n", "mb_states", ",", "epinfos", ")", "\n", "# obs, returns, masks, actions, values, neglogpacs, states = runner.run()", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.sf01": [[162, 168], ["arr.swapaxes().reshape", "arr.swapaxes"], "function", ["None"], ["", "", "def", "sf01", "(", "arr", ")", ":", "\n", "    ", "\"\"\"\n    swap and then flatten axes 0 and 1\n    \"\"\"", "\n", "s", "=", "arr", ".", "shape", "\n", "return", "arr", ".", "swapaxes", "(", "0", ",", "1", ")", ".", "reshape", "(", "s", "[", "0", "]", "*", "s", "[", "1", "]", ",", "*", "s", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.constfn": [[169, 173], ["None"], "function", ["None"], ["", "def", "constfn", "(", "val", ")", ":", "\n", "    ", "def", "f", "(", "_", ")", ":", "\n", "        ", "return", "val", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.learn": [[174, 278], ["isinstance", "isinstance", "int", "make_model", "ppo2_sil.Runner", "collections.deque", "time.time", "range", "env.close", "ppo2_sil.constfn", "callable", "ppo2_sil.constfn", "callable", "ppo2_sil.Model", "baselines.logger.get_dir", "make_model.load", "time.time", "constfn.", "constfn.", "ppo2_sil.Runner.run", "collections.deque.extend", "numpy.mean", "time.time", "int", "open", "fh.write", "numpy.arange", "range", "make_model.sil_train", "numpy.arange", "numpy.arange().reshape", "range", "baselines.common.explained_variance", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "zip", "baselines.logger.dumpkvs", "baselines.logger.get_dir", "os.join", "os.makedirs", "os.makedirs", "os.join", "print", "make_model.save", "os.join", "cloudpickle.dumps", "numpy.random.shuffle", "range", "numpy.random.shuffle", "range", "float", "ppo2_sil.safemean", "ppo2_sil.safemean", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.get_dir", "baselines.logger.get_dir", "mblossvals.append", "numpy.arange", "flatinds[].ravel", "mblossvals.append", "make_model.train", "make_model.train"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.constfn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.constfn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.explained_variance", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.safemean", "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.safemean", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train"], ["", "def", "learn", "(", "*", ",", "policy", ",", "env", ",", "nsteps", ",", "total_timesteps", ",", "ent_coef", ",", "lr", ",", "\n", "vf_coef", "=", "0.5", ",", "max_grad_norm", "=", "0.5", ",", "gamma", "=", "0.99", ",", "lam", "=", "0.95", ",", "\n", "log_interval", "=", "10", ",", "nminibatches", "=", "4", ",", "noptepochs", "=", "4", ",", "cliprange", "=", "0.2", ",", "\n", "save_interval", "=", "0", ",", "load_path", "=", "None", ",", "\n", "sil_update", "=", "10", ",", "sil_value", "=", "0.01", ",", "sil_alpha", "=", "0.6", ",", "sil_beta", "=", "0.1", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "lr", ",", "float", ")", ":", "lr", "=", "constfn", "(", "lr", ")", "\n", "else", ":", "assert", "callable", "(", "lr", ")", "\n", "if", "isinstance", "(", "cliprange", ",", "float", ")", ":", "cliprange", "=", "constfn", "(", "cliprange", ")", "\n", "else", ":", "assert", "callable", "(", "cliprange", ")", "\n", "total_timesteps", "=", "int", "(", "total_timesteps", ")", "\n", "\n", "nenvs", "=", "env", ".", "num_envs", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "nbatch", "=", "nenvs", "*", "nsteps", "\n", "nbatch_train", "=", "nbatch", "//", "nminibatches", "\n", "\n", "make_model", "=", "lambda", ":", "Model", "(", "policy", "=", "policy", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "nbatch_act", "=", "nenvs", ",", "nbatch_train", "=", "nbatch_train", ",", "\n", "nsteps", "=", "nsteps", ",", "ent_coef", "=", "ent_coef", ",", "vf_coef", "=", "vf_coef", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "\n", "sil_update", "=", "sil_update", ",", "\n", "sil_value", "=", "sil_value", ",", "\n", "sil_alpha", "=", "sil_alpha", ",", "\n", "sil_beta", "=", "sil_beta", ",", "\n", "fn_reward", "=", "env", ".", "process_reward", ",", "\n", "fn_obs", "=", "env", ".", "process_obs", ",", "\n", ")", "\n", "if", "save_interval", "and", "logger", ".", "get_dir", "(", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "with", "open", "(", "osp", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'make_model.pkl'", ")", ",", "'wb'", ")", "as", "fh", ":", "\n", "            ", "fh", ".", "write", "(", "cloudpickle", ".", "dumps", "(", "make_model", ")", ")", "\n", "", "", "model", "=", "make_model", "(", ")", "\n", "if", "load_path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load", "(", "load_path", ")", "\n", "", "runner", "=", "Runner", "(", "env", "=", "env", ",", "model", "=", "model", ",", "nsteps", "=", "nsteps", ",", "gamma", "=", "gamma", ",", "lam", "=", "lam", ")", "\n", "\n", "epinfobuf", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "tfirststart", "=", "time", ".", "time", "(", ")", "\n", "\n", "nupdates", "=", "total_timesteps", "//", "nbatch", "\n", "for", "update", "in", "range", "(", "1", ",", "nupdates", "+", "1", ")", ":", "\n", "        ", "assert", "nbatch", "%", "nminibatches", "==", "0", "\n", "nbatch_train", "=", "nbatch", "//", "nminibatches", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "frac", "=", "1.0", "-", "(", "update", "-", "1.0", ")", "/", "nupdates", "\n", "lrnow", "=", "lr", "(", "frac", ")", "\n", "cliprangenow", "=", "cliprange", "(", "frac", ")", "\n", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ",", "states", ",", "epinfos", "=", "runner", ".", "run", "(", ")", "#pylint: disable=E0632", "\n", "epinfobuf", ".", "extend", "(", "epinfos", ")", "\n", "mblossvals", "=", "[", "]", "\n", "if", "states", "is", "None", ":", "# nonrecurrent version", "\n", "            ", "inds", "=", "np", ".", "arange", "(", "nbatch", ")", "\n", "for", "_", "in", "range", "(", "noptepochs", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "for", "start", "in", "range", "(", "0", ",", "nbatch", ",", "nbatch_train", ")", ":", "\n", "                    ", "end", "=", "start", "+", "nbatch_train", "\n", "mbinds", "=", "inds", "[", "start", ":", "end", "]", "\n", "slices", "=", "(", "arr", "[", "mbinds", "]", "for", "arr", "in", "(", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ")", ")", "\n", "mblossvals", ".", "append", "(", "model", ".", "train", "(", "lrnow", ",", "cliprangenow", ",", "*", "slices", ")", ")", "\n", "", "", "sil_loss", ",", "sil_adv", ",", "sil_samples", ",", "sil_nlogp", "=", "model", ".", "sil_train", "(", "lrnow", ")", "\n", "", "else", ":", "# recurrent version", "\n", "            ", "assert", "nenvs", "%", "nminibatches", "==", "0", "\n", "envsperbatch", "=", "nenvs", "//", "nminibatches", "\n", "envinds", "=", "np", ".", "arange", "(", "nenvs", ")", "\n", "flatinds", "=", "np", ".", "arange", "(", "nenvs", "*", "nsteps", ")", ".", "reshape", "(", "nenvs", ",", "nsteps", ")", "\n", "envsperbatch", "=", "nbatch_train", "//", "nsteps", "\n", "for", "_", "in", "range", "(", "noptepochs", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "envinds", ")", "\n", "for", "start", "in", "range", "(", "0", ",", "nenvs", ",", "envsperbatch", ")", ":", "\n", "                    ", "end", "=", "start", "+", "envsperbatch", "\n", "mbenvinds", "=", "envinds", "[", "start", ":", "end", "]", "\n", "mbflatinds", "=", "flatinds", "[", "mbenvinds", "]", ".", "ravel", "(", ")", "\n", "slices", "=", "(", "arr", "[", "mbflatinds", "]", "for", "arr", "in", "(", "obs", ",", "returns", ",", "masks", ",", "actions", ",", "values", ",", "neglogpacs", ")", ")", "\n", "mbstates", "=", "states", "[", "mbenvinds", "]", "\n", "mblossvals", ".", "append", "(", "model", ".", "train", "(", "lrnow", ",", "cliprangenow", ",", "*", "slices", ",", "mbstates", ")", ")", "\n", "\n", "", "", "", "lossvals", "=", "np", ".", "mean", "(", "mblossvals", ",", "axis", "=", "0", ")", "\n", "tnow", "=", "time", ".", "time", "(", ")", "\n", "fps", "=", "int", "(", "nbatch", "/", "(", "tnow", "-", "tstart", ")", ")", "\n", "if", "update", "%", "log_interval", "==", "0", "or", "update", "==", "1", ":", "\n", "            ", "ev", "=", "explained_variance", "(", "values", ",", "returns", ")", "\n", "logger", ".", "logkv", "(", "\"serial_timesteps\"", ",", "update", "*", "nsteps", ")", "\n", "logger", ".", "logkv", "(", "\"nupdates\"", ",", "update", ")", "\n", "logger", ".", "logkv", "(", "\"total_timesteps\"", ",", "update", "*", "nbatch", ")", "\n", "logger", ".", "logkv", "(", "\"fps\"", ",", "fps", ")", "\n", "logger", ".", "logkv", "(", "\"explained_variance\"", ",", "float", "(", "ev", ")", ")", "\n", "logger", ".", "logkv", "(", "'eprewmean'", ",", "safemean", "(", "[", "epinfo", "[", "'r'", "]", "for", "epinfo", "in", "epinfobuf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "'eplenmean'", ",", "safemean", "(", "[", "epinfo", "[", "'l'", "]", "for", "epinfo", "in", "epinfobuf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "'time_elapsed'", ",", "tnow", "-", "tfirststart", ")", "\n", "logger", ".", "logkv", "(", "'episodes'", ",", "runner", ".", "episodes_count", ")", "\n", "for", "(", "lossval", ",", "lossname", ")", "in", "zip", "(", "lossvals", ",", "model", ".", "loss_names", ")", ":", "\n", "                ", "logger", ".", "logkv", "(", "lossname", ",", "lossval", ")", "\n", "", "if", "sil_update", ">", "0", ":", "\n", "                ", "logger", ".", "logkv", "(", "\"sil_samples\"", ",", "sil_samples", ")", "\n", "", "logger", ".", "dumpkvs", "(", ")", "\n", "", "if", "save_interval", "and", "(", "update", "%", "save_interval", "==", "0", "or", "update", "==", "1", ")", "and", "logger", ".", "get_dir", "(", ")", ":", "\n", "            ", "checkdir", "=", "osp", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "checkdir", ",", "exist_ok", "=", "True", ")", "\n", "savepath", "=", "osp", ".", "join", "(", "checkdir", ",", "'%.5i'", "%", "update", ")", "\n", "print", "(", "'Saving to'", ",", "savepath", ")", "\n", "model", ".", "save", "(", "savepath", ")", "\n", "", "", "env", ".", "close", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.ppo2_sil.safemean": [[279, 281], ["numpy.mean", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "def", "safemean", "(", "xs", ")", ":", "\n", "    ", "return", "np", ".", "nan", "if", "len", "(", "xs", ")", "==", "0", "else", "np", ".", "mean", "(", "xs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.run_mujoco.train": [[7, 39], ["tf.ConfigProto", "tf.Session().__enter__", "DummyVecEnv", "VecNormalize", "set_global_seeds", "ppo2.learn", "gym.make", "baselines.bench.Monitor", "tf.Session", "baselines.logger.get_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["from", "baselines", ".", "trpo_mpi", "import", "trpo_mpi", "\n", "\n", "def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ")", ":", "\n", "    ", "import", "baselines", ".", "common", ".", "tf_util", "as", "U", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "configure", "(", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "configure", "(", "format_strs", "=", "[", "]", ")", "\n", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "", "workerseed", "=", "seed", "+", "10000", "*", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "def", "policy_fn", "(", "name", ",", "ob_space", ",", "ac_space", ")", ":", "\n", "        ", "return", "MlpPolicy", "(", "name", "=", "name", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "\n", "hid_size", "=", "32", ",", "num_hid_layers", "=", "2", ")", "\n", "", "env", "=", "make_mujoco_env", "(", "env_id", ",", "workerseed", ")", "\n", "trpo_mpi", ".", "learn", "(", "env", ",", "policy_fn", ",", "timesteps_per_batch", "=", "1024", ",", "max_kl", "=", "0.01", ",", "cg_iters", "=", "10", ",", "cg_damping", "=", "0.1", ",", "\n", "max_timesteps", "=", "num_timesteps", ",", "gamma", "=", "0.99", ",", "lam", "=", "0.98", ",", "vf_iters", "=", "5", ",", "vf_stepsize", "=", "1e-3", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "mujoco_arg_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.run_mujoco.main": [[41, 57], ["baselines.common.cmd_util.mujoco_arg_parser", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.add_argument", "baselines.common.cmd_util.mujoco_arg_parser.parse_args", "baselines.logger.configure", "run_mujoco.train", "baselines.logger.log", "numpy.zeros", "env.reset", "env.render", "model.step", "env.step"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.mujoco_arg_parser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.run_atari.train": [[12, 30], ["multiprocessing.cpu_count", "tensorflow.ConfigProto", "tensorflow.Session().__enter__", "baselines.common.vec_env.vec_frame_stack.VecFrameStack", "baselines.ppo2.ppo2.learn", "baselines.common.cmd_util.make_atari_env", "tensorflow.Session", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env"], ["", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env", "=", "VecFrameStack", "(", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ")", ",", "4", ")", "\n", "learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "help", "=", "'Policy architecture'", ",", "choices", "=", "[", "'cnn'", ",", "'lstm'", ",", "'lnlstm'", "]", ",", "default", "=", "'cnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "help", "=", "'Learning rate schedule'", ",", "choices", "=", "[", "'constant'", ",", "'linear'", "]", ",", "default", "=", "'constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "policy", "=", "args", ".", "policy", ",", "lrschedule", "=", "args", ".", "lrschedule", ",", "num_env", "=", "16", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo2.run_atari.main": [[31, 38], ["baselines.common.cmd_util.atari_arg_parser", "baselines.common.cmd_util.atari_arg_parser.add_argument", "baselines.common.cmd_util.atari_arg_parser.parse_args", "baselines.logger.configure", "run_atari.train"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train"], ["    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.__init__": [[19, 47], ["gym.core.Wrapper.__init__", "time.time", "open", "monitor.Monitor.f.write", "csv.DictWriter", "monitor.Monitor.logger.writeheader", "monitor.Monitor.f.flush", "os.join.endswith", "os.isdir", "os.isdir", "os.join", "os.join", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "filename", ",", "allow_early_resets", "=", "False", ",", "reset_keywords", "=", "(", ")", ",", "info_keywords", "=", "(", ")", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", "=", "env", ")", "\n", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "if", "filename", "is", "None", ":", "\n", "            ", "self", ".", "f", "=", "None", "\n", "self", ".", "logger", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "not", "filename", ".", "endswith", "(", "Monitor", ".", "EXT", ")", ":", "\n", "                ", "if", "osp", ".", "isdir", "(", "filename", ")", ":", "\n", "                    ", "filename", "=", "osp", ".", "join", "(", "filename", ",", "Monitor", ".", "EXT", ")", "\n", "", "else", ":", "\n", "                    ", "filename", "=", "filename", "+", "\".\"", "+", "Monitor", ".", "EXT", "\n", "", "", "self", ".", "f", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "self", ".", "f", ".", "write", "(", "'#%s\\n'", "%", "json", ".", "dumps", "(", "{", "\"t_start\"", ":", "self", ".", "tstart", ",", "'env_id'", ":", "env", ".", "spec", "and", "env", ".", "spec", ".", "id", "}", ")", ")", "\n", "self", ".", "logger", "=", "csv", ".", "DictWriter", "(", "self", ".", "f", ",", "fieldnames", "=", "(", "'r'", ",", "'l'", ",", "'t'", ")", "+", "reset_keywords", "+", "info_keywords", ")", "\n", "self", ".", "logger", ".", "writeheader", "(", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "reset_keywords", "=", "reset_keywords", "\n", "self", ".", "info_keywords", "=", "info_keywords", "\n", "self", ".", "allow_early_resets", "=", "allow_early_resets", "\n", "self", ".", "rewards", "=", "None", "\n", "self", ".", "needs_reset", "=", "True", "\n", "self", ".", "episode_rewards", "=", "[", "]", "\n", "self", ".", "episode_lengths", "=", "[", "]", "\n", "self", ".", "episode_times", "=", "[", "]", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "current_reset_info", "=", "{", "}", "# extra info about the current episode, that was passed in during reset()", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.reset": [[48, 59], ["monitor.Monitor.env.reset", "RuntimeError", "kwargs.get", "ValueError"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "allow_early_resets", "and", "not", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to reset an environment before done. If you want to allow early resets, wrap your env with Monitor(env, path, allow_early_resets=True)\"", ")", "\n", "", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "needs_reset", "=", "False", "\n", "for", "k", "in", "self", ".", "reset_keywords", ":", "\n", "            ", "v", "=", "kwargs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Expected you to pass kwarg %s into reset'", "%", "k", ")", "\n", "", "self", ".", "current_reset_info", "[", "k", "]", "=", "v", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.step": [[60, 82], ["monitor.Monitor.env.step", "monitor.Monitor.rewards.append", "RuntimeError", "sum", "len", "monitor.Monitor.episode_rewards.append", "monitor.Monitor.episode_lengths.append", "monitor.Monitor.episode_times.append", "epinfo.update", "round", "round", "monitor.Monitor.logger.writerow", "monitor.Monitor.f.flush", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to step environment that needs reset\"", ")", "\n", "", "ob", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "rewards", ".", "append", "(", "rew", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "needs_reset", "=", "True", "\n", "eprew", "=", "sum", "(", "self", ".", "rewards", ")", "\n", "eplen", "=", "len", "(", "self", ".", "rewards", ")", "\n", "epinfo", "=", "{", "\"r\"", ":", "round", "(", "eprew", ",", "6", ")", ",", "\"l\"", ":", "eplen", ",", "\"t\"", ":", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ",", "6", ")", "}", "\n", "for", "k", "in", "self", ".", "info_keywords", ":", "\n", "                ", "epinfo", "[", "k", "]", "=", "info", "[", "k", "]", "\n", "", "self", ".", "episode_rewards", ".", "append", "(", "eprew", ")", "\n", "self", ".", "episode_lengths", ".", "append", "(", "eplen", ")", "\n", "self", ".", "episode_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", "\n", "epinfo", ".", "update", "(", "self", ".", "current_reset_info", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "writerow", "(", "epinfo", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "", "info", "[", "'episode'", "]", "=", "epinfo", "\n", "", "self", ".", "total_steps", "+=", "1", "\n", "return", "(", "ob", ",", "rew", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.close": [[83, 86], ["monitor.Monitor.f.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "f", "is", "not", "None", ":", "\n", "            ", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.get_total_steps": [[87, 89], ["None"], "methods", ["None"], ["", "", "def", "get_total_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.get_episode_rewards": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.get_episode_lengths": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.Monitor.get_episode_times": [[96, 98], ["None"], "methods", ["None"], ["", "def", "get_episode_times", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_times", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.get_monitor_files": [[102, 104], ["glob.glob", "os.join"], "function", ["None"], ["", "def", "get_monitor_files", "(", "dir", ")", ":", "\n", "    ", "return", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*\"", "+", "Monitor", ".", "EXT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.load_results": [[105, 141], ["pandas.concat", "pandas.DataFrame.sort_values", "pandas.DataFrame.reset_index", "min", "glob.glob", "glob.glob", "monitor.LoadMonitorResultsError", "dfs.append", "os.join", "os.join", "open", "fname.endswith", "fh.readline", "json.loads", "pandas.read_csv", "headers.append", "fname.endswith", "fh.readlines", "json.loads", "headers.append", "pandas.DataFrame", "json.loads", "episodes.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.read_csv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "load_results", "(", "dir", ")", ":", "\n", "    ", "import", "pandas", "\n", "monitor_files", "=", "(", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.json\"", ")", ")", "+", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.csv\"", ")", ")", ")", "# get both csv and (old) json files", "\n", "if", "not", "monitor_files", ":", "\n", "        ", "raise", "LoadMonitorResultsError", "(", "\"no monitor files of the form *%s found in %s\"", "%", "(", "Monitor", ".", "EXT", ",", "dir", ")", ")", "\n", "", "dfs", "=", "[", "]", "\n", "headers", "=", "[", "]", "\n", "for", "fname", "in", "monitor_files", ":", "\n", "        ", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "fh", ":", "\n", "            ", "if", "fname", ".", "endswith", "(", "'csv'", ")", ":", "\n", "                ", "firstline", "=", "fh", ".", "readline", "(", ")", "\n", "assert", "firstline", "[", "0", "]", "==", "'#'", "\n", "header", "=", "json", ".", "loads", "(", "firstline", "[", "1", ":", "]", ")", "\n", "df", "=", "pandas", ".", "read_csv", "(", "fh", ",", "index_col", "=", "None", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "", "elif", "fname", ".", "endswith", "(", "'json'", ")", ":", "# Deprecated json format", "\n", "                ", "episodes", "=", "[", "]", "\n", "lines", "=", "fh", ".", "readlines", "(", ")", "\n", "header", "=", "json", ".", "loads", "(", "lines", "[", "0", "]", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                    ", "episode", "=", "json", ".", "loads", "(", "line", ")", "\n", "episodes", ".", "append", "(", "episode", ")", "\n", "", "df", "=", "pandas", ".", "DataFrame", "(", "episodes", ")", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "'unreachable'", "\n", "", "df", "[", "'t'", "]", "+=", "header", "[", "'t_start'", "]", "\n", "", "dfs", ".", "append", "(", "df", ")", "\n", "", "df", "=", "pandas", ".", "concat", "(", "dfs", ")", "\n", "df", ".", "sort_values", "(", "'t'", ",", "inplace", "=", "True", ")", "\n", "df", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df", "[", "'t'", "]", "-=", "min", "(", "header", "[", "'t_start'", "]", "for", "header", "in", "headers", ")", "\n", "df", ".", "headers", "=", "headers", "# HACK to preserve backwards compatibility", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.monitor.test_monitor": [[142, 165], ["gym.make", "gym.make.seed", "monitor.Monitor", "monitor.Monitor.reset", "range", "open", "open.readline", "f.readline.startswith", "json.loads", "pandas.read_csv", "open.close", "os.remove", "os.remove", "uuid.uuid4", "monitor.Monitor.step", "set", "set", "monitor.Monitor.reset", "json.loads.keys", "pandas.read_csv.keys"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.read_csv", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "test_monitor", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "mon_file", "=", "\"/tmp/baselines-test-%s.monitor.csv\"", "%", "uuid", ".", "uuid4", "(", ")", "\n", "menv", "=", "Monitor", "(", "env", ",", "mon_file", ")", "\n", "menv", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "_", "=", "menv", ".", "step", "(", "0", ")", "\n", "if", "done", ":", "\n", "            ", "menv", ".", "reset", "(", ")", "\n", "\n", "", "", "f", "=", "open", "(", "mon_file", ",", "'rt'", ")", "\n", "\n", "firstline", "=", "f", ".", "readline", "(", ")", "\n", "assert", "firstline", ".", "startswith", "(", "'#'", ")", "\n", "metadata", "=", "json", ".", "loads", "(", "firstline", "[", "1", ":", "]", ")", "\n", "assert", "metadata", "[", "'env_id'", "]", "==", "\"CartPole-v1\"", "\n", "assert", "set", "(", "metadata", ".", "keys", "(", ")", ")", "==", "{", "'env_id'", ",", "'gym_version'", ",", "'t_start'", "}", ",", "\"Incorrect keys in monitor metadata\"", "\n", "\n", "last_logline", "=", "pandas", ".", "read_csv", "(", "f", ",", "index_col", "=", "None", ")", "\n", "assert", "set", "(", "last_logline", ".", "keys", "(", ")", ")", "==", "{", "'l'", ",", "'t'", ",", "'r'", "}", ",", "\"Incorrect keys in monitor logline\"", "\n", "f", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "mon_file", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.benchmarks.register_benchmark": [[14, 25], ["_BENCHMARKS.append", "ValueError", "remove_version_re.sub"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["def", "register_benchmark", "(", "benchmark", ")", ":", "\n", "    ", "for", "b", "in", "_BENCHMARKS", ":", "\n", "        ", "if", "b", "[", "'name'", "]", "==", "benchmark", "[", "'name'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Benchmark with name %s already registered!'", "%", "b", "[", "'name'", "]", ")", "\n", "\n", "# automatically add a description if it is not present", "\n", "", "", "if", "'tasks'", "in", "benchmark", ":", "\n", "        ", "for", "t", "in", "benchmark", "[", "'tasks'", "]", ":", "\n", "            ", "if", "'desc'", "not", "in", "t", ":", "\n", "                ", "t", "[", "'desc'", "]", "=", "remove_version_re", ".", "sub", "(", "''", ",", "t", "[", "'env_id'", "]", ")", "\n", "", "", "", "_BENCHMARKS", ".", "append", "(", "benchmark", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.benchmarks.list_benchmarks": [[27, 29], ["None"], "function", ["None"], ["", "def", "list_benchmarks", "(", ")", ":", "\n", "    ", "return", "[", "b", "[", "'name'", "]", "for", "b", "in", "_BENCHMARKS", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.benchmarks.get_benchmark": [[31, 36], ["ValueError", "benchmarks.list_benchmarks"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.bench.benchmarks.list_benchmarks"], ["", "def", "get_benchmark", "(", "benchmark_name", ")", ":", "\n", "    ", "for", "b", "in", "_BENCHMARKS", ":", "\n", "        ", "if", "b", "[", "'name'", "]", "==", "benchmark_name", ":", "\n", "            ", "return", "b", "\n", "", "", "raise", "ValueError", "(", "'%s not found! Known benchmarks: %s'", "%", "(", "benchmark_name", ",", "list_benchmarks", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.benchmarks.get_task": [[38, 41], ["next", "filter"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_continuous.buffer.SortedBuffer.filter"], ["", "def", "get_task", "(", "benchmark", ",", "env_id", ")", ":", "\n", "    ", "\"\"\"Get a task by env_id. Return None if the benchmark doesn't have the env\"\"\"", "\n", "return", "next", "(", "filter", "(", "lambda", "task", ":", "task", "[", "'env_id'", "]", "==", "env_id", ",", "benchmark", "[", "'tasks'", "]", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.bench.benchmarks.find_task_for_env_id_in_any_benchmark": [[43, 49], ["None"], "function", ["None"], ["", "def", "find_task_for_env_id_in_any_benchmark", "(", "env_id", ")", ":", "\n", "    ", "for", "bm", "in", "_BENCHMARKS", ":", "\n", "        ", "for", "task", "in", "bm", "[", "\"tasks\"", "]", ":", "\n", "            ", "if", "task", "[", "\"env_id\"", "]", "==", "env_id", ":", "\n", "                ", "return", "bm", ",", "task", "\n", "", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.mlp_policy.MlpPolicy.__init__": [[9, 13], ["tensorflow.variable_scope", "mlp_policy.MlpPolicy._init", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy._init"], ["import", "baselines", ".", "common", ".", "tf_util", "as", "U", "\n", "from", "baselines", ".", "common", ".", "mpi_running_mean_std", "import", "RunningMeanStd", "\n", "from", "baselines", ".", "common", ".", "distributions", "import", "make_pdtype", "\n", "from", "baselines", ".", "acktr", ".", "utils", "import", "dense", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.mlp_policy.MlpPolicy._init": [[14, 51], ["isinstance", "baselines.common.distributions.make_pdtype", "baselines.get_placeholder", "baselines.common.distributions.make_pdtype.pdfromflat", "tensorflow.placeholder", "baselines.switch", "baselines.function", "tensorflow.variable_scope", "baselines.common.mpi_running_mean_std.RunningMeanStd", "tensorflow.variable_scope", "tensorflow.clip_by_value", "range", "tensorflow.variable_scope", "range", "mlp_policy.MlpPolicy.pd.sample", "mlp_policy.MlpPolicy.pd.mode", "tensorflow.nn.tanh", "tensorflow.layers.dense", "tensorflow.nn.tanh", "isinstance", "tensorflow.layers.dense", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.layers.dense", "list", "tensorflow.layers.dense", "tensorflow.layers.dense", "baselines.normc_initializer", "baselines.normc_initializer", "tensorflow.zeros_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.common.distributions.make_pdtype.param_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.switch", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.mode", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape"], ["\n", "class", "MlpPolicy", "(", "object", ")", ":", "\n", "    ", "recurrent", "=", "False", "\n", "\n", "def", "__init__", "(", "self", ",", "name", ",", "reuse", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "_init", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n", "", "", "def", "_init", "(", "self", ",", "ob_space", ",", "ac_space", ",", "hid_size", ",", "num_hid_layers", ",", "gaussian_fixed_var", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "ob_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "\n", "self", ".", "pdtype", "=", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "sequence_length", "=", "None", "\n", "\n", "ob", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"ob\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "sequence_length", "]", "+", "list", "(", "ob_space", ".", "shape", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"obfilter\"", ")", ":", "\n", "            ", "self", ".", "ob_rms", "=", "RunningMeanStd", "(", "shape", "=", "ob_space", ".", "shape", ")", "\n", "\n", "", "obz", "=", "tf", ".", "clip_by_value", "(", "(", "ob", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "self", ".", "ob_rms", ".", "std", ",", "-", "5.0", ",", "5.0", ")", "\n", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "            ", "last_out", "=", "tf", ".", "nn", ".", "tanh", "(", "dense", "(", "last_out", ",", "hid_size", ",", "\"vffc%i\"", "%", "(", "i", "+", "1", ")", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "", "self", ".", "vpred", "=", "dense", "(", "last_out", ",", "1", ",", "\"vffinal\"", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "            ", "last_out", "=", "tf", ".", "nn", ".", "tanh", "(", "dense", "(", "last_out", ",", "hid_size", ",", "\"polfc%i\"", "%", "(", "i", "+", "1", ")", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "\n", "", "if", "gaussian_fixed_var", "and", "isinstance", "(", "ac_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "mean", "=", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", ",", "\"polfinal\"", ",", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "logstd", "=", "tf", ".", "get_variable", "(", "name", "=", "\"logstd\"", ",", "shape", "=", "[", "1", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "pdparam", "=", "tf", ".", "concat", "(", "[", "mean", ",", "mean", "*", "0.0", "+", "logstd", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "pdparam", "=", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", ",", "\"polfinal\"", ",", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.mlp_policy.MlpPolicy.act": [[52, 55], ["mlp_policy.MlpPolicy._act"], "methods", ["None"], ["\n", "", "self", ".", "pd", "=", "pdtype", ".", "pdfromflat", "(", "pdparam", ")", "\n", "\n", "self", ".", "state_in", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.mlp_policy.MlpPolicy.get_variables": [[55, 57], ["tensorflow.get_collection"], "methods", ["None"], ["self", ".", "state_in", "=", "[", "]", "\n", "self", ".", "state_out", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.mlp_policy.MlpPolicy.get_trainable_variables": [[57, 59], ["tensorflow.get_collection"], "methods", ["None"], ["\n", "# change for BC", "\n", "stochastic", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"stochastic\"", ",", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.mlp_policy.MlpPolicy.get_initial_state": [[59, 61], ["None"], "methods", ["None"], ["stochastic", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"stochastic\"", ",", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "ac", "=", "U", ".", "switch", "(", "stochastic", ",", "self", ".", "pd", ".", "sample", "(", ")", ",", "self", ".", "pd", ".", "mode", "(", ")", ")", "\n", "self", ".", "ac", "=", "ac", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.pposgd_simple.traj_segment_generator": [[11, 63], ["env.action_space.sample", "env.reset", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "np.array.copy", "pi.act", "env.step", "ep_rets.append", "ep_lens.append", "env.reset", "range", "range"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["def", "traj_segment_generator", "(", "pi", ",", "env", ",", "horizon", ",", "stochastic", ")", ":", "\n", "    ", "t", "=", "0", "\n", "ac", "=", "env", ".", "action_space", ".", "sample", "(", ")", "# not used, just so we have the datatype", "\n", "new", "=", "True", "# marks if we're on first timestep of an episode", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "\n", "cur_ep_ret", "=", "0", "# return in current episode", "\n", "cur_ep_len", "=", "0", "# len of current episode", "\n", "ep_rets", "=", "[", "]", "# returns of completed episodes in this segment", "\n", "ep_lens", "=", "[", "]", "# lengths of ...", "\n", "\n", "# Initialize history arrays", "\n", "obs", "=", "np", ".", "array", "(", "[", "ob", "for", "_", "in", "range", "(", "horizon", ")", "]", ")", "\n", "rews", "=", "np", ".", "zeros", "(", "horizon", ",", "'float32'", ")", "\n", "vpreds", "=", "np", ".", "zeros", "(", "horizon", ",", "'float32'", ")", "\n", "news", "=", "np", ".", "zeros", "(", "horizon", ",", "'int32'", ")", "\n", "acs", "=", "np", ".", "array", "(", "[", "ac", "for", "_", "in", "range", "(", "horizon", ")", "]", ")", "\n", "prevacs", "=", "acs", ".", "copy", "(", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "prevac", "=", "ac", "\n", "ac", ",", "vpred", "=", "pi", ".", "act", "(", "stochastic", ",", "ob", ")", "\n", "# Slight weirdness here because we need value function at time T", "\n", "# before returning segment [0, T-1] so we get the correct", "\n", "# terminal value", "\n", "if", "t", ">", "0", "and", "t", "%", "horizon", "==", "0", ":", "\n", "            ", "yield", "{", "\"ob\"", ":", "obs", ",", "\"rew\"", ":", "rews", ",", "\"vpred\"", ":", "vpreds", ",", "\"new\"", ":", "news", ",", "\n", "\"ac\"", ":", "acs", ",", "\"prevac\"", ":", "prevacs", ",", "\"nextvpred\"", ":", "vpred", "*", "(", "1", "-", "new", ")", ",", "\n", "\"ep_rets\"", ":", "ep_rets", ",", "\"ep_lens\"", ":", "ep_lens", "}", "\n", "# Be careful!!! if you change the downstream algorithm to aggregate", "\n", "# several of these batches, then be sure to do a deepcopy", "\n", "ep_rets", "=", "[", "]", "\n", "ep_lens", "=", "[", "]", "\n", "", "i", "=", "t", "%", "horizon", "\n", "obs", "[", "i", "]", "=", "ob", "\n", "vpreds", "[", "i", "]", "=", "vpred", "\n", "news", "[", "i", "]", "=", "new", "\n", "acs", "[", "i", "]", "=", "ac", "\n", "prevacs", "[", "i", "]", "=", "prevac", "\n", "\n", "ob", ",", "rew", ",", "new", ",", "_", "=", "env", ".", "step", "(", "ac", ")", "\n", "rews", "[", "i", "]", "=", "rew", "\n", "\n", "cur_ep_ret", "+=", "rew", "\n", "cur_ep_len", "+=", "1", "\n", "if", "new", ":", "\n", "            ", "ep_rets", ".", "append", "(", "cur_ep_ret", ")", "\n", "ep_lens", ".", "append", "(", "cur_ep_len", ")", "\n", "cur_ep_ret", "=", "0", "\n", "cur_ep_len", "=", "0", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "t", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.pposgd_simple.add_vtarg_and_adv": [[64, 79], ["numpy.append", "numpy.append", "len", "numpy.empty", "reversed", "range"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "", "def", "add_vtarg_and_adv", "(", "seg", ",", "gamma", ",", "lam", ")", ":", "\n", "    ", "\"\"\"\n    Compute target value using TD(lambda) estimator, and advantage with GAE(lambda)\n    \"\"\"", "\n", "new", "=", "np", ".", "append", "(", "seg", "[", "\"new\"", "]", ",", "0", ")", "# last element is only used for last vtarg, but we already zeroed it if last new = 1", "\n", "vpred", "=", "np", ".", "append", "(", "seg", "[", "\"vpred\"", "]", ",", "seg", "[", "\"nextvpred\"", "]", ")", "\n", "T", "=", "len", "(", "seg", "[", "\"rew\"", "]", ")", "\n", "seg", "[", "\"adv\"", "]", "=", "gaelam", "=", "np", ".", "empty", "(", "T", ",", "'float32'", ")", "\n", "rew", "=", "seg", "[", "\"rew\"", "]", "\n", "lastgaelam", "=", "0", "\n", "for", "t", "in", "reversed", "(", "range", "(", "T", ")", ")", ":", "\n", "        ", "nonterminal", "=", "1", "-", "new", "[", "t", "+", "1", "]", "\n", "delta", "=", "rew", "[", "t", "]", "+", "gamma", "*", "vpred", "[", "t", "+", "1", "]", "*", "nonterminal", "-", "vpred", "[", "t", "]", "\n", "gaelam", "[", "t", "]", "=", "lastgaelam", "=", "delta", "+", "gamma", "*", "lam", "*", "nonterminal", "*", "lastgaelam", "\n", "", "seg", "[", "\"tdlamret\"", "]", "=", "seg", "[", "\"adv\"", "]", "+", "seg", "[", "\"vpred\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.pposgd_simple.learn": [[80, 214], ["policy_fn", "policy_fn", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.get_placeholder_cached", "policy_fn.pdtype.sample_placeholder", "policy_fn.pd.kl", "policy_fn.pd.entropy", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.exp", "tensorflow.reduce_mean", "policy_fn.get_trainable_variables", "baselines.function", "baselines.common.mpi_adam.MpiAdam", "baselines.function", "baselines.function", "baselines.initialize", "baselines.common.mpi_adam.MpiAdam.sync", "pposgd_simple.traj_segment_generator", "time.time", "collections.deque", "collections.deque", "tensorflow.clip_by_value", "tensorflow.reduce_mean", "tensorflow.square", "sum", "baselines.logger.log", "traj_segment_generator.__next__", "pposgd_simple.add_vtarg_and_adv", "baselines.common.Dataset", "hasattr", "U.function.", "baselines.logger.log", "baselines.logger.log", "range", "baselines.logger.log", "baselines.common.Dataset.iterate_once", "baselines.common.mpi_moments.mpi_moments", "baselines.logger.log", "baselines.common.zipsame", "baselines.logger.record_tabular", "mpi4py.MPI.COMM_WORLD.allgather", "map", "collections.deque.extend", "collections.deque.extend", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "len", "sum", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "policy_fn.pd.logp", "policy_fn.pd.logp", "tensorflow.minimum", "callback", "tf.placeholder.std", "dict", "policy_fn.ob_rms.update", "baselines.common.fmt_row", "baselines.common.Dataset.iterate_once", "baselines.logger.log", "U.function.", "losses.append", "baselines.common.fmt_row", "baselines.logger.record_tabular", "baselines.common.explained_variance", "zip", "numpy.mean", "numpy.mean", "len", "mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.logger.dump_tabular", "baselines.flatgrad", "tensorflow.assign", "locals", "globals", "max", "tf.placeholder.mean", "U.function.", "baselines.common.mpi_adam.MpiAdam.update", "losses.append", "baselines.common.fmt_row", "time.time", "baselines.common.zipsame", "numpy.mean", "policy_fn.get_variables", "policy_fn.get_variables", "float", "time.time"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.kl", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.traj_segment_generator", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.add_vtarg_and_adv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.iterate_once", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.mpi_moments", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.zipsame", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_cartpole.callback", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.fmt_row", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.iterate_once", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.fmt_row", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.explained_variance", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.fmt_row", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.zipsame", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.get_variables"], ["", "def", "learn", "(", "env", ",", "policy_fn", ",", "*", ",", "\n", "timesteps_per_actorbatch", ",", "# timesteps per actor per update", "\n", "clip_param", ",", "entcoeff", ",", "# clipping parameter epsilon, entropy coeff", "\n", "optim_epochs", ",", "optim_stepsize", ",", "optim_batchsize", ",", "# optimization hypers", "\n", "gamma", ",", "lam", ",", "# advantage estimation", "\n", "max_timesteps", "=", "0", ",", "max_episodes", "=", "0", ",", "max_iters", "=", "0", ",", "max_seconds", "=", "0", ",", "# time constraint", "\n", "callback", "=", "None", ",", "# you can do anything in the callback, since it takes locals(), globals()", "\n", "adam_epsilon", "=", "1e-5", ",", "\n", "schedule", "=", "'constant'", "# annealing for stepsize parameters (epsilon and adam)", "\n", ")", ":", "\n", "# Setup losses and stuff", "\n", "# ----------------------------------------", "\n", "    ", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "pi", "=", "policy_fn", "(", "\"pi\"", ",", "ob_space", ",", "ac_space", ")", "# Construct network for new policy", "\n", "oldpi", "=", "policy_fn", "(", "\"oldpi\"", ",", "ob_space", ",", "ac_space", ")", "# Network for old policy", "\n", "atarg", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "# Target advantage function (if applicable)", "\n", "ret", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "# Empirical return", "\n", "\n", "lrmult", "=", "tf", ".", "placeholder", "(", "name", "=", "'lrmult'", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "]", ")", "# learning rate multiplier, updated with schedule", "\n", "clip_param", "=", "clip_param", "*", "lrmult", "# Annealed cliping parameter epislon", "\n", "\n", "ob", "=", "U", ".", "get_placeholder_cached", "(", "name", "=", "\"ob\"", ")", "\n", "ac", "=", "pi", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "\n", "kloldnew", "=", "oldpi", ".", "pd", ".", "kl", "(", "pi", ".", "pd", ")", "\n", "ent", "=", "pi", ".", "pd", ".", "entropy", "(", ")", "\n", "meankl", "=", "tf", ".", "reduce_mean", "(", "kloldnew", ")", "\n", "meanent", "=", "tf", ".", "reduce_mean", "(", "ent", ")", "\n", "pol_entpen", "=", "(", "-", "entcoeff", ")", "*", "meanent", "\n", "\n", "ratio", "=", "tf", ".", "exp", "(", "pi", ".", "pd", ".", "logp", "(", "ac", ")", "-", "oldpi", ".", "pd", ".", "logp", "(", "ac", ")", ")", "# pnew / pold", "\n", "surr1", "=", "ratio", "*", "atarg", "# surrogate from conservative policy iteration", "\n", "surr2", "=", "tf", ".", "clip_by_value", "(", "ratio", ",", "1.0", "-", "clip_param", ",", "1.0", "+", "clip_param", ")", "*", "atarg", "#", "\n", "pol_surr", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "minimum", "(", "surr1", ",", "surr2", ")", ")", "# PPO's pessimistic surrogate (L^CLIP)", "\n", "vf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "pi", ".", "vpred", "-", "ret", ")", ")", "\n", "total_loss", "=", "pol_surr", "+", "pol_entpen", "+", "vf_loss", "\n", "losses", "=", "[", "pol_surr", ",", "pol_entpen", ",", "vf_loss", ",", "meankl", ",", "meanent", "]", "\n", "loss_names", "=", "[", "\"pol_surr\"", ",", "\"pol_entpen\"", ",", "\"vf_loss\"", ",", "\"kl\"", ",", "\"ent\"", "]", "\n", "\n", "var_list", "=", "pi", ".", "get_trainable_variables", "(", ")", "\n", "lossandgrad", "=", "U", ".", "function", "(", "[", "ob", ",", "ac", ",", "atarg", ",", "ret", ",", "lrmult", "]", ",", "losses", "+", "[", "U", ".", "flatgrad", "(", "total_loss", ",", "var_list", ")", "]", ")", "\n", "adam", "=", "MpiAdam", "(", "var_list", ",", "epsilon", "=", "adam_epsilon", ")", "\n", "\n", "assign_old_eq_new", "=", "U", ".", "function", "(", "[", "]", ",", "[", "]", ",", "updates", "=", "[", "tf", ".", "assign", "(", "oldv", ",", "newv", ")", "\n", "for", "(", "oldv", ",", "newv", ")", "in", "zipsame", "(", "oldpi", ".", "get_variables", "(", ")", ",", "pi", ".", "get_variables", "(", ")", ")", "]", ")", "\n", "compute_losses", "=", "U", ".", "function", "(", "[", "ob", ",", "ac", ",", "atarg", ",", "ret", ",", "lrmult", "]", ",", "losses", ")", "\n", "\n", "U", ".", "initialize", "(", ")", "\n", "adam", ".", "sync", "(", ")", "\n", "\n", "# Prepare for rollouts", "\n", "# ----------------------------------------", "\n", "seg_gen", "=", "traj_segment_generator", "(", "pi", ",", "env", ",", "timesteps_per_actorbatch", ",", "stochastic", "=", "True", ")", "\n", "\n", "episodes_so_far", "=", "0", "\n", "timesteps_so_far", "=", "0", "\n", "iters_so_far", "=", "0", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "lenbuffer", "=", "deque", "(", "maxlen", "=", "100", ")", "# rolling buffer for episode lengths", "\n", "rewbuffer", "=", "deque", "(", "maxlen", "=", "100", ")", "# rolling buffer for episode rewards", "\n", "\n", "assert", "sum", "(", "[", "max_iters", ">", "0", ",", "max_timesteps", ">", "0", ",", "max_episodes", ">", "0", ",", "max_seconds", ">", "0", "]", ")", "==", "1", ",", "\"Only one time constraint permitted\"", "\n", "\n", "while", "True", ":", "\n", "        ", "if", "callback", ":", "callback", "(", "locals", "(", ")", ",", "globals", "(", ")", ")", "\n", "if", "max_timesteps", "and", "timesteps_so_far", ">=", "max_timesteps", ":", "\n", "            ", "break", "\n", "", "elif", "max_episodes", "and", "episodes_so_far", ">=", "max_episodes", ":", "\n", "            ", "break", "\n", "", "elif", "max_iters", "and", "iters_so_far", ">=", "max_iters", ":", "\n", "            ", "break", "\n", "", "elif", "max_seconds", "and", "time", ".", "time", "(", ")", "-", "tstart", ">=", "max_seconds", ":", "\n", "            ", "break", "\n", "\n", "", "if", "schedule", "==", "'constant'", ":", "\n", "            ", "cur_lrmult", "=", "1.0", "\n", "", "elif", "schedule", "==", "'linear'", ":", "\n", "            ", "cur_lrmult", "=", "max", "(", "1.0", "-", "float", "(", "timesteps_so_far", ")", "/", "max_timesteps", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "logger", ".", "log", "(", "\"********** Iteration %i ************\"", "%", "iters_so_far", ")", "\n", "\n", "seg", "=", "seg_gen", ".", "__next__", "(", ")", "\n", "add_vtarg_and_adv", "(", "seg", ",", "gamma", ",", "lam", ")", "\n", "\n", "# ob, ac, atarg, ret, td1ret = map(np.concatenate, (obs, acs, atargs, rets, td1rets))", "\n", "ob", ",", "ac", ",", "atarg", ",", "tdlamret", "=", "seg", "[", "\"ob\"", "]", ",", "seg", "[", "\"ac\"", "]", ",", "seg", "[", "\"adv\"", "]", ",", "seg", "[", "\"tdlamret\"", "]", "\n", "vpredbefore", "=", "seg", "[", "\"vpred\"", "]", "# predicted value function before udpate", "\n", "atarg", "=", "(", "atarg", "-", "atarg", ".", "mean", "(", ")", ")", "/", "atarg", ".", "std", "(", ")", "# standardized advantage function estimate", "\n", "d", "=", "Dataset", "(", "dict", "(", "ob", "=", "ob", ",", "ac", "=", "ac", ",", "atarg", "=", "atarg", ",", "vtarg", "=", "tdlamret", ")", ",", "shuffle", "=", "not", "pi", ".", "recurrent", ")", "\n", "optim_batchsize", "=", "optim_batchsize", "or", "ob", ".", "shape", "[", "0", "]", "\n", "\n", "if", "hasattr", "(", "pi", ",", "\"ob_rms\"", ")", ":", "pi", ".", "ob_rms", ".", "update", "(", "ob", ")", "# update running mean/std for policy", "\n", "\n", "assign_old_eq_new", "(", ")", "# set old parameter values to new parameter values", "\n", "logger", ".", "log", "(", "\"Optimizing...\"", ")", "\n", "logger", ".", "log", "(", "fmt_row", "(", "13", ",", "loss_names", ")", ")", "\n", "# Here we do a bunch of optimization epochs over the data", "\n", "for", "_", "in", "range", "(", "optim_epochs", ")", ":", "\n", "            ", "losses", "=", "[", "]", "# list of tuples, each of which gives the loss for a minibatch", "\n", "for", "batch", "in", "d", ".", "iterate_once", "(", "optim_batchsize", ")", ":", "\n", "                ", "*", "newlosses", ",", "g", "=", "lossandgrad", "(", "batch", "[", "\"ob\"", "]", ",", "batch", "[", "\"ac\"", "]", ",", "batch", "[", "\"atarg\"", "]", ",", "batch", "[", "\"vtarg\"", "]", ",", "cur_lrmult", ")", "\n", "adam", ".", "update", "(", "g", ",", "optim_stepsize", "*", "cur_lrmult", ")", "\n", "losses", ".", "append", "(", "newlosses", ")", "\n", "", "logger", ".", "log", "(", "fmt_row", "(", "13", ",", "np", ".", "mean", "(", "losses", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n", "", "logger", ".", "log", "(", "\"Evaluating losses...\"", ")", "\n", "losses", "=", "[", "]", "\n", "for", "batch", "in", "d", ".", "iterate_once", "(", "optim_batchsize", ")", ":", "\n", "            ", "newlosses", "=", "compute_losses", "(", "batch", "[", "\"ob\"", "]", ",", "batch", "[", "\"ac\"", "]", ",", "batch", "[", "\"atarg\"", "]", ",", "batch", "[", "\"vtarg\"", "]", ",", "cur_lrmult", ")", "\n", "losses", ".", "append", "(", "newlosses", ")", "\n", "", "meanlosses", ",", "_", ",", "_", "=", "mpi_moments", "(", "losses", ",", "axis", "=", "0", ")", "\n", "logger", ".", "log", "(", "fmt_row", "(", "13", ",", "meanlosses", ")", ")", "\n", "for", "(", "lossval", ",", "name", ")", "in", "zipsame", "(", "meanlosses", ",", "loss_names", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "\"loss_\"", "+", "name", ",", "lossval", ")", "\n", "", "logger", ".", "record_tabular", "(", "\"ev_tdlam_before\"", ",", "explained_variance", "(", "vpredbefore", ",", "tdlamret", ")", ")", "\n", "lrlocal", "=", "(", "seg", "[", "\"ep_lens\"", "]", ",", "seg", "[", "\"ep_rets\"", "]", ")", "# local values", "\n", "listoflrpairs", "=", "MPI", ".", "COMM_WORLD", ".", "allgather", "(", "lrlocal", ")", "# list of tuples", "\n", "lens", ",", "rews", "=", "map", "(", "flatten_lists", ",", "zip", "(", "*", "listoflrpairs", ")", ")", "\n", "lenbuffer", ".", "extend", "(", "lens", ")", "\n", "rewbuffer", ".", "extend", "(", "rews", ")", "\n", "logger", ".", "record_tabular", "(", "\"EpLenMean\"", ",", "np", ".", "mean", "(", "lenbuffer", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"EpRewMean\"", ",", "np", ".", "mean", "(", "rewbuffer", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"EpThisIter\"", ",", "len", "(", "lens", ")", ")", "\n", "episodes_so_far", "+=", "len", "(", "lens", ")", "\n", "timesteps_so_far", "+=", "sum", "(", "lens", ")", "\n", "iters_so_far", "+=", "1", "\n", "logger", ".", "record_tabular", "(", "\"EpisodesSoFar\"", ",", "episodes_so_far", ")", "\n", "logger", ".", "record_tabular", "(", "\"TimestepsSoFar\"", ",", "timesteps_so_far", ")", "\n", "logger", ".", "record_tabular", "(", "\"TimeElapsed\"", ",", "time", ".", "time", "(", ")", "-", "tstart", ")", "\n", "if", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "            ", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.pposgd_simple.flatten_lists": [[215, 217], ["None"], "function", ["None"], ["", "", "", "def", "flatten_lists", "(", "listoflists", ")", ":", "\n", "    ", "return", "[", "el", "for", "list_", "in", "listoflists", "for", "el", "in", "list_", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.cnn_policy.CnnPolicy.__init__": [[8, 12], ["tensorflow.variable_scope", "cnn_policy.CnnPolicy._init", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy._init"], ["def", "__init__", "(", "self", ",", "name", ",", "ob_space", ",", "ac_space", ",", "kind", "=", "'large'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "_init", "(", "ob_space", ",", "ac_space", ",", "kind", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.cnn_policy.CnnPolicy._init": [[13, 46], ["isinstance", "baselines.common.distributions.make_pdtype", "baselines.get_placeholder", "tensorflow.layers.dense", "baselines.common.distributions.make_pdtype.pdfromflat", "tensorflow.placeholder", "cnn_policy.CnnPolicy.pd.sample", "baselines.function", "tensorflow.nn.relu", "tensorflow.nn.relu", "baselines.flattenallbut0", "tensorflow.nn.relu", "tensorflow.layers.dense", "baselines.conv2d", "baselines.conv2d", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "baselines.flattenallbut0", "tensorflow.nn.relu", "baselines.common.distributions.make_pdtype.param_shape", "baselines.normc_initializer", "list", "baselines.conv2d", "baselines.conv2d", "baselines.conv2d", "tensorflow.layers.dense", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.normc_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flattenallbut0", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flattenallbut0", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer"], ["", "", "def", "_init", "(", "self", ",", "ob_space", ",", "ac_space", ",", "kind", ")", ":", "\n", "        ", "assert", "isinstance", "(", "ob_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "\n", "self", ".", "pdtype", "=", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "sequence_length", "=", "None", "\n", "\n", "ob", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"ob\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "sequence_length", "]", "+", "list", "(", "ob_space", ".", "shape", ")", ")", "\n", "\n", "x", "=", "ob", "/", "255.0", "\n", "if", "kind", "==", "'small'", ":", "# from A3C paper", "\n", "            ", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "16", ",", "\"l1\"", ",", "[", "8", ",", "8", "]", ",", "[", "4", ",", "4", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "32", ",", "\"l2\"", ",", "[", "4", ",", "4", "]", ",", "[", "2", ",", "2", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "U", ".", "flattenallbut0", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "layers", ".", "dense", "(", "x", ",", "256", ",", "name", "=", "'lin'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "", "elif", "kind", "==", "'large'", ":", "# Nature DQN", "\n", "            ", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "32", ",", "\"l1\"", ",", "[", "8", ",", "8", "]", ",", "[", "4", ",", "4", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "64", ",", "\"l2\"", ",", "[", "4", ",", "4", "]", ",", "[", "2", ",", "2", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "U", ".", "conv2d", "(", "x", ",", "64", ",", "\"l3\"", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ",", "pad", "=", "\"VALID\"", ")", ")", "\n", "x", "=", "U", ".", "flattenallbut0", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "layers", ".", "dense", "(", "x", ",", "512", ",", "name", "=", "'lin'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", ",", "name", "=", "'logits'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "self", ".", "pd", "=", "pdtype", ".", "pdfromflat", "(", "logits", ")", "\n", "self", ".", "vpred", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "1", ",", "name", "=", "'value'", ",", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "self", ".", "state_in", "=", "[", "]", "\n", "self", ".", "state_out", "=", "[", "]", "\n", "\n", "stochastic", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "ac", "=", "self", ".", "pd", ".", "sample", "(", ")", "# XXX", "\n", "self", ".", "_act", "=", "U", ".", "function", "(", "[", "stochastic", ",", "ob", "]", ",", "[", "ac", ",", "self", ".", "vpred", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.cnn_policy.CnnPolicy.act": [[47, 50], ["cnn_policy.CnnPolicy._act"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "stochastic", ",", "ob", ")", ":", "\n", "        ", "ac1", ",", "vpred1", "=", "self", ".", "_act", "(", "stochastic", ",", "ob", "[", "None", "]", ")", "\n", "return", "ac1", "[", "0", "]", ",", "vpred1", "[", "0", "]", "\n", "", "def", "get_variables", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.cnn_policy.CnnPolicy.get_variables": [[50, 52], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "scope", ")", "\n", "", "def", "get_trainable_variables", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.cnn_policy.CnnPolicy.get_trainable_variables": [[52, 54], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "", "def", "get_initial_state", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.cnn_policy.CnnPolicy.get_initial_state": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_initial_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.run_mujoco.train": [[7, 22], ["baselines.common.tf_util.make_session().__enter__", "baselines.common.cmd_util.make_mujoco_env", "pposgd_simple.learn", "baselines.common.cmd_util.make_mujoco_env.close", "mlp_policy.MlpPolicy", "baselines.common.tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_mujoco_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session"], ["from", "baselines", ".", "trpo_mpi", "import", "trpo_mpi", "\n", "\n", "def", "train", "(", "env_id", ",", "num_timesteps", ",", "seed", ")", ":", "\n", "    ", "import", "baselines", ".", "common", ".", "tf_util", "as", "U", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "configure", "(", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "configure", "(", "format_strs", "=", "[", "]", ")", "\n", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "", "workerseed", "=", "seed", "+", "10000", "*", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "def", "policy_fn", "(", "name", ",", "ob_space", ",", "ac_space", ")", ":", "\n", "        ", "return", "MlpPolicy", "(", "name", "=", "name", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.run_mujoco.main": [[23, 27], ["baselines.common.cmd_util.mujoco_arg_parser().parse_args", "baselines.logger.configure", "run_mujoco.train", "baselines.common.cmd_util.mujoco_arg_parser"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.mujoco_arg_parser"], ["hid_size", "=", "32", ",", "num_hid_layers", "=", "2", ")", "\n", "", "env", "=", "make_mujoco_env", "(", "env_id", ",", "workerseed", ")", "\n", "trpo_mpi", ".", "learn", "(", "env", ",", "policy_fn", ",", "timesteps_per_batch", "=", "1024", ",", "max_kl", "=", "0.01", ",", "cg_iters", "=", "10", ",", "cg_damping", "=", "0.1", ",", "\n", "max_timesteps", "=", "num_timesteps", ",", "gamma", "=", "0.99", ",", "lam", "=", "0.98", ",", "vf_iters", "=", "5", ",", "vf_stepsize", "=", "1e-3", ")", "\n", "env", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.run_atari.train": [[11, 42], ["mpi4py.MPI.COMM_WORLD.Get_rank", "U.single_threaded_session", "U.single_threaded_session.__enter__", "baselines.common.set_global_seeds", "baselines.common.atari_wrappers.make_atari", "baselines.bench.Monitor", "baselines.common.atari_wrappers.wrap_deepmind.seed", "baselines.common.atari_wrappers.wrap_deepmind", "baselines.common.atari_wrappers.wrap_deepmind.seed", "pposgd_simple.learn", "baselines.common.atari_wrappers.wrap_deepmind.close", "baselines.logger.configure", "baselines.logger.configure", "cnn_policy.CnnPolicy", "mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.logger.get_dir", "os.join", "int", "baselines.logger.get_dir", "str"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.make_atari", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.wrap_deepmind", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["        ", "policy_fn", "=", "CnnPolicy", "\n", "", "elif", "policy", "==", "'lstm'", ":", "\n", "        ", "policy_fn", "=", "LstmPolicy", "\n", "", "elif", "policy", "==", "'lnlstm'", ":", "\n", "        ", "policy_fn", "=", "LnLstmPolicy", "\n", "", "env", "=", "VecFrameStack", "(", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ")", ",", "4", ")", "\n", "learn", "(", "policy_fn", ",", "env", ",", "seed", ",", "total_timesteps", "=", "int", "(", "num_timesteps", "*", "1.1", ")", ",", "lrschedule", "=", "lrschedule", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "atari_arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "help", "=", "'Policy architecture'", ",", "choices", "=", "[", "'cnn'", ",", "'lstm'", ",", "'lnlstm'", "]", ",", "default", "=", "'cnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "help", "=", "'Learning rate schedule'", ",", "choices", "=", "[", "'constant'", ",", "'linear'", "]", ",", "default", "=", "'constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n", "policy", "=", "args", ".", "policy", ",", "lrschedule", "=", "args", ".", "lrschedule", ",", "num_env", "=", "16", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ppo1.run_atari.main": [[43, 46], ["baselines.common.cmd_util.atari_arg_parser().parse_args", "run_atari.train", "baselines.common.cmd_util.atari_arg_parser"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.__init__": [[5, 14], ["int", "isinstance"], "methods", ["None"], ["        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ob_shape", "=", "ob_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "ob_dim", "=", "1", "\n", "for", "dim", "in", "self", ".", "ob_shape", ":", "\n", "            ", "self", ".", "ob_dim", "*=", "dim", "\n", "", "self", ".", "data", "=", "None", "\n", "self", ".", "index", "=", "0", "\n", "\n", "", "def", "insert", "(", "self", ",", "obs", ",", "acs", ",", "ret", ")", ":", "\n", "        ", "num", "=", "obs", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert": [[15, 29], ["isinstance", "numpy.concatenate", "numpy.concatenate", "numpy.searchsorted", "numpy.insert", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.repeat", "numpy.repeat"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert"], ["_data", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "astype", "(", "float", ")", ".", "reshape", "(", "num", ",", "-", "1", ")", ",", "np", ".", "expand_dims", "(", "acs", ",", "axis", "=", "1", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "ret", ",", "num", ")", ",", "axis", "=", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "data", "=", "_data", "\n", "", "else", ":", "\n", "            ", "insert_index", "=", "np", ".", "searchsorted", "(", "self", ".", "data", "[", ":", ",", "-", "1", "]", ",", "ret", ",", "side", "=", "'right'", ")", "\n", "self", ".", "data", "=", "np", ".", "insert", "(", "self", ".", "data", ",", "insert_index", ",", "_data", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "data", ".", "shape", "[", "0", "]", ">", "self", ".", "size", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "-", "self", ".", "size", ":", "]", "\n", "", "", "self", ".", "index", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "sample", "(", "self", ",", "batch_size", ",", "k", "=", "5000", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "max", "(", "0", ",", "self", ".", "index", "-", "k", ")", ",", "self", ".", "index", ")", ",", "batch_size", ")", "\n", "sampled_data", "=", "self", ".", "data", "[", "idx", "]", "\n", "obs", "=", "sampled_data", "[", ":", ",", ":", "self", ".", "ob_dim", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "(", "batch_size", ",", ")", "+", "self", ".", "ob_shape", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.sample": [[30, 38], ["numpy.random.choice", "isinstance", "sampled_data[].astype", "range", "obs.flatten.flatten.flatten", "max"], "methods", ["None"], ["acs", "=", "sampled_data", "[", ":", ",", "self", ".", "ob_dim", "]", ".", "astype", "(", "int", ")", "\n", "return", "obs", ",", "acs", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.policies.LnLstmPolicy.__init__": [[22, 54], ["baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.distributions.make_pdtype", "policies.LnLstmPolicy.pd.sample", "policies.LnLstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.ssrl_discrete.utils.batch_to_seq", "baselines.ssrl_discrete.utils.batch_to_seq", "baselines.ssrl_discrete.utils.lnlstm", "baselines.ssrl_discrete.utils.seq_to_batch", "baselines.ssrl_discrete.utils.fc", "policies.LnLstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lnlstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lnlstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.policies.LstmPolicy.__init__": [[57, 90], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "policies.LstmPolicy.pd.sample", "policies.LstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.ssrl_discrete.utils.batch_to_seq", "baselines.ssrl_discrete.utils.batch_to_seq", "baselines.ssrl_discrete.utils.lstm", "baselines.ssrl_discrete.utils.seq_to_batch", "baselines.ssrl_discrete.utils.fc", "policies.LstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "X", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.policies.CnnPolicy.__init__": [[93, 124], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "policies.CnnPolicy.pd.sample", "policies.CnnPolicy.pd.neglogp", "baselines.ssrl_discrete.utils.cat_entropy", "tensorflow.variable_scope", "policies.nature_cnn", "policies.CnnPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "baselines.ssrl_discrete.utils.fc"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ",", "**", "conv_kwargs", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "#X, processed_x = observation_input(ob_space, nbatch)", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "None", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ",", "**", "conv_kwargs", ")", "\n", "vf", "=", "fc", "(", "h", ",", "'v'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "self", ".", "entropy", "=", "cat_entropy", "(", "self", ".", "pi", ")", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "def", "neg_log_prob", "(", "actions", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "pi", ",", "labels", "=", "actions", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "neg_log_prob", "=", "neg_log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.policies.MlpPolicy.__init__": [[126, 156], ["baselines.common.distributions.make_pdtype", "policies.MlpPolicy.pd.sample", "policies.MlpPolicy.pd.neglogp", "tensorflow.variable_scope", "baselines.common.input.observation_input", "tensorflow.layers.flatten", "activ", "activ", "activ", "activ", "policies.MlpPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "baselines.ssrl_discrete.utils.fc", "baselines.ssrl_discrete.utils.fc", "baselines.ssrl_discrete.utils.fc", "baselines.ssrl_discrete.utils.fc", "baselines.ssrl_discrete.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "activ", "=", "tf", ".", "tanh", "\n", "processed_x", "=", "tf", ".", "layers", ".", "flatten", "(", "processed_x", ")", "\n", "pi_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'pi_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "pi_h2", "=", "activ", "(", "fc", "(", "pi_h1", ",", "'pi_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'vf_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h2", "=", "activ", "(", "fc", "(", "vf_h1", ",", "'vf_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf", "=", "fc", "(", "vf_h2", ",", "'vf'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "pi_h2", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.policies.nature_cnn": [[8, 20], ["activ", "activ", "activ", "baselines.ssrl_discrete.utils.conv_to_fc", "activ", "tensorflow.cast", "baselines.ssrl_discrete.utils.conv", "baselines.ssrl_discrete.utils.conv", "baselines.ssrl_discrete.utils.conv", "baselines.ssrl_discrete.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv_to_fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["def", "nature_cnn", "(", "unscaled_images", ",", "**", "conv_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    CNN from Nature paper.\n    \"\"\"", "\n", "scaled_images", "=", "tf", ".", "cast", "(", "unscaled_images", ",", "tf", ".", "float32", ")", "/", "255.", "\n", "activ", "=", "tf", ".", "nn", ".", "relu", "\n", "h", "=", "activ", "(", "conv", "(", "scaled_images", ",", "'c1'", ",", "nf", "=", "32", ",", "rf", "=", "8", ",", "stride", "=", "4", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "**", "conv_kwargs", ")", ")", "\n", "h2", "=", "activ", "(", "conv", "(", "h", ",", "'c2'", ",", "nf", "=", "64", ",", "rf", "=", "4", ",", "stride", "=", "2", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "activ", "(", "conv", "(", "h2", ",", "'c3'", ",", "nf", "=", "64", ",", "rf", "=", "3", ",", "stride", "=", "1", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "conv_to_fc", "(", "h3", ")", "\n", "return", "activ", "(", "fc", "(", "h3", ",", "'fc1'", ",", "nh", "=", "512", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.runner.runner": [[12, 33], ["range", "runner.traj_1_generator", "obs_list.append", "acs_list.append", "len_list.append", "ret_list.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.traj_1_generator", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["def", "runner", "(", "env", ",", "model", ",", "number_trajs", ")", ":", "\n", "\n", "    ", "obs_list", "=", "[", "]", "\n", "acs_list", "=", "[", "]", "\n", "len_list", "=", "[", "]", "\n", "ret_list", "=", "[", "]", "\n", "total_t", "=", "0", "\n", "#for _ in tqdm(range(number_trajs)):", "\n", "for", "_", "in", "range", "(", "number_trajs", ")", ":", "\n", "        ", "traj", ",", "t", "=", "traj_1_generator", "(", "model", ",", "env", ")", "\n", "obs", ",", "acs", ",", "ep_len", ",", "ep_ret", "=", "traj", "[", "'ob'", "]", ",", "traj", "[", "'ac'", "]", ",", "traj", "[", "'ep_len'", "]", ",", "traj", "[", "'ep_ret'", "]", "\n", "obs_list", ".", "append", "(", "obs", ")", "\n", "acs_list", ".", "append", "(", "acs", ")", "\n", "len_list", ".", "append", "(", "ep_len", ")", "\n", "ret_list", ".", "append", "(", "ep_ret", ")", "\n", "total_t", "+=", "t", "\n", "#avg_len = sum(len_list)/len(len_list)", "\n", "#avg_ret = sum(ret_list)/len(ret_list)", "\n", "#print(\"Average length:\", avg_len)", "\n", "#print(\"Average return:\", avg_ret)", "\n", "", "return", "obs_list", ",", "acs_list", ",", "ret_list", ",", "total_t", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.runner.traj_1_generator": [[36, 73], ["env.action_space.sample", "env.reset", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "model.step", "np.array.append", "np.array.append", "np.array.append", "env.step", "np.array.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "traj_1_generator", "(", "model", ",", "env", ")", ":", "\n", "\n", "    ", "t", "=", "0", "\n", "ac", "=", "env", ".", "action_space", ".", "sample", "(", ")", "# not used, just so we have the datatype", "\n", "new", "=", "True", "# marks if we're on first timestep of an episode", "\n", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "cur_ep_ret", "=", "0", "# return in current episode", "\n", "cur_ep_len", "=", "0", "# len of current episode", "\n", "\n", "# Initialize history arrays", "\n", "obs", "=", "[", "]", "\n", "rews", "=", "[", "]", "\n", "news", "=", "[", "]", "\n", "acs", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "ac", "=", "model", ".", "step", "(", "ob", "[", "'image'", "]", ")", "\n", "obs", ".", "append", "(", "ob", "[", "'image'", "]", ")", "\n", "news", ".", "append", "(", "new", ")", "\n", "acs", ".", "append", "(", "ac", ")", "\n", "\n", "ob", ",", "rew", ",", "new", ",", "_", "=", "env", ".", "step", "(", "ac", ")", "\n", "rews", ".", "append", "(", "rew", ")", "\n", "\n", "cur_ep_ret", "+=", "rew", "\n", "cur_ep_len", "+=", "1", "\n", "if", "new", ":", "\n", "            ", "break", "\n", "", "t", "+=", "1", "\n", "\n", "", "obs", "=", "np", ".", "array", "(", "obs", ")", "\n", "rews", "=", "np", ".", "array", "(", "rews", ")", "\n", "news", "=", "np", ".", "array", "(", "news", ")", "\n", "acs", "=", "np", ".", "array", "(", "acs", ")", "\n", "traj", "=", "{", "\"ob\"", ":", "obs", ",", "\"rew\"", ":", "rews", ",", "\"new\"", ":", "news", ",", "\"ac\"", ":", "acs", ",", "\n", "\"ep_ret\"", ":", "cur_ep_ret", ",", "\"ep_len\"", ":", "cur_ep_len", "}", "\n", "return", "traj", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.ssrl.argsparser": [[15, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Tensorflow Implementation of Reinforcement Learning via Imitation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--env_id'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'MiniGrid-MultiRoom-N4-S5-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_timesteps'", ",", "help", "=", "'the number of timesteps'", ",", "type", "=", "int", ",", "default", "=", "2.1e5", ")", "\n", "parser", ".", "add_argument", "(", "'--buffer_size'", ",", "help", "=", "'the size of the sorted buffer'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "'the batch size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--ent_coef'", ",", "help", "=", "'the weight of the entropy'", ",", "default", "=", "0.00", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "help", "=", "'the learning rate'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--rollout_steps'", ",", "help", "=", "'the number of rollouts in each iteration'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--train_steps'", ",", "help", "=", "'the number of training updates in each iteration'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--log_every'", ",", "help", "=", "'log every iteration'", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_num'", ",", "help", "=", "'the number of evaluation number'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--count_exp'", ",", "help", "=", "'whether using count-based exploration'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "help", "=", "'hyperparameter for count-based exploration'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.ssrl.learn": [[31, 79], ["env.seed", "eval_env.seed", "baselines.common.set_global_seeds", "baselines.ssrl_discrete.buffer.SortedBuffer", "tensorflow.Session().__enter__", "baselines.ssrl_discrete.model.Model", "collections.deque", "time.time", "baselines.ssrl_discrete.runner.runner", "collections.deque.extend", "zip", "range", "range", "int", "tensorflow.Session", "baselines.ssrl_discrete.buffer.SortedBuffer.insert", "baselines.ssrl_discrete.buffer.SortedBuffer.sample", "baselines.ssrl_discrete.model.Model.train", "time.time", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.dumpkvs", "numpy.mean", "baselines.ssrl_discrete.runner.runner", "baselines.logger.logkv", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.buffer.SortedBuffer.insert", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["\n", "", "def", "learn", "(", "env", ",", "eval_env", ",", "seed", ",", "num_timesteps", ",", "batch_size", ",", "buffer_size", ",", "ent_coef", ",", "lr", ",", "rollout_steps", ",", "train_steps", ",", "log_every", ",", "eval_num", ",", "count_exp", ",", "beta", ")", ":", "\n", "# Seed", "\n", "    ", "env", ".", "seed", "(", "seed", ")", "\n", "eval_env", ".", "seed", "(", "seed", ")", "\n", "set_global_seeds", "(", "seed", ")", "\n", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "\n", "# Buffer", "\n", "if", "count_exp", ":", "\n", "        ", "from", "baselines", ".", "ssrl_exploration", ".", "count_buffer", "import", "SortedBuffer", "\n", "buf", "=", "SortedBuffer", "(", "size", "=", "int", "(", "buffer_size", ")", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "beta", "=", "beta", ")", "\n", "", "else", ":", "\n", "        ", "from", "baselines", ".", "ssrl_exploration", ".", "buffer", "import", "SortedBuffer", "\n", "buf", "=", "SortedBuffer", "(", "size", "=", "int", "(", "buffer_size", ")", ",", "\n", "ob_space", "=", "ob_space", ")", "\n", "\n", "\n", "# Model", "\n", "", "tf", ".", "Session", "(", ")", ".", "__enter__", "(", ")", "\n", "model", "=", "Model", "(", "ob_space", ",", "ac_space", ",", "batch_size", ",", "lr", ",", "ent_coef", ")", "\n", "\n", "ret_buf", "=", "deque", "(", "maxlen", "=", "100", ")", "\n", "total_t", "=", "0", "\n", "total_episodes", "=", "0", "\n", "while", "total_t", "<", "num_timesteps", ":", "\n", "        ", "obs_list", ",", "acs_list", ",", "ret_list", ",", "t", "=", "runner", "(", "env", ",", "model", ",", "rollout_steps", ")", "\n", "ret_buf", ".", "extend", "(", "ret_list", ")", "\n", "#total_t += t", "\n", "total_episodes", "+=", "rollout_steps", "\n", "for", "obs", ",", "acs", ",", "ret", "in", "zip", "(", "obs_list", ",", "acs_list", ",", "ret_list", ")", ":", "\n", "            ", "buf", ".", "insert", "(", "obs", ",", "acs", ",", "ret", ")", "\n", "#print(buf.data.shape, buf.data)", "\n", "#print(ret_list)", "\n", "", "for", "_", "in", "range", "(", "train_steps", ")", ":", "\n", "            ", "obs", ",", "acs", "=", "buf", ".", "sample", "(", "batch_size", ",", "k", "=", "buffer_size", ")", "\n", "loss", "=", "model", ".", "train", "(", "obs", ",", "acs", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "t", ")", ":", "\n", "            ", "total_t", "+=", "1", "\n", "if", "total_t", "%", "log_every", "==", "0", ":", "\n", "                ", "logger", ".", "logkv", "(", "\"total_timesteps\"", ",", "total_t", ")", "\n", "logger", ".", "logkv", "(", "\"total_episodes\"", ",", "total_episodes", ")", "\n", "logger", ".", "logkv", "(", "\"rollout_return\"", ",", "np", ".", "mean", "(", "[", "r", "for", "r", "in", "ret_buf", "]", ")", ")", "\n", "logger", ".", "logkv", "(", "\"loss\"", ",", "loss", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.ssrl.main": [[80, 91], ["ssrl.argsparser", "argsparser.parse_args", "baselines.logger.configure", "gym.make", "gym.make", "ssrl.learn", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.argsparser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn"], ["if", "eval_num", ">", "0", ":", "\n", "                    ", "obs_list", ",", "acs_list", ",", "ret_list", ",", "t", "=", "runner", "(", "eval_env", ",", "model", ",", "eval_num", ")", "\n", "logger", ".", "logkv", "(", "\"eval_return\"", ",", "np", ".", "mean", "(", "ret_list", ")", ")", "\n", "", "logger", ".", "dumpkvs", "(", ")", "\n", "\n", "", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argsparser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "\n", "\n", "env", "=", "gym", ".", "make", "(", "args", ".", "env_id", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.model.Model.__init__": [[8, 43], ["tensorflow.get_default_session", "baselines.ssrl_discrete.policies.MlpPolicy", "baselines.ssrl_discrete.policies.MlpPolicy", "model.Model.train_model.pdtype.sample_placeholder", "model.Model.train_model.pd.sample", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.gradients", "list", "tensorflow.train.AdamOptimizer", "model.Model.trainer.apply_gradients", "tensorflow.global_variables_initializer().run", "tensorflow.variable_scope", "tensorflow.trainable_variables", "zip", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "ob_space", ",", "ac_space", ",", "batch_size", "=", "128", ",", "lr", "=", "5e-4", ",", "ent_coef", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "self", ".", "ob_space", "=", "ob_space", "\n", "self", ".", "ac_space", "=", "ac_space", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "act_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "1", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "False", ")", "\n", "self", ".", "train_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "batch_size", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "True", ")", "\n", "\n", "self", ".", "ob_ph", "=", "self", ".", "train_model", ".", "X", "\n", "self", ".", "ac_ph", "=", "self", ".", "train_model", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "self", ".", "ac", "=", "self", ".", "train_model", ".", "pd", ".", "sample", "(", ")", "\n", "self", ".", "neglogpac", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "train_model", ".", "pi", ",", "labels", "=", "self", ".", "ac_ph", ")", "\n", "\n", "#self.loss = tf.reduce_mean(self.neglogpac) - ent_coef * tf.reduce_mean(self.train_model.entropy)", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "neglogpac", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ")", ":", "\n", "            ", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "params", ")", "\n", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "self", ".", "trainer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "self", ".", "_train", "=", "self", ".", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.model.Model.step": [[44, 47], ["model.Model.act_model.step", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "ob", ")", ":", "\n", "        ", "a", "=", "self", ".", "act_model", ".", "step", "(", "np", ".", "expand_dims", "(", "ob", ",", "axis", "=", "0", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.model.Model.train": [[48, 54], ["model.Model.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "train", "(", "self", ",", "obs", ",", "acs", ")", ":", "\n", "        ", "td_map", "=", "{", "self", ".", "ob_ph", ":", "obs", ",", "self", ".", "ac_ph", ":", "acs", "}", "\n", "train_loss", ",", "_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "_train", "]", ",", "td_map", ")", "\n", "#print(\"Training loss: {}\".format(train_loss))", "\n", "return", "train_loss", "\n", "#print(\"Training loss: {}\".format(train_loss))", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.Scheduler.__init__": [[207, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "v", ",", "nvalues", ",", "schedule", ")", ":", "\n", "        ", "self", ".", "n", "=", "0.", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "nvalues", "=", "nvalues", "\n", "self", ".", "schedule", "=", "schedules", "[", "schedule", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.Scheduler.value": [[213, 217], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "current_value", "=", "self", ".", "v", "*", "self", ".", "schedule", "(", "self", ".", "n", "/", "self", ".", "nvalues", ")", "\n", "self", ".", "n", "+=", "1.", "\n", "return", "current_value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.Scheduler.value_steps": [[218, 220], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value_steps", "(", "self", ",", "steps", ")", ":", "\n", "        ", "return", "self", ".", "v", "*", "self", ".", "schedule", "(", "steps", "/", "self", ".", "nvalues", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.EpisodeStats.__init__": [[223, 231], ["range", "collections.deque", "collections.deque", "utils.EpisodeStats.episode_rewards.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "nsteps", ",", "nenvs", ")", ":", "\n", "        ", "self", ".", "episode_rewards", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nenvs", ")", ":", "\n", "            ", "self", ".", "episode_rewards", ".", "append", "(", "[", "]", ")", "\n", "", "self", ".", "lenbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode lengths", "\n", "self", ".", "rewbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode rewards", "\n", "self", ".", "nsteps", "=", "nsteps", "\n", "self", ".", "nenvs", "=", "nenvs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.EpisodeStats.feed": [[232, 244], ["numpy.reshape", "numpy.reshape", "range", "range", "utils.EpisodeStats.episode_rewards[].append", "len", "sum", "utils.EpisodeStats.lenbuffer.append", "utils.EpisodeStats.rewbuffer.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "feed", "(", "self", ",", "rewards", ",", "masks", ")", ":", "\n", "        ", "rewards", "=", "np", ".", "reshape", "(", "rewards", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "masks", "=", "np", ".", "reshape", "(", "masks", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "nenvs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "self", ".", "nsteps", ")", ":", "\n", "                ", "self", ".", "episode_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", "[", "j", "]", ")", "\n", "if", "masks", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "l", "=", "len", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "s", "=", "sum", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "self", ".", "lenbuffer", ".", "append", "(", "l", ")", "\n", "self", ".", "rewbuffer", ".", "append", "(", "s", ")", "\n", "self", ".", "episode_rewards", "[", "i", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.EpisodeStats.mean_length": [[245, 250], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "", "", "def", "mean_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "lenbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "lenbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "# on the first params dump, no episodes are finished", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.EpisodeStats.mean_reward": [[251, 256], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "def", "mean_reward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rewbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "rewbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.sample": [[8, 11], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["def", "sample", "(", "logits", ")", ":", "\n", "    ", "noise", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "noise", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.cat_entropy": [[12, 18], ["tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy", "(", "logits", ")", ":", "\n", "    ", "a0", "=", "logits", "-", "tf", ".", "reduce_max", "(", "logits", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.cat_entropy_softmax": [[19, 21], ["tensorflow.reduce_sum", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy_softmax", "(", "p0", ")", ":", "\n", "    ", "return", "-", "tf", ".", "reduce_sum", "(", "p0", "*", "tf", ".", "log", "(", "p0", "+", "1e-6", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.mse": [[22, 24], ["tensorflow.square"], "function", ["None"], ["", "def", "mse", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "square", "(", "pred", "-", "target", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.ortho_init": [[25, 41], ["tuple", "numpy.random.normal", "numpy.linalg.svd", "q.reshape.reshape", "len", "len", "numpy.prod"], "function", ["None"], ["", "def", "ortho_init", "(", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_ortho_init", "(", "shape", ",", "dtype", ",", "partition_info", "=", "None", ")", ":", "\n", "#lasagne ortho init for tf", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "flat_shape", "=", "shape", "\n", "", "elif", "len", "(", "shape", ")", "==", "4", ":", "# assumes NHWC", "\n", "            ", "flat_shape", "=", "(", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "# pick the one with the correct shape", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "(", "scale", "*", "q", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "_ortho_init", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.conv": [[42, 62], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "x.get_shape", "tensorflow.reshape", "tensorflow.nn.conv2d", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "def", "conv", "(", "x", ",", "scope", ",", "*", ",", "nf", ",", "rf", ",", "stride", ",", "pad", "=", "'VALID'", ",", "init_scale", "=", "1.0", ",", "data_format", "=", "'NHWC'", ",", "one_dim_bias", "=", "False", ")", ":", "\n", "    ", "if", "data_format", "==", "'NHWC'", ":", "\n", "        ", "channel_ax", "=", "3", "\n", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "bshape", "=", "[", "1", ",", "1", ",", "1", ",", "nf", "]", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "        ", "channel_ax", "=", "1", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "bshape", "=", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "bias_var_shape", "=", "[", "nf", "]", "if", "one_dim_bias", "else", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "channel_ax", "]", ".", "value", "\n", "wshape", "=", "[", "rf", ",", "rf", ",", "nin", ",", "nf", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "wshape", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "bias_var_shape", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "if", "not", "one_dim_bias", "and", "data_format", "==", "'NHWC'", ":", "\n", "            ", "b", "=", "tf", ".", "reshape", "(", "b", ",", "bshape", ")", "\n", "", "return", "b", "+", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "strides", ",", "padding", "=", "pad", ",", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.fc": [[63, 69], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "x.get_shape", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "fc", "(", "x", ",", "scope", ",", "nh", ",", "*", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "nin", ",", "nh", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_bias", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.batch_to_seq": [[70, 76], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.squeeze", "tensorflow.split"], "function", ["None"], ["", "", "def", "batch_to_seq", "(", "h", ",", "nbatch", ",", "nsteps", ",", "flat", "=", "False", ")", ":", "\n", "    ", "if", "flat", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", "]", ")", "\n", "", "else", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", ",", "-", "1", "]", ")", "\n", "", "return", "[", "tf", ".", "squeeze", "(", "v", ",", "[", "1", "]", ")", "for", "v", "in", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "nsteps", ",", "value", "=", "h", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.seq_to_batch": [[77, 85], ["h[].get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "h[].get_shape", "len", "tensorflow.concat", "tensorflow.stack", "h[].get_shape"], "function", ["None"], ["", "def", "seq_to_batch", "(", "h", ",", "flat", "=", "False", ")", ":", "\n", "    ", "shape", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "not", "flat", ":", "\n", "        ", "assert", "(", "len", "(", "shape", ")", ">", "1", ")", "\n", "nh", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "h", ")", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "values", "=", "h", ",", "axis", "=", "1", ")", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.lstm": [[86, 109], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "lstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "tf", ".", "matmul", "(", "x", ",", "wx", ")", "+", "tf", ".", "matmul", "(", "h", ",", "wh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "c", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils._ln": [[110, 115], ["tensorflow.nn.moments", "tensorflow.sqrt"], "function", ["None"], ["", "def", "_ln", "(", "x", ",", "g", ",", "b", ",", "e", "=", "1e-5", ",", "axes", "=", "[", "1", "]", ")", ":", "\n", "    ", "u", ",", "s", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "axes", ",", "keep_dims", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "tf", ".", "sqrt", "(", "s", "+", "e", ")", "\n", "x", "=", "x", "*", "g", "+", "b", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.lnlstm": [[116, 148], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils._ln", "utils._ln", "utils._ln", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln"], ["", "def", "lnlstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gx", "=", "tf", ".", "get_variable", "(", "\"gx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bx", "=", "tf", ".", "get_variable", "(", "\"bx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gh", "=", "tf", ".", "get_variable", "(", "\"gh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bh", "=", "tf", ".", "get_variable", "(", "\"bh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "gc", "=", "tf", ".", "get_variable", "(", "\"gc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bc", "=", "tf", ".", "get_variable", "(", "\"bc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "_ln", "(", "tf", ".", "matmul", "(", "x", ",", "wx", ")", ",", "gx", ",", "bx", ")", "+", "_ln", "(", "tf", ".", "matmul", "(", "h", ",", "wh", ")", ",", "gh", ",", "bh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "_ln", "(", "c", ",", "gc", ",", "bc", ")", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.conv_to_fc": [[149, 153], ["numpy.prod", "tensorflow.reshape", "tf.reshape.get_shape"], "function", ["None"], ["", "def", "conv_to_fc", "(", "x", ")", ":", "\n", "    ", "nh", "=", "np", ".", "prod", "(", "[", "v", ".", "value", "for", "v", "in", "x", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.discount_with_dones": [[154, 161], ["zip", "discounted.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "discount_with_dones", "(", "rewards", ",", "dones", ",", "gamma", ")", ":", "\n", "    ", "discounted", "=", "[", "]", "\n", "r", "=", "0", "\n", "for", "reward", ",", "done", "in", "zip", "(", "rewards", "[", ":", ":", "-", "1", "]", ",", "dones", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "        ", "r", "=", "reward", "+", "gamma", "*", "r", "*", "(", "1.", "-", "done", ")", "# fixed off by one bug", "\n", "discounted", ".", "append", "(", "r", ")", "\n", "", "return", "discounted", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.find_trainable_variables": [[162, 165], ["tensorflow.variable_scope", "tensorflow.trainable_variables"], "function", ["None"], ["", "def", "find_trainable_variables", "(", "key", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "key", ")", ":", "\n", "        ", "return", "tf", ".", "trainable_variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.make_path": [[166, 168], ["os.makedirs"], "function", ["None"], ["", "", "def", "make_path", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "makedirs", "(", "f", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.constant": [[169, 171], ["None"], "function", ["None"], ["", "def", "constant", "(", "p", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.linear": [[172, 174], ["None"], "function", ["None"], ["", "def", "linear", "(", "p", ")", ":", "\n", "    ", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.middle_drop": [[175, 180], ["None"], "function", ["None"], ["", "def", "middle_drop", "(", "p", ")", ":", "\n", "    ", "eps", "=", "0.75", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.double_linear_con": [[181, 187], ["None"], "function", ["None"], ["", "def", "double_linear_con", "(", "p", ")", ":", "\n", "    ", "p", "*=", "2", "\n", "eps", "=", "0.125", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.double_middle_drop": [[188, 196], ["None"], "function", ["None"], ["", "def", "double_middle_drop", "(", "p", ")", ":", "\n", "    ", "eps1", "=", "0.75", "\n", "eps2", "=", "0.25", "\n", "if", "1", "-", "p", "<", "eps1", ":", "\n", "        ", "if", "1", "-", "p", "<", "eps2", ":", "\n", "            ", "return", "eps2", "*", "0.5", "\n", "", "return", "eps1", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.get_by_index": [[259, 266], ["tensorflow.gather", "len", "len", "tensorflow.reshape", "x.get_shape", "idx.get_shape", "tensorflow.range"], "function", ["None"], ["", "", "", "def", "get_by_index", "(", "x", ",", "idx", ")", ":", "\n", "    ", "assert", "(", "len", "(", "x", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "assert", "(", "len", "(", "idx", ".", "get_shape", "(", ")", ")", "==", "1", ")", "\n", "idx_flattened", "=", "tf", ".", "range", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ")", "*", "x", ".", "shape", "[", "1", "]", "+", "idx", "\n", "y", "=", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", ",", "# flatten input", "\n", "idx_flattened", ")", "# use flattened indices", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.check_shape": [[267, 272], ["zip", "t.get_shape().as_list", "str", "str", "t.get_shape", "t.get_shape", "str"], "function", ["None"], ["", "def", "check_shape", "(", "ts", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "for", "(", "t", ",", "shape", ")", "in", "zip", "(", "ts", ",", "shapes", ")", ":", "\n", "        ", "assert", "t", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "shape", ",", "\"id \"", "+", "str", "(", "i", ")", "+", "\" shape \"", "+", "str", "(", "t", ".", "get_shape", "(", ")", ")", "+", "str", "(", "shape", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.avg_norm": [[273, 275], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["None"], ["", "", "def", "avg_norm", "(", "t", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "t", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.gradient_add": [[276, 285], ["print"], "function", ["None"], ["", "def", "gradient_add", "(", "g1", ",", "g2", ",", "param", ")", ":", "\n", "    ", "print", "(", "[", "g1", ",", "g2", ",", "param", ".", "name", "]", ")", "\n", "assert", "(", "not", "(", "g1", "is", "None", "and", "g2", "is", "None", ")", ")", ",", "param", ".", "name", "\n", "if", "g1", "is", "None", ":", "\n", "        ", "return", "g2", "\n", "", "elif", "g2", "is", "None", ":", "\n", "        ", "return", "g1", "\n", "", "else", ":", "\n", "        ", "return", "g1", "+", "g2", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_discrete.utils.q_explained_variance": [[286, 291], ["tensorflow.nn.moments", "tensorflow.nn.moments", "utils.check_shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape"], ["", "", "def", "q_explained_variance", "(", "qpred", ",", "q", ")", ":", "\n", "    ", "_", ",", "vary", "=", "tf", ".", "nn", ".", "moments", "(", "q", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "_", ",", "varpred", "=", "tf", ".", "nn", ".", "moments", "(", "q", "-", "qpred", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "check_shape", "(", "[", "vary", ",", "varpred", "]", ",", "[", "[", "]", "]", "*", "2", ")", "\n", "return", "1.0", "-", "(", "varpred", "/", "vary", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.buffer.Buffer.__init__": [[5, 17], ["None"], "methods", ["None"], ["        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ob_shape", "=", "ob_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "ob_dim", "=", "1", "\n", "for", "dim", "in", "self", ".", "ob_shape", ":", "\n", "            ", "self", ".", "ob_dim", "*=", "dim", "\n", "", "self", ".", "data", "=", "None", "\n", "self", ".", "index", "=", "0", "\n", "\n", "", "def", "insert", "(", "self", ",", "obs", ",", "acs", ",", "ret", ")", ":", "\n", "        ", "num", "=", "obs", ".", "shape", "[", "0", "]", "\n", "_data", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "astype", "(", "float", ")", ".", "reshape", "(", "num", ",", "-", "1", ")", ",", "np", ".", "expand_dims", "(", "acs", ",", "axis", "=", "1", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "ret", ",", "num", ")", ",", "axis", "=", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "data", "=", "_data", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.buffer.Buffer.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "else", ":", "\n", "            ", "insert_index", "=", "np", ".", "searchsorted", "(", "self", ".", "data", "[", ":", ",", "-", "1", "]", ",", "ret", ",", "side", "=", "'right'", ")", "\n", "self", ".", "data", "=", "np", ".", "insert", "(", "self", ".", "data", ",", "insert_index", ",", "_data", ",", "axis", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.buffer.Buffer.add": [[21, 29], ["len", "buffer.Buffer._storage.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["if", "self", ".", "data", ".", "shape", "[", "0", "]", ">", "self", ".", "size", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "-", "self", ".", "size", ":", "]", "\n", "", "", "self", ".", "index", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "sample", "(", "self", ",", "batch_size", ",", "k", "=", "5000", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "max", "(", "0", ",", "self", ".", "index", "-", "k", ")", ",", "self", ".", "index", ")", ",", "batch_size", ")", "\n", "sampled_data", "=", "self", ".", "data", "[", "idx", "]", "\n", "obs", "=", "sampled_data", "[", ":", ",", ":", "self", ".", "ob_dim", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "(", "batch_size", ",", ")", "+", "self", ".", "ob_shape", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.buffer.Buffer._encode_sample": [[30, 38], ["obses_t.append", "actions.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["acs", "=", "sampled_data", "[", ":", ",", "self", ".", "ob_dim", "]", ".", "astype", "(", "int", ")", "\n", "return", "obs", ",", "acs", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.buffer.Buffer.reset_size": [[39, 42], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.buffer.Buffer.sample": [[43, 67], ["buffer.Buffer._encode_sample", "random.randint", "range", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer._encode_sample"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.LnLstmPolicy.__init__": [[22, 54], ["baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.distributions.make_pdtype", "policies.LnLstmPolicy.pd.sample", "policies.LnLstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.ssrl_pong.utils.batch_to_seq", "baselines.ssrl_pong.utils.batch_to_seq", "baselines.ssrl_pong.utils.lnlstm", "baselines.ssrl_pong.utils.seq_to_batch", "baselines.ssrl_pong.utils.fc", "policies.LnLstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lnlstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lnlstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.LstmPolicy.__init__": [[57, 90], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "tensorflow.placeholder", "tensorflow.placeholder", "policies.LstmPolicy.pd.sample", "policies.LstmPolicy.pd.neglogp", "numpy.zeros", "tensorflow.variable_scope", "policies.nature_cnn", "baselines.ssrl_pong.utils.batch_to_seq", "baselines.ssrl_pong.utils.batch_to_seq", "baselines.ssrl_pong.utils.lstm", "baselines.ssrl_pong.utils.seq_to_batch", "baselines.ssrl_pong.utils.fc", "policies.LstmPolicy.pdtype.pdfromlatent", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lstm", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "nlstm", "=", "256", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "nenv", "=", "nbatch", "//", "nsteps", "\n", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "\n", "M", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nbatch", "]", ")", "#mask (done t-1)", "\n", "S", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "nenv", ",", "nlstm", "*", "2", "]", ")", "#states", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "X", ")", "\n", "xs", "=", "batch_to_seq", "(", "h", ",", "nenv", ",", "nsteps", ")", "\n", "ms", "=", "batch_to_seq", "(", "M", ",", "nenv", ",", "nsteps", ")", "\n", "h5", ",", "snew", "=", "lstm", "(", "xs", ",", "ms", ",", "S", ",", "'lstm1'", ",", "nh", "=", "nlstm", ")", "\n", "h5", "=", "seq_to_batch", "(", "h5", ")", "\n", "vf", "=", "fc", "(", "h5", ",", "'v'", ",", "1", ")", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h5", ")", "\n", "\n", "", "v0", "=", "vf", "[", ":", ",", "0", "]", "\n", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "np", ".", "zeros", "(", "(", "nenv", ",", "nlstm", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "step", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "[", "a0", ",", "v0", ",", "snew", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "def", "value", "(", "ob", ",", "state", ",", "mask", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "v0", ",", "{", "X", ":", "ob", ",", "S", ":", "state", ",", "M", ":", "mask", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.CnnPolicy.__init__": [[93, 122], ["baselines.common.distributions.make_pdtype", "baselines.common.input.observation_input", "policies.CnnPolicy.pd.sample", "policies.CnnPolicy.pd.neglogp", "baselines.ssrl_pong.utils.cat_entropy", "tensorflow.variable_scope", "policies.nature_cnn", "policies.CnnPolicy.pdtype.pdfromlatent", "sess.run", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ",", "**", "conv_kwargs", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "#X, processed_x = observation_input(ob_space, nbatch)", "\n", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "None", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "h", "=", "nature_cnn", "(", "processed_x", ",", "**", "conv_kwargs", ")", "\n", "vf", "=", "fc", "(", "h", ",", "'v'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "h", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "self", ".", "entropy", "=", "cat_entropy", "(", "self", ".", "pi", ")", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "def", "neg_log_prob", "(", "actions", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "pi", ",", "labels", "=", "actions", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "value", "=", "value", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.MlpPolicy.__init__": [[124, 154], ["baselines.common.distributions.make_pdtype", "policies.MlpPolicy.pd.sample", "policies.MlpPolicy.pd.neglogp", "tensorflow.variable_scope", "baselines.common.input.observation_input", "tensorflow.layers.flatten", "activ", "activ", "activ", "activ", "policies.MlpPolicy.pdtype.pdfromlatent", "sess.run", "sess.run", "baselines.ssrl_pong.utils.fc", "baselines.ssrl_pong.utils.fc", "baselines.ssrl_pong.utils.fc", "baselines.ssrl_pong.utils.fc", "baselines.ssrl_pong.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["\n", "", "", "class", "MlpPolicy", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sess", ",", "ob_space", ",", "ac_space", ",", "nbatch", ",", "nsteps", ",", "reuse", "=", "False", ")", ":", "#pylint: disable=W0613", "\n", "        ", "self", ".", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "X", ",", "processed_x", "=", "observation_input", "(", "ob_space", ",", "nbatch", ")", "\n", "activ", "=", "tf", ".", "tanh", "\n", "processed_x", "=", "tf", ".", "layers", ".", "flatten", "(", "processed_x", ")", "\n", "pi_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'pi_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "pi_h2", "=", "activ", "(", "fc", "(", "pi_h1", ",", "'pi_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h1", "=", "activ", "(", "fc", "(", "processed_x", ",", "'vf_fc1'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf_h2", "=", "activ", "(", "fc", "(", "vf_h1", ",", "'vf_fc2'", ",", "nh", "=", "64", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "vf", "=", "fc", "(", "vf_h2", ",", "'vf'", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "\n", "self", ".", "pd", ",", "self", ".", "pi", "=", "self", ".", "pdtype", ".", "pdfromlatent", "(", "pi_h2", ",", "init_scale", "=", "0.01", ")", "\n", "\n", "\n", "", "a0", "=", "self", ".", "pd", ".", "sample", "(", ")", "\n", "neglogp0", "=", "self", ".", "pd", ".", "neglogp", "(", "a0", ")", "\n", "self", ".", "initial_state", "=", "None", "\n", "\n", "def", "step", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "a", ",", "v", ",", "neglogp", "=", "sess", ".", "run", "(", "[", "a0", ",", "vf", ",", "neglogp0", "]", ",", "{", "X", ":", "ob", "}", ")", "\n", "return", "a", ",", "v", ",", "self", ".", "initial_state", ",", "neglogp", "\n", "\n", "", "def", "value", "(", "ob", ",", "*", "_args", ",", "**", "_kwargs", ")", ":", "\n", "            ", "return", "sess", ".", "run", "(", "vf", ",", "{", "X", ":", "ob", "}", ")", "\n", "\n", "", "self", ".", "X", "=", "X", "\n", "self", ".", "vf", "=", "vf", "\n", "self", ".", "step", "=", "step", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.policies.nature_cnn": [[8, 20], ["activ", "activ", "activ", "baselines.ssrl_pong.utils.conv_to_fc", "activ", "tensorflow.cast", "baselines.ssrl_pong.utils.conv", "baselines.ssrl_pong.utils.conv", "baselines.ssrl_pong.utils.conv", "baselines.ssrl_pong.utils.fc", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv_to_fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc"], ["def", "nature_cnn", "(", "unscaled_images", ",", "**", "conv_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    CNN from Nature paper.\n    \"\"\"", "\n", "scaled_images", "=", "tf", ".", "cast", "(", "unscaled_images", ",", "tf", ".", "float32", ")", "/", "255.", "\n", "activ", "=", "tf", ".", "nn", ".", "relu", "\n", "h", "=", "activ", "(", "conv", "(", "scaled_images", ",", "'c1'", ",", "nf", "=", "32", ",", "rf", "=", "8", ",", "stride", "=", "4", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "**", "conv_kwargs", ")", ")", "\n", "h2", "=", "activ", "(", "conv", "(", "h", ",", "'c2'", ",", "nf", "=", "64", ",", "rf", "=", "4", ",", "stride", "=", "2", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "activ", "(", "conv", "(", "h2", ",", "'c3'", ",", "nf", "=", "64", ",", "rf", "=", "3", ",", "stride", "=", "1", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ",", "**", "conv_kwargs", ")", ")", "\n", "h3", "=", "conv_to_fc", "(", "h3", ")", "\n", "return", "activ", "(", "fc", "(", "h3", ",", "'fc1'", ",", "nh", "=", "512", ",", "init_scale", "=", "np", ".", "sqrt", "(", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.runner.Runner.__init__": [[20, 30], ["multiprocessing.Process.__init__", "baselines.common.set_global_seeds"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds"], ["for", "_", "in", "range", "(", "number_trajs", ")", ":", "\n", "        ", "traj", ",", "t", "=", "traj_1_generator", "(", "model", ",", "env", ")", "\n", "obs", ",", "acs", ",", "ep_len", ",", "ep_ret", "=", "traj", "[", "'ob'", "]", ",", "traj", "[", "'ac'", "]", ",", "traj", "[", "'ep_len'", "]", ",", "traj", "[", "'ep_ret'", "]", "\n", "obs_list", ".", "append", "(", "obs", ")", "\n", "acs_list", ".", "append", "(", "acs", ")", "\n", "len_list", ".", "append", "(", "ep_len", ")", "\n", "ret_list", ".", "append", "(", "ep_ret", ")", "\n", "total_t", "+=", "t", "\n", "#avg_len = sum(len_list)/len(len_list)", "\n", "#avg_ret = sum(ret_list)/len(ret_list)", "\n", "#print(\"Average length:\", avg_len)", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.runner.Runner.run": [[32, 90], ["tensorflow.train.Server", "tensorflow.Session", "tensorflow.device", "baselines.ssrl_pong.model.Model", "tensorflow.device", "baselines.ssrl_pong.model.Model", "baselines.common.vec_env.vec_frame_stack.VecFrameStack", "runner.Runner.env.reset", "sess.run", "sess.run", "time.sleep", "baselines.common.cmd_util.make_atari_env", "tensorflow.variables_initializer", "tensorflow.global_variables_initializer", "runner.Runner.model.copy", "runner.Runner.model.step", "runner.Runner.env.step", "obs_buf.append", "acs_buf.append", "str", "numpy.array", "numpy.array", "numpy.array", "runner.Runner.output_queue.put", "tensorflow.global_variables", "v.name.startswith", "obs_list.extend", "acs_list.extend", "ret_list.extend", "runner.Runner.output_queue.qsize", "time.sleep", "str", "range"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.put"], ["", "return", "obs_list", ",", "acs_list", ",", "ret_list", ",", "total_t", "\n", "\n", "\n", "# Sample one trajectory (until trajectory end)", "\n", "", "def", "traj_1_generator", "(", "model", ",", "env", ")", ":", "\n", "\n", "    ", "t", "=", "0", "\n", "ac", "=", "env", ".", "action_space", ".", "sample", "(", ")", "# not used, just so we have the datatype", "\n", "new", "=", "True", "# marks if we're on first timestep of an episode", "\n", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "cur_ep_ret", "=", "0", "# return in current episode", "\n", "cur_ep_len", "=", "0", "# len of current episode", "\n", "\n", "# Initialize history arrays", "\n", "obs", "=", "[", "]", "\n", "rews", "=", "[", "]", "\n", "news", "=", "[", "]", "\n", "acs", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "ac", "=", "model", ".", "step", "(", "ob", "[", "'image'", "]", ")", "\n", "obs", ".", "append", "(", "ob", "[", "'image'", "]", ")", "\n", "news", ".", "append", "(", "new", ")", "\n", "acs", ".", "append", "(", "ac", ")", "\n", "\n", "ob", ",", "rew", ",", "new", ",", "_", "=", "env", ".", "step", "(", "ac", ")", "\n", "rews", ".", "append", "(", "rew", ")", "\n", "\n", "cur_ep_ret", "+=", "rew", "\n", "cur_ep_len", "+=", "1", "\n", "if", "new", ":", "\n", "            ", "break", "\n", "", "t", "+=", "1", "\n", "\n", "", "obs", "=", "np", ".", "array", "(", "obs", ")", "\n", "rews", "=", "np", ".", "array", "(", "rews", ")", "\n", "news", "=", "np", ".", "array", "(", "news", ")", "\n", "acs", "=", "np", ".", "array", "(", "acs", ")", "\n", "traj", "=", "{", "\"ob\"", ":", "obs", ",", "\"rew\"", ":", "rews", ",", "\"new\"", ":", "news", ",", "\"ac\"", ":", "acs", ",", "\n", "\"ep_ret\"", ":", "cur_ep_ret", ",", "\"ep_len\"", ":", "cur_ep_len", "}", "\n", "return", "traj", ",", "t", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.__init__": [[8, 48], ["model.Model.train_model.pdtype.sample_placeholder", "model.Model.train_model.pd.sample", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.gradients", "tensorflow.clip_by_global_norm", "list", "model.Model.global_step.assign_add", "tensorflow.train.RMSPropOptimizer", "tensorflow.group", "tensorflow.get_collection", "tensorflow.variable_scope", "baselines.ssrl_pong.policies.CnnPolicy", "baselines.ssrl_pong.policies.CnnPolicy", "tensorflow.get_variable", "tensorflow.reduce_mean", "tensorflow.variable_scope", "tensorflow.trainable_variables", "zip", "model.Model.trainer.apply_gradients", "tensorflow.reduce_mean", "tensorflow.get_variable_scope", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample"], ["    ", "def", "__init__", "(", "self", ",", "ob_space", ",", "ac_space", ",", "batch_size", "=", "128", ",", "lr", "=", "5e-4", ",", "ent_coef", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "self", ".", "ob_space", "=", "ob_space", "\n", "self", ".", "ac_space", "=", "ac_space", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "act_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "1", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "False", ")", "\n", "self", ".", "train_model", "=", "Policy", "(", "sess", "=", "self", ".", "sess", ",", "\n", "ob_space", "=", "ob_space", ",", "\n", "ac_space", "=", "ac_space", ",", "\n", "nbatch", "=", "batch_size", ",", "\n", "nsteps", "=", "1", ",", "\n", "reuse", "=", "True", ")", "\n", "\n", "self", ".", "ob_ph", "=", "self", ".", "train_model", ".", "X", "\n", "self", ".", "ac_ph", "=", "self", ".", "train_model", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "self", ".", "ac", "=", "self", ".", "train_model", ".", "pd", ".", "sample", "(", ")", "\n", "self", ".", "neglogpac", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "train_model", ".", "pi", ",", "labels", "=", "self", ".", "ac_ph", ")", "\n", "\n", "#self.loss = tf.reduce_mean(self.neglogpac) - ent_coef * tf.reduce_mean(self.train_model.entropy)", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "neglogpac", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ")", ":", "\n", "            ", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "params", ")", "\n", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "self", ".", "trainer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "self", ".", "_train", "=", "self", ".", "trainer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "sess", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "ob", ")", ":", "\n", "        ", "a", "=", "self", ".", "act_model", ".", "step", "(", "np", ".", "expand_dims", "(", "ob", ",", "axis", "=", "0", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "return", "a", "\n", "\n", "", "def", "train", "(", "self", ",", "obs", ",", "acs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.step": [[49, 52], ["model.Model.act_model.step"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["        ", "td_map", "=", "{", "self", ".", "ob_ph", ":", "obs", ",", "self", ".", "ac_ph", ":", "acs", "}", "\n", "train_loss", ",", "_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "_train", "]", ",", "td_map", ")", "\n", "#print(\"Training loss: {}\".format(train_loss))", "\n", "return", "train_loss", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.train": [[53, 58], ["model.Model.sess.run"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["#print(\"Training loss: {}\".format(train_loss))", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy": [[60, 84], ["sorted", "sorted", "zip", "model.Model.sess.run", "e2_v.assign", "update_ops.append", "tensorflow.trainable_variables", "t.name.startswith", "tensorflow.trainable_variables", "t.name.startswith"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.Scheduler.__init__": [[207, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "v", ",", "nvalues", ",", "schedule", ")", ":", "\n", "        ", "self", ".", "n", "=", "0.", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "nvalues", "=", "nvalues", "\n", "self", ".", "schedule", "=", "schedules", "[", "schedule", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.Scheduler.value": [[213, 217], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "current_value", "=", "self", ".", "v", "*", "self", ".", "schedule", "(", "self", ".", "n", "/", "self", ".", "nvalues", ")", "\n", "self", ".", "n", "+=", "1.", "\n", "return", "current_value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.Scheduler.value_steps": [[218, 220], ["utils.Scheduler.schedule"], "methods", ["None"], ["", "def", "value_steps", "(", "self", ",", "steps", ")", ":", "\n", "        ", "return", "self", ".", "v", "*", "self", ".", "schedule", "(", "steps", "/", "self", ".", "nvalues", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.__init__": [[223, 231], ["range", "collections.deque", "collections.deque", "utils.EpisodeStats.episode_rewards.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "nsteps", ",", "nenvs", ")", ":", "\n", "        ", "self", ".", "episode_rewards", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nenvs", ")", ":", "\n", "            ", "self", ".", "episode_rewards", ".", "append", "(", "[", "]", ")", "\n", "", "self", ".", "lenbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode lengths", "\n", "self", ".", "rewbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode rewards", "\n", "self", ".", "nsteps", "=", "nsteps", "\n", "self", ".", "nenvs", "=", "nenvs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.feed": [[232, 244], ["numpy.reshape", "numpy.reshape", "range", "range", "utils.EpisodeStats.episode_rewards[].append", "len", "sum", "utils.EpisodeStats.lenbuffer.append", "utils.EpisodeStats.rewbuffer.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "feed", "(", "self", ",", "rewards", ",", "masks", ")", ":", "\n", "        ", "rewards", "=", "np", ".", "reshape", "(", "rewards", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "masks", "=", "np", ".", "reshape", "(", "masks", ",", "[", "self", ".", "nenvs", ",", "self", ".", "nsteps", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "nenvs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "self", ".", "nsteps", ")", ":", "\n", "                ", "self", ".", "episode_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", "[", "j", "]", ")", "\n", "if", "masks", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "l", "=", "len", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "s", "=", "sum", "(", "self", ".", "episode_rewards", "[", "i", "]", ")", "\n", "self", ".", "lenbuffer", ".", "append", "(", "l", ")", "\n", "self", ".", "rewbuffer", ".", "append", "(", "s", ")", "\n", "self", ".", "episode_rewards", "[", "i", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.mean_length": [[245, 250], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "", "", "def", "mean_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "lenbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "lenbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "# on the first params dump, no episodes are finished", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.EpisodeStats.mean_reward": [[251, 256], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], ["", "", "def", "mean_reward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rewbuffer", ":", "\n", "            ", "return", "np", ".", "mean", "(", "self", ".", "rewbuffer", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.sample": [[8, 11], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["def", "sample", "(", "logits", ")", ":", "\n", "    ", "noise", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "noise", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy": [[12, 18], ["tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy", "(", "logits", ")", ":", "\n", "    ", "a0", "=", "logits", "-", "tf", ".", "reduce_max", "(", "logits", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.cat_entropy_softmax": [[19, 21], ["tensorflow.reduce_sum", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "cat_entropy_softmax", "(", "p0", ")", ":", "\n", "    ", "return", "-", "tf", ".", "reduce_sum", "(", "p0", "*", "tf", ".", "log", "(", "p0", "+", "1e-6", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.mse": [[22, 24], ["tensorflow.square"], "function", ["None"], ["", "def", "mse", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "square", "(", "pred", "-", "target", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init": [[25, 41], ["tuple", "numpy.random.normal", "numpy.linalg.svd", "q.reshape.reshape", "len", "len", "numpy.prod"], "function", ["None"], ["", "def", "ortho_init", "(", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_ortho_init", "(", "shape", ",", "dtype", ",", "partition_info", "=", "None", ")", ":", "\n", "#lasagne ortho init for tf", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "flat_shape", "=", "shape", "\n", "", "elif", "len", "(", "shape", ")", "==", "4", ":", "# assumes NHWC", "\n", "            ", "flat_shape", "=", "(", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "# pick the one with the correct shape", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "(", "scale", "*", "q", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "_ortho_init", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv": [[42, 62], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "x.get_shape", "tensorflow.reshape", "tensorflow.nn.conv2d", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "def", "conv", "(", "x", ",", "scope", ",", "*", ",", "nf", ",", "rf", ",", "stride", ",", "pad", "=", "'VALID'", ",", "init_scale", "=", "1.0", ",", "data_format", "=", "'NHWC'", ",", "one_dim_bias", "=", "False", ")", ":", "\n", "    ", "if", "data_format", "==", "'NHWC'", ":", "\n", "        ", "channel_ax", "=", "3", "\n", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "bshape", "=", "[", "1", ",", "1", ",", "1", ",", "nf", "]", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "        ", "channel_ax", "=", "1", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "bshape", "=", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "bias_var_shape", "=", "[", "nf", "]", "if", "one_dim_bias", "else", "[", "1", ",", "nf", ",", "1", ",", "1", "]", "\n", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "channel_ax", "]", ".", "value", "\n", "wshape", "=", "[", "rf", ",", "rf", ",", "nin", ",", "nf", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "wshape", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "bias_var_shape", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "if", "not", "one_dim_bias", "and", "data_format", "==", "'NHWC'", ":", "\n", "            ", "b", "=", "tf", ".", "reshape", "(", "b", ",", "bshape", ")", "\n", "", "return", "b", "+", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "strides", ",", "padding", "=", "pad", ",", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc": [[63, 69], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "x.get_shape", "utils.ortho_init", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "fc", "(", "x", ",", "scope", ",", "nh", ",", "*", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "nin", ",", "nh", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_bias", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.batch_to_seq": [[70, 76], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.squeeze", "tensorflow.split"], "function", ["None"], ["", "", "def", "batch_to_seq", "(", "h", ",", "nbatch", ",", "nsteps", ",", "flat", "=", "False", ")", ":", "\n", "    ", "if", "flat", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", "]", ")", "\n", "", "else", ":", "\n", "        ", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "nbatch", ",", "nsteps", ",", "-", "1", "]", ")", "\n", "", "return", "[", "tf", ".", "squeeze", "(", "v", ",", "[", "1", "]", ")", "for", "v", "in", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "nsteps", ",", "value", "=", "h", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.seq_to_batch": [[77, 85], ["h[].get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "h[].get_shape", "len", "tensorflow.concat", "tensorflow.stack", "h[].get_shape"], "function", ["None"], ["", "def", "seq_to_batch", "(", "h", ",", "flat", "=", "False", ")", ":", "\n", "    ", "shape", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "not", "flat", ":", "\n", "        ", "assert", "(", "len", "(", "shape", ")", ">", "1", ")", "\n", "nh", "=", "h", "[", "0", "]", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "h", ")", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "values", "=", "h", ",", "axis", "=", "1", ")", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lstm": [[86, 109], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init"], ["", "", "def", "lstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "tf", ".", "matmul", "(", "x", ",", "wx", ")", "+", "tf", ".", "matmul", "(", "h", ",", "wh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "c", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln": [[110, 115], ["tensorflow.nn.moments", "tensorflow.sqrt"], "function", ["None"], ["", "def", "_ln", "(", "x", ",", "g", ",", "b", ",", "e", "=", "1e-5", ",", "axes", "=", "[", "1", "]", ")", ":", "\n", "    ", "u", ",", "s", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "axes", ",", "keep_dims", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "tf", ".", "sqrt", "(", "s", "+", "e", ")", "\n", "x", "=", "x", "*", "g", "+", "b", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.lnlstm": [[116, 148], ["len", "tensorflow.split", "enumerate", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "zip", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.tanh", "xs[].get_shape", "tensorflow.tanh", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils.ortho_init", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "utils._ln", "utils._ln", "utils._ln", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.ortho_init", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils._ln"], ["", "def", "lnlstm", "(", "xs", ",", "ms", ",", "s", ",", "scope", ",", "nh", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "nbatch", ",", "nin", "=", "[", "v", ".", "value", "for", "v", "in", "xs", "[", "0", "]", ".", "get_shape", "(", ")", "]", "\n", "nsteps", "=", "len", "(", "xs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "wx", "=", "tf", ".", "get_variable", "(", "\"wx\"", ",", "[", "nin", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gx", "=", "tf", ".", "get_variable", "(", "\"gx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bx", "=", "tf", ".", "get_variable", "(", "\"bx\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\"wh\"", ",", "[", "nh", ",", "nh", "*", "4", "]", ",", "initializer", "=", "ortho_init", "(", "init_scale", ")", ")", "\n", "gh", "=", "tf", ".", "get_variable", "(", "\"gh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bh", "=", "tf", ".", "get_variable", "(", "\"bh\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "*", "4", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "gc", "=", "tf", ".", "get_variable", "(", "\"gc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "bc", "=", "tf", ".", "get_variable", "(", "\"bc\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "", "c", ",", "h", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "s", ")", "\n", "for", "idx", ",", "(", "x", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ms", ")", ")", ":", "\n", "        ", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "h", "=", "h", "*", "(", "1", "-", "m", ")", "\n", "z", "=", "_ln", "(", "tf", ".", "matmul", "(", "x", ",", "wx", ")", ",", "gx", ",", "bx", ")", "+", "_ln", "(", "tf", ".", "matmul", "(", "h", ",", "wh", ")", ",", "gh", ",", "bh", ")", "+", "b", "\n", "i", ",", "f", ",", "o", ",", "u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "z", ")", "\n", "i", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "nn", ".", "sigmoid", "(", "f", ")", "\n", "o", "=", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "u", "=", "tf", ".", "tanh", "(", "u", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "u", "\n", "h", "=", "o", "*", "tf", ".", "tanh", "(", "_ln", "(", "c", ",", "gc", ",", "bc", ")", ")", "\n", "xs", "[", "idx", "]", "=", "h", "\n", "", "s", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "c", ",", "h", "]", ")", "\n", "return", "xs", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.conv_to_fc": [[149, 153], ["numpy.prod", "tensorflow.reshape", "tf.reshape.get_shape"], "function", ["None"], ["", "def", "conv_to_fc", "(", "x", ")", ":", "\n", "    ", "nh", "=", "np", ".", "prod", "(", "[", "v", ".", "value", "for", "v", "in", "x", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nh", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.discount_with_dones": [[154, 161], ["zip", "discounted.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "discount_with_dones", "(", "rewards", ",", "dones", ",", "gamma", ")", ":", "\n", "    ", "discounted", "=", "[", "]", "\n", "r", "=", "0", "\n", "for", "reward", ",", "done", "in", "zip", "(", "rewards", "[", ":", ":", "-", "1", "]", ",", "dones", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "        ", "r", "=", "reward", "+", "gamma", "*", "r", "*", "(", "1.", "-", "done", ")", "# fixed off by one bug", "\n", "discounted", ".", "append", "(", "r", ")", "\n", "", "return", "discounted", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.find_trainable_variables": [[162, 165], ["tensorflow.variable_scope", "tensorflow.trainable_variables"], "function", ["None"], ["", "def", "find_trainable_variables", "(", "key", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "key", ")", ":", "\n", "        ", "return", "tf", ".", "trainable_variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.make_path": [[166, 168], ["os.makedirs"], "function", ["None"], ["", "", "def", "make_path", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "makedirs", "(", "f", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.constant": [[169, 171], ["None"], "function", ["None"], ["", "def", "constant", "(", "p", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.linear": [[172, 174], ["None"], "function", ["None"], ["", "def", "linear", "(", "p", ")", ":", "\n", "    ", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.middle_drop": [[175, 180], ["None"], "function", ["None"], ["", "def", "middle_drop", "(", "p", ")", ":", "\n", "    ", "eps", "=", "0.75", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.double_linear_con": [[181, 187], ["None"], "function", ["None"], ["", "def", "double_linear_con", "(", "p", ")", ":", "\n", "    ", "p", "*=", "2", "\n", "eps", "=", "0.125", "\n", "if", "1", "-", "p", "<", "eps", ":", "\n", "        ", "return", "eps", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.double_middle_drop": [[188, 196], ["None"], "function", ["None"], ["", "def", "double_middle_drop", "(", "p", ")", ":", "\n", "    ", "eps1", "=", "0.75", "\n", "eps2", "=", "0.25", "\n", "if", "1", "-", "p", "<", "eps1", ":", "\n", "        ", "if", "1", "-", "p", "<", "eps2", ":", "\n", "            ", "return", "eps2", "*", "0.5", "\n", "", "return", "eps1", "*", "0.1", "\n", "", "return", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.get_by_index": [[259, 266], ["tensorflow.gather", "len", "len", "tensorflow.reshape", "x.get_shape", "idx.get_shape", "tensorflow.range"], "function", ["None"], ["", "", "", "def", "get_by_index", "(", "x", ",", "idx", ")", ":", "\n", "    ", "assert", "(", "len", "(", "x", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "assert", "(", "len", "(", "idx", ".", "get_shape", "(", ")", ")", "==", "1", ")", "\n", "idx_flattened", "=", "tf", ".", "range", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ")", "*", "x", ".", "shape", "[", "1", "]", "+", "idx", "\n", "y", "=", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", ",", "# flatten input", "\n", "idx_flattened", ")", "# use flattened indices", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape": [[267, 272], ["zip", "t.get_shape().as_list", "str", "str", "t.get_shape", "t.get_shape", "str"], "function", ["None"], ["", "def", "check_shape", "(", "ts", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "for", "(", "t", ",", "shape", ")", "in", "zip", "(", "ts", ",", "shapes", ")", ":", "\n", "        ", "assert", "t", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "shape", ",", "\"id \"", "+", "str", "(", "i", ")", "+", "\" shape \"", "+", "str", "(", "t", ".", "get_shape", "(", ")", ")", "+", "str", "(", "shape", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.avg_norm": [[273, 275], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["None"], ["", "", "def", "avg_norm", "(", "t", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "t", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.gradient_add": [[276, 285], ["print"], "function", ["None"], ["", "def", "gradient_add", "(", "g1", ",", "g2", ",", "param", ")", ":", "\n", "    ", "print", "(", "[", "g1", ",", "g2", ",", "param", ".", "name", "]", ")", "\n", "assert", "(", "not", "(", "g1", "is", "None", "and", "g2", "is", "None", ")", ")", ",", "param", ".", "name", "\n", "if", "g1", "is", "None", ":", "\n", "        ", "return", "g2", "\n", "", "elif", "g2", "is", "None", ":", "\n", "        ", "return", "g1", "\n", "", "else", ":", "\n", "        ", "return", "g1", "+", "g2", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.q_explained_variance": [[286, 291], ["tensorflow.nn.moments", "tensorflow.nn.moments", "utils.check_shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.check_shape"], ["", "", "def", "q_explained_variance", "(", "qpred", ",", "q", ")", ":", "\n", "    ", "_", ",", "vary", "=", "tf", ".", "nn", ".", "moments", "(", "q", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "_", ",", "varpred", "=", "tf", ".", "nn", ".", "moments", "(", "q", "-", "qpred", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "check_shape", "(", "[", "vary", ",", "varpred", "]", ",", "[", "[", "]", "]", "*", "2", ")", "\n", "return", "1.0", "-", "(", "varpred", "/", "vary", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.Worker.__init__": [[95, 102], ["multiprocessing.Process.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.Worker.run": [[103, 117], ["tensorflow.train.Server", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "tensorflow.Session", "tensorflow.device", "baselines.ssrl_pong.model.Model", "run_atari.Worker.input_queue.get", "baselines.ssrl_pong.model.Model.train", "print"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.Scheduler.__init__": [[119, 123], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.Scheduler.check": [[124, 130], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.DataHelper.__init__": [[135, 146], ["multiprocessing.Process.__init__", "collections.deque", "baselines.ssrl_pong.buffer.Buffer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.DataHelper.run": [[152, 191], ["time.time", "time.time", "time.time", "time.time", "collections.deque", "collections.deque", "range", "range", "len", "run_atari.DataHelper.output_queue.get", "run_atari.DataHelper.ret_buf.append", "print", "time.time", "time.time", "time.time", "time.time", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.logkv", "baselines.logger.dumpkvs", "collections.deque.popleft", "collections.deque.popleft", "run_atari.DataHelper.buf.add", "run_atari.DataHelper.buf.sample", "run_atari.DataHelper.input_queue.put", "collections.deque.extend", "collections.deque.extend", "len", "numpy.mean", "run_atari.DataHelper.input_queue.qsize", "time.sleep", "time.sleep", "time.sleep", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.logkv", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.add", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.put", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.handler": [[24, 27], ["print", "exit"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "configure", "(", "dir", "=", "args", ".", "log_dir", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ",", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.argsparser": [[30, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.learn": [[46, 93], ["baselines.common.set_global_seeds", "baselines.common.vec_env.vec_frame_stack.VecFrameStack", "tensorflow.train.ClusterSpec", "multiprocessing.Queue", "multiprocessing.Queue", "range", "run_atari.DataHelper", "DataHelper.start", "range", "tensorflow.train.Server", "tensorflow.Session", "baselines.common.cmd_util.make_atari_env", "runners.append", "runners[].start", "int", "workers.append", "workers[].start", "tf.Session.as_default", "tf.Session.run", "range", "baselines.ssrl_pong.runner.Runner", "run_atari.Worker", "tensorflow.ConfigProto", "tensorflow.device", "baselines.ssrl_pong.model.Model", "tensorflow.global_variables_initializer", "time.sleep", "time.sleep", "range", "range"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.run_atari.main": [[193, 200], ["run_atari.argsparser", "argsparser.parse_args", "baselines.logger.configure", "run_atari.learn", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.argsparser", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.configure", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.statistics.stats.__init__": [[13, 33], ["tensorflow.summary.merge", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "statistics.stats.scalar_summaries_ph.append", "statistics.stats.scalar_summaries.append", "tensorflow.placeholder", "tensorflow.summary.scalar", "statistics.stats.histogram_summaries_ph.append", "statistics.stats.histogram_summaries.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "scalar_keys", "=", "[", "]", ",", "histogram_keys", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "scalar_keys", "=", "scalar_keys", "\n", "self", ".", "histogram_keys", "=", "histogram_keys", "\n", "self", ".", "scalar_summaries", "=", "[", "]", "\n", "self", ".", "scalar_summaries_ph", "=", "[", "]", "\n", "self", ".", "histogram_summaries_ph", "=", "[", "]", "\n", "self", ".", "histogram_summaries", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'summary'", ")", ":", "\n", "            ", "for", "k", "in", "scalar_keys", ":", "\n", "                ", "ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "None", ",", "name", "=", "k", "+", "'.scalar.summary'", ")", "\n", "sm", "=", "tf", ".", "summary", ".", "scalar", "(", "k", "+", "'.scalar.summary'", ",", "ph", ")", "\n", "self", ".", "scalar_summaries_ph", ".", "append", "(", "ph", ")", "\n", "self", ".", "scalar_summaries", ".", "append", "(", "sm", ")", "\n", "", "for", "k", "in", "histogram_keys", ":", "\n", "                ", "ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "None", ",", "name", "=", "k", "+", "'.histogram.summary'", ")", "\n", "sm", "=", "tf", ".", "summary", ".", "scalar", "(", "k", "+", "'.histogram.summary'", ",", "ph", ")", "\n", "self", ".", "histogram_summaries_ph", ".", "append", "(", "ph", ")", "\n", "self", ".", "histogram_summaries", ".", "append", "(", "sm", ")", "\n", "\n", "", "", "self", ".", "summaries", "=", "tf", ".", "summary", ".", "merge", "(", "self", ".", "scalar_summaries", "+", "self", ".", "histogram_summaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.statistics.stats.add_all_summary": [[34, 46], ["baselines.get_session", "zip", "baselines.get_session.run", "writer.add_summary", "numpy.sum", "feed_dict.update", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "add_all_summary", "(", "self", ",", "writer", ",", "values", ",", "iter", ")", ":", "\n", "# Note that the order of the incoming ```values``` should be the same as the that of the", "\n", "#            ```scalar_keys``` given in ```__init__```", "\n", "        ", "if", "np", ".", "sum", "(", "np", ".", "isnan", "(", "values", ")", "+", "0", ")", "!=", "0", ":", "\n", "            ", "return", "\n", "", "sess", "=", "U", ".", "get_session", "(", ")", "\n", "keys", "=", "self", ".", "scalar_summaries_ph", "+", "self", ".", "histogram_summaries_ph", "\n", "feed_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "summaries_str", "=", "sess", ".", "run", "(", "self", ".", "summaries", ",", "feed_dict", ")", "\n", "writer", ".", "add_summary", "(", "summaries_str", ",", "iter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.__init__": [[18, 24], ["tensorflow.variable_scope", "mlp_policy.MlpPolicy._init", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy._init"], ["def", "__init__", "(", "self", ",", "name", ",", "reuse", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "_init", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy._init": [[25, 63], ["isinstance", "baselines.common.distributions.make_pdtype", "baselines.get_placeholder", "tensorflow.clip_by_value", "range", "range", "baselines.common.distributions.make_pdtype.pdfromflat", "baselines.get_placeholder", "baselines.switch", "baselines.function", "tensorflow.variable_scope", "baselines.common.mpi_running_mean_std.RunningMeanStd", "tensorflow.nn.tanh", "baselines.acktr.utils.dense", "tensorflow.nn.tanh", "isinstance", "baselines.acktr.utils.dense", "tensorflow.get_variable", "tensorflow.concat", "baselines.acktr.utils.dense", "mlp_policy.MlpPolicy.pd.sample", "mlp_policy.MlpPolicy.pd.mode", "baselines.acktr.utils.dense", "baselines.acktr.utils.dense", "baselines.normc_initializer", "baselines.normc_initializer", "list", "baselines.normc_initializer", "tensorflow.zeros_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.common.distributions.make_pdtype.param_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.switch", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.mode", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.acktr.utils.dense", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape"], ["", "", "def", "_init", "(", "self", ",", "ob_space", ",", "ac_space", ",", "hid_size", ",", "num_hid_layers", ",", "gaussian_fixed_var", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "ob_space", ",", "gym", ".", "spaces", ".", "Box", ")", "\n", "\n", "self", ".", "pdtype", "=", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "sequence_length", "=", "None", "\n", "\n", "ob", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"ob\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "sequence_length", "]", "+", "list", "(", "ob_space", ".", "shape", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"obfilter\"", ")", ":", "\n", "            ", "self", ".", "ob_rms", "=", "RunningMeanStd", "(", "shape", "=", "ob_space", ".", "shape", ")", "\n", "\n", "", "obz", "=", "tf", ".", "clip_by_value", "(", "(", "ob", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "self", ".", "ob_rms", ".", "std", ",", "-", "5.0", ",", "5.0", ")", "\n", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "            ", "last_out", "=", "tf", ".", "nn", ".", "tanh", "(", "dense", "(", "last_out", ",", "hid_size", ",", "\"vffc%i\"", "%", "(", "i", "+", "1", ")", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "", "self", ".", "vpred", "=", "dense", "(", "last_out", ",", "1", ",", "\"vffinal\"", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "            ", "last_out", "=", "tf", ".", "nn", ".", "tanh", "(", "dense", "(", "last_out", ",", "hid_size", ",", "\"polfc%i\"", "%", "(", "i", "+", "1", ")", ",", "weight_init", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "\n", "", "if", "gaussian_fixed_var", "and", "isinstance", "(", "ac_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "mean", "=", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", ",", "\"polfinal\"", ",", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "logstd", "=", "tf", ".", "get_variable", "(", "name", "=", "\"logstd\"", ",", "shape", "=", "[", "1", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "pdparam", "=", "tf", ".", "concat", "(", "[", "mean", ",", "mean", "*", "0.0", "+", "logstd", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "pdparam", "=", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", ",", "\"polfinal\"", ",", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "\n", "", "self", ".", "pd", "=", "pdtype", ".", "pdfromflat", "(", "pdparam", ")", "\n", "\n", "self", ".", "state_in", "=", "[", "]", "\n", "self", ".", "state_out", "=", "[", "]", "\n", "\n", "# change for BC", "\n", "stochastic", "=", "U", ".", "get_placeholder", "(", "name", "=", "\"stochastic\"", ",", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "ac", "=", "U", ".", "switch", "(", "stochastic", ",", "self", ".", "pd", ".", "sample", "(", ")", ",", "self", ".", "pd", ".", "mode", "(", ")", ")", "\n", "self", ".", "ac", "=", "ac", "\n", "self", ".", "_act", "=", "U", ".", "function", "(", "[", "stochastic", ",", "ob", "]", ",", "[", "ac", ",", "self", ".", "vpred", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act": [[64, 67], ["mlp_policy.MlpPolicy._act"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "stochastic", ",", "ob", ")", ":", "\n", "        ", "ac1", ",", "vpred1", "=", "self", ".", "_act", "(", "stochastic", ",", "ob", "[", "None", "]", ")", "\n", "return", "ac1", "[", "0", "]", ",", "vpred1", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.get_variables": [[68, 70], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.get_trainable_variables": [[71, 73], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.get_initial_state": [[74, 76], ["None"], "methods", ["None"], ["", "def", "get_initial_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.behavior_clone.argsparser": [[24, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag", "baselines.common.misc_util.boolean_flag", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args"], ["def", "argsparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Tensorflow Implementation of Behavior Cloning\"", ")", "\n", "parser", ".", "add_argument", "(", "'--env_id'", ",", "help", "=", "'environment ID'", ",", "default", "=", "'Hopper-v1'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--expert_path'", ",", "type", "=", "str", ",", "default", "=", "'data/deterministic.trpo.Hopper.0.00.npz'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "help", "=", "'the directory to save model'", ",", "default", "=", "'checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "help", "=", "'the directory to save log file'", ",", "default", "=", "'log'", ")", "\n", "#  Mujoco Dataset Configuration", "\n", "parser", ".", "add_argument", "(", "'--traj_limitation'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "# Network Configuration (Using MLP Policy)", "\n", "parser", ".", "add_argument", "(", "'--policy_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "# for evaluatation", "\n", "boolean_flag", "(", "parser", ",", "'stochastic_policy'", ",", "default", "=", "False", ",", "help", "=", "'use stochastic/deterministic policy to evaluate'", ")", "\n", "boolean_flag", "(", "parser", ",", "'save_sample'", ",", "default", "=", "False", ",", "help", "=", "'save the trajectories or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--BC_max_iter'", ",", "help", "=", "'Max iteration for training BC'", ",", "type", "=", "int", ",", "default", "=", "1e5", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.behavior_clone.learn": [[42, 78], ["int", "policy_func", "baselines.common.tf_util.get_placeholder_cached", "policy_func.pdtype.sample_placeholder", "baselines.common.tf_util.get_placeholder_cached", "tensorflow.reduce_mean", "policy_func.get_trainable_variables", "baselines.common.mpi_adam.MpiAdam", "baselines.common.tf_util.function", "baselines.common.tf_util.initialize", "baselines.common.mpi_adam.MpiAdam.sync", "baselines.logger.log", "tqdm.tqdm", "baselines.common.tf_util.save_state", "tensorflow.square", "range", "dataset.get_next_batch", "U.function.", "baselines.common.mpi_adam.MpiAdam.update", "os.join", "int", "dataset.get_next_batch", "U.function.", "baselines.logger.log", "tempfile.TemporaryDirectory", "policy_func.get_variables", "baselines.common.tf_util.flatgrad"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.save_state", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.get_next_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.get_next_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad"], ["", "def", "learn", "(", "env", ",", "policy_func", ",", "dataset", ",", "optim_batch_size", "=", "128", ",", "max_iters", "=", "1e4", ",", "\n", "adam_epsilon", "=", "1e-5", ",", "optim_stepsize", "=", "3e-4", ",", "\n", "ckpt_dir", "=", "None", ",", "log_dir", "=", "None", ",", "task_name", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "\n", "    ", "val_per_iter", "=", "int", "(", "max_iters", "/", "10", ")", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "pi", "=", "policy_func", "(", "\"pi\"", ",", "ob_space", ",", "ac_space", ")", "# Construct network for new policy", "\n", "# placeholder", "\n", "ob", "=", "U", ".", "get_placeholder_cached", "(", "name", "=", "\"ob\"", ")", "\n", "ac", "=", "pi", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "stochastic", "=", "U", ".", "get_placeholder_cached", "(", "name", "=", "\"stochastic\"", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "ac", "-", "pi", ".", "ac", ")", ")", "\n", "var_list", "=", "pi", ".", "get_trainable_variables", "(", ")", "\n", "adam", "=", "MpiAdam", "(", "var_list", ",", "epsilon", "=", "adam_epsilon", ")", "\n", "lossandgrad", "=", "U", ".", "function", "(", "[", "ob", ",", "ac", ",", "stochastic", "]", ",", "[", "loss", "]", "+", "[", "U", ".", "flatgrad", "(", "loss", ",", "var_list", ")", "]", ")", "\n", "\n", "U", ".", "initialize", "(", ")", "\n", "adam", ".", "sync", "(", ")", "\n", "logger", ".", "log", "(", "\"Pretraining with Behavior Cloning...\"", ")", "\n", "for", "iter_so_far", "in", "tqdm", "(", "range", "(", "int", "(", "max_iters", ")", ")", ")", ":", "\n", "        ", "ob_expert", ",", "ac_expert", "=", "dataset", ".", "get_next_batch", "(", "optim_batch_size", ",", "'train'", ")", "\n", "train_loss", ",", "g", "=", "lossandgrad", "(", "ob_expert", ",", "ac_expert", ",", "True", ")", "\n", "adam", ".", "update", "(", "g", ",", "optim_stepsize", ")", "\n", "if", "verbose", "and", "iter_so_far", "%", "val_per_iter", "==", "0", ":", "\n", "            ", "ob_expert", ",", "ac_expert", "=", "dataset", ".", "get_next_batch", "(", "-", "1", ",", "'val'", ")", "\n", "val_loss", ",", "_", "=", "lossandgrad", "(", "ob_expert", ",", "ac_expert", ",", "True", ")", "\n", "logger", ".", "log", "(", "\"Training loss: {}, Validation loss: {}\"", ".", "format", "(", "train_loss", ",", "val_loss", ")", ")", "\n", "\n", "", "", "if", "ckpt_dir", "is", "None", ":", "\n", "        ", "savedir_fname", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", ".", "name", "\n", "", "else", ":", "\n", "        ", "savedir_fname", "=", "osp", ".", "join", "(", "ckpt_dir", ",", "task_name", ")", "\n", "", "U", ".", "save_state", "(", "savedir_fname", ",", "var_list", "=", "pi", ".", "get_variables", "(", ")", ")", "\n", "return", "savedir_fname", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.behavior_clone.get_task_name": [[80, 86], ["args.env_id.split"], "function", ["None"], ["", "def", "get_task_name", "(", "args", ")", ":", "\n", "    ", "task_name", "=", "'BC'", "\n", "task_name", "+=", "'.{}'", ".", "format", "(", "args", ".", "env_id", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "\n", "task_name", "+=", "'.traj_limitation_{}'", ".", "format", "(", "args", ".", "traj_limitation", ")", "\n", "task_name", "+=", "\".seed_{}\"", ".", "format", "(", "args", ".", "seed", ")", "\n", "return", "task_name", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.behavior_clone.main": [[88, 120], ["baselines.common.tf_util.make_session().__enter__", "baselines.common.set_global_seeds", "gym.make", "baselines.bench.Monitor", "bench.Monitor.seed", "gym.logger.setLevel", "behavior_clone.get_task_name", "os.join", "os.join", "baselines.gail.dataset.mujoco_dset.Mujoco_Dset", "behavior_clone.learn", "baselines.gail.run_mujoco.runner", "baselines.gail.mlp_policy.MlpPolicy", "baselines.common.tf_util.make_session", "baselines.logger.get_dir", "os.join", "baselines.logger.get_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.get_task_name", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "U", ".", "make_session", "(", "num_cpu", "=", "1", ")", ".", "__enter__", "(", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "env", "=", "gym", ".", "make", "(", "args", ".", "env_id", ")", "\n", "\n", "def", "policy_fn", "(", "name", ",", "ob_space", ",", "ac_space", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "return", "mlp_policy", ".", "MlpPolicy", "(", "name", "=", "name", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "\n", "reuse", "=", "reuse", ",", "hid_size", "=", "args", ".", "policy_hidden_size", ",", "num_hid_layers", "=", "2", ")", "\n", "", "env", "=", "bench", ".", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", "and", "\n", "osp", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "\"monitor.json\"", ")", ")", "\n", "env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "gym", ".", "logger", ".", "setLevel", "(", "logging", ".", "WARN", ")", "\n", "task_name", "=", "get_task_name", "(", "args", ")", "\n", "args", ".", "checkpoint_dir", "=", "osp", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "task_name", ")", "\n", "args", ".", "log_dir", "=", "osp", ".", "join", "(", "args", ".", "log_dir", ",", "task_name", ")", "\n", "dataset", "=", "Mujoco_Dset", "(", "expert_path", "=", "args", ".", "expert_path", ",", "traj_limitation", "=", "args", ".", "traj_limitation", ")", "\n", "savedir_fname", "=", "learn", "(", "env", ",", "\n", "policy_fn", ",", "\n", "dataset", ",", "\n", "max_iters", "=", "args", ".", "BC_max_iter", ",", "\n", "ckpt_dir", "=", "args", ".", "checkpoint_dir", ",", "\n", "log_dir", "=", "args", ".", "log_dir", ",", "\n", "task_name", "=", "task_name", ",", "\n", "verbose", "=", "True", ")", "\n", "avg_len", ",", "avg_ret", "=", "runner", "(", "env", ",", "\n", "policy_fn", ",", "\n", "savedir_fname", ",", "\n", "timesteps_per_batch", "=", "1024", ",", "\n", "number_trajs", "=", "10", ",", "\n", "stochastic_policy", "=", "args", ".", "stochastic_policy", ",", "\n", "save", "=", "args", ".", "save_sample", ",", "\n", "reuse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.__init__": [[21, 55], ["tuple", "adversary.TransitionClassifier.build_ph", "adversary.TransitionClassifier.build_graph", "adversary.TransitionClassifier.build_graph", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.reduce_mean", "adversary.TransitionClassifier.get_trainable_variables", "baselines.common.tf_util.function", "tensorflow.to_float", "tensorflow.to_float", "adversary.logit_bernoulli_entropy", "tensorflow.log", "tensorflow.zeros_like", "tensorflow.ones_like", "zip", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "baselines.common.tf_util.flatgrad", "tensorflow.nn.sigmoid"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.build_ph", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.build_graph", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.build_graph", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.logit_bernoulli_entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "hidden_size", ",", "entcoeff", "=", "0.001", ",", "lr_rate", "=", "1e-3", ",", "scope", "=", "\"adversary\"", ")", ":", "\n", "        ", "self", ".", "scope", "=", "scope", "\n", "self", ".", "observation_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "actions_shape", "=", "env", ".", "action_space", ".", "shape", "\n", "self", ".", "input_shape", "=", "tuple", "(", "[", "o", "+", "a", "for", "o", ",", "a", "in", "zip", "(", "self", ".", "observation_shape", ",", "self", ".", "actions_shape", ")", "]", ")", "\n", "self", ".", "num_actions", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "build_ph", "(", ")", "\n", "# Build grpah", "\n", "generator_logits", "=", "self", ".", "build_graph", "(", "self", ".", "generator_obs_ph", ",", "self", ".", "generator_acs_ph", ",", "reuse", "=", "False", ")", "\n", "expert_logits", "=", "self", ".", "build_graph", "(", "self", ".", "expert_obs_ph", ",", "self", ".", "expert_acs_ph", ",", "reuse", "=", "True", ")", "\n", "# Build accuracy", "\n", "generator_acc", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "to_float", "(", "tf", ".", "nn", ".", "sigmoid", "(", "generator_logits", ")", "<", "0.5", ")", ")", "\n", "expert_acc", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "to_float", "(", "tf", ".", "nn", ".", "sigmoid", "(", "expert_logits", ")", ">", "0.5", ")", ")", "\n", "# Build regression loss", "\n", "# let x = logits, z = targets.", "\n", "# z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))", "\n", "generator_loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "generator_logits", ",", "labels", "=", "tf", ".", "zeros_like", "(", "generator_logits", ")", ")", "\n", "generator_loss", "=", "tf", ".", "reduce_mean", "(", "generator_loss", ")", "\n", "expert_loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "expert_logits", ",", "labels", "=", "tf", ".", "ones_like", "(", "expert_logits", ")", ")", "\n", "expert_loss", "=", "tf", ".", "reduce_mean", "(", "expert_loss", ")", "\n", "# Build entropy loss", "\n", "logits", "=", "tf", ".", "concat", "(", "[", "generator_logits", ",", "expert_logits", "]", ",", "0", ")", "\n", "entropy", "=", "tf", ".", "reduce_mean", "(", "logit_bernoulli_entropy", "(", "logits", ")", ")", "\n", "entropy_loss", "=", "-", "entcoeff", "*", "entropy", "\n", "# Loss + Accuracy terms", "\n", "self", ".", "losses", "=", "[", "generator_loss", ",", "expert_loss", ",", "entropy", ",", "entropy_loss", ",", "generator_acc", ",", "expert_acc", "]", "\n", "self", ".", "loss_name", "=", "[", "\"generator_loss\"", ",", "\"expert_loss\"", ",", "\"entropy\"", ",", "\"entropy_loss\"", ",", "\"generator_acc\"", ",", "\"expert_acc\"", "]", "\n", "self", ".", "total_loss", "=", "generator_loss", "+", "expert_loss", "+", "entropy_loss", "\n", "# Build Reward for policy", "\n", "self", ".", "reward_op", "=", "-", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "generator_logits", ")", "+", "1e-8", ")", "\n", "var_list", "=", "self", ".", "get_trainable_variables", "(", ")", "\n", "self", ".", "lossandgrad", "=", "U", ".", "function", "(", "[", "self", ".", "generator_obs_ph", ",", "self", ".", "generator_acs_ph", ",", "self", ".", "expert_obs_ph", ",", "self", ".", "expert_acs_ph", "]", ",", "\n", "self", ".", "losses", "+", "[", "U", ".", "flatgrad", "(", "self", ".", "total_loss", ",", "var_list", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.build_ph": [[56, 61], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "build_ph", "(", "self", ")", ":", "\n", "        ", "self", ".", "generator_obs_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "self", ".", "observation_shape", ",", "name", "=", "\"observations_ph\"", ")", "\n", "self", ".", "generator_acs_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "self", ".", "actions_shape", ",", "name", "=", "\"actions_ph\"", ")", "\n", "self", ".", "expert_obs_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "self", ".", "observation_shape", ",", "name", "=", "\"expert_observations_ph\"", ")", "\n", "self", ".", "expert_acs_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "self", ".", "actions_shape", ",", "name", "=", "\"expert_actions_ph\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.build_graph": [[62, 75], ["tensorflow.variable_scope", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.variable_scope", "baselines.common.mpi_running_mean_std.RunningMeanStd", "tensorflow.get_variable_scope"], "methods", ["None"], ["", "def", "build_graph", "(", "self", ",", "obs_ph", ",", "acs_ph", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"obfilter\"", ")", ":", "\n", "                ", "self", ".", "obs_rms", "=", "RunningMeanStd", "(", "shape", "=", "self", ".", "observation_shape", ")", "\n", "", "obs", "=", "(", "obs_ph", "-", "self", ".", "obs_rms", ".", "mean", "/", "self", ".", "obs_rms", ".", "std", ")", "\n", "_input", "=", "tf", ".", "concat", "(", "[", "obs", ",", "acs_ph", "]", ",", "axis", "=", "1", ")", "# concatenate the two input -> form a transition", "\n", "p_h1", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "_input", ",", "self", ".", "hidden_size", ",", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ")", "\n", "p_h2", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "p_h1", ",", "self", ".", "hidden_size", ",", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ")", "\n", "logits", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "p_h2", ",", "1", ",", "activation_fn", "=", "tf", ".", "identity", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables": [[76, 78], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_reward": [[79, 88], ["tensorflow.get_default_session", "tensorflow.get_default_session.run", "len", "numpy.expand_dims", "len", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "get_reward", "(", "self", ",", "obs", ",", "acs", ")", ":", "\n", "        ", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "len", "(", "obs", ".", "shape", ")", "==", "1", ":", "\n", "            ", "obs", "=", "np", ".", "expand_dims", "(", "obs", ",", "0", ")", "\n", "", "if", "len", "(", "acs", ".", "shape", ")", "==", "1", ":", "\n", "            ", "acs", "=", "np", ".", "expand_dims", "(", "acs", ",", "0", ")", "\n", "", "feed_dict", "=", "{", "self", ".", "generator_obs_ph", ":", "obs", ",", "self", ".", "generator_acs_ph", ":", "acs", "}", "\n", "reward", "=", "sess", ".", "run", "(", "self", ".", "reward_op", ",", "feed_dict", ")", "\n", "return", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.logsigmoid": [[11, 14], ["tensorflow.nn.softplus"], "function", ["None"], ["def", "logsigmoid", "(", "a", ")", ":", "\n", "    ", "'''Equivalent to tf.log(tf.sigmoid(a))'''", "\n", "return", "-", "tf", ".", "nn", ".", "softplus", "(", "-", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.logit_bernoulli_entropy": [[16, 19], ["adversary.logsigmoid", "tensorflow.nn.sigmoid"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.logsigmoid"], ["def", "logit_bernoulli_entropy", "(", "logits", ")", ":", "\n", "    ", "ent", "=", "(", "1.", "-", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", ")", "*", "logits", "-", "logsigmoid", "(", "logits", ")", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.load_dataset": [[28, 31], ["baselines.gail.dataset.mujoco_dset.Mujoco_Dset"], "function", ["None"], ["def", "load_dataset", "(", "expert_path", ")", ":", "\n", "    ", "dataset", "=", "Mujoco_Dset", "(", "expert_path", "=", "expert_path", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.argsparser": [[33, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args"], ["", "def", "argsparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Do evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--policy_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "type", "=", "str", ",", "choices", "=", "[", "'Hopper'", ",", "'Walker2d'", ",", "'HalfCheetah'", ",", "\n", "'Humanoid'", ",", "'HumanoidStandup'", "]", ")", "\n", "boolean_flag", "(", "parser", ",", "'stochastic_policy'", ",", "default", "=", "False", ",", "help", "=", "'use stochastic/deterministic policy to evaluate'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.evaluate_env": [[43, 90], ["os.path.join", "gail-eval.load_dataset", "glob.glob", "enumerate", "baselines.gail.mlp_policy.MlpPolicy", "os.path.join", "gail-eval.evaluate_env.get_checkpoint_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.load_dataset"], ["", "def", "evaluate_env", "(", "env_name", ",", "seed", ",", "policy_hidden_size", ",", "stochastic", ",", "reuse", ",", "prefix", ")", ":", "\n", "\n", "    ", "def", "get_checkpoint_dir", "(", "checkpoint_list", ",", "limit", ",", "prefix", ")", ":", "\n", "        ", "for", "checkpoint", "in", "checkpoint_list", ":", "\n", "            ", "if", "(", "'limitation_'", "+", "str", "(", "limit", ")", "in", "checkpoint", ")", "and", "(", "prefix", "in", "checkpoint", ")", ":", "\n", "                ", "return", "checkpoint", "\n", "", "", "return", "None", "\n", "\n", "", "def", "policy_fn", "(", "name", ",", "ob_space", ",", "ac_space", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "return", "mlp_policy", ".", "MlpPolicy", "(", "name", "=", "name", ",", "ob_space", "=", "ob_space", ",", "ac_space", "=", "ac_space", ",", "\n", "reuse", "=", "reuse", ",", "hid_size", "=", "policy_hidden_size", ",", "num_hid_layers", "=", "2", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "'deterministic.trpo.'", "+", "env_name", "+", "'.0.00.npz'", ")", "\n", "dataset", "=", "load_dataset", "(", "data_path", ")", "\n", "checkpoint_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "'*'", "+", "env_name", "+", "\".*\"", ")", ")", "\n", "log", "=", "{", "\n", "'traj_limitation'", ":", "[", "]", ",", "\n", "'upper_bound'", ":", "[", "]", ",", "\n", "'avg_ret'", ":", "[", "]", ",", "\n", "'avg_len'", ":", "[", "]", ",", "\n", "'normalized_ret'", ":", "[", "]", "\n", "}", "\n", "for", "i", ",", "limit", "in", "enumerate", "(", "CONFIG", "[", "'traj_limitation'", "]", ")", ":", "\n", "# Do one evaluation", "\n", "        ", "upper_bound", "=", "sum", "(", "dataset", ".", "rets", "[", ":", "limit", "]", ")", "/", "limit", "\n", "checkpoint_dir", "=", "get_checkpoint_dir", "(", "checkpoint_list", ",", "limit", ",", "prefix", "=", "prefix", ")", "\n", "checkpoint_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "checkpoint_dir", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_name", "+", "'-v1'", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "print", "(", "'Trajectory limitation: {}, Load checkpoint: {}, '", ".", "format", "(", "limit", ",", "checkpoint_path", ")", ")", "\n", "avg_len", ",", "avg_ret", "=", "run_mujoco", ".", "runner", "(", "env", ",", "\n", "policy_fn", ",", "\n", "checkpoint_path", ",", "\n", "timesteps_per_batch", "=", "1024", ",", "\n", "number_trajs", "=", "10", ",", "\n", "stochastic_policy", "=", "stochastic", ",", "\n", "reuse", "=", "(", "(", "i", "!=", "0", ")", "or", "reuse", ")", ")", "\n", "normalized_ret", "=", "avg_ret", "/", "upper_bound", "\n", "print", "(", "'Upper bound: {}, evaluation returns: {}, normalized scores: {}'", ".", "format", "(", "\n", "upper_bound", ",", "avg_ret", ",", "normalized_ret", ")", ")", "\n", "log", "[", "'traj_limitation'", "]", ".", "append", "(", "limit", ")", "\n", "log", "[", "'upper_bound'", "]", ".", "append", "(", "upper_bound", ")", "\n", "log", "[", "'avg_ret'", "]", ".", "append", "(", "avg_ret", ")", "\n", "log", "[", "'avg_len'", "]", ".", "append", "(", "avg_len", ")", "\n", "log", "[", "'normalized_ret'", "]", ".", "append", "(", "normalized_ret", ")", "\n", "env", ".", "close", "(", ")", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.plot": [[92, 128], ["matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.grid", "matplotlib.savefig", "matplotlib.close", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.grid", "matplotlib.ylim", "matplotlib.savefig", "matplotlib.close", "numpy.ones", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "plot", "(", "env_name", ",", "bc_log", ",", "gail_log", ",", "stochastic", ")", ":", "\n", "    ", "upper_bound", "=", "bc_log", "[", "'upper_bound'", "]", "\n", "bc_avg_ret", "=", "bc_log", "[", "'avg_ret'", "]", "\n", "gail_avg_ret", "=", "gail_log", "[", "'avg_ret'", "]", "\n", "plt", ".", "plot", "(", "CONFIG", "[", "'traj_limitation'", "]", ",", "upper_bound", ")", "\n", "plt", ".", "plot", "(", "CONFIG", "[", "'traj_limitation'", "]", ",", "bc_avg_ret", ")", "\n", "plt", ".", "plot", "(", "CONFIG", "[", "'traj_limitation'", "]", ",", "gail_avg_ret", ")", "\n", "plt", ".", "xlabel", "(", "'Number of expert trajectories'", ")", "\n", "plt", ".", "ylabel", "(", "'Accumulated reward'", ")", "\n", "plt", ".", "title", "(", "'{} unnormalized scores'", ".", "format", "(", "env_name", ")", ")", "\n", "plt", ".", "legend", "(", "[", "'expert'", ",", "'bc-imitator'", ",", "'gail-imitator'", "]", ",", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'gray'", ",", "linestyle", "=", "'--'", ")", "\n", "if", "stochastic", ":", "\n", "        ", "title_name", "=", "'result/{}-unnormalized-stochastic-scores.png'", ".", "format", "(", "env_name", ")", "\n", "", "else", ":", "\n", "        ", "title_name", "=", "'result/{}-unnormalized-deterministic-scores.png'", ".", "format", "(", "env_name", ")", "\n", "", "plt", ".", "savefig", "(", "title_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "bc_normalized_ret", "=", "bc_log", "[", "'normalized_ret'", "]", "\n", "gail_normalized_ret", "=", "gail_log", "[", "'normalized_ret'", "]", "\n", "plt", ".", "plot", "(", "CONFIG", "[", "'traj_limitation'", "]", ",", "np", ".", "ones", "(", "len", "(", "CONFIG", "[", "'traj_limitation'", "]", ")", ")", ")", "\n", "plt", ".", "plot", "(", "CONFIG", "[", "'traj_limitation'", "]", ",", "bc_normalized_ret", ")", "\n", "plt", ".", "plot", "(", "CONFIG", "[", "'traj_limitation'", "]", ",", "gail_normalized_ret", ")", "\n", "plt", ".", "xlabel", "(", "'Number of expert trajectories'", ")", "\n", "plt", ".", "ylabel", "(", "'Normalized performance'", ")", "\n", "plt", ".", "title", "(", "'{} normalized scores'", ".", "format", "(", "env_name", ")", ")", "\n", "plt", ".", "legend", "(", "[", "'expert'", ",", "'bc-imitator'", ",", "'gail-imitator'", "]", ",", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'gray'", ",", "linestyle", "=", "'--'", ")", "\n", "if", "stochastic", ":", "\n", "        ", "title_name", "=", "'result/{}-normalized-stochastic-scores.png'", ".", "format", "(", "env_name", ")", "\n", "", "else", ":", "\n", "        ", "title_name", "=", "'result/{}-normalized-deterministic-scores.png'", ".", "format", "(", "env_name", ")", "\n", "", "plt", ".", "ylim", "(", "0", ",", "1.6", ")", "\n", "plt", ".", "savefig", "(", "title_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.main": [[130, 143], ["baselines.common.tf_util.make_session().__enter__", "baselines.common.set_global_seeds", "print", "gail-eval.evaluate_env", "print", "print", "gail-eval.evaluate_env", "print", "print", "gail-eval.plot", "baselines.common.tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.evaluate_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.gail-eval.evaluate_env", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "U", ".", "make_session", "(", "num_cpu", "=", "1", ")", ".", "__enter__", "(", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "print", "(", "'Evaluating {}'", ".", "format", "(", "args", ".", "env", ")", ")", "\n", "bc_log", "=", "evaluate_env", "(", "args", ".", "env", ",", "args", ".", "seed", ",", "args", ".", "policy_hidden_size", ",", "\n", "args", ".", "stochastic_policy", ",", "False", ",", "'BC'", ")", "\n", "print", "(", "'Evaluation for {}'", ".", "format", "(", "args", ".", "env", ")", ")", "\n", "print", "(", "bc_log", ")", "\n", "gail_log", "=", "evaluate_env", "(", "args", ".", "env", ",", "args", ".", "seed", ",", "args", ".", "policy_hidden_size", ",", "\n", "args", ".", "stochastic_policy", ",", "True", ",", "'gail'", ")", "\n", "print", "(", "'Evaluation for {}'", ".", "format", "(", "args", ".", "env", ")", ")", "\n", "print", "(", "gail_log", ")", "\n", "plot", "(", "args", ".", "env", ",", "bc_log", ",", "gail_log", ",", "args", ".", "stochastic_policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.argsparser": [[23, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag", "baselines.common.misc_util.boolean_flag", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "baselines.common.misc_util.boolean_flag", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.main.parse_args"], ["hid_size", "=", "32", ",", "num_hid_layers", "=", "2", ")", "\n", "", "env", "=", "make_mujoco_env", "(", "env_id", ",", "workerseed", ")", "\n", "trpo_mpi", ".", "learn", "(", "env", ",", "policy_fn", ",", "timesteps_per_batch", "=", "1024", ",", "max_kl", "=", "0.01", ",", "cg_iters", "=", "10", ",", "cg_damping", "=", "0.1", ",", "\n", "max_timesteps", "=", "num_timesteps", ",", "gamma", "=", "0.99", ",", "lam", "=", "0.98", ",", "vf_iters", "=", "5", ",", "vf_stepsize", "=", "1e-3", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "mujoco_arg_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "train", "(", "args", ".", "env", ",", "num_timesteps", "=", "args", ".", "num_timesteps", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.get_task_name": [[58, 69], ["args.env_id.split", "str", "str", "str", "str", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.main": [[71, 119], ["baselines.common.tf_util.make_session().__enter__", "baselines.common.set_global_seeds", "gym.make", "baselines.bench.Monitor", "bench.Monitor.seed", "gym.logger.setLevel", "run_mujoco.get_task_name", "os.join", "os.join", "bench.Monitor.close", "baselines.gail.mlp_policy.MlpPolicy", "baselines.gail.dataset.mujoco_dset.Mujoco_Dset", "baselines.gail.adversary.TransitionClassifier", "run_mujoco.train", "baselines.common.tf_util.make_session", "baselines.logger.get_dir", "os.join", "run_mujoco.runner", "baselines.logger.get_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.get_task_name", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.train": [[121, 155], ["behavior_clone.learn", "mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.common.set_global_seeds", "env.seed", "trpo_mpi.learn", "baselines.logger.set_level", "mpi4py.MPI.COMM_WORLD.Get_rank"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.set_level"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.runner": [[157, 194], ["policy_func", "baselines.common.tf_util.initialize", "baselines.common.tf_util.load_state", "tqdm.tqdm", "print", "print", "range", "run_mujoco.traj_1_generator", "obs_list.append", "acs_list.append", "len_list.append", "ret_list.append", "print", "print", "numpy.savez", "sum", "len", "sum", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "load_model_path.split"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.load_state", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.traj_1_generator", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.run_mujoco.traj_1_generator": [[197, 235], ["env.action_space.sample", "env.reset", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pi.act", "np.array.append", "np.array.append", "np.array.append", "env.step", "np.array.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.traj_segment_generator": [[23, 89], ["env.action_space.sample", "env.reset", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "np.array.copy", "pi.act", "reward_giver.get_reward", "env.step", "pi.act", "ep_rets.append", "ep_true_rets.append", "ep_lens.append", "env.reset", "range", "range"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_reward", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.mlp_policy.MlpPolicy.act", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["ep_rets", "=", "[", "]", "\n", "ep_lens", "=", "[", "]", "\n", "\n", "# Initialize history arrays", "\n", "obs", "=", "np", ".", "array", "(", "[", "ob", "for", "_", "in", "range", "(", "horizon", ")", "]", ")", "\n", "rews", "=", "np", ".", "zeros", "(", "horizon", ",", "'float32'", ")", "\n", "vpreds", "=", "np", ".", "zeros", "(", "horizon", ",", "'float32'", ")", "\n", "news", "=", "np", ".", "zeros", "(", "horizon", ",", "'int32'", ")", "\n", "acs", "=", "np", ".", "array", "(", "[", "ac", "for", "_", "in", "range", "(", "horizon", ")", "]", ")", "\n", "prevacs", "=", "acs", ".", "copy", "(", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "prevac", "=", "ac", "\n", "ac", ",", "vpred", "=", "pi", ".", "act", "(", "stochastic", ",", "ob", ")", "\n", "# Slight weirdness here because we need value function at time T", "\n", "# before returning segment [0, T-1] so we get the correct", "\n", "# terminal value", "\n", "if", "t", ">", "0", "and", "t", "%", "horizon", "==", "0", ":", "\n", "            ", "yield", "{", "\"ob\"", ":", "obs", ",", "\"rew\"", ":", "rews", ",", "\"vpred\"", ":", "vpreds", ",", "\"new\"", ":", "news", ",", "\n", "\"ac\"", ":", "acs", ",", "\"prevac\"", ":", "prevacs", ",", "\"nextvpred\"", ":", "vpred", "*", "(", "1", "-", "new", ")", ",", "\n", "\"ep_rets\"", ":", "ep_rets", ",", "\"ep_lens\"", ":", "ep_lens", "}", "\n", "_", ",", "vpred", "=", "pi", ".", "act", "(", "stochastic", ",", "ob", ")", "\n", "# Be careful!!! if you change the downstream algorithm to aggregate", "\n", "# several of these batches, then be sure to do a deepcopy", "\n", "ep_rets", "=", "[", "]", "\n", "ep_lens", "=", "[", "]", "\n", "", "i", "=", "t", "%", "horizon", "\n", "obs", "[", "i", "]", "=", "ob", "\n", "vpreds", "[", "i", "]", "=", "vpred", "\n", "news", "[", "i", "]", "=", "new", "\n", "acs", "[", "i", "]", "=", "ac", "\n", "prevacs", "[", "i", "]", "=", "prevac", "\n", "\n", "ob", ",", "rew", ",", "new", ",", "_", "=", "env", ".", "step", "(", "ac", ")", "\n", "rews", "[", "i", "]", "=", "rew", "\n", "\n", "cur_ep_ret", "+=", "rew", "\n", "cur_ep_len", "+=", "1", "\n", "if", "new", ":", "\n", "            ", "ep_rets", ".", "append", "(", "cur_ep_ret", ")", "\n", "ep_lens", ".", "append", "(", "cur_ep_len", ")", "\n", "cur_ep_ret", "=", "0", "\n", "cur_ep_len", "=", "0", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "t", "+=", "1", "\n", "\n", "", "", "def", "add_vtarg_and_adv", "(", "seg", ",", "gamma", ",", "lam", ")", ":", "\n", "    ", "new", "=", "np", ".", "append", "(", "seg", "[", "\"new\"", "]", ",", "0", ")", "# last element is only used for last vtarg, but we already zeroed it if last new = 1", "\n", "vpred", "=", "np", ".", "append", "(", "seg", "[", "\"vpred\"", "]", ",", "seg", "[", "\"nextvpred\"", "]", ")", "\n", "T", "=", "len", "(", "seg", "[", "\"rew\"", "]", ")", "\n", "seg", "[", "\"adv\"", "]", "=", "gaelam", "=", "np", ".", "empty", "(", "T", ",", "'float32'", ")", "\n", "rew", "=", "seg", "[", "\"rew\"", "]", "\n", "lastgaelam", "=", "0", "\n", "for", "t", "in", "reversed", "(", "range", "(", "T", ")", ")", ":", "\n", "        ", "nonterminal", "=", "1", "-", "new", "[", "t", "+", "1", "]", "\n", "delta", "=", "rew", "[", "t", "]", "+", "gamma", "*", "vpred", "[", "t", "+", "1", "]", "*", "nonterminal", "-", "vpred", "[", "t", "]", "\n", "gaelam", "[", "t", "]", "=", "lastgaelam", "=", "delta", "+", "gamma", "*", "lam", "*", "nonterminal", "*", "lastgaelam", "\n", "", "seg", "[", "\"tdlamret\"", "]", "=", "seg", "[", "\"adv\"", "]", "+", "seg", "[", "\"vpred\"", "]", "\n", "\n", "", "def", "learn", "(", "env", ",", "policy_fn", ",", "*", ",", "\n", "timesteps_per_batch", ",", "# what to train on", "\n", "max_kl", ",", "cg_iters", ",", "\n", "gamma", ",", "lam", ",", "# advantage estimation", "\n", "entcoeff", "=", "0.0", ",", "\n", "cg_damping", "=", "1e-2", ",", "\n", "vf_stepsize", "=", "3e-4", ",", "\n", "vf_iters", "=", "3", ",", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.add_vtarg_and_adv": [[91, 103], ["numpy.append", "numpy.append", "len", "numpy.empty", "reversed", "range"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["callback", "=", "None", "\n", ")", ":", "\n", "    ", "nworkers", "=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "3", ")", "\n", "# Setup losses and stuff", "\n", "# ----------------------------------------", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "ac_space", "=", "env", ".", "action_space", "\n", "pi", "=", "policy_fn", "(", "\"pi\"", ",", "ob_space", ",", "ac_space", ")", "\n", "oldpi", "=", "policy_fn", "(", "\"oldpi\"", ",", "ob_space", ",", "ac_space", ")", "\n", "atarg", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "# Target advantage function (if applicable)", "\n", "ret", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "# Empirical return", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.learn": [[105, 351], ["mpi4py.MPI.COMM_WORLD.Get_size", "mpi4py.MPI.COMM_WORLD.Get_rank", "numpy.set_printoptions", "policy_func", "policy_func", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.get_placeholder_cached", "policy_func.pdtype.sample_placeholder", "policy_func.pd.kl", "policy_func.pd.entropy", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.exp", "tensorflow.reduce_mean", "policy_func.get_trainable_variables", "baselines.common.mpi_adam.MpiAdam", "baselines.common.mpi_adam.MpiAdam", "baselines.GetFlat", "baselines.SetFromFlat", "tensorflow.gradients", "tensorflow.placeholder", "tensorflow.add_n", "baselines.flatgrad", "baselines.function", "baselines.function", "baselines.function", "baselines.function", "baselines.function", "baselines.initialize", "U.GetFlat.", "mpi4py.MPI.COMM_WORLD.Bcast", "U.SetFromFlat.", "baselines.common.mpi_adam.MpiAdam.sync", "baselines.common.mpi_adam.MpiAdam.sync", "trpo_mpi.traj_segment_generator", "time.time", "collections.deque", "collections.deque", "collections.deque", "baselines.gail.statistics.stats", "baselines.gail.statistics.stats", "baselines.gail.statistics.stats", "tensorflow.square", "len", "reward_giver.get_trainable_variables", "var.get_shape().as_list", "baselines.intprod", "tangents.append", "baselines.flatgrad", "isinstance", "numpy.empty_like", "mpi4py.MPI.COMM_WORLD.Allreduce", "print", "sum", "baselines.load_state", "baselines.logger.log", "baselines.logger.log", "range", "zip", "baselines.logger.record_tabular", "baselines.logger.log", "baselines.logger.log", "expert_dataset.get_next_batch", "baselines.common.dataset.iterbatches", "baselines.logger.log", "mpi4py.MPI.COMM_WORLD.allgather", "map", "collections.deque.extend", "collections.deque.extend", "collections.deque.extend", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "len", "sum", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "policy_func.pd.logp", "policy_func.pd.logp", "v.name.startswith", "len", "tensorflow.reshape", "tensorflow.reduce_sum", "print", "time.time", "print", "get_flat.sum", "callback", "os.path.join", "os.makedirs", "tensorflow.train.Saver", "tf.train.Saver.save", "trpo_mpi.add_vtarg_and_adv", "hasattr", "U.function.", "trpo_mpi.learn.allmean"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.kl", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.traj_segment_generator", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.adversary.TransitionClassifier.get_trainable_variables", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.load_state", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.get_next_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.iterbatches", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_cartpole.callback", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save", "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.add_vtarg_and_adv"], ["ob", "=", "U", ".", "get_placeholder_cached", "(", "name", "=", "\"ob\"", ")", "\n", "ac", "=", "pi", ".", "pdtype", ".", "sample_placeholder", "(", "[", "None", "]", ")", "\n", "\n", "kloldnew", "=", "oldpi", ".", "pd", ".", "kl", "(", "pi", ".", "pd", ")", "\n", "ent", "=", "pi", ".", "pd", ".", "entropy", "(", ")", "\n", "meankl", "=", "tf", ".", "reduce_mean", "(", "kloldnew", ")", "\n", "meanent", "=", "tf", ".", "reduce_mean", "(", "ent", ")", "\n", "entbonus", "=", "entcoeff", "*", "meanent", "\n", "\n", "vferr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "pi", ".", "vpred", "-", "ret", ")", ")", "\n", "\n", "ratio", "=", "tf", ".", "exp", "(", "pi", ".", "pd", ".", "logp", "(", "ac", ")", "-", "oldpi", ".", "pd", ".", "logp", "(", "ac", ")", ")", "# advantage * pnew / pold", "\n", "surrgain", "=", "tf", ".", "reduce_mean", "(", "ratio", "*", "atarg", ")", "\n", "\n", "optimgain", "=", "surrgain", "+", "entbonus", "\n", "losses", "=", "[", "optimgain", ",", "meankl", ",", "entbonus", ",", "surrgain", ",", "meanent", "]", "\n", "loss_names", "=", "[", "\"optimgain\"", ",", "\"meankl\"", ",", "\"entloss\"", ",", "\"surrgain\"", ",", "\"entropy\"", "]", "\n", "\n", "dist", "=", "meankl", "\n", "\n", "all_var_list", "=", "pi", ".", "get_trainable_variables", "(", ")", "\n", "var_list", "=", "[", "v", "for", "v", "in", "all_var_list", "if", "v", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ".", "startswith", "(", "\"pol\"", ")", "]", "\n", "vf_var_list", "=", "[", "v", "for", "v", "in", "all_var_list", "if", "v", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ".", "startswith", "(", "\"vf\"", ")", "]", "\n", "vfadam", "=", "MpiAdam", "(", "vf_var_list", ")", "\n", "\n", "get_flat", "=", "U", ".", "GetFlat", "(", "var_list", ")", "\n", "set_from_flat", "=", "U", ".", "SetFromFlat", "(", "var_list", ")", "\n", "klgrads", "=", "tf", ".", "gradients", "(", "dist", ",", "var_list", ")", "\n", "flat_tangent", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "\"flat_tan\"", ")", "\n", "shapes", "=", "[", "var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "for", "var", "in", "var_list", "]", "\n", "start", "=", "0", "\n", "tangents", "=", "[", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "sz", "=", "U", ".", "intprod", "(", "shape", ")", "\n", "tangents", ".", "append", "(", "tf", ".", "reshape", "(", "flat_tangent", "[", "start", ":", "start", "+", "sz", "]", ",", "shape", ")", ")", "\n", "start", "+=", "sz", "\n", "", "gvp", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "reduce_sum", "(", "g", "*", "tangent", ")", "for", "(", "g", ",", "tangent", ")", "in", "zipsame", "(", "klgrads", ",", "tangents", ")", "]", ")", "#pylint: disable=E1111", "\n", "fvp", "=", "U", ".", "flatgrad", "(", "gvp", ",", "var_list", ")", "\n", "\n", "assign_old_eq_new", "=", "U", ".", "function", "(", "[", "]", ",", "[", "]", ",", "updates", "=", "[", "tf", ".", "assign", "(", "oldv", ",", "newv", ")", "\n", "for", "(", "oldv", ",", "newv", ")", "in", "zipsame", "(", "oldpi", ".", "get_variables", "(", ")", ",", "pi", ".", "get_variables", "(", ")", ")", "]", ")", "\n", "compute_losses", "=", "U", ".", "function", "(", "[", "ob", ",", "ac", ",", "atarg", "]", ",", "losses", ")", "\n", "compute_lossandgrad", "=", "U", ".", "function", "(", "[", "ob", ",", "ac", ",", "atarg", "]", ",", "losses", "+", "[", "U", ".", "flatgrad", "(", "optimgain", ",", "var_list", ")", "]", ")", "\n", "compute_fvp", "=", "U", ".", "function", "(", "[", "flat_tangent", ",", "ob", ",", "ac", ",", "atarg", "]", ",", "fvp", ")", "\n", "compute_vflossandgrad", "=", "U", ".", "function", "(", "[", "ob", ",", "ret", "]", ",", "U", ".", "flatgrad", "(", "vferr", ",", "vf_var_list", ")", ")", "\n", "\n", "@", "contextmanager", "\n", "def", "timed", "(", "msg", ")", ":", "\n", "        ", "if", "rank", "==", "0", ":", "\n", "            ", "print", "(", "colorize", "(", "msg", ",", "color", "=", "'magenta'", ")", ")", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "yield", "\n", "print", "(", "colorize", "(", "\"done in %.3f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", ",", "color", "=", "'magenta'", ")", ")", "\n", "", "else", ":", "\n", "            ", "yield", "\n", "\n", "", "", "def", "allmean", "(", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "\n", "out", "=", "np", ".", "empty_like", "(", "x", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "x", ",", "out", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "out", "/=", "nworkers", "\n", "return", "out", "\n", "\n", "", "U", ".", "initialize", "(", ")", "\n", "th_init", "=", "get_flat", "(", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Bcast", "(", "th_init", ",", "root", "=", "0", ")", "\n", "set_from_flat", "(", "th_init", ")", "\n", "vfadam", ".", "sync", "(", ")", "\n", "print", "(", "\"Init param sum\"", ",", "th_init", ".", "sum", "(", ")", ",", "flush", "=", "True", ")", "\n", "\n", "# Prepare for rollouts", "\n", "# ----------------------------------------", "\n", "seg_gen", "=", "traj_segment_generator", "(", "pi", ",", "env", ",", "timesteps_per_batch", ",", "stochastic", "=", "True", ")", "\n", "\n", "episodes_so_far", "=", "0", "\n", "timesteps_so_far", "=", "0", "\n", "iters_so_far", "=", "0", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "lenbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode lengths", "\n", "rewbuffer", "=", "deque", "(", "maxlen", "=", "40", ")", "# rolling buffer for episode rewards", "\n", "\n", "assert", "sum", "(", "[", "max_iters", ">", "0", ",", "max_timesteps", ">", "0", ",", "max_episodes", ">", "0", "]", ")", "==", "1", "\n", "\n", "while", "True", ":", "\n", "        ", "if", "callback", ":", "callback", "(", "locals", "(", ")", ",", "globals", "(", ")", ")", "\n", "if", "max_timesteps", "and", "timesteps_so_far", ">=", "max_timesteps", ":", "\n", "            ", "break", "\n", "", "elif", "max_episodes", "and", "episodes_so_far", ">=", "max_episodes", ":", "\n", "            ", "break", "\n", "", "elif", "max_iters", "and", "iters_so_far", ">=", "max_iters", ":", "\n", "            ", "break", "\n", "", "logger", ".", "log", "(", "\"********** Iteration %i ************\"", "%", "iters_so_far", ")", "\n", "\n", "with", "timed", "(", "\"sampling\"", ")", ":", "\n", "            ", "seg", "=", "seg_gen", ".", "__next__", "(", ")", "\n", "", "add_vtarg_and_adv", "(", "seg", ",", "gamma", ",", "lam", ")", "\n", "\n", "# ob, ac, atarg, ret, td1ret = map(np.concatenate, (obs, acs, atargs, rets, td1rets))", "\n", "ob", ",", "ac", ",", "atarg", ",", "tdlamret", "=", "seg", "[", "\"ob\"", "]", ",", "seg", "[", "\"ac\"", "]", ",", "seg", "[", "\"adv\"", "]", ",", "seg", "[", "\"tdlamret\"", "]", "\n", "vpredbefore", "=", "seg", "[", "\"vpred\"", "]", "# predicted value function before udpate", "\n", "atarg", "=", "(", "atarg", "-", "atarg", ".", "mean", "(", ")", ")", "/", "atarg", ".", "std", "(", ")", "# standardized advantage function estimate", "\n", "\n", "if", "hasattr", "(", "pi", ",", "\"ret_rms\"", ")", ":", "pi", ".", "ret_rms", ".", "update", "(", "tdlamret", ")", "\n", "if", "hasattr", "(", "pi", ",", "\"ob_rms\"", ")", ":", "pi", ".", "ob_rms", ".", "update", "(", "ob", ")", "# update running mean/std for policy", "\n", "\n", "args", "=", "seg", "[", "\"ob\"", "]", ",", "seg", "[", "\"ac\"", "]", ",", "atarg", "\n", "fvpargs", "=", "[", "arr", "[", ":", ":", "5", "]", "for", "arr", "in", "args", "]", "\n", "def", "fisher_vector_product", "(", "p", ")", ":", "\n", "            ", "return", "allmean", "(", "compute_fvp", "(", "p", ",", "*", "fvpargs", ")", ")", "+", "cg_damping", "*", "p", "\n", "\n", "", "assign_old_eq_new", "(", ")", "# set old parameter values to new parameter values", "\n", "with", "timed", "(", "\"computegrad\"", ")", ":", "\n", "            ", "*", "lossbefore", ",", "g", "=", "compute_lossandgrad", "(", "*", "args", ")", "\n", "", "lossbefore", "=", "allmean", "(", "np", ".", "array", "(", "lossbefore", ")", ")", "\n", "g", "=", "allmean", "(", "g", ")", "\n", "if", "np", ".", "allclose", "(", "g", ",", "0", ")", ":", "\n", "            ", "logger", ".", "log", "(", "\"Got zero gradient. not updating\"", ")", "\n", "", "else", ":", "\n", "            ", "with", "timed", "(", "\"cg\"", ")", ":", "\n", "                ", "stepdir", "=", "cg", "(", "fisher_vector_product", ",", "g", ",", "cg_iters", "=", "cg_iters", ",", "verbose", "=", "rank", "==", "0", ")", "\n", "", "assert", "np", ".", "isfinite", "(", "stepdir", ")", ".", "all", "(", ")", "\n", "shs", "=", ".5", "*", "stepdir", ".", "dot", "(", "fisher_vector_product", "(", "stepdir", ")", ")", "\n", "lm", "=", "np", ".", "sqrt", "(", "shs", "/", "max_kl", ")", "\n", "# logger.log(\"lagrange multiplier:\", lm, \"gnorm:\", np.linalg.norm(g))", "\n", "fullstep", "=", "stepdir", "/", "lm", "\n", "expectedimprove", "=", "g", ".", "dot", "(", "fullstep", ")", "\n", "surrbefore", "=", "lossbefore", "[", "0", "]", "\n", "stepsize", "=", "1.0", "\n", "thbefore", "=", "get_flat", "(", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "thnew", "=", "thbefore", "+", "fullstep", "*", "stepsize", "\n", "set_from_flat", "(", "thnew", ")", "\n", "meanlosses", "=", "surr", ",", "kl", ",", "*", "_", "=", "allmean", "(", "np", ".", "array", "(", "compute_losses", "(", "*", "args", ")", ")", ")", "\n", "improve", "=", "surr", "-", "surrbefore", "\n", "logger", ".", "log", "(", "\"Expected: %.3f Actual: %.3f\"", "%", "(", "expectedimprove", ",", "improve", ")", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "meanlosses", ")", ".", "all", "(", ")", ":", "\n", "                    ", "logger", ".", "log", "(", "\"Got non-finite value of losses -- bad!\"", ")", "\n", "", "elif", "kl", ">", "max_kl", "*", "1.5", ":", "\n", "                    ", "logger", ".", "log", "(", "\"violated KL constraint. shrinking step.\"", ")", "\n", "", "elif", "improve", "<", "0", ":", "\n", "                    ", "logger", ".", "log", "(", "\"surrogate didn't improve. shrinking step.\"", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "log", "(", "\"Stepsize OK!\"", ")", "\n", "break", "\n", "", "stepsize", "*=", ".5", "\n", "", "else", ":", "\n", "                ", "logger", ".", "log", "(", "\"couldn't compute a good step\"", ")", "\n", "set_from_flat", "(", "thbefore", ")", "\n", "", "if", "nworkers", ">", "1", "and", "iters_so_far", "%", "20", "==", "0", ":", "\n", "                ", "paramsums", "=", "MPI", ".", "COMM_WORLD", ".", "allgather", "(", "(", "thnew", ".", "sum", "(", ")", ",", "vfadam", ".", "getflat", "(", ")", ".", "sum", "(", ")", ")", ")", "# list of tuples", "\n", "assert", "all", "(", "np", ".", "allclose", "(", "ps", ",", "paramsums", "[", "0", "]", ")", "for", "ps", "in", "paramsums", "[", "1", ":", "]", ")", "\n", "\n", "", "", "for", "(", "lossname", ",", "lossval", ")", "in", "zip", "(", "loss_names", ",", "meanlosses", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "lossname", ",", "lossval", ")", "\n", "\n", "", "with", "timed", "(", "\"vf\"", ")", ":", "\n", "\n", "            ", "for", "_", "in", "range", "(", "vf_iters", ")", ":", "\n", "                ", "for", "(", "mbob", ",", "mbret", ")", "in", "dataset", ".", "iterbatches", "(", "(", "seg", "[", "\"ob\"", "]", ",", "seg", "[", "\"tdlamret\"", "]", ")", ",", "\n", "include_final_partial_batch", "=", "False", ",", "batch_size", "=", "64", ")", ":", "\n", "                    ", "g", "=", "allmean", "(", "compute_vflossandgrad", "(", "mbob", ",", "mbret", ")", ")", "\n", "vfadam", ".", "update", "(", "g", ",", "vf_stepsize", ")", "\n", "\n", "", "", "", "logger", ".", "record_tabular", "(", "\"ev_tdlam_before\"", ",", "explained_variance", "(", "vpredbefore", ",", "tdlamret", ")", ")", "\n", "\n", "lrlocal", "=", "(", "seg", "[", "\"ep_lens\"", "]", ",", "seg", "[", "\"ep_rets\"", "]", ")", "# local values", "\n", "listoflrpairs", "=", "MPI", ".", "COMM_WORLD", ".", "allgather", "(", "lrlocal", ")", "# list of tuples", "\n", "lens", ",", "rews", "=", "map", "(", "flatten_lists", ",", "zip", "(", "*", "listoflrpairs", ")", ")", "\n", "lenbuffer", ".", "extend", "(", "lens", ")", "\n", "rewbuffer", ".", "extend", "(", "rews", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "\"EpLenMean\"", ",", "np", ".", "mean", "(", "lenbuffer", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"EpRewMean\"", ",", "np", ".", "mean", "(", "rewbuffer", ")", ")", "\n", "logger", ".", "record_tabular", "(", "\"EpThisIter\"", ",", "len", "(", "lens", ")", ")", "\n", "episodes_so_far", "+=", "len", "(", "lens", ")", "\n", "timesteps_so_far", "+=", "sum", "(", "lens", ")", "\n", "iters_so_far", "+=", "1", "\n", "\n", "logger", ".", "record_tabular", "(", "\"EpisodesSoFar\"", ",", "episodes_so_far", ")", "\n", "logger", ".", "record_tabular", "(", "\"TimestepsSoFar\"", ",", "timesteps_so_far", ")", "\n", "logger", ".", "record_tabular", "(", "\"TimeElapsed\"", ",", "time", ".", "time", "(", ")", "-", "tstart", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "logger", ".", "dump_tabular", "(", ")", "\n", "\n", "", "", "", "def", "flatten_lists", "(", "listoflists", ")", ":", "\n", "    ", "return", "[", "el", "for", "list_", "in", "listoflists", "for", "el", "in", "list_", "]", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.gail.trpo_mpi.flatten_lists": [[353, 355], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Dset.__init__": [[13, 20], ["len", "mujoco_dset.Dset.init_pointer", "len", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Dset.init_pointer"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "labels", ",", "randomize", ")", ":", "\n", "        ", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "labels", "=", "labels", "\n", "assert", "len", "(", "self", ".", "inputs", ")", "==", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "randomize", "=", "randomize", "\n", "self", ".", "num_pairs", "=", "len", "(", "inputs", ")", "\n", "self", ".", "init_pointer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Dset.init_pointer": [[21, 28], ["numpy.arange", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle"], ["", "def", "init_pointer", "(", "self", ")", ":", "\n", "        ", "self", ".", "pointer", "=", "0", "\n", "if", "self", ".", "randomize", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "num_pairs", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "self", ".", "inputs", "=", "self", ".", "inputs", "[", "idx", ",", ":", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "idx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Dset.get_next_batch": [[29, 40], ["mujoco_dset.Dset.init_pointer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Dset.init_pointer"], ["", "", "def", "get_next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "# if batch_size is negative -> return all", "\n", "        ", "if", "batch_size", "<", "0", ":", "\n", "            ", "return", "self", ".", "inputs", ",", "self", ".", "labels", "\n", "", "if", "self", ".", "pointer", "+", "batch_size", ">=", "self", ".", "num_pairs", ":", "\n", "            ", "self", ".", "init_pointer", "(", ")", "\n", "", "end", "=", "self", ".", "pointer", "+", "batch_size", "\n", "inputs", "=", "self", ".", "inputs", "[", "self", ".", "pointer", ":", "end", ",", ":", "]", "\n", "labels", "=", "self", ".", "labels", "[", "self", ".", "pointer", ":", "end", ",", ":", "]", "\n", "self", ".", "pointer", "=", "end", "\n", "return", "inputs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.__init__": [[43, 80], ["numpy.load", "numpy.array", "numpy.array", "numpy.std", "min", "len", "mujoco_dset.Dset", "mujoco_dset.Dset", "mujoco_dset.Dset", "mujoco_dset.Mujoco_Dset.log_info", "len", "numpy.zeros", "zip", "mujoco_dset.Mujoco_Dset.__init__.flatten"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.log_info"], ["    ", "def", "__init__", "(", "self", ",", "expert_path", ",", "train_fraction", "=", "0.7", ",", "traj_limitation", "=", "-", "1", ",", "randomize", "=", "True", ")", ":", "\n", "        ", "traj_data", "=", "np", ".", "load", "(", "expert_path", ")", "\n", "if", "traj_limitation", "<", "0", ":", "\n", "            ", "traj_limitation", "=", "len", "(", "traj_data", "[", "'obs'", "]", ")", "\n", "", "obs", "=", "traj_data", "[", "'obs'", "]", "[", ":", "traj_limitation", "]", "\n", "acs", "=", "traj_data", "[", "'acs'", "]", "[", ":", "traj_limitation", "]", "\n", "\n", "def", "flatten", "(", "x", ")", ":", "\n", "# x.shape = (E,), or (E, L, D)", "\n", "            ", "_", ",", "size", "=", "x", "[", "0", "]", ".", "shape", "\n", "episode_length", "=", "[", "len", "(", "i", ")", "for", "i", "in", "x", "]", "\n", "y", "=", "np", ".", "zeros", "(", "(", "sum", "(", "episode_length", ")", ",", "size", ")", ")", "\n", "start_idx", "=", "0", "\n", "for", "l", ",", "x_i", "in", "zip", "(", "episode_length", ",", "x", ")", ":", "\n", "                ", "y", "[", "start_idx", ":", "(", "start_idx", "+", "l", ")", "]", "=", "x_i", "\n", "start_idx", "+=", "l", "\n", "return", "y", "\n", "", "", "self", ".", "obs", "=", "np", ".", "array", "(", "flatten", "(", "obs", ")", ")", "\n", "self", ".", "acs", "=", "np", ".", "array", "(", "flatten", "(", "acs", ")", ")", "\n", "self", ".", "rets", "=", "traj_data", "[", "'ep_rets'", "]", "[", ":", "traj_limitation", "]", "\n", "self", ".", "avg_ret", "=", "sum", "(", "self", ".", "rets", ")", "/", "len", "(", "self", ".", "rets", ")", "\n", "self", ".", "std_ret", "=", "np", ".", "std", "(", "np", ".", "array", "(", "self", ".", "rets", ")", ")", "\n", "if", "len", "(", "self", ".", "acs", ")", ">", "2", ":", "\n", "            ", "self", ".", "acs", "=", "np", ".", "squeeze", "(", "self", ".", "acs", ")", "\n", "", "assert", "len", "(", "self", ".", "obs", ")", "==", "len", "(", "self", ".", "acs", ")", "\n", "self", ".", "num_traj", "=", "min", "(", "traj_limitation", ",", "len", "(", "traj_data", "[", "'obs'", "]", ")", ")", "\n", "self", ".", "num_transition", "=", "len", "(", "self", ".", "obs", ")", "\n", "self", ".", "randomize", "=", "randomize", "\n", "self", ".", "dset", "=", "Dset", "(", "self", ".", "obs", ",", "self", ".", "acs", ",", "self", ".", "randomize", ")", "\n", "# for behavior cloning", "\n", "self", ".", "train_set", "=", "Dset", "(", "self", ".", "obs", "[", ":", "int", "(", "self", ".", "num_transition", "*", "train_fraction", ")", ",", ":", "]", ",", "\n", "self", ".", "acs", "[", ":", "int", "(", "self", ".", "num_transition", "*", "train_fraction", ")", ",", ":", "]", ",", "\n", "self", ".", "randomize", ")", "\n", "self", ".", "val_set", "=", "Dset", "(", "self", ".", "obs", "[", "int", "(", "self", ".", "num_transition", "*", "train_fraction", ")", ":", ",", ":", "]", ",", "\n", "self", ".", "acs", "[", "int", "(", "self", ".", "num_transition", "*", "train_fraction", ")", ":", ",", ":", "]", ",", "\n", "self", ".", "randomize", ")", "\n", "self", ".", "log_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.log_info": [[81, 86], ["baselines.logger.log", "baselines.logger.log", "baselines.logger.log", "baselines.logger.log"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "log_info", "(", "self", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Total trajectorues: %d\"", "%", "self", ".", "num_traj", ")", "\n", "logger", ".", "log", "(", "\"Total transitions: %d\"", "%", "self", ".", "num_transition", ")", "\n", "logger", ".", "log", "(", "\"Average returns: %f\"", "%", "self", ".", "avg_ret", ")", "\n", "logger", ".", "log", "(", "\"Std for returns: %f\"", "%", "self", ".", "std_ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.get_next_batch": [[87, 96], ["mujoco_dset.Mujoco_Dset.dset.get_next_batch", "mujoco_dset.Mujoco_Dset.train_set.get_next_batch", "mujoco_dset.Mujoco_Dset.val_set.get_next_batch"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.get_next_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.get_next_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.get_next_batch"], ["", "def", "get_next_batch", "(", "self", ",", "batch_size", ",", "split", "=", "None", ")", ":", "\n", "        ", "if", "split", "is", "None", ":", "\n", "            ", "return", "self", ".", "dset", ".", "get_next_batch", "(", "batch_size", ")", "\n", "", "elif", "split", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "train_set", ".", "get_next_batch", "(", "batch_size", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "return", "self", ".", "val_set", ".", "get_next_batch", "(", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot": [[97, 102], ["plt.hist", "plt.savefig", "plt.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "", "def", "plot", "(", "self", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "plt", ".", "hist", "(", "self", ".", "rets", ")", "\n", "plt", ".", "savefig", "(", "\"histogram_rets.png\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.test": [[104, 108], ["mujoco_dset.Mujoco_Dset", "mujoco_dset.Mujoco_Dset.plot"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.dataset.mujoco_dset.Mujoco_Dset.plot"], ["", "", "def", "test", "(", "expert_path", ",", "traj_limitation", ",", "plot", ")", ":", "\n", "    ", "dset", "=", "Mujoco_Dset", "(", "expert_path", ",", "traj_limitation", "=", "traj_limitation", ")", "\n", "if", "plot", ":", "\n", "        ", "dset", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.test_identity.test_identity": [[20, 45], ["pytest.mark.parametrize", "numpy.random.seed", "gym.spaces.np_random.seed", "random.seed", "baselines.common.vec_env.dummy_vec_env.DummyVecEnv", "tensorflow.Graph().as_default", "tensorflow.Session().as_default", "tensorflow.set_random_seed", "learn_func", "baselines.common.vec_env.dummy_vec_env.DummyVecEnv.reset", "range", "baselines.common.vec_env.dummy_vec_env.DummyVecEnv.step", "baselines.common.identity_env.IdentityEnv", "tensorflow.Graph", "tensorflow.Session", "learn_func.step"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["q_func", "=", "model", ",", "\n", "lr", "=", "1e-3", ",", "\n", "max_timesteps", "=", "10000", ",", "\n", "buffer_size", "=", "50000", ",", "\n", "exploration_fraction", "=", "0.1", ",", "\n", "exploration_final_eps", "=", "0.02", ",", "\n", "print_freq", "=", "10", ",", "\n", "param_noise", "=", "param_noise", ",", "\n", ")", "\n", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "N_TRIALS", "=", "1000", "\n", "sum_rew", "=", "0", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "for", "i", "in", "range", "(", "N_TRIALS", ")", ":", "\n", "            ", "obs", ",", "rew", ",", "done", ",", "_", "=", "env", ".", "step", "(", "act", "(", "[", "obs", "]", ")", ")", "\n", "sum_rew", "+=", "rew", "\n", "\n", "", "assert", "sum_rew", ">", "0.9", "*", "N_TRIALS", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "test_identity", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.__init__": [[5, 9], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "_n", "=", "0", "\n", "self", ".", "_M", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "self", ".", "_S", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "", "def", "push", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.push": [[9, 19], ["numpy.asarray", "running_stat.RunningStat._M.copy"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy"], ["", "def", "push", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "shape", "==", "self", ".", "_M", ".", "shape", "\n", "self", ".", "_n", "+=", "1", "\n", "if", "self", ".", "_n", "==", "1", ":", "\n", "            ", "self", ".", "_M", "[", "...", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "oldM", "=", "self", ".", "_M", ".", "copy", "(", ")", "\n", "self", ".", "_M", "[", "...", "]", "=", "oldM", "+", "(", "x", "-", "oldM", ")", "/", "self", ".", "_n", "\n", "self", ".", "_S", "[", "...", "]", "=", "self", ".", "_S", "+", "(", "x", "-", "oldM", ")", "*", "(", "x", "-", "self", ".", "_M", ")", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.n": [[19, 22], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var": [[25, 28], ["numpy.square"], "methods", ["None"], ["", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_S", "/", "(", "self", ".", "_n", "-", "1", ")", "if", "self", ".", "_n", ">", "1", "else", "np", ".", "square", "(", "self", ".", "_M", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std": [[28, 31], ["numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", ".", "var", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.test_running_stat": [[35, 47], ["running_stat.RunningStat", "range", "numpy.random.randn", "running_stat.RunningStat.push", "li.append", "numpy.mean", "numpy.allclose", "numpy.allclose", "numpy.square", "numpy.var", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.push", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var"], ["", "", "def", "test_running_stat", "(", ")", ":", "\n", "    ", "for", "shp", "in", "(", "(", ")", ",", "(", "3", ",", ")", ",", "(", "3", ",", "4", ")", ")", ":", "\n", "        ", "li", "=", "[", "]", "\n", "rs", "=", "RunningStat", "(", "shp", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "val", "=", "np", ".", "random", ".", "randn", "(", "*", "shp", ")", "\n", "rs", ".", "push", "(", "val", ")", "\n", "li", ".", "append", "(", "val", ")", "\n", "m", "=", "np", ".", "mean", "(", "li", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "allclose", "(", "rs", ".", "mean", ",", "m", ")", "\n", "v", "=", "np", ".", "square", "(", "m", ")", "if", "(", "len", "(", "li", ")", "==", "1", ")", "else", "np", ".", "var", "(", "li", ",", "ddof", "=", "1", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "allclose", "(", "rs", ".", "var", ",", "v", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.discount": [[5, 24], ["scipy.signal.lfilter"], "function", ["None"], ["def", "discount", "(", "x", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    computes discounted sums along 0th dimension of x.\n\n    inputs\n    ------\n    x: ndarray\n    gamma: float\n\n    outputs\n    -------\n    y: ndarray with same shape as x, satisfying\n\n        y[t] = x[t] + gamma*x[t+1] + gamma^2*x[t+2] + ... + gamma^k x[t+k],\n                where k = len(x) - t - 1\n\n    \"\"\"", "\n", "assert", "x", ".", "ndim", ">=", "1", "\n", "return", "scipy", ".", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "-", "gamma", "]", ",", "x", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.explained_variance": [[25, 39], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var"], ["", "def", "explained_variance", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Computes fraction of variance that ypred explains about y.\n    Returns 1 - Var[y-ypred] / Var[y]\n\n    interpretation:\n        ev=0  =>  might as well have predicted zero\n        ev=1  =>  perfect prediction\n        ev<0  =>  worse than just predicting zero\n\n    \"\"\"", "\n", "assert", "y", ".", "ndim", "==", "1", "and", "ypred", ".", "ndim", "==", "1", "\n", "vary", "=", "np", ".", "var", "(", "y", ")", "\n", "return", "np", ".", "nan", "if", "vary", "==", "0", "else", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.explained_variance_2d": [[40, 46], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var"], ["", "def", "explained_variance_2d", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "assert", "y", ".", "ndim", "==", "2", "and", "ypred", ".", "ndim", "==", "2", "\n", "vary", "=", "np", ".", "var", "(", "y", ",", "axis", "=", "0", ")", "\n", "out", "=", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "out", "[", "vary", "<", "1e-10", "]", "=", "0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.ncc": [[47, 49], ["numpy.corrcoef"], "function", ["None"], ["", "def", "ncc", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "corrcoef", "(", "ypred", ",", "y", ")", "[", "1", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.flatten_arrays": [[50, 52], ["numpy.concatenate"], "function", ["None"], ["", "def", "flatten_arrays", "(", "arrs", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "arr", ".", "flat", "for", "arr", "in", "arrs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.unflatten_vector": [[53, 62], ["numpy.prod", "vec[].reshape", "arrs.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "unflatten_vector", "(", "vec", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "arrs", "=", "[", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "shape", ")", "\n", "arr", "=", "vec", "[", "i", ":", "i", "+", "size", "]", ".", "reshape", "(", "shape", ")", "\n", "arrs", ".", "append", "(", "arr", ")", "\n", "i", "+=", "size", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.discount_with_boundaries": [[63, 74], ["numpy.zeros_like", "range"], "function", ["None"], ["", "def", "discount_with_boundaries", "(", "X", ",", "New", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    X: 2d array of floats, time x features\n    New: 2d array of bools, indicating when a new episode has started\n    \"\"\"", "\n", "Y", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "T", "=", "X", ".", "shape", "[", "0", "]", "\n", "Y", "[", "T", "-", "1", "]", "=", "X", "[", "T", "-", "1", "]", "\n", "for", "t", "in", "range", "(", "T", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "Y", "[", "t", "]", "=", "X", "[", "t", "]", "+", "gamma", "*", "Y", "[", "t", "+", "1", "]", "*", "(", "1", "-", "New", "[", "t", "+", "1", "]", ")", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.test_discount_with_boundaries": [[75, 85], ["numpy.array", "math_util.discount_with_boundaries", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.math_util.discount_with_boundaries"], ["", "def", "test_discount_with_boundaries", "(", ")", ":", "\n", "    ", "gamma", "=", "0.9", "\n", "x", "=", "np", ".", "array", "(", "[", "1.0", ",", "2.0", ",", "3.0", ",", "4.0", "]", ",", "'float32'", ")", "\n", "starts", "=", "[", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "y", "=", "discount_with_boundaries", "(", "x", ",", "starts", ",", "gamma", ")", "\n", "assert", "np", ".", "allclose", "(", "y", ",", "[", "\n", "1", "+", "gamma", "*", "2", "+", "gamma", "**", "2", "*", "3", ",", "\n", "2", "+", "gamma", "*", "3", ",", "\n", "3", ",", "\n", "4", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.mpi_mean": [[6, 18], ["numpy.asarray", "np.asarray.sum", "numpy.zeros", "x.sum.ravel", "numpy.zeros_like", "comm.Allreduce", "globalsum[].reshape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["def", "mpi_mean", "(", "x", ",", "axis", "=", "0", ",", "comm", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "ndim", ">", "0", "\n", "if", "comm", "is", "None", ":", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "xsum", "=", "x", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "n", "=", "xsum", ".", "size", "\n", "localsum", "=", "np", ".", "zeros", "(", "n", "+", "1", ",", "x", ".", "dtype", ")", "\n", "localsum", "[", ":", "n", "]", "=", "xsum", ".", "ravel", "(", ")", "\n", "localsum", "[", "n", "]", "=", "x", ".", "shape", "[", "axis", "]", "\n", "globalsum", "=", "np", ".", "zeros_like", "(", "localsum", ")", "\n", "comm", ".", "Allreduce", "(", "localsum", ",", "globalsum", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "return", "globalsum", "[", ":", "n", "]", ".", "reshape", "(", "xsum", ".", "shape", ")", "/", "globalsum", "[", "n", "]", ",", "globalsum", "[", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.mpi_moments": [[19, 32], ["numpy.asarray", "mpi_moments.mpi_mean", "numpy.square", "mpi_moments.mpi_mean", "numpy.sqrt", "mean.reshape.reshape", "std.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.mpi_mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.mpi_mean"], ["", "def", "mpi_moments", "(", "x", ",", "axis", "=", "0", ",", "comm", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "ndim", ">", "0", "\n", "mean", ",", "count", "=", "mpi_mean", "(", "x", ",", "axis", "=", "axis", ",", "comm", "=", "comm", ",", "keepdims", "=", "True", ")", "\n", "sqdiffs", "=", "np", ".", "square", "(", "x", "-", "mean", ")", "\n", "meansqdiff", ",", "count1", "=", "mpi_mean", "(", "sqdiffs", ",", "axis", "=", "axis", ",", "comm", "=", "comm", ",", "keepdims", "=", "True", ")", "\n", "assert", "count1", "==", "count", "\n", "std", "=", "np", ".", "sqrt", "(", "meansqdiff", ")", "\n", "if", "not", "keepdims", ":", "\n", "        ", "newshape", "=", "mean", ".", "shape", "[", ":", "axis", "]", "+", "mean", ".", "shape", "[", "axis", "+", "1", ":", "]", "\n", "mean", "=", "mean", ".", "reshape", "(", "newshape", ")", "\n", "std", "=", "std", ".", "reshape", "(", "newshape", ")", "\n", "", "return", "mean", ",", "std", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.test_runningmeanstd": [[34, 39], ["subprocess.check_call"], "function", ["None"], ["", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "import", "subprocess", "\n", "subprocess", ".", "check_call", "(", "[", "'mpirun'", ",", "'-np'", ",", "'3'", ",", "\n", "'python'", ",", "'-c'", ",", "\n", "'from baselines.common.mpi_moments import _helper_runningmeanstd; _helper_runningmeanstd()'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments._helper_runningmeanstd": [[40, 60], ["numpy.random.seed", "numpy.concatenate", "mpi_moments.mpi_moments", "baselines.common.zipsame", "np.concatenate.mean", "np.concatenate.std", "print", "numpy.allclose", "print", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "comm.Get_rank"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_moments.mpi_moments", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.zipsame", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std"], ["", "def", "_helper_runningmeanstd", "(", ")", ":", "\n", "    ", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "for", "(", "triple", ",", "axis", ")", "in", "[", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ")", ",", "1", ")", ",", "\n", "]", ":", "\n", "\n", "\n", "        ", "x", "=", "np", ".", "concatenate", "(", "triple", ",", "axis", "=", "axis", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "axis", ")", ",", "x", ".", "std", "(", "axis", "=", "axis", ")", ",", "x", ".", "shape", "[", "axis", "]", "]", "\n", "\n", "\n", "ms2", "=", "mpi_moments", "(", "triple", "[", "comm", ".", "Get_rank", "(", ")", "]", ",", "axis", "=", "axis", ")", "\n", "\n", "for", "(", "a1", ",", "a2", ")", "in", "zipsame", "(", "ms1", ",", "ms2", ")", ":", "\n", "            ", "print", "(", "a1", ",", "a2", ")", "\n", "assert", "np", ".", "allclose", "(", "a1", ",", "a2", ")", "\n", "print", "(", "\"ok!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.input.observation_input": [[4, 29], ["isinstance", "tensorflow.placeholder", "tensorflow.to_float", "isinstance", "tensorflow.one_hot", "tensorflow.placeholder", "tensorflow.to_float"], "function", ["None"], ["def", "observation_input", "(", "ob_space", ",", "batch_size", "=", "None", ",", "name", "=", "'Ob'", ")", ":", "\n", "    ", "'''\n    Build observation input with encoding depending on the \n    observation space type\n    Params:\n    \n    ob_space: observation space (should be one of gym.spaces)\n    batch_size: batch size for input (default is None, so that resulting input placeholder can take tensors with any batch size)\n    name: tensorflow variable name for input placeholder\n\n    returns: tuple (input_placeholder, processed_input_tensor)\n    '''", "\n", "if", "isinstance", "(", "ob_space", ",", "Discrete", ")", ":", "\n", "        ", "input_x", "=", "tf", ".", "placeholder", "(", "shape", "=", "(", "batch_size", ",", ")", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "name", ")", "\n", "processed_x", "=", "tf", ".", "to_float", "(", "tf", ".", "one_hot", "(", "input_x", ",", "ob_space", ".", "n", ")", ")", "\n", "return", "input_x", ",", "processed_x", "\n", "\n", "", "elif", "isinstance", "(", "ob_space", ",", "Box", ")", ":", "\n", "        ", "input_shape", "=", "(", "batch_size", ",", ")", "+", "ob_space", ".", "shape", "\n", "input_x", "=", "tf", ".", "placeholder", "(", "shape", "=", "input_shape", ",", "dtype", "=", "ob_space", ".", "dtype", ",", "name", "=", "name", ")", "\n", "processed_x", "=", "tf", ".", "to_float", "(", "input_x", ")", "\n", "return", "input_x", ",", "processed_x", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_fork.mpi_fork": [[3, 24], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "str"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["def", "mpi_fork", "(", "n", ",", "bind_to_core", "=", "False", ")", ":", "\n", "    ", "\"\"\"Re-launches the current script with workers\n    Returns \"parent\" for original parent, \"child\" for MPI children\n    \"\"\"", "\n", "if", "n", "<=", "1", ":", "\n", "        ", "return", "\"child\"", "\n", "", "if", "os", ".", "getenv", "(", "\"IN_MPI\"", ")", "is", "None", ":", "\n", "        ", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", ".", "update", "(", "\n", "MKL_NUM_THREADS", "=", "\"1\"", ",", "\n", "OMP_NUM_THREADS", "=", "\"1\"", ",", "\n", "IN_MPI", "=", "\"1\"", "\n", ")", "\n", "args", "=", "[", "\"mpirun\"", ",", "\"-np\"", ",", "str", "(", "n", ")", "]", "\n", "if", "bind_to_core", ":", "\n", "            ", "args", "+=", "[", "\"-bind-to\"", ",", "\"core\"", "]", "\n", "", "args", "+=", "[", "sys", ".", "executable", "]", "+", "sys", ".", "argv", "\n", "subprocess", ".", "check_call", "(", "args", ",", "env", "=", "env", ")", "\n", "return", "\"parent\"", "\n", "", "else", ":", "\n", "        ", "return", "\"child\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.__init__": [[5, 15], ["numpy.zeros", "env.reset", "range"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "env", ",", "model", ",", "nsteps", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "model", "=", "model", "\n", "nenv", "=", "env", ".", "num_envs", "\n", "self", ".", "batch_ob_shape", "=", "(", "nenv", "*", "nsteps", ",", ")", "+", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "obs", "=", "np", ".", "zeros", "(", "(", "nenv", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "env", ".", "observation_space", ".", "dtype", ".", "name", ")", "\n", "self", ".", "obs", "[", ":", "]", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "nsteps", "=", "nsteps", "\n", "self", ".", "states", "=", "model", ".", "initial_state", "\n", "self", ".", "dones", "=", "[", "False", "for", "_", "in", "range", "(", "nenv", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run": [[16, 19], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.fmt_row": [[10, 14], ["console_util.fmt_item", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.fmt_item"], ["def", "fmt_row", "(", "width", ",", "row", ",", "header", "=", "False", ")", ":", "\n", "    ", "out", "=", "\" | \"", ".", "join", "(", "fmt_item", "(", "x", ",", "width", ")", "for", "x", "in", "row", ")", "\n", "if", "header", ":", "out", "=", "out", "+", "\"\\n\"", "+", "\"-\"", "*", "len", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.fmt_item": [[15, 27], ["isinstance", "isinstance", "x.item.item", "abs", "str", "len"], "function", ["None"], ["", "def", "fmt_item", "(", "x", ",", "l", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "assert", "x", ".", "ndim", "==", "0", "\n", "x", "=", "x", ".", "item", "(", ")", "\n", "", "if", "isinstance", "(", "x", ",", "(", "float", ",", "np", ".", "float32", ",", "np", ".", "float64", ")", ")", ":", "\n", "        ", "v", "=", "abs", "(", "x", ")", "\n", "if", "(", "v", "<", "1e-4", "or", "v", ">", "1e+4", ")", "and", "v", ">", "0", ":", "\n", "            ", "rep", "=", "\"%7.2e\"", "%", "x", "\n", "", "else", ":", "\n", "            ", "rep", "=", "\"%7.5f\"", "%", "x", "\n", "", "", "else", ":", "rep", "=", "str", "(", "x", ")", "\n", "return", "\" \"", "*", "(", "l", "-", "len", "(", "rep", ")", ")", "+", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.colorize": [[40, 47], ["attr.append", "str", "attr.append"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "str", "(", "num", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "'1'", ")", "\n", "return", "'\\x1b[%sm%s\\x1b[0m'", "%", "(", "';'", ".", "join", "(", "attr", ")", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.timed": [[51, 60], ["print", "time.time", "print", "console_util.colorize", "console_util.colorize", "time.time"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.colorize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.console_util.colorize"], ["@", "contextmanager", "\n", "def", "timed", "(", "msg", ")", ":", "\n", "    ", "global", "MESSAGE_DEPTH", "#pylint: disable=W0603", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "'=: '", "+", "msg", ",", "color", "=", "'magenta'", ")", ")", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "MESSAGE_DEPTH", "+=", "1", "\n", "yield", "\n", "MESSAGE_DEPTH", "-=", "1", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "\"done in %.3f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", ",", "color", "=", "'magenta'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_atari_env": [[14, 28], ["baselines.common.set_global_seeds", "baselines.common.vec_env.subproc_vec_env.SubprocVecEnv", "baselines.common.atari_wrappers.make_atari", "baselines.bench.Monitor.seed", "baselines.bench.Monitor", "baselines.common.atari_wrappers.wrap_deepmind", "cmd_util.make_atari_env.make_env"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.make_atari", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.wrap_deepmind"], ["def", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ",", "wrapper_kwargs", "=", "None", ",", "start_index", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored SubprocVecEnv for Atari.\n    \"\"\"", "\n", "if", "wrapper_kwargs", "is", "None", ":", "wrapper_kwargs", "=", "{", "}", "\n", "def", "make_env", "(", "rank", ")", ":", "# pylint: disable=C0111", "\n", "        ", "def", "_thunk", "(", ")", ":", "\n", "            ", "env", "=", "make_atari", "(", "env_id", ")", "\n", "env", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "str", "(", "rank", ")", ")", ")", "\n", "return", "wrap_deepmind", "(", "env", ",", "**", "wrapper_kwargs", ")", "\n", "", "return", "_thunk", "\n", "", "set_global_seeds", "(", "seed", ")", "\n", "return", "SubprocVecEnv", "(", "[", "make_env", "(", "i", "+", "start_index", ")", "for", "i", "in", "range", "(", "num_env", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_mujoco_env": [[29, 38], ["baselines.common.set_global_seeds", "gym.make", "baselines.bench.Monitor", "baselines.bench.Monitor.seed", "baselines.logger.get_dir"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["", "def", "make_mujoco_env", "(", "env_id", ",", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored gym.Env for MuJoCo.\n    \"\"\"", "\n", "set_global_seeds", "(", "seed", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.make_robotics_env": [[39, 51], ["baselines.common.set_global_seeds", "gym.make", "gym.wrappers.FlattenDictWrapper", "baselines.bench.Monitor", "baselines.bench.Monitor.seed", "baselines.logger.get_dir", "os.path.join", "baselines.logger.get_dir", "str"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.get_dir"], ["", "def", "make_robotics_env", "(", "env_id", ",", "seed", ",", "rank", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored gym.Env for MuJoCo.\n    \"\"\"", "\n", "set_global_seeds", "(", "seed", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", "=", "FlattenDictWrapper", "(", "env", ",", "[", "'observation'", ",", "'desired_goal'", "]", ")", "\n", "env", "=", "Monitor", "(", "\n", "env", ",", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "str", "(", "rank", ")", ")", ",", "\n", "info_keywords", "=", "(", "'is_success'", ",", ")", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.arg_parser": [[52, 58], ["argparse.ArgumentParser"], "function", ["None"], ["", "def", "arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an empty argparse.ArgumentParser.\n    \"\"\"", "\n", "import", "argparse", "\n", "return", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.atari_arg_parser": [[59, 68], ["cmd_util.arg_parser", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.arg_parser"], ["", "def", "atari_arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an argparse.ArgumentParser for run_atari.py.\n    \"\"\"", "\n", "parser", "=", "arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "'environment ID'", ",", "default", "=", "'BreakoutNoFrameskip-v4'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num-timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "30e6", ")", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.mujoco_arg_parser": [[69, 79], ["cmd_util.arg_parser", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.arg_parser"], ["", "def", "mujoco_arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an argparse.ArgumentParser for run_mujoco.py.\n    \"\"\"", "\n", "parser", "=", "arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'Reacher-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num-timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "1e7", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--play'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.robotics_arg_parser": [[80, 89], ["cmd_util.arg_parser", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "int"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.cmd_util.arg_parser"], ["", "def", "robotics_arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an argparse.ArgumentParser for run_mujoco.py.\n    \"\"\"", "\n", "parser", "=", "arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'FetchReach-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num-timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "1e6", ")", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.Filter.__call__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.Filter.reset": [[8, 10], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.IdentityFilter.__call__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.CompositionFilter.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fs", ")", ":", "\n", "        ", "self", ".", "fs", "=", "fs", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.CompositionFilter.__call__": [[18, 22], ["f"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "for", "f", "in", "self", ".", "fs", ":", "\n", "            ", "x", "=", "f", "(", "x", ")", "\n", "", "return", "x", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.CompositionFilter.output_shape": [[22, 27], ["f.output_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.StackFilter.output_shape"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "out", "=", "input_space", ".", "shape", "\n", "for", "f", "in", "self", ".", "fs", ":", "\n", "            ", "out", "=", "f", ".", "output_shape", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.ZFilter.__init__": [[34, 40], ["running_stat.RunningStat"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shape", ",", "demean", "=", "True", ",", "destd", "=", "True", ",", "clip", "=", "10.0", ")", ":", "\n", "        ", "self", ".", "demean", "=", "demean", "\n", "self", ".", "destd", "=", "destd", "\n", "self", ".", "clip", "=", "clip", "\n", "\n", "self", ".", "rs", "=", "RunningStat", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.ZFilter.__call__": [[41, 50], ["filters.ZFilter.rs.push", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.push"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "if", "update", ":", "self", ".", "rs", ".", "push", "(", "x", ")", "\n", "if", "self", ".", "demean", ":", "\n", "            ", "x", "=", "x", "-", "self", ".", "rs", ".", "mean", "\n", "", "if", "self", ".", "destd", ":", "\n", "            ", "x", "=", "x", "/", "(", "self", ".", "rs", ".", "std", "+", "1e-8", ")", "\n", "", "if", "self", ".", "clip", ":", "\n", "            ", "x", "=", "np", ".", "clip", "(", "x", ",", "-", "self", ".", "clip", ",", "self", ".", "clip", ")", "\n", "", "return", "x", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.ZFilter.output_shape": [[50, 52], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "input_space", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.AddClock.__init__": [[54, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.AddClock.reset": [[56, 58], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.AddClock.__call__": [[58, 60], ["numpy.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "np", ".", "append", "(", "x", ",", "self", ".", "count", "/", "100.0", ")", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.AddClock.output_shape": [[60, 62], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "(", "input_space", ".", "shape", "[", "0", "]", "+", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.FlattenFilter.__call__": [[64, 66], ["x.ravel"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "x", ".", "ravel", "(", ")", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.FlattenFilter.output_shape": [[66, 68], ["int", "numpy.prod"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "(", "int", "(", "np", ".", "prod", "(", "input_space", ".", "shape", ")", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.Ind2OneHotFilter.__init__": [[70, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.Ind2OneHotFilter.__call__": [[72, 76], ["numpy.zeros"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "out", "=", "np", ".", "zeros", "(", "self", ".", "n", ")", "\n", "out", "[", "x", "]", "=", "1", "\n", "return", "out", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.Ind2OneHotFilter.output_shape": [[76, 78], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "(", "input_space", ".", "n", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.DivFilter.__init__": [[80, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "divisor", ")", ":", "\n", "        ", "self", ".", "divisor", "=", "divisor", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.DivFilter.__call__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "divisor", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.DivFilter.output_shape": [[84, 86], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "input_space", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.StackFilter.__init__": [[88, 90], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "stack", "=", "deque", "(", "maxlen", "=", "length", ")", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.StackFilter.reset": [[90, 92], ["filters.StackFilter.stack.clear"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "stack", ".", "clear", "(", ")", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.StackFilter.__call__": [[92, 97], ["filters.StackFilter.stack.append", "numpy.concatenate", "len", "filters.StackFilter.stack.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "self", ".", "stack", ".", "append", "(", "x", ")", "\n", "while", "len", "(", "self", ".", "stack", ")", "<", "self", ".", "stack", ".", "maxlen", ":", "\n", "            ", "self", ".", "stack", ".", "append", "(", "x", ")", "\n", "", "return", "np", ".", "concatenate", "(", "self", ".", "stack", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.filters.StackFilter.output_shape": [[97, 99], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "input_space", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "input_space", ".", "shape", "[", "-", "1", "]", "*", "self", ".", "stack", ".", "maxlen", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.Schedule.value": [[13, 16], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"Value of the schedule at time t\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.ConstantSchedule.__init__": [[19, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Value remains constant over time.\n\n        Parameters\n        ----------\n        value: float\n            Constant value of the schedule\n        \"\"\"", "\n", "self", ".", "_v", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.ConstantSchedule.value": [[29, 32], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "return", "self", ".", "_v", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.PiecewiseSchedule.__init__": [[39, 63], ["sorted"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "endpoints", ",", "interpolation", "=", "linear_interpolation", ",", "outside_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Piecewise schedule.\n\n        endpoints: [(int, int)]\n            list of pairs `(time, value)` meanining that schedule should output\n            `value` when `t==time`. All the values for time must be sorted in\n            an increasing order. When t is between two times, e.g. `(time_a, value_a)`\n            and `(time_b, value_b)`, such that `time_a <= t < time_b` then value outputs\n            `interpolation(value_a, value_b, alpha)` where alpha is a fraction of\n            time passed between `time_a` and `time_b` for time `t`.\n        interpolation: lambda float, float, float: float\n            a function that takes value to the left and to the right of t according\n            to the `endpoints`. Alpha is the fraction of distance from left endpoint to\n            right endpoint that t has covered. See linear_interpolation for example.\n        outside_value: float\n            if the value is requested outside of all the intervals sepecified in\n            `endpoints` this value is returned. If None then AssertionError is\n            raised when outside value is requested.\n        \"\"\"", "\n", "idxes", "=", "[", "e", "[", "0", "]", "for", "e", "in", "endpoints", "]", "\n", "assert", "idxes", "==", "sorted", "(", "idxes", ")", "\n", "self", ".", "_interpolation", "=", "interpolation", "\n", "self", ".", "_outside_value", "=", "outside_value", "\n", "self", ".", "_endpoints", "=", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.PiecewiseSchedule.value": [[64, 74], ["zip", "schedules.PiecewiseSchedule._interpolation", "float"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "for", "(", "l_t", ",", "l", ")", ",", "(", "r_t", ",", "r", ")", "in", "zip", "(", "self", ".", "_endpoints", "[", ":", "-", "1", "]", ",", "self", ".", "_endpoints", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "l_t", "<=", "t", "and", "t", "<", "r_t", ":", "\n", "                ", "alpha", "=", "float", "(", "t", "-", "l_t", ")", "/", "(", "r_t", "-", "l_t", ")", "\n", "return", "self", ".", "_interpolation", "(", "l", ",", "r", ",", "alpha", ")", "\n", "\n", "# t does not belong to any of the pieces, so doom.", "\n", "", "", "assert", "self", ".", "_outside_value", "is", "not", "None", "\n", "return", "self", ".", "_outside_value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.__init__": [[77, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "schedule_timesteps", ",", "final_p", ",", "initial_p", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Linear interpolation between initial_p and final_p over\n        schedule_timesteps. After this many timesteps pass final_p is\n        returned.\n\n        Parameters\n        ----------\n        schedule_timesteps: int\n            Number of timesteps for which to linearly anneal initial_p\n            to final_p\n        initial_p: float\n            initial output value\n        final_p: float\n            final output value\n        \"\"\"", "\n", "self", ".", "schedule_timesteps", "=", "schedule_timesteps", "\n", "self", ".", "final_p", "=", "final_p", "\n", "self", ".", "initial_p", "=", "initial_p", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value": [[96, 100], ["min", "float"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "fraction", "=", "min", "(", "float", "(", "t", ")", "/", "self", ".", "schedule_timesteps", ",", "1.0", ")", "\n", "return", "self", ".", "initial_p", "+", "fraction", "*", "(", "self", ".", "final_p", "-", "self", ".", "initial_p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.linear_interpolation": [[34, 36], ["None"], "function", ["None"], ["", "", "def", "linear_interpolation", "(", "l", ",", "r", ",", "alpha", ")", ":", "\n", "    ", "return", "l", "+", "alpha", "*", "(", "r", "-", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.EzPickle.__init__": [[57, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_ezpickle_args", "=", "args", "\n", "self", ".", "_ezpickle_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.EzPickle.__getstate__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"_ezpickle_args\"", ":", "self", ".", "_ezpickle_args", ",", "\"_ezpickle_kwargs\"", ":", "self", ".", "_ezpickle_kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.EzPickle.__setstate__": [[64, 67], ["misc_util.EzPickle.__dict__.update", "type"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"_ezpickle_args\"", "]", ",", "**", "d", "[", "\"_ezpickle_kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.RunningAvg.__init__": [[123, 137], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "init_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Keep a running estimate of a quantity. This is a bit like mean\n        but more sensitive to recent changes.\n\n        Parameters\n        ----------\n        gamma: float\n            Must be between 0 and 1, where 0 is the most sensitive to recent\n            changes.\n        init_value: float or None\n            Initial value of the estimate. If None, it will be set on the first update.\n        \"\"\"", "\n", "self", ".", "_value", "=", "init_value", "\n", "self", ".", "_gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.RunningAvg.update": [[138, 150], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "new_val", ")", ":", "\n", "        ", "\"\"\"Update the estimate.\n\n        Parameters\n        ----------\n        new_val: float\n            new observated value of estimated quantity.\n        \"\"\"", "\n", "if", "self", ".", "_value", "is", "None", ":", "\n", "            ", "self", ".", "_value", "=", "new_val", "\n", "", "else", ":", "\n", "            ", "self", ".", "_value", "=", "self", ".", "_gamma", "*", "self", ".", "_value", "+", "(", "1.0", "-", "self", ".", "_gamma", ")", "*", "new_val", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.RunningAvg.__float__": [[151, 154], ["None"], "methods", ["None"], ["", "", "def", "__float__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current estimate\"\"\"", "\n", "return", "self", ".", "_value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.zipsame": [[10, 14], ["len", "all", "zip", "len"], "function", ["None"], ["def", "zipsame", "(", "*", "seqs", ")", ":", "\n", "    ", "L", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "assert", "all", "(", "len", "(", "seq", ")", "==", "L", "for", "seq", "in", "seqs", "[", "1", ":", "]", ")", "\n", "return", "zip", "(", "*", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.unpack": [[16, 35], ["list", "iter", "sum", "len", "range", "iter.__next__", "li.append", "iter.__next__"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "unpack", "(", "seq", ",", "sizes", ")", ":", "\n", "    ", "\"\"\"\n    Unpack 'seq' into a sequence of lists, with lengths specified by 'sizes'.\n    None = just one bare element, not a list\n\n    Example:\n    unpack([1,2,3,4,5,6], [3,None,2]) -> ([1,2,3], 4, [5,6])\n    \"\"\"", "\n", "seq", "=", "list", "(", "seq", ")", "\n", "it", "=", "iter", "(", "seq", ")", "\n", "assert", "sum", "(", "1", "if", "s", "is", "None", "else", "s", "for", "s", "in", "sizes", ")", "==", "len", "(", "seq", ")", ",", "\"Trying to unpack %s into %s\"", "%", "(", "seq", ",", "sizes", ")", "\n", "for", "size", "in", "sizes", ":", "\n", "        ", "if", "size", "is", "None", ":", "\n", "            ", "yield", "it", ".", "__next__", "(", ")", "\n", "", "else", ":", "\n", "            ", "li", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "size", ")", ":", "\n", "                ", "li", ".", "append", "(", "it", ".", "__next__", "(", ")", ")", "\n", "", "yield", "li", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.set_global_seeds": [[69, 78], ["numpy.random.seed", "random.seed", "tf.set_random_seed"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed"], ["", "", "def", "set_global_seeds", "(", "i", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "i", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "random", ".", "seed", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.pretty_eta": [[80, 120], ["misc_util.pretty_eta.helper"], "function", ["None"], ["", "def", "pretty_eta", "(", "seconds_left", ")", ":", "\n", "    ", "\"\"\"Print the number of seconds in human readable format.\n\n    Examples:\n    2 days\n    2 hours and 37 minutes\n    less than a minute\n\n    Paramters\n    ---------\n    seconds_left: int\n        Number of seconds to be converted to the ETA\n    Returns\n    -------\n    eta: str\n        String representing the pretty ETA.\n    \"\"\"", "\n", "minutes_left", "=", "seconds_left", "//", "60", "\n", "seconds_left", "%=", "60", "\n", "hours_left", "=", "minutes_left", "//", "60", "\n", "minutes_left", "%=", "60", "\n", "days_left", "=", "hours_left", "//", "24", "\n", "hours_left", "%=", "24", "\n", "\n", "def", "helper", "(", "cnt", ",", "name", ")", ":", "\n", "        ", "return", "\"{} {}{}\"", ".", "format", "(", "str", "(", "cnt", ")", ",", "name", ",", "(", "'s'", "if", "cnt", ">", "1", "else", "''", ")", ")", "\n", "\n", "", "if", "days_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "days_left", ",", "'day'", ")", "\n", "if", "hours_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "", "return", "msg", "\n", "", "if", "hours_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "if", "minutes_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "msg", "\n", "", "if", "minutes_left", ">", "0", ":", "\n", "        ", "return", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "'less than a minute'", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.boolean_flag": [[155, 172], ["name.replace", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "", "def", "boolean_flag", "(", "parser", ",", "name", ",", "default", "=", "False", ",", "help", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add a boolean flag to argparse parser.\n\n    Parameters\n    ----------\n    parser: argparse.Parser\n        parser to add the flag to\n    name: str\n        --<name> will enable the flag, while --no-<name> will disable it\n    default: bool or None\n        default value of the flag\n    help: str\n        help string for the flag\n    \"\"\"", "\n", "dest", "=", "name", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "parser", ".", "add_argument", "(", "\"--\"", "+", "name", ",", "action", "=", "\"store_true\"", ",", "default", "=", "default", ",", "dest", "=", "dest", ",", "help", "=", "help", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-\"", "+", "name", ",", "action", "=", "\"store_false\"", ",", "dest", "=", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.get_wrapper_by_name": [[174, 198], ["currentenv.class_name", "isinstance", "ValueError"], "function", ["None"], ["", "def", "get_wrapper_by_name", "(", "env", ",", "classname", ")", ":", "\n", "    ", "\"\"\"Given an a gym environment possibly wrapped multiple times, returns a wrapper\n    of class named classname or raises ValueError if no such wrapper was applied\n\n    Parameters\n    ----------\n    env: gym.Env of gym.Wrapper\n        gym environment\n    classname: str\n        name of the wrapper\n\n    Returns\n    -------\n    wrapper: gym.Wrapper\n        wrapper named classname\n    \"\"\"", "\n", "currentenv", "=", "env", "\n", "while", "True", ":", "\n", "        ", "if", "classname", "==", "currentenv", ".", "class_name", "(", ")", ":", "\n", "            ", "return", "currentenv", "\n", "", "elif", "isinstance", "(", "currentenv", ",", "gym", ".", "Wrapper", ")", ":", "\n", "            ", "currentenv", "=", "currentenv", ".", "env", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Couldn't find wrapper named %s\"", "%", "classname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.relatively_safe_pickle_dump": [[200, 234], ["os.rename", "tempfile.NamedTemporaryFile", "pickle.dump", "uncompressed_file.file.flush", "open", "pickle.dump", "zipfile.ZipFile", "myzip.write"], "function", ["None"], ["", "", "", "def", "relatively_safe_pickle_dump", "(", "obj", ",", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"This is just like regular pickle dump, except from the fact that failure cases are\n    different:\n\n        - It's never possible that we end up with a pickle in corrupted state.\n        - If a there was a different file at the path, that file will remain unchanged in the\n          even of failure (provided that filesystem rename is atomic).\n        - it is sometimes possible that we end up with useless temp file which needs to be\n          deleted manually (it will be removed automatically on the next function call)\n\n    The indended use case is periodic checkpoints of experiment state, such that we never\n    corrupt previous checkpoints if the current one fails.\n\n    Parameters\n    ----------\n    obj: object\n        object to pickle\n    path: str\n        path to the output file\n    compression: bool\n        if true pickle will be compressed\n    \"\"\"", "\n", "temp_storage", "=", "path", "+", "\".relatively_safe\"", "\n", "if", "compression", ":", "\n", "# Using gzip here would be simpler, but the size is limited to 2GB", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "uncompressed_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "uncompressed_file", ")", "\n", "uncompressed_file", ".", "file", ".", "flush", "(", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "temp_storage", ",", "\"w\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "                ", "myzip", ".", "write", "(", "uncompressed_file", ".", "name", ",", "\"data\"", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "temp_storage", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "", "", "os", ".", "rename", "(", "temp_storage", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.misc_util.pickle_load": [[236, 259], ["zipfile.ZipFile", "open", "pickle.load", "myzip.open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.load"], ["", "def", "pickle_load", "(", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"Unpickle a possible compressed pickle.\n\n    Parameters\n    ----------\n    path: str\n        path to the output file\n    compression: bool\n        if true assumes that pickle was compressed when created and attempts decompression.\n\n    Returns\n    -------\n    obj: object\n        the unpickled object\n    \"\"\"", "\n", "\n", "if", "compression", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "path", ",", "\"r\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "            ", "with", "myzip", ".", "open", "(", "\"data\"", ")", "as", "f", ":", "\n", "                ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_mean_std.RunningMeanStd.__init__": [[4, 8], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_mean_std.RunningMeanStd.update": [[9, 14], ["numpy.mean", "numpy.var", "running_mean_std.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_mean_std.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_mean_std.RunningMeanStd.update_from_moments": [[15, 30], ["numpy.square"], "methods", ["None"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "        ", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "(", "self", ".", "count", ")", "\n", "m_b", "=", "batch_var", "*", "(", "batch_count", ")", "\n", "M2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_var", "=", "M2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_mean_std.test_runningmeanstd": [[31, 47], ["running_mean_std.RunningMeanStd", "numpy.concatenate", "running_mean_std.RunningMeanStd.update", "running_mean_std.RunningMeanStd.update", "running_mean_std.RunningMeanStd.update", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.var"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.var"], ["", "", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "for", "(", "x1", ",", "x2", ",", "x3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x1", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "axis", "=", "0", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "0", ")", ",", "x", ".", "var", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "ms2", "=", "[", "rms", ".", "mean", ",", "rms", ".", "var", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "ms1", ",", "ms2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.__init__": [[5, 35], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "operation", ",", "neutral_element", ")", ":", "\n", "        ", "\"\"\"Build a Segment Tree data structure.\n\n        https://en.wikipedia.org/wiki/Segment_tree\n\n        Can be used as regular array, but with two\n        important differences:\n\n            a) setting item's value is slightly slower.\n               It is O(lg capacity) instead of O(1).\n            b) user has access to an efficient ( O(log segment size) )\n               `reduce` operation which reduces `operation` over\n               a contiguous subsequence of items in the array.\n\n        Paramters\n        ---------\n        capacity: int\n            Total size of the array - must be a power of two.\n        operation: lambda obj, obj -> obj\n            and operation for combining elements (eg. sum, max)\n            must form a mathematical group together with the set of\n            possible values for array elements (i.e. be associative)\n        neutral_element: obj\n            neutral element for the operation above. eg. float('-inf')\n            for max and 0 for sum.\n        \"\"\"", "\n", "assert", "capacity", ">", "0", "and", "capacity", "&", "(", "capacity", "-", "1", ")", "==", "0", ",", "\"capacity must be positive and a power of 2.\"", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_value", "=", "[", "neutral_element", "for", "_", "in", "range", "(", "2", "*", "capacity", ")", "]", "\n", "self", ".", "_operation", "=", "operation", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree._reduce_helper": [[36, 49], ["segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._operation", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree._reduce_helper"], ["", "def", "_reduce_helper", "(", "self", ",", "start", ",", "end", ",", "node", ",", "node_start", ",", "node_end", ")", ":", "\n", "        ", "if", "start", "==", "node_start", "and", "end", "==", "node_end", ":", "\n", "            ", "return", "self", ".", "_value", "[", "node", "]", "\n", "", "mid", "=", "(", "node_start", "+", "node_end", ")", "//", "2", "\n", "if", "end", "<=", "mid", ":", "\n", "            ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", "\n", "", "else", ":", "\n", "            ", "if", "mid", "+", "1", "<=", "start", ":", "\n", "                ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_operation", "(", "\n", "self", ".", "_reduce_helper", "(", "start", ",", "mid", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", ",", "\n", "self", ".", "_reduce_helper", "(", "mid", "+", "1", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.reduce": [[51, 75], ["segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree._reduce_helper"], ["", "", "", "def", "reduce", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns result of applying `self.operation`\n        to a contiguous subsequence of the array.\n\n            self.operation(arr[start], operation(arr[start+1], operation(... arr[end])))\n\n        Parameters\n        ----------\n        start: int\n            beginning of the subsequence\n        end: int\n            end of the subsequences\n\n        Returns\n        -------\n        reduced: obj\n            result of reducing self.operation over the specified range of array elements.\n        \"\"\"", "\n", "if", "end", "is", "None", ":", "\n", "            ", "end", "=", "self", ".", "_capacity", "\n", "", "if", "end", "<", "0", ":", "\n", "            ", "end", "+=", "self", ".", "_capacity", "\n", "", "end", "-=", "1", "\n", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "1", ",", "0", ",", "self", ".", "_capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.__setitem__": [[76, 87], ["segment_tree.SegmentTree._operation"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "idx", ",", "val", ")", ":", "\n", "# index of the leaf", "\n", "        ", "idx", "+=", "self", ".", "_capacity", "\n", "self", ".", "_value", "[", "idx", "]", "=", "val", "\n", "idx", "//=", "2", "\n", "while", "idx", ">=", "1", ":", "\n", "            ", "self", ".", "_value", "[", "idx", "]", "=", "self", ".", "_operation", "(", "\n", "self", ".", "_value", "[", "2", "*", "idx", "]", ",", "\n", "self", ".", "_value", "[", "2", "*", "idx", "+", "1", "]", "\n", ")", "\n", "idx", "//=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.__getitem__": [[88, 91], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "0", "<=", "idx", "<", "self", ".", "_capacity", "\n", "return", "self", ".", "_value", "[", "self", ".", "_capacity", "+", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.__init__": [[94, 99], ["segment_tree.SegmentTree.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "operator", ".", "add", ",", "\n", "neutral_element", "=", "0.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum": [[101, 104], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.reduce"], ["", "def", "sum", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns arr[start] + ... + arr[end]\"\"\"", "\n", "return", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx": [[105, 132], ["segment_tree.SumSegmentTree.sum"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "find_prefixsum_idx", "(", "self", ",", "prefixsum", ")", ":", "\n", "        ", "\"\"\"Find the highest index `i` in the array such that\n            sum(arr[0] + arr[1] + ... + arr[i - i]) <= prefixsum\n\n        if array values are probabilities, this function\n        allows to sample indexes according to the discrete\n        probability efficiently.\n\n        Parameters\n        ----------\n        perfixsum: float\n            upperbound on the sum of array prefix\n\n        Returns\n        -------\n        idx: int\n            highest index satisfying the prefixsum constraint\n        \"\"\"", "\n", "assert", "0", "<=", "prefixsum", "<=", "self", ".", "sum", "(", ")", "+", "1e-5", "\n", "idx", "=", "1", "\n", "while", "idx", "<", "self", ".", "_capacity", ":", "# while non-leaf", "\n", "            ", "if", "self", ".", "_value", "[", "2", "*", "idx", "]", ">", "prefixsum", ":", "\n", "                ", "idx", "=", "2", "*", "idx", "\n", "", "else", ":", "\n", "                ", "prefixsum", "-=", "self", ".", "_value", "[", "2", "*", "idx", "]", "\n", "idx", "=", "2", "*", "idx", "+", "1", "\n", "", "", "return", "idx", "-", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.__init__": [[135, 140], ["segment_tree.SegmentTree.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "min", ",", "\n", "neutral_element", "=", "float", "(", "'inf'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min": [[142, 146], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SegmentTree.reduce"], ["", "def", "min", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns min(arr[start], ...,  arr[end])\"\"\"", "\n", "\n", "return", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.__init__": [[4, 11], ["dataset.Dataset.shuffle", "next", "iter", "data_map.values"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "data_map", ",", "deterministic", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "data_map", "=", "data_map", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "enable_shuffle", "=", "shuffle", "\n", "self", ".", "n", "=", "next", "(", "iter", "(", "data_map", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "self", ".", "_next_id", "=", "0", "\n", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle": [[12, 22], ["numpy.arange", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "deterministic", ":", "\n", "            ", "return", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "self", ".", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "perm", "]", "\n", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.next_batch": [[23, 35], ["min", "dict", "dataset.Dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_next_id", ">=", "self", ".", "n", "and", "self", ".", "enable_shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "cur_id", "=", "self", ".", "_next_id", "\n", "cur_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "_next_id", ")", "\n", "self", ".", "_next_id", "+=", "cur_batch_size", "\n", "\n", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "cur_id", ":", "cur_id", "+", "cur_batch_size", "]", "\n", "", "return", "data_map", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.iterate_once": [[36, 42], ["dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.next_batch"], ["", "def", "iterate_once", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n", "while", "self", ".", "_next_id", "<=", "self", ".", "n", "-", "batch_size", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.subset": [[43, 48], ["dict", "dataset.Dataset"], "methods", ["None"], ["", "def", "subset", "(", "self", ",", "num_elements", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", ":", "num_elements", "]", "\n", "", "return", "Dataset", "(", "data_map", ",", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.iterbatches": [[50, 61], ["tuple", "all", "numpy.arange", "numpy.array_split", "map", "numpy.random.shuffle", "numpy.arange", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.dataset.Dataset.shuffle"], ["", "", "def", "iterbatches", "(", "arrays", ",", "*", ",", "num_batches", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "include_final_partial_batch", "=", "True", ")", ":", "\n", "    ", "assert", "(", "num_batches", "is", "None", ")", "!=", "(", "batch_size", "is", "None", ")", ",", "'Provide num_batches or batch_size, but not both'", "\n", "arrays", "=", "tuple", "(", "map", "(", "np", ".", "asarray", ",", "arrays", ")", ")", "\n", "n", "=", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "assert", "all", "(", "a", ".", "shape", "[", "0", "]", "==", "n", "for", "a", "in", "arrays", "[", "1", ":", "]", ")", "\n", "inds", "=", "np", ".", "arange", "(", "n", ")", "\n", "if", "shuffle", ":", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "sections", "=", "np", ".", "arange", "(", "0", ",", "n", ",", "batch_size", ")", "[", "1", ":", "]", "if", "num_batches", "is", "None", "else", "num_batches", "\n", "for", "batch_inds", "in", "np", ".", "array_split", "(", "inds", ",", "sections", ")", ":", "\n", "        ", "if", "include_final_partial_batch", "or", "len", "(", "batch_inds", ")", "==", "batch_size", ":", "\n", "            ", "yield", "tuple", "(", "a", "[", "batch_inds", "]", "for", "a", "in", "arrays", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.__init__": [[7, 20], ["sum", "numpy.zeros", "numpy.zeros", "baselines.SetFromFlat", "baselines.GetFlat", "baselines.numel"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "*", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ",", "scale_grad_by_procs", "=", "True", ",", "comm", "=", "None", ")", ":", "\n", "        ", "self", ".", "var_list", "=", "var_list", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "beta2", "=", "beta2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "scale_grad_by_procs", "=", "scale_grad_by_procs", "\n", "size", "=", "sum", "(", "U", ".", "numel", "(", "v", ")", "for", "v", "in", "var_list", ")", "\n", "self", ".", "m", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "v", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "setfromflat", "=", "U", ".", "SetFromFlat", "(", "var_list", ")", "\n", "self", ".", "getflat", "=", "U", ".", "GetFlat", "(", "var_list", ")", "\n", "self", ".", "comm", "=", "MPI", ".", "COMM_WORLD", "if", "comm", "is", "None", "else", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.update": [[21, 36], ["localg.astype.astype.astype", "numpy.zeros_like", "mpi_adam.MpiAdam.comm.Allreduce", "mpi_adam.MpiAdam.setfromflat", "mpi_adam.MpiAdam.check_synced", "mpi_adam.MpiAdam.comm.Get_size", "numpy.sqrt", "numpy.sqrt", "mpi_adam.MpiAdam.getflat"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.check_synced"], ["", "def", "update", "(", "self", ",", "localg", ",", "stepsize", ")", ":", "\n", "        ", "if", "self", ".", "t", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "check_synced", "(", ")", "\n", "", "localg", "=", "localg", ".", "astype", "(", "'float32'", ")", "\n", "globalg", "=", "np", ".", "zeros_like", "(", "localg", ")", "\n", "self", ".", "comm", ".", "Allreduce", "(", "localg", ",", "globalg", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "if", "self", ".", "scale_grad_by_procs", ":", "\n", "            ", "globalg", "/=", "self", ".", "comm", ".", "Get_size", "(", ")", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "a", "=", "stepsize", "*", "np", ".", "sqrt", "(", "1", "-", "self", ".", "beta2", "**", "self", ".", "t", ")", "/", "(", "1", "-", "self", ".", "beta1", "**", "self", ".", "t", ")", "\n", "self", ".", "m", "=", "self", ".", "beta1", "*", "self", ".", "m", "+", "(", "1", "-", "self", ".", "beta1", ")", "*", "globalg", "\n", "self", ".", "v", "=", "self", ".", "beta2", "*", "self", ".", "v", "+", "(", "1", "-", "self", ".", "beta2", ")", "*", "(", "globalg", "*", "globalg", ")", "\n", "step", "=", "(", "-", "a", ")", "*", "self", ".", "m", "/", "(", "np", ".", "sqrt", "(", "self", ".", "v", ")", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "setfromflat", "(", "self", ".", "getflat", "(", ")", "+", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.sync": [[37, 41], ["mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.setfromflat"], "methods", ["None"], ["", "def", "sync", "(", "self", ")", ":", "\n", "        ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "self", ".", "setfromflat", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.MpiAdam.check_synced": [[42, 51], ["mpi_adam.MpiAdam.comm.Get_rank", "mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.getflat", "numpy.empty_like", "mpi_adam.MpiAdam.comm.Bcast"], "methods", ["None"], ["", "def", "check_synced", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "# this is root", "\n", "            ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "thetalocal", "=", "self", ".", "getflat", "(", ")", "\n", "thetaroot", "=", "np", ".", "empty_like", "(", "thetalocal", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "thetaroot", ",", "root", "=", "0", ")", "\n", "assert", "(", "thetaroot", "==", "thetalocal", ")", ".", "all", "(", ")", ",", "(", "thetaroot", ",", "thetalocal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_adam.test_MpiAdam": [[52, 80], ["numpy.random.seed", "tensorflow.set_random_seed", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer().minimize", "baselines.function", "tensorflow.get_default_session().run", "range", "tensorflow.set_random_seed", "tensorflow.get_default_session().run", "baselines.function", "mpi_adam.MpiAdam", "range", "numpy.random.randn().astype", "numpy.random.randn().astype", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.global_variables_initializer", "print", "tensorflow.global_variables_initializer", "U.function.", "mpi_adam.MpiAdam.update", "print", "tensorflow.square", "tensorflow.sin", "tensorflow.train.AdamOptimizer", "tensorflow.get_default_session", "U.function.", "tensorflow.get_default_session", "baselines.flatgrad", "numpy.random.randn", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad"], ["", "", "", "@", "U", ".", "in_session", "\n", "def", "test_MpiAdam", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "a", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "5", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "a", ")", ")", "+", "tf", ".", "reduce_sum", "(", "tf", ".", "sin", "(", "b", ")", ")", "\n", "\n", "stepsize", "=", "1e-2", "\n", "update_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "stepsize", ")", ".", "minimize", "(", "loss", ")", "\n", "do_update", "=", "U", ".", "function", "(", "[", "]", ",", "loss", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "print", "(", "i", ",", "do_update", "(", ")", ")", "\n", "\n", "", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "var_list", "=", "[", "a", ",", "b", "]", "\n", "lossandgrad", "=", "U", ".", "function", "(", "[", "]", ",", "[", "loss", ",", "U", ".", "flatgrad", "(", "loss", ",", "var_list", ")", "]", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "adam", "=", "MpiAdam", "(", "var_list", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "l", ",", "g", "=", "lossandgrad", "(", ")", "\n", "adam", ".", "update", "(", "g", ",", "stepsize", ")", "\n", "print", "(", "i", ",", "l", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv.__init__": [[6, 14], ["gym.spaces.Discrete", "identity_env.IdentityEnv.reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "ep_length", "=", "100", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "action_space", "=", "Discrete", "(", "dim", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv.reset": [[15, 20], ["identity_env.IdentityEnv._choose_next_state"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv._choose_next_state"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_choose_next_state", "(", ")", "\n", "self", ".", "observation_space", "=", "self", ".", "action_space", "\n", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv.step": [[21, 25], ["identity_env.IdentityEnv._get_reward", "identity_env.IdentityEnv._choose_next_state"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv._get_reward", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv._choose_next_state"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "rew", "=", "self", ".", "_get_reward", "(", "actions", ")", "\n", "self", ".", "_choose_next_state", "(", ")", "\n", "return", "self", ".", "state", ",", "rew", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv._choose_next_state": [[26, 28], ["identity_env.IdentityEnv.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample"], ["", "def", "_choose_next_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "action_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.identity_env.IdentityEnv._get_reward": [[29, 31], ["None"], "methods", ["None"], ["", "def", "_get_reward", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "1", "if", "self", ".", "state", "==", "actions", "else", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.flatparam": [[11, 13], ["None"], "methods", ["None"], ["def", "flatparam", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.mode": [[13, 15], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.neglogp": [[15, 18], ["None"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# Usually it's easier to define the negative logprob", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.kl": [[18, 20], ["None"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.entropy": [[20, 22], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.sample": [[22, 24], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "logp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.logp": [[24, 26], ["distributions.Pd.neglogp"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp"], ["", "def", "logp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "self", ".", "neglogp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.pdclass": [[31, 33], ["None"], "methods", ["None"], ["def", "pdclass", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.pdfromflat": [[33, 35], ["distributions.PdType.pdclass"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.pdclass"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "self", ".", "pdclass", "(", ")", "(", "flat", ")", "\n", "", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.pdfromlatent": [[35, 37], ["None"], "methods", ["None"], ["", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.param_shape": [[37, 39], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_shape": [[39, 41], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_dtype": [[41, 43], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.param_placeholder": [[44, 46], ["tensorflow.placeholder", "distributions.PdType.param_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape"], ["", "def", "param_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "prepend_shape", "+", "self", ".", "param_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder": [[46, 48], ["tensorflow.placeholder", "distributions.PdType.sample_dtype", "distributions.PdType.sample_shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.sample_dtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.sample_shape"], ["", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "self", ".", "sample_dtype", "(", ")", ",", "shape", "=", "prepend_shape", "+", "self", ".", "sample_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPdType.__init__": [[50, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ncat", ")", ":", "\n", "        ", "self", ".", "ncat", "=", "ncat", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPdType.pdclass": [[52, 54], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "CategoricalPd", "\n", "", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPdType.pdfromlatent": [[54, 57], ["baselines.a2c.utils.fc", "distributions.CategoricalPdType.pdfromflat"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat"], ["", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "        ", "pdparam", "=", "fc", "(", "latent_vector", ",", "'pi'", ",", "self", ".", "ncat", ",", "init_scale", "=", "init_scale", ",", "init_bias", "=", "init_bias", ")", "\n", "return", "self", ".", "pdfromflat", "(", "pdparam", ")", ",", "pdparam", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPdType.param_shape": [[58, 60], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "ncat", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPdType.sample_shape": [[60, 62], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPdType.sample_dtype": [[62, 64], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.__init__": [[67, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nvec", ")", ":", "\n", "        ", "self", ".", "ncats", "=", "nvec", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdclass": [[69, 71], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat": [[71, 73], ["distributions.MultiCategoricalPd"], "methods", ["None"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "(", "self", ".", "ncats", ",", "flat", ")", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.param_shape": [[73, 75], ["sum"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "sum", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.sample_shape": [[75, 77], ["len"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.sample_dtype": [[77, 79], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.__init__": [[81, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdclass": [[83, 85], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "DiagGaussianPd", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.pdfromlatent": [[86, 91], ["baselines.a2c.utils.fc", "tensorflow.get_variable", "tensorflow.concat", "distributions.DiagGaussianPdType.pdfromflat", "tensorflow.zeros_initializer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.fc", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat"], ["", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "        ", "mean", "=", "fc", "(", "latent_vector", ",", "'pi'", ",", "self", ".", "size", ",", "init_scale", "=", "init_scale", ",", "init_bias", "=", "init_bias", ")", "\n", "logstd", "=", "tf", ".", "get_variable", "(", "name", "=", "'logstd'", ",", "shape", "=", "[", "1", ",", "self", ".", "size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "pdparam", "=", "tf", ".", "concat", "(", "[", "mean", ",", "mean", "*", "0.0", "+", "logstd", "]", ",", "axis", "=", "1", ")", "\n", "return", "self", ".", "pdfromflat", "(", "pdparam", ")", ",", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.param_shape": [[92, 94], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "2", "*", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.sample_shape": [[94, 96], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPdType.sample_dtype": [[96, 98], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.__init__": [[100, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.pdclass": [[102, 104], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "BernoulliPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.param_shape": [[104, 106], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.sample_shape": [[106, 108], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPdType.sample_dtype": [[108, 110], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.__init__": [[135, 137], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.flatparam": [[137, 139], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.mode": [[139, 141], ["tensorflow.argmax"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "argmax", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.neglogp": [[141, 149], ["tensorflow.one_hot", "tensorflow.nn.softmax_cross_entropy_with_logits", "distributions.CategoricalPd.logits.get_shape().as_list", "distributions.CategoricalPd.logits.get_shape"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# return tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.logits, labels=x)", "\n", "# Note: we can't use sparse_softmax_cross_entropy_with_logits because", "\n", "#       the implementation does not allow second-order derivatives...", "\n", "        ", "one_hot_actions", "=", "tf", ".", "one_hot", "(", "x", ",", "self", ".", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ")", "\n", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits", ",", "\n", "labels", "=", "one_hot_actions", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.kl": [[149, 158], ["tensorflow.exp", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "tf", ".", "reduce_max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "a1", "=", "other", ".", "logits", "-", "tf", ".", "reduce_max", "(", "other", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "ea1", "=", "tf", ".", "exp", "(", "a1", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "z1", "=", "tf", ".", "reduce_sum", "(", "ea1", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "a0", "-", "tf", ".", "log", "(", "z0", ")", "-", "a1", "+", "tf", ".", "log", "(", "z1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.entropy": [[158, 164], ["tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "tf", ".", "reduce_max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.sample": [[164, 167], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "self", ".", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "u", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.CategoricalPd.fromflat": [[167, 170], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.__init__": [[172, 175], ["list", "map", "tensorflow.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nvec", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "self", ".", "categoricals", "=", "list", "(", "map", "(", "CategoricalPd", ",", "tf", ".", "split", "(", "flat", ",", "nvec", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.flatparam": [[175, 177], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.mode": [[177, 179], ["tensorflow.cast", "tensorflow.stack", "p.mode"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.mode"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "mode", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.neglogp": [[179, 181], ["tensorflow.add_n", "p.neglogp", "zip", "tensorflow.unstack"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "neglogp", "(", "px", ")", "for", "p", ",", "px", "in", "zip", "(", "self", ".", "categoricals", ",", "tf", ".", "unstack", "(", "x", ",", "axis", "=", "-", "1", ")", ")", "]", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.kl": [[181, 183], ["tensorflow.add_n", "p.kl", "zip"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.kl"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "kl", "(", "q", ")", "for", "p", ",", "q", "in", "zip", "(", "self", ".", "categoricals", ",", "other", ".", "categoricals", ")", "]", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.entropy": [[183, 185], ["tensorflow.add_n", "p.entropy"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "entropy", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.sample": [[185, 187], ["tensorflow.cast", "tensorflow.stack", "p.sample"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "sample", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPd.fromflat": [[187, 190], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.__init__": [[192, 198], ["tensorflow.split", "tensorflow.exp", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "mean", ",", "logstd", "=", "tf", ".", "split", "(", "axis", "=", "len", "(", "flat", ".", "shape", ")", "-", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "flat", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "logstd", "=", "logstd", "\n", "self", ".", "std", "=", "tf", ".", "exp", "(", "logstd", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.flatparam": [[198, 200], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.mode": [[200, 202], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.neglogp": [[202, 206], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.square", "numpy.log", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "0.5", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ",", "axis", "=", "-", "1", ")", "+", "0.5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "*", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "x", ")", "[", "-", "1", "]", ")", "+", "tf", ".", "reduce_sum", "(", "self", ".", "logstd", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.kl": [[206, 209], ["isinstance", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "isinstance", "(", "other", ",", "DiagGaussianPd", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "other", ".", "logstd", "-", "self", ".", "logstd", "+", "(", "tf", ".", "square", "(", "self", ".", "std", ")", "+", "tf", ".", "square", "(", "self", ".", "mean", "-", "other", ".", "mean", ")", ")", "/", "(", "2.0", "*", "tf", ".", "square", "(", "other", ".", "std", ")", ")", "-", "0.5", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.entropy": [[209, 211], ["tensorflow.reduce_sum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "self", ".", "logstd", "+", ".5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", "*", "np", ".", "e", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.sample": [[211, 213], ["tensorflow.random_normal", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "+", "self", ".", "std", "*", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "self", ".", "mean", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.DiagGaussianPd.fromflat": [[213, 216], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.__init__": [[218, 221], ["tensorflow.sigmoid"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "self", ".", "ps", "=", "tf", ".", "sigmoid", "(", "logits", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.flatparam": [[221, 223], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.mode": [[223, 225], ["tensorflow.round"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "round", "(", "self", ".", "ps", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.neglogp": [[225, 227], ["tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.to_float"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "tf", ".", "to_float", "(", "x", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.kl": [[227, 229], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "other", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy": [[229, 231], ["tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.sample": [[231, 234], ["tensorflow.random_uniform", "tensorflow.to_float", "tensorflow.shape", "tensorflow.python.ops.math_ops.less"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "ps", ")", ")", "\n", "return", "tf", ".", "to_float", "(", "math_ops", ".", "less", "(", "u", ",", "self", ".", "ps", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.fromflat": [[234, 237], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.make_pdtype": [[238, 251], ["isinstance", "distributions.DiagGaussianPdType", "isinstance", "len", "distributions.CategoricalPdType", "isinstance", "distributions.MultiCategoricalPdType", "isinstance", "distributions.BernoulliPdType"], "function", ["None"], ["", "", "def", "make_pdtype", "(", "ac_space", ")", ":", "\n", "    ", "from", "gym", "import", "spaces", "\n", "if", "isinstance", "(", "ac_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "assert", "len", "(", "ac_space", ".", "shape", ")", "==", "1", "\n", "return", "DiagGaussianPdType", "(", "ac_space", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "return", "CategoricalPdType", "(", "ac_space", ".", "n", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "        ", "return", "MultiCategoricalPdType", "(", "ac_space", ".", "nvec", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "        ", "return", "BernoulliPdType", "(", "ac_space", ".", "n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.shape_el": [[252, 258], ["v.get_shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.shape"], ["", "", "def", "shape_el", "(", "v", ",", "i", ")", ":", "\n", "    ", "maybe", "=", "v", ".", "get_shape", "(", ")", "[", "i", "]", "\n", "if", "maybe", "is", "not", "None", ":", "\n", "        ", "return", "maybe", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "shape", "(", "v", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.test_probtypes": [[259, 279], ["numpy.random.seed", "numpy.array", "distributions.DiagGaussianPdType", "distributions.validate_probtype", "numpy.array", "distributions.CategoricalPdType", "distributions.validate_probtype", "numpy.array", "distributions.MultiCategoricalPdType", "distributions.validate_probtype", "numpy.array", "distributions.BernoulliPdType", "distributions.validate_probtype"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.validate_probtype"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_probtypes", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "pdparam_diag_gauss", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".4", ",", "-", ".5", ",", ".1", ",", "-", ".5", ",", ".1", ",", "0.8", "]", ")", "\n", "diag_gauss", "=", "DiagGaussianPdType", "(", "pdparam_diag_gauss", ".", "size", "//", "2", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "diag_gauss", ",", "pdparam_diag_gauss", ")", "\n", "\n", "pdparam_categorical", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "categorical", "=", "CategoricalPdType", "(", "pdparam_categorical", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "categorical", ",", "pdparam_categorical", ")", "\n", "\n", "nvec", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "pdparam_multicategorical", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", ",", ".1", ",", "1", ",", "-", ".1", "]", ")", "\n", "multicategorical", "=", "MultiCategoricalPdType", "(", "nvec", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "multicategorical", ",", "pdparam_multicategorical", ")", "\n", "\n", "pdparam_bernoulli", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "bernoulli", "=", "BernoulliPdType", "(", "pdparam_bernoulli", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "bernoulli", ",", "pdparam_bernoulli", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.validate_probtype": [[281, 309], ["numpy.repeat", "probtype.param_placeholder", "probtype.sample_placeholder", "probtype.pdfromflat", "baselines.function", "baselines.function", "tensorflow.get_default_session().run", "U.function.", "U.function.mean", "probtype.param_placeholder", "probtype.pdfromflat", "numpy.repeat", "baselines.function", "U.function.mean", "U.function.", "print", "probtype.pdfromflat.logp", "probtype.pdfromflat.entropy", "probtype.pdfromflat.sample", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "probtype.pdfromflat.kl", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "tensorflow.get_default_session", "U.function.", "numpy.random.randn", "U.function."], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.distributions.BernoulliPd.kl", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std"], ["", "def", "validate_probtype", "(", "probtype", ",", "pdparam", ")", ":", "\n", "    ", "N", "=", "100000", "\n", "# Check to see if mean negative log likelihood == differential entropy", "\n", "Mval", "=", "np", ".", "repeat", "(", "pdparam", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "M", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "X", "=", "probtype", ".", "sample_placeholder", "(", "[", "N", "]", ")", "\n", "pd", "=", "probtype", ".", "pdfromflat", "(", "M", ")", "\n", "calcloglik", "=", "U", ".", "function", "(", "[", "X", ",", "M", "]", ",", "pd", ".", "logp", "(", "X", ")", ")", "\n", "calcent", "=", "U", ".", "function", "(", "[", "M", "]", ",", "pd", ".", "entropy", "(", ")", ")", "\n", "Xval", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "pd", ".", "sample", "(", ")", ",", "feed_dict", "=", "{", "M", ":", "Mval", "}", ")", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval", ")", "\n", "entval_ll", "=", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "entval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "entval", "=", "calcent", "(", "Mval", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "entval", "-", "entval_ll", ")", "<", "3", "*", "entval_ll_stderr", "# within 3 sigmas", "\n", "\n", "# Check to see if kldiv[p,q] = - ent[p] - E_p[log q]", "\n", "M2", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "pd2", "=", "probtype", ".", "pdfromflat", "(", "M2", ")", "\n", "q", "=", "pdparam", "+", "np", ".", "random", ".", "randn", "(", "pdparam", ".", "size", ")", "*", "0.1", "\n", "Mval2", "=", "np", ".", "repeat", "(", "q", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "calckl", "=", "U", ".", "function", "(", "[", "M", ",", "M2", "]", ",", "pd", ".", "kl", "(", "pd2", ")", ")", "\n", "klval", "=", "calckl", "(", "Mval", ",", "Mval2", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval2", ")", "\n", "klval_ll", "=", "-", "entval", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "klval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "klval", "-", "klval_ll", ")", "<", "3", "*", "klval_ll_stderr", "# within 3 sigmas", "\n", "print", "(", "'ok on'", ",", "probtype", ",", "pdparam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer.__init__": [[11, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "\"\"\"Create Prioritized Replay buffer.\n        Parameters\n        ----------\n        size: int\n            Max number of transitions to store in the buffer. When the buffer\n            overflows the old memories are dropped.\n        \"\"\"", "\n", "self", ".", "_storage", "=", "[", "]", "\n", "self", ".", "_maxsize", "=", "size", "\n", "self", ".", "_next_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_storage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer.add": [[26, 34], ["len", "self_imitation.ReplayBuffer.ReplayBuffer._storage.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "add", "(", "self", ",", "obs_t", ",", "action", ",", "R", ")", ":", "\n", "        ", "data", "=", "(", "obs_t", ",", "action", ",", "R", ")", "\n", "\n", "if", "self", ".", "_next_idx", ">=", "len", "(", "self", ".", "_storage", ")", ":", "\n", "            ", "self", ".", "_storage", ".", "append", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_storage", "[", "self", ".", "_next_idx", "]", "=", "data", "\n", "", "self", ".", "_next_idx", "=", "(", "self", ".", "_next_idx", "+", "1", ")", "%", "self", ".", "_maxsize", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer._encode_sample": [[35, 44], ["obses_t.append", "actions.append", "returns.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "_encode_sample", "(", "self", ",", "idxes", ")", ":", "\n", "        ", "obses_t", ",", "actions", ",", "returns", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "idxes", ":", "\n", "            ", "data", "=", "self", ".", "_storage", "[", "i", "]", "\n", "obs_t", ",", "action", ",", "R", "=", "data", "\n", "obses_t", ".", "append", "(", "np", ".", "array", "(", "obs_t", ",", "copy", "=", "False", ")", ")", "\n", "actions", ".", "append", "(", "np", ".", "array", "(", "action", ",", "copy", "=", "False", ")", ")", "\n", "returns", ".", "append", "(", "R", ")", "\n", "", "return", "np", ".", "array", "(", "obses_t", ")", ",", "np", ".", "array", "(", "actions", ")", ",", "np", ".", "array", "(", "returns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer.sample": [[45, 67], ["self_imitation.ReplayBuffer.ReplayBuffer._encode_sample", "random.randint", "range", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer._encode_sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Sample a batch of experiences.\n        Parameters\n        ----------\n        batch_size: int\n            How many transitions to sample.\n        Returns\n        -------\n        obs_batch: np.array\n            batch of observations\n        act_batch: np.array\n            batch of actions executed given obs_batch\n        rew_batch: np.array\n            rewards received as results of executing act_batch\n        next_obs_batch: np.array\n            next set of observations seen after executing act_batch\n        done_mask: np.array\n            done_mask[i] = 1 if executing act_batch[i] resulted in\n            the end of an episode and 0 otherwise.\n        \"\"\"", "\n", "idxes", "=", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "_storage", ")", "-", "1", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "return", "self", ".", "_encode_sample", "(", "idxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.__init__": [[70, 95], ["self_imitation.PrioritizedReplayBuffer.ReplayBuffer.__init__", "baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.MinSegmentTree"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "alpha", ")", ":", "\n", "        ", "\"\"\"Create Prioritized Replay buffer.\n        Parameters\n        ----------\n        size: int\n            Max number of transitions to store in the buffer. When the buffer\n            overflows the old memories are dropped.\n        alpha: float\n            how much prioritization is used\n            (0 - no prioritization, 1 - full prioritization)\n        See Also\n        --------\n        ReplayBuffer.__init__\n        \"\"\"", "\n", "super", "(", "PrioritizedReplayBuffer", ",", "self", ")", ".", "__init__", "(", "size", ")", "\n", "assert", "alpha", ">", "0", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "\n", "it_capacity", "=", "1", "\n", "while", "it_capacity", "<", "size", ":", "\n", "            ", "it_capacity", "*=", "2", "\n", "\n", "", "self", ".", "_it_sum", "=", "SumSegmentTree", "(", "it_capacity", ")", "\n", "self", ".", "_it_min", "=", "MinSegmentTree", "(", "it_capacity", ")", "\n", "self", ".", "_max_priority", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.add": [[96, 102], ["self_imitation.PrioritizedReplayBuffer.ReplayBuffer.add"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.add"], ["", "def", "add", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See ReplayBuffer.store_effect\"\"\"", "\n", "idx", "=", "self", ".", "_next_idx", "\n", "super", "(", ")", ".", "add", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_it_sum", "[", "idx", "]", "=", "self", ".", "_max_priority", "**", "self", ".", "_alpha", "\n", "self", ".", "_it_min", "[", "idx", "]", "=", "self", ".", "_max_priority", "**", "self", ".", "_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer._sample_proportional": [[103, 111], ["range", "self_imitation.PrioritizedReplayBuffer.PrioritizedReplayBuffer._it_sum.find_prefixsum_idx", "res.append", "random.random", "self_imitation.PrioritizedReplayBuffer.PrioritizedReplayBuffer._it_sum.sum", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "_sample_proportional", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "# TODO(szymon): should we ensure no repeats?", "\n", "            ", "mass", "=", "random", ".", "random", "(", ")", "*", "self", ".", "_it_sum", ".", "sum", "(", "0", ",", "len", "(", "self", ".", "_storage", ")", "-", "1", ")", "\n", "idx", "=", "self", ".", "_it_sum", ".", "find_prefixsum_idx", "(", "mass", ")", "\n", "res", ".", "append", "(", "idx", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample": [[112, 156], ["self_imitation.PrioritizedReplayBuffer.PrioritizedReplayBuffer._sample_proportional", "self_imitation.PrioritizedReplayBuffer.PrioritizedReplayBuffer._encode_sample", "tuple", "numpy.array", "numpy.ones_like", "self_imitation.PrioritizedReplayBuffer.PrioritizedReplayBuffer._it_min.min", "self_imitation.PrioritizedReplayBuffer.PrioritizedReplayBuffer._it_sum.sum", "numpy.ones_like.append", "list", "len", "self_imitation.PrioritizedReplayBuffer.PrioritizedReplayBuffer._it_sum.sum", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer._sample_proportional", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.ReplayBuffer._encode_sample", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "beta", ")", ":", "\n", "        ", "\"\"\"Sample a batch of experiences.\n        compared to ReplayBuffer.sample\n        it also returns importance weights and idxes\n        of sampled experiences.\n        Parameters\n        ----------\n        batch_size: int\n            How many transitions to sample.\n        beta: float\n            To what degree to use importance weights\n            (0 - no corrections, 1 - full correction)\n        Returns\n        -------\n        obs_batch: np.array\n            batch of observations\n        act_batch: np.array\n            batch of actions executed given obs_batch\n        R_batch: np.array\n            returns received as results of executing act_batch\n        weights: np.array\n            Array of shape (batch_size,) and dtype np.float32\n            denoting importance weight of each sampled transition\n        idxes: np.array\n            Array of shape (batch_size,) and dtype np.int32\n            idexes in buffer of sampled experiences\n        \"\"\"", "\n", "\n", "idxes", "=", "self", ".", "_sample_proportional", "(", "batch_size", ")", "\n", "\n", "if", "beta", ">", "0", ":", "\n", "            ", "weights", "=", "[", "]", "\n", "p_min", "=", "self", ".", "_it_min", ".", "min", "(", ")", "/", "self", ".", "_it_sum", ".", "sum", "(", ")", "\n", "max_weight", "=", "(", "p_min", "*", "len", "(", "self", ".", "_storage", ")", ")", "**", "(", "-", "beta", ")", "\n", "\n", "for", "idx", "in", "idxes", ":", "\n", "                ", "p_sample", "=", "self", ".", "_it_sum", "[", "idx", "]", "/", "self", ".", "_it_sum", ".", "sum", "(", ")", "\n", "weight", "=", "(", "p_sample", "*", "len", "(", "self", ".", "_storage", ")", ")", "**", "(", "-", "beta", ")", "\n", "weights", ".", "append", "(", "weight", "/", "max_weight", ")", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "np", ".", "ones_like", "(", "idxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "encoded_sample", "=", "self", ".", "_encode_sample", "(", "idxes", ")", "\n", "return", "tuple", "(", "list", "(", "encoded_sample", ")", "+", "[", "weights", ",", "idxes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.update_priorities": [[157, 179], ["zip", "len", "len", "max", "max", "len"], "methods", ["None"], ["", "def", "update_priorities", "(", "self", ",", "idxes", ",", "priorities", ")", ":", "\n", "        ", "\"\"\"Update priorities of sampled transitions.\n        sets priority of transition at index idxes[i] in buffer\n        to priorities[i].\n        Parameters\n        ----------\n        idxes: [int]\n            List of idxes of sampled transitions\n        priorities: [float]\n            List of updated priorities corresponding to\n            transitions at the sampled idxes denoted by\n            variable `idxes`.\n        \"\"\"", "\n", "assert", "len", "(", "idxes", ")", "==", "len", "(", "priorities", ")", "\n", "for", "idx", ",", "priority", "in", "zip", "(", "idxes", ",", "priorities", ")", ":", "\n", "            ", "priority", "=", "max", "(", "priority", ",", "1e-6", ")", "\n", "assert", "priority", ">", "0", "\n", "assert", "0", "<=", "idx", "<", "len", "(", "self", ".", "_storage", ")", "\n", "self", ".", "_it_sum", "[", "idx", "]", "=", "priority", "**", "self", ".", "_alpha", "\n", "self", ".", "_it_min", "[", "idx", "]", "=", "priority", "**", "self", ".", "_alpha", "\n", "\n", "self", ".", "_max_priority", "=", "max", "(", "self", ".", "_max_priority", ",", "priority", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.__init__": [[183, 232], ["int", "self_imitation.SelfImitation.PrioritizedReplayBuffer", "isinstance", "tensorflow.placeholder", "tensorflow.placeholder", "self_imitation.SelfImitation.SelfImitation.build_loss_op", "tensorflow.placeholder", "isinstance", "range", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.build_loss_op"], ["    ", "def", "__init__", "(", "self", ",", "model_ob", ",", "model_vf", ",", "model_entropy", ",", "\n", "fn_value", ",", "fn_neg_log_prob", ",", "ac_space", ",", "fn_reward", ",", "fn_obs", "=", "None", ",", "\n", "n_env", "=", "16", ",", "batch_size", "=", "512", ",", "n_update", "=", "4", ",", "\n", "clip", "=", "1", ",", "w_value", "=", "0.01", ",", "w_entropy", "=", "0.01", ",", "\n", "max_steps", "=", "int", "(", "1e5", ")", ",", "gamma", "=", "0.99", ",", "\n", "max_nlogp", "=", "5", ",", "min_batch_size", "=", "64", ",", "stack", "=", "1", ",", "\n", "alpha", "=", "0.6", ",", "beta", "=", "1.0", ")", ":", "\n", "\n", "        ", "self", ".", "model_ob", "=", "model_ob", "\n", "self", ".", "model_vf", "=", "model_vf", "\n", "self", ".", "model_entropy", "=", "model_entropy", "\n", "self", ".", "fn_value", "=", "fn_value", "\n", "self", ".", "fn_neg_log_prob", "=", "fn_neg_log_prob", "\n", "self", ".", "fn_reward", "=", "fn_reward", "\n", "self", ".", "fn_obs", "=", "fn_obs", "\n", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "buffer", "=", "PrioritizedReplayBuffer", "(", "max_steps", ",", "alpha", ")", "\n", "self", ".", "n_env", "=", "n_env", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_update", "=", "n_update", "\n", "self", ".", "clip", "=", "clip", "\n", "self", ".", "w_loss", "=", "1.0", "\n", "self", ".", "w_value", "=", "w_value", "\n", "self", ".", "w_entropy", "=", "w_entropy", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "max_nlogp", "=", "max_nlogp", "\n", "self", ".", "min_batch_size", "=", "min_batch_size", "\n", "\n", "self", ".", "stack", "=", "stack", "\n", "self", ".", "train_count", "=", "0", "\n", "self", ".", "update_count", "=", "0", "\n", "self", ".", "total_steps", "=", "[", "]", "\n", "self", ".", "total_rewards", "=", "[", "]", "\n", "self", ".", "running_episodes", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n_env", ")", "]", "\n", "\n", "if", "isinstance", "(", "ac_space", ",", "spaces", ".", "Box", ")", ":", "\n", "# Continuous control", "\n", "            ", "self", ".", "A", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "ac_space", ".", "shape", "[", "0", "]", "]", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "# Discrete control", "\n", "            ", "self", ".", "A", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "R", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "self", ".", "W", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "self", ".", "build_loss_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.set_loss_weight": [[233, 235], ["None"], "methods", ["None"], ["", "def", "set_loss_weight", "(", "self", ",", "w", ")", ":", "\n", "        ", "self", ".", "w_loss", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.add_episode": [[236, 265], ["baselines.a2c.utils.discount_with_dones", "list", "list", "numpy.zeros", "actions.append", "rewards.append", "dones.append", "zip", "self_imitation.SelfImitation.SelfImitation.buffer.add", "obs.append", "self_imitation.SelfImitation.SelfImitation.fn_reward", "self_imitation.SelfImitation.SelfImitation.fn_obs", "numpy.roll", "obs.append", "obs.append", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.discount_with_dones", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.add", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "add_episode", "(", "self", ",", "trajectory", ")", ":", "\n", "        ", "obs", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "dones", "=", "[", "]", "\n", "\n", "if", "self", ".", "stack", ">", "1", ":", "\n", "            ", "ob_shape", "=", "list", "(", "trajectory", "[", "0", "]", "[", "0", "]", ".", "shape", ")", "\n", "nc", "=", "ob_shape", "[", "-", "1", "]", "\n", "ob_shape", "[", "-", "1", "]", "=", "nc", "*", "self", ".", "stack", "\n", "stacked_ob", "=", "np", ".", "zeros", "(", "ob_shape", ",", "dtype", "=", "trajectory", "[", "0", "]", "[", "0", "]", ".", "dtype", ")", "\n", "", "for", "(", "ob", ",", "action", ",", "reward", ")", "in", "trajectory", ":", "\n", "            ", "if", "ob", "is", "not", "None", ":", "\n", "                ", "x", "=", "self", ".", "fn_obs", "(", "ob", ")", "if", "self", ".", "fn_obs", "is", "not", "None", "else", "ob", "\n", "if", "self", ".", "stack", ">", "1", ":", "\n", "                    ", "stacked_ob", "=", "np", ".", "roll", "(", "stacked_ob", ",", "shift", "=", "-", "nc", ",", "axis", "=", "2", ")", "\n", "stacked_ob", "[", ":", ",", ":", ",", "-", "nc", ":", "]", "=", "x", "\n", "obs", ".", "append", "(", "stacked_ob", ")", "\n", "", "else", ":", "\n", "                    ", "obs", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "                ", "obs", ".", "append", "(", "None", ")", "\n", "", "actions", ".", "append", "(", "action", ")", "\n", "rewards", ".", "append", "(", "self", ".", "fn_reward", "(", "reward", ")", ")", "\n", "dones", ".", "append", "(", "False", ")", "\n", "", "dones", "[", "len", "(", "dones", ")", "-", "1", "]", "=", "True", "\n", "returns", "=", "discount_with_dones", "(", "rewards", ",", "dones", ",", "self", ".", "gamma", ")", "\n", "for", "(", "ob", ",", "action", ",", "R", ")", "in", "list", "(", "zip", "(", "obs", ",", "actions", ",", "returns", ")", ")", ":", "\n", "            ", "self", ".", "buffer", ".", "add", "(", "ob", ",", "action", ",", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.update_buffer": [[266, 279], ["self_imitation.SelfImitation.SelfImitation.add_episode", "self_imitation.SelfImitation.SelfImitation.total_steps.append", "self_imitation.SelfImitation.SelfImitation.total_rewards.append", "len", "numpy.sum", "self_imitation.SelfImitation.SelfImitation.total_steps.pop", "self_imitation.SelfImitation.SelfImitation.total_rewards.pop", "numpy.sum", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.add_episode", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "", "def", "update_buffer", "(", "self", ",", "trajectory", ")", ":", "\n", "        ", "positive_reward", "=", "False", "\n", "for", "(", "ob", ",", "a", ",", "r", ")", "in", "trajectory", ":", "\n", "            ", "if", "r", ">", "0", ":", "\n", "                ", "positive_reward", "=", "True", "\n", "break", "\n", "", "", "if", "positive_reward", ":", "\n", "            ", "self", ".", "add_episode", "(", "trajectory", ")", "\n", "self", ".", "total_steps", ".", "append", "(", "len", "(", "trajectory", ")", ")", "\n", "self", ".", "total_rewards", ".", "append", "(", "np", ".", "sum", "(", "[", "x", "[", "2", "]", "for", "x", "in", "trajectory", "]", ")", ")", "\n", "while", "np", ".", "sum", "(", "self", ".", "total_steps", ")", ">", "self", ".", "max_steps", "and", "len", "(", "self", ".", "total_steps", ")", ">", "1", ":", "\n", "                ", "self", ".", "total_steps", ".", "pop", "(", "0", ")", "\n", "self", ".", "total_rewards", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.num_steps": [[280, 282], ["len"], "methods", ["None"], ["", "", "", "def", "num_steps", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.num_episodes": [[283, 285], ["len"], "methods", ["None"], ["", "def", "num_episodes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "total_rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.get_best_reward": [[286, 290], ["len", "numpy.max"], "methods", ["None"], ["", "def", "get_best_reward", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "total_rewards", ")", ">", "0", ":", "\n", "            ", "return", "np", ".", "max", "(", "self", ".", "total_rewards", ")", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.step": [[291, 302], ["range", "enumerate", "self_imitation.SelfImitation.SelfImitation.running_episodes[].append", "self_imitation.SelfImitation.SelfImitation.running_episodes[].append", "self_imitation.SelfImitation.SelfImitation.update_buffer"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.update_buffer"], ["", "def", "step", "(", "self", ",", "obs", ",", "actions", ",", "rewards", ",", "dones", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "self", ".", "n_env", ")", ":", "\n", "            ", "if", "self", ".", "n_update", ">", "0", ":", "\n", "                ", "self", ".", "running_episodes", "[", "n", "]", ".", "append", "(", "[", "obs", "[", "n", "]", ",", "actions", "[", "n", "]", ",", "rewards", "[", "n", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "running_episodes", "[", "n", "]", ".", "append", "(", "[", "None", ",", "actions", "[", "n", "]", ",", "rewards", "[", "n", "]", "]", ")", "\n", "\n", "", "", "for", "n", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "self", ".", "update_buffer", "(", "self", ".", "running_episodes", "[", "n", "]", ")", "\n", "self", ".", "running_episodes", "[", "n", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.sample_batch": [[303, 309], ["len", "min", "self_imitation.SelfImitation.SelfImitation.buffer.sample", "len"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.sample"], ["", "", "", "def", "sample_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "buffer", ")", ">", "100", ":", "\n", "            ", "batch_size", "=", "min", "(", "batch_size", ",", "len", "(", "self", ".", "buffer", ")", ")", "\n", "return", "self", ".", "buffer", ".", "sample", "(", "batch_size", ",", "beta", "=", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.build_loss_op": [[310, 339], ["tensorflow.where", "tensorflow.reduce_sum", "tensorflow.maximum", "self_imitation.SelfImitation.SelfImitation.fn_neg_log_prob", "tensorflow.stop_gradient", "tensorflow.squeeze", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.stop_gradient", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.squeeze", "tensorflow.minimum", "tensorflow.squeeze", "tensorflow.stop_gradient"], "methods", ["None"], ["", "", "def", "build_loss_op", "(", "self", ")", ":", "\n", "        ", "mask", "=", "tf", ".", "where", "(", "self", ".", "R", "-", "tf", ".", "squeeze", "(", "self", ".", "model_vf", ")", ">", "0.0", ",", "\n", "tf", ".", "ones_like", "(", "self", ".", "R", ")", ",", "tf", ".", "zeros_like", "(", "self", ".", "R", ")", ")", "\n", "self", ".", "num_valid_samples", "=", "tf", ".", "reduce_sum", "(", "mask", ")", "\n", "self", ".", "num_samples", "=", "tf", ".", "maximum", "(", "self", ".", "num_valid_samples", ",", "self", ".", "min_batch_size", ")", "\n", "\n", "# Policy update", "\n", "nlogp", "=", "self", ".", "fn_neg_log_prob", "(", "self", ".", "A", ")", "\n", "clipped_nlogp", "=", "tf", ".", "stop_gradient", "(", "\n", "tf", ".", "minimum", "(", "nlogp", ",", "self", ".", "max_nlogp", ")", "-", "nlogp", ")", "+", "nlogp", "\n", "\n", "# clipped_nlogp = nlogp", "\n", "self", ".", "neg_log_p", "=", "clipped_nlogp", "\n", "self", ".", "adv", "=", "tf", ".", "stop_gradient", "(", "\n", "tf", ".", "clip_by_value", "(", "self", ".", "R", "-", "tf", ".", "squeeze", "(", "self", ".", "model_vf", ")", ",", "0.0", ",", "self", ".", "clip", ")", ")", "\n", "self", ".", "mean_adv", "=", "tf", ".", "reduce_sum", "(", "self", ".", "adv", ")", "/", "self", ".", "num_samples", "\n", "self", ".", "pg_loss", "=", "tf", ".", "reduce_sum", "(", "self", ".", "W", "*", "self", ".", "adv", "*", "clipped_nlogp", ")", "/", "self", ".", "num_samples", "\n", "\n", "# Entropy regularization", "\n", "entropy", "=", "tf", ".", "reduce_sum", "(", "self", ".", "W", "*", "self", ".", "model_entropy", "*", "mask", ")", "/", "self", ".", "num_samples", "\n", "self", ".", "loss", "=", "self", ".", "pg_loss", "-", "entropy", "*", "self", ".", "w_entropy", "\n", "\n", "# Value update", "\n", "v_target", "=", "self", ".", "R", "\n", "v_estimate", "=", "tf", ".", "squeeze", "(", "self", ".", "model_vf", ")", "\n", "delta", "=", "tf", ".", "clip_by_value", "(", "v_estimate", "-", "v_target", ",", "-", "self", ".", "clip", ",", "0", ")", "*", "mask", "\n", "self", ".", "vf_loss", "=", "tf", ".", "reduce_sum", "(", "self", ".", "W", "*", "v_estimate", "*", "tf", ".", "stop_gradient", "(", "delta", ")", ")", "/", "self", ".", "num_samples", "\n", "self", ".", "loss", "+=", "0.5", "*", "self", ".", "w_value", "*", "self", ".", "vf_loss", "\n", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.build_train_op": [[340, 347], ["tensorflow.gradients", "list", "optim.apply_gradients", "tensorflow.clip_by_global_norm", "zip"], "methods", ["None"], ["", "def", "build_train_op", "(", "self", ",", "params", ",", "optim", ",", "lr", ",", "max_grad_norm", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "LR", "=", "lr", "\n", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", "*", "self", ".", "w_loss", ",", "params", ")", "\n", "if", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "grads", ",", "grad_norm", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "max_grad_norm", ")", "\n", "", "grads", "=", "list", "(", "zip", "(", "grads", ",", "params", ")", ")", "\n", "self", ".", "train_op", "=", "optim", ".", "apply_gradients", "(", "grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation._train": [[348, 364], ["self_imitation.SelfImitation.SelfImitation.sample_batch", "sess.run", "self_imitation.SelfImitation.SelfImitation.buffer.update_priorities"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.sample_batch", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.PrioritizedReplayBuffer.update_priorities"], ["", "def", "_train", "(", "self", ",", "sess", ",", "lr", ")", ":", "\n", "        ", "obs", ",", "actions", ",", "returns", ",", "weights", ",", "idxes", "=", "self", ".", "sample_batch", "(", "self", ".", "batch_size", ")", "\n", "if", "obs", "is", "None", ":", "\n", "            ", "return", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "", "loss", ",", "adv", ",", "mean_adv", ",", "samples", ",", "nlogp", ",", "_", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "loss", ",", "self", ".", "adv", ",", "self", ".", "mean_adv", ",", "self", ".", "num_valid_samples", ",", "\n", "self", ".", "neg_log_p", ",", "self", ".", "train_op", "]", ",", "\n", "{", "self", ".", "model_ob", ":", "obs", ",", "\n", "self", ".", "A", ":", "actions", ",", "\n", "self", ".", "R", ":", "returns", ",", "\n", "self", ".", "LR", ":", "lr", ",", "\n", "self", ".", "W", ":", "weights", "}", ")", "\n", "\n", "self", ".", "buffer", ".", "update_priorities", "(", "idxes", ",", "adv", ")", "\n", "return", "loss", ",", "mean_adv", ",", "samples", ",", "nlogp", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation.train": [[365, 380], ["int", "range", "self_imitation.SelfImitation.SelfImitation._train", "int", "self_imitation.SelfImitation.SelfImitation._train"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation._train", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.self_imitation.SelfImitation._train"], ["", "def", "train", "(", "self", ",", "sess", ",", "lr", ")", ":", "\n", "        ", "if", "self", ".", "n_update", "==", "0", ":", "\n", "            ", "return", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "", "self", ".", "train_count", "+=", "1", "\n", "loss", ",", "adv", ",", "samples", ",", "nlogp", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "if", "self", ".", "n_update", "<", "1", ":", "\n", "            ", "update_ratio", "=", "int", "(", "1", "/", "self", ".", "n_update", "+", "1e-8", ")", "\n", "if", "self", ".", "train_count", "%", "update_ratio", "==", "0", ":", "\n", "                ", "loss", ",", "adv", ",", "samples", ",", "nlogp", "=", "self", ".", "_train", "(", "sess", ",", "lr", ")", "\n", "", "", "else", ":", "# n_update > 1 ", "\n", "            ", "for", "n", "in", "range", "(", "int", "(", "self", ".", "n_update", ")", ")", ":", "\n", "                ", "loss", ",", "adv", ",", "samples", ",", "nlogp", "=", "self", ".", "_train", "(", "sess", ",", "lr", ")", "\n", "\n", "", "", "return", "loss", ",", "adv", ",", "samples", ",", "nlogp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util._Function.__init__": [[169, 178], ["tensorflow.group", "list", "hasattr", "type", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "updates", ",", "givens", ")", ":", "\n", "        ", "for", "inpt", "in", "inputs", ":", "\n", "            ", "if", "not", "hasattr", "(", "inpt", ",", "'make_feed_dict'", ")", "and", "not", "(", "type", "(", "inpt", ")", "is", "tf", ".", "Tensor", "and", "len", "(", "inpt", ".", "op", ".", "inputs", ")", "==", "0", ")", ":", "\n", "                ", "assert", "False", ",", "\"inputs should all be placeholders, constants, or have a make_feed_dict method\"", "\n", "", "", "self", ".", "inputs", "=", "inputs", "\n", "updates", "=", "updates", "or", "[", "]", "\n", "self", ".", "update_group", "=", "tf", ".", "group", "(", "*", "updates", ")", "\n", "self", ".", "outputs_update", "=", "list", "(", "outputs", ")", "+", "[", "self", ".", "update_group", "]", "\n", "self", ".", "givens", "=", "{", "}", "if", "givens", "is", "None", "else", "givens", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util._Function._feed_input": [[179, 184], ["hasattr", "feed_dict.update", "inpt.make_feed_dict"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.utils.PlaceholderTfInput.make_feed_dict"], ["", "def", "_feed_input", "(", "self", ",", "feed_dict", ",", "inpt", ",", "value", ")", ":", "\n", "        ", "if", "hasattr", "(", "inpt", ",", "'make_feed_dict'", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "inpt", ".", "make_feed_dict", "(", "value", ")", ")", "\n", "", "else", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util._Function.__call__": [[185, 196], ["zip", "len", "len", "tf_util._Function._feed_input", "feed_dict.get", "tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.daochenzha_SSRL.acer.buffer.Buffer.get", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "assert", "len", "(", "args", ")", "<=", "len", "(", "self", ".", "inputs", ")", ",", "\"Too many arguments provided\"", "\n", "feed_dict", "=", "{", "}", "\n", "# Update the args", "\n", "for", "inpt", ",", "value", "in", "zip", "(", "self", ".", "inputs", ",", "args", ")", ":", "\n", "            ", "self", ".", "_feed_input", "(", "feed_dict", ",", "inpt", ",", "value", ")", "\n", "# Update feed dict with givens.", "\n", "", "for", "inpt", "in", "self", ".", "givens", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "feed_dict", ".", "get", "(", "inpt", ",", "self", ".", "givens", "[", "inpt", "]", ")", "\n", "", "results", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "outputs_update", ",", "feed_dict", "=", "feed_dict", ")", "[", ":", "-", "1", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.SetFromFlat.__init__": [[223, 236], ["list", "numpy.sum", "tensorflow.placeholder", "zip", "tensorflow.group", "map", "tf_util.intprod", "assigns.append", "tf_util.intprod", "tensorflow.assign", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "assigns", "=", "[", "]", "\n", "shapes", "=", "list", "(", "map", "(", "var_shape", ",", "var_list", ")", ")", "\n", "total_size", "=", "np", ".", "sum", "(", "[", "intprod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "\n", "self", ".", "theta", "=", "theta", "=", "tf", ".", "placeholder", "(", "dtype", ",", "[", "total_size", "]", ")", "\n", "start", "=", "0", "\n", "assigns", "=", "[", "]", "\n", "for", "(", "shape", ",", "v", ")", "in", "zip", "(", "shapes", ",", "var_list", ")", ":", "\n", "            ", "size", "=", "intprod", "(", "shape", ")", "\n", "assigns", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tf", ".", "reshape", "(", "theta", "[", "start", ":", "start", "+", "size", "]", ",", "shape", ")", ")", ")", "\n", "start", "+=", "size", "\n", "", "self", ".", "op", "=", "tf", ".", "group", "(", "*", "assigns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.SetFromFlat.__call__": [[237, 239], ["tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "__call__", "(", "self", ",", "theta", ")", ":", "\n", "        ", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "op", ",", "feed_dict", "=", "{", "self", ".", "theta", ":", "theta", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.GetFlat.__init__": [[241, 243], ["tensorflow.concat", "tensorflow.reshape", "tf_util.numel"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "self", ".", "op", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "reshape", "(", "v", ",", "[", "numel", "(", "v", ")", "]", ")", "for", "v", "in", "var_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.GetFlat.__call__": [[244, 246], ["tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.switch": [[9, 25], ["copy.copy", "tensorflow.cond", "tf.cond.set_shape", "then_expression.get_shape", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy"], ["def", "switch", "(", "condition", ",", "then_expression", ",", "else_expression", ")", ":", "\n", "    ", "\"\"\"Switches between two operations depending on a scalar value (int or bool).\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: scalar tensor.\n        then_expression: TensorFlow operation.\n        else_expression: TensorFlow operation.\n    \"\"\"", "\n", "x_shape", "=", "copy", ".", "copy", "(", "then_expression", ".", "get_shape", "(", ")", ")", "\n", "x", "=", "tf", ".", "cond", "(", "tf", ".", "cast", "(", "condition", ",", "'bool'", ")", ",", "\n", "lambda", ":", "then_expression", ",", "\n", "lambda", ":", "else_expression", ")", "\n", "x", ".", "set_shape", "(", "x_shape", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.lrelu": [[30, 34], ["abs"], "function", ["None"], ["", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n", "    ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.huber_loss": [[39, 45], ["tensorflow.where", "tensorflow.abs", "tensorflow.square", "tensorflow.abs"], "function", ["None"], ["", "def", "huber_loss", "(", "x", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Reference: https://en.wikipedia.org/wiki/Huber_loss\"\"\"", "\n", "return", "tf", ".", "where", "(", "\n", "tf", ".", "abs", "(", "x", ")", "<", "delta", ",", "\n", "tf", ".", "square", "(", "x", ")", "*", "0.5", ",", "\n", "delta", "*", "(", "tf", ".", "abs", "(", "x", ")", "-", "0.5", "*", "delta", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session": [[51, 63], ["tensorflow.ConfigProto", "int", "tensorflow.InteractiveSession", "tensorflow.Session", "os.getenv", "multiprocessing.cpu_count"], "function", ["None"], ["", "def", "make_session", "(", "num_cpu", "=", "None", ",", "make_default", "=", "False", ",", "graph", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns a session that will use <num_cpu> CPU's only\"\"\"", "\n", "if", "num_cpu", "is", "None", ":", "\n", "        ", "num_cpu", "=", "int", "(", "os", ".", "getenv", "(", "'RCALL_NUM_CPU'", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ")", "\n", "", "tf_config", "=", "tf", ".", "ConfigProto", "(", "\n", "inter_op_parallelism_threads", "=", "num_cpu", ",", "\n", "intra_op_parallelism_threads", "=", "num_cpu", ")", "\n", "tf_config", ".", "gpu_options", ".", "allocator_type", "=", "'BFC'", "\n", "if", "make_default", ":", "\n", "        ", "return", "tf", ".", "InteractiveSession", "(", "config", "=", "tf_config", ",", "graph", "=", "graph", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "Session", "(", "config", "=", "tf_config", ",", "graph", "=", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session": [[64, 67], ["tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.make_session"], ["", "", "def", "single_threaded_session", "(", ")", ":", "\n", "    ", "\"\"\"Returns a session which will only use a single CPU\"\"\"", "\n", "return", "make_session", "(", "num_cpu", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.in_session": [[68, 74], ["functools.wraps", "tensorflow.Session", "f"], "function", ["None"], ["", "def", "in_session", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "newfunc", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", ":", "\n", "            ", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "newfunc", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize": [[77, 82], ["tensorflow.get_default_session().run", "ALREADY_INITIALIZED.update", "set", "tensorflow.variables_initializer", "tensorflow.global_variables", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["def", "initialize", "(", ")", ":", "\n", "    ", "\"\"\"Initialize all the uninitialized variables in the global scope.\"\"\"", "\n", "new_variables", "=", "set", "(", "tf", ".", "global_variables", "(", ")", ")", "-", "ALREADY_INITIALIZED", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "variables_initializer", "(", "new_variables", ")", ")", "\n", "ALREADY_INITIALIZED", ".", "update", "(", "new_variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.normc_initializer": [[87, 93], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.utils.constant", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "normc_initializer", "(", "std", "=", "1.0", ",", "axis", "=", "0", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "# pylint: disable=W0613", "\n", "        ", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d": [[94, 122], ["tensorflow.variable_scope", "tf_util.intprod", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "int", "tf_util.intprod", "tensorflow.random_uniform_initializer", "tensorflow.summary.image", "tensorflow.nn.conv2d", "tensorflow.zeros_initializer", "tensorflow.transpose", "x.get_shape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.conv2d"], ["", "def", "conv2d", "(", "x", ",", "num_filters", ",", "name", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "\"SAME\"", ",", "dtype", "=", "tf", ".", "float32", ",", "collections", "=", "None", ",", "\n", "summary_tag", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "stride_shape", "=", "[", "1", ",", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "1", "]", "\n", "filter_shape", "=", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "int", "(", "x", ".", "get_shape", "(", ")", "[", "3", "]", ")", ",", "num_filters", "]", "\n", "\n", "# there are \"num input feature maps * filter height * filter width\"", "\n", "# inputs to each hidden unit", "\n", "fan_in", "=", "intprod", "(", "filter_shape", "[", ":", "3", "]", ")", "\n", "# each unit in the lower layer receives a gradient from:", "\n", "# \"num output feature maps * filter height * filter width\" /", "\n", "#   pooling size", "\n", "fan_out", "=", "intprod", "(", "filter_shape", "[", ":", "2", "]", ")", "*", "num_filters", "\n", "# initialize weights with random weights", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "filter_shape", ",", "dtype", ",", "tf", ".", "random_uniform_initializer", "(", "-", "w_bound", ",", "w_bound", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "1", ",", "1", ",", "1", ",", "num_filters", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "\n", "if", "summary_tag", "is", "not", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "image", "(", "summary_tag", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "w", ",", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "-", "1", ",", "1", "]", ")", ",", "\n", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", ",", "\n", "max_images", "=", "10", ")", "\n", "\n", "", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "stride_shape", ",", "pad", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function": [[127, 166], ["isinstance", "tf_util._Function", "isinstance", "tf_util._Function", "tf_util._Function", "outputs.values", "type", "zip", "_Function.", "outputs.keys", "_Function."], "function", ["None"], ["", "", "def", "function", "(", "inputs", ",", "outputs", ",", "updates", "=", "None", ",", "givens", "=", "None", ")", ":", "\n", "    ", "\"\"\"Just like Theano function. Take a bunch of tensorflow placeholders and expressions\n    computed based on those placeholders and produces f(inputs) -> outputs. Function f takes\n    values to be fed to the input's placeholders and produces the values of the expressions\n    in outputs.\n\n    Input values can be passed in the same order as inputs or can be provided as kwargs based\n    on placeholder name (passed to constructor or accessible via placeholder.op.name).\n\n    Example:\n        x = tf.placeholder(tf.int32, (), name=\"x\")\n        y = tf.placeholder(tf.int32, (), name=\"y\")\n        z = 3 * x + 2 * y\n        lin = function([x, y], z, givens={y: 0})\n\n        with single_threaded_session():\n            initialize()\n\n            assert lin(2) == 6\n            assert lin(x=3) == 9\n            assert lin(2, 2) == 10\n            assert lin(x=2, y=3) == 12\n\n    Parameters\n    ----------\n    inputs: [tf.placeholder, tf.constant, or object with make_feed_dict method]\n        list of input arguments\n    outputs: [tf.Variable] or tf.Variable\n        list of outputs or a single output to be returned from function. Returned\n        value will also have the same shape.\n    \"\"\"", "\n", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_Function", "(", "inputs", ",", "outputs", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "", "elif", "isinstance", "(", "outputs", ",", "(", "dict", ",", "collections", ".", "OrderedDict", ")", ")", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "outputs", ".", "values", "(", ")", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "type", "(", "outputs", ")", "(", "zip", "(", "outputs", ".", "keys", "(", ")", ",", "f", "(", "*", "args", ",", "**", "kwargs", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "[", "outputs", "]", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "f", "(", "*", "args", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.var_shape": [[201, 206], ["x.get_shape().as_list", "all", "x.get_shape", "isinstance"], "function", ["None"], ["", "", "def", "var_shape", "(", "x", ")", ":", "\n", "    ", "out", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "assert", "all", "(", "isinstance", "(", "a", ",", "int", ")", "for", "a", "in", "out", ")", ",", "\"shape function assumes that shape is fully known\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.numel": [[207, 209], ["tf_util.intprod", "tf_util.var_shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.var_shape"], ["", "def", "numel", "(", "x", ")", ":", "\n", "    ", "return", "intprod", "(", "var_shape", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod": [[210, 212], ["int", "numpy.prod"], "function", ["None"], ["", "def", "intprod", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "prod", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flatgrad": [[213, 220], ["tensorflow.gradients", "tensorflow.concat", "tensorflow.clip_by_norm", "tensorflow.reshape", "zip", "tensorflow.zeros_like", "tf_util.numel"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.numel"], ["", "def", "flatgrad", "(", "loss", ",", "var_list", ",", "clip_norm", "=", "None", ")", ":", "\n", "    ", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "if", "clip_norm", "is", "not", "None", ":", "\n", "        ", "grads", "=", "[", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_norm", "=", "clip_norm", ")", "for", "grad", "in", "grads", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "\n", "tf", ".", "reshape", "(", "grad", "if", "grad", "is", "not", "None", "else", "tf", ".", "zeros_like", "(", "v", ")", ",", "[", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder": [[249, 258], ["tensorflow.placeholder"], "function", ["None"], ["def", "get_placeholder", "(", "name", ",", "dtype", ",", "shape", ")", ":", "\n", "    ", "if", "name", "in", "_PLACEHOLDER_CACHE", ":", "\n", "        ", "out", ",", "dtype1", ",", "shape1", "=", "_PLACEHOLDER_CACHE", "[", "name", "]", "\n", "assert", "dtype1", "==", "dtype", "and", "shape1", "==", "shape", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "_PLACEHOLDER_CACHE", "[", "name", "]", "=", "(", "out", ",", "dtype", ",", "shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_placeholder_cached": [[259, 261], ["None"], "function", ["None"], ["", "", "def", "get_placeholder_cached", "(", "name", ")", ":", "\n", "    ", "return", "_PLACEHOLDER_CACHE", "[", "name", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.flattenallbut0": [[262, 264], ["tensorflow.reshape", "tf_util.intprod", "x.get_shape().as_list", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.intprod"], ["", "def", "flattenallbut0", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "intprod", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.display_var_info": [[270, 282], ["logger.info", "numpy.prod", "logger.info", "v.shape.as_list", "str", "len"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info", "home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.info"], ["", "def", "display_var_info", "(", "vars", ")", ":", "\n", "    ", "from", "baselines", "import", "logger", "\n", "count_params", "=", "0", "\n", "for", "v", "in", "vars", ":", "\n", "        ", "name", "=", "v", ".", "name", "\n", "if", "\"/Adam\"", "in", "name", "or", "\"beta1_power\"", "in", "name", "or", "\"beta2_power\"", "in", "name", ":", "continue", "\n", "v_params", "=", "np", ".", "prod", "(", "v", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "count_params", "+=", "v_params", "\n", "if", "\"/b:\"", "in", "name", "or", "\"/biases\"", "in", "name", ":", "continue", "# Wx+b, bias is not interesting to look at => count params, but not print", "\n", "logger", ".", "info", "(", "\"   %s%s %i params %s\"", "%", "(", "name", ",", "\" \"", "*", "(", "55", "-", "len", "(", "name", ")", ")", ",", "v_params", ",", "str", "(", "v", ".", "shape", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Total model parameters: %0.2f million\"", "%", "(", "count_params", "*", "1e-6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.get_available_gpus": [[284, 291], ["device_lib.list_local_devices"], "function", ["None"], ["", "def", "get_available_gpus", "(", ")", ":", "\n", "# recipe from here:", "\n", "# https://stackoverflow.com/questions/38559755/how-to-get-current-available-gpus-in-tensorflow?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa", "\n", "\n", "    ", "from", "tensorflow", ".", "python", ".", "client", "import", "device_lib", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.load_state": [[296, 299], ["tensorflow.train.Saver", "tf.train.Saver.restore", "tensorflow.get_default_session"], "function", ["None"], ["", "def", "load_state", "(", "fname", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "tf", ".", "get_default_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.save_state": [[300, 304], ["os.makedirs", "tensorflow.train.Saver", "tf.train.Saver.save", "os.path.dirname", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.deepq.simple.ActWrapper.save"], ["", "def", "save_state", "(", "fname", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ",", "exist_ok", "=", "True", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "save", "(", "tf", ".", "get_default_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.cg.cg": [[2, 35], ["b.copy", "b.copy", "numpy.zeros_like", "b.copy.dot", "range", "print", "f_Ax", "b.copy.dot", "callback", "print", "callback", "print", "b.copy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_cartpole.callback", "home.repos.pwc.inspect_result.daochenzha_SSRL.experiments.train_cartpole.callback"], ["def", "cg", "(", "f_Ax", ",", "b", ",", "cg_iters", "=", "10", ",", "callback", "=", "None", ",", "verbose", "=", "False", ",", "residual_tol", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    Demmel p 312\n    \"\"\"", "\n", "p", "=", "b", ".", "copy", "(", ")", "\n", "r", "=", "b", ".", "copy", "(", ")", "\n", "x", "=", "np", ".", "zeros_like", "(", "b", ")", "\n", "rdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "\n", "fmtstr", "=", "\"%10i %10.3g %10.3g\"", "\n", "titlestr", "=", "\"%10s %10s %10s\"", "\n", "if", "verbose", ":", "print", "(", "titlestr", "%", "(", "\"iter\"", ",", "\"residual norm\"", ",", "\"soln norm\"", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cg_iters", ")", ":", "\n", "        ", "if", "callback", "is", "not", "None", ":", "\n", "            ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "z", "=", "f_Ax", "(", "p", ")", "\n", "v", "=", "rdotr", "/", "p", ".", "dot", "(", "z", ")", "\n", "x", "+=", "v", "*", "p", "\n", "r", "-=", "v", "*", "z", "\n", "newrdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "mu", "=", "newrdotr", "/", "rdotr", "\n", "p", "=", "r", "+", "mu", "*", "p", "\n", "\n", "rdotr", "=", "newrdotr", "\n", "if", "rdotr", "<", "residual_tol", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "callback", "is", "not", "None", ":", "\n", "        ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", "+", "1", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "# pylint: disable=W0631", "\n", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.NoopResetEnv.__init__": [[9, 18], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "'NOOP'", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.NoopResetEnv.reset": [[19, 33], ["atari_wrappers.NoopResetEnv.env.reset", "range", "atari_wrappers.NoopResetEnv.unwrapped.np_random.randint", "atari_wrappers.NoopResetEnv.env.step", "atari_wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "#pylint: disable=E1101", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.NoopResetEnv.step": [[34, 36], ["atari_wrappers.NoopResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FireResetEnv.__init__": [[38, 43], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset for environments that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "'FIRE'", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FireResetEnv.reset": [[44, 53], ["atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FireResetEnv.step": [[54, 56], ["atari_wrappers.FireResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.EpisodicLifeEnv.__init__": [[58, 65], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.EpisodicLifeEnv.step": [[66, 79], ["atari_wrappers.EpisodicLifeEnv.env.step", "atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert sometimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.EpisodicLifeEnv.reset": [[80, 92], ["atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers.EpisodicLifeEnv.env.reset", "atari_wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.MaxAndSkipEnv.__init__": [[94, 100], ["gym.Wrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.MaxAndSkipEnv.step": [[101, 117], ["range", "atari_wrappers.MaxAndSkipEnv._obs_buffer.max", "atari_wrappers.MaxAndSkipEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Repeat action, sum reward, and max over last observations.\"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "i", "==", "self", ".", "_skip", "-", "2", ":", "self", ".", "_obs_buffer", "[", "0", "]", "=", "obs", "\n", "if", "i", "==", "self", ".", "_skip", "-", "1", ":", "self", ".", "_obs_buffer", "[", "1", "]", "=", "obs", "\n", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "# Note that the observation on the done=True frame", "\n", "# doesn't matter", "\n", "", "", "max_frame", "=", "self", ".", "_obs_buffer", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.MaxAndSkipEnv.reset": [[118, 120], ["atari_wrappers.MaxAndSkipEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.ClipRewardEnv.__init__": [[122, 124], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "RewardWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.ClipRewardEnv.reward": [[125, 128], ["numpy.sign"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Bin reward to {+1, 0, -1} by its sign.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.WarpFrame.__init__": [[130, 137], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Warp frames to 84x84 as done in the Nature paper and later work.\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "84", "\n", "self", ".", "height", "=", "84", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.WarpFrame.observation": [[138, 142], ["cv2.cvtColor", "cv2.resize"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FrameStack.__init__": [[144, 158], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\n\n        Returns lazy array, which is much more memory efficient.\n\n        See Also\n        --------\n        baselines.common.atari_wrappers.LazyFrames\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "shp", "[", "2", "]", "*", "k", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FrameStack.reset": [[159, 164], ["atari_wrappers.FrameStack.env.reset", "range", "atari_wrappers.FrameStack._get_ob", "atari_wrappers.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FrameStack._get_ob", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FrameStack.step": [[165, 169], ["atari_wrappers.FrameStack.env.step", "atari_wrappers.FrameStack.frames.append", "atari_wrappers.FrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FrameStack._get_ob"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.FrameStack._get_ob": [[170, 173], ["atari_wrappers.LazyFrames", "len", "list"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "LazyFrames", "(", "list", "(", "self", ".", "frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.ScaledFloatFrame.__init__": [[175, 177], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.ScaledFloatFrame.observation": [[178, 182], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "# careful! This undoes the memory optimization, use", "\n", "# with smaller replay buffers only.", "\n", "        ", "return", "np", ".", "array", "(", "observation", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames.__init__": [[184, 194], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"This object ensures that common frames between the observations are only stored once.\n        It exists purely to optimize memory usage which can be huge for DQN's 1M frames replay\n        buffers.\n\n        This object should only be converted to numpy array before being passed to the model.\n\n        You'd not believe how complex the previous solution was.\"\"\"", "\n", "self", ".", "_frames", "=", "frames", "\n", "self", ".", "_out", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames._force": [[195, 200], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_force", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_out", "is", "None", ":", "\n", "            ", "self", ".", "_out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "2", ")", "\n", "self", ".", "_frames", "=", "None", "\n", "", "return", "self", ".", "_out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames.__array__": [[201, 206], ["atari_wrappers.LazyFrames._force", "out.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames._force"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "_force", "(", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames.__len__": [[207, 209], ["len", "atari_wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames._force"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_force", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames.__getitem__": [[210, 212], ["atari_wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.LazyFrames._force"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "_force", "(", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.make_atari": [[213, 219], ["gym.make", "atari_wrappers.NoopResetEnv", "atari_wrappers.MaxAndSkipEnv"], "function", ["None"], ["", "", "def", "make_atari", "(", "env_id", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "assert", "'NoFrameskip'", "in", "env", ".", "spec", ".", "id", "\n", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.atari_wrappers.wrap_deepmind": [[220, 235], ["atari_wrappers.WarpFrame", "atari_wrappers.EpisodicLifeEnv", "FrameStack.unwrapped.get_action_meanings", "atari_wrappers.FireResetEnv", "atari_wrappers.ScaledFloatFrame", "atari_wrappers.ClipRewardEnv", "atari_wrappers.FrameStack"], "function", ["None"], ["", "def", "wrap_deepmind", "(", "env", ",", "episode_life", "=", "True", ",", "clip_rewards", "=", "True", ",", "frame_stack", "=", "False", ",", "scale", "=", "False", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style Atari.\n    \"\"\"", "\n", "if", "episode_life", ":", "\n", "        ", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "", "if", "'FIRE'", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ")", "\n", "if", "scale", ":", "\n", "        ", "env", "=", "ScaledFloatFrame", "(", "env", ")", "\n", "", "if", "clip_rewards", ":", "\n", "        ", "env", "=", "ClipRewardEnv", "(", "env", ")", "\n", "", "if", "frame_stack", ":", "\n", "        ", "env", "=", "FrameStack", "(", "env", ",", "4", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.__init__": [[6, 35], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.to_float", "tensorflow.sqrt", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.function", "tensorflow.maximum", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.to_float", "tensorflow.square", "tensorflow.assign_add", "tensorflow.assign_add", "tensorflow.assign_add"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-2", ",", "shape", "=", "(", ")", ")", ":", "\n", "\n", "        ", "self", ".", "_sum", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "name", "=", "\"runningsum\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_sumsq", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"runningsumsq\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_count", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"count\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n", "self", ".", "mean", "=", "tf", ".", "to_float", "(", "self", ".", "_sum", "/", "self", ".", "_count", ")", "\n", "self", ".", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "to_float", "(", "self", ".", "_sumsq", "/", "self", ".", "_count", ")", "-", "tf", ".", "square", "(", "self", ".", "mean", ")", ",", "1e-2", ")", ")", "\n", "\n", "newsum", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'sum'", ")", "\n", "newsumsq", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'var'", ")", "\n", "newcount", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'count'", ")", "\n", "self", ".", "incfiltparams", "=", "U", ".", "function", "(", "[", "newsum", ",", "newsumsq", ",", "newcount", "]", ",", "[", "]", ",", "\n", "updates", "=", "[", "tf", ".", "assign_add", "(", "self", ".", "_sum", ",", "newsum", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_sumsq", ",", "newsumsq", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_count", ",", "newcount", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update": [[37, 44], ["x.astype.astype.astype", "int", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi_running_mean_std.RunningMeanStd.incfiltparams", "numpy.prod", "totalvec[].reshape", "totalvec[].reshape", "x.astype.astype.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "x.astype.astype.sum", "numpy.square().sum", "len", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "astype", "(", "'float64'", ")", "\n", "n", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "shape", ")", ")", "\n", "totalvec", "=", "np", ".", "zeros", "(", "n", "*", "2", "+", "1", ",", "'float64'", ")", "\n", "addvec", "=", "np", ".", "concatenate", "(", "[", "x", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "square", "(", "x", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "array", "(", "[", "len", "(", "x", ")", "]", ",", "dtype", "=", "'float64'", ")", "]", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "addvec", ",", "totalvec", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "self", ".", "incfiltparams", "(", "totalvec", "[", "0", ":", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "n", ":", "2", "*", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "2", "*", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.test_runningmeanstd": [[45, 63], ["mpi_running_mean_std.RunningMeanStd", "baselines.initialize", "numpy.concatenate", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.std", "RunningMeanStd.mean.eval", "RunningMeanStd.std.eval"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.running_stat.RunningStat.std"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "for", "(", "x1", ",", "x2", ",", "x3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x1", ".", "shape", "[", "1", ":", "]", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "axis", "=", "0", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "0", ")", ",", "x", ".", "std", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "ms2", "=", "[", "rms", ".", "mean", ".", "eval", "(", ")", ",", "rms", ".", "std", ".", "eval", "(", ")", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "ms1", ",", "ms2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.test_dist": [[64, 102], ["numpy.random.seed", "mpi_running_mean_std.RunningMeanStd", "baselines.initialize", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "numpy.concatenate", "mpi_running_mean_std.test_dist.checkallclose"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_dist", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "p1", ",", "p2", ",", "p3", "=", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "1", ")", ")", "\n", "q1", ",", "q2", ",", "q3", "=", "(", "np", ".", "random", ".", "randn", "(", "6", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "7", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "8", ",", "1", ")", ")", "\n", "\n", "# p1,p2,p3=(np.random.randn(3), np.random.randn(4), np.random.randn(5))", "\n", "# q1,q2,q3=(np.random.randn(6), np.random.randn(7), np.random.randn(8))", "\n", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "assert", "comm", ".", "Get_size", "(", ")", "==", "2", "\n", "if", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "p1", ",", "p2", ",", "p3", "\n", "", "elif", "comm", ".", "Get_rank", "(", ")", "==", "1", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "q1", ",", "q2", ",", "q3", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "\n", "bigvec", "=", "np", ".", "concatenate", "(", "[", "p1", ",", "p2", ",", "p3", ",", "q1", ",", "q2", ",", "q3", "]", ")", "\n", "\n", "def", "checkallclose", "(", "x", ",", "y", ")", ":", "\n", "        ", "print", "(", "x", ",", "y", ")", "\n", "return", "np", ".", "allclose", "(", "x", ",", "y", ")", "\n", "\n", "", "assert", "checkallclose", "(", "\n", "bigvec", ".", "mean", "(", "axis", "=", "0", ")", ",", "\n", "rms", ".", "mean", ".", "eval", "(", ")", ",", "\n", ")", "\n", "assert", "checkallclose", "(", "\n", "bigvec", ".", "std", "(", "axis", "=", "0", ")", ",", "\n", "rms", ".", "std", ".", "eval", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_schedules.test_piecewise_schedule": [[6, 21], ["baselines.common.schedules.PiecewiseSchedule", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value"], ["def", "test_piecewise_schedule", "(", ")", ":", "\n", "    ", "ps", "=", "PiecewiseSchedule", "(", "[", "(", "-", "5", ",", "100", ")", ",", "(", "5", ",", "200", ")", ",", "(", "10", ",", "50", ")", ",", "(", "100", ",", "50", ")", ",", "(", "200", ",", "-", "50", ")", "]", ",", "outside_value", "=", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "-", "10", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "0", ")", ",", "150", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "5", ")", ",", "200", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "9", ")", ",", "80", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "50", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "80", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "150", ")", ",", "0", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "175", ")", ",", "-", "25", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "201", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "500", ")", ",", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "200", "-", "1e-10", ")", ",", "-", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_schedules.test_constant_schedule": [[23, 27], ["baselines.common.schedules.ConstantSchedule", "range", "numpy.isclose", "baselines.common.schedules.ConstantSchedule.value"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.schedules.LinearSchedule.value"], ["", "def", "test_constant_schedule", "(", ")", ":", "\n", "    ", "cs", "=", "ConstantSchedule", "(", "5", ")", "\n", "for", "i", "in", "range", "(", "-", "100", ",", "100", ")", ":", "\n", "        ", "assert", "np", ".", "isclose", "(", "cs", ".", "value", "(", "i", ")", ",", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_tf_util.test_function": [[10, 22], ["tensorflow.Graph().as_default", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.tf_util.function", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "tensorflow.Graph", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize"], ["def", "test_function", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"y\"", ")", "\n", "z", "=", "3", "*", "x", "+", "2", "*", "y", "\n", "lin", "=", "function", "(", "[", "x", ",", "y", "]", ",", "z", ",", "givens", "=", "{", "y", ":", "0", "}", ")", "\n", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "            ", "initialize", "(", ")", "\n", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_tf_util.test_multikwargs": [[24, 36], ["tensorflow.Graph().as_default", "tensorflow.placeholder", "baselines.common.tf_util.function", "tensorflow.variable_scope", "tensorflow.placeholder", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "tensorflow.Graph", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.function", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.tf_util.initialize"], ["", "", "", "def", "test_multikwargs", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"other\"", ")", ":", "\n", "            ", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "", "z", "=", "3", "*", "x", "+", "2", "*", "x2", "\n", "\n", "lin", "=", "function", "(", "[", "x", ",", "x2", "]", ",", "z", ",", "givens", "=", "{", "x2", ":", "0", "}", ")", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "            ", "initialize", "(", ")", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_segment_tree.test_tree_set": [[6, 18], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["def", "test_tree_set", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "2", ")", ",", "0.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "4.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_segment_tree.test_tree_set_overlap": [[20, 31], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.sum"], ["", "def", "test_tree_set_overlap", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "1", ",", "2", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_segment_tree.test_prefixsum_idx": [[33, 45], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.0", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.5", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.01", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "4.00", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_segment_tree.test_prefixsum_idx2": [[47, 61], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx2", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "0.5", "\n", "tree", "[", "1", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.00", ")", "==", "0", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.55", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.51", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "5.50", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.tests.test_segment_tree.test_max_interval_tree": [[63, 96], ["baselines.common.segment_tree.MinSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.segment_tree.MinSegmentTree.min"], ["", "def", "test_max_interval_tree", "(", ")", ":", "\n", "    ", "tree", "=", "MinSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "0.5", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "0.7", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "4.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "3", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "-", "1", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_frame_stack.VecFrameStack.__init__": [[9, 18], ["numpy.repeat", "numpy.repeat", "numpy.zeros", "gym.spaces.Box", "baselines.common.vec_env.VecEnvWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["def", "__init__", "(", "self", ",", "venv", ",", "nstack", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "nstack", "=", "nstack", "\n", "wos", "=", "venv", ".", "observation_space", "# wrapped ob space", "\n", "low", "=", "np", ".", "repeat", "(", "wos", ".", "low", ",", "self", ".", "nstack", ",", "axis", "=", "-", "1", ")", "\n", "high", "=", "np", ".", "repeat", "(", "wos", ".", "high", ",", "self", ".", "nstack", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "stackedobs", "=", "np", ".", "zeros", "(", "(", "venv", ".", "num_envs", ",", ")", "+", "low", ".", "shape", ",", "low", ".", "dtype", ")", "\n", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "venv", ".", "observation_space", ".", "dtype", ")", "\n", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ",", "observation_space", "=", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_frame_stack.VecFrameStack.step_wait": [[19, 27], ["vec_frame_stack.VecFrameStack.venv.step_wait", "numpy.roll", "enumerate"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.step_wait"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "stackedobs", "=", "np", ".", "roll", "(", "self", ".", "stackedobs", ",", "shift", "=", "-", "1", ",", "axis", "=", "-", "1", ")", "\n", "for", "(", "i", ",", "new", ")", "in", "enumerate", "(", "news", ")", ":", "\n", "            ", "if", "new", ":", "\n", "                ", "self", ".", "stackedobs", "[", "i", "]", "=", "0", "\n", "", "", "self", ".", "stackedobs", "[", "...", ",", "-", "obs", ".", "shape", "[", "-", "1", "]", ":", "]", "=", "obs", "\n", "return", "self", ".", "stackedobs", ",", "rews", ",", "news", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_frame_stack.VecFrameStack.reset": [[28, 36], ["vec_frame_stack.VecFrameStack.venv.reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "stackedobs", "[", "...", "]", "=", "0", "\n", "self", ".", "stackedobs", "[", "...", ",", "-", "obs", ".", "shape", "[", "-", "1", "]", ":", "]", "=", "obs", "\n", "return", "self", ".", "stackedobs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_frame_stack.VecFrameStack.close": [[37, 39], ["vec_frame_stack.VecFrameStack.venv.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.SubprocVecEnv.__init__": [[32, 51], ["len", "zip", "subproc_vec_env.SubprocVecEnv.remotes[].send", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "baselines.common.vec_env.VecEnv.__init__", "multiprocessing.Process", "p.start", "remote.close", "len", "zip", "multiprocessing.Pipe", "range", "baselines.common.vec_env.CloudpickleWrapper"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ",", "spaces", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        envs: list of gym environments to run in subprocesses\n        \"\"\"", "\n", "self", ".", "waiting", "=", "False", "\n", "self", ".", "closed", "=", "False", "\n", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "nenvs", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "work_remote", ",", "remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", ")", "\n", "for", "(", "work_remote", ",", "remote", ",", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "env_fns", ")", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "# if the main process crashes, we should not cause things to hang", "\n", "p", ".", "start", "(", ")", "\n", "", "for", "remote", "in", "self", ".", "work_remotes", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "'get_spaces'", ",", "None", ")", ")", "\n", "observation_space", ",", "action_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "observation_space", ",", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.SubprocVecEnv.step_async": [[52, 56], ["zip", "remote.send"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'step'", ",", "action", ")", ")", "\n", "", "self", ".", "waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.SubprocVecEnv.step_wait": [[57, 62], ["zip", "remote.recv", "numpy.stack", "numpy.stack", "numpy.stack"], "methods", ["None"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "self", ".", "waiting", "=", "False", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.SubprocVecEnv.reset": [[63, 67], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.SubprocVecEnv.reset_task": [[68, 72], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset_task", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset_task'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.SubprocVecEnv.close": [[73, 84], ["remote.send", "p.join", "remote.recv"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "waiting", ":", "\n", "            ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "                ", "remote", ".", "recv", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'close'", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "", "self", ".", "closed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.worker": [[6, 29], ["parent_remote.close", "env_fn_wrapper.x", "remote.recv", "env_fn_wrapper.x.step", "remote.send", "env_fn_wrapper.x.reset", "env_fn_wrapper.x.reset", "remote.send", "env_fn_wrapper.x.reset_task", "remote.send", "remote.close", "remote.send"], "function", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.subproc_vec_env.SubprocVecEnv.reset_task", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], ["def", "worker", "(", "remote", ",", "parent_remote", ",", "env_fn_wrapper", ")", ":", "\n", "    ", "parent_remote", ".", "close", "(", ")", "\n", "env", "=", "env_fn_wrapper", ".", "x", "(", ")", "\n", "while", "True", ":", "\n", "        ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "'step'", ":", "\n", "            ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "                ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "remote", ".", "send", "(", "(", "ob", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "'reset'", ":", "\n", "            ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'reset_task'", ":", "\n", "            ", "ob", "=", "env", ".", "reset_task", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'close'", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "'get_spaces'", ":", "\n", "            ", "remote", ".", "send", "(", "(", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv.__init__": [[7, 31], ["VecEnv.__init__", "isinstance", "subspaces.items", "numpy.zeros", "numpy.zeros", "fn", "len", "isinstance", "dummy_vec_env.DummyVecEnv.keys.append", "numpy.zeros", "range", "tuple"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.daochenzha_SSRL.ddpg.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "self", ".", "envs", "=", "[", "fn", "(", ")", "for", "fn", "in", "env_fns", "]", "\n", "env", "=", "self", ".", "envs", "[", "0", "]", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", "\n", "shapes", ",", "dtypes", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "keys", "=", "[", "]", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "\n", "if", "isinstance", "(", "obs_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "assert", "isinstance", "(", "obs_space", ".", "spaces", ",", "OrderedDict", ")", "\n", "subspaces", "=", "obs_space", ".", "spaces", "\n", "", "else", ":", "\n", "            ", "subspaces", "=", "{", "None", ":", "obs_space", "}", "\n", "\n", "", "for", "key", ",", "box", "in", "subspaces", ".", "items", "(", ")", ":", "\n", "            ", "shapes", "[", "key", "]", "=", "box", ".", "shape", "\n", "dtypes", "[", "key", "]", "=", "box", ".", "dtype", "\n", "self", ".", "keys", ".", "append", "(", "key", ")", "\n", "\n", "", "self", ".", "buf_obs", "=", "{", "k", ":", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", "+", "tuple", "(", "shapes", "[", "k", "]", ")", ",", "dtype", "=", "dtypes", "[", "k", "]", ")", "for", "k", "in", "self", ".", "keys", "}", "\n", "self", ".", "buf_dones", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "buf_rews", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "buf_infos", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "actions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv.step_async": [[32, 34], ["None"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "actions", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv.step_wait": [[35, 43], ["range", "dummy_vec_env.DummyVecEnv.envs[].step", "dummy_vec_env.DummyVecEnv._save_obs", "dummy_vec_env.DummyVecEnv._obs_from_buf", "numpy.copy", "numpy.copy", "dummy_vec_env.DummyVecEnv.buf_infos.copy", "dummy_vec_env.DummyVecEnv.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv._save_obs", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.ssrl_pong.model.Model.copy", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", ",", "self", ".", "buf_rews", "[", "e", "]", ",", "self", ".", "buf_dones", "[", "e", "]", ",", "self", ".", "buf_infos", "[", "e", "]", "=", "self", ".", "envs", "[", "e", "]", ".", "step", "(", "self", ".", "actions", "[", "e", "]", ")", "\n", "if", "self", ".", "buf_dones", "[", "e", "]", ":", "\n", "                ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "(", "self", ".", "_obs_from_buf", "(", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_rews", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_dones", ")", ",", "\n", "self", ".", "buf_infos", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv.reset": [[44, 49], ["range", "dummy_vec_env.DummyVecEnv._obs_from_buf", "dummy_vec_env.DummyVecEnv.envs[].reset", "dummy_vec_env.DummyVecEnv._save_obs"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv._save_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "self", ".", "_obs_from_buf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv.close": [[50, 52], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv.render": [[53, 55], ["e.render"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "return", "[", "e", ".", "render", "(", ")", "for", "e", "in", "self", ".", "envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv._save_obs": [[56, 62], ["None"], "methods", ["None"], ["", "def", "_save_obs", "(", "self", ",", "e", ",", "obs", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "keys", ":", "\n", "            ", "if", "k", "is", "None", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "\n", "", "else", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf": [[63, 68], ["None"], "methods", ["None"], ["", "", "", "def", "_obs_from_buf", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "keys", "==", "[", "None", "]", ":", "\n", "            ", "return", "self", ".", "buf_obs", "[", "None", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "buf_obs", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize.__init__": [[9, 18], ["baselines.common.vec_env.VecEnvWrapper.__init__", "numpy.zeros", "baselines.common.running_mean_std.RunningMeanStd", "baselines.common.running_mean_std.RunningMeanStd"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], ["def", "__init__", "(", "self", ",", "venv", ",", "ob", "=", "True", ",", "ret", "=", "True", ",", "clipob", "=", "10.", ",", "cliprew", "=", "10.", ",", "gamma", "=", "0.99", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "self", ".", "ob_rms", "=", "RunningMeanStd", "(", "shape", "=", "self", ".", "observation_space", ".", "shape", ")", "if", "ob", "else", "None", "\n", "self", ".", "ret_rms", "=", "RunningMeanStd", "(", "shape", "=", "(", ")", ")", "if", "ret", "else", "None", "\n", "self", ".", "clipob", "=", "clipob", "\n", "self", ".", "cliprew", "=", "cliprew", "\n", "self", ".", "ret", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize.step_wait": [[19, 35], ["vec_normalize.VecNormalize.venv.step_wait", "vec_normalize.VecNormalize._obfilt", "vec_normalize.VecNormalize.ret_rms.update", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.step_wait", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize._obfilt", "home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Apply sequence of actions to sequence of environments\n        actions -> (observations, rewards, news)\n\n        where 'news' is a boolean vector indicating whether each element is new.\n        \"\"\"", "\n", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "raw_reward", "=", "rews", "\n", "self", ".", "raw_obs", "=", "obs", "\n", "self", ".", "ret", "=", "self", ".", "ret", "*", "self", ".", "gamma", "+", "rews", "\n", "obs", "=", "self", ".", "_obfilt", "(", "obs", ")", "\n", "if", "self", ".", "ret_rms", ":", "\n", "            ", "self", ".", "ret_rms", ".", "update", "(", "self", ".", "ret", ")", "\n", "rews", "=", "np", ".", "clip", "(", "rews", "/", "np", ".", "sqrt", "(", "self", ".", "ret_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "cliprew", ",", "self", ".", "cliprew", ")", "\n", "", "return", "obs", ",", "rews", ",", "news", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize._obfilt": [[36, 43], ["vec_normalize.VecNormalize.ob_rms.update", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "_obfilt", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "ob_rms", ":", "\n", "            ", "self", ".", "ob_rms", ".", "update", "(", "obs", ")", "\n", "obs", "=", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "self", ".", "ob_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "clipob", ",", "self", ".", "clipob", ")", "\n", "return", "obs", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize.process_reward": [[44, 48], ["numpy.clip", "numpy.sqrt"], "methods", ["None"], ["", "", "def", "process_reward", "(", "self", ",", "rews", ")", ":", "\n", "        ", "if", "self", ".", "ret_rms", ":", "\n", "            ", "rews", "=", "np", ".", "clip", "(", "rews", "/", "np", ".", "sqrt", "(", "self", ".", "ret_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "cliprew", ",", "self", ".", "cliprew", ")", "\n", "", "return", "rews", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize.process_obs": [[49, 53], ["numpy.clip", "numpy.sqrt"], "methods", ["None"], ["", "def", "process_obs", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "ob_rms", ":", "\n", "            ", "obs", "=", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "self", ".", "ob_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "clipob", ",", "self", ".", "clipob", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize.reset": [[54, 61], ["vec_normalize.VecNormalize.venv.reset", "vec_normalize.VecNormalize._obfilt"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.vec_normalize.VecNormalize._obfilt"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "raw_obs", "=", "obs", "\n", "return", "self", ".", "_obfilt", "(", "obs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.AlreadySteppingError.__init__": [[9, 12], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.NotSteppingError.__init__": [[18, 21], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.__init__": [[26, 30], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.reset": [[31, 42], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step_async": [[43, 54], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step_wait": [[55, 68], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.close": [[69, 75], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.step": [[76, 79], ["__init__.VecEnv.step_async", "__init__.VecEnv.step_wait"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.step_async", "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.step_wait"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.render": [[80, 82], ["baselines.logger.warn"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.baselines.logger.warn"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnv.unwrapped": [[83, 89], ["isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.__init__": [[91, 97], ["VecEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.step_async": [[98, 100], ["__init__.VecEnvWrapper.venv.step_async"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.step_async"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.reset": [[101, 104], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.step_wait": [[105, 108], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close": [[109, 111], ["__init__.VecEnvWrapper.venv.close"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.close"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render": [[112, 114], ["__init__.VecEnvWrapper.venv.render"], "methods", ["home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.VecEnvWrapper.render"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__init__": [[119, 121], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__getstate__": [[121, 124], ["cloudpickle.dumps"], "methods", ["None"], []], "home.repos.pwc.inspect_result.daochenzha_SSRL.vec_env.__init__.CloudpickleWrapper.__setstate__": [[124, 127], ["pickle.loads"], "methods", ["None"], []]}