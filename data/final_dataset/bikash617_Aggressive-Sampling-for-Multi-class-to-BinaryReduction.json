{"home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.score": [[32, 38], ["sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "print", "print"], "function", ["None"], ["def", "score", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "acc", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "maf", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "print", "(", "acc", ")", "\n", "print", "(", "maf", ")", "\n", "return", "acc", ",", "maf", "\n", "\n"]], "home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.CreateFolder": [[40, 50], ["os.path.expanduser", "str", "os.path.exists", "os.makedirs", "int", "time.time", "str", "str", "str"], "function", ["None"], ["", "def", "CreateFolder", "(", "Dataset", ",", "foldername", ",", "Num_of_Samples", ",", "Sampling", ",", "num_candidates", ")", ":", "\n", "    ", "timestamp", "=", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "[", "-", "4", ":", "]", "\n", "home", "=", "expanduser", "(", "\"~\"", ")", "\n", "folderpath", "=", "home", "+", "\"/Code/multi2binary_local/Results/\"", "+", "Dataset", "+", "\"/Modified/\"", "+", "foldername", "+", "\"/\"", "+", "str", "(", "\n", "Num_of_Samples", ")", "+", "\"_\"", "+", "str", "(", "Sampling", ")", "+", "\"_\"", "+", "str", "(", "num_candidates", ")", "+", "\"_\"", "+", "timestamp", "\n", "# folderpath = home + \"/Code/multi2binary_local/Results/DMOZ/\" + \"Test\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folderpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folderpath", ")", "\n", "\n", "", "return", "folderpath", "\n", "\n"]], "home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.Preprocess_m2b": [[52, 93], ["sklearn.feature_extraction.text.TfidfTransformer", "sklearn.feature_extraction.text.TfidfTransformer.fit", "sklearn.feature_extraction.text.TfidfTransformer.transform", "sklearn.feature_extraction.text.TfidfTransformer.transform", "numpy.array", "collections.defaultdict", "X.sum", "collections.defaultdict", "numpy.empty", "numpy.empty", "numpy.empty", "coo_matrix", "csr_matrix", "list", "csr_matrix", "class_map[].sum", "csr_matrix", "set", "X[].sum", "len", "X_tfidf_class.sum", "len", "len", "len", "len"], "function", ["None"], ["", "def", "Preprocess_m2b", "(", "X", ",", "y", ",", "X_test", ",", "y_test", ")", ":", "\n", "    ", "tfidf", "=", "TfidfTransformer", "(", ")", "\n", "tfidf", ".", "fit", "(", "X", ")", "\n", "X_tfidf", "=", "tfidf", ".", "transform", "(", "X", ",", "copy", "=", "False", ")", "\n", "X_test_tfidf", "=", "tfidf", ".", "transform", "(", "X_test", ",", "copy", "=", "False", ")", "\n", "class_list", "=", "np", ".", "array", "(", "list", "(", "set", "(", "y", ")", ")", ")", "\n", "classes_length", "=", "{", "}", "\n", "class_map", "=", "defaultdict", "(", "csr_matrix", ")", "\n", "# calculate mean vector for each class and global one for whole collection", "\n", "idfs", "=", "tfidf", ".", "idf_", "\n", "collection_vec", "=", "X", ".", "sum", "(", "axis", "=", "0", ")", "\n", "class_centroids", "=", "defaultdict", "(", "csr_matrix", ")", "\n", "#print(\"Total memory usage before loop : %d\" % resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)", "\n", "ind", "=", "0", "\n", "total_nz", "=", "0", "\n", "indptr", "=", "0", "\n", "for", "i", "in", "class_list", ":", "\n", "        ", "X_tfidf_class", "=", "X_tfidf", "[", "y", "==", "i", "]", "\n", "class_map", "[", "i", "]", "=", "csr_matrix", "(", "X", "[", "y", "==", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "classes_length", "[", "i", "]", "=", "class_map", "[", "i", "]", ".", "sum", "(", ")", "### k= 2000, t = 6.71s, mem= 144MB", "\n", "temp", "=", "csr_matrix", "(", "(", "X_tfidf_class", ".", "sum", "(", "axis", "=", "0", ")", ")", "/", "(", "X_tfidf_class", ".", "shape", "[", "0", "]", ")", ")", "### k= 2000, t = 11.45s, mem = 147MB", "\n", "total_nz", "+=", "temp", ".", "nnz", "\n", "class_centroids", "[", "i", "]", "=", "temp", "### k= 2000, t = 11.45s, mem = 173MB", "\n", "\n", "", "rows", "=", "np", ".", "empty", "(", "total_nz", ")", "\n", "cols", "=", "np", ".", "empty", "(", "total_nz", ")", "\n", "dats", "=", "np", ".", "empty", "(", "total_nz", ")", "\n", "\n", "for", "i", "in", "class_list", ":", "\n", "        ", "temp", "=", "class_centroids", "[", "i", "]", "\n", "c", "=", "temp", ".", "indices", "\n", "d", "=", "temp", ".", "data", "\n", "rows", "[", "indptr", ":", "indptr", "+", "len", "(", "c", ")", "]", "=", "ind", "\n", "cols", "[", "indptr", ":", "indptr", "+", "len", "(", "c", ")", "]", "=", "c", "\n", "dats", "[", "indptr", ":", "indptr", "+", "len", "(", "c", ")", "]", "=", "d", "\n", "indptr", "=", "indptr", "+", "len", "(", "c", ")", "\n", "ind", "+=", "1", "\n", "\n", "", "temp_coo", "=", "coo_matrix", "(", "(", "dats", ",", "(", "rows", ",", "cols", ")", ")", ",", "shape", "=", "(", "len", "(", "class_list", ")", ",", "X", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "\"float16\"", ")", "\n", "class_centroids_arr", "=", "csr_matrix", "(", "temp_coo", ")", "\n", "return", "X_tfidf", ",", "X_test_tfidf", ",", "tfidf", ",", "idfs", ",", "collection_vec", ",", "class_list", ",", "class_map", ",", "classes_length", ",", "class_centroids", ",", "class_centroids_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.extractFeatures": [[95, 123], ["vecy_i.multiply().nonzero", "numpy.log().sum", "numpy.log().sum", "idfs[].sum", "numpy.log().sum", "numpy.log().sum", "numpy.log().sum", "len", "numpy.log().sum", "vec_y.toarray", "len", "vec_y.getnnz", "vecy_i.multiply", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.multiply"], "function", ["None"], ["", "def", "extractFeatures", "(", "vecy_i", ",", "vec_y", ",", "centroid_distance", ",", "S_vec", ",", "len_collection", ",", "idfs", ",", "length_y", ",", "D", ",", "avg_length", ")", ":", "\n", "# vecy_i : current vector i -> feature vector", "\n", "# vec_y : vector of class y -> mean vector of the respective class", "\n", "# S_vec : vector of collection -> scalar sum of everything in the train set", "\n", "# idfs : inverse document frequencies", "\n", "# avg_len : average length of classes", "\n", "# X_tfidf_class: tfidf values of all vectors in the class in training data", "\n", "# X_tfidf_vec: tfidf vector of current example", "\n", "# start = time.time()", "\n", "    ", "x", "=", "[", "0", "]", "*", "D", "\n", "inter", "=", "vecy_i", ".", "multiply", "(", "vec_y", ")", ".", "nonzero", "(", ")", "\n", "vec_y_part", "=", "vec_y", ".", "toarray", "(", ")", "[", "0", ",", "inter", "[", "1", "]", "]", "\n", "\n", "x", "[", "0", "]", "=", "np", ".", "log", "(", "1.0", "+", "vec_y_part", ")", ".", "sum", "(", ")", "# f0", "\n", "x", "[", "1", "]", "=", "np", ".", "log", "(", "1.0", "+", "len_collection", "/", "S_vec", "[", "0", ",", "inter", "[", "1", "]", "]", ")", ".", "sum", "(", ")", "# f1", "\n", "x", "[", "2", "]", "=", "idfs", "[", "inter", "[", "1", "]", "]", ".", "sum", "(", ")", "# f2", "\n", "x", "[", "3", "]", "=", "np", ".", "log", "(", "1.0", "+", "vec_y_part", "/", "length_y", ")", ".", "sum", "(", ")", "# f4", "\n", "x", "[", "4", "]", "=", "np", ".", "log", "(", "1.0", "+", "(", "np", ".", "multiply", "(", "idfs", "[", "inter", "[", "1", "]", "]", ",", "vec_y_part", ")", ")", "/", "length_y", ")", ".", "sum", "(", ")", "# f5", "\n", "x", "[", "5", "]", "=", "np", ".", "log", "(", "1.0", "+", "(", "vec_y_part", "/", "length_y", ")", "*", "len_collection", "/", "S_vec", "[", "0", ",", "inter", "[", "1", "]", "]", ")", ".", "sum", "(", ")", "# f6", "\n", "x", "[", "6", "]", "=", "len", "(", "inter", "[", "1", "]", ")", "# f7", "\n", "x", "[", "7", "]", "=", "centroid_distance", "# f8", "\n", "x", "[", "8", "]", "=", "len", "(", "inter", "[", "1", "]", ")", "/", "vec_y", ".", "getnnz", "(", ")", "# f13 improves a bit", "\n", "## BM 25", "\n", "x", "[", "9", "]", "=", "np", ".", "log", "(", "1.0", "+", "idfs", "[", "inter", "[", "1", "]", "]", "*", "(", "2.0", "*", "vec_y_part", "/", "(", "vec_y_part", "+", "(", "0.25", "+", "0.75", "*", "length_y", "/", "avg_length", ")", ")", ")", ")", ".", "sum", "(", ")", "# bm25", "\n", "\n", "#print(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.Reduction": [[128, 209], ["collection_vec.sum", "collections.Counter", "numpy.random.choice", "collections.Counter", "collections.Counter.keys", "sklearn.preprocessing.MinMaxScaler().fit", "preprocessing.MinMaxScaler().fit.transform", "collections.Counter.keys", "collections.Counter.keys", "float", "range", "len", "len", "len", "numpy.random.choice", "lil_matrix", "lil_matrix", "sklearn.metrics.pairwise.cosine_distances", "run_script_m2b_github_probs.extractFeatures", "int", "numpy.random.choice", "sklearn.preprocessing.MinMaxScaler", "numpy.array", "lil_matrix.getrowview", "numpy.ceil", "run_script_m2b_github_probs.extractFeatures", "X_trans.append", "Y_tr.append", "range", "lil_matrix.getrowview", "numpy.subtract", "np.subtract.tolist", "len", "numpy.subtract", "sklearn.metrics.pairwise.cosine_distances", "lil_matrix.getrowview"], "function", ["home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.extractFeatures", "home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.extractFeatures"], ["def", "Reduction", "(", "X", ",", "y", ",", "tfidf", ",", "class_map", ",", "sampling", ",", "num_sample", ",", "classes_length", ",", "\n", "collection_vec", ",", "D", ",", "class_centroids", ")", ":", "\n", "    ", "len_collection", "=", "collection_vec", ".", "sum", "(", ")", "\n", "X_trans", "=", "[", "]", "\n", "Y_tr", "=", "[", "]", "\n", "idfs", "=", "tfidf", ".", "idf_", "\n", "# centroid_distances = np.load(home + \"/Code/multi2binary_local/Centroids/\" + Dataset + \"/\" + foldername + \"/centroid_distances.npy\", mmap_mode='r')", "\n", "\n", "counter", "=", "Counter", "(", "y", ")", "\n", "class_prob", "=", "[", "counter", "[", "i", "]", "/", "len", "(", "y", ")", "for", "i", "in", "class_list", "]", "\n", "selection", "=", "np", ".", "random", ".", "choice", "(", "class_list", ",", "len", "(", "class_list", ")", "*", "num_sample", ",", "p", "=", "class_prob", ")", "\n", "new_dist", "=", "Counter", "(", "selection", ")", "\n", "for", "x", "in", "(", "counter", ".", "keys", "(", ")", "-", "new_dist", ".", "keys", "(", ")", ")", ":", "\n", "        ", "new_dist", "[", "x", "]", "=", "1", "\n", "#print(len(new_dist.keys()))", "\n", "#print(new_dist)", "\n", "", "count_red", "=", "0", "\n", "avg_length", "=", "len_collection", "/", "float", "(", "len", "(", "classes_length", ")", ")", "\n", "for", "i", "in", "new_dist", ".", "keys", "(", ")", ":", "\n", "        ", "X_class", "=", "X", "[", "y", "==", "i", "]", "\n", "len_class", "=", "X_class", ".", "shape", "[", "0", "]", "\n", "# centroid_distances_class = centroid_distances[:, y == i]", "\n", "new_num_sample", "=", "new_dist", "[", "i", "]", "\n", "if", "len_class", ">", "num_sample", ":", "\n", "            ", "sample", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "range", "(", "len_class", ")", ")", ",", "new_num_sample", ")", "\n", "X_class_sample", "=", "lil_matrix", "(", "X_class", "[", "sample", "]", ")", "\n", "# centroid_distances_sample = centroid_distances_class[:, sample]", "\n", "", "else", ":", "\n", "            ", "X_class_sample", "=", "lil_matrix", "(", "X_class", "[", ":", "]", ")", "\n", "# centroid_distances_sample = centroid_distances_class[:, :]", "\n", "", "'''\n        sample = [0]\n        X_class_sample = lil_matrix(X_class[sample])\n        centroid_distances_sample = centroid_distances_class[:, sample]\n        '''", "\n", "centroid_distances_outer", "=", "cosine_distances", "(", "class_centroids", "[", "i", "]", ",", "X_class_sample", ")", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "X_class_sample", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x_yi", "=", "extractFeatures", "(", "X_class_sample", ".", "getrowview", "(", "j", ")", ",", "class_map", "[", "i", "]", ",", "centroid_distances_outer", "[", "j", "]", ",", "\n", "collection_vec", ",", "len_collection", ",", "idfs", ",", "classes_length", "[", "i", "]", ",", "D", ",", "avg_length", ")", "\n", "count_red", "+=", "1", "\n", "choice", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "class_list", ")", "*", "sampling", ")", ")", "\n", "# print(\"Sampled choice is %d\"% choice)", "\n", "class_list_sampled", "=", "np", ".", "random", ".", "choice", "(", "class_list", ",", "choice", ")", "\n", "for", "klasse", "in", "class_list_sampled", ":", "# can be replaced by iteritems()", "\n", "# klasse = class_list[ind]", "\n", "                ", "'''\n                if random.random() > sampling:\n                    continue\n                '''", "\n", "vec_y", "=", "class_map", "[", "klasse", "]", "\n", "x_k", "=", "extractFeatures", "(", "X_class_sample", ".", "getrowview", "(", "j", ")", ",", "vec_y", ",", "\n", "cosine_distances", "(", "class_centroids", "[", "klasse", "]", ",", "X_class_sample", ".", "getrowview", "(", "j", ")", ")", "[", "0", "]", "[", "0", "]", ",", "\n", "collection_vec", ",", "len_collection", ",", "idfs", ",", "classes_length", "[", "klasse", "]", ",", "D", ",", "avg_length", ")", "\n", "count_red", "+=", "1", "\n", "if", "i", ">", "klasse", ":", "\n", "                    ", "x_trans", "=", "np", ".", "subtract", "(", "x_yi", ",", "x_k", ")", "\n", "y_tr", "=", "1", "\n", "", "elif", "i", "<", "klasse", ":", "\n", "                    ", "x_trans", "=", "np", ".", "subtract", "(", "x_k", ",", "x_yi", ")", "\n", "y_tr", "=", "-", "1", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "X_trans", ".", "append", "(", "x_trans", ".", "tolist", "(", ")", ")", "\n", "Y_tr", ".", "append", "(", "y_tr", ")", "\n", "# ind += 1", "\n", "\n", "#np.save(folderpath + \"/train\", np.array(X_trans))", "\n", "#np.save(folderpath + \"/train_label\", np.array(Y_tr))", "\n", "", "", "", "scaler", "=", "preprocessing", ".", "MinMaxScaler", "(", ")", ".", "fit", "(", "X_trans", ")", "\n", "X_trans_norm", "=", "scaler", ".", "transform", "(", "X_trans", ")", "\n", "'''\n    with open(\"./train_binary\", \"w\") as f:\n        for x_i, y_i in zip(X_trans_norm, Y_tr):\n            count = 1\n            f.write(str(y_i))\n            for i in x_i:\n                f.write(\" \".join([\" \" + \"{}:{}\".format(count, i)]))\n                count += 1\n            f.write(\"\\n\")\n    '''", "\n", "return", "scaler", ",", "X_trans_norm", ",", "Y_tr", "\n", "\n"]], "home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.Learn": [[215, 222], ["sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC.fit"], "function", ["None"], ["def", "Learn", "(", "binary_features", ",", "binary_labels", ")", ":", "\n", "#binary_features, binary_labels = load_svmlight_file(\"./train_binary\")", "\n", "    ", "clf", "=", "LinearSVC", "(", "C", "=", "0.01", ")", "\n", "clf", ".", "fit", "(", "binary_features", ",", "binary_labels", ")", "\n", "weights", "=", "clf", ".", "coef_", "[", "0", "]", "\n", "#np.save(\"./weights\", weights)", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.Prediction": [[224, 282], ["sklearn.neighbors.NearestNeighbors().fit", "collection_vec.sum", "X_test.tolil", "numpy.arange", "math.ceil", "range", "float", "NearestNeighbors().fit.kneighbors", "range", "sklearn.neighbors.NearestNeighbors", "len", "len", "rowRangeList.append", "rowRangeList.append", "len", "numpy.zeros", "range", "scaler.transform", "y_pred.append", "test.append", "len", "run_script_m2b_github_probs.extractFeatures", "candidate_set[].tolist", "numpy.argmax", "len", "X_test.tolil.getrow", "numpy.array", "numpy.dot", "numpy.argmax", "range", "numpy.array", "len", "numpy.dot", "range", "len"], "function", ["home.repos.pwc.inspect_result.bikash617_Aggressive-Sampling-for-Multi-class-to-BinaryReduction.None.run_script_m2b_github_probs.extractFeatures"], ["", "def", "Prediction", "(", "X_test_tfidf", ",", "class_list", ",", "X_test", ",", "class_map", ",", "collection_vec", ",", "idfs", ",", "classes_length", ",", "D", ",", "scaler", ")", ":", "\n", "    ", "nbrs", "=", "NearestNeighbors", "(", "metric", "=", "'cosine'", ",", "algorithm", "=", "'brute'", ",", "n_neighbors", "=", "num_candidates", ")", ".", "fit", "(", "class_centroids_arr", ")", "\n", "# print(\"before\")", "\n", "# print(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)", "\n", "# NN = nbrs.kneighbors(X_test_tfidf, return_distance=True)", "\n", "# print(\"after\")", "\n", "# print(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)", "\n", "len_collection", "=", "collection_vec", ".", "sum", "(", ")", "\n", "avg_length", "=", "len_collection", "/", "float", "(", "len", "(", "classes_length", ")", ")", "\n", "y_pred", "=", "[", "]", "\n", "X_test_lil", "=", "X_test", ".", "tolil", "(", ")", "\n", "test", "=", "[", "]", "\n", "rowList", "=", "np", ".", "arange", "(", "X_test_tfidf", ".", "shape", "[", "0", "]", ")", "\n", "rowRangeList", "=", "[", "]", "\n", "block_size", "=", "1000", "\n", "partition", "=", "math", ".", "ceil", "(", "len", "(", "rowList", ")", "/", "block_size", ")", "\n", "#print(partition)", "\n", "for", "i", "in", "range", "(", "partition", ")", ":", "\n", "        ", "if", "(", "i", "<", "partition", "-", "1", ")", ":", "\n", "            ", "rowRangeList", ".", "append", "(", "rowList", "[", "i", "*", "block_size", ":", "(", "i", "+", "1", ")", "*", "block_size", "]", ")", "\n", "", "else", ":", "\n", "            ", "rowRangeList", ".", "append", "(", "rowList", "[", "i", "*", "block_size", ":", "]", ")", "\n", "\n", "", "", "y_pred", "=", "[", "]", "\n", "test", "=", "[", "]", "\n", "for", "block", "in", "rowRangeList", ":", "\n", "# candidate_set = [class_list[x] for x in NN[1][i]]", "\n", "# print(candidate_set)", "\n", "        ", "NN_block", "=", "nbrs", ".", "kneighbors", "(", "X_test_tfidf", "[", "block", "]", ",", "return_distance", "=", "True", ")", "\n", "\n", "for", "indx", "in", "range", "(", "len", "(", "block", ")", ")", ":", "\n", "            ", "i", "=", "block", "[", "indx", "]", "\n", "candidate_set", "=", "[", "class_list", "[", "x", "]", "for", "x", "in", "NN_block", "[", "1", "]", "[", "indx", "]", "]", "\n", "# print(candidate_set)", "\n", "ind", "=", "0", "\n", "X_test_candidate", "=", "np", ".", "zeros", "(", "(", "len", "(", "candidate_set", ")", ",", "D", ")", ")", "\n", "\n", "for", "cl", "in", "range", "(", "len", "(", "candidate_set", ")", ")", ":", "\n", "                ", "klasse", "=", "candidate_set", "[", "cl", "]", "\n", "vec_y", "=", "class_map", "[", "klasse", "]", "\n", "# print(NN[0][i][cl])", "\n", "# print(NN_current[0][0][cl])", "\n", "X_test_candidate", "[", "ind", "]", "=", "extractFeatures", "(", "X_test_lil", ".", "getrow", "(", "i", ")", ",", "vec_y", ",", "NN_block", "[", "0", "]", "[", "indx", "]", "[", "cl", "]", ",", "\n", "collection_vec", ",", "len_collection", ",", "idfs", ",", "classes_length", "[", "klasse", "]", ",", "D", ",", "\n", "avg_length", ")", "\n", "# X_test_candidate[ind] = extractFeatures(X_test_lil.getrow(i), vec_y, NN_current[0][0][cl], collection_vec,", "\n", "#                                        len_collection, idfs, classes_length[klasse], D, avg_length)", "\n", "ind", "+=", "1", "\n", "", "X_test_k", "=", "scaler", ".", "transform", "(", "X_test_candidate", ")", "\n", "y_pred", ".", "append", "(", "\n", "candidate_set", "[", "\n", "np", ".", "argmax", "(", "np", ".", "array", "(", "[", "np", ".", "dot", "(", "weights", ",", "X_test_k", "[", "p", "]", ")", "for", "p", "in", "range", "(", "len", "(", "X_test_k", ")", ")", "]", ")", ")", "]", ".", "tolist", "(", ")", ")", "\n", "test", ".", "append", "(", "np", ".", "argmax", "(", "np", ".", "array", "(", "[", "np", ".", "dot", "(", "weights", ",", "X_test_k", "[", "p", "]", ")", "for", "p", "in", "range", "(", "len", "(", "X_test_k", ")", ")", "]", ")", ")", ")", "\n", "\n", "# print(y_pred)", "\n", "#print(np.count_nonzero(test), X_test_tfidf.shape[0])", "\n", "\n", "", "", "return", "y_pred", "\n", "\n"]]}