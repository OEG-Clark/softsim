{"home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.ARTLayer.__init__": [[38, 42], ["tensorflow.keras.initializers.GlorotUniform", "tensorflow.keras.initializers.GlorotUniform", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "W_regularizer", "=", "0.05", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "init", "=", "initializers", ".", "GlorotUniform", "(", ")", "\n", "self", ".", "W_regularizer", "=", "regularizers", ".", "l2", "(", "W_regularizer", ")", "\n", "super", "(", "ARTLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.ARTLayer.build": [[43, 52], ["ts_model.ARTLayer.add_weight", "super().build", "len"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.ARTLayer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "3", "\n", "# Create a trainable weight variable for this layer.", "\n", "self", ".", "W", "=", "self", ".", "add_weight", "(", "name", "=", "'kernel'", ",", "\n", "shape", "=", "(", "16000", ",", "1", ")", ",", "\n", "initializer", "=", "self", ".", "init", ",", "regularizer", "=", "self", ".", "W_regularizer", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "ARTLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this at the end", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.ARTLayer.call": [[53, 57], ["tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "dropout", "=", "0.4", ",", "training", "=", "True", ")", ":", "\n", "        ", "prog", "=", "Dropout", "(", "dropout", ")", "(", "self", ".", "W", ",", "training", "=", "training", ")", "# remove K.tanh", "\n", "out", "=", "x", "+", "prog", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.ARTLayer.compute_output_shape": [[58, 60], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.AttRNN_Model": [[22, 34], ["SpeechModels.AttRNNSpeechModel", "SpeechModels.AttRNNSpeechModel.compile", "SpeechModels.AttRNNSpeechModel.load_weights"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechModels.AttRNNSpeechModel"], ["def", "AttRNN_Model", "(", ")", ":", "\n", "\n", "    ", "nCategs", "=", "36", "\n", "sr", "=", "16000", "\n", "#iLen=16000", "\n", "\n", "model", "=", "AttRNNSpeechModel", "(", "nCategs", ",", "samplingrate", "=", "sr", ",", "inputLength", "=", "None", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "loss", "=", "[", "'sparse_categorical_crossentropy'", "]", ",", "metrics", "=", "[", "'sparse_categorical_accuracy'", "]", ")", "\n", "\n", "model", ".", "load_weights", "(", "'weight/pr_attRNN.h5'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.WARTmodel": [[63, 73], ["tensorflow.keras.layers.Input", "pr_model", "utils.multi_mapping", "tensorflow.keras.models.Model", "ts_model.ARTLayer", "tensorflow.keras.layers.Reshape"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.multi_mapping"], ["", "", "def", "WARTmodel", "(", "input_shape", ",", "pr_model", ",", "source_classes", ",", "mapping_num", ",", "target_classes", ",", "dropout", "=", "0.5", ")", ":", "\n", "    ", "x", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "out", "=", "ARTLayer", "(", ")", "(", "x", ",", "dropout", ")", "\n", "out", "=", "Reshape", "(", "[", "16000", ",", "]", ")", "(", "out", ")", "\n", "probs", "=", "pr_model", "(", "out", ")", "\n", "\n", "map_probs", "=", "multi_mapping", "(", "probs", ",", "source_classes", ",", "mapping_num", ",", "target_classes", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "x", ",", "outputs", "=", "map_probs", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.make_model": [[75, 95], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.ReLU", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.ReLU", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.ReLU", "tensorflow.keras.layers.GlobalAveragePooling1D", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "def", "make_model", "(", "input_shape", ",", "num_classes", ")", ":", "\n", "    ", "input_layer", "=", "keras", ".", "layers", ".", "Input", "(", "input_shape", ")", "\n", "\n", "conv1", "=", "keras", ".", "layers", ".", "Conv1D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", "(", "input_layer", ")", "\n", "conv1", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "conv1", ")", "\n", "conv1", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "conv1", ")", "\n", "\n", "conv2", "=", "keras", ".", "layers", ".", "Conv1D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", "(", "conv1", ")", "\n", "conv2", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "conv2", ")", "\n", "conv2", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "conv2", ")", "\n", "\n", "conv3", "=", "keras", ".", "layers", ".", "Conv1D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", "(", "conv2", ")", "\n", "conv3", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "conv3", ")", "\n", "conv3", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "conv3", ")", "\n", "\n", "gap", "=", "keras", ".", "layers", ".", "GlobalAveragePooling1D", "(", ")", "(", "conv3", ")", "\n", "\n", "output_layer", "=", "keras", ".", "layers", ".", "Dense", "(", "num_classes", ",", "activation", "=", "\"softmax\"", ")", "(", "gap", ")", "\n", "\n", "return", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "input_layer", ",", "outputs", "=", "output_layer", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.audioUtils.plot_confusion_matrix": [[12, 45], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.tight_layout", "print", "print", "len", "cm.max", "range", "range", "matplotlib.text", "cm.astype", "format", "cm.sum"], "function", ["None"], ["def", "plot_confusion_matrix", "(", "cm", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "15", ")", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ",", "fontsize", "=", "15", ")", "\n", "\n", "fmt", "=", "'.3f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "size", "=", "11", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True label'", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "savefig", "(", "'picConfMatrix.png'", ",", "dpi", "=", "400", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.audioUtils.WAV2Numpy": [[47, 66], ["os.walk", "tqdm.tqdm", "librosa.load", "numpy.save", "os.remove", "os.path.join", "f.endswith"], "function", ["None"], ["", "def", "WAV2Numpy", "(", "folder", ",", "sr", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Recursively converts WAV to numpy arrays.\n    Deletes the WAV files in the process\n\n    folder - folder to convert.\n    \"\"\"", "\n", "allFiles", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "folder", ")", ":", "\n", "        ", "allFiles", "+=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "for", "f", "in", "files", "\n", "if", "f", ".", "endswith", "(", "'.wav'", ")", "]", "\n", "\n", "", "for", "file", "in", "tqdm", "(", "allFiles", ")", ":", "\n", "        ", "y", ",", "sr", "=", "librosa", ".", "load", "(", "file", ",", "sr", "=", "None", ")", "\n", "\n", "# if we want to write the file later", "\n", "# librosa.output.write_wav('file.wav', y, sr, norm=False)", "\n", "np", ".", "save", "(", "file", "+", "'.npy'", ",", "y", ")", "\n", "os", ".", "remove", "(", "file", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.similarity_mapping.source_target_mapping": [[86, 163], ["numpy.unique", "ts_model.AttRNN_Model", "K.function.summary", "tensorflow.function", "zip", "range", "range", "range", "range", "pair_result.items", "print", "audio.reshape.reshape", "K.function.", "target_centers[].append", "len", "numpy.concatenate().mean", "len", "sourceGen.__getitem__", "range", "len", "numpy.concatenate().mean", "len", "len", "range", "sorted_sims.items", "sorted_sims.items", "print", "pairing.append", "enumerate", "target_cls2label.items", "range", "range", "K.function.", "batch_center[].reshape", "source_centers[].append", "range", "len", "np.unique.tolist", "len", "numpy.concatenate", "numpy.concatenate", "len", "numpy.dot", "sorted", "pair_result[].append", "pair_result[].append", "numpy.linalg.norm", "numpy.linalg.norm", "sims.items"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.AttRNN_Model", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__getitem__"], ["def", "source_target_mapping", "(", "sourceGen", ",", "target_audios", ",", "target_labels", ")", ":", "\n", "\n", "    ", "target_classes", "=", "np", ".", "unique", "(", "target_labels", ",", "axis", "=", "0", ")", "\n", "target_cls2label", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "target_classes", ".", "tolist", "(", ")", ")", "}", "\n", "target_label2cls", "=", "{", "i", ":", "label", "for", "label", ",", "i", "in", "target_cls2label", ".", "items", "(", ")", "}", "\n", "target_labels", "=", "[", "target_cls2label", "[", "cls", "]", "for", "cls", "in", "target_labels", "]", "\n", "\n", "\n", "# We wants the last hidden output for clustering", "\n", "Gsm_model", "=", "AttRNN_Model", "(", ")", "\n", "Gsm_model", ".", "summary", "(", ")", "\n", "Gsm_model", "=", "K", ".", "function", "(", "[", "Gsm_model", ".", "input", "]", ",", "[", "Gsm_model", ".", "layers", "[", "-", "2", "]", ".", "output", "]", ")", "\n", "\n", "source_centers", "=", "[", "[", "]", "for", "i", "in", "range", "(", "36", ")", "]", "\n", "target_centers", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "target_classes", ")", ")", "]", "\n", "\n", "for", "audio", ",", "label", "in", "zip", "(", "target_audios", ",", "target_labels", ")", ":", "\n", "        ", "audio", "=", "audio", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "out", "=", "Gsm_model", "(", "[", "audio", "]", ")", "\n", "center", "=", "out", "[", "0", "]", "\n", "target_centers", "[", "label", "]", ".", "append", "(", "center", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "target_centers", ")", ")", ":", "\n", "        ", "target_centers", "[", "i", "]", "=", "np", ".", "concatenate", "(", "target_centers", "[", "i", "]", ",", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "sourceGen", ")", ")", ":", "\n", "        ", "audios", ",", "labels", "=", "sourceGen", ".", "__getitem__", "(", "i", ")", "\n", "batch_size", ",", "_", "=", "audios", ".", "shape", "\n", "batch_center", "=", "Gsm_model", "(", "[", "audios", "]", ")", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "center", "=", "batch_center", "[", "j", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "label", "=", "labels", "[", "j", "]", "\n", "source_centers", "[", "label", "]", ".", "append", "(", "center", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "source_centers", ")", ")", ":", "\n", "        ", "source_centers", "[", "i", "]", "=", "np", ".", "concatenate", "(", "source_centers", "[", "i", "]", ",", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "\n", "# Now we have a representative vector for each target and source class.", "\n", "# Next we need to pair then. ", "\n", "\n", "\n", "", "counter", "=", "[", "0", "]", "*", "len", "(", "target_centers", ")", "\n", "pair_result", "=", "{", "i", ":", "[", "]", "for", "i", "in", "range", "(", "len", "(", "target_centers", ")", ")", "}", "\n", "\n", "\n", "for", "s", "in", "range", "(", "len", "(", "source_centers", ")", ")", ":", "\n", "        ", "sims", "=", "{", "}", "\n", "for", "t", "in", "range", "(", "len", "(", "target_centers", ")", ")", ":", "\n", "            ", "sim", "=", "np", ".", "dot", "(", "source_centers", "[", "s", "]", ",", "target_centers", "[", "t", "]", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "source_centers", "[", "s", "]", ")", "*", "np", ".", "linalg", ".", "norm", "(", "target_centers", "[", "t", "]", ")", ")", "\n", "sims", "[", "t", "]", "=", "sim", "\n", "", "sorted_sims", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "sims", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "}", "\n", "\n", "is_paired", "=", "False", "\n", "for", "k", ",", "v", "in", "sorted_sims", ".", "items", "(", ")", ":", "\n", "            ", "if", "counter", "[", "k", "]", "<", "2", ":", "\n", "                ", "pair_result", "[", "k", "]", ".", "append", "(", "s", ")", "\n", "counter", "[", "k", "]", "+=", "1", "\n", "is_paired", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "is_paired", ":", "\n", "            ", "continue", "\n", "# Every body have 2. Now let them be three", "\n", "", "for", "k", ",", "v", "in", "sorted_sims", ".", "items", "(", ")", ":", "\n", "            ", "if", "counter", "[", "k", "]", "<", "3", ":", "\n", "                ", "pair_result", "[", "k", "]", ".", "append", "(", "s", ")", "\n", "counter", "[", "k", "]", "+=", "1", "\n", "break", "\n", "\n", "", "", "", "pairing", "=", "[", "]", "\n", "for", "t", ",", "ss", "in", "pair_result", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"source class: {} is paired with target class: {}\"", ".", "format", "(", "[", "Gsm_n2wMapping", "[", "s", "]", "for", "s", "in", "ss", "]", ",", "target_label2cls", "[", "t", "]", ")", ")", "\n", "pairing", ".", "append", "(", "ss", ")", "\n", "\n", "\n", "", "print", "(", "\"The label_map result is {}\"", ".", "format", "(", "pairing", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.LR_Warmup.__init__": [[8, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lr_base", "=", "0.01", ",", "min_lr", "=", "0.0001", ",", "decay", "=", "0", ",", "warmup_epochs", "=", "0", ")", ":", "\n", "        ", "self", ".", "num_passed_batchs", "=", "0", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "lr", "=", "lr_base", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "steps_per_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.LR_Warmup.on_batch_begin": [[16, 29], ["tensorflow.set_value", "tensorflow.set_value", "numpy.ceil", "max"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "steps_per_epoch", "==", "0", ":", "\n", "            ", "if", "self", ".", "params", "[", "'steps'", "]", "==", "None", ":", "\n", "                ", "self", ".", "steps_per_epoch", "=", "np", ".", "ceil", "(", "1.", "*", "self", ".", "params", "[", "'samples'", "]", "/", "self", ".", "params", "[", "'batch_size'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "steps_per_epoch", "=", "self", ".", "params", "[", "'steps'", "]", "\n", "", "", "if", "self", ".", "num_passed_batchs", "<", "self", ".", "steps_per_epoch", "*", "self", ".", "warmup_epochs", ":", "\n", "            ", "K", ".", "set_value", "(", "self", ".", "model", ".", "optimizer", ".", "lr", ",", "\n", "self", ".", "lr", "*", "(", "self", ".", "num_passed_batchs", "+", "1", ")", "/", "self", ".", "steps_per_epoch", "/", "self", ".", "warmup_epochs", ")", "\n", "", "else", ":", "\n", "            ", "K", ".", "set_value", "(", "self", ".", "model", ".", "optimizer", ".", "lr", ",", "\n", "max", "(", "self", ".", "min_lr", ",", "self", ".", "lr", "*", "(", "(", "1", "-", "self", ".", "decay", ")", "**", "(", "self", ".", "num_passed_batchs", "-", "self", ".", "steps_per_epoch", "*", "self", ".", "warmup_epochs", ")", ")", ")", ")", "\n", "", "self", ".", "num_passed_batchs", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.LR_Warmup.on_epoch_begin": [[30, 32], ["print", "tensorflow.get_value"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "print", "(", "\"learning_rate:\"", ",", "K", ".", "get_value", "(", "self", ".", "model", ".", "optimizer", ".", "lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping.__init__": [[35, 76], ["super().__init__", "abs", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "monitor", "=", "'val_loss'", ",", "\n", "min_delta", "=", "0", ",", "\n", "patience", "=", "0", ",", "\n", "verbose", "=", "0", ",", "\n", "start_epoch", "=", "0", ",", "\n", "mode", "=", "'auto'", ",", "\n", "baseline", "=", "None", ",", "\n", "restore_best_weights", "=", "False", ")", ":", "\n", "        ", "super", "(", "EarlyStopping", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "monitor", "=", "monitor", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "baseline", "=", "baseline", "\n", "self", ".", "min_delta", "=", "abs", "(", "min_delta", ")", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "stopped_epoch", "=", "0", "\n", "self", ".", "start_epoch", "=", "start_epoch", "\n", "self", ".", "restore_best_weights", "=", "restore_best_weights", "\n", "self", ".", "best_weights", "=", "None", "\n", "\n", "if", "mode", "not", "in", "[", "'auto'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "logging", ".", "warning", "(", "'EarlyStopping mode %s is unknown, '", "\n", "'fallback to auto mode.'", ",", "mode", ")", "\n", "mode", "=", "'auto'", "\n", "\n", "", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "", "elif", "mode", "==", "'max'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "", "else", ":", "\n", "            ", "if", "'acc'", "in", "self", ".", "monitor", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "", "else", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "\n", "", "", "if", "self", ".", "monitor_op", "==", "np", ".", "greater", ":", "\n", "            ", "self", ".", "min_delta", "*=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_delta", "*=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping.on_train_begin": [[77, 83], ["None"], "methods", ["None"], ["", "", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "# Allow instances to be re-used", "\n", "        ", "self", ".", "wait", "=", "0", "\n", "self", ".", "stopped_epoch", "=", "0", "\n", "self", ".", "best", "=", "np", ".", "Inf", "if", "self", ".", "monitor_op", "==", "np", ".", "less", "else", "-", "np", ".", "Inf", "\n", "self", ".", "best_weights", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping.on_epoch_end": [[84, 109], ["funcs.EarlyStopping.get_monitor_value", "funcs.EarlyStopping._is_improvement", "funcs.EarlyStopping.model.get_weights", "funcs.EarlyStopping.model.get_weights", "funcs.EarlyStopping._is_improvement", "funcs.EarlyStopping.model.set_weights", "print"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping.get_monitor_value", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping._is_improvement", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping._is_improvement"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "current", "=", "self", ".", "get_monitor_value", "(", "logs", ")", "\n", "if", "current", "is", "None", "or", "epoch", "<", "self", ".", "start_epoch", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "restore_best_weights", "and", "self", ".", "best_weights", "is", "None", ":", "\n", "# Restore the weights after first epoch if no progress is ever made.", "\n", "            ", "self", ".", "best_weights", "=", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "\n", "", "self", ".", "wait", "+=", "1", "\n", "if", "self", ".", "_is_improvement", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "if", "self", ".", "restore_best_weights", ":", "\n", "                ", "self", ".", "best_weights", "=", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "# Only restart wait if we beat both the baseline and our previous best.", "\n", "", "if", "self", ".", "baseline", "is", "None", "or", "self", ".", "_is_improvement", "(", "current", ",", "self", ".", "baseline", ")", ":", "\n", "                ", "self", ".", "wait", "=", "0", "\n", "\n", "# Only check after the first epoch.", "\n", "", "", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "            ", "self", ".", "stopped_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "if", "self", ".", "restore_best_weights", "and", "self", ".", "best_weights", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                    ", "print", "(", "'Restoring model weights from the end of the best epoch.'", ")", "\n", "", "self", ".", "model", ".", "set_weights", "(", "self", ".", "best_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping.on_train_end": [[110, 113], ["print"], "methods", ["None"], ["", "", "", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "stopped_epoch", ">", "0", "and", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "'Epoch %05d: early stopping'", "%", "(", "self", ".", "stopped_epoch", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping.get_monitor_value": [[114, 122], ["logs.get", "logging.warning", "list", "logs.keys"], "methods", ["None"], ["", "", "def", "get_monitor_value", "(", "self", ",", "logs", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "monitor_value", "=", "logs", ".", "get", "(", "self", ".", "monitor", ")", "\n", "if", "monitor_value", "is", "None", ":", "\n", "            ", "logging", ".", "warning", "(", "'Early stopping conditioned on metric `%s` '", "\n", "'which is not available. Available metrics are: %s'", ",", "\n", "self", ".", "monitor", ",", "','", ".", "join", "(", "list", "(", "logs", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "return", "monitor_value", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.funcs.EarlyStopping._is_improvement": [[123, 125], ["funcs.EarlyStopping.monitor_op"], "methods", ["None"], ["", "def", "_is_improvement", "(", "self", ",", "monitor_value", ",", "reference_value", ")", ":", "\n", "        ", "return", "self", ".", "monitor_op", "(", "monitor_value", "-", "self", ".", "min_delta", ",", "reference_value", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader.PrepareGoogleSpeechCmd": [[58, 248], ["print", "audioUtils.WAV2Numpy", "print", "audioUtils.WAV2Numpy", "[].tolist", "[].tolist", "os.walk", "list", "os.walk", "dict", "dict", "dict", "dict", "print", "Exception", "SpeechDownloader._DownloadGoogleSpeechCmdV2", "os.path.join", "os.path.join", "SpeechDownloader._getFileCategory", "SpeechDownloader._getFileCategory", "SpeechDownloader._getFileCategory", "SpeechDownloader._getFileCategory", "zip", "zip", "zip", "zip", "SpeechDownloader._DownloadGoogleSpeechCmdV1", "Exception", "f.endswith", "f.endswith", "set", "range", "range", "pandas.read_csv", "pandas.read_csv", "f.endswith", "set", "set", "f.endswith", "len", "len"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.audioUtils.WAV2Numpy", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.audioUtils.WAV2Numpy", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._DownloadGoogleSpeechCmdV2", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._getFileCategory", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._getFileCategory", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._getFileCategory", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._getFileCategory", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._DownloadGoogleSpeechCmdV1"], ["def", "PrepareGoogleSpeechCmd", "(", "version", "=", "2", ",", "forceDownload", "=", "False", ",", "task", "=", "'20cmd'", ")", ":", "\n", "    ", "\"\"\"\n    Prepares Google Speech commands dataset version 2 for use\n\n    tasks: 20cmd, 12cmd, leftright or 35word\n\n    Returns full path to training, validation and test file list and file categories\n    \"\"\"", "\n", "allowedTasks", "=", "[", "'12cmd'", ",", "'leftright'", ",", "'35word'", ",", "'20cmd'", "]", "\n", "if", "task", "not", "in", "allowedTasks", ":", "\n", "        ", "raise", "Exception", "(", "'Task must be one of: {}'", ".", "format", "(", "allowedTasks", ")", ")", "\n", "\n", "", "basePath", "=", "None", "\n", "if", "version", "==", "2", ":", "\n", "        ", "_DownloadGoogleSpeechCmdV2", "(", "forceDownload", ")", "\n", "basePath", "=", "'/home/kuray107/sd_GSCmdV2'", "\n", "", "elif", "version", "==", "1", ":", "\n", "        ", "_DownloadGoogleSpeechCmdV1", "(", "forceDownload", ")", "\n", "basePath", "=", "'sd_GSCmdV1'", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Version must be 1 or 2'", ")", "\n", "\n", "", "if", "task", "==", "'12cmd'", ":", "\n", "        ", "GSCmdV2Categs", "=", "{", "\n", "'unknown'", ":", "0", ",", "\n", "'silence'", ":", "1", ",", "\n", "'_unknown_'", ":", "0", ",", "\n", "'_silence_'", ":", "1", ",", "\n", "'_background_noise_'", ":", "1", ",", "\n", "'yes'", ":", "2", ",", "\n", "'no'", ":", "3", ",", "\n", "'up'", ":", "4", ",", "\n", "'down'", ":", "5", ",", "\n", "'left'", ":", "6", ",", "\n", "'right'", ":", "7", ",", "\n", "'on'", ":", "8", ",", "\n", "'off'", ":", "9", ",", "\n", "'stop'", ":", "10", ",", "\n", "'go'", ":", "11", "}", "\n", "numGSCmdV2Categs", "=", "12", "\n", "", "elif", "task", "==", "'leftright'", ":", "\n", "        ", "GSCmdV2Categs", "=", "{", "\n", "'unknown'", ":", "0", ",", "\n", "'silence'", ":", "0", ",", "\n", "'_unknown_'", ":", "0", ",", "\n", "'_silence_'", ":", "0", ",", "\n", "'_background_noise_'", ":", "0", ",", "\n", "'left'", ":", "1", ",", "\n", "'right'", ":", "2", "}", "\n", "numGSCmdV2Categs", "=", "3", "\n", "", "elif", "task", "==", "'35word'", ":", "\n", "        ", "GSCmdV2Categs", "=", "{", "\n", "'unknown'", ":", "0", ",", "\n", "'silence'", ":", "0", ",", "\n", "'_unknown_'", ":", "0", ",", "\n", "'_silence_'", ":", "0", ",", "\n", "'_background_noise_'", ":", "0", ",", "\n", "'yes'", ":", "2", ",", "\n", "'no'", ":", "3", ",", "\n", "'up'", ":", "4", ",", "\n", "'down'", ":", "5", ",", "\n", "'left'", ":", "6", ",", "\n", "'right'", ":", "7", ",", "\n", "'on'", ":", "8", ",", "\n", "'off'", ":", "9", ",", "\n", "'stop'", ":", "10", ",", "\n", "'go'", ":", "11", ",", "\n", "'zero'", ":", "12", ",", "\n", "'one'", ":", "13", ",", "\n", "'two'", ":", "14", ",", "\n", "'three'", ":", "15", ",", "\n", "'four'", ":", "16", ",", "\n", "'five'", ":", "17", ",", "\n", "'six'", ":", "18", ",", "\n", "'seven'", ":", "19", ",", "\n", "'eight'", ":", "20", ",", "\n", "'nine'", ":", "1", ",", "\n", "'backward'", ":", "21", ",", "\n", "'bed'", ":", "22", ",", "\n", "'bird'", ":", "23", ",", "\n", "'cat'", ":", "24", ",", "\n", "'dog'", ":", "25", ",", "\n", "'follow'", ":", "26", ",", "\n", "'forward'", ":", "27", ",", "\n", "'happy'", ":", "28", ",", "\n", "'house'", ":", "29", ",", "\n", "'learn'", ":", "30", ",", "\n", "'marvin'", ":", "31", ",", "\n", "'sheila'", ":", "32", ",", "\n", "'tree'", ":", "33", ",", "\n", "'visual'", ":", "34", ",", "\n", "'wow'", ":", "35", "}", "\n", "numGSCmdV2Categs", "=", "36", "\n", "", "elif", "task", "==", "'20cmd'", ":", "\n", "        ", "GSCmdV2Categs", "=", "{", "\n", "'unknown'", ":", "0", ",", "\n", "'silence'", ":", "0", ",", "\n", "'_unknown_'", ":", "0", ",", "\n", "'_silence_'", ":", "0", ",", "\n", "'_background_noise_'", ":", "0", ",", "\n", "'yes'", ":", "2", ",", "\n", "'no'", ":", "3", ",", "\n", "'up'", ":", "4", ",", "\n", "'down'", ":", "5", ",", "\n", "'left'", ":", "6", ",", "\n", "'right'", ":", "7", ",", "\n", "'on'", ":", "8", ",", "\n", "'off'", ":", "9", ",", "\n", "'stop'", ":", "10", ",", "\n", "'go'", ":", "11", ",", "\n", "'zero'", ":", "12", ",", "\n", "'one'", ":", "13", ",", "\n", "'two'", ":", "14", ",", "\n", "'three'", ":", "15", ",", "\n", "'four'", ":", "16", ",", "\n", "'five'", ":", "17", ",", "\n", "'six'", ":", "18", ",", "\n", "'seven'", ":", "19", ",", "\n", "'eight'", ":", "20", ",", "\n", "'nine'", ":", "1", "}", "\n", "numGSCmdV2Categs", "=", "21", "\n", "\n", "", "print", "(", "'Converting test set WAVs to numpy files'", ")", "\n", "audioUtils", ".", "WAV2Numpy", "(", "basePath", "+", "'/test/'", ")", "\n", "print", "(", "'Converting training set WAVs to numpy files'", ")", "\n", "audioUtils", ".", "WAV2Numpy", "(", "basePath", "+", "'/train/'", ")", "\n", "\n", "# read split from files and all files in folders", "\n", "testWAVs", "=", "pd", ".", "read_csv", "(", "basePath", "+", "'/train/testing_list.txt'", ",", "\n", "sep", "=", "\" \"", ",", "header", "=", "None", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "valWAVs", "=", "pd", ".", "read_csv", "(", "basePath", "+", "'/train/validation_list.txt'", ",", "\n", "sep", "=", "\" \"", ",", "header", "=", "None", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "testWAVs", "=", "[", "os", ".", "path", ".", "join", "(", "basePath", "+", "'/train/'", ",", "f", "+", "'.npy'", ")", "\n", "for", "f", "in", "testWAVs", "if", "f", ".", "endswith", "(", "'.wav'", ")", "]", "\n", "valWAVs", "=", "[", "os", ".", "path", ".", "join", "(", "basePath", "+", "'/train/'", ",", "f", "+", "'.npy'", ")", "\n", "for", "f", "in", "valWAVs", "if", "f", ".", "endswith", "(", "'.wav'", ")", "]", "\n", "allWAVs", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "basePath", "+", "'/train/'", ")", ":", "\n", "        ", "allWAVs", "+=", "[", "root", "+", "'/'", "+", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "'.wav.npy'", ")", "]", "\n", "", "trainWAVs", "=", "list", "(", "set", "(", "allWAVs", ")", "-", "set", "(", "valWAVs", ")", "-", "set", "(", "testWAVs", ")", ")", "\n", "\n", "testWAVsREAL", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "basePath", "+", "'/test/'", ")", ":", "\n", "        ", "testWAVsREAL", "+=", "[", "root", "+", "'/'", "+", "\n", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "'.wav.npy'", ")", "]", "\n", "\n", "# get categories", "\n", "", "testWAVlabels", "=", "[", "_getFileCategory", "(", "f", ",", "GSCmdV2Categs", ")", "for", "f", "in", "testWAVs", "]", "\n", "valWAVlabels", "=", "[", "_getFileCategory", "(", "f", ",", "GSCmdV2Categs", ")", "for", "f", "in", "valWAVs", "]", "\n", "trainWAVlabels", "=", "[", "_getFileCategory", "(", "f", ",", "GSCmdV2Categs", ")", "for", "f", "in", "trainWAVs", "]", "\n", "testWAVREALlabels", "=", "[", "_getFileCategory", "(", "f", ",", "GSCmdV2Categs", ")", "\n", "for", "f", "in", "testWAVsREAL", "]", "\n", "\n", "# background noise should be used for validation as well", "\n", "backNoiseFiles", "=", "[", "trainWAVs", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "trainWAVlabels", ")", ")", "\n", "if", "trainWAVlabels", "[", "i", "]", "==", "GSCmdV2Categs", "[", "'silence'", "]", "]", "\n", "backNoiseCats", "=", "[", "GSCmdV2Categs", "[", "'silence'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "backNoiseFiles", ")", ")", "]", "\n", "if", "numGSCmdV2Categs", "==", "12", ":", "\n", "        ", "valWAVs", "+=", "backNoiseFiles", "\n", "valWAVlabels", "+=", "backNoiseCats", "\n", "\n", "# build dictionaries", "\n", "", "testWAVlabelsDict", "=", "dict", "(", "zip", "(", "testWAVs", ",", "testWAVlabels", ")", ")", "\n", "valWAVlabelsDict", "=", "dict", "(", "zip", "(", "valWAVs", ",", "valWAVlabels", ")", ")", "\n", "trainWAVlabelsDict", "=", "dict", "(", "zip", "(", "trainWAVs", ",", "trainWAVlabels", ")", ")", "\n", "testWAVREALlabelsDict", "=", "dict", "(", "zip", "(", "testWAVsREAL", ",", "testWAVREALlabels", ")", ")", "\n", "\n", "# a tweak here: we will heavily underuse silence samples because there are few files.", "\n", "# we can add them to the training list to reuse them multiple times", "\n", "# note that since we already added the files to the label dicts we don't", "\n", "# need to do it again", "\n", "\n", "# for i in range(200):", "\n", "#     trainWAVs = trainWAVs + backNoiseFiles", "\n", "\n", "# info dictionary", "\n", "trainInfo", "=", "{", "'files'", ":", "trainWAVs", ",", "'labels'", ":", "trainWAVlabelsDict", "}", "\n", "valInfo", "=", "{", "'files'", ":", "valWAVs", ",", "'labels'", ":", "valWAVlabelsDict", "}", "\n", "testInfo", "=", "{", "'files'", ":", "testWAVs", ",", "'labels'", ":", "testWAVlabelsDict", "}", "\n", "testREALInfo", "=", "{", "'files'", ":", "testWAVsREAL", ",", "'labels'", ":", "testWAVREALlabelsDict", "}", "\n", "gscInfo", "=", "{", "'train'", ":", "trainInfo", ",", "\n", "'test'", ":", "testInfo", ",", "\n", "'val'", ":", "valInfo", ",", "\n", "'testREAL'", ":", "testREALInfo", "}", "\n", "\n", "print", "(", "'Done preparing Google Speech commands dataset version {}'", ".", "format", "(", "version", ")", ")", "\n", "\n", "return", "gscInfo", ",", "numGSCmdV2Categs", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._getFileCategory": [[250, 256], ["os.path.basename", "catDict.get", "os.path.dirname"], "function", ["None"], ["", "def", "_getFileCategory", "(", "file", ",", "catDict", ")", ":", "\n", "    ", "\"\"\"\n    Receives a file with name sd_GSCmdV2/train/<cat>/<filename> and returns an integer that is catDict[cat]\n    \"\"\"", "\n", "categ", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "file", ")", ")", "\n", "return", "catDict", ".", "get", "(", "categ", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._DownloadGoogleSpeechCmdV2": [[258, 278], ["os.path.isdir", "print", "SpeechDownloader._downloadFile", "SpeechDownloader._downloadFile", "os.path.isdir", "SpeechDownloader._extractTar", "os.path.isdir", "SpeechDownloader._extractTar", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._downloadFile", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._downloadFile", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._extractTar", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._extractTar"], ["", "def", "_DownloadGoogleSpeechCmdV2", "(", "forceDownload", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Downloads Google Speech commands dataset version 2\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "\"/home/kuray107/sd_GSCmdV2/\"", ")", "and", "not", "forceDownload", ":", "\n", "        ", "print", "(", "'Google Speech commands dataset version 2 already exists. Skipping download.'", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"sd_GSCmdV2/\"", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "\"sd_GSCmdV2/\"", ")", "\n", "", "trainFiles", "=", "'http://download.tensorflow.org/data/speech_commands_v0.02.tar.gz'", "\n", "testFiles", "=", "'http://download.tensorflow.org/data/speech_commands_test_set_v0.02.tar.gz'", "\n", "_downloadFile", "(", "testFiles", ",", "'sd_GSCmdV2/test.tar.gz'", ")", "\n", "_downloadFile", "(", "trainFiles", ",", "'sd_GSCmdV2/train.tar.gz'", ")", "\n", "\n", "# extract files", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "\"/home/kuray107/sd_GSCmdV2/test/\"", ")", ":", "\n", "        ", "_extractTar", "(", "'sd_GSCmdV2/test.tar.gz'", ",", "'sd_GSCmdV2/test/'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "\"/home/kuray107/sd_GSCmdV2/train/\"", ")", ":", "\n", "        ", "_extractTar", "(", "'sd_GSCmdV2/train.tar.gz'", ",", "'sd_GSCmdV2/train/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._DownloadGoogleSpeechCmdV1": [[280, 300], ["os.path.isdir", "print", "SpeechDownloader._downloadFile", "SpeechDownloader._downloadFile", "os.path.isdir", "SpeechDownloader._extractTar", "os.path.isdir", "SpeechDownloader._extractTar", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._downloadFile", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._downloadFile", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._extractTar", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._extractTar"], ["", "", "def", "_DownloadGoogleSpeechCmdV1", "(", "forceDownload", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Downloads Google Speech commands dataset version 1\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "\"sd_GSCmdV1/\"", ")", "and", "not", "forceDownload", ":", "\n", "        ", "print", "(", "'Google Speech commands dataset version 1 already exists. Skipping download.'", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"sd_GSCmdV1/\"", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "\"sd_GSCmdV1/\"", ")", "\n", "", "trainFiles", "=", "'http://download.tensorflow.org/data/speech_commands_v0.01.tar.gz'", "\n", "testFiles", "=", "'http://download.tensorflow.org/data/speech_commands_test_set_v0.01.tar.gz'", "\n", "_downloadFile", "(", "testFiles", ",", "'sd_GSCmdV1/test.tar.gz'", ")", "\n", "_downloadFile", "(", "trainFiles", ",", "'sd_GSCmdV1/train.tar.gz'", ")", "\n", "\n", "# extract files", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "\"sd_GSCmdV1/test/\"", ")", ":", "\n", "        ", "_extractTar", "(", "'sd_GSCmdV1/test.tar.gz'", ",", "'sd_GSCmdV1/test/'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "\"sd_GSCmdV1/train/\"", ")", ":", "\n", "        ", "_extractTar", "(", "'sd_GSCmdV1/train.tar.gz'", ",", "'sd_GSCmdV1/train/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._downloadFile": [[306, 324], ["requests.get", "int", "print", "requests.get.headers.get", "open", "tqdm.tqdm", "print", "requests.get.iter_content", "f.write", "math.ceil", "len"], "function", ["None"], ["", "", "def", "_downloadFile", "(", "url", ",", "fName", ")", ":", "\n", "# Streaming, so we can iterate over the response.", "\n", "    ", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "\n", "# Total size in bytes.", "\n", "total_size", "=", "int", "(", "r", ".", "headers", ".", "get", "(", "'content-length'", ",", "0", ")", ")", "\n", "block_size", "=", "1024", "\n", "wrote", "=", "0", "\n", "print", "(", "'Downloading {} into {}'", ".", "format", "(", "url", ",", "fName", ")", ")", "\n", "with", "open", "(", "fName", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "for", "data", "in", "tqdm", "(", "r", ".", "iter_content", "(", "block_size", ")", ",", "\n", "total", "=", "math", ".", "ceil", "(", "total_size", "//", "block_size", ")", ",", "\n", "unit", "=", "'KB'", ",", "\n", "unit_scale", "=", "True", ")", ":", "\n", "            ", "wrote", "=", "wrote", "+", "len", "(", "data", ")", "\n", "f", ".", "write", "(", "data", ")", "\n", "", "", "if", "total_size", "!=", "0", "and", "wrote", "!=", "total_size", ":", "\n", "        ", "print", "(", "\"ERROR, something went wrong\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechDownloader._extractTar": [[326, 336], ["print", "fname.endswith", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "fname.endswith", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close"], "function", ["None"], ["", "", "def", "_extractTar", "(", "fname", ",", "folder", ")", ":", "\n", "    ", "print", "(", "'Extracting {} into {}'", ".", "format", "(", "fname", ",", "folder", ")", ")", "\n", "if", "(", "fname", ".", "endswith", "(", "\"tar.gz\"", ")", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "fname", ",", "\"r:gz\"", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "", "elif", "(", "fname", ".", "endswith", "(", "\"tar\"", ")", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "fname", ",", "\"r:\"", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechGenerator.SpeechGen.__init__": [[29, 38], ["SpeechGenerator.SpeechGen.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.on_epoch_end"], ["def", "__init__", "(", "self", ",", "list_IDs", ",", "labels", ",", "batch_size", "=", "32", ",", "\n", "dim", "=", "16000", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "list_IDs", "=", "list_IDs", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechGenerator.SpeechGen.__len__": [[39, 42], ["int", "numpy.floor", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the number of batches per epoch'", "\n", "return", "int", "(", "np", ".", "floor", "(", "len", "(", "self", ".", "list_IDs", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechGenerator.SpeechGen.__getitem__": [[43, 55], ["SpeechGenerator.SpeechGen.__data_generation"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__data_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generate one batch of data'", "\n", "# Generate indexes of the batch", "\n", "indexes", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "# Find list of IDs", "\n", "list_IDs_temp", "=", "[", "self", ".", "list_IDs", "[", "k", "]", "for", "k", "in", "indexes", "]", "\n", "\n", "# Generate data", "\n", "X", ",", "y", "=", "self", ".", "__data_generation", "(", "list_IDs_temp", ")", "\n", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechGenerator.SpeechGen.on_epoch_end": [[56, 61], ["numpy.arange", "len", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "'Updates indexes after each epoch'", "\n", "self", ".", "indexes", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "list_IDs", ")", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechGenerator.SpeechGen.__data_generation": [[62, 95], ["numpy.empty", "numpy.empty", "enumerate", "numpy.load", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "__data_generation", "(", "self", ",", "list_IDs_temp", ")", ":", "\n", "        ", "'Generates data containing batch_size samples'", "\n", "# X : (n_samples, *dim, n_channels)", "\n", "# Initialization", "\n", "X", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", ",", "self", ".", "dim", ")", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "# Generate data", "\n", "for", "i", ",", "ID", "in", "enumerate", "(", "list_IDs_temp", ")", ":", "\n", "\n", "# load data from file, saved as numpy array on disk", "\n", "            ", "curX", "=", "np", ".", "load", "(", "ID", ")", "\n", "\n", "# normalize", "\n", "# invMax = 1/(np.max(np.abs(curX))+1e-3)", "\n", "# curX *= invMax", "\n", "\n", "# curX could be bigger or smaller than self.dim", "\n", "if", "curX", ".", "shape", "[", "0", "]", "==", "self", ".", "dim", ":", "\n", "                ", "X", "[", "i", "]", "=", "curX", "\n", "", "elif", "curX", ".", "shape", "[", "0", "]", ">", "self", ".", "dim", ":", "# bigger", "\n", "# we can choose any position in curX-self.dim", "\n", "                ", "randPos", "=", "np", ".", "random", ".", "randint", "(", "curX", ".", "shape", "[", "0", "]", "-", "self", ".", "dim", ")", "\n", "X", "[", "i", "]", "=", "curX", "[", "randPos", ":", "randPos", "+", "self", ".", "dim", "]", "\n", "", "else", ":", "# smaller", "\n", "                ", "randPos", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "dim", "-", "curX", ".", "shape", "[", "0", "]", ")", "\n", "X", "[", "i", ",", "randPos", ":", "randPos", "+", "curX", ".", "shape", "[", "0", "]", "]", "=", "curX", "\n", "# print('File dim smaller')", "\n", "\n", "# Store class", "\n", "", "y", "[", "i", "]", "=", "self", ".", "labels", "[", "ID", "]", "\n", "\n", "", "return", "X", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.SpeechModels.AttRNNSpeechModel": [[11, 69], ["tensorflow.keras.layers.Input", "kapre.time_frequency.Melspectrogram", "kapre.time_frequency.Melspectrogram.", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Reshape", "kapre.utils.Normalization2D", "tensorflow.keras.layers.Permute", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dot", "tensorflow.keras.layers.Softmax", "tensorflow.keras.layers.Dot", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "rnn_func", "rnn_func", "tensorflow.keras.backend.squeeze"], "function", ["None"], ["def", "AttRNNSpeechModel", "(", "nCategories", ",", "samplingrate", "=", "16000", ",", "\n", "inputLength", "=", "16000", ",", "unet", "=", "False", ",", "rnn_func", "=", "L", ".", "LSTM", ")", ":", "\n", "# simple LSTM", "\n", "    ", "sr", "=", "samplingrate", "\n", "iLen", "=", "inputLength", "\n", "\n", "inputs", "=", "L", ".", "Input", "(", "(", "inputLength", ",", ")", ",", "name", "=", "'input'", ")", "\n", "\n", "x", "=", "L", ".", "Reshape", "(", "(", "1", ",", "-", "1", ")", ")", "(", "inputs", ")", "\n", "\n", "m", "=", "Melspectrogram", "(", "n_dft", "=", "1024", ",", "n_hop", "=", "128", ",", "input_shape", "=", "(", "1", ",", "iLen", ")", ",", "\n", "padding", "=", "'same'", ",", "sr", "=", "sr", ",", "n_mels", "=", "80", ",", "\n", "fmin", "=", "40.0", ",", "fmax", "=", "sr", "/", "2", ",", "power_melgram", "=", "1.0", ",", "\n", "return_decibel_melgram", "=", "True", ",", "trainable_fb", "=", "False", ",", "\n", "trainable_kernel", "=", "False", ",", "\n", "name", "=", "'mel_stft'", ")", "\n", "m", ".", "trainable", "=", "False", "\n", "\n", "x", "=", "m", "(", "x", ")", "\n", "\n", "x", "=", "Normalization2D", "(", "int_axis", "=", "0", ",", "name", "=", "'mel_stft_norm'", ")", "(", "x", ")", "\n", "\n", "# note that Melspectrogram puts the sequence in shape (batch_size, melDim, timeSteps, 1)", "\n", "# we would rather have it the other way around for LSTMs", "\n", "\n", "x", "=", "L", ".", "Permute", "(", "(", "2", ",", "1", ",", "3", ")", ")", "(", "x", ")", "\n", "x", "=", "L", ".", "Conv2D", "(", "10", ",", "(", "5", ",", "1", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "L", ".", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "L", ".", "Conv2D", "(", "1", ",", "(", "5", ",", "1", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "L", ".", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "# x = Reshape((125, 80)) (x)", "\n", "# keras.backend.squeeze(x, axis)", "\n", "x", "=", "L", ".", "Lambda", "(", "lambda", "q", ":", "K", ".", "squeeze", "(", "q", ",", "-", "1", ")", ",", "name", "=", "'squeeze_last_dim'", ")", "(", "x", ")", "\n", "\n", "x", "=", "L", ".", "Bidirectional", "(", "rnn_func", "(", "64", ",", "return_sequences", "=", "True", ")", "\n", ")", "(", "x", ")", "# [b_s, seq_len, vec_dim]", "\n", "x", "=", "L", ".", "Bidirectional", "(", "rnn_func", "(", "64", ",", "return_sequences", "=", "True", ")", "\n", ")", "(", "x", ")", "# [b_s, seq_len, vec_dim]", "\n", "\n", "xFirst", "=", "L", ".", "Lambda", "(", "lambda", "q", ":", "q", "[", ":", ",", "-", "1", "]", ")", "(", "x", ")", "# [b_s, vec_dim]", "\n", "query", "=", "L", ".", "Dense", "(", "128", ")", "(", "xFirst", ")", "\n", "\n", "# dot product attention", "\n", "attScores", "=", "L", ".", "Dot", "(", "axes", "=", "[", "1", ",", "2", "]", ")", "(", "[", "query", ",", "x", "]", ")", "\n", "attScores", "=", "L", ".", "Softmax", "(", "name", "=", "'attSoftmax'", ")", "(", "attScores", ")", "# [b_s, seq_len]", "\n", "\n", "# rescale sequence", "\n", "attVector", "=", "L", ".", "Dot", "(", "axes", "=", "[", "1", ",", "1", "]", ")", "(", "[", "attScores", ",", "x", "]", ")", "# [b_s, vec_dim]", "\n", "\n", "x", "=", "L", ".", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", "(", "attVector", ")", "\n", "x", "=", "L", ".", "Dense", "(", "32", ")", "(", "x", ")", "\n", "\n", "output", "=", "L", ".", "Dense", "(", "nCategories", ",", "activation", "=", "'softmax'", ",", "name", "=", "'output'", ")", "(", "x", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "[", "output", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.multi_mapping": [[17, 40], ["numpy.zeros", "numpy.eye", "tensorflow.matmul", "tensorflow.reduce_mean", "numpy.zeros", "enumerate", "tensorflow.matmul", "tensorflow.constant", "tensorflow.reshape", "tensorflow.constant", "tensorflow.shape"], "function", ["None"], ["def", "multi_mapping", "(", "prob", ",", "source_num", ",", "mapping_num", ",", "target_num", ")", ":", "\n", "\n", "    ", "similarity_mapping", "=", "False", "\n", "if", "not", "similairty_mapping", ":", "\n", "        ", "mt", "=", "mapping_num", "*", "target_num", "##mt must smaller than source_num", "\n", "label_map", "=", "np", ".", "zeros", "(", "[", "source_num", ",", "mt", "]", ")", "##[source_num, map_num*target_num]", "\n", "label_map", "[", "0", ":", "mt", ",", "0", ":", "mt", "]", "=", "np", ".", "eye", "(", "mt", ")", "##[source_num, map_num*target_num]", "\n", "map_prob", "=", "tf", ".", "matmul", "(", "prob", ",", "tf", ".", "constant", "(", "label_map", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "## [1, source_num] * [source_num, map_num*target_num] = [1, map_num*target_num]", "\n", "final_prob", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reshape", "(", "map_prob", ",", "shape", "=", "[", "tf", ".", "shape", "(", "map_prob", ")", "[", "0", "]", ",", "target_num", ",", "mapping_num", "]", ")", ",", "axis", "=", "-", "1", ")", "##[target_num]", "\n", "\n", "", "else", ":", "\n", "# Use similarity mapping result.", "\n", "# Note that you should choose the correct label_map according to the datast.", "\n", "        ", "weight", "=", "np", ".", "zeros", "(", "[", "source_num", ",", "target_num", "]", ")", "\n", "label_map", "=", "[", "[", "14", ",", "18", "]", ",", "[", "2", ",", "13", ",", "35", "]", ",", "[", "15", ",", "22", ",", "23", "]", ",", "[", "6", ",", "21", "]", ",", "[", "4", ",", "8", "]", ",", "[", "26", ",", "27", "]", ",", "[", "10", ",", "24", "]", ",", "[", "19", ",", "29", "]", ",", "[", "1", ",", "3", "]", ",", "[", "30", ",", "31", "]", ",", "[", "0", ",", "25", ",", "34", "]", ",", "[", "12", ",", "16", ",", "32", "]", ",", "[", "9", ",", "23", "]", ",", "[", "17", ",", "28", "]", ",", "[", "7", ",", "20", "]", ",", "[", "5", ",", "11", "]", "]", "# AR-SCR mapping", "\n", "#label_map = [[4,7], [20,24], [16,26,32], [6,13,31], [1,3,30], [9,19], [0,8], [17,18], [10,25], [5,11], [2,23], [21,27,35], [15,22,33], [28,29,34], [12,14]] # LT-SCR mapping", "\n", "#label_map = [[20,22,28], [4,8], [10,13], [14,23,27], [0,21], [12,18,29], [2,15,33], [6,7,31], [11,25,26], [1,5,30], [17,19,35], [9,16,32], [3,24,34]] # DM-SCR mapping", "\n", "for", "i", ",", "ls", "in", "enumerate", "(", "label_map", ")", ":", "\n", "            ", "for", "num", "in", "ls", ":", "\n", "                ", "weight", "[", "num", "]", "[", "i", "]", "=", "1", "\n", "", "", "final_prob", "=", "tf", ".", "matmul", "(", "prob", ",", "tf", ".", "constant", "(", "weight", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n", "", "return", "final_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.layer_output": [[41, 53], ["model.get_layer", "tensorflow.keras.models.Model", "tensorflow.reduce_mean", "tensorflow.GradientTape", "models.Model.", "gtape.gradient", "tensorflow.mean", "tensorflow.multiply", "numpy.argmax"], "function", ["None"], ["", "def", "layer_output", "(", "in_feats", ",", "model", ",", "ly_name", "=", "\"batch_normalization_6 \"", ",", "n", "=", "7", ")", ":", "\n", "    ", "conv_layer", "=", "model", ".", "get_layer", "(", "ly_name", ")", "\n", "heatmap_model", "=", "models", ".", "Model", "(", "[", "model", ".", "inputs", "]", ",", "[", "conv_layer", ".", "output", ",", "model", ".", "output", "]", ")", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "gtape", ":", "\n", "        ", "conv_output", ",", "predictions", "=", "heatmap_model", "(", "in_feats", "[", "n", ":", "n", "+", "1", "]", ")", "\n", "loss", "=", "predictions", "[", ":", ",", "np", ".", "argmax", "(", "predictions", "[", "0", "]", ")", "]", "\n", "grads", "=", "gtape", ".", "gradient", "(", "loss", ",", "conv_output", ")", "\n", "pooled_grads", "=", "K", ".", "mean", "(", "grads", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", "\n", "\n", "", "heatmap", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "pooled_grads", ",", "conv_output", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "heatmap", ",", "conv_output", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.vis_map": [[54, 61], ["numpy.maximum", "numpy.max"], "function", ["None"], ["", "def", "vis_map", "(", "heatmap", ")", ":", "\n", "    ", "heatmap", "=", "np", ".", "maximum", "(", "heatmap", ",", "0", ")", "\n", "max_heat", "=", "np", ".", "max", "(", "heatmap", ")", "\n", "if", "max_heat", "==", "0", ":", "\n", "        ", "max_heat", "=", "1e-10", "\n", "", "heatmap", "/=", "max_heat", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.to_rgb": [[62, 82], ["numpy.uint8", "matplotlib.get_cmap", "tensorflow.keras.preprocessing.image.array_to_img", "keras.preprocessing.image.img_to_array.resize", "tensorflow.keras.preprocessing.image.img_to_array", "tensorflow.keras.preprocessing.image.array_to_img", "cm.get_cmap.", "utils.vis_map", "numpy.arange", "numpy.flipud", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.vis_map"], ["", "def", "to_rgb", "(", "heatmap", ",", "h_x", ",", "w_x", ")", ":", "\n", "    ", "heatmap", "=", "np", ".", "uint8", "(", "255", "*", "vis_map", "(", "(", "heatmap", "[", "0", "]", ")", ")", ")", "\n", "# We use jet colormap to colorize heatmap", "\n", "jet", "=", "cm", ".", "get_cmap", "(", "\"jet\"", ")", "\n", "\n", "# We use RGB values of the colormap", "\n", "jet_colors", "=", "jet", "(", "np", ".", "arange", "(", "256", ")", ")", "[", ":", ",", ":", "3", "]", "\n", "jet_heatmap", "=", "jet_colors", "[", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "heatmap", ")", ")", "]", "\n", "\n", "# We create an image with RGB colorized heatmap", "\n", "jet_heatmap", "=", "keras", ".", "preprocessing", ".", "image", ".", "array_to_img", "(", "jet_heatmap", ")", "\n", "\n", "jet_heatmap", "=", "jet_heatmap", ".", "resize", "(", "(", "w_x", ",", "h_x", ")", ")", "\n", "\n", "jet_heatmap", "=", "keras", ".", "preprocessing", ".", "image", ".", "img_to_array", "(", "jet_heatmap", ")", "\n", "\n", "# Save the superimposed image", "\n", "superimposed_img", "=", "keras", ".", "preprocessing", ".", "image", ".", "array_to_img", "(", "jet_heatmap", ")", "\n", "\n", "return", "superimposed_img", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.ts_CAM": [[83, 100], ["tensorflow.function", "tensorflow.keras.backend.function", "numpy.dot", "matplotlib.figure", "matplotlib.plot", "matplotlib.scatter", "matplotlib.title", "matplotlib.colorbar", "matplotlib.savefig", "K.function.", "keras.backend.function.", "model.get_weights", "numpy.exp", "numpy.sum", "x_test[].squeeze", "numpy.arange", "x_test[].squeeze", "tensorflow.learning_phase", "tensorflow.keras.backend.learning_phase", "np.dot.min", "np.dot.max", "np.dot.min", "numpy.exp", "len", "c[].squeeze", "str", "str", "int", "str", "int"], "function", ["None"], ["", "def", "ts_CAM", "(", "model", ",", "x_test", ",", "y_test", ")", ":", "\n", "    ", "get_last_conv", "=", "K", ".", "function", "(", "[", "model", ".", "layers", "[", "0", "]", ".", "input", ",", "K", ".", "learning_phase", "(", ")", "]", ",", "[", "model", ".", "layers", "[", "-", "2", "]", ".", "output", "]", ")", "\n", "last_conv", "=", "get_last_conv", "(", "[", "x_test", "[", ":", "100", "]", ",", "1", "]", ")", "[", "0", "]", "\n", "get_softmax", "=", "keras", ".", "backend", ".", "function", "(", "[", "model", ".", "layers", "[", "0", "]", ".", "input", ",", "keras", ".", "backend", ".", "learning_phase", "(", ")", "]", ",", "[", "model", ".", "layers", "[", "-", "1", "]", ".", "output", "]", ")", "\n", "softmax", "=", "get_softmax", "(", "(", "[", "x_test", "[", ":", "100", "]", ",", "1", "]", ")", ")", "[", "0", "]", "\n", "softmax_weight", "=", "model", ".", "get_weights", "(", ")", "[", "-", "2", "]", "\n", "CAM", "=", "np", ".", "dot", "(", "last_conv", ",", "softmax_weight", ")", "\n", "k", "=", "0", "\n", "# for k in range(5):", "\n", "CAM", "=", "(", "CAM", "-", "CAM", ".", "min", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "/", "(", "CAM", ".", "max", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "-", "CAM", ".", "min", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "c", "=", "np", ".", "exp", "(", "CAM", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "CAM", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "13", ",", "7", ")", ")", "\n", "plt", ".", "plot", "(", "x_test", "[", "k", "]", ".", "squeeze", "(", ")", ")", "\n", "plt", ".", "scatter", "(", "np", ".", "arange", "(", "len", "(", "x_test", "[", "k", "]", ")", ")", ",", "x_test", "[", "k", "]", ".", "squeeze", "(", ")", ",", "cmap", "=", "'hot_r'", ",", "c", "=", "c", "[", "k", ",", ":", ",", ":", ",", "int", "(", "y_test", "[", "k", "]", ")", "]", ".", "squeeze", "(", ")", ",", "s", "=", "100", ")", "\n", "plt", ".", "title", "(", "'True label:'", "+", "str", "(", "y_test", "[", "k", "]", ")", "+", "'   likelihood of label '", "+", "str", "(", "y_test", "[", "k", "]", ")", "+", "': '", "+", "str", "(", "softmax", "[", "k", "]", "[", "int", "(", "y_test", "[", "k", "]", ")", "]", ")", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "savefig", "(", "\"cam.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.plot_acc_loss": [[102, 123], ["matplotlib.figure", "matplotlib.style.use", "matplotlib.subplots", "ax1.plot", "ax1.plot", "ax1.set_ylabel", "ax1.set_ylim", "ax1.set_xlabel", "ax1.legend", "ax2.plot", "ax2.plot", "ax2.set_ylabel", "ax2.set_xlabel", "ax2.legend", "matplotlib.tight_layout", "matplotlib.savefig"], "function", ["None"], ["", "def", "plot_acc_loss", "(", "x_history", ",", "eps", ",", "map_num", ")", ":", "\n", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "style", ".", "use", "(", "\"seaborn\"", ")", "\n", "fig", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "6", ",", "9", ")", ")", "\n", "\n", "ax1", ".", "plot", "(", "x_history", ".", "history", "[", "\"val_accuracy\"", "]", ",", "label", "=", "\"Val. acc\"", ")", "\n", "ax1", ".", "plot", "(", "x_history", ".", "history", "[", "\"accuracy\"", "]", ",", "label", "=", "\"Training acc\"", ")", "\n", "ax1", ".", "set_ylabel", "(", "\"Accuracy\"", ")", "\n", "ax1", ".", "set_ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "ax1", ".", "set_xlabel", "(", "\"Epoch\"", ")", "\n", "ax1", ".", "legend", "(", ")", "\n", "\n", "ax2", ".", "plot", "(", "x_history", ".", "history", "[", "\"val_loss\"", "]", ",", "label", "=", "\"Val. loss\"", ")", "\n", "ax2", ".", "plot", "(", "x_history", ".", "history", "[", "\"loss\"", "]", ",", "label", "=", "\"Training loss\"", ")", "\n", "ax2", ".", "set_ylabel", "(", "\"Loss\"", ")", "\n", "#ax2.set_ylim(top=5.5)", "\n", "ax2", ".", "set_xlabel", "(", "\"Epoch\"", ")", "\n", "ax2", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "\"results/AR-SpeechCommands\"", "+", "\"_eps\"", "+", "eps", "+", "\"_map\"", "+", "map_num", "+", "\"_.png\"", ")", "#PadCenter/", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.utils.plot_confusion_matrix": [[125, 169], ["print", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.imshow", "mpl_toolkits.axes_grid1.make_axes_locatable", "mpl_toolkits.axes_grid1.make_axes_locatable.append_axes", "matplotlib.colorbar", "fig.add_subplot.set_title", "numpy.arange", "fig.add_subplot.set_xticks", "fig.add_subplot.set_yticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "matplotlib.setp", "itertools.product", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_xlabel", "matplotlib.tight_layout", "print", "print", "len", "fig.add_subplot.get_xticklabels", "matplotlib.max", "range", "range", "fig.add_subplot.text", "matplotlib.astype", "format", "matplotlib.sum"], "function", ["None"], ["", "def", "plot_confusion_matrix", "(", "cm", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "", "print", "(", "cm", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "\n", "divider", "=", "make_axes_locatable", "(", "ax", ")", "\n", "cax", "=", "divider", ".", "append_axes", "(", "\"right\"", ",", "size", "=", "\"5%\"", ",", "pad", "=", "0.05", ")", "\n", "plt", ".", "colorbar", "(", "im", ",", "cax", "=", "cax", ")", "\n", "\n", "ax", ".", "set_title", "(", "title", ",", "fontsize", "=", "'large'", ")", "\n", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "ax", ".", "set_xticks", "(", "tick_marks", ")", "\n", "ax", ".", "set_yticks", "(", "tick_marks", ")", "\n", "\n", "ax", ".", "set_xticklabels", "(", "classes", ")", "\n", "ax", ".", "set_yticklabels", "(", "classes", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "rotation", "=", "45", ",", "ha", "=", "\"right\"", ",", "rotation_mode", "=", "\"anchor\"", ")", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "ax", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "ax", ".", "set_ylabel", "(", "'True label'", ")", "\n", "ax", ".", "set_xlabel", "(", "'Predicted label'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.main.main": [[20, 105], ["ts_dataloader.load_data", "ts_dataloader.load_data", "ts_dataloader.load_data", "numpy.unique", "rnd.shuffle", "numpy.concatenate", "numpy.concatenate", "keras.utils.to_categorical.extend", "keras.utils.to_categorical.extend", "numpy.append", "len", "ts_dataloader.DataGenerator", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "print", "ts_model.AttRNN_Model", "ts_model.WARTmodel", "tensorflow.keras.optimizers.Adam", "ts_model.WARTmodel.compile", "funcs.LR_Warmup", "tensorflow.keras.callbacks.ModelCheckpoint", "funcs.EarlyStopping", "ts_model.WARTmodel.summary", "ts_model.WARTmodel.fit", "ts_model.WARTmodel.evaluate", "print", "print", "ts_dataloader.load_data", "os.path.exists", "os.makedirs", "enumerate", "print", "exit", "str", "rnd.random", "np.append.tolist", "str"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.AttRNN_Model", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.WARTmodel", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data"], ["def", "main", "(", "args", ",", "rnd", ")", ":", "\n", "\n", "    ", "train_csv", "=", "'Datasets/LT-SCR/train_limit20.csv'", "\n", "dev_csv", "=", "'Datasets/LT-SCR/dev_full.csv'", "\n", "test_csv", "=", "'Datasets/LT-SCR/test_full.csv'", "\n", "\n", "noise_csv", "=", "'Datasets/LT-SCR/noise_full.csv'", "\n", "\n", "x_train", ",", "y_train", "=", "load_data", "(", "train_csv", ",", "rnd", ")", "\n", "x_dev", ",", "y_dev", "=", "load_data", "(", "dev_csv", ",", "rnd", ")", "\n", "x_test", ",", "y_test", "=", "load_data", "(", "test_csv", ",", "rnd", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "y_train", ")", "\n", "\n", "bg_audio", "=", "load_data", "(", "noise_csv", ",", "rnd", ")", "[", "0", "]", "\n", "bg_audio", "=", "[", "noise", "*", "rnd", ".", "random", "(", ")", "*", "0.1", "for", "noise", "in", "bg_audio", "]", "\n", "\n", "rnd", ".", "shuffle", "(", "bg_audio", ")", "\n", "x_test", "=", "np", ".", "concatenate", "(", "(", "x_test", ",", "bg_audio", "[", ":", "10", "]", ")", ",", "axis", "=", "0", ")", "\n", "x_dev", "=", "np", ".", "concatenate", "(", "(", "x_dev", ",", "bg_audio", "[", "10", ":", "20", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_test", ".", "extend", "(", "[", "\"silence\"", "]", "*", "10", ")", "\n", "y_dev", ".", "extend", "(", "[", "\"silence\"", "]", "*", "10", ")", "\n", "\n", "classes", "=", "np", ".", "append", "(", "classes", ",", "[", "\"silence\"", "]", ")", "\n", "\n", "cls2label", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "classes", ".", "tolist", "(", ")", ")", "}", "\n", "num_classes", "=", "len", "(", "classes", ")", "\n", "\n", "train_generator", "=", "DataGenerator", "(", "x_train", ",", "y_train", ",", "bg_audio", "[", "20", ":", "]", ",", "cls2label", ",", "rnd", ")", "\n", "y_dev", "=", "[", "cls2label", "[", "y", "]", "for", "y", "in", "y_dev", "]", "\n", "y_test", "=", "[", "cls2label", "[", "y", "]", "for", "y", "in", "y_test", "]", "\n", "y_dev", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_dev", ",", "num_classes", "=", "num_classes", ")", "\n", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "print", "(", "\"--- X shape : \"", ",", "x_train", "[", "0", "]", ".", "shape", ",", "\"--- Num of Classes : \"", ",", "num_classes", ")", "## target class", "\n", "\n", "\n", "## Pre-trained Model for Adv Program  ", "\n", "pr_model", "=", "AttRNN_Model", "(", ")", "\n", "\n", "## # of Source classes in Pre-trained Model", "\n", "source_classes", "=", "36", "## Google Speech Commands", "\n", "\n", "target_shape", "=", "(", "x_train", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "## Adv Program Time Series (ART)", "\n", "mapping_num", "=", "args", ".", "mapping", "\n", "try", ":", "\n", "        ", "assert", "mapping_num", "*", "num_classes", "<=", "source_classes", "\n", "", "except", "AssertionError", ":", "\n", "        ", "print", "(", "\"Error: The mapping num should be smaller than source_classes / num_classes: {}\"", ".", "format", "(", "source_classes", "//", "num_classes", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "model", "=", "WARTmodel", "(", "target_shape", ",", "pr_model", ",", "source_classes", ",", "mapping_num", ",", "num_classes", ",", "args", ".", "dropout", ")", "\n", "\n", "## Loss", "\n", "adam", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "lr_scheduler", "=", "LR_Warmup", "(", "lr_base", "=", "args", ".", "lr", ",", "decay", "=", "args", ".", "lr_decay", ",", "warmup_epochs", "=", "20", ")", "\n", "\n", "save_path", "=", "\"LT-SCR/weight/\"", "+", "str", "(", "args", ".", "lr", ")", "+", "\"-\"", "+", "str", "(", "args", ".", "lr_decay", ")", "+", "\"-{epoch:02d}-{val_loss:.4f}-{val_accuracy:.4f}.h5\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'LT-SCR/weight'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'LT-SCR/weight'", ")", "\n", "\n", "\n", "", "checkpoints", "=", "tf", ".", "keras", ".", "callbacks", ".", "ModelCheckpoint", "(", "save_path", ",", "monitor", "=", "'val_accuracy'", ",", "save_weights_only", "=", "True", ",", "save_best_only", "=", "True", ")", "\n", "earlystop", "=", "EarlyStopping", "(", "monitor", "=", "'val_accuracy'", ",", "patience", "=", "10", ",", "start_epoch", "=", "70", ",", "restore_best_weights", "=", "True", ")", "\n", "exp_callback", "=", "[", "earlystop", ",", "lr_scheduler", ",", "checkpoints", "]", "\n", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "batch_size", "=", "32", "\n", "epochs", "=", "args", ".", "eps", "\n", "exp_history", "=", "model", ".", "fit", "(", "train_generator", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "verbose", "=", "1", ",", "\n", "validation_data", "=", "(", "x_dev", ",", "y_dev", ")", ",", "callbacks", "=", "exp_callback", ")", "\n", "\n", "\n", "score", "=", "model", ".", "evaluate", "(", "x_test", ",", "y_test", ",", "verbose", "=", "0", ")", "\n", "print", "(", "'--- Test loss:'", ",", "score", "[", "0", "]", ")", "\n", "print", "(", "'- Test accuracy:'", ",", "score", "[", "1", "]", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__init__": [[32, 51], ["list", "list", "ts_dataloader.DataGenerator._split_unknown", "list", "ts_dataloader.DataGenerator.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator._split_unknown", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.on_epoch_end"], ["    ", "def", "__init__", "(", "self", ",", "datas", ",", "labels", ",", "bg_audio", ",", "classes", ",", "rnd", ",", "batch_size", "=", "32", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "unknowns", "=", "list", "(", ")", "\n", "self", ".", "commands", "=", "list", "(", ")", "\n", "\n", "self", ".", "_split_unknown", "(", "datas", ",", "labels", ")", "\n", "\n", "self", ".", "datas", "=", "list", "(", ")", "\n", "\n", "self", ".", "bg_audio", "=", "bg_audio", "\n", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "add_noise", "=", "\"silence\"", "in", "self", ".", "classes", "\n", "\n", "self", ".", "rnd", "=", "rnd", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator._split_unknown": [[52, 58], ["zip", "ts_dataloader.DataGenerator.unknowns.append", "ts_dataloader.DataGenerator.commands.append"], "methods", ["None"], ["", "def", "_split_unknown", "(", "self", ",", "datas", ",", "labels", ")", ":", "\n", "        ", "for", "wav", ",", "label", "in", "zip", "(", "datas", ",", "labels", ")", ":", "\n", "            ", "if", "label", "==", "\"unknown\"", ":", "\n", "                ", "self", ".", "unknowns", ".", "append", "(", "(", "wav", ",", "label", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "commands", ".", "append", "(", "(", "wav", ",", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__len__": [[59, 61], ["int", "numpy.floor", "len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "floor", "(", "len", "(", "self", ".", "datas", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__getitem__": [[62, 72], ["list", "ts_dataloader.DataGenerator.__data_generation", "list.append"], "methods", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__data_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "indexes", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "batch", "=", "list", "(", ")", "\n", "for", "k", "in", "indexes", ":", "\n", "            ", "batch", ".", "append", "(", "self", ".", "datas", "[", "k", "]", ")", "\n", "\n", "", "X", ",", "y", "=", "self", ".", "__data_generation", "(", "batch", ")", "\n", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.on_epoch_end": [[73, 106], ["list", "range", "numpy.arange", "ts_dataloader.DataGenerator.rnd.random", "len", "ts_dataloader.DataGenerator.rnd.shuffle", "ts_dataloader.DataGenerator.rnd.choice", "ts_dataloader.DataGenerator.datas.append", "len", "ts_dataloader.DataGenerator.rnd.choice", "ts_dataloader.DataGenerator.datas.append", "ts_dataloader.DataGenerator.rnd.choice", "ts_dataloader.DataGenerator.datas.append", "len", "len"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "datas", "=", "list", "(", ")", "\n", "\"\"\"\n        self.datas.extend(self.commands)\n        \n        for _ in range(int(len(self.commands)*0.1)):\n            unk = np.random.choice(len(self.unknowns))\n            unknown = self.unknowns[unk]\n            self.datas.append(unknown)\n            \n            if self.add_noise:\n                sil = np.random.choice(len(self.bg_audio))\n                silence = self.bg_audio[sil]\n                self.datas.append((silence, \"silence\"))\n        \"\"\"", "\n", "for", "_", "in", "range", "(", "self", ".", "batch_size", "*", "7", ")", ":", "\n", "            ", "coin", "=", "self", ".", "rnd", ".", "random", "(", ")", "\n", "if", "coin", "<", "0.1", ":", "\n", "                ", "unk", "=", "self", ".", "rnd", ".", "choice", "(", "len", "(", "self", ".", "unknowns", ")", ")", "\n", "unknown", "=", "self", ".", "unknowns", "[", "unk", "]", "\n", "self", ".", "datas", ".", "append", "(", "unknown", ")", "\n", "", "elif", "coin", "<", "0.15", ":", "\n", "                ", "sil", "=", "self", ".", "rnd", ".", "choice", "(", "len", "(", "self", ".", "bg_audio", ")", ")", "\n", "silence", "=", "self", ".", "bg_audio", "[", "sil", "]", "\n", "self", ".", "datas", ".", "append", "(", "(", "silence", ",", "\"silence\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "com", "=", "self", ".", "rnd", ".", "choice", "(", "len", "(", "self", ".", "commands", ")", ")", "\n", "command", "=", "self", ".", "commands", "[", "com", "]", "\n", "self", ".", "datas", ".", "append", "(", "command", ")", "\n", "\n", "", "", "self", ".", "indexes", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "datas", ")", ")", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "self", ".", "rnd", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.DataGenerator.__data_generation": [[107, 117], ["numpy.array", "X.reshape.reshape.reshape", "list", "list", "X.reshape.reshape.append", "y.append", "tensorflow.keras.utils.to_categorical", "len"], "methods", ["None"], ["", "", "def", "__data_generation", "(", "self", ",", "batch", ")", ":", "\n", "        ", "X", ",", "y", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "wav", ",", "label", "in", "batch", ":", "\n", "            ", "X", ".", "append", "(", "wav", ")", "\n", "y", ".", "append", "(", "self", ".", "classes", "[", "label", "]", ")", "\n", "\n", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X", "=", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "\n", "return", "X", ",", "keras", ".", "utils", ".", "to_categorical", "(", "y", ",", "num_classes", "=", "len", "(", "self", ".", "classes", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.ts_dataloader.load_data": [[9, 29], ["pandas.read_csv", "data_df[].tolist", "data_df[].to_list", "zip", "list", "list", "soundfile.read", "y.append", "numpy.array", "numpy.abs().max", "librosa.resample", "rnd.choice", "x.append", "x.append", "numpy.pad", "numpy.abs", "len"], "function", ["None"], ["def", "load_data", "(", "data_csv", ",", "rnd", ")", ":", "\n", "    ", "data_df", "=", "pd", ".", "read_csv", "(", "data_csv", ",", "sep", "=", "'\\t'", ")", "\n", "wavpath", "=", "data_df", "[", "'filename'", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "data_df", "[", "'label'", "]", ".", "to_list", "(", ")", "\n", "\n", "x", ",", "y", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "wav", ",", "label", "in", "zip", "(", "wavpath", ",", "labels", ")", ":", "\n", "        ", "stereo", ",", "fs", "=", "sound", ".", "read", "(", "wav", ")", "\n", "stereo", "=", "stereo", "/", "np", ".", "abs", "(", "stereo", ")", ".", "max", "(", ")", "\n", "if", "fs", "!=", "sr", ":", "\n", "            ", "stereo", "=", "librosa", ".", "resample", "(", "stereo", ",", "fs", ",", "sr", ")", "\n", "", "if", "stereo", ".", "shape", "[", "0", "]", ">", "sr", ":", "\n", "            ", "start", "=", "rnd", ".", "choice", "(", "len", "(", "stereo", ")", "-", "sr", "+", "1", ")", "\n", "x", ".", "append", "(", "stereo", "[", "start", ":", "start", "+", "sr", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", ".", "append", "(", "np", ".", "pad", "(", "stereo", ",", "(", "0", ",", "sr", "-", "stereo", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "y", ".", "append", "(", "label", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "x", ")", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.LT-SCR.make_data.which_set": [[17, 30], ["re.sub", "hashlib.sha1().hexdigest", "hashlib.sha1", "int", "re.sub.encode"], "function", ["None"], ["def", "which_set", "(", "fname", ",", "dev_percentage", "=", "10.", ",", "test_percentage", "=", "10.", ")", ":", "\n", "    ", "\"\"\"\n    See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/speech_commands/input_data.py#L70\n    \"\"\"", "\n", "base_name", "=", "fname", "\n", "hash_name", "=", "re", ".", "sub", "(", "r'_nohash_.*$'", ",", "''", ",", "base_name", ")", "\n", "hash_name_hashed", "=", "hashlib", ".", "sha1", "(", "hash_name", ".", "encode", "(", "'UTF-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "percentage_hash", "=", "(", "(", "int", "(", "hash_name_hashed", ",", "16", ")", "%", "(", "MAX_NUM_WAVS_PER_CLASS", "+", "1", ")", ")", "*", "(", "100.0", "/", "MAX_NUM_WAVS_PER_CLASS", ")", ")", "\n", "if", "percentage_hash", "<", "dev_percentage", ":", "\n", "        ", "return", "\"DEV\"", "\n", "", "if", "percentage_hash", "<", "dev_percentage", "+", "test_percentage", ":", "\n", "        ", "return", "\"TEST\"", "\n", "", "return", "\"TRAIN\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.DM-SCR.main.main": [[20, 86], ["ts_dataloader.load_data", "ts_dataloader.load_data", "numpy.unique", "len", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "print", "ts_model.AttRNN_Model", "ts_model.WARTmodel", "tensorflow.keras.optimizers.Adam", "ts_model.WARTmodel.compile", "funcs.LR_Warmup", "tensorflow.keras.callbacks.ModelCheckpoint", "ts_model.WARTmodel.summary", "ts_model.WARTmodel.fit", "ts_model.WARTmodel.evaluate", "print", "print", "os.path.exists", "os.makedirs", "enumerate", "print", "exit", "str", "np.unique.tolist", "str"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.AttRNN_Model", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.WARTmodel"], ["def", "main", "(", "args", ",", "rnd", ")", ":", "\n", "\n", "    ", "train_csv", "=", "'Datasets/LT-SCR/train_limit20.csv'", "\n", "dev_csv", "=", "'Datasets/LT-SCR/dev_full.csv'", "\n", "test_csv", "=", "'Datasets/LT-SCR/test_full.csv'", "\n", "\n", "noise_csv", "=", "'Datasets/LT-SCR/noise_full.csv'", "\n", "\n", "x_train", ",", "y_train", "=", "load_data", "(", "train_csv", ",", "rnd", ")", "\n", "x_dev", ",", "y_dev", "=", "load_data", "(", "dev_csv", ",", "rnd", ")", "\n", "x_test", ",", "y_test", "=", "load_data", "(", "test_csv", ",", "rnd", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "y_train", ")", "\n", "\n", "bg_audio", "=", "load_data", "(", "noise_csv", ",", "rnd", ")", "[", "0", "]", "\n", "bg_audio", "=", "[", "noise", "*", "rnd", ".", "random", "(", ")", "*", "0.1", "for", "noise", "in", "bg_audio", "]", "\n", "\n", "rnd", ".", "shuffle", "(", "bg_audio", ")", "\n", "x_test", "=", "np", ".", "concatenate", "(", "(", "x_test", ",", "bg_audio", "[", ":", "10", "]", ")", ",", "axis", "=", "0", ")", "\n", "x_dev", "=", "np", ".", "concatenate", "(", "(", "x_dev", ",", "bg_audio", "[", "10", ":", "20", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_test", ".", "extend", "(", "[", "\"silence\"", "]", "*", "10", ")", "\n", "y_dev", ".", "extend", "(", "[", "\"silence\"", "]", "*", "10", ")", "\n", "\n", "classes", "=", "np", ".", "append", "(", "classes", ",", "[", "\"silence\"", "]", ")", "\n", "\n", "cls2label", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "classes", ".", "tolist", "(", ")", ")", "}", "\n", "num_classes", "=", "len", "(", "classes", ")", "\n", "\n", "train_generator", "=", "DataGenerator", "(", "x_train", ",", "y_train", ",", "bg_audio", "[", "20", ":", "]", ",", "cls2label", ",", "rnd", ")", "\n", "y_dev", "=", "[", "cls2label", "[", "y", "]", "for", "y", "in", "y_dev", "]", "\n", "y_test", "=", "[", "cls2label", "[", "y", "]", "for", "y", "in", "y_test", "]", "\n", "y_dev", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_dev", ",", "num_classes", "=", "num_classes", ")", "\n", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "print", "(", "\"--- X shape : \"", ",", "x_train", "[", "0", "]", ".", "shape", ",", "\"--- Num of Classes : \"", ",", "num_classes", ")", "## target class", "\n", "\n", "\n", "## Pre-trained Model for Adv Program  ", "\n", "pr_model", "=", "AttRNN_Model", "(", ")", "\n", "\n", "## # of Source classes in Pre-trained Model", "\n", "source_classes", "=", "36", "## Google Speech Commands", "\n", "\n", "target_shape", "=", "(", "x_train", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "## Adv Program Time Series (ART)", "\n", "mapping_num", "=", "args", ".", "mapping", "\n", "try", ":", "\n", "        ", "assert", "mapping_num", "*", "num_classes", "<=", "source_classes", "\n", "", "except", "AssertionError", ":", "\n", "        ", "print", "(", "\"Error: The mapping num should be smaller than source_classes / num_classes: {}\"", ".", "format", "(", "source_classes", "//", "num_classes", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "model", "=", "WARTmodel", "(", "target_shape", ",", "pr_model", ",", "source_classes", ",", "mapping_num", ",", "num_classes", ",", "args", ".", "dropout", ")", "\n", "\n", "## Loss", "\n", "adam", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "lr_scheduler", "=", "LR_Warmup", "(", "lr_base", "=", "args", ".", "lr", ",", "decay", "=", "args", ".", "lr_decay", ",", "warmup_epochs", "=", "20", ")", "\n", "\n", "save_path", "=", "\"LT-SCR/weight/\"", "+", "str", "(", "args", ".", "lr", ")", "+", "\"-\"", "+", "str", "(", "args", ".", "lr_decay", ")", "+", "\"-{epoch:02d}-{val_loss:.4f}-{val_accuracy:.4f}.h5\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'LT-SCR/weight'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'LT-SCR/weight'", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.DM-SCR.ts_dataloader.load_data": [[9, 32], ["pandas.read_csv", "data_df[].tolist", "data_df[].to_list", "zip", "list", "list", "soundfile.read", "librosa.effects.trim", "y.append", "numpy.array", "numpy.array", "librosa.resample", "x.append", "x.append", "numpy.pad"], "function", ["None"], ["def", "load_data", "(", "data_csv", ",", "rnd", ")", ":", "\n", "    ", "data_df", "=", "pd", ".", "read_csv", "(", "data_csv", ",", "sep", "=", "'\\t'", ")", "\n", "wavpath", "=", "data_df", "[", "'filename'", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "data_df", "[", "'label'", "]", ".", "to_list", "(", ")", "\n", "\n", "x", ",", "y", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "wav", ",", "label", "in", "zip", "(", "wavpath", ",", "labels", ")", ":", "\n", "        ", "stereo", ",", "fs", "=", "sound", ".", "read", "(", "wav", ")", "\n", "stereo", "=", "stereo", "/", "np", ".", "abs", "(", "stereo", ")", ".", "max", "(", ")", "\n", "if", "fs", "!=", "sr", ":", "\n", "            ", "stereo", "=", "librosa", ".", "resample", "(", "stereo", ",", "fs", ",", "sr", ")", "\n", "", "if", "stereo", ".", "shape", "[", "0", "]", ">", "sr", ":", "\n", "            ", "start", "=", "rnd", ".", "choice", "(", "len", "(", "stereo", ")", "-", "sr", "+", "1", ")", "\n", "x", ".", "append", "(", "stereo", "[", "start", ":", "start", "+", "sr", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", ".", "append", "(", "np", ".", "pad", "(", "stereo", ",", "(", "0", ",", "sr", "-", "stereo", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "y", ".", "append", "(", "label", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "x", ")", ",", "y", "\n", "\n", "\n", "", "class", "DataGenerator", "(", "keras", ".", "utils", ".", "Sequence", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "datas", ",", "labels", ",", "bg_audio", ",", "classes", ",", "rnd", ",", "batch_size", "=", "32", ",", "shuffle", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.main.main": [[19, 91], ["ts_dataloader.load_data", "ts_dataloader.load_data", "ts_dataloader.load_data", "numpy.unique", "len", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "print", "ts_model.AttRNN_Model", "ts_model.WARTmodel", "tensorflow.keras.optimizers.Adam", "ts_model.WARTmodel.compile", "tensorflow.keras.callbacks.ModelCheckpoint", "funcs.EarlyStopping", "ts_model.WARTmodel.summary", "ts_model.WARTmodel.fit", "ts_model.WARTmodel.evaluate", "print", "print", "os.path.exists", "os.makedirs", "enumerate", "print", "exit", "str", "np.unique.tolist"], "function", ["home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.AttRNN_Model", "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.None.ts_model.WARTmodel"], ["\n", "def", "main", "(", "args", ",", "rnd", ")", ":", "\n", "\n", "    ", "train_csv", "=", "'Datasets/LT-SCR/train_limit20.csv'", "\n", "dev_csv", "=", "'Datasets/LT-SCR/dev_full.csv'", "\n", "test_csv", "=", "'Datasets/LT-SCR/test_full.csv'", "\n", "\n", "noise_csv", "=", "'Datasets/LT-SCR/noise_full.csv'", "\n", "\n", "x_train", ",", "y_train", "=", "load_data", "(", "train_csv", ",", "rnd", ")", "\n", "x_dev", ",", "y_dev", "=", "load_data", "(", "dev_csv", ",", "rnd", ")", "\n", "x_test", ",", "y_test", "=", "load_data", "(", "test_csv", ",", "rnd", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "y_train", ")", "\n", "\n", "bg_audio", "=", "load_data", "(", "noise_csv", ",", "rnd", ")", "[", "0", "]", "\n", "bg_audio", "=", "[", "noise", "*", "rnd", ".", "random", "(", ")", "*", "0.1", "for", "noise", "in", "bg_audio", "]", "\n", "\n", "rnd", ".", "shuffle", "(", "bg_audio", ")", "\n", "x_test", "=", "np", ".", "concatenate", "(", "(", "x_test", ",", "bg_audio", "[", ":", "10", "]", ")", ",", "axis", "=", "0", ")", "\n", "x_dev", "=", "np", ".", "concatenate", "(", "(", "x_dev", ",", "bg_audio", "[", "10", ":", "20", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_test", ".", "extend", "(", "[", "\"silence\"", "]", "*", "10", ")", "\n", "y_dev", ".", "extend", "(", "[", "\"silence\"", "]", "*", "10", ")", "\n", "\n", "classes", "=", "np", ".", "append", "(", "classes", ",", "[", "\"silence\"", "]", ")", "\n", "\n", "cls2label", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "classes", ".", "tolist", "(", ")", ")", "}", "\n", "num_classes", "=", "len", "(", "classes", ")", "\n", "\n", "train_generator", "=", "DataGenerator", "(", "x_train", ",", "y_train", ",", "bg_audio", "[", "20", ":", "]", ",", "cls2label", ",", "rnd", ")", "\n", "y_dev", "=", "[", "cls2label", "[", "y", "]", "for", "y", "in", "y_dev", "]", "\n", "y_test", "=", "[", "cls2label", "[", "y", "]", "for", "y", "in", "y_test", "]", "\n", "y_dev", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_dev", ",", "num_classes", "=", "num_classes", ")", "\n", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "print", "(", "\"--- X shape : \"", ",", "x_train", "[", "0", "]", ".", "shape", ",", "\"--- Num of Classes : \"", ",", "num_classes", ")", "## target class", "\n", "\n", "\n", "## Pre-trained Model for Adv Program  ", "\n", "pr_model", "=", "AttRNN_Model", "(", ")", "\n", "\n", "## # of Source classes in Pre-trained Model", "\n", "source_classes", "=", "36", "## Google Speech Commands", "\n", "\n", "target_shape", "=", "(", "x_train", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "## Adv Program Time Series (ART)", "\n", "mapping_num", "=", "args", ".", "mapping", "\n", "try", ":", "\n", "        ", "assert", "mapping_num", "*", "num_classes", "<=", "source_classes", "\n", "", "except", "AssertionError", ":", "\n", "        ", "print", "(", "\"Error: The mapping num should be smaller than source_classes / num_classes: {}\"", ".", "format", "(", "source_classes", "//", "num_classes", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "model", "=", "WARTmodel", "(", "target_shape", ",", "pr_model", ",", "source_classes", ",", "mapping_num", ",", "num_classes", ",", "args", ".", "dropout", ")", "\n", "\n", "## Loss", "\n", "adam", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "lr_scheduler", "=", "LR_Warmup", "(", "lr_base", "=", "args", ".", "lr", ",", "decay", "=", "args", ".", "lr_decay", ",", "warmup_epochs", "=", "20", ")", "\n", "\n", "save_path", "=", "\"LT-SCR/weight/\"", "+", "str", "(", "args", ".", "lr", ")", "+", "\"-\"", "+", "str", "(", "args", ".", "lr_decay", ")", "+", "\"-{epoch:02d}-{val_loss:.4f}-{val_accuracy:.4f}.h5\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'LT-SCR/weight'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'LT-SCR/weight'", ")", "\n", "\n", "\n", "", "checkpoints", "=", "tf", ".", "keras", ".", "callbacks", ".", "ModelCheckpoint", "(", "save_path", ",", "monitor", "=", "'val_accuracy'", ",", "save_weights_only", "=", "True", ",", "save_best_only", "=", "True", ")", "\n", "earlystop", "=", "EarlyStopping", "(", "monitor", "=", "'val_accuracy'", ",", "patience", "=", "10", ",", "start_epoch", "=", "70", ",", "restore_best_weights", "=", "True", ")", "\n", "exp_callback", "=", "[", "earlystop", ",", "lr_scheduler", ",", "checkpoints", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.dodohow1011_speechadvreprogram.AR-SCR.ts_dataloader.load_data": [[12, 33], ["pandas.read_csv", "data_df[].tolist", "data_df[].to_list", "zip", "list", "list", "soundfile.read", "y.append", "numpy.array", "numpy.abs().max", "librosa.resample", "numpy.random.choice", "x.append", "x.append", "numpy.pad", "numpy.abs", "len"], "function", ["None"], ["labels", "=", "data_df", "[", "'label'", "]", ".", "to_list", "(", ")", "\n", "\n", "x", ",", "y", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "wav", ",", "label", "in", "zip", "(", "wavpath", ",", "labels", ")", ":", "\n", "        ", "stereo", ",", "fs", "=", "sound", ".", "read", "(", "wav", ")", "\n", "stereo", "=", "stereo", "/", "np", ".", "abs", "(", "stereo", ")", ".", "max", "(", ")", "\n", "if", "fs", "!=", "sr", ":", "\n", "            ", "stereo", "=", "librosa", ".", "resample", "(", "stereo", ",", "fs", ",", "sr", ")", "\n", "", "if", "stereo", ".", "shape", "[", "0", "]", ">", "sr", ":", "\n", "            ", "start", "=", "rnd", ".", "choice", "(", "len", "(", "stereo", ")", "-", "sr", "+", "1", ")", "\n", "x", ".", "append", "(", "stereo", "[", "start", ":", "start", "+", "sr", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", ".", "append", "(", "np", ".", "pad", "(", "stereo", ",", "(", "0", ",", "sr", "-", "stereo", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "y", ".", "append", "(", "label", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "x", ")", ",", "y", "\n", "\n", "\n", "", "class", "DataGenerator", "(", "keras", ".", "utils", ".", "Sequence", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "datas", ",", "labels", ",", "bg_audio", ",", "classes", ",", "rnd", ",", "batch_size", "=", "32", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "unknowns", "=", "list", "(", ")", "\n"]]}