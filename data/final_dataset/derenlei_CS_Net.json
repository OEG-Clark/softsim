{"home.repos.pwc.inspect_result.derenlei_CS_Net.None.greedy.greedy": [[11, 75], ["range", "len", "purchase_list.append", "purchase_list.append", "purchase_list.append", "grenades_start.append", "purchase_list.append", "purchase_list.append", "purchase_list.append", "purchase_list.append", "grenades_start.count", "purchase_list.append"], "function", ["None"], ["def", "greedy", "(", "is_terrorist", ",", "weapons", ",", "money", ",", "w_attr", ",", "grenades", ",", "weapon_index", ")", ":", "\n", "# current weapons", "\n", "    ", "grenades_start", "=", "[", "]", "\n", "primary_weapon_start", "=", "None", "\n", "for", "weapon", "in", "weapons", ":", "\n", "        ", "if", "1", "<=", "w_attr", "[", "\"type\"", "]", "[", "weapon", "]", "<=", "5", ":", "\n", "            ", "primary_weapon_start", "=", "weapon", "\n", "", "if", "w_attr", "[", "\"type\"", "]", "[", "weapon", "]", "==", "6", ":", "\n", "            ", "grenades_start", ".", "append", "(", "weapon", ")", "\n", "\n", "", "", "purchase_list", "=", "[", "]", "\n", "# Buy primary weapon", "\n", "max_price", "=", "0", "\n", "max_price_weapon", "=", "primary_weapon_start", "\n", "for", "w", "in", "range", "(", "44", ")", ":", "\n", "        ", "if", "1", "<=", "w_attr", "[", "\"type\"", "]", "[", "w", "]", "<=", "5", "and", "max_price", "<", "w_attr", "[", "\"price\"", "]", "[", "w", "]", "<=", "money", ":", "\n", "            ", "if", "is_terrorist", "and", "w_attr", "[", "\"t\"", "]", "[", "w", "]", "==", "1", ":", "\n", "                ", "max_price", "=", "w_attr", "[", "\"price\"", "]", "[", "w", "]", "\n", "max_price_weapon", "=", "w", "\n", "", "if", "not", "is_terrorist", "and", "w_attr", "[", "\"ct\"", "]", "[", "w", "]", "==", "1", ":", "\n", "                ", "max_price", "=", "w_attr", "[", "\"price\"", "]", "[", "w", "]", "\n", "max_price_weapon", "=", "w", "\n", "", "", "", "if", "max_price_weapon", "is", "not", "None", ":", "\n", "        ", "money", "-=", "max_price", "\n", "purchase_list", ".", "append", "(", "max_price_weapon", ")", "\n", "\n", "# Buy Grenades (max 4)", "\n", "", "cnt", "=", "len", "(", "grenades_start", ")", "\n", "for", "g", "in", "grenades", ":", "\n", "        ", "if", "cnt", "==", "4", ":", "\n", "            ", "break", "\n", "", "if", "g", "not", "in", "grenades_start", "and", "w_attr", "[", "\"price\"", "]", "[", "g", "]", "<=", "money", ":", "\n", "            ", "if", "is_terrorist", "and", "w_attr", "[", "\"t\"", "]", "[", "g", "]", "==", "1", ":", "\n", "                ", "money", "-=", "w_attr", "[", "\"price\"", "]", "[", "g", "]", "\n", "purchase_list", ".", "append", "(", "g", ")", "\n", "cnt", "+=", "1", "\n", "", "if", "not", "is_terrorist", "and", "w_attr", "[", "\"ct\"", "]", "[", "g", "]", "==", "1", ":", "\n", "                ", "money", "-=", "w_attr", "[", "\"price\"", "]", "[", "g", "]", "\n", "purchase_list", ".", "append", "(", "g", ")", "\n", "cnt", "+=", "1", "\n", "# 2 Flashbang", "\n", "", "", "if", "cnt", "<", "4", "and", "g", "==", "weapon_index", "[", "\"Flashbang\"", "]", "and", "grenades_start", ".", "count", "(", "weapon_index", "[", "\"Flashbang\"", "]", ")", "==", "1", ":", "\n", "            ", "money", "-=", "w_attr", "[", "\"price\"", "]", "[", "g", "]", "\n", "purchase_list", ".", "append", "(", "g", ")", "\n", "cnt", "+=", "1", "\n", "\n", "# Buy Equipments", "\n", "", "", "if", "weapon_index", "[", "\"vest\"", "]", "not", "in", "weapons", ":", "\n", "        ", "if", "money", ">=", "w_attr", "[", "\"price\"", "]", "[", "weapon_index", "[", "\"vesthelm\"", "]", "]", ":", "\n", "            ", "money", "-=", "w_attr", "[", "\"price\"", "]", "[", "weapon_index", "[", "\"vesthelm\"", "]", "]", "\n", "purchase_list", ".", "append", "(", "weapon_index", "[", "\"vesthelm\"", "]", ")", "\n", "", "elif", "money", ">=", "weapon_index", "[", "\"vest\"", "]", ":", "\n", "            ", "money", "-=", "weapon_index", "[", "\"vest\"", "]", "\n", "purchase_list", ".", "append", "(", "weapon_index", "[", "\"vest\"", "]", ")", "\n", "\n", "", "", "if", "not", "is_terrorist", "and", "weapon_index", "[", "\"defuser\"", "]", "not", "in", "weapons", "and", "money", ">=", "w_attr", "[", "\"price\"", "]", "[", "weapon_index", "[", "\"defuser\"", "]", "]", ":", "\n", "        ", "money", "-=", "w_attr", "[", "\"price\"", "]", "[", "weapon_index", "[", "\"defuser\"", "]", "]", "\n", "purchase_list", ".", "append", "(", "weapon_index", "[", "\"defuser\"", "]", ")", "\n", "\n", "", "if", "weapon_index", "[", "\"Zeus x27\"", "]", "not", "in", "weapons", "and", "money", ">=", "w_attr", "[", "\"price\"", "]", "[", "weapon_index", "[", "\"Zeus x27\"", "]", "]", ":", "\n", "        ", "money", "-=", "w_attr", "[", "\"price\"", "]", "[", "weapon_index", "[", "\"Zeus x27\"", "]", "]", "\n", "purchase_list", ".", "append", "(", "weapon_index", "[", "\"Zeus x27\"", "]", ")", "\n", "\n", "", "return", "purchase_list", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.None.greedy.process_match_data": [[77, 110], ["enumerate", "greedy.greedy", "src.utils.get_accuracy", "src.utils.get_acc_type", "src.utils.get_finance_diff"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.None.greedy.greedy", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_accuracy", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_acc_type", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_finance_diff"], ["", "def", "process_match_data", "(", "match_data", ",", "weapon_attribute", ",", "grenades", ",", "weapon_index", ",", "weapon_type", ")", ":", "\n", "    ", "f1_accum", "=", "0.0", "\n", "eco_diff_accum", "=", "0.0", "\n", "acc_gun_accum", "=", "0.0", "\n", "acc_grenade_accum", "=", "0.0", "\n", "acc_equip_accum", "=", "0.0", "\n", "round_accum", "=", "0", "\n", "\n", "for", "player_data", "in", "match_data", ":", "\n", "        ", "for", "i", ",", "round_data", "in", "enumerate", "(", "player_data", ")", ":", "\n", "            ", "if", "i", "==", "0", "or", "i", "==", "15", ":", "\n", "                ", "continue", "\n", "", "data", ",", "label", "=", "round_data", "[", "0", "]", ",", "round_data", "[", "1", "]", "\n", "\n", "is_terrorist", "=", "True", "if", "data", "[", "0", "]", "[", "0", "]", "==", "0", "else", "False", "\n", "weapons", "=", "data", "[", "1", "]", "\n", "money", "=", "data", "[", "2", "]", "[", "0", "]", "*", "1000", "\n", "\n", "# print(is_terrorist, weapons, money)       ", "\n", "purchase", "=", "greedy", "(", "is_terrorist", ",", "weapons", ",", "money", ",", "weapon_attribute", ",", "grenades", ",", "weapon_index", ")", "\n", "\n", "f1", "=", "get_accuracy", "(", "purchase", ",", "label", ")", "\n", "acc_type", "=", "get_acc_type", "(", "purchase", ",", "label", ",", "weapon_type", ")", "\n", "eco_diff", "=", "get_finance_diff", "(", "purchase", ",", "label", ",", "money", ",", "weapon_attribute", "[", "\"price\"", "]", ")", "\n", "f1_accum", "+=", "f1", "\n", "eco_diff_accum", "+=", "eco_diff", "\n", "acc_gun_accum", "+=", "acc_type", "[", "0", "]", "\n", "acc_grenade_accum", "+=", "acc_type", "[", "1", "]", "\n", "acc_equip_accum", "+=", "acc_type", "[", "2", "]", "\n", "\n", "round_accum", "+=", "1", "\n", "\n", "", "", "return", "f1_accum", ",", "eco_diff_accum", ",", "acc_gun_accum", ",", "acc_grenade_accum", ",", "acc_equip_accum", ",", "round_accum", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.None.greedy.main": [[111, 157], ["src.preprocess.read_dataset", "numpy.load", "numpy.load", "numpy.load", "range", "grenades.sort", "tqdm.tqdm", "print", "print", "print", "print", "print", "open", "json.load", "greedy.process_match_data", "grenades.append"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.read_dataset", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.greedy.process_match_data"], ["", "def", "main", "(", ")", ":", "\n", "    ", "_", ",", "_", ",", "test_set", "=", "read_dataset", "(", "DATA_DIR", ")", "\n", "\n", "weapon_price", "=", "np", ".", "load", "(", "\"./data/action_money.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "weapon_type", "=", "np", ".", "load", "(", "\"./data/action_type.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "mask", "=", "np", ".", "load", "(", "\"./data/mask.npz\"", ",", "allow_pickle", "=", "True", ")", "\n", "ct_mask", "=", "mask", "[", "\"ct_mask\"", "]", "\n", "t_mask", "=", "mask", "[", "\"t_mask\"", "]", "\n", "\n", "weapon_attribute", "=", "{", "\"price\"", ":", "weapon_price", ",", "\"ct\"", ":", "ct_mask", ",", "\n", "\"t\"", ":", "t_mask", ",", "\"type\"", ":", "weapon_type", "}", "\n", "\n", "with", "open", "(", "\"./data/weapon_index.json\"", ")", "as", "f", ":", "\n", "        ", "weapon_index", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "grenades", "=", "[", "]", "\n", "for", "w", "in", "range", "(", "44", ")", ":", "\n", "        ", "if", "weapon_type", "[", "w", "]", "==", "6", ":", "\n", "            ", "grenades", ".", "append", "(", "w", ")", "\n", "", "", "grenades", ".", "sort", "(", "key", "=", "lambda", "x", ":", "weapon_price", "[", "x", "]", ",", "reverse", "=", "True", ")", "\n", "# print(grenades)", "\n", "\n", "f1_accum", "=", "0.0", "\n", "eco_diff_accum", "=", "0.0", "\n", "acc_gun_accum", "=", "0.0", "\n", "acc_grenade_accum", "=", "0.0", "\n", "acc_equip_accum", "=", "0.0", "\n", "\n", "round_accum", "=", "0", "\n", "for", "data", "in", "tqdm", "(", "test_set", ")", ":", "\n", "        ", "f1", ",", "eco_diff", ",", "acc_gun", ",", "acc_grenade", ",", "acc_equip", ",", "round", "=", "process_match_data", "(", "data", ",", "weapon_attribute", ",", "grenades", ",", "weapon_index", ",", "weapon_type", ")", "\n", "\n", "f1_accum", "+=", "f1", "\n", "eco_diff_accum", "+=", "eco_diff", "\n", "acc_gun_accum", "+=", "acc_gun", "\n", "acc_grenade_accum", "+=", "acc_grenade", "\n", "acc_equip_accum", "+=", "acc_equip", "\n", "\n", "round_accum", "+=", "round", "\n", "\n", "# print(f1_accum, round_accum)", "\n", "", "print", "(", "\"test_set avg f1 score: \"", ",", "f1_accum", "/", "round_accum", ")", "\n", "print", "(", "\"test_set acc gun: \"", ",", "acc_gun_accum", "/", "round_accum", ")", "\n", "print", "(", "\"test_set acc grenade: \"", ",", "acc_grenade_accum", "/", "round_accum", ")", "\n", "print", "(", "\"test_set acc equip: \"", ",", "acc_equip_accum", "/", "round_accum", ")", "\n", "print", "(", "\"test_set eco diff: \"", ",", "eco_diff_accum", "/", "round_accum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.learning_rate_decay": [[23, 26], ["None"], "function", ["None"], ["def", "learning_rate_decay", "(", "meta_optimizer", ",", "meta_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "meta_optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "meta_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.get_optimizer": [[27, 32], ["torch.optim.Adam", "model.parameters", "torch.optim.Adam.load_state_dict"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "args", ",", "model", ",", "state", "=", "None", ")", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0", ",", "0.999", ")", ")", "\n", "if", "state", "is", "not", "None", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "state", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.evaluation": [[33, 127], ["tqdm.tqdm", "numpy.mean", "range", "model.clone", "range", "list", "list", "list", "list", "range", "accuracies.append", "accuracies_type.append", "ecos.append", "bi_accuracies.append", "numpy.mean", "numpy.mean", "numpy.mean", "len", "print", "val_data_current[].tolist().copy", "val_data_current[].tolist", "previous_round.append", "numpy.transpose().tolist", "previous_score.append", "numpy.transpose().tolist", "range", "model.clone.forward", "model.clone.loss", "optimizer.zero_grad", "loss.backward", "optimizer.step", "len", "val_data_current[].tolist().copy", "val_data_current[].tolist", "previous_round.append", "numpy.transpose().tolist", "previous_score.append", "numpy.transpose().tolist", "range", "model.clone.forward", "src.utils.get_batched_acc", "src.utils.get_batched_acc_type", "src.utils.get_batched_binary_acc", "src.utils.get_batched_finance_diff", "list.append", "list.append", "list.append", "list.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "val_data_current[].tolist", "val_data_current[].tolist", "len", "data[].append", "data[].append", "val_data_current[].tolist", "val_data_current[].tolist", "len", "data[].append", "data[].append", "val_data_current[].tolist", "numpy.transpose", "numpy.transpose", "val_data_current[].tolist", "numpy.transpose", "numpy.transpose", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.forward", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.loss", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.forward", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_acc", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_acc_type", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_binary_acc", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_finance_diff"], ["", "def", "evaluation", "(", "model", ",", "optimizer", ",", "k_shot", ",", "val_set", ",", "npy_dict", ",", "gate", ")", ":", "\n", "    ", "losses", "=", "[", "]", "\n", "accuracies", "=", "[", "]", "\n", "accuracies_type", "=", "[", "]", "\n", "bi_accuracies", "=", "[", "]", "\n", "ecos", "=", "[", "]", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "val_set", ")", ")", ")", ":", "\n", "        ", "val_data_current", "=", "val_set", "[", "i", "]", "\n", "if", "val_data_current", ".", "shape", "[", "1", "]", "<=", "k_shot", "+", "1", ":", "\n", "            ", "print", "(", "'found data size less than'", ",", "k_shot", ")", "\n", "continue", "\n", "\n", "", "model_insight", "=", "model", ".", "clone", "(", "npy_dict", ")", "\n", "\n", "previous_round", "=", "[", "]", "\n", "previous_score", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "range", "(", "1", ",", "k_shot", "+", "1", ")", ":", "\n", "# Sample minibatch", "\n", "            ", "data", "=", "val_data_current", "[", ":", ",", "iteration", ",", "0", "]", ".", "tolist", "(", ")", ".", "copy", "(", ")", "\n", "labels", "=", "val_data_current", "[", ":", ",", "iteration", ",", "1", "]", ".", "tolist", "(", ")", "\n", "\n", "previous_round", ".", "append", "(", "val_data_current", "[", ":", ",", "iteration", "-", "1", ",", "2", "]", ".", "tolist", "(", ")", ")", "\n", "p_round", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_round", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "previous_score", ".", "append", "(", "val_data_current", "[", ":", ",", "iteration", "-", "1", ",", "3", "]", ".", "tolist", "(", ")", ")", "\n", "p_score", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_score", ")", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "                ", "data", "[", "i", "]", ".", "append", "(", "p_round", "[", "i", "]", ")", "\n", "data", "[", "i", "]", ".", "append", "(", "p_score", "[", "i", "]", ")", "\n", "\n", "# Forward pass", "\n", "", "prediction", "=", "model_insight", ".", "forward", "(", "data", ",", "gate", ")", "\n", "# Get loss", "\n", "loss_dict", "=", "model_insight", ".", "loss", "(", "prediction", ",", "labels", ")", "\n", "if", "gate", ":", "\n", "                ", "loss", "=", "loss_dict", "[", "'model_loss'", "]", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_dict", "[", "'real_seq_loss'", "]", "\n", "# Backward pass - Update fast net", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# target set", "\n", "", "target_acc", "=", "list", "(", ")", "\n", "target_acc_type", "=", "list", "(", ")", "\n", "target_eco", "=", "list", "(", ")", "\n", "target_bi_acc", "=", "list", "(", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "k_shot", "+", "1", ",", "len", "(", "val_data_current", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "iteration", "+", "k_shot", "==", "17", ":", "\n", "                ", "continue", "\n", "\n", "", "data", "=", "val_data_current", "[", ":", ",", "iteration", ",", "0", "]", ".", "tolist", "(", ")", ".", "copy", "(", ")", "\n", "labels", "=", "val_data_current", "[", ":", ",", "iteration", ",", "1", "]", ".", "tolist", "(", ")", "\n", "\n", "previous_round", ".", "append", "(", "val_data_current", "[", ":", ",", "iteration", "-", "1", ",", "2", "]", ".", "tolist", "(", ")", ")", "\n", "p_round", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_round", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "previous_score", ".", "append", "(", "val_data_current", "[", ":", ",", "iteration", "-", "1", ",", "3", "]", ".", "tolist", "(", ")", ")", "\n", "p_score", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_score", ")", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "                ", "data", "[", "i", "]", ".", "append", "(", "p_round", "[", "i", "]", ")", "\n", "data", "[", "i", "]", ".", "append", "(", "p_score", "[", "i", "]", ")", "\n", "\n", "\n", "", "prediction", "=", "model_insight", ".", "forward", "(", "data", ",", "gate", ")", "\n", "\n", "# get batch_sized accuracy", "\n", "accuracy", "=", "get_batched_acc", "(", "prediction", "[", "0", "]", ",", "labels", ")", "\n", "accuracy_type", "=", "get_batched_acc_type", "(", "prediction", "[", "0", "]", ",", "labels", ",", "model_insight", ".", "id2type", ")", "\n", "binary_accuracy", "=", "get_batched_binary_acc", "(", "prediction", "[", "3", "]", ",", "labels", ",", "model_insight", ".", "id2type", ")", "\n", "money_start", "=", "[", "d", "[", "2", "]", "[", "0", "]", "*", "money_scaling", "for", "d", "in", "data", "]", "\n", "eco_diff", "=", "get_batched_finance_diff", "(", "prediction", "[", "0", "]", ",", "labels", ",", "money_start", ",", "action_money", ")", "\n", "target_acc", ".", "append", "(", "accuracy", ")", "\n", "target_acc_type", ".", "append", "(", "accuracy_type", ")", "\n", "target_eco", ".", "append", "(", "eco_diff", ")", "\n", "target_bi_acc", ".", "append", "(", "binary_accuracy", ")", "\n", "\n", "", "accuracies", ".", "append", "(", "np", ".", "mean", "(", "target_acc", ")", ")", "\n", "accuracies_type", ".", "append", "(", "np", ".", "mean", "(", "target_acc_type", ",", "axis", "=", "0", ")", ")", "\n", "\n", "ecos", ".", "append", "(", "np", ".", "mean", "(", "target_eco", ")", ")", "\n", "bi_accuracies", ".", "append", "(", "np", ".", "mean", "(", "target_bi_acc", ",", "axis", "=", "0", ")", ")", "\n", "\n", "\n", "", "accuracies_type_mean", "=", "np", ".", "mean", "(", "accuracies_type", ",", "axis", "=", "0", ")", "\n", "acc_gun", ",", "acc_grenade", ",", "acc_equip", "=", "accuracies_type_mean", "[", "0", "]", ",", "accuracies_type_mean", "[", "1", "]", ",", "accuracies_type_mean", "[", "2", "]", "\n", "\n", "return", "np", ".", "mean", "(", "accuracies", ")", ",", "acc_gun", ",", "acc_grenade", ",", "acc_equip", ",", "np", ".", "mean", "(", "ecos", ")", ",", "np", ".", "mean", "(", "bi_accuracies", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.insight_learning": [[128, 237], ["model_insight.train", "numpy.random.shuffle", "list", "list", "list", "list", "list", "list", "list", "list", "list", "range", "torch.cat", "torch.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "optimizer.zero_grad", "torch.mean.backward", "optimizer.step", "train_data_current[].tolist", "train_data_current[].tolist", "previous_round.append", "numpy.transpose().tolist", "previous_score.append", "numpy.transpose().tolist", "range", "model_insight.forward", "model_insight.loss", "optimizer.zero_grad", "torch.mean.backward", "optimizer.step", "len", "train_data_current[].tolist().copy", "train_data_current[].tolist", "previous_round.append", "numpy.transpose().tolist", "previous_score.append", "numpy.transpose().tolist", "range", "model_insight.forward", "model_insight.loss", "torch.cat.append", "src.utils.get_batched_acc", "src.utils.get_batched_acc_type", "src.utils.get_batched_binary_acc", "src.utils.get_batched_finance_diff", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "numpy.nanmean", "numpy.mean", "range", "train_data_current[].tolist", "train_data_current[].tolist", "len", "data[].append", "data[].append", "train_data_current[].tolist", "train_data_current[].tolist", "len", "data[].append", "data[].append", "torch.mean.unsqueeze().double", "numpy.transpose", "numpy.transpose", "train_data_current[].tolist", "numpy.transpose", "numpy.transpose", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torch.mean.unsqueeze"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.forward", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.loss", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.forward", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.loss", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_acc", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_acc_type", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_binary_acc", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_finance_diff"], ["", "def", "insight_learning", "(", "model_insight", ",", "optimizer", ",", "k_shot", ",", "train_data_current", ",", "gate", ")", ":", "\n", "\n", "    ", "model_insight", ".", "train", "(", ")", "\n", "# support set", "\n", "index", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "k_shot", "+", "1", ")", "]", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "train_data_current", ")", "\n", "\n", "previous_round", "=", "[", "]", "\n", "previous_score", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "index", ":", "\n", "# Sample minibatch", "\n", "        ", "data", "=", "train_data_current", "[", ":", ",", "iteration", ",", "0", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "train_data_current", "[", ":", ",", "iteration", ",", "1", "]", ".", "tolist", "(", ")", "\n", "\n", "previous_round", ".", "append", "(", "train_data_current", "[", ":", ",", "iteration", "-", "1", ",", "2", "]", ".", "tolist", "(", ")", ")", "\n", "p_round", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_round", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "previous_score", ".", "append", "(", "train_data_current", "[", ":", ",", "iteration", "-", "1", ",", "3", "]", ".", "tolist", "(", ")", ")", "\n", "p_score", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_score", ")", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "data", "[", "i", "]", ".", "append", "(", "p_round", "[", "i", "]", ")", "\n", "data", "[", "i", "]", ".", "append", "(", "p_score", "[", "i", "]", ")", "\n", "\n", "# Forward pass", "\n", "# x: [[x_self_2,...,x_self_k-1](after purchase), [x_self,x_teammate1, ...](before purchase), [x_opponents1, ...](before purchase),[money_self,money_teammate1,...], ] weapon indexes of all players", "\n", "# money: [money_self, [money_teammate1, ...], [money_opponents1, ...]], normalized", "\n", "# performance: same as money", "\n", "", "prediction", "=", "model_insight", ".", "forward", "(", "data", ",", "gate", ")", "\n", "\n", "# Get loss", "\n", "loss_dict", "=", "model_insight", ".", "loss", "(", "prediction", ",", "labels", ")", "\n", "if", "gate", ":", "\n", "            ", "loss", "=", "loss_dict", "[", "'model_loss'", "]", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss_dict", "[", "'real_seq_loss'", "]", "\n", "\n", "# Backward pass - Update fast net", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# target set", "\n", "", "target_loss", "=", "list", "(", ")", "\n", "target_acc", "=", "list", "(", ")", "\n", "target_acc_gun", "=", "list", "(", ")", "\n", "target_acc_grenade", "=", "list", "(", ")", "\n", "target_acc_equip", "=", "list", "(", ")", "\n", "target_eco", "=", "list", "(", ")", "\n", "target_bi_acc", "=", "list", "(", ")", "\n", "# for Tensorboard", "\n", "target_seq_loss", "=", "list", "(", ")", "\n", "target_bi_loss", "=", "list", "(", ")", "\n", "for", "iteration", "in", "range", "(", "k_shot", "+", "1", ",", "len", "(", "train_data_current", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "iteration", "+", "k_shot", "==", "17", ":", "\n", "            ", "continue", "\n", "", "data", "=", "train_data_current", "[", ":", ",", "iteration", ",", "0", "]", ".", "tolist", "(", ")", ".", "copy", "(", ")", "\n", "labels", "=", "train_data_current", "[", ":", ",", "iteration", ",", "1", "]", ".", "tolist", "(", ")", "\n", "\n", "previous_round", ".", "append", "(", "train_data_current", "[", ":", ",", "iteration", "-", "1", ",", "2", "]", ".", "tolist", "(", ")", ")", "\n", "p_round", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_round", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "previous_score", ".", "append", "(", "train_data_current", "[", ":", ",", "iteration", "-", "1", ",", "3", "]", ".", "tolist", "(", ")", ")", "\n", "p_score", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "previous_score", ")", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "data", "[", "i", "]", ".", "append", "(", "p_round", "[", "i", "]", ")", "\n", "data", "[", "i", "]", ".", "append", "(", "p_score", "[", "i", "]", ")", "\n", "\n", "", "prediction", "=", "model_insight", ".", "forward", "(", "data", ",", "gate", ")", "\n", "loss_dict", "=", "model_insight", ".", "loss", "(", "prediction", ",", "labels", ")", "\n", "if", "gate", ":", "\n", "            ", "loss", "=", "loss_dict", "[", "'model_loss'", "]", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss_dict", "[", "'real_seq_loss'", "]", "\n", "\n", "", "target_loss", ".", "append", "(", "loss", ".", "unsqueeze", "(", "0", ")", ".", "double", "(", ")", ")", "\n", "accuracy", "=", "get_batched_acc", "(", "prediction", "[", "0", "]", ",", "labels", ")", "\n", "acc_type", "=", "get_batched_acc_type", "(", "prediction", "[", "0", "]", ",", "labels", ",", "model_insight", ".", "id2type", ")", "\n", "binary_accuracy", "=", "get_batched_binary_acc", "(", "prediction", "[", "3", "]", ",", "labels", ",", "model_insight", ".", "id2type", ")", "\n", "money_start", "=", "[", "d", "[", "2", "]", "[", "0", "]", "*", "money_scaling", "for", "d", "in", "data", "]", "\n", "eco_diff", "=", "get_batched_finance_diff", "(", "prediction", "[", "0", "]", ",", "labels", ",", "money_start", ",", "action_money", ")", "\n", "target_acc", ".", "append", "(", "accuracy", ")", "\n", "target_acc_gun", ".", "append", "(", "acc_type", "[", "0", "]", ")", "\n", "target_acc_grenade", ".", "append", "(", "acc_type", "[", "1", "]", ")", "\n", "target_acc_equip", ".", "append", "(", "acc_type", "[", "2", "]", ")", "\n", "target_eco", ".", "append", "(", "eco_diff", ")", "\n", "target_bi_acc", ".", "append", "(", "binary_accuracy", ")", "\n", "\n", "target_seq_loss", ".", "append", "(", "loss_dict", "[", "'seq_loss'", "]", ")", "\n", "target_bi_loss", ".", "append", "(", "loss_dict", "[", "'bi_loss'", "]", ")", "\n", "\n", "# Backward pass - Update fast net", "\n", "", "target_loss", "=", "torch", ".", "cat", "(", "target_loss", ",", "-", "1", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "target_loss", ")", "\n", "accuracy", "=", "np", ".", "mean", "(", "target_acc", ")", "\n", "acc_gun", "=", "np", ".", "mean", "(", "target_acc_gun", ")", "\n", "acc_grenade", "=", "np", ".", "mean", "(", "target_acc_grenade", ")", "\n", "acc_equip", "=", "np", ".", "mean", "(", "target_acc_equip", ")", "\n", "eco", "=", "np", ".", "mean", "(", "target_eco", ")", "\n", "bi_accuracy", "=", "np", ".", "mean", "(", "target_bi_acc", ",", "axis", "=", "0", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "np", ".", "nanmean", "(", "target_seq_loss", ",", "axis", "=", "0", ")", ",", "np", ".", "mean", "(", "target_bi_loss", ",", "axis", "=", "0", ")", ",", "accuracy", ",", "acc_gun", ",", "acc_grenade", ",", "acc_equip", ",", "eco", ",", "bi_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.main": [[239, 573], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "src.utils.read_npy", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "src.preprocess.read_dataset", "src.model.CsgoModel", "src.model.CsgoModel.print_all_model_parameters", "torch.cuda.is_available", "torch.optim.SGD", "print", "os.path.isdir", "tensorboardX.SummaryWriter", "signal.signal", "tqdm.tqdm", "src.model.CsgoModel", "print", "os.path.join", "print", "torch.load", "src.model.CsgoModel.load_state_dict", "src.model.CsgoModel.clone", "run.get_optimizer", "run.evaluation", "print", "print", "print", "print", "print", "print", "print", "src.model.CsgoModel", "print", "os.path.join", "print", "torch.load", "src.model.CsgoModel.load_state_dict", "src.model.CsgoModel.clone", "run.get_optimizer", "run.evaluation", "print", "print", "print", "print", "print", "print", "sys.exit", "src.model.CsgoModel.cuda", "src.model.CsgoModel.parameters", "src.utils.find_latest_file", "print", "os.path.isfile", "os.path.isdir", "os.mkdir", "print", "print", "os.path.join", "sys.exit", "range", "random.choice", "copy.deepcopy", "run.learning_rate_decay", "src.model.CsgoModel.clone", "run.get_optimizer", "run.insight_learning", "get_optimizer.state_dict", "src.model.CsgoModel.point_grad_to", "torch.optim.SGD.step", "train_seq_loss.append", "train_bi_loss.append", "train_accuracy.append", "train_acc_gun.append", "train_acc_grenade.append", "train_acc_equip.append", "train_eco.append", "train_bi_accuracy.append", "print", "os.path.join", "print", "torch.load", "src.model.CsgoModel.load_state_dict", "torch.optim.SGD.load_state_dict", "ArgumentError", "src.model.CsgoModel.state_dict", "torch.optim.SGD.state_dict", "os.path.isdir", "os.mkdir", "torch.save", "print", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "print", "src.model.CsgoModel.clone", "run.get_optimizer", "copy.deepcopy", "run.evaluation", "get_optimizer.state_dict", "print", "print", "print", "print", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "info.setdefault", "info.setdefault", "info.setdefault", "info.setdefault", "info.setdefault", "info.setdefault", "os.path.join", "torch.save", "print", "numpy.nanmean", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "numpy.mean", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "numpy.mean", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "print", "src.model.CsgoModel.state_dict", "torch.optim.SGD.state_dict", "os.path.isdir", "os.mkdir", "os.path.join", "torch.save", "print", "float", "numpy.nanmean", "numpy.mean", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "sum", "sum", "sum", "sum", "sum", "numpy.mean", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "os.path.isdir", "os.mkdir", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.read_npy", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.read_dataset", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.print_all_model_parameters", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.get_optimizer", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.evaluation", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.get_optimizer", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.evaluation", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.find_latest_file", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.learning_rate_decay", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.get_optimizer", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.insight_learning", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.point_grad_to", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.get_optimizer", "home.repos.pwc.inspect_result.derenlei_CS_Net.None.run.evaluation"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Load args\n    \"\"\"", "\n", "# Parsing", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Train MAML on CSGO'", ")", "\n", "# params", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "default", "=", "'log/'", ",", "type", "=", "str", ",", "help", "=", "'Folder to store everything/load'", ")", "\n", "parser", ".", "add_argument", "(", "'--statedir'", ",", "default", "=", "'default_path'", ",", "type", "=", "str", ",", "help", "=", "'Folder name to store model state'", ")", "\n", "parser", ".", "add_argument", "(", "'--shots'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'shots per class (K-shot)'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_meta_iteration'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'start number of meta iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta_iterations'", ",", "default", "=", "6000", ",", "type", "=", "int", ",", "help", "=", "'number of meta iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta_lr'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'meta learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--validate_every'", ",", "default", "=", "500", ",", "type", "=", "int", ",", "help", "=", "'validate every'", ")", "\n", "parser", ".", "add_argument", "(", "'--check_every'", ",", "default", "=", "500", ",", "type", "=", "int", ",", "help", "=", "'Checkpoint every'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "'log/checkpoint'", ",", "help", "=", "'Path to checkpoint. This works only if starting fresh (i.e., no checkpoints in logdir)'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_embedding'", ",", "default", "=", "'data/action_embedding2.npy'", ",", "help", "=", "'Path to action embedding.'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_name'", ",", "default", "=", "'data/action_name.npy'", ",", "help", "=", "'Path to action name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_money'", ",", "default", "=", "'data/action_money.npy'", ",", "help", "=", "'Path to action money.'", ")", "\n", "parser", ".", "add_argument", "(", "'--money_scaling'", ",", "default", "=", "1000", ",", "help", "=", "'Scaling factor between money features and actual money.'", ")", "\n", "parser", ".", "add_argument", "(", "'--side_mask'", ",", "default", "=", "'data/mask.npz'", ",", "help", "=", "'Path to mask of two sides.'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_capacity'", ",", "default", "=", "'data/action_capacity.npy'", ",", "help", "=", "'Path to action capacity.'", ")", "\n", "parser", ".", "add_argument", "(", "'--id2type'", ",", "default", "=", "'data/action_type.npy'", ",", "help", "=", "'Path to id2type.'", ")", "\n", "parser", ".", "add_argument", "(", "'--type_capacity'", ",", "default", "=", "'data/type_capacity.npy'", ",", "help", "=", "'Path to type capacity.'", ")", "\n", "parser", ".", "add_argument", "(", "'--typeid2name'", ",", "default", "=", "'data/type_name.npy'", ",", "help", "=", "'Path to typeid2name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--history_dim'", ",", "default", "=", "512", ",", "help", "=", "'LSTM hidden dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--history_num_layers'", ",", "default", "=", "2", ",", "help", "=", "'LSTM layer number.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ff_dim'", ",", "default", "=", "512", ",", "help", "=", "'MLP dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resource_dim'", ",", "default", "=", "2", ",", "help", "=", "'Resource (money, performance, ...) dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ff_dropout_rate'", ",", "default", "=", "0.1", ",", "help", "=", "'Dropout rate of MLP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_output_num'", ",", "default", "=", "10", ",", "help", "=", "'Maximum number of actions each round.'", ")", "\n", "parser", ".", "add_argument", "(", "'--beam_size'", ",", "default", "=", "128", ",", "help", "=", "'Beam size of beam search predicting.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "4164", ",", "help", "=", "'random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--shared_attention_weight'", ",", "default", "=", "True", ",", "help", "=", "'Sharing weight of attention layers or not.'", ")", "\n", "parser", ".", "add_argument", "(", "'--different_attention_weight'", ",", "default", "=", "False", ",", "help", "=", "'Different weight of attention for history information.'", ")", "\n", "parser", ".", "add_argument", "(", "'--history_encoding'", ",", "default", "=", "None", ",", "help", "=", "\"Encode current player's weapon history. Candidate value: 'avg', 'score_weighted', 'avg.time', 'score_weighted.time'\"", ")", "\n", "parser", ".", "add_argument", "(", "'--time_decaying'", ",", "default", "=", "0.99", ",", "help", "=", "\"Decay of player's weighted sum history.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gate'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "\"Use classifier or not.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lstm_mode'", ",", "default", "=", "'triple'", ",", "help", "=", "\"Use single or triple lstm.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "default", "=", "'train'", ",", "help", "=", "\"train or test\"", ")", "\n", "\n", "\n", "# args Processing", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "npy_dict", "=", "read_npy", "(", "args", ")", "\n", "\n", "global", "money_scaling", ",", "action_money", "\n", "money_scaling", "=", "args", ".", "money_scaling", "\n", "action_money", "=", "npy_dict", "[", "\"action_money\"", "]", "\n", "\n", "check_dir", "=", "args", ".", "logdir", "+", "'checkpoint/'", "+", "args", ".", "statedir", "\n", "\n", "\"\"\"\n    Load data and construct model\n    \"\"\"", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "train_set", ",", "val_set", ",", "test_set", "=", "read_dataset", "(", "DATA_DIR", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'test'", ":", "\n", "        ", "print", "(", "\"Begin test mode\"", ")", "\n", "# Meta Test", "\n", "model", "=", "CsgoModel", "(", "args", ",", "npy_dict", ")", "\n", "print", "(", "'\\nTest Performance'", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "check_dir", ",", "'best_eval.pth'", ")", "\n", "print", "(", "'Attempting to load checkpoint'", ",", "checkpoint_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'meta_net'", "]", ")", "\n", "state", "=", "checkpoint", "[", "'optimizer'", "]", "\n", "model_insight", "=", "model", ".", "clone", "(", "npy_dict", ")", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model_insight", ",", "state", ")", "\n", "\n", "# Update insight model", "\n", "test_accuracy", ",", "test_acc_gun", ",", "test_acc_grenade", ",", "test_acc_equip", ",", "test_eco", ",", "test_bi_accuracy", "=", "evaluation", "(", "model_insight", ",", "optimizer", ",", "args", ".", "shots", ",", "test_set", ",", "npy_dict", ",", "args", ".", "gate", ")", "\n", "print", "(", "'average test_accuracy'", ",", "test_accuracy", ")", "\n", "print", "(", "'average gun accuracy'", ",", "test_acc_gun", ")", "\n", "print", "(", "'average grenade accuracy'", ",", "test_acc_grenade", ")", "\n", "print", "(", "'average equipment accuracy'", ",", "test_acc_equip", ")", "\n", "print", "(", "'average test_eco'", ",", "test_eco", ")", "\n", "print", "(", "'average test_bi_accuracy'", ",", "test_bi_accuracy", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "\n", "\n", "# build model, optimizer", "\n", "", "model", "=", "CsgoModel", "(", "args", ",", "npy_dict", ")", "\n", "model", ".", "print_all_model_parameters", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "meta_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "meta_lr", ")", "\n", "info", "=", "{", "}", "\n", "state", "=", "None", "\n", "meta_iteration", "=", "0", "\n", "\n", "\"\"\"\n    Load checkpoint\n    \"\"\"", "\n", "# checkpoint is directory -> Find last model or '' if does not exist", "\n", "print", "(", "'check_dir'", ",", "check_dir", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "check_dir", ")", ":", "\n", "        ", "latest_checkpoint", "=", "find_latest_file", "(", "check_dir", ")", "\n", "if", "latest_checkpoint", ":", "\n", "            ", "print", "(", "'Latest checkpoint found:'", ",", "latest_checkpoint", ")", "\n", "args", ".", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "check_dir", ",", "latest_checkpoint", ")", "\n", "", "else", ":", "\n", "            ", "args", ".", "checkpoint", "=", "''", "\n", "", "", "else", ":", "\n", "        ", "args", ".", "checkpoint", "=", "''", "\n", "\n", "# Start fresh", "\n", "", "if", "args", ".", "checkpoint", "==", "''", ":", "\n", "        ", "print", "(", "'No checkpoint. Starting fresh'", ")", "\n", "# Load Checkpoint", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "print", "(", "'Attempting to load checkpoint'", ",", "args", ".", "checkpoint", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'meta_net'", "]", ")", "\n", "meta_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'meta_optimizer'", "]", ")", "\n", "state", "=", "checkpoint", "[", "'optimizer'", "]", "\n", "args", ".", "start_meta_iteration", "=", "checkpoint", "[", "'meta_iteration'", "]", "\n", "info", "=", "checkpoint", "[", "'info'", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ArgumentError", "(", "'Bad checkpoint. Delete logdir folder to start over.'", ")", "\n", "\n", "\n", "\n", "# Create tensorboard logger", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "logdir", "+", "'board/'", "+", "args", ".", "statedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "logdir", "+", "'board/'", "+", "args", ".", "statedir", ")", "\n", "", "logger", "=", "SummaryWriter", "(", "args", ".", "logdir", "+", "'board/'", "+", "args", ".", "statedir", ")", "\n", "\n", "early_stopping_counter", "=", "0", "\n", "best_val_acc", "=", "0", "\n", "best_eval_checkpoint", "=", "False", "\n", "\n", "#################", "\n", "# Handle SIGINT #", "\n", "#################", "\n", "def", "handler", "(", "signum", ",", "time", ")", ":", "\n", "# Make a checkpoint", "\n", "        ", "print", "(", ")", "\n", "print", "(", "'Training stopped. Start saving the current model...'", ")", "\n", "checkpoint", "=", "{", "\n", "'meta_net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'meta_optimizer'", ":", "meta_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "state", ",", "\n", "'meta_iteration'", ":", "meta_iteration", ",", "\n", "'info'", ":", "info", "\n", "}", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "check_dir", ",", "'check-{}.pth'", ".", "format", "(", "meta_iteration", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "check_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "check_dir", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "print", "(", "'Saved checkpoint to'", ",", "checkpoint_path", ")", "\n", "", "sys", ".", "exit", "(", ")", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "handler", ")", "\n", "\n", "\n", "#####################", "\n", "# Meta learner loop #", "\n", "#####################", "\n", "\n", "# Meta Train", "\n", "train_seq_loss", ",", "train_bi_loss", ",", "train_accuracy", ",", "train_acc_gun", ",", "train_acc_grenade", ",", "train_acc_equip", ",", "train_eco", ",", "train_bi_accuracy", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "meta_iteration", "in", "tqdm", "(", "range", "(", "args", ".", "start_meta_iteration", ",", "args", ".", "meta_iterations", ")", ")", ":", "\n", "        ", "train_data_current_orig", "=", "random", ".", "choice", "(", "train_set", ")", "\n", "\n", "train_data_current", "=", "copy", ".", "deepcopy", "(", "train_data_current_orig", ")", "\n", "\n", "# Update learning rate", "\n", "meta_lr", "=", "args", ".", "meta_lr", "*", "(", "1.", "-", "meta_iteration", "/", "float", "(", "args", ".", "meta_iterations", ")", ")", "\n", "learning_rate_decay", "(", "meta_optimizer", ",", "meta_lr", ")", "\n", "\n", "# Clone model", "\n", "model_insight", "=", "model", ".", "clone", "(", "npy_dict", ")", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model_insight", ",", "state", ")", "\n", "\n", "# Update insight model", "\n", "\n", "seq_loss", ",", "bi_loss", ",", "accuracy", ",", "acc_gun", ",", "acc_grenade", ",", "acc_equip", ",", "eco", ",", "bi_accuracy", "=", "insight_learning", "(", "model_insight", ",", "optimizer", ",", "args", ".", "shots", ",", "train_data_current", ",", "args", ".", "gate", ")", "\n", "state", "=", "optimizer", ".", "state_dict", "(", ")", "# save optimizer state", "\n", "\n", "# Update slow net", "\n", "model", ".", "point_grad_to", "(", "model_insight", ")", "\n", "meta_optimizer", ".", "step", "(", ")", "\n", "\n", "train_seq_loss", ".", "append", "(", "seq_loss", ")", "\n", "train_bi_loss", ".", "append", "(", "bi_loss", ")", "\n", "train_accuracy", ".", "append", "(", "accuracy", ")", "\n", "train_acc_gun", ".", "append", "(", "acc_gun", ")", "\n", "train_acc_grenade", ".", "append", "(", "acc_grenade", ")", "\n", "train_acc_equip", ".", "append", "(", "acc_equip", ")", "\n", "train_eco", ".", "append", "(", "eco", ")", "\n", "train_bi_accuracy", ".", "append", "(", "bi_accuracy", ")", "\n", "\n", "if", "meta_iteration", "%", "50", "==", "0", "and", "meta_iteration", ">", "0", ":", "\n", "            ", "if", "args", ".", "lstm_mode", "==", "'triple'", ":", "\n", "                ", "seq_loss_mean", "=", "np", ".", "nanmean", "(", "train_seq_loss", ",", "axis", "=", "0", ")", "\n", "logger", ".", "add_scalar", "(", "'seq_loss_gun'", ",", "seq_loss_mean", "[", "0", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'seq_loss_grenade'", ",", "seq_loss_mean", "[", "1", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'seq_loss_equip'", ",", "seq_loss_mean", "[", "2", "]", ",", "meta_iteration", ")", "\n", "\n", "bi_loss_mean", "=", "np", ".", "mean", "(", "train_bi_loss", ",", "axis", "=", "0", ")", "\n", "logger", ".", "add_scalar", "(", "'bi_loss_gun'", ",", "bi_loss_mean", "[", "0", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'bi_loss_grenade'", ",", "bi_loss_mean", "[", "1", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'bi_loss_equip'", ",", "bi_loss_mean", "[", "2", "]", ",", "meta_iteration", ")", "\n", "", "elif", "args", ".", "lstm_mode", "==", "'single'", ":", "\n", "                ", "seq_loss_mean", "=", "np", ".", "nanmean", "(", "train_seq_loss", ",", "axis", "=", "0", ")", "\n", "bi_loss_mean", "=", "np", ".", "mean", "(", "train_bi_loss", ",", "axis", "=", "0", ")", "\n", "logger", ".", "add_scalar", "(", "'seq_loss_single'", ",", "seq_loss_mean", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'bi_loss_single'", ",", "bi_loss_mean", "[", "0", "]", ",", "meta_iteration", ")", "\n", "\n", "", "logger", ".", "add_scalar", "(", "'accuracy'", ",", "sum", "(", "train_accuracy", ")", "/", "(", "len", "(", "train_accuracy", ")", "*", "1.0", ")", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'accuracy_gun'", ",", "sum", "(", "train_acc_gun", ")", "/", "(", "len", "(", "train_acc_gun", ")", "*", "1.0", ")", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'accuracy_grenade'", ",", "sum", "(", "train_acc_grenade", ")", "/", "(", "len", "(", "train_acc_grenade", ")", "*", "1.0", ")", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'accuracy_equip'", ",", "sum", "(", "train_acc_equip", ")", "/", "(", "len", "(", "train_acc_equip", ")", "*", "1.0", ")", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'Eco_diff'", ",", "sum", "(", "train_eco", ")", "/", "(", "len", "(", "train_eco", ")", "*", "1.0", ")", ",", "meta_iteration", ")", "\n", "\n", "if", "args", ".", "lstm_mode", "==", "'triple'", ":", "\n", "                ", "bi_acc_mean", "=", "np", ".", "mean", "(", "train_bi_accuracy", ",", "axis", "=", "0", ")", "\n", "logger", ".", "add_scalar", "(", "'binary_acc_gun'", ",", "bi_acc_mean", "[", "0", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'binary_acc_grenade'", ",", "bi_acc_mean", "[", "1", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'binary_acc_equip'", ",", "bi_acc_mean", "[", "2", "]", ",", "meta_iteration", ")", "\n", "", "elif", "args", ".", "lstm_mode", "==", "'single'", ":", "\n", "                ", "bi_acc_mean", "=", "np", ".", "mean", "(", "train_bi_accuracy", ",", "axis", "=", "0", ")", "\n", "logger", ".", "add_scalar", "(", "'binary_acc_single'", ",", "bi_acc_mean", ",", "meta_iteration", ")", "\n", "\n", "", "logger", ".", "add_scalar", "(", "'meta_lr'", ",", "meta_lr", ",", "meta_iteration", ")", "\n", "train_seq_loss", ",", "train_bi_loss", ",", "train_accuracy", ",", "train_eco", ",", "train_bi_accuracy", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# Meta Evaluation", "\n", "", "if", "meta_iteration", "%", "args", ".", "validate_every", "==", "0", "and", "meta_iteration", "!=", "args", ".", "start_meta_iteration", ":", "\n", "            ", "print", "(", "'Start evaluation'", ")", "\n", "\n", "# Clone model", "\n", "model_insight", "=", "model", ".", "clone", "(", "npy_dict", ")", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model_insight", ",", "state", ")", "\n", "\n", "# Update insight model", "\n", "val_set_curr", "=", "copy", ".", "deepcopy", "(", "val_set", ")", "\n", "eval_accuracy", ",", "eval_acc_gun", ",", "eval_acc_grenade", ",", "eval_acc_equip", ",", "eval_eco", ",", "eval_bi_accuracy", "=", "evaluation", "(", "model_insight", ",", "optimizer", ",", "args", ".", "shots", ",", "val_set_curr", ",", "npy_dict", ",", "args", ".", "gate", ")", "\n", "state", "=", "optimizer", ".", "state_dict", "(", ")", "# save optimizer state", "\n", "\n", "# save log", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'average eval_accuracy'", ",", "eval_accuracy", ")", "\n", "print", "(", "'average eval_ecoy'", ",", "eval_eco", ")", "\n", "print", "(", "'average eval_binary_accuracy'", ",", "eval_bi_accuracy", ")", "\n", "\n", "logger", ".", "add_scalar", "(", "'val_accuracy'", ",", "eval_accuracy", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'val_accuracy_gun'", ",", "eval_acc_gun", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'val_accuracy_grenade'", ",", "eval_acc_grenade", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'val_accuracy_equip'", ",", "eval_acc_equip", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'val_eco_diff'", ",", "eval_eco", ",", "meta_iteration", ")", "\n", "\n", "if", "args", ".", "lstm_mode", "==", "'triple'", ":", "\n", "                ", "logger", ".", "add_scalar", "(", "'val_binary_acc_gun'", ",", "eval_bi_accuracy", "[", "0", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'val_binary_acc_grenade'", ",", "eval_bi_accuracy", "[", "1", "]", ",", "meta_iteration", ")", "\n", "logger", ".", "add_scalar", "(", "'val_binary_acc_equip'", ",", "eval_bi_accuracy", "[", "2", "]", ",", "meta_iteration", ")", "\n", "", "elif", "args", ".", "lstm_mode", "==", "'single'", ":", "\n", "                ", "logger", ".", "add_scalar", "(", "'val_binary_acc_single'", ",", "eval_bi_accuracy", ",", "meta_iteration", ")", "\n", "\n", "# Early stopping", "\n", "", "if", "best_val_acc", ">=", "eval_accuracy", ":", "\n", "                ", "early_stopping_counter", "+=", "1", "\n", "best_eval_checkpoint", "=", "False", "\n", "", "else", ":", "\n", "                ", "best_val_acc", "=", "eval_accuracy", "\n", "best_eval_checkpoint", "=", "True", "\n", "early_stopping_counter", "=", "0", "\n", "", "if", "early_stopping_counter", ">", "4", ":", "\n", "                ", "print", "(", "'Validation performance not improving. Early stop.'", ")", "\n", "break", "\n", "\n", "# save checkpoint", "\n", "", "info", ".", "setdefault", "(", "'seq_loss'", ",", "{", "}", ")", "\n", "info", ".", "setdefault", "(", "'bi_loss'", ",", "{", "}", ")", "\n", "info", ".", "setdefault", "(", "'accuracy'", ",", "{", "}", ")", "\n", "info", ".", "setdefault", "(", "'meta_lr'", ",", "{", "}", ")", "\n", "info", ".", "setdefault", "(", "'eco'", ",", "{", "}", ")", "\n", "info", ".", "setdefault", "(", "'binary_accuracy'", ",", "{", "}", ")", "\n", "\n", "info", "[", "'seq_loss'", "]", "[", "meta_iteration", "]", "=", "seq_loss", "\n", "info", "[", "'bi_loss'", "]", "[", "meta_iteration", "]", "=", "bi_loss", "\n", "info", "[", "'accuracy'", "]", "[", "meta_iteration", "]", "=", "accuracy", "\n", "info", "[", "'eco'", "]", "[", "meta_iteration", "]", "=", "eco", "\n", "info", "[", "'binary_accuracy'", "]", "[", "meta_iteration", "]", "=", "bi_accuracy", "\n", "info", "[", "'meta_lr'", "]", "[", "meta_iteration", "]", "=", "meta_lr", "\n", "\n", "# Make a checkpoint", "\n", "checkpoint", "=", "{", "\n", "'meta_net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'meta_optimizer'", ":", "meta_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "state", ",", "\n", "'meta_iteration'", ":", "meta_iteration", ",", "\n", "'info'", ":", "info", "\n", "}", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "check_dir", ",", "'check-{}.pth'", ".", "format", "(", "meta_iteration", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "check_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "check_dir", ")", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "print", "(", "'Saved checkpoint to'", ",", "checkpoint_path", ")", "\n", "if", "best_eval_checkpoint", ":", "\n", "                ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "check_dir", ",", "'best_eval.pth'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "check_dir", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "check_dir", ")", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "print", "(", "'Update best checkpoint to'", ",", "checkpoint_path", ")", "\n", "\n", "# test best model on test set", "\n", "", "", "", "model", "=", "CsgoModel", "(", "args", ",", "npy_dict", ")", "\n", "print", "(", "'\\nTest Performance'", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "check_dir", ",", "'best_eval.pth'", ")", "\n", "print", "(", "'Attempting to load checkpoint'", ",", "checkpoint_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'meta_net'", "]", ")", "\n", "state", "=", "checkpoint", "[", "'optimizer'", "]", "\n", "model_insight", "=", "model", ".", "clone", "(", "npy_dict", ")", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model_insight", ",", "state", ")", "\n", "# Update insight model", "\n", "test_accuracy", ",", "test_acc_gun", ",", "test_acc_grenade", ",", "test_acc_equip", ",", "test_eco", ",", "test_bi_accuracy", "=", "evaluation", "(", "model_insight", ",", "optimizer", ",", "args", ".", "shots", ",", "test_set", ",", "npy_dict", ",", "args", ".", "gate", ")", "\n", "print", "(", "'average test_accuracy'", ",", "test_accuracy", ")", "\n", "print", "(", "'average gun accuracy'", ",", "test_acc_gun", ")", "\n", "print", "(", "'average grenade accuracy'", ",", "test_acc_grenade", ")", "\n", "print", "(", "'average equipment accuracy'", ",", "test_acc_equip", ")", "\n", "print", "(", "'average test_eco'", ",", "test_eco", ")", "\n", "print", "(", "'average test_bi_accuracy'", ",", "test_bi_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.weapon2index": [[12, 25], ["res.sort", "res.append"], "function", ["None"], ["def", "weapon2index", "(", "weapon_list", ")", ":", "\n", "# global w", "\n", "    ", "global", "weapon_index_dict", "\n", "\n", "res", "=", "[", "]", "\n", "for", "weapon", "in", "weapon_list", ":", "\n", "        ", "if", "weapon", "in", "weapon_index_dict", ":", "\n", "            ", "res", ".", "append", "(", "weapon_index_dict", "[", "weapon", "]", ")", "\n", "\n", "# sort", "\n", "", "", "res", ".", "sort", "(", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.process_data": [[26, 213], ["range", "processed_data.items", "teams.items", "str", "players.items", "round_data.items", "len", "len", "round_start[].split", "preprocess.weapon2index", "player_data.append", "player_data.append", "player_data.append", "int", "player_data.append", "[].split", "players.items", "player_data.append", "teams.items", "player_data.append", "round_freeze_end[].split", "preprocess.weapon2index", "player[].items", "pickups.sort", "preprocess.weapon2index", "processed_data[].append", "str", "int", "[].split.append", "player_data.append", "player_data.append", "[].split", "preprocess.weapon2index", "teammate_data.append", "t2[].items", "weapon2index.append", "len", "[].split.append", "[].split.append", "isinstance", "[].split.append", "weapon2index.append", "weapon2index.append", "pickups.append", "weapon2index.append", "int", "[].split.append", "[].split.append", "int", "int", "int", "int", "[].split", "preprocess.weapon2index", "opponents_data.append", "int", "int", "int", "int", "[].split.append", "str", "str", "int", "int", "[].split.append", "[].split.append", "str"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.weapon2index", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.weapon2index", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.weapon2index", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.weapon2index", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.weapon2index"], ["", "def", "process_data", "(", "data", ")", ":", "\n", "# data for each player (10 in total)", "\n", "    ", "processed_data", "=", "{", "}", "# [data, label]", "\n", "\n", "prev_round_score", "=", "{", "}", "\n", "for", "round", "in", "range", "(", "2", ",", "31", ")", ":", "\n", "        ", "if", "str", "(", "round", ")", "not", "in", "data", ":", "\n", "            ", "if", "round", "==", "2", ":", "\n", "                ", "return", "None", "\n", "", "break", "\n", "\n", "", "if", "round", "!=", "2", "and", "len", "(", "processed_data", ")", "!=", "10", ":", "\n", "            ", "return", "None", "\n", "\n", "", "round_valid", "=", "True", "\n", "round_data", "=", "{", "}", "\n", "\n", "\n", "teams", "=", "data", "[", "str", "(", "round", ")", "]", "[", "\"teams\"", "]", "\n", "for", "_", ",", "team", "in", "teams", ".", "items", "(", ")", ":", "\n", "            ", "players", "=", "team", "[", "\"players\"", "]", "\n", "for", "_", ",", "player", "in", "players", ".", "items", "(", ")", ":", "\n", "                ", "player_name", "=", "player", "[", "\"player_name\"", "]", "\n", "if", "round", "==", "2", ":", "\n", "                    ", "processed_data", "[", "player_name", "]", "=", "[", "]", "\n", "\n", "", "if", "player", "[", "\"team_number\"", "]", "is", "None", ":", "\n", "                    ", "return", "None", "\n", "\n", "", "is_terrorist", "=", "int", "(", "player", "[", "\"team_number\"", "]", ")", "==", "2", "\n", "\n", "round_start", "=", "player", "[", "\"round_start\"", "]", "\n", "if", "round_start", "[", "\"weapons\"", "]", "is", "None", ":", "\n", "                    ", "round_valid", "=", "False", "\n", "continue", "\n", "", "weapon_start", "=", "round_start", "[", "\"weapons\"", "]", ".", "split", "(", "','", ")", "\n", "if", "round_start", "[", "\"has_defuser\"", "]", ":", "\n", "                    ", "weapon_start", ".", "append", "(", "\"defuser\"", ")", "\n", "", "if", "round_start", "[", "\"armor\"", "]", ">", "0", ":", "\n", "                    ", "if", "round_start", "[", "\"has_helmet\"", "]", ":", "\n", "                        ", "weapon_start", ".", "append", "(", "\"vesthelm\"", ")", "\n", "", "else", ":", "\n", "                        ", "weapon_start", ".", "append", "(", "\"vest\"", ")", "\n", "", "", "weapon_start", "=", "weapon2index", "(", "weapon_start", ")", "\n", "\n", "if", "round", "==", "16", ":", "\n", "                    ", "continue", "\n", "\n", "# round is not 1 or 16, add round data to result only if data is valid", "\n", "", "player_data", "=", "[", "]", "\n", "# player's team, 0 for terrorist and 1 for counter terrorist", "\n", "player_data", ".", "append", "(", "[", "0", "if", "is_terrorist", "else", "1", "]", ")", "\n", "# player's weapons at round start", "\n", "player_data", ".", "append", "(", "weapon_start", ")", "\n", "# player's money at round start, divided by 1k for normalization", "\n", "player_data", ".", "append", "(", "[", "int", "(", "player", "[", "\"round_start\"", "]", "[", "\"account\"", "]", ")", "/", "1000", "]", ")", "\n", "# player's performance score at round start, divided by 10*round_num for normalization", "\n", "player_score", "=", "int", "(", "player", "[", "\"round_start\"", "]", "[", "\"player_score\"", "]", ")", "\n", "prev_round_score", "[", "player_name", "]", "=", "player_score", "\n", "player_data", ".", "append", "(", "[", "player_score", "/", "(", "round", "*", "10", ")", "]", ")", "\n", "# team vs opponent score", "\n", "if", "data", "[", "str", "(", "round", ")", "]", "[", "\"TvsCT\"", "]", "is", "None", "or", "not", "isinstance", "(", "data", "[", "str", "(", "round", ")", "]", "[", "\"TvsCT\"", "]", ",", "str", ")", ":", "\n", "# data anomaly ", "\n", "                    ", "round_valid", "=", "False", "\n", "continue", "\n", "\n", "# T VS CT score", "\n", "", "T", ",", "CT", "=", "data", "[", "str", "(", "round", ")", "]", "[", "\"TvsCT\"", "]", ".", "split", "(", "\"vs\"", ")", "\n", "if", "is_terrorist", ":", "\n", "                    ", "player_data", ".", "append", "(", "[", "int", "(", "T", ")", "/", "15", ",", "int", "(", "CT", ")", "/", "15", "]", ")", "\n", "", "else", ":", "\n", "                    ", "player_data", ".", "append", "(", "[", "int", "(", "CT", ")", "/", "15", ",", "int", "(", "T", ")", "/", "15", "]", ")", "\n", "\n", "", "teammate_data", "=", "[", "]", "\n", "valid", "=", "True", "\n", "for", "_", ",", "p2", "in", "players", ".", "items", "(", ")", ":", "\n", "                    ", "if", "p2", "[", "\"round_start\"", "]", "[", "\"weapons\"", "]", "is", "None", ":", "\n", "# data anomaly ", "\n", "                        ", "valid", "=", "False", "\n", "break", "\n", "\n", "", "weapon_start", "=", "p2", "[", "\"round_start\"", "]", "[", "\"weapons\"", "]", ".", "split", "(", "','", ")", "\n", "if", "p2", "[", "\"round_start\"", "]", "[", "\"has_defuser\"", "]", ":", "\n", "                        ", "weapon_start", ".", "append", "(", "\"defuser\"", ")", "\n", "", "if", "p2", "[", "\"round_start\"", "]", "[", "\"armor\"", "]", ">", "0", ":", "\n", "                        ", "if", "p2", "[", "\"round_start\"", "]", "[", "\"has_helmet\"", "]", ":", "\n", "                            ", "weapon_start", ".", "append", "(", "\"vesthelm\"", ")", "\n", "", "else", ":", "\n", "                            ", "weapon_start", ".", "append", "(", "\"vest\"", ")", "\n", "", "", "teammate_weapons", "=", "weapon2index", "(", "weapon_start", ")", "\n", "teammate_money", "=", "[", "int", "(", "p2", "[", "\"round_start\"", "]", "[", "\"account\"", "]", ")", "/", "1000", "]", "\n", "if", "p2", "[", "\"round_start\"", "]", "[", "\"player_score\"", "]", "is", "None", ":", "\n", "# data anomaly ", "\n", "                        ", "valid", "=", "False", "\n", "break", "\n", "\n", "", "teammate_score", "=", "[", "int", "(", "p2", "[", "\"round_start\"", "]", "[", "\"player_score\"", "]", ")", "/", "(", "round", "*", "10", ")", "]", "\n", "# teammates' money, weapon and score after purchasing", "\n", "teammate_data", ".", "append", "(", "[", "teammate_weapons", ",", "teammate_money", ",", "teammate_score", "]", ")", "\n", "\n", "", "if", "not", "valid", ":", "\n", "                    ", "round_valid", "=", "False", "\n", "continue", "\n", "", "player_data", ".", "append", "(", "teammate_data", ")", "\n", "\n", "# opponets' data", "\n", "valid", "=", "True", "\n", "opponents_data", "=", "[", "]", "\n", "for", "_", ",", "t2", "in", "teams", ".", "items", "(", ")", ":", "\n", "                    ", "for", "_", ",", "p2", "in", "t2", "[", "\"players\"", "]", ".", "items", "(", ")", ":", "\n", "                        ", "if", "p2", "[", "\"team_number\"", "]", "is", "None", ":", "\n", "                            ", "valid", "=", "False", "\n", "break", "\n", "\n", "", "if", "int", "(", "p2", "[", "\"team_number\"", "]", ")", "!=", "int", "(", "player", "[", "\"team_number\"", "]", ")", ":", "\n", "                            ", "opponent_money", "=", "[", "int", "(", "p2", "[", "\"round_start\"", "]", "[", "\"account\"", "]", ")", "/", "1000", "]", "\n", "opponent_score", "=", "[", "int", "(", "p2", "[", "\"round_start\"", "]", "[", "\"player_score\"", "]", ")", "/", "(", "round", "*", "10", ")", "]", "\n", "# teammates' money score at round start, weapons round start", "\n", "if", "p2", "[", "\"round_start\"", "]", "[", "\"weapons\"", "]", "is", "None", ":", "\n", "# data anomaly ", "\n", "                                ", "valid", "=", "False", "\n", "break", "\n", "", "weapon_start", "=", "p2", "[", "\"round_start\"", "]", "[", "\"weapons\"", "]", ".", "split", "(", "','", ")", "\n", "if", "p2", "[", "\"round_start\"", "]", "[", "\"has_defuser\"", "]", ":", "\n", "                                ", "weapon_start", ".", "append", "(", "\"defuser\"", ")", "\n", "", "if", "p2", "[", "\"round_start\"", "]", "[", "\"armor\"", "]", ">", "0", ":", "\n", "                                ", "if", "p2", "[", "\"round_start\"", "]", "[", "\"has_helmet\"", "]", ":", "\n", "                                    ", "weapon_start", ".", "append", "(", "\"vesthelm\"", ")", "\n", "", "else", ":", "\n", "                                    ", "weapon_start", ".", "append", "(", "\"vest\"", ")", "\n", "", "", "opponent_weapons", "=", "weapon2index", "(", "weapon_start", ")", "\n", "opponents_data", ".", "append", "(", "[", "opponent_weapons", ",", "opponent_money", ",", "opponent_score", "]", ")", "\n", "\n", "", "", "", "if", "not", "valid", ":", "\n", "                    ", "round_valid", "=", "False", "\n", "continue", "\n", "", "player_data", ".", "append", "(", "opponents_data", ")", "\n", "\n", "# weapons round_freeze_end", "\n", "round_freeze_end", "=", "player", "[", "\"round_freeze_end\"", "]", "\n", "if", "round_freeze_end", "[", "\"weapons\"", "]", "is", "None", ":", "\n", "# data anomaly ", "\n", "                    ", "round_valid", "=", "False", "\n", "continue", "\n", "", "weapon_freeze_end", "=", "round_freeze_end", "[", "\"weapons\"", "]", ".", "split", "(", "','", ")", "\n", "if", "round_freeze_end", "[", "\"has_defuser\"", "]", ":", "\n", "                    ", "weapon_freeze_end", ".", "append", "(", "\"defuser\"", ")", "\n", "", "if", "round_freeze_end", "[", "\"armor\"", "]", ">", "0", ":", "\n", "                    ", "if", "round_freeze_end", "[", "\"has_helmet\"", "]", ":", "\n", "                        ", "weapon_freeze_end", ".", "append", "(", "\"vesthelm\"", ")", "\n", "", "else", ":", "\n", "                        ", "weapon_freeze_end", ".", "append", "(", "\"vest\"", ")", "\n", "", "", "weapon_freeze_end", "=", "weapon2index", "(", "weapon_freeze_end", ")", "\n", "\n", "# player's purchasing actions", "\n", "pickups", "=", "[", "]", "\n", "for", "_", ",", "pickup", "in", "player", "[", "\"pickup\"", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "pickup", "[", "\"price\"", "]", "is", "not", "None", "and", "pickup", "[", "\"price\"", "]", ">", "0", ":", "\n", "                        ", "pickups", ".", "append", "(", "pickup", ")", "\n", "", "", "pickups", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "\"timestamp\"", "]", ")", "\n", "\n", "player_label", "=", "[", "]", "\n", "for", "pickup", "in", "pickups", ":", "\n", "                    ", "for", "weapon", "in", "pickup", "[", "\"equip_names\"", "]", ":", "\n", "                        ", "player_label", ".", "append", "(", "weapon", ")", "\n", "\n", "", "", "if", "len", "(", "player_label", ")", ">", "10", ":", "\n", "# might be a noisy data", "\n", "                    ", "round_valid", "=", "False", "\n", "continue", "\n", "\n", "", "player_label", "=", "weapon2index", "(", "player_label", ")", "\n", "\n", "# add data to round_data", "\n", "player_score_cur", "=", "[", "player_score", "-", "prev_round_score", "[", "player_name", "]", "]", "\n", "round_data", "[", "player_name", "]", "=", "[", "player_data", ",", "player_label", ",", "weapon_freeze_end", ",", "player_score_cur", "]", "\n", "\n", "# add data of this round to result", "\n", "", "", "if", "round_valid", ":", "\n", "            ", "for", "player_name", ",", "r_data", "in", "round_data", ".", "items", "(", ")", ":", "\n", "                ", "processed_data", "[", "player_name", "]", ".", "append", "(", "r_data", ")", "\n", "\n", "", "", "", "for", "player_name", ",", "p_data", "in", "processed_data", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "p_data", ")", "<", "7", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "return", "processed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.process_dataset": [[214, 257], ["tqdm.tqdm", "random.seed", "random.shuffle", "len", "enumerate", "print", "print", "print", "numpy.save", "open", "json.load", "os.listdir", "preprocess.process_data", "processed_data.append", "process_data.items", "len", "len", "len", "open", "json.load", "len", "md.append", "int", "train_set.append", "os.path.join", "numpy.asarray", "int", "int", "val_set.append", "test_set.append", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.process_data"], ["", "def", "process_dataset", "(", "dataset_dir", ")", ":", "\n", "    ", "global", "weapon_index_dict", "\n", "with", "open", "(", "\"../data/weapon_index.json\"", ")", "as", "f", ":", "\n", "        ", "weapon_index_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "processed_data", "=", "[", "]", "\n", "for", "file", "in", "tqdm", "(", "os", ".", "listdir", "(", "dataset_dir", "+", "\"raw/\"", ")", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", "+", "\"raw/\"", ",", "file", ")", ")", "as", "f", ":", "\n", "            ", "match", "=", "json", ".", "load", "(", "f", ")", "\n", "", "match_data", "=", "process_data", "(", "match", ")", "# len == 10", "\n", "if", "match_data", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "match_data", ")", "!=", "10", ":", "\n", "            ", "break", "\n", "\n", "", "processed_data", ".", "append", "(", "match_data", ")", "\n", "\n", "", "random", ".", "seed", "(", "4164", ")", "\n", "random", ".", "shuffle", "(", "processed_data", ")", "\n", "\n", "train_set", "=", "[", "]", "\n", "val_set", "=", "[", "]", "\n", "test_set", "=", "[", "]", "\n", "\n", "total", "=", "len", "(", "processed_data", ")", "\n", "for", "i", ",", "match_data", "in", "enumerate", "(", "processed_data", ")", ":", "\n", "        ", "md", "=", "[", "]", "\n", "for", "_", ",", "pd", "in", "match_data", ".", "items", "(", ")", ":", "\n", "            ", "md", ".", "append", "(", "pd", ")", "\n", "\n", "", "if", "0", "<=", "i", "<", "int", "(", "RATIO1", "*", "total", ")", ":", "\n", "            ", "train_set", ".", "append", "(", "np", ".", "asarray", "(", "md", ")", ")", "\n", "", "elif", "int", "(", "RATIO1", "*", "total", ")", "<=", "i", "<", "int", "(", "RATIO2", "*", "total", ")", ":", "\n", "            ", "val_set", ".", "append", "(", "np", ".", "asarray", "(", "md", ")", ")", "\n", "", "else", ":", "\n", "            ", "test_set", ".", "append", "(", "np", ".", "asarray", "(", "md", ")", ")", "\n", "\n", "", "", "print", "(", "\"train set: \"", ",", "len", "(", "train_set", ")", ",", "end", "=", "\" \"", ")", "\n", "print", "(", "\"val set: \"", ",", "len", "(", "val_set", ")", ",", "end", "=", "\" \"", ")", "\n", "print", "(", "\"test set: \"", ",", "len", "(", "test_set", ")", ")", "\n", "\n", "np", ".", "save", "(", "dataset_dir", "+", "\"processed.npy\"", ",", "(", "train_set", ",", "val_set", ",", "test_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.read_dataset": [[258, 266], ["numpy.load", "print", "print", "print", "len", "len", "len"], "function", ["None"], ["", "def", "read_dataset", "(", "dataset_dir", ")", ":", "\n", "    ", "train_set", ",", "val_set", ",", "test_set", "=", "np", ".", "load", "(", "dataset_dir", "+", "\"processed.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "print", "(", "\"train set: \"", ",", "len", "(", "train_set", ")", ",", "end", "=", "\" \"", ")", "\n", "print", "(", "\"val set: \"", ",", "len", "(", "val_set", ")", ",", "end", "=", "\" \"", ")", "\n", "print", "(", "\"test set: \"", ",", "len", "(", "test_set", ")", ")", "\n", "\n", "return", "train_set", ",", "val_set", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.ReptileModel.__init__": [[25, 27], ["torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.ReptileModel.point_grad_to": [[28, 41], ["zip", "model.ReptileModel.parameters", "target.parameters", "p.grad.data.zero_", "p.grad.data.add_", "model.ReptileModel.is_cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "p.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.size"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.is_cuda"], ["", "def", "point_grad_to", "(", "self", ",", "target", ")", ":", "\n", "        ", "'''\n        Set .grad attribute of each parameter to be proportional\n        to the difference between self and target\n        '''", "\n", "for", "p", ",", "target_p", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "target", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "if", "self", ".", "is_cuda", "(", ")", ":", "\n", "                    ", "p", ".", "grad", "=", "Variable", "(", "torch", ".", "zeros", "(", "p", ".", "size", "(", ")", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "grad", "=", "Variable", "(", "torch", ".", "zeros", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "", "", "p", ".", "grad", ".", "data", ".", "zero_", "(", ")", "# not sure this is required", "\n", "p", ".", "grad", ".", "data", ".", "add_", "(", "p", ".", "data", "-", "target_p", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.ReptileModel.is_cuda": [[42, 44], ["next", "model.ReptileModel.parameters"], "methods", ["None"], ["", "", "def", "is_cuda", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "is_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.__init__": [[46, 118], ["model.ReptileModel.__init__", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "list", "list", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "list", "list", "list", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "enumerate", "model.CsgoModel.category_action_offset.append", "model.CsgoModel.category_action_offset.append", "model.CsgoModel.category_action_offset.append", "model.CsgoModel.side_mask.append", "model.CsgoModel.side_mask.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "model.CsgoModel.define_modules", "model.CsgoModel.initialize_modules", "model.CsgoModel.embedding.size", "model.CsgoModel.embedding.size", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "int", "int", "list", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "model.CsgoModel.embedding.size", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "list", "list", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "numpy.arange", "numpy.arange", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.arange", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "side_mask[].astype", "side_mask[].astype"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.define_modules", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_modules"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "npy_dict", ")", ":", "\n", "        ", "super", "(", "CsgoModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "embedding", "=", "torch", ".", "tensor", "(", "npy_dict", "[", "\"action_embedding\"", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "id2name", "=", "list", "(", "npy_dict", "[", "\"action_name\"", "]", ")", "\n", "self", ".", "id2money", "=", "list", "(", "npy_dict", "[", "\"action_money\"", "]", ")", "\n", "self", ".", "prices", "=", "torch", ".", "tensor", "(", "self", ".", "id2money", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "action_capacity", "=", "list", "(", "npy_dict", "[", "\"action_capacity\"", "]", ")", "\n", "self", ".", "type_capacity", "=", "list", "(", "npy_dict", "[", "\"type_capacity\"", "]", ")", "\n", "self", ".", "id2type", "=", "npy_dict", "[", "\"id2type\"", "]", "\n", "self", ".", "typeid2name", "=", "list", "(", "npy_dict", "[", "\"typeid2name\"", "]", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "self", ".", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "output_dim", "=", "self", ".", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "self", ".", "end_idx", "=", "self", ".", "embedding", ".", "size", "(", ")", "[", "0", "]", "-", "1", "\n", "self", ".", "start_idx", "=", "self", ".", "end_idx", "\n", "self", ".", "action_capacity", "[", "self", ".", "end_idx", "]", "=", "HUGE_INT", "\n", "self", ".", "type_capacity", "[", "self", ".", "id2type", "[", "self", ".", "end_idx", "]", "]", "=", "HUGE_INT", "\n", "\n", "self", ".", "mute_action_mask", "=", "1.0", "-", "torch", ".", "eye", "(", "len", "(", "self", ".", "id2type", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mute_type_mask", "=", "torch", ".", "ones", "(", "len", "(", "self", ".", "typeid2name", ")", ",", "len", "(", "self", ".", "id2type", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "typeid", "in", "enumerate", "(", "self", ".", "id2type", ")", ":", "\n", "            ", "self", ".", "mute_type_mask", "[", "typeid", "]", "[", "i", "]", "=", "0.0", "\n", "", "self", ".", "output_categories", "=", "3", "\n", "\n", "\n", "self", ".", "category_offset", "=", "[", "0", ",", "int", "(", "(", "self", ".", "id2type", "<=", "5", ")", ".", "sum", "(", ")", ")", ",", "int", "(", "(", "self", ".", "id2type", "<=", "6", ")", ".", "sum", "(", ")", ")", "]", "\n", "self", ".", "category_action_offset", "=", "[", "]", "# lstm dist id -> action id", "\n", "self", ".", "output_dim1", "=", "self", ".", "category_offset", "[", "1", "]", "+", "1", "\n", "self", ".", "output_dim2", "=", "self", ".", "category_offset", "[", "2", "]", "-", "self", ".", "category_offset", "[", "1", "]", "+", "1", "\n", "self", ".", "output_dim3", "=", "self", ".", "output_dim", "-", "self", ".", "category_offset", "[", "2", "]", "\n", "self", ".", "output_dims", "=", "[", "self", ".", "output_dim1", ",", "self", ".", "output_dim2", ",", "self", ".", "output_dim3", "]", "\n", "assert", "self", ".", "output_dim", "==", "self", ".", "output_dim1", "+", "self", ".", "output_dim2", "+", "self", ".", "output_dim3", "-", "2", "\n", "self", ".", "category_action_offset", ".", "append", "(", "list", "(", "np", ".", "arange", "(", "self", ".", "output_dim1", "-", "1", ")", ")", "+", "[", "self", ".", "end_idx", "]", ")", "\n", "self", ".", "category_action_offset", ".", "append", "(", "list", "(", "np", ".", "arange", "(", "self", ".", "output_dim2", "-", "1", ")", "+", "self", ".", "category_offset", "[", "1", "]", ")", "+", "[", "self", ".", "end_idx", "]", ")", "\n", "self", ".", "category_action_offset", ".", "append", "(", "list", "(", "np", ".", "arange", "(", "self", ".", "output_dim3", ")", "+", "self", ".", "category_offset", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "money_scaling", "=", "args", ".", "money_scaling", "\n", "\n", "self", ".", "shared_attention_weight", "=", "args", ".", "shared_attention_weight", "\n", "self", ".", "different_attention_weight", "=", "args", ".", "different_attention_weight", "\n", "# ways of combining history representation of self", "\n", "self", ".", "hist_encoding", "=", "args", ".", "history_encoding", "\n", "self", ".", "time_decaying", "=", "args", ".", "time_decaying", "\n", "self", ".", "lstm_mode", "=", "args", ".", "lstm_mode", "\n", "\n", "side_mask", "=", "npy_dict", "[", "\"side_mask\"", "]", "\n", "self", ".", "side_mask", "=", "[", "]", "\n", "self", ".", "side_mask", ".", "append", "(", "torch", ".", "tensor", "(", "side_mask", "[", "'t_mask'", "]", ".", "astype", "(", "float", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "self", ".", "side_mask", ".", "append", "(", "torch", ".", "tensor", "(", "side_mask", "[", "'ct_mask'", "]", ".", "astype", "(", "float", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "self", ".", "side_mask", "=", "torch", ".", "cat", "(", "self", ".", "side_mask", ",", "0", ")", "\n", "\n", "self", ".", "side_embedding", "=", "torch", ".", "tensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "history_dim", "=", "args", ".", "history_dim", "\n", "self", ".", "history_num_layers", "=", "args", ".", "history_num_layers", "\n", "self", ".", "ff_dim", "=", "args", ".", "ff_dim", "\n", "self", ".", "resource_dim", "=", "args", ".", "resource_dim", "\n", "self", ".", "money_dim", "=", "5", "# only allies", "\n", "self", ".", "team_dim", "=", "2", "\n", "if", "self", ".", "hist_encoding", "is", "not", "None", ":", "\n", "            ", "self", ".", "input_dim", "=", "self", ".", "embedding_dim", "*", "4", "+", "self", ".", "money_dim", "+", "self", ".", "team_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_dim", "=", "self", ".", "embedding_dim", "*", "3", "+", "self", ".", "money_dim", "+", "self", ".", "team_dim", "\n", "\n", "", "self", ".", "ff_dropout_rate", "=", "args", ".", "ff_dropout_rate", "\n", "self", ".", "max_output_num", "=", "args", ".", "max_output_num", "\n", "self", ".", "beam_size", "=", "args", ".", "beam_size", "\n", "\n", "self", ".", "define_modules", "(", ")", "\n", "#xavier_initialization", "\n", "self", ".", "initialize_modules", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.reward_fun": [[119, 139], ["list", "len", "len", "len", "len", "len", "len", "collections.Counter", "collections.Counter"], "methods", ["None"], ["", "def", "reward_fun", "(", "self", ",", "a", ",", "a_r", ")", ":", "\n", "# F1 score", "\n", "        ", "a_new", "=", "a", "\n", "a_r_new", "=", "a_r", "\n", "# both are empty", "\n", "if", "len", "(", "a_new", ")", "==", "0", "and", "len", "(", "a_r_new", ")", "==", "0", ":", "\n", "            ", "return", "1.0", "\n", "", "a_common", "=", "list", "(", "(", "Counter", "(", "a_new", ")", "&", "Counter", "(", "a_r_new", ")", ")", ".", "elements", "(", ")", ")", "\n", "\n", "# weighting using prices", "\n", "'''tp = torch.sum(self.prices[a_common])\n        recall = tp / (torch.sum(self.prices[a_r_new]) + EPSILON)\n        precision = tp / (torch.sum(self.prices[a_new]) + EPSILON)'''", "\n", "\n", "# unweighted", "\n", "recall", "=", "len", "(", "a_common", ")", "/", "(", "len", "(", "a_r_new", ")", "+", "EPSILON", ")", "\n", "precision", "=", "len", "(", "a_common", ")", "/", "(", "len", "(", "a_new", ")", "+", "EPSILON", ")", "\n", "\n", "F1_score", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "EPSILON", ")", "\n", "return", "F1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.loss": [[140, 221], ["len", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "list", "torch.tensor().cuda.double", "torch.tensor().cuda.double", "torch.tensor().cuda.double", "r.view", "stabled_r_2D.view", "src.filter_batched_category_actions", "src.reshape_batched_category_actions", "range", "torch.tensor().cuda.double", "torch.tensor().cuda.double", "torch.tensor().cuda.double", "bi_loss.double", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "r.view.mean", "ValueError", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "seq_loss_print.append", "range", "seq_loss_print.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "seq_loss_print.append", "range", "seq_loss_print.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model.CsgoModel.reward_fun", "model.CsgoModel.reward_fun", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.nanmean", "model.CsgoModel.reward_fun", "model.CsgoModel.reward_fun", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.nanmean", "r.view.mean", "r.view.std", "src.get_batched_category_label", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "loss_cat.append", "loss_cat.append", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "loss_cat.append", "loss_cat.append", "seq_loss_category.detach().item", "seq_loss_category.detach().item", "seq_loss_category.detach", "seq_loss_category.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.filter_batched_category_actions", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.reshape_batched_category_actions", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.reward_fun", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.reward_fun", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.reward_fun", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.reward_fun", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_category_label"], ["", "def", "loss", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "def", "stablize_reward", "(", "r", ")", ":", "\n", "            ", "r_2D", "=", "r", ".", "view", "(", "-", "1", ",", "self", ".", "num_rollouts", ")", "\n", "if", "self", ".", "baseline", "==", "'avg_reward'", ":", "\n", "                ", "stabled_r_2D", "=", "r_2D", "-", "r_2D", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "baseline", "==", "'avg_reward_normalized'", ":", "\n", "                ", "stabled_r_2D", "=", "(", "r_2D", "-", "r_2D", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "/", "(", "r_2D", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "EPSILON", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unrecognized baseline function: {}'", ".", "format", "(", "self", ".", "baseline", ")", ")", "\n", "", "stabled_r", "=", "stabled_r_2D", ".", "view", "(", "-", "1", ")", "\n", "return", "stabled_r", "\n", "\n", "", "action_list", ",", "greedy_list", ",", "action_prob_by_category", ",", "no_output_bi", ",", "bi_prob", ",", "action_list_by_category", ",", "greedy_list_by_category", "=", "predictions", "\n", "\n", "\n", "batch_size", "=", "len", "(", "action_list", ")", "\n", "\n", "no_output_bi", "=", "torch", ".", "tensor", "(", "no_output_bi", ")", ".", "cuda", "(", ")", "\n", "\n", "log_bi_probs", "=", "torch", ".", "log", "(", "bi_prob", ")", "\n", "\n", "bi_labels", "=", "torch", ".", "tensor", "(", "utils", ".", "get_batched_category_label", "(", "labels", ",", "self", ".", "id2type", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "# LSTM loss", "\n", "seq_loss_print", "=", "[", "]", "\n", "seq_loss", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "lstm_mode", "==", "'triple'", ":", "\n", "            ", "label_by_batch", "=", "utils", ".", "filter_batched_category_actions", "(", "labels", ",", "self", ".", "id2type", ",", "self", ".", "output_categories", ")", "\n", "label_by_category", "=", "utils", ".", "reshape_batched_category_actions", "(", "label_by_batch", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "output_categories", ")", ":", "\n", "                ", "loss_cat", "=", "[", "]", "\n", "if", "torch", ".", "sum", "(", "no_output_bi", "[", ":", ",", "i", "]", ")", "==", "batch_size", ":", "\n", "                    ", "seq_loss_print", ".", "append", "(", "np", ".", "nan", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "reward_sample", "=", "self", ".", "reward_fun", "(", "action_list_by_category", "[", "i", "]", "[", "j", "]", ",", "label_by_category", "[", "i", "]", "[", "j", "]", ")", "\n", "reward_greedy", "=", "self", ".", "reward_fun", "(", "greedy_list_by_category", "[", "i", "]", "[", "j", "]", ",", "label_by_category", "[", "i", "]", "[", "j", "]", ")", "\n", "reward", "=", "reward_sample", "-", "reward_greedy", "\n", "log_prob", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "action_prob_by_category", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "seq_loss_category", "=", "-", "reward", "*", "log_prob", "\n", "seq_loss", "+=", "seq_loss_category", "\n", "if", "no_output_bi", "[", "j", "]", "[", "i", "]", ":", "\n", "                            ", "loss_cat", ".", "append", "(", "np", ".", "nan", ")", "\n", "", "else", ":", "\n", "                            ", "loss_cat", ".", "append", "(", "seq_loss_category", ".", "detach", "(", ")", ".", "item", "(", ")", ")", "\n", "", "", "seq_loss_print", ".", "append", "(", "np", ".", "nanmean", "(", "loss_cat", ")", ")", "\n", "", "", "", "elif", "self", ".", "lstm_mode", "==", "'single'", ":", "\n", "            ", "loss_cat", "=", "[", "]", "\n", "if", "torch", ".", "sum", "(", "no_output_bi", ")", "==", "batch_size", ":", "\n", "                ", "seq_loss_print", ".", "append", "(", "np", ".", "nan", ")", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "reward_sample", "=", "self", ".", "reward_fun", "(", "action_list", "[", "i", "]", ",", "labels", "[", "i", "]", ")", "\n", "reward_greedy", "=", "self", ".", "reward_fun", "(", "greedy_list", "[", "i", "]", ",", "labels", "[", "i", "]", ")", "\n", "reward", "=", "reward_sample", "-", "reward_greedy", "\n", "log_prob", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "action_prob_by_category", "[", "0", "]", "[", "i", "]", ")", ")", "\n", "seq_loss_category", "=", "-", "reward", "*", "log_prob", "\n", "seq_loss", "+=", "seq_loss_category", "\n", "if", "no_output_bi", "[", "i", "]", ":", "\n", "                        ", "loss_cat", ".", "append", "(", "np", ".", "nan", ")", "\n", "", "else", ":", "\n", "                        ", "loss_cat", ".", "append", "(", "seq_loss_category", ".", "detach", "(", ")", ".", "item", "(", ")", ")", "\n", "", "", "seq_loss_print", ".", "append", "(", "np", ".", "nanmean", "(", "loss_cat", ")", ")", "\n", "\n", "", "", "seq_loss", "/=", "batch_size", "\n", "\n", "# binary classifier loss", "\n", "bi_loss", "=", "-", "torch", ".", "sum", "(", "log_bi_probs", "*", "bi_labels", ")", "/", "batch_size", "\n", "bi_loss_print", "=", "list", "(", "(", "torch", ".", "sum", "(", "log_bi_probs", "*", "bi_labels", ",", "0", ")", "/", "batch_size", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "loss_dict", "=", "{", "}", "\n", "loss_dict", "[", "'model_loss'", "]", "=", "seq_loss", ".", "double", "(", ")", "+", "bi_loss", ".", "double", "(", ")", "\n", "loss_dict", "[", "'bi_loss'", "]", "=", "bi_loss_print", "\n", "loss_dict", "[", "'seq_loss'", "]", "=", "seq_loss_print", "\n", "\n", "loss_dict", "[", "'real_seq_loss'", "]", "=", "seq_loss", ".", "double", "(", ")", "\n", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.get_embedding": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "embedding", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.high_att": [[225, 243], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.CsgoModel.att_LN2", "model.CsgoModel.v2", "model.CsgoModel.att_LN2_t", "model.CsgoModel.v2_t", "model.CsgoModel.att_LN2_o", "model.CsgoModel.v2_o"], "methods", ["None"], ["", "def", "high_att", "(", "self", ",", "x", ",", "side", "=", "None", ")", ":", "\n", "# team-level attention", "\n", "        ", "if", "side", "is", "None", ":", "\n", "            ", "h", "=", "self", ".", "att_LN2", "(", "x", ")", "\n", "", "elif", "side", "==", "'t'", ":", "\n", "            ", "h", "=", "self", ".", "att_LN2_t", "(", "x", ")", "\n", "", "elif", "side", "==", "'o'", ":", "\n", "            ", "h", "=", "self", ".", "att_LN2_o", "(", "x", ")", "\n", "", "h", "=", "torch", ".", "tanh", "(", "h", ")", "\n", "if", "side", "is", "None", ":", "\n", "            ", "h", "=", "self", ".", "v2", "(", "h", ")", "\n", "", "elif", "side", "==", "'t'", ":", "\n", "            ", "h", "=", "self", ".", "v2_t", "(", "h", ")", "\n", "", "elif", "side", "==", "'o'", ":", "\n", "            ", "h", "=", "self", ".", "v2_o", "(", "h", ")", "\n", "", "att", "=", "F", ".", "softmax", "(", "h", ",", "0", ")", "\n", "ret", "=", "torch", ".", "sum", "(", "att", "*", "x", ",", "0", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.low_att": [[244, 270], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.CsgoModel.att_LN1", "model.CsgoModel.v1", "model.CsgoModel.att_LN1_s", "model.CsgoModel.v1_s", "model.CsgoModel.att_LN1_t", "model.CsgoModel.v1_t", "model.CsgoModel.att_LN1_o", "model.CsgoModel.v1_o", "model.CsgoModel.att_LN1_h", "model.CsgoModel.v1_h"], "methods", ["None"], ["", "def", "low_att", "(", "self", ",", "x", ",", "side", "=", "None", ")", ":", "\n", "# player-level attention", "\n", "        ", "if", "side", "is", "None", ":", "\n", "            ", "h", "=", "self", ".", "att_LN1", "(", "x", ")", "\n", "", "elif", "side", "==", "'s'", ":", "\n", "            ", "h", "=", "self", ".", "att_LN1_s", "(", "x", ")", "\n", "", "elif", "side", "==", "'t'", ":", "\n", "            ", "h", "=", "self", ".", "att_LN1_t", "(", "x", ")", "\n", "", "elif", "side", "==", "'o'", ":", "\n", "            ", "h", "=", "self", ".", "att_LN1_o", "(", "x", ")", "\n", "", "elif", "side", "==", "'h'", ":", "\n", "            ", "h", "=", "self", ".", "att_LN1_h", "(", "x", ")", "\n", "", "h", "=", "torch", ".", "tanh", "(", "h", ")", "\n", "if", "side", "is", "None", ":", "\n", "            ", "h", "=", "self", ".", "v1", "(", "h", ")", "\n", "", "elif", "side", "==", "'s'", ":", "\n", "            ", "h", "=", "self", ".", "v1_s", "(", "h", ")", "\n", "", "elif", "side", "==", "'t'", ":", "\n", "            ", "h", "=", "self", ".", "v1_t", "(", "h", ")", "\n", "", "elif", "side", "==", "'o'", ":", "\n", "            ", "h", "=", "self", ".", "v1_o", "(", "h", ")", "\n", "", "elif", "side", "==", "'h'", ":", "\n", "            ", "h", "=", "self", ".", "v1_h", "(", "h", ")", "\n", "", "att", "=", "F", ".", "softmax", "(", "h", ",", "0", ")", "\n", "ret", "=", "torch", ".", "sum", "(", "att", "*", "x", ",", "0", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.encode_money": [[271, 278], ["model.CsgoModel.money_LN1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.money_LN2", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "encode_money", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "money_LN1", "(", "x", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "LNDropout", "(", "h", ")", "\n", "h", "=", "self", ".", "money_LN2", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.BiClassif": [[279, 328], ["torch.softmax", "torch.softmax", "torch.softmax", "model.CsgoModel.BClassif1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif2", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif3", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif4", "model.CsgoModel.BClassif1_1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif1_2", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif1_3", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif1_4", "model.CsgoModel.BClassif2_1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif2_2", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif2_3", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif2_4", "model.CsgoModel.BClassif3_1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif3_2", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif3_3", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.BClassif3_4", "NotImplementedError"], "methods", ["None"], ["", "def", "BiClassif", "(", "self", ",", "x", ",", "category_id", "=", "None", ")", ":", "\n", "        ", "if", "category_id", "is", "None", ":", "\n", "            ", "h_bi", "=", "self", ".", "BClassif1", "(", "x", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif2", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif3", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif4", "(", "h_bi", ")", "\n", "", "elif", "category_id", "==", "0", ":", "\n", "            ", "h_bi", "=", "self", ".", "BClassif1_1", "(", "x", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif1_2", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif1_3", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif1_4", "(", "h_bi", ")", "\n", "", "elif", "category_id", "==", "1", ":", "\n", "            ", "h_bi", "=", "self", ".", "BClassif2_1", "(", "x", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif2_2", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif2_3", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif2_4", "(", "h_bi", ")", "\n", "", "elif", "category_id", "==", "2", ":", "\n", "            ", "h_bi", "=", "self", ".", "BClassif3_1", "(", "x", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif3_2", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif3_3", "(", "h_bi", ")", "\n", "h_bi", "=", "F", ".", "relu", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "LNDropout", "(", "h_bi", ")", "\n", "h_bi", "=", "self", ".", "BClassif3_4", "(", "h_bi", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Category ID exceeds number of output categories.\"", ")", "\n", "\n", "", "return", "F", ".", "softmax", "(", "h_bi", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.classif_LN": [[329, 355], ["torch.softmax", "torch.softmax", "torch.softmax", "model.CsgoModel.LN1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.LN2", "model.CsgoModel.LN1_1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.LN1_2", "model.CsgoModel.LN2_1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.LN2_2", "model.CsgoModel.LN3_1", "torch.relu", "torch.relu", "torch.relu", "model.CsgoModel.LNDropout", "model.CsgoModel.LN3_2", "NotImplementedError"], "methods", ["None"], ["", "def", "classif_LN", "(", "self", ",", "x", ",", "category_id", "=", "None", ")", ":", "\n", "        ", "if", "category_id", "is", "None", ":", "\n", "            ", "out", "=", "self", ".", "LN1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "LNDropout", "(", "out", ")", "\n", "out", "=", "self", ".", "LN2", "(", "out", ")", "\n", "", "elif", "category_id", "==", "0", ":", "\n", "            ", "out", "=", "self", ".", "LN1_1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "LNDropout", "(", "out", ")", "\n", "out", "=", "self", ".", "LN1_2", "(", "out", ")", "\n", "", "elif", "category_id", "==", "1", ":", "\n", "            ", "out", "=", "self", ".", "LN2_1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "LNDropout", "(", "out", ")", "\n", "out", "=", "self", ".", "LN2_2", "(", "out", ")", "\n", "", "elif", "category_id", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "LN3_1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "LNDropout", "(", "out", ")", "\n", "out", "=", "self", ".", "LN3_2", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Category ID exceeds number of output categories.\"", ")", "\n", "\n", "", "out", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.money_mask": [[356, 358], ["None"], "methods", ["None"], ["", "def", "money_mask", "(", "self", ",", "money", ")", ":", "\n", "        ", "return", "(", "self", ".", "prices", "<=", "money", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.get_residual_capacity": [[359, 365], ["collections.Counter", "capacity.copy", "collections.Counter.items"], "methods", ["None"], ["", "def", "get_residual_capacity", "(", "self", ",", "l", ",", "capacity", ")", ":", "\n", "        ", "possession", "=", "Counter", "(", "l", ")", "\n", "residual_capacity", "=", "capacity", ".", "copy", "(", ")", "\n", "for", "key", ",", "value", "in", "possession", ".", "items", "(", ")", ":", "\n", "            ", "residual_capacity", "[", "key", "]", "-=", "value", "\n", "", "return", "residual_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.get_capacity_mask": [[366, 370], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "get_capacity_mask", "(", "self", ",", "res_capacity", ",", "mute_mask", ")", ":", "\n", "        ", "to_multiply_mask", "=", "1", "-", "(", "res_capacity", ">", "0", ")", ".", "float", "(", ")", "\n", "ret", "=", "(", "torch", ".", "mm", "(", "to_multiply_mask", ",", "mute_mask", ")", "==", "torch", ".", "sum", "(", "to_multiply_mask", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.generate": [[371, 506], ["len", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "src.remove_token", "range", "model.CsgoModel.initialize_lstm", "no_output_bi[].float", "range", "action_list_by_category.append", "action_prob_by_category.append", "model.CsgoModel.initialize_lstm", "no_output_bi.float().view", "range", "action_list_by_category.append", "action_prob_by_category.append", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "model.CsgoModel.classif_LN", "model.CsgoModel.get_capacity_mask", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "action_prob_category.append", "src.remove_token.append", "action_list_category.append", "model.CsgoModel.update_lstm", "src.remove_token", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CsgoModel.classif_LN", "model.CsgoModel.get_capacity_mask", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "action_prob_category.append", "src.remove_token.append", "action_list_category.append", "model.CsgoModel.update_lstm", "src.remove_token", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "range", "model.CsgoModel.money_mask", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "no_output_bi.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "range", "model.CsgoModel.money_mask", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu().numpy().tolist", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "src.remove_token.append", "action_list_category.append", "action_prob_category.append", "money.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "action_idx.view", "res_action_capacity.view", "res_type_capacity.view", "src.remove_token.append", "action_list_category.append", "action_prob_category.append", "money.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "action_idx.view", "res_action_capacity.view", "res_type_capacity.view", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "no_output_bi.float().view.unsqueeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "action_idx.view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "torch.ones().double().cuda", "no_output_bi.float().view.unsqueeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "action_idx.view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "model.CsgoModel.size", "no_output_bi.float().view.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "action_idx.view", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "model.CsgoModel.size", "no_output_bi.float().view.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "action_idx.view", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "res_action_capacity.size", "res_type_capacity.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.ones().double", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "res_action_capacity.size", "res_type_capacity.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.remove_token", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.classif_LN", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.update_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.remove_token", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.classif_LN", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.update_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.remove_token", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.money_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.money_mask"], ["", "def", "generate", "(", "self", ",", "init_embedding", ",", "init_h", ",", "init_c", ",", "no_output_bi", ",", "money", ",", "side_all", ",", "res_action_capacity", ",", "res_type_capacity", ",", "is_greedy", "=", "True", ")", ":", "\n", "        ", "'''\n        generate predictions using lstm\n        '''", "\n", "action_list", "=", "[", "]", "\n", "action_list_by_category", "=", "[", "]", "\n", "action_prob_by_category", "=", "[", "]", "\n", "batch_size", "=", "len", "(", "init_embedding", ")", "\n", "if", "self", ".", "lstm_mode", "==", "'triple'", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "output_categories", ")", ":", "\n", "# initialize LSTM", "\n", "                ", "self", ".", "initialize_lstm", "(", "init_embedding", ",", "(", "init_h", ",", "init_c", ")", ",", "j", ")", "\n", "\n", "action_prob_category", "=", "[", "]", "\n", "action_list_category", "=", "[", "]", "\n", "is_end", "=", "no_output_bi", "[", ":", ",", "j", "]", ".", "float", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_output_num", ")", ":", "\n", "                    ", "if", "torch", ".", "sum", "(", "is_end", ")", "==", "len", "(", "is_end", ")", ":", "\n", "                        ", "for", "_", "in", "range", "(", "self", ".", "max_output_num", "-", "i", ")", ":", "\n", "                            ", "action_list", ".", "append", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "*", "self", ".", "end_idx", ")", "\n", "action_list_category", ".", "append", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "*", "self", ".", "end_idx", ")", "\n", "action_prob_category", ".", "append", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "double", "(", ")", ".", "cuda", "(", ")", ")", "\n", "", "break", "\n", "\n", "", "H", "=", "self", ".", "history", "[", "-", "1", "]", "[", "0", "]", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "action_dist", "=", "self", ".", "classif_LN", "(", "H", ",", "j", ")", "\n", "\n", "action_mask", "=", "self", ".", "money_mask", "(", "money", ".", "unsqueeze", "(", "1", ")", ")", "*", "self", ".", "side_mask", "[", "side_all", "]", "\n", "action_mask", "*=", "(", "res_action_capacity", ">", "0", ")", ".", "float", "(", ")", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "res_type_capacity", ",", "self", ".", "mute_type_mask", ")", "\n", "action_mask", "=", "action_mask", "[", ":", ",", "self", ".", "category_action_offset", "[", "j", "]", "]", "\n", "action_dist", "=", "action_dist", "*", "action_mask", "# + (1 - action_mask) * EPSILON", "\n", "\n", "is_zero", "=", "(", "torch", ".", "sum", "(", "action_dist", ",", "1", ")", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mask_all_tensor", "=", "torch", ".", "zeros", "(", "action_dist", ".", "size", "(", ")", "[", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "mask_all_tensor", "[", "-", "1", "]", "=", "1.0", "\n", "action_dist", "=", "action_dist", "+", "is_zero", "*", "mask_all_tensor", "\n", "\n", "if", "is_end", "is", "not", "None", ":", "\n", "                        ", "action_dist", "=", "(", "1", "-", "is_end", ".", "unsqueeze", "(", "1", ")", ")", "*", "action_dist", "+", "is_end", ".", "unsqueeze", "(", "1", ")", "*", "mask_all_tensor", "\n", "\n", "", "if", "is_greedy", ":", "\n", "                        ", "output_idx", "=", "torch", ".", "argmax", "(", "action_dist", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "# normalize", "\n", "                        ", "action_dist", "=", "action_dist", "/", "torch", ".", "sum", "(", "action_dist", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "output_idx", "=", "torch", ".", "multinomial", "(", "action_dist", ",", "1", ",", "replacement", "=", "True", ")", "\n", "\n", "", "action_idx", "=", "torch", ".", "tensor", "(", "self", ".", "category_action_offset", "[", "j", "]", ")", ".", "cuda", "(", ")", "[", "output_idx", "]", "\n", "\n", "action_prob_category", ".", "append", "(", "torch", ".", "gather", "(", "action_dist", ",", "1", ",", "output_idx", ")", ")", "\n", "\n", "is_end", "=", "(", "action_idx", "==", "self", ".", "end_idx", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "action_list", ".", "append", "(", "action_idx", ")", "\n", "action_list_category", ".", "append", "(", "action_idx", ")", "\n", "\n", "self", ".", "update_lstm", "(", "action_idx", ",", "j", ")", "\n", "\n", "money", "=", "money", "-", "self", ".", "prices", "[", "action_idx", ".", "view", "(", "-", "1", ")", "]", "\n", "res_action_capacity", "-=", "torch", ".", "eye", "(", "res_action_capacity", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "[", "action_idx", ".", "view", "(", "-", "1", ")", "]", "\n", "res_type_capacity", "-=", "torch", ".", "eye", "(", "res_type_capacity", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "[", "torch", ".", "tensor", "(", "self", ".", "id2type", ")", ".", "cuda", "(", ")", "[", "action_idx", ".", "view", "(", "-", "1", ")", "]", "]", "\n", "\n", "assert", "torch", ".", "sum", "(", "(", "money", ">=", "0", ")", ".", "float", "(", ")", ")", "==", "batch_size", "\n", "assert", "torch", ".", "sum", "(", "(", "res_action_capacity", ">=", "0", ")", ".", "float", "(", ")", ")", "==", "len", "(", "res_action_capacity", ".", "view", "(", "-", "1", ")", ")", "\n", "assert", "torch", ".", "sum", "(", "(", "res_type_capacity", ">=", "0", ")", ".", "float", "(", ")", ")", "==", "len", "(", "res_type_capacity", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "action_list_by_category", ".", "append", "(", "utils", ".", "remove_token", "(", "torch", ".", "cat", "(", "action_list_category", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "self", ".", "end_idx", ")", ")", "\n", "action_prob_by_category", ".", "append", "(", "torch", ".", "cat", "(", "action_prob_category", ",", "1", ")", ")", "\n", "", "", "elif", "self", ".", "lstm_mode", "==", "'single'", ":", "\n", "# initialize LSTM", "\n", "            ", "self", ".", "initialize_lstm", "(", "init_embedding", ",", "(", "init_h", ",", "init_c", ")", ")", "\n", "\n", "# in single lstm mode, action_list_category is the same as action_list", "\n", "action_prob_category", "=", "[", "]", "\n", "action_list_category", "=", "[", "]", "\n", "is_end", "=", "no_output_bi", ".", "float", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_output_num", ")", ":", "\n", "                ", "if", "torch", ".", "sum", "(", "is_end", ")", "==", "len", "(", "is_end", ")", ":", "\n", "                    ", "for", "_", "in", "range", "(", "self", ".", "max_output_num", "-", "i", ")", ":", "\n", "                        ", "action_list", ".", "append", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "*", "self", ".", "end_idx", ")", "\n", "action_list_category", ".", "append", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "*", "self", ".", "end_idx", ")", "\n", "action_prob_category", ".", "append", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "double", "(", ")", ".", "cuda", "(", ")", ")", "\n", "", "break", "\n", "\n", "", "H", "=", "self", ".", "history", "[", "-", "1", "]", "[", "0", "]", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "action_dist", "=", "self", ".", "classif_LN", "(", "H", ")", "\n", "\n", "action_mask", "=", "self", ".", "money_mask", "(", "money", ".", "unsqueeze", "(", "1", ")", ")", "*", "self", ".", "side_mask", "[", "side_all", "]", "\n", "action_mask", "*=", "(", "res_action_capacity", ">", "0", ")", ".", "float", "(", ")", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "res_type_capacity", ",", "self", ".", "mute_type_mask", ")", "\n", "action_dist", "=", "action_dist", "*", "action_mask", "# + (1 - action_mask) * EPSILON", "\n", "\n", "is_zero", "=", "(", "torch", ".", "sum", "(", "action_dist", ",", "1", ")", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mask_all_tensor", "=", "torch", ".", "zeros", "(", "action_dist", ".", "size", "(", ")", "[", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "mask_all_tensor", "[", "-", "1", "]", "=", "1.0", "\n", "action_dist", "=", "action_dist", "+", "is_zero", "*", "mask_all_tensor", "\n", "\n", "if", "is_end", "is", "not", "None", ":", "\n", "                    ", "action_dist", "=", "(", "1", "-", "is_end", ".", "unsqueeze", "(", "1", ")", ")", "*", "action_dist", "+", "is_end", ".", "unsqueeze", "(", "1", ")", "*", "mask_all_tensor", "\n", "\n", "", "if", "is_greedy", ":", "\n", "                    ", "output_idx", "=", "torch", ".", "argmax", "(", "action_dist", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "# normalize", "\n", "                    ", "action_dist", "=", "action_dist", "/", "torch", ".", "sum", "(", "action_dist", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "output_idx", "=", "torch", ".", "multinomial", "(", "action_dist", ",", "1", ",", "replacement", "=", "True", ")", "\n", "\n", "", "action_idx", "=", "output_idx", "\n", "\n", "action_prob_category", ".", "append", "(", "torch", ".", "gather", "(", "action_dist", ",", "1", ",", "output_idx", ")", ")", "\n", "\n", "is_end", "=", "(", "action_idx", "==", "self", ".", "end_idx", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "action_list", ".", "append", "(", "action_idx", ")", "\n", "action_list_category", ".", "append", "(", "action_idx", ")", "\n", "\n", "self", ".", "update_lstm", "(", "action_idx", ")", "\n", "\n", "money", "=", "money", "-", "self", ".", "prices", "[", "action_idx", ".", "view", "(", "-", "1", ")", "]", "\n", "res_action_capacity", "-=", "torch", ".", "eye", "(", "res_action_capacity", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "[", "action_idx", ".", "view", "(", "-", "1", ")", "]", "\n", "res_type_capacity", "-=", "torch", ".", "eye", "(", "res_type_capacity", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "[", "torch", ".", "tensor", "(", "self", ".", "id2type", ")", ".", "cuda", "(", ")", "[", "action_idx", ".", "view", "(", "-", "1", ")", "]", "]", "\n", "\n", "assert", "torch", ".", "sum", "(", "(", "money", ">=", "0", ")", ".", "float", "(", ")", ")", "==", "batch_size", "\n", "assert", "torch", ".", "sum", "(", "(", "res_action_capacity", ">=", "0", ")", ".", "float", "(", ")", ")", "==", "len", "(", "res_action_capacity", ".", "view", "(", "-", "1", ")", ")", "\n", "assert", "torch", ".", "sum", "(", "(", "res_type_capacity", ">=", "0", ")", ".", "float", "(", ")", ")", "==", "len", "(", "res_type_capacity", ".", "view", "(", "-", "1", ")", ")", "\n", "", "action_list_by_category", ".", "append", "(", "utils", ".", "remove_token", "(", "torch", ".", "cat", "(", "action_list_category", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "self", ".", "end_idx", ")", ")", "\n", "action_prob_by_category", ".", "append", "(", "torch", ".", "cat", "(", "action_prob_category", ",", "1", ")", ")", "\n", "\n", "", "action_list", "=", "torch", ".", "cat", "(", "action_list", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "action_list", "=", "utils", ".", "remove_token", "(", "action_list", ",", "self", ".", "end_idx", ")", "\n", "\n", "return", "action_list", ",", "action_list_by_category", ",", "action_prob_by_category", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.forward": [[507, 657], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "model.CsgoModel.get_embedding().unsqueeze", "model.CsgoModel.HLN().view", "model.CsgoModel.CLN().view", "model.CsgoModel.generate", "model.CsgoModel.generate", "money_all.append", "x_s_all.append", "side_all.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CsgoModel.encode_money", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "money.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "money.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.tensor().cuda.clone", "torch.cat.cpu().numpy().tolist", "torch.cat.cpu().numpy().tolist", "torch.cat.cpu().numpy().tolist", "model.CsgoModel.low_att", "model.CsgoModel.low_att", "model.CsgoModel.append", "money_t.append", "model.CsgoModel.high_att", "model.CsgoModel.high_att", "model.CsgoModel.append", "model.CsgoModel.high_att", "model.CsgoModel.high_att", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CsgoModel.hist_encoding.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model.CsgoModel.BiClassif", "torch.cat.append", "torch.cat.append", "torch.cat.append", "model.CsgoModel.BiClassif", "torch.cat.append", "torch.cat.append", "torch.cat.append", "model.CsgoModel.get_residual_capacity", "model.CsgoModel.get_residual_capacity", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model.CsgoModel.get_embedding", "model.CsgoModel.HLN", "model.CsgoModel.CLN", "model.CsgoModel.get_embedding", "model.CsgoModel.get_embedding", "model.CsgoModel.low_att", "model.CsgoModel.low_att", "model.CsgoModel.unsqueeze", "model.CsgoModel.low_att", "model.CsgoModel.low_att", "model.CsgoModel.unsqueeze", "torch.sum.append", "torch.sum.append", "torch.sum.append", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.arange().float().cuda", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "model.CsgoModel.unsqueeze", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "model.CsgoModel.unsqueeze", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "model.CsgoModel.get_embedding", "model.CsgoModel.get_embedding", "model.CsgoModel.get_embedding", "model.CsgoModel.get_embedding", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model.CsgoModel.low_att", "model.CsgoModel.low_att", "model.CsgoModel.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "w_time.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "NotImplementedError", "model.CsgoModel.get_embedding", "model.CsgoModel.low_att", "model.CsgoModel.get_embedding", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "model.CsgoModel.get_embedding", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.generate", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.generate", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.encode_money", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.BiClassif", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.BiClassif", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding"], ["", "def", "forward", "(", "self", ",", "data", ",", "gate", "=", "True", ")", ":", "\n", "        ", "'''\n        forward for one round\n        x: idx of weapons, x = [x_s, x_t, x_o]\n        x_s: num_weapon #(num_batch, num_shot, num_weapon)\n        x_t, x_o: (num_player, num_weapon) #(num_batch, num_shot, num_player, num_weapon)\n        '''", "\n", "batch_size", "=", "len", "(", "data", ")", "\n", "h", "=", "[", "]", "\n", "money_all", "=", "[", "]", "\n", "x_s_all", "=", "[", "]", "\n", "side_all", "=", "[", "]", "\n", "\n", "for", "db", "in", "data", ":", "\n", "            ", "side", ",", "x_s", ",", "money_s", ",", "perf_s", ",", "score", ",", "x_t", ",", "x_o", ",", "x_s_history", ",", "score_s_history", "=", "db", "\n", "money_all", ".", "append", "(", "money_s", "[", "0", "]", ")", "\n", "x_s_all", ".", "append", "(", "x_s", ")", "\n", "side_all", ".", "append", "(", "side", "[", "0", "]", ")", "\n", "\n", "# represent self", "\n", "if", "self", ".", "shared_attention_weight", ":", "\n", "                ", "hs", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s", ")", ")", "\n", "", "else", ":", "\n", "                ", "hs", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s", ")", ",", "'s'", ")", "\n", "\n", "# represent allies (include self)", "\n", "", "ht", "=", "[", "]", "\n", "money_t", "=", "[", "]", "\n", "for", "xti", ",", "moneyi", ",", "perfi", "in", "x_t", ":", "\n", "                ", "if", "self", ".", "shared_attention_weight", ":", "\n", "                    ", "hti", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xti", ")", ")", "\n", "", "else", ":", "\n", "                    ", "hti", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xti", ")", ",", "'t'", ")", "\n", "", "ht", ".", "append", "(", "hti", ".", "unsqueeze", "(", "0", ")", ")", "\n", "money_t", ".", "append", "(", "moneyi", "[", "0", "]", ")", "\n", "\n", "", "ht", "=", "torch", ".", "cat", "(", "ht", ",", "0", ")", "\n", "if", "self", ".", "shared_attention_weight", ":", "\n", "                ", "ht", "=", "self", ".", "high_att", "(", "ht", ")", "\n", "", "else", ":", "\n", "                ", "ht", "=", "self", ".", "high_att", "(", "ht", ",", "'t'", ")", "\n", "\n", "# represent enemies", "\n", "", "ho", "=", "[", "]", "\n", "for", "xoi", ",", "moneyi", ",", "perfi", "in", "x_o", ":", "\n", "                ", "if", "self", ".", "shared_attention_weight", ":", "\n", "                    ", "hoi", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xoi", ")", ")", "\n", "", "else", ":", "\n", "                    ", "hoi", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xoi", ")", ",", "'o'", ")", "\n", "#hoi = torch.cat([hoi, torch.tensor(moneyi).cuda(), torch.tensor(perfi).cuda()], -1)", "\n", "", "ho", ".", "append", "(", "hoi", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "ho", "=", "torch", ".", "cat", "(", "ho", ",", "0", ")", "\n", "if", "self", ".", "shared_attention_weight", ":", "\n", "                ", "ho", "=", "self", ".", "high_att", "(", "ho", ")", "\n", "", "else", ":", "\n", "                ", "ho", "=", "self", ".", "high_att", "(", "ho", ",", "'o'", ")", "\n", "\n", "# money representation", "\n", "# teammate money only", "\n", "", "h_money", "=", "self", ".", "encode_money", "(", "torch", ".", "tensor", "(", "money_t", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "# incorporate round history information into self representation", "\n", "if", "self", ".", "hist_encoding", "is", "not", "None", ":", "\n", "                ", "h_s_history", "=", "[", "]", "\n", "for", "x_s_h", "in", "x_s_history", ":", "\n", "                    ", "if", "self", ".", "shared_attention_weight", ":", "\n", "                        ", "X", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s_h", ")", ")", "\n", "if", "self", ".", "different_attention_weight", ":", "\n", "                            ", "X", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s_h", ")", ",", "'h'", ")", "\n", "", "", "else", ":", "\n", "                        ", "X", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s_h", ")", ",", "'s'", ")", "\n", "", "h_s_history", ".", "append", "(", "X", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "h_s_history", "=", "torch", ".", "cat", "(", "h_s_history", ",", "0", ")", "\n", "", "if", "self", ".", "hist_encoding", "is", "None", ":", "\n", "                ", "h_s_history", "=", "None", "\n", "", "else", ":", "\n", "                ", "hist_model", "=", "self", ".", "hist_encoding", ".", "split", "(", "'.'", ")", "\n", "if", "hist_model", "[", "-", "1", "]", "==", "'time'", ":", "\n", "                    ", "power_idx", "=", "torch", ".", "arange", "(", "h_s_history", ".", "size", "(", ")", "[", "0", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "power_idx", "=", "torch", ".", "flip", "(", "power_idx", ",", "[", "-", "1", "]", ")", "\n", "w_time", "=", "self", ".", "time_decaying", "**", "power_idx", "\n", "w_time", "=", "w_time", "/", "torch", ".", "sum", "(", "w_time", ")", "\n", "h_s_history", "=", "w_time", ".", "unsqueeze", "(", "1", ")", "*", "h_s_history", "\n", "", "if", "hist_model", "[", "0", "]", "==", "'avg'", ":", "\n", "                    ", "h_s_history", "=", "torch", ".", "mean", "(", "h_s_history", ",", "0", ")", "\n", "", "elif", "hist_model", "[", "0", "]", "==", "'score_weighted'", ":", "\n", "                    ", "w_score", "=", "torch", ".", "tensor", "(", "score_s_history", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "EPSILON", "\n", "norm_w_score", "=", "w_score", "/", "torch", ".", "sum", "(", "w_score", ")", "\n", "h_s_history", "=", "torch", ".", "sum", "(", "norm_w_score", "*", "h_s_history", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Specified way to process self history is not defined.\"", ")", "\n", "\n", "# concat representations", "\n", "", "", "if", "self", ".", "hist_encoding", "is", "not", "None", ":", "\n", "                ", "hb", "=", "torch", ".", "cat", "(", "[", "h_s_history", ",", "hs", ",", "ht", ",", "ho", ",", "h_money", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "hb", "=", "torch", ".", "cat", "(", "[", "hs", ",", "ht", ",", "ho", ",", "h_money", "]", ",", "-", "1", ")", "\n", "\n", "# incorporate team information", "\n", "", "hb", "=", "torch", ".", "cat", "(", "[", "hb", ",", "self", ".", "side_embedding", "[", "side", "[", "0", "]", "]", "]", ",", "-", "1", ")", "\n", "\n", "h", ".", "append", "(", "hb", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "h", "=", "torch", ".", "cat", "(", "h", ",", "0", ")", "\n", "assert", "h", ".", "size", "(", ")", "[", "0", "]", "==", "batch_size", "\n", "\n", "# seperate binary classifier", "\n", "bi_prob", "=", "[", "]", "\n", "no_output_bi", "=", "[", "]", "\n", "if", "self", ".", "lstm_mode", "==", "'triple'", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "output_categories", ")", ":", "\n", "                ", "h_bi", "=", "self", ".", "BiClassif", "(", "h", ".", "detach", "(", ")", ",", "i", ")", "\n", "bi_prob", ".", "append", "(", "h_bi", ".", "unsqueeze", "(", "1", ")", ")", "\n", "if", "gate", ":", "\n", "                    ", "no_output_bi", ".", "append", "(", "(", "h_bi", "[", ":", ",", "0", "]", ">", "h_bi", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "no_output_bi", ".", "append", "(", "(", "h_bi", "[", ":", ",", "0", "]", "!=", "h_bi", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "", "", "elif", "self", ".", "lstm_mode", "==", "'single'", ":", "\n", "            ", "h_bi", "=", "self", ".", "BiClassif", "(", "h", ".", "detach", "(", ")", ")", "\n", "bi_prob", ".", "append", "(", "h_bi", ".", "unsqueeze", "(", "1", ")", ")", "\n", "if", "gate", ":", "\n", "                ", "no_output_bi", ".", "append", "(", "(", "h_bi", "[", ":", ",", "0", "]", ">", "h_bi", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "no_output_bi", ".", "append", "(", "(", "h_bi", "[", ":", ",", "0", "]", "!=", "h_bi", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "", "bi_prob", "=", "torch", ".", "cat", "(", "bi_prob", ",", "1", ")", "\n", "no_output_bi", "=", "torch", ".", "cat", "(", "no_output_bi", ",", "1", ")", "\n", "\n", "# resource left", "\n", "money", "=", "torch", ".", "tensor", "(", "money_all", ")", ".", "cuda", "(", ")", "*", "self", ".", "money_scaling", "\n", "res_action_capacity", "=", "[", "]", "\n", "res_type_capacity", "=", "[", "]", "\n", "for", "x_s", "in", "x_s_all", ":", "\n", "            ", "res_action_capacity", ".", "append", "(", "self", ".", "get_residual_capacity", "(", "x_s", ",", "self", ".", "action_capacity", ")", ")", "\n", "res_type_capacity", ".", "append", "(", "self", ".", "get_residual_capacity", "(", "self", ".", "id2type", "[", "x_s", "]", ",", "self", ".", "type_capacity", ")", ")", "\n", "", "res_action_capacity", "=", "torch", ".", "tensor", "(", "res_action_capacity", ")", ".", "cuda", "(", ")", "\n", "res_type_capacity", "=", "torch", ".", "tensor", "(", "res_type_capacity", ")", ".", "cuda", "(", ")", "\n", "\n", "# initialize lstm", "\n", "init_action", "=", "[", "self", ".", "start_idx", "]", "*", "batch_size", "\n", "init_embedding", "=", "self", ".", "get_embedding", "(", "init_action", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# transform representation to initialize (h, c)", "\n", "init_h", "=", "self", ".", "HLN", "(", "h", ")", ".", "view", "(", "self", ".", "history_num_layers", ",", "batch_size", ",", "self", ".", "history_dim", ")", "\n", "init_c", "=", "self", ".", "CLN", "(", "h", ")", ".", "view", "(", "self", ".", "history_num_layers", ",", "batch_size", ",", "self", ".", "history_dim", ")", "\n", "\n", "action_list", ",", "action_list_by_category", ",", "action_prob_by_category", "=", "self", ".", "generate", "(", "init_embedding", ",", "init_h", ",", "init_c", ",", "no_output_bi", ",", "money", ".", "clone", "(", ")", ",", "side_all", ",", "res_action_capacity", ".", "clone", "(", ")", ",", "res_type_capacity", ".", "clone", "(", ")", ",", "is_greedy", "=", "False", ")", "\n", "\n", "greedy_list", ",", "greedy_list_by_category", ",", "_", "=", "self", ".", "generate", "(", "init_embedding", ",", "init_h", ",", "init_c", ",", "no_output_bi", ",", "money", ".", "clone", "(", ")", ",", "side_all", ",", "res_action_capacity", ".", "clone", "(", ")", ",", "res_type_capacity", ".", "clone", "(", ")", ",", "is_greedy", "=", "True", ")", "\n", "\n", "return", "action_list", ",", "greedy_list", ",", "action_prob_by_category", ",", "no_output_bi", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "bi_prob", ",", "action_list_by_category", ",", "greedy_list_by_category", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.initialize_lstm": [[658, 669], ["model.CsgoModel.rnn", "model.CsgoModel.rnn1", "NotImplementedError", "model.CsgoModel.rnn2", "model.CsgoModel.rnn3"], "methods", ["None"], ["", "def", "initialize_lstm", "(", "self", ",", "init_embedding", ",", "init_state", ",", "category_id", "=", "None", ")", ":", "\n", "        ", "if", "category_id", "is", "None", ":", "\n", "            ", "self", ".", "history", "=", "[", "self", ".", "rnn", "(", "init_embedding", ",", "init_state", ")", "[", "1", "]", "]", "\n", "", "elif", "category_id", "==", "0", ":", "\n", "            ", "self", ".", "history", "=", "[", "self", ".", "rnn1", "(", "init_embedding", ",", "init_state", ")", "[", "1", "]", "]", "\n", "", "elif", "category_id", "==", "1", ":", "\n", "            ", "self", ".", "history", "=", "[", "self", ".", "rnn2", "(", "init_embedding", ",", "init_state", ")", "[", "1", "]", "]", "\n", "", "elif", "category_id", "==", "2", ":", "\n", "            ", "self", ".", "history", "=", "[", "self", ".", "rnn3", "(", "init_embedding", ",", "init_state", ")", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Category ID exceeds number of output categories.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.update_lstm": [[670, 694], ["model.CsgoModel.get_embedding().view", "enumerate", "model.CsgoModel.update_lstm.offset_path_history"], "methods", ["None"], ["", "", "def", "update_lstm", "(", "self", ",", "action", ",", "category_id", "=", "None", ",", "offset", "=", "None", ")", ":", "\n", "\n", "        ", "def", "offset_path_history", "(", "p", ",", "offset", ")", ":", "\n", "            ", "for", "i", ",", "x", "in", "enumerate", "(", "p", ")", ":", "\n", "                ", "if", "type", "(", "x", ")", "is", "tuple", ":", "\n", "                    ", "new_tuple", "=", "tuple", "(", "[", "_x", "[", ":", ",", "offset", ",", ":", "]", "for", "_x", "in", "x", "]", ")", "\n", "p", "[", "i", "]", "=", "new_tuple", "\n", "", "else", ":", "\n", "                    ", "p", "[", "i", "]", "=", "x", "[", "offset", ",", ":", "]", "\n", "\n", "", "", "", "embedding", "=", "self", ".", "get_embedding", "(", "action", ")", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "embedding_dim", ")", "\n", "if", "offset", "is", "not", "None", ":", "\n", "            ", "offset_path_history", "(", "self", ".", "history", ",", "offset", ".", "view", "(", "-", "1", ")", ")", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "if", "category_id", "is", "None", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "self", ".", "rnn", "(", "embedding", ",", "self", ".", "history", "[", "-", "1", "]", ")", "[", "1", "]", ")", "\n", "", "elif", "category_id", "==", "0", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "self", ".", "rnn1", "(", "embedding", ",", "self", ".", "history", "[", "-", "1", "]", ")", "[", "1", "]", ")", "\n", "", "elif", "category_id", "==", "1", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "self", ".", "rnn2", "(", "embedding", ",", "self", ".", "history", "[", "-", "1", "]", ")", "[", "1", "]", ")", "\n", "", "elif", "category_id", "==", "2", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "self", ".", "rnn3", "(", "embedding", ",", "self", ".", "history", "[", "-", "1", "]", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Category ID exceeds number of output categories.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.print_all_model_parameters": [[695, 704], ["print", "print", "model.CsgoModel.named_parameters", "print", "print", "print", "print", "param.numel", "param.numel", "model.CsgoModel.parameters", "sum"], "methods", ["None"], ["", "", "def", "print_all_model_parameters", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\nModel Parameters'", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "print", "(", "name", ",", "param", ".", "numel", "(", ")", ",", "'requires_grad={}'", ".", "format", "(", "param", ".", "requires_grad", ")", ")", "\n", "", "param_sizes", "=", "[", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "parameters", "(", ")", "]", "\n", "print", "(", "'Total # parameters = {}'", ".", "format", "(", "sum", "(", "param_sizes", ")", ")", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.predict": [[706, 891], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "model.CsgoModel.HLN().view", "model.CsgoModel.CLN().view", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "[].cpu().numpy().tolist", "src.remove_token", "[].cpu().detach().numpy().tolist", "money_all.append", "x_s_all.append", "src.tile_along_beam.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "model.CsgoModel.BiClassif", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "torch.tensor().cuda.append", "model.CsgoModel.get_embedding().unsqueeze", "src.tile_along_beam", "src.tile_along_beam", "model.CsgoModel.initialize_lstm", "src.tile_along_beam", "range", "len", "torch.cat.cpu().numpy().tolist", "torch.cat.cpu().numpy().tolist", "torch.cat.cpu().numpy().tolist", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CsgoModel.append", "model.CsgoModel.high_att", "model.CsgoModel.high_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CsgoModel.append", "model.CsgoModel.high_att", "model.CsgoModel.high_att", "model.CsgoModel.low_att", "model.CsgoModel.low_att", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "model.CsgoModel.unsqueeze", "model.CsgoModel.get_residual_capacity", "model.CsgoModel.get_residual_capacity", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model.CsgoModel.HLN", "model.CsgoModel.CLN", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "no_output_bi[].float", "model.CsgoModel.classif_LN", "src.tile_along_beam", "model.CsgoModel.get_capacity_mask", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "log_action_dist.view.view.view", "min", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "[].view", "model.CsgoModel.update_lstm", "[].cpu().numpy", "[].cpu().detach().numpy", "model.CsgoModel.low_att", "model.CsgoModel.low_att", "model.CsgoModel.unsqueeze", "model.CsgoModel.low_att", "model.CsgoModel.low_att", "model.CsgoModel.unsqueeze", "model.CsgoModel.get_embedding", "model.CsgoModel.get_embedding", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model.CsgoModel.get_embedding", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "range", "model.CsgoModel.money_mask", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].view.view", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "model.CsgoModel.get_embedding", "model.CsgoModel.get_embedding", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "model.CsgoModel.get_embedding", "model.CsgoModel.get_embedding", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "src.tile_along_beam.view", "money.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "src.tile_along_beam.unsqueeze", "log_action_dist.view.view.size", "log_action_dist.view.view.size", "[].cpu", "[].cpu().detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "src.tile_along_beam.unsqueeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "[].view.view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "model.CsgoModel.size", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "torch.arange().unsqueeze().cuda", "[].cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda.size", "torch.tensor().cuda.size", "torch.tensor().cuda.size", "torch.tensor().cuda.size", "torch.tensor().cuda.size", "torch.tensor().cuda.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.remove_token", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.BiClassif", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.tile_along_beam", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.tile_along_beam", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.tile_along_beam", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.classif_LN", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.tile_along_beam", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.update_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.money_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding"], ["", "def", "predict", "(", "self", ",", "data", ",", "gate", "=", "True", ")", ":", "\n", "        ", "'''\n        x: input\n        '''", "\n", "'''\n        forward for one round\n        x: idx of weapons, x = [x_s, x_t, x_o]\n        x_s: num_weapon #(num_batch, num_shot, num_weapon)\n        x_t, x_o: (num_player, num_weapon) #(num_batch, num_shot, num_player, num_weapon)\n        '''", "\n", "batch_size", "=", "len", "(", "data", ")", "\n", "h", "=", "[", "]", "\n", "money_all", "=", "[", "]", "\n", "x_s_all", "=", "[", "]", "\n", "side_all", "=", "[", "]", "\n", "\n", "for", "db", "in", "data", ":", "\n", "            ", "side", ",", "x_s", ",", "money_s", ",", "perf_s", ",", "score", ",", "x_t", ",", "x_o", "=", "db", "\n", "money_all", ".", "append", "(", "money_s", "[", "0", "]", ")", "\n", "x_s_all", ".", "append", "(", "x_s", ")", "\n", "side_all", ".", "append", "(", "side", "[", "0", "]", ")", "\n", "# represent allies", "\n", "ht", "=", "[", "]", "\n", "for", "xti", ",", "moneyi", ",", "perfi", "in", "x_t", ":", "\n", "                ", "if", "self", ".", "shared_attention_weight", ":", "\n", "                    ", "hti", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xti", ")", ")", "\n", "", "else", ":", "\n", "                    ", "hti", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xti", ")", ",", "'t'", ")", "\n", "", "hti", "=", "torch", ".", "cat", "(", "[", "hti", ",", "torch", ".", "tensor", "(", "moneyi", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perfi", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "ht", ".", "append", "(", "hti", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "ht", "=", "torch", ".", "cat", "(", "ht", ",", "0", ")", "\n", "if", "self", ".", "shared_attention_weight", ":", "\n", "                ", "ht", "=", "self", ".", "high_att", "(", "ht", ")", "\n", "", "else", ":", "\n", "                ", "ht", "=", "self", ".", "high_att", "(", "ht", ",", "'t'", ")", "\n", "\n", "# represent enemies", "\n", "", "ho", "=", "[", "]", "\n", "for", "xoi", ",", "moneyi", ",", "perfi", "in", "x_o", ":", "\n", "                ", "if", "self", ".", "shared_attention_weight", ":", "\n", "                    ", "hoi", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xoi", ")", ")", "\n", "", "else", ":", "\n", "                    ", "hoi", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xoi", ")", ",", "'o'", ")", "\n", "", "hoi", "=", "torch", ".", "cat", "(", "[", "hoi", ",", "torch", ".", "tensor", "(", "moneyi", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perfi", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "ho", ".", "append", "(", "hoi", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "ho", "=", "torch", ".", "cat", "(", "ho", ",", "0", ")", "\n", "if", "self", ".", "shared_attention_weight", ":", "\n", "                ", "ho", "=", "self", ".", "high_att", "(", "ho", ")", "\n", "", "else", ":", "\n", "                ", "ho", "=", "self", ".", "high_att", "(", "ho", ",", "'o'", ")", "\n", "\n", "# represent self", "\n", "", "if", "self", ".", "shared_attention_weight", ":", "\n", "                ", "hs", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s", ")", ")", "\n", "", "else", ":", "\n", "                ", "hs", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s", ")", ",", "'s'", ")", "\n", "", "hs", "=", "torch", ".", "cat", "(", "[", "hs", ",", "torch", ".", "tensor", "(", "money_s", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perf_s", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "\n", "\n", "# concat representations", "\n", "hb", "=", "torch", ".", "cat", "(", "[", "hs", ",", "ht", ",", "ho", "]", ",", "-", "1", ")", "\n", "\n", "# incorporate team information", "\n", "hb", "=", "torch", ".", "cat", "(", "[", "hb", ",", "self", ".", "side_embedding", "[", "side", "[", "0", "]", "]", ",", "torch", ".", "tensor", "(", "score", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "\n", "h", ".", "append", "(", "hb", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "h", "=", "torch", ".", "cat", "(", "h", ",", "0", ")", "\n", "assert", "h", ".", "size", "(", ")", "[", "0", "]", "==", "batch_size", "\n", "\n", "# seperate binary classifier", "\n", "bi_prob", "=", "[", "]", "\n", "no_output_bi", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "output_categories", ")", ":", "\n", "            ", "h_bi", "=", "self", ".", "BiClassif", "(", "h", ".", "detach", "(", ")", ",", "i", ")", "\n", "bi_prob", ".", "append", "(", "h_bi", ".", "unsqueeze", "(", "1", ")", ")", "\n", "no_output_bi", ".", "append", "(", "(", "h_bi", "[", ":", ",", "0", "]", ">", "h_bi", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "bi_prob", "=", "torch", ".", "cat", "(", "bi_prob", ",", "1", ")", "\n", "no_output_bi", "=", "torch", ".", "cat", "(", "no_output_bi", ",", "1", ")", "\n", "\n", "# return values - predictions and probabilities", "\n", "action_list", "=", "None", "\n", "\n", "# resource left", "\n", "money", "=", "torch", ".", "tensor", "(", "money_all", ")", ".", "cuda", "(", ")", "*", "self", ".", "money_scaling", "\n", "res_action_capacity", "=", "[", "]", "\n", "res_type_capacity", "=", "[", "]", "\n", "for", "x_s", "in", "x_s_all", ":", "\n", "            ", "res_action_capacity", ".", "append", "(", "self", ".", "get_residual_capacity", "(", "x_s", ",", "self", ".", "action_capacity", ")", ")", "\n", "res_type_capacity", ".", "append", "(", "self", ".", "get_residual_capacity", "(", "self", ".", "id2type", "[", "x_s", "]", ",", "self", ".", "type_capacity", ")", ")", "\n", "", "res_action_capacity", "=", "torch", ".", "tensor", "(", "res_action_capacity", ")", ".", "cuda", "(", ")", "\n", "res_type_capacity", "=", "torch", ".", "tensor", "(", "res_type_capacity", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "# transform representation to initialize (h, c)", "\n", "init_h", "=", "self", ".", "HLN", "(", "h", ")", ".", "view", "(", "self", ".", "history_num_layers", ",", "batch_size", ",", "self", ".", "history_dim", ")", "\n", "init_c", "=", "self", ".", "CLN", "(", "h", ")", ".", "view", "(", "self", ".", "history_num_layers", ",", "batch_size", ",", "self", ".", "history_dim", ")", "\n", "side_all", "=", "torch", ".", "tensor", "(", "side_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# beam search", "\n", "log_action_prob", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "k", "=", "1", "\n", "for", "j", "in", "range", "(", "self", ".", "output_categories", ")", ":", "\n", "\n", "# initialize LSTM", "\n", "            ", "init_action", "=", "[", "self", ".", "start_idx", "]", "*", "batch_size", "*", "k", "\n", "init_embedding", "=", "self", ".", "get_embedding", "(", "init_action", ")", ".", "unsqueeze", "(", "1", ")", "\n", "init_h_tile", "=", "utils", ".", "tile_along_beam", "(", "init_h", ",", "k", ",", "1", ")", "\n", "init_c_tile", "=", "utils", ".", "tile_along_beam", "(", "init_c", ",", "k", ",", "1", ")", "\n", "self", ".", "initialize_lstm", "(", "init_embedding", ",", "(", "init_h_tile", ",", "init_c_tile", ")", ",", "j", ")", "\n", "# TODO: is_end tile: (batch_size,) - > (batch_size * last_k)", "\n", "is_end", "=", "utils", ".", "tile_along_beam", "(", "no_output_bi", "[", ":", ",", "j", "]", ".", "float", "(", ")", ",", "k", ",", "-", "1", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_output_num", ")", ":", "\n", "                ", "if", "torch", ".", "sum", "(", "is_end", ")", "==", "len", "(", "is_end", ")", ":", "\n", "                    ", "for", "_", "in", "range", "(", "self", ".", "max_output_num", "-", "i", ")", ":", "\n", "                        ", "if", "action_list", "is", "not", "None", ":", "\n", "                            ", "action_list", "=", "torch", ".", "cat", "(", "[", "action_list", ",", "torch", ".", "ones", "(", "batch_size", "*", "k", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "*", "self", ".", "end_idx", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                            ", "action_list", "=", "torch", ".", "ones", "(", "batch_size", "*", "k", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "*", "self", ".", "end_idx", "\n", "", "", "break", "\n", "\n", "", "H", "=", "self", ".", "history", "[", "-", "1", "]", "[", "0", "]", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "action_dist", "=", "self", ".", "classif_LN", "(", "H", ",", "j", ")", "\n", "\n", "side_all", "=", "utils", ".", "tile_along_beam", "(", "side_all", ".", "view", "(", "batch_size", ",", "-", "1", ")", "[", ":", ",", "0", "]", ",", "k", ",", "0", ")", "\n", "action_mask", "=", "self", ".", "money_mask", "(", "money", ".", "unsqueeze", "(", "1", ")", ")", "*", "self", ".", "side_mask", "[", "side_all", "]", "\n", "#action_mask *= self.get_capacity_mask(res_action_capacity, self.mute_action_mask)", "\n", "action_mask", "*=", "(", "res_action_capacity", ">", "0", ")", ".", "float", "(", ")", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "res_type_capacity", ",", "self", ".", "mute_type_mask", ")", "\n", "action_mask", "=", "action_mask", "[", ":", ",", "self", ".", "category_action_offset", "[", "j", "]", "]", "\n", "action_dist", "=", "action_dist", "*", "action_mask", "\n", "\n", "mask_all_tensor", "=", "torch", ".", "zeros", "(", "action_dist", ".", "size", "(", ")", "[", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "mask_all_tensor", "[", "-", "1", "]", "=", "1.0", "\n", "\n", "action_dist", "=", "(", "1", "-", "is_end", ".", "unsqueeze", "(", "1", ")", ")", "*", "action_dist", "+", "is_end", ".", "unsqueeze", "(", "1", ")", "*", "mask_all_tensor", "\n", "\n", "log_action_dist", "=", "log_action_prob", ".", "view", "(", "-", "1", ",", "1", ")", "+", "torch", ".", "log", "(", "action_dist", ")", "\n", "assert", "log_action_dist", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "output_dims", "[", "j", "]", "\n", "log_action_dist", "=", "log_action_dist", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "last_k", "=", "k", "\n", "k", "=", "min", "(", "self", ".", "beam_size", ",", "log_action_dist", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "k", "=", "1", "\n", "log_action_prob", ",", "action_ind", "=", "torch", ".", "topk", "(", "log_action_dist", ",", "k", ")", "\n", "action_offset", "=", "(", "action_ind", "/", "self", ".", "output_dims", "[", "j", "]", "+", "torch", ".", "arange", "(", "batch_size", ")", ".", "unsqueeze", "(", "1", ")", ".", "cuda", "(", ")", "*", "last_k", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "output_idx", "=", "action_ind", "%", "self", ".", "output_dims", "[", "j", "]", "\n", "action_idx", "=", "torch", ".", "tensor", "(", "self", ".", "category_action_offset", "[", "j", "]", ")", ".", "cuda", "(", ")", "[", "output_idx", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "is_end", "=", "(", "action_idx", "==", "self", ".", "end_idx", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "# TODO: update action_list, hidden_state", "\n", "if", "action_list", "is", "not", "None", ":", "\n", "                    ", "action_list", "=", "torch", ".", "cat", "(", "[", "action_list", "[", "action_offset", "]", ",", "action_idx", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "action_list", "=", "action_idx", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "self", ".", "update_lstm", "(", "action_idx", ",", "j", ",", "offset", "=", "action_offset", ")", "\n", "\n", "money", "=", "money", "[", "action_offset", "]", "-", "self", ".", "prices", "[", "action_idx", "]", "\n", "res_action_capacity", "=", "res_action_capacity", "[", "action_offset", "]", "\n", "res_action_capacity", "-=", "torch", ".", "eye", "(", "res_action_capacity", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "[", "action_idx", "]", "\n", "res_type_capacity", "=", "res_type_capacity", "[", "action_offset", "]", "\n", "res_type_capacity", "-=", "torch", ".", "eye", "(", "res_type_capacity", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "[", "torch", ".", "tensor", "(", "self", ".", "id2type", ")", ".", "cuda", "(", ")", "[", "action_idx", "]", "]", "\n", "\n", "'''assert torch.sum((money >= 0).float()) == batch_size * k\n                assert torch.sum((res_action_capacity >= 0).float()) == len(res_action_capacity.view(-1))\n                assert torch.sum((res_type_capacity >= 0).float()) == len(res_type_capacity.view(-1))'''", "\n", "\n", "\n", "# TODO: outer greedy, inner beam search", "\n", "", "'''money = money.view(batch_size, -1)[:, 0]\n            res_action_capacity = res_action_capacity.view(batch_size, -1, res_action_capacity.size()[1])[:, 0, :]\n            res_type_capacity = res_type_capacity.view(batch_size, -1, res_type_capacity.size()[1])[:, 0, :]'''", "\n", "\n", "#action_list = torch.cat(action_list, 1).cpu().numpy().tolist()", "\n", "", "assert", "len", "(", "action_list", ")", "==", "batch_size", "*", "k", "\n", "action_list", "=", "action_list", ".", "view", "(", "batch_size", ",", "k", ",", "-", "1", ")", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "action_list", "=", "utils", ".", "remove_token", "(", "action_list", ",", "self", ".", "end_idx", ")", "\n", "action_log_prob", "=", "log_action_prob", ".", "view", "(", "batch_size", ",", "k", ")", "[", ":", ",", "-", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "action_list", ",", "action_log_prob", ",", "no_output_bi", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.define_modules": [[892, 1041], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.CsgoModel.HLN.cuda", "model.CsgoModel.CLN.cuda", "model.CsgoModel.LNDropout.cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.CsgoModel.att_LN1.cuda", "model.CsgoModel.v1.cuda", "model.CsgoModel.att_LN2.cuda", "model.CsgoModel.v2.cuda", "model.CsgoModel.att_LN1_s.cuda", "model.CsgoModel.v1_s.cuda", "model.CsgoModel.att_LN1_t.cuda", "model.CsgoModel.v1_t.cuda", "model.CsgoModel.att_LN1_o.cuda", "model.CsgoModel.v1_o.cuda", "model.CsgoModel.att_LN2_t.cuda", "model.CsgoModel.v2_t.cuda", "model.CsgoModel.att_LN2_o.cuda", "model.CsgoModel.v2_o.cuda", "model.CsgoModel.BClassif1_1.cuda", "model.CsgoModel.BClassif1_2.cuda", "model.CsgoModel.BClassif1_3.cuda", "model.CsgoModel.BClassif1_4.cuda", "model.CsgoModel.BClassif2_1.cuda", "model.CsgoModel.BClassif2_2.cuda", "model.CsgoModel.BClassif2_3.cuda", "model.CsgoModel.BClassif2_4.cuda", "model.CsgoModel.BClassif3_1.cuda", "model.CsgoModel.BClassif3_2.cuda", "model.CsgoModel.BClassif3_3.cuda", "model.CsgoModel.BClassif3_4.cuda", "model.CsgoModel.rnn1.cuda", "model.CsgoModel.rnn2.cuda", "model.CsgoModel.rnn3.cuda", "model.CsgoModel.LN1_1.cuda", "model.CsgoModel.LN1_2.cuda", "model.CsgoModel.LN2_1.cuda", "model.CsgoModel.LN2_2.cuda", "model.CsgoModel.LN3_1.cuda", "model.CsgoModel.LN3_2.cuda", "model.CsgoModel.att_LN1_h.cuda", "model.CsgoModel.v1_h.cuda", "model.CsgoModel.BClassif1.cuda", "model.CsgoModel.BClassif2.cuda", "model.CsgoModel.BClassif3.cuda", "model.CsgoModel.BClassif4.cuda", "model.CsgoModel.rnn.cuda", "model.CsgoModel.LN1.cuda", "model.CsgoModel.LN2.cuda"], "methods", ["None"], ["", "def", "define_modules", "(", "self", ")", ":", "\n", "# terrorist", "\n", "        ", "if", "self", ".", "shared_attention_weight", ":", "\n", "            ", "self", ".", "att_LN1", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v1", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "#self.att_LN2 = nn.Linear(self.embedding_dim + self.resource_dim, self.ff_dim)", "\n", "self", ".", "att_LN2", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "if", "self", ".", "different_attention_weight", ":", "\n", "                ", "self", ".", "att_LN1_h", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v1_h", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "att_LN1_s", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v1_s", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "self", ".", "att_LN1_t", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v1_t", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "self", ".", "att_LN1_o", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v1_o", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "\n", "self", ".", "att_LN2_t", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v2_t", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "self", ".", "att_LN2_o", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v2_o", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "\n", "", "self", ".", "HLN", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "history_dim", "*", "self", ".", "history_num_layers", ")", "\n", "self", ".", "CLN", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "history_dim", "*", "self", ".", "history_num_layers", ")", "\n", "\n", "self", ".", "LNDropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "ff_dropout_rate", ")", "\n", "\n", "assert", "self", ".", "output_categories", "==", "3", "\n", "\n", "self", ".", "money_LN1", "=", "nn", ".", "Linear", "(", "self", ".", "money_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "money_LN2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "self", ".", "money_dim", ")", "\n", "\n", "if", "self", ".", "lstm_mode", "==", "'triple'", ":", "\n", "            ", "self", ".", "BClassif1_1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif1_2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", "*", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif1_3", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "ff_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif1_4", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", ")", "\n", "\n", "self", ".", "BClassif2_1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif2_2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", "*", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif2_3", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "ff_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif2_4", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", ")", "\n", "\n", "self", ".", "BClassif3_1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif3_2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", "*", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif3_3", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "ff_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif3_4", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", ")", "\n", "\n", "self", ".", "rnn1", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "embedding_dim", ",", "\n", "hidden_size", "=", "self", ".", "history_dim", ",", "\n", "num_layers", "=", "self", ".", "history_num_layers", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "rnn2", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "embedding_dim", ",", "\n", "hidden_size", "=", "self", ".", "history_dim", ",", "\n", "num_layers", "=", "self", ".", "history_num_layers", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "rnn3", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "embedding_dim", ",", "\n", "hidden_size", "=", "self", ".", "history_dim", ",", "\n", "num_layers", "=", "self", ".", "history_num_layers", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "LN1_1", "=", "nn", ".", "Linear", "(", "self", ".", "history_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "LN1_2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "self", ".", "output_dim1", ")", "\n", "\n", "self", ".", "LN2_1", "=", "nn", ".", "Linear", "(", "self", ".", "history_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "LN2_2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "self", ".", "output_dim2", ")", "\n", "\n", "self", ".", "LN3_1", "=", "nn", ".", "Linear", "(", "self", ".", "history_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "LN3_2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "self", ".", "output_dim3", ")", "\n", "", "elif", "self", ".", "lstm_mode", "==", "'single'", ":", "\n", "            ", "self", ".", "BClassif1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", "*", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif3", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "ff_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "BClassif4", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "2", ")", "\n", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "embedding_dim", ",", "\n", "hidden_size", "=", "self", ".", "history_dim", ",", "\n", "num_layers", "=", "self", ".", "history_num_layers", ",", "\n", "batch_first", "=", "True", ")", "\n", "self", ".", "LN1", "=", "nn", ".", "Linear", "(", "self", ".", "history_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "LN2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "self", ".", "output_dim", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "if", "self", ".", "shared_attention_weight", ":", "\n", "                ", "self", ".", "att_LN1", "=", "self", ".", "att_LN1", ".", "cuda", "(", ")", "\n", "self", ".", "v1", "=", "self", ".", "v1", ".", "cuda", "(", ")", "\n", "self", ".", "att_LN2", "=", "self", ".", "att_LN2", ".", "cuda", "(", ")", "\n", "self", ".", "v2", "=", "self", ".", "v2", ".", "cuda", "(", ")", "\n", "if", "self", ".", "different_attention_weight", ":", "\n", "                    ", "self", ".", "att_LN1_h", "=", "self", ".", "att_LN1_h", ".", "cuda", "(", ")", "\n", "self", ".", "v1_h", "=", "self", ".", "v1_h", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "att_LN1_s", "=", "self", ".", "att_LN1_s", ".", "cuda", "(", ")", "\n", "self", ".", "v1_s", "=", "self", ".", "v1_s", ".", "cuda", "(", ")", "\n", "self", ".", "att_LN1_t", "=", "self", ".", "att_LN1_t", ".", "cuda", "(", ")", "\n", "self", ".", "v1_t", "=", "self", ".", "v1_t", ".", "cuda", "(", ")", "\n", "self", ".", "att_LN1_o", "=", "self", ".", "att_LN1_o", ".", "cuda", "(", ")", "\n", "self", ".", "v1_o", "=", "self", ".", "v1_o", ".", "cuda", "(", ")", "\n", "self", ".", "att_LN2_t", "=", "self", ".", "att_LN2_t", ".", "cuda", "(", ")", "\n", "self", ".", "v2_t", "=", "self", ".", "v2_t", ".", "cuda", "(", ")", "\n", "self", ".", "att_LN2_o", "=", "self", ".", "att_LN2_o", ".", "cuda", "(", ")", "\n", "self", ".", "v2_o", "=", "self", ".", "v2_o", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "HLN", "=", "self", ".", "HLN", ".", "cuda", "(", ")", "\n", "self", ".", "CLN", "=", "self", ".", "CLN", ".", "cuda", "(", ")", "\n", "self", ".", "LNDropout", "=", "self", ".", "LNDropout", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "lstm_mode", "==", "'triple'", ":", "\n", "                ", "self", ".", "BClassif1_1", "=", "self", ".", "BClassif1_1", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif1_2", "=", "self", ".", "BClassif1_2", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif1_3", "=", "self", ".", "BClassif1_3", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif1_4", "=", "self", ".", "BClassif1_4", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "BClassif2_1", "=", "self", ".", "BClassif2_1", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif2_2", "=", "self", ".", "BClassif2_2", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif2_3", "=", "self", ".", "BClassif2_3", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif2_4", "=", "self", ".", "BClassif2_4", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "BClassif3_1", "=", "self", ".", "BClassif3_1", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif3_2", "=", "self", ".", "BClassif3_2", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif3_3", "=", "self", ".", "BClassif3_3", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif3_4", "=", "self", ".", "BClassif3_4", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "rnn1", "=", "self", ".", "rnn1", ".", "cuda", "(", ")", "\n", "self", ".", "rnn2", "=", "self", ".", "rnn2", ".", "cuda", "(", ")", "\n", "self", ".", "rnn3", "=", "self", ".", "rnn3", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "LN1_1", "=", "self", ".", "LN1_1", ".", "cuda", "(", ")", "\n", "self", ".", "LN1_2", "=", "self", ".", "LN1_2", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "LN2_1", "=", "self", ".", "LN2_1", ".", "cuda", "(", ")", "\n", "self", ".", "LN2_2", "=", "self", ".", "LN2_2", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "LN3_1", "=", "self", ".", "LN3_1", ".", "cuda", "(", ")", "\n", "self", ".", "LN3_2", "=", "self", ".", "LN3_2", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "lstm_mode", "==", "'single'", ":", "\n", "                ", "self", ".", "BClassif1", "=", "self", ".", "BClassif1", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif2", "=", "self", ".", "BClassif2", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif3", "=", "self", ".", "BClassif3", ".", "cuda", "(", ")", "\n", "self", ".", "BClassif4", "=", "self", ".", "BClassif4", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "self", ".", "rnn", ".", "cuda", "(", ")", "\n", "self", ".", "LN1", "=", "self", ".", "LN1", ".", "cuda", "(", ")", "\n", "self", ".", "LN2", "=", "self", ".", "LN2", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.initialize_modules": [[1042, 1124], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "model.CsgoModel.rnn1.named_parameters", "model.CsgoModel.rnn2.named_parameters", "model.CsgoModel.rnn3.named_parameters", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "model.CsgoModel.rnn.named_parameters", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], ["", "", "", "def", "initialize_modules", "(", "self", ")", ":", "\n", "# xavier initialization", "\n", "        ", "if", "self", ".", "lstm_mode", "==", "'triple'", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "rnn1", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ")", "\n", "\n", "", "", "for", "name", ",", "param", "in", "self", ".", "rnn2", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ")", "\n", "\n", "", "", "for", "name", ",", "param", "in", "self", ".", "rnn3", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ")", "\n", "", "", "", "elif", "self", ".", "lstm_mode", "==", "'single'", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "rnn", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ")", "\n", "\n", "", "", "", "if", "self", ".", "shared_attention_weight", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v2", ".", "weight", ")", "\n", "if", "self", ".", "different_attention_weight", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN1_h", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v1_h", ".", "weight", ")", "\n", "", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN1_s", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v1_s", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN1_t", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v1_t", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN1_o", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v1_o", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN2_t", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v2_t", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN2_o", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v2_o", ".", "weight", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "HLN", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "CLN", ".", "weight", ")", "\n", "\n", "if", "self", ".", "lstm_mode", "==", "'triple'", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif1_1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif1_2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif1_3", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif1_4", ".", "weight", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif2_1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif2_2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif2_3", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif2_4", ".", "weight", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif3_1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif3_2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif3_3", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif3_4", ".", "weight", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN1_1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN1_2", ".", "weight", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN2_1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN2_2", ".", "weight", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN3_1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN3_2", ".", "weight", ")", "\n", "", "elif", "self", ".", "lstm_mode", "==", "'single'", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif3", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "BClassif4", ".", "weight", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.model.CsgoModel.clone": [[1125, 1131], ["model.CsgoModel", "CsgoModel.load_state_dict", "model.CsgoModel.is_cuda", "model.CsgoModel.state_dict", "CsgoModel.cuda"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.is_cuda"], ["", "", "def", "clone", "(", "self", ",", "npy_dict", ")", ":", "\n", "        ", "clone", "=", "CsgoModel", "(", "self", ".", "args", ",", "npy_dict", ")", "\n", "clone", ".", "load_state_dict", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "if", "self", ".", "is_cuda", "(", ")", ":", "\n", "            ", "clone", ".", "cuda", "(", ")", "\n", "", "return", "clone", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.tile_along_beam": [[9, 26], ["torch.cat.unsqueeze", "torch.cat", "enumerate", "torch.cat.view", "torch.cat.size", "len", "new_size.append", "torch.cat.size"], "function", ["None"], ["def", "tile_along_beam", "(", "v", ",", "beam_size", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Tile a tensor along a specified dimension for the specified beam size.\n    :param v: Input tensor.\n    :param beam_size: Beam size.\n    \"\"\"", "\n", "if", "dim", "==", "-", "1", ":", "\n", "        ", "dim", "=", "len", "(", "v", ".", "size", "(", ")", ")", "-", "1", "\n", "", "v", "=", "v", ".", "unsqueeze", "(", "dim", "+", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", "]", "*", "beam_size", ",", "dim", "=", "dim", "+", "1", ")", "\n", "new_size", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "v", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "==", "dim", "+", "1", ":", "\n", "            ", "new_size", "[", "-", "1", "]", "*=", "d", "\n", "", "else", ":", "\n", "            ", "new_size", ".", "append", "(", "d", ")", "\n", "", "", "return", "v", ".", "view", "(", "new_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.remove_token": [[27, 34], ["res.append"], "function", ["None"], ["", "def", "remove_token", "(", "a", ",", "token_id", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "a_i", "in", "a", ":", "\n", "        ", "res_i", "=", "[", "t", "for", "t", "in", "a_i", "if", "t", "!=", "token_id", "]", "\n", "res", ".", "append", "(", "res_i", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_acc_type": [[35, 48], ["isinstance", "range", "utils.get_acc_type", "len", "len", "utils.get_acc_type", "accuracy[].append", "accuracy[].append", "accuracy[].append", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_acc_type", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_acc_type"], ["", "def", "get_batched_acc_type", "(", "a", ",", "a_r", ",", "action_type", ")", ":", "\n", "    ", "ret", "=", "None", "\n", "if", "len", "(", "a", ")", ">", "0", "and", "isinstance", "(", "a", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "accuracy", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "accuracy_type", "=", "get_acc_type", "(", "a", "[", "i", "]", ",", "a_r", "[", "i", "]", ",", "action_type", ")", "\n", "accuracy", "[", "0", "]", ".", "append", "(", "accuracy_type", "[", "0", "]", ")", "\n", "accuracy", "[", "1", "]", ".", "append", "(", "accuracy_type", "[", "1", "]", ")", "\n", "accuracy", "[", "2", "]", ".", "append", "(", "accuracy_type", "[", "2", "]", ")", "\n", "", "ret", "=", "[", "np", ".", "mean", "(", "accuracy", "[", "0", "]", ",", "0", ")", ",", "np", ".", "mean", "(", "accuracy", "[", "1", "]", ",", "0", ")", ",", "np", ".", "mean", "(", "accuracy", "[", "2", "]", ",", "0", ")", "]", "\n", "", "else", ":", "\n", "        ", "ret", "=", "get_acc_type", "(", "a", ",", "a_r", ",", "action_type", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_acc_type": [[49, 54], ["utils.split_by_type", "utils.split_by_type", "utils.get_accuracy", "utils.get_accuracy", "utils.get_accuracy"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.split_by_type", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.split_by_type", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_accuracy", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_accuracy", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_accuracy"], ["", "def", "get_acc_type", "(", "a", ",", "a_r", ",", "action_type", ")", ":", "\n", "    ", "a_type", "=", "split_by_type", "(", "a", ",", "action_type", ")", "\n", "a_r_type", "=", "split_by_type", "(", "a_r", ",", "action_type", ")", "\n", "\n", "return", "[", "get_accuracy", "(", "a_type", "[", "0", "]", ",", "a_r_type", "[", "0", "]", ")", ",", "get_accuracy", "(", "a_type", "[", "1", "]", ",", "a_r_type", "[", "1", "]", ")", ",", "get_accuracy", "(", "a_type", "[", "2", "]", ",", "a_r_type", "[", "2", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.split_by_type": [[55, 67], ["ret[].append", "ret[].append", "ret[].append", "ret[].append"], "function", ["None"], ["", "def", "split_by_type", "(", "a", ",", "action_type", ")", ":", "\n", "    ", "ret", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "for", "action", "in", "a", ":", "\n", "        ", "if", "action_type", "[", "action", "]", "==", "0", ":", "# pistols", "\n", "            ", "ret", "[", "0", "]", ".", "append", "(", "action", ")", "\n", "", "elif", "1", "<=", "action_type", "[", "action", "]", "<=", "5", ":", "# primary guns", "\n", "            ", "ret", "[", "0", "]", ".", "append", "(", "action", ")", "\n", "", "elif", "action_type", "[", "action", "]", "==", "6", ":", "# grenades", "\n", "            ", "ret", "[", "1", "]", ".", "append", "(", "action", ")", "\n", "", "else", ":", "# equipment", "\n", "            ", "ret", "[", "2", "]", ".", "append", "(", "action", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_acc": [[69, 80], ["isinstance", "range", "numpy.mean", "utils.get_accuracy", "len", "len", "accuracy.append", "utils.get_accuracy"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_accuracy", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_accuracy"], ["", "def", "get_batched_acc", "(", "a", ",", "a_r", ")", ":", "\n", "# check input type", "\n", "    ", "ret", "=", "None", "\n", "if", "len", "(", "a", ")", ">", "0", "and", "isinstance", "(", "a", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "accuracy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "accuracy", ".", "append", "(", "get_accuracy", "(", "a", "[", "i", "]", ",", "a_r", "[", "i", "]", ")", ")", "\n", "", "ret", "=", "np", ".", "mean", "(", "accuracy", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "get_accuracy", "(", "a", ",", "a_r", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_accuracy": [[81, 91], ["list", "len", "len", "len", "len", "len", "len", "collections.Counter", "collections.Counter"], "function", ["None"], ["", "def", "get_accuracy", "(", "a", ",", "a_r", ")", ":", "\n", "# F1 score", "\n", "# both are empty", "\n", "    ", "if", "len", "(", "a", ")", "==", "0", "and", "len", "(", "a_r", ")", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "a_common", "=", "list", "(", "(", "Counter", "(", "a", ")", "&", "Counter", "(", "a_r", ")", ")", ".", "elements", "(", ")", ")", "\n", "recall", "=", "len", "(", "a_common", ")", "/", "(", "len", "(", "a_r", ")", "+", "EPSILON", ")", "\n", "precision", "=", "len", "(", "a_common", ")", "/", "(", "len", "(", "a", ")", "+", "EPSILON", ")", "\n", "F1_score", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "EPSILON", ")", "\n", "return", "F1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_binary_acc": [[93, 103], ["isinstance", "range", "numpy.mean", "utils.get_binary_accuracy", "len", "len", "accuracy.append", "utils.get_binary_accuracy"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_binary_accuracy", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_binary_accuracy"], ["", "def", "get_batched_binary_acc", "(", "no_output_bi", ",", "a_r", ",", "action_type", ")", ":", "\n", "    ", "ret", "=", "None", "\n", "if", "len", "(", "no_output_bi", ")", ">", "0", "and", "isinstance", "(", "no_output_bi", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "accuracy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "no_output_bi", ")", ")", ":", "\n", "            ", "accuracy", ".", "append", "(", "get_binary_accuracy", "(", "no_output_bi", "[", "i", "]", ",", "a_r", "[", "i", "]", ",", "action_type", ")", ")", "\n", "", "ret", "=", "np", ".", "mean", "(", "accuracy", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "get_binary_accuracy", "(", "no_output_bi", ",", "a_r", ",", "action_type", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_binary_accuracy": [[105, 113], ["len", "numpy.array", "range", "utils.get_category_label", "ret.append", "float"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_category_label"], ["", "def", "get_binary_accuracy", "(", "no_output_bi", ",", "a_r", ",", "action_type", ")", ":", "\n", "# 0-1 accuracy of binary classifier", "\n", "    ", "num_category", "=", "len", "(", "no_output_bi", ")", "\n", "category_label_r", "=", "np", ".", "array", "(", "get_category_label", "(", "a_r", ",", "action_type", ")", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_category", ")", ":", "\n", "        ", "ret", ".", "append", "(", "float", "(", "category_label_r", "[", "i", "]", "[", "0", "]", "==", "no_output_bi", "[", "i", "]", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_finance_diff": [[115, 125], ["isinstance", "range", "numpy.mean", "utils.get_finance_diff", "len", "len", "diff.append", "utils.get_finance_diff"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_finance_diff", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_finance_diff"], ["", "def", "get_batched_finance_diff", "(", "a", ",", "a_r", ",", "m_start", ",", "action_money", ")", ":", "\n", "    ", "ret", "=", "None", "\n", "if", "len", "(", "a", ")", ">", "0", "and", "isinstance", "(", "a", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "diff", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "diff", ".", "append", "(", "get_finance_diff", "(", "a", "[", "i", "]", ",", "a_r", "[", "i", "]", ",", "m_start", "[", "i", "]", ",", "action_money", ")", ")", "\n", "", "ret", "=", "np", ".", "mean", "(", "diff", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "get_finance_diff", "(", "a", ",", "a_r", ",", "m_start", ",", "action_money", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_finance_diff": [[126, 132], ["sum", "sum", "int", "abs", "float"], "function", ["None"], ["", "def", "get_finance_diff", "(", "a", ",", "a_r", ",", "m_start", ",", "action_money", ")", ":", "\n", "    ", "m", "=", "sum", "(", "action_money", "[", "n", "]", "for", "n", "in", "a", ")", "\n", "m_r", "=", "sum", "(", "action_money", "[", "n", "]", "for", "n", "in", "a_r", ")", "\n", "if", "int", "(", "m_start", ")", "==", "0", ":", "\n", "        ", "m_start", "=", "0.1", "\n", "", "return", "abs", "(", "m_r", "-", "m", ")", "/", "float", "(", "m_start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_batched_category_label": [[134, 143], ["isinstance", "utils.get_category_label", "len", "get_category_label.append", "utils.get_category_label"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_category_label", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_category_label"], ["", "def", "get_batched_category_label", "(", "label", ",", "action_type", ")", ":", "\n", "    ", "ret", "=", "None", "\n", "if", "len", "(", "label", ")", ">", "0", "and", "isinstance", "(", "label", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "l", "in", "label", ":", "\n", "            ", "ret", ".", "append", "(", "get_category_label", "(", "l", ",", "action_type", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "ret", "=", "get_category_label", "(", "label", ",", "action_type", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.get_category_label": [[144, 159], ["None"], "function", ["None"], ["", "def", "get_category_label", "(", "label", ",", "action_type", ")", ":", "\n", "    ", "t", "=", "[", "0.0", ",", "1.0", "]", "\n", "f", "=", "[", "1.0", ",", "0.0", "]", "\n", "res", "=", "[", "f", "]", "*", "3", "\n", "\n", "for", "l", "in", "label", ":", "\n", "        ", "if", "action_type", "[", "l", "]", "==", "0", ":", "# pistols", "\n", "            ", "res", "[", "0", "]", "=", "t", "\n", "", "elif", "1", "<=", "action_type", "[", "l", "]", "<=", "5", ":", "# primary guns", "\n", "            ", "res", "[", "0", "]", "=", "t", "\n", "", "elif", "action_type", "[", "l", "]", "==", "6", ":", "# grenades", "\n", "            ", "res", "[", "1", "]", "=", "t", "\n", "", "else", ":", "# equipment", "\n", "            ", "res", "[", "2", "]", "=", "t", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.filter_batched_category_actions": [[160, 169], ["isinstance", "utils.filter_category_actions", "len", "filter_category_actions.append", "utils.filter_category_actions"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.filter_category_actions", "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.filter_category_actions"], ["", "def", "filter_batched_category_actions", "(", "label", ",", "action_type", ",", "num_categories", ")", ":", "\n", "    ", "ret", "=", "None", "\n", "if", "len", "(", "label", ")", ">", "0", "and", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "l", "in", "label", ":", "\n", "            ", "ret", ".", "append", "(", "filter_category_actions", "(", "l", ",", "action_type", ",", "num_categories", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "ret", "=", "filter_category_actions", "(", "label", ",", "action_type", ",", "num_categories", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.filter_category_actions": [[170, 182], ["ret[].append", "ret[].append", "ret[].append"], "function", ["None"], ["", "def", "filter_category_actions", "(", "label", ",", "action_type", ",", "num_categories", ")", ":", "\n", "    ", "assert", "num_categories", "==", "3", "\n", "\n", "ret", "=", "[", "[", "]", "]", "*", "num_categories", "\n", "for", "l", "in", "label", ":", "\n", "        ", "if", "action_type", "[", "l", "]", "<=", "5", ":", "\n", "            ", "ret", "[", "0", "]", ".", "append", "(", "l", ")", "\n", "", "elif", "action_type", "[", "l", "]", "==", "6", ":", "\n", "            ", "ret", "[", "1", "]", ".", "append", "(", "l", ")", "\n", "", "else", ":", "\n", "            ", "ret", "[", "2", "]", ".", "append", "(", "l", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.reshape_batched_category_actions": [[183, 192], ["len", "range", "range", "label_by_category[].append"], "function", ["None"], ["", "def", "reshape_batched_category_actions", "(", "label_by_batch", ")", ":", "\n", "    ", "num_categories", "=", "len", "(", "label_by_batch", "[", "0", "]", ")", "\n", "label_by_category", "=", "[", "[", "]", "for", "i", "in", "range", "(", "num_categories", ")", "]", "\n", "for", "label", "in", "label_by_batch", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_categories", ")", ":", "\n", "            ", "label_by_category", "[", "i", "]", ".", "append", "(", "label", "[", "i", "]", ")", "\n", "\n", "\n", "", "", "return", "label_by_category", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.read_npy": [[193, 206], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load"], "function", ["None"], ["", "def", "read_npy", "(", "args", ")", ":", "\n", "    ", "npy_dict", "=", "{", "}", "\n", "\n", "npy_dict", "[", "\"action_embedding\"", "]", "=", "np", ".", "load", "(", "args", ".", "action_embedding", ")", "\n", "npy_dict", "[", "\"action_name\"", "]", "=", "np", ".", "load", "(", "args", ".", "action_name", ",", "allow_pickle", "=", "True", ")", "\n", "npy_dict", "[", "\"action_money\"", "]", "=", "np", ".", "load", "(", "args", ".", "action_money", ",", "allow_pickle", "=", "True", ")", "\n", "npy_dict", "[", "\"action_capacity\"", "]", "=", "np", ".", "load", "(", "args", ".", "action_capacity", ",", "allow_pickle", "=", "True", ")", "\n", "npy_dict", "[", "\"type_capacity\"", "]", "=", "np", ".", "load", "(", "args", ".", "type_capacity", ",", "allow_pickle", "=", "True", ")", "\n", "npy_dict", "[", "\"id2type\"", "]", "=", "np", ".", "load", "(", "args", ".", "id2type", ",", "allow_pickle", "=", "True", ")", "\n", "npy_dict", "[", "\"typeid2name\"", "]", "=", "np", ".", "load", "(", "args", ".", "typeid2name", ",", "allow_pickle", "=", "True", ")", "\n", "npy_dict", "[", "\"side_mask\"", "]", "=", "np", ".", "load", "(", "args", ".", "side_mask", ")", "\n", "\n", "return", "npy_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.src.utils.find_latest_file": [[207, 217], ["os.listdir", "re.findall", "len", "files.append", "max", "int"], "function", ["None"], ["", "def", "find_latest_file", "(", "folder", ")", ":", "\n", "    ", "files", "=", "[", "]", "\n", "for", "fname", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "s", "=", "re", ".", "findall", "(", "r'\\d+'", ",", "fname", ")", "\n", "if", "len", "(", "s", ")", "==", "1", ":", "\n", "            ", "files", ".", "append", "(", "(", "int", "(", "s", "[", "0", "]", ")", ",", "fname", ")", ")", "\n", "", "", "if", "files", ":", "\n", "        ", "return", "max", "(", "files", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.__init__": [[32, 34], ["torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.point_grad_to": [[35, 48], ["zip", "vis.ReptileModel.parameters", "target.parameters", "p.grad.data.zero_", "p.grad.data.add_", "vis.ReptileModel.is_cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "p.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.size"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.is_cuda"], ["", "def", "point_grad_to", "(", "self", ",", "target", ")", ":", "\n", "        ", "'''\n        Set .grad attribute of each parameter to be proportional\n        to the difference between self and target\n        '''", "\n", "for", "p", ",", "target_p", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "target", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "if", "self", ".", "is_cuda", "(", ")", ":", "\n", "                    ", "p", ".", "grad", "=", "Variable", "(", "torch", ".", "zeros", "(", "p", ".", "size", "(", ")", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "grad", "=", "Variable", "(", "torch", ".", "zeros", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "", "", "p", ".", "grad", ".", "data", ".", "zero_", "(", ")", "# not sure this is required", "\n", "p", ".", "grad", ".", "data", ".", "add_", "(", "p", ".", "data", "-", "target_p", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.is_cuda": [[49, 51], ["next", "vis.ReptileModel.parameters"], "methods", ["None"], ["", "", "def", "is_cuda", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "is_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__": [[53, 100], ["vis.ReptileModel.__init__", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "list", "list", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "list", "list", "numpy.load", "numpy.load", "list", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "enumerate", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "numpy.load", "numpy.load", "dict", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "vis.CsgoModel.define_modules", "vis.CsgoModel.initialize_modules", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "vis.CsgoModel.embedding.size", "vis.CsgoModel.embedding.size", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "vis.CsgoModel.embedding.size", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "side_mask[].astype", "side_mask[].astype", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.load", "numpy.load", "len", "len"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.__init__", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.define_modules", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_modules"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CsgoModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# ReptileModel.__init__(self)", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "embedding", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "args", ".", "action_embedding", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "id2name", "=", "list", "(", "np", ".", "load", "(", "args", ".", "action_name", ",", "allow_pickle", "=", "True", ")", ")", "\n", "self", ".", "id2money", "=", "list", "(", "np", ".", "load", "(", "args", ".", "action_money", ",", "allow_pickle", "=", "True", ")", ")", "\n", "self", ".", "prices", "=", "torch", ".", "tensor", "(", "self", ".", "id2money", ")", ".", "cuda", "(", ")", "\n", "self", ".", "action_capacity", "=", "list", "(", "np", ".", "load", "(", "args", ".", "action_capacity", ",", "allow_pickle", "=", "True", ")", ")", "\n", "self", ".", "type_capacity", "=", "list", "(", "np", ".", "load", "(", "args", ".", "type_capacity", ",", "allow_pickle", "=", "True", ")", ")", "\n", "self", ".", "id2type", "=", "np", ".", "load", "(", "args", ".", "id2type", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "typeid2name", "=", "list", "(", "np", ".", "load", "(", "args", ".", "typeid2name", ",", "allow_pickle", "=", "True", ")", ")", "\n", "\n", "self", ".", "mute_action_mask", "=", "1.0", "-", "torch", ".", "eye", "(", "len", "(", "self", ".", "id2type", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mute_type_mask", "=", "torch", ".", "ones", "(", "len", "(", "self", ".", "typeid2name", ")", ",", "len", "(", "self", ".", "id2type", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "typeid", "in", "enumerate", "(", "self", ".", "id2type", ")", ":", "\n", "            ", "self", ".", "mute_type_mask", "[", "typeid", "]", "[", "i", "]", "=", "0.0", "\n", "\n", "", "self", ".", "money_scaling", "=", "args", ".", "money_scaling", "\n", "\n", "self", ".", "end_idx", "=", "self", ".", "embedding", ".", "size", "(", ")", "[", "0", "]", "-", "1", "\n", "self", ".", "start_idx", "=", "self", ".", "end_idx", "\n", "self", ".", "embedding_dim", "=", "self", ".", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "output_dim", "=", "self", ".", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "self", ".", "action_mask", "=", "torch", ".", "ones", "(", "self", ".", "output_dim", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "# self.action_mask[self.start_idx] = 0.0", "\n", "side_mask", "=", "np", ".", "load", "(", "args", ".", "side_mask", ")", "\n", "self", ".", "side_mask", "=", "dict", "(", ")", "\n", "self", ".", "side_mask", "[", "0", "]", "=", "torch", ".", "tensor", "(", "side_mask", "[", "'t_mask'", "]", ".", "astype", "(", "float", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "side_mask", "[", "1", "]", "=", "torch", ".", "tensor", "(", "side_mask", "[", "'ct_mask'", "]", ".", "astype", "(", "float", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "side_embedding", "=", "torch", ".", "tensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "history_dim", "=", "args", ".", "history_dim", "\n", "self", ".", "history_num_layers", "=", "args", ".", "history_num_layers", "\n", "self", ".", "ff_dim", "=", "args", ".", "ff_dim", "\n", "self", ".", "resource_dim", "=", "args", ".", "resource_dim", "\n", "self", ".", "team_dim", "=", "4", "\n", "self", ".", "input_dim", "=", "(", "self", ".", "embedding_dim", "+", "self", ".", "resource_dim", ")", "*", "3", "+", "self", ".", "team_dim", "\n", "\n", "self", ".", "ff_dropout_rate", "=", "args", ".", "ff_dropout_rate", "\n", "self", ".", "max_output_num", "=", "args", ".", "max_output_num", "\n", "self", ".", "beam_size", "=", "args", ".", "beam_size", "\n", "\n", "self", ".", "define_modules", "(", ")", "\n", "#xavier_initialization", "\n", "self", ".", "initialize_modules", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.reward_fun": [[102, 119], ["list", "len", "len", "len", "len", "len", "len", "collections.Counter", "collections.Counter"], "methods", ["None"], ["", "def", "reward_fun", "(", "self", ",", "a", ",", "a_r", ")", ":", "\n", "# F1 score", "\n", "# remove end token", "\n", "        ", "'''if a[-1] == self.end_idx:\n            a_new = a[: -1]\n        else:\n            a_new = a'''", "\n", "a_new", "=", "a", "\n", "a_r_new", "=", "a_r", "[", ":", "-", "1", "]", "\n", "# both are empty", "\n", "if", "len", "(", "a_new", ")", "==", "0", "and", "len", "(", "a_r_new", ")", "==", "0", ":", "\n", "            ", "return", "1.0", "\n", "", "a_common", "=", "list", "(", "(", "Counter", "(", "a_new", ")", "&", "Counter", "(", "a_r_new", ")", ")", ".", "elements", "(", ")", ")", "\n", "recall", "=", "len", "(", "a_common", ")", "/", "(", "len", "(", "a_r_new", ")", "+", "EPSILON", ")", "\n", "precision", "=", "len", "(", "a_common", ")", "/", "(", "len", "(", "a_new", ")", "+", "EPSILON", ")", "\n", "F1_score", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "EPSILON", ")", "\n", "return", "F1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.loss": [[121, 175], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "float", "r.view", "stabled_r_2D.view", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "vis.CsgoModel.reward_fun", "vis.CsgoModel.reward_fun", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.log().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "r.view.mean", "ValueError", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "r.view.mean", "r.view.std"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.reward_fun", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.reward_fun"], ["", "def", "loss", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "def", "stablize_reward", "(", "r", ")", ":", "\n", "            ", "r_2D", "=", "r", ".", "view", "(", "-", "1", ",", "self", ".", "num_rollouts", ")", "\n", "if", "self", ".", "baseline", "==", "'avg_reward'", ":", "\n", "                ", "stabled_r_2D", "=", "r_2D", "-", "r_2D", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "baseline", "==", "'avg_reward_normalized'", ":", "\n", "                ", "stabled_r_2D", "=", "(", "r_2D", "-", "r_2D", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "/", "(", "r_2D", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "EPSILON", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unrecognized baseline function: {}'", ".", "format", "(", "self", ".", "baseline", ")", ")", "\n", "", "stabled_r", "=", "stabled_r_2D", ".", "view", "(", "-", "1", ")", "\n", "return", "stabled_r", "\n", "\n", "# TODO: batch", "\n", "# x, money, gs_actions = self.format_batch(mini_batch, num_tiles=self.num_rollouts)", "\n", "\n", "", "action_list", ",", "action_prob", ",", "greedy_list", "=", "predictions", "\n", "log_action_probs", "=", "[", "]", "\n", "for", "ap", "in", "action_prob", ":", "\n", "            ", "log_action_probs", ".", "append", "(", "torch", ".", "log", "(", "ap", "+", "EPSILON", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "log_action_probs", "=", "torch", ".", "cat", "(", "log_action_probs", ",", "0", ")", "\n", "# log_action_probs = torch.log(action_prob + EPSILON)", "\n", "gs_actions", "=", "labels", "\n", "\n", "# Compute policy gradient loss", "\n", "# Compute discounted reward", "\n", "final_reward", "=", "self", ".", "reward_fun", "(", "action_list", ",", "gs_actions", ")", "-", "self", ".", "reward_fun", "(", "greedy_list", ",", "gs_actions", ")", "\n", "'''if self.baseline != 'n/a':\n            #print('stablized reward')\n            final_reward = stablize_reward(final_reward)'''", "\n", "\n", "'''cum_discounted_rewards = [0] * self.num_rollout_steps\n        cum_discounted_rewards[-1] = final_reward\n        R = 0\n        for i in range(self.num_rollout_steps - 1, -1, -1):\n            R = self.gamma * R + cum_discounted_rewards[i]\n            cum_discounted_rewards[i] = R\n\n        # Compute policy gradient\n        pg_loss, pt_loss = 0, 0\n        for i in range(self.num_rollout_steps):\n            log_action_prob = log_action_probs[i]\n            pg_loss += -cum_discounted_rewards[i] * log_action_prob\n            pt_loss += -cum_discounted_rewards[i] * torch.exp(log_action_prob)'''", "\n", "pg_loss", "=", "-", "final_reward", "*", "torch", ".", "sum", "(", "log_action_probs", ")", "\n", "pt_loss", "=", "-", "final_reward", "*", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "log_action_probs", ")", ")", "\n", "\n", "loss_dict", "=", "{", "}", "\n", "loss_dict", "[", "'model_loss'", "]", "=", "pg_loss", "\n", "loss_dict", "[", "'print_loss'", "]", "=", "float", "(", "pt_loss", ")", "\n", "\n", "loss_dict", "[", "'reward'", "]", "=", "final_reward", "\n", "# loss_dict['entropy'] = float(entropy.mean())", "\n", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding": [[176, 185], ["None"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "idx", ")", ":", "\n", "        ", "'''if not isinstance(idx, list):\n            return self.embedding[idx]\n        else:\n            ret = []\n            for i in idx:\n                ret.append(self.embedding[i])\n            return ret'''", "\n", "return", "self", ".", "embedding", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att": [[186, 194], ["vis.CsgoModel.att_LN2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "vis.CsgoModel.v2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "high_att", "(", "self", ",", "x", ")", ":", "\n", "# team-level attention", "\n", "        ", "h", "=", "self", ".", "att_LN2", "(", "x", ")", "\n", "h", "=", "torch", ".", "tanh", "(", "h", ")", "\n", "h", "=", "self", ".", "v2", "(", "h", ")", "\n", "att", "=", "F", ".", "softmax", "(", "h", ",", "0", ")", "\n", "ret", "=", "torch", ".", "sum", "(", "att", "*", "x", ",", "0", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att": [[195, 203], ["vis.CsgoModel.att_LN1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "vis.CsgoModel.v1", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "low_att", "(", "self", ",", "x", ")", ":", "\n", "# player-level attention", "\n", "        ", "h", "=", "self", ".", "att_LN1", "(", "x", ")", "\n", "h", "=", "torch", ".", "tanh", "(", "h", ")", "\n", "h", "=", "self", ".", "v1", "(", "h", ")", "\n", "att", "=", "F", ".", "softmax", "(", "h", ",", "0", ")", "\n", "ret", "=", "torch", ".", "sum", "(", "att", "*", "x", ",", "0", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.classif_LN": [[204, 214], ["vis.CsgoModel.LN1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vis.CsgoModel.LNDropout", "vis.CsgoModel.LN2", "vis.CsgoModel.LNDropout", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "classif_LN", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "LN1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "LNDropout", "(", "out", ")", "\n", "out", "=", "self", ".", "LN2", "(", "out", ")", "\n", "out", "=", "self", ".", "LNDropout", "(", "out", ")", "\n", "out", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "-", "1", ")", "\n", "#action_dist = F.softmax(", "\n", "#    torch.squeeze(A @ torch.unsqueeze(X2, 2), 2) - (1 - action_mask) * ops.HUGE_INT, dim=-1)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.money_mask": [[215, 217], ["None"], "methods", ["None"], ["", "def", "money_mask", "(", "self", ",", "money", ")", ":", "\n", "        ", "return", "(", "self", ".", "prices", "<=", "money", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity": [[218, 230], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "collections.Counter.items", "collections.Counter", "l.cpu().numpy", "type", "collections.Counter", "collections.Counter", "l.cpu"], "methods", ["None"], ["", "def", "get_residual_capacity", "(", "self", ",", "l", ",", "capacity", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "l", ")", ":", "\n", "            ", "possession", "=", "Counter", "(", "l", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "type", "(", "l", ")", "==", "np", ".", "int64", ":", "\n", "                ", "possession", "=", "Counter", "(", "[", "l", "]", ")", "\n", "", "else", ":", "\n", "                ", "possession", "=", "Counter", "(", "l", ")", "\n", "", "", "residual_capacity", "=", "capacity", "\n", "for", "key", ",", "value", "in", "possession", ".", "items", "(", ")", ":", "\n", "            ", "residual_capacity", "[", "key", "]", "-=", "value", "\n", "", "return", "residual_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask": [[231, 241], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "enumerate", "ret.append", "torch.ones().cuda.unsqueeze", "torch.ones().cuda.unsqueeze", "torch.ones().cuda.unsqueeze", "torch.ones().cuda.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mute_mask.size"], "methods", ["None"], ["", "def", "get_capacity_mask", "(", "self", ",", "res_action_capacity", ",", "mute_mask", ")", ":", "\n", "# is_mute = (torch.tensor(res_action_capacity) == 0).float().cuda()", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "res_action_capacity", ")", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "mute_mask", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "res_cap", "in", "enumerate", "(", "res_action_capacity", "[", "j", "]", ")", ":", "\n", "                ", "if", "res_cap", "==", "0", ":", "\n", "                    ", "mask", "*=", "mute_mask", "[", "i", "]", "\n", "", "", "ret", ".", "append", "(", "mask", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "ret", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.parse_data": [[242, 271], ["xt.append", "xo.append"], "methods", ["None"], ["", "def", "parse_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "side", ",", "x_s", ",", "money_s", ",", "perf_s", ",", "score", ",", "x_t", ",", "x_o", "=", "data", "\n", "'''side = [side[0][0].item()]\n        x_s = list(x_s[0][0].cpu().numpy())\n        money_s = [money_s[0][0].item()]\n        perf_s = [perf_s[0][0].item()]\n        score = list(score[0][0].cpu().numpy())\n        xt = []\n        for p in x_t:\n            xp, mp, pp = p\n            xt.append([list(xp.cpu.numpy()), [mp.item()], [pp.item()]])\n        xo = []\n        for p in x_o:\n            xp, mp, pp = p\n            xo.append([list(xp.cpu.numpy()), [mp.item()], [pp.item()]])'''", "\n", "side", "=", "side", "[", "0", "]", "[", "0", "]", "\n", "x_s", "=", "x_s", "[", "0", "]", "[", "0", "]", "\n", "money_s", "=", "money_s", "[", "0", "]", "[", "0", "]", "\n", "perf_s", "=", "perf_s", "[", "0", "]", "[", "0", "]", "\n", "score", "=", "score", "[", "0", "]", "[", "0", "]", "\n", "xt", "=", "[", "]", "\n", "for", "p", "in", "x_t", ":", "\n", "            ", "xp", ",", "mp", ",", "pp", "=", "p", "\n", "xt", ".", "append", "(", "[", "xp", ",", "mp", ",", "pp", "]", ")", "\n", "", "xo", "=", "[", "]", "\n", "for", "p", "in", "x_o", ":", "\n", "            ", "xp", ",", "mp", ",", "pp", "=", "p", "\n", "xo", ".", "append", "(", "[", "xp", ",", "mp", ",", "pp", "]", ")", "\n", "", "return", "side", ",", "x_s", ",", "money_s", ",", "perf_s", ",", "score", ",", "xt", ",", "xo", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.forward": [[273, 414], ["vis.CsgoModel.parse_data", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.high_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.high_att", "vis.CsgoModel.low_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.get_residual_capacity", "vis.CsgoModel.get_residual_capacity", "vis.CsgoModel.initialize_lstm", "range", "vis.CsgoModel.get_residual_capacity", "vis.CsgoModel.get_residual_capacity", "range", "print", "print", "print", "vis.CsgoModel.low_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.append", "vis.CsgoModel.low_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.append", "vis.CsgoModel.get_embedding", "vis.CsgoModel.classif_LN", "vis.CsgoModel.get_capacity_mask().view", "vis.CsgoModel.get_capacity_mask().view", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "action_prob.append", "action_list.append", "vis.CsgoModel.update_lstm", "vis.CsgoModel.classif_LN", "vis.CsgoModel.get_capacity_mask().view", "vis.CsgoModel.get_capacity_mask().view", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "greedy_list.append", "vis.CsgoModel.update_lstm", "len", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "torch.tensor().cuda().unsqueeze", "vis.CsgoModel.get_embedding", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "vis.CsgoModel.get_embedding", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "len", "len", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "vis.CsgoModel.money_mask", "vis.CsgoModel.get_capacity_mask", "vis.CsgoModel.get_capacity_mask", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "vis.CsgoModel.money_mask", "vis.CsgoModel.get_capacity_mask", "vis.CsgoModel.get_capacity_mask", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "side[].item", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "side[].item", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.parse_data", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.classif_LN", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.update_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.classif_LN", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.update_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.money_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.money_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        forward for one round\n        x: idx of weapons, x = [x_s, x_t, x_o]\n        x_s: num_weapon #(num_batch, num_shot, num_weapon)\n        x_t, x_o: (num_player, num_weapon) #(num_batch, num_shot, num_player, num_weapon)\n        '''", "\n", "\n", "side", ",", "x_s", ",", "money_s", ",", "perf_s", ",", "score", ",", "x_t", ",", "x_o", "=", "self", ".", "parse_data", "(", "data", ")", "\n", "# represent allies", "\n", "ht", "=", "[", "]", "\n", "for", "xti", ",", "moneyi", ",", "perfi", "in", "x_t", ":", "\n", "            ", "hti", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xti", ")", ")", "\n", "hti", "=", "torch", ".", "cat", "(", "[", "hti", ",", "torch", ".", "tensor", "(", "moneyi", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perfi", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "ht", ".", "append", "(", "hti", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "ht", "=", "torch", ".", "cat", "(", "ht", ",", "0", ")", "\n", "ht", "=", "self", ".", "high_att", "(", "ht", ")", "\n", "\n", "# represent enemies", "\n", "ho", "=", "[", "]", "\n", "for", "xoi", ",", "moneyi", ",", "perfi", "in", "x_o", ":", "\n", "            ", "hoi", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xoi", ")", ")", "\n", "hoi", "=", "torch", ".", "cat", "(", "[", "hoi", ",", "torch", ".", "tensor", "(", "moneyi", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perfi", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "ho", ".", "append", "(", "hoi", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "ho", "=", "torch", ".", "cat", "(", "ho", ",", "0", ")", "\n", "ho", "=", "self", ".", "high_att", "(", "ho", ")", "\n", "\n", "# represent self", "\n", "hs", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s", ")", ")", "\n", "hs", "=", "torch", ".", "cat", "(", "[", "hs", ",", "torch", ".", "tensor", "(", "money_s", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perf_s", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "\n", "\n", "'''x_s, x_t, x_o = x\n        perf_s, perf_t, perf_o = performance\n        money_s, money_t, money_o = money\n        x_s = self.get_embedding(x_s)\n        x_t = self.get_embedding(x_t)\n        x_o = self.get_embedding(x_o)\n        \n        # represent allies\n        ht = []\n        for xti, perfi, moneyi in zip(x_t, perf_t, money_t):\n            hti = self.low_att(xti)\n            hti = torch.cat([hti, torch.tensor([perfi]).cuda(), torch.tensor([moneyi]).cuda()], -1)\n            ht.append(hti.unsqueeze(0))\n        ht = torch.cat(ht, 0)\n        ht = self.high_att(ht)\n        \n        # represent enemies\n        ho = []\n        for xoi, perfi, moneyi in zip(x_o, perf_o, money_o):\n            hoi = self.low_att(xoi)\n            hoi = torch.cat([hoi, torch.tensor([perfi]).cuda(), torch.tensor([moneyi]).cuda()], -1)\n            ho.append(hoi.unsqueeze(0))\n        ho = torch.cat(ho, 0)\n        ho = self.high_att(ho)\n\n        # represent self\n        hs = self.low_att(x_s)\n        hs = torch.cat([hs, torch.tensor([perf_s]).cuda(), torch.tensor([money_s]).cuda()], -1)'''", "\n", "\n", "# concat representations", "\n", "h", "=", "torch", ".", "cat", "(", "[", "hs", ",", "ht", ",", "ho", "]", ",", "-", "1", ")", "\n", "\n", "# incorporate team information", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "self", ".", "side_embedding", "[", "side", "[", "0", "]", "]", ",", "torch", ".", "tensor", "(", "score", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "\n", "# return values - predictions and probabilities", "\n", "action_list", "=", "[", "]", "\n", "greedy_list", "=", "[", "]", "\n", "action_prob", "=", "[", "]", "\n", "\n", "# resource left", "\n", "money", "=", "money_s", "[", "0", "]", "*", "self", ".", "money_scaling", "\n", "res_action_capacity", "=", "self", ".", "get_residual_capacity", "(", "x_s", ",", "self", ".", "action_capacity", ")", "\n", "res_type_capacity", "=", "self", ".", "get_residual_capacity", "(", "self", ".", "id2type", "[", "x_s", "]", ",", "self", ".", "type_capacity", ")", "\n", "\n", "\n", "# initialize lstm", "\n", "init_action", "=", "self", ".", "start_idx", "\n", "self", ".", "initialize_lstm", "(", "h", ",", "init_action", ")", "\n", "\n", "# generate predictions", "\n", "for", "i", "in", "range", "(", "self", ".", "max_output_num", ")", ":", "\n", "            ", "H", "=", "self", ".", "history", "[", "-", "1", "]", "[", "0", "]", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "action_dist", "=", "self", ".", "classif_LN", "(", "H", ")", "\n", "action_mask", "=", "self", ".", "money_mask", "(", "money", ")", "*", "self", ".", "action_mask", "*", "self", ".", "side_mask", "[", "side", "[", "0", "]", ".", "item", "(", ")", "]", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "torch", ".", "tensor", "(", "res_action_capacity", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "self", ".", "mute_action_mask", ")", ".", "view", "(", "-", "1", ")", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "torch", ".", "tensor", "(", "res_type_capacity", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "self", ".", "mute_type_mask", ")", ".", "view", "(", "-", "1", ")", "\n", "# is_zero = (torch.sum(r_prob_b, 1) == 0).float().unsqueeze(1)", "\n", "action_dist", "=", "action_dist", "*", "action_mask", "+", "(", "1", "-", "action_mask", ")", "*", "EPSILON", "\n", "action_idx", "=", "torch", ".", "multinomial", "(", "action_dist", ",", "1", ",", "replacement", "=", "True", ")", ".", "item", "(", ")", "\n", "action_prob", ".", "append", "(", "action_dist", "[", "0", "]", "[", "action_idx", "]", ")", "\n", "if", "action_idx", "==", "self", ".", "end_idx", ":", "\n", "                ", "break", "\n", "", "action_list", ".", "append", "(", "action_idx", ")", "\n", "# greedy_idx = torch.argmax(action_dist).item()", "\n", "# greedy_list.append(greedy_idx)", "\n", "self", ".", "update_lstm", "(", "action_idx", ")", "\n", "money", "=", "money", "-", "self", ".", "prices", "[", "action_idx", "]", "\n", "res_action_capacity", "[", "action_idx", "]", "-=", "1", "\n", "res_type_capacity", "[", "self", ".", "id2type", "[", "action_idx", "]", "]", "-=", "1", "\n", "# xs = torch.cat([xs.unsqueeze(0), self.get_embedding(out_id).unsqueeze(0)], 0)", "\n", "\n", "# greedy", "\n", "# resource left", "\n", "", "money", "=", "money_s", "[", "0", "]", "*", "self", ".", "money_scaling", "\n", "res_action_capacity", "=", "self", ".", "get_residual_capacity", "(", "x_s", ",", "self", ".", "action_capacity", ")", "\n", "res_type_capacity", "=", "self", ".", "get_residual_capacity", "(", "self", ".", "id2type", "[", "x_s", "]", ",", "self", ".", "type_capacity", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "max_output_num", ")", ":", "\n", "            ", "H", "=", "self", ".", "history", "[", "-", "1", "]", "[", "0", "]", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "action_dist", "=", "self", ".", "classif_LN", "(", "H", ")", "\n", "action_mask", "=", "self", ".", "money_mask", "(", "money", ")", "*", "self", ".", "action_mask", "*", "self", ".", "side_mask", "[", "side", "[", "0", "]", ".", "item", "(", ")", "]", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "torch", ".", "tensor", "(", "res_action_capacity", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "self", ".", "mute_action_mask", ")", ".", "view", "(", "-", "1", ")", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "torch", ".", "tensor", "(", "res_type_capacity", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "self", ".", "mute_type_mask", ")", ".", "view", "(", "-", "1", ")", "\n", "# is_zero = (torch.sum(r_prob_b, 1) == 0).float().unsqueeze(1)", "\n", "action_dist", "=", "action_dist", "*", "action_mask", "+", "(", "1", "-", "action_mask", ")", "*", "EPSILON", "\n", "action_idx", "=", "torch", ".", "argmax", "(", "action_dist", ")", ".", "item", "(", ")", "\n", "if", "action_idx", "==", "self", ".", "end_idx", ":", "\n", "                ", "break", "\n", "", "greedy_list", ".", "append", "(", "action_idx", ")", "\n", "self", ".", "update_lstm", "(", "action_idx", ")", "\n", "money", "=", "money", "-", "self", ".", "prices", "[", "action_idx", "]", "\n", "res_action_capacity", "[", "action_idx", "]", "-=", "1", "\n", "res_type_capacity", "[", "self", ".", "id2type", "[", "action_idx", "]", "]", "-=", "1", "\n", "\n", "\n", "\n", "", "'''print('ggg')\n        print(greedy_list)\n        print('sss')\n        print(action_list)'''", "\n", "action_list", "+=", "[", "self", ".", "end_idx", "]", "*", "(", "10", "-", "len", "(", "action_list", ")", ")", "\n", "action_probs", "=", "0.0", "\n", "for", "p", "in", "action_prob", ":", "\n", "            ", "action_probs", "+=", "p", "\n", "", "greedy_list", "+=", "[", "self", ".", "end_idx", "]", "*", "(", "10", "-", "len", "(", "greedy_list", ")", ")", "\n", "print", "(", "'action: '", ",", "action_list", ")", "\n", "print", "(", "'action_prob: '", ",", "len", "(", "action_prob", ")", ")", "\n", "print", "(", "'greedy: '", ",", "greedy_list", ")", "\n", "return", "torch", ".", "tensor", "(", "action_list", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "tensor", "(", "[", "action_probs", "]", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "greedy_list", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_lstm": [[417, 423], ["vis.CsgoModel.get_embedding().unsqueeze().unsqueeze", "vis.CsgoModel.HLN().view", "vis.CsgoModel.CLN().view", "vis.CsgoModel.get_embedding().unsqueeze", "vis.CsgoModel.HLN", "vis.CsgoModel.CLN", "vis.CsgoModel.rnn", "vis.CsgoModel.get_embedding"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding"], ["", "def", "initialize_lstm", "(", "self", ",", "representation", ",", "init_action", ")", ":", "\n", "        ", "init_embedding", "=", "self", ".", "get_embedding", "(", "init_action", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# transform representation to initialize (h, c)", "\n", "init_h", "=", "self", ".", "HLN", "(", "representation", ")", ".", "view", "(", "self", ".", "history_num_layers", ",", "1", ",", "self", ".", "history_dim", ")", "\n", "init_c", "=", "self", ".", "CLN", "(", "representation", ")", ".", "view", "(", "self", ".", "history_num_layers", ",", "1", ",", "self", ".", "history_dim", ")", "\n", "self", ".", "history", "=", "[", "self", ".", "rnn", "(", "init_embedding", ",", "(", "init_h", ",", "init_c", ")", ")", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.update_lstm": [[424, 451], ["vis.CsgoModel.get_embedding().view", "vis.CsgoModel.history.append", "enumerate", "vis.CsgoModel.update_lstm.offset_path_history"], "methods", ["None"], ["", "def", "update_lstm", "(", "self", ",", "action", ",", "offset", "=", "None", ")", ":", "\n", "\n", "        ", "def", "offset_path_history", "(", "p", ",", "offset", ")", ":", "\n", "            ", "for", "i", ",", "x", "in", "enumerate", "(", "p", ")", ":", "\n", "                ", "if", "type", "(", "x", ")", "is", "tuple", ":", "\n", "                    ", "new_tuple", "=", "tuple", "(", "[", "_x", "[", ":", ",", "offset", ",", ":", "]", "for", "_x", "in", "x", "]", ")", "\n", "p", "[", "i", "]", "=", "new_tuple", "\n", "", "else", ":", "\n", "                    ", "p", "[", "i", "]", "=", "x", "[", "offset", ",", ":", "]", "\n", "\n", "\n", "# update action history", "\n", "#if self.relation_only_in_path:", "\n", "#    action_embedding = kg.get_relation_embeddings(action[0])", "\n", "#else:", "\n", "#    action_embedding = self.get_action_embedding(action, kg)", "\n", "", "", "", "embedding", "=", "self", ".", "get_embedding", "(", "action", ")", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "embedding_dim", ")", "\n", "if", "offset", "is", "not", "None", ":", "\n", "            ", "offset_path_history", "(", "self", ".", "history", ",", "offset", ".", "view", "(", "-", "1", ")", ")", "\n", "# during inference, update batch size", "\n", "# self.hidden_tensor = offset_rule_history(self.hidden_tensor, offset)", "\n", "# self.cell_tensor = offset_rule_history(self.cell_tensor, offset)", "\n", "\n", "\n", "# self.path.append(self.path_encoder(action_embedding.unsqueeze(1), self.path[-1])[1])", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "self", ".", "history", ".", "append", "(", "self", ".", "rnn", "(", "embedding", ",", "self", ".", "history", "[", "-", "1", "]", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.print_all_model_parameters": [[452, 461], ["print", "print", "vis.CsgoModel.named_parameters", "print", "print", "print", "print", "param.numel", "param.numel", "vis.CsgoModel.parameters", "sum"], "methods", ["None"], ["", "def", "print_all_model_parameters", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\nModel Parameters'", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "print", "(", "name", ",", "param", ".", "numel", "(", ")", ",", "'requires_grad={}'", ".", "format", "(", "param", ".", "requires_grad", ")", ")", "\n", "", "param_sizes", "=", "[", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "parameters", "(", ")", "]", "\n", "print", "(", "'Total # parameters = {}'", ".", "format", "(", "sum", "(", "param_sizes", ")", ")", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.predict": [[463, 598], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.high_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.high_att", "vis.CsgoModel.low_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.initialize_lstm", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "torch.tensor().unsqueeze().cuda", "range", "vis.CsgoModel.low_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.append", "vis.CsgoModel.low_att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.append", "vis.CsgoModel.get_embedding", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "vis.CsgoModel.classif_LN", "vis.CsgoModel.get_capacity_mask", "vis.CsgoModel.get_capacity_mask", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "len", "log_action_dist.view.view.view", "min", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis.CsgoModel.update_lstm", "money[].view", "res_action_capacity[].view", "res_type_capacity[].view", "actions.append", "vis.CsgoModel.get_embedding", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "vis.CsgoModel.get_embedding", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "vis.CsgoModel.prices[].view", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "[].item", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "vis.CsgoModel.money_mask", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "log_action_dist.view.view.size", "log_action_dist.view.view.size", "action_list[].view", "action_idx.view", "action_offset.view", "action_offset.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "money[].view.view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "vis.CsgoModel.get_residual_capacity", "vis.CsgoModel.get_residual_capacity", "action_idx.view"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.high_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.low_att", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.classif_LN", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_capacity_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.update_lstm", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_embedding", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.money_mask", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.get_residual_capacity"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        x: input\n        '''", "\n", "'''\n        forward for one round\n        x: idx of weapons, x = [x_s, x_t, x_o]\n        x_s: num_weapon #(num_batch, num_shot, num_weapon)\n        x_t, x_o: (num_player, num_weapon) #(num_batch, num_shot, num_player, num_weapon)\n        '''", "\n", "\n", "side", ",", "x_s", ",", "money_s", ",", "perf_s", ",", "score", ",", "x_t", ",", "x_o", "=", "data", "\n", "# represent allies", "\n", "ht", "=", "[", "]", "\n", "for", "xti", ",", "moneyi", ",", "perfi", "in", "x_t", ":", "\n", "            ", "hti", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xti", ")", ")", "\n", "hti", "=", "torch", ".", "cat", "(", "[", "hti", ",", "torch", ".", "tensor", "(", "moneyi", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perfi", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "ht", ".", "append", "(", "hti", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "ht", "=", "torch", ".", "cat", "(", "ht", ",", "0", ")", "\n", "ht", "=", "self", ".", "high_att", "(", "ht", ")", "\n", "\n", "# represent enemies", "\n", "ho", "=", "[", "]", "\n", "for", "xoi", ",", "moneyi", ",", "perfi", "in", "x_o", ":", "\n", "            ", "hoi", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "xoi", ")", ")", "\n", "hoi", "=", "torch", ".", "cat", "(", "[", "hoi", ",", "torch", ".", "tensor", "(", "moneyi", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perfi", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "ho", ".", "append", "(", "hoi", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "ho", "=", "torch", ".", "cat", "(", "ho", ",", "0", ")", "\n", "ho", "=", "self", ".", "high_att", "(", "ho", ")", "\n", "\n", "# represent self", "\n", "hs", "=", "self", ".", "low_att", "(", "self", ".", "get_embedding", "(", "x_s", ")", ")", "\n", "hs", "=", "torch", ".", "cat", "(", "[", "hs", ",", "torch", ".", "tensor", "(", "money_s", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "perf_s", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "\n", "'''x_s, x_t, x_o = x\n        perf_s, perf_t, perf_o = performance\n        money_s, money_t, money_o = money\n        x_s = self.get_embedding(x_s)\n        x_t = self.get_embedding(x_t)\n        x_o = self.get_embedding(x_o)\n        \n        # represent allies\n        ht = []\n        for xti, perfi, moneyi in zip(x_t, perf_t, money_t):\n            hti = self.low_att(xti)\n            hti = torch.cat([hti, torch.tensor([perfi]).cuda(), torch.tensor([moneyi]).cuda()], -1)\n            ht.append(hti.unsqueeze(0))\n        ht = torch.cat(ht, 0)\n        ht = self.high_att(ht)\n        \n        # represent enemies\n        ho = []\n        for xoi, perfi, moneyi in zip(x_o, perf_o, money_o):\n            hoi = self.low_att(xoi)\n            hoi = torch.cat([hoi, torch.tensor([perfi]).cuda(), torch.tensor([moneyi]).cuda()], -1)\n            ho.append(hoi.unsqueeze(0))\n        ho = torch.cat(ho, 0)\n        ho = self.high_att(ho)\n\n        # represent self\n        hs = self.low_att(x_s)\n        hs = torch.cat([hs, torch.tensor([perf_s]).cuda(), torch.tensor([money_s]).cuda()], -1)'''", "\n", "\n", "# concat representations", "\n", "h", "=", "torch", ".", "cat", "(", "[", "hs", ",", "ht", ",", "ho", "]", ",", "-", "1", ")", "\n", "\n", "# incorporate team information", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "self", ".", "side_embedding", "[", "side", "[", "0", "]", "]", ",", "torch", ".", "tensor", "(", "score", ")", ".", "cuda", "(", ")", "]", ",", "-", "1", ")", "\n", "\n", "# return values - predictions and probabilities", "\n", "action_list", "=", "[", "]", "\n", "action_prob", "=", "[", "]", "\n", "\n", "# initialize lstm", "\n", "init_action", "=", "self", ".", "start_idx", "\n", "self", ".", "initialize_lstm", "(", "h", ",", "init_action", ")", "\n", "\n", "log_action_prob", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "finished", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "action_list", "=", "torch", ".", "tensor", "(", "[", "self", ".", "start_idx", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "# resource left", "\n", "money_s", "=", "torch", ".", "tensor", "(", "money_s", ")", ".", "cuda", "(", ")", "*", "money_scaling", "\n", "res_action_capacity", "=", "torch", ".", "tensor", "(", "self", ".", "get_residual_capacity", "(", "x_s", ",", "self", ".", "action_capacity", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "res_type_capacity", "=", "torch", ".", "tensor", "(", "self", ".", "get_residual_capacity", "(", "self", ".", "id2type", "[", "x_s", "]", ",", "self", ".", "type_capacity", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "# generate predictions", "\n", "for", "i", "in", "range", "(", "self", ".", "max_output_num", ")", ":", "\n", "            ", "H", "=", "self", ".", "history", "[", "-", "1", "]", "[", "0", "]", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "action_dist", "=", "self", ".", "classif_LN", "(", "H", ")", "\n", "action_mask", "=", "self", ".", "money_mask", "(", "money", ".", "view", "(", "-", "1", ",", "1", ")", ")", "*", "self", ".", "action_mask", "*", "self", ".", "side_mask", "[", "side", "[", "0", "]", "]", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "res_action_capacity", ",", "self", ".", "mute_action_mask", ")", "\n", "action_mask", "*=", "self", ".", "get_capacity_mask", "(", "res_type_capacity", ",", "self", ".", "mute_type_mask", ")", "\n", "# is_zero = (torch.sum(r_prob_b, 1) == 0).float().unsqueeze(1)", "\n", "action_dist", "=", "action_dist", "*", "action_mask", "+", "(", "1", "-", "action_mask", ")", "*", "EPSILON", "\n", "end_mask", "=", "torch", ".", "zeros", "(", "self", ".", "output_dim", ")", ".", "cuda", "(", ")", "\n", "end_mask", "[", "self", ".", "end_idx", "]", "=", "1.0", "\n", "action_dist", "=", "action_dist", "*", "(", "1", "-", "finished", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "finished", ".", "view", "(", "-", "1", ",", "1", ")", "*", "end_mask", "\n", "\n", "\n", "log_action_dist", "=", "log_action_prob", ".", "view", "(", "-", "1", ",", "1", ")", "+", "torch", ".", "log", "(", "action_dist", "+", "EPSILON", ")", "\n", "assert", "log_action_dist", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "output_dim", "\n", "last_k", "=", "len", "(", "log_action_dist", ")", "\n", "log_action_dist", "=", "log_action_dist", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "k", "=", "min", "(", "self", ".", "beam_size", ",", "log_action_dist", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "log_action_prob", ",", "action_ind", "=", "torch", ".", "topk", "(", "log_action_dist", ",", "k", ")", "\n", "action_idx", "=", "action_ind", "%", "self", ".", "output_dim", "\n", "action_offset", "=", "action_ind", "/", "self", ".", "output_dim", "\n", "action_list", "=", "torch", ".", "cat", "(", "[", "action_list", "[", "action_offset", "]", ".", "view", "(", "k", ",", "-", "1", ")", ",", "action_idx", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "1", ")", "\n", "#print(action_list[0])", "\n", "\n", "self", ".", "update_lstm", "(", "action_idx", ",", "offset", "=", "action_offset", ")", "\n", "money", "=", "money", "[", "action_offset", "]", ".", "view", "(", "k", ")", "\n", "money", "=", "money", "-", "self", ".", "prices", "[", "action_idx", "]", ".", "view", "(", "-", "1", ")", "\n", "res_action_capacity", "=", "res_action_capacity", "[", "action_offset", "]", ".", "view", "(", "k", ",", "-", "1", ")", "\n", "res_action_capacity", "-=", "torch", ".", "eye", "(", "self", ".", "output_dim", ")", ".", "cuda", "(", ")", "[", "action_offset", ".", "view", "(", "-", "1", ")", "]", "\n", "res_type_capacity", "=", "res_type_capacity", "[", "action_offset", "]", ".", "view", "(", "k", ",", "-", "1", ")", "\n", "res_type_capacity", "-=", "torch", ".", "eye", "(", "self", ".", "output_dim", ")", ".", "cuda", "(", ")", "[", "action_offset", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "finished", "=", "(", "action_idx", "==", "self", ".", "end_idx", ")", ".", "float", "(", ")", "\n", "if", "action_idx", ".", "view", "(", "-", "1", ")", "[", "0", "]", ".", "item", "(", ")", "==", "self", ".", "end_idx", ":", "\n", "                ", "break", "\n", "# xs = torch.cat([xs.unsqueeze(0), self.get_embedding(out_id).unsqueeze(0)], 0)", "\n", "\n", "", "", "pred", "=", "action_list", "[", "0", "]", "[", "1", ":", "]", "\n", "#print(action_list)", "\n", "#print(pred)", "\n", "actions", "=", "[", "]", "\n", "for", "elem", "in", "pred", ":", "\n", "            ", "if", "elem", "==", "self", ".", "end_idx", ":", "\n", "                ", "break", "\n", "", "actions", ".", "append", "(", "elem", ")", "\n", "", "return", "actions", ",", "log_action_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.define_modules": [[600, 628], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "vis.CsgoModel.att_LN1.cuda", "vis.CsgoModel.v1.cuda", "vis.CsgoModel.att_LN2.cuda", "vis.CsgoModel.v2.cuda", "vis.CsgoModel.LN1.cuda", "vis.CsgoModel.LN2.cuda", "vis.CsgoModel.HLN.cuda", "vis.CsgoModel.CLN.cuda", "vis.CsgoModel.LNDropout.cuda", "vis.CsgoModel.rnn.cuda"], "methods", ["None"], ["", "def", "define_modules", "(", "self", ")", ":", "\n", "# terrorist", "\n", "#self.LN1 = nn.Linear(self.embedding_dim, self.ff_dim)", "\n", "        ", "self", ".", "att_LN1", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v1", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "self", ".", "att_LN2", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", "+", "self", ".", "resource_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "v2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "1", ")", "\n", "self", ".", "HLN", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "history_dim", "*", "self", ".", "history_num_layers", ")", "\n", "self", ".", "CLN", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "history_dim", "*", "self", ".", "history_num_layers", ")", "\n", "self", ".", "LN1", "=", "nn", ".", "Linear", "(", "self", ".", "history_dim", ",", "self", ".", "ff_dim", ")", "\n", "self", ".", "LN2", "=", "nn", ".", "Linear", "(", "self", ".", "ff_dim", ",", "self", ".", "output_dim", ")", "\n", "self", ".", "LNDropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "ff_dropout_rate", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "embedding_dim", ",", "\n", "hidden_size", "=", "self", ".", "history_dim", ",", "\n", "num_layers", "=", "self", ".", "history_num_layers", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "att_LN1", "=", "self", ".", "att_LN1", ".", "cuda", "(", ")", "\n", "self", ".", "v1", "=", "self", ".", "v1", ".", "cuda", "(", ")", "\n", "self", ".", "att_LN2", "=", "self", ".", "att_LN2", ".", "cuda", "(", ")", "\n", "self", ".", "v2", "=", "self", ".", "v2", ".", "cuda", "(", ")", "\n", "self", ".", "LN1", "=", "self", ".", "LN1", ".", "cuda", "(", ")", "\n", "self", ".", "LN2", "=", "self", ".", "LN2", ".", "cuda", "(", ")", "\n", "self", ".", "HLN", "=", "self", ".", "HLN", ".", "cuda", "(", ")", "\n", "self", ".", "CLN", "=", "self", ".", "CLN", ".", "cuda", "(", ")", "\n", "self", ".", "LNDropout", "=", "self", ".", "LNDropout", ".", "cuda", "(", ")", "\n", "self", ".", "rnn", "=", "self", ".", "rnn", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.initialize_modules": [[629, 644], ["vis.CsgoModel.rnn.named_parameters", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], ["", "", "def", "initialize_modules", "(", "self", ")", ":", "\n", "# xavier initialization", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "rnn", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ")", "\n", "", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "att_LN2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "LN2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "HLN", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "CLN", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.clone": [[645, 651], ["vis.CsgoModel", "CsgoModel.load_state_dict", "vis.CsgoModel.is_cuda", "vis.CsgoModel.state_dict", "CsgoModel.cuda"], "methods", ["home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.ReptileModel.is_cuda"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "clone", "=", "CsgoModel", "(", "self", ".", "args", ")", "\n", "clone", ".", "load_state_dict", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "if", "self", ".", "is_cuda", "(", ")", ":", "\n", "            ", "clone", ".", "cuda", "(", ")", "\n", "", "return", "clone", "\n", "\n"]], "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.main": [[653, 766], ["argparse.ArgumentParser", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "random.seed", "src.preprocess.read_dataset", "random.choice", "vis.CsgoModel", "vis.CsgoModel.print_all_model_parameters", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.tensorboard.SummaryWriter", "data_tensor.append", "data_tensor.append", "torch.utils.tensorboard.SummaryWriter.add_graph", "len", "random.choice", "CsgoModel.cuda", "CsgoModel.parameters", "xt.append", "xo.append", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.derenlei_CS_Net.src.preprocess.read_dataset", "home.repos.pwc.inspect_result.derenlei_CS_Net.analysis.vis.CsgoModel.print_all_model_parameters"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Load args\n    \"\"\"", "\n", "# Parsing", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Train MAML on CSGO'", ")", "\n", "# params", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "default", "=", "'log/'", ",", "type", "=", "str", ",", "help", "=", "'Folder to store everything/load'", ")", "\n", "parser", ".", "add_argument", "(", "'--statedir'", ",", "default", "=", "'5shot'", ",", "type", "=", "str", ",", "help", "=", "'Folder name to store model state'", ")", "\n", "parser", ".", "add_argument", "(", "'--player_mode'", ",", "default", "=", "'terrorist'", ",", "type", "=", "str", ",", "help", "=", "'terrorist or counter_terrorist'", ")", "\n", "parser", ".", "add_argument", "(", "'--shots'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'shots per class (K-shot)'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_meta_iteration'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'start number of meta iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta_iterations'", ",", "default", "=", "120000", ",", "type", "=", "int", ",", "help", "=", "'number of meta iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta_lr'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'meta learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--validate_every'", ",", "default", "=", "30000", ",", "type", "=", "int", ",", "help", "=", "'validate every'", ")", "\n", "parser", ".", "add_argument", "(", "'--check_every'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "help", "=", "'Checkpoint every'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "'log/checkpoint'", ",", "help", "=", "'Path to checkpoint. This works only if starting fresh (i.e., no checkpoints in logdir)'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_embedding'", ",", "default", "=", "'/home/derenlei/MAML/data/action_embedding.npy'", ",", "help", "=", "'Path to action embedding.'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_name'", ",", "default", "=", "'/home/derenlei/MAML/data/action_name.npy'", ",", "help", "=", "'Path to action name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_money'", ",", "default", "=", "'/home/derenlei/MAML/data/action_money.npy'", ",", "help", "=", "'Path to action money.'", ")", "\n", "parser", ".", "add_argument", "(", "'--money_scaling'", ",", "default", "=", "1000", ",", "help", "=", "'Scaling factor between money features and actual money.'", ")", "\n", "parser", ".", "add_argument", "(", "'--side_mask'", ",", "default", "=", "'/home/derenlei/MAML/data/mask.npz'", ",", "help", "=", "'Path to mask of two sides.'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_capacity'", ",", "default", "=", "'/home/derenlei/MAML/data/action_capacity.npy'", ",", "help", "=", "'Path to action capacity.'", ")", "\n", "parser", ".", "add_argument", "(", "'--id2type'", ",", "default", "=", "'/home/derenlei/MAML/data/action_type.npy'", ",", "help", "=", "'Path to id2type.'", ")", "\n", "parser", ".", "add_argument", "(", "'--type_capacity'", ",", "default", "=", "'/home/derenlei/MAML/data/type_capacity.npy'", ",", "help", "=", "'Path to type capacity.'", ")", "\n", "parser", ".", "add_argument", "(", "'--typeid2name'", ",", "default", "=", "'/home/derenlei/MAML/data/type_name.npy'", ",", "help", "=", "'Path to typeid2name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--history_dim'", ",", "default", "=", "512", ",", "help", "=", "'LSTM hidden dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--history_num_layers'", ",", "default", "=", "2", ",", "help", "=", "'LSTM layer number.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ff_dim'", ",", "default", "=", "256", ",", "help", "=", "'MLP dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resource_dim'", ",", "default", "=", "2", ",", "help", "=", "'Resource (money, performance, ...) dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ff_dropout_rate'", ",", "default", "=", "0.1", ",", "help", "=", "'Dropout rate of MLP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_output_num'", ",", "default", "=", "10", ",", "help", "=", "'Maximum number of actions each round.'", ")", "\n", "parser", ".", "add_argument", "(", "'--beam_size'", ",", "default", "=", "128", ",", "help", "=", "'Beam size of beam search predicting.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "4164", ",", "help", "=", "'random seed.'", ")", "\n", "\n", "\n", "# args Processing", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "#run_dir = args.logdir", "\n", "check_dir", "=", "args", ".", "logdir", "+", "'checkpoint/'", "+", "args", ".", "statedir", "# os.path.join(run_dir, 'checkpoint')", "\n", "\n", "\"\"\"\n    Load data and construct model\n    \"\"\"", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "DATA_DIR", "=", "'./data/0-2999.npy'", "\n", "train_set", ",", "val_set", ",", "test_set", "=", "read_dataset", "(", "DATA_DIR", ")", "# TODO: implement DATA_DIR", "\n", "train_data_current", "=", "random", ".", "choice", "(", "train_set", ")", "\n", "while", "len", "(", "train_data_current", ")", "<=", "5", ":", "\n", "        ", "train_data_current", "=", "random", ".", "choice", "(", "train_set", ")", "\n", "", "data", ",", "labels", "=", "train_data_current", "[", "0", "]", "\n", "# build model, optimizer", "\n", "model", "=", "CsgoModel", "(", "args", ")", "# TODO: add args", "\n", "model", ".", "print_all_model_parameters", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "meta_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "meta_lr", ")", "# TODO: add args", "\n", "info", "=", "{", "}", "\n", "state", "=", "None", "\n", "\n", "\"\"\"\n    Meta learner loop\n    \"\"\"", "\n", "# Create tensorboard logger", "\n", "logger", "=", "SummaryWriter", "(", "'log/board/'", "+", "'graph'", ")", "\n", "'''data = ([1], [6], [2.35], [0.1], [0.0, 0.06666666666666667], [[[6], [2.05], [0.0]], [[6, 38], [2.15], [0.1]], [[6], [2.0], [0.0]], [[6], [2.05], [0.0]]], [[[4], [3.65], [0.0]], [[4], [3.9], [0.2]], [[6, 40], [3.95], [0.2]], [[4], [3.65], [0.0]], [[4, 35, 40], [4.5], [0.35]]])'''", "\n", "'''side, x_s, money_s, perf_s, score, x_t, x_o = data\n    xt = []\n    moneyt = []\n    perft = []\n    for p in x_t:\n        xp, mp, pp = p\n        xt.append(torch.tensor(xp).cuda())\n        moneyt.append(torch.tensor(mp).cuda())\n        perft.append(torch.tensor(pp).cuda())\n    xo = []\n    moneyo = []\n    perfo = []\n    for p in x_o:\n        xp, mp, pp = p\n        xo.append(torch.tensor(xp).cuda())\n        moneyo.append(torch.tensor(mp).cuda())\n        perfo.append(torch.tensor(pp).cuda())\n    \n    data_tensor = (torch.tensor(side).cuda(), torch.tensor(x_s).cuda(), torch.tensor(money_s).cuda(), torch.tensor(perf_s).cuda(), torch.tensor(score).cuda(), xt, moneyt, perft, xo, moneyo, perfo)'''", "\n", "\n", "\n", "side", ",", "x_s", ",", "money_s", ",", "perf_s", ",", "score", ",", "x_t", ",", "x_o", "=", "data", "\n", "data_tensor", "=", "[", "[", "[", "torch", ".", "tensor", "(", "side", ")", ".", "cuda", "(", ")", "]", "]", ",", "[", "[", "torch", ".", "tensor", "(", "x_s", ")", ".", "cuda", "(", ")", "]", "]", ",", "[", "[", "torch", ".", "tensor", "(", "money_s", ")", ".", "cuda", "(", ")", "]", "]", ",", "[", "[", "torch", ".", "tensor", "(", "perf_s", ")", ".", "cuda", "(", ")", "]", "]", ",", "[", "[", "torch", ".", "tensor", "(", "score", ")", ".", "cuda", "(", ")", "]", "]", "]", "\n", "xt", "=", "[", "]", "\n", "for", "p", "in", "x_t", ":", "\n", "        ", "xp", ",", "mp", ",", "pp", "=", "p", "\n", "xt", ".", "append", "(", "[", "torch", ".", "tensor", "(", "xp", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "mp", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "pp", ")", ".", "cuda", "(", ")", "]", ")", "\n", "", "data_tensor", ".", "append", "(", "xt", ")", "\n", "xo", "=", "[", "]", "\n", "for", "p", "in", "x_o", ":", "\n", "        ", "xp", ",", "mp", ",", "pp", "=", "p", "\n", "xo", ".", "append", "(", "[", "torch", ".", "tensor", "(", "xp", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "mp", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "pp", ")", ".", "cuda", "(", ")", "]", ")", "\n", "", "data_tensor", ".", "append", "(", "xo", ")", "\n", "'''for d in data:\n        print(d)\n        if isinstance(d, list):\n            rett = []\n            for dd in d:\n                print(dd)\n                rett.append(torch.tensor(dd).cuda())\n            data_tensor.append(rett)\n            continue\n        data_tensor.append(torch.tensor(d).cuda())'''", "\n", "logger", ".", "add_graph", "(", "model", ",", "[", "data_tensor", "]", ")", "\n", "\n"]]}