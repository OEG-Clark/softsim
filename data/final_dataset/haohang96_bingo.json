{"home.repos.pwc.inspect_result.haohang96_bingo.None.clustering.concat_all_gather": [[18, 30], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.clustering.compute_feat": [[32, 80], ["model.eval", "enumerate", "print", "model.train", "numpy.zeros().astype", "numpy.zeros().astype", "images.cuda.cuda", "index.cpu().numpy.cuda", "clustering.concat_all_gather", "nn.functional.normalize.cpu().numpy", "clustering.concat_all_gather", "index.cpu().numpy.cpu().numpy", "numpy.unique", "torch.no_grad", "torch.no_grad", "model", "torch.functional.normalize", "print", "numpy.zeros", "numpy.zeros", "nn.functional.normalize.cpu", "index.cpu().numpy.cpu", "len", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.train", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.concat_all_gather", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.concat_all_gather"], ["", "def", "compute_feat", "(", "model", ",", "loader", ",", "gpu_rank", ")", ":", "\n", "    ", "num_feat", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "if", "FLAGS", ".", "rank", "==", "0", ":", "\n", "        ", "all_feats", "=", "np", ".", "zeros", "(", "[", "FLAGS", ".", "dataset_len", "+", "1000", ",", "4096", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_index", "=", "np", ".", "zeros", "(", "[", "FLAGS", ".", "dataset_len", "+", "1000", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "", "for", "i", ",", "(", "images", ",", "target", ",", "index", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "images", "=", "images", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "index", "=", "index", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "k", "=", "model", "(", "images", ",", "pre_out", "=", "True", ")", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "", "k", "=", "concat_all_gather", "(", "k", ")", "\n", "k", "=", "k", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "index", "=", "concat_all_gather", "(", "index", ")", "\n", "index", "=", "index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "i", "<", "len", "(", "loader", ")", "-", "1", ":", "\n", "            ", "bsz", "=", "k", ".", "shape", "[", "0", "]", "\n", "if", "FLAGS", ".", "rank", "==", "0", ":", "\n", "                ", "all_feats", "[", "i", "*", "bsz", ":", "(", "i", "+", "1", ")", "*", "bsz", "]", "=", "k", "\n", "all_index", "[", "i", "*", "bsz", ":", "(", "i", "+", "1", ")", "*", "bsz", "]", "=", "index", "\n", "num_feat", "+=", "bsz", "\n", "", "", "else", ":", "\n", "            ", "if", "FLAGS", ".", "rank", "==", "0", ":", "\n", "                ", "all_feats", "[", "i", "*", "bsz", ":", "i", "*", "bsz", "+", "k", ".", "shape", "[", "0", "]", "]", "=", "k", "\n", "all_index", "[", "i", "*", "bsz", ":", "i", "*", "bsz", "+", "k", ".", "shape", "[", "0", "]", "]", "=", "index", "\n", "num_feat", "+=", "k", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "if", "i", "%", "200", "==", "0", ":", "\n", "            ", "print", "(", "'%d | %d'", "%", "(", "i", ",", "len", "(", "loader", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'num_feat: '", ",", "num_feat", ")", "\n", "model", ".", "train", "(", ")", "\n", "if", "FLAGS", ".", "rank", "==", "0", ":", "\n", "        ", "all_feats", "=", "all_feats", "[", ":", "num_feat", "]", "\n", "all_index", "=", "all_index", "[", ":", "num_feat", "]", "\n", "\n", "sorted_index", ",", "sort_id", "=", "np", ".", "unique", "(", "all_index", ",", "return_index", "=", "True", ")", "\n", "sorted_feats", "=", "all_feats", "[", "sort_id", "]", "\n", "assert", "(", "all_index", "[", "sort_id", "]", "==", "np", ".", "arange", "(", "0", ",", "FLAGS", ".", "dataset_len", ")", ")", ".", "all", "(", ")", "\n", "\n", "return", "sorted_feats", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.clustering.knn": [[82, 97], ["faiss.IndexFlatL2", "faiss.index_cpu_to_all_gpus", "faiss.index_cpu_to_all_gpus.add", "faiss.index_cpu_to_all_gpus.search", "range", "numpy.array", "easydict.EasyDict", "range", "range", "imgs_corr[].append"], "function", ["None"], ["", "", "def", "knn", "(", "feat", ")", ":", "\n", "    ", "d", "=", "feat", ".", "shape", "[", "1", "]", "\n", "cpu_index", "=", "faiss", ".", "IndexFlatL2", "(", "d", ")", "\n", "index", "=", "faiss", ".", "index_cpu_to_all_gpus", "(", "cpu_index", ")", "\n", "# index = cpu_index # only for debug", "\n", "index", ".", "add", "(", "feat", ")", "\n", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "feat", ",", "FLAGS", ".", "clus_pos_num", "+", "1", ")", "# self-image is include in I[:,0]", "\n", "imgs_corr", "=", "[", "[", "]", "for", "i", "in", "range", "(", "FLAGS", ".", "dataset_len", ")", "]", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "dataset_len", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "FLAGS", ".", "clus_pos_num", ")", ":", "\n", "            ", "imgs_corr", "[", "i", "]", ".", "append", "(", "I", "[", "i", ",", "j", "+", "1", "]", ")", "\n", "\n", "", "", "imgs_corr", "=", "np", ".", "array", "(", "imgs_corr", ")", "# 1281167*FLAGS.clus_pos_num ndarray", "\n", "return", "EasyDict", "(", "imgs_corr", "=", "imgs_corr", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.adjust_learning_rate_pro": [[90, 104], ["log.logger.info", "math.cos"], "function", ["None"], ["def", "adjust_learning_rate_pro", "(", "optimizer", ",", "epoch", ",", "log", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on pycontrast way, used with lr_warmup\"\"\"", "\n", "lr", "=", "FLAGS", ".", "init_lr", "\n", "final_lr", "=", "FLAGS", ".", "min_lr", "\n", "# need sub FLAGS.warmup when use cos sche", "\n", "period", "=", "FLAGS", ".", "end_epoch", "\n", "step", "=", "epoch", "\n", "\n", "lr", "=", "final_lr", "+", "(", "lr", "-", "final_lr", ")", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "step", "/", "period", ")", ")", "/", "2", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "log", ".", "logger", ".", "info", "(", "'==> Setting model optimizer lr = %.6f'", "%", "(", "lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.main": [[105, 132], ["os.path.join", "os.path.join", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.exists", "FLAGS.append_flags_into_file", "torch.spawn", "os.remove"], "function", ["None"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "if", "FLAGS", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "FLAGS", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "FLAGS", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "# Prepare Workspace Folder #", "\n", "", "FLAGS", ".", "unsupervised_folder", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'unsupervised'", ",", "'lr-%s_batch-%s'", "\n", "%", "(", "FLAGS", ".", "usupv_lr", ",", "FLAGS", ".", "usupv_batch", ")", ")", "\n", "FLAGS", ".", "train_url", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'classification'", ",", "'lr-%s_batch-%s'", "\n", "%", "(", "FLAGS", ".", "init_lr", ",", "FLAGS", ".", "batch_size", ")", ")", "\n", "############################", "\n", "if", "FLAGS", ".", "dist", ":", "\n", "\n", "        ", "FLAGS", ".", "ngpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "FLAGS", ".", "world_size", "=", "FLAGS", ".", "ngpu", "*", "FLAGS", ".", "nodes_num", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "FLAGS", ".", "master_addr", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "FLAGS", ".", "master_port", "\n", "if", "os", ".", "path", ".", "exists", "(", "'tmp.cfg'", ")", ":", "\n", "            ", "os", ".", "remove", "(", "'tmp.cfg'", ")", "\n", "", "FLAGS", ".", "append_flags_into_file", "(", "'tmp.cfg'", ")", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "FLAGS", ".", "ngpu", ",", "args", "=", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.main_worker": [[140, 312], ["FLAGS._parse_args", "FLAGS.mark_as_parsed", "isinstance", "isinstance", "Log", "Log.logger.info", "Log.logger.info", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "Log.logger.info", "classifiers.mul_classifier.MulClassifier", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "EfficientNet.from_name.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Log.logger.info", "Log.logger.info", "list", "EfficientNet.from_name.load_state_dict", "print", "range", "FLAGS.read_flags_from_files", "range", "range", "torchvision.Compose", "torchvision.ImageFolder", "arch.efficientnet_pytorch.model_cls.EfficientNet.from_name", "torch.nn.parallel.DistributedDataParallel.parameters", "pretrained_state_dict.keys", "set", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.optim.SGD.load_state_dict", "Log.logger.info", "main_lincls.validate", "torch.utils.data.distributed.DistributedSampler.set_epoch", "main_lincls.train", "main_lincls.validate", "max", "save_ckpt", "len", "int", "len", "int", "torchvision.Compose", "torch.CrossEntropyLoss", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "k.startswith", "os.path.join", "adjust_learning_rate", "main_lincls.adjust_learning_rate_pro", "main_lincls.sanity_check", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "k.startswith", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "EfficientNet.from_name.state_dict", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "k.replace"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.from_name", "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.validate", "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.train", "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.validate", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.save_ckpt", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.adjust_learning_rate_pro", "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.sanity_check"], ["", "", "def", "main_worker", "(", "gpu_rank", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "# Prepare FLAGS #", "\n", "FLAGS", ".", "_parse_args", "(", "FLAGS", ".", "read_flags_from_files", "(", "[", "'--flagfile=./tmp.cfg'", "]", ")", ",", "True", ")", "\n", "FLAGS", ".", "mark_as_parsed", "(", ")", "\n", "FLAGS", ".", "rank", "=", "FLAGS", ".", "node_rank", "*", "FLAGS", ".", "ngpu", "+", "gpu_rank", "# rank among FLAGS.world_size", "\n", "FLAGS", ".", "batch_size", "=", "FLAGS", ".", "batch_size", "//", "FLAGS", ".", "world_size", "\n", "FLAGS", ".", "num_workers", "=", "FLAGS", ".", "num_workers", "//", "FLAGS", ".", "ngpu", "\n", "# filter string list in flags to target format(int)", "\n", "tmp", "=", "FLAGS", ".", "schedule", "\n", "if", "isinstance", "(", "tmp", "[", "0", "]", ",", "str", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "            ", "tmp", "[", "i", "]", "=", "int", "(", "tmp", "[", "i", "]", ")", "\n", "", "", "FLAGS", ".", "schedule", "=", "tmp", "\n", "tmp", "=", "FLAGS", ".", "selected_feat_id", "\n", "if", "isinstance", "(", "tmp", "[", "0", "]", ",", "str", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "            ", "tmp", "[", "i", "]", "=", "int", "(", "tmp", "[", "i", "]", ")", "\n", "", "", "FLAGS", ".", "selected_feat_id", "=", "tmp", "\n", "\n", "from", "utils", "import", "Log", ",", "AverageMeter", ",", "ProgressMeter", ",", "accuracy", ",", "save_ckpt", ",", "adjust_learning_rate", "\n", "############################", "\n", "# Set Log File #", "\n", "log", "=", "Log", "(", "FLAGS", ".", "train_url", ")", "\n", "\n", "############################", "\n", "# Initial Log content #", "\n", "log", ".", "logger", ".", "info", "(", "'Selected feat for lincls: %s'", "%", "(", "FLAGS", ".", "selected_feat_id", ")", ")", "\n", "log", ".", "logger", ".", "info", "(", "'Initialize optimizer: {\\'decay_method: %s, batch_size(per GPU):%-4d, init_lr: %-.3f, momentum: %-.3f, weight_decay: %-.5f, lr_sche: %s, total_epoch: %-3d, num_workers(per GPU): %d, world_size: %d, rank:%d\\'}'", "\n", "%", "(", "FLAGS", ".", "decay_method", ",", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "init_lr", ",", "FLAGS", ".", "momentum", ",", "FLAGS", ".", "wd", ",", "FLAGS", ".", "schedule", ",", "FLAGS", ".", "end_epoch", ",", "FLAGS", ".", "num_workers", ",", "FLAGS", ".", "world_size", ",", "FLAGS", ".", "rank", ")", ")", "\n", "############################", "\n", "\n", "\n", "# suppress printing if not master", "\n", "if", "gpu_rank", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "\n", "# Create DataLoader #", "\n", "", "traindir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "data_dir", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "data_dir", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "num_replicas", "=", "FLAGS", ".", "world_size", ",", "rank", "=", "FLAGS", ".", "rank", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "FLAGS", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "FLAGS", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "nbatch_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "############################", "\n", "\n", "\n", "# Create Model #  ", "\n", "from", "classifiers", ".", "cls_opt", "import", "net_opt_cls", "\n", "log", ".", "logger", ".", "info", "(", "'Selected feat info: %s'", "%", "(", "net_opt_cls", ")", ")", "\n", "if", "'eff'", "in", "FLAGS", ".", "arch", ":", "\n", "        ", "model", "=", "EfficientNet", ".", "from_name", "(", "FLAGS", ".", "arch", ",", "num_classes", "=", "1000", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "resnet_cls", ".", "__dict__", "[", "FLAGS", ".", "arch", "]", "(", ")", "\n", "", "net_opt_cls", "[", "-", "1", "]", "[", "'nchannels'", "]", "=", "FLAGS", ".", "nchannels", "\n", "net", "=", "Classifier", "(", "net_opt_cls", ")", "\n", "# log.logger.info(model)", "\n", "# log.logger.info(net)", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ",", "\n", "world_size", "=", "FLAGS", ".", "world_size", ",", "\n", "rank", "=", "FLAGS", ".", "rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_rank", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "gpu_rank", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "net", ",", "device_ids", "=", "[", "gpu_rank", "]", ")", "\n", "############################", "\n", "# Create Optimizer #", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "gpu_rank", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "FLAGS", ".", "init_lr", ",", "\n", "momentum", "=", "FLAGS", ".", "momentum", ",", "\n", "weight_decay", "=", "FLAGS", ".", "wd", ")", "\n", "############################", "\n", "# Load Unsupervised Pretrained ckpt #", "\n", "pretrained_ckpt_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "unsupervised_folder", ",", "\n", "'ckpt_%d.pth.tar'", "%", "(", "FLAGS", ".", "pretrained_epoch", ")", ")", "\n", "pretrained_ckpt", "=", "torch", ".", "load", "(", "pretrained_ckpt_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "log", ".", "logger", ".", "info", "(", "\"Load unsupervised pretrained ckpt '{}'\"", ".", "format", "(", "pretrained_ckpt_path", ")", ")", "\n", "log", ".", "logger", ".", "info", "(", "'Load unsupervised pretrained ckpt from %3d'", "%", "(", "pretrained_ckpt", "[", "'epoch'", "]", "-", "1", ")", ")", "\n", "# rename moco pre-trained keys", "\n", "pretrained_state_dict", "=", "pretrained_ckpt", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "pretrained_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "# pretrained_state_dict[k[len(\"module.encoder_q.\"):]] = pretrained_state_dict[k]", "\n", "            ", "pretrained_state_dict", "[", "k", ".", "replace", "(", "'encoder_q.'", ",", "''", ")", "]", "=", "pretrained_state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "pretrained_state_dict", "[", "k", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Missing Keys when load unsupervised pretrained model'", ",", "\n", "msg", ".", "missing_keys", ")", "\n", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\"module.fc.weight\"", ",", "\"module.fc.bias\"", "}", "\n", "############################", "\n", "# Resume Checkpoints #", "\n", "start_epoch", "=", "0", "\n", "if", "FLAGS", ".", "resume", ":", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt.pth.tar'", ")", "\n", "if", "FLAGS", ".", "resume_epoch", "is", "not", "None", ":", "\n", "            ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt_%s.pth.tar'", "%", "(", "FLAGS", ".", "resume_epoch", ")", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "log", ".", "logger", ".", "info", "(", "'==> Load ckpt from epoch %3d'", "%", "(", "start_epoch", "-", "1", ")", ")", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "if", "FLAGS", ".", "evaluate", ":", "\n", "        ", "assert", "FLAGS", ".", "resume", "is", "True", "\n", "validate", "(", "val_loader", ",", "model", ",", "net", ",", "criterion", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "FLAGS", ".", "end_epoch", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "if", "FLAGS", ".", "decay_method", "==", "'step'", ":", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "log", ")", "\n", "", "if", "FLAGS", ".", "decay_method", "==", "'cos'", ":", "\n", "            ", "adjust_learning_rate_pro", "(", "optimizer", ",", "epoch", ",", "log", ")", "\n", "\n", "# train for one epoch", "\n", "", "train", "(", "train_loader", ",", "model", ",", "net", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "gpu_rank", ",", "log", ")", "\n", "\n", "# evaluate on validation set", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "net", ",", "criterion", ",", "gpu_rank", ",", "log", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "save_ckpt", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "epoch", ",", "FLAGS", ".", "save_freq", ",", "is_best", ")", "\n", "if", "epoch", "==", "start_epoch", ":", "\n", "            ", "sanity_check", "(", "model", ".", "state_dict", "(", ")", ",", "pretrained_ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.train": [[314, 357], ["model.eval", "net.train", "AverageMeter", "range", "len", "enumerate", "log.logger.info", "len", "acc.append", "images.cuda.cuda", "target.cuda.cuda", "net", "range", "range", "AverageMeter.update", "optimizer.zero_grad", "loss_total.backward", "optimizer.step", "AverageMeter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "len", "criterion", "prec.append", "len", "acc[].update", "loss_total.item", "images.cuda.size", "log.logger.info", "accuracy", "[].item", "images.cuda.size", "range", "[].item", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.train", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.accuracy"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "net", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "gpu_rank", ",", "log", ")", ":", "\n", "    ", "from", "utils", "import", "Log", ",", "AverageMeter", ",", "ProgressMeter", ",", "accuracy", ",", "save_ckpt", ",", "adjust_learning_rate", "\n", "model", ".", "eval", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "acc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "FLAGS", ".", "selected_feat_id", ")", ")", ":", "\n", "        ", "acc", ".", "append", "(", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", ")", "\n", "", "nbatch_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "\n", "\n", "for", "batch_idx", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "images", "=", "images", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "images", ")", "\n", "", "outputs", "=", "net", "(", "outputs", ")", "\n", "loss_total", "=", "None", "\n", "prec", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "            ", "loss_this", "=", "criterion", "(", "outputs", "[", "i", "]", ",", "target", ")", "\n", "loss_total", "=", "loss_this", "if", "(", "loss_total", "is", "None", ")", "else", "(", "loss_total", "+", "loss_this", ")", "\n", "prec", ".", "append", "(", "accuracy", "(", "outputs", "[", "i", "]", ".", "data", ",", "target", ".", "data", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "            ", "acc", "[", "i", "]", ".", "update", "(", "prec", "[", "i", "]", "[", "0", "]", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss_total", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_total", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "FLAGS", ".", "report_freq", "==", "0", ":", "\n", "            ", "log", ".", "logger", ".", "info", "(", "'==> Iter[%3d][%4d/%4d] loss : %2.5f Acc : %s'", "%", "\n", "(", "epoch", ",", "batch_idx", ",", "nbatch_per_epoch", ",", "loss_total", ",", "[", "prec", "[", "i", "]", "[", "0", "]", ".", "item", "(", ")", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", "]", ")", ")", "\n", "\n", "", "", "log", ".", "logger", ".", "info", "(", "'==> Training stats: Iter[%3d] loss : %2.5f Acc : %s'", "%", "\n", "(", "epoch", ",", "losses", ".", "avg", ",", "[", "acc", "[", "i", "]", ".", "avg", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.validate": [[361, 401], ["model.eval", "net.eval", "AverageMeter", "range", "log.logger.info", "numpy.array", "numpy.max", "len", "acc.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "AverageMeter", "images.cuda.cuda", "target.cuda.cuda", "model", "net", "range", "range", "AverageMeter.update", "len", "criterion", "prec.append", "len", "acc[].update", "loss_total.item", "images.cuda.size", "range", "accuracy", "[].item", "images.cuda.size", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.accuracy"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "net", ",", "criterion", ",", "gpu_rank", ",", "log", ")", ":", "\n", "    ", "from", "utils", "import", "Log", ",", "AverageMeter", ",", "ProgressMeter", ",", "accuracy", ",", "save_ckpt", ",", "adjust_learning_rate", "\n", "model", ".", "eval", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "acc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "FLAGS", ".", "selected_feat_id", ")", ")", ":", "\n", "        ", "acc", ".", "append", "(", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", ")", "\n", "\n", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "images", ")", "\n", "outputs", "=", "net", "(", "outputs", ")", "\n", "\n", "loss_total", "=", "None", "\n", "prec", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "                ", "loss_this", "=", "criterion", "(", "outputs", "[", "i", "]", ",", "target", ")", "\n", "loss_total", "=", "loss_this", "if", "(", "loss_total", "is", "None", ")", "else", "(", "loss_total", "+", "loss_this", ")", "\n", "prec", ".", "append", "(", "accuracy", "(", "outputs", "[", "i", "]", ".", "data", ",", "target", ".", "data", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "                ", "acc", "[", "i", "]", ".", "update", "(", "prec", "[", "i", "]", "[", "0", "]", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss_total", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "log", ".", "logger", ".", "info", "(", "'== Evaluating stats : loss = %3.5f Acc = %s'", "\n", "%", "(", "losses", ".", "avg", ",", "[", "acc", "[", "i", "]", ".", "avg", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", "]", ")", ")", "\n", "\n", "\n", "np_acc", "=", "np", ".", "array", "(", "[", "acc", "[", "i", "]", ".", "avg", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", "]", ")", "\n", "\n", "# return max acc among all classifiers", "\n", "return", "np", ".", "max", "(", "np_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.sanity_check": [[403, 425], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "list", "print", "state_dict.keys", "k.startswith", "state_dict[].cpu", "len"], "function", ["None"], ["", "def", "sanity_check", "(", "state_dict", ",", "pretrained_weights", ")", ":", "\n", "    ", "\"\"\"\n    Linear classifier should not change any weights other than the linear layer.\n    This sanity check asserts nothing wrong happens (e.g., BN stats updated).\n    \"\"\"", "\n", "print", "(", "\"=> loading '{}' for sanity check\"", ".", "format", "(", "pretrained_weights", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pretrained_weights", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict_pre", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# only ignore fc layer", "\n", "        ", "if", "'fc.weight'", "in", "k", "or", "'fc.bias'", "in", "k", ":", "\n", "            ", "continue", "\n", "\n", "# name in pretrained model", "\n", "", "k_pre", "=", "'module.encoder_q.'", "+", "k", "[", "len", "(", "'module.'", ")", ":", "]", "if", "k", ".", "startswith", "(", "'module.'", ")", "else", "'module.encoder_q.'", "+", "k", "\n", "\n", "assert", "(", "(", "state_dict", "[", "k", "]", ".", "cpu", "(", ")", "==", "state_dict_pre", "[", "k_pre", "]", ")", ".", "all", "(", ")", ")", ",", "'{} is changed in linear classifier training.'", ".", "format", "(", "k", ")", "\n", "\n", "", "print", "(", "\"=> sanity check passed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.compute_knn.main": [[56, 68], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.exists", "FLAGS.append_flags_into_file", "torch.spawn", "os.remove"], "function", ["None"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "############################", "\n", "\n", "FLAGS", ".", "ngpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "FLAGS", ".", "world_size", "=", "FLAGS", ".", "ngpu", "*", "FLAGS", ".", "nodes_num", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "FLAGS", ".", "master_addr", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "FLAGS", ".", "master_port", "\n", "if", "os", ".", "path", ".", "exists", "(", "'tmp.cfg'", ")", ":", "\n", "        ", "os", ".", "remove", "(", "'tmp.cfg'", ")", "\n", "", "FLAGS", ".", "append_flags_into_file", "(", "'tmp.cfg'", ")", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "FLAGS", ".", "ngpu", ",", "args", "=", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.compute_knn.main_worker": [[72, 149], ["FLAGS._parse_args", "FLAGS.mark_as_parsed", "os.path.join", "torchvision.Normalize", "moco.cluster_folder.ImageFolder", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "print", "clustering.compute_feat", "torch.barrier", "FLAGS.read_flags_from_files", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Compose", "clustering.knn", "numpy.save"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.None.clustering.compute_feat", "home.repos.pwc.inspect_result.haohang96_bingo.None.clustering.knn"], ["", "def", "main_worker", "(", "gpu_rank", ")", ":", "\n", "# Prepare FLAGS #", "\n", "    ", "FLAGS", ".", "_parse_args", "(", "FLAGS", ".", "read_flags_from_files", "(", "[", "'--flagfile=./tmp.cfg'", "]", ")", ",", "True", ")", "\n", "FLAGS", ".", "mark_as_parsed", "(", ")", "\n", "FLAGS", ".", "rank", "=", "FLAGS", ".", "node_rank", "*", "FLAGS", ".", "ngpu", "+", "gpu_rank", "# rank among FLAGS.world_size", "\n", "############################", "\n", "if", "gpu_rank", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "# Create DataLoader #", "\n", "", "traindir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "data_dir", ",", "'train'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "\n", "cluster_augmentation", "=", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", "\n", "cluster_dataset", "=", "cluster_folder", ".", "ImageFolder", "(", "traindir", ",", "transforms", ".", "Compose", "(", "cluster_augmentation", ")", ")", "\n", "cluster_train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "cluster_dataset", ",", "num_replicas", "=", "FLAGS", ".", "world_size", ",", "shuffle", "=", "False", ",", "rank", "=", "FLAGS", ".", "rank", ")", "\n", "cluster_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "cluster_dataset", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "sampler", "=", "cluster_train_sampler", ",", "drop_last", "=", "False", ")", "\n", "FLAGS", ".", "dataset_len", "=", "len", "(", "cluster_dataset", ")", "\n", "\n", "############################", "\n", "# Create Model #", "\n", "model", "=", "arch", ".", "__dict__", "[", "FLAGS", ".", "arch", "]", "(", ")", "\n", "# log.logger.info(model)", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ",", "\n", "world_size", "=", "FLAGS", ".", "world_size", ",", "\n", "rank", "=", "FLAGS", ".", "rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_rank", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "gpu_rank", "]", ")", "\n", "############################", "\n", "# Resume Checkpoints #", "\n", "start_epoch", "=", "0", "\n", "ckpt_path", "=", "FLAGS", ".", "ckpt_name", "\n", "loc", "=", "'cuda:{}'", ".", "format", "(", "gpu_rank", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "loc", ")", "\n", "# Rename pre-trained model keys ", "\n", "# 1. MoCo style pretrained ckpt", "\n", "'''\n    pretrained_state_dict = checkpoint['state_dict']\n    for k in list(pretrained_state_dict.keys()):\n        if k.startswith('module.encoder_q') and not k.startswith('module.encoder_q.fc'):\n            new_k = k.replace('encoder_q.', '')\n            pretrained_state_dict[new_k] = pretrained_state_dict[k]\n        del pretrained_state_dict[k]\n    '''", "\n", "# 2. Swav style pretrained ckpt", "\n", "pretrained_state_dict", "=", "checkpoint", "\n", "###################################", "\n", "\n", "\n", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "############################", "\n", "# Start KNN Process #", "\n", "feats", "=", "compute_feat", "(", "model", ",", "cluster_loader", ",", "gpu_rank", ")", "\n", "if", "FLAGS", ".", "rank", "==", "0", ":", "\n", "        ", "clus_out", "=", "knn", "(", "feats", ")", "\n", "np", ".", "save", "(", "'./imgs_corr/%s'", "%", "(", "FLAGS", ".", "corr_name", ")", ",", "clus_out", ".", "imgs_corr", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_moco.MulposCrossEntropy.__init__": [[107, 110], ["torch.Module.__init__", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MulposCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_moco.MulposCrossEntropy.forward": [[111, 127], ["inputs.size", "range", "range", "losses.append", "main_moco.MulposCrossEntropy.ce"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "lam", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: bs*2*(1+65536)\n            targets: bs\n        \"\"\"", "\n", "num_loss", "=", "inputs", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_loss", ")", ":", "\n", "            ", "losses", ".", "append", "(", "self", ".", "ce", "(", "inputs", "[", ":", ",", "i", "]", ",", "targets", ")", ")", "\n", "\n", "", "total_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "num_loss", ")", ":", "\n", "            ", "total_loss", "+=", "lam", "[", "i", "]", "*", "losses", "[", "i", "]", "\n", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_moco.main": [[128, 157], ["os.path.join", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.exists", "FLAGS.append_flags_into_file", "torch.spawn", "moco.builder.MoCo", "moco.builder.MoCo", "os.remove"], "function", ["None"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "if", "FLAGS", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "FLAGS", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "FLAGS", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "# Prepare Workspace Folder #", "\n", "", "FLAGS", ".", "train_url", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'unsupervised'", ",", "'lr-%s_batch-%s'", "\n", "%", "(", "FLAGS", ".", "init_lr", ",", "FLAGS", ".", "batch_size", ")", ")", "\n", "############################", "\n", "if", "FLAGS", ".", "dist", ":", "\n", "        ", "FLAGS", ".", "ngpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "FLAGS", ".", "world_size", "=", "FLAGS", ".", "ngpu", "*", "FLAGS", ".", "nodes_num", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "FLAGS", ".", "master_addr", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "FLAGS", ".", "master_port", "\n", "if", "os", ".", "path", ".", "exists", "(", "'tmp.cfg'", ")", ":", "\n", "            ", "os", ".", "remove", "(", "'tmp.cfg'", ")", "\n", "", "FLAGS", ".", "append_flags_into_file", "(", "'tmp.cfg'", ")", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "FLAGS", ".", "ngpu", ",", "args", "=", "(", ")", ")", "\n", "\n", "", "else", ":", "# single-gpu mode for debug", "\n", "        ", "model", "=", "moco", ".", "builder", ".", "MoCo", "(", "\n", "resnet50", ",", "\n", "FLAGS", ".", "moco_dim", ",", "FLAGS", ".", "moco_k", ",", "FLAGS", ".", "moco_m", ",", "FLAGS", ".", "moco_t", ",", "FLAGS", ".", "mlp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.main_moco.main_worker": [[160, 412], ["FLAGS._parse_args", "FLAGS.mark_as_parsed", "isinstance", "isinstance", "Log", "Log.logger.info", "Log.logger.info", "Log.logger.info", "os.path.join", "torchvision.Normalize", "moco.folder.ImageFolder", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "moco.builder.MoCo", "moco.builder.MoCo", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "range", "MulposCrossEntropy().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "numpy.load", "torch.barrier", "folder.ImageFolder.set_imgs_corr", "torch.optim.SGD.zero_grad", "range", "FLAGS.read_flags_from_files", "range", "range", "torchvision.Compose", "range", "torch.nn.parallel.DistributedDataParallel.parameters", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.optim.SGD.load_state_dict", "Log.logger.info", "list", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "print", "list", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "print", "Log.logger.info", "torch.utils.data.distributed.DistributedSampler.set_epoch", "adjust_learning_rate", "AverageMeter", "AverageMeter", "AverageMeter", "ProgressMeter", "enumerate", "Log.logger.info", "save_ckpt", "len", "int", "len", "float", "torchvision.RandomResizedCrop", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomApply", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomGrayscale", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "range", "main_moco.MulposCrossEntropy", "os.path.join", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "pretrained_state_dict.keys", "k.startswith", "pretrained_state_dict.keys", "len", "key.cuda.size", "query.cuda.cuda", "key.cuda.cuda", "add_posq.cuda.cuda", "add_posk.cuda.cuda", "cutmix", "torch.nn.parallel.DistributedDataParallel.", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "MulposCrossEntropy().cuda.", "accuracy", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "torch.optim.SGD.zero_grad", "torch.tensor().cuda.backward", "torch.optim.SGD.step", "ranks.append", "torch.new_group", "print", "groups.append", "new_k.replace.replace", "print", "query.cuda.clone", "add_posq.cuda.clone", "len", "numpy.zeros", "range", "MulposCrossEntropy().cuda.", "torch.tensor().cuda.item", "ProgressMeter.display", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "torchvision.ColorJitter", "moco.loader.GaussianBlur", "moco.loader.GaussianBlur", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "k.replace"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.ImageFolder.set_imgs_corr", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.save_ckpt", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.cutmix", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.accuracy", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.ProgressMeter.display"], ["", "", "def", "main_worker", "(", "gpu_rank", ")", ":", "\n", "# Prepare FLAGS #", "\n", "    ", "FLAGS", ".", "_parse_args", "(", "FLAGS", ".", "read_flags_from_files", "(", "[", "'--flagfile=./tmp.cfg'", "]", ")", ",", "True", ")", "\n", "FLAGS", ".", "mark_as_parsed", "(", ")", "\n", "FLAGS", ".", "rank", "=", "FLAGS", ".", "node_rank", "*", "FLAGS", ".", "ngpu", "+", "gpu_rank", "# rank among FLAGS.world_size", "\n", "FLAGS", ".", "batch_size", "=", "FLAGS", ".", "batch_size", "//", "FLAGS", ".", "world_size", "\n", "FLAGS", ".", "num_workers", "=", "FLAGS", ".", "num_workers", "//", "FLAGS", ".", "ngpu", "\n", "assert", "FLAGS", ".", "subgroup", "==", "FLAGS", ".", "ngpu", "# before FLAGS.subgroup < FLAGS.ngpu is tested, not use such setting", "\n", "# filter string list in flags to target format(int)", "\n", "tmp", "=", "FLAGS", ".", "schedule", "\n", "if", "isinstance", "(", "tmp", "[", "0", "]", ",", "str", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "            ", "tmp", "[", "i", "]", "=", "int", "(", "tmp", "[", "i", "]", ")", "\n", "", "", "FLAGS", ".", "schedule", "=", "tmp", "\n", "tmp", "=", "FLAGS", ".", "lam", "\n", "if", "isinstance", "(", "tmp", "[", "0", "]", ",", "str", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "            ", "tmp", "[", "i", "]", "=", "float", "(", "tmp", "[", "i", "]", ")", "\n", "", "", "FLAGS", ".", "lam", "=", "tmp", "\n", "\n", "from", "utils", "import", "Log", ",", "AverageMeter", ",", "ProgressMeter", ",", "accuracy", ",", "save_ckpt", ",", "adjust_learning_rate", ",", "cutmix", "\n", "############################", "\n", "# Set Log File #", "\n", "log", "=", "Log", "(", "FLAGS", ".", "train_url", ")", "\n", "\n", "############################", "\n", "# Initial Log content #", "\n", "log", ".", "logger", ".", "info", "(", "'Moco specific configs: {\\'moco_dim: %-5d, moco_k: %-5d, moco_m: %-.5f, moco_t: %-.5f\\'}'", "\n", "%", "(", "FLAGS", ".", "moco_dim", ",", "FLAGS", ".", "moco_k", ",", "FLAGS", ".", "moco_m", ",", "FLAGS", ".", "moco_t", ")", ")", "\n", "log", ".", "logger", ".", "info", "(", "'Projection head: %s (True means mocov2, False means mocov1)'", "\n", "%", "(", "FLAGS", ".", "mlp", ")", ")", "\n", "log", ".", "logger", ".", "info", "(", "'Initialize optimizer: {\\'decay_method: %s, batch_size(per GPU): %-4d, init_lr: %-.3f, momentum: %-.3f, weight_decay: %-.5f, lr_sche: %s, total_epoch: %-3d, num_workers(per GPU): %d, world_size: %d, rank: %d\\'}'", "\n", "%", "(", "FLAGS", ".", "decay_method", ",", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "init_lr", ",", "FLAGS", ".", "momentum", ",", "FLAGS", ".", "wd", ",", "FLAGS", ".", "schedule", ",", "FLAGS", ".", "end_epoch", ",", "FLAGS", ".", "num_workers", ",", "FLAGS", ".", "world_size", ",", "FLAGS", ".", "rank", ")", ")", "\n", "############################", "\n", "# suppress printing if not master", "\n", "if", "gpu_rank", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "# Create DataLoader #", "\n", "", "traindir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "data_dir", ",", "'train'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "FLAGS", ".", "aug_plus", ":", "\n", "# MoCo v2's aug: similar to SimCLR https://arxiv.org/abs/2002.05709", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "moco", ".", "loader", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", "\n", "", "else", ":", "\n", "# MoCo v1's aug: the same as InstDisc https://arxiv.org/abs/1805.01978", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", "\n", "\n", "", "train_dataset", "=", "folder", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "augmentation", ")", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "num_replicas", "=", "FLAGS", ".", "world_size", ",", "rank", "=", "FLAGS", ".", "rank", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "FLAGS", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "nbatch_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "FLAGS", ".", "dataset_len", "=", "len", "(", "train_dataset", ")", "\n", "\n", "############################", "\n", "# Create Model #", "\n", "if", "'eff'", "in", "FLAGS", ".", "s_arch", ":", "# if use efficientnet as student", "\n", "        ", "student_model", "=", "EfficientNet", ".", "from_name", "\n", "", "else", ":", "\n", "        ", "student_model", "=", "arch", ".", "__dict__", "[", "FLAGS", ".", "s_arch", "]", "\n", "", "teacher_model", "=", "arch", ".", "__dict__", "[", "FLAGS", ".", "t_arch", "]", "\n", "model", "=", "moco", ".", "builder", ".", "MoCo", "(", "\n", "student_model", ",", "\n", "teacher_model", ",", "\n", "FLAGS", ".", "moco_dim", ",", "FLAGS", ".", "moco_k", ",", "\n", "FLAGS", ".", "moco_m", ",", "FLAGS", ".", "moco_t", ",", "\n", "FLAGS", ".", "mlp", ")", "\n", "# log.logger.info(model)", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ",", "\n", "world_size", "=", "FLAGS", ".", "world_size", ",", "\n", "rank", "=", "FLAGS", ".", "rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_rank", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "gpu_rank", "]", ")", "\n", "groups", "=", "[", "]", "\n", "# for example, FLAGS.nodes_num=2, FLAGS.ngpu=4, FLAGS.subgroup=4", "\n", "# groups = [[0,1,2,3]] in node_rank = 0", "\n", "# groups = [[4,5,6,7]] in node_rank = 1", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "nodes_num", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "FLAGS", ".", "ngpu", "//", "FLAGS", ".", "subgroup", ")", ":", "\n", "            ", "ranks", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "FLAGS", ".", "subgroup", ")", ":", "\n", "                ", "ranks", ".", "append", "(", "j", "*", "FLAGS", ".", "subgroup", "+", "k", "+", "i", "*", "FLAGS", ".", "ngpu", ")", "\n", "_group", "=", "dist", ".", "new_group", "(", "ranks", "=", "ranks", ")", "\n", "", "if", "FLAGS", ".", "node_rank", "==", "i", ":", "\n", "                ", "print", "(", "'ranks: '", ",", "ranks", ")", "\n", "groups", ".", "append", "(", "_group", ")", "\n", "############################", "\n", "# Create Optimizer #", "\n", "", "", "", "criterion", "=", "MulposCrossEntropy", "(", ")", ".", "cuda", "(", "gpu_rank", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "FLAGS", ".", "init_lr", ",", "\n", "momentum", "=", "FLAGS", ".", "momentum", ",", "\n", "weight_decay", "=", "FLAGS", ".", "wd", ")", "\n", "############################", "\n", "# Resume Checkpoints #", "\n", "start_epoch", "=", "0", "\n", "if", "FLAGS", ".", "resume", ":", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt.pth.tar'", ")", "\n", "if", "FLAGS", ".", "resume_epoch", "is", "not", "None", ":", "\n", "            ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt_%s.pth.tar'", "%", "(", "FLAGS", ".", "resume_epoch", ")", ")", "\n", "\n", "", "loc", "=", "'cuda:{}'", ".", "format", "(", "gpu_rank", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "loc", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "log", ".", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "ckpt_path", ",", "checkpoint", "[", "'epoch'", "]", "-", "1", ")", ")", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "############################", "\n", "# Resume Pretrained Encoder K #", "\n", "pretrained_ckpt", "=", "torch", ".", "load", "(", "FLAGS", ".", "pretrain_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "# 1. MoCo style", "\n", "if", "FLAGS", ".", "pretrain_alg", "==", "'moco'", ":", "\n", "        ", "pretrained_state_dict", "=", "pretrained_ckpt", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "pretrained_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", ":", "\n", "                ", "pretrained_state_dict", "[", "k", ".", "replace", "(", "'encoder_q'", ",", "'encoder_k'", ")", "]", "=", "pretrained_state_dict", "[", "k", "]", "\n", "", "del", "pretrained_state_dict", "[", "k", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Mising Keys when load unsupervsied pretrained model: '", ",", "msg", ".", "missing_keys", ")", "\n", "\n", "\n", "# 2. Swav stype", "\n", "", "if", "FLAGS", ".", "pretrain_alg", "==", "'swav'", ":", "\n", "        ", "pretrained_state_dict", "=", "pretrained_ckpt", "\n", "for", "k", "in", "list", "(", "pretrained_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "new_k", "=", "k", "[", ":", "7", "]", "+", "'encoder_k.'", "+", "k", "[", "7", ":", "]", "\n", "if", "'projection_head'", "in", "new_k", ":", "\n", "                ", "new_k", "=", "new_k", ".", "replace", "(", "'projection_head'", ",", "'fc'", ")", "\n", "print", "(", "new_k", ")", "\n", "", "pretrained_state_dict", "[", "new_k", "]", "=", "pretrained_state_dict", "[", "k", "]", "\n", "del", "pretrained_state_dict", "[", "k", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "pretrained_state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Mising Keys when load unsupervsied pretrained model: '", ",", "msg", ".", "missing_keys", ")", "\n", "\n", "\n", "############################", "\n", "# Start Train Process #", "\n", "", "imgs_corr", "=", "np", ".", "load", "(", "'./imgs_corr/%s'", "%", "(", "FLAGS", ".", "corr_npy", ")", ")", "\n", "imgs_corr", "=", "imgs_corr", "[", ":", ",", ":", "FLAGS", ".", "clus_pos_num", "]", "\n", "dist", ".", "barrier", "(", ")", "\n", "train_dataset", ".", "set_imgs_corr", "(", "imgs_corr", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "FLAGS", ".", "end_epoch", ")", ":", "\n", "\n", "        ", "log", ".", "logger", ".", "info", "(", "'Training epoch [%3d/%3d]'", "%", "(", "epoch", ",", "FLAGS", ".", "end_epoch", ")", ")", "\n", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "log", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "i", ",", "(", "query", ",", "key", ",", "add_posq", ",", "add_posk", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "_bs", "=", "key", ".", "size", "(", "0", ")", "\n", "query", "=", "query", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "key", "=", "key", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "add_posq", "=", "add_posq", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "add_posk", "=", "add_posk", ".", "cuda", "(", "gpu_rank", ",", "non_blocking", "=", "True", ")", "\n", "\n", "mix_query", ",", "mix_lam", "=", "cutmix", "(", "query", ".", "clone", "(", ")", ",", "add_posq", ".", "clone", "(", ")", ")", "\n", "mix_lam", "=", "[", "mix_lam", ",", "1", "-", "mix_lam", "]", "\n", "\n", "# compute output", "\n", "output", ",", "mix_out", ",", "target", "=", "model", "(", "\n", "im_q", "=", "query", ",", "\n", "im_k", "=", "key", ",", "\n", "add_posq", "=", "add_posq", ",", "\n", "add_posk", "=", "add_posk", ",", "\n", "mix_q", "=", "mix_query", ",", "\n", "gpu_rank", "=", "gpu_rank", ",", "\n", "node_rank", "=", "FLAGS", ".", "node_rank", ",", "\n", "ngpu_per_node", "=", "FLAGS", ".", "ngpu", ",", "\n", "nrank_per_subg", "=", "FLAGS", ".", "subgroup", ",", "\n", "groups", "=", "groups", ")", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "for", "out_idx", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "                ", "soft_lam", "=", "np", ".", "zeros", "(", "2", ")", "\n", "for", "j", "in", "range", "(", "soft_lam", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "j", "==", "out_idx", ":", "\n", "                        ", "soft_lam", "[", "j", "]", "=", "FLAGS", ".", "lam", "[", "0", "]", "if", "epoch", ">", "10", "else", "1", "\n", "", "else", ":", "\n", "                        ", "soft_lam", "[", "j", "]", "=", "FLAGS", ".", "lam", "[", "1", "]", "if", "epoch", ">", "10", "else", "0", "\n", "\n", "", "", "_loss", "=", "criterion", "(", "output", "[", "out_idx", "]", ",", "target", ",", "soft_lam", ")", "\n", "loss", "+=", "_loss", "\n", "\n", "", "mix_loss", "=", "criterion", "(", "mix_out", ",", "target", ",", "mix_lam", ")", "\n", "\n", "loss", "+=", "mix_loss", "\n", "\n", "loss", "/=", "3", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", "[", "0", "]", "[", ":", ",", "0", "]", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "_bs", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "_bs", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "_bs", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "if", "i", "%", "FLAGS", ".", "report_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ",", "log", ")", "\n", "\n", "\n", "", "", "log", ".", "logger", ".", "info", "(", "'==> Training stats: Iter[%3d] loss=%2.5f; top1: %2.3f; top5: %2.3f'", "%", "\n", "(", "epoch", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ")", "\n", "\n", "save_ckpt", "(", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "}", ",", "epoch", ",", "FLAGS", ".", "save_freq", ")", "\n", "#####################################        ", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.Log.__init__": [[51, 76], ["logging.getLogger", "logging.Formatter", "os.path.join", "datetime.datetime.now().__str__().replace", "os.path.join", "logging.FileHandler", "utils.Log.log_fileHandler.setFormatter", "utils.Log.logger.addHandler", "logging.root.removeHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "utils.Log.logger.addHandler", "utils.Log.logger.setLevel", "os.path.exists", "os.makedirs", "datetime.datetime.now().__str__", "str", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.__str__"], ["    ", "def", "__init__", "(", "self", ",", "exp_path", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)-8s - %(levelname)-6s - %(message)s'", ")", "\n", "\n", "if", "FLAGS", ".", "rank", "==", "0", ":", "# only rank 0 output is visible", "\n", "# str handler", "\n", "            ", "strHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "strHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "strHandler", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "# file handler", "\n", "", "self", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'logs'", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ",", "exist_ok", "=", "True", ")", "# handle FileExistsError in multiprocessing mode", "\n", "\n", "", "now_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "__str__", "(", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "self", ".", "file_name", "=", "'LOG_INFO_'", "+", "now_str", "+", "'_rank'", "+", "str", "(", "FLAGS", ".", "rank", ")", "+", "'.txt'", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "self", ".", "file_name", ")", "\n", "self", ".", "log_fileHandler", "=", "logging", ".", "FileHandler", "(", "self", ".", "log_file", ")", "\n", "self", ".", "log_fileHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "self", ".", "log_fileHandler", ")", "\n", "\n", "# remove root hanlder intro by absl", "\n", "logging", ".", "root", ".", "removeHandler", "(", "absl", ".", "logging", ".", "_absl_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.__init__": [[81, 85], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.reset": [[86, 91], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.update": [[92, 97], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.AverageMeter.__str__": [[98, 101], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.ProgressMeter.__init__": [[104, 108], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.None.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.ProgressMeter.display": [[109, 113], ["log.logger.info", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ",", "log", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "log", ".", "logger", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.ProgressMeter._get_batch_fmtstr": [[114, 118], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.rand_bbox": [[20, 37], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["None"], ["def", "rand_bbox", "(", "size", ",", "lam", ")", ":", "\n", "    ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ")", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.cutmix": [[38, 48], ["numpy.random.beta", "utils.rand_bbox", "ori_img.size", "ori_img.size", "ori_img.size"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.None.utils.rand_bbox"], ["", "def", "cutmix", "(", "ori_img", ",", "near_img", ",", "alpha", "=", "2.", ")", ":", "\n", "\n", "    ", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "ori_img", ".", "size", "(", ")", ",", "lam", ")", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "ori_img", ".", "size", "(", ")", "[", "-", "1", "]", "*", "ori_img", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "\n", "ori_img", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "near_img", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "\n", "mixed_img", "=", "ori_img", "\n", "return", "mixed_img", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.accuracy": [[120, 135], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.save_ckpt": [[136, 150], ["os.path.join", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "", "def", "save_ckpt", "(", "state", ",", "epoch", ",", "save_freq", ",", "is_best", "=", "None", ")", ":", "\n", "    ", "if", "FLAGS", ".", "rank", "==", "0", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "if", "epoch", "%", "save_freq", "==", "0", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt_%s.pth.tar'", "%", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt_best.pth.tar'", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.None.utils.adjust_learning_rate": [[151, 164], ["log.logger.info", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "log", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "FLAGS", ".", "init_lr", "\n", "if", "FLAGS", ".", "decay_method", "==", "'cos'", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "FLAGS", ".", "end_epoch", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "FLAGS", ".", "schedule", ":", "\n", "# lr *= 0.1 if epoch >= milestone else 1.", "\n", "            ", "lr", "*=", "FLAGS", ".", "lr_decay", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "log", ".", "logger", ".", "info", "(", "'==> Setting model optimizer lr = %.6f'", "%", "(", "lr", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.detection.train_net.Res5ROIHeadsExtraNorm._build_res5_block": [[20, 26], ["super()._build_res5_block", "detectron2.layers.get_norm", "seq.add_module"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.detection.train_net.Res5ROIHeadsExtraNorm._build_res5_block"], ["def", "_build_res5_block", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "seq", ",", "out_channels", "=", "super", "(", ")", ".", "_build_res5_block", "(", "cfg", ")", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NORM", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", "\n", "seq", ".", "add_module", "(", "\"norm\"", ",", "norm", ")", "\n", "return", "seq", ",", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.detection.train_net.Trainer.build_evaluator": [[29, 38], ["os.path.join", "detectron2.evaluation.COCOEvaluator", "detectron2.evaluation.PascalVOCDetectionEvaluator"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "build_evaluator", "(", "cls", ",", "cfg", ",", "dataset_name", ",", "output_folder", "=", "None", ")", ":", "\n", "        ", "if", "output_folder", "is", "None", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "", "if", "\"coco\"", "in", "dataset_name", ":", "\n", "            ", "return", "COCOEvaluator", "(", "dataset_name", ",", "cfg", ",", "True", ",", "output_folder", ")", "\n", "", "else", ":", "\n", "            ", "assert", "\"voc\"", "in", "dataset_name", "\n", "return", "PascalVOCDetectionEvaluator", "(", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.detection.train_net.setup": [[40, 47], ["detectron2.config.get_cfg", "detectron2.config.get_cfg.merge_from_file", "detectron2.config.get_cfg.merge_from_list", "detectron2.config.get_cfg.freeze", "detectron2.engine.default_setup"], "function", ["None"], ["", "", "", "def", "setup", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "get_cfg", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "default_setup", "(", "cfg", ",", "args", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.detection.train_net.main": [[49, 63], ["train_net.setup", "train_net.Trainer", "Trainer.resume_or_load", "Trainer.train", "Trainer.build_model", "detectron2.checkpoint.DetectionCheckpointer().resume_or_load", "Trainer.test", "detectron2.checkpoint.DetectionCheckpointer"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.detection.train_net.setup", "home.repos.pwc.inspect_result.haohang96_bingo.None.main_lincls.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "setup", "(", "args", ")", "\n", "\n", "if", "args", ".", "eval_only", ":", "\n", "        ", "model", "=", "Trainer", ".", "build_model", "(", "cfg", ")", "\n", "DetectionCheckpointer", "(", "model", ",", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", ")", ".", "resume_or_load", "(", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", ",", "resume", "=", "args", ".", "resume", "\n", ")", "\n", "res", "=", "Trainer", ".", "test", "(", "cfg", ",", "model", ")", "\n", "return", "res", "\n", "\n", "", "trainer", "=", "Trainer", "(", "cfg", ")", "\n", "trainer", ".", "resume_or_load", "(", "resume", "=", "args", ".", "resume", ")", "\n", "return", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.BasicBlock.__init__": [[34, 43], ["torch.Module.__init__", "resnet_cls.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_cls.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.BasicBlock.forward": [[44, 61], ["resnet_cls.BasicBlock.conv1", "resnet_cls.BasicBlock.bn1", "resnet_cls.BasicBlock.relu", "resnet_cls.BasicBlock.conv2", "resnet_cls.BasicBlock.bn2", "resnet_cls.BasicBlock.relu", "resnet_cls.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.Bottleneck.__init__": [[66, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.Bottleneck.forward": [[79, 101], ["resnet_cls.Bottleneck.conv1", "resnet_cls.Bottleneck.bn1", "resnet_cls.Bottleneck.relu", "resnet_cls.Bottleneck.conv2", "resnet_cls.Bottleneck.bn2", "resnet_cls.Bottleneck.relu", "resnet_cls.Bottleneck.conv3", "resnet_cls.Bottleneck.bn3", "resnet_cls.Bottleneck.relu", "ENDING_POINTS.append", "resnet_cls.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "ENDING_POINTS", ".", "append", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.ResNet.__init__": [[105, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_cls.ResNet._make_layer", "resnet_cls.ResNet._make_layer", "resnet_cls.ResNet._make_layer", "resnet_cls.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet_cls.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.ResNet._make_layer": [[128, 144], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.ResNet.forward": [[145, 162], ["resnet_cls.ResNet.conv1", "ENDING_POINTS.append", "resnet_cls.ResNet.bn1", "resnet_cls.ResNet.relu", "ENDING_POINTS.append", "resnet_cls.ResNet.maxpool", "resnet_cls.ResNet.layer1", "resnet_cls.ResNet.layer2", "resnet_cls.ResNet.layer3", "resnet_cls.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "global", "ENDING_POINTS", "\n", "ENDING_POINTS", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "ENDING_POINTS", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "ENDING_POINTS", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "# return [ENDING_POINTS[i] for i in FLAGS.selected_feat_id]", "\n", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.conv3x3": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.resnet18": [[170, 180], ["resnet_cls.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.resnet34": [[182, 192], ["resnet_cls.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.resnet50": [[194, 204], ["resnet_cls.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.resnet101": [[206, 216], ["resnet_cls.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet_cls.resnet152": [[218, 228], ["resnet_cls.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.BasicBlock.__init__": [[35, 61], ["torch.Module.__init__", "wide_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "wide_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\"BasicBlock only supports groups=1 and base_width=64\"", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.BasicBlock.forward": [[62, 79], ["wide_resnet.BasicBlock.conv1", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.relu", "wide_resnet.BasicBlock.conv2", "wide_resnet.BasicBlock.bn2", "wide_resnet.BasicBlock.relu", "wide_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.Bottleneck.__init__": [[85, 110], ["torch.Module.__init__", "wide_resnet.conv1x1", "norm_layer", "wide_resnet.conv3x3", "norm_layer", "wide_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.conv1x1", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3", "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.0", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.Bottleneck.forward": [[111, 132], ["wide_resnet.Bottleneck.conv1", "wide_resnet.Bottleneck.bn1", "wide_resnet.Bottleneck.relu", "wide_resnet.Bottleneck.conv2", "wide_resnet.Bottleneck.bn2", "wide_resnet.Bottleneck.relu", "wide_resnet.Bottleneck.conv3", "wide_resnet.Bottleneck.bn3", "wide_resnet.Bottleneck.relu", "wide_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.ResNet.__init__": [[135, 237], ["torch.Module.__init__", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "wide_resnet.ResNet._make_layer", "wide_resnet.ResNet._make_layer", "wide_resnet.ResNet._make_layer", "wide_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "isinstance", "wide_resnet.ResNet.modules", "len", "ValueError", "wide_resnet.MultiPrototypes", "isinstance", "wide_resnet.ResNet.modules", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "widen", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", "normalize", "=", "False", ",", "\n", "output_dim", "=", "0", ",", "\n", "hidden_mlp", "=", "0", ",", "\n", "nmb_prototypes", "=", "0", ",", "\n", "num_classes", "=", "1000", ",", "\n", "eval_mode", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "padding", "=", "nn", ".", "ConstantPad2d", "(", "1", ",", "0.0", ")", "\n", "\n", "self", ".", "inplanes", "=", "width_per_group", "*", "widen", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", "\n", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "# change padding 3 -> 2 compared to original torchvision code because added a padding layer", "\n", "num_out_filters", "=", "width_per_group", "*", "widen", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "num_out_filters", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "num_out_filters", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "num_out_filters", ",", "layers", "[", "0", "]", ")", "\n", "num_out_filters", "*=", "2", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "num_out_filters", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", "\n", ")", "\n", "num_out_filters", "*=", "2", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "num_out_filters", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", "\n", ")", "\n", "num_out_filters", "*=", "2", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "num_out_filters", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", "\n", "\n", "# normalize output features", "\n", "self", ".", "l2norm", "=", "normalize", "\n", "\n", "# projection head", "\n", "if", "output_dim", "==", "0", ":", "\n", "            ", "self", ".", "projection_head", "=", "None", "\n", "", "elif", "hidden_mlp", "==", "0", ":", "\n", "            ", "self", ".", "projection_head", "=", "nn", ".", "Linear", "(", "num_out_filters", "*", "block", ".", "expansion", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "projection_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_out_filters", "*", "block", ".", "expansion", ",", "hidden_mlp", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_mlp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_mlp", ",", "output_dim", ")", ",", "\n", ")", "\n", "\n", "# prototype layer", "\n", "", "self", ".", "prototypes", "=", "None", "\n", "if", "isinstance", "(", "nmb_prototypes", ",", "list", ")", ":", "\n", "            ", "self", ".", "prototypes", "=", "MultiPrototypes", "(", "output_dim", ",", "nmb_prototypes", ")", "\n", "", "elif", "nmb_prototypes", ">", "0", ":", "\n", "            ", "self", ".", "prototypes", "=", "nn", ".", "Linear", "(", "output_dim", ",", "nmb_prototypes", ",", "bias", "=", "False", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.ResNet._make_layer": [[238, 278], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "wide_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "\n", "previous_dilation", ",", "\n", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.ResNet.forward": [[279, 302], ["wide_resnet.ResNet.padding", "wide_resnet.ResNet.conv1", "wide_resnet.ResNet.bn1", "wide_resnet.ResNet.relu", "wide_resnet.ResNet.maxpool", "wide_resnet.ResNet.layer1", "wide_resnet.ResNet.layer2", "wide_resnet.ResNet.layer3", "wide_resnet.ResNet.layer4", "wide_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "wide_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "pre_out", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "padding", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "self", ".", "eval_mode", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "if", "pre_out", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.MultiPrototypes.__init__": [[333, 338], ["torch.Module.__init__", "len", "enumerate", "wide_resnet.MultiPrototypes.add_module", "torch.Linear", "torch.Linear", "str"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", ",", "nmb_prototypes", ")", ":", "\n", "        ", "super", "(", "MultiPrototypes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nmb_heads", "=", "len", "(", "nmb_prototypes", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "nmb_prototypes", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"prototypes\"", "+", "str", "(", "i", ")", ",", "nn", ".", "Linear", "(", "output_dim", ",", "k", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.MultiPrototypes.forward": [[339, 344], ["range", "out.append", "getattr", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nmb_heads", ")", ":", "\n", "            ", "out", ".", "append", "(", "getattr", "(", "self", ",", "\"prototypes\"", "+", "str", "(", "i", ")", ")", "(", "x", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.conv3x3": [[12, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.conv1x1": [[26, 29], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.resnet50": [[346, 348], ["wide_resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.resnet50w2": [[350, 352], ["wide_resnet.ResNet"], "function", ["None"], ["", "def", "resnet50w2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "widen", "=", "2", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.resnet50w4": [[354, 356], ["wide_resnet.ResNet"], "function", ["None"], ["", "def", "resnet50w4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "widen", "=", "4", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.wide_resnet.resnet50w5": [[358, 360], ["wide_resnet.ResNet"], "function", ["None"], ["", "def", "resnet50w5", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "widen", "=", "5", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.BasicBlock.forward": [[38, 55], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.Bottleneck.__init__": [[60, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.Bottleneck.forward": [[73, 94], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet.__init__": [[98, 120], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet._make_layer": [[121, 137], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.ResNet.forward": [[138, 156], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "pre_out", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "pre_out", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.resnet18": [[158, 168], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.resnet34": [[170, 180], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.resnet50": [[182, 192], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.resnet101": [[194, 204], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.arch.resnet.resnet152": [[206, 216], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.MBConvBlock.__init__": [[50, 90], ["torch.nn.Module.__init__", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.calculate_output_image_size", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.MemoryEfficientSwish", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.get_same_padding_conv2d", "max", "utils.get_same_padding_conv2d.", "utils.get_same_padding_conv2d.", "int"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.calculate_output_image_size", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d"], ["def", "__init__", "(", "self", ",", "block_args", ",", "global_params", ",", "image_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_block_args", "=", "block_args", "\n", "self", ".", "_bn_mom", "=", "1", "-", "global_params", ".", "batch_norm_momentum", "# pytorch's difference from tensorflow", "\n", "self", ".", "_bn_eps", "=", "global_params", ".", "batch_norm_epsilon", "\n", "self", ".", "has_se", "=", "(", "self", ".", "_block_args", ".", "se_ratio", "is", "not", "None", ")", "and", "(", "0", "<", "self", ".", "_block_args", ".", "se_ratio", "<=", "1", ")", "\n", "self", ".", "id_skip", "=", "block_args", ".", "id_skip", "# whether to use skip connection and drop connect", "\n", "\n", "# Expansion phase (Inverted Bottleneck)", "\n", "inp", "=", "self", ".", "_block_args", ".", "input_filters", "# number of input channels", "\n", "oup", "=", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "expand_ratio", "# number of output channels", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_expand_conv", "=", "Conv2d", "(", "in_channels", "=", "inp", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "# image_size = calculate_output_image_size(image_size, 1) <-- this wouldn't modify image_size", "\n", "\n", "# Depthwise convolution phase", "\n", "", "k", "=", "self", ".", "_block_args", ".", "kernel_size", "\n", "s", "=", "self", ".", "_block_args", ".", "stride", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_depthwise_conv", "=", "Conv2d", "(", "\n", "in_channels", "=", "oup", ",", "out_channels", "=", "oup", ",", "groups", "=", "oup", ",", "# groups makes it depthwise", "\n", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "image_size", "=", "calculate_output_image_size", "(", "image_size", ",", "s", ")", "\n", "\n", "# Squeeze and Excitation layer, if desired", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "(", "1", ",", "1", ")", ")", "\n", "num_squeezed_channels", "=", "max", "(", "1", ",", "int", "(", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "se_ratio", ")", ")", "\n", "self", ".", "_se_reduce", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "num_squeezed_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "_se_expand", "=", "Conv2d", "(", "in_channels", "=", "num_squeezed_channels", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Pointwise convolution phase", "\n", "", "final_oup", "=", "self", ".", "_block_args", ".", "output_filters", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_project_conv", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "final_oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "final_oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.MBConvBlock.forward": [[91, 133], ["model_cls.MBConvBlock._depthwise_conv", "model_cls.MBConvBlock._bn1", "model_cls.MBConvBlock._swish", "model_cls.MBConvBlock._project_conv", "model_cls.MBConvBlock._bn2", "model_cls.MBConvBlock._expand_conv", "model_cls.MBConvBlock._bn0", "model_cls.MBConvBlock._swish", "torch.nn.functional.adaptive_avg_pool2d", "model_cls.MBConvBlock._se_reduce", "model_cls.MBConvBlock._swish", "model_cls.MBConvBlock._se_expand", "torch.sigmoid", "utils.drop_connect"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.drop_connect"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "drop_connect_rate", "=", "None", ")", ":", "\n", "        ", "\"\"\"MBConvBlock's forward function.\n\n        Args:\n            inputs (tensor): Input tensor.\n            drop_connect_rate (bool): Drop connect rate (float, between 0 and 1).\n\n        Returns:\n            Output of this block after processing.\n        \"\"\"", "\n", "\n", "# Expansion and Depthwise Convolution", "\n", "x", "=", "inputs", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "x", "=", "self", ".", "_expand_conv", "(", "inputs", ")", "\n", "x", "=", "self", ".", "_bn0", "(", "x", ")", "\n", "x", "=", "self", ".", "_swish", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "_depthwise_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "_bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "_swish", "(", "x", ")", "\n", "\n", "# Squeeze and Excitation", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "x_squeezed", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x_squeezed", "=", "self", ".", "_se_reduce", "(", "x_squeezed", ")", "\n", "x_squeezed", "=", "self", ".", "_swish", "(", "x_squeezed", ")", "\n", "x_squeezed", "=", "self", ".", "_se_expand", "(", "x_squeezed", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x_squeezed", ")", "*", "x", "\n", "\n", "# Pointwise Convolution", "\n", "", "x", "=", "self", ".", "_project_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "_bn2", "(", "x", ")", "\n", "\n", "# Skip connection and drop connect", "\n", "input_filters", ",", "output_filters", "=", "self", ".", "_block_args", ".", "input_filters", ",", "self", ".", "_block_args", ".", "output_filters", "\n", "if", "self", ".", "id_skip", "and", "self", ".", "_block_args", ".", "stride", "==", "1", "and", "input_filters", "==", "output_filters", ":", "\n", "# The combination of skip connection and drop connect brings about stochastic depth.", "\n", "            ", "if", "drop_connect_rate", ":", "\n", "                ", "x", "=", "drop_connect", "(", "x", ",", "p", "=", "drop_connect_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "x", "+", "inputs", "# skip connection", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.MBConvBlock.set_swish": [[134, 141], ["utils.MemoryEfficientSwish", "utils.Swish"], "methods", ["None"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export).\n\n        Args:\n            memory_efficient (bool): Whether to use memory-efficient version of swish.\n        \"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.__init__": [[165, 219], ["torch.nn.Module.__init__", "isinstance", "utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.calculate_output_image_size", "torch.nn.ModuleList", "utils.round_filters", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Dropout", "torch.nn.Linear", "utils.MemoryEfficientSwish", "len", "block_args._replace._replace._replace", "model_cls.EfficientNet._blocks.append", "utils.calculate_output_image_size", "range", "model_cls.MBConvBlock", "block_args._replace._replace._replace", "model_cls.EfficientNet._blocks.append", "utils.round_filters", "utils.round_filters", "utils.round_repeats", "model_cls.MBConvBlock"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.calculate_output_image_size", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.calculate_output_image_size", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_repeats"], ["def", "__init__", "(", "self", ",", "blocks_args", "=", "None", ",", "global_params", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "blocks_args", ",", "list", ")", ",", "'blocks_args should be a list'", "\n", "assert", "len", "(", "blocks_args", ")", ">", "0", ",", "'block args must be greater than 0'", "\n", "self", ".", "_global_params", "=", "global_params", "\n", "self", ".", "_blocks_args", "=", "blocks_args", "\n", "\n", "# Batch norm parameters", "\n", "bn_mom", "=", "1", "-", "self", ".", "_global_params", ".", "batch_norm_momentum", "\n", "bn_eps", "=", "self", ".", "_global_params", ".", "batch_norm_epsilon", "\n", "\n", "# Get stem static or dynamic convolution depending on image size", "\n", "image_size", "=", "global_params", ".", "image_size", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "\n", "# Stem", "\n", "in_channels", "=", "3", "# rgb", "\n", "out_channels", "=", "round_filters", "(", "32", ",", "self", ".", "_global_params", ")", "# number of output channels", "\n", "self", ".", "_conv_stem", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "bn_eps", ")", "\n", "image_size", "=", "calculate_output_image_size", "(", "image_size", ",", "2", ")", "\n", "\n", "# Build blocks", "\n", "self", ".", "_blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "block_args", "in", "self", ".", "_blocks_args", ":", "\n", "\n", "# Update block input and output filters based on depth multiplier.", "\n", "            ", "block_args", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "round_filters", "(", "block_args", ".", "input_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "output_filters", "=", "round_filters", "(", "block_args", ".", "output_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "self", ".", "_global_params", ")", "\n", ")", "\n", "\n", "# The first block needs to take care of stride and filter size increase.", "\n", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ",", "image_size", "=", "image_size", ")", ")", "\n", "image_size", "=", "calculate_output_image_size", "(", "image_size", ",", "block_args", ".", "stride", ")", "\n", "if", "block_args", ".", "num_repeat", ">", "1", ":", "# modify block_args to keep same output size", "\n", "                ", "block_args", "=", "block_args", ".", "_replace", "(", "input_filters", "=", "block_args", ".", "output_filters", ",", "stride", "=", "1", ")", "\n", "", "for", "_", "in", "range", "(", "block_args", ".", "num_repeat", "-", "1", ")", ":", "\n", "                ", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ",", "image_size", "=", "image_size", ")", ")", "\n", "# image_size = calculate_output_image_size(image_size, block_args.stride)  # stride = 1", "\n", "\n", "# Head", "\n", "", "", "in_channels", "=", "block_args", ".", "output_filters", "# output of final block", "\n", "out_channels", "=", "round_filters", "(", "1280", ",", "self", ".", "_global_params", ")", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_conv_head", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "bn_eps", ")", "\n", "\n", "# Final linear layer", "\n", "self", ".", "_avg_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "_global_params", ".", "dropout_rate", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "out_channels", ",", "self", ".", "_global_params", ".", "num_classes", ")", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.set_swish": [[220, 230], ["utils.MemoryEfficientSwish", "utils.Swish", "block.set_swish"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.set_swish"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export).\n\n        Args:\n            memory_efficient (bool): Whether to use memory-efficient version of swish.\n\n        \"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "for", "block", "in", "self", ".", "_blocks", ":", "\n", "            ", "block", ".", "set_swish", "(", "memory_efficient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.extract_endpoints": [[231, 274], ["dict", "model_cls.EfficientNet._swish", "enumerate", "model_cls.EfficientNet._swish", "model_cls.EfficientNet._bn0", "block", "model_cls.EfficientNet._bn1", "model_cls.EfficientNet._conv_stem", "prev_x.size", "block.size", "model_cls.EfficientNet._conv_head", "float", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extract_endpoints", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Use convolution layer to extract features\n        from reduction levels i in [1, 2, 3, 4, 5].\n\n        Args:\n            inputs (tensor): Input tensor.\n\n        Returns:\n            Dictionary of last intermediate features\n            with reduction levels i in [1, 2, 3, 4, 5].\n            Example:\n                >>> import torch\n                >>> from efficientnet.model import EfficientNet\n                >>> inputs = torch.rand(1, 3, 224, 224)\n                >>> model = EfficientNet.from_pretrained('efficientnet-b0')\n                >>> endpoints = model.extract_endpoints(inputs)\n                >>> print(endpoints['reduction_1'].shape)  # torch.Size([1, 16, 112, 112])\n                >>> print(endpoints['reduction_2'].shape)  # torch.Size([1, 24, 56, 56])\n                >>> print(endpoints['reduction_3'].shape)  # torch.Size([1, 40, 28, 28])\n                >>> print(endpoints['reduction_4'].shape)  # torch.Size([1, 112, 14, 14])\n                >>> print(endpoints['reduction_5'].shape)  # torch.Size([1, 1280, 7, 7])\n        \"\"\"", "\n", "endpoints", "=", "dict", "(", ")", "\n", "\n", "# Stem", "\n", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_conv_stem", "(", "inputs", ")", ")", ")", "\n", "prev_x", "=", "x", "\n", "\n", "# Blocks", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "_blocks", ")", "# scale drop connect_rate", "\n", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "if", "prev_x", ".", "size", "(", "2", ")", ">", "x", ".", "size", "(", "2", ")", ":", "\n", "                ", "endpoints", "[", "'reduction_{}'", ".", "format", "(", "len", "(", "endpoints", ")", "+", "1", ")", "]", "=", "prev_x", "\n", "", "prev_x", "=", "x", "\n", "\n", "# Head", "\n", "", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn1", "(", "self", ".", "_conv_head", "(", "x", ")", ")", ")", "\n", "endpoints", "[", "'reduction_{}'", ".", "format", "(", "len", "(", "endpoints", ")", "+", "1", ")", "]", "=", "x", "\n", "\n", "return", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.extract_features": [[275, 299], ["model_cls.EfficientNet._swish", "enumerate", "model_cls.EfficientNet._swish", "model_cls.EfficientNet._bn0", "block", "model_cls.EfficientNet._bn1", "model_cls.EfficientNet._conv_stem", "model_cls.EfficientNet._conv_head", "float", "len"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"use convolution layer to extract feature .\n\n        Args:\n            inputs (tensor): Input tensor.\n\n        Returns:\n            Output of the final convolution\n            layer in the efficientnet model.\n        \"\"\"", "\n", "# Stem", "\n", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_conv_stem", "(", "inputs", ")", ")", ")", "\n", "\n", "# Blocks", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "_blocks", ")", "# scale drop connect_rate", "\n", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "\n", "# Head", "\n", "", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn1", "(", "self", ".", "_conv_head", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.forward": [[300, 323], ["model_cls.EfficientNet.extract_features", "model_cls.EfficientNet._avg_pooling"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.extract_features"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"EfficientNet's forward function.\n           Calls extract_features to extract features, applies final linear layer, and returns logits.\n\n        Args:\n            inputs (tensor): Input tensor.\n\n        Returns:\n            Output of this model after processing.\n        \"\"\"", "\n", "# Convolution layers", "\n", "x", "=", "self", ".", "extract_features", "(", "inputs", ")", "\n", "# Pooling and final linear layer", "\n", "x", "=", "self", ".", "_avg_pooling", "(", "x", ")", "\n", "return", "[", "x", "]", "\n", "'''\n        # pdb.set_trace()\n        if self._global_params.include_top:\n            x = x.flatten(start_dim=1)\n            x = self._dropout(x)\n            # x = self.fc(x)\n        return [x]\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.from_name": [[324, 348], ["cls._check_model_name_is_valid", "utils.get_model_params", "cls", "cls._change_in_channels"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_model_params", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._change_in_channels"], ["", "@", "classmethod", "\n", "def", "from_name", "(", "cls", ",", "model_name", ",", "in_channels", "=", "3", ",", "**", "override_params", ")", ":", "\n", "        ", "\"\"\"create an efficientnet model according to name.\n\n        Args:\n            model_name (str): Name for efficientnet.\n            in_channels (int): Input data's channel number.\n            override_params (other key word params):\n                Params to override model's global_params.\n                Optional key:\n                    'width_coefficient', 'depth_coefficient',\n                    'image_size', 'dropout_rate',\n                    'num_classes', 'batch_norm_momentum',\n                    'batch_norm_epsilon', 'drop_connect_rate',\n                    'depth_divisor', 'min_depth'\n\n        Returns:\n            An efficientnet model.\n        \"\"\"", "\n", "cls", ".", "_check_model_name_is_valid", "(", "model_name", ")", "\n", "blocks_args", ",", "global_params", "=", "get_model_params", "(", "model_name", ",", "override_params", ")", "\n", "model", "=", "cls", "(", "blocks_args", ",", "global_params", ")", "\n", "model", ".", "_change_in_channels", "(", "in_channels", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.from_pretrained": [[349, 382], ["cls.from_name", "utils.load_pretrained_weights", "cls.from_name._change_in_channels"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.from_name", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.load_pretrained_weights", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._change_in_channels"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_name", ",", "weights_path", "=", "None", ",", "advprop", "=", "False", ",", "\n", "in_channels", "=", "3", ",", "num_classes", "=", "1000", ",", "**", "override_params", ")", ":", "\n", "        ", "\"\"\"create an efficientnet model according to name.\n\n        Args:\n            model_name (str): Name for efficientnet.\n            weights_path (None or str):\n                str: path to pretrained weights file on the local disk.\n                None: use pretrained weights downloaded from the Internet.\n            advprop (bool):\n                Whether to load pretrained weights\n                trained with advprop (valid when weights_path is None).\n            in_channels (int): Input data's channel number.\n            num_classes (int):\n                Number of categories for classification.\n                It controls the output size for final linear layer.\n            override_params (other key word params):\n                Params to override model's global_params.\n                Optional key:\n                    'width_coefficient', 'depth_coefficient',\n                    'image_size', 'dropout_rate',\n                    'batch_norm_momentum',\n                    'batch_norm_epsilon', 'drop_connect_rate',\n                    'depth_divisor', 'min_depth'\n\n        Returns:\n            A pretrained efficientnet model.\n        \"\"\"", "\n", "model", "=", "cls", ".", "from_name", "(", "model_name", ",", "num_classes", "=", "num_classes", ",", "**", "override_params", ")", "\n", "load_pretrained_weights", "(", "model", ",", "model_name", ",", "weights_path", "=", "weights_path", ",", "load_fc", "=", "(", "num_classes", "==", "1000", ")", ",", "advprop", "=", "advprop", ")", "\n", "model", ".", "_change_in_channels", "(", "in_channels", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet.get_image_size": [[383, 396], ["cls._check_model_name_is_valid", "utils.efficientnet_params"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.efficientnet_params"], ["", "@", "classmethod", "\n", "def", "get_image_size", "(", "cls", ",", "model_name", ")", ":", "\n", "        ", "\"\"\"Get the input image size for a given efficientnet model.\n\n        Args:\n            model_name (str): Name for efficientnet.\n\n        Returns:\n            Input image size (resolution).\n        \"\"\"", "\n", "cls", ".", "_check_model_name_is_valid", "(", "model_name", ")", "\n", "_", ",", "_", ",", "res", ",", "_", "=", "efficientnet_params", "(", "model_name", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet._check_model_name_is_valid": [[397, 409], ["ValueError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_check_model_name_is_valid", "(", "cls", ",", "model_name", ")", ":", "\n", "        ", "\"\"\"Validates model name.\n\n        Args:\n            model_name (str): Name for efficientnet.\n\n        Returns:\n            bool: Is a valid name or not.\n        \"\"\"", "\n", "if", "model_name", "not", "in", "VALID_MODELS", ":", "\n", "            ", "raise", "ValueError", "(", "'model_name should be one of: '", "+", "', '", ".", "join", "(", "VALID_MODELS", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model_cls.EfficientNet._change_in_channels": [[410, 420], ["utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d."], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters"], ["", "", "def", "_change_in_channels", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"Adjust model's first convolution layer to in_channels, if in_channels not equals 3.\n\n        Args:\n            in_channels (int): Input data's channel number.\n        \"\"\"", "\n", "if", "in_channels", "!=", "3", ":", "\n", "            ", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "self", ".", "_global_params", ".", "image_size", ")", "\n", "out_channels", "=", "round_filters", "(", "32", ",", "self", ".", "_global_params", ")", "\n", "self", ".", "_conv_stem", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.MBConvBlock.__init__": [[50, 90], ["torch.nn.Module.__init__", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.calculate_output_image_size", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.MemoryEfficientSwish", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.get_same_padding_conv2d", "max", "utils.get_same_padding_conv2d.", "utils.get_same_padding_conv2d.", "int"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.calculate_output_image_size", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d"], ["def", "__init__", "(", "self", ",", "block_args", ",", "global_params", ",", "image_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_block_args", "=", "block_args", "\n", "self", ".", "_bn_mom", "=", "1", "-", "global_params", ".", "batch_norm_momentum", "# pytorch's difference from tensorflow", "\n", "self", ".", "_bn_eps", "=", "global_params", ".", "batch_norm_epsilon", "\n", "self", ".", "has_se", "=", "(", "self", ".", "_block_args", ".", "se_ratio", "is", "not", "None", ")", "and", "(", "0", "<", "self", ".", "_block_args", ".", "se_ratio", "<=", "1", ")", "\n", "self", ".", "id_skip", "=", "block_args", ".", "id_skip", "# whether to use skip connection and drop connect", "\n", "\n", "# Expansion phase (Inverted Bottleneck)", "\n", "inp", "=", "self", ".", "_block_args", ".", "input_filters", "# number of input channels", "\n", "oup", "=", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "expand_ratio", "# number of output channels", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_expand_conv", "=", "Conv2d", "(", "in_channels", "=", "inp", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "# image_size = calculate_output_image_size(image_size, 1) <-- this wouldn't modify image_size", "\n", "\n", "# Depthwise convolution phase", "\n", "", "k", "=", "self", ".", "_block_args", ".", "kernel_size", "\n", "s", "=", "self", ".", "_block_args", ".", "stride", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_depthwise_conv", "=", "Conv2d", "(", "\n", "in_channels", "=", "oup", ",", "out_channels", "=", "oup", ",", "groups", "=", "oup", ",", "# groups makes it depthwise", "\n", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "image_size", "=", "calculate_output_image_size", "(", "image_size", ",", "s", ")", "\n", "\n", "# Squeeze and Excitation layer, if desired", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "(", "1", ",", "1", ")", ")", "\n", "num_squeezed_channels", "=", "max", "(", "1", ",", "int", "(", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "se_ratio", ")", ")", "\n", "self", ".", "_se_reduce", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "num_squeezed_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "_se_expand", "=", "Conv2d", "(", "in_channels", "=", "num_squeezed_channels", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Pointwise convolution phase", "\n", "", "final_oup", "=", "self", ".", "_block_args", ".", "output_filters", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_project_conv", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "final_oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "final_oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.MBConvBlock.forward": [[91, 133], ["model.MBConvBlock._depthwise_conv", "model.MBConvBlock._bn1", "model.MBConvBlock._swish", "model.MBConvBlock._project_conv", "model.MBConvBlock._bn2", "model.MBConvBlock._expand_conv", "model.MBConvBlock._bn0", "model.MBConvBlock._swish", "torch.nn.functional.adaptive_avg_pool2d", "model.MBConvBlock._se_reduce", "model.MBConvBlock._swish", "model.MBConvBlock._se_expand", "torch.sigmoid", "utils.drop_connect"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.drop_connect"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "drop_connect_rate", "=", "None", ")", ":", "\n", "        ", "\"\"\"MBConvBlock's forward function.\n\n        Args:\n            inputs (tensor): Input tensor.\n            drop_connect_rate (bool): Drop connect rate (float, between 0 and 1).\n\n        Returns:\n            Output of this block after processing.\n        \"\"\"", "\n", "\n", "# Expansion and Depthwise Convolution", "\n", "x", "=", "inputs", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "x", "=", "self", ".", "_expand_conv", "(", "inputs", ")", "\n", "x", "=", "self", ".", "_bn0", "(", "x", ")", "\n", "x", "=", "self", ".", "_swish", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "_depthwise_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "_bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "_swish", "(", "x", ")", "\n", "\n", "# Squeeze and Excitation", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "x_squeezed", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x_squeezed", "=", "self", ".", "_se_reduce", "(", "x_squeezed", ")", "\n", "x_squeezed", "=", "self", ".", "_swish", "(", "x_squeezed", ")", "\n", "x_squeezed", "=", "self", ".", "_se_expand", "(", "x_squeezed", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x_squeezed", ")", "*", "x", "\n", "\n", "# Pointwise Convolution", "\n", "", "x", "=", "self", ".", "_project_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "_bn2", "(", "x", ")", "\n", "\n", "# Skip connection and drop connect", "\n", "input_filters", ",", "output_filters", "=", "self", ".", "_block_args", ".", "input_filters", ",", "self", ".", "_block_args", ".", "output_filters", "\n", "if", "self", ".", "id_skip", "and", "self", ".", "_block_args", ".", "stride", "==", "1", "and", "input_filters", "==", "output_filters", ":", "\n", "# The combination of skip connection and drop connect brings about stochastic depth.", "\n", "            ", "if", "drop_connect_rate", ":", "\n", "                ", "x", "=", "drop_connect", "(", "x", ",", "p", "=", "drop_connect_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "x", "+", "inputs", "# skip connection", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.MBConvBlock.set_swish": [[134, 141], ["utils.MemoryEfficientSwish", "utils.Swish"], "methods", ["None"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export).\n\n        Args:\n            memory_efficient (bool): Whether to use memory-efficient version of swish.\n        \"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.__init__": [[165, 219], ["torch.nn.Module.__init__", "isinstance", "utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.calculate_output_image_size", "torch.nn.ModuleList", "utils.round_filters", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Dropout", "torch.nn.Linear", "utils.MemoryEfficientSwish", "len", "block_args._replace._replace._replace", "model.EfficientNet._blocks.append", "utils.calculate_output_image_size", "range", "model.MBConvBlock", "block_args._replace._replace._replace", "model.EfficientNet._blocks.append", "utils.round_filters", "utils.round_filters", "utils.round_repeats", "model.MBConvBlock"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.calculate_output_image_size", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.calculate_output_image_size", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_repeats"], ["def", "__init__", "(", "self", ",", "blocks_args", "=", "None", ",", "global_params", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "blocks_args", ",", "list", ")", ",", "'blocks_args should be a list'", "\n", "assert", "len", "(", "blocks_args", ")", ">", "0", ",", "'block args must be greater than 0'", "\n", "self", ".", "_global_params", "=", "global_params", "\n", "self", ".", "_blocks_args", "=", "blocks_args", "\n", "\n", "# Batch norm parameters", "\n", "bn_mom", "=", "1", "-", "self", ".", "_global_params", ".", "batch_norm_momentum", "\n", "bn_eps", "=", "self", ".", "_global_params", ".", "batch_norm_epsilon", "\n", "\n", "# Get stem static or dynamic convolution depending on image size", "\n", "image_size", "=", "global_params", ".", "image_size", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "\n", "# Stem", "\n", "in_channels", "=", "3", "# rgb", "\n", "out_channels", "=", "round_filters", "(", "32", ",", "self", ".", "_global_params", ")", "# number of output channels", "\n", "self", ".", "_conv_stem", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "bn_eps", ")", "\n", "image_size", "=", "calculate_output_image_size", "(", "image_size", ",", "2", ")", "\n", "\n", "# Build blocks", "\n", "self", ".", "_blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "block_args", "in", "self", ".", "_blocks_args", ":", "\n", "\n", "# Update block input and output filters based on depth multiplier.", "\n", "            ", "block_args", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "round_filters", "(", "block_args", ".", "input_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "output_filters", "=", "round_filters", "(", "block_args", ".", "output_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "self", ".", "_global_params", ")", "\n", ")", "\n", "\n", "# The first block needs to take care of stride and filter size increase.", "\n", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ",", "image_size", "=", "image_size", ")", ")", "\n", "image_size", "=", "calculate_output_image_size", "(", "image_size", ",", "block_args", ".", "stride", ")", "\n", "if", "block_args", ".", "num_repeat", ">", "1", ":", "# modify block_args to keep same output size", "\n", "                ", "block_args", "=", "block_args", ".", "_replace", "(", "input_filters", "=", "block_args", ".", "output_filters", ",", "stride", "=", "1", ")", "\n", "", "for", "_", "in", "range", "(", "block_args", ".", "num_repeat", "-", "1", ")", ":", "\n", "                ", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ",", "image_size", "=", "image_size", ")", ")", "\n", "# image_size = calculate_output_image_size(image_size, block_args.stride)  # stride = 1", "\n", "\n", "# Head", "\n", "", "", "in_channels", "=", "block_args", ".", "output_filters", "# output of final block", "\n", "out_channels", "=", "round_filters", "(", "1280", ",", "self", ".", "_global_params", ")", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "image_size", ")", "\n", "self", ".", "_conv_head", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "bn_eps", ")", "\n", "\n", "# Final linear layer", "\n", "self", ".", "_avg_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "_global_params", ".", "dropout_rate", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "out_channels", ",", "self", ".", "_global_params", ".", "num_classes", ")", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.set_swish": [[220, 230], ["utils.MemoryEfficientSwish", "utils.Swish", "block.set_swish"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.set_swish"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export).\n\n        Args:\n            memory_efficient (bool): Whether to use memory-efficient version of swish.\n\n        \"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "for", "block", "in", "self", ".", "_blocks", ":", "\n", "            ", "block", ".", "set_swish", "(", "memory_efficient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.extract_endpoints": [[231, 274], ["dict", "model.EfficientNet._swish", "enumerate", "model.EfficientNet._swish", "model.EfficientNet._bn0", "block", "model.EfficientNet._bn1", "model.EfficientNet._conv_stem", "prev_x.size", "block.size", "model.EfficientNet._conv_head", "float", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extract_endpoints", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Use convolution layer to extract features\n        from reduction levels i in [1, 2, 3, 4, 5].\n\n        Args:\n            inputs (tensor): Input tensor.\n\n        Returns:\n            Dictionary of last intermediate features\n            with reduction levels i in [1, 2, 3, 4, 5].\n            Example:\n                >>> import torch\n                >>> from efficientnet.model import EfficientNet\n                >>> inputs = torch.rand(1, 3, 224, 224)\n                >>> model = EfficientNet.from_pretrained('efficientnet-b0')\n                >>> endpoints = model.extract_endpoints(inputs)\n                >>> print(endpoints['reduction_1'].shape)  # torch.Size([1, 16, 112, 112])\n                >>> print(endpoints['reduction_2'].shape)  # torch.Size([1, 24, 56, 56])\n                >>> print(endpoints['reduction_3'].shape)  # torch.Size([1, 40, 28, 28])\n                >>> print(endpoints['reduction_4'].shape)  # torch.Size([1, 112, 14, 14])\n                >>> print(endpoints['reduction_5'].shape)  # torch.Size([1, 1280, 7, 7])\n        \"\"\"", "\n", "endpoints", "=", "dict", "(", ")", "\n", "\n", "# Stem", "\n", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_conv_stem", "(", "inputs", ")", ")", ")", "\n", "prev_x", "=", "x", "\n", "\n", "# Blocks", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "_blocks", ")", "# scale drop connect_rate", "\n", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "if", "prev_x", ".", "size", "(", "2", ")", ">", "x", ".", "size", "(", "2", ")", ":", "\n", "                ", "endpoints", "[", "'reduction_{}'", ".", "format", "(", "len", "(", "endpoints", ")", "+", "1", ")", "]", "=", "prev_x", "\n", "", "prev_x", "=", "x", "\n", "\n", "# Head", "\n", "", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn1", "(", "self", ".", "_conv_head", "(", "x", ")", ")", ")", "\n", "endpoints", "[", "'reduction_{}'", ".", "format", "(", "len", "(", "endpoints", ")", "+", "1", ")", "]", "=", "x", "\n", "\n", "return", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.extract_features": [[275, 299], ["model.EfficientNet._swish", "enumerate", "model.EfficientNet._swish", "model.EfficientNet._bn0", "block", "model.EfficientNet._bn1", "model.EfficientNet._conv_stem", "model.EfficientNet._conv_head", "float", "len"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"use convolution layer to extract feature .\n\n        Args:\n            inputs (tensor): Input tensor.\n\n        Returns:\n            Output of the final convolution\n            layer in the efficientnet model.\n        \"\"\"", "\n", "# Stem", "\n", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_conv_stem", "(", "inputs", ")", ")", ")", "\n", "\n", "# Blocks", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "_blocks", ")", "# scale drop connect_rate", "\n", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "\n", "# Head", "\n", "", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn1", "(", "self", ".", "_conv_head", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.forward": [[300, 320], ["model.EfficientNet.extract_features", "model.EfficientNet._avg_pooling", "model.EfficientNet.flatten", "model.EfficientNet._dropout", "model.EfficientNet.fc"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.extract_features"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"EfficientNet's forward function.\n           Calls extract_features to extract features, applies final linear layer, and returns logits.\n\n        Args:\n            inputs (tensor): Input tensor.\n\n        Returns:\n            Output of this model after processing.\n        \"\"\"", "\n", "# Convolution layers", "\n", "x", "=", "self", ".", "extract_features", "(", "inputs", ")", "\n", "# Pooling and final linear layer", "\n", "x", "=", "self", ".", "_avg_pooling", "(", "x", ")", "\n", "# pdb.set_trace()", "\n", "if", "self", ".", "_global_params", ".", "include_top", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "_dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.from_name": [[321, 345], ["cls._check_model_name_is_valid", "utils.get_model_params", "cls", "cls._change_in_channels"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_model_params", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._change_in_channels"], ["", "@", "classmethod", "\n", "def", "from_name", "(", "cls", ",", "model_name", ",", "in_channels", "=", "3", ",", "**", "override_params", ")", ":", "\n", "        ", "\"\"\"create an efficientnet model according to name.\n\n        Args:\n            model_name (str): Name for efficientnet.\n            in_channels (int): Input data's channel number.\n            override_params (other key word params):\n                Params to override model's global_params.\n                Optional key:\n                    'width_coefficient', 'depth_coefficient',\n                    'image_size', 'dropout_rate',\n                    'num_classes', 'batch_norm_momentum',\n                    'batch_norm_epsilon', 'drop_connect_rate',\n                    'depth_divisor', 'min_depth'\n\n        Returns:\n            An efficientnet model.\n        \"\"\"", "\n", "cls", ".", "_check_model_name_is_valid", "(", "model_name", ")", "\n", "blocks_args", ",", "global_params", "=", "get_model_params", "(", "model_name", ",", "override_params", ")", "\n", "model", "=", "cls", "(", "blocks_args", ",", "global_params", ")", "\n", "model", ".", "_change_in_channels", "(", "in_channels", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.from_pretrained": [[346, 379], ["cls.from_name", "utils.load_pretrained_weights", "cls.from_name._change_in_channels"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.from_name", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.load_pretrained_weights", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._change_in_channels"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_name", ",", "weights_path", "=", "None", ",", "advprop", "=", "False", ",", "\n", "in_channels", "=", "3", ",", "num_classes", "=", "1000", ",", "**", "override_params", ")", ":", "\n", "        ", "\"\"\"create an efficientnet model according to name.\n\n        Args:\n            model_name (str): Name for efficientnet.\n            weights_path (None or str):\n                str: path to pretrained weights file on the local disk.\n                None: use pretrained weights downloaded from the Internet.\n            advprop (bool):\n                Whether to load pretrained weights\n                trained with advprop (valid when weights_path is None).\n            in_channels (int): Input data's channel number.\n            num_classes (int):\n                Number of categories for classification.\n                It controls the output size for final linear layer.\n            override_params (other key word params):\n                Params to override model's global_params.\n                Optional key:\n                    'width_coefficient', 'depth_coefficient',\n                    'image_size', 'dropout_rate',\n                    'batch_norm_momentum',\n                    'batch_norm_epsilon', 'drop_connect_rate',\n                    'depth_divisor', 'min_depth'\n\n        Returns:\n            A pretrained efficientnet model.\n        \"\"\"", "\n", "model", "=", "cls", ".", "from_name", "(", "model_name", ",", "num_classes", "=", "num_classes", ",", "**", "override_params", ")", "\n", "load_pretrained_weights", "(", "model", ",", "model_name", ",", "weights_path", "=", "weights_path", ",", "load_fc", "=", "(", "num_classes", "==", "1000", ")", ",", "advprop", "=", "advprop", ")", "\n", "model", ".", "_change_in_channels", "(", "in_channels", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet.get_image_size": [[380, 393], ["cls._check_model_name_is_valid", "utils.efficientnet_params"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.efficientnet_params"], ["", "@", "classmethod", "\n", "def", "get_image_size", "(", "cls", ",", "model_name", ")", ":", "\n", "        ", "\"\"\"Get the input image size for a given efficientnet model.\n\n        Args:\n            model_name (str): Name for efficientnet.\n\n        Returns:\n            Input image size (resolution).\n        \"\"\"", "\n", "cls", ".", "_check_model_name_is_valid", "(", "model_name", ")", "\n", "_", ",", "_", ",", "res", ",", "_", "=", "efficientnet_params", "(", "model_name", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid": [[394, 406], ["ValueError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_check_model_name_is_valid", "(", "cls", ",", "model_name", ")", ":", "\n", "        ", "\"\"\"Validates model name.\n\n        Args:\n            model_name (str): Name for efficientnet.\n\n        Returns:\n            bool: Is a valid name or not.\n        \"\"\"", "\n", "if", "model_name", "not", "in", "VALID_MODELS", ":", "\n", "            ", "raise", "ValueError", "(", "'model_name should be one of: '", "+", "', '", ".", "join", "(", "VALID_MODELS", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.model.EfficientNet._change_in_channels": [[407, 417], ["utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d."], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters"], ["", "", "def", "_change_in_channels", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"Adjust model's first convolution layer to in_channels, if in_channels not equals 3.\n\n        Args:\n            in_channels (int): Input data's channel number.\n        \"\"\"", "\n", "if", "in_channels", "!=", "3", ":", "\n", "            ", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "self", ".", "_global_params", ".", "image_size", ")", "\n", "out_channels", "=", "round_filters", "(", "32", ",", "self", ".", "_global_params", ")", "\n", "self", ".", "_conv_stem", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.Swish.forward": [[56, 58], ["torch.sigmoid"], "methods", ["None"], ["# str handler", "\n", "            ", "strHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "strHandler", ".", "setFormatter", "(", "formatter", ")", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.SwishImplementation.forward": [[62, 67], ["ctx.save_for_backward", "torch.sigmoid"], "methods", ["None"], ["# file handler", "\n", "", "self", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'logs'", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_path", ",", "exist_ok", "=", "True", ")", "# handle FileExistsError in multiprocessing mode", "\n", "\n", "", "now_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "__str__", "(", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.SwishImplementation.backward": [[68, 73], ["torch.sigmoid"], "methods", ["None"], ["self", ".", "file_name", "=", "'LOG_INFO_'", "+", "now_str", "+", "'_rank'", "+", "str", "(", "FLAGS", ".", "rank", ")", "+", "'.txt'", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "self", ".", "file_name", ")", "\n", "self", ".", "log_fileHandler", "=", "logging", ".", "FileHandler", "(", "self", ".", "log_file", ")", "\n", "self", ".", "log_fileHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "self", ".", "log_fileHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.MemoryEfficientSwish.forward": [[75, 77], ["SwishImplementation.apply"], "methods", ["None"], ["logging", ".", "root", ".", "removeHandler", "(", "absl", ".", "logging", ".", "_absl_handler", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.Conv2dDynamicSamePadding.__init__": [[228, 231], ["torch.nn.Conv2d.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.Conv2dDynamicSamePadding.forward": [[232, 242], ["max", "max", "torch.nn.functional.conv2d", "torch.nn.functional.pad.size", "utils.Conv2dDynamicSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.functional.pad"], "methods", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.Conv2dStaticSamePadding.__init__": [[251, 268], ["torch.nn.Conv2d.__init__", "max", "max", "isinstance", "utils.Conv2dStaticSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.ZeroPad2d", "torch.nn.Identity", "len"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.Conv2dStaticSamePadding.forward": [[269, 273], ["utils.Conv2dStaticSamePadding.static_padding", "torch.nn.functional.conv2d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.MaxPool2dDynamicSamePadding.__init__": [[296, 301], ["torch.nn.MaxPool2d.__init__", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.MaxPool2dDynamicSamePadding.forward": [[302, 313], ["max", "max", "torch.nn.functional.max_pool2d", "torch.nn.functional.pad.size", "math.ceil", "math.ceil", "torch.nn.functional.pad"], "methods", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.MaxPool2dStaticSamePadding.__init__": [[319, 337], ["torch.nn.MaxPool2d.__init__", "max", "max", "isinstance", "isinstance", "isinstance", "isinstance", "math.ceil", "math.ceil", "torch.nn.ZeroPad2d", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.MaxPool2dStaticSamePadding.forward": [[338, 343], ["utils.MaxPool2dStaticSamePadding.static_padding", "torch.nn.functional.max_pool2d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.BlockDecoder._decode_block_string": [[361, 395], ["isinstance", "block_string.split", "BlockArgs", "re.split", "len", "int", "int", "int", "int", "int", "len", "len", "int", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.BlockDecoder._encode_block_string": [[396, 419], ["args.append", "args.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.BlockDecoder.decode": [[420, 435], ["isinstance", "blocks_args.append", "utils.BlockDecoder._decode_block_string"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.BlockDecoder._decode_block_string"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.BlockDecoder.encode": [[436, 450], ["block_strings.append", "utils.BlockDecoder._encode_block_string"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.BlockDecoder._encode_block_string"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_filters": [[79, 105], ["max", "int", "int"], "function", ["None"], ["", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n", "\n", "", "", "class", "ProgressMeter", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.round_repeats": [[107, 123], ["int", "math.ceil"], "function", ["None"], ["self", ".", "prefix", "=", "prefix", "\n", "\n", "", "def", "display", "(", "self", ",", "batch", ",", "log", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "log", ".", "logger", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n", "\n", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.drop_connect": [[125, 151], ["torch.rand", "torch.floor"], "function", ["None"], ["\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n", "", "", "def", "save_ckpt", "(", "state", ",", "epoch", ",", "save_freq", ",", "is_best", "=", "None", ")", ":", "\n", "    ", "if", "FLAGS", ".", "rank", "==", "0", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "if", "epoch", "%", "save_freq", "==", "0", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt_%s.pth.tar'", "%", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "train_url", ",", "'ckpt_best.pth.tar'", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "log", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_width_and_height_from_size": [[153, 168], ["isinstance", "isinstance", "isinstance", "TypeError"], "function", ["None"], ["lr", "=", "FLAGS", ".", "init_lr", "\n", "if", "FLAGS", ".", "decay_method", "==", "'cos'", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "FLAGS", ".", "end_epoch", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "FLAGS", ".", "schedule", ":", "\n", "# lr *= 0.1 if epoch >= milestone else 1.", "\n", "            ", "lr", "*=", "FLAGS", ".", "lr_decay", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "log", ".", "logger", ".", "info", "(", "'==> Setting model optimizer lr = %.6f'", "%", "(", "lr", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.calculate_output_image_size": [[170, 188], ["utils.get_width_and_height_from_size", "int", "int", "isinstance", "math.ceil", "math.ceil"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_width_and_height_from_size"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_conv2d": [[195, 209], ["functools.partial"], "function", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_same_padding_maxPool2d": [[275, 289], ["functools.partial"], "function", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.efficientnet_params": [[452, 475], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.efficientnet": [[477, 524], ["utils.BlockDecoder.decode", "GlobalParams"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.BlockDecoder.decode"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.get_model_params": [[526, 547], ["model_name.startswith", "utils.efficientnet_params", "utils.efficientnet", "NotImplementedError", "global_params._replace._replace"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.efficientnet_params", "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.efficientnet"], []], "home.repos.pwc.inspect_result.haohang96_bingo.efficientnet_pytorch.utils.load_pretrained_weights": [[579, 611], ["isinstance", "print", "torch.load", "torch.utils.model_zoo.load_url", "model.load_state_dict", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.load_state_dict", "set", "set"], "function", ["None"], []], "home.repos.pwc.inspect_result.haohang96_bingo.classifiers.single_classifier.Flatten.__init__": [[8, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.classifiers.single_classifier.Flatten.forward": [[11, 13], ["feat.view", "feat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "return", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.classifiers.single_classifier.Classifier.__init__": [[15, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "single_classifier.Classifier.classifier.add_module", "single_classifier.Classifier.classifier.add_module", "single_classifier.Classifier.modules", "single_classifier.Classifier.classifier.add_module", "single_classifier.Classifier.classifier.add_module", "single_classifier.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.uniform_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nchannels", "=", "opt", "[", "'nchannels'", "]", "\n", "num_class", "=", "opt", "[", "'num_class'", "]", "\n", "out_feat_size", "=", "opt", "[", "'out_feat_size'", "]", "\n", "pool_type", "=", "opt", "[", "'pool_type'", "]", "\n", "nchannels_after_pool", "=", "nchannels", "*", "out_feat_size", "*", "out_feat_size", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "pool_type", "==", "'max'", ":", "\n", "            ", "self", ".", "classifier", ".", "add_module", "(", "'MaxPool'", ",", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "out_feat_size", ",", "out_feat_size", ")", ")", ")", "\n", "", "if", "pool_type", "==", "'avg'", ":", "\n", "            ", "self", ".", "classifier", ".", "add_module", "(", "'AvgPool'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "out_feat_size", ",", "out_feat_size", ")", ")", ")", "\n", "\n", "# self.classifier.add_module('BatchNorm', nn.BatchNorm2d(nchannels, affine=True))", "\n", "", "self", ".", "classifier", ".", "add_module", "(", "'Flatten'", ",", "Flatten", "(", ")", ")", "\n", "self", ".", "classifier", ".", "add_module", "(", "'LinearClassifier'", ",", "nn", ".", "Linear", "(", "nchannels_after_pool", ",", "num_class", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "# keep same with ori moco", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "#nn.init.constant_(m.weight, 1)", "\n", "#nn.init.constant_(m.bias, 0)", "\n", "                ", "m", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.classifiers.single_classifier.Classifier.forward": [[48, 50], ["single_classifier.Classifier.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "feat", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.classifiers.mul_classifier.MulClassifier.__init__": [[10, 14], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "len", "single_classifier.Classifier"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "        ", "super", "(", "MulClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifiers", "=", "nn", ".", "ModuleList", "(", "[", "LinearClassifier", "(", "opt", ")", "for", "opt", "in", "opts", "]", ")", "\n", "self", ".", "num_classifiers", "=", "len", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.classifiers.mul_classifier.MulClassifier.forward": [[15, 18], ["len", "enumerate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "assert", "(", "len", "(", "feats", ")", "==", "self", ".", "num_classifiers", ")", "\n", "return", "[", "self", ".", "classifiers", "[", "i", "]", "(", "feat", ")", "for", "i", ",", "feat", "in", "enumerate", "(", "feats", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.DatasetFolder.__init__": [[74, 91], ["folder.find_classes", "folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.find_classes", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "root", ",", "loader", ",", "extensions", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "classes", ",", "class_to_idx", "=", "find_classes", "(", "root", ")", "\n", "samples", "=", "make_dataset", "(", "root", ",", "class_to_idx", ",", "extensions", ")", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported extensions are: \"", "+", "\",\"", ".", "join", "(", "extensions", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "extensions", "=", "extensions", "\n", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "self", ".", "samples", "=", "samples", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.DatasetFolder.__getitem__": [[92, 107], ["folder.DatasetFolder.loader", "folder.DatasetFolder.transform", "folder.DatasetFolder.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.DatasetFolder.__len__": [[108, 110], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.DatasetFolder.__repr__": [[111, 120], ["folder.DatasetFolder.__len__", "folder.DatasetFolder.transform.__repr__().replace", "folder.DatasetFolder.target_transform.__repr__().replace", "folder.DatasetFolder.transform.__repr__", "folder.DatasetFolder.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__len__", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__repr__", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.ImageFolder.__init__": [[169, 175], ["folder.DatasetFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "super", "(", "ImageFolder", ",", "self", ")", ".", "__init__", "(", "root", ",", "loader", ",", "IMG_EXTENSIONS", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.ImageFolder.__getitem__": [[177, 204], ["folder.ImageFolder.loader", "folder.ImageFolder.get_pos", "folder.ImageFolder.loader", "folder.ImageFolder.transform", "folder.ImageFolder.transform", "folder.ImageFolder.transform", "folder.ImageFolder.transform", "folder.ImageFolder.target_transform"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.ImageFolder.get_pos"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "# select pos samples", "\n", "pos_images", "=", "self", ".", "get_pos", "(", "index", ")", "\n", "pos_images", "=", "self", ".", "loader", "(", "pos_images", ")", "\n", "\n", "add_posq", "=", "self", ".", "transform", "(", "pos_images", ")", "\n", "add_posk", "=", "self", ".", "transform", "(", "pos_images", ")", "\n", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "key", "=", "self", ".", "transform", "(", "sample", ")", "\n", "query", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "# return sample, target", "\n", "", "return", "query", ",", "key", ",", "add_posq", ",", "add_posk", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.ImageFolder.set_imgs_corr": [[205, 211], ["None"], "methods", ["None"], ["", "def", "set_imgs_corr", "(", "self", ",", "imgs_corr", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            imgs_corr(ndarray): 1281167*clus_pos_num, each row represent pos-samples of this sample\n        \"\"\"", "\n", "self", ".", "imgs_corr", "=", "imgs_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.ImageFolder.get_pos": [[213, 226], ["numpy.random.choice"], "methods", ["None"], ["", "def", "get_pos", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index:  index of query sample\n        Returns:\n            pos_images: sample in neighbors of query sample\n        \"\"\"", "\n", "\n", "selected_pos_index", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "imgs_corr", "[", "index", "]", ")", "\n", "pos_samples", "=", "self", ".", "samples", "[", "selected_pos_index", "]", "\n", "pos_images", "=", "pos_samples", "[", "0", "]", "\n", "\n", "return", "pos_images", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.has_file_allowed_extension": [[15, 24], ["filename.lower", "any", "filename.lower.endswith"], "function", ["None"], ["def", "has_file_allowed_extension", "(", "filename", ",", "extensions", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n    Args:\n        filename (string): path to a file\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "filename_lower", "=", "filename", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "extensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.find_classes": [[26, 31], ["classes.sort", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "range", "os.path.join", "os.path.join", "len"], "function", ["None"], ["", "def", "find_classes", "(", "dir", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.make_dataset": [[33, 49], ["os.path.expanduser", "os.path.expanduser", "sorted", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "sorted", "os.path.isdir", "os.path.isdir", "os.walk", "os.walk", "sorted", "folder.has_file_allowed_extension", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.has_file_allowed_extension"], ["", "def", "make_dataset", "(", "dir", ",", "class_to_idx", ",", "extensions", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "target", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "        ", "d", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "target", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "d", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "if", "has_file_allowed_extension", "(", "fname", ",", "extensions", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "class_to_idx", "[", "target", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.pil_loader": [[125, 130], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.accimage_loader": [[132, 139], ["accimage.Image", "folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.default_loader": [[141, 147], ["get_image_backend", "folder.accimage_loader", "folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.accimage_loader", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.denorm": [[228, 237], ["None"], "function", ["None"], ["", "", "def", "denorm", "(", "img", ")", ":", "\n", "    ", "img_c1", "=", "img", "[", ":", ",", ":", ",", "0", "]", "*", "0.229", "+", "0.485", "\n", "img_c2", "=", "img", "[", ":", ",", ":", ",", "1", "]", "*", "0.224", "+", "0.456", "\n", "img_c3", "=", "img", "[", ":", ",", ":", ",", "2", "]", "*", "0.225", "+", "0.406", "\n", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "img_c1", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "img_c2", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "img_c3", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.folder.saveimg": [[239, 242], ["PIL.Image.fromarray().save", "PIL.Image.fromarray", "img.cpu().detach().numpy", "img.cpu().detach", "img.cpu"], "function", ["None"], ["", "def", "saveimg", "(", "img", ",", "filename", ")", ":", "\n", "# scipy.misc.toimage(img.cpu().detach().numpy(), cmin=0., cmax=1.).save(filename)", "\n", "    ", "Image", ".", "fromarray", "(", "(", "img", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "mode", "=", "'RGB'", ")", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__init__": [[69, 86], ["cluster_folder.find_classes", "cluster_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.find_classes", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "root", ",", "loader", ",", "extensions", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "classes", ",", "class_to_idx", "=", "find_classes", "(", "root", ")", "\n", "samples", "=", "make_dataset", "(", "root", ",", "class_to_idx", ",", "extensions", ")", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported extensions are: \"", "+", "\",\"", ".", "join", "(", "extensions", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "extensions", "=", "extensions", "\n", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "self", ".", "samples", "=", "samples", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__getitem__": [[87, 102], ["cluster_folder.DatasetFolder.loader", "cluster_folder.DatasetFolder.transform", "cluster_folder.DatasetFolder.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__repr__": [[106, 115], ["cluster_folder.DatasetFolder.__len__", "cluster_folder.DatasetFolder.transform.__repr__().replace", "cluster_folder.DatasetFolder.target_transform.__repr__().replace", "cluster_folder.DatasetFolder.transform.__repr__", "cluster_folder.DatasetFolder.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__len__", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__repr__", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.DatasetFolder.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.ImageFolder.__init__": [[164, 170], ["cluster_folder.DatasetFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "super", "(", "ImageFolder", ",", "self", ")", ".", "__init__", "(", "root", ",", "loader", ",", "IMG_EXTENSIONS", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.has_file_allowed_extension": [[10, 19], ["filename.lower", "any", "filename.lower.endswith"], "function", ["None"], ["def", "has_file_allowed_extension", "(", "filename", ",", "extensions", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n    Args:\n        filename (string): path to a file\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "filename_lower", "=", "filename", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "extensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.find_classes": [[21, 26], ["classes.sort", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "range", "os.path.join", "os.path.join", "len"], "function", ["None"], ["", "def", "find_classes", "(", "dir", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.make_dataset": [[28, 44], ["os.path.expanduser", "os.path.expanduser", "sorted", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "sorted", "os.path.isdir", "os.path.isdir", "os.walk", "os.walk", "sorted", "cluster_folder.has_file_allowed_extension", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.has_file_allowed_extension"], ["", "def", "make_dataset", "(", "dir", ",", "class_to_idx", ",", "extensions", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "target", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "        ", "d", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "target", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "d", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "if", "has_file_allowed_extension", "(", "fname", ",", "extensions", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "class_to_idx", "[", "target", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.pil_loader": [[120, 125], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.accimage_loader": [[127, 134], ["accimage.Image", "cluster_folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.default_loader": [[136, 142], ["get_image_backend", "cluster_folder.accimage_loader", "cluster_folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.accimage_loader", "home.repos.pwc.inspect_result.haohang96_bingo.moco.cluster_folder.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo.__init__": [[15, 64], ["torch.Module.__init__", "teacher_encoder", "builder.MoCo.encoder_k.parameters", "builder.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo.register_buffer", "base_encoder", "base_encoder", "torch.Sequential", "torch.Sequential", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "teacher_encoder", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "mlp", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "if", "'eff'", "in", "FLAGS", ".", "s_arch", ":", "\n", "            ", "self", ".", "encoder_q", "=", "base_encoder", "(", "FLAGS", ".", "s_arch", ",", "num_classes", "=", "dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder_q", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "\n", "", "self", ".", "encoder_k", "=", "teacher_encoder", "(", "num_classes", "=", "dim", ")", "\n", "\n", "if", "mlp", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "dim_mlp_k", "=", "self", ".", "encoder_k", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "2048", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "2048", ",", "128", ")", ")", "\n", "\n", "# encoder_q < encoder_k", "\n", "if", "FLAGS", ".", "pretrain_alg", "==", "'moco'", ":", "\n", "                ", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp_k", ",", "2048", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "2048", ",", "128", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "pretrain_alg", "==", "'swav'", ":", "\n", "                ", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", ",", "8192", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8192", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "8192", ",", "128", ")", ")", "\n", "\n", "\n", "", "", "for", "param_k", "in", "self", ".", "encoder_k", ".", "parameters", "(", ")", ":", "\n", "            ", "param_k", ".", "requires_grad", "=", "False", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._dequeue_and_enqueue": [[65, 80], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._group_batch_shuffle_ddp": [[81, 110], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.group_concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.group_concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_group_batch_shuffle_ddp", "(", "self", ",", "x", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", ",", "select_subg", "=", "group_concat_all_gather", "(", "x", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "# here means num_gpus per subg", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "# src rank in select_subg", "\n", "src_rank", "=", "(", "gpu_rank", "//", "nrank_per_subg", ")", "*", "nrank_per_subg", "+", "node_rank", "*", "ngpu_per_node", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "src_rank", ",", "group", "=", "select_subg", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "gpu_rank", "%", "nrank_per_subg", "# gpu_rank in each select_subg", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._group_batch_unshuffle_ddp": [[111, 129], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.group_concat_all_gather", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.group_concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_group_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", ",", "_", "=", "group_concat_all_gather", "(", "x", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "gpu_rank", "%", "nrank_per_subg", "# gpu_rank in each select_subg", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo.forward": [[130, 198], ["im_q.size", "builder.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "builder.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "range", "builder.MoCo.logits_q_nk", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.MoCo._group_batch_shuffle_ddp", "builder.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo._group_batch_unshuffle_ddp", "builder.MoCo._group_batch_shuffle_ddp", "builder.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo._group_batch_unshuffle_ddp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "builder.MoCo.logits_q_nk", "logits.append", "torch.functional.normalize.unsqueeze", "torch.functional.normalize.reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "builder.MoCo.unsqueeze", "builder.MoCo.reshape"], "methods", ["home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo.logits_q_nk", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._group_batch_shuffle_ddp", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._group_batch_unshuffle_ddp", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._group_batch_shuffle_ddp", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo._group_batch_unshuffle_ddp", "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo.logits_q_nk"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ",", "add_posq", ",", "add_posk", ",", "mix_q", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n            gpu_rank: gpu rank in one node(0 to FLAGS.ngpu)\n            node_rank: node rank(0 to FLAGS.nodes_num)\n            groups: a list of subgroup, enable shuffle bn in each sub-group\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "_bs", "=", "im_q", ".", "size", "(", "0", ")", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "add_posq", "=", "self", ".", "encoder_q", "(", "add_posq", ")", "\n", "add_posq", "=", "nn", ".", "functional", ".", "normalize", "(", "add_posq", ",", "dim", "=", "1", ")", "\n", "\n", "all_q", "=", "torch", ".", "cat", "(", "[", "q", ".", "unsqueeze", "(", "1", ")", ",", "add_posq", ".", "reshape", "(", "_bs", ",", "1", ",", "self", ".", "dim", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "mix_q", "=", "self", ".", "encoder_q", "(", "mix_q", ")", "\n", "mix_q", "=", "nn", ".", "functional", ".", "normalize", "(", "mix_q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "\n", "# shuffle for making use of BN", "\n", "            ", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_group_batch_shuffle_ddp", "(", "im_k", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_group_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", "\n", "\n", "\n", "add_posk", ",", "add_pos_idx_unshuffle", "=", "self", ".", "_group_batch_shuffle_ddp", "(", "add_posk", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", "\n", "add_posk", "=", "self", ".", "encoder_k", "(", "add_posk", ")", "\n", "add_posk", "=", "nn", ".", "functional", ".", "normalize", "(", "add_posk", ",", "dim", "=", "1", ")", "\n", "add_posk", "=", "self", ".", "_group_batch_unshuffle_ddp", "(", "add_posk", ",", "add_pos_idx_unshuffle", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", "\n", "\n", "\n", "\n", "all_k", "=", "torch", ".", "cat", "(", "[", "k", ".", "unsqueeze", "(", "1", ")", ",", "add_posk", ".", "reshape", "(", "_bs", ",", "1", ",", "self", ".", "dim", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "", "logits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "# loop a & pos_q", "\n", "            ", "q_i", "=", "all_q", "[", ":", ",", "i", "]", "\n", "\n", "_logits", "=", "self", ".", "logits_q_nk", "(", "q_i", ",", "all_k", ",", "self", ".", "queue", ")", "\n", "logits", ".", "append", "(", "_logits", ")", "\n", "\n", "\n", "", "mix_logits", "=", "self", ".", "logits_q_nk", "(", "mix_q", ",", "all_k", ",", "self", ".", "queue", ")", "\n", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "mix_logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.MoCo.logits_q_nk": [[200, 207], ["torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "_neg.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "neg.clone().detach", "_neg.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "neg.clone"], "methods", ["None"], ["", "def", "logits_q_nk", "(", "self", ",", "q", ",", "all_k", ",", "neg", ")", ":", "\n", "        ", "_pos", "=", "torch", ".", "einsum", "(", "'nmc,nc->nm'", ",", "[", "all_k", ",", "q", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "# N*2*1", "\n", "_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "neg", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "# N*65536", "\n", "_neg", "=", "_neg", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "2", ",", "1", ")", "# N*2*65536", "\n", "_logits", "=", "torch", ".", "cat", "(", "[", "_pos", ",", "_neg", "]", ",", "dim", "=", "2", ")", "# N*2*(65536+1)", "\n", "_logits", "/=", "self", ".", "T", "\n", "return", "_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.group_concat_all_gather": [[209, 224], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "len", "torch.ones_like", "torch.ones_like", "range"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "group_concat_all_gather", "(", "tensor", ",", "gpu_rank", ",", "node_rank", ",", "ngpu_per_node", ",", "nrank_per_subg", ",", "groups", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "assert", "ngpu_per_node", "//", "nrank_per_subg", "==", "len", "(", "groups", ")", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "nrank_per_subg", ")", "]", "\n", "select_subg_idx", "=", "gpu_rank", "//", "nrank_per_subg", "\n", "select_subg", "=", "groups", "[", "select_subg_idx", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "select_subg", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", ",", "select_subg", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.builder.concat_all_gather": [[225, 237], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.TwoCropsTransform.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.TwoCropsTransform.__call__": [[12, 16], ["loader.TwoCropsTransform.base_transform", "loader.TwoCropsTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.haohang96_bingo.moco.loader.GaussianBlur.__call__": [[24, 28], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "", "", ""]]}