{"home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.normalizeDataWholeSeed": [[16, 28], ["range", "range", "numpy.max", "abs", "LA.norm"], "function", ["None"], ["def", "normalizeDataWholeSeed", "(", "data", ",", "normalization_type", "=", "'max'", ")", ":", "\n", "\n", "    ", "if", "normalization_type", "==", "'max'", ":", "\n", "        ", "for", "idx", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "data", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "=", "data", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "abs", "(", "data", "[", "idx", ",", ":", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "", "", "elif", "normalization_type", "==", "'l2norm'", ":", "\n", "        ", "from", "numpy", "import", "linalg", "as", "LA", "\n", "for", "idx", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "data", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "=", "data", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "/", "LA", ".", "norm", "(", "data", "[", "idx", ",", ":", ",", ":", ",", ":", "]", ")", "# L2-norm by default        ", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.make_hyperparam_string": [[34, 47], ["str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "make_hyperparam_string", "(", "USE_DATA_AUG", ",", "learning_rate_base", ",", "batch_size", ",", "kernel_size", ",", "dropout_rate", ",", "num_training", ",", "\n", "num_nodes_fc", ",", "activation_type", ")", ":", "\n", "    ", "hparam", "=", "\"\"", "\n", "\n", "# Hyper-parameters", "\n", "if", "USE_DATA_AUG", ":", "\n", "        ", "hparam", "+=", "\"AUG_\"", "\n", "\n", "", "hparam", "+=", "str", "(", "num_nodes_fc", ")", "+", "\"nodes_\"", "+", "str", "(", "learning_rate_base", ")", "+", "\"lr_\"", "+", "str", "(", "batch_size", ")", "+", "\"batch_\"", "+", "str", "(", "\n", "kernel_size", ")", "+", "\"kernel_\"", "+", "str", "(", "dropout_rate", ")", "+", "\"drop_\"", "+", "str", "(", "\n", "num_training", ")", "+", "\"train_\"", "+", "activation_type", "\n", "\n", "return", "hparam", "\n", "\n"]], "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.plot_confusion_matrix": [[54, 85], ["print", "matplotlib.pyplot.imshow", "matplotlib.pyplot.title", "matplotlib.pyplot.colorbar", "numpy.arange", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "itertools.product", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.clim", "matplotlib.pyplot.xlabel", "print", "print", "len", "cm.max", "range", "range", "matplotlib.pyplot.text", "sum", "cm.astype", "format", "cm.sum"], "function", ["None"], ["", "def", "plot_confusion_matrix", "(", "cm", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "\n", "    ", "import", "itertools", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "", "print", "(", "cm", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ")", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "clim", "(", "0", ",", "sum", "(", "cm", "[", "0", ",", ":", "]", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.top_K_classification_accuracy": [[90, 108], ["numpy.zeros", "range", "sys.exit", "numpy.argsort", "numpy.sum"], "function", ["None"], ["", "def", "top_K_classification_accuracy", "(", "y_predicted", ",", "y_true", ",", "K", "=", "1", ")", ":", "\n", "\n", "    ", "num_samples", "=", "y_predicted", ".", "shape", "[", "0", "]", "\n", "num_classes", "=", "y_predicted", ".", "shape", "[", "1", "]", "\n", "\n", "if", "K", ">", "num_classes", ":", "\n", "        ", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "temp", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "curr_predicted", "=", "np", ".", "argsort", "(", "y_predicted", "[", "idx", ",", ":", "]", ")", "\n", "curr_predicted", "=", "curr_predicted", "[", ":", ":", "-", "1", "]", "# descending", "\n", "\n", "if", "y_true", "[", "idx", "]", "in", "curr_predicted", "[", ":", "K", "]", ":", "\n", "            ", "temp", "[", "idx", "]", "=", "1", "\n", "\n", "", "", "return", "100.0", "*", "np", ".", "sum", "(", "temp", ")", "/", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.conv2D_ResNet": [[114, 170], ["keras.layers.BatchNormalization", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Conv2D", "int", "int", "keras.layers.Add", "keras.layers.core.Dropout", "keras.layers.LeakyReLU", "keras.layers.LeakyReLU", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.PReLU", "keras.layers.Activation", "keras.layers.PReLU", "keras.layers.Activation", "int", "keras.layers.PReLU", "keras.layers.Activation"], "function", ["None"], ["", "def", "conv2D_ResNet", "(", "x", ",", "kernel_size", ",", "activation_type", ",", "dropout_rate", ",", "num_filters_first_conv1D", ")", ":", "\n", "\n", "    ", "x_orig", "=", "x", "\n", "\n", "# Batch norm", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "# 1x1 Conv2D", "\n", "x", "=", "Conv2D", "(", "num_filters_first_conv1D", ",", "kernel_size", "=", "1", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "x", ")", "\n", "\n", "# Activation", "\n", "if", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "x", "=", "PReLU", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "Activation", "(", "activation_type", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "# 3x3 Conv2D", "\n", "x", "=", "Conv2D", "(", "num_filters_first_conv1D", ",", "kernel_size", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "x", ")", "\n", "\n", "# Activation", "\n", "if", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "x", "=", "PReLU", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "Activation", "(", "activation_type", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "# 1x1 Conv2D", "\n", "x", "=", "Conv2D", "(", "num_filters_first_conv1D", "*", "4", ",", "kernel_size", "=", "1", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "x", ")", "\n", "\n", "# Skip connection", "\n", "if", "int", "(", "x", ".", "shape", "[", "3", "]", ")", "!=", "int", "(", "x_orig", ".", "shape", "[", "3", "]", ")", ":", "\n", "        ", "x_orig", "=", "Conv2D", "(", "int", "(", "x", ".", "shape", "[", "3", "]", ")", ",", "kernel_size", "=", "1", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "x_orig", ")", "\n", "\n", "# Activation", "\n", "", "if", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "x", "=", "PReLU", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "Activation", "(", "activation_type", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "Add", "(", ")", "(", "[", "x", ",", "x_orig", "]", ")", "\n", "\n", "# Dropout", "\n", "return", "Dropout", "(", "dropout_rate", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.createBlock_ResNet2D": [[172, 179], ["range", "utils_rice.conv2D_ResNet"], "function", ["home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.conv2D_ResNet"], ["", "def", "createBlock_ResNet2D", "(", "x", ",", "num_layers", ",", "kernel_size", ",", "activation_type", ",", "dropout_rate", ",", "num_filters_first_conv1D", ")", ":", "\n", "\n", "    ", "for", "idx_layer", "in", "range", "(", "num_layers", ")", ":", "\n", "\n", "        ", "x", "=", "conv2D_ResNet", "(", "x", ",", "kernel_size", ",", "activation_type", ",", "dropout_rate", ",", "num_filters_first_conv1D", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.ResNet2D_classifier": [[181, 229], ["keras.layers.Input", "range", "keras.models.Model", "keras.layers.Conv2D", "len", "utils_rice.createBlock_ResNet2D", "keras.layers.BatchNormalization", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dense", "keras.layers.LeakyReLU", "keras.layers.BatchNormalization", "keras.layers.core.Dropout", "keras.layers.LeakyReLU", "keras.layers.PReLU", "keras.layers.Activation", "len", "keras.layers.Conv2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.PReLU", "keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.createBlock_ResNet2D"], ["", "def", "ResNet2D_classifier", "(", "data_num_rows", ",", "data_num_cols", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "num_layers_each_block", "=", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "\n", "num_chan_per_block", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "activation_type", "=", "'swish'", ",", "dropout_rate", "=", "0.0", ",", "num_input_chans", "=", "1", ",", "num_nodes_fc", "=", "64", ")", ":", "\n", "\n", "    ", "input_data", "=", "Input", "(", "shape", "=", "(", "data_num_rows", ",", "data_num_cols", ",", "num_input_chans", ")", ")", "\n", "\n", "# Input layer: Conv2D -> activation", "\n", "x", "=", "Conv2D", "(", "num_chan_per_block", "[", "0", "]", ",", "kernel_size", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "input_data", ")", "\n", "\n", "# Activation", "\n", "if", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "x", "=", "PReLU", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "Activation", "(", "activation_type", ")", "(", "x", ")", "\n", "\n", "#  Blocks & Downsampling Layers", "\n", "", "for", "idx_block", "in", "range", "(", "len", "(", "num_layers_each_block", ")", ")", ":", "\n", "        ", "x", "=", "createBlock_ResNet2D", "(", "x", ",", "num_layers_each_block", "[", "idx_block", "]", ",", "kernel_size", ",", "activation_type", ",", "dropout_rate", ",", "\n", "num_chan_per_block", "[", "idx_block", "]", ")", "\n", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "if", "idx_block", "!=", "len", "(", "num_layers_each_block", ")", "-", "1", ":", "\n", "            ", "x", "=", "Conv2D", "(", "num_chan_per_block", "[", "idx_block", "]", "*", "2", ",", "kernel_size", ",", "strides", "=", "2", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "padding", "=", "'valid'", ",", "\n", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "GlobalAveragePooling2D", "(", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "Dropout", "(", "dropout_rate", ")", "(", "x", ")", "\n", "\n", "# Output layer", "\n", "", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "units", "=", "num_nodes_fc", ",", "activation", "=", "None", ",", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "x", ")", "\n", "\n", "# Activation", "\n", "if", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "x", "=", "PReLU", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "Activation", "(", "activation_type", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "output_data", "=", "Dense", "(", "units", "=", "num_classes", ",", "activation", "=", "'softmax'", ",", "kernel_initializer", "=", "'truncated_normal'", ")", "(", "x", ")", "\n", "\n", "return", "Model", "(", "inputs", "=", "input_data", ",", "outputs", "=", "output_data", ")", "", "", ""]], "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.script_run_proposed_ResNetB.createAndTrainResNetB": [[23, 282], ["len", "print", "numpy.load", "numpy.load", "utils_rice.normalizeDataWholeSeed", "int", "print", "print", "print", "print", "utils_rice.make_hyperparam_string", "print", "os.path.join", "print", "print", "print", "utils_rice.ResNet2D_classifier", "keras.optimizers.Adam", "utils.apply_modifications.compile", "keras.callbacks.TensorBoard", "print", "print", "script_run_proposed_ResNetB.createAndTrainResNetB.myGenerator"], "function", ["home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.normalizeDataWholeSeed", "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.make_hyperparam_string", "home.repos.pwc.inspect_result.ichatnun_spatio-spectral-resnet-bottlenecks-rice-classification.None.utils_rice.ResNet2D_classifier"], ["def", "createAndTrainResNetB", "(", "params", ")", ":", "\n", "\n", "############ Extract params ############", "\n", "    ", "USE_DATA_AUG", "=", "params", "[", "'USE_DATA_AUG'", "]", "\n", "learning_rate_base", "=", "params", "[", "'learning_rate_base'", "]", "\n", "kernel_size", "=", "params", "[", "'kernel_size'", "]", "\n", "num_epochs", "=", "params", "[", "'num_epochs'", "]", "\n", "batch_size", "=", "params", "[", "'batch_size'", "]", "\n", "dropout_rate", "=", "params", "[", "'dropout_rate'", "]", "\n", "activation_type", "=", "params", "[", "'activation_type'", "]", "\n", "num_nodes_fc", "=", "params", "[", "'num_nodes_fc'", "]", "\n", "rice_types", "=", "params", "[", "'rice_types'", "]", "\n", "normalization_type", "=", "params", "[", "'normalization_type'", "]", "\n", "num_layers_each_block", "=", "params", "[", "'num_layers_each_block'", "]", "\n", "num_chan_per_block", "=", "params", "[", "'num_chan_per_block'", "]", "\n", "N_classes", "=", "len", "(", "rice_types", ")", "\n", "\n", "\n", "############ Load data ############", "\n", "print", "(", "\"--------------Load Data--------------\"", ")", "\n", "\n", "# Load training data and their corresponding labels", "\n", "x_training", "=", "np", ".", "load", "(", "'x.npy'", ")", "\n", "labels_training", "=", "np", ".", "load", "(", "'labels.npy'", ")", "\n", "\n", "# Normalize the data", "\n", "x_training", "=", "normalizeDataWholeSeed", "(", "x_training", ",", "normalization_type", "=", "normalization_type", ")", "\n", "\n", "# Extract some information", "\n", "num_training", "=", "x_training", ".", "shape", "[", "0", "]", "\n", "N_spatial", "=", "x_training", ".", "shape", "[", "1", ":", "3", "]", "\n", "N_bands", "=", "x_training", ".", "shape", "[", "3", "]", "\n", "num_batch_per_epoch", "=", "int", "(", "num_training", "/", "batch_size", ")", "\n", "\n", "print", "(", "'#training = %d'", "%", "(", "num_training", ")", ")", "\n", "print", "(", "'#batches per epoch = %d'", "%", "(", "num_batch_per_epoch", ")", ")", "\n", "\n", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n", "\n", "############ Prepare the path for saving the models/stats ############", "\n", "print", "(", "\"--------------Prepare a path for saving the models/stats--------------\"", ")", "\n", "\n", "hparams", "=", "make_hyperparam_string", "(", "USE_DATA_AUG", ",", "learning_rate_base", ",", "batch_size", ",", "kernel_size", ",", "dropout_rate", ",", "\n", "num_training", ",", "num_nodes_fc", ",", "activation_type", ")", "\n", "print", "(", "'Saving the model to...'", ")", "\n", "\n", "results_dir", "=", "os", ".", "path", ".", "join", "(", "params", "[", "'results_base_directory'", "]", ",", "hparams", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "results_dir", ")", "\n", "", "print", "(", "results_dir", ")", "\n", "\n", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n", "############ Create a model ############", "\n", "print", "(", "\"--------------Create a model--------------\"", ")", "\n", "\n", "# Generate a model", "\n", "model", "=", "ResNet2D_classifier", "(", "data_num_rows", "=", "N_spatial", "[", "0", "]", ",", "data_num_cols", "=", "N_spatial", "[", "1", "]", ",", "num_classes", "=", "N_classes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "num_layers_each_block", "=", "num_layers_each_block", ",", "\n", "num_chan_per_block", "=", "num_chan_per_block", ",", "activation_type", "=", "activation_type", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "num_input_chans", "=", "N_bands", ",", "num_nodes_fc", "=", "num_nodes_fc", ")", "\n", "\n", "# Compile the model", "\n", "adam_opt", "=", "Adam", "(", "lr", "=", "learning_rate_base", "/", "batch_size", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ",", "decay", "=", "0.01", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam_opt", ",", "metrics", "=", "[", "'acc'", "]", ")", "\n", "\n", "# Create a Tensorboard callback", "\n", "tbCallBack", "=", "TensorBoard", "(", "log_dir", "=", "results_dir", ",", "histogram_freq", "=", "0", ",", "write_graph", "=", "False", ",", "write_images", "=", "False", ")", "\n", "\n", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n", "############ Train the model ############", "\n", "print", "(", "\"--------------Begin training the model--------------\"", ")", "\n", "\n", "# Possibly perform data augmentation", "\n", "from", "keras", ".", "preprocessing", ".", "image", "import", "ImageDataGenerator", "\n", "\n", "if", "USE_DATA_AUG", ":", "\n", "        ", "width_shift_range", "=", "0.04", "\n", "height_shift_range", "=", "0.04", "\n", "HORIZONTAL_FLIP", "=", "True", "\n", "VERTICAL_FLIP", "=", "True", "\n", "data_gen_args", "=", "dict", "(", "\n", "rotation_range", "=", "0.", ",", "\n", "width_shift_range", "=", "width_shift_range", ",", "\n", "height_shift_range", "=", "height_shift_range", ",", "\n", "horizontal_flip", "=", "HORIZONTAL_FLIP", ",", "\n", "vertical_flip", "=", "VERTICAL_FLIP", ",", "\n", "fill_mode", "=", "'wrap'", ")", "\n", "\n", "image_datagen", "=", "ImageDataGenerator", "(", "**", "data_gen_args", ")", "\n", "", "else", ":", "\n", "        ", "image_datagen", "=", "ImageDataGenerator", "(", ")", "\n", "\n", "# Define a data generator to generate random batches", "\n", "", "def", "myGenerator", "(", "batch_size", ")", ":", "\n", "        ", "for", "x_batch", ",", "y_batch", "in", "image_datagen", ".", "flow", "(", "x_training", ",", "labels_training", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", ":", "\n", "            ", "yield", "(", "x_batch", ",", "y_batch", ")", "\n", "\n", "", "", "my_generator", "=", "myGenerator", "(", "batch_size", ")", "\n", "\n", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "# Train the model", "\n", "hist", "=", "model", ".", "fit_generator", "(", "my_generator", ",", "steps_per_epoch", "=", "num_batch_per_epoch", ",", "epochs", "=", "num_epochs", ",", "initial_epoch", "=", "0", ",", "verbose", "=", "2", ",", "callbacks", "=", "[", "tbCallBack", "]", ")", "\n", "\n", "toc", "=", "timeit", ".", "default_timer", "(", ")", "\n", "training_time", "=", "toc", "-", "tic", "\n", "print", "(", "\"Total training time = \"", "+", "str", "(", "training_time", ")", ")", "\n", "\n", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n", "print", "(", "\"--------------Make Predictions--------------\"", ")", "\n", "# In this example script, we use the training data as the test data", "\n", "x_test", "=", "x_training", "\n", "labels_test", "=", "labels_training", "\n", "num_test", "=", "num_training", "\n", "\n", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "labels_predicted_test", "=", "model", ".", "predict", "(", "x_test", ")", "\n", "toc", "=", "timeit", ".", "default_timer", "(", ")", "\n", "test_time", "=", "toc", "-", "tic", "\n", "print", "(", "'Testing time (s) = '", "+", "str", "(", "test_time", ")", "+", "'\\n'", ")", "\n", "\n", "### Evaluation metrics", "\n", "\n", "# Classification accuracy", "\n", "labels_test_integer_format", "=", "np", ".", "argmax", "(", "labels_test", ",", "axis", "=", "1", ")", "\n", "labels_predicted_test_integer_format", "=", "np", ".", "argmax", "(", "labels_predicted_test", ",", "axis", "=", "1", ")", "\n", "\n", "acc_top2", "=", "top_K_classification_accuracy", "(", "labels_predicted_test", ",", "labels_test_integer_format", ",", "K", "=", "2", ")", "\n", "acc_top1", "=", "top_K_classification_accuracy", "(", "labels_predicted_test", ",", "labels_test_integer_format", ",", "K", "=", "1", ")", "\n", "\n", "# Confusion matrices", "\n", "confusion_matrix_results", "=", "confusion_matrix", "(", "labels_test_integer_format", ",", "labels_predicted_test_integer_format", ")", "\n", "print", "(", "\"Confusion matrix = \"", ")", "\n", "print", "(", "confusion_matrix_results", ")", "\n", "\n", "# Precision, Recall, F1", "\n", "macro_avg", "=", "np", ".", "asarray", "(", "\n", "precision_recall_fscore_support", "(", "labels_test_integer_format", ",", "labels_predicted_test_integer_format", ",", "\n", "average", "=", "'macro'", ")", ")", "\n", "macro_avg_precision", "=", "macro_avg", "[", "0", "]", "\n", "macro_avg_recall", "=", "macro_avg", "[", "1", "]", "\n", "macro_avg_fscore", "=", "macro_avg", "[", "2", "]", "\n", "\n", "print", "(", "'Top-1 accuracy (%) = '", "+", "str", "(", "acc_top1", ")", "+", "'\\n'", ")", "\n", "print", "(", "'Top-2 accuracy (%) = '", "+", "str", "(", "acc_top2", ")", "+", "'\\n'", ")", "\n", "print", "(", "'Macro-avg precision = '", "+", "str", "(", "macro_avg_precision", ")", "+", "'\\n'", ")", "\n", "print", "(", "'Macro-avg recall = '", "+", "str", "(", "macro_avg_recall", ")", "+", "'\\n'", ")", "\n", "print", "(", "'Macro-avg f-score = '", "+", "str", "(", "macro_avg_fscore", ")", "+", "'\\n'", ")", "\n", "\n", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n", "print", "(", "\"--------------Compute Saliency Maps--------------\"", ")", "\n", "results_test_dir", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'test'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_test_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "results_test_dir", ")", "\n", "\n", "# Swap softmax with linear", "\n", "", "model", ".", "layers", "[", "-", "1", "]", ".", "activation", "=", "activations", ".", "linear", "\n", "model", "=", "utils", ".", "apply_modifications", "(", "model", ")", "\n", "\n", "for", "idx_rice", "in", "range", "(", "num_test", ")", ":", "\n", "\n", "        ", "grads", "=", "visualize_saliency", "(", "model", ",", "layer_idx", "=", "-", "1", ",", "filter_indices", "=", "np", ".", "argmax", "(", "labels_test", "[", "idx_rice", ",", ":", "]", ",", "axis", "=", "0", ")", ",", "\n", "seed_input", "=", "x_test", "[", "idx_rice", "]", ",", "backprop_modifier", "=", "None", ")", "\n", "\n", "ss_img", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "abs", "(", "x_test", "[", "idx_rice", ",", ":", ",", ":", ",", ":", "]", ")", "**", "2", ",", "axis", "=", "2", ")", ")", "\n", "ss_img", "/=", "np", ".", "max", "(", "ss_img", ")", "\n", "\n", "plt", ".", "figure", "(", "1", ")", "\n", "plt", ".", "subplot", "(", "3", ",", "1", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "ss_img", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "clim", "(", "0", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "plt", ".", "subplot", "(", "3", ",", "1", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "(", "grads", "*", "np", ".", "uint8", "(", "255", ")", ")", ".", "astype", "(", "'uint8'", ")", ",", "cmap", "=", "'jet'", ")", "\n", "plt", ".", "clim", "(", "0", ",", "255", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "jet_heatmap", "=", "np", ".", "uint8", "(", "cm", ".", "jet", "(", "grads", ")", "[", "...", ",", ":", "3", "]", "*", "np", ".", "uint8", "(", "255", ")", ")", "\n", "\n", "plt", ".", "subplot", "(", "3", ",", "1", ",", "3", ")", "\n", "ss_img", "=", "cv2", ".", "cvtColor", "(", "(", "ss_img", "*", "np", ".", "uint8", "(", "255", ")", ")", ".", "astype", "(", "'uint8'", ")", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "plt", ".", "imshow", "(", "overlay", "(", "jet_heatmap", ",", "ss_img", ",", "alpha", "=", "0.3", ")", ")", "\n", "plt", ".", "clim", "(", "0", ",", "255", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "results_test_dir", ",", "str", "(", "idx_rice", "+", "1", ")", "+", "'.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n", "print", "(", "\"--------------Save the information--------------\"", ")", "\n", "\n", "# Write some information to files", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "results_test_dir", ",", "'testing_info.txt'", ")", ",", "'w'", ")", "\n", "f", ".", "write", "(", "\"Rice types = \"", "+", "str", "(", "rice_types", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"Confusion matrix \\n\"", ")", "\n", "f", ".", "write", "(", "str", "(", "confusion_matrix_results", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"Normalization type = \"", "+", "str", "(", "normalization_type", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"# test samples = %d \\n\"", "%", "(", "num_test", ")", ")", "\n", "f", ".", "write", "(", "\"Top-1 test accuracy = %f \\n\"", "%", "(", "acc_top1", ")", ")", "\n", "f", ".", "write", "(", "\"Top-2 test accuracy = %f \\n\"", "%", "(", "acc_top2", ")", ")", "\n", "f", ".", "write", "(", "\"Macro-avg precision = %f \\n\"", "%", "(", "macro_avg_precision", ")", ")", "\n", "f", ".", "write", "(", "\"Macro-avg recall = %f \\n\"", "%", "(", "macro_avg_recall", ")", ")", "\n", "f", ".", "write", "(", "\"Macro-avg f-score = %f \\n\"", "%", "(", "macro_avg_fscore", ")", ")", "\n", "f", ".", "write", "(", "\"Test time (s) = \"", "+", "str", "(", "test_time", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# Save confusion matrices", "\n", "plt", ".", "figure", "(", "1", ")", "\n", "plot_confusion_matrix", "(", "confusion_matrix_results", ",", "classes", "=", "rice_types", ",", "normalize", "=", "False", ",", "title", "=", "'Confusion matrix'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "results_test_dir", ",", "'confusionMatrix.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n", "print", "(", "\"--------------Save the information for the training phase--------------\"", ")", "\n", "\n", "import", "pandas", "as", "pd", "\n", "\n", "# Save the trained model", "\n", "model", ".", "save_weights", "(", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'trainedResNetB_weights.h5'", ")", ")", "\n", "\n", "# Extract the training loss   ", "\n", "training_loss", "=", "hist", ".", "history", "[", "'loss'", "]", "\n", "\n", "# Save the training loss", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "{", "'training loss'", ":", "training_loss", "}", ",", "index", "=", "np", ".", "arange", "(", "num_epochs", ")", "+", "1", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'training_loss.csv'", ")", ")", "\n", "\n", "# Save the training loss as a figure", "\n", "plt", ".", "figure", "(", "1", ")", "\n", "plt", ".", "title", "(", "'Loss'", ")", "\n", "plt", ".", "plot", "(", "training_loss", ",", "color", "=", "'b'", ",", "label", "=", "'Training'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'training_loss.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "# Write a file with general information", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'training_info.txt'", ")", ",", "'w'", ")", "\n", "f", ".", "write", "(", "hparams", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'Rice types = '", "+", "str", "(", "rice_types", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'Training time (s) = %f \\n'", "%", "(", "training_time", ")", ")", "\n", "f", ".", "write", "(", "'Normalization type = '", "+", "str", "(", "normalization_type", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'# epochs = '", "+", "str", "(", "num_epochs", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'# training samples = %d \\n'", "%", "(", "num_training", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "print", "(", "\"--------------Done--------------\"", ")", "\n", "\n"]]}