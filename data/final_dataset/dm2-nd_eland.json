{"home.repos.pwc.inspect_result.dm2-nd_eland.None.main_e2e.parseArgs": [[17, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "str"], "function", ["None"], ["def", "parseArgs", "(", ")", ":", "\n", "    ", "arg_parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Helper'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--log_name'", ",", "default", "=", "'debug'", ",", "type", "=", "str", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'reddit'", ",", "type", "=", "str", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--graph_num'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'gcn'", ",", "type", "=", "str", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--rnn'", ",", "default", "=", "'gru'", ",", "type", "=", "str", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--baseline'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "arg_parser", ".", "parse_args", "(", ")", "\n", "args", ".", "argv", "=", "sys", ".", "argv", "\n", "if", "args", ".", "gpu", ">=", "0", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "args", ".", "gpu", ")", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.main_e2e.init_vars": [[35, 84], ["set", "set", "set", "print", "pickle.load", "numpy.load", "pickle.load", "numpy.load", "numpy.zeros", "labels.astype.astype", "os.path.isfile", "print", "print", "print", "open", "open", "open", "open", "open", "len", "pickle.load", "int", "numpy.arange", "numpy.random.shuffle", "pickle.dump", "line.strip().split", "set.add", "open", "len", "open", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "set.add", "set.add", "len", "len", "len", "len", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "line.strip", "set.add"], "function", ["None"], ["", "def", "init_vars", "(", "ds", ")", ":", "\n", "    ", "\"\"\" Initialize u2index, labels, train/validation/test indices \"\"\"", "\n", "u_all", "=", "set", "(", ")", "\n", "pos_uids", "=", "set", "(", ")", "\n", "labeled_uids", "=", "set", "(", ")", "\n", "with", "open", "(", "f'../data/{ds}/userlabels'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "arr", "=", "line", ".", "strip", "(", "'\\r\\n'", ")", ".", "split", "(", "','", ")", "\n", "u_all", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "if", "arr", "[", "1", "]", "==", "'anomaly'", ":", "\n", "                ", "pos_uids", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "labeled_uids", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "", "elif", "arr", "[", "1", "]", "==", "'benign'", ":", "\n", "                ", "labeled_uids", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "", "", "", "print", "(", "f'loaded labels, total of {len(pos_uids)} positive users and {len(labeled_uids)} labeled users'", ")", "\n", "\n", "# get users' features", "\n", "u2index", "=", "pk", ".", "load", "(", "open", "(", "f'../data/{ds}/u2index.pkl'", ",", "'rb'", ")", ")", "\n", "user_feats", "=", "np", ".", "load", "(", "open", "(", "f'../data/{ds}/user2vec.npy'", ",", "'rb'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "# Get prod features", "\n", "p2index", "=", "pk", ".", "load", "(", "open", "(", "f'../data/{ds}/p2index.pkl'", ",", "'rb'", ")", ")", "\n", "item_feats", "=", "np", ".", "load", "(", "open", "(", "f'../data/{ds}/prod2vec.npy'", ",", "'rb'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "labels", "=", "np", ".", "zeros", "(", "len", "(", "u2index", ")", ")", "\n", "for", "u", "in", "u2index", ":", "\n", "        ", "if", "u", "in", "pos_uids", ":", "\n", "            ", "labels", "[", "u2index", "[", "u", "]", "]", "=", "1", "\n", "", "", "labels", "=", "labels", ".", "astype", "(", "int", ")", "\n", "\n", "tvt_file", "=", "f'../data/{ds}/tvt_idx.pkl'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "tvt_file", ")", ":", "\n", "        ", "tvt_idx", "=", "pk", ".", "load", "(", "open", "(", "tvt_file", ",", "'rb'", ")", ")", "\n", "idx_train", ",", "idx_val", ",", "idx_test", "=", "tvt_idx", "\n", "", "else", ":", "\n", "        ", "n_train", "=", "int", "(", "len", "(", "u2index", ")", "*", "0.2", ")", "\n", "n_val", "=", "n_train", "\n", "n_test", "=", "len", "(", "u2index", ")", "-", "n_train", "-", "n_val", "\n", "idx_labeled", "=", "np", ".", "arange", "(", "len", "(", "u2index", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_labeled", ")", "\n", "idx_train", "=", "idx_labeled", "[", ":", "n_train", "]", "\n", "idx_val", "=", "idx_labeled", "[", "n_train", ":", "n_train", "+", "n_val", "]", "\n", "idx_test", "=", "idx_labeled", "[", "n_train", "+", "n_val", ":", "n_train", "+", "n_val", "+", "n_test", "]", "\n", "tvt_idx", "=", "(", "idx_train", ",", "idx_val", ",", "idx_test", ")", "\n", "pk", ".", "dump", "(", "tvt_idx", ",", "open", "(", "tvt_file", ",", "'wb'", ")", ")", "\n", "", "print", "(", "'Train: total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_train", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_train", "]", ")", ",", "len", "(", "idx_train", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_train", "]", ")", ")", ")", "\n", "print", "(", "'Val:   total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_val", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_val", "]", ")", ",", "len", "(", "idx_val", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_val", "]", ")", ")", ")", "\n", "print", "(", "'Test:  total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_test", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_test", "]", ")", ",", "len", "(", "idx_test", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_test", "]", ")", ")", ")", "\n", "\n", "return", "u2index", ",", "labels", ",", "tvt_idx", ",", "user_feats", ",", "p2index", ",", "item_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.main_e2e.load_graph": [[85, 110], ["collections.Counter", "int", "collections.Counter.items", "scipy.sparse.csr_matrix", "open", "row.append", "col.append", "entry.append", "line.strip().split", "int", "len", "len", "line.strip"], "function", ["None"], ["", "def", "load_graph", "(", "ds", ",", "graph_num", ",", "u2index", ",", "p2index", ")", ":", "\n", "    ", "\"\"\" Get graph, graph features, and initialize u2index, p2index \"\"\"", "\n", "edges", "=", "Counter", "(", ")", "\n", "n", "=", "int", "(", "graph_num", "*", "10", ")", "\n", "edgelist_file", "=", "f'../data/{ds}/splitted_edgelist_{n}'", "if", "n", "<", "10", "else", "f'../data/{ds}/edgelist'", "\n", "with", "open", "(", "edgelist_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "arr", "=", "line", ".", "strip", "(", "'\\r\\n'", ")", ".", "split", "(", "','", ")", "\n", "u", "=", "arr", "[", "0", "]", "\n", "p", "=", "arr", "[", "1", "]", "\n", "t", "=", "int", "(", "arr", "[", "2", "]", ")", "\n", "# if p not in p2index:", "\n", "# \tp2index[p] = len(p2index)", "\n", "edges", "[", "(", "u2index", "[", "u", "]", ",", "p2index", "[", "p", "]", ")", "]", "+=", "1", "\n", "# Construct the graph", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "entry", "=", "[", "]", "\n", "for", "edge", ",", "w", "in", "edges", ".", "items", "(", ")", ":", "\n", "        ", "i", ",", "j", "=", "edge", "\n", "row", ".", "append", "(", "i", ")", "\n", "col", ".", "append", "(", "j", ")", "\n", "entry", ".", "append", "(", "w", ")", "\n", "", "graph", "=", "csr_matrix", "(", "(", "entry", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "len", "(", "u2index", ")", ",", "len", "(", "p2index", ")", ")", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.main_e2e.load_data_weibo": [[111, 183], ["set", "set", "print", "list", "numpy.random.shuffle", "numpy.array", "numpy.arange", "numpy.arange", "numpy.arange", "print", "print", "print", "numpy.load", "pickle.load", "pk.load.items", "collections.Counter", "int", "collections.Counter.items", "scipy.sparse.csr_matrix", "numpy.zeros", "u2index.items", "numpy.sum", "open", "len", "len", "open", "open", "open", "row.append", "col.append", "entry.append", "scipy.sparse.csr_matrix.getrow", "graph.getrow.dot", "line.strip().split", "list.add", "np.array.append", "np.array.append", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "line.strip().split", "int", "len", "set.add", "len", "len", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "str", "len", "len", "line.strip", "line.strip"], "function", ["None"], ["", "def", "load_data_weibo", "(", "graph_num", ")", ":", "\n", "    ", "\"\"\" Initialize u2index, labels, train/validation/test indices \"\"\"", "\n", "u_all", "=", "set", "(", ")", "\n", "pos_uids", "=", "set", "(", ")", "\n", "with", "open", "(", "'../data/weibo/userlabels'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "arr", "=", "line", ".", "strip", "(", "'\\r\\n'", ")", ".", "split", "(", "','", ")", "\n", "uid", "=", "arr", "[", "0", "]", "\n", "u_all", ".", "add", "(", "uid", ")", "\n", "if", "arr", "[", "1", "]", "==", "'anomaly'", ":", "\n", "                ", "pos_uids", ".", "add", "(", "uid", ")", "\n", "", "", "", "print", "(", "f'loaded labels, total of {len(u_all)} users with {len(pos_uids)} positive users'", ")", "\n", "u_all", "=", "list", "(", "u_all", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "u_all", ")", "\n", "u2index", "=", "{", "}", "\n", "labels", "=", "[", "]", "\n", "for", "u", "in", "u_all", ":", "\n", "        ", "u2index", "[", "u", "]", "=", "len", "(", "u2index", ")", "\n", "if", "u", "in", "pos_uids", ":", "\n", "            ", "labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "0", ")", "\n", "", "", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "n_train", "=", "5000", "\n", "n_val", "=", "5000", "\n", "n_test", "=", "len", "(", "u_all", ")", "-", "10000", "\n", "idx_train", "=", "np", ".", "arange", "(", "n_train", ")", "\n", "idx_val", "=", "np", ".", "arange", "(", "n_train", ",", "n_train", "+", "n_val", ")", "\n", "idx_test", "=", "np", ".", "arange", "(", "n_train", "+", "n_val", ",", "n_train", "+", "n_val", "+", "n_test", ")", "\n", "tvt_idx", "=", "(", "idx_train", ",", "idx_val", ",", "idx_test", ")", "\n", "print", "(", "'Train: total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_train", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_train", "]", ")", ",", "len", "(", "idx_train", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_train", "]", ")", ")", ")", "\n", "print", "(", "'Val:   total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_val", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_val", "]", ")", ",", "len", "(", "idx_val", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_val", "]", ")", ")", ")", "\n", "print", "(", "'Test:  total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_test", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_test", "]", ")", ",", "len", "(", "idx_test", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_test", "]", ")", ")", ")", "\n", "# Get Features", "\n", "item_features", "=", "np", ".", "load", "(", "open", "(", "'../data/weibo/prod2vec.npy'", ",", "'rb'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "p2index_i", "=", "pk", ".", "load", "(", "open", "(", "'../data/weibo/p2index.pkl'", ",", "'rb'", ")", ")", "\n", "p2index", "=", "{", "}", "\n", "for", "p", ",", "i", "in", "p2index_i", ".", "items", "(", ")", ":", "\n", "        ", "p2index", "[", "str", "(", "p", ")", "]", "=", "i", "\n", "\n", "", "\"\"\" Get graph, graph features, and initialize u2index, p2index \"\"\"", "\n", "edges", "=", "Counter", "(", ")", "\n", "n", "=", "int", "(", "graph_num", "*", "10", ")", "\n", "edgelist_file", "=", "f'../data/weibo/splitted_edgelist_{n}'", "if", "n", "<", "10", "else", "'../data/weibo/edgelist'", "\n", "with", "open", "(", "edgelist_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "arr", "=", "line", ".", "strip", "(", "'\\r\\n'", ")", ".", "split", "(", "','", ")", "\n", "u", "=", "arr", "[", "0", "]", "\n", "p", "=", "arr", "[", "1", "]", "\n", "t", "=", "int", "(", "arr", "[", "2", "]", ")", "\n", "assert", "p", "in", "p2index", "\n", "edges", "[", "(", "u2index", "[", "u", "]", ",", "p2index", "[", "p", "]", ")", "]", "+=", "1", "\n", "# Construct the graph", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "entry", "=", "[", "]", "\n", "for", "edge", ",", "w", "in", "edges", ".", "items", "(", ")", ":", "\n", "        ", "i", ",", "j", "=", "edge", "\n", "row", ".", "append", "(", "i", ")", "\n", "col", ".", "append", "(", "j", ")", "\n", "entry", ".", "append", "(", "w", ")", "\n", "", "graph", "=", "csr_matrix", "(", "(", "entry", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "len", "(", "u2index", ")", ",", "len", "(", "p2index", ")", ")", ")", "\n", "# Construct features", "\n", "user_features", "=", "np", ".", "zeros", "(", "(", "len", "(", "u2index", ")", ",", "300", ")", ")", "\n", "for", "u", ",", "index", "in", "u2index", ".", "items", "(", ")", ":", "\n", "        ", "cur_row", "=", "graph", ".", "getrow", "(", "index", ")", "\n", "user_features", "[", "index", "]", "=", "cur_row", ".", "dot", "(", "item_features", ")", "\n", "# normalize the user_features", "\n", "", "w", "=", "np", ".", "sum", "(", "graph", ",", "axis", "=", "1", ")", "\n", "user_features", "=", "user_features", "/", "w", "\n", "\n", "return", "u2index", ",", "labels", ",", "tvt_idx", ",", "user_features", ",", "p2index", ",", "item_features", ",", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.main_e2e.load_data": [[184, 241], ["set", "set", "set", "print", "pickle.load", "numpy.load", "pickle.load", "numpy.load", "numpy.zeros", "labels.astype.astype", "pickle.load", "print", "print", "print", "collections.Counter", "int", "collections.Counter.items", "scipy.sparse.csr_matrix", "open", "open", "open", "open", "open", "len", "open", "open", "row.append", "col.append", "entry.append", "line.strip().split", "set.add", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "line.strip().split", "int", "set.add", "set.add", "len", "len", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "len", "line.strip", "set.add", "line.strip"], "function", ["None"], ["", "def", "load_data", "(", "ds", ",", "graph_num", ")", ":", "\n", "    ", "\"\"\" Initialize u2index, labels, train/validation/test indices \"\"\"", "\n", "u_all", "=", "set", "(", ")", "\n", "pos_uids", "=", "set", "(", ")", "\n", "labeled_uids", "=", "set", "(", ")", "\n", "with", "open", "(", "f'../data/{ds}/userlabels'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "arr", "=", "line", ".", "strip", "(", "'\\r\\n'", ")", ".", "split", "(", "','", ")", "\n", "u_all", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "if", "arr", "[", "1", "]", "==", "'anomaly'", ":", "\n", "                ", "pos_uids", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "labeled_uids", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "", "elif", "arr", "[", "1", "]", "==", "'benign'", ":", "\n", "                ", "labeled_uids", ".", "add", "(", "arr", "[", "0", "]", ")", "\n", "", "", "", "print", "(", "f'loaded labels, total of {len(pos_uids)} positive users and {len(labeled_uids)} labeled users'", ")", "\n", "\n", "# get users' features", "\n", "u2index", "=", "pk", ".", "load", "(", "open", "(", "f'../data/{ds}/u2index.pkl'", ",", "'rb'", ")", ")", "\n", "user_feats", "=", "np", ".", "load", "(", "open", "(", "f'../data/{ds}/user2vec.npy'", ",", "'rb'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "# Get prod features", "\n", "p2index", "=", "pk", ".", "load", "(", "open", "(", "f'../data/{ds}/p2index.pkl'", ",", "'rb'", ")", ")", "\n", "item_feats", "=", "np", ".", "load", "(", "open", "(", "f'../data/{ds}/prod2vec.npy'", ",", "'rb'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "labels", "=", "np", ".", "zeros", "(", "len", "(", "u2index", ")", ")", "\n", "for", "u", "in", "u2index", ":", "\n", "        ", "if", "u", "in", "pos_uids", ":", "\n", "            ", "labels", "[", "u2index", "[", "u", "]", "]", "=", "1", "\n", "", "", "labels", "=", "labels", ".", "astype", "(", "int", ")", "\n", "\n", "tvt_idx", "=", "pk", ".", "load", "(", "open", "(", "f'../data/{ds}/tvt_idx.pkl'", ",", "'rb'", ")", ")", "\n", "idx_train", ",", "idx_val", ",", "idx_test", "=", "tvt_idx", "\n", "print", "(", "'Train: total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_train", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_train", "]", ")", ",", "len", "(", "idx_train", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_train", "]", ")", ")", ")", "\n", "print", "(", "'Val:   total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_val", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_val", "]", ")", ",", "len", "(", "idx_val", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_val", "]", ")", ")", ")", "\n", "print", "(", "'Test:  total of {:5} users with {:5} pos users and {:5} neg users'", ".", "format", "(", "len", "(", "idx_test", ")", ",", "np", ".", "sum", "(", "labels", "[", "idx_test", "]", ")", ",", "len", "(", "idx_test", ")", "-", "np", ".", "sum", "(", "labels", "[", "idx_test", "]", ")", ")", ")", "\n", "\n", "\"\"\" Get graph, graph features, and initialize u2index, p2index \"\"\"", "\n", "edges", "=", "Counter", "(", ")", "\n", "n", "=", "int", "(", "graph_num", "*", "10", ")", "\n", "edgelist_file", "=", "f'../data/{ds}/splitted_edgelist_{n}'", "if", "n", "<", "10", "else", "f'../data/{ds}/edgelist'", "\n", "with", "open", "(", "edgelist_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "arr", "=", "line", ".", "strip", "(", "'\\r\\n'", ")", ".", "split", "(", "','", ")", "\n", "u", "=", "arr", "[", "0", "]", "\n", "p", "=", "arr", "[", "1", "]", "\n", "t", "=", "int", "(", "arr", "[", "2", "]", ")", "\n", "edges", "[", "(", "u2index", "[", "u", "]", ",", "p2index", "[", "p", "]", ")", "]", "+=", "1", "\n", "# Construct the graph", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "entry", "=", "[", "]", "\n", "for", "edge", ",", "w", "in", "edges", ".", "items", "(", ")", ":", "\n", "        ", "i", ",", "j", "=", "edge", "\n", "row", ".", "append", "(", "i", ")", "\n", "col", ".", "append", "(", "j", ")", "\n", "entry", ".", "append", "(", "w", ")", "\n", "", "graph", "=", "csr_matrix", "(", "(", "entry", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "len", "(", "u2index", ")", ",", "len", "(", "p2index", ")", ")", ")", "\n", "return", "u2index", ",", "labels", ",", "tvt_idx", ",", "user_feats", ",", "p2index", ",", "item_feats", ",", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.main_e2e.main": [[242, 272], ["int", "Datasets.MyDataSet", "torch.utils.data.DataLoader", "main_e2e.load_data_weibo", "main_e2e.load_data", "model.Eland_e2e_unsup.Eland_e2e_uns", "model.Eland_e2e.Eland_e2e", "model.Eland_e2e.Eland_e2e.train", "model.Eland_e2e.Eland_e2e.pretrain_nc_net"], "function", ["home.repos.pwc.inspect_result.dm2-nd_eland.None.main_e2e.load_data_weibo", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.load_data", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.pretrain_nc_net"], ["", "def", "main", "(", "ds", ",", "graph_num", "=", "0.1", ",", "name", "=", "'debug'", ",", "baseline", "=", "False", ",", "gnnlayer_type", "=", "'gcn'", ",", "rnnlayer_type", "=", "'lstm'", ",", "device", "=", "'cpu'", ")", ":", "\n", "# Graph", "\n", "    ", "if", "ds", "==", "'weibo'", ":", "\n", "        ", "u2index", ",", "labels", ",", "tvt_nids", ",", "user_features", ",", "p2index", ",", "item_features", ",", "graph", "=", "load_data_weibo", "(", "graph_num", ")", "\n", "", "else", ":", "\n", "        ", "u2index", ",", "labels", ",", "tvt_nids", ",", "user_features", ",", "p2index", ",", "item_features", ",", "graph", "=", "load_data", "(", "ds", ",", "graph_num", ")", "\n", "", "if", "ds", "==", "'amazon'", ":", "\n", "        ", "base_pred", "=", "500", "\n", "", "else", ":", "\n", "        ", "base_pred", "=", "30", "\n", "# DataLoader", "\n", "", "n", "=", "int", "(", "graph_num", "*", "10", ")", "\n", "edgelist_file", "=", "f'../data/{ds}/splitted_edgelist_{n}'", "if", "n", "<", "10", "else", "f'../data/{ds}/edgelist'", "\n", "dataset", "=", "MyDataSet", "(", "p2index", ",", "item_features", ",", "edgelist_file", ")", "\n", "lstm_dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "300", ")", "\n", "if", "args", ".", "method", "in", "(", "'dominant'", ",", "'deepae'", ")", ":", "\n", "        ", "eland", "=", "Eland_e2e_uns", "(", "graph", ",", "lstm_dataloader", ",", "user_features", ",", "\n", "item_features", ",", "labels", ",", "tvt_nids", ",", "u2index", ",", "\n", "p2index", ",", "item_features", ",", "lr", "=", "0.01", ",", "n_layers", "=", "2", ",", "name", "=", "name", ",", "pretrain_bm", "=", "25", ",", "\n", "pretrain_nc", "=", "25", ",", "epochs", "=", "400", ",", "method", "=", "args", ".", "method", ",", "rnn_type", "=", "rnnlayer_type", ",", "bmloss_type", "=", "'mse'", ",", "device", "=", "device", ",", "base_pred", "=", "base_pred", ")", "\n", "", "else", ":", "\n", "        ", "eland", "=", "Eland_e2e", "(", "graph", ",", "lstm_dataloader", ",", "user_features", ",", "\n", "item_features", ",", "labels", ",", "tvt_nids", ",", "u2index", ",", "\n", "p2index", ",", "item_features", ",", "lr", "=", "0.01", ",", "n_layers", "=", "2", ",", "name", "=", "name", ",", "pretrain_bm", "=", "25", ",", "\n", "pretrain_nc", "=", "300", ",", "gnnlayer_type", "=", "gnnlayer_type", ",", "rnn_type", "=", "rnnlayer_type", ",", "bmloss_type", "=", "'mse'", ",", "device", "=", "device", ",", "base_pred", "=", "base_pred", ")", "\n", "", "if", "not", "baseline", ":", "\n", "        ", "auc", ",", "ap", "=", "eland", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "auc", ",", "ap", "=", "eland", ".", "pretrain_nc_net", "(", "n_epochs", "=", "300", ")", "\n", "", "return", "auc", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.__init__": [[14, 26], ["Datasets.MyDataSet.init_data", "list", "Datasets.MyDataSet.get_max_len", "Datasets.MyDataSet.u2pt.keys"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.init_data", "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.get_max_len"], ["def", "__init__", "(", "self", ",", "p2index", ",", "item_features", ",", "edgelist_file", ",", "max_len", "=", "30", ",", "thresh", "=", "0.004", ")", ":", "\n", "\t\t", "self", ".", "p2idx", "=", "p2index", "\n", "self", ".", "idx2feats", "=", "item_features", "\n", "self", ".", "graph_path", "=", "edgelist_file", "\n", "self", ".", "tmax", ",", "self", ".", "tmin", "=", "None", ",", "None", "\n", "self", ".", "thresh", "=", "thresh", "\n", "self", ".", "init_data", "(", ")", "\n", "if", "not", "max_len", ":", "\n", "\t\t\t", "self", ".", "max_len", "=", "self", ".", "get_max_len", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "max_len", "=", "max_len", "\n", "", "self", ".", "uids", "=", "list", "(", "self", ".", "u2pt", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "u2pt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.__getitem__": [[30, 45], ["torch.is_tensor", "Datasets.MyDataSet.transform", "min", "idx.tolist.tolist.tolist", "len", "numpy.array", "numpy.array", "numpy.array", "enumerate"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "\t\t\t", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "", "uid", "=", "self", ".", "uids", "[", "idx", "]", "\n", "# Read the data", "\n", "data", "=", "self", ".", "u2pt", "[", "uid", "]", "\n", "# Transform the data", "\n", "pids", ",", "feats", ",", "feature_length", "=", "self", ".", "transform", "(", "data", ")", "\n", "\n", "# Construct Flags", "\n", "repeat_flags", "=", "[", "1", "if", "pid", "in", "pids", "[", ":", "idx", "]", "else", "0", "for", "(", "idx", ",", "pid", ")", "in", "enumerate", "(", "pids", "[", "1", ":", "]", ")", "]", "\n", "target_length", "=", "min", "(", "len", "(", "repeat_flags", ")", ",", "self", ".", "max_len", ")", "\n", "repeat_flags", "=", "repeat_flags", "+", "[", "0", "]", "*", "(", "self", ".", "max_len", "-", "target_length", ")", "if", "self", ".", "max_len", ">", "target_length", "else", "repeat_flags", "[", "-", "self", ".", "max_len", ":", "]", "\n", "# Repeat_labels: Binary nd-array. 1-if repeat, 0-if not", "\n", "return", "uid", ",", "np", ".", "array", "(", "feats", ",", "dtype", "=", "float", ")", ",", "np", ".", "array", "(", "repeat_flags", ")", ",", "np", ".", "array", "(", "feature_length", ")", "# torch.FloatTensor(repeat_flags)", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.transform": [[46, 63], ["sorted", "min", "pids.append", "feats.append", "len", "numpy.array", "len", "range"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tdata: has shape of (n, 2) where dim-0 represents the number of posts,\n\t\t\t\t\tand dim-1 represents pid and time\n\t\t\tThe functoin returns 2 lists; first is pids and the second are the features\n\t\t\"\"\"", "\n", "pids", "=", "[", "]", "\n", "feats", "=", "[", "]", "\n", "data", "=", "sorted", "(", "data", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "for", "(", "pid", ",", "t", ")", "in", "data", ":", "\n", "\t\t\t", "pids", ".", "append", "(", "pid", ")", "\n", "feats", ".", "append", "(", "self", ".", "idx2feats", "[", "self", ".", "p2idx", "[", "pid", "]", "]", ")", "\n", "# Using zero to pad sequence", "\n", "", "feature_length", "=", "min", "(", "len", "(", "feats", ")", ",", "self", ".", "max_len", ")", "\n", "feats", "=", "feats", "+", "[", "[", "0", "]", "*", "len", "(", "feats", "[", "0", "]", ")", "for", "_", "in", "range", "(", "self", ".", "max_len", "-", "feature_length", ")", "]", "if", "self", ".", "max_len", ">", "feature_length", "else", "feats", "[", "-", "self", ".", "max_len", ":", "]", "\n", "\n", "return", "pids", ",", "np", ".", "array", "(", "feats", ")", ",", "feature_length", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.normalize_t": [[64, 66], ["None"], "methods", ["None"], ["", "def", "normalize_t", "(", "self", ",", "t", ")", ":", "\n", "\t\t", "return", "(", "t", "-", "self", ".", "tmin", ")", "/", "(", "self", ".", "tmax", "-", "self", ".", "tmin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.get_p2feats": [[67, 77], ["gc.disable", "numpy.load", "pickle.load", "gc.enable", "open", "open"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_p2feats", "(", "feats_path", ")", ":", "\n", "\t\t", "gc", ".", "disable", "(", ")", "\n", "\n", "idx2feats", "=", "np", ".", "load", "(", "open", "(", "feats_path", "+", "'post2vec.npy'", ",", "'rb'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "p2idx", "=", "pickle", ".", "load", "(", "open", "(", "feats_path", "+", "'post2idx.pkl'", ",", "'rb'", ")", ")", "\n", "\n", "gc", ".", "enable", "(", ")", "\n", "\n", "return", "idx2feats", ",", "p2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.get_uids": [[78, 81], ["glob.glob.glob"], "methods", ["None"], ["", "def", "get_uids", "(", "self", ",", "graph_path", ")", ":", "\n", "\t\t", "uids", "=", "glob", "(", "graph_path", ")", "\n", "return", "uids", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.init_data": [[82, 99], ["collections.defaultdict", "open", "tqdm.tqdm.tqdm", "open.close", "Datasets.MyDataSet.u2pt.keys", "line.split", "Datasets.MyDataSet.u2pt[].append", "int", "len", "remove_ulist.append"], "methods", ["None"], ["", "def", "init_data", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "u2pt", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "total_edges", "=", "0", "\n", "file", "=", "open", "(", "self", ".", "graph_path", ")", "\n", "for", "line", "in", "tqdm", "(", "file", ")", ":", "\n", "\t\t\t", "self", ".", "total_edges", "+=", "1", "\n", "tmp", "=", "line", ".", "split", "(", "','", ")", "\n", "uid", ",", "pid", ",", "t", "=", "tmp", "[", "0", "]", ",", "tmp", "[", "1", "]", ",", "int", "(", "tmp", "[", "2", "]", ")", "\n", "self", ".", "u2pt", "[", "uid", "]", ".", "append", "(", "[", "pid", ",", "t", "]", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "remove_ulist", "=", "[", "]", "\n", "for", "u", "in", "self", ".", "u2pt", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "if", "len", "(", "self", ".", "u2pt", "[", "u", "]", ")", "<", "2", ":", "\n", "\t\t\t\t", "remove_ulist", ".", "append", "(", "u", ")", "\n", "self", ".", "total_edges", "-=", "1", "\n", "", "", "for", "u", "in", "remove_ulist", ":", "\n", "\t\t\t", "del", "self", ".", "u2pt", "[", "u", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.None.Datasets.MyDataSet.get_max_len": [[100, 107], ["Datasets.MyDataSet.u2pt.keys", "len"], "methods", ["None"], ["", "", "def", "get_max_len", "(", "self", ")", ":", "\n", "\t\t", "ret", "=", "0", "\n", "for", "u", "in", "self", ".", "u2pt", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "cur_len", "=", "len", "(", "self", ".", "u2pt", "[", "u", "]", ")", "\n", "if", "cur_len", ">", "ret", ":", "\n", "\t\t\t\t", "ret", "=", "cur_len", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.Eland_itr.__init__": [[19, 62], ["len", "locals", "Eland_itr.Eland_itr.log_parameters", "Eland_itr.Eland_itr.load_data", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "numpy.unique", "Eland_itr.Eland_itr.get_logger", "logging.getLogger", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.log_parameters", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.load_data", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.get_logger"], ["\t", "def", "__init__", "(", "self", ",", "adj_matrix", ",", "lstm_dataloader", ",", "user_features", ",", "item_features", ",", "\n", "labels", ",", "tvt_nids", ",", "u2index", ",", "p2index", ",", "idx2feats", ",", "dim_feats", "=", "300", ",", "cuda", "=", "0", ",", "hidden_size", "=", "128", ",", "n_layers", "=", "4", ",", "\n", "epochs", "=", "300", ",", "seed", "=", "-", "1", ",", "lr", "=", "0.001", ",", "weight_decay", "=", "5e-4", ",", "dropout", "=", "0.4", ",", "\n", "log", "=", "True", ",", "name", "=", "'debug'", ",", "gnnlayer_type", "=", "'gsage'", ",", "rnn_type", "=", "'lstm'", ",", "bmloss_type", "=", "'mse'", ",", "device", "=", "'cuda'", ",", "base_pred", "=", "150", ",", "bm_epochs", "=", "25", ")", ":", "\n", "\t\t", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "n_epochs", "=", "epochs", "\n", "self", ".", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "train_nid", ",", "self", ".", "val_nid", ",", "self", ".", "test_nid", "=", "tvt_nids", "\n", "self", ".", "lstm_dataloader", "=", "lstm_dataloader", "\n", "self", ".", "tvt_nids", "=", "tvt_nids", "\n", "self", ".", "u2index", "=", "u2index", "\n", "self", ".", "p2index", "=", "p2index", "\n", "self", ".", "dim_feats", "=", "dim_feats", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "gnnlayer_type", "=", "gnnlayer_type", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "self", ".", "base_pred", "=", "base_pred", "\n", "self", ".", "bm_epochs", "=", "bm_epochs", "\n", "if", "log", ":", "\n", "\t\t\t", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "name", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "# Fix random seed if needed", "\n", "", "if", "seed", ">", "0", ":", "\n", "\t\t\t", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "# if not torch.cuda.is_available():", "\n", "# \tcuda = -1", "\n", "# self.device = torch.device(f'cuda: {cuda}' if cuda >= 0 else 'cpu')", "\n", "", "self", ".", "device", "=", "device", "\n", "# Log parameters for reference", "\n", "all_vars", "=", "locals", "(", ")", "\n", "self", ".", "log_parameters", "(", "all_vars", ")", "\n", "# load data", "\n", "self", ".", "load_data", "(", "adj_matrix", ",", "user_features", ",", "item_features", ",", "self", ".", "labels", ",", "tvt_nids", ",", "gnnlayer_type", ",", "idx2feats", ")", "\n", "self", ".", "idx2feats", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "idx2feats", ")", "\n", "# idx2feats = idx2feats.to(self.device)", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.Eland_itr.load_data": [[64, 86], ["isinstance", "isinstance", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "isinstance", "scipy.issparse", "scipysp_to_pytorchsp().to_dense", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "isinstance", "scipy.coo_matrix", "Eland_itr.scipysp_to_pytorchsp"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.scipysp_to_pytorchsp"], ["", "def", "load_data", "(", "self", ",", "adj_matrix", ",", "user_features", ",", "item_features", ",", "labels", ",", "tvt_nids", ",", "gnnlayer_type", ",", "idx2feats", ")", ":", "\n", "\t\t", "\"\"\"Process data\"\"\"", "\n", "if", "isinstance", "(", "user_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "\t\t\t", "self", ".", "user_features", "=", "user_features", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "user_features", "=", "torch", ".", "FloatTensor", "(", "user_features", ")", "\n", "\n", "", "if", "isinstance", "(", "item_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "\t\t\t", "self", ".", "item_features", "=", "item_features", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "item_features", "=", "torch", ".", "FloatTensor", "(", "item_features", ")", "\n", "# Normalize", "\n", "", "self", ".", "user_features", "=", "F", ".", "normalize", "(", "self", ".", "user_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "self", ".", "item_features", "=", "F", ".", "normalize", "(", "self", ".", "item_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "if", "isinstance", "(", "labels", ",", "torch", ".", "LongTensor", ")", ":", "\n", "\t\t\t", "self", ".", "labels", "=", "labels", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "", "assert", "sp", ".", "issparse", "(", "adj_matrix", ")", "\n", "if", "not", "isinstance", "(", "adj_matrix", ",", "sp", ".", "coo_matrix", ")", ":", "\n", "\t\t\t", "adj_matrix", "=", "sp", ".", "coo_matrix", "(", "adj_matrix", ")", "\n", "", "self", ".", "adj", "=", "scipysp_to_pytorchsp", "(", "adj_matrix", ")", ".", "to_dense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.Eland_itr.train": [[87, 114], ["Eland_itr.GNN_Model", "Eland_itr.Eland_itr.gnn_model.fit", "Eland_itr.Eland_itr.eval_node_cls", "Eland_itr.Eland_itr.logger.info", "range", "Eland_itr.GAU_Model", "Eland_itr.GNN_Model", "Eland_itr.Eland_itr.adj.clone", "Eland_itr.Eland_itr.gau_model.train", "Eland_itr.Eland_itr.gau_model.inference", "Eland_itr.Eland_itr.gnn_model.fit", "Eland_itr.Eland_itr.eval_node_cls", "Eland_itr.Eland_itr.logger.info", "auc_list.append", "ap_list.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GNN_Model.fit", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GAU_Model.inference", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GNN_Model.fit", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "def", "train", "(", "self", ",", "total_epochs", "=", "8", ")", ":", "\n", "# torch.manual_seed(12345)", "\n", "\t\t", "self", ".", "gnn_model", "=", "GNN_Model", "(", "dim_feats", "=", "self", ".", "dim_feats", ",", "dim_h", "=", "self", ".", "hidden_size", ",", "user_features", "=", "self", ".", "user_features", ",", "\n", "item_features", "=", "self", ".", "item_features", ",", "tvt_nids", "=", "self", ".", "tvt_nids", ",", "labels", "=", "self", ".", "labels", ",", "n_classes", "=", "self", ".", "n_classes", ",", "\n", "n_layers", "=", "self", ".", "n_layers", ",", "activation", "=", "F", ".", "relu", ",", "dropout", "=", "self", ".", "dropout", ",", "gnnlayer_type", "=", "self", ".", "gnnlayer_type", ",", "\n", "logger", "=", "self", ".", "logger", ",", "device", "=", "self", ".", "device", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "nc_logits", ",", "embs", "=", "self", ".", "gnn_model", ".", "fit", "(", "self", ".", "adj", ",", "n_epochs", "=", "300", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Baseline: auc {:.5f}, ap {:.5f}'", ".", "format", "(", "res", "[", "'auc'", "]", ",", "res", "[", "'ap'", "]", ")", ")", "\n", "auc_list", ",", "ap_list", "=", "[", "]", ",", "[", "]", "\n", "for", "epoch", "in", "range", "(", "total_epochs", ")", ":", "\n", "\t\t\t", "self", ".", "gau_model", "=", "GAU_Model", "(", "dim_feats", "=", "self", ".", "dim_feats", ",", "dim_h", "=", "self", ".", "hidden_size", ",", "u2idx", "=", "self", ".", "u2index", ",", "idx2feats", "=", "self", ".", "idx2feats", ",", "\n", "p2idx", "=", "self", ".", "p2index", ",", "rnn_type", "=", "self", ".", "rnn_type", ",", "lstm_dataloader", "=", "self", ".", "lstm_dataloader", ",", "device", "=", "self", ".", "device", ",", "\n", "logger", "=", "self", ".", "logger", ",", "lr", "=", "self", ".", "lr", "*", "5", ",", "embs", "=", "embs", ",", "bmloss_type", "=", "self", ".", "bmloss_type", ")", "\n", "self", ".", "gnn_model", "=", "GNN_Model", "(", "dim_feats", "=", "self", ".", "dim_feats", ",", "dim_h", "=", "self", ".", "hidden_size", ",", "user_features", "=", "self", ".", "user_features", ",", "\n", "item_features", "=", "self", ".", "item_features", ",", "tvt_nids", "=", "self", ".", "tvt_nids", ",", "labels", "=", "self", ".", "labels", ",", "n_classes", "=", "self", ".", "n_classes", ",", "\n", "n_layers", "=", "self", ".", "n_layers", ",", "activation", "=", "F", ".", "relu", ",", "dropout", "=", "self", ".", "dropout", ",", "gnnlayer_type", "=", "self", ".", "gnnlayer_type", ",", "\n", "logger", "=", "self", ".", "logger", ",", "device", "=", "self", ".", "device", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "self", ".", "gau_model", ".", "train", "(", "n_epochs", "=", "self", ".", "bm_epochs", ")", "\n", "input_adj", "=", "self", ".", "gau_model", ".", "inference", "(", "input_adj", ",", "nc_logits", ",", "self", ".", "base_pred", ")", "\n", "nc_logits", ",", "embs", "=", "self", ".", "gnn_model", ".", "fit", "(", "input_adj", ",", "n_epochs", "=", "300", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Epoch {}/{}: auc {:.5f}, ap {:.5f}'", ".", "format", "(", "epoch", "+", "1", ",", "total_epochs", ",", "res", "[", "'auc'", "]", ",", "res", "[", "'ap'", "]", ")", ")", "\n", "auc_list", ".", "append", "(", "res", "[", "'auc'", "]", ")", "\n", "ap_list", ".", "append", "(", "res", "[", "'ap'", "]", ")", "\n", "", "return", "np", ".", "max", "(", "auc_list", ")", ",", "np", ".", "max", "(", "ap_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.Eland_itr.get_logger": [[115, 135], ["logging.getLogger", "logging.getLogger.hasHandlers", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.handlers.clear", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_logger", "(", "name", ")", ":", "\n", "\t\t", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "(", "logger", ".", "hasHandlers", "(", ")", ")", ":", "\n", "\t\t\t", "logger", ".", "handlers", ".", "clear", "(", ")", "\n", "", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# Foramtter", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(message)s'", ")", "\n", "# console handler", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "# create file handler", "\n", "if", "name", "is", "not", "None", ":", "\n", "\t\t\t", "fh", "=", "logging", ".", "FileHandler", "(", "f'logs/ELANDitr-{name}.log'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.Eland_itr.eval_node_cls": [[136, 166], ["logits.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.argmax", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "sklearn.metrics.roc_curve", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.average_precision_score", "numpy.nan_to_num", "numpy.argmax", "sklearn.metrics.f1_score", "numpy.zeros", "logits.cpu().numpy.cpu().numpy.cpu", "labels.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_node_cls", "(", "logits", ",", "labels", ",", "n_classes", ")", ":", "\n", "\t\t", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "logits", "=", "logits", ".", "T", "[", "1", "]", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "roc_auc", "=", "roc_auc_score", "(", "labels", ",", "logits", ")", "\n", "precisions", ",", "recalls", ",", "_", "=", "precision_recall_curve", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "# pr_auc = metrics.auc(recalls, precisions)", "\n", "ap", "=", "average_precision_score", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "f1s", "=", "np", ".", "nan_to_num", "(", "2", "*", "precisions", "*", "recalls", "/", "(", "precisions", "+", "recalls", ")", ")", "\n", "best_comb", "=", "np", ".", "argmax", "(", "f1s", ")", "\n", "f1", "=", "f1_score", "(", "labels", ",", "y_pred", ")", "\n", "pre", "=", "precisions", "[", "best_comb", "]", "\n", "rec", "=", "recalls", "[", "best_comb", "]", "\n", "# calc confusion matrix", "\n", "conf_mat", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "# for i in range(len(preds)):", "\n", "# \tconf_mat[labels[i], preds[i]] += 1", "\n", "results", "=", "{", "\n", "'pre'", ":", "pre", ",", "\n", "'rec'", ":", "rec", ",", "\n", "'f1'", ":", "f1", ",", "\n", "'ap'", ":", "ap", ",", "\n", "'conf'", ":", "conf_mat", ",", "\n", "'auc'", ":", "roc_auc", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.Eland_itr.log_parameters": [[167, 179], ["Eland_itr.Eland_itr.logger.info"], "methods", ["None"], ["", "def", "log_parameters", "(", "self", ",", "all_vars", ")", ":", "\n", "\t\t", "del", "all_vars", "[", "'self'", "]", "\n", "del", "all_vars", "[", "'adj_matrix'", "]", "\n", "del", "all_vars", "[", "'user_features'", "]", "\n", "del", "all_vars", "[", "'item_features'", "]", "\n", "del", "all_vars", "[", "'labels'", "]", "\n", "del", "all_vars", "[", "'tvt_nids'", "]", "\n", "del", "all_vars", "[", "'lstm_dataloader'", "]", "\n", "del", "all_vars", "[", "'u2index'", "]", "\n", "del", "all_vars", "[", "'p2index'", "]", "\n", "del", "all_vars", "[", "'idx2feats'", "]", "\n", "self", ".", "logger", ".", "info", "(", "f'Parameters: {all_vars}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GNN_Model.__init__": [[181, 194], ["model_zoo.GNN"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "user_features", ",", "item_features", ",", "n_classes", ",", "\n", "n_layers", ",", "activation", ",", "dropout", ",", "gnnlayer_type", ",", "tvt_nids", ",", "labels", ",", "device", ",", "logger", ",", "lr", ",", "weight_decay", ")", ":", "\n", "\t\t", "self", ".", "gnn", "=", "GNN", "(", "dim_feats", "=", "dim_feats", ",", "dim_h", "=", "dim_h", ",", "n_classes", "=", "n_classes", ",", "\n", "n_layers", "=", "n_layers", ",", "activation", "=", "F", ".", "relu", ",", "dropout", "=", "dropout", ",", "gnnlayer_type", "=", "gnnlayer_type", ")", "\n", "self", ".", "user_features", "=", "user_features", "\n", "self", ".", "item_features", "=", "item_features", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "train_nid", ",", "self", ".", "val_nid", ",", "self", ".", "test_nid", "=", "tvt_nids", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GNN_Model.fit": [[195, 243], ["Eland_itr.GNN_Model.user_features.to", "Eland_itr.GNN_Model.item_features.to", "Eland_itr.GNN_Model.gnn.to", "Eland_itr.GNN_Model.labels.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "Eland_itr.GNN_Model.gnn.parameters", "Eland_itr.GNN_Model.gnn.train", "Eland_itr.GNN_Model.gnn.zero_grad", "adj.detach.detach.clone", "input_adj.to.to.to", "Eland_itr.GNN_Model.gnn", "criterion", "criterion.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "adj.detach.detach.detach", "Eland_itr.GNN_Model.gnn.eval", "Eland_itr.GNN_Model.eval_node_cls", "Eland_itr.GNN_Model.eval_node_cls", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adj.detach.detach.clone", "input_adj.to.to.to", "Eland_itr.GNN_Model.gnn", "nc_logits[].detach", "Eland_itr.GNN_Model.eval_node_cls", "print", "Eland_itr.GNN_Model.eval_node_cls", "criterion.item"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "def", "fit", "(", "self", ",", "adj", ",", "n_epochs", "=", "400", ")", ":", "\n", "\t\t", "self", ".", "user_features", "=", "self", ".", "user_features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "item_features", "=", "self", ".", "item_features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "gnn", "=", "self", ".", "gnn", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "criterion", "=", "F", ".", "nll_loss", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "gnn", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "best_val_auc", "=", "0.", "\n", "best_test_auc", "=", "0.", "\n", "best_embs", "=", "None", "\n", "cnt_wait", "=", "0", "\n", "patience", "=", "50", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "\t\t\t", "self", ".", "gnn", ".", "train", "(", ")", "\n", "self", ".", "gnn", ".", "zero_grad", "(", ")", "\n", "input_adj", "=", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits", ",", "_", "=", "self", ".", "gnn", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ")", "\n", "loss", "=", "criterion", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adj", "=", "adj", ".", "detach", "(", ")", "\n", "# Validation", "\n", "self", ".", "gnn", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "input_adj", "=", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits_eval", ",", "embs_eval", "=", "self", ".", "gnn", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ")", "\n", "", "res_training", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ".", "detach", "(", ")", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "val_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "val_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "\n", "if", "res", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "\t\t\t\t", "cnt_wait", "=", "0", "\n", "best_val_auc", "=", "res", "[", "'auc'", "]", "\n", "test_auc", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "[", "'auc'", "]", "\n", "# if test_auc > best_test_auc:", "\n", "best_test_auc", "=", "test_auc", "\n", "best_logits", "=", "nc_logits_eval", "\n", "best_embs", "=", "embs_eval", "\n", "best_res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "cnt_wait", "+=", "1", "\n", "", "print", "(", "'epoch {}/{}, loss {:.5f}, training auc {:.5f}, val auc {:.5f}, best test auc {:.5f}'", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "res_training", "[", "'auc'", "]", ",", "res", "[", "'auc'", "]", ",", "best_res", "[", "'auc'", "]", ")", ")", "\n", "if", "cnt_wait", ">=", "patience", ":", "\n", "\t\t\t\t", "print", "(", "'Early stop!'", ")", "\n", "break", "\n", "", "", "return", "best_logits", ",", "best_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GNN_Model.eval_node_cls": [[244, 274], ["logits.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.argmax", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "sklearn.metrics.f1_score", "numpy.zeros", "logits.cpu().numpy.cpu().numpy.cpu", "labels.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_node_cls", "(", "logits", ",", "labels", ",", "n_classes", ")", ":", "\n", "\t\t", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "logits", "=", "logits", ".", "T", "[", "1", "]", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# fpr, tpr, _ = roc_curve(labels, logits, pos_label=1)", "\n", "roc_auc", "=", "roc_auc_score", "(", "labels", ",", "logits", ")", "\n", "# precisions, recalls, _ = precision_recall_curve(labels, logits, pos_label=1)", "\n", "# pr_auc = metrics.auc(recalls, precisions)", "\n", "ap", "=", "average_precision_score", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "# f1s = np.nan_to_num(2*precisions*recalls/(precisions+recalls))", "\n", "# best_comb = np.argmax(f1s)", "\n", "f1", "=", "f1_score", "(", "labels", ",", "y_pred", ")", "\n", "# pre = precisions[best_comb]", "\n", "# rec = recalls[best_comb]", "\n", "# calc confusion matrix", "\n", "conf_mat", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "# for i in range(len(preds)):", "\n", "# \tconf_mat[labels[i], preds[i]] += 1", "\n", "results", "=", "{", "\n", "# 'pre': pre,", "\n", "# 'rec': rec,", "\n", "'f1'", ":", "f1", ",", "\n", "'ap'", ":", "ap", ",", "\n", "'conf'", ":", "conf_mat", ",", "\n", "'auc'", ":", "roc_auc", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GAU_Model.__init__": [[276, 288], ["model_zoo.GAU_E"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "u2idx", ",", "idx2feats", ",", "p2idx", ",", "rnn_type", ",", "lstm_dataloader", ",", "logger", ",", "device", ",", "lr", ",", "embs", ",", "bmloss_type", ",", "flag_weight", "=", "0.01", ")", ":", "\n", "\t\t", "self", ".", "gau", "=", "GAU_E", "(", "dim_feats", "=", "dim_feats", "+", "dim_h", ",", "dim_h", "=", "dim_h", ",", "idx2feats", "=", "idx2feats", ",", "p2idx", "=", "p2idx", ",", "rnn_type", "=", "rnn_type", ")", "\n", "self", ".", "u2idx", ",", "self", ".", "p2idx", ",", "self", ".", "idx2feats", "=", "u2idx", ",", "p2idx", ",", "idx2feats", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "lstm_dataloader", "=", "lstm_dataloader", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "# For multi-task two-step decoder", "\n", "self", ".", "flag_weight", "=", "flag_weight", "\n", "# For user embedding; dim (len(users), hid_size)", "\n", "self", ".", "embs", "=", "embs", "\n", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GAU_Model.train": [[289, 331], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "Eland_itr.GAU_Model.gau.train", "Eland_itr.GAU_Model.gau.to", "range", "Eland_itr.GAU_Model.gau.parameters", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "print", "Eland_itr.GAU_Model.gau.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "enumerate", "feats.to().float.to().float.to().float", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Eland_itr.GAU_Model.gau", "range", "loss.backward", "cur_loss.append", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "Eland_itr.GAU_Model.gau.zero_grad", "len", "loss.item", "Eland_itr.GAU_Model.gau.parameters", "feats.to().float.to().float.to", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad"], ["", "def", "train", "(", "self", ",", "n_epochs", "=", "15", ")", ":", "\n", "\t\t", "\"\"\" Train the behavioral modelling network \"\"\"", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "gau", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "if", "self", ".", "bmloss_type", "==", "'mse'", ":", "\n", "\t\t\t", "criterion1", "=", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "criterion1", "=", "CosineEmbeddingLoss", "(", ")", "\n", "", "criterion2", "=", "BCELoss", "(", ")", "\n", "self", ".", "gau", ".", "train", "(", ")", "\n", "self", ".", "gau", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "\t\t\t", "print", "(", "'epoch {}/{}'", ".", "format", "(", "epoch", ",", "n_epochs", ")", ")", "\n", "self", ".", "gau", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "cur_loss", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "repeat_flags", ",", "feats_len", ")", "in", "enumerate", "(", "self", ".", "lstm_dataloader", ")", ":", "\n", "# feats: (batch_size, max_len, dim_feats)", "\n", "# We need feats + embs: (batch_idx, max_len, dim_feats + dim_h)", "\n", "\t\t\t\t", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# Select embeddings:", "\n", "# batch_embs: (batch_size, hidden_sz)", "\n", "batch_embs", "=", "self", ".", "embs", "[", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "]", "\n", "# batch_embs = self.embs[[self.u2idx[uid.item()] for uid in uids]]", "\n", "batch_embs", "=", "batch_embs", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "30", ",", "1", ")", "\n", "\n", "input_feats", "=", "torch", ".", "cat", "(", "(", "feats", ",", "batch_embs", ")", ",", "dim", "=", "2", ")", "\n", "# repeat_flags = repeat_flags.to(self.device).float()", "\n", "out", ",", "out_len", "=", "self", ".", "gau", "(", "input_feats", ",", "feats_len", ")", "\n", "loss", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "out_len", ")", ")", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "\t\t\t\t\t\t", "loss", "+=", "criterion1", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "loss", "+=", "criterion1", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ")", "\n", "# loss += 0.1 * criterion2(flag[idx, :out_len[idx]-1], repeat_flags[idx, :out_len[idx]-1])", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "cur_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "gau", ".", "parameters", "(", ")", ",", "5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "gau", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GAU_Model.inference": [[332, 383], ["Eland_itr.GAU_Model.gau.eval", "torch.softmax", "torch.softmax", "torch.softmax", "adj.to.to.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat.to().float", "torch.cat.to().float", "torch.cat.to().float", "range", "int", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Eland_itr.GAU_Model.gau", "delta.squeeze.squeeze.squeeze", "Eland_itr.GAU_Model.match", "enumerate", "range", "torch.cat.to", "torch.cat.to", "torch.cat.to", "max", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "max().item", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "pred_features.detach", "numpy.arange", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "max", "len", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "Eland_itr.GAU_Model.idx2feats.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.match"], ["", "", "", "def", "inference", "(", "self", ",", "adj", ",", "logits", ",", "base_pred", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tlogits: output from nc_net, times base_pred to get the final prediction number for each user\n\t\t\"\"\"", "\n", "self", ".", "gau", ".", "eval", "(", ")", "\n", "logits", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "logits", "=", "logits", ".", "T", "[", "1", "]", "# Probability of being malicious", "\n", "pred_num", "=", "base_pred", "*", "logits", "# pred_num: (n_users)", "\n", "adj", "=", "adj", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "_", ",", "feats_length", ")", "in", "enumerate", "(", "self", ".", "lstm_dataloader", ")", ":", "\n", "\t\t\t\t", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# repeat_flags = repeat_flags", "\n", "# match: delta: (batch_size, feature_size) --> (batch_size, dict_size)", "\n", "# \t\t pred_features: (batch_size, feature_size) --> (batch_size, feature_size)", "\n", "for", "i", "in", "range", "(", "1", ",", "int", "(", "max", "(", "pred_num", ")", ".", "item", "(", ")", "+", "1", ")", ")", ":", "\n", "# Select embeddings:", "\n", "# batch_embs: (batch_size, hidden_sz)", "\n", "\t\t\t\t\t", "batch_embs", "=", "self", ".", "embs", "[", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "]", "\n", "# batch_embs = self.embs[[self.u2idx[uid.item()] for uid in uids]]", "\n", "batch_embs", "=", "batch_embs", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "feats", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "\n", "input_feats", "=", "torch", ".", "cat", "(", "(", "feats", ",", "batch_embs", ")", ",", "dim", "=", "2", ")", "\n", "\n", "out", ",", "out_len", "=", "self", ".", "gau", "(", "input_feats", ",", "feats_length", ")", "\n", "delta", "=", "out", "[", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ",", "out_len", "-", "1", ",", "None", "]", "\n", "# last_flag = flag[np.arange(len(out_len)), out_len-1, None]", "\n", "\n", "# delta: (batch_size, 1, feature_size)", "\n", "# last_flag: (batch_size, 1, 1)", "\n", "delta", "=", "delta", ".", "squeeze", "(", ")", "\n", "# flag = flag.squeeze(1)", "\n", "indices", "=", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "\n", "# indices = [self.u2idx[uid.item()] for uid in uids]", "\n", "# u_delta, pred_features = self.match(delta, last_flag, adj[indices])", "\n", "u_delta", ",", "pred_features", "=", "self", ".", "match", "(", "delta", ",", "adj", "[", "indices", "]", ")", "\n", "# We apply mask based on pred_num", "\n", "for", "idx", ",", "uid", "in", "enumerate", "(", "uids", ")", ":", "\n", "\t\t\t\t\t\t", "if", "pred_num", "[", "self", ".", "u2idx", "[", "uid", "]", "]", "<", "i", ":", "\n", "# if pred_num[self.u2idx[uid.item()]] < i:", "\n", "\t\t\t\t\t\t\t", "u_delta", "[", "idx", "]", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "self", ".", "idx2feats", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0.", ")", "\n", "", "", "adj", "[", "indices", "]", "+=", "u_delta", "\n", "if", "max", "(", "feats_length", ")", ">=", "feats", ".", "size", "(", "1", ")", ":", "\n", "\t\t\t\t\t\t", "feats", "=", "torch", ".", "cat", "(", "(", "feats", ",", "torch", ".", "cuda", ".", "FloatTensor", "(", "feats", ".", "size", "(", "0", ")", ",", "1", ",", "feats", ".", "size", "(", "2", ")", ")", ".", "fill_", "(", "0.", ")", ")", ",", "dim", "=", "1", ")", "\n", "# feats2[:, feats.size(1), :] = torch.zeros(feats.size(2))", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "feats_length", ")", ")", ":", "\n", "\t\t\t\t\t\t", "feats", "[", "idx", "]", "[", "feats_length", "[", "idx", "]", "]", "=", "pred_features", ".", "detach", "(", ")", "[", "idx", "]", "\n", "\n", "", "", "", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GAU_Model.match": [[384, 405], ["Eland_itr.GAU_Model.cosine_similarity", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "similarity_matrix.scatter_.scatter_.zero_", "similarity_matrix.scatter_.scatter_.scatter_", "torch.argmax.view", "torch.argmax.view", "torch.argmax.view", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.cosine_similarity"], ["", "def", "match", "(", "self", ",", "x", ",", "adj", ")", ":", "# (self, x, flag, adj)", "\n", "\t\t", "\"\"\"\n\t\t\tx: (batch_size, features_size)\n\t\t\tflag: (batch_size, 1)\n\t\t\"\"\"", "\n", "similarity_matrix", "=", "self", ".", "cosine_similarity", "(", "x", ",", "self", ".", "idx2feats", ")", "# idx2feats: (dict_sz, feat_sz)", "\n", "# similarity_matrix: (batch_idx, dict_sz)", "\n", "# adj: (batch_idx, dict_sz)", "\n", "# for i, f in enumerate(flag): # Applying mask...", "\n", "#\tif f < 0.5:", "\n", "#\t\tsimilarity_matrix[i] *= (adj[i] == 0)", "\n", "#\telse:", "\n", "#\t\tsimilarity_matrix[i] *= (adj[i] == 1)", "\n", "\n", "max_idx", "=", "torch", ".", "argmax", "(", "similarity_matrix", ",", "dim", "=", "1", ")", "\n", "similarity_matrix", "=", "similarity_matrix", ".", "zero_", "(", ")", "\n", "similarity_matrix", "=", "similarity_matrix", ".", "scatter_", "(", "1", ",", "max_idx", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "# similarity_matrix = F.gumbel_softmax(similarity_matrix, tau=0.01, hard=True, dim=1)", "\n", "pred_features", "=", "self", ".", "idx2feats", "[", "torch", ".", "argmax", "(", "similarity_matrix", ",", "dim", "=", "1", ")", "]", "\n", "\n", "return", "similarity_matrix", ",", "pred_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.GAU_Model.cosine_similarity": [[406, 413], ["torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cosine_similarity", "(", "x1", ",", "x2", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tx1: (batch_size, feature_size); x2: (dict_size, feature_size)\n\t\t\"\"\"", "\n", "x2", "=", "x2", ".", "T", "\n", "return", "(", "x1", "@", "x2", ")", "/", "(", "(", "torch", ".", "norm", "(", "x1", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "@", "torch", ".", "norm", "(", "x2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr.scipysp_to_pytorchsp": [[415, 426], ["numpy.vstack().transpose", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "scipy.isspmatrix_coo", "sp_mx.tocoo.tocoo", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Size", "torch.Size", "torch.Size", "numpy.vstack"], "function", ["None"], ["", "", "def", "scipysp_to_pytorchsp", "(", "sp_mx", ")", ":", "\n", "\t", "\"\"\" converts scipy sparse matrix to pytorch sparse matrix \"\"\"", "\n", "if", "not", "sp", ".", "isspmatrix_coo", "(", "sp_mx", ")", ":", "\n", "\t\t", "sp_mx", "=", "sp_mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "sp_mx", ".", "row", ",", "sp_mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "sp_mx", ".", "data", "\n", "shape", "=", "sp_mx", ".", "shape", "\n", "pyt_sp_mx", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "LongTensor", "(", "coords", ".", "T", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "values", ")", ",", "\n", "torch", ".", "Size", "(", "shape", ")", ")", "\n", "return", "pyt_sp_mx", "\n", "", ""]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Eland_itr_uns.__init__": [[19, 63], ["len", "locals", "Eland_itr_unsup.Eland_itr_uns.log_parameters", "Eland_itr_unsup.Eland_itr_uns.load_data", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "numpy.unique", "Eland_itr_unsup.Eland_itr_uns.get_logger", "logging.getLogger", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.log_parameters", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.load_data", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.get_logger"], ["    ", "def", "__init__", "(", "self", ",", "adj_matrix", ",", "lstm_dataloader", ",", "user_features", ",", "item_features", ",", "\n", "labels", ",", "tvt_nids", ",", "u2index", ",", "p2index", ",", "idx2feats", ",", "dim_feats", "=", "300", ",", "cuda", "=", "0", ",", "hidden_size", "=", "64", ",", "n_layers", "=", "4", ",", "\n", "epochs", "=", "300", ",", "seed", "=", "-", "1", ",", "lr", "=", "0.001", ",", "weight_decay", "=", "5e-4", ",", "dropout", "=", "0.4", ",", "\n", "log", "=", "True", ",", "name", "=", "'debug'", ",", "gnnlayer_type", "=", "'gsage'", ",", "rnn_type", "=", "'lstm'", ",", "bmloss_type", "=", "'mse'", ",", "device", "=", "'cuda'", ",", "base_pred", "=", "150", ",", "method", "=", "'dominant'", ")", ":", "\n", "        ", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "n_epochs", "=", "epochs", "\n", "self", ".", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "train_nid", ",", "self", ".", "val_nid", ",", "self", ".", "test_nid", "=", "tvt_nids", "\n", "self", ".", "lstm_dataloader", "=", "lstm_dataloader", "\n", "self", ".", "tvt_nids", "=", "tvt_nids", "\n", "self", ".", "u2index", "=", "u2index", "\n", "self", ".", "p2index", "=", "p2index", "\n", "self", ".", "dim_feats", "=", "dim_feats", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "gnnlayer_type", "=", "gnnlayer_type", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "self", ".", "base_pred", "=", "base_pred", "\n", "self", ".", "dom_alpha", "=", "0.5", "\n", "self", ".", "method", "=", "method", "\n", "if", "log", ":", "\n", "            ", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "# Fix random seed if needed", "\n", "", "if", "seed", ">", "0", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "# if not torch.cuda.is_available():", "\n", "# \tcuda = -1", "\n", "# self.device = torch.device(f'cuda: {cuda}' if cuda >= 0 else 'cpu')", "\n", "", "self", ".", "device", "=", "device", "\n", "# Log parameters for reference", "\n", "all_vars", "=", "locals", "(", ")", "\n", "self", ".", "log_parameters", "(", "all_vars", ")", "\n", "# load data", "\n", "self", ".", "load_data", "(", "adj_matrix", ",", "user_features", ",", "item_features", ",", "self", ".", "labels", ",", "tvt_nids", ",", "gnnlayer_type", ",", "idx2feats", ")", "\n", "self", ".", "idx2feats", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "idx2feats", ")", "\n", "# idx2feats = idx2feats.to(self.device)", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Eland_itr_uns.load_data": [[65, 87], ["isinstance", "isinstance", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "isinstance", "scipy.issparse", "scipysp_to_pytorchsp().to_dense", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "isinstance", "scipy.coo_matrix", "Eland_itr_unsup.scipysp_to_pytorchsp"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.scipysp_to_pytorchsp"], ["", "def", "load_data", "(", "self", ",", "adj_matrix", ",", "user_features", ",", "item_features", ",", "labels", ",", "tvt_nids", ",", "gnnlayer_type", ",", "idx2feats", ")", ":", "\n", "        ", "\"\"\"Process data\"\"\"", "\n", "if", "isinstance", "(", "user_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "            ", "self", ".", "user_features", "=", "user_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_features", "=", "torch", ".", "FloatTensor", "(", "user_features", ")", "\n", "\n", "", "if", "isinstance", "(", "item_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "            ", "self", ".", "item_features", "=", "item_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "item_features", "=", "torch", ".", "FloatTensor", "(", "item_features", ")", "\n", "# Normalize", "\n", "", "self", ".", "user_features", "=", "F", ".", "normalize", "(", "self", ".", "user_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "self", ".", "item_features", "=", "F", ".", "normalize", "(", "self", ".", "item_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "if", "isinstance", "(", "labels", ",", "torch", ".", "LongTensor", ")", ":", "\n", "            ", "self", ".", "labels", "=", "labels", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "", "assert", "sp", ".", "issparse", "(", "adj_matrix", ")", "\n", "if", "not", "isinstance", "(", "adj_matrix", ",", "sp", ".", "coo_matrix", ")", ":", "\n", "            ", "adj_matrix", "=", "sp", ".", "coo_matrix", "(", "adj_matrix", ")", "\n", "", "self", ".", "adj", "=", "scipysp_to_pytorchsp", "(", "adj_matrix", ")", ".", "to_dense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Eland_itr_uns.train": [[88, 115], ["Eland_itr_unsup.Dominant_trainer", "Eland_itr_unsup.Dominant_trainer.fit", "Eland_itr_unsup.Eland_itr_uns.eval_node_cls", "Eland_itr_unsup.Eland_itr_uns.logger.info", "range", "Eland_itr_unsup.GAU_Model", "Eland_itr_unsup.Dominant_trainer", "Eland_itr_unsup.Eland_itr_uns.adj.clone", "Eland_itr_unsup.Eland_itr_uns.gau_model.train", "Eland_itr_unsup.Eland_itr_uns.gau_model.inference", "Eland_itr_unsup.Dominant_trainer.fit", "Eland_itr_unsup.Eland_itr_uns.eval_node_cls", "Eland_itr_unsup.Eland_itr_uns.logger.info", "auc_list.append", "ap_list.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GNN_Model.fit", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GAU_Model.inference", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GNN_Model.fit", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "def", "train", "(", "self", ",", "total_epochs", "=", "8", ")", ":", "\n", "# torch.manual_seed(12345)", "\n", "        ", "ad_model", "=", "Dominant_trainer", "(", "self", ".", "dim_feats", ",", "self", ".", "hidden_size", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ",", "self", ".", "tvt_nids", ",", "\n", "self", ".", "labels", ",", "self", ".", "device", ",", "self", ".", "logger", ",", "self", ".", "lr", ",", "self", ".", "weight_decay", ",", "self", ".", "dropout", ",", "self", ".", "dom_alpha", ",", "self", ".", "method", ")", "\n", "nc_logits", ",", "embs", "=", "ad_model", ".", "fit", "(", "self", ".", "adj", ",", "n_epochs", "=", "300", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Baseline: auc {:.5f}, ap {:.5f}'", ".", "format", "(", "res", "[", "'auc'", "]", ",", "res", "[", "'ap'", "]", ")", ")", "\n", "auc_list", ",", "ap_list", "=", "[", "]", ",", "[", "]", "\n", "for", "epoch", "in", "range", "(", "total_epochs", ")", ":", "\n", "            ", "self", ".", "gau_model", "=", "GAU_Model", "(", "dim_feats", "=", "self", ".", "dim_feats", ",", "dim_h", "=", "self", ".", "hidden_size", ",", "u2idx", "=", "self", ".", "u2index", ",", "idx2feats", "=", "self", ".", "idx2feats", ",", "\n", "p2idx", "=", "self", ".", "p2index", ",", "rnn_type", "=", "self", ".", "rnn_type", ",", "lstm_dataloader", "=", "self", ".", "lstm_dataloader", ",", "device", "=", "self", ".", "device", ",", "\n", "logger", "=", "self", ".", "logger", ",", "lr", "=", "self", ".", "lr", "*", "5", ",", "embs", "=", "embs", ",", "bmloss_type", "=", "self", ".", "bmloss_type", ")", "\n", "ad_model", "=", "Dominant_trainer", "(", "self", ".", "dim_feats", ",", "self", ".", "hidden_size", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ",", "self", ".", "tvt_nids", ",", "\n", "self", ".", "labels", ",", "self", ".", "device", ",", "self", ".", "logger", ",", "self", ".", "lr", ",", "self", ".", "weight_decay", ",", "self", ".", "dropout", ",", "self", ".", "dom_alpha", ",", "self", ".", "method", ")", "\n", "# self.gnn_model = GNN_Model(dim_feats=self.dim_feats, dim_h=self.hidden_size, user_features=self.user_features,", "\n", "#                 item_features=self.item_features, tvt_nids=self.tvt_nids, labels=self.labels, n_classes=self.n_classes,", "\n", "#                 n_layers=self.n_layers, activation=F.relu, dropout=self.dropout, gnnlayer_type=self.gnnlayer_type,", "\n", "#                 logger=self.logger, device=self.device, lr=self.lr, weight_decay=self.weight_decay)", "\n", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "self", ".", "gau_model", ".", "train", "(", "n_epochs", "=", "25", ")", "\n", "input_adj", "=", "self", ".", "gau_model", ".", "inference", "(", "input_adj", ",", "nc_logits", ",", "self", ".", "base_pred", ")", "\n", "nc_logits", ",", "embs", "=", "ad_model", ".", "fit", "(", "input_adj", ",", "n_epochs", "=", "300", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Epoch {}/{}: auc {:.5f}, ap {:.5f}'", ".", "format", "(", "epoch", "+", "1", ",", "total_epochs", ",", "res", "[", "'auc'", "]", ",", "res", "[", "'ap'", "]", ")", ")", "\n", "auc_list", ".", "append", "(", "res", "[", "'auc'", "]", ")", "\n", "ap_list", ".", "append", "(", "res", "[", "'ap'", "]", ")", "\n", "", "return", "np", ".", "max", "(", "auc_list", ")", ",", "np", ".", "max", "(", "ap_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Eland_itr_uns.get_logger": [[116, 136], ["logging.getLogger", "logging.getLogger.hasHandlers", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.handlers.clear", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_logger", "(", "name", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "(", "logger", ".", "hasHandlers", "(", ")", ")", ":", "\n", "            ", "logger", ".", "handlers", ".", "clear", "(", ")", "\n", "", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# Foramtter", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(message)s'", ")", "\n", "# console handler", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "# create file handler", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "fh", "=", "logging", ".", "FileHandler", "(", "f'logs/ELANDitr-{name}.log'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Eland_itr_uns.eval_node_cls": [[137, 151], ["logits.cpu().numpy.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "logits.cpu().numpy.cpu().numpy.cpu", "numpy.min", "labels.cpu().numpy.cpu().numpy.cpu", "numpy.max", "numpy.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_node_cls", "(", "logits", ",", "labels", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# logits = logits.T[1]", "\n", "logits", "=", "(", "logits", "-", "np", ".", "min", "(", "logits", ")", ")", "/", "(", "np", ".", "max", "(", "logits", ")", "-", "np", ".", "min", "(", "logits", ")", "+", "1e-8", ")", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "roc_auc", "=", "roc_auc_score", "(", "labels", ",", "logits", ")", "\n", "ap", "=", "average_precision_score", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "results", "=", "{", "\n", "'ap'", ":", "ap", ",", "\n", "'auc'", ":", "roc_auc", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Eland_itr_uns.log_parameters": [[183, 195], ["Eland_itr_unsup.Eland_itr_uns.logger.info"], "methods", ["None"], ["", "def", "log_parameters", "(", "self", ",", "all_vars", ")", ":", "\n", "        ", "del", "all_vars", "[", "'self'", "]", "\n", "del", "all_vars", "[", "'adj_matrix'", "]", "\n", "del", "all_vars", "[", "'user_features'", "]", "\n", "del", "all_vars", "[", "'item_features'", "]", "\n", "del", "all_vars", "[", "'labels'", "]", "\n", "del", "all_vars", "[", "'tvt_nids'", "]", "\n", "del", "all_vars", "[", "'lstm_dataloader'", "]", "\n", "del", "all_vars", "[", "'u2index'", "]", "\n", "del", "all_vars", "[", "'p2index'", "]", "\n", "del", "all_vars", "[", "'idx2feats'", "]", "\n", "self", ".", "logger", ".", "info", "(", "f'Parameters: {all_vars}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Dominant_trainer.__init__": [[197, 211], ["model_zoo.Dominant", "model_zoo.DeepAE"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "user_features", ",", "item_features", ",", "\n", "tvt_nids", ",", "labels", ",", "device", ",", "logger", ",", "lr", ",", "weight_decay", ",", "dropout", ",", "alpha", ",", "method", ")", ":", "\n", "        ", "if", "method", "==", "'dominant'", ":", "\n", "            ", "self", ".", "model", "=", "Dominant", "(", "dim_feats", ",", "dim_h", ",", "dropout", ",", "alpha", ")", "\n", "", "elif", "method", "==", "'deepae'", ":", "\n", "            ", "self", ".", "model", "=", "DeepAE", "(", "dim_feats", ",", "dim_h", ",", "0", ",", "0.025", ")", "\n", "", "self", ".", "user_features", "=", "user_features", "\n", "self", ".", "item_features", "=", "item_features", "\n", "self", ".", "train_nid", ",", "self", ".", "val_nid", ",", "self", ".", "test_nid", "=", "tvt_nids", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Dominant_trainer.fit": [[212, 255], ["Eland_itr_unsup.Dominant_trainer.user_features.to", "Eland_itr_unsup.Dominant_trainer.item_features.to", "Eland_itr_unsup.Dominant_trainer.model.to", "Eland_itr_unsup.Dominant_trainer.labels.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "Eland_itr_unsup.Dominant_trainer.parameters", "Eland_itr_unsup.Dominant_trainer.train", "Eland_itr_unsup.Dominant_trainer.zero_grad", "adj.detach.detach.clone", "input_adj.to.to.to", "Eland_itr_unsup.Dominant_trainer.", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "Eland_itr_unsup.Dominant_trainer.eval", "adj.detach.detach.detach", "Eland_itr_unsup.Dominant_trainer.eval_node_cls", "Eland_itr_unsup.Dominant_trainer.eval_node_cls", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adj.detach.detach.clone", "input_adj.to.to.to", "Eland_itr_unsup.Dominant_trainer.", "logits[].detach", "Eland_itr_unsup.Dominant_trainer.eval_node_cls", "print", "loss.item"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "def", "fit", "(", "self", ",", "adj", ",", "n_epochs", "=", "300", ")", ":", "\n", "        ", "user_features", "=", "self", ".", "user_features", ".", "to", "(", "self", ".", "device", ")", "\n", "item_features", "=", "self", ".", "item_features", ".", "to", "(", "self", ".", "device", ")", "\n", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "self", ".", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "best_val_auc", "=", "0.", "\n", "best_test_auc", "=", "0.", "\n", "best_embs", "=", "None", "\n", "cnt_wait", "=", "0", "\n", "patience", "=", "50", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "input_adj", "=", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", ",", "logits", ",", "embs", "=", "model", "(", "input_adj", ",", "user_features", ",", "item_features", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# Validation", "\n", "model", ".", "eval", "(", ")", "\n", "adj", "=", "adj", ".", "detach", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_adj", "=", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "_", ",", "logits_eval", ",", "embs_eval", "=", "model", "(", "input_adj", ",", "user_features", ",", "item_features", ")", "\n", "", "res_training", "=", "self", ".", "eval_node_cls", "(", "logits", "[", "self", ".", "train_nid", "]", ".", "detach", "(", ")", ",", "labels", "[", "self", ".", "train_nid", "]", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "logits_eval", "[", "self", ".", "val_nid", "]", ",", "labels", "[", "self", ".", "val_nid", "]", ")", "\n", "\n", "if", "res", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "                ", "cnt_wait", "=", "0", "\n", "best_val_auc", "=", "res", "[", "'auc'", "]", "\n", "res_test", "=", "self", ".", "eval_node_cls", "(", "logits_eval", "[", "self", ".", "test_nid", "]", ",", "labels", "[", "self", ".", "test_nid", "]", ")", "\n", "best_logits", "=", "logits_eval", "\n", "best_embs", "=", "embs_eval", "\n", "", "else", ":", "\n", "                ", "cnt_wait", "+=", "1", "\n", "", "print", "(", "'epoch {}/{}, loss {:.5f}, training auc {:.5f}, val auc {:.5f}, best test auc {:.5f}'", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "res_training", "[", "'auc'", "]", ",", "res", "[", "'auc'", "]", ",", "res_test", "[", "'auc'", "]", ")", ")", "\n", "if", "cnt_wait", ">=", "patience", ":", "\n", "                ", "print", "(", "'Early stop!'", ")", "\n", "break", "\n", "", "", "return", "best_logits", ",", "best_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.Dominant_trainer.eval_node_cls": [[256, 270], ["logits.cpu().numpy.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "logits.cpu().numpy.cpu().numpy.cpu", "numpy.min", "labels.cpu().numpy.cpu().numpy.cpu", "numpy.max", "numpy.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_node_cls", "(", "logits", ",", "labels", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# logits = logits.T[1]", "\n", "logits", "=", "(", "logits", "-", "np", ".", "min", "(", "logits", ")", ")", "/", "(", "np", ".", "max", "(", "logits", ")", "-", "np", ".", "min", "(", "logits", ")", "+", "1e-8", ")", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "roc_auc", "=", "roc_auc_score", "(", "labels", ",", "logits", ")", "\n", "ap", "=", "average_precision_score", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "results", "=", "{", "\n", "'ap'", ":", "ap", ",", "\n", "'auc'", ":", "roc_auc", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GNN_Model.__init__": [[272, 285], ["model_zoo.GNN"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "user_features", ",", "item_features", ",", "n_classes", ",", "\n", "n_layers", ",", "activation", ",", "dropout", ",", "gnnlayer_type", ",", "tvt_nids", ",", "labels", ",", "device", ",", "logger", ",", "lr", ",", "weight_decay", ")", ":", "\n", "        ", "self", ".", "gnn", "=", "GNN", "(", "dim_feats", "=", "dim_feats", ",", "dim_h", "=", "dim_h", ",", "n_classes", "=", "n_classes", ",", "\n", "n_layers", "=", "n_layers", ",", "activation", "=", "F", ".", "relu", ",", "dropout", "=", "dropout", ",", "gnnlayer_type", "=", "gnnlayer_type", ")", "\n", "self", ".", "user_features", "=", "user_features", "\n", "self", ".", "item_features", "=", "item_features", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "train_nid", ",", "self", ".", "val_nid", ",", "self", ".", "test_nid", "=", "tvt_nids", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GNN_Model.fit": [[286, 334], ["Eland_itr_unsup.GNN_Model.user_features.to", "Eland_itr_unsup.GNN_Model.item_features.to", "Eland_itr_unsup.GNN_Model.gnn.to", "Eland_itr_unsup.GNN_Model.labels.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "Eland_itr_unsup.GNN_Model.gnn.parameters", "Eland_itr_unsup.GNN_Model.gnn.train", "Eland_itr_unsup.GNN_Model.gnn.zero_grad", "adj.detach.detach.clone", "input_adj.to.to.to", "Eland_itr_unsup.GNN_Model.gnn", "criterion", "criterion.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "adj.detach.detach.detach", "Eland_itr_unsup.GNN_Model.gnn.eval", "Eland_itr_unsup.GNN_Model.eval_node_cls", "Eland_itr_unsup.GNN_Model.eval_node_cls", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adj.detach.detach.clone", "input_adj.to.to.to", "Eland_itr_unsup.GNN_Model.gnn", "nc_logits[].detach", "Eland_itr_unsup.GNN_Model.eval_node_cls", "Eland_itr_unsup.GNN_Model.logger.info", "Eland_itr_unsup.GNN_Model.eval_node_cls", "criterion.item"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "def", "fit", "(", "self", ",", "adj", ",", "n_epochs", "=", "400", ")", ":", "\n", "        ", "self", ".", "user_features", "=", "self", ".", "user_features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "item_features", "=", "self", ".", "item_features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "gnn", "=", "self", ".", "gnn", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "criterion", "=", "F", ".", "nll_loss", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "gnn", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "best_val_auc", "=", "0.", "\n", "best_test_auc", "=", "0.", "\n", "best_embs", "=", "None", "\n", "cnt_wait", "=", "0", "\n", "patience", "=", "50", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "self", ".", "gnn", ".", "train", "(", ")", "\n", "self", ".", "gnn", ".", "zero_grad", "(", ")", "\n", "input_adj", "=", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits", ",", "_", "=", "self", ".", "gnn", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ")", "\n", "loss", "=", "criterion", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adj", "=", "adj", ".", "detach", "(", ")", "\n", "# Validation", "\n", "self", ".", "gnn", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_adj", "=", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits_eval", ",", "embs_eval", "=", "self", ".", "gnn", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ")", "\n", "", "res_training", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ".", "detach", "(", ")", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "val_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "val_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "\n", "if", "res", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "                ", "cnt_wait", "=", "0", "\n", "best_val_auc", "=", "res", "[", "'auc'", "]", "\n", "test_auc", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "[", "'auc'", "]", "\n", "# if test_auc > best_test_auc:", "\n", "best_test_auc", "=", "test_auc", "\n", "best_logits", "=", "nc_logits_eval", "\n", "best_embs", "=", "embs_eval", "\n", "best_res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "", "else", ":", "\n", "                ", "cnt_wait", "+=", "1", "\n", "", "print", "(", "'epoch {}/{}, loss {:.5f}, training auc {:.5f}, val auc {:.5f}, best test auc {:.5f}'", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "res_training", "[", "'auc'", "]", ",", "res", "[", "'auc'", "]", ",", "best_res", "[", "'auc'", "]", ")", ")", "\n", "if", "cnt_wait", ">=", "patience", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Early stop!'", ")", "\n", "break", "\n", "", "", "return", "best_logits", ",", "best_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GNN_Model.eval_node_cls": [[335, 365], ["logits.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.argmax", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "sklearn.metrics.f1_score", "numpy.zeros", "logits.cpu().numpy.cpu().numpy.cpu", "labels.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_node_cls", "(", "logits", ",", "labels", ",", "n_classes", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "logits", "=", "logits", ".", "T", "[", "1", "]", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# fpr, tpr, _ = roc_curve(labels, logits, pos_label=1)", "\n", "roc_auc", "=", "roc_auc_score", "(", "labels", ",", "logits", ")", "\n", "# precisions, recalls, _ = precision_recall_curve(labels, logits, pos_label=1)", "\n", "# pr_auc = metrics.auc(recalls, precisions)", "\n", "ap", "=", "average_precision_score", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "# f1s = np.nan_to_num(2*precisions*recalls/(precisions+recalls))", "\n", "# best_comb = np.argmax(f1s)", "\n", "f1", "=", "f1_score", "(", "labels", ",", "y_pred", ")", "\n", "# pre = precisions[best_comb]", "\n", "# rec = recalls[best_comb]", "\n", "# calc confusion matrix", "\n", "conf_mat", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "# for i in range(len(preds)):", "\n", "# \tconf_mat[labels[i], preds[i]] += 1", "\n", "results", "=", "{", "\n", "# 'pre': pre,", "\n", "# 'rec': rec,", "\n", "'f1'", ":", "f1", ",", "\n", "'ap'", ":", "ap", ",", "\n", "'conf'", ":", "conf_mat", ",", "\n", "'auc'", ":", "roc_auc", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GAU_Model.__init__": [[367, 379], ["model_zoo.GAU_E"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "u2idx", ",", "idx2feats", ",", "p2idx", ",", "rnn_type", ",", "lstm_dataloader", ",", "logger", ",", "device", ",", "lr", ",", "embs", ",", "bmloss_type", ",", "flag_weight", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "gau", "=", "GAU_E", "(", "dim_feats", "=", "dim_feats", "+", "dim_h", ",", "dim_h", "=", "dim_h", ",", "idx2feats", "=", "idx2feats", ",", "p2idx", "=", "p2idx", ",", "rnn_type", "=", "rnn_type", ")", "\n", "self", ".", "u2idx", ",", "self", ".", "p2idx", ",", "self", ".", "idx2feats", "=", "u2idx", ",", "p2idx", ",", "idx2feats", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "lstm_dataloader", "=", "lstm_dataloader", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "# For multi-task two-step decoder", "\n", "self", ".", "flag_weight", "=", "flag_weight", "\n", "# For user embedding; dim (len(users), hid_size)", "\n", "self", ".", "embs", "=", "embs", "\n", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GAU_Model.train": [[380, 422], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "Eland_itr_unsup.GAU_Model.gau.train", "Eland_itr_unsup.GAU_Model.gau.to", "range", "Eland_itr_unsup.GAU_Model.gau.parameters", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "print", "Eland_itr_unsup.GAU_Model.gau.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "enumerate", "feats.to().float.to().float.to().float", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Eland_itr_unsup.GAU_Model.gau", "range", "loss.backward", "cur_loss.append", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "Eland_itr_unsup.GAU_Model.gau.zero_grad", "len", "loss.item", "Eland_itr_unsup.GAU_Model.gau.parameters", "feats.to().float.to().float.to", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad"], ["", "def", "train", "(", "self", ",", "n_epochs", "=", "15", ")", ":", "\n", "        ", "\"\"\" Train the behavioral modelling network \"\"\"", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "gau", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "if", "self", ".", "bmloss_type", "==", "'mse'", ":", "\n", "            ", "criterion1", "=", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "criterion1", "=", "CosineEmbeddingLoss", "(", ")", "\n", "", "criterion2", "=", "BCELoss", "(", ")", "\n", "self", ".", "gau", ".", "train", "(", ")", "\n", "self", ".", "gau", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "print", "(", "'epoch {}/{}'", ".", "format", "(", "epoch", ",", "n_epochs", ")", ")", "\n", "self", ".", "gau", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "cur_loss", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "repeat_flags", ",", "feats_len", ")", "in", "enumerate", "(", "self", ".", "lstm_dataloader", ")", ":", "\n", "# feats: (batch_size, max_len, dim_feats)", "\n", "# We need feats + embs: (batch_idx, max_len, dim_feats + dim_h)", "\n", "                ", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# Select embeddings:", "\n", "# batch_embs: (batch_size, hidden_sz)", "\n", "batch_embs", "=", "self", ".", "embs", "[", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "]", "\n", "# batch_embs = self.embs[[self.u2idx[uid.item()] for uid in uids]]", "\n", "batch_embs", "=", "batch_embs", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "30", ",", "1", ")", "\n", "\n", "input_feats", "=", "torch", ".", "cat", "(", "(", "feats", ",", "batch_embs", ")", ",", "dim", "=", "2", ")", "\n", "# repeat_flags = repeat_flags.to(self.device).float()", "\n", "out", ",", "out_len", "=", "self", ".", "gau", "(", "input_feats", ",", "feats_len", ")", "\n", "loss", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "out_len", ")", ")", ":", "\n", "                    ", "if", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "                        ", "loss", "+=", "criterion1", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "+=", "criterion1", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ")", "\n", "# loss += 0.1 * criterion2(flag[idx, :out_len[idx]-1], repeat_flags[idx, :out_len[idx]-1])", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "cur_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "gau", ".", "parameters", "(", ")", ",", "5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "gau", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GAU_Model.inference": [[423, 474], ["Eland_itr_unsup.GAU_Model.gau.eval", "adj.to.to.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat.to().float", "torch.cat.to().float", "torch.cat.to().float", "range", "int", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Eland_itr_unsup.GAU_Model.gau", "delta.squeeze.squeeze.squeeze", "Eland_itr_unsup.GAU_Model.match", "enumerate", "range", "torch.cat.to", "torch.cat.to", "torch.cat.to", "max", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "max().item", "batch_embs.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "pred_features.detach", "numpy.arange", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "max", "len", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "Eland_itr_unsup.GAU_Model.idx2feats.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.match"], ["", "", "", "def", "inference", "(", "self", ",", "adj", ",", "logits", ",", "base_pred", ")", ":", "\n", "        ", "\"\"\"\n            logits: output from nc_net, times base_pred to get the final prediction number for each user\n        \"\"\"", "\n", "self", ".", "gau", ".", "eval", "(", ")", "\n", "# logits = F.softmax(logits, dim=1)", "\n", "# logits = logits.T[1] # Probability of being malicious", "\n", "pred_num", "=", "base_pred", "*", "logits", "# pred_num: (n_users)", "\n", "adj", "=", "adj", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "_", ",", "feats_length", ")", "in", "enumerate", "(", "self", ".", "lstm_dataloader", ")", ":", "\n", "                ", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# repeat_flags = repeat_flags", "\n", "# match: delta: (batch_size, feature_size) --> (batch_size, dict_size)", "\n", "# \t\t pred_features: (batch_size, feature_size) --> (batch_size, feature_size)", "\n", "for", "i", "in", "range", "(", "1", ",", "int", "(", "max", "(", "pred_num", ")", ".", "item", "(", ")", "+", "1", ")", ")", ":", "\n", "# Select embeddings:", "\n", "# batch_embs: (batch_size, hidden_sz)", "\n", "                    ", "batch_embs", "=", "self", ".", "embs", "[", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "]", "\n", "# batch_embs = self.embs[[self.u2idx[uid.item()] for uid in uids]]", "\n", "batch_embs", "=", "batch_embs", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "feats", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "\n", "input_feats", "=", "torch", ".", "cat", "(", "(", "feats", ",", "batch_embs", ")", ",", "dim", "=", "2", ")", "\n", "\n", "out", ",", "out_len", "=", "self", ".", "gau", "(", "input_feats", ",", "feats_length", ")", "\n", "delta", "=", "out", "[", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ",", "out_len", "-", "1", ",", "None", "]", "\n", "# last_flag = flag[np.arange(len(out_len)), out_len-1, None]", "\n", "\n", "# delta: (batch_size, 1, feature_size)", "\n", "# last_flag: (batch_size, 1, 1)", "\n", "delta", "=", "delta", ".", "squeeze", "(", ")", "\n", "# flag = flag.squeeze(1)", "\n", "indices", "=", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "\n", "# indices = [self.u2idx[uid.item()] for uid in uids]", "\n", "# u_delta, pred_features = self.match(delta, last_flag, adj[indices])", "\n", "u_delta", ",", "pred_features", "=", "self", ".", "match", "(", "delta", ",", "adj", "[", "indices", "]", ")", "\n", "# We apply mask based on pred_num", "\n", "for", "idx", ",", "uid", "in", "enumerate", "(", "uids", ")", ":", "\n", "                        ", "if", "pred_num", "[", "self", ".", "u2idx", "[", "uid", "]", "]", "<", "i", ":", "\n", "# if pred_num[self.u2idx[uid.item()]] < i:", "\n", "                            ", "u_delta", "[", "idx", "]", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "self", ".", "idx2feats", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0.", ")", "\n", "", "", "adj", "[", "indices", "]", "+=", "u_delta", "\n", "if", "max", "(", "feats_length", ")", ">=", "feats", ".", "size", "(", "1", ")", ":", "\n", "                        ", "feats", "=", "torch", ".", "cat", "(", "(", "feats", ",", "torch", ".", "cuda", ".", "FloatTensor", "(", "feats", ".", "size", "(", "0", ")", ",", "1", ",", "feats", ".", "size", "(", "2", ")", ")", ".", "fill_", "(", "0.", ")", ")", ",", "dim", "=", "1", ")", "\n", "# feats2[:, feats.size(1), :] = torch.zeros(feats.size(2))", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "feats_length", ")", ")", ":", "\n", "                        ", "feats", "[", "idx", "]", "[", "feats_length", "[", "idx", "]", "]", "=", "pred_features", ".", "detach", "(", ")", "[", "idx", "]", "\n", "\n", "", "", "", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GAU_Model.match": [[475, 496], ["Eland_itr_unsup.GAU_Model.cosine_similarity", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "similarity_matrix.scatter_.scatter_.zero_", "similarity_matrix.scatter_.scatter_.scatter_", "torch.argmax.view", "torch.argmax.view", "torch.argmax.view", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.cosine_similarity"], ["", "def", "match", "(", "self", ",", "x", ",", "adj", ")", ":", "# (self, x, flag, adj)", "\n", "        ", "\"\"\"\n            x: (batch_size, features_size)\n            flag: (batch_size, 1)\n        \"\"\"", "\n", "similarity_matrix", "=", "self", ".", "cosine_similarity", "(", "x", ",", "self", ".", "idx2feats", ")", "# idx2feats: (dict_sz, feat_sz)", "\n", "# similarity_matrix: (batch_idx, dict_sz)", "\n", "# adj: (batch_idx, dict_sz)", "\n", "# for i, f in enumerate(flag): # Applying mask...", "\n", "#\tif f < 0.5:", "\n", "#\t\tsimilarity_matrix[i] *= (adj[i] == 0)", "\n", "#\telse:", "\n", "#\t\tsimilarity_matrix[i] *= (adj[i] == 1)", "\n", "\n", "max_idx", "=", "torch", ".", "argmax", "(", "similarity_matrix", ",", "dim", "=", "1", ")", "\n", "similarity_matrix", "=", "similarity_matrix", ".", "zero_", "(", ")", "\n", "similarity_matrix", "=", "similarity_matrix", ".", "scatter_", "(", "1", ",", "max_idx", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "# similarity_matrix = F.gumbel_softmax(similarity_matrix, tau=0.01, hard=True, dim=1)", "\n", "pred_features", "=", "self", ".", "idx2feats", "[", "torch", ".", "argmax", "(", "similarity_matrix", ",", "dim", "=", "1", ")", "]", "\n", "\n", "return", "similarity_matrix", ",", "pred_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.GAU_Model.cosine_similarity": [[497, 504], ["torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cosine_similarity", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n            x1: (batch_size, feature_size); x2: (dict_size, feature_size)\n        \"\"\"", "\n", "x2", "=", "x2", ".", "T", "\n", "return", "(", "x1", "@", "x2", ")", "/", "(", "(", "torch", ".", "norm", "(", "x1", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "@", "torch", ".", "norm", "(", "x2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_itr_unsup.scipysp_to_pytorchsp": [[506, 517], ["numpy.vstack().transpose", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "scipy.isspmatrix_coo", "sp_mx.tocoo.tocoo", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Size", "torch.Size", "torch.Size", "numpy.vstack"], "function", ["None"], ["", "", "def", "scipysp_to_pytorchsp", "(", "sp_mx", ")", ":", "\n", "    ", "\"\"\" converts scipy sparse matrix to pytorch sparse matrix \"\"\"", "\n", "if", "not", "sp", ".", "isspmatrix_coo", "(", "sp_mx", ")", ":", "\n", "        ", "sp_mx", "=", "sp_mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "sp_mx", ".", "row", ",", "sp_mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "sp_mx", ".", "data", "\n", "shape", "=", "sp_mx", ".", "shape", "\n", "pyt_sp_mx", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "LongTensor", "(", "coords", ".", "T", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "values", ")", ",", "\n", "torch", ".", "Size", "(", "shape", ")", ")", "\n", "return", "pyt_sp_mx", "\n", "", ""]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.__init__": [[19, 57], ["len", "locals", "Eland_e2e_unsup.Eland_e2e_uns.log_parameters", "Eland_e2e_unsup.Eland_e2e_uns.load_data", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "Eland_e2e_unsup.Eland_Model", "numpy.unique", "Eland_e2e_unsup.Eland_e2e_uns.get_logger", "logging.getLogger", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.log_parameters", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.load_data", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.get_logger"], ["    ", "def", "__init__", "(", "self", ",", "adj_matrix", ",", "lstm_dataloader", ",", "user_features", ",", "item_features", ",", "\n", "labels", ",", "tvt_nids", ",", "u2index", ",", "p2index", ",", "idx2feats", ",", "dim_feats", "=", "300", ",", "cuda", "=", "0", ",", "hidden_size", "=", "128", ",", "n_layers", "=", "2", ",", "\n", "epochs", "=", "400", ",", "seed", "=", "-", "1", ",", "lr", "=", "0.0001", ",", "weight_decay", "=", "1e-5", ",", "dropout", "=", "0.4", ",", "tensorboard", "=", "False", ",", "\n", "log", "=", "True", ",", "name", "=", "'debug'", ",", "method", "=", "'dominant'", ",", "rnn_type", "=", "'lstm'", ",", "pretrain_bm", "=", "25", ",", "pretrain_nc", "=", "300", ",", "alpha", "=", "0.05", ",", "bmloss_type", "=", "'mse'", ",", "device", "=", "'cuda'", ",", "base_pred", "=", "20", ")", ":", "\n", "        ", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "n_epochs", "=", "epochs", "\n", "self", ".", "pretrain_bm", "=", "pretrain_bm", "\n", "self", ".", "pretrain_nc", "=", "pretrain_nc", "\n", "self", ".", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "train_nid", ",", "self", ".", "val_nid", ",", "self", ".", "test_nid", "=", "tvt_nids", "\n", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "self", ".", "base_pred", "=", "base_pred", "\n", "if", "log", ":", "\n", "            ", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "# if not torch.cuda.is_available():", "\n", "# \tcuda = -1", "\n", "# self.device = torch.device(f'cuda:{cuda}' if cuda >= 0 else 'cpu')", "\n", "", "self", ".", "device", "=", "device", "\n", "# Log parameters for reference", "\n", "all_vars", "=", "locals", "(", ")", "\n", "self", ".", "log_parameters", "(", "all_vars", ")", "\n", "# Fix random seed if needed", "\n", "if", "seed", ">", "0", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "# load data", "\n", "", "self", ".", "load_data", "(", "adj_matrix", ",", "user_features", ",", "item_features", ",", "self", ".", "labels", ",", "tvt_nids", ",", "idx2feats", ")", "\n", "idx2feats", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "idx2feats", ")", "\n", "# idx2feats = idx2feats.to(self.device)", "\n", "self", ".", "model", "=", "Eland_Model", "(", "dim_feats", ",", "hidden_size", ",", "lstm_dataloader", ",", "self", ".", "n_classes", ",", "n_layers", ",", "\n", "u2idx", "=", "u2index", ",", "p2idx", "=", "p2index", ",", "idx2feats", "=", "idx2feats", ",", "dropout", "=", "dropout", ",", "\n", "device", "=", "self", ".", "device", ",", "rnn_type", "=", "rnn_type", ",", "method", "=", "method", ",", "activation", "=", "F", ".", "relu", ",", "bmloss_type", "=", "bmloss_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.load_data": [[58, 83], ["isinstance", "isinstance", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "isinstance", "scipy.issparse", "scipysp_to_pytorchsp().to_dense", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "isinstance", "scipy.coo_matrix", "Eland_e2e_unsup.scipysp_to_pytorchsp"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.scipysp_to_pytorchsp"], ["", "def", "load_data", "(", "self", ",", "adj_matrix", ",", "user_features", ",", "item_features", ",", "labels", ",", "tvt_nids", ",", "idx2feats", ")", ":", "\n", "        ", "\"\"\"Process data\"\"\"", "\n", "if", "isinstance", "(", "user_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "            ", "self", ".", "user_features", "=", "user_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_features", "=", "torch", ".", "FloatTensor", "(", "user_features", ")", "\n", "\n", "", "if", "isinstance", "(", "item_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "            ", "self", ".", "item_features", "=", "item_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "item_features", "=", "torch", ".", "FloatTensor", "(", "item_features", ")", "\n", "\n", "# Normalize", "\n", "", "self", ".", "user_features", "=", "F", ".", "normalize", "(", "self", ".", "user_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "self", ".", "item_features", "=", "F", ".", "normalize", "(", "self", ".", "item_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "if", "isinstance", "(", "labels", ",", "torch", ".", "LongTensor", ")", ":", "\n", "            ", "self", ".", "labels", "=", "labels", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "\n", "", "assert", "sp", ".", "issparse", "(", "adj_matrix", ")", "\n", "if", "not", "isinstance", "(", "adj_matrix", ",", "sp", ".", "coo_matrix", ")", ":", "\n", "            ", "adj_matrix", "=", "sp", ".", "coo_matrix", "(", "adj_matrix", ")", "\n", "", "self", ".", "adj", "=", "scipysp_to_pytorchsp", "(", "adj_matrix", ")", ".", "to_dense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.pretrain_bm_net": [[84, 118], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net.train", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net.to", "range", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net.parameters", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "enumerate", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "feats.to().float.to().float.to().float", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net", "numpy.arange", "loss.backward", "cur_loss.append", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net.zero_grad", "len", "loss.item", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net.parameters", "feats.to().float.to().float.to", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "round", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "numpy.mean", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad"], ["", "def", "pretrain_bm_net", "(", "self", ",", "n_epochs", "=", "25", ")", ":", "\n", "        ", "\"\"\" pretrain the behavioral modelling network \"\"\"", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "bm_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", "*", "5", ")", "\n", "if", "self", ".", "bmloss_type", "==", "'mse'", ":", "\n", "            ", "criterion", "=", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "            ", "criterion", "=", "CosineEmbeddingLoss", "(", ")", "\n", "", "self", ".", "model", ".", "bm_net", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "bm_net", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "bm_net", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "cur_loss", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "_", ",", "feats_len", ")", "in", "enumerate", "(", "self", ".", "model", ".", "loader", ")", ":", "\n", "                ", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "loss", "=", "0", "\n", "out", ",", "out_len", "=", "self", ".", "model", ".", "bm_net", "(", "feats", ",", "feats_len", ")", "\n", "for", "idx", "in", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ":", "\n", "                    ", "if", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "# loss += criterion(out[idx, :out_len[idx]-1, :], feats[idx, 1:out_len[idx], :], torch.cuda.LongTensor([1]))", "\n", "                        ", "loss", "+=", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "+=", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ")", "\n", "# print('--------')", "\n", "# print(torch.isnan(out[idx, :out_len[idx]-1, :]).sum(), torch.isnan(feats[idx, :out_len[idx]-1, :]).sum())", "\n", "# print(torch.isnan(out).sum(), torch.isnan(feats).sum())", "\n", "# print(loss)", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "cur_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "bm_net", ".", "parameters", "(", ")", ",", "5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "model", ".", "bm_net", ".", "zero_grad", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "f'BM Module pretrain, Epoch {epoch+1}/{n_epochs}: loss {round(np.mean(cur_loss), 8)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.pretrain_nc_net": [[119, 172], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net.to", "Eland_e2e_unsup.Eland_e2e_uns.user_features.to", "Eland_e2e_unsup.Eland_e2e_uns.item_features.to", "Eland_e2e_unsup.Eland_e2e_uns.labels.to", "range", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net.parameters", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net.train", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net.zero_grad", "Eland_e2e_unsup.Eland_e2e_uns.adj.clone", "input_adj.to.to.to", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "Eland_e2e_unsup.Eland_e2e_uns.adj.detach", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net.eval", "Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls", "Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Eland_e2e_unsup.Eland_e2e_uns.adj.clone", "input_adj.to.to.to", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net", "nc_logits[].detach", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls", "Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls", "loss.item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "", "def", "pretrain_nc_net", "(", "self", ",", "n_epochs", "=", "300", ")", ":", "\n", "        ", "\"\"\" pretrain the node classification network \"\"\"", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "nc_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "best_val_auc", "=", "0.", "\n", "best_test_auc", "=", "0.", "\n", "best_res", "=", "None", "\n", "self", ".", "model", ".", "nc_net", ".", "to", "(", "self", ".", "device", ")", "\n", "user_features", "=", "self", ".", "user_features", ".", "to", "(", "self", ".", "device", ")", "\n", "item_features", "=", "self", ".", "item_features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "cnt_wait", "=", "0", "\n", "patience", "=", "50", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "nc_net", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "nc_net", ".", "zero_grad", "(", ")", "\n", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", ",", "nc_logits", ",", "_", "=", "self", ".", "model", ".", "nc_net", "(", "input_adj", ",", "user_features", ",", "item_features", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# Detach from computation graph", "\n", "self", ".", "adj", "=", "self", ".", "adj", ".", "detach", "(", ")", "\n", "# Validation", "\n", "self", ".", "model", ".", "nc_net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "_", ",", "nc_logits_eval", ",", "_", "=", "self", ".", "model", ".", "nc_net", "(", "input_adj", ",", "user_features", ",", "item_features", ")", "\n", "", "res_training", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ".", "detach", "(", ")", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "val_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "val_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "\n", "if", "res", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "                ", "cnt_wait", "=", "0", "\n", "best_val_auc", "=", "res", "[", "'auc'", "]", "\n", "test_auc", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "[", "'auc'", "]", "\n", "if", "test_auc", ">", "best_test_auc", ":", "\n", "                    ", "best_test_auc", "=", "test_auc", "\n", "best_res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'NCNet pretrain, Epoch [{} / {}]: loss {:.4f}, train_auc {:.4f}, val_auc {:.4f}, test_auc {:.4f}, test_ap {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "res_training", "[", "'auc'", "]", ",", "res", "[", "'auc'", "]", ",", "test_auc", ",", "best_res", "[", "'ap'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "cnt_wait", "+=", "1", "\n", "self", ".", "logger", ".", "info", "(", "'NCNet pretrain, Epoch [{} / {}]: loss {:.4f}, train_auc {:.4f}, val_auc: {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "res_training", "[", "'auc'", "]", ",", "res", "[", "'auc'", "]", ")", ")", "\n", "\n", "", "if", "cnt_wait", ">=", "patience", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Early stop!'", ")", "\n", "break", "\n", "\n", "", "", "self", ".", "logger", ".", "info", "(", "'Best Test Results: auc {:.4f}, ap {:.4f}'", ".", "format", "(", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", ")", ")", "\n", "return", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.train": [[173, 248], ["torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "Eland_e2e_unsup.Eland_e2e_uns.move_to_cuda", "Eland_e2e_unsup.Eland_e2e_uns.move_to_cuda", "Eland_e2e_unsup.Eland_e2e_uns.move_to_cuda", "Eland_e2e_unsup.Eland_e2e_uns.model.to", "utils.MultipleOptimizer", "range", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "Eland_e2e_unsup.Eland_e2e_uns.pretrain_bm_net", "Eland_e2e_unsup.Eland_e2e_uns.pretrain_nc_net", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Eland_e2e_unsup.Eland_e2e_uns.model.train", "Eland_e2e_unsup.Eland_e2e_uns.model.zero_grad", "Eland_e2e_unsup.Eland_e2e_uns.adj.clone", "input_adj.to.to.to", "Eland_e2e_unsup.Eland_e2e_uns.model", "utils.MultipleOptimizer.zero_grad", "loss.backward", "utils.MultipleOptimizer.step", "Eland_e2e_unsup.Eland_e2e_uns.model.eval", "Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls", "Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls", "Eland_e2e_unsup.Eland_e2e_uns.model.bm_net.parameters", "Eland_e2e_unsup.Eland_e2e_uns.model.nc_net.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Eland_e2e_unsup.Eland_e2e_uns.model", "nc_logits[].detach", "Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "Eland_e2e_unsup.Eland_e2e_uns.logger.info", "loss.item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.move_to_cuda", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.move_to_cuda", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.move_to_cuda", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.pretrain_bm_net", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.pretrain_nc_net", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\" End-to-end training for bm_net and nc_net \"\"\"", "\n", "# For debugging", "\n", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "# Move variables to device if haven't done so", "\n", "self", ".", "user_features", "=", "self", ".", "move_to_cuda", "(", "self", ".", "user_features", ",", "self", ".", "device", ")", "\n", "self", ".", "item_features", "=", "self", ".", "move_to_cuda", "(", "self", ".", "item_features", ",", "self", ".", "device", ")", "\n", "self", ".", "labels", "=", "self", ".", "move_to_cuda", "(", "self", ".", "labels", ",", "self", ".", "device", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "# Pretrain", "\n", "if", "self", ".", "pretrain_bm", ">", "0", ":", "\n", "            ", "self", ".", "pretrain_bm_net", "(", "self", ".", "pretrain_bm", ")", "\n", "", "if", "self", ".", "pretrain_nc", ">", "0", ":", "\n", "            ", "self", ".", "pretrain_nc_net", "(", "self", ".", "pretrain_nc", ")", "\n", "# optimizers", "\n", "", "optims", "=", "MultipleOptimizer", "(", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "bm_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", ",", "\n", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "nc_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", ")", "\n", "# optims = torch.optim.Adam(self.model.parameters(), lr = self.lr)", "\n", "\n", "# criterion = nn.CrossEntropyLoss()", "\n", "criterion", "=", "F", ".", "nll_loss", "\n", "best_test_auc", "=", "0.", "\n", "best_val_auc", "=", "0.", "\n", "best_res", "=", "None", "\n", "cnt_wait", "=", "0", "\n", "patience", "=", "50", "\n", "# Training...", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits", ",", "modified_adj", ",", "bm_loss", ",", "nc_loss", "=", "self", ".", "model", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ",", "self", ".", "n_epochs", ",", "epoch", ")", "\n", "loss", "=", "nc_loss", "+", "bm_loss", "*", "self", ".", "alpha", "\n", "optims", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# for name, params in self.model.named_parameters():", "\n", "# \tif params.requires_grad:", "\n", "# \t\tprint(f'{name}: requires grad')", "\n", "# \t\tprint(torch.sum(params.grad))", "\n", "optims", ".", "step", "(", ")", "\n", "# Computation Graph", "\n", "# Validation", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# input_adj = self.adj.clone()", "\n", "# input_adj = input_adj.to(self.device)", "\n", "# nc_logits_eval_original, _ = self.model.nc_net(input_adj, self.user_features, self.item_features)", "\n", "# input_adj = self.adj.clone()", "\n", "# input_adj = input_adj.to(self.device)", "\n", "                ", "nc_logits_eval_modified", ",", "_", ",", "_", ",", "_", "=", "self", ".", "model", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ",", "self", ".", "n_epochs", ",", "epoch", ")", "\n", "", "training_res", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ".", "detach", "(", ")", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "# res = self.eval_node_cls(nc_logits_eval_original[self.val_nid], self.labels[self.val_nid], self.n_classes)", "\n", "res_modified", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval_modified", "[", "self", ".", "val_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "val_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "if", "res_modified", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "                ", "cnt_wait", "=", "0", "\n", "best_val_auc", "=", "res_modified", "[", "'auc'", "]", "\n", "# res_test = self.eval_node_cls(nc_logits_eval_original[self.test_nid], self.labels[self.test_nid], self.n_classes)", "\n", "res_test_modified", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval_modified", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "if", "res_test_modified", "[", "'auc'", "]", ">", "best_test_auc", ":", "\n", "                    ", "best_test_auc", "=", "res_test_modified", "[", "'auc'", "]", "\n", "best_res", "=", "res_test_modified", "\n", "", "self", ".", "logger", ".", "info", "(", "'Eland Training, Epoch [{}/{}]: loss {:.4f}, train_auc: {:.4f}, val_auc {:.4f}, test_auc {:.4f}, test_ap {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "training_res", "[", "'auc'", "]", ",", "res_modified", "[", "'auc'", "]", ",", "res_test_modified", "[", "'auc'", "]", ",", "res_test_modified", "[", "'ap'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "cnt_wait", "+=", "1", "\n", "self", ".", "logger", ".", "info", "(", "'Eland Training, Epoch [{}/{}]: loss {:.4f}, train_auc: {:.4f}, val_auc {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "training_res", "[", "'auc'", "]", ",", "res_modified", "[", "'auc'", "]", ")", ")", "\n", "\n", "", "if", "cnt_wait", ">=", "patience", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Early stop!'", ")", "\n", "break", "\n", "", "", "self", ".", "logger", ".", "info", "(", "'Best Test Results: auc {:.4f}, ap {:.4f}'", ".", "format", "(", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", ")", ")", "\n", "\n", "return", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.log_parameters": [[249, 261], ["Eland_e2e_unsup.Eland_e2e_uns.logger.info"], "methods", ["None"], ["", "def", "log_parameters", "(", "self", ",", "all_vars", ")", ":", "\n", "        ", "del", "all_vars", "[", "'self'", "]", "\n", "del", "all_vars", "[", "'adj_matrix'", "]", "\n", "del", "all_vars", "[", "'user_features'", "]", "\n", "del", "all_vars", "[", "'item_features'", "]", "\n", "del", "all_vars", "[", "'labels'", "]", "\n", "del", "all_vars", "[", "'tvt_nids'", "]", "\n", "del", "all_vars", "[", "'lstm_dataloader'", "]", "\n", "del", "all_vars", "[", "'u2index'", "]", "\n", "del", "all_vars", "[", "'p2index'", "]", "\n", "del", "all_vars", "[", "'idx2feats'", "]", "\n", "self", ".", "logger", ".", "info", "(", "f'Parameters: {all_vars}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.transform_mat": [[262, 270], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "transform_mat", "(", "matrix", ")", ":", "\n", "        ", "\"\"\"\n            Since in the original matrix, there are items that have zero degree, we add a small delta in order to calculate the norm properly\n        \"\"\"", "\n", "delta", "=", "1e-5", "\n", "matrix", "=", "matrix", "+", "delta", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.move_to_cuda": [[271, 277], ["var.to"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "move_to_cuda", "(", "var", ",", "device", ")", ":", "\n", "        ", "if", "not", "var", ".", "is_cuda", ":", "\n", "            ", "return", "var", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.get_logger": [[278, 298], ["logging.getLogger", "logging.getLogger.hasHandlers", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.handlers.clear", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_logger", "(", "name", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "(", "logger", ".", "hasHandlers", "(", ")", ")", ":", "\n", "            ", "logger", ".", "handlers", ".", "clear", "(", ")", "\n", "", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# Foramtter", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(message)s'", ")", "\n", "# console handler", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "# create file handler", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "fh", "=", "logging", ".", "FileHandler", "(", "f'logs/ELANDe2e-{name}.log'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_e2e_uns.eval_node_cls": [[299, 320], ["logits.cpu().numpy.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "logits.cpu().numpy.cpu().numpy.cpu", "labels.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_node_cls", "(", "logits", ",", "labels", ",", "n_classes", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# y_pred = np.argmax(logits, axis=1)", "\n", "# logits = logits.T[1]", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# fpr, tpr, _ = roc_curve(labels, logits, pos_label=1)", "\n", "roc_auc", "=", "roc_auc_score", "(", "labels", ",", "logits", ")", "\n", "# precisions, recalls, _ = precision_recall_curve(labels, logits, pos_label=1)", "\n", "ap", "=", "average_precision_score", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "# f1 = f1_score(labels, y_pred)", "\n", "# conf_mat = np.zeros((n_classes, n_classes))", "\n", "results", "=", "{", "\n", "# 'f1': f1,", "\n", "'ap'", ":", "ap", ",", "\n", "# 'conf': conf_mat,", "\n", "'auc'", ":", "roc_auc", "\n", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_Model.__init__": [[322, 347], ["torch.Module.__init__", "idx2feats.to", "model_zoo.GAU_E", "model_zoo.Dominant", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "model_zoo.DeepAE", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "lstm_dataloader", ",", "n_classes", ",", "n_layers", ",", "activation", ",", "\n", "dropout", ",", "device", ",", "method", ",", "u2idx", ",", "p2idx", ",", "idx2feats", ",", "bmloss_type", ",", "rnn_type", ")", ":", "\n", "        ", "super", "(", "Eland_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "loader", "=", "lstm_dataloader", "\n", "self", ".", "u2idx", ",", "self", ".", "p2idx", "=", "u2idx", ",", "p2idx", "\n", "self", ".", "idx2feats", "=", "idx2feats", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Behavior Modelling", "\n", "self", ".", "bm_net", "=", "GAU_E", "(", "dim_feats", ",", "dim_h", ",", "idx2feats", ",", "p2idx", ",", "rnn_type", "=", "rnn_type", ",", "out_sz", "=", "300", ")", "\n", "\n", "# Node Classification", "\n", "if", "method", "==", "'dominant'", ":", "\n", "            ", "self", ".", "nc_net", "=", "Dominant", "(", "dim_feats", ",", "dim_h", ",", "dropout", "=", "0", ",", "alpha", "=", "0.5", ")", "\n", "", "elif", "method", "==", "'deepae'", ":", "\n", "            ", "self", ".", "nc_net", "=", "DeepAE", "(", "dim_feats", ",", "dim_h", ",", "dropout", "=", "0", ",", "alpha", "=", "0.025", ")", "\n", "# self.nc_net = GNN(dim_feats, dim_h, n_classes, n_layers, activation, dropout, gnnlayer_type=gnnlayer_type)", "\n", "\n", "# bm_loss", "\n", "", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "if", "bmloss_type", "==", "'mse'", ":", "\n", "            ", "self", ".", "criterion", "=", "MSELoss", "(", ")", "\n", "", "elif", "bmloss_type", "==", "'cos'", ":", "\n", "            ", "self", ".", "criterion", "=", "CosineEmbeddingLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_Model.forward": [[348, 395], ["enumerate", "Eland_e2e_unsup.Eland_Model.nc_net", "feats.to().float.to().float.to().float", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "num_pred.to.to.to", "Eland_e2e_unsup.Eland_Model.bm_net", "numpy.arange", "delta.squeeze.squeeze.squeeze", "feats.to().float.to().float.clone", "range", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "len", "Eland_e2e_unsup.Eland_Model.match", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "range", "Eland_e2e_unsup.Eland_Model.bm_net", "delta.squeeze.squeeze.squeeze", "feats.to().float.to().float.to", "Eland_e2e_unsup.Eland_Model.criterion", "Eland_e2e_unsup.Eland_Model.criterion", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "tmp.unsqueeze().repeat", "max", "feats.to().float.to().float.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "numpy.arange", "u_delta.size", "pred_features.detach", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "tmp.unsqueeze", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "numpy.arange", "len", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "feats.to().float.to().float.size", "feats.to().float.to().float.size"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.match"], ["", "", "def", "forward", "(", "self", ",", "original_adj", ",", "user_features", ",", "item_features", ",", "total_epochs", "=", "100", ",", "cur_epoch", "=", "100", ")", ":", "\n", "# num_pred = self.base_pred", "\n", "# Behavior Modelling as Graph Augmentation through Delta", "\n", "# TODO: Potential improvement", "\n", "        ", "bm_loss", "=", "0", "# init loss for future backward", "\n", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "_", ",", "feats_length", ")", "in", "enumerate", "(", "self", ".", "loader", ")", ":", "\n", "            ", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "num_pred", "=", "torch", ".", "mul", "(", "torch", ".", "true_divide", "(", "feats_length", ",", "self", ".", "loader", ".", "dataset", ".", "total_edges", ")", ",", "4000", ")", "\n", "# num_pred = torch.mul(torch.div(feats_length, self.loader.dataset.total_edges), 4000.0)", "\n", "num_pred", "=", "torch", ".", "floor", "(", "num_pred", ")", "\n", "num_pred", "=", "num_pred", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Using next element as label", "\n", "out", ",", "out_len", "=", "self", ".", "bm_net", "(", "feats", ",", "feats_length", ")", "\n", "for", "idx", "in", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ":", "\n", "                ", "if", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "                    ", "bm_loss", "+=", "self", ".", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "bm_loss", "+=", "self", ".", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ")", "\n", "\n", "#delta: (batch_size, 1, feature_size)", "\n", "", "", "delta", "=", "out", "[", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ",", "out_len", "-", "1", ",", "None", "]", "\n", "delta", "=", "delta", ".", "squeeze", "(", ")", "\n", "\n", "# Store intermediary vars", "\n", "feats2", "=", "feats", ".", "clone", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "torch", ".", "max", "(", "num_pred", ")", ".", "int", "(", ")", "+", "1", ")", ":", "\n", "                ", "u_delta", ",", "pred_features", "=", "self", ".", "match", "(", "delta", ",", "0.5", "+", "4.5", "*", "(", "total_epochs", "-", "cur_epoch", ")", "/", "total_epochs", ")", "\n", "tmp", "=", "i", "<=", "num_pred", "\n", "# indices = [self.u2idx[uid.item()] for uid in uids]", "\n", "indices", "=", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "\n", "# Update Graph", "\n", "original_adj", "[", "indices", "]", "+=", "torch", ".", "mul", "(", "tmp", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "u_delta", ".", "size", "(", "1", ")", ")", ",", "u_delta", ")", "\n", "if", "max", "(", "feats_length", ")", ">=", "feats", ".", "size", "(", "1", ")", ":", "\n", "                    ", "feats2", "=", "torch", ".", "cat", "(", "(", "feats", ",", "torch", ".", "cuda", ".", "FloatTensor", "(", "feats", ".", "size", "(", "0", ")", ",", "1", ",", "feats", ".", "size", "(", "2", ")", ")", ".", "fill_", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "feats_length", ")", ")", ":", "\n", "                    ", "feats2", "[", "idx", "]", "[", "feats_length", "[", "idx", "]", "]", "=", "pred_features", ".", "detach", "(", ")", "[", "idx", "]", "\n", "", "out", ",", "out_len", "=", "self", ".", "bm_net", "(", "feats2", ",", "feats_length", ")", "\n", "delta", "=", "out", "[", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ",", "out_len", "-", "1", ",", "None", "]", "\n", "#delta: (batch_size, 1, feature_size)", "\n", "delta", "=", "delta", ".", "squeeze", "(", ")", "\n", "# Update features", "\n", "", "", "user_features", "=", "original_adj", "@", "item_features", "\n", "nc_loss", ",", "nc_logits", ",", "_", "=", "self", ".", "nc_net", "(", "original_adj", ",", "user_features", ",", "item_features", ")", "\n", "\n", "return", "nc_logits", ",", "original_adj", ",", "bm_loss", ",", "nc_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_Model.match": [[396, 407], ["Eland_e2e_unsup.Eland_Model.cosine_similarity", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.cosine_similarity"], ["", "def", "match", "(", "self", ",", "x", ",", "tau", ")", ":", "\n", "        ", "\"\"\"\n            x: (batch_size, features_size)\n        \"\"\"", "\n", "# match: delta: (batch_size, feature_size) --> (batch_size, dict_size)", "\n", "# pred_features: (batch_size, feature_size) --> (batch_size, feature_size)", "\n", "similarity_matrix", "=", "self", ".", "cosine_similarity", "(", "x", ",", "self", ".", "idx2feats", ")", "# idx2feats: (dict_sz, feat_sz)", "\n", "similarity_matrix", "=", "F", ".", "gumbel_softmax", "(", "similarity_matrix", ",", "tau", "=", "tau", ",", "hard", "=", "True", ",", "dim", "=", "1", ")", "\n", "pred_features", "=", "self", ".", "idx2feats", "[", "torch", ".", "argmax", "(", "similarity_matrix", ",", "dim", "=", "1", ")", "]", "\n", "\n", "return", "similarity_matrix", ",", "pred_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_Model.min_max": [[408, 411], ["[].reshape", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "min_max", "(", "mat", ")", ":", "\n", "        ", "return", "(", "mat", "-", "torch", ".", "min", "(", "mat", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "/", "(", "torch", ".", "max", "(", "mat", ",", "dim", "=", "1", ")", "[", "0", "]", "-", "torch", ".", "min", "(", "mat", ",", "dim", "=", "1", ")", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.Eland_Model.cosine_similarity": [[412, 419], ["torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cosine_similarity", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n            x1: (batch_size, feature_size); x2: (dict_size, feature_size)\n        \"\"\"", "\n", "x2", "=", "x2", ".", "T", "\n", "return", "(", "x1", "@", "x2", ")", "/", "(", "(", "torch", ".", "norm", "(", "x1", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "@", "torch", ".", "norm", "(", "x2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.scipysp_to_pytorchsp": [[421, 432], ["numpy.vstack().transpose", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "scipy.isspmatrix_coo", "sp_mx.tocoo.tocoo", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Size", "torch.Size", "torch.Size", "numpy.vstack"], "function", ["None"], ["", "", "def", "scipysp_to_pytorchsp", "(", "sp_mx", ")", ":", "\n", "    ", "\"\"\" converts scipy sparse matrix to pytorch sparse matrix \"\"\"", "\n", "if", "not", "sp", ".", "isspmatrix_coo", "(", "sp_mx", ")", ":", "\n", "        ", "sp_mx", "=", "sp_mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "sp_mx", ".", "row", ",", "sp_mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "sp_mx", ".", "data", "\n", "shape", "=", "sp_mx", ".", "shape", "\n", "pyt_sp_mx", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "LongTensor", "(", "coords", ".", "T", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "values", ")", ",", "\n", "torch", ".", "Size", "(", "shape", ")", ")", "\n", "return", "pyt_sp_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.get_tensor_size": [[434, 436], ["tensor.element_size", "tensor.nelement"], "function", ["None"], ["", "def", "get_tensor_size", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "element_size", "(", ")", "*", "tensor", ".", "nelement", "(", ")", "\n", "", "def", "getBack", "(", "var_grad_fn", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.getBack": [[436, 439], ["print", "print", "len"], "function", ["None"], ["", "def", "getBack", "(", "var_grad_fn", ")", ":", "\n", "    ", "print", "(", "var_grad_fn", ")", "\n", "print", "(", "len", "(", "var_grad_fn", ".", "next_functions", ")", ")", "\n", "", "def", "get_sum_weights", "(", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e_unsup.get_sum_weights": [[439, 445], ["model.named_parameters", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_sum_weights", "(", "model", ")", ":", "\n", "    ", "s", "=", "0", "\n", "for", "name", ",", "parameter", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "parameter", ".", "requires_grad", ":", "\n", "            ", "s", "+=", "torch", ".", "sum", "(", "parameter", ".", "data", ")", "\n", "", "", "return", "s", "\n", "", ""]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GAU_I.__init__": [[12, 31], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.RNN", "torch.RNN", "torch.RNN", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "idx2feats", ",", "p2idx", ",", "out_sz", "=", "300", ",", "rnn_type", "=", "'lstm'", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "GAU_I", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim_feats", "=", "dim_feats", "\n", "self", ".", "dim_h", "=", "dim_h", "\n", "self", ".", "out_sz", "=", "out_sz", "\n", "self", ".", "idx2feats", "=", "idx2feats", "\n", "self", ".", "p2idx", "=", "p2idx", "\n", "# Transform hidden space to feature space", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "dim_h", ",", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "dim_h", ",", "out_sz", ")", "\n", "\n", "if", "rnn_type", "==", "'lstm'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "dim_feats", ",", "hidden_size", "=", "dim_h", ",", "num_layers", "=", "2", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "", "if", "rnn_type", "==", "'rnn'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "RNN", "(", "input_size", "=", "dim_feats", ",", "hidden_size", "=", "dim_h", ",", "num_layers", "=", "2", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "", "if", "rnn_type", "==", "'gru'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "dim_feats", ",", "hidden_size", "=", "dim_h", ",", "num_layers", "=", "2", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "", "self", ".", "rnn_type", "=", "rnn_type", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GAU_I.forward": [[32, 61], ["numpy.argsort", "numpy.argsort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model_zoo.GAU_I.fc2", "model_zoo.GAU_I.rnn", "model_zoo.GAU_I.rnn", "model_zoo.GAU_I.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "feats_length", ")", ":", "\n", "        ", "\"\"\"\n            pids: Not used in this verison\n            feats: (batch_size, max_len_in_batch, (feat_sz))\n            return: (batch_size, max_len_in_batch, (feat_sz))\n        \"\"\"", "\n", "sort", "=", "np", ".", "argsort", "(", "-", "feats_length", ")", "\n", "length_sort", "=", "feats_length", "[", "sort", "]", "\n", "reversed_sort", "=", "np", ".", "argsort", "(", "sort", ")", "\n", "\n", "# packing operation", "\n", "x", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "feats", "[", "sort", "]", ",", "length_sort", ",", "batch_first", "=", "True", ")", "\n", "if", "self", ".", "rnn_type", "==", "'lstm'", ":", "\n", "            ", "output", ",", "(", "h", ",", "c", ")", "=", "self", ".", "rnn", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "output", ",", "h", "=", "self", ".", "rnn", "(", "x", ")", "\n", "# unpacking operation", "\n", "", "output", ",", "out_len", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "output", ",", "batch_first", "=", "True", ")", "\n", "# Now we have output of shape (batch_size, len_seq, hidden_size); and we get the last hidden layer", "\n", "# output = output[np.arange(len(out_len)), out_len-1, None]", "\n", "output", "=", "output", "[", "reversed_sort", "]", "\n", "out_len", "=", "out_len", "[", "reversed_sort", "]", "\n", "\n", "# Flags and Features", "\n", "flag", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc1", "(", "output", ")", ")", "\n", "# Map it to feature space", "\n", "output", "=", "self", ".", "fc2", "(", "output", ")", "\n", "\n", "return", "output", ",", "out_len", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GAU_I.min_max": [[62, 68], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "min_max", "(", "arr", ")", ":", "\n", "        ", "\"\"\"\n            arr: Tensor\n        \"\"\"", "\n", "return", "(", "arr", "-", "torch", ".", "min", "(", "arr", ")", ")", "/", "(", "torch", ".", "max", "(", "arr", ")", "-", "torch", ".", "min", "(", "arr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GAU_E.__init__": [[70, 87], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.RNN", "torch.RNN", "torch.RNN", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "idx2feats", ",", "p2idx", ",", "out_sz", "=", "300", ",", "rnn_type", "=", "'lstm'", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "GAU_E", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim_feats", "=", "dim_feats", "\n", "self", ".", "dim_h", "=", "dim_h", "\n", "self", ".", "out_sz", "=", "out_sz", "\n", "self", ".", "idx2feats", "=", "idx2feats", "\n", "self", ".", "p2idx", "=", "p2idx", "\n", "# Transform hidden space to feature space", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "dim_h", ",", "out_sz", ")", "\n", "if", "rnn_type", "==", "'lstm'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "dim_feats", ",", "hidden_size", "=", "dim_h", ",", "num_layers", "=", "2", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "", "if", "rnn_type", "==", "'rnn'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "RNN", "(", "input_size", "=", "dim_feats", ",", "hidden_size", "=", "dim_h", ",", "num_layers", "=", "2", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "", "if", "rnn_type", "==", "'gru'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "dim_feats", ",", "hidden_size", "=", "dim_h", ",", "num_layers", "=", "2", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "", "self", ".", "rnn_type", "=", "rnn_type", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GAU_E.forward": [[88, 115], ["numpy.argsort", "numpy.argsort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "model_zoo.GAU_E.fc", "model_zoo.GAU_E.rnn", "model_zoo.GAU_E.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "feats_length", ")", ":", "\n", "        ", "\"\"\"\n            pids: Not used in this verison\n            feats: (batch_size, max_len_in_batch, (feat_sz))\n            return: (batch_size, max_len_in_batch, (feat_sz))\n        \"\"\"", "\n", "sort", "=", "np", ".", "argsort", "(", "-", "feats_length", ")", "\n", "length_sort", "=", "feats_length", "[", "sort", "]", "\n", "reversed_sort", "=", "np", ".", "argsort", "(", "sort", ")", "\n", "\n", "# packing operation", "\n", "x", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "feats", "[", "sort", "]", ",", "length_sort", ",", "batch_first", "=", "True", ")", "\n", "if", "self", ".", "rnn_type", "==", "'lstm'", ":", "\n", "            ", "output", ",", "(", "h", ",", "c", ")", "=", "self", ".", "rnn", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "output", ",", "h", "=", "self", ".", "rnn", "(", "x", ")", "\n", "# unpacking operation", "\n", "", "output", ",", "out_len", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "output", ",", "batch_first", "=", "True", ")", "\n", "# Now we have output of shape (batch_size, len_seq, hidden_size); and we get the last hidden layer", "\n", "# output = output[np.arange(len(out_len)), out_len-1, None]", "\n", "output", "=", "output", "[", "reversed_sort", "]", "\n", "out_len", "=", "out_len", "[", "reversed_sort", "]", "\n", "\n", "# Map it to feature space", "\n", "output", "=", "self", ".", "fc", "(", "output", ")", "\n", "\n", "return", "output", ",", "out_len", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GAU_E.min_max": [[116, 122], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "min_max", "(", "arr", ")", ":", "\n", "        ", "\"\"\"\n            arr: Tensor\n        \"\"\"", "\n", "return", "(", "arr", "-", "torch", ".", "min", "(", "arr", ")", ")", "/", "(", "torch", ".", "max", "(", "arr", ")", "-", "torch", ".", "min", "(", "arr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GNN.__init__": [[127, 146], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_zoo.GNN.layers.append", "range", "model_zoo.GNN.layers.append", "gnnlayer", "model_zoo.GNN.layers.append", "gnnlayer", "gnnlayer"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "n_classes", ",", "n_layers", ",", "\n", "activation", ",", "dropout", ",", "gnnlayer_type", "=", "'gcn'", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "heads", "=", "[", "1", "]", "*", "(", "n_layers", "+", "1", ")", "\n", "if", "gnnlayer_type", "==", "'gcn'", ":", "\n", "            ", "gnnlayer", "=", "GCNLayer", "\n", "", "elif", "gnnlayer_type", "==", "'gsage'", ":", "\n", "            ", "gnnlayer", "=", "SAGELayer", "\n", "", "elif", "gnnlayer_type", "==", "'hetgcn'", ":", "\n", "            ", "gnnlayer", "=", "HetLayer", "\n", "", "self", ".", "gnnlayer_type", "=", "gnnlayer_type", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# input layer", "\n", "self", ".", "layers", ".", "append", "(", "gnnlayer", "(", "dim_feats", ",", "dim_h", ",", "heads", "[", "0", "]", ",", "activation", ",", "0", ")", ")", "\n", "# hidden layers", "\n", "for", "i", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "gnnlayer", "(", "dim_h", "*", "heads", "[", "i", "]", ",", "dim_h", ",", "heads", "[", "i", "+", "1", "]", ",", "activation", ",", "dropout", ")", ")", "\n", "# output layer", "\n", "", "self", ".", "layers", ".", "append", "(", "gnnlayer", "(", "dim_h", "*", "heads", "[", "-", "2", "]", ",", "n_classes", ",", "heads", "[", "-", "1", "]", ",", "None", ",", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GNN.forward": [[147, 163], ["model_zoo.GNN.get_normed_d", "enumerate", "enumerate", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "layer", "layer", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.get_normed_d"], ["", "def", "forward", "(", "self", ",", "adj", ",", "features_u", ",", "features_v", ")", ":", "\n", "        ", "h_u", ",", "h_v", "=", "features_u", ",", "features_v", "\n", "if", "self", ".", "gnnlayer_type", "==", "'gcn'", ":", "\n", "            ", "d_u", ",", "d_v", "=", "self", ".", "get_normed_d", "(", "adj", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "h_u", ",", "h_v", "=", "layer", "(", "adj", ",", "h_u", ",", "h_v", ",", "d_u", ",", "d_v", ")", "\n", "if", "i", "==", "len", "(", "self", ".", "layers", ")", "-", "2", ":", "\n", "                    ", "emb", "=", "h_u", "\n", "", "", "", "if", "self", ".", "gnnlayer_type", "==", "'gsage'", "or", "self", ".", "gnnlayer_type", "==", "'hetgcn'", ":", "\n", "            ", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "h_u", ",", "h_v", "=", "layer", "(", "adj", ",", "h_u", ",", "h_v", ")", "\n", "if", "i", "==", "len", "(", "self", ".", "layers", ")", "-", "2", ":", "\n", "                    ", "emb", "=", "h_u", "\n", "# We only need user predictions in the end", "\n", "# return h_u", "\n", "", "", "", "return", "F", ".", "log_softmax", "(", "h_u", ",", "dim", "=", "1", ")", ",", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.GNN.get_normed_d": [[164, 175], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "A.sum", "A.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_normed_d", "(", "A", ")", ":", "\n", "        ", "\"\"\" Get normalized degree matrix of A\"\"\"", "\n", "d_u", "=", "A", ".", "sum", "(", "1", ")", "+", "1", "\n", "# Self Loop", "\n", "d_v", "=", "A", ".", "sum", "(", "0", ")", "+", "1", "\n", "\n", "d_u", "=", "torch", ".", "pow", "(", "d_u", ",", "-", "0.5", ")", "\n", "d_v", "=", "torch", ".", "pow", "(", "d_v", ",", "-", "0.5", ")", "\n", "\n", "return", "d_u", ",", "d_v", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.DeepAE.__init__": [[178, 187], ["torch.Module.__init__", "gcn_layers.GCNLayer", "gcn_layers.GCNLayer", "gcn_layers.GCNLayer", "gcn_layers.GCNLayer"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", "=", "64", ",", "dropout", "=", "0.", ",", "alpha", "=", "0.025", ")", ":", "\n", "        ", "super", "(", "DeepAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "# shared encoder", "\n", "self", ".", "enc1", "=", "GCNLayer", "(", "dim_feats", ",", "dim_h", ",", "1", ",", "F", ".", "relu", ",", "0", ")", "\n", "self", ".", "enc2", "=", "GCNLayer", "(", "dim_h", ",", "dim_h", ",", "1", ",", "F", ".", "relu", ",", "dropout", ")", "\n", "# attribute decoder", "\n", "self", ".", "attr_dec1", "=", "GCNLayer", "(", "dim_h", ",", "dim_h", ",", "1", ",", "F", ".", "relu", ",", "dropout", ")", "\n", "self", ".", "attr_dec2", "=", "GCNLayer", "(", "dim_h", ",", "dim_feats", ",", "1", ",", "F", ".", "relu", ",", "dropout", ")", "\n", "# # structure decoder", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.DeepAE.forward": [[190, 207], ["model_zoo.DeepAE.get_normed_d", "model_zoo.DeepAE.enc1", "model_zoo.DeepAE.enc2", "model_zoo.DeepAE.attr_dec1", "model_zoo.DeepAE.attr_dec2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model_zoo.DeepAE.get_loss"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.get_normed_d", "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.get_loss"], ["", "def", "forward", "(", "self", ",", "adj", ",", "features_u", ",", "features_v", ")", ":", "\n", "        ", "h_u", ",", "h_v", "=", "features_u", ",", "features_v", "\n", "d_u", ",", "d_v", ",", "d_u_orig", "=", "self", ".", "get_normed_d", "(", "adj", ")", "\n", "# encoding", "\n", "h_u", ",", "h_v", "=", "self", ".", "enc1", "(", "adj", ",", "h_u", ",", "h_v", ",", "d_u", ",", "d_v", ")", "\n", "z_u", ",", "z_v", "=", "self", ".", "enc2", "(", "adj", ",", "h_u", ",", "h_v", ",", "d_u", ",", "d_v", ")", "\n", "# attribute decoding", "\n", "x_u", ",", "x_v", "=", "self", ".", "attr_dec1", "(", "adj", ",", "z_u", ",", "z_v", ",", "d_u", ",", "d_v", ")", "\n", "x_u", ",", "x_v", "=", "self", ".", "attr_dec2", "(", "adj", ",", "x_u", ",", "x_v", ",", "d_u", ",", "d_v", ")", "\n", "# structure decoding", "\n", "# s_u, s_v = self.struct_dec1(adj, z_u, z_v, d_u, d_v)", "\n", "adj_pred", "=", "torch", ".", "sigmoid", "(", "x_u", "@", "x_v", ".", "T", ")", "\n", "\n", "loss", ",", "err", "=", "self", ".", "get_loss", "(", "adj", ",", "adj_pred", ",", "features_u", ",", "x_u", ",", "x_v", ",", "d_u_orig", ")", "\n", "# print(loss)", "\n", "# print('done---')", "\n", "return", "loss", ",", "err", ",", "z_u", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.DeepAE.get_loss": [[208, 231], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "err.min", "err.max", "err.min"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "adj", ",", "adj_pred", ",", "h", ",", "h_pred", ",", "x_v", ",", "d", ")", ":", "\n", "# attribute reconstruction loss", "\n", "# diff_attr = torch.square(h_pred - h)", "\n", "        ", "diff_attr", "=", "torch", ".", "pow", "(", "h_pred", "-", "h", ",", "2", ")", "\n", "err_attr", "=", "torch", ".", "sqrt", "(", "diff_attr", ".", "sum", "(", "1", ")", ")", "\n", "loss_attr", "=", "torch", ".", "mean", "(", "err_attr", ")", "\n", "# structure reconstruction loss", "\n", "# diff_stru = torch.square(adj_pred - adj)", "\n", "diff_stru", "=", "torch", ".", "pow", "(", "adj_pred", "-", "adj", ",", "2", ")", "\n", "err_stru", "=", "torch", ".", "sqrt", "(", "diff_stru", ".", "sum", "(", "1", ")", ")", "\n", "loss_stru", "=", "torch", ".", "mean", "(", "err_stru", ")", "\n", "# 1st order proximity", "\n", "loss_f", "=", "2", "*", "torch", ".", "trace", "(", "(", "h_pred", ".", "T", "*", "d", ")", "@", "h_pred", ")", "\n", "# semantic proximity", "\n", "h_u_norm", "=", "F", ".", "normalize", "(", "h_pred", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "h_v_norm", "=", "F", ".", "normalize", "(", "x_v", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "loss_s", "=", "torch", ".", "sum", "(", "adj", "*", "(", "h_u_norm", "@", "h_v_norm", ".", "T", ")", "*", "torch", ".", "log", "(", "adj_pred", ")", ")", "\n", "# eighted loss", "\n", "loss", "=", "self", ".", "alpha", "*", "loss_attr", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "loss_stru", "+", "0.1", "*", "loss_f", "-", "0.1", "*", "loss_s", "\n", "# anomaly rank", "\n", "err", "=", "self", ".", "alpha", "*", "err_attr", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "err_stru", "\n", "err", "=", "(", "err", "-", "err", ".", "min", "(", ")", ")", "/", "(", "err", ".", "max", "(", ")", "-", "err", ".", "min", "(", ")", "+", "1e-8", ")", "\n", "return", "loss", ",", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.DeepAE.get_normed_d": [[232, 241], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "A.sum", "A.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_normed_d", "(", "A", ")", ":", "\n", "        ", "\"\"\" Get normalized degree matrix of A\"\"\"", "\n", "# add self Loop", "\n", "d_u", "=", "A", ".", "sum", "(", "1", ")", "+", "1", "\n", "d_v", "=", "A", ".", "sum", "(", "0", ")", "+", "1", "\n", "d_u_normed", "=", "torch", ".", "pow", "(", "d_u", ",", "-", "0.5", ")", "\n", "d_v_normed", "=", "torch", ".", "pow", "(", "d_v", ",", "-", "0.5", ")", "\n", "return", "d_u_normed", ",", "d_v_normed", ",", "d_u", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.__init__": [[243, 254], ["torch.Module.__init__", "gcn_layers.GCNLayer", "gcn_layers.GCNLayer", "gcn_layers.GCNLayer", "gcn_layers.GCNLayer", "gcn_layers.GCNLayer"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", "=", "64", ",", "dropout", "=", "0.", ",", "alpha", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Dominant", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "# shared encoder", "\n", "self", ".", "enc1", "=", "GCNLayer", "(", "dim_feats", ",", "dim_h", ",", "1", ",", "F", ".", "relu", ",", "0", ")", "\n", "self", ".", "enc2", "=", "GCNLayer", "(", "dim_h", ",", "dim_h", ",", "1", ",", "F", ".", "relu", ",", "dropout", ")", "\n", "# attribute decoder", "\n", "self", ".", "attr_dec1", "=", "GCNLayer", "(", "dim_h", ",", "dim_h", ",", "1", ",", "F", ".", "relu", ",", "dropout", ")", "\n", "self", ".", "attr_dec2", "=", "GCNLayer", "(", "dim_h", ",", "dim_feats", ",", "1", ",", "F", ".", "relu", ",", "dropout", ")", "\n", "# structure decoder", "\n", "self", ".", "struct_dec1", "=", "GCNLayer", "(", "dim_h", ",", "dim_h", ",", "1", ",", "F", ".", "relu", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.forward": [[255, 276], ["model_zoo.Dominant.get_normed_d", "model_zoo.Dominant.enc1", "model_zoo.Dominant.enc2", "model_zoo.Dominant.attr_dec1", "model_zoo.Dominant.attr_dec2", "model_zoo.Dominant.struct_dec1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model_zoo.Dominant.get_loss"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.get_normed_d", "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.get_loss"], ["", "def", "forward", "(", "self", ",", "adj", ",", "features_u", ",", "features_v", ")", ":", "\n", "        ", "h_u", ",", "h_v", "=", "features_u", ",", "features_v", "\n", "d_u", ",", "d_v", "=", "self", ".", "get_normed_d", "(", "adj", ")", "\n", "# encoding", "\n", "h_u", ",", "h_v", "=", "self", ".", "enc1", "(", "adj", ",", "h_u", ",", "h_v", ",", "d_u", ",", "d_v", ")", "\n", "z_u", ",", "z_v", "=", "self", ".", "enc2", "(", "adj", ",", "h_u", ",", "h_v", ",", "d_u", ",", "d_v", ")", "\n", "# attribute decoding", "\n", "x_u", ",", "x_v", "=", "self", ".", "attr_dec1", "(", "adj", ",", "z_u", ",", "z_v", ",", "d_u", ",", "d_v", ")", "\n", "x_u", ",", "_", "=", "self", ".", "attr_dec2", "(", "adj", ",", "x_u", ",", "x_v", ",", "d_u", ",", "d_v", ")", "\n", "# structure decoding", "\n", "s_u", ",", "s_v", "=", "self", ".", "struct_dec1", "(", "adj", ",", "z_u", ",", "z_v", ",", "d_u", ",", "d_v", ")", "\n", "adj_pred", "=", "torch", ".", "sigmoid", "(", "s_u", "@", "s_v", ".", "T", ")", "\n", "# get loss", "\n", "# print(torch.isnan(features_u).sum(), torch.isnan(x_u).sum())", "\n", "# x = x_u - features_u", "\n", "# print(torch.isnan(x).sum())", "\n", "# print(torch.isnan(torch.square(x)).sum())", "\n", "loss", ",", "err", "=", "self", ".", "get_loss", "(", "adj", ",", "adj_pred", ",", "features_u", ",", "x_u", ")", "\n", "# print(loss)", "\n", "# print('done---')", "\n", "return", "loss", ",", "err", ",", "z_u", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.get_loss": [[277, 295], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "torch.pow.sum", "err.min", "err.max", "err.min"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "adj", ",", "adj_pred", ",", "h", ",", "h_pred", ")", ":", "\n", "# attribute reconstruction loss", "\n", "# x = h_pred - h", "\n", "# diff_attr = torch.square(x)", "\n", "        ", "diff_attr", "=", "torch", ".", "pow", "(", "h_pred", "-", "h", ",", "2", ")", "\n", "# diff_attr = torch.square(h_pred - h)", "\n", "err_attr", "=", "torch", ".", "sqrt", "(", "diff_attr", ".", "sum", "(", "1", ")", ")", "\n", "loss_attr", "=", "torch", ".", "mean", "(", "err_attr", ")", "\n", "# structure reconstruction loss", "\n", "diff_stru", "=", "torch", ".", "pow", "(", "adj_pred", "-", "adj", ",", "2", ")", "\n", "# diff_stru = torch.square(adj_pred - adj)", "\n", "err_stru", "=", "torch", ".", "sqrt", "(", "diff_stru", ".", "sum", "(", "1", ")", ")", "\n", "loss_stru", "=", "torch", ".", "mean", "(", "err_stru", ")", "\n", "# get weighted loss and err", "\n", "loss", "=", "self", ".", "alpha", "*", "loss_attr", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "loss_stru", "\n", "err", "=", "self", ".", "alpha", "*", "err_attr", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "err_stru", "\n", "err", "=", "(", "err", "-", "err", ".", "min", "(", ")", ")", "/", "(", "err", ".", "max", "(", ")", "-", "err", ".", "min", "(", ")", "+", "1e-8", ")", "\n", "return", "loss", ",", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.model_zoo.Dominant.get_normed_d": [[296, 305], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "A.sum", "A.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_normed_d", "(", "A", ")", ":", "\n", "        ", "\"\"\" Get normalized degree matrix of A\"\"\"", "\n", "# add self Loop", "\n", "d_u", "=", "A", ".", "sum", "(", "1", ")", "+", "1", "\n", "d_v", "=", "A", ".", "sum", "(", "0", ")", "+", "1", "\n", "d_u", "=", "torch", ".", "pow", "(", "d_u", ",", "-", "0.5", ")", "\n", "d_v", "=", "torch", ".", "pow", "(", "d_v", ",", "-", "0.5", ")", "\n", "return", "d_u", ",", "d_v", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.GCNLayer.__init__": [[10, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "gcn_layers.GCNLayer.init_params", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__", "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.HetLayer.init_params"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "n_heads", ",", "activation", ",", "dropout", ",", "bias", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "GCNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "if", "bias", ":", "\n", "\t\t\t", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "output_dim", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "b", "=", "None", "\n", "", "if", "dropout", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "0", "\n", "", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.GCNLayer.init_params": [[24, 30], ["gcn_layers.GCNLayer.W.data.uniform_", "math.sqrt", "gcn_layers.GCNLayer.b.data.uniform_", "gcn_layers.GCNLayer.W.size"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "\t\t", "\"\"\" Initialize weights with xavier uniform and biases with all zeros \"\"\"", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "W", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "W", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "b", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.GCNLayer.forward": [[32, 64], ["gcn_layers.GCNLayer.dropout", "gcn_layers.GCNLayer.dropout", "D_u.unsqueeze", "D_v.unsqueeze", "D_u.unsqueeze", "D_v.unsqueeze", "gcn_layers.GCNLayer.activation", "gcn_layers.GCNLayer.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "adj", ",", "h_u", ",", "h_v", ",", "D_u", ",", "D_v", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tadj: (n, m) tensor\n\t\t\th_u: (n, f) tensor; user features\n\t\t\th_v: (m, f) tensor; item features\n\t\t\tD_u: Normed Degree matrix of U\n\t\t\tD_v: Normed Degree matrix of V\n\t\t\"\"\"", "\n", "if", "self", ".", "dropout", ":", "\n", "\t\t\t", "h_u", "=", "self", ".", "dropout", "(", "h_u", ")", "\n", "h_v", "=", "self", ".", "dropout", "(", "h_v", ")", "\n", "", "x_u", "=", "h_u", "@", "self", ".", "W", "\n", "x_v", "=", "h_v", "@", "self", ".", "W", "\n", "\n", "x_u", "=", "x_tmp_u", "=", "x_u", "*", "D_u", ".", "unsqueeze", "(", "1", ")", "\n", "x_v", "=", "x_tmp_v", "=", "x_v", "*", "D_v", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "x_u", "=", "adj", "@", "x_v", "+", "x_tmp_u", "\n", "x_v", "=", "adj", ".", "T", "@", "x_tmp_u", "+", "x_tmp_v", "\n", "\n", "x_u", "=", "x_u", "*", "D_u", ".", "unsqueeze", "(", "1", ")", "\n", "x_v", "=", "x_v", "*", "D_v", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "\t\t\t", "x_u", "+=", "self", ".", "b", "\n", "x_v", "+=", "self", ".", "b", "\n", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "\t\t\t", "x_u", "=", "self", ".", "activation", "(", "x_u", ")", "\n", "x_v", "=", "self", ".", "activation", "(", "x_v", ")", "\n", "\n", "", "return", "x_u", ",", "x_v", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.SAGELayer.__init__": [[68, 79], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "gcn_layers.SAGELayer.init_params", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__", "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.HetLayer.init_params"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "n_heads", ",", "activation", ",", "dropout", ",", "bias", "=", "True", ")", ":", "\n", "\t\t", "torch", ".", "manual_seed", "(", "12345", ")", "\n", "super", "(", "SAGELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_neigh", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "linear_self", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "if", "dropout", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "0", "\n", "", "self", ".", "init_params", "(", ")", "\n", "", "def", "init_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.SAGELayer.init_params": [[79, 87], ["torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "gcn_layers.SAGELayer.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "param.size"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "\t\t", "\"\"\" Initialize weights with xavier uniform and biases with all zeros \"\"\"", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.SAGELayer.forward": [[88, 120], ["gcn_layers.SAGELayer.linear_neigh", "gcn_layers.SAGELayer.linear_neigh", "gcn_layers.SAGELayer.dropout", "gcn_layers.SAGELayer.dropout", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "degs_u.unsqueeze", "degs_v.unsqueeze", "gcn_layers.SAGELayer.activation", "gcn_layers.SAGELayer.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "adj", ",", "h_u", ",", "h_v", ")", ":", "\n", "\t\t", "if", "self", ".", "dropout", ":", "\n", "\t\t\t", "h_u", "=", "self", ".", "dropout", "(", "h_u", ")", "\n", "h_v", "=", "self", ".", "dropout", "(", "h_v", ")", "\n", "", "x_u", "=", "adj", "@", "h_v", "+", "h_u", "# h_v: (n, emb)", "\n", "x_v", "=", "adj", ".", "T", "@", "h_u", "+", "h_v", "# h_u: (m, emb)", "\n", "\n", "degs_u", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "+", "1", "\n", "degs_v", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "0", ")", ".", "squeeze", "(", ")", "+", "1", "\n", "\n", "x_u", "=", "x_u", "/", "degs_u", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x_v", "=", "x_v", "/", "degs_v", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "x_u", "=", "self", ".", "linear_neigh", "(", "x_u", ")", "\n", "x_v", "=", "self", ".", "linear_neigh", "(", "x_v", ")", "\n", "\n", "# x_u_self = self.linear_self(h_u)", "\n", "# x_v_self = self.linear_self(h_v)", "\n", "\n", "# alpha_u = self.a_neigh(x_u) + self.a_self(x_u_self)", "\n", "# alpha_v = self.a_neigh(x_v) + self.a_self(x_v_self)", "\n", "\n", "# x_u = sx_u_neigh + x_u_self", "\n", "# x_v = x_v_neigh + x_v_self", "\n", "\n", "if", "self", ".", "activation", ":", "\n", "\t\t\t", "x_u", "=", "self", ".", "activation", "(", "x_u", ")", "\n", "x_v", "=", "self", ".", "activation", "(", "x_v", ")", "\n", "\n", "# x_u = F.normalize(x_u, dim=1, p=2)", "\n", "# x_v = F.normalize(x_v, dim=1, p=2)", "\n", "", "return", "x_u", ",", "x_v", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.HetLayer.__init__": [[123, 137], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "gcn_layers.HetLayer.init_params", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__", "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.HetLayer.init_params"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "n_heads", ",", "activation", ",", "dropout", ",", "bias", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "HetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_neigh", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "linear_self", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "bias", ")", "\n", "# Attention", "\n", "self", ".", "a_neigh", "=", "nn", ".", "Linear", "(", "output_dim", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "a_self", "=", "nn", ".", "Linear", "(", "output_dim", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "\n", "if", "dropout", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "0", "\n", "", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.HetLayer.init_params": [[138, 146], ["torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "gcn_layers.HetLayer.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "param.size"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "\t\t", "\"\"\" Initialize weights with xavier uniform and biases with all zeros \"\"\"", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "if", "len", "(", "param", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.gcn_layers.HetLayer.forward": [[147, 186], ["gcn_layers.HetLayer.linear_neigh", "gcn_layers.HetLayer.linear_neigh", "gcn_layers.HetLayer.linear_self", "gcn_layers.HetLayer.linear_self", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "gcn_layers.HetLayer.dropout", "gcn_layers.HetLayer.dropout", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "degs_u.unsqueeze", "degs_v.unsqueeze", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "gcn_layers.HetLayer.activation", "gcn_layers.HetLayer.activation", "gcn_layers.HetLayer.a_neigh", "gcn_layers.HetLayer.a_self", "gcn_layers.HetLayer.a_neigh", "gcn_layers.HetLayer.a_self", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "adj", ",", "h_u", ",", "h_v", ")", ":", "\n", "\t\t", "if", "self", ".", "dropout", ":", "\n", "\t\t\t", "h_u", "=", "self", ".", "dropout", "(", "h_u", ")", "\n", "h_v", "=", "self", ".", "dropout", "(", "h_v", ")", "\n", "", "x_u", "=", "adj", "@", "h_v", "+", "h_u", "# h_v: (n, emb)", "\n", "x_v", "=", "adj", ".", "T", "@", "h_u", "+", "h_v", "# h_u: (m, emb)", "\n", "\n", "degs_u", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "+", "1", "\n", "degs_v", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "0", ")", ".", "squeeze", "(", ")", "+", "1", "\n", "\n", "x_u", "=", "x_u", "/", "degs_u", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x_v", "=", "x_v", "/", "degs_v", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "x_u", "=", "self", ".", "linear_neigh", "(", "x_u", ")", "\n", "x_v", "=", "self", ".", "linear_neigh", "(", "x_v", ")", "\n", "\n", "x_u_self", "=", "self", ".", "linear_self", "(", "h_u", ")", "\n", "x_v_self", "=", "self", ".", "linear_self", "(", "h_v", ")", "\n", "\n", "# Attention", "\n", "alpha_u", "=", "torch", ".", "sigmoid", "(", "self", ".", "a_neigh", "(", "x_u", ")", "+", "self", ".", "a_self", "(", "x_u_self", ")", ")", "\n", "alpha_v", "=", "torch", ".", "sigmoid", "(", "self", ".", "a_neigh", "(", "x_v", ")", "+", "self", ".", "a_self", "(", "x_v_self", ")", ")", "\n", "\n", "# Softmax", "\n", "alpha_u", "=", "F", ".", "softmax", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "alpha_u", "[", "0", "]", ",", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "alpha_v", "=", "F", ".", "softmax", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "alpha_v", "[", "0", "]", ",", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# Neighbour + self", "\n", "x_u", "=", "alpha_u", "[", "0", "]", "*", "x_u", "+", "alpha_u", "[", "1", "]", "*", "x_u_self", "\n", "x_v", "=", "alpha_v", "[", "0", "]", "*", "x_v", "+", "alpha_v", "[", "1", "]", "*", "x_v_self", "\n", "\n", "if", "self", ".", "activation", ":", "\n", "\t\t\t", "x_u", "=", "self", ".", "activation", "(", "x_u", ")", "\n", "x_v", "=", "self", ".", "activation", "(", "x_v", ")", "\n", "\n", "# x_u = F.normalize(x_u, dim=1, p=2)", "\n", "# x_v = F.normalize(x_v, dim=1, p=2)", "\n", "\n", "", "return", "x_u", ",", "x_v", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.__init__": [[16, 55], ["len", "locals", "Eland_e2e.Eland_e2e.log_parameters", "Eland_e2e.Eland_e2e.load_data", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "Eland_e2e.RGCN_Model", "numpy.unique", "Eland_e2e.Eland_e2e.get_logger", "logging.getLogger", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.log_parameters", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.load_data", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.get_logger"], ["    ", "def", "__init__", "(", "self", ",", "adj_matrix", ",", "lstm_dataloader", ",", "user_features", ",", "item_features", ",", "\n", "labels", ",", "tvt_nids", ",", "u2index", ",", "p2index", ",", "idx2feats", ",", "dim_feats", "=", "300", ",", "cuda", "=", "0", ",", "hidden_size", "=", "128", ",", "n_layers", "=", "2", ",", "\n", "epochs", "=", "400", ",", "seed", "=", "-", "1", ",", "lr", "=", "0.0001", ",", "weight_decay", "=", "1e-5", ",", "dropout", "=", "0.4", ",", "tensorboard", "=", "False", ",", "\n", "log", "=", "True", ",", "name", "=", "'debug'", ",", "gnnlayer_type", "=", "'gcn'", ",", "rnn_type", "=", "'lstm'", ",", "pretrain_bm", "=", "25", ",", "pretrain_nc", "=", "300", ",", "alpha", "=", "0.05", ",", "bmloss_type", "=", "'mse'", ",", "device", "=", "'cuda'", ",", "base_pred", "=", "400", ")", ":", "\n", "        ", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "n_epochs", "=", "epochs", "\n", "self", ".", "pretrain_bm", "=", "pretrain_bm", "\n", "self", ".", "pretrain_nc", "=", "pretrain_nc", "\n", "self", ".", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "train_nid", ",", "self", ".", "val_nid", ",", "self", ".", "test_nid", "=", "tvt_nids", "\n", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "self", ".", "base_pred", "=", "base_pred", "\n", "if", "log", ":", "\n", "            ", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "# if not torch.cuda.is_available():", "\n", "# \tcuda = -1", "\n", "# self.device = torch.device(f'cuda:{cuda}' if cuda >= 0 else 'cpu')", "\n", "", "self", ".", "device", "=", "device", "\n", "# Log parameters for reference", "\n", "all_vars", "=", "locals", "(", ")", "\n", "self", ".", "log_parameters", "(", "all_vars", ")", "\n", "# Fix random seed if needed", "\n", "if", "seed", ">", "0", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "# load data", "\n", "", "self", ".", "load_data", "(", "adj_matrix", ",", "user_features", ",", "item_features", ",", "self", ".", "labels", ",", "tvt_nids", ",", "gnnlayer_type", ",", "idx2feats", ")", "\n", "idx2feats", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "idx2feats", ")", "\n", "# idx2feats = idx2feats.to(self.device)", "\n", "self", ".", "model", "=", "RGCN_Model", "(", "dim_feats", ",", "hidden_size", ",", "lstm_dataloader", ",", "self", ".", "n_classes", ",", "n_layers", ",", "\n", "u2idx", "=", "u2index", ",", "p2idx", "=", "p2index", ",", "idx2feats", "=", "idx2feats", ",", "dropout", "=", "dropout", ",", "\n", "device", "=", "self", ".", "device", ",", "rnn_type", "=", "rnn_type", ",", "gnnlayer_type", "=", "gnnlayer_type", ",", "\n", "activation", "=", "F", ".", "relu", ",", "bmloss_type", "=", "bmloss_type", ",", "base_pred", "=", "self", ".", "base_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.load_data": [[56, 81], ["isinstance", "isinstance", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "isinstance", "scipy.issparse", "scipysp_to_pytorchsp().to_dense", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "isinstance", "scipy.coo_matrix", "Eland_e2e.scipysp_to_pytorchsp"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.scipysp_to_pytorchsp"], ["", "def", "load_data", "(", "self", ",", "adj_matrix", ",", "user_features", ",", "item_features", ",", "labels", ",", "tvt_nids", ",", "gnnlayer_type", ",", "idx2feats", ")", ":", "\n", "        ", "\"\"\"Process data\"\"\"", "\n", "if", "isinstance", "(", "user_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "            ", "self", ".", "user_features", "=", "user_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_features", "=", "torch", ".", "FloatTensor", "(", "user_features", ")", "\n", "\n", "", "if", "isinstance", "(", "item_features", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "            ", "self", ".", "item_features", "=", "item_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "item_features", "=", "torch", ".", "FloatTensor", "(", "item_features", ")", "\n", "\n", "# Normalize", "\n", "", "self", ".", "user_features", "=", "F", ".", "normalize", "(", "self", ".", "user_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "self", ".", "item_features", "=", "F", ".", "normalize", "(", "self", ".", "item_features", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "if", "isinstance", "(", "labels", ",", "torch", ".", "LongTensor", ")", ":", "\n", "            ", "self", ".", "labels", "=", "labels", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "\n", "", "assert", "sp", ".", "issparse", "(", "adj_matrix", ")", "\n", "if", "not", "isinstance", "(", "adj_matrix", ",", "sp", ".", "coo_matrix", ")", ":", "\n", "            ", "adj_matrix", "=", "sp", ".", "coo_matrix", "(", "adj_matrix", ")", "\n", "", "self", ".", "adj", "=", "scipysp_to_pytorchsp", "(", "adj_matrix", ")", ".", "to_dense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.pretrain_bm_net": [[82, 116], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Eland_e2e.Eland_e2e.model.bm_net.train", "Eland_e2e.Eland_e2e.model.bm_net.to", "range", "Eland_e2e.Eland_e2e.model.bm_net.parameters", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "Eland_e2e.Eland_e2e.model.bm_net.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "enumerate", "Eland_e2e.Eland_e2e.logger.info", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "feats.to().float.to().float.to().float", "Eland_e2e.Eland_e2e.model.bm_net", "numpy.arange", "loss.backward", "cur_loss.append", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "Eland_e2e.Eland_e2e.model.bm_net.zero_grad", "len", "loss.item", "Eland_e2e.Eland_e2e.model.bm_net.parameters", "feats.to().float.to().float.to", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "torch.nn.CosineEmbeddingLoss.", "round", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "numpy.mean", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad"], ["", "def", "pretrain_bm_net", "(", "self", ",", "n_epochs", "=", "25", ")", ":", "\n", "        ", "\"\"\" pretrain the behavioral modelling network \"\"\"", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "bm_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", "*", "5", ")", "\n", "if", "self", ".", "bmloss_type", "==", "'mse'", ":", "\n", "            ", "criterion", "=", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "            ", "criterion", "=", "CosineEmbeddingLoss", "(", ")", "\n", "", "self", ".", "model", ".", "bm_net", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "bm_net", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "bm_net", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "cur_loss", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "_", ",", "feats_len", ")", "in", "enumerate", "(", "self", ".", "model", ".", "loader", ")", ":", "\n", "                ", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "loss", "=", "0", "\n", "out", ",", "out_len", "=", "self", ".", "model", ".", "bm_net", "(", "feats", ",", "feats_len", ")", "\n", "for", "idx", "in", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ":", "\n", "                    ", "if", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "# loss += criterion(out[idx, :out_len[idx]-1, :], feats[idx, 1:out_len[idx], :], torch.cuda.LongTensor([1]))", "\n", "                        ", "loss", "+=", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "+=", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ")", "\n", "# print('--------')", "\n", "# print(torch.isnan(out[idx, :out_len[idx]-1, :]).sum(), torch.isnan(feats[idx, :out_len[idx]-1, :]).sum())", "\n", "# print(torch.isnan(out).sum(), torch.isnan(feats).sum())", "\n", "# print(loss)", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "cur_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "bm_net", ".", "parameters", "(", ")", ",", "5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "model", ".", "bm_net", ".", "zero_grad", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "f'BM Module pretrain, Epoch {epoch+1}/{n_epochs}: loss {round(np.mean(cur_loss), 8)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.pretrain_nc_net": [[117, 172], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Eland_e2e.Eland_e2e.model.nc_net.to", "Eland_e2e.Eland_e2e.user_features.to", "Eland_e2e.Eland_e2e.item_features.to", "Eland_e2e.Eland_e2e.labels.to", "range", "Eland_e2e.Eland_e2e.logger.info", "Eland_e2e.Eland_e2e.model.nc_net.parameters", "Eland_e2e.Eland_e2e.model.nc_net.train", "Eland_e2e.Eland_e2e.model.nc_net.zero_grad", "Eland_e2e.Eland_e2e.adj.clone", "input_adj.to.to.to", "Eland_e2e.Eland_e2e.model.nc_net", "criterion", "criterion.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "Eland_e2e.Eland_e2e.adj.detach", "Eland_e2e.Eland_e2e.model.nc_net.eval", "Eland_e2e.Eland_e2e.eval_node_cls", "Eland_e2e.Eland_e2e.eval_node_cls", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Eland_e2e.Eland_e2e.adj.clone", "input_adj.to.to.to", "Eland_e2e.Eland_e2e.model.nc_net", "nc_logits[].detach", "Eland_e2e.Eland_e2e.logger.info", "Eland_e2e.Eland_e2e.logger.info", "Eland_e2e.Eland_e2e.logger.info", "Eland_e2e.Eland_e2e.eval_node_cls", "Eland_e2e.Eland_e2e.eval_node_cls", "criterion.item", "criterion.item"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "", "def", "pretrain_nc_net", "(", "self", ",", "n_epochs", "=", "300", ")", ":", "\n", "        ", "\"\"\" pretrain the node classification network \"\"\"", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "nc_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "best_val_auc", "=", "0.", "\n", "best_test_auc", "=", "0.", "\n", "best_res", "=", "None", "\n", "criterion", "=", "F", ".", "nll_loss", "\n", "self", ".", "model", ".", "nc_net", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "user_features", "=", "self", ".", "user_features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "item_features", "=", "self", ".", "item_features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "cnt_wait", "=", "0", "\n", "patience", "=", "50", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "nc_net", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "nc_net", ".", "zero_grad", "(", ")", "\n", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits", ",", "_", "=", "self", ".", "model", ".", "nc_net", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ")", "\n", "loss", "=", "criterion", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# Detach from computation graph", "\n", "self", ".", "adj", "=", "self", ".", "adj", ".", "detach", "(", ")", "\n", "# Validation", "\n", "self", ".", "model", ".", "nc_net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits_eval", ",", "_", "=", "self", ".", "model", ".", "nc_net", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ")", "\n", "", "res_training", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ".", "detach", "(", ")", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "val_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "val_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "\n", "if", "res", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "                ", "cnt_wait", "=", "0", "\n", "best_val_auc", "=", "res", "[", "'auc'", "]", "\n", "test_auc", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "[", "'auc'", "]", "\n", "if", "test_auc", ">", "best_test_auc", ":", "\n", "                    ", "best_test_auc", "=", "test_auc", "\n", "best_res", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'NCNet pretrain, Epoch [{} / {}]: loss {:.4f}, training auc: {:.4f}, val_auc {:.4f}, test auc {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "res_training", "[", "'auc'", "]", ",", "res", "[", "'auc'", "]", ",", "test_auc", ")", ")", "\n", "", "else", ":", "\n", "                ", "cnt_wait", "+=", "1", "\n", "self", ".", "logger", ".", "info", "(", "'NCNet pretrain, Epoch [{} / {}]: loss {:.4f}, training auc: {:.4f}, val_auc {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "res_training", "[", "'auc'", "]", ",", "res", "[", "'auc'", "]", ")", ")", "\n", "\n", "", "if", "cnt_wait", ">=", "patience", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Early stop!'", ")", "\n", "break", "\n", "", "", "self", ".", "logger", ".", "info", "(", "'Best Test Results: auc {:.4f}, ap {:.4f}, f1 {:.4f}'", ".", "format", "(", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", ",", "best_res", "[", "'f1'", "]", ")", ")", "\n", "\n", "return", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train": [[173, 243], ["torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "Eland_e2e.Eland_e2e.move_to_cuda", "Eland_e2e.Eland_e2e.move_to_cuda", "Eland_e2e.Eland_e2e.move_to_cuda", "Eland_e2e.Eland_e2e.model.to", "utils.MultipleOptimizer", "range", "Eland_e2e.Eland_e2e.logger.info", "Eland_e2e.Eland_e2e.pretrain_bm_net", "Eland_e2e.Eland_e2e.pretrain_nc_net", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Eland_e2e.Eland_e2e.model.train", "Eland_e2e.Eland_e2e.model.zero_grad", "Eland_e2e.Eland_e2e.adj.clone", "input_adj.to.to.to", "Eland_e2e.Eland_e2e.model", "criterion", "utils.MultipleOptimizer.zero_grad", "criterion.backward", "utils.MultipleOptimizer.step", "Eland_e2e.Eland_e2e.model.eval", "Eland_e2e.Eland_e2e.eval_node_cls", "Eland_e2e.Eland_e2e.eval_node_cls", "Eland_e2e.Eland_e2e.model.bm_net.parameters", "Eland_e2e.Eland_e2e.model.nc_net.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Eland_e2e.Eland_e2e.adj.clone", "input_adj.to.to.to", "Eland_e2e.Eland_e2e.adj.clone", "input_adj.to.to.to", "Eland_e2e.Eland_e2e.model", "nc_logits[].detach", "Eland_e2e.Eland_e2e.eval_node_cls", "Eland_e2e.Eland_e2e.logger.info", "Eland_e2e.Eland_e2e.logger.info", "Eland_e2e.Eland_e2e.logger.info", "criterion.item", "criterion.item"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.move_to_cuda", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.move_to_cuda", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.move_to_cuda", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.pretrain_bm_net", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.pretrain_nc_net", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.train", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad", "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls", "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\" End-to-end training for bm_net and nc_net \"\"\"", "\n", "# For debugging", "\n", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "# Move variables to device if haven't done so", "\n", "self", ".", "user_features", "=", "self", ".", "move_to_cuda", "(", "self", ".", "user_features", ",", "self", ".", "device", ")", "\n", "self", ".", "item_features", "=", "self", ".", "move_to_cuda", "(", "self", ".", "item_features", ",", "self", ".", "device", ")", "\n", "self", ".", "labels", "=", "self", ".", "move_to_cuda", "(", "self", ".", "labels", ",", "self", ".", "device", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "# Pretrain", "\n", "if", "self", ".", "pretrain_bm", ">", "0", ":", "\n", "            ", "self", ".", "pretrain_bm_net", "(", "self", ".", "pretrain_bm", ")", "\n", "", "if", "self", ".", "pretrain_nc", ">", "0", ":", "\n", "            ", "self", ".", "pretrain_nc_net", "(", "self", ".", "pretrain_nc", ")", "\n", "# optimizers", "\n", "", "optims", "=", "MultipleOptimizer", "(", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "bm_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", ",", "\n", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "nc_net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", ")", "\n", "\n", "criterion", "=", "F", ".", "nll_loss", "\n", "best_test_auc", "=", "0.", "\n", "best_val_auc", "=", "0.", "\n", "best_res", "=", "None", "\n", "cnt_wait", "=", "0", "\n", "patience", "=", "70", "\n", "# Training...", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits", ",", "modified_adj", ",", "bm_loss", "=", "self", ".", "model", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ",", "self", ".", "n_epochs", ",", "epoch", ")", "\n", "loss", "=", "nc_loss", "=", "criterion", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ")", "\n", "loss", "+=", "bm_loss", "*", "self", ".", "alpha", "\n", "optims", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optims", ".", "step", "(", ")", "\n", "# Computation Graph", "\n", "# Validation", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "# nc_logits_eval_original, _ = self.model.nc_net(input_adj, self.user_features, self.item_features)", "\n", "input_adj", "=", "self", ".", "adj", ".", "clone", "(", ")", "\n", "input_adj", "=", "input_adj", ".", "to", "(", "self", ".", "device", ")", "\n", "nc_logits_eval_modified", ",", "_", ",", "_", "=", "self", ".", "model", "(", "input_adj", ",", "self", ".", "user_features", ",", "self", ".", "item_features", ",", "self", ".", "n_epochs", ",", "epoch", ")", "\n", "", "training_res", "=", "self", ".", "eval_node_cls", "(", "nc_logits", "[", "self", ".", "train_nid", "]", ".", "detach", "(", ")", ",", "self", ".", "labels", "[", "self", ".", "train_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "# res = self.eval_node_cls(nc_logits_eval_original[self.val_nid], self.labels[self.val_nid], self.n_classes)", "\n", "res_modified", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval_modified", "[", "self", ".", "val_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "val_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "if", "res_modified", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "                ", "cnt_wait", "=", "0", "\n", "best_val_auc", "=", "res_modified", "[", "'auc'", "]", "\n", "# res_test = self.eval_node_cls(nc_logits_eval_original[self.test_nid], self.labels[self.test_nid], self.n_classes)", "\n", "res_test_modified", "=", "self", ".", "eval_node_cls", "(", "nc_logits_eval_modified", "[", "self", ".", "test_nid", "]", ",", "self", ".", "labels", "[", "self", ".", "test_nid", "]", ",", "self", ".", "n_classes", ")", "\n", "if", "res_test_modified", "[", "'auc'", "]", ">", "best_test_auc", ":", "\n", "                    ", "best_test_auc", "=", "res_test_modified", "[", "'auc'", "]", "\n", "best_res", "=", "res_test_modified", "\n", "", "self", ".", "logger", ".", "info", "(", "'Eland Training, Epoch [{}/{}]: loss {:.4f}, train_auc: {:.4f}, val_auc {:.4f}, test_auc {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "training_res", "[", "'auc'", "]", ",", "res_modified", "[", "'auc'", "]", ",", "res_test_modified", "[", "'auc'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "cnt_wait", "+=", "1", "\n", "self", ".", "logger", ".", "info", "(", "'Eland Training, Epoch [{}/{}]: loss {:.4f}, train_auc: {:.4f}, val_auc {:.4f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "n_epochs", ",", "loss", ".", "item", "(", ")", ",", "training_res", "[", "'auc'", "]", ",", "res_modified", "[", "'auc'", "]", ")", ")", "\n", "\n", "", "if", "cnt_wait", ">=", "patience", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Early stop!'", ")", "\n", "break", "\n", "", "", "self", ".", "logger", ".", "info", "(", "'Best Test Results: auc {:.4f}, ap {:.4f}, f1 {:.4f}'", ".", "format", "(", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", ",", "best_res", "[", "'f1'", "]", ")", ")", "\n", "\n", "return", "best_res", "[", "'auc'", "]", ",", "best_res", "[", "'ap'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.log_parameters": [[244, 256], ["Eland_e2e.Eland_e2e.logger.info"], "methods", ["None"], ["", "def", "log_parameters", "(", "self", ",", "all_vars", ")", ":", "\n", "        ", "del", "all_vars", "[", "'self'", "]", "\n", "del", "all_vars", "[", "'adj_matrix'", "]", "\n", "del", "all_vars", "[", "'user_features'", "]", "\n", "del", "all_vars", "[", "'item_features'", "]", "\n", "del", "all_vars", "[", "'labels'", "]", "\n", "del", "all_vars", "[", "'tvt_nids'", "]", "\n", "del", "all_vars", "[", "'lstm_dataloader'", "]", "\n", "del", "all_vars", "[", "'u2index'", "]", "\n", "del", "all_vars", "[", "'p2index'", "]", "\n", "del", "all_vars", "[", "'idx2feats'", "]", "\n", "self", ".", "logger", ".", "info", "(", "f'Parameters: {all_vars}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.transform_mat": [[257, 265], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "transform_mat", "(", "matrix", ")", ":", "\n", "        ", "\"\"\"\n            Since in the original matrix, there are items that have zero degree, we add a small delta in order to calculate the norm properly\n        \"\"\"", "\n", "delta", "=", "1e-5", "\n", "matrix", "=", "matrix", "+", "delta", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.move_to_cuda": [[266, 272], ["var.to"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "move_to_cuda", "(", "var", ",", "device", ")", ":", "\n", "        ", "if", "not", "var", ".", "is_cuda", ":", "\n", "            ", "return", "var", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.get_logger": [[273, 293], ["logging.getLogger", "logging.getLogger.hasHandlers", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.handlers.clear", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_logger", "(", "name", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "(", "logger", ".", "hasHandlers", "(", ")", ")", ":", "\n", "            ", "logger", ".", "handlers", ".", "clear", "(", ")", "\n", "", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# Foramtter", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(message)s'", ")", "\n", "# console handler", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "# create file handler", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "fh", "=", "logging", ".", "FileHandler", "(", "f'logs/ELANDe2e-{name}.log'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.Eland_e2e.eval_node_cls": [[294, 315], ["logits.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.argmax", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "sklearn.metrics.f1_score", "numpy.zeros", "logits.cpu().numpy.cpu().numpy.cpu", "labels.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_node_cls", "(", "logits", ",", "labels", ",", "n_classes", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "logits", "=", "logits", ".", "T", "[", "1", "]", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# fpr, tpr, _ = roc_curve(labels, logits, pos_label=1)", "\n", "roc_auc", "=", "roc_auc_score", "(", "labels", ",", "logits", ")", "\n", "# precisions, recalls, _ = precision_recall_curve(labels, logits, pos_label=1)", "\n", "ap", "=", "average_precision_score", "(", "labels", ",", "logits", ",", "pos_label", "=", "1", ")", "\n", "f1", "=", "f1_score", "(", "labels", ",", "y_pred", ")", "\n", "conf_mat", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "results", "=", "{", "\n", "'f1'", ":", "f1", ",", "\n", "'ap'", ":", "ap", ",", "\n", "'conf'", ":", "conf_mat", ",", "\n", "'auc'", ":", "roc_auc", "\n", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.__init__": [[317, 340], ["torch.Module.__init__", "idx2feats.to", "model_zoo.GAU_E", "model_zoo.GNN", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_feats", ",", "dim_h", ",", "lstm_dataloader", ",", "n_classes", ",", "n_layers", ",", "activation", ",", "\n", "dropout", ",", "device", ",", "gnnlayer_type", ",", "u2idx", ",", "p2idx", ",", "idx2feats", ",", "bmloss_type", ",", "rnn_type", ",", "base_pred", ")", ":", "\n", "        ", "super", "(", "RGCN_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "gnnlayer_type", "=", "gnnlayer_type", "\n", "self", ".", "loader", "=", "lstm_dataloader", "\n", "self", ".", "u2idx", ",", "self", ".", "p2idx", "=", "u2idx", ",", "p2idx", "\n", "self", ".", "idx2feats", "=", "idx2feats", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "base_pred", "=", "base_pred", "\n", "\n", "# Behavior Modelling", "\n", "self", ".", "bm_net", "=", "GAU_E", "(", "dim_feats", ",", "dim_h", ",", "idx2feats", ",", "p2idx", ",", "rnn_type", "=", "rnn_type", ",", "out_sz", "=", "300", ")", "\n", "\n", "# Node Classification", "\n", "self", ".", "nc_net", "=", "GNN", "(", "dim_feats", ",", "dim_h", ",", "n_classes", ",", "n_layers", ",", "activation", ",", "dropout", ",", "gnnlayer_type", "=", "gnnlayer_type", ")", "\n", "\n", "# bm_loss", "\n", "self", ".", "bmloss_type", "=", "bmloss_type", "\n", "if", "bmloss_type", "==", "'mse'", ":", "\n", "            ", "self", ".", "criterion", "=", "MSELoss", "(", ")", "\n", "", "elif", "bmloss_type", "==", "'cos'", ":", "\n", "            ", "self", ".", "criterion", "=", "CosineEmbeddingLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.forward": [[341, 386], ["enumerate", "Eland_e2e.RGCN_Model.nc_net", "feats.to().float.to().float.to().float", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "num_pred.to.to.to", "Eland_e2e.RGCN_Model.bm_net", "numpy.arange", "delta.squeeze.squeeze.squeeze", "feats.to().float.to().float.clone", "range", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "torch.true_divide", "len", "Eland_e2e.RGCN_Model.match", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "range", "Eland_e2e.RGCN_Model.bm_net", "delta.squeeze.squeeze.squeeze", "feats.to().float.to().float.to", "Eland_e2e.RGCN_Model.criterion", "Eland_e2e.RGCN_Model.criterion", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "torch.max().int", "tmp.unsqueeze().repeat", "max", "feats.to().float.to().float.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "numpy.arange", "u_delta.size", "pred_features.detach", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "tmp.unsqueeze", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "torch.cuda.FloatTensor().fill_().to", "numpy.arange", "len", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "feats.to().float.to().float.size", "feats.to().float.to().float.size"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.match"], ["", "", "def", "forward", "(", "self", ",", "original_adj", ",", "user_features", ",", "item_features", ",", "total_epochs", "=", "100", ",", "cur_epoch", "=", "100", ")", ":", "\n", "# Behavior Modelling as Graph Augmentation through Delta", "\n", "# TODO: Potential improvement", "\n", "        ", "bm_loss", "=", "0", "# init loss for future backward", "\n", "for", "batch_idx", ",", "(", "uids", ",", "feats", ",", "_", ",", "feats_length", ")", "in", "enumerate", "(", "self", ".", "loader", ")", ":", "\n", "            ", "feats", "=", "feats", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "num_pred", "=", "torch", ".", "mul", "(", "torch", ".", "true_divide", "(", "feats_length", ",", "self", ".", "loader", ".", "dataset", ".", "total_edges", ")", ",", "self", ".", "base_pred", "*", "10", ")", "\n", "num_pred", "=", "torch", ".", "floor", "(", "num_pred", ")", "\n", "num_pred", "=", "num_pred", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Using next element as label", "\n", "out", ",", "out_len", "=", "self", ".", "bm_net", "(", "feats", ",", "feats_length", ")", "\n", "for", "idx", "in", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ":", "\n", "                ", "if", "self", ".", "bmloss_type", "==", "'cos'", ":", "\n", "                    ", "bm_loss", "+=", "self", ".", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "bm_loss", "+=", "self", ".", "criterion", "(", "out", "[", "idx", ",", ":", "out_len", "[", "idx", "]", "-", "1", ",", ":", "]", ",", "feats", "[", "idx", ",", "1", ":", "out_len", "[", "idx", "]", ",", ":", "]", ")", "\n", "\n", "#delta: (batch_size, 1, feature_size)", "\n", "", "", "delta", "=", "out", "[", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ",", "out_len", "-", "1", ",", "None", "]", "\n", "delta", "=", "delta", ".", "squeeze", "(", ")", "\n", "\n", "# Store intermediary vars", "\n", "feats2", "=", "feats", ".", "clone", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "torch", ".", "max", "(", "num_pred", ")", ".", "int", "(", ")", "+", "1", ")", ":", "\n", "                ", "u_delta", ",", "pred_features", "=", "self", ".", "match", "(", "delta", ",", "0.5", "+", "4.5", "*", "(", "total_epochs", "-", "cur_epoch", ")", "/", "total_epochs", ")", "\n", "tmp", "=", "i", "<=", "num_pred", "\n", "# indices = [self.u2idx[uid.item()] for uid in uids]", "\n", "indices", "=", "[", "self", ".", "u2idx", "[", "uid", "]", "for", "uid", "in", "uids", "]", "\n", "# Update Graph", "\n", "original_adj", "[", "indices", "]", "+=", "torch", ".", "mul", "(", "tmp", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "u_delta", ".", "size", "(", "1", ")", ")", ",", "u_delta", ")", "\n", "if", "max", "(", "feats_length", ")", ">=", "feats", ".", "size", "(", "1", ")", ":", "\n", "                    ", "feats2", "=", "torch", ".", "cat", "(", "(", "feats", ",", "torch", ".", "cuda", ".", "FloatTensor", "(", "feats", ".", "size", "(", "0", ")", ",", "1", ",", "feats", ".", "size", "(", "2", ")", ")", ".", "fill_", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "feats_length", ")", ")", ":", "\n", "                    ", "feats2", "[", "idx", "]", "[", "feats_length", "[", "idx", "]", "]", "=", "pred_features", ".", "detach", "(", ")", "[", "idx", "]", "\n", "", "out", ",", "out_len", "=", "self", ".", "bm_net", "(", "feats2", ",", "feats_length", ")", "\n", "delta", "=", "out", "[", "np", ".", "arange", "(", "len", "(", "out_len", ")", ")", ",", "out_len", "-", "1", ",", "None", "]", "\n", "#delta: (batch_size, 1, feature_size)", "\n", "delta", "=", "delta", ".", "squeeze", "(", ")", "\n", "# Update features", "\n", "", "", "user_features", "=", "original_adj", "@", "item_features", "\n", "nc_logits", ",", "_", "=", "self", ".", "nc_net", "(", "original_adj", ",", "user_features", ",", "item_features", ")", "\n", "\n", "return", "nc_logits", ",", "original_adj", ",", "bm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.match": [[387, 398], ["Eland_e2e.RGCN_Model.cosine_similarity", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.cosine_similarity"], ["", "def", "match", "(", "self", ",", "x", ",", "tau", ")", ":", "\n", "        ", "\"\"\"\n            x: (batch_size, features_size)\n        \"\"\"", "\n", "# match: delta: (batch_size, feature_size) --> (batch_size, dict_size)", "\n", "# pred_features: (batch_size, feature_size) --> (batch_size, feature_size)", "\n", "similarity_matrix", "=", "self", ".", "cosine_similarity", "(", "x", ",", "self", ".", "idx2feats", ")", "# idx2feats: (dict_sz, feat_sz)", "\n", "similarity_matrix", "=", "F", ".", "gumbel_softmax", "(", "similarity_matrix", ",", "tau", "=", "tau", ",", "hard", "=", "True", ",", "dim", "=", "1", ")", "\n", "pred_features", "=", "self", ".", "idx2feats", "[", "torch", ".", "argmax", "(", "similarity_matrix", ",", "dim", "=", "1", ")", "]", "\n", "\n", "return", "similarity_matrix", ",", "pred_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.min_max": [[399, 402], ["[].reshape", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "min_max", "(", "mat", ")", ":", "\n", "        ", "return", "(", "mat", "-", "torch", ".", "min", "(", "mat", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "/", "(", "torch", ".", "max", "(", "mat", ",", "dim", "=", "1", ")", "[", "0", "]", "-", "torch", ".", "min", "(", "mat", ",", "dim", "=", "1", ")", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.RGCN_Model.cosine_similarity": [[403, 410], ["torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cosine_similarity", "(", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n            x1: (batch_size, feature_size); x2: (dict_size, feature_size)\n        \"\"\"", "\n", "x2", "=", "x2", ".", "T", "\n", "return", "(", "x1", "@", "x2", ")", "/", "(", "(", "torch", ".", "norm", "(", "x1", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "@", "torch", ".", "norm", "(", "x2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.scipysp_to_pytorchsp": [[412, 423], ["numpy.vstack().transpose", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "scipy.isspmatrix_coo", "sp_mx.tocoo.tocoo", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Size", "torch.Size", "torch.Size", "numpy.vstack"], "function", ["None"], ["", "", "def", "scipysp_to_pytorchsp", "(", "sp_mx", ")", ":", "\n", "    ", "\"\"\" converts scipy sparse matrix to pytorch sparse matrix \"\"\"", "\n", "if", "not", "sp", ".", "isspmatrix_coo", "(", "sp_mx", ")", ":", "\n", "        ", "sp_mx", "=", "sp_mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "sp_mx", ".", "row", ",", "sp_mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "sp_mx", ".", "data", "\n", "shape", "=", "sp_mx", ".", "shape", "\n", "pyt_sp_mx", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "LongTensor", "(", "coords", ".", "T", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "values", ")", ",", "\n", "torch", ".", "Size", "(", "shape", ")", ")", "\n", "return", "pyt_sp_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.get_tensor_size": [[425, 427], ["tensor.element_size", "tensor.nelement"], "function", ["None"], ["", "def", "get_tensor_size", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "element_size", "(", ")", "*", "tensor", ".", "nelement", "(", ")", "\n", "", "def", "getBack", "(", "var_grad_fn", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.getBack": [[427, 430], ["print", "print", "len"], "function", ["None"], ["", "def", "getBack", "(", "var_grad_fn", ")", ":", "\n", "    ", "print", "(", "var_grad_fn", ")", "\n", "print", "(", "len", "(", "var_grad_fn", ".", "next_functions", ")", ")", "\n", "", "def", "get_sum_weights", "(", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.Eland_e2e.get_sum_weights": [[430, 436], ["model.named_parameters", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_sum_weights", "(", "model", ")", ":", "\n", "    ", "s", "=", "0", "\n", "for", "name", ",", "parameter", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "parameter", ".", "requires_grad", ":", "\n", "            ", "s", "+=", "torch", ".", "sum", "(", "parameter", ".", "data", ")", "\n", "", "", "return", "s", "\n", "", ""]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.__init__": [[6, 8], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "op", ")", ":", "\n", "        ", "self", ".", "optimizers", "=", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad": [[9, 12], ["op.zero_grad"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "for", "op", "in", "self", ".", "optimizers", ":", "\n", "            ", "op", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.step": [[13, 16], ["op.step"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "op", "in", "self", ".", "optimizers", ":", "\n", "            ", "op", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.MultipleOptimizer.update_lr": [[17, 23], ["None"], "methods", ["None"], ["", "", "def", "update_lr", "(", "self", ",", "op_index", ",", "new_lr", ")", ":", "\n", "        ", "\"\"\" update the learning rate of one optimizer\n        Parameters: op_index: the index of the optimizer to update\n                    new_lr:   new learning rate for that optimizer \"\"\"", "\n", "for", "param_group", "in", "self", ".", "optimizers", "[", "op_index", "]", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__": [[41, 61], ["dict", "super().__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ",", "verbose", "=", "False", ",", "\n", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "phase", "=", "'ADAM'", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ",", "\n", "verbose", "=", "verbose", ",", "nesterov", "=", "nesterov", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__setstate__": [[62, 68], ["super().__setstate__", "group.setdefault", "group.setdefault", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "group", ".", "setdefault", "(", "'verbose'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dm2-nd_eland.model.utils.SWATS.step": [[69, 182], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "w.data.add_", "p.view", "p.view.dot", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "w.new().fill_", "grad.add_", "grad.mul_", "w.data.add_", "torch.max", "torch.max", "torch.max", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "grad.view", "exp_avg2.mul_().add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "grad.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "p.view.dot", "corrected_exp_avg.allclose", "corrected_exp_avg.item", "w.new", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "exp_avg2.mul_", "print", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone().detach.mul_", "torch.clone().detach.mul_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional):\n                A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "w", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "w", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "w", ".", "grad", ".", "data", "\n", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, '", "\n", "'please consider SparseAdam instead'", ")", "\n", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "w", "]", "\n", "\n", "# state initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "w", ".", "data", ")", "\n", "# exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "w", ".", "data", ")", "\n", "# moving average for the non-orthogonal projection scaling", "\n", "state", "[", "'exp_avg2'", "]", "=", "w", ".", "new", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "if", "amsgrad", ":", "\n", "# maintains max of all exp. moving avg.", "\n", "# of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "w", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg2", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg2'", "]", ",", "state", "[", "'exp_avg_sq'", "]", ",", "\n", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "w", ".", "data", ")", "\n", "\n", "# if its SGD phase, take an SGD update and continue", "\n", "", "if", "group", "[", "'phase'", "]", "==", "'SGD'", ":", "\n", "                    ", "if", "'momentum_buffer'", "not", "in", "state", ":", "\n", "                        ", "buf", "=", "state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "\n", "grad", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ")", "\n", "grad", "=", "buf", "\n", "\n", "", "grad", ".", "mul_", "(", "1", "-", "beta1", ")", "\n", "if", "group", "[", "'nesterov'", "]", ":", "\n", "                        ", "grad", ".", "add_", "(", "beta1", ",", "buf", ")", "\n", "\n", "", "w", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "grad", ")", "\n", "continue", "\n", "\n", "# decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# maintains the maximum of all 2nd", "\n", "# moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "(", "bias_correction2", "**", "0.5", ")", "/", "bias_correction1", "\n", "\n", "p", "=", "-", "step_size", "*", "(", "exp_avg", "/", "denom", ")", "\n", "w", ".", "data", ".", "add_", "(", "p", ")", "\n", "\n", "p_view", "=", "p", ".", "view", "(", "-", "1", ")", "\n", "pg", "=", "p_view", ".", "dot", "(", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "if", "pg", "!=", "0", ":", "\n", "# the non-orthognal scaling estimate", "\n", "                    ", "scaling", "=", "p_view", ".", "dot", "(", "p_view", ")", "/", "-", "pg", "\n", "exp_avg2", ".", "mul_", "(", "beta2", ")", ".", "add_", "(", "1", "-", "beta2", ",", "scaling", ")", "\n", "\n", "# bias corrected exponential average", "\n", "corrected_exp_avg", "=", "exp_avg2", "/", "bias_correction2", "\n", "\n", "# checking criteria of switching to SGD training", "\n", "if", "state", "[", "'step'", "]", ">", "1", "and", "corrected_exp_avg", ".", "allclose", "(", "scaling", ",", "rtol", "=", "1e-6", ")", "and", "corrected_exp_avg", ">", "0", ":", "\n", "                        ", "group", "[", "'phase'", "]", "=", "'SGD'", "\n", "group", "[", "'lr'", "]", "=", "corrected_exp_avg", ".", "item", "(", ")", "\n", "if", "group", "[", "'verbose'", "]", ":", "\n", "                            ", "print", "(", "'Switching to SGD after '", "\n", "'{} steps with lr {:.5f} '", "\n", "'and momentum {:.5f}.'", ".", "format", "(", "\n", "state", "[", "'step'", "]", ",", "group", "[", "'lr'", "]", ",", "beta1", ")", ")", "\n", "\n", "", "", "", "", "", "return", "loss", "\n", "\n"]]}