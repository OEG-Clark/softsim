{"home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_scale_2d": [[10, 21], ["numpy.eye", "numpy.tile", "numpy.eye", "len"], "function", ["None"], ["def", "get_affine_scale_2d", "(", "scale_vec", ",", "batch", "=", "False", ")", ":", "\n", "    ", "if", "batch", ":", "\n", "        ", "out1", "=", "np", ".", "eye", "(", "3", ")", "\n", "out", "=", "np", ".", "tile", "(", "out1", ",", "[", "len", "(", "scale_vec", ")", ",", "1", ",", "1", "]", ")", "\n", "out", "[", ":", ",", "0", ",", "0", "]", "=", "scale_vec", "[", ":", ",", "0", "]", "\n", "out", "[", ":", ",", "1", ",", "1", "]", "=", "scale_vec", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "out", "=", "np", ".", "eye", "(", "3", ")", "\n", "out", "[", "0", ",", "0", "]", "=", "scale_vec", "[", "0", "]", "\n", "out", "[", "1", ",", "1", "]", "=", "scale_vec", "[", "1", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d": [[23, 32], ["numpy.eye", "numpy.tile", "numpy.eye", "len"], "function", ["None"], ["", "def", "get_affine_trans_2d", "(", "trans_vec", ",", "batch", "=", "False", ")", ":", "\n", "    ", "if", "batch", ":", "\n", "        ", "out1", "=", "np", ".", "eye", "(", "3", ")", "\n", "out", "=", "np", ".", "tile", "(", "out1", ",", "[", "len", "(", "trans_vec", ")", ",", "1", ",", "1", "]", ")", "\n", "out", "[", ":", ",", "0", ":", "2", ",", "2", "]", "=", "trans_vec", "[", ":", ",", "0", ":", "2", "]", "\n", "", "else", ":", "\n", "        ", "out", "=", "np", ".", "eye", "(", "3", ")", "\n", "out", "[", "0", ":", "2", ",", "2", "]", "=", "trans_vec", "[", "0", ":", "2", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_rot_2d": [[34, 53], ["numpy.eye", "numpy.tile", "numpy.eye", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "len"], "function", ["None"], ["", "def", "get_affine_rot_2d", "(", "yaw", ",", "batch", "=", "False", ")", ":", "\n", "    ", "if", "batch", ":", "\n", "        ", "out1", "=", "np", ".", "eye", "(", "3", ")", "\n", "out", "=", "np", ".", "tile", "(", "out1", ",", "[", "len", "(", "yaw", ")", ",", "1", ",", "1", "]", ")", "\n", "c", "=", "np", ".", "cos", "(", "yaw", ")", "[", ":", ",", "0", "]", "\n", "s", "=", "np", ".", "sin", "(", "yaw", ")", "[", ":", ",", "0", "]", "\n", "out", "[", ":", ",", "0", ",", "0", "]", "=", "c", "\n", "out", "[", ":", ",", "1", ",", "1", "]", "=", "c", "\n", "out", "[", ":", ",", "0", ",", "1", "]", "=", "-", "s", "\n", "out", "[", ":", ",", "1", ",", "0", "]", "=", "s", "\n", "", "else", ":", "\n", "        ", "out", "=", "np", ".", "eye", "(", "3", ")", "\n", "c", "=", "np", ".", "cos", "(", "yaw", ")", "\n", "s", "=", "np", ".", "sin", "(", "yaw", ")", "\n", "out", "[", "0", ",", "0", "]", "=", "c", "\n", "out", "[", "1", ",", "1", "]", "=", "c", "\n", "out", "[", "0", ",", "1", "]", "=", "-", "s", "\n", "out", "[", "1", ",", "0", "]", "=", "s", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.cf_to_img": [[55, 91], ["numpy.asarray", "numpy.array"], "function", ["None"], ["", "def", "cf_to_img", "(", "as_coords", ",", "img_size", ",", "world_size", "=", "None", ",", "world_origin", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert an array of 2D config coordinates to an array of 2D image coordinates\n    :param as_coords:\n    :param img_size: (img width, img height)   width and height of the image representing the top-down view of the environment\n    :param world_size: (pix width, pix height) width and height of the environment inside the image, in pixels\n    :param world_origin: (x, y)                x and y coords of the upper-left corner of the environment in the image\n\n    -----------------------\n    | img   ,- w origin   |\n    |      V________      |\n    |      |        |     |\n    |      | world  |     |\n    |      |        |     |\n    |      |________|     |\n    |                     |\n    |                     |\n    -----------------------\n\n    :return:\n    \"\"\"", "\n", "img_size", "=", "np", ".", "asarray", "(", "img_size", ")", "\n", "# Be default, assume that the image is of the entire environment", "\n", "if", "world_size", "is", "None", ":", "\n", "        ", "world_size", "=", "img_size", "\n", "# By default assume that the image is a picture of the entire environment", "\n", "", "if", "world_origin", "is", "None", ":", "\n", "        ", "world_origin", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", "]", ")", "\n", "\n", "", "scale", "=", "world_size", "/", "1000", "\n", "out_coords", "=", "as_coords", "*", "scale", "\n", "out_coords", "[", ":", ",", "1", "]", "=", "world_size", "[", "1", "]", "-", "out_coords", "[", ":", ",", "1", "]", "\n", "out_coords", "=", "out_coords", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "#out_coords = world_size - out_coords", "\n", "out_coords", "=", "out_coords", "+", "world_origin", "\n", "return", "out_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_px_to_m": [[93, 108], ["numpy.asarray", "numpy.array"], "function", ["None"], ["", "def", "pos_px_to_m", "(", "img_coords", ",", "img_size_px", ",", "world_size_m", ",", "world_size_px", "=", "None", ",", "world_origin", "=", "None", ")", ":", "\n", "    ", "img_size_px", "=", "np", ".", "asarray", "(", "img_size_px", ")", "\n", "# Be default, assume that the image is of the entire environment", "\n", "if", "world_size_px", "is", "None", ":", "\n", "        ", "world_size_px", "=", "img_size_px", "\n", "# By default assume that the image is a picture of the entire environment", "\n", "", "if", "world_origin", "is", "None", ":", "\n", "        ", "world_origin", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", "]", ")", "\n", "\n", "", "scale", "=", "world_size_px", "/", "world_size_m", "\n", "\n", "out_coords", "=", "img_coords", "-", "world_origin", "\n", "out_coords", "=", "out_coords", "/", "scale", "\n", "out_coords", "=", "out_coords", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "return", "out_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px": [[110, 146], ["numpy.asarray", "numpy.asarray", "hasattr", "numpy.array", "type", "numpy.asarray", "torch.from_numpy().float", "as_coords.float.float", "torch.autograd.Variable.cuda", "type", "torch.autograd.Variable", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "pos_m_to_px", "(", "as_coords", ",", "img_size_px", ",", "world_size_m", ",", "world_size_px", "=", "None", ",", "world_origin", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param img_size_px:\n    :param as_coords: Numpy ndarray of shape Bx2\n    :return:\n    \"\"\"", "\n", "img_size_px", "=", "np", ".", "asarray", "(", "img_size_px", ")", "\n", "# Be default, assume that the image is of the entire environment", "\n", "if", "world_size_px", "is", "None", ":", "\n", "        ", "world_size_px", "=", "img_size_px", "\n", "# By default assume that the image is a picture of the entire environment", "\n", "", "if", "world_origin", "is", "None", ":", "\n", "        ", "world_origin", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", "]", ")", "\n", "\n", "", "if", "type", "(", "world_size_px", ")", "not", "in", "[", "int", ",", "float", "]", ":", "\n", "        ", "world_size_px", "=", "np", ".", "asarray", "(", "world_size_px", ")", "\n", "", "world_origin", "=", "np", ".", "asarray", "(", "world_origin", ")", "\n", "\n", "scale", "=", "world_size_px", "/", "world_size_m", "\n", "\n", "# then flip y axis", "\n", "#out_coords[:, 1] = world_size[1] - out_coords[:, 1]", "\n", "#The above is no longer necessary because I simply rotated env images by 90 degrees so that X and Y axis align with AirSim X and Y axis", "\n", "#out_coords = world_size - out_coords", "\n", "if", "hasattr", "(", "as_coords", ",", "\"is_cuda\"", ")", ":", "\n", "        ", "world_origin", "=", "torch", ".", "from_numpy", "(", "world_origin", ")", ".", "float", "(", ")", "\n", "as_coords", "=", "as_coords", ".", "float", "(", ")", "\n", "if", "as_coords", ".", "is_cuda", ":", "\n", "            ", "world_origin", "=", "world_origin", ".", "cuda", "(", ")", "\n", "", "if", "type", "(", "as_coords", ")", "is", "Variable", ":", "\n", "            ", "world_origin", "=", "Variable", "(", "world_origin", ")", "\n", "\n", "", "", "out_coords", "=", "as_coords", "[", ":", ",", "[", "1", ",", "0", "]", "]", "*", "scale", "\n", "out_coords", "=", "out_coords", "+", "world_origin", "\n", "\n", "return", "out_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px": [[149, 203], ["numpy.asarray", "hasattr", "transformations.pos_m_to_px", "pos.data.cpu().numpy.data.cpu().numpy", "rot.data.cpu().numpy.data.cpu().numpy", "len", "range", "transforms3d.euler.quat2euler", "yaws.append", "learning.inputs.pose.Pose", "learning.inputs.pose.Pose", "transforms3d.euler.quat2euler", "yaws.append", "pos.data.cpu().numpy.data.cpu", "rot.data.cpu().numpy.data.cpu", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "poses_m_to_px", "(", "as_pose", ",", "img_size_px", ",", "world_size_px", ",", "world_size_m", ",", "batch_dim", "=", "False", ")", ":", "\n", "    ", "world_size_px", "=", "np", ".", "asarray", "(", "world_size_px", ")", "\n", "pos", "=", "as_pose", ".", "position", "\n", "rot", "=", "as_pose", ".", "orientation", "\n", "\n", "#torch.cuda.synchronize()", "\n", "#prof = SimpleProfiler(torch_sync=True, print=True)", "\n", "\n", "# Turn into numpy", "\n", "if", "hasattr", "(", "pos", ",", "\"is_cuda\"", ")", ":", "\n", "        ", "pos", "=", "pos", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rot", "=", "rot", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "len", "(", "pos", ".", "shape", ")", "==", "1", ":", "\n", "        ", "pos", "=", "pos", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "#prof.tick(\".\")", "\n", "\n", "", "pos_img", "=", "pos_m_to_px", "(", "pos", "[", ":", ",", "0", ":", "2", "]", ",", "img_size_px", ",", "world_size_m", ",", "world_size_px", ")", "\n", "\n", "#prof.tick(\"pos\")", "\n", "\n", "yaws", "=", "[", "]", "\n", "if", "batch_dim", ":", "\n", "#rotm = rot.copy()", "\n", "#rotm = rot", "\n", "#rotm[:, 1] = 0", "\n", "#rotm[:, 2] = 0", "\n", "        ", "for", "i", "in", "range", "(", "rot", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Manual quat2euler", "\n", "#mag = math.sqrt(rotm[i][0] ** 2 + rotm[i][3] ** 2)", "\n", "#rotm[i, :] /= mag", "\n", "#sign = np.sign(rotm[i][3])", "\n", "#yaw = 2*math.acos(rotm[i][0]) * sign", "\n", "            ", "roll", ",", "pitch", ",", "yaw", "=", "euler", ".", "quat2euler", "(", "rot", "[", "i", "]", ")", "\n", "#print(yaw, yaw_manual, sign)", "\n", "yaws", ".", "append", "(", "yaw", ")", "\n", "", "", "else", ":", "\n", "        ", "roll", ",", "pitch", ",", "yaw", "=", "euler", ".", "quat2euler", "(", "rot", ")", "\n", "yaws", ".", "append", "(", "yaw", ")", "\n", "pos_img", "=", "pos_img", "[", "0", "]", "\n", "\n", "#prof.tick(\"rot\")", "\n", "\n", "", "if", "batch_dim", ":", "\n", "# Add additional axis so that orientation becomes Bx1 instead of just B,", "\n", "        ", "out", "=", "Pose", "(", "pos_img", ",", "np", ".", "asarray", "(", "yaws", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "Pose", "(", "pos_img", ",", "yaws", "[", "0", "]", ")", "\n", "\n", "#prof.tick(\"fin\")", "\n", "#prof.print_stats()", "\n", "\n", "", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.__init__": [[43, 47], ["[].get", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "headless", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", ".", "get", "(", "\"headless\"", ",", "False", ")", "\n", "self", ".", "drone_image", "=", "None", "\n", "self", ".", "coord_grid", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter._load_drone_img": [[48, 55], ["os.path.join", "data_io.paths.get_sprites_dir", "imageio.imread().astype", "imageio.imread"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sprites_dir"], ["", "def", "_load_drone_img", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "drone_image", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "drone_image", "\n", "", "drone_path", "=", "os", ".", "path", ".", "join", "(", "get_sprites_dir", "(", ")", ",", "\"drone_img_u.png\"", ")", "\n", "drone_img", "=", "imread", "(", "drone_path", ")", ".", "astype", "(", "np", ".", "float64", ")", "/", "255", "\n", "self", ".", "drone_image", "=", "drone_img", "\n", "return", "self", ".", "drone_image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_instruction": [[56, 77], ["cv2.namedWindow", "int", "numpy.zeros", "cv2.resize.fill", "cv2.putText", "cv2.resize", "cv2.imshow", "cv2.waitKey", "len", "int", "int"], "methods", ["None"], ["", "def", "show_instruction", "(", "self", ",", "instruction_str", ")", ":", "\n", "        ", "if", "self", ".", "headless", ":", "\n", "            ", "return", "\n", "", "cv2", ".", "namedWindow", "(", "\"instruction\"", ",", "cv2", ".", "WINDOW_AUTOSIZE", "|", "cv2", ".", "WINDOW_GUI_NORMAL", ")", "\n", "win_width", "=", "1349", "*", "2", "\n", "win_height", "=", "40", "*", "2", "\n", "char_width_px", "=", "10", "*", "2", "\n", "offset", "=", "30", "*", "2", "\n", "fontsize", "=", "0.62", "*", "2", "\n", "\n", "expected_width_px", "=", "len", "(", "instruction_str", ")", "*", "char_width_px", "\n", "left_padding", "=", "int", "(", "(", "(", "win_width", "-", "expected_width_px", ")", "/", "2", ")", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "win_height", ",", "win_width", ")", ")", "\n", "img", ".", "fill", "(", "0.92", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "instruction_str", ",", "(", "left_padding", ",", "offset", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_DUPLEX", ",", "fontsize", ",", "(", "0", ",", "0", ",", "0", ")", ",", "2", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "int", "(", "win_width", "/", "2", ")", ",", "int", "(", "win_height", "/", "2", ")", ")", ")", "\n", "\n", "cv2", ".", "imshow", "(", "\"instruction\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_landmarks": [[78, 90], ["image.copy.copy.copy", "enumerate", "env_config.definitions.landmarks.get_landmark_stage_name", "int", "int", "cv2.putText", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_stage_name"], ["", "def", "draw_landmarks", "(", "self", ",", "image", ",", "lm_names", ",", "lm_pos", ",", "world_size_m", ")", ":", "\n", "        ", "image", "=", "image", ".", "copy", "(", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "lm_names", ")", ":", "\n", "            ", "stage_name", "=", "get_landmark_stage_name", "(", "name", ")", "\n", "x_m", ",", "y_m", ",", "_", "=", "lm_pos", "[", "i", "]", "\n", "x_px", "=", "int", "(", "x_m", "*", "image", ".", "shape", "[", "1", "]", "/", "world_size_m", ")", "\n", "y_px", "=", "int", "(", "y_m", "*", "image", ".", "shape", "[", "0", "]", "/", "world_size_m", ")", "\n", "x_px", "=", "image", ".", "shape", "[", "0", "]", "-", "x_px", "\n", "color", "=", "(", "1.0", ",", "1.0", ",", "1.0", ")", "\n", "#cv2.circle(image, (y_px, x_px), 5, color, -1)", "\n", "cv2", ".", "putText", "(", "image", ",", "stage_name", ",", "(", "y_px", "-", "len", "(", "stage_name", ")", "*", "4", ",", "x_px", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.6", ",", "color", ",", "2", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_trajectory": [[91, 120], ["list", "matplotlib.figure.Figure", "matplotlib.figure.Figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "matplotlib.backends.backend_agg.FigureCanvasAgg", "matplotlib.figure.Figure.gca", "matplotlib.figure.Figure.gca", "matplotlib.figure.Figure.gca.axis", "matplotlib.figure.Figure.gca.imshow", "matplotlib.figure.Figure.gca.plot", "matplotlib.figure.Figure.gca.plot", "matplotlib.figure.Figure.gca.axis", "matplotlib.figure.Figure.gca.set_autoscaley_on", "matplotlib.figure.Figure.gca.set_autoscalex_on", "matplotlib.figure.Figure.gca.set_xlim", "matplotlib.figure.Figure.gca.set_ylim", "matplotlib.figure.Figure.gca.set_xbound", "matplotlib.figure.Figure.gca.set_ybound", "matplotlib.figure.Figure.gca.set_xmargin", "matplotlib.figure.Figure.gca.set_ymargin", "matplotlib.figure.Figure.subplots_adjust", "matplotlib.figure.Figure.subplots_adjust", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "numpy.fromstring", "image_out.reshape.reshape.reshape", "zip", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "image_out.reshape.reshape.astype", "float", "float"], "methods", ["None"], ["", "def", "draw_trajectory", "(", "self", ",", "image", ",", "positions", ",", "world_size_m", ",", "color", "=", "\"c\"", ")", ":", "\n", "        ", "h", "=", "image", ".", "shape", "[", "0", "]", "\n", "w", "=", "image", ".", "shape", "[", "1", "]", "\n", "\n", "x_targets", ",", "y_targets", "=", "list", "(", "zip", "(", "*", "positions", ")", ")", "\n", "fig", "=", "Figure", "(", "figsize", "=", "(", "float", "(", "h", ")", "/", "100", ",", "float", "(", "w", ")", "/", "100", ")", ",", "dpi", "=", "100", ")", "\n", "canvas", "=", "FigureCanvas", "(", "fig", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "imshow", "(", "image", ",", "extent", "=", "(", "0", ",", "h", ",", "0", ",", "w", ")", ")", "\n", "ax", ".", "plot", "(", "x_targets", ",", "y_targets", ",", "color", ")", "\n", "ax", ".", "plot", "(", "x_targets", "[", "-", "1", "]", ",", "y_targets", "[", "-", "1", "]", ",", "color", "+", "\"o\"", ")", "\n", "ax", ".", "axis", "(", "'image'", ")", "\n", "ax", ".", "set_autoscaley_on", "(", "False", ")", "\n", "ax", ".", "set_autoscalex_on", "(", "False", ")", "\n", "ax", ".", "set_xlim", "(", "(", "0", ",", "w", ")", ")", "\n", "ax", ".", "set_ylim", "(", "(", "0", ",", "h", ")", ")", "\n", "ax", ".", "set_xbound", "(", "(", "0", ",", "w", ")", ")", "\n", "ax", ".", "set_ybound", "(", "(", "0", ",", "h", ")", ")", "\n", "ax", ".", "set_xmargin", "(", "0", ")", "\n", "ax", ".", "set_ymargin", "(", "0", ")", "\n", "fig", ".", "subplots_adjust", "(", "left", "=", "0", ",", "right", "=", "1", ",", "top", "=", "1", ",", "bottom", "=", "0", ")", "\n", "\n", "canvas", ".", "draw", "(", ")", "# draw the canvas, cache the renderer", "\n", "image_out", "=", "np", ".", "fromstring", "(", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "image_out", "=", "image_out", ".", "reshape", "(", "[", "h", ",", "w", ",", "3", "]", ")", "\n", "image_out", "=", "(", "image_out", ".", "astype", "(", "np", ".", "float64", ")", "/", "255", ")", "\n", "return", "image_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter._transform_img_to_pose": [[121, 142], ["transformations.get_affine_scale_2d", "transformations.get_affine_trans_2d", "transformations.get_affine_rot_2d", "transformations.get_affine_trans_2d", "numpy.dot", "cv2.warpAffine", "numpy.asarray", "numpy.asarray", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_scale_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_rot_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d"], ["", "def", "_transform_img_to_pose", "(", "self", ",", "image_out", ",", "img_to_transform", ",", "pose", ",", "img_scale", ")", ":", "\n", "        ", "img_size_px", "=", "image_out", ".", "shape", "[", "1", "]", "\n", "yaw", "=", "pose", ".", "orientation", "\n", "desired_drone_size", "=", "img_size_px", "*", "img_scale", "\n", "scale", "=", "desired_drone_size", "/", "img_to_transform", ".", "shape", "[", "1", "]", "\n", "# Transforms, should be applied in order that they are defined", "\n", "# Scale it down to desired size", "\n", "scale_transform", "=", "get_affine_scale_2d", "(", "np", ".", "asarray", "(", "[", "scale", ",", "scale", "]", ")", ")", "\n", "# Translate it so that drone is centered around the origin", "\n", "trans_reset_transform", "=", "get_affine_trans_2d", "(", "np", ".", "asarray", "(", "[", "-", "desired_drone_size", "/", "2", ",", "-", "desired_drone_size", "/", "2", "]", ")", ")", "\n", "# Rotate it so that it faces the correct way", "\n", "rot_transform", "=", "get_affine_rot_2d", "(", "yaw", ")", "\n", "# Translate it so that it is centered around the correct position", "\n", "trans_transform", "=", "get_affine_trans_2d", "(", "pose", ".", "position", ")", "\n", "# First scale down, then rotate correctly, then translate to starting position", "\n", "transform", "=", "np", ".", "dot", "(", "trans_transform", ",", "np", ".", "dot", "(", "rot_transform", ",", "np", ".", "dot", "(", "trans_reset_transform", ",", "scale_transform", ")", ")", ")", "\n", "\n", "# Transform:", "\n", "img_t", "=", "cv2", ".", "warpAffine", "(", "img_to_transform", ",", "transform", "[", ":", "2", ",", ":", "]", ",", "(", "img_size_px", ",", "img_size_px", ")", ")", "\n", "img_t_mask", "=", "(", "img_t", ">", "1e-10", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "return", "img_t", ",", "img_t_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_drone": [[144, 154], ["transformations.poses_m_to_px", "visualization.Presenter._load_drone_img", "visualization.Presenter._transform_img_to_pose"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter._load_drone_img", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter._transform_img_to_pose"], ["", "def", "draw_drone", "(", "self", ",", "image", ",", "pose_m", ",", "world_size_m", ")", ":", "\n", "        ", "img_size_px", "=", "image", ".", "shape", "[", "1", "]", "\n", "pose_px", "=", "poses_m_to_px", "(", "as_pose", "=", "pose_m", ",", "img_size_px", "=", "img_size_px", ",", "world_size_px", "=", "img_size_px", ",", "\n", "world_size_m", "=", "world_size_m", ",", "batch_dim", "=", "False", ")", "\n", "pose_px", ".", "position", "[", "1", "]", "=", "img_size_px", "-", "pose_px", ".", "position", "[", "1", "]", "\n", "drone_img", "=", "self", ".", "_load_drone_img", "(", ")", "\n", "DRONE_SIZE_FRACTIONAL", "=", "0.1", "\n", "drone_img_t", ",", "drone_img_mask", "=", "self", ".", "_transform_img_to_pose", "(", "image", ",", "drone_img", ",", "pose_px", ",", "DRONE_SIZE_FRACTIONAL", ")", "\n", "overlaid_image", "=", "image", "[", ":", ",", ":", ",", ":", "3", "]", "*", "(", "1", "-", "drone_img_mask", "[", ":", ",", ":", ",", ":", "3", "]", ")", "+", "drone_img_t", "[", ":", ",", ":", ",", ":", "3", "]", "*", "drone_img_mask", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "return", "overlaid_image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_observability": [[155, 184], ["image.copy.copy.copy", "transformations.poses_m_to_px", "numpy.arctan2", "numpy.fabs", "numpy.logical_not", "numpy.linspace", "numpy.meshgrid", "numpy.concatenate", "numpy.deg2rad"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px"], ["", "def", "draw_observability", "(", "self", ",", "image", ",", "pose_m", ",", "world_size_m", ",", "h_fov", ")", ":", "\n", "        ", "image", "=", "image", ".", "copy", "(", ")", "\n", "img_size_px", "=", "image", ".", "shape", "[", "1", "]", "\n", "pose_px", "=", "poses_m_to_px", "(", "as_pose", "=", "pose_m", ",", "img_size_px", "=", "img_size_px", ",", "world_size_px", "=", "img_size_px", ",", "\n", "world_size_m", "=", "world_size_m", ",", "batch_dim", "=", "False", ")", "\n", "pose_px", ".", "position", "[", "1", "]", "=", "img_size_px", "-", "pose_px", ".", "position", "[", "1", "]", "\n", "drone_yaw", "=", "-", "pose_px", ".", "orientation", "+", "3.14159", "\n", "\n", "if", "self", ".", "coord_grid", "is", "None", ":", "\n", "            ", "lspace", "=", "np", ".", "linspace", "(", "0", ",", "image", ".", "shape", "[", "0", "]", "-", "1", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "coord_grid", "=", "np", ".", "meshgrid", "(", "lspace", ",", "lspace", ")", "\n", "coord_grid", "=", "[", "c", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "for", "c", "in", "coord_grid", "]", "\n", "coord_grid", "=", "np", ".", "concatenate", "(", "coord_grid", ",", "axis", "=", "2", ")", "\n", "self", ".", "coord_grid", "=", "coord_grid", "\n", "\n", "", "heading", "=", "self", ".", "coord_grid", "-", "pose_px", ".", "position", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "yaws", "=", "np", ".", "arctan2", "(", "heading", "[", ":", ",", ":", ",", "0", "]", ",", "heading", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "\n", "diff", "=", "yaws", "-", "drone_yaw", "\n", "toobig", "=", "diff", ">", "np", ".", "pi", "\n", "toosmall", "=", "diff", "<", "-", "np", ".", "pi", "\n", "diff", "[", "toobig", "]", "-=", "np", ".", "pi", "*", "2", "\n", "diff", "[", "toosmall", "]", "+=", "np", ".", "pi", "*", "2", "\n", "diff", "=", "np", ".", "fabs", "(", "diff", ")", "\n", "\n", "visible_mask", "=", "diff", "<", "np", ".", "deg2rad", "(", "h_fov", ")", "/", "2", "\n", "invisible_mask", "=", "np", ".", "logical_not", "(", "visible_mask", ")", "\n", "image", "[", "invisible_mask", "]", "*=", "0.8", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_prob_bars": [[185, 210], ["int", "int", "enumerate", "int", "int", "image.clip.clip.clip", "len"], "methods", ["None"], ["", "def", "draw_prob_bars", "(", "self", ",", "image", ",", "probabilities", ")", ":", "\n", "        ", "GAP", "=", "2", "\n", "origin_x", "=", "int", "(", "image", ".", "shape", "[", "0", "]", "*", "0.6", ")", "\n", "origin_y", "=", "int", "(", "image", ".", "shape", "[", "1", "]", "*", "0.8", ")", "\n", "area_width", "=", "image", ".", "shape", "[", "1", "]", "-", "origin_y", "\n", "area_height", "=", "image", ".", "shape", "[", "0", "]", "-", "origin_x", "\n", "bar_width", "=", "int", "(", "area_width", "/", "len", "(", "probabilities", ")", ")", "-", "GAP", "\n", "bar_height", "=", "area_height", "\n", "for", "i", ",", "prob", "in", "enumerate", "(", "probabilities", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "continue", "\n", "bar_active_height", "=", "int", "(", "bar_height", "*", "prob", ")", "\n", "bar_bottom", "=", "image", ".", "shape", "[", "0", "]", "-", "GAP", "\n", "bar_top", "=", "image", ".", "shape", "[", "0", "]", "-", "bar_height", "\n", "bar_left", "=", "origin_y", "+", "i", "*", "(", "bar_width", "+", "GAP", ")", "\n", "bar_right", "=", "bar_left", "+", "bar_width", "\n", "active_bar_top", "=", "bar_bottom", "-", "bar_active_height", "\n", "# draw rectangle around the bar:", "\n", "image", "[", "bar_bottom", ",", "bar_left", ":", "bar_right", ",", ":", "]", "=", "1.0", "\n", "image", "[", "bar_top", ",", "bar_left", ":", "bar_right", ",", ":", "]", "=", "1.0", "\n", "image", "[", "bar_top", ":", "bar_bottom", ",", "bar_left", ",", ":", "]", "=", "1.0", "\n", "image", "[", "bar_top", ":", "bar_bottom", ",", "bar_right", ",", ":", "]", "=", "1.0", "\n", "# fill the bar:", "\n", "image", "[", "active_bar_top", ":", "bar_bottom", ",", "bar_left", ":", "bar_right", ",", "i", "]", "+=", "0.5", "\n", "image", "=", "image", ".", "clip", "(", "0", ",", "1", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_action": [[211, 251], ["numpy.zeros", "numpy.asarray", "int", "int", "max", "turn_p1.astype.astype.astype", "turn_p2.astype.astype.astype", "fwd_p1.astype.astype.astype", "fwd_p2.astype.astype.astype", "cv2.rectangle", "cv2.rectangle", "cv2.rectangle", "cv2.rectangle", "cv2.rectangle", "cv2.addWeighted", "int", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "left_rect_p1.astype", "left_rect_p2.astype", "right_rect_p1.astype", "right_rect_p2.astype", "top_rect_p1.astype", "top_rect_p2.astype"], "methods", ["None"], ["", "def", "draw_action", "(", "self", ",", "image", ",", "offset", ",", "action", ")", ":", "\n", "        ", "img2", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", ")", ",", "np", ".", "uint8", ")", "\n", "offset", "=", "np", ".", "asarray", "(", "offset", ")", "\n", "\n", "rect_width", "=", "int", "(", "image", ".", "shape", "[", "0", "]", "*", "0.2", ")", "\n", "h_rect_length", "=", "int", "(", "image", ".", "shape", "[", "0", "]", "*", "0.5", ")", "-", "2", "\n", "v_rect_length", "=", "int", "(", "image", ".", "shape", "[", "0", "]", "-", "rect_width", "-", "2", ")", "\n", "\n", "left_rect_p1", "=", "offset", "+", "np", ".", "asarray", "(", "(", "0", ",", "0", ")", ")", "\n", "left_rect_p2", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", ",", "rect_width", ")", ")", "\n", "right_rect_p1", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", ",", "0", ")", ")", "\n", "right_rect_p2", "=", "offset", "+", "np", ".", "asarray", "(", "(", "2", "*", "h_rect_length", ",", "rect_width", ")", ")", "\n", "top_rect_p1", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", "-", "rect_width", "/", "2", ",", "0", ")", ")", "\n", "top_rect_p2", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", "+", "rect_width", "/", "2", ",", "-", "v_rect_length", ")", ")", "\n", "\n", "turn_percent", "=", "action", "[", "2", "]", "*", "ANG_MULTIPLIER", "\n", "fwd_percent", "=", "max", "(", "action", "[", "0", "]", "*", "FWD_MULTIPLIER", ",", "0", ")", "\n", "\n", "turn_p1", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", ",", "0", ")", ")", "\n", "turn_p2", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", "+", "h_rect_length", "*", "turn_percent", ",", "rect_width", ")", ")", "\n", "turn_p1", "=", "turn_p1", ".", "astype", "(", "int", ")", "\n", "turn_p2", "=", "turn_p2", ".", "astype", "(", "int", ")", "\n", "\n", "fwd_p1", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", "-", "rect_width", "/", "2", ",", "0", ")", ")", "\n", "fwd_p2", "=", "offset", "+", "np", ".", "asarray", "(", "(", "h_rect_length", "-", "rect_width", "/", "2", "+", "rect_width", ",", "\n", "-", "v_rect_length", "*", "fwd_percent", ")", ")", "\n", "fwd_p1", "=", "fwd_p1", ".", "astype", "(", "int", ")", "\n", "fwd_p2", "=", "fwd_p2", ".", "astype", "(", "int", ")", "\n", "\n", "turn_color", "=", "(", "255", ",", "100", ",", "100", ",", "ACTION_OPACITY", ")", "\n", "cv2", ".", "rectangle", "(", "img2", ",", "tuple", "(", "turn_p1", ")", ",", "tuple", "(", "turn_p2", ")", ",", "turn_color", ",", "thickness", "=", "-", "1", ")", "\n", "cv2", ".", "rectangle", "(", "img2", ",", "tuple", "(", "fwd_p1", ")", ",", "tuple", "(", "fwd_p2", ")", ",", "turn_color", ",", "thickness", "=", "-", "1", ")", "\n", "\n", "border_color", "=", "(", "255", ",", "255", ",", "255", ",", "ACTION_OPACITY", ")", "\n", "cv2", ".", "rectangle", "(", "img2", ",", "tuple", "(", "left_rect_p1", ".", "astype", "(", "int", ")", ")", ",", "tuple", "(", "left_rect_p2", ".", "astype", "(", "int", ")", ")", ",", "border_color", ")", "\n", "cv2", ".", "rectangle", "(", "img2", ",", "tuple", "(", "right_rect_p1", ".", "astype", "(", "int", ")", ")", ",", "tuple", "(", "right_rect_p2", ".", "astype", "(", "int", ")", ")", ",", "border_color", ")", "\n", "cv2", ".", "rectangle", "(", "img2", ",", "tuple", "(", "top_rect_p1", ".", "astype", "(", "int", ")", ")", ",", "tuple", "(", "top_rect_p2", ".", "astype", "(", "int", ")", ")", ",", "border_color", ")", "\n", "\n", "cv2", ".", "addWeighted", "(", "image", ",", "1", ",", "img2", ",", "0.4", ",", "0", ",", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.scale_image": [[252, 255], ["cv2.resize", "tuple", "reversed", "int", "numpy.asarray"], "methods", ["None"], ["", "def", "scale_image", "(", "self", ",", "image", ",", "scale", ")", ":", "\n", "        ", "image_o", "=", "cv2", ".", "resize", "(", "image", ",", "dsize", "=", "tuple", "(", "reversed", "(", "[", "int", "(", "x", ")", "for", "x", "in", "np", ".", "asarray", "(", "image", ".", "shape", ")", "[", ":", "2", "]", "*", "scale", "]", ")", ")", ")", "\n", "return", "image_o", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_gif": [[256, 259], ["imageio.mimsave", "visualization.filter_for_gif"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.filter_for_gif"], ["", "def", "save_gif", "(", "self", ",", "frames", ",", "filepath", ",", "fps", "=", "2.0", ")", ":", "\n", "        ", "frames", "=", "[", "filter_for_gif", "(", "f", ")", "for", "f", "in", "frames", "]", "\n", "imageio", ".", "mimsave", "(", "filepath", ",", "frames", ",", "\"GIF-FI\"", ",", "fps", "=", "fps", ",", "quantizer", "=", "\"nq\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter._make_make_frame": [[260, 266], ["functools.partial", "int", "len"], "methods", ["None"], ["", "def", "_make_make_frame", "(", "self", ",", "frames", ",", "fps", ")", ":", "\n", "        ", "def", "make_frame_partial", "(", "frames", ",", "fps", ",", "t", ")", ":", "\n", "            ", "frame_no", "=", "int", "(", "t", "*", "fps", "+", "1e-5", ")", "\n", "frame_no", "=", "frame_no", "%", "len", "(", "frames", ")", "\n", "return", "frames", "[", "frame_no", "]", "*", "255", "\n", "", "return", "functools", ".", "partial", "(", "make_frame_partial", ",", "frames", ",", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_video": [[267, 274], ["isinstance", "moviepy.VideoClip.write_videofile", "moviepy.VideoClip", "len", "visualization.Presenter._make_make_frame"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter._make_make_frame"], ["", "def", "save_video", "(", "self", ",", "frames", ",", "filepath", ",", "fps", "=", "2.0", ")", ":", "\n", "        ", "if", "isinstance", "(", "frames", ",", "list", ")", ":", "\n", "            ", "duration", "=", "len", "(", "frames", ")", "/", "fps", "\n", "clip", "=", "mpy", ".", "VideoClip", "(", "self", ".", "_make_make_frame", "(", "frames", ",", "fps", ")", ",", "duration", "=", "duration", ")", "\n", "", "else", ":", "\n", "            ", "clip", "=", "frames", "\n", "", "clip", ".", "write_videofile", "(", "filepath", ",", "fps", "=", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.get_all_file_paths_in_dir": [[275, 286], ["os.walk", "os.path.join", "file_paths.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_all_file_paths_in_dir", "(", "self", ",", "directory", ")", ":", "\n", "# initializing empty file paths list", "\n", "        ", "file_paths", "=", "[", "]", "\n", "# crawling through directory and subdirectories", "\n", "for", "root", ",", "directories", ",", "files", "in", "os", ".", "walk", "(", "directory", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "# join the two strings in order to form the full filepath.", "\n", "                ", "filepath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "file_paths", ".", "append", "(", "filepath", ")", "\n", "# returning all file paths", "\n", "", "", "return", "file_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_frames": [[287, 306], ["isinstance", "os.makedirs", "enumerate", "visualization.Presenter.get_all_file_paths_in_dir", "shutil.rmtree", "visualization.Presenter.save_image", "zipfile.ZipFile", "zip.write", "str", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.get_all_file_paths_in_dir", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_image"], ["", "def", "save_frames", "(", "self", ",", "frames", ",", "framedir", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "frames", ",", "list", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "framedir", ",", "exist_ok", "=", "True", ")", "\n", "for", "i", ",", "frame", "in", "enumerate", "(", "frames", ")", ":", "\n", "                ", "self", ".", "save_image", "(", "frame", ",", "name", "=", "str", "(", "i", ")", ",", "folder", "=", "framedir", ")", "\n", "\n", "", "filepaths", "=", "self", ".", "get_all_file_paths_in_dir", "(", "framedir", ")", "\n", "zippath", "=", "f\"{framedir}.zip\"", "\n", "# writing files to a zipfile", "\n", "with", "zipfile", ".", "ZipFile", "(", "zippath", ",", "'w'", ")", "as", "zip", ":", "\n", "# writing each file one by one", "\n", "                ", "for", "file", "in", "filepaths", ":", "\n", "                    ", "zip", ".", "write", "(", "file", ",", "arcname", "=", "os", ".", "path", ".", "basename", "(", "file", ")", ")", "\n", "\n", "", "", "shutil", ".", "rmtree", "(", "framedir", ")", "\n", "# This is a video", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.split_lines": [[307, 324], ["len", "string.split", "enumerate", "len", "visualization.Presenter.split_lines"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.split_lines"], ["", "", "def", "split_lines", "(", "self", ",", "string", ",", "maxchars", "=", "50", ")", ":", "\n", "\n", "        ", "if", "len", "(", "string", ")", "<", "maxchars", ":", "\n", "            ", "return", "[", "string", "]", "\n", "", "else", ":", "\n", "            ", "words", "=", "string", ".", "split", "(", "\" \"", ")", "\n", "letter_count", "=", "0", "\n", "split_word", "=", "0", "\n", "for", "num", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "if", "letter_count", ">", "maxchars", ":", "\n", "                    ", "break", "\n", "", "split_word", "=", "num", "\n", "letter_count", "+=", "len", "(", "word", ")", "\n", "\n", "", "string1", "=", "\" \"", ".", "join", "(", "words", "[", ":", "split_word", "]", ")", "\n", "string2", "=", "\" \"", ".", "join", "(", "words", "[", "split_word", ":", "]", ")", "\n", "return", "[", "string1", "]", "+", "self", ".", "split_lines", "(", "string2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_pts_on_torch_image": [[325, 338], ["image.cpu().data.numpy", "image_np.transpose.transpose.transpose", "pts.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "image.cpu", "pts.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "", "def", "plot_pts_on_torch_image", "(", "self", ",", "image", ",", "pts", ")", ":", "\n", "        ", "\"\"\"\n        :param image: CxHxW image\n        :param pts: Nx2 points - (H,W) coords in the image\n        :return:\n        \"\"\"", "\n", "image_np", "=", "image", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "image_np", "=", "image_np", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "pts", "=", "pts", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "image_np", "[", ":", ",", ":", ",", "0", "]", "=", "0.0", "\n", "for", "pt", "in", "pts", ":", "\n", "            ", "image_np", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "0", "]", "=", "1.0", "\n", "", "return", "image_np", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_sample": [[340, 355], ["matplotlib.imsave", "matplotlib.imsave", "open", "json.dump", "open.close", "os.makedirs", "list", "list", "os.path.dirname"], "methods", ["None"], ["", "def", "save_sample", "(", "self", ",", "path", ",", "drone_state", ",", "image", ",", "action", ",", "reward", ",", "command", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "mpimg", ".", "imsave", "(", "path", "+", "\".png\"", ",", "image", "[", ":", ",", ":", ",", ":", "3", "]", ")", "\n", "data_dict", "=", "{", "\n", "\"drone_state\"", ":", "list", "(", "drone_state", ")", ",", "\n", "\"action\"", ":", "list", "(", "action", ")", ",", "\n", "\"reward\"", ":", "reward", ",", "\n", "\"command\"", ":", "command", "\n", "}", "\n", "file", "=", "open", "(", "path", "+", "\".json\"", ",", "\"w\"", ")", "\n", "json", ".", "dump", "(", "data_dict", ",", "file", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_action": [[356, 363], ["numpy.zeros", "visualization.Presenter.draw_action", "cv2.imshow", "cv2.waitKey"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_action"], ["", "def", "show_action", "(", "self", ",", "action", ",", "name", "=", "\"action\"", ")", ":", "\n", "        ", "if", "self", ".", "headless", ":", "\n", "            ", "return", "\n", "", "image", "=", "np", ".", "zeros", "(", "(", "200", ",", "200", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "draw_action", "(", "image", ",", "(", "0", ",", "100", ")", ",", "action", ")", "\n", "cv2", ".", "imshow", "(", "name", ",", "image", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_sample": [[364, 410], ["cv2.resize", "numpy.asarray", "command.split", "visualization.Presenter.split_lines", "enumerate", "cv2.putText", "visualization.Presenter.draw_action", "cv2.imshow", "cv2.waitKey", "reversed", "cv2.putText", "cv2.cvtColor", "int", "set"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.split_lines", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_action"], ["", "def", "show_sample", "(", "self", ",", "state", ",", "action", ",", "reward", ",", "cumulative_reward", ",", "command", ")", ":", "\n", "        ", "if", "self", ".", "headless", ":", "\n", "            ", "return", "\n", "", "drone_state", "=", "state", ".", "state", "\n", "image", "=", "state", ".", "image", "\n", "\n", "if", "command", "is", "None", ":", "\n", "            ", "command", "=", "\"\"", "\n", "", "image", "=", "image", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "height", ",", "width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "dst", "=", "cv2", ".", "resize", "(", "image", ",", "(", "6", "*", "width", ",", "6", "*", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "start_point", "=", "[", "dst", ".", "shape", "[", "0", "]", "-", "1", ",", "dst", ".", "shape", "[", "1", "]", "/", "2", "]", "\n", "vec", "=", "np", ".", "asarray", "(", "[", "-", "action", "[", "0", "]", ",", "-", "action", "[", "2", "]", "]", ")", "\n", "end_point", "=", "start_point", "+", "vec", "\n", "\n", "#cv2.line(dst, start_point, end_point)", "\n", "#Draw the text", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "instructionScale", "=", "0.5", "\n", "instructionColor", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "rewardScale", "=", "1.0", "\n", "rewardColor", "=", "(", "255", ",", "100", ",", "100", ")", "\n", "lineType", "=", "2", "\n", "rewardLineType", "=", "2", "\n", "\n", "textOrgReward", "=", "(", "dst", ".", "shape", "[", "1", "]", "-", "500", ",", "40", ")", "\n", "\n", "command", "=", "''", ".", "join", "(", "ch", "if", "ch", "not", "in", "set", "(", "string", ".", "punctuation", ")", "else", "\"\"", "for", "ch", "in", "command", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "wordlist", "=", "command", ".", "split", "(", "\" \"", ")", "\n", "wordlist", "=", "[", "word", "for", "word", "in", "wordlist", "if", "word", "!=", "\" \"", "]", "\n", "command", "=", "\" \"", ".", "join", "(", "wordlist", ")", "\n", "\n", "lines", "=", "self", ".", "split_lines", "(", "command", ",", "maxchars", "=", "45", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "reversed", "(", "lines", ")", ")", ":", "\n", "            ", "textOrg", "=", "(", "10", ",", "dst", ".", "shape", "[", "0", "]", "-", "10", "-", "int", "(", "35", "*", "instructionScale", "*", "i", ")", ")", "\n", "cv2", ".", "putText", "(", "dst", ",", "line", ",", "textOrg", ",", "font", ",", "instructionScale", ",", "instructionColor", ",", "lineType", ")", "\n", "\n", "", "reward_str", "=", "\"Reward: {:5.1f}  Return: {:5.1f}\"", ".", "format", "(", "reward", ",", "cumulative_reward", ")", "\n", "cv2", ".", "putText", "(", "dst", ",", "reward_str", ",", "textOrgReward", ",", "font", ",", "rewardScale", ",", "rewardColor", ",", "rewardLineType", ")", "\n", "\n", "# Draw the action", "\n", "self", ".", "draw_action", "(", "dst", ",", "(", "1100", ",", "300", ")", ",", "action", ")", "\n", "\n", "cv2", ".", "imshow", "(", "\"live\"", ",", "cv2", ".", "cvtColor", "(", "dst", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image": [[411, 450], ["hasattr", "type", "image.transpose.transpose.detach().cpu().numpy", "image.transpose.transpose.squeeze", "numpy.min", "list", "numpy.zeros", "cv2.resize", "image.transpose.transpose.astype", "len", "image.transpose.transpose.transpose", "numpy.max", "len", "len", "image.transpose.transpose.detach().cpu", "int", "int", "image.transpose.transpose.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "prep_image", "(", "self", ",", "image", ",", "scale", "=", "(", "1.0", ",", "1.0", ")", ")", ":", "\n", "        ", "import", "cv2", "\n", "if", "type", "(", "scale", ")", "is", "int", ":", "\n", "            ", "scale", "=", "(", "scale", ",", "scale", ")", "\n", "\n", "", "is_torch", "=", "hasattr", "(", "image", ",", "\"cpu\"", ")", "\n", "if", "is_torch", ":", "\n", "            ", "image", "=", "image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image", "=", "image", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "                ", "image", "=", "image", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "", "image", "=", "image", "-", "np", ".", "min", "(", "image", ")", "\n", "image", "=", "image", "/", "(", "np", ".", "max", "(", "image", ")", "+", "1e-9", ")", "\n", "\n", "# Only 2 channels - add another one", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "2", ":", "\n", "            ", "newshape", "=", "list", "(", "image", ".", "shape", ")", "\n", "newshape", "[", "2", "]", "=", "3", "\n", "new_img", "=", "np", ".", "zeros", "(", "newshape", ")", "\n", "new_img", "[", ":", ",", ":", ",", "0", ":", "2", "]", "=", "image", "\n", "image", "=", "new_img", "\n", "\n", "# If we have too many channels, only show 3 of them", "\n", "", "if", "len", "(", "image", ".", "shape", ")", ">", "2", "and", "image", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "if", "scale", "!=", "1.0", ":", "\n", "            ", "width", "=", "image", ".", "shape", "[", "1", "]", "\n", "height", "=", "image", ".", "shape", "[", "0", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "int", "(", "scale", "[", "0", "]", "*", "width", ")", ",", "int", "(", "scale", "[", "1", "]", "*", "height", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "", "if", "image", ".", "dtype", "==", "np", ".", "float64", ":", "\n", "            ", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#if len(image.shape) > 2 and (image.shape[2] == 3 or image.shape[2] == 4):", "\n", "#image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.is_torch": [[451, 454], ["hasattr"], "methods", ["None"], ["", "def", "is_torch", "(", "self", ",", "list_np_or_tensor", ")", ":", "\n", "        ", "if", "hasattr", "(", "list_np_or_tensor", ",", "\"cuda\"", ")", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_pts_on_image": [[455, 471], ["visualization.Presenter.prep_image", "visualization.Presenter.is_torch", "pts.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "pts.cpu().data.numpy.cpu().data.numpy.cpu", "int", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.is_torch", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "", "def", "overlay_pts_on_image", "(", "self", ",", "image", ",", "pts", ")", ":", "\n", "        ", "\"\"\"\n        :param image: CxHxW image\n        :param pts: Nx2 points - (H,W) coords in the image\n        :return:\n        \"\"\"", "\n", "image", "=", "self", ".", "prep_image", "(", "image", ")", "\n", "if", "self", ".", "is_torch", "(", "pts", ")", ":", "\n", "            ", "pts", "=", "pts", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "image", "[", ":", ",", ":", ",", "0", "]", "=", "0.0", "\n", "if", "pts", "is", "not", "None", ":", "\n", "            ", "for", "pt", "in", "pts", ":", "\n", "                ", "image", "[", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", ",", "0", "]", "=", "1.0", "\n", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.blend_image": [[472, 495], ["visualization.Presenter.prep_image", "visualization.Presenter.prep_image", "int", "int", "visualization.Presenter.prep_image", "visualization.Presenter.copy", "numpy.clip", "len", "numpy.expand_dims", "numpy.expand_dims.mean"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image"], ["", "def", "blend_image", "(", "self", ",", "background", ",", "overlay", ")", ":", "\n", "        ", "background", "=", "self", ".", "prep_image", "(", "background", ")", "\n", "overlay_t", "=", "self", ".", "prep_image", "(", "overlay", ")", "\n", "\n", "scale_x", "=", "int", "(", "background", ".", "shape", "[", "0", "]", "/", "overlay_t", ".", "shape", "[", "0", "]", ")", "\n", "scale_y", "=", "int", "(", "background", ".", "shape", "[", "1", "]", "/", "overlay_t", ".", "shape", "[", "1", "]", ")", "\n", "\n", "overlay", "=", "self", ".", "prep_image", "(", "overlay", ",", "scale", "=", "(", "scale_x", ",", "scale_y", ")", ")", "\n", "out", "=", "background", ".", "copy", "(", ")", "\n", "\n", "if", "len", "(", "overlay", ".", "shape", ")", "==", "2", ":", "\n", "            ", "overlay", "=", "np", ".", "expand_dims", "(", "overlay", ",", "2", ")", "\n", "\n", "", "alpha", "=", "np", ".", "clip", "(", "overlay", ".", "mean", "(", "2", ",", "keepdims", "=", "True", ")", "*", "2", ",", "0", ",", "0.8", ")", "\n", "\n", "overlay", "=", "overlay", "*", "alpha", "\n", "out", "=", "out", "*", "(", "1", "-", "alpha", ")", "\n", "\n", "overlay_channels", "=", "overlay", ".", "shape", "[", "2", "]", "\n", "\n", "out", "[", ":", ",", ":", ",", "0", ":", "overlay_channels", "]", "+=", "overlay", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image": [[496, 523], ["visualization.Presenter.prep_image", "visualization.Presenter.prep_image", "int", "int", "visualization.Presenter.prep_image", "numpy.zeros_like", "numpy.expand_dims", "len", "numpy.expand_dims", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image"], ["", "def", "overlaid_image", "(", "self", ",", "background", ",", "overlay", ",", "gray_bg", "=", "False", ",", "channel", "=", "None", ",", "strength", "=", "0.7", ")", ":", "\n", "        ", "background", "=", "self", ".", "prep_image", "(", "background", ")", "\n", "overlay_t", "=", "self", ".", "prep_image", "(", "overlay", ")", "\n", "\n", "scale_x", "=", "int", "(", "background", ".", "shape", "[", "0", "]", "/", "overlay_t", ".", "shape", "[", "0", "]", ")", "\n", "scale_y", "=", "int", "(", "background", ".", "shape", "[", "1", "]", "/", "overlay_t", ".", "shape", "[", "1", "]", ")", "\n", "\n", "overlay", "=", "self", ".", "prep_image", "(", "overlay", ",", "scale", "=", "(", "scale_x", ",", "scale_y", ")", ")", "\n", "out", "=", "np", ".", "zeros_like", "(", "background", ")", "\n", "# Place the background", "\n", "if", "gray_bg", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", ":", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "background", ",", "axis", "=", "2", ")", "*", "(", "1", "-", "strength", ")", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", ":", "]", "=", "background", "*", "(", "1", "-", "strength", ")", "\n", "\n", "", "if", "len", "(", "overlay", ".", "shape", ")", "==", "2", ":", "\n", "            ", "overlay", "=", "np", ".", "expand_dims", "(", "overlay", ",", "2", ")", "\n", "\n", "", "overlay_channels", "=", "overlay", ".", "shape", "[", "2", "]", "\n", "\n", "# Add the overlay:", "\n", "if", "channel", "is", "None", ":", "\n", "            ", "out", "+=", "overlay", "*", "strength", "\n", "", "else", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "channel", ":", "channel", "+", "overlay_channels", "]", "+=", "overlay", "*", "strength", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_text": [[524, 537], ["image.copy", "visualization.Presenter.split_lines", "enumerate", "cv2.putText", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.split_lines"], ["", "def", "overlay_text", "(", "self", ",", "image", ",", "text_str", ")", ":", "\n", "        ", "img_out", "=", "image", ".", "copy", "(", ")", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "fontScale", "=", "0.001", "*", "image", ".", "shape", "[", "0", "]", "\n", "#fontColor = (255, 255, 255)", "\n", "fontColor", "=", "(", "1.0", ",", "1.0", ",", "1.0", ")", "\n", "lineType", "=", "1", "\n", "\n", "lines", "=", "self", ".", "split_lines", "(", "text_str", ",", "maxchars", "=", "45", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "textOrg", "=", "(", "15", ",", "15", "+", "int", "(", "35", "*", "fontScale", "*", "i", ")", ")", "\n", "cv2", ".", "putText", "(", "img_out", ",", "line", ",", "textOrg", ",", "font", ",", "fontScale", ",", "fontColor", ",", "lineType", ")", "\n", "", "return", "img_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image": [[538, 554], ["visualization.Presenter.prep_image", "cv2.namedWindow", "cv2.imshow", "type", "cv2.waitKey", "cv2.waitKey", "cv2.waitKey"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image"], ["", "def", "show_image", "(", "self", ",", "image", ",", "name", "=", "\"live\"", ",", "torch", "=", "False", ",", "waitkey", "=", "False", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "if", "self", ".", "headless", ":", "\n", "            ", "return", "\n", "\n", "", "import", "cv2", "\n", "\n", "image", "=", "self", ".", "prep_image", "(", "image", ",", "scale", ")", "\n", "\n", "cv2", ".", "namedWindow", "(", "name", ",", "cv2", ".", "WINDOW_AUTOSIZE", "|", "cv2", ".", "WINDOW_GUI_NORMAL", ")", "\n", "cv2", ".", "imshow", "(", "name", ",", "image", ")", "\n", "if", "type", "(", "waitkey", ")", "is", "int", ":", "\n", "            ", "cv2", ".", "waitKey", "(", "waitkey", ")", "\n", "", "elif", "waitkey", ":", "\n", "            ", "cv2", ".", "waitKey", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "cv2", ".", "waitKey", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_image": [[555, 566], ["visualization.Presenter.prep_image", "scipy.misc.imsave", "numpy.array", "os.makedirs", "int", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image"], ["", "", "def", "save_image", "(", "self", ",", "image", ",", "name", "=", "\"live\"", ",", "torch", "=", "False", ",", "draw_point", "=", "None", ",", "scale", "=", "1.0", ",", "folder", "=", "\"\"", ")", ":", "\n", "\n", "        ", "image", "=", "self", ".", "prep_image", "(", "image", ",", "scale", ")", "\n", "\n", "if", "draw_point", "is", "not", "None", ":", "\n", "            ", "image", "[", "int", "(", "draw_point", "[", "0", "]", ")", ",", "int", "(", "draw_point", "[", "1", "]", ")", ",", ":", "]", "=", "np", ".", "array", "(", "[", "1.0", ",", "0", ",", "1.0", "]", ")", "\n", "\n", "", "if", "folder", "!=", "\"\"", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "scipy", ".", "misc", ".", "imsave", "(", "folder", "+", "\"/\"", "+", "name", "+", "\".png\"", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_action": [[567, 574], ["numpy.ones().astype", "visualization.Presenter.draw_action", "scipy.misc.imsave", "os.makedirs", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_action"], ["", "def", "save_action", "(", "self", ",", "action", ",", "filename", ",", "folder", ")", ":", "\n", "        ", "img", "=", "np", ".", "ones", "(", "(", "420", ",", "420", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "draw_action", "(", "img", ",", "(", "10", ",", "300", ")", ",", "action", ")", "\n", "if", "folder", "!=", "\"\"", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "folder", "+=", "\"/\"", "\n", "", "scipy", ".", "misc", ".", "imsave", "(", "filename", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_instruction": [[575, 583], ["data_io.instructions.debug_untokenize_instruction", "os.makedirs", "open", "fp.write", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction"], ["", "def", "save_instruction", "(", "self", ",", "instruction", ",", "filename", ",", "torch", "=", "False", ",", "folder", "=", "\"\"", ")", ":", "\n", "        ", "if", "torch", ":", "\n", "            ", "instruction", "=", "debug_untokenize_instruction", "(", "instruction", ")", "\n", "\n", "", "if", "folder", "!=", "\"\"", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "instruction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_env_image": [[584, 592], ["os.makedirs", "shutil.copy", "data_io.paths.get_env_image_path", "os.path.join", "print", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_image_path"], ["", "", "def", "save_env_image", "(", "self", ",", "env_id", ",", "filename", ",", "folder", ")", ":", "\n", "        ", "if", "folder", "!=", "\"\"", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "", "try", ":", "\n", "            ", "shutil", ".", "copy", "(", "get_env_image_path", "(", "env_id", ")", ",", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Error saving env image!\"", ")", "\n", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_path": [[593, 626], ["zip", "matplotlib.axis", "matplotlib.axis", "matplotlib.ion", "matplotlib.ion", "matplotlib.clf", "matplotlib.clf", "matplotlib.ioff", "matplotlib.ioff", "list", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.show", "matplotlib.show", "matplotlib.pause", "matplotlib.pause", "data_io.env.load_env_img", "matplotlib.imshow", "matplotlib.imshow", "zip", "print", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img"], ["", "", "def", "plot_path", "(", "self", ",", "env_id", ",", "paths", ",", "interactive", "=", "False", ",", "show", "=", "True", ",", "bg", "=", "True", ")", ":", "\n", "        ", "if", "interactive", ":", "\n", "            ", "plt", ".", "ion", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "ioff", "(", ")", "\n", "\n", "#config_size = UnrealUnits().get_config_size()", "\n", "\n", "", "if", "bg", ":", "\n", "            ", "try", ":", "\n", "                ", "img", "=", "load_env_img", "(", "env_id", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "extent", "=", "(", "0", ",", "config_size", "[", "0", "]", ",", "0", ",", "config_size", "[", "1", "]", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error in loading and plotting path!\"", ")", "\n", "print", "(", "e", ")", "\n", "\n", "", "", "colors", "=", "[", "\"r\"", ",", "\"g\"", ",", "\"b\"", ",", "\"y\"", ",", "\"c\"", ",", "\"m\"", "]", "\n", "\n", "for", "path", ",", "color", "in", "zip", "(", "paths", ",", "colors", ")", ":", "\n", "# Note that x and y are swapped", "\n", "            ", "x_targets", ",", "y_targets", "=", "list", "(", "zip", "(", "*", "path", ")", ")", "\n", "\n", "y_targets", "=", "config_size", "[", "1", "]", "-", "y_targets", "\n", "\n", "plt", ".", "plot", "(", "y_targets", ",", "x_targets", ",", "color", ")", "\n", "plt", ".", "plot", "(", "y_targets", "[", "-", "1", "]", ",", "x_targets", "[", "-", "1", "]", ",", "color", "+", "\"o\"", ")", "\n", "\n", "", "plt", ".", "axis", "(", "[", "0", ",", "config_size", "[", "0", "]", ",", "0", ",", "config_size", "[", "1", "]", "]", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "plt", ".", "pause", "(", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_paths": [[627, 711], ["matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axis", "matplotlib.axis", "visualization.Presenter.split_lines", "matplotlib.title", "matplotlib.title", "matplotlib.ion", "matplotlib.ion", "matplotlib.ioff", "matplotlib.ioff", "len", "print", "actual_path.append", "len", "matplotlib.show", "matplotlib.show", "matplotlib.pause", "matplotlib.pause", "data_io.env.load_env_img", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.text", "matplotlib.text", "matplotlib.text", "matplotlib.text", "range", "unique_instructions.append", "print", "print", "len", "numpy.asarray", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.split_lines", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "plot_paths", "(", "self", ",", "\n", "segment_dataset", ",", "\n", "world_size", ",", "\n", "segment_path", "=", "None", ",", "\n", "file", "=", "None", ",", "\n", "interactive", "=", "False", ",", "\n", "bg", "=", "True", ",", "\n", "texts", "=", "[", "]", ",", "\n", "entire_trajectory", "=", "False", ",", "\n", "real_drone", "=", "False", ")", ":", "\n", "\n", "        ", "if", "interactive", ":", "\n", "            ", "plt", ".", "ion", "(", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "ioff", "(", ")", "\n", "\n", "", "if", "len", "(", "segment_dataset", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Empty segment. Not plotting!\"", ")", "\n", "return", "\n", "\n", "", "path_key", "=", "\"path\"", "if", "entire_trajectory", "else", "\"seg_path\"", "\n", "\n", "md", "=", "segment_dataset", "[", "0", "]", "[", "\"metadata\"", "]", "if", "\"metadata\"", "in", "segment_dataset", "[", "0", "]", "else", "segment_dataset", "[", "0", "]", "\n", "\n", "env_id", "=", "md", "[", "\"env_id\"", "]", "\n", "if", "segment_path", "is", "None", ":", "\n", "            ", "segment_path", "=", "md", "[", "path_key", "]", "\n", "\n", "", "segment_path_px", "=", "(", "segment_path", "*", "512", "/", "world_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "#segment_path_px[:,0] = 512 - segment_path_px[:,0]", "\n", "\n", "if", "entire_trajectory", ":", "\n", "            ", "instructions", "=", "[", "segment_dataset", "[", "i", "]", "[", "\"instruction\"", "]", "for", "i", "in", "range", "(", "len", "(", "segment_dataset", ")", ")", "]", "\n", "unique_instructions", "=", "[", "instructions", "[", "0", "]", "]", "\n", "for", "instruction", "in", "instructions", ":", "\n", "                ", "if", "instruction", "!=", "unique_instructions", "[", "-", "1", "]", ":", "\n", "                    ", "unique_instructions", ".", "append", "(", "instruction", ")", "\n", "", "", "instruction", "=", "\"; \"", ".", "join", "(", "unique_instructions", ")", "\n", "", "else", ":", "\n", "            ", "instruction", "=", "segment_dataset", "[", "0", "]", "[", "\"instruction\"", "]", "\n", "\n", "", "if", "bg", ":", "\n", "            ", "try", ":", "\n", "                ", "img", "=", "load_env_img", "(", "env_id", ",", "width", "=", "512", ",", "height", "=", "512", ",", "real_drone", "=", "real_drone", ",", "origin_bottom_left", "=", "True", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "extent", "=", "(", "0", ",", "512", ",", "0", ",", "512", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error in plotting paths!\"", ")", "\n", "print", "(", "e", ")", "\n", "\n", "", "", "plt", ".", "plot", "(", "segment_path_px", "[", ":", ",", "1", "]", ",", "segment_path_px", "[", ":", ",", "0", "]", ",", "\"r\"", ")", "\n", "plt", ".", "plot", "(", "segment_path_px", "[", "-", "1", ",", "1", "]", ",", "segment_path_px", "[", "-", "1", ",", "0", "]", ",", "\"ro\"", ")", "\n", "\n", "actual_path", "=", "[", "]", "\n", "for", "sample", "in", "segment_dataset", ":", "\n", "            ", "actual_path", ".", "append", "(", "sample", "[", "\"state\"", "]", ".", "state", "[", "0", ":", "2", "]", ")", "\n", "", "actual_path_px", "=", "(", "np", ".", "asarray", "(", "actual_path", ")", "*", "512", "/", "world_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "#actual_path_px[:,0] = 512 - actual_path_px[:,0]", "\n", "\n", "plt", ".", "plot", "(", "actual_path_px", "[", ":", ",", "1", "]", ",", "actual_path_px", "[", ":", ",", "0", "]", ",", "\"b\"", ")", "\n", "plt", ".", "plot", "(", "actual_path_px", "[", "-", "1", ",", "1", "]", ",", "actual_path_px", "[", "-", "1", ",", "0", "]", ",", "\"bo\"", ")", "\n", "\n", "plt", ".", "axis", "(", "[", "0", ",", "512", ",", "0", ",", "512", "]", ")", "\n", "\n", "instruction_split", "=", "self", ".", "split_lines", "(", "instruction", ",", "maxchars", "=", "40", ")", "\n", "title", "=", "\"\\n\"", ".", "join", "(", "instruction_split", ")", "\n", "plt", ".", "title", "(", "\"env: \"", "+", "str", "(", "env_id", ")", "+", "\" - \"", "+", "title", ")", "\n", "\n", "x", "=", "10", "\n", "y", "=", "5", "\n", "gap", "=", "20", "\n", "for", "text", "in", "texts", ":", "\n", "            ", "if", "not", "DONT_DRAW_TEXT", ":", "\n", "                ", "plt", ".", "text", "(", "x", ",", "y", ",", "text", ")", "\n", "", "y", "+=", "gap", "\n", "\n", "", "y", "+=", "len", "(", "instruction_split", ")", "*", "gap", "\n", "for", "line", "in", "instruction_split", ":", "\n", "            ", "if", "not", "DONT_DRAW_TEXT", ":", "\n", "                ", "plt", ".", "text", "(", "x", ",", "y", ",", "line", ")", "\n", "", "y", "-=", "gap", "\n", "\n", "", "if", "interactive", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "plt", ".", "pause", "(", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_plot": [[712, 720], ["os.path.dirname", "os.makedirs", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.clf", "matplotlib.clf", "matplotlib.close", "matplotlib.close"], "methods", ["None"], ["", "", "def", "save_plot", "(", "self", ",", "filename", ")", ":", "\n", "        ", "dir", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "#print (\"Saving plot in: \", filename + \".png\")", "\n", "plt", ".", "savefig", "(", "filename", "+", "\".png\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.print_tokenized_instruction": [[721, 724], ["data_io.instructions.debug_untokenize_instruction", "print", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction"], ["", "def", "print_tokenized_instruction", "(", "self", ",", "instruction", ")", ":", "\n", "        ", "instr_str", "=", "debug_untokenize_instruction", "(", "instruction", ")", "\n", "print", "(", "\"instruction: \"", "+", "str", "(", "instr_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_confusion_matrix": [[725, 761], ["sklearn.metrics.confusion_matrix", "matplotlib.figure", "matplotlib.figure", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "matplotlib.colorbar", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "itertools.product", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.savefig", "print", "print", "print", "len", "sklearn.metrics.confusion_matrix.max", "range", "range", "matplotlib.text", "matplotlib.text", "sklearn.metrics.confusion_matrix.astype", "format", "sklearn.metrics.confusion_matrix.sum"], "methods", ["None"], ["", "def", "plot_confusion_matrix", "(", "self", ",", "predictions", ",", "labels", ",", "classes", ",", "\n", "normalize", "=", "True", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "        ", "\"\"\"\n        This function prints and plots the confusion matrix.\n        Normalization can be applied by setting `normalize=True`.\n        \"\"\"", "\n", "cm", "=", "confusion_matrix", "(", "labels", ",", "predictions", ")", "\n", "\n", "if", "normalize", ":", "\n", "            ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "30", ",", "20", ")", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ")", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "            ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "plt", ".", "savefig", "(", "\"confusion_matrix.jpg\"", ")", "\n", "print", "(", "\"saved confusion matrix!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.filter_for_gif": [[763, 770], ["np.clip.astype", "numpy.clip", "numpy.min", "numpy.max"], "function", ["None"], ["", "", "def", "filter_for_gif", "(", "image", ")", ":", "\n", "    ", "image", "=", "image", "-", "np", ".", "min", "(", "image", ")", "\n", "image", "=", "image", "/", "(", "np", ".", "max", "(", "image", ")", "+", "1e-9", ")", "\n", "img_new", "=", "image", "*", "255", "\n", "img_new", "=", "img_new", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_new", "=", "np", ".", "clip", "(", "img_new", ",", "0", ",", "255", ")", "\n", "return", "img_new", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.yaw_to_vec": [[4, 10], ["numpy.zeros", "math.cos", "math.sin"], "function", ["None"], ["def", "yaw_to_vec", "(", "yaw", ")", ":", "\n", "    ", "vec", "=", "np", ".", "zeros", "(", "3", ")", "\n", "vec", "[", "0", "]", "=", "math", ".", "cos", "(", "yaw", ")", "\n", "vec", "[", "1", "]", "=", "math", ".", "sin", "(", "yaw", ")", "\n", "vec", "[", "2", "]", "=", "0", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw": [[12, 15], ["math.atan2"], "function", ["None"], ["", "def", "vec_to_yaw", "(", "vec", ")", ":", "\n", "    ", "yaw", "=", "math", ".", "atan2", "(", "vec", "[", "1", "]", ",", "vec", "[", "0", "]", ")", "\n", "return", "yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle": [[17, 23], ["None"], "function", ["None"], ["", "def", "clip_angle", "(", "angle", ")", ":", "\n", "    ", "if", "angle", ">", "3.14159", ":", "\n", "        ", "angle", "-=", "3.14159", "*", "2", "\n", "", "if", "angle", "<", "-", "3.14159", ":", "\n", "        ", "angle", "+=", "3.14159", "*", "2", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.pos_to_drone": [[25, 32], ["numpy.linalg.norm", "geometry.vec_to_yaw", "geometry.clip_angle", "geometry.yaw_to_vec"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.yaw_to_vec"], ["", "def", "pos_to_drone", "(", "drone_pos", ",", "drone_yaw", ",", "pos", ")", ":", "\n", "    ", "rel_pos", "=", "pos", "-", "drone_pos", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "rel_pos", "[", "0", ":", "2", "]", ")", "\n", "angle", "=", "vec_to_yaw", "(", "rel_pos", ")", "\n", "new_angle", "=", "clip_angle", "(", "angle", "-", "drone_yaw", ")", "\n", "pos_wrt_drone", "=", "dist", "*", "yaw_to_vec", "(", "new_angle", ")", "\n", "return", "pos_wrt_drone", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.__init__": [[14, 24], ["visualization.Presenter", "rollout_vizualizer.RolloutVisualizer.clear", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.clear", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "resolution", "=", "512", ")", ":", "\n", "        ", "self", ".", "presenter", "=", "Presenter", "(", ")", "\n", "self", ".", "clear", "(", ")", "\n", "self", ".", "current_rollout", "=", "{", "}", "\n", "self", ".", "current_rollout_name", "=", "None", "\n", "self", ".", "env_image", "=", "None", "\n", "self", ".", "current_timestep", "=", "None", "\n", "self", ".", "world_size_m", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", "\n", "\n", "self", ".", "resolution", "=", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.clear": [[25, 30], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_rollout", "=", "{", "}", "\n", "self", ".", "current_rollout_name", "=", "None", "\n", "self", ".", "env_image", "=", "None", "\n", "self", ".", "current_timestep", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer._auto_contrast": [[31, 41], ["numpy.clip", "cv2.cvtColor", "cv2.cvtColor", "numpy.clip", "print", "image_out[].min", "image_out[].max"], "methods", ["None"], ["", "def", "_auto_contrast", "(", "self", ",", "image", ")", ":", "\n", "        ", "import", "cv2", "\n", "image_c", "=", "np", ".", "clip", "(", "image", ",", "0.0", ",", "1.0", ")", "\n", "hsv_image", "=", "cv2", ".", "cvtColor", "(", "image_c", ",", "cv2", ".", "COLOR_RGB2HSV", ")", "\n", "hsv_image", "[", ":", ",", ":", ",", "1", "]", "*=", "1.2", "\n", "image_out", "=", "cv2", ".", "cvtColor", "(", "hsv_image", ",", "cv2", ".", "COLOR_HSV2RGB", ")", "\n", "image_out", "=", "np", ".", "clip", "(", "image_out", ",", "0.0", ",", "1.0", ")", "\n", "#print(image_out.min(), image_out.)", "\n", "print", "(", "image_out", "[", ":", ",", ":", ",", "1", "]", ".", "min", "(", ")", ",", "image_out", "[", ":", ",", ":", ",", "1", "]", ".", "max", "(", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer._integrate_mask": [[42, 48], ["numpy.maximum", "frames_out.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "_integrate_mask", "(", "self", ",", "frames", ")", ":", "\n", "        ", "frames_out", "=", "[", "frames", "[", "0", "]", "]", "\n", "for", "frame", "in", "frames", "[", "1", ":", "]", ":", "\n", "            ", "new_frame_out", "=", "np", ".", "maximum", "(", "frames_out", "[", "-", "1", "]", ",", "frame", ")", "\n", "frames_out", ".", "append", "(", "new_frame_out", ")", "\n", "", "return", "frames_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer._draw_landmarks": [[49, 53], ["data_io.env.get_landmark_locations_airsim", "rollout_vizualizer.RolloutVisualizer.presenter.draw_landmarks"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_landmarks"], ["", "def", "_draw_landmarks", "(", "self", ",", "image", ",", "env_id", ")", ":", "\n", "        ", "lm_names", ",", "lm_idx", ",", "lm_pos", "=", "get_landmark_locations_airsim", "(", "env_id", "=", "env_id", ")", "\n", "image", "=", "self", ".", "presenter", ".", "draw_landmarks", "(", "image", ",", "lm_names", ",", "lm_pos", ",", "self", ".", "world_size_m", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.load_video_clip": [[54, 63], ["os.path.join", "print", "moviepy.VideoFileClip"], "methods", ["None"], ["", "def", "load_video_clip", "(", "self", ",", "env_id", ",", "seg_idx", ",", "rollout", ",", "domain", ",", "cam_name", ",", "rollout_dir", ")", ":", "\n", "        ", "video_path", "=", "os", ".", "path", ".", "join", "(", "rollout_dir", ",", "f\"rollout_{cam_name}_{env_id}-0-{seg_idx}.mkv\"", ")", "\n", "try", ":", "\n", "#if os.path.getsize(video_path) > 1024 * 1024 * 30", "\n", "            ", "print", "(", "\"Loading video: \"", ",", "video_path", ")", "\n", "clip", "=", "mpy", ".", "VideoFileClip", "(", "video_path", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "return", "None", "\n", "", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.grab_frames": [[64, 119], ["frames.append", "[].transpose.min", "numpy.percentile", "numpy.clip", "rollout_vizualizer.RolloutVisualizer.presenter.scale_image", "numpy.zeros", "rollout_vizualizer.RolloutVisualizer.presenter.draw_action", "numpy.percentile", "[].transpose", "int", "numpy.clip", "list", "numpy.zeros", "cv2.resize", "[].transpose.max", "numpy.percentile", "numpy.percentile", "[].transpose", "list", "numpy.zeros", "cv2.resize", "[].transpose", "list", "numpy.zeros", "numpy.clip", "cv2.resize", "[].transpose"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.scale_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_action"], ["", "def", "grab_frames", "(", "self", ",", "env_id", ",", "seg_idx", ",", "rollout", ",", "domain", ",", "frame_name", ",", "scale", "=", "1", ")", ":", "\n", "        ", "frames", "=", "[", "]", "\n", "for", "sample", "in", "rollout", ":", "\n", "            ", "if", "frame_name", "==", "\"image\"", ":", "\n", "                ", "frame", "=", "sample", "[", "\"state\"", "]", ".", "image", "\n", "", "elif", "frame_name", "==", "\"action\"", ":", "\n", "                ", "action", "=", "sample", "[", "\"action\"", "]", "\n", "bg", "=", "np", ".", "zeros", "(", "(", "400", ",", "400", ",", "3", ")", ")", "\n", "frame", "=", "self", ".", "presenter", ".", "draw_action", "(", "bg", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "action", "=", "action", ")", "\n", "", "elif", "frame_name", "==", "\"v_dist_r_inner\"", ":", "\n", "                ", "frame_t", "=", "sample", "[", "frame_name", "]", "[", ":", "3", ",", ":", ",", ":", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "# TODO: These should come from params", "\n", "map_size", "=", "64", "\n", "crop_size", "=", "16", "\n", "gap", "=", "int", "(", "(", "map_size", "-", "crop_size", ")", "/", "2", ")", "\n", "crop_l", "=", "gap", "\n", "crop_r", "=", "map_size", "-", "gap", "\n", "frame_t", "=", "frame_t", "[", "crop_l", ":", "crop_r", ",", "crop_l", ":", "crop_r", ",", ":", "]", "\n", "frame_t", "[", ":", ",", ":", ",", "0", "]", "/=", "(", "np", ".", "percentile", "(", "frame_t", "[", ":", ",", ":", ",", "0", "]", ",", "99", ")", "+", "1e-9", ")", "\n", "frame_t", "[", ":", ",", ":", ",", "1", "]", "/=", "(", "np", ".", "percentile", "(", "frame_t", "[", ":", ",", ":", ",", "1", "]", ",", "99", ")", "+", "1e-9", ")", "\n", "frame_t", "=", "np", ".", "clip", "(", "frame_t", ",", "0.0", ",", "1.0", ")", "\n", "shp", "=", "list", "(", "frame_t", ".", "shape", ")", "\n", "shp", "[", "2", "]", "=", "3", "\n", "frame", "=", "np", ".", "zeros", "(", "shp", ")", "\n", "frame", "[", ":", ",", ":", ",", ":", "2", "]", "=", "frame_t", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "dsize", "=", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", "\n", "", "elif", "frame_name", "==", "\"map_struct\"", ":", "\n", "                ", "frame_t", "=", "sample", "[", "frame_name", "]", "[", ":", "3", ",", ":", ",", ":", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "shp", "=", "list", "(", "frame_t", ".", "shape", ")", "\n", "shp", "[", "2", "]", "=", "3", "\n", "frame", "=", "np", ".", "zeros", "(", "shp", ")", "\n", "frame", "[", ":", ",", ":", ",", ":", "2", "]", "=", "frame_t", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "dsize", "=", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", "\n", "", "elif", "frame_name", "==", "\"ego_obs_mask\"", ":", "\n", "                ", "frame_t", "=", "sample", "[", "\"map_struct\"", "]", "[", ":", "3", ",", ":", ",", ":", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "shp", "=", "list", "(", "frame_t", ".", "shape", ")", "\n", "shp", "[", "2", "]", "=", "3", "\n", "canvas", "=", "np", ".", "zeros", "(", "shp", ")", "\n", "canvas", "[", ":", ",", ":", ",", ":", "]", "=", "1", "-", "frame_t", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "canvas", "[", ":", ",", ":", ",", ":", "]", "-=", "frame_t", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "canvas", "=", "np", ".", "clip", "(", "canvas", ",", "0.0", ",", "1.0", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "canvas", ",", "dsize", "=", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", "\n", "", "else", ":", "\n", "                ", "frame", "=", "sample", "[", "frame_name", "]", "[", "0", ",", ":", "3", ",", ":", ",", ":", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "if", "frame_name", "in", "[", "\"image\"", ",", "\"v_dist_r_inner\"", "]", ":", "\n", "                ", "frame", "-=", "frame", ".", "min", "(", ")", "\n", "frame", "=", "frame", "/", "(", "frame", ".", "max", "(", ")", "+", "1e-9", ")", "\n", "", "else", ":", "\n", "                ", "frame", "-=", "np", ".", "percentile", "(", "frame", ",", "0", ")", "\n", "frame", "/=", "(", "np", ".", "percentile", "(", "frame", ",", "95", ")", "+", "1e-9", ")", "\n", "frame", "=", "np", ".", "clip", "(", "frame", ",", "0.0", ",", "1.0", ")", "\n", "", "if", "scale", "!=", "1", ":", "\n", "                ", "frame", "=", "self", ".", "presenter", ".", "scale_image", "(", "frame", ",", "scale", ")", "\n", "", "frames", ".", "append", "(", "frame", ")", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.action_visualization": [[120, 128], ["numpy.ones", "rollout_vizualizer.RolloutVisualizer.presenter.draw_action", "frames.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "action_visualization", "(", "self", ",", "env_id", ",", "seg_idx", ",", "rollout", ",", "domain", ",", "frame_name", "=", "\"action\"", ")", ":", "\n", "        ", "frames", "=", "[", "]", "\n", "for", "sample", "in", "rollout", ":", "\n", "            ", "action", "=", "sample", "[", "frame_name", "]", "\n", "frame", "=", "np", ".", "ones", "(", "(", "200", ",", "200", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "presenter", ".", "draw_action", "(", "frame", ",", "(", "1", ",", "159", ")", ",", "action", ")", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.overlay_frames": [[129, 132], ["rollout_vizualizer.RolloutVisualizer.presenter.overlaid_image", "zip"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image"], ["", "def", "overlay_frames", "(", "self", ",", "under_frames", ",", "over_frames", ",", "strength", "=", "0.5", ")", ":", "\n", "        ", "overlaid_frames", "=", "[", "self", ".", "presenter", ".", "overlaid_image", "(", "u", ",", "o", ",", "strength", "=", "strength", ")", "for", "u", ",", "o", "in", "zip", "(", "under_frames", ",", "over_frames", ")", "]", "\n", "return", "overlaid_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.top_down_visualization": [[133, 269], ["print", "print", "print", "data_io.env.load_env_img", "numpy.zeros", "rollout_vizualizer.RolloutVisualizer._draw_landmarks", "rollout_vizualizer.RolloutVisualizer.copy", "frames.append", "state.get_drone_pose", "transformations.poses_m_to_px", "poses_px.append", "poses_m.append", "print", "enumerate", "print", "layer_name.endswith", "enumerate", "print", "enumerate", "print", "enumerate", "print", "enumerate", "print", "enumerate", "enumerate", "numpy.flipud", "numpy.clip", "rollout_vizualizer.RolloutVisualizer.presenter.draw_prob_bars", "numpy.maximum.transpose", "numpy.flipud", "rollout_vizualizer.RolloutVisualizer.presenter.overlay_text", "rollout_vizualizer.RolloutVisualizer.presenter.draw_trajectory", "rollout_vizualizer.RolloutVisualizer.presenter.draw_drone", "rollout_vizualizer.RolloutVisualizer.presenter.draw_observability", "rollout_vizualizer.RolloutVisualizer.presenter.show_image", "sample[].transpose", "numpy.percentile", "numpy.percentile", "rollout_vizualizer.RolloutVisualizer.presenter.blend_image", "rollout_vizualizer.RolloutVisualizer.presenter.overlaid_image", "len", "numpy.clip", "numpy.maximum.astype", "numpy.tile", "numpy.maximum", "frames[].max", "rollout_vizualizer.RolloutVisualizer.presenter.blend_image", "rollout_vizualizer.RolloutVisualizer.presenter.prep_image", "rollout_vizualizer.RolloutVisualizer.max", "rollout_vizualizer.RolloutVisualizer.min", "numpy.percentile", "int", "int", "len", "numpy.percentile", "numpy.percentile"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer._draw_landmarks", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_drone_pose", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_prob_bars", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_text", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_trajectory", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_drone", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_observability", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.blend_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.blend_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image"], ["", "def", "top_down_visualization", "(", "self", ",", "env_id", ",", "seg_idx", ",", "rollout", ",", "domain", ",", "params", ")", ":", "\n", "        ", "fd", "=", "domain", "==", "\"real\"", "\n", "obl", "=", "domain", "in", "[", "\"simulator\"", ",", "\"sim\"", "]", "\n", "print", "(", "domain", ",", "obl", ")", "\n", "if", "params", "[", "\"draw_topdown\"", "]", ":", "\n", "            ", "bg_image", "=", "load_env_img", "(", "env_id", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ",", "real_drone", "=", "True", "if", "domain", "==", "\"real\"", "else", "False", ",", "origin_bottom_left", "=", "obl", ",", "flipdiag", "=", "False", ",", "alpha", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "bg_image", "=", "np", ".", "zeros", "(", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ",", "3", ")", ")", "\n", "", "if", "params", "[", "\"draw_landmarks\"", "]", ":", "\n", "            ", "bg_image", "=", "self", ".", "_draw_landmarks", "(", "bg_image", ",", "env_id", ")", "\n", "\n", "# Initialize stuff", "\n", "", "frames", "=", "[", "]", "\n", "poses_m", "=", "[", "]", "\n", "poses_px", "=", "[", "]", "\n", "for", "sample", "in", "rollout", ":", "\n", "            ", "sample_image", "=", "bg_image", ".", "copy", "(", ")", "\n", "frames", ".", "append", "(", "sample_image", ")", "\n", "state", "=", "sample", "[", "\"state\"", "]", "\n", "pose_m", "=", "state", ".", "get_drone_pose", "(", ")", "\n", "pose_px", "=", "poses_m_to_px", "(", "pose_m", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ",", "self", ".", "world_size_m", ",", "batch_dim", "=", "False", ")", "\n", "poses_px", ".", "append", "(", "pose_px", ")", "\n", "poses_m", ".", "append", "(", "pose_m", ")", "\n", "\n", "", "instruction", "=", "rollout", "[", "0", "]", "[", "\"instruction\"", "]", "\n", "print", "(", "\"Instruction: \"", ")", "\n", "print", "(", "instruction", ")", "\n", "\n", "# Draw visitation distributions if requested:", "\n", "if", "params", "[", "\"include_vdist\"", "]", ":", "\n", "            ", "print", "(", "\"Drawing visitation distributions\"", ")", "\n", "if", "params", "[", "\"ego_vdist\"", "]", ":", "\n", "                ", "inner_key", "=", "\"v_dist_r_inner\"", "\n", "outer_key", "=", "\"v_dist_r_outer\"", "\n", "", "else", ":", "\n", "                ", "inner_key", "=", "\"v_dist_w_inner\"", "\n", "outer_key", "=", "\"v_dist_w_outer\"", "\n", "", "for", "i", ",", "sample", "in", "enumerate", "(", "rollout", ")", ":", "\n", "                ", "v_dist_w_inner", "=", "np", ".", "flipud", "(", "sample", "[", "inner_key", "]", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", ")", "\n", "# Expand range of each channel separately so that stop entropy doesn't affect how trajectory looks", "\n", "v_dist_w_inner", "[", ":", ",", ":", ",", "0", "]", "/=", "(", "np", ".", "percentile", "(", "v_dist_w_inner", "[", ":", ",", ":", ",", "0", "]", ",", "99.5", ")", "+", "1e-9", ")", "\n", "v_dist_w_inner", "[", ":", ",", ":", ",", "1", "]", "/=", "(", "np", ".", "percentile", "(", "v_dist_w_inner", "[", ":", ",", ":", ",", "1", "]", ",", "99.5", ")", "+", "1e-9", ")", "\n", "v_dist_w_inner", "=", "np", ".", "clip", "(", "v_dist_w_inner", ",", "0.0", ",", "1.0", ")", "\n", "v_dist_w_outer", "=", "sample", "[", "outer_key", "]", "\n", "if", "bg_image", ".", "max", "(", ")", "-", "bg_image", ".", "min", "(", ")", ">", "1e-9", ":", "\n", "                    ", "f", "=", "self", ".", "presenter", ".", "blend_image", "(", "frames", "[", "i", "]", ",", "v_dist_w_inner", ")", "\n", "", "else", ":", "\n", "                    ", "f", "=", "self", ".", "presenter", ".", "overlaid_image", "(", "frames", "[", "i", "]", ",", "v_dist_w_inner", ",", "strength", "=", "1.0", ")", "\n", "", "f", "=", "self", ".", "presenter", ".", "draw_prob_bars", "(", "f", ",", "v_dist_w_outer", ")", "\n", "frames", "[", "i", "]", "=", "f", "\n", "\n", "", "", "if", "params", "[", "\"include_layer\"", "]", ":", "\n", "            ", "layer_name", "=", "params", "[", "\"include_layer\"", "]", "\n", "print", "(", "f\"Drawing first 3 channels of layer {layer_name}\"", ")", "\n", "accumulate", "=", "False", "\n", "invert", "=", "False", "\n", "gray", "=", "False", "\n", "if", "layer_name", "==", "\"M_W_accum\"", ":", "\n", "                ", "accumulate", "=", "True", "\n", "layer_name", "=", "\"M_W\"", "\n", "", "if", "layer_name", "==", "\"M_W_accum_inv\"", ":", "\n", "                ", "invert", "=", "True", "\n", "accumulate", "=", "True", "\n", "layer_name", "=", "\"M_W\"", "\n", "\n", "", "if", "layer_name", ".", "endswith", "(", "\"_Gray\"", ")", ":", "\n", "                ", "gray", "=", "True", "\n", "layer_name", "=", "layer_name", "[", ":", "-", "len", "(", "\"_Gray\"", ")", "]", "\n", "\n", "", "for", "i", ",", "sample", "in", "enumerate", "(", "rollout", ")", ":", "\n", "                ", "layer", "=", "sample", "[", "layer_name", "]", "\n", "if", "len", "(", "layer", ".", "shape", ")", "==", "4", ":", "\n", "                    ", "layer", "=", "layer", "[", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "", "layer", "=", "layer", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "layer", "=", "np", ".", "flipud", "(", "layer", ")", "\n", "if", "layer_name", "in", "[", "\"S_W\"", ",", "\"F_W\"", "]", ":", "\n", "                    ", "layer", "=", "layer", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "else", ":", "\n", "                    ", "layer", "=", "layer", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "if", "layer_name", "in", "[", "\"S_W\"", ",", "\"R_W\"", ",", "\"F_W\"", "]", ":", "\n", "                    ", "if", "gray", ":", "\n", "                        ", "layer", "-=", "np", ".", "percentile", "(", "layer", ",", "1", ")", "\n", "layer", "/=", "(", "np", ".", "percentile", "(", "layer", ",", "99", ")", "+", "1e-9", ")", "\n", "", "else", ":", "\n", "                        ", "layer", "/=", "(", "np", ".", "percentile", "(", "layer", ",", "97", ")", "+", "1e-9", ")", "\n", "", "layer", "=", "np", ".", "clip", "(", "layer", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "if", "layer_name", "in", "[", "\"M_W\"", "]", ":", "\n", "# Having a 0-1 mask does not encode properly with the codec. Add a bit of imperceptible gaussian noise.", "\n", "                    ", "layer", "=", "layer", ".", "astype", "(", "np", ".", "float32", ")", "\n", "layer", "=", "np", ".", "tile", "(", "layer", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "if", "accumulate", "and", "i", ">", "0", ":", "\n", "                    ", "layer", "=", "np", ".", "maximum", "(", "layer", ",", "prev_layer", ")", "\n", "\n", "", "prev_layer", "=", "layer", "\n", "if", "invert", ":", "\n", "                    ", "layer", "=", "1", "-", "layer", "\n", "", "if", "frames", "[", "i", "]", ".", "max", "(", ")", ">", "0.01", ":", "\n", "                    ", "frames", "[", "i", "]", "=", "self", ".", "presenter", ".", "blend_image", "(", "frames", "[", "i", "]", ",", "layer", "[", ":", ",", ":", ",", ":", "3", "]", ")", "\n", "#frames[i] = self.presenter.overlaid_image(frames[i], layer[:, :, :3])", "\n", "", "else", ":", "\n", "                    ", "scale", "=", "(", "int", "(", "self", ".", "resolution", "/", "layer", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "self", ".", "resolution", "/", "layer", ".", "shape", "[", "1", "]", ")", ")", "\n", "frames", "[", "i", "]", "=", "self", ".", "presenter", ".", "prep_image", "(", "layer", "[", ":", ",", ":", ",", ":", "3", "]", ",", "scale", "=", "scale", ")", "\n", "\n", "", "", "", "if", "params", "[", "\"include_instr\"", "]", ":", "\n", "            ", "print", "(", "\"Drawing instruction\"", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "rollout", ")", ":", "\n", "                ", "frames", "[", "i", "]", "=", "self", ".", "presenter", ".", "overlay_text", "(", "frames", "[", "i", "]", ",", "sample", "[", "\"instruction\"", "]", ")", "\n", "\n", "# Draw trajectory history", "\n", "", "", "if", "params", "[", "\"draw_trajectory\"", "]", ":", "\n", "            ", "print", "(", "\"Drawing trajectory\"", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "rollout", ")", ":", "\n", "                ", "history", "=", "poses_px", "[", ":", "i", "+", "1", "]", "\n", "position_history", "=", "[", "h", ".", "position", "for", "h", "in", "history", "]", "\n", "frames", "[", "i", "]", "=", "self", ".", "presenter", ".", "draw_trajectory", "(", "frames", "[", "i", "]", ",", "position_history", ",", "self", ".", "world_size_m", ")", "\n", "\n", "# Draw drone", "\n", "", "", "if", "params", "[", "\"draw_drone\"", "]", ":", "\n", "            ", "print", "(", "\"Drawing drone\"", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "rollout", ")", ":", "\n", "                ", "frames", "[", "i", "]", "=", "self", ".", "presenter", ".", "draw_drone", "(", "frames", "[", "i", "]", ",", "poses_m", "[", "i", "]", ",", "self", ".", "world_size_m", ")", "\n", "\n", "# Draw observability mask:", "\n", "", "", "if", "params", "[", "\"draw_fov\"", "]", ":", "\n", "            ", "print", "(", "\"Drawing FOV\"", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "rollout", ")", ":", "\n", "                ", "frames", "[", "i", "]", "=", "self", ".", "presenter", ".", "draw_observability", "(", "frames", "[", "i", "]", ",", "poses_m", "[", "i", "]", ",", "self", ".", "world_size_m", ",", "84", ")", "\n", "\n", "# Visualize", "\n", "", "", "if", "False", ":", "\n", "            ", "for", "i", ",", "sample", "in", "enumerate", "(", "rollout", ")", ":", "\n", "                ", "self", ".", "presenter", ".", "show_image", "(", "frames", "[", "i", "]", ",", "\"sample_image\"", ",", "scale", "=", "1", ",", "waitkey", "=", "True", ")", "\n", "\n", "", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.start_rollout": [[270, 277], ["data_io.env.load_env_img"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img"], ["", "def", "start_rollout", "(", "self", ",", "env_id", ",", "set_idx", ",", "seg_idx", ",", "domain", ",", "dataset", ",", "suffix", "=", "\"\"", ")", ":", "\n", "        ", "rollout_name", "=", "f\"{env_id}:{set_idx}:{seg_idx}:{domain}:{dataset}:{suffix}\"", "\n", "self", ".", "current_rollout", "=", "{", "\n", "\"top-down\"", ":", "[", "]", "\n", "}", "\n", "self", ".", "current_rollout_name", "=", "rollout_name", "\n", "self", ".", "env_image", "=", "load_env_img", "(", "512", ",", "512", ",", "alpha", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.start_timestep": [[278, 283], ["rollout_vizualizer.RolloutVisualizer.current_rollout[].append", "rollout_vizualizer.RolloutVisualizer.current_rollout[].append", "rollout_vizualizer.RolloutVisualizer.env_image.copy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "start_timestep", "(", "self", ",", "timestep", ")", ":", "\n", "        ", "self", ".", "current_timestep", "=", "timestep", "\n", "# Add top-down view image for the new timestep", "\n", "self", ".", "current_rollout", "[", "\"top-down\"", "]", ".", "append", "(", ")", "\n", "self", ".", "current_rollout", "[", "\"top-down\"", "]", ".", "append", "(", "self", ".", "env_image", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.set_drone_state": [[284, 292], ["state.get_cam_pose", "rollout_vizualizer.RolloutVisualizer.presenter.draw_drone", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_cam_pose", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.draw_drone", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "set_drone_state", "(", "self", ",", "timestep", ",", "state", ")", ":", "\n", "        ", "drone_pose", "=", "state", ".", "get_cam_pose", "(", ")", "\n", "\n", "# Draw drone sprite on top_down image", "\n", "tdimg", "=", "self", ".", "current_rollout", "[", "\"top-down\"", "]", "[", "timestep", "]", "\n", "tdimg_n", "=", "self", ".", "presenter", ".", "draw_drone", "(", "tdimg", ",", "drone_pose", ",", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "current_rollout", "[", "\"top-down\"", "]", "[", "timestep", "]", "=", "tdimg_n", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dummy_summary_writer.DummySummaryWriter.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", "=", "\"runs\"", ",", "restore", "=", "False", ",", "spy", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dummy_summary_writer.DummySummaryWriter.add_scalar": [[6, 8], ["None"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "tag", ",", "scalar_value", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dummy_summary_writer.DummySummaryWriter.add_dict": [[9, 11], ["None"], "methods", ["None"], ["", "def", "add_dict", "(", "self", ",", "prefix", ",", "dict", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.t2s": [[6, 11], ["gtts.gTTS", "os.path.join", "os.makedirs", "gtts.gTTS.save", "data_io.paths.get_tmp_dir", "data_io.paths.get_tmp_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_tmp_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_tmp_dir"], ["def", "t2s", "(", "text", ")", ":", "\n", "    ", "tts", "=", "gTTS", "(", "text", "=", "text", ",", "lang", "=", "\"en\"", ")", "\n", "mp3path", "=", "os", ".", "path", ".", "join", "(", "get_tmp_dir", "(", ")", ",", "\"text.mp3\"", ")", "\n", "os", ".", "makedirs", "(", "get_tmp_dir", "(", ")", ",", "exist_ok", "=", "True", ")", "\n", "tts", ".", "save", "(", "mp3path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.say": [[12, 15], ["text2speech.t2s", "text2speech.repeat"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.t2s", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat"], ["", "def", "say", "(", "text", ",", "dontblock", "=", "False", ")", ":", "\n", "    ", "t2s", "(", "text", ")", "\n", "repeat", "(", "dontblock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat": [[16, 20], ["os.path.join", "open", "subprocess.Popen", "data_io.paths.get_tmp_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_tmp_dir"], ["", "def", "repeat", "(", "dontblock", "=", "False", ")", ":", "\n", "    ", "mp3path", "=", "os", ".", "path", ".", "join", "(", "get_tmp_dir", "(", ")", ",", "\"text.mp3\"", ")", "\n", "FNULL", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "subprocess", ".", "Popen", "(", "\"mpg321 \"", "+", "mp3path", "+", "(", "\" &\"", "if", "dontblock", "else", "\"\"", ")", ",", "shell", "=", "True", ",", "stderr", "=", "FNULL", ",", "stdout", "=", "FNULL", ")", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error": [[11, 13], ["print", "str"], "function", ["None"], ["", "def", "print_error", "(", "obj", ")", ":", "\n", "    ", "print", "(", "TerminalColors", ".", "RED", "+", "str", "(", "obj", ")", "+", "TerminalColors", ".", "ENDC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_warning": [[15, 17], ["print", "str"], "function", ["None"], ["", "def", "print_warning", "(", "obj", ")", ":", "\n", "    ", "print", "(", "TerminalColors", ".", "ORANGE", "+", "str", "(", "obj", ")", "+", "TerminalColors", ".", "ENDC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_good": [[19, 21], ["print", "str"], "function", ["None"], ["", "def", "print_good", "(", "obj", ")", ":", "\n", "    ", "print", "(", "TerminalColors", ".", "GREEN", "+", "str", "(", "obj", ")", "+", "TerminalColors", ".", "ENDC", ")", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.__init__": [[14, 38], ["tensorboardX.SummaryWriter.__init__", "os.path.split", "os.path.join", "os.makedirs", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "open", "json.load", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", "=", "\"runs\"", ",", "restore", "=", "False", ",", "spy", "=", "False", ")", ":", "\n", "        ", "super", "(", "LoggingSummaryWriter", ",", "self", ")", ".", "__init__", "(", "log_dir", ")", "\n", "spl", "=", "os", ".", "path", ".", "split", "(", "log_dir", ")", "\n", "self", ".", "dirname", "=", "spl", "[", "0", "]", "\n", "self", ".", "runname", "=", "spl", "[", "1", "]", "\n", "self", ".", "spy", "=", "spy", "\n", "\n", "self", ".", "spy_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dirname", "+", "\"_spy\"", ",", "self", ".", "runname", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "spy_dirname", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "value_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "spy_dirname", ",", "\"values.json\"", ")", "\n", "self", ".", "index_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "spy_dirname", ",", "\"indices.json\"", ")", "\n", "\n", "self", ".", "indices", "=", "{", "}", "\n", "self", ".", "values", "=", "{", "}", "\n", "\n", "if", "restore", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "value_file", ")", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "index_file", ")", ":", "\n", "                ", "with", "open", "(", "self", ".", "value_file", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                    ", "self", ".", "values", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "with", "open", "(", "self", ".", "index_file", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                    ", "self", ".", "indices", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "", "", "self", ".", "call", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar": [[39, 42], ["super().add_scalar", "logging_summary_writer.LoggingSummaryWriter.spy_scalar"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.spy_scalar"], ["", "def", "add_scalar", "(", "self", ",", "tag", ",", "scalar_value", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "super", "(", "LoggingSummaryWriter", ",", "self", ")", ".", "add_scalar", "(", "tag", ",", "scalar_value", ",", "global_step", ")", "\n", "self", ".", "spy_scalar", "(", "tag", ",", "scalar_value", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.spy_scalar": [[43, 59], ["logging_summary_writer.LoggingSummaryWriter.values[].append", "logging_summary_writer.LoggingSummaryWriter.indices[].append", "logging_summary_writer.LoggingSummaryWriter.save_spied_values", "logging_summary_writer.LoggingSummaryWriter.save_spied_values"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.save_spied_values", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.save_spied_values"], ["", "def", "spy_scalar", "(", "self", ",", "tag", ",", "scalar_value", ",", "step", ")", ":", "\n", "        ", "if", "not", "self", ".", "spy", ":", "\n", "            ", "return", "\n", "", "if", "tag", "not", "in", "self", ".", "values", ":", "\n", "            ", "self", ".", "values", "[", "tag", "]", "=", "[", "]", "\n", "self", ".", "indices", "[", "tag", "]", "=", "[", "]", "\n", "", "self", ".", "values", "[", "tag", "]", ".", "append", "(", "scalar_value", ")", "\n", "self", ".", "indices", "[", "tag", "]", ".", "append", "(", "step", ")", "\n", "\n", "self", ".", "call", "+=", "1", "\n", "if", "self", ".", "call", "<", "10000", ":", "\n", "            ", "if", "self", ".", "call", "%", "100", "==", "0", ":", "\n", "                ", "self", ".", "save_spied_values", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "call", "%", "1000", "==", "0", ":", "\n", "                ", "self", ".", "save_spied_values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict": [[60, 67], ["dict.items", "hasattr", "logging_summary_writer.LoggingSummaryWriter.add_scalar", "type", "value.cpu().item.cpu().item.cpu().item", "value.cpu().item.cpu().item.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "", "", "def", "add_dict", "(", "self", ",", "prefix", ",", "dict", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "value", ")", "==", "Variable", ":", "\n", "                ", "value", "=", "value", ".", "data", "\n", "", "if", "hasattr", "(", "value", ",", "\"cuda\"", ")", ":", "\n", "                ", "value", "=", "value", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "self", ".", "add_scalar", "(", "prefix", "+", "\"/\"", "+", "key", ",", "value", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.save_spied_values": [[68, 73], ["open", "json.dump", "open", "json.dump"], "methods", ["None"], ["", "", "def", "save_spied_values", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "index_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "indices", ",", "fp", ")", "\n", "", "with", "open", "(", "self", ".", "value_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "values", ",", "fp", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerDummy.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "torch_sync", "=", "False", ",", "print", "=", "True", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerDummy.reset": [[17, 19], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerDummy.tick": [[20, 22], ["None"], "methods", ["None"], ["", "def", "tick", "(", "self", ",", "key", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerDummy.loop": [[23, 25], ["None"], "methods", ["None"], ["", "def", "loop", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerDummy.print_stats": [[26, 28], ["None"], "methods", ["None"], ["", "def", "print_stats", "(", "self", ",", "every_n_times", "=", "1", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.__init__": [[30, 43], ["utils.GS_timing.micros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "torch_sync", "=", "False", ",", "print", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        When debugging GPU code, torch_sync must be true, because GPU and CPU computation is asynchronous\n        :param torch_sync: If true, will call cuda synchronize.\n        :param print: If true, will print stats when print_stats is called. Pass False to disable output for release code\n        \"\"\"", "\n", "self", ".", "time", "=", "micros", "(", ")", "\n", "self", ".", "loops", "=", "0", "\n", "self", ".", "times", "=", "{", "}", "\n", "self", ".", "avg_times", "=", "{", "}", "\n", "self", ".", "sync", "=", "torch_sync", "\n", "self", ".", "print", "=", "print", "\n", "self", ".", "print_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.reset": [[44, 47], ["utils.GS_timing.micros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "time", "=", "micros", "(", ")", "\n", "self", ".", "times", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.tick": [[48, 58], ["utils.GS_timing.micros", "torch.cuda.synchronize"], "methods", ["None"], ["", "def", "tick", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ".", "times", ":", "\n", "            ", "self", ".", "times", "[", "key", "]", "=", "0", "\n", "\n", "", "if", "self", ".", "sync", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "now", "=", "micros", "(", ")", "\n", "self", ".", "times", "[", "key", "]", "+=", "now", "-", "self", ".", "time", "\n", "self", ".", "time", "=", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop": [[59, 63], ["simple_profiler.SimpleProfilerReal.times.items"], "methods", ["None"], ["", "def", "loop", "(", "self", ")", ":", "\n", "        ", "self", ".", "loops", "+=", "1", "\n", "for", "key", ",", "time", "in", "self", ".", "times", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "avg_times", "[", "key", "]", "=", "self", ".", "times", "[", "key", "]", "/", "self", ".", "loops", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats": [[64, 78], ["len", "print", "pprint.pprint", "simple_profiler.SimpleProfilerReal.avg_times.items", "print", "print", "pprint.pprint"], "methods", ["None"], ["", "", "def", "print_stats", "(", "self", ",", "every_n_times", "=", "1", ")", ":", "\n", "        ", "self", ".", "print_time", "+=", "1", "\n", "if", "self", ".", "print", "and", "self", ".", "print_time", "%", "every_n_times", "==", "0", ":", "\n", "            ", "total_time", "=", "0", "\n", "if", "len", "(", "self", ".", "avg_times", ")", ">", "0", ":", "\n", "                ", "print", "(", "\"Avg times per loop: \"", ")", "\n", "pprint", ".", "pprint", "(", "self", ".", "avg_times", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "avg_times", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "!=", "\"out\"", ":", "\n", "                        ", "total_time", "+=", "v", "\n", "", "", "print", "(", "f\"Total avg loop time: {total_time}\"", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Cumulative times: \"", ")", "\n", "pprint", ".", "pprint", "(", "self", ".", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.imresize.imresize": [[5, 7], ["numpy.array", "PIL.Image.fromarray().resize", "PIL.Image.fromarray"], "function", ["None"], ["def", "imresize", "(", "arr", ",", "size", ",", "interp", ",", "mode", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "arr", ")", ".", "resize", "(", "size", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.objectview.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_zip": [[6, 21], ["dict.items", "outdict[].append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "dict_zip", "(", "list_of_dicts", ")", ":", "\n", "    ", "\"\"\"\n    Zip function for dicts!\n    Turns a list of dictionaries into a dictionary of lists,\n    where each list contains all the elements from the given key in the original list of dicts\n    :param list_of_dicts:\n    :return:\n    \"\"\"", "\n", "outdict", "=", "{", "}", "\n", "for", "dict", "in", "list_of_dicts", ":", "\n", "        ", "for", "key", ",", "item", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "outdict", ":", "\n", "                ", "outdict", "[", "key", "]", "=", "[", "]", "\n", "", "outdict", "[", "key", "]", ".", "append", "(", "item", ")", "\n", "", "", "return", "outdict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_map": [[23, 44], ["dict.items", "f", "f", "print"], "function", ["None"], ["", "def", "dict_map", "(", "dict", ",", "f", ",", "keys", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Applies the given function f to each element in the dict and returns the resulting dict\n    :param dict: dict with items as arguments for f\n    :param f: function to apply to each element in dict\n    :param keys: (optional) list of keys if you'd like to only map f on a set of keys not all of them\n    :return: dict of key:ret, where ret = f(dict[key])\n    \"\"\"", "\n", "out_dict", "=", "dict", "\n", "if", "keys", "is", "not", "None", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "item", "=", "dict", "[", "key", "]", "\n", "try", ":", "\n", "                ", "out_dict", "[", "key", "]", "=", "f", "(", "item", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"EXCEPTION! \"", ",", "e", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "key", ",", "item", "in", "dict", ".", "items", "(", ")", ":", "\n", "#print(\"map: \", key)", "\n", "            ", "out_dict", "[", "key", "]", "=", "f", "(", "item", ")", "\n", "", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_cross_map": [[46, 60], ["f"], "function", ["None"], ["", "def", "dict_cross_map", "(", "dict_a", ",", "dict_b", ",", "f", ")", ":", "\n", "    ", "\"\"\"\n    For each key in dict_a and dict_b, runs f(dict_a[key], dict_a[key]) and keeps the result in out_dict[key].\n    Returns out_dict\n    :param dict_a:\n    :param dict_b:\n    :param f:\n    :return:\n    \"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "for", "key", "in", "dict_a", ":", "\n", "        ", "if", "key", "in", "dict_b", ":", "\n", "            ", "out_dict", "[", "key", "]", "=", "f", "(", "dict_a", "[", "key", "]", ",", "dict_b", "[", "key", "]", ")", "\n", "", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dictlist_append": [[62, 74], ["dict2.items", "dict1[].append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "dictlist_append", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "\"\"\"\n    For each item2=dict2[key], appends it to dict1[key]\n    :param dict1: dict of lists\n    :param dict2: dict of items\n    :return:\n    \"\"\"", "\n", "for", "key", ",", "item", "in", "dict2", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "dict1", ":", "\n", "            ", "dict1", "[", "key", "]", "=", "[", "]", "\n", "", "dict1", "[", "key", "]", ".", "append", "(", "item", ")", "\n", "", "return", "dict1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_slice": [[76, 88], ["None"], "function", ["None"], ["", "def", "dict_slice", "(", "dict", ",", "keys", ")", ":", "\n", "    ", "\"\"\"\n    Return a filtered dict that only retains the\n    :param dict:\n    :param keys:\n    :return:\n    \"\"\"", "\n", "dict_out", "=", "{", "}", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "key", "in", "dict", ":", "\n", "            ", "dict_out", "[", "key", "]", "=", "dict", "[", "key", "]", "\n", "", "", "return", "dict_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge": [[90, 106], ["dict1.copy", "dict2.items", "isinstance", "isinstance", "dict_tools.dict_merge"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge"], ["", "def", "dict_merge", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "\"\"\"\n    Recursively merges dict1 and dict2 such that any values in dict2 override values in dict1\n    :param dict1:\n    :param dict2:\n    :return: resulting merged dictionary\n    \"\"\"", "\n", "outdict", "=", "dict1", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "dict2", ".", "items", "(", ")", ":", "\n", "# If dict1 has this key and it's also a dictionary, do a recursive merge", "\n", "        ", "if", "k", "in", "dict1", "and", "isinstance", "(", "dict1", "[", "k", "]", ",", "dict", ")", "and", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "outdict", "[", "k", "]", "=", "dict_merge", "(", "dict1", "[", "k", "]", ",", "v", ")", "\n", "# Otherwise just overwrite the key in dict1", "\n", "", "else", ":", "\n", "            ", "outdict", "[", "k", "]", "=", "dict2", "[", "k", "]", "\n", "", "", "return", "outdict", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.GS_timing.delay": [[118, 124], ["millis", "millis"], "function", ["None"], ["", "", "def", "delay", "(", "delay_ms", ")", ":", "\n", "    ", "\"delay for delay_ms milliseconds (ms)\"", "\n", "t_start", "=", "millis", "(", ")", "\n", "while", "(", "millis", "(", ")", "-", "t_start", "<", "delay_ms", ")", ":", "\n", "      ", "pass", "#do nothing", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.GS_timing.delayMicroseconds": [[125, 131], ["micros", "micros"], "function", ["None"], ["", "def", "delayMicroseconds", "(", "delay_us", ")", ":", "\n", "    ", "\"delay for delay_us microseconds (us)\"", "\n", "t_start", "=", "micros", "(", ")", "\n", "while", "(", "micros", "(", ")", "-", "t_start", "<", "delay_us", ")", ":", "\n", "      ", "pass", "#do nothing", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.paths.condense_path": [[5, 23], ["out_path.append", "numpy.asarray", "len", "numpy.asarray", "numpy.linalg.norm", "out_path.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "condense_path", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    The ground truth trajectories often include multiple subsequent points at the same location.\n    This function takes a path and returns a path with only unique positions in the original path\n    :param path:\n    :return:\n    \"\"\"", "\n", "out_path", "=", "[", "]", "\n", "if", "len", "(", "path", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "out_path", ")", "\n", "\n", "", "prev_point", "=", "path", "[", "0", "]", "\n", "out_path", ".", "append", "(", "prev_point", ")", "\n", "for", "point", "in", "path", ":", "\n", "        ", "if", "np", ".", "linalg", ".", "norm", "(", "point", "-", "prev_point", ")", ">", "1e-9", ":", "\n", "            ", "out_path", ".", "append", "(", "point", ")", "\n", "", "prev_point", "=", "point", "\n", "", "return", "np", ".", "asarray", "(", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.paths.condense_path_with_mapping": [[25, 48], ["out_path.append", "enumerate", "len", "numpy.asarray", "numpy.asarray", "numpy.linalg.norm", "out_path.append", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "condense_path_with_mapping", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    The ground truth trajectories often include multiple subsequent points at the same location.\n    This function takes a path and returns a path with only unique positions in the original path\n    It also returns a map (dict) from an index in the previous path to the corresponding index in the new path\n    :param path:\n    :return:\n    \"\"\"", "\n", "out_path", "=", "[", "]", "\n", "out_map", "=", "{", "}", "\n", "if", "len", "(", "path", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "out_path", ")", ",", "out_map", "\n", "\n", "", "prev_point", "=", "path", "[", "0", "]", "\n", "out_path", ".", "append", "(", "prev_point", ")", "\n", "out_map", "[", "0", "]", "=", "0", "\n", "\n", "for", "i", ",", "point", "in", "enumerate", "(", "path", ")", ":", "\n", "        ", "if", "np", ".", "linalg", ".", "norm", "(", "point", "-", "prev_point", ")", ">", "1e-9", ":", "\n", "            ", "out_path", ".", "append", "(", "point", ")", "\n", "", "out_map", "[", "i", "]", "=", "len", "(", "out_path", ")", "-", "1", "\n", "prev_point", "=", "point", "\n", "", "return", "np", ".", "asarray", "(", "out_path", ")", ",", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.paths.get_closest_point_in_path": [[50, 54], ["scipy.spatial.distance.cdist", "numpy.array().reshape", "numpy.argsort", "distance.cdist.flatten", "numpy.array"], "function", ["None"], ["", "def", "get_closest_point_in_path", "(", "path", ",", "pos", ")", ":", "\n", "    ", "distance_matrix", "=", "distance", ".", "cdist", "(", "path", ",", "np", ".", "array", "(", "pos", ")", ".", "reshape", "(", "1", ",", "2", ")", ")", "\n", "counter", "=", "np", ".", "argsort", "(", "distance_matrix", ".", "flatten", "(", ")", ")", "[", "0", "]", "\n", "return", "counter", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.keyboard.MonitorSuper.__init__": [[17, 24], ["pykeyboard.PyKeyboardEvent.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "PyKeyboardEvent", ".", "__init__", "(", "self", ")", "\n", "self", ".", "forward", "=", "False", "\n", "self", ".", "backward", "=", "False", "\n", "self", ".", "left", "=", "False", "\n", "self", ".", "right", "=", "False", "\n", "self", ".", "current_action", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.keyboard.MonitorSuper.reset": [[25, 27], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_action", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.keyboard.MonitorSuper.tap": [[28, 56], ["None"], "methods", ["None"], ["", "def", "tap", "(", "self", ",", "keycode", ",", "c", ",", "press", ")", ":", "\n", "        ", "'''Monitor Super key.'''", "\n", "if", "c", "in", "KEYFUNC", ":", "\n", "#print (KEYFUNC[c])", "\n", "            ", "if", "KEYFUNC", "[", "c", "]", "==", "\"left\"", ":", "\n", "                ", "if", "(", "press", ")", ":", "\n", "                    ", "self", ".", "current_action", "[", "2", "]", "=", "-", "TURN_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_action", "[", "2", "]", "=", "0", "\n", "", "", "if", "KEYFUNC", "[", "c", "]", "==", "\"right\"", ":", "\n", "                ", "if", "press", ":", "\n", "                    ", "self", ".", "current_action", "[", "2", "]", "=", "TURN_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_action", "[", "2", "]", "=", "0", "\n", "", "", "if", "KEYFUNC", "[", "c", "]", "==", "\"forward\"", ":", "\n", "                ", "if", "press", ":", "\n", "                    ", "self", ".", "current_action", "[", "0", "]", "=", "FWD_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_action", "[", "0", "]", "=", "0", "\n", "", "", "if", "KEYFUNC", "[", "c", "]", "==", "\"backward\"", ":", "\n", "                ", "if", "press", ":", "\n", "                    ", "self", ".", "current_action", "[", "0", "]", "=", "-", "FWD_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_action", "[", "0", "]", "=", "0", "\n", "\n", "", "", "if", "KEYFUNC", "[", "c", "]", "==", "\"stop\"", ":", "\n", "                ", "if", "press", ":", "\n", "                    ", "self", ".", "current_action", "[", "3", "]", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.keyboard.KeyTeleop.__init__": [[60, 65], ["keyboard.MonitorSuper", "threading.Thread", "keyboard.KeyTeleop.thread.start"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mon", "=", "MonitorSuper", "(", ")", "\n", "self", ".", "thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "run", ",", "args", "=", "(", ")", ")", "\n", "self", ".", "thread", ".", "daemon", "=", "True", "\n", "self", ".", "thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.keyboard.KeyTeleop.run": [[66, 68], ["keyboard.KeyTeleop.mon.run"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.MonitorRunner.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "mon", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.keyboard.KeyTeleop.get_command": [[69, 71], ["None"], "methods", ["None"], ["", "def", "get_command", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mon", ".", "current_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.keyboard.KeyTeleop.reset": [[72, 74], ["keyboard.KeyTeleop.mon.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "mon", ".", "reset", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.utils.singleton_summary_writer.get": [[6, 12], ["utils.logging_summary_writer.LoggingSummaryWriter", "[].get", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["def", "get", "(", ")", ":", "\n", "    ", "global", "SUMMARY_WRITER", "\n", "if", "SUMMARY_WRITER", "is", "None", ":", "\n", "        ", "run_name", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"run_name\"", ")", "or", "\"untitled_run\"", "\n", "SUMMARY_WRITER", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "\"runs/\"", "+", "run_name", ")", "\n", "", "return", "SUMMARY_WRITER", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.mains.view_collected_data.view_collected_data": [[10, 25], ["data_io.instructions.get_restricted_env_id_lists", "print", "data_io.train_data.load_single_env_supervised_data", "len", "visualization.Presenter().show_sample", "print", "print", "cv2.waitKey", "sample[].get_pos_3d", "sample[].get_rot_euler", "visualization.Presenter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_sample", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_3d", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_rot_euler"], ["def", "view_collected_data", "(", "args", ")", ":", "\n", "    ", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", "args", ".", "max_envs", ")", "\n", "total_len", "=", "0", "\n", "count", "=", "0", "\n", "maxlen", "=", "0", "\n", "for", "env_id", "in", "train_envs", ":", "\n", "        ", "print", "(", "\"Showing env id: \"", ",", "env_id", ")", "\n", "data", "=", "load_single_env_supervised_data", "(", "env_id", ")", "\n", "for", "sample", "in", "data", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_sample", "(", "sample", "[", "\"state\"", "]", ",", "sample", "[", "\"action\"", "]", ",", "0", ",", "sample", "[", "\"instruction\"", "]", ")", "\n", "print", "(", "\"Image size: \"", ",", "sample", "[", "\"state\"", "]", ".", "image", ".", "shape", ")", "\n", "print", "(", "\"Pose: \"", ",", "sample", "[", "\"state\"", "]", ".", "get_pos_3d", "(", ")", ",", "sample", "[", "\"state\"", "]", ".", "get_rot_euler", "(", ")", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "\n", "", "total_len", "+=", "len", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop.show_depth": [[28, 35], ["numpy.mean", "numpy.stack", "np.stack.min", "visualization.Presenter().show_image", "np.stack.max", "visualization.Presenter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["def", "show_depth", "(", "image", ")", ":", "\n", "    ", "grayscale", "=", "np", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "2", ")", "\n", "depth", "=", "image", "[", ":", ",", ":", ",", "3", "]", "\n", "comb", "=", "np", ".", "stack", "(", "[", "grayscale", ",", "grayscale", ",", "depth", "]", ",", "axis", "=", "2", ")", "\n", "comb", "-=", "comb", ".", "min", "(", ")", "\n", "comb", "/=", "(", "comb", ".", "max", "(", ")", "+", "1e-9", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "comb", ",", "\"depth_alignment\"", ",", "torch", "=", "False", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_empty_instruction": [[9, 13], ["open", "fp.write"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "write_empty_instruction", "(", "cls", ")", ":", "\n", "        ", "with", "open", "(", "\"tmp_instr.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_instruction": [[14, 18], ["open", "fp.write"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "write_instruction", "(", "cls", ",", "instruction_str", ")", ":", "\n", "        ", "with", "open", "(", "\"tmp_instr.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "instruction_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_real_instruction": [[19, 23], ["open", "fp.write"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "write_real_instruction", "(", "cls", ",", "instruction_str", ")", ":", "\n", "        ", "with", "open", "(", "\"tmp_instr_real.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "instruction_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.read_instruction_file": [[24, 29], ["open", "fp.readline"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "read_instruction_file", "(", "cls", ")", ":", "\n", "        ", "with", "open", "(", "\"tmp_instr.txt\"", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "instruction", "=", "fp", ".", "readline", "(", ")", "\n", "", "return", "instruction", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.launch_ui": [[30, 34], ["os.path.join", "os.system", "os.path.dirname"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "launch_ui", "(", "cls", ")", ":", "\n", "        ", "python_script", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"interact_ui.py\"", ")", "\n", "os", ".", "system", "(", "\"python3 \"", "+", "python_script", "+", "\" &\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.write_command_file": [[36, 40], ["print", "open", "fp.write", "str"], "function", ["None"], ["", "", "def", "write_command_file", "(", "nl_command", ")", ":", "\n", "    ", "with", "open", "(", "nl_command_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "nl_command", ")", "\n", "", "print", "(", "\"Command <\"", "+", "str", "(", "nl_command", ")", "+", "\"> sent!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.read_suggest_file": [[41, 45], ["open", "fp.read"], "function", ["None"], ["", "def", "read_suggest_file", "(", ")", ":", "\n", "    ", "with", "open", "(", "nl_real_file", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "real_nl", "=", "fp", ".", "read", "(", ")", "\n", "", "return", "real_nl", "or", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop_noinstr.MonitorSuper.__init__": [[28, 36], ["pykeyboard.PyKeyboardEvent.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "PyKeyboardEvent", ".", "__init__", "(", "self", ")", "\n", "self", ".", "forward", "=", "False", "\n", "self", ".", "backward", "=", "False", "\n", "self", ".", "left", "=", "False", "\n", "self", ".", "right", "=", "False", "\n", "\n", "self", ".", "current_vel", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop_noinstr.MonitorSuper.tap": [[37, 61], ["None"], "methods", ["None"], ["", "def", "tap", "(", "self", ",", "keycode", ",", "c", ",", "press", ")", ":", "\n", "        ", "'''Monitor Super key.'''", "\n", "if", "c", "in", "KEYFUNC", ":", "\n", "#print (KEYFUNC[c])", "\n", "            ", "if", "KEYFUNC", "[", "c", "]", "==", "\"left\"", ":", "\n", "                ", "if", "(", "press", ")", ":", "\n", "                    ", "self", ".", "current_vel", "[", "2", "]", "=", "TURN_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_vel", "[", "2", "]", "=", "0", "\n", "", "", "if", "KEYFUNC", "[", "c", "]", "==", "\"right\"", ":", "\n", "                ", "if", "press", ":", "\n", "                    ", "self", ".", "current_vel", "[", "2", "]", "=", "-", "TURN_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_vel", "[", "2", "]", "=", "0", "\n", "", "", "if", "KEYFUNC", "[", "c", "]", "==", "\"forward\"", ":", "\n", "                ", "if", "press", ":", "\n", "                    ", "self", ".", "current_vel", "[", "0", "]", "=", "FWD_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_vel", "[", "0", "]", "=", "0", "\n", "", "", "if", "KEYFUNC", "[", "c", "]", "==", "\"backward\"", ":", "\n", "                ", "if", "press", ":", "\n", "                    ", "self", ".", "current_vel", "[", "0", "]", "=", "-", "FWD_VEL", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_vel", "[", "0", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop_noinstr.KeyTeleop.__init__": [[64, 69], ["key_teleop_noinstr.MonitorSuper", "threading.Thread", "key_teleop_noinstr.KeyTeleop.thread.start"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mon", "=", "MonitorSuper", "(", ")", "\n", "self", ".", "thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "run", ",", "args", "=", "(", ")", ")", "\n", "self", ".", "thread", ".", "daemon", "=", "True", "\n", "self", ".", "thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop_noinstr.KeyTeleop.run": [[70, 72], ["key_teleop_noinstr.KeyTeleop.mon.run"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.MonitorRunner.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "mon", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop_noinstr.KeyTeleop.get_command": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_command", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mon", ".", "current_vel", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop_noinstr.show_depth": [[89, 96], ["numpy.mean", "numpy.stack", "np.stack.min", "visualization.Presenter().show_image", "np.stack.max", "visualization.Presenter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["def", "show_depth", "(", "image", ")", ":", "\n", "    ", "grayscale", "=", "np", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "2", ")", "\n", "depth", "=", "image", "[", ":", ",", ":", ",", "3", "]", "\n", "comb", "=", "np", ".", "stack", "(", "[", "grayscale", ",", "grayscale", ",", "depth", "]", ",", "axis", "=", "2", ")", "\n", "comb", "-=", "comb", ".", "min", "(", ")", "\n", "comb", "/=", "(", "comb", ".", "max", "(", ")", "+", "1e-9", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "comb", ",", "\"depth_alignment\"", ",", "torch", "=", "False", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interactive_demo.rollout_model": [[23, 32], ["env.reset", "model.get_action", "env.step", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step"], ["def", "rollout_model", "(", "model", ",", "env", ",", "env_id", ",", "set_id", ",", "seg_id", ",", "tok_instruction", ")", ":", "\n", "    ", "state", "=", "env", ".", "reset", "(", "seg_id", ")", "\n", "while", "True", ":", "\n", "        ", "action", "=", "model", ".", "get_action", "(", "state", ",", "tok_instruction", ")", "\n", "state", ",", "reward", ",", "done", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "action", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "print", "(", "\"Done!\"", ")", "\n", "break", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interactive_demo.interactive_demo": [[34, 122], ["parameters.initialize_experiment", "mains.interactive.interact_ui.InteractAPI.launch_ui", "drones.airsim_interface.rate.Rate", "pomdp.pomdp_interface.PomdpInterface", "data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "[].get", "[].get", "data_io.models.load_model", "mains.interactive.interact_ui.InteractAPI.write_empty_instruction", "mains.interactive.interact_ui.InteractAPI.write_real_instruction", "mains.interactive.interact_ui.InteractAPI.read_instruction_file", "print", "interact_instructions.values", "enumerate", "print", "interact_instructions.items", "pomdp.pomdp_interface.PomdpInterface.set_environment", "visualization.Presenter", "range", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "len", "print", "mains.interactive.interact_ui.InteractAPI.write_real_instruction", "pomdp.pomdp_interface.PomdpInterface.set_current_segment", "pomdp.pomdp_interface.PomdpInterface.reset", "parameters.parameter_server.get_current_parameters", "mains.interactive.interact_ui.InteractAPI.write_real_instruction", "pomdp.pomdp_interface.PomdpInterface.override_instruction", "data_io.instructions.tokenize_instruction", "pomdp.pomdp_interface.PomdpInterface.reset", "print", "mains.interactive.interact_ui.InteractAPI.write_empty_instruction", "print", "cv2.waitKey", "mains.interactive.interact_ui.InteractAPI.read_instruction_file", "drones.airsim_interface.rate.Rate.sleep", "model.get_action", "pomdp.pomdp_interface.PomdpInterface.step", "visualization.Presenter.show_sample", "print", "mains.interactive.interact_ui.InteractAPI.write_empty_instruction", "print", "pomdp.pomdp_interface.PomdpInterface.reset", "mains.interactive.interact_ui.InteractAPI.write_empty_instruction", "len", "InteractAPI.read_instruction_file.split"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.launch_ui", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_empty_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_real_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.read_instruction_file", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.set_environment", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_real_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_real_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.override_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_empty_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.read_instruction_file", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_sample", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_empty_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.interact_ui.InteractAPI.write_empty_instruction"], ["", "def", "interactive_demo", "(", ")", ":", "\n", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "InteractAPI", ".", "launch_ui", "(", ")", "\n", "\n", "rate", "=", "Rate", "(", "0.1", ")", "\n", "\n", "env", "=", "PomdpInterface", "(", "is_real", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"real_drone\"", "]", ")", "\n", "train_instructions", ",", "dev_instructions", ",", "test_instructions", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "all_instr", "=", "{", "**", "train_instructions", ",", "**", "dev_instructions", ",", "**", "train_instructions", "}", "\n", "token2term", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "\n", "# Run on dev set", "\n", "interact_instructions", "=", "dev_instructions", "\n", "\n", "env_range_start", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"env_range_start\"", ",", "0", ")", "\n", "env_range_end", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"env_range_end\"", ",", "10e10", ")", "\n", "interact_instructions", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "interact_instructions", ".", "items", "(", ")", "if", "env_range_start", "<", "k", "<", "env_range_end", "}", "\n", "\n", "count", "=", "0", "\n", "stuck_count", "=", "0", "\n", "\n", "model", ",", "_", "=", "load_model", "(", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"model\"", "]", ")", "\n", "\n", "InteractAPI", ".", "write_empty_instruction", "(", ")", "\n", "InteractAPI", ".", "write_real_instruction", "(", "\"None\"", ")", "\n", "instruction_str", "=", "InteractAPI", ".", "read_instruction_file", "(", ")", "\n", "print", "(", "\"Initial instruction: \"", ",", "instruction_str", ")", "\n", "\n", "for", "instruction_sets", "in", "interact_instructions", ".", "values", "(", ")", ":", "\n", "        ", "for", "set_idx", ",", "instruction_set", "in", "enumerate", "(", "instruction_sets", ")", ":", "\n", "            ", "env_id", "=", "instruction_set", "[", "'env'", "]", "\n", "env", ".", "set_environment", "(", "env_id", ",", "instruction_set", "[", "\"instructions\"", "]", ")", "\n", "\n", "presenter", "=", "Presenter", "(", ")", "\n", "cumulative_reward", "=", "0", "\n", "for", "seg_idx", "in", "range", "(", "len", "(", "instruction_set", "[", "\"instructions\"", "]", ")", ")", ":", "\n", "\n", "                ", "print", "(", "f\"RUNNING ENV {env_id} SEG {seg_idx}\"", ")", "\n", "\n", "real_instruction_str", "=", "instruction_set", "[", "\"instructions\"", "]", "[", "seg_idx", "]", "[", "\"instruction\"", "]", "\n", "InteractAPI", ".", "write_real_instruction", "(", "real_instruction_str", ")", "\n", "valid_segment", "=", "env", ".", "set_current_segment", "(", "seg_idx", ")", "\n", "if", "not", "valid_segment", ":", "\n", "                    ", "continue", "\n", "", "state", "=", "env", ".", "reset", "(", "seg_idx", ")", "\n", "\n", "keep_going", "=", "True", "\n", "while", "keep_going", ":", "\n", "                    ", "InteractAPI", ".", "write_real_instruction", "(", "real_instruction_str", ")", "\n", "\n", "while", "True", ":", "\n", "                        ", "cv2", ".", "waitKey", "(", "200", ")", "\n", "instruction", "=", "InteractAPI", ".", "read_instruction_file", "(", ")", "\n", "if", "instruction", "==", "\"CMD: Next\"", ":", "\n", "                            ", "print", "(", "\"Advancing\"", ")", "\n", "keep_going", "=", "False", "\n", "InteractAPI", ".", "write_empty_instruction", "(", ")", "\n", "break", "\n", "", "elif", "instruction", "==", "\"CMD: Reset\"", ":", "\n", "                            ", "print", "(", "\"Resetting\"", ")", "\n", "env", ".", "reset", "(", "seg_idx", ")", "\n", "InteractAPI", ".", "write_empty_instruction", "(", ")", "\n", "", "elif", "len", "(", "instruction", ".", "split", "(", "\" \"", ")", ")", ">", "1", ":", "\n", "                            ", "instruction_str", "=", "instruction", "\n", "break", "\n", "\n", "", "", "if", "not", "keep_going", ":", "\n", "                        ", "continue", "\n", "\n", "", "env", ".", "override_instruction", "(", "instruction_str", ")", "\n", "tok_instruction", "=", "tokenize_instruction", "(", "instruction_str", ",", "word2token", ")", "\n", "\n", "state", "=", "env", ".", "reset", "(", "seg_idx", ")", "\n", "print", "(", "\"Executing: f{instruction_str}\"", ")", "\n", "while", "True", ":", "\n", "                        ", "rate", ".", "sleep", "(", ")", "\n", "action", ",", "internals", "=", "model", ".", "get_action", "(", "state", ",", "tok_instruction", ")", "\n", "\n", "state", ",", "reward", ",", "done", ",", "expired", ",", "oob", "=", "env", ".", "step", "(", "action", ")", "\n", "cumulative_reward", "+=", "reward", "\n", "presenter", ".", "show_sample", "(", "state", ",", "action", ",", "reward", ",", "cumulative_reward", ",", "instruction_str", ")", "\n", "#show_depth(state.image)", "\n", "if", "done", ":", "\n", "                            ", "break", "\n", "", "", "InteractAPI", ".", "write_empty_instruction", "(", ")", "\n", "print", "(", "\"Segment finished!\"", ")", "\n", "", "", "", "print", "(", "\"Env finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.__init__": [[17, 28], ["visualization.Presenter", "numpy.zeros", "instruction_display.InstructionDisplay.background.astype", "PIL.ImageFont.truetype", "cv2.namedWindow", "cv2.setWindowProperty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "presenter", "=", "Presenter", "(", ")", "\n", "self", ".", "background", "=", "np", ".", "zeros", "(", "(", "1080", ",", "1920", ",", "3", ")", ")", "\n", "# BGR format", "\n", "self", ".", "background", "[", ":", ",", ":", ",", "0", "]", ",", "self", ".", "background", "[", ":", ",", ":", ",", "1", "]", ",", "self", ".", "background", "[", ":", ",", ":", ",", "2", "]", "=", "0xd7", ",", "0x92", ",", "0x28", "\n", "self", ".", "background", "=", "self", ".", "background", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "font", "=", "ImageFont", ".", "truetype", "(", "\"/usr/share/fonts/truetype/dejavu/DejaVuSans-ExtraLight.ttf\"", ",", "60", ")", "\n", "\n", "if", "not", "NOOP", ":", "\n", "            ", "cv2", ".", "namedWindow", "(", "'Instruction'", ",", "cv2", ".", "WND_PROP_FULLSCREEN", ")", "\n", "cv2", ".", "setWindowProperty", "(", "'Instruction'", ",", "cv2", ".", "WND_PROP_FULLSCREEN", ",", "cv2", ".", "WINDOW_FULLSCREEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.show_instruction": [[29, 52], ["PIL.Image.fromarray", "PIL.ImageDraw.Draw", "instruction_str.replace", "textwrap.wrap", "sum", "print", "zip", "numpy.array", "instruction_display.InstructionDisplay.background.copy", "instruction_str[].upper", "PIL.ImageDraw.Draw.textsize", "PIL.ImageDraw.Draw.text", "cv2.imshow", "cv2.waitKey", "int", "int"], "methods", ["None"], ["", "", "def", "show_instruction", "(", "self", ",", "instruction_str", ")", ":", "\n", "        ", "bg_pil", "=", "Image", ".", "fromarray", "(", "self", ".", "background", ".", "copy", "(", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "bg_pil", ")", "\n", "instruction_str", "=", "instruction_str", "[", "0", "]", ".", "upper", "(", ")", "+", "instruction_str", "[", "1", ":", "]", "\n", "instruction_str", ".", "replace", "(", "\"  \"", ",", "\" \"", ")", "\n", "\n", "lines", "=", "textwrap", ".", "wrap", "(", "instruction_str", ",", "width", "=", "60", ")", "\n", "dims", "=", "[", "draw", ".", "textsize", "(", "line", ",", "self", ".", "font", ")", "for", "line", "in", "lines", "]", "\n", "total_height", "=", "sum", "(", "[", "d", "[", "1", "]", "for", "d", "in", "dims", "]", ")", "\n", "print", "(", "lines", ")", "\n", "\n", "#w, h = draw.textsize(instruction_str, font=self.font)", "\n", "\n", "stack_h", "=", "0", "\n", "for", "line", ",", "dim", "in", "zip", "(", "lines", ",", "dims", ")", ":", "\n", "            ", "draw", ".", "text", "(", "(", "int", "(", "(", "W", "-", "dim", "[", "0", "]", ")", "/", "2", ")", ",", "int", "(", "(", "H", "-", "total_height", "+", "stack_h", ")", "/", "2", ")", ")", ",", "line", ",", "(", "255", ",", "255", ",", "255", ")", ",", "font", "=", "self", ".", "font", ")", "\n", "stack_h", "+=", "dim", "[", "1", "]", "+", "GAP", "\n", "\n", "", "display", "=", "np", ".", "array", "(", "bg_pil", ")", "\n", "\n", "if", "not", "NOOP", ":", "\n", "            ", "cv2", ".", "imshow", "(", "\"Instruction\"", ",", "display", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick": [[53, 57], ["cv2.waitKey"], "methods", ["None"], ["", "", "def", "tick", "(", "self", ")", ":", "\n", "# This has to be called repeatedly to run the CV2 event loop and prevent the display from locking up", "\n", "        ", "if", "not", "NOOP", ":", "\n", "            ", "cv2", ".", "waitKey", "(", "1", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.automatic_demo.rollout_model": [[26, 35], ["env.reset", "model.get_action", "env.step", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step"], ["def", "rollout_model", "(", "model", ",", "env", ",", "env_id", ",", "set_id", ",", "seg_id", ",", "tok_instruction", ")", ":", "\n", "    ", "state", "=", "env", ".", "reset", "(", "seg_id", ")", "\n", "while", "True", ":", "\n", "        ", "action", "=", "model", ".", "get_action", "(", "state", ",", "tok_instruction", ")", "\n", "state", ",", "reward", ",", "done", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "action", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "print", "(", "\"Done!\"", ")", "\n", "break", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.interactive.automatic_demo.automatic_demo": [[43, 119], ["parameters.initialize_experiment", "mains.interactive.instruction_display.InstructionDisplay", "drones.airsim_interface.rate.Rate", "pomdp.pomdp_interface.PomdpInterface", "data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "[].get", "[].get", "data_io.models.load_model", "interact_instructions.values", "interact_instructions.items", "enumerate", "print", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "pomdp.pomdp_interface.PomdpInterface.set_environment", "visualization.Presenter", "range", "parameters.parameter_server.get_current_parameters", "len", "print", "mains.interactive.instruction_display.InstructionDisplay.show_instruction", "pomdp.pomdp_interface.PomdpInterface.set_current_segment", "pomdp.pomdp_interface.PomdpInterface.reset", "range", "pomdp.pomdp_interface.PomdpInterface.reset", "print", "range", "mains.interactive.instruction_display.InstructionDisplay.show_instruction", "mains.interactive.instruction_display.InstructionDisplay.tick", "time.sleep", "data_io.instructions.tokenize_instruction", "mains.interactive.instruction_display.InstructionDisplay.tick", "drones.airsim_interface.rate.Rate.sleep", "model.get_action", "pomdp.pomdp_interface.PomdpInterface.step", "mains.interactive.instruction_display.InstructionDisplay.tick", "time.sleep", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.set_environment", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.show_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.show_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["def", "automatic_demo", "(", ")", ":", "\n", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "instruction_display", "=", "InstructionDisplay", "(", ")", "\n", "\n", "rate", "=", "Rate", "(", "0.1", ")", "\n", "\n", "env", "=", "PomdpInterface", "(", "is_real", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"real_drone\"", "]", ")", "\n", "train_instructions", ",", "dev_instructions", ",", "test_instructions", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "all_instr", "=", "{", "**", "train_instructions", ",", "**", "dev_instructions", ",", "**", "train_instructions", "}", "\n", "token2term", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "\n", "# Run on dev set", "\n", "interact_instructions", "=", "dev_instructions", "\n", "\n", "env_range_start", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"env_range_start\"", ",", "0", ")", "\n", "env_range_end", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"env_range_end\"", ",", "10e10", ")", "\n", "interact_instructions", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "interact_instructions", ".", "items", "(", ")", "if", "env_range_start", "<", "k", "<", "env_range_end", "}", "\n", "\n", "model", ",", "_", "=", "load_model", "(", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"model\"", "]", ")", "\n", "\n", "# Loop over the select few examples", "\n", "while", "True", ":", "\n", "\n", "        ", "for", "instruction_sets", "in", "interact_instructions", ".", "values", "(", ")", ":", "\n", "            ", "for", "set_idx", ",", "instruction_set", "in", "enumerate", "(", "instruction_sets", ")", ":", "\n", "                ", "env_id", "=", "instruction_set", "[", "'env'", "]", "\n", "found_example", "=", "None", "\n", "for", "example", "in", "examples", ":", "\n", "                    ", "if", "example", "[", "0", "]", "==", "env_id", ":", "\n", "                        ", "found_example", "=", "example", "\n", "", "", "if", "found_example", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "env", ".", "set_environment", "(", "env_id", ",", "instruction_set", "[", "\"instructions\"", "]", ")", "\n", "\n", "presenter", "=", "Presenter", "(", ")", "\n", "cumulative_reward", "=", "0", "\n", "for", "seg_idx", "in", "range", "(", "len", "(", "instruction_set", "[", "\"instructions\"", "]", ")", ")", ":", "\n", "                    ", "if", "seg_idx", "!=", "found_example", "[", "2", "]", ":", "\n", "                        ", "continue", "\n", "\n", "", "print", "(", "f\"RUNNING ENV {env_id} SEG {seg_idx}\"", ")", "\n", "\n", "real_instruction_str", "=", "instruction_set", "[", "\"instructions\"", "]", "[", "seg_idx", "]", "[", "\"instruction\"", "]", "\n", "instruction_display", ".", "show_instruction", "(", "real_instruction_str", ")", "\n", "valid_segment", "=", "env", ".", "set_current_segment", "(", "seg_idx", ")", "\n", "if", "not", "valid_segment", ":", "\n", "                        ", "continue", "\n", "", "state", "=", "env", ".", "reset", "(", "seg_idx", ")", "\n", "\n", "for", "i", "in", "range", "(", "START_PAUSE", ")", ":", "\n", "                        ", "instruction_display", ".", "tick", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "tok_instruction", "=", "tokenize_instruction", "(", "real_instruction_str", ",", "word2token", ")", "\n", "\n", "", "state", "=", "env", ".", "reset", "(", "seg_idx", ")", "\n", "print", "(", "\"Executing: f{instruction_str}\"", ")", "\n", "while", "True", ":", "\n", "                        ", "instruction_display", ".", "tick", "(", ")", "\n", "rate", ".", "sleep", "(", ")", "\n", "action", ",", "internals", "=", "model", ".", "get_action", "(", "state", ",", "tok_instruction", ")", "\n", "state", ",", "reward", ",", "done", ",", "expired", ",", "oob", "=", "env", ".", "step", "(", "action", ")", "\n", "cumulative_reward", "+=", "reward", "\n", "#presenter.show_sample(state, action, reward, cumulative_reward, real_instruction_str)", "\n", "#show_depth(state.image)", "\n", "if", "done", ":", "\n", "                            ", "break", "\n", "\n", "", "", "for", "i", "in", "range", "(", "END_PAUSE", ")", ":", "\n", "                        ", "instruction_display", ".", "tick", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "print", "(", "\"Segment finished!\"", ")", "\n", "", "instruction_display", ".", "show_instruction", "(", "\"...\"", ")", "\n", "\n", "", "", "print", "(", "\"Env finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.bare_min_sample": [[19, 24], ["numpy.zeros", "Sample", "numpy.zeros"], "function", ["None"], ["def", "bare_min_sample", "(", "state", ",", "done", ",", "env_id", ")", ":", "\n", "    ", "act", "=", "np", ".", "zeros", "(", "4", ")", "\n", "if", "done", ":", "\n", "        ", "act", "[", "3", "]", "=", "1.0", "\n", "", "return", "Sample", "(", "\"none\"", ",", "state", ",", "np", ".", "zeros", "(", "4", ")", ",", "0", ",", "done", ",", "{", "\"env_id\"", ":", "env_id", ",", "\"seg_idx\"", ":", "0", ",", "\"set_idx\"", ":", "0", ",", "\"pol_action\"", ":", "act", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.faux_dataset_random_pt": [[26, 52], ["print", "data_io.env.load_env_config", "data_io.env.load_template", "numpy.asarray", "numpy.asarray", "random.uniform", "random.uniform", "numpy.asarray", "pomdp.state.DroneState", "pomdp.state.DroneState", "pomdp.state.DroneState", "segment_dataset.append", "segment_dataset.append", "segment_dataset.append", "dataset.append", "faux_evaluations.bare_min_sample", "faux_evaluations.bare_min_sample", "faux_evaluations.bare_min_sample"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.bare_min_sample", "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.bare_min_sample", "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.bare_min_sample"], ["", "def", "faux_dataset_random_pt", "(", "eval_envs", ")", ":", "\n", "    ", "print", "(", "\"Generating faux dataset\"", ")", "\n", "#units = UnrealUnits(scale=1.0)", "\n", "dataset", "=", "[", "]", "\n", "for", "env_id", "in", "eval_envs", ":", "\n", "        ", "segment_dataset", "=", "[", "]", "\n", "config", "=", "load_env_config", "(", "env_id", ")", "\n", "template", "=", "load_template", "(", "env_id", ")", "\n", "\n", "start_pt", "=", "np", ".", "asarray", "(", "config", "[", "\"startPos\"", "]", ")", "\n", "second_pt", "=", "np", ".", "asarray", "(", "config", "[", "\"startHeading\"", "]", ")", "\n", "end_x", "=", "random", ".", "uniform", "(", "0", ",", "1000", ")", "\n", "end_y", "=", "random", ".", "uniform", "(", "0", ",", "1000", ")", "\n", "end_pt", "=", "np", ".", "asarray", "(", "[", "end_x", ",", "end_y", "]", ")", "\n", "\n", "state1", "=", "DroneState", "(", "None", ",", "start_pt", ")", "\n", "state2", "=", "DroneState", "(", "None", ",", "second_pt", ")", "\n", "state3", "=", "DroneState", "(", "None", ",", "end_pt", ")", "\n", "\n", "segment_dataset", ".", "append", "(", "bare_min_sample", "(", "state1", ",", "False", ",", "env_id", ")", ")", "\n", "segment_dataset", ".", "append", "(", "bare_min_sample", "(", "state2", ",", "False", ",", "env_id", ")", ")", "\n", "segment_dataset", ".", "append", "(", "bare_min_sample", "(", "state3", ",", "True", ",", "env_id", ")", ")", "\n", "\n", "dataset", ".", "append", "(", "segment_dataset", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.faux_dataset_random_landmark": [[54, 108], ["print", "data_io.env.load_env_config", "data_io.env.load_template", "data_io.env.load_path", "numpy.asarray", "numpy.asarray", "list", "random.choice", "numpy.asarray", "numpy.array", "pomdp.state.DroneState", "pomdp.state.DroneState", "pomdp.state.DroneState", "segment_dataset.append", "segment_dataset.append", "segment_dataset.append", "dataset.append", "range", "math.atan2", "faux_evaluations.bare_min_sample", "faux_evaluations.bare_min_sample", "faux_evaluations.bare_min_sample", "len", "random.random", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.bare_min_sample", "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.bare_min_sample", "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.bare_min_sample"], ["", "def", "faux_dataset_random_landmark", "(", "eval_envs", ")", ":", "\n", "    ", "print", "(", "\"Generating faux dataset\"", ")", "\n", "#units = UnrealUnits(scale=1.0)", "\n", "dataset", "=", "[", "]", "\n", "for", "env_id", "in", "eval_envs", ":", "\n", "        ", "segment_dataset", "=", "[", "]", "\n", "config", "=", "load_env_config", "(", "env_id", ")", "\n", "template", "=", "load_template", "(", "env_id", ")", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "\n", "landmark_radii", "=", "config", "[", "\"radius\"", "]", "\n", "\n", "start_pt", "=", "np", ".", "asarray", "(", "config", "[", "\"startPos\"", "]", ")", "\n", "second_pt", "=", "np", ".", "asarray", "(", "config", "[", "\"startHeading\"", "]", ")", "\n", "\n", "landmark_choice_ids", "=", "list", "(", "range", "(", "len", "(", "config", "[", "\"landmarkName\"", "]", ")", ")", ")", "\n", "choice_id", "=", "random", ".", "choice", "(", "landmark_choice_ids", ")", "\n", "\n", "target_x", "=", "config", "[", "\"xPos\"", "]", "[", "choice_id", "]", "\n", "target_y", "=", "config", "[", "\"zPos\"", "]", "[", "choice_id", "]", "\n", "target_lm_pos", "=", "np", ".", "asarray", "(", "[", "target_x", ",", "target_y", "]", ")", "\n", "\n", "landmark_dir", "=", "target_lm_pos", "-", "start_pt", "\n", "\n", "method", "=", "template", "[", "\"side\"", "]", "\n", "\n", "theta", "=", "math", ".", "atan2", "(", "landmark_dir", "[", "1", "]", ",", "landmark_dir", "[", "0", "]", ")", "+", "math", ".", "pi", "\n", "if", "method", "==", "\"infront\"", ":", "\n", "            ", "theta", "=", "theta", "\n", "", "elif", "method", "==", "\"random\"", ":", "\n", "            ", "theta", "=", "random", ".", "random", "(", ")", "*", "2", "*", "math", ".", "pi", "\n", "", "elif", "method", "==", "\"behind\"", ":", "\n", "            ", "theta", "=", "theta", "+", "math", ".", "pi", "\n", "", "elif", "method", "==", "\"left\"", ":", "\n", "            ", "theta", "=", "theta", "-", "math", ".", "pi", "/", "2", "\n", "", "elif", "method", "==", "\"right\"", ":", "\n", "            ", "theta", "=", "theta", "+", "math", ".", "pi", "/", "2", "\n", "\n", "", "x", ",", "z", "=", "target_lm_pos", "[", "0", "]", ",", "target_lm_pos", "[", "1", "]", "\n", "landmark_radius", "=", "landmark_radii", "[", "choice_id", "]", "\n", "sample_point", "=", "np", ".", "array", "(", "[", "x", "+", "math", ".", "cos", "(", "theta", ")", "*", "landmark_radius", ",", "\n", "z", "+", "math", ".", "sin", "(", "theta", ")", "*", "landmark_radius", "]", ")", "\n", "\n", "state1", "=", "DroneState", "(", "None", ",", "start_pt", ")", "\n", "state2", "=", "DroneState", "(", "None", ",", "second_pt", ")", "\n", "state3", "=", "DroneState", "(", "None", ",", "sample_point", ")", "\n", "\n", "segment_dataset", ".", "append", "(", "bare_min_sample", "(", "state1", ",", "False", ",", "env_id", ")", ")", "\n", "segment_dataset", ".", "append", "(", "bare_min_sample", "(", "state2", ",", "False", ",", "env_id", ")", ")", "\n", "segment_dataset", ".", "append", "(", "bare_min_sample", "(", "state3", ",", "True", ",", "env_id", ")", ")", "\n", "\n", "dataset", ".", "append", "(", "segment_dataset", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.evaluate": [[110, 130], ["parameters.initialize_experiment", "data_io.instructions.get_correct_eval_env_id_list", "faux_evaluations.faux_dataset_random_pt", "print", "parameters.get_current_parameters", "evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide", "evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_correct_eval_env_id_list", "home.repos.pwc.inspect_result.clic-lab_drif.stats.faux_evaluations.faux_dataset_random_pt", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results"], ["", "def", "evaluate", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "# At this point test and dev have been swapped.", "\n", "# Whatever we've been developing on called \"test\" is hereafter called dev", "\n", "# Test is the data that hasn't been touched at all", "\n", "eval_envs", "=", "get_correct_eval_env_id_list", "(", ")", "\n", "\n", "dataset", "=", "faux_dataset_random_pt", "(", "eval_envs", ")", "\n", "#dataset = faux_dataset_random_landmark(eval_envs)", "\n", "\n", "results", "=", "{", "}", "\n", "if", "setup", "[", "\"eval_landmark_side\"", "]", ":", "\n", "        ", "evaler", "=", "DataEvalLandmarkSide", "(", "setup", "[", "\"run_name\"", "]", ",", "save_images", "=", "False", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "dataset", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "\n", "", "results", "[", "\"all_dist\"", "]", "=", "[", "]", "\n", "print", "(", "\"Results:\"", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.count_avg_num_steps.count_avg_num_steps_on_env": [[12, 48], ["data_io.train_data.load_single_env_supervised_data", "print", "len", "step_nums.append", "len", "step_nums.append", "numpy.asarray().sum", "len", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "count_avg_num_steps_on_env", "(", "env", ")", ":", "\n", "\n", "        ", "env_data", "=", "load_single_env_supervised_data", "(", "\"real\"", ",", "env", ")", "\n", "print", "(", "\"Running stats for env: \"", ",", "env", ")", "\n", "num_steps", "=", "len", "(", "env_data", ")", "\n", "step_nums", "=", "[", "]", "\n", "fwd_vel", "=", "0", "\n", "ang_vel", "=", "0", "\n", "step_cnt", "=", "0", "\n", "seg_idx", "=", "0", "\n", "\n", "for", "sample", "in", "env_data", ":", "\n", "            ", "fwd_vel", "+=", "sample", "[", "\"ref_action\"", "]", "[", "0", "]", "\n", "ang_vel", "+=", "sample", "[", "\"ref_action\"", "]", "[", "2", "]", "\n", "step_cnt", "+=", "1", "\n", "if", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "!=", "seg_idx", ":", "\n", "                ", "step_nums", ".", "append", "(", "step_cnt", ")", "\n", "seg_idx", "=", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "step_cnt", "=", "0", "\n", "\n", "", "", "step_nums", ".", "append", "(", "step_cnt", ")", "\n", "\n", "if", "len", "(", "step_nums", ")", "==", "0", ":", "\n", "            ", "avg_num_steps", "=", "0", "\n", "", "else", ":", "\n", "            ", "avg_num_steps", "=", "np", ".", "asarray", "(", "step_nums", ")", ".", "sum", "(", ")", "/", "(", "len", "(", "step_nums", ")", "+", "1e-9", ")", "\n", "\n", "", "avg_fwd_vel", "=", "fwd_vel", "/", "(", "num_steps", "+", "1e-9", ")", "\n", "avg_ang_vel", "=", "ang_vel", "/", "(", "num_steps", "+", "1e-9", ")", "\n", "\n", "stats", "=", "{", "\n", "\"num_steps\"", ":", "avg_num_steps", ",", "\n", "\"fwd_vel\"", ":", "avg_fwd_vel", ",", "\n", "\"avg_ang_vel\"", ":", "avg_ang_vel", "\n", "}", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.count_avg_num_steps.collate_stats": [[52, 67], ["len", "print"], "function", ["None"], ["", "def", "collate_stats", "(", "stats", ")", ":", "\n", "    ", "total_steps", "=", "0", "\n", "weighted_sum_vel", "=", "0", "\n", "weighted_sum_yawrate", "=", "0", "\n", "for", "stat", "in", "stats", ":", "\n", "        ", "if", "stat", "is", "None", ":", "\n", "            ", "print", "(", "\"NONESTAT!\"", ")", "\n", "continue", "\n", "", "total_steps", "+=", "stat", "[", "\"num_steps\"", "]", "\n", "weighted_sum_vel", "+=", "stat", "[", "\"num_steps\"", "]", "*", "stat", "[", "\"fwd_vel\"", "]", "\n", "weighted_sum_yawrate", "+=", "stat", "[", "\"num_steps\"", "]", "*", "stat", "[", "\"avg_ang_vel\"", "]", "\n", "", "avg_vel", "=", "weighted_sum_vel", "/", "total_steps", "\n", "avg_yawrate", "=", "weighted_sum_yawrate", "/", "total_steps", "\n", "avg_steps", "=", "total_steps", "/", "len", "(", "stats", ")", "\n", "return", "avg_vel", ",", "avg_yawrate", ",", "avg_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.count_avg_num_steps.count_avg_num_steps_on_data": [[69, 87], ["count_avg_num_steps.collate_stats", "print", "print", "print", "count_avg_num_steps.count_avg_num_steps_on_env", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.stats.count_avg_num_steps.collate_stats", "home.repos.pwc.inspect_result.clic-lab_drif.stats.count_avg_num_steps.count_avg_num_steps_on_env"], ["", "def", "count_avg_num_steps_on_data", "(", "env_list", ")", ":", "\n", "#setup = P.get_current_parameters()[\"Setup\"]", "\n", "\n", "#env_list = env_list[setup[\"env_range_start\"]:]", "\n", "#env_list = env_list[:setup[\"max_envs\"]]", "\n", "#env_list = get_restricted_env_id_lists()", "\n", "\n", "#pool = Pool(NUM_WORKERS)", "\n", "#step_lengths = pool.map(count_avg_num_steps_on_env, env_list)", "\n", "#pool.close()", "\n", "#pool.join()", "\n", "\n", "    ", "step_lengths", "=", "[", "count_avg_num_steps_on_env", "(", "e", ")", "for", "e", "in", "env_list", "]", "\n", "\n", "avg_vel", ",", "avg_yawrate", ",", "avg_steps", "=", "collate_stats", "(", "step_lengths", ")", "\n", "print", "(", "\"Average fwd velocity: \"", "+", "str", "(", "avg_vel", ")", ")", "\n", "print", "(", "\"Average yaw rate: \"", "+", "str", "(", "avg_yawrate", ")", ")", "\n", "print", "(", "\"Average num fwd steps: \"", "+", "str", "(", "avg_steps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.stats.count_avg_num_steps.count_avg_num_steps": [[89, 99], ["parameters.initialize_experiment", "data_io.instructions.get_restricted_env_id_lists", "count_avg_num_steps.count_avg_num_steps_on_data", "parameters.get_current_parameters", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.stats.count_avg_num_steps.count_avg_num_steps_on_data", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "count_avg_num_steps", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "[", "\"locking\"", "]", "=", "False", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "train_envs", "=", "[", "e", "for", "e", "in", "train_envs", "if", "e", ">=", "6000", "]", "\n", "\n", "count_avg_num_steps_on_data", "(", "train_envs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.split_into_segs": [[13, 27], ["segs.append", "seg.append", "len", "segs.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "split_into_segs", "(", "env_data", ")", ":", "\n", "    ", "segs", "=", "[", "]", "\n", "seg", "=", "[", "]", "\n", "seg_idx", "=", "-", "1", "\n", "for", "sample", "in", "env_data", ":", "\n", "        ", "if", "sample", "[", "\"seg_idx\"", "]", "!=", "seg_idx", ":", "\n", "            ", "if", "len", "(", "seg", ")", ">", "0", ":", "\n", "                ", "segs", ".", "append", "(", "seg", ")", "\n", "", "seg", "=", "[", "sample", "]", "\n", "seg_idx", "=", "sample", "[", "\"seg_idx\"", "]", "\n", "", "else", ":", "\n", "            ", "seg", ".", "append", "(", "sample", ")", "\n", "", "", "segs", ".", "append", "(", "seg", ")", "\n", "return", "segs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames": [[33, 45], ["print", "viz.presenter.save_gif", "viz.presenter.save_video", "viz.presenter.save_frames", "int", "int"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_gif", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_video", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames"], ["def", "save_frames", "(", "viz", ",", "frames", ",", "base_path", ",", "fps", "=", "5.0", ",", "start_lag", "=", "0.0", ",", "end_lag", "=", "0.0", ",", "formats", "=", "Y_FMT", ")", ":", "\n", "    ", "print", "(", "f\"Saving files: {base_path}\"", ")", "\n", "if", "start_lag", ">", "0", ":", "\n", "        ", "frames", "=", "[", "frames", "[", "0", "]", "]", "*", "int", "(", "fps", "*", "start_lag", ")", "+", "frames", "\n", "", "if", "end_lag", ">", "0", ":", "\n", "        ", "frames", "=", "frames", "+", "[", "frames", "[", "-", "1", "]", "]", "*", "int", "(", "fps", "*", "end_lag", ")", "\n", "", "if", "\"gif\"", "in", "formats", ":", "\n", "        ", "viz", ".", "presenter", ".", "save_gif", "(", "frames", ",", "f\"{base_path}.gif\"", ",", "fps", "=", "5.0", ")", "\n", "", "if", "\"mp4\"", "in", "formats", ":", "\n", "        ", "viz", ".", "presenter", ".", "save_video", "(", "frames", ",", "f\"{base_path}.mp4\"", ",", "fps", "=", "fps", ")", "\n", "", "if", "\"png\"", "in", "formats", ":", "\n", "        ", "viz", ".", "presenter", ".", "save_frames", "(", "frames", ",", "f\"{base_path}-frames\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.generate_rollout_debug_visualizations": [[48, 278], ["setup.get", "print", "data_io.instructions.get_restricted_env_id_lists", "rollout_vizualizer.RolloutVisualizer", "os.path.join", "os.makedirs", "parameters.get_current_parameters", "setup.get", "data_io.paths.get_eval_tmp_dataset_name", "setup.get", "setup.get", "setup.get", "data_io.paths.get_rollout_debug_viz_dir", "generate_rollout_debug_visualizations.split_into_segs", "print", "setup.get", "print", "data_io.train_data.load_single_env_from_dataset", "len", "print", "os.path.join", "os.makedirs", "os.path.join", "os.path.exists", "rollout_vizualizer.RolloutVisualizer.top_down_visualization", "generate_rollout_debug_visualizations.save_frames", "rollout_vizualizer.RolloutVisualizer.action_visualization", "generate_rollout_debug_visualizations.save_frames", "copy.deepcopy", "rollout_vizualizer.RolloutVisualizer.top_down_visualization", "generate_rollout_debug_visualizations.save_frames", "rollout_vizualizer.RolloutVisualizer.top_down_visualization", "generate_rollout_debug_visualizations.save_frames", "rollout_vizualizer.RolloutVisualizer.grab_frames", "generate_rollout_debug_visualizations.save_frames", "rollout_vizualizer.RolloutVisualizer.grab_frames", "generate_rollout_debug_visualizations.save_frames", "rollout_vizualizer.RolloutVisualizer.grab_frames", "generate_rollout_debug_visualizations.save_frames", "generate_rollout_debug_visualizations.generate_rollout_debug_visualizations.save_map_permutations"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_debug_viz_dir", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_amt_visualizations.split_into_segs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_from_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.top_down_visualization", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.action_visualization", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.top_down_visualization", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.top_down_visualization", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.grab_frames", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.grab_frames", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.grab_frames", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.save_frames"], ["", "", "def", "generate_rollout_debug_visualizations", "(", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "dataset_name", "=", "setup", ".", "get", "(", "\"viz_dataset_name\"", ")", "or", "get_eval_tmp_dataset_name", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"run_name\"", "]", ")", "\n", "domain", "=", "setup", ".", "get", "(", "\"viz_domain\"", ")", "or", "(", "\"real\"", "if", "setup", ".", "get", "(", "\"real_drone\"", ")", "else", "\"sim\"", ")", "\n", "run_name", "=", "setup", ".", "get", "(", "\"original_run_name\"", ")", "or", "setup", ".", "get", "(", "\"run_name\"", ")", "\n", "specific_envs", "=", "setup", ".", "get", "(", "\"only_specific_envs\"", ")", "\n", "\n", "# For collecting information for visualization examples", "\n", "specific_segments", "=", "[", "\n", "# running example", "\n", "(", "6827", ",", "0", ",", "4", ")", ",", "\n", "# successful examples", "\n", "(", "6169", ",", "0", ",", "9", ")", ",", "\n", "(", "6825", ",", "0", ",", "8", ")", ",", "\n", "(", "6857", ",", "0", ",", "9", ")", ",", "\n", "# failure examples", "\n", "(", "6169", ",", "0", ",", "2", ")", ",", "\n", "(", "6299", ",", "0", ",", "9", ")", ",", "\n", "(", "6634", ",", "0", ",", "8", ")", ",", "\n", "(", "6856", ",", "0", ",", "9", ")", ",", "\n", "(", "6857", ",", "0", ",", "8", ")", ",", "\n", "]", "\n", "specific_segments", "+=", "[", "\n", "# good sim, lousy real", "\n", "(", "6419", ",", "0", ",", "5", ")", ",", "\n", "(", "6569", ",", "0", ",", "6", ")", ",", "\n", "(", "6634", ",", "0", ",", "6", ")", ",", "\n", "(", "6917", ",", "0", ",", "7", ")", ",", "\n", "]", "\n", "specific_envs", "=", "[", "s", "[", "0", "]", "for", "s", "in", "specific_segments", "]", "\n", "\n", "# Generate all", "\n", "#specific_envs = list(range(6000, 7000, 1))", "\n", "#specific_segments = None", "\n", "\n", "# Some quick params. TODO: Bring this into json", "\n", "viz_params", "=", "{", "\n", "\"ego_vdist\"", ":", "False", ",", "\n", "\"draw_landmarks\"", ":", "False", ",", "\n", "\"draw_topdown\"", ":", "True", ",", "\n", "\"draw_drone\"", ":", "True", ",", "\n", "\"draw_trajectory\"", ":", "True", ",", "\n", "\"draw_fov\"", ":", "False", ",", "\n", "\"include_vdist\"", ":", "False", ",", "\n", "\"include_layer\"", ":", "None", ",", "\n", "\"include_instr\"", ":", "False", "\n", "}", "\n", "\n", "print", "(", "\"Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "# TODO: Grab the correct env list", "\n", "env_list", "=", "dev_envs", "\n", "\n", "viz", "=", "RolloutVisualizer", "(", "resolution", "=", "576", ")", "\n", "base_dir", "=", "os", ".", "path", ".", "join", "(", "get_rollout_debug_viz_dir", "(", ")", ",", "f\"{dataset_name}-{domain}\"", ")", "\n", "os", ".", "makedirs", "(", "base_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "env_id", "in", "env_list", ":", "\n", "        ", "if", "specific_envs", "and", "env_id", "not", "in", "specific_envs", ":", "\n", "            ", "print", "(", "\"Skipping\"", ",", "env_id", ")", "\n", "continue", "\n", "", "try", ":", "\n", "            ", "env_data", "=", "load_single_env_from_dataset", "(", "dataset_name", ",", "env_id", ",", "\"supervised\"", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "            ", "print", "(", "f\"Skipping env: {env_id}\"", ")", "\n", "continue", "\n", "", "if", "len", "(", "env_data", ")", "==", "0", ":", "\n", "            ", "print", "(", "f\"Skipping env: {env_id}. Rollout exists but is EMPTY!\"", ")", "\n", "continue", "\n", "", "segs", "=", "split_into_segs", "(", "env_data", ")", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "lag_start", "=", "1.5", "\n", "end_lag", "=", "1.5", "\n", "seg_idx", "=", "seg", "[", "0", "]", "[", "\"seg_idx\"", "]", "\n", "if", "specific_segments", "and", "(", "env_id", ",", "0", ",", "seg_idx", ")", "not", "in", "specific_segments", ":", "\n", "                ", "continue", "\n", "", "seg_name", "=", "f\"{env_id}:0:{seg_idx}-{domain}\"", "\n", "gif_filename", "=", "f\"{seg_name}-roll\"", "\n", "instr_filename", "=", "f\"{seg_name}-instr.txt\"", "\n", "this_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "gif_filename", ")", "\n", "os", ".", "makedirs", "(", "this_dir", ",", "exist_ok", "=", "True", ")", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "gif_filename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "instr_filename", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "# Animation with just the drone", "\n", "", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "viz_params", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{base_path}-exec\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ",", "formats", "=", "Y_FMT", ")", "\n", "\n", "# Save instructionto", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "instr_filename", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "                ", "fp", ".", "write", "(", "seg", "[", "0", "]", "[", "\"instruction\"", "]", ")", "\n", "\n", "# Animation of action", "\n", "", "frames", "=", "viz", ".", "action_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"action\"", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{base_path}-action\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "# Animation of actions", "\n", "#action_frames = viz.grab_frames(env_id, seg_idx, seg, domain, \"action\", scale=4)", "\n", "#save_frames(viz, action_frames, f\"{base_path}-action\", fps=5.0, start_lag=lag_start, end_lag=end_lag)", "\n", "\n", "# Generate and save gif", "\n", "# Bare top-down view", "\n", "mod_params", "=", "deepcopy", "(", "viz_params", ")", "\n", "mod_params", "[", "\"draw_drone\"", "]", "=", "False", "\n", "mod_params", "[", "\"draw_trajectory\"", "]", "=", "False", "\n", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "mod_params", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{base_path}-top-down\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "mod_params", "[", "\"draw_drone\"", "]", "=", "True", "\n", "mod_params", "[", "\"draw_trajectory\"", "]", "=", "False", "\n", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "mod_params", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{base_path}-top-down-drn\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "# Egocentric visitation distributions", "\n", "vdist_r_frames", "=", "viz", ".", "grab_frames", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"v_dist_r_inner\"", ")", "\n", "save_frames", "(", "viz", ",", "vdist_r_frames", ",", "f\"{base_path}-ego-vdist\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "# Map struct", "\n", "map_struct_frames", "=", "viz", ".", "grab_frames", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"map_struct\"", ")", "\n", "save_frames", "(", "viz", ",", "map_struct_frames", ",", "f\"{base_path}-ego-map-struct\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "# Egocentric observation mask", "\n", "ego_obs_mask_frames", "=", "viz", ".", "grab_frames", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"ego_obs_mask\"", ")", "\n", "save_frames", "(", "viz", ",", "ego_obs_mask_frames", ",", "f\"{base_path}-ego-obs-mask\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "def", "save_map_permutations", "(", "file_prefix", ",", "incl_layer", ")", ":", "\n", "                ", "mod_params", "=", "deepcopy", "(", "viz_params", ")", "\n", "if", "incl_layer", "==", "\"vdist\"", ":", "\n", "                    ", "mod_params", "[", "\"include_vdist\"", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "mod_params", "[", "\"include_layer\"", "]", "=", "incl_layer", "\n", "", "print", "(", "f\"GENERATING: {file_prefix}\"", ")", "\n", "# Non-overlaid, without trajectory", "\n", "mod_params", "[", "\"draw_drone\"", "]", "=", "False", "\n", "mod_params", "[", "\"draw_topdown\"", "]", "=", "False", "\n", "mod_params", "[", "\"draw_trajectory\"", "]", "=", "False", "\n", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "mod_params", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{file_prefix}\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ",", "formats", "=", "Y_FMT", ")", "\n", "\n", "print", "(", "f\"GENERATING: {file_prefix}-ov\"", ")", "\n", "# Overlaid, without trajectory", "\n", "mod_params", "[", "\"draw_topdown\"", "]", "=", "True", "\n", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "mod_params", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{file_prefix}-ov\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ",", "formats", "=", "D_FMT", ")", "\n", "\n", "print", "(", "f\"GENERATING: {file_prefix}-ov-path\"", ")", "\n", "# Overlaid, with trajectory", "\n", "mod_params", "[", "\"draw_drone\"", "]", "=", "True", "\n", "mod_params", "[", "\"draw_trajectory\"", "]", "=", "True", "\n", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "mod_params", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{file_prefix}-ov-path\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ",", "formats", "=", "Y_FMT", ")", "\n", "\n", "print", "(", "f\"GENERATING: {file_prefix}-path\"", ")", "\n", "# Non-overlaid, with trajectory", "\n", "mod_params", "[", "\"draw_topdown\"", "]", "=", "False", "\n", "mod_params", "[", "\"draw_drone\"", "]", "=", "True", "\n", "mod_params", "[", "\"draw_trajectory\"", "]", "=", "True", "\n", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "mod_params", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{file_prefix}-path\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ",", "formats", "=", "D_FMT", ")", "\n", "\n", "", "save_map_permutations", "(", "f\"{base_path}-vdist\"", ",", "\"vdist\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-semantic-map\"", ",", "\"S_W\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-semantic-map-gray\"", ",", "\"S_W_Gray\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-proj-features\"", ",", "\"F_W\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-grounding-map\"", ",", "\"R_W\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-grounding-map-gray\"", ",", "\"R_W_Gray\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-mask\"", ",", "\"M_W\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-accum-mask\"", ",", "\"M_W_accum\"", ")", "\n", "\n", "save_map_permutations", "(", "f\"{base_path}-accum-mask-inv\"", ",", "\"M_W_accum_inv\"", ")", "\n", "\n", "# Animation of FPV features", "\n", "fpv_feature_frames", "=", "viz", ".", "grab_frames", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"F_C\"", ")", "\n", "save_frames", "(", "viz", ",", "fpv_feature_frames", ",", "f\"{base_path}-features-fpv\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "# Animation of FPV images", "\n", "fpv_image_frames", "=", "viz", ".", "grab_frames", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"image\"", ",", "scale", "=", "4", ")", "\n", "save_frames", "(", "viz", ",", "fpv_image_frames", ",", "f\"{base_path}-image\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "frames", "=", "viz", ".", "overlay_frames", "(", "fpv_image_frames", ",", "fpv_feature_frames", ")", "\n", "save_frames", "(", "viz", ",", "frames", ",", "f\"{base_path}-features-fpv-ov\"", ",", "fps", "=", "5.0", ",", "start_lag", "=", "lag_start", ",", "end_lag", "=", "end_lag", ")", "\n", "\n", "num_frames", "=", "len", "(", "frames", ")", "\n", "\n", "# Clip rollout videos to correct rollout duration and re-save", "\n", "rollout_dir", "=", "get_rollout_video_dir", "(", "run_name", "=", "run_name", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "rollout_dir", ")", ":", "\n", "                ", "print", "(", "\"Processing rollout videos\"", ")", "\n", "actual_rollout_duration", "=", "num_frames", "/", "5.0", "\n", "ceiling_clip", "=", "viz", ".", "load_video_clip", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"ceiling\"", ",", "rollout_dir", ")", "\n", "duration_with_lag", "=", "lag_start", "+", "actual_rollout_duration", "+", "end_lag", "\n", "try", ":", "\n", "                    ", "if", "ceiling_clip", "is", "not", "None", ":", "\n", "                        ", "if", "ceiling_clip", ".", "duration", ">", "duration_with_lag", ":", "\n", "                            ", "start", "=", "ceiling_clip", ".", "duration", "-", "end_lag", "-", "duration_with_lag", "\n", "ceiling_clip", "=", "ceiling_clip", ".", "cutout", "(", "0", ",", "start", ")", "\n", "#ceiling_clip = ceiling_clip.cutout(duration_with_lag, ceiling_clip.duration)", "\n", "", "save_frames", "(", "viz", ",", "ceiling_clip", ",", "f\"{base_path}-ceiing_cam-clipped\"", ",", "fps", "=", "ceiling_clip", ".", "fps", ")", "\n", "", "corner_clip", "=", "viz", ".", "load_video_clip", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "domain", ",", "\"corner\"", ",", "rollout_dir", ")", "\n", "if", "corner_clip", "is", "not", "None", ":", "\n", "                        ", "if", "corner_clip", ".", "duration", ">", "actual_rollout_duration", "+", "end_lag", ":", "\n", "                            ", "start", "=", "corner_clip", ".", "duration", "-", "end_lag", "-", "duration_with_lag", "\n", "corner_clip", "=", "corner_clip", ".", "cutout", "(", "0", ",", "start", ")", "\n", "#corner_clip = corner_clip.cutout(duration_with_lag, corner_clip.duration)", "\n", "", "save_frames", "(", "viz", ",", "corner_clip", ",", "f\"{base_path}-corner_cam-clipped\"", ",", "fps", "=", "corner_clip", ".", "fps", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "\"Video encoding error! Copying manually\"", ")", "\n", "print", "(", "e", ")", "\n", "\n", "", "try", ":", "\n", "                    ", "in_ceil_file", "=", "os", ".", "path", ".", "join", "(", "rollout_dir", ",", "f\"rollout_ceiling_{env_id}-0-{seg_idx}.mkv\"", ")", "\n", "in_corn_file", "=", "os", ".", "path", ".", "join", "(", "rollout_dir", ",", "f\"rollout_corner_{env_id}-0-{seg_idx}.mkv\"", ")", "\n", "out_ceil_file", "=", "f\"{base_path}-ceiling_cam-full.mkv\"", "\n", "out_corn_file", "=", "f\"{base_path}-corner_cam-full.mkv\"", "\n", "shutil", ".", "copy", "(", "in_ceil_file", ",", "out_ceil_file", ")", "\n", "shutil", ".", "copy", "(", "in_corn_file", ",", "out_corn_file", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "\"Failed copying videos! SKipping\"", ")", "\n", "\n", "", "", "", "print", "(", "\"ding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct": [[18, 25], ["fperc_str.split", "len"], "function", ["None"], ["def", "fpct", "(", "fperc", ")", ":", "\n", "    ", "fperc_str", "=", "\"{0:3.1f}\"", ".", "format", "(", "fperc", ")", "\n", "ones", ",", "dec", "=", "fperc_str", ".", "split", "(", "\".\"", ")", "\n", "# This should now be 5 characters long. 3 digits, decimal point and 1 digit. If it's short", "\n", "if", "len", "(", "ones", ")", "<", "3", ":", "\n", "        ", "fperc_str", "=", "\"\\phantom{0}\"", "+", "fperc_str", "\n", "", "return", "fperc_str", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.results_to_latex_rows": [[26, 64], ["os.listdir", "results_to_latex_rows.fpct", "results_to_latex_rows.fpct", "results_to_latex_rows.fpct", "results_to_latex_rows.fpct", "results_to_latex_rows.fpct", "results_to_latex_rows.fpct", "results_to_latex_rows.fpct", "results_to_latex_rows.fpct", "row_format.format", "print", "print", "print", "f.endswith", "open", "json.load", "open", "json.load", "os.path.join", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.results_to_latex_rows.fpct"], ["", "def", "results_to_latex_rows", "(", "results_dir", ")", ":", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "results_dir", ")", "\n", "suffix1", "=", "\"1-1_results.json\"", "\n", "suffix2", "=", "\"2-2_results.json\"", "\n", "results_prefixes", "=", "[", "f", "[", ":", "len", "(", "f", ")", "-", "len", "(", "suffix1", ")", "]", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "suffix1", ")", "]", "\n", "\n", "for", "results_prefix", "in", "results_prefixes", ":", "\n", "        ", "seg1_file", "=", "results_prefix", "+", "suffix1", "\n", "seg2_file", "=", "results_prefix", "+", "suffix2", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "results_dir", ",", "seg1_file", ")", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "results1", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "results_dir", ",", "seg2_file", ")", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "results2", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "sr1", "=", "fpct", "(", "results1", "[", "\"%success\"", "]", "*", "100", ")", "\n", "asd1", "=", "results1", "[", "\"avg_dist\"", "]", "\n", "emd1", "=", "results1", "[", "\"avg_emd\"", "]", "\n", "semd1", "=", "fpct", "(", "results1", "[", "\"avg_semd\"", "]", "*", "100", ")", "\n", "\n", "sr2", "=", "fpct", "(", "results2", "[", "\"%success\"", "]", "*", "100", ")", "\n", "sr2_obs", "=", "fpct", "(", "results2", "[", "\"visible_goal_success_rate\"", "]", "*", "100", ")", "\n", "sr2_nobs", "=", "fpct", "(", "results2", "[", "\"invisible_goal_success_rate\"", "]", "*", "100", ")", "\n", "semd2_obs", "=", "fpct", "(", "results2", "[", "\"visible_goal_avg_semd\"", "]", "*", "100", ")", "\n", "semd2_nobs", "=", "fpct", "(", "results2", "[", "\"invisible_goal_avg_semd\"", "]", "*", "100", ")", "\n", "asd2", "=", "results2", "[", "\"avg_dist\"", "]", "\n", "emd2", "=", "results2", "[", "\"avg_emd\"", "]", "\n", "semd2", "=", "fpct", "(", "results2", "[", "\"avg_semd\"", "]", "*", "100", ")", "\n", "\n", "row", "=", "row_format", ".", "format", "(", "\n", "sr1", ",", "emd1", ",", "sr2", ",", "emd2", "\n", "#sr1, emd1, semd1, sr2, emd2, semd2, semd2_obs, semd2_nobs", "\n", "#sr1, asd1, emd1, sr2, sr2_obs, sr2_nobs, asd2, emd2", "\n", ")", "\n", "\n", "print", "(", "\"-------------------------------------------\"", ")", "\n", "print", "(", "results_prefix", ")", "\n", "print", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.does_seglen_match": [[29, 33], ["data_io.instructions.get_all_instructions", "int", "int"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions"], ["def", "does_seglen_match", "(", "env_id", ",", "seg_idx", ",", "filter_merge_len", ")", ":", "\n", "    ", "_", ",", "_", ",", "test_i", ",", "_", "=", "get_all_instructions", "(", ")", "\n", "seg_merge_len", "=", "test_i", "[", "int", "(", "env_id", ")", "]", "[", "0", "]", "[", "\"instructions\"", "]", "[", "int", "(", "seg_idx", ")", "]", "[", "\"merge_len\"", "]", "\n", "return", "seg_merge_len", "==", "filter_merge_len", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.load_results_file": [[34, 41], ["open", "csv.DictReader", "list", "int", "json.loads"], "function", ["None"], ["", "def", "load_results_file", "(", "results_file", ")", ":", "\n", "    ", "with", "open", "(", "results_file", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "fp", ")", "\n", "lines", "=", "list", "(", "reader", ")", "\n", "json_result_strings", "=", "[", "(", "int", "(", "l", "[", "\"Input.id\"", "]", ")", ",", "l", "[", "\"Answer.taskAnswers\"", "]", ")", "for", "l", "in", "lines", "]", "\n", "results_dicts", "=", "[", "(", "i", ",", "json", ".", "loads", "(", "s", ")", "[", "0", "]", ")", "for", "(", "i", ",", "s", ")", "in", "json_result_strings", "]", "\n", "", "return", "results_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.load_id_map_file": [[42, 48], ["open", "csv.DictReader", "list", "int"], "function", ["None"], ["", "def", "load_id_map_file", "(", "id_map_file", ")", ":", "\n", "    ", "with", "open", "(", "id_map_file", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "fp", ")", "\n", "lines", "=", "list", "(", "reader", ")", "\n", "", "id_map", "=", "{", "int", "(", "l", "[", "\"id\"", "]", ")", ":", "l", "for", "l", "in", "lines", "}", "\n", "return", "id_map", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.results_to_dataframe": [[49, 152], ["set", "collections.defaultdict", "collections.defaultdict", "print", "print", "print", "print", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "set.add", "conv_results.append", "viz_results_g.append", "viz_results_p.append", "viz_results_e.append", "out_results.append", "int", "int", "int", "int", "analyze_human_eval_results.does_seglen_match", "len", "result[].items", "result[].items", "result[].items", "result[].items"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.does_seglen_match"], ["", "def", "results_to_dataframe", "(", "results", ",", "id_map", ")", ":", "\n", "    ", "all_agents", "=", "set", "(", ")", "\n", "dropped", "=", "0", "\n", "mismatch", "=", "0", "\n", "bad_counts", "=", "defaultdict", "(", "int", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "\n", "conv_results", "=", "[", "]", "\n", "viz_results_g", "=", "[", "]", "\n", "viz_results_p", "=", "[", "]", "\n", "viz_results_e", "=", "[", "]", "\n", "\n", "for", "id", ",", "result", "in", "results", ":", "\n", "        ", "e", "=", "[", "int", "(", "k", ")", "for", "k", ",", "v", "in", "result", "[", "\"efficient\"", "]", ".", "items", "(", ")", "if", "v", "]", "[", "0", "]", "\n", "g", "=", "[", "int", "(", "k", ")", "for", "k", ",", "v", "in", "result", "[", "\"goal\"", "]", ".", "items", "(", ")", "if", "v", "]", "[", "0", "]", "\n", "p", "=", "[", "int", "(", "k", ")", "for", "k", ",", "v", "in", "result", "[", "\"path\"", "]", ".", "items", "(", ")", "if", "v", "]", "[", "0", "]", "\n", "w", "=", "[", "int", "(", "k", ")", "for", "k", ",", "v", "in", "result", "[", "\"wrong\"", "]", ".", "items", "(", ")", "if", "v", "]", "[", "0", "]", "\n", "ambiguous", "=", "result", "[", "\"wrong\"", "]", "[", "\"1\"", "]", "\n", "impossible", "=", "result", "[", "\"wrong\"", "]", "[", "\"2\"", "]", "\n", "confusing", "=", "result", "[", "\"wrong\"", "]", "[", "\"3\"", "]", "\n", "no_problem", "=", "result", "[", "\"wrong\"", "]", "[", "\"4\"", "]", "\n", "\n", "rollout_info", "=", "id_map", "[", "id", "]", "\n", "if", "FILTER_SEG_LEN", "and", "not", "does_seglen_match", "(", "rollout_info", "[", "\"env_id\"", "]", ",", "rollout_info", "[", "\"seg_idx\"", "]", ",", "FILTER_SEG_LEN", ")", ":", "\n", "            ", "mismatch", "+=", "1", "\n", "continue", "\n", "\n", "", "all_agents", ".", "add", "(", "rollout_info", "[", "\"agent\"", "]", ")", "\n", "\n", "key", "=", "f\"{rollout_info['env_id']}_{rollout_info['seg_idx']}\"", "\n", "if", "ambiguous", "or", "impossible", "or", "confusing", ":", "\n", "            ", "bad_counts", "[", "key", "]", "+=", "1", "\n", "", "counts", "[", "key", "]", "+=", "1", "\n", "\n", "row", "=", "{", "\n", "\"id\"", ":", "id", ",", "\n", "\"agent\"", ":", "rollout_info", "[", "\"agent\"", "]", ",", "\n", "\"env_id\"", ":", "rollout_info", "[", "\"env_id\"", "]", ",", "\n", "\"seg_idx\"", ":", "rollout_info", "[", "\"seg_idx\"", "]", ",", "\n", "\"efficient\"", ":", "e", ",", "\n", "\"goal\"", ":", "g", ",", "\n", "\"path\"", ":", "p", ",", "\n", "\"wrong\"", ":", "w", ",", "\n", "\"ambiguous\"", ":", "ambiguous", ",", "\n", "\"impossible\"", ":", "impossible", ",", "\n", "\"confusing\"", ":", "confusing", ",", "\n", "\"no_problem\"", ":", "no_problem", "\n", "}", "\n", "conv_results", ".", "append", "(", "row", ")", "\n", "\n", "goal_question_id", "=", "f\"{rollout_info['agent']}_goal\"", "\n", "path_question_id", "=", "f\"{rollout_info['agent']}_path\"", "\n", "effi_question_id", "=", "f\"{rollout_info['agent']}_efficient\"", "\n", "#wrong_question_id = f\"{rollout_info['agent']}_wrong\"", "\n", "\n", "goal_row", "=", "{", "\n", "\"question_id\"", ":", "goal_question_id", ",", "\n", "\"score\"", ":", "g", ",", "\n", "\"example\"", ":", "key", "\n", "}", "\n", "path_row", "=", "{", "\n", "\"question_id\"", ":", "path_question_id", ",", "\n", "\"score\"", ":", "p", ",", "\n", "\"example\"", ":", "key", "\n", "}", "\n", "effi_row", "=", "{", "\n", "\"question_id\"", ":", "effi_question_id", ",", "\n", "\"score\"", ":", "e", ",", "\n", "\"example\"", ":", "key", "\n", "}", "\n", "viz_results_g", ".", "append", "(", "goal_row", ")", "\n", "viz_results_p", ".", "append", "(", "path_row", ")", "\n", "viz_results_e", ".", "append", "(", "effi_row", ")", "\n", "\n", "", "out_results", "=", "[", "]", "\n", "total", "=", "0", "\n", "for", "result", "in", "conv_results", ":", "\n", "        ", "key", "=", "f\"{result['env_id']}_{result['seg_idx']}\"", "\n", "assert", "counts", "[", "key", "]", "==", "5", "*", "5", "\n", "total", "+=", "1", "\n", "if", "bad_counts", "[", "key", "]", "<=", "counts", "[", "key", "]", "/", "2", ":", "\n", "            ", "out_results", ".", "append", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "dropped", "+=", "1", "\n", "\n", "", "", "print", "(", "\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"", ")", "\n", "print", "(", "f\"Filtered out {mismatch}/{len(results)} segments that didn't match segment length\"", ")", "\n", "print", "(", "f\"Dropped {dropped}/{total} segments as they were confusing, impossible or unclear\"", ")", "\n", "print", "(", "\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"", ")", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "out_results", ")", "\n", "\n", "viz_results_g", "=", "[", "r", "for", "r", "in", "viz_results_g", "if", "bad_counts", "[", "r", "[", "\"example\"", "]", "]", "<=", "counts", "[", "r", "[", "\"example\"", "]", "]", "/", "2", "]", "\n", "viz_results_e", "=", "[", "r", "for", "r", "in", "viz_results_e", "if", "bad_counts", "[", "r", "[", "\"example\"", "]", "]", "<=", "counts", "[", "r", "[", "\"example\"", "]", "]", "/", "2", "]", "\n", "viz_results_p", "=", "[", "r", "for", "r", "in", "viz_results_p", "if", "bad_counts", "[", "r", "[", "\"example\"", "]", "]", "<=", "counts", "[", "r", "[", "\"example\"", "]", "]", "/", "2", "]", "\n", "dfg", "=", "pd", ".", "DataFrame", "(", "viz_results_g", ")", "\n", "dfe", "=", "pd", ".", "DataFrame", "(", "viz_results_e", ")", "\n", "dfp", "=", "pd", ".", "DataFrame", "(", "viz_results_p", ")", "\n", "dfg", ".", "to_csv", "(", "GOAL_CSV_PATH", ")", "\n", "dfp", ".", "to_csv", "(", "PATH_CSV_PATH", ")", "\n", "dfe", ".", "to_csv", "(", "EFFICIENT_CSV_PATH", ")", "\n", "\n", "return", "df", ",", "all_agents", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.print_cnts": [[153, 157], ["range", "print", "float", "col.value_counts"], "function", ["None"], ["", "def", "print_cnts", "(", "col", ",", "tot", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "# TODO: Normalize into histograms", "\n", "        ", "print", "(", "f\"({i},{float(col.value_counts()[i]) / tot})\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.analyze_agent_data": [[158, 173], ["print", "print", "analyze_human_eval_results.print_cnts", "print", "analyze_human_eval_results.print_cnts", "print", "analyze_human_eval_results.print_cnts", "print", "print", "print", "print", "print", "len", "len", "len", "agent_df.path.mean", "agent_df.path.std", "agent_df.goal.mean", "agent_df.goal.std", "agent_df.efficient.mean", "agent_df.efficient.std"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.print_cnts", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.print_cnts", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.print_cnts"], ["", "", "def", "analyze_agent_data", "(", "agent_df", ")", ":", "\n", "# We want frequencies of each response", "\n", "    ", "print", "(", "\"Answer Frequencies:\"", ")", "\n", "print", "(", "\"  Goal: \"", ")", "\n", "print_cnts", "(", "agent_df", ".", "goal", ",", "len", "(", "agent_df", ")", ")", "\n", "print", "(", "\"  Path: \"", ")", "\n", "print_cnts", "(", "agent_df", ".", "path", ",", "len", "(", "agent_df", ")", ")", "\n", "print", "(", "\"  Efficient: \"", ")", "\n", "print_cnts", "(", "agent_df", ".", "efficient", ",", "len", "(", "agent_df", ")", ")", "\n", "\n", "print", "(", "\" \"", ")", "\n", "print", "(", "\"Mean (std)\"", ")", "\n", "print", "(", "f\"  Path: {agent_df.path.mean()} ({agent_df.path.std()})\"", ")", "\n", "print", "(", "f\"  Goal: {agent_df.goal.mean()} ({agent_df.goal.std()})\"", ")", "\n", "print", "(", "f\"  Efficient: {agent_df.efficient.mean()} ({agent_df.efficient.std()})\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.analyze_human_eval_results": [[175, 187], ["analyze_human_eval_results.load_results_file", "analyze_human_eval_results.load_id_map_file", "analyze_human_eval_results.results_to_dataframe", "results_df.to_csv", "print", "print", "print", "analyze_human_eval_results.analyze_agent_data"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.load_results_file", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.load_id_map_file", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.results_to_dataframe", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.analyze_human_eval_results.analyze_agent_data"], ["", "def", "analyze_human_eval_results", "(", "results_file", ",", "id_map_file", ")", ":", "\n", "    ", "results", "=", "load_results_file", "(", "results_file", ")", "\n", "id_map", "=", "load_id_map_file", "(", "id_map_file", ")", "\n", "results_df", ",", "all_agents", "=", "results_to_dataframe", "(", "results", ",", "id_map", ")", "\n", "\n", "for", "agent", "in", "all_agents", ":", "\n", "        ", "print", "(", "\"------------------------------------------------------------------------------------------\"", ")", "\n", "print", "(", "f\" Results for agent: {agent}\"", ")", "\n", "print", "(", "\"------------------------------------------------------------------------------------------\"", ")", "\n", "agent_data", "=", "results_df", "[", "results_df", ".", "agent", "==", "agent", "]", "\n", "analyze_agent_data", "(", "agent_data", ")", "\n", "", "results_df", ".", "to_csv", "(", "OUT_FILE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_results_compare_html.put_extras": [[14, 33], ["int", "min", "sorted", "int", "str", "len", "tag", "range", "tag", "range", "len", "tag", "len", "tag"], "function", ["None"], ["def", "put_extras", "(", "tag", ",", "text", ",", "colname", ",", "all_extras", ",", "numcols", "=", "4", ")", ":", "\n", "    ", "numrows", "=", "int", "(", "(", "len", "(", "all_extras", ")", "+", "numcols", "-", "1", ")", "/", "numcols", ")", "\n", "percent_w", "=", "min", "(", "int", "(", "100", "/", "numcols", ")", ",", "60", ")", "\n", "percents", "=", "str", "(", "percent_w", ")", "+", "\"%\"", "\n", "all_extras", "=", "sorted", "(", "all_extras", ")", "\n", "\n", "imgw", "=", "\"100%\"", "\n", "if", "len", "(", "all_extras", ")", "==", "1", ":", "\n", "        ", "imgw", "=", "\"50%\"", "\n", "", "with", "tag", "(", "'table'", ",", "border", "=", "\"1\"", ",", "cellpadding", "=", "\"0\"", ",", "cellspacing", "=", "\"0\"", ",", "width", "=", "\"100%\"", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "numrows", ")", ":", "\n", "            ", "with", "tag", "(", "\"tr\"", ")", ":", "\n", "                ", "for", "col", "in", "range", "(", "numcols", ")", ":", "\n", "                    ", "idx", "=", "row", "*", "numcols", "+", "col", "\n", "if", "idx", ">", "len", "(", "all_extras", ")", "-", "1", ":", "\n", "                        ", "break", "\n", "", "extra", "=", "all_extras", "[", "idx", "]", "\n", "with", "tag", "(", "\"td\"", ",", "width", "=", "percents", ",", "align", "=", "\"center\"", ")", ":", "\n", "                        ", "with", "tag", "(", "\"img\"", ",", "width", "=", "imgw", ",", "src", "=", "colname", "+", "\"/extra/\"", "+", "extra", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_results_compare_html.gen_multicolumn_html_with_images": [[35, 69], ["yattag.Doc().tagtext", "doc.asis", "doc.getvalue", "tag", "yattag.Doc", "tag", "len", "tag", "enumerate", "tag", "tag", "tag", "tag", "text", "tag", "tag", "sorted", "tag", "text", "generate_results_compare_html.put_extras", "results.keys", "str", "tag", "tag", "tag", "text", "tag", "text", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_results_compare_html.put_extras"], ["", "", "", "", "", "", "def", "gen_multicolumn_html_with_images", "(", "run_names", ",", "all_results", ",", "all_filenames", ",", "all_filename_extras", ")", ":", "\n", "    ", "doc", ",", "tag", ",", "text", "=", "yattag", ".", "Doc", "(", ")", ".", "tagtext", "(", ")", "\n", "doc", ".", "asis", "(", "'<!DOCTYPE html>'", ")", "\n", "with", "tag", "(", "'html'", ")", ":", "\n", "        ", "with", "tag", "(", "'body'", ")", ":", "\n", "            ", "numcols", "=", "len", "(", "run_names", ")", "\n", "with", "tag", "(", "'table'", ",", "border", "=", "\"1\"", ",", "cellpadding", "=", "\"0\"", ",", "cellspacing", "=", "\"0\"", ",", "width", "=", "\"100%\"", ")", ":", "\n", "                ", "with", "tag", "(", "\"tr\"", ")", ":", "\n", "                    ", "for", "colname", "in", "run_names", ":", "\n", "                        ", "with", "tag", "(", "\"th\"", ")", ":", "\n", "                            ", "text", "(", "colname", ")", "\n", "\n", "", "", "", "with", "tag", "(", "\"tr\"", ")", ":", "\n", "                    ", "for", "results", "in", "all_results", ":", "\n", "                        ", "with", "tag", "(", "\"td\"", ")", ":", "\n", "                            ", "with", "tag", "(", "\"table\"", ")", ":", "\n", "                                ", "dictkeys", "=", "sorted", "(", "(", "results", ".", "keys", "(", ")", ")", ")", "\n", "for", "key", "in", "dictkeys", ":", "\n", "                                    ", "value", "=", "results", "[", "key", "]", "\n", "with", "tag", "(", "\"tr\"", ")", ":", "\n", "                                        ", "with", "tag", "(", "\"td\"", ")", ":", "\n", "                                            ", "text", "(", "str", "(", "key", ")", ")", "\n", "", "with", "tag", "(", "\"td\"", ")", ":", "\n", "                                            ", "text", "(", "str", "(", "value", ")", ")", "\n", "\n", "", "", "", "", "", "", "", "for", "i", ",", "filename", "in", "enumerate", "(", "all_filenames", ")", ":", "\n", "                    ", "with", "tag", "(", "\"tr\"", ")", ":", "\n", "                        ", "for", "colname", "in", "run_names", ":", "\n", "                            ", "with", "tag", "(", "\"td\"", ")", ":", "\n", "                                ", "text", "(", "str", "(", "filename", ")", ")", "\n", "with", "tag", "(", "\"img\"", ",", "width", "=", "\"100%\"", ",", "src", "=", "colname", "+", "\"/\"", "+", "filename", ")", ":", "pass", "\n", "put_extras", "(", "tag", ",", "text", ",", "colname", ",", "all_filename_extras", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "", "", "", "return", "doc", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_results_compare_html.find_extras": [[70, 79], ["os.path.splitext", "os.path.join", "os.listdir", "os.path.isdir", "ename.startswith", "os.path.splitext"], "function", ["None"], ["", "def", "find_extras", "(", "img_dir", ",", "filename", ")", ":", "\n", "    ", "fname", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "extra_dir", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "\"extra\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "extra_dir", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "extra_list", "=", "os", ".", "listdir", "(", "extra_dir", ")", "\n", "filtered_extras", "=", "[", "ename", "for", "ename", "in", "extra_list", "if", "ename", ".", "startswith", "(", "fname", ")", "]", "\n", "filtered_extras", "=", "[", "ename", "for", "ename", "in", "filtered_extras", "if", "os", ".", "path", ".", "splitext", "(", "ename", ")", "[", "1", "]", "in", "img_extensions", "]", "\n", "return", "filtered_extras", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_results_compare_html.build_html_for_runs": [[81, 109], ["generate_results_compare_html.gen_multicolumn_html_with_images", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "open", "f.write", "open", "all_results.append", "json.load", "range", "generate_results_compare_html.find_extras", "all_filenames.append", "all_filename_extras.append", "print", "len", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_results_compare_html.gen_multicolumn_html_with_images", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_results_compare_html.find_extras", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "build_html_for_runs", "(", "run_names", ",", "html_name", ")", ":", "\n", "\n", "    ", "all_results", "=", "[", "]", "\n", "all_filenames", "=", "[", "]", "\n", "all_filename_extras", "=", "[", "]", "\n", "for", "run_name", "in", "run_names", ":", "\n", "        ", "json_file", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "run_name", "+", "\"_results.json\"", ")", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "all_results", ".", "append", "(", "json", ".", "load", "(", "fp", ")", ")", "\n", "\n", "", "", "for", "run_name", "in", "run_names", ":", "\n", "        ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "run_name", ")", "\n", "files", "=", "os", ".", "listdir", "(", "img_dir", ")", "\n", "img_files", "=", "[", "file", "for", "file", "in", "files", "if", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "1", "]", "in", "img_extensions", "]", "\n", "\n", "new_filenames", "=", "[", "img_files", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "img_files", ")", ")", "]", "\n", "for", "file", "in", "new_filenames", ":", "\n", "            ", "if", "file", "not", "in", "all_filenames", ":", "\n", "                ", "extras", "=", "find_extras", "(", "img_dir", ",", "file", ")", "\n", "all_filenames", ".", "append", "(", "file", ")", "\n", "all_filename_extras", ".", "append", "(", "extras", ")", "\n", "print", "(", "\"Found image file: \"", "+", "file", ")", "\n", "\n", "", "", "", "html", "=", "gen_multicolumn_html_with_images", "(", "run_names", ",", "all_results", ",", "all_filenames", ",", "all_filename_extras", ")", "\n", "\n", "html_out_path", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "html_name", "+", "\"_results.html\"", ")", "\n", "with", "open", "(", "html_out_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "html", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.path_length": [[9, 14], ["zip", "numpy.linalg.norm"], "function", ["None"], ["def", "path_length", "(", "path", ")", ":", "\n", "    ", "dst", "=", "0", "\n", "for", "p1", ",", "p2", "in", "zip", "(", "path", "[", ":", "-", "1", "]", ",", "path", "[", "1", ":", "]", ")", ":", "\n", "        ", "dst", "+=", "np", ".", "linalg", ".", "norm", "(", "p2", "-", "p1", ")", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set": [[16, 42], ["data_io.instructions.get_word_to_token_map", "iset.items", "print", "print", "sum", "len", "len", "data_io.env.load_path", "data_io.instructions.tokenize_instruction", "dataset_stats.path_length", "demo_lengths.append", "token_lengths.append", "sum", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.path_length", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "analyze_instruction_set", "(", "name", ",", "iset", ",", "corpus", ",", "merge_len", ")", ":", "\n", "    ", "token_lengths", "=", "[", "]", "\n", "demo_lengths", "=", "[", "]", "\n", "token2word", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "\n", "for", "e", ",", "instr_sets", "in", "iset", ".", "items", "(", ")", ":", "\n", "        ", "segs", "=", "instr_sets", "[", "0", "]", "[", "\"instructions\"", "]", "\n", "if", "len", "(", "segs", ")", ">", "0", ":", "\n", "            ", "full_path", "=", "load_path", "(", "e", ")", "\n", "", "for", "seg", "in", "segs", ":", "\n", "            ", "if", "seg", "[", "\"merge_len\"", "]", "!=", "merge_len", ":", "\n", "                ", "continue", "\n", "", "tok_i", "=", "tokenize_instruction", "(", "seg", "[", "'instruction'", "]", ",", "word2token", ")", "\n", "start_idx", "=", "seg", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "seg", "[", "\"end_idx\"", "]", "\n", "seg_path", "=", "full_path", "[", "start_idx", ":", "end_idx", "]", "\n", "demo_len", "=", "path_length", "(", "seg_path", ")", "\n", "\n", "demo_lengths", ".", "append", "(", "demo_len", ")", "\n", "token_lengths", ".", "append", "(", "len", "(", "tok_i", ")", ")", "\n", "\n", "", "", "avg_tok_len", "=", "sum", "(", "token_lengths", ")", "/", "len", "(", "token_lengths", ")", "\n", "avg_pth_len", "=", "sum", "(", "demo_lengths", ")", "*", "4.7", "/", "(", "len", "(", "demo_lengths", ")", "*", "1000", ")", "\n", "\n", "print", "(", "\"Dataset: \"", ",", "name", ")", "\n", "print", "(", "\" {}  &  {}  &  {:.2f}  &  {:.2f}\"", ".", "format", "(", "len", "(", "iset", ")", ",", "len", "(", "token_lengths", ")", ",", "avg_tok_len", ",", "avg_pth_len", ")", ")", "\n", "#print(f\"{len(iset)}  &  {len(token_lengths)}  &  {avg_tok_len}  &  {avg_pth_len}\")", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_lani": [[53, 96], ["parameters.initialize_experiment", "data_io.instructions.get_all_instructions", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "dataset_stats.analyze_instruction_set", "print", "train_i.items", "dev_i.items", "text_i.items", "train_i.items", "dev_i.items", "text_i.items", "test_i_real.items", "dev_i_real.items", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.dataset_stats.analyze_instruction_set"], ["def", "analyze_lani", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "\n", "train_i", ",", "dev_i", ",", "text_i", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "\n", "train_i_lani", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "train_i", ".", "items", "(", ")", "if", "int", "(", "k", ")", "<", "6000", "}", "\n", "dev_i_lani", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "dev_i", ".", "items", "(", ")", "if", "int", "(", "k", ")", "<", "6000", "}", "\n", "test_i_lani", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "text_i", ".", "items", "(", ")", "if", "int", "(", "k", ")", "<", "6000", "}", "\n", "\n", "train_i_real", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "train_i", ".", "items", "(", ")", "if", "int", "(", "k", ")", ">=", "6000", "}", "\n", "dev_i_real", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "dev_i", ".", "items", "(", ")", "if", "int", "(", "k", ")", ">=", "6000", "}", "\n", "test_i_real", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "text_i", ".", "items", "(", ")", "if", "int", "(", "k", ")", ">=", "6000", "}", "\n", "\n", "test_i_small", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "test_i_real", ".", "items", "(", ")", "if", "int", "(", "k", ")", "in", "test_small_envs", "}", "\n", "dev_i_small", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "dev_i_real", ".", "items", "(", ")", "if", "int", "(", "k", ")", "in", "dev_small_envs", "}", "\n", "\n", "all_i_real", "=", "{", "**", "train_i_real", ",", "**", "dev_i_real", ",", "**", "test_i_real", "}", "\n", "\n", "analyze_instruction_set", "(", "\"Lani Train 1Seg\"", ",", "train_i_lani", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Lani Dev 1Seg\"", ",", "dev_i_lani", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Lani Test 1Seg\"", ",", "test_i_lani", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Lani Train 2Seg\"", ",", "train_i_lani", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "analyze_instruction_set", "(", "\"Lani Dev 2Seg\"", ",", "dev_i_lani", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "analyze_instruction_set", "(", "\"Lani Test 2Seg\"", ",", "test_i_lani", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "\n", "analyze_instruction_set", "(", "\"Real Train 1Seg\"", ",", "train_i_real", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Real Dev 1Seg\"", ",", "dev_i_real", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Real Test 1Seg\"", ",", "test_i_real", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Real Train 2Seg\"", ",", "train_i_real", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "analyze_instruction_set", "(", "\"Real Dev 2Seg\"", ",", "dev_i_real", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "analyze_instruction_set", "(", "\"Real Test 2Seg\"", ",", "test_i_real", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "\n", "#analyze_instruction_set(\"Real Test 1Seg\", test_i_real, corpus, merge_len=1)", "\n", "#analyze_instruction_set(\"Real Test 2Seg\", test_i_real, corpus, merge_len=2)", "\n", "#analyze_instruction_set(\"Small Test 1Seg\", test_i_small, corpus, merge_len=1)", "\n", "#analyze_instruction_set(\"Small Test 2Seg\", test_i_small, corpus, merge_len=2)", "\n", "analyze_instruction_set", "(", "\"Small Dev 1Seg\"", ",", "dev_i_small", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Small Dev 2Seg\"", ",", "dev_i_small", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "analyze_instruction_set", "(", "\"Small Dev 1Seg\"", ",", "dev_i_small", ",", "corpus", ",", "merge_len", "=", "1", ")", "\n", "analyze_instruction_set", "(", "\"Small Dev 2Seg\"", ",", "dev_i_small", ",", "corpus", ",", "merge_len", "=", "2", ")", "\n", "\n", "\n", "print", "(", "\"ding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_amt_visualizations.split_into_segs": [[13, 27], ["segs.append", "seg.append", "len", "segs.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "split_into_segs", "(", "env_data", ")", ":", "\n", "    ", "segs", "=", "[", "]", "\n", "seg", "=", "[", "]", "\n", "seg_idx", "=", "-", "1", "\n", "for", "sample", "in", "env_data", ":", "\n", "        ", "if", "sample", "[", "\"seg_idx\"", "]", "!=", "seg_idx", ":", "\n", "            ", "if", "len", "(", "seg", ")", ">", "0", ":", "\n", "                ", "segs", ".", "append", "(", "seg", ")", "\n", "", "seg", "=", "[", "sample", "]", "\n", "seg_idx", "=", "sample", "[", "\"seg_idx\"", "]", "\n", "", "else", ":", "\n", "            ", "seg", ".", "append", "(", "sample", ")", "\n", "", "", "segs", ".", "append", "(", "seg", ")", "\n", "return", "segs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_amt_visualizations.generate_rollout_amt_visualizations": [[30, 85], ["print", "print", "data_io.instructions.get_restricted_env_id_lists", "rollout_vizualizer.RolloutVisualizer", "os.path.join", "os.makedirs", "parameters.get_current_parameters", "setup.get", "data_io.paths.get_eval_tmp_dataset_name", "data_io.paths.get_rollout_viz_dir", "generate_rollout_amt_visualizations.split_into_segs", "print", "data_io.train_data.load_single_env_from_dataset", "len", "print", "rollout_vizualizer.RolloutVisualizer.top_down_visualization", "print", "rollout_vizualizer.RolloutVisualizer.presenter.save_gif", "print", "os.path.join", "open", "fp.write", "os.path.join"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_viz_dir", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_amt_visualizations.split_into_segs", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_from_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.None.rollout_vizualizer.RolloutVisualizer.top_down_visualization", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_gif"], ["", "def", "generate_rollout_amt_visualizations", "(", ")", ":", "\n", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "dataset_name", "=", "setup", ".", "get", "(", "\"viz_dataset_name\"", ")", "or", "get_eval_tmp_dataset_name", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"run_name\"", "]", ")", "\n", "print", "(", "f\"Generating AMT animations for dataset: {dataset_name}\"", ")", "\n", "pic_domain", "=", "\"sim\"", "\n", "data_domain", "=", "\"real\"", "\n", "# Some quick params. TODO: Bring this into json", "\n", "viz_params", "=", "{", "\n", "\"draw_drone\"", ":", "True", ",", "\n", "\"draw_trajectory\"", ":", "True", ",", "\n", "\"draw_fov\"", ":", "True", ",", "\n", "\"include_vdist\"", ":", "False", ",", "\n", "\"include_layer\"", ":", "None", ",", "\n", "\"include_instr\"", ":", "False", "\n", "}", "\n", "\n", "print", "(", "\"Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "# TODO: Grab the correct env list", "\n", "env_list", "=", "test_envs", "\n", "\n", "viz", "=", "RolloutVisualizer", "(", "resolution", "=", "400", ")", "\n", "base_dir", "=", "os", ".", "path", ".", "join", "(", "get_rollout_viz_dir", "(", ")", ",", "f\"{dataset_name}-{data_domain}\"", ")", "\n", "os", ".", "makedirs", "(", "base_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "env_id", "in", "env_list", ":", "\n", "        ", "try", ":", "\n", "            ", "env_data", "=", "load_single_env_from_dataset", "(", "dataset_name", ",", "env_id", ",", "\"supervised\"", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "            ", "print", "(", "f\"Skipping env: {env_id}\"", ")", "\n", "continue", "\n", "", "if", "len", "(", "env_data", ")", "==", "0", ":", "\n", "            ", "print", "(", "f\"Skipping env: {env_id}. Rollout exists but is EMPTY!\"", ")", "\n", "continue", "\n", "", "segs", "=", "split_into_segs", "(", "env_data", ")", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "seg_idx", "=", "seg", "[", "0", "]", "[", "\"seg_idx\"", "]", "\n", "seg_name", "=", "f\"{env_id}:0:{seg_idx}-{data_domain}\"", "\n", "gif_filename", "=", "f\"{seg_name}-roll.gif\"", "\n", "instr_filename", "=", "f\"{seg_name}-instr.txt\"", "\n", "\n", "# Generate and save gif", "\n", "frames", "=", "viz", ".", "top_down_visualization", "(", "env_id", ",", "seg_idx", ",", "seg", ",", "pic_domain", ",", "viz_params", ")", "\n", "print", "(", "\"Saving GIF\"", ")", "\n", "viz", ".", "presenter", ".", "save_gif", "(", "frames", ",", "os", ".", "path", ".", "join", "(", "base_dir", ",", "gif_filename", ")", ",", "fps", "=", "5.0", ")", "\n", "\n", "# Save instruction", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "instr_filename", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "                ", "fp", ".", "write", "(", "seg", "[", "0", "]", "[", "\"instruction\"", "]", ")", "\n", "\n", "\n", "", "", "print", "(", "\"ding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_amt_batch.landmarks_in_env": [[22, 26], ["data_io.env.get_landmark_locations_airsim", "env_config.definitions.landmarks.get_landmark_stage_name"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_stage_name"], ["def", "landmarks_in_env", "(", "env_id", ")", ":", "\n", "    ", "lm_names", ",", "lm_idx", ",", "lm_pos", "=", "get_landmark_locations_airsim", "(", "env_id", "=", "env_id", ")", "\n", "stage_names", "=", "[", "get_landmark_stage_name", "(", "l", ")", "for", "l", "in", "lm_names", "]", "\n", "return", "stage_names", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_amt_batch.build_landmark_html": [[27, 34], ["sorted", "int"], "function", ["None"], ["", "def", "build_landmark_html", "(", "stage_names", ")", ":", "\n", "    ", "html", "=", "\"\"", "\n", "# Assume the stage_names are numbers. Otherwise", "\n", "stage_ints", "=", "[", "int", "(", "s", ")", "for", "s", "in", "stage_names", "]", "\n", "for", "stage_int", "in", "sorted", "(", "stage_ints", ")", ":", "\n", "        ", "html", "+=", "f'<img src=\"{LANDMARK_DIR}{stage_int}.png\" class=\"landmark-image\" alt=\"ERROR! DO NOT SUBMIT!\"/>'", "\n", "", "return", "html", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_amt_batch.read_text_file": [[35, 42], ["open", "fp.readlines"], "function", ["None"], ["", "def", "read_text_file", "(", "text_file_path", ")", ":", "\n", "    ", "text", "=", "\"\"", "\n", "with", "open", "(", "text_file_path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "text", "+=", "line", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_amt_batch.generate_multiple_rollout_visualizations": [[43, 145], ["mains.eval.multiple_eval_rollout.setup_parameter_namespaces", "list", "random.shuffle", "random.shuffle", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "parameters.switch_to_namespace", "data_io.paths.get_eval_tmp_dataset_name", "os.path.join", "data_io.paths.get_amt_batch_dir", "os.path.join", "os.path.join", "os.makedirs", "os.listdir", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "parameters.get_current_parameters", "data_io.paths.get_rollout_viz_dir", "shutil.copytree", "len", "len", "gif_file.split", "seg_string.split", "generate_amt_batch.read_text_file", "generate_amt_batch.landmarks_in_env", "generate_amt_batch.build_landmark_html", "os.path.join", "os.path.join", "shutil.copy", "csv_rows.append", "id_map_rows.append", "csv.DictWriter.writerow", "csv.DictWriter.writerow", "csv.DictWriter.writerow", "csv.DictWriter.writerow", "data_io.paths.get_landmark_images_dir", "print", "f.endswith", "f.endswith", "int", "int", "int", "os.path.join"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.setup_parameter_namespaces", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_amt_batch_dir", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_viz_dir", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_amt_batch.read_text_file", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_amt_batch.landmarks_in_env", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_amt_batch.build_landmark_html", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_images_dir"], ["", "def", "generate_multiple_rollout_visualizations", "(", ")", ":", "\n", "    ", "params", ",", "system_namespaces", "=", "setup_parameter_namespaces", "(", ")", "\n", "csv_rows", "=", "[", "]", "\n", "id_map_rows", "=", "[", "]", "\n", "\n", "# Have a random ID for each example, so that AMT workers can't figure out which IDs correspond to which agent.", "\n", "unique_ids", "=", "list", "(", "range", "(", "10000", ")", ")", "\n", "random", ".", "shuffle", "(", "unique_ids", ")", "\n", "example_ordinal", "=", "0", "\n", "\n", "for", "system_namespace", "in", "system_namespaces", ":", "\n", "        ", "P", ".", "switch_to_namespace", "(", "system_namespace", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "dataset_name", "=", "get_eval_tmp_dataset_name", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"run_name\"", "]", ")", "\n", "base_dir", "=", "os", ".", "path", ".", "join", "(", "get_rollout_viz_dir", "(", ")", ",", "f\"{dataset_name}-{DOMAIN}\"", ")", "\n", "batch_out_dir", "=", "get_amt_batch_dir", "(", ")", "\n", "images_out_dir", "=", "os", ".", "path", ".", "join", "(", "batch_out_dir", ",", "\"rollout_animations\"", ")", "\n", "landmarks_out_dir", "=", "os", ".", "path", ".", "join", "(", "batch_out_dir", ",", "\"landmarks\"", ")", "\n", "os", ".", "makedirs", "(", "images_out_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Copy landmark images to the batch dir", "\n", "try", ":", "\n", "            ", "shutil", ".", "copytree", "(", "get_landmark_images_dir", "(", ")", ",", "landmarks_out_dir", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Failed to copy landmark images. Already did?\"", ")", "\n", "\n", "", "files", "=", "os", ".", "listdir", "(", "base_dir", ")", "\n", "gif_files", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "\"-roll.gif\"", ")", "]", "\n", "instr_files", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "\"-instr.txt\"", ")", "]", "\n", "assert", "len", "(", "gif_files", ")", "==", "len", "(", "instr_files", ")", "\n", "\n", "for", "gif_file", "in", "gif_files", ":", "\n", "            ", "example_id", "=", "unique_ids", "[", "example_ordinal", "]", "\n", "example_ordinal", "+=", "1", "\n", "\n", "# Collect required info about this example", "\n", "seg_string", ",", "domain", ",", "suffix", "=", "gif_file", ".", "split", "(", "\"-\"", ")", "\n", "env_id", ",", "set_idx", ",", "seg_idx", "=", "seg_string", ".", "split", "(", "\":\"", ")", "\n", "env_id", ",", "set_idx", ",", "seg_idx", "=", "int", "(", "env_id", ")", ",", "int", "(", "set_idx", ")", ",", "int", "(", "seg_idx", ")", "\n", "instr_file", "=", "f\"{env_id}:{set_idx}:{seg_idx}-{domain}-instr.txt\"", "\n", "instruction", "=", "read_text_file", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "instr_file", ")", ")", "\n", "\n", "lm_stage_names", "=", "landmarks_in_env", "(", "env_id", ")", "\n", "landmarks_html", "=", "build_landmark_html", "(", "lm_stage_names", ")", "\n", "\n", "old_gif_path", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "gif_file", ")", "\n", "new_gif_filename", "=", "f\"{example_id}.gif\"", "\n", "new_gif_local_path", "=", "os", ".", "path", ".", "join", "(", "images_out_dir", ",", "new_gif_filename", ")", "\n", "gif_url", "=", "BASE_URL", "+", "new_gif_filename", "\n", "\n", "# Copy the image to it's destination", "\n", "shutil", ".", "copy", "(", "old_gif_path", ",", "new_gif_local_path", ")", "\n", "\n", "# Create a row for AMT batch table", "\n", "amt_table_row", "=", "{", "\n", "\"id\"", ":", "example_id", ",", "\n", "\"image_url\"", ":", "gif_url", ",", "\n", "\"landmarks_html\"", ":", "landmarks_html", ",", "\n", "\"instruction\"", ":", "instruction", "\n", "}", "\n", "map_table_row", "=", "{", "\n", "\"id\"", ":", "example_id", ",", "\n", "\"agent\"", ":", "setup", "[", "\"run_name\"", "]", ",", "\n", "\"env_id\"", ":", "env_id", ",", "\n", "\"set_idx\"", ":", "set_idx", ",", "\n", "\"seg_idx\"", ":", "seg_idx", "\n", "}", "\n", "csv_rows", ".", "append", "(", "amt_table_row", ")", "\n", "id_map_rows", ".", "append", "(", "map_table_row", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "csv_rows", ")", "\n", "\n", "# Save the tables", "\n", "# CSV batch table", "\n", "amt_table_path", "=", "os", ".", "path", ".", "join", "(", "batch_out_dir", ",", "\"amt_human_eval_batch.csv\"", ")", "\n", "with", "open", "(", "amt_table_path", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "CSV_KEYS", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "csv_rows", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "amt_sandbox_table_path", "=", "os", ".", "path", ".", "join", "(", "batch_out_dir", ",", "\"amt_human_eval_batch_sandbox.csv\"", ")", "\n", "with", "open", "(", "amt_sandbox_table_path", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "CSV_KEYS", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "csv_rows", "[", "100", ":", "599", "]", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "amt_tiny_table_path", "=", "os", ".", "path", ".", "join", "(", "batch_out_dir", ",", "\"amt_human_eval_batch_tinytrial.csv\"", ")", "\n", "with", "open", "(", "amt_tiny_table_path", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "CSV_KEYS", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "csv_rows", "[", "0", ":", "20", "]", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "# Reverse mapping table", "\n", "", "", "id_mapping_path", "=", "os", ".", "path", ".", "join", "(", "batch_out_dir", ",", "\"id_map.csv\"", ")", "\n", "with", "open", "(", "id_mapping_path", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "ID_MAP_KEYS", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "id_map_rows", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.browse_pvn_dataset.browse_pvn_dataset": [[9, 41], ["parameters.initialize_experiment", "data_io.models.load_model", "print", "data_io.instructions.get_restricted_env_id_lists", "model_sim.get_dataset", "visualization.Presenter", "parameters.get_current_parameters", "parameters.get_current_parameters", "print", "print", "len", "range", "print", "visualization.Presenter.show_image", "visualization.Presenter.plot_pts_on_torch_image", "lm_fpv_i.long"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_pts_on_torch_image"], ["def", "browse_pvn_dataset", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "model_sim", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"sim_model_file\"", "]", ",", "domain", "=", "\"sim\"", ")", "\n", "data_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Training\"", "]", "\n", "\n", "print", "(", "\"Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "#dom=\"real\"", "\n", "dom", "=", "\"sim\"", "\n", "\n", "dataset", "=", "model_sim", ".", "get_dataset", "(", "data", "=", "None", ",", "envs", "=", "train_envs", ",", "domain", "=", "dom", ",", "dataset_names", "=", "data_params", "[", "f\"{dom}_dataset_names\"", "]", ",", "\n", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "False", ",", "halfway_only", "=", "False", ")", "\n", "\n", "p", "=", "Presenter", "(", ")", "\n", "\n", "for", "example", "in", "dataset", ":", "\n", "        ", "if", "example", "is", "None", ":", "\n", "            ", "continue", "\n", "", "md", "=", "example", "[", "\"md\"", "]", "[", "0", "]", "\n", "print", "(", "f\"Showing example: {md['env_id']}:{md['set_idx']}:{md['seg_idx']}\"", ")", "\n", "print", "(", "f\"  instruction: {md['instruction']}\"", ")", "\n", "exec_len", "=", "len", "(", "example", "[", "\"images\"", "]", ")", "\n", "for", "i", "in", "range", "(", "exec_len", ")", ":", "\n", "            ", "print", "(", "f\"   timestep: {i}\"", ")", "\n", "img_i", "=", "example", "[", "\"images\"", "]", "[", "i", "]", "\n", "lm_fpv_i", "=", "example", "[", "\"lm_pos_fpv\"", "]", "[", "i", "]", "\n", "if", "lm_fpv_i", "is", "not", "None", ":", "\n", "                ", "img_i", "=", "p", ".", "plot_pts_on_torch_image", "(", "img_i", ",", "lm_fpv_i", ".", "long", "(", ")", ")", "\n", "", "p", ".", "show_image", "(", "img_i", ",", "\"fpv_img_i\"", ",", "scale", "=", "4", ",", "waitkey", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.gen_gsmn_sim_real_html.start_document": [[12, 16], ["yattag.Doc().tagtext", "doc.asis", "yattag.Doc"], "function", ["None"], ["def", "start_document", "(", ")", ":", "\n", "    ", "doc", ",", "tag", ",", "text", "=", "yattag", ".", "Doc", "(", ")", ".", "tagtext", "(", ")", "\n", "doc", ".", "asis", "(", "'<!DOCTYPE html>'", ")", "\n", "return", "doc", ",", "tag", ",", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.gen_gsmn_sim_real_html.gen_grid_html_with_images": [[17, 49], ["max", "tag", "len", "tag", "len", "tag", "text", "tag", "tag", "range", "tag", "tag", "tag", "tag", "tag", "text", "len", "tag", "tag"], "function", ["None"], ["", "def", "gen_grid_html_with_images", "(", "doc", ",", "tag", ",", "text", ",", "title", ",", "header", ",", "column_data", ")", ":", "\n", "    ", "num_rows", "=", "max", "(", "[", "len", "(", "c", ")", "for", "c", "in", "column_data", "]", ")", "\n", "\n", "with", "tag", "(", "'html'", ")", ":", "\n", "        ", "with", "tag", "(", "'body'", ")", ":", "\n", "            ", "numcols", "=", "len", "(", "header", ")", "\n", "with", "tag", "(", "\"h1\"", ")", ":", "\n", "                ", "text", "(", "title", ")", "\n", "", "with", "tag", "(", "\"br\"", ")", ":", "\n", "                ", "pass", "\n", "", "with", "tag", "(", "'table'", ",", "border", "=", "\"1\"", ",", "cellpadding", "=", "\"5\"", ",", "cellspacing", "=", "\"5\"", ",", "width", "=", "\"100%\"", ")", ":", "\n", "# Create the table header", "\n", "                ", "with", "tag", "(", "\"tr\"", ")", ":", "\n", "                    ", "for", "colname", "in", "header", ":", "\n", "                        ", "with", "tag", "(", "\"th\"", ")", ":", "\n", "                            ", "text", "(", "colname", ")", "\n", "\n", "# Create rows", "\n", "", "", "", "for", "i", "in", "range", "(", "num_rows", ")", ":", "\n", "                    ", "with", "tag", "(", "\"tr\"", ")", ":", "\n", "# In each row, create cells with the correct contents", "\n", "                        ", "for", "column", "in", "column_data", ":", "\n", "                            ", "if", "i", "<", "len", "(", "column", ")", ":", "\n", "                                ", "path", "=", "column", "[", "i", "]", "\n", "", "else", ":", "\n", "                                ", "path", "=", "\"\"", "\n", "", "with", "tag", "(", "\"td\"", ")", ":", "\n", "                                ", "with", "tag", "(", "\"img\"", ",", "(", "\"width\"", ",", "\"200px\"", ")", ",", "src", "=", "path", ")", ":", "pass", "\n", "", "", "", "", "", "with", "tag", "(", "\"br\"", ")", ":", "\n", "                ", "pass", "\n", "", "with", "tag", "(", "\"br\"", ")", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.gen_gsmn_sim_real_html.end_document": [[51, 53], ["doc.getvalue"], "function", ["None"], ["", "", "", "", "def", "end_document", "(", "doc", ",", "tag", ",", "text", ")", ":", "\n", "    ", "return", "doc", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.gen_gsmn_sim_real_html.find_file_groups": [[55, 60], ["list", "filter", "f.split", "re.compile"], "function", ["None"], ["", "def", "find_file_groups", "(", "filename_list", ")", ":", "\n", "    ", "regexp", "=", "\"[A-Za-z_]*1\\.png\"", "\n", "first_files", "=", "list", "(", "filter", "(", "re", ".", "compile", "(", "regexp", ")", ".", "match", ",", "filename_list", ")", ")", "\n", "groups", "=", "[", "f", ".", "split", "(", "\"1\"", ")", "[", "0", "]", "for", "f", "in", "first_files", "]", "\n", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_multiple_rollout_amt_visualizations.generate_multiple_rollout_visualizations": [[7, 13], ["mains.eval.multiple_eval_rollout.setup_parameter_namespaces", "parameters.switch_to_namespace", "mains.analysis.generate_rollout_amt_visualizations.generate_rollout_amt_visualizations"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.setup_parameter_namespaces", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_amt_visualizations.generate_rollout_amt_visualizations"], ["def", "generate_multiple_rollout_visualizations", "(", ")", ":", "\n", "    ", "params", ",", "system_namespaces", "=", "setup_parameter_namespaces", "(", ")", "\n", "\n", "for", "system_namespace", "in", "system_namespaces", ":", "\n", "        ", "P", ".", "switch_to_namespace", "(", "system_namespace", ")", "\n", "generate_rollout_amt_visualizations", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_multiple_rollout_debug_visualizations.generate_multiple_rollout_visualizations": [[7, 13], ["mains.eval.multiple_eval_rollout.setup_parameter_namespaces", "parameters.switch_to_namespace", "mains.analysis.generate_rollout_debug_visualizations.generate_rollout_debug_visualizations"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.setup_parameter_namespaces", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.analysis.generate_rollout_debug_visualizations.generate_rollout_debug_visualizations"], ["def", "generate_multiple_rollout_visualizations", "(", ")", ":", "\n", "    ", "params", ",", "system_namespaces", "=", "setup_parameter_namespaces", "(", ")", "\n", "\n", "for", "system_namespace", "in", "system_namespaces", ":", "\n", "        ", "P", ".", "switch_to_namespace", "(", "system_namespace", ")", "\n", "generate_rollout_debug_visualizations", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.sample_real_data_subset.sample_real_data_subset": [[12, 50], ["parameters.initialize_experiment", "set", "list", "random.sample", "group_envs_rel.items", "print", "print", "data_io.instructions.get_restricted_env_id_lists", "list.add", "list", "data_io.instructions.get_restricted_env_id_lists", "int", "random.randint", "env_ids_out.append", "sorted", "group_envs_rel[].append", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "sample_real_data_subset", "(", ")", ":", "\n", "    ", "global", "env_list", ",", "num_env_groups", "\n", "P", ".", "initialize_experiment", "(", ")", "\n", "if", "env_list", "==", "\"DEV\"", ":", "\n", "        ", "train_i", ",", "dev_i", ",", "test_i", "=", "get_restricted_env_id_lists", "(", ")", "\n", "env_list", "=", "dev_i", "\n", "", "elif", "env_list", "==", "\"TEST\"", ":", "\n", "        ", "train_i", ",", "dev_i", ",", "test_i", "=", "get_restricted_env_id_lists", "(", ")", "\n", "env_list", "=", "test_i", "\n", "\n", "# Each 5 subsequent environments are the same. First sample groups, then sample environments", "\n", "", "groups", "=", "set", "(", ")", "\n", "for", "env", "in", "env_list", ":", "\n", "        ", "groups", ".", "add", "(", "int", "(", "env", "/", "5", ")", ")", "\n", "\n", "", "groups", "=", "list", "(", "groups", ")", "\n", "group_envs_rel", "=", "{", "}", "\n", "pick_groups", "=", "random", ".", "sample", "(", "groups", ",", "num_env_groups", ")", "\n", "for", "group", "in", "pick_groups", ":", "\n", "        ", "group_envs_rel", "[", "group", "]", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "envs_each_group", ":", "\n", "            ", "rint", "=", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "if", "rint", "not", "in", "group_envs_rel", "[", "group", "]", ":", "\n", "                ", "group_envs_rel", "[", "group", "]", ".", "append", "(", "rint", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "# Retry this loop iteration", "\n", "                ", "continue", "\n", "\n", "", "", "", "env_ids_out", "=", "[", "]", "\n", "for", "group", ",", "env_rels", "in", "group_envs_rel", ".", "items", "(", ")", ":", "\n", "        ", "for", "env_rel", "in", "env_rels", ":", "\n", "            ", "env_id", "=", "group", "*", "5", "+", "env_rel", "\n", "env_ids_out", ".", "append", "(", "env_id", ")", "\n", "\n", "", "", "print", "(", "f\"Sampled {len(env_ids_out)} envs:\"", ")", "\n", "print", "(", "list", "(", "sorted", "(", "env_ids_out", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate.query_user_load_discard": [[19, 35], ["print", "print", "print", "print", "print", "input", "print"], "function", ["None"], ["def", "query_user_load_discard", "(", "pth", ")", ":", "\n", "    ", "print", "(", "f\"Dataset exists at: {pth}\"", ")", "\n", "print", "(", "\"You have options:\"", ")", "\n", "print", "(", "\"Load this dataset and continue evaluation (Y/y)\"", ")", "\n", "print", "(", "\"Discard dataset and start new evaluation  (D/d)\"", ")", "\n", "print", "(", "\"Cancel (N/n/C/c)\"", ")", "\n", "while", "True", ":", "\n", "        ", "char", "=", "input", "(", "\">>>>\"", ")", "\n", "if", "char", "in", "[", "\"Y\"", ",", "\"y\"", "]", ":", "\n", "            ", "return", "\"load\"", "\n", "", "elif", "char", "in", "[", "\"D\"", ",", "\"d\"", "]", ":", "\n", "            ", "return", "\"discard\"", "\n", "", "elif", "char", "in", "[", "\"N\"", ",", "\"n\"", ",", "\"C\"", ",", "\"c\"", "]", ":", "\n", "            ", "return", "\"cancel\"", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"Unrecognized input: {char}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate.evaluate": [[37, 155], ["parameters.initialize_experiment", "parameters.get_current_parameters", "range", "list", "[].get", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly().setDebug().setCuda().setRealDrone", "print", "data_io.models.load_model", "models.append", "sorted", "tuple", "print", "print", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly().setDebug().setCuda().setRealDrone.setEnvList", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly().setDebug().setCuda().setRealDrone.setSegList", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly().setDebug().setCuda().setRealDrone.setCustomInstructions", "rollout.parallel_roll_out.ParallelPolicyRoller", "rollout.roll_out.PolicyRoller", "data_io.paths.get_eval_tmp_dataset_name", "data_io.paths.get_dataset_dir", "os.path.exists", "os.makedirs", "set", "setup.get", "range", "rollout.roll_out.PolicyRoller.roll_out_policy", "evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "evaluation.evaluate_nl.DataEvalNL", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "data_io.instructions.get_correct_eval_env_id_list", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly().setDebug().setCuda", "map", "evaluate.query_user_load_discard", "len", "min", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly().setDebug().setCuda().setRealDrone.setEnvList", "rollout.roll_out.PolicyRoller.roll_out_policy", "print", "parameters.get_current_parameters", "list", "print", "data_io.train_data.load_multiple_env_data_from_dir", "len", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly().setDebug", "list", "zip", "print", "shutil.rmtree", "len", "print", "print", "len", "len", "data_io.train_data.save_dataset_to_path", "len", "data_io.train_data.save_dataset_to_path", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel().setFirstSegmentOnly", "os.path.join", "os.path.join", "str", "str", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset().setSegmentLevel", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData().setSegmentReset", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples().setBuildTrainData", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson().setSaveSamples", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots().setRealtimeFirstPerson", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir().setSavePlots", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop().setPlotDir", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction().setIgnorePolicyStop", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot().setShowAction", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop().setPlot", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon().setStepsToForceStop", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation().setHorizon", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList().setMaxDeviation", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setEnvList", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName", "parameters.get_setup_name", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile", "rollout.roll_out_params.RollOutParams().setModelName", "rollout.roll_out_params.RollOutParams"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRealDrone", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegList", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCustomInstructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_policy", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_correct_eval_env_id_list", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCuda", "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.query_user_load_discard", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_policy", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_multiple_env_data_from_dir", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setDebug", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset_to_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset_to_path", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setFirstSegmentOnly", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentLevel", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentReset", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setBuildTrainData", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSaveSamples", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRealtimeFirstPerson", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSavePlots", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setPlotDir", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setIgnorePolicyStop", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setShowAction", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setPlot", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setStepsToForceStop", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setHorizon", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setMaxDeviation", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSetupName", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_setup_name", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRunName", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelFile", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelName"], ["", "", "", "def", "evaluate", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "params", "=", "P", ".", "get_current_parameters", "(", ")", "\n", "setup", "=", "params", "[", "\"Setup\"", "]", "\n", "\n", "models", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "setup", "[", "\"num_workers\"", "]", ")", ":", "\n", "        ", "model", ",", "model_loaded", "=", "load_model", "(", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "\n", "", "eval_envs", "=", "list", "(", "sorted", "(", "get_correct_eval_env_id_list", "(", ")", ")", ")", "\n", "\n", "round_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", ".", "get", "(", "\"collect_n_at_a_time\"", ")", "\n", "\n", "# TODO: Scrap RollOutParams and use parameter server JSON params instead", "\n", "roll_out_params", "=", "RollOutParams", "(", ")", ".", "setModelName", "(", "setup", "[", "\"model\"", "]", ")", ".", "setModelFile", "(", "setup", "[", "\"model_file\"", "]", ")", ".", "setRunName", "(", "setup", "[", "\"run_name\"", "]", ")", ".", "setSetupName", "(", "P", ".", "get_setup_name", "(", ")", ")", ".", "setEnvList", "(", "eval_envs", ")", ".", "setMaxDeviation", "(", "800", ")", ".", "setHorizon", "(", "setup", "[", "\"trajectory_length\"", "]", ")", ".", "setStepsToForceStop", "(", "20", ")", ".", "setPlot", "(", "False", ")", ".", "setShowAction", "(", "False", ")", ".", "setIgnorePolicyStop", "(", "False", ")", ".", "setPlotDir", "(", "\"evaluate/\"", "+", "setup", "[", "\"run_name\"", "]", ")", ".", "setSavePlots", "(", "False", ")", ".", "setRealtimeFirstPerson", "(", "False", ")", ".", "setSaveSamples", "(", "False", ")", ".", "setBuildTrainData", "(", "False", ")", ".", "setSegmentReset", "(", "\"always\"", ")", ".", "setSegmentLevel", "(", "False", ")", ".", "setFirstSegmentOnly", "(", "False", ")", ".", "setDebug", "(", "setup", "[", "\"debug\"", "]", ")", ".", "setCuda", "(", "setup", "[", "\"cuda\"", "]", ")", ".", "setRealDrone", "(", "setup", "[", "\"real_drone\"", "]", ")", "\n", "\n", "custom_eval", "=", "\"Eval\"", "in", "params", "and", "params", "[", "\"Eval\"", "]", "[", "\"custom_eval\"", "]", "\n", "instructions", "=", "None", "\n", "if", "custom_eval", ":", "\n", "        ", "examples", "=", "params", "[", "\"Eval\"", "]", "[", "\"examples\"", "]", "\n", "eval_envs", ",", "eval_sets", ",", "eval_segs", ",", "instructions", "=", "tuple", "(", "map", "(", "lambda", "m", ":", "list", "(", "m", ")", ",", "list", "(", "zip", "(", "*", "examples", ")", ")", ")", ")", "\n", "print", "(", "\"!! Running custom evaluation with the following setup:\"", ")", "\n", "print", "(", "examples", ")", "\n", "roll_out_params", ".", "setEnvList", "(", "eval_envs", ")", "\n", "roll_out_params", ".", "setSegList", "(", "eval_segs", ")", "\n", "roll_out_params", ".", "setCustomInstructions", "(", "instructions", ")", "\n", "\n", "", "if", "setup", "[", "\"num_workers\"", "]", ">", "1", ":", "\n", "        ", "roller", "=", "ParallelPolicyRoller", "(", "num_workers", "=", "setup", "[", "\"num_workers\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "roller", "=", "PolicyRoller", "(", ")", "\n", "\n", "", "if", "round_size", ":", "\n", "        ", "eval_dataset_name", "=", "data_io", ".", "paths", ".", "get_eval_tmp_dataset_name", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"run_name\"", "]", ")", "\n", "eval_dataset_path", "=", "data_io", ".", "paths", ".", "get_dataset_dir", "(", "eval_dataset_name", ")", "\n", "\n", "cumulative_dataset", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "eval_dataset_path", ")", ":", "\n", "            ", "result", "=", "query_user_load_discard", "(", "eval_dataset_path", ")", "\n", "if", "result", "==", "\"load\"", ":", "\n", "                ", "print", "(", "\"Loading dataset and continuing evaluation\"", ")", "\n", "cumulative_dataset", "=", "load_multiple_env_data_from_dir", "(", "eval_dataset_path", ")", "\n", "", "elif", "result", "==", "\"discard\"", ":", "\n", "                ", "print", "(", "\"Discarding existing evaluation data\"", ")", "\n", "shutil", ".", "rmtree", "(", "eval_dataset_path", ")", "\n", "", "elif", "result", "==", "\"cancel\"", ":", "\n", "                ", "print", "(", "\"Cancelling evaluation\"", ")", "\n", "return", "\n", "\n", "", "", "os", ".", "makedirs", "(", "eval_dataset_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "collected_envs", "=", "set", "(", "[", "rollout", "[", "0", "]", "[", "\"env_id\"", "]", "for", "rollout", "in", "cumulative_dataset", "if", "len", "(", "rollout", ")", ">", "0", "]", ")", "\n", "eval_envs", "=", "[", "e", "for", "e", "in", "eval_envs", "if", "e", "not", "in", "collected_envs", "]", "\n", "if", "setup", ".", "get", "(", "\"compute_results_no_rollout\"", ",", "False", ")", ":", "\n", "            ", "eval_envs", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "eval_envs", ")", ",", "round_size", ")", ":", "\n", "            ", "j", "=", "min", "(", "len", "(", "eval_envs", ")", ",", "i", "+", "round_size", ")", "\n", "round_envs", "=", "eval_envs", "[", "i", ":", "j", "]", "\n", "roll_out_params", ".", "setEnvList", "(", "round_envs", ")", "\n", "dataset", "=", "roller", ".", "roll_out_policy", "(", "roll_out_params", ")", "\n", "\n", "# Save this data", "\n", "for", "rollout", "in", "dataset", ":", "\n", "                ", "if", "len", "(", "rollout", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\"WARNING! DROPPING EMPTY ROLLOUTS! SHOULDN'T DO THIS\"", ")", "\n", "continue", "\n", "## rollout is a list of samples:", "\n", "", "env_id", "=", "rollout", "[", "0", "]", "[", "\"env_id\"", "]", "if", "\"metadata\"", "in", "rollout", "[", "0", "]", "else", "rollout", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "if", "True", ":", "\n", "                    ", "if", "len", "(", "rollout", ")", ">", "0", ":", "\n", "                        ", "save_dataset_to_path", "(", "os", ".", "path", ".", "join", "(", "eval_dataset_path", ",", "str", "(", "env_id", ")", ")", ",", "rollout", ")", "\n", "## rollout is a list of segments, each is a list of samples", "\n", "", "", "else", ":", "\n", "                    ", "if", "len", "(", "rollout", ")", ">", "0", ":", "\n", "                        ", "save_dataset_to_path", "(", "os", ".", "path", ".", "join", "(", "eval_dataset_path", ",", "str", "(", "env_id", ")", ")", ",", "rollout", ")", "\n", "\n", "", "", "", "cumulative_dataset", "+=", "dataset", "\n", "print", "(", "f\"Saved cumulative dataset to: {eval_dataset_path}\"", ")", "\n", "\n", "", "dataset", "=", "cumulative_dataset", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "roller", ".", "roll_out_policy", "(", "roll_out_params", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "if", "setup", "[", "\"eval_landmark_side\"", "]", ":", "\n", "        ", "evaler", "=", "DataEvalLandmarkSide", "(", "setup", "[", "\"run_name\"", "]", ",", "save_images", "=", "True", ",", "world_size", "=", "setup", "[", "\"world_size_m\"", "]", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "dataset", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "", "if", "setup", "[", "\"eval_nl\"", "]", ":", "\n", "        ", "evaler", "=", "DataEvalNL", "(", "setup", "[", "\"run_name\"", "]", ",", "save_images", "=", "True", ",", "entire_trajectory", "=", "False", ",", "custom_instr", "=", "instructions", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "dataset", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "\n", "", "print", "(", "\"Results:\"", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.query_user_load_discard": [[15, 31], ["print", "print", "print", "print", "print", "input", "print"], "function", ["None"], ["def", "query_user_load_discard", "(", "pth", ")", ":", "\n", "    ", "print", "(", "f\"Dataset exists at: {pth}\"", ")", "\n", "print", "(", "\"You have options:\"", ")", "\n", "print", "(", "\"Load this dataset and continue evaluation (Y/y)\"", ")", "\n", "print", "(", "\"Discard dataset and start new evaluation  (D/d)\"", ")", "\n", "print", "(", "\"Cancel (N/n/C/c)\"", ")", "\n", "while", "True", ":", "\n", "        ", "char", "=", "input", "(", "\">>>>\"", ")", "\n", "if", "char", "in", "[", "\"Y\"", ",", "\"y\"", "]", ":", "\n", "            ", "return", "\"load\"", "\n", "", "elif", "char", "in", "[", "\"D\"", ",", "\"d\"", "]", ":", "\n", "            ", "return", "\"discard\"", "\n", "", "elif", "char", "in", "[", "\"N\"", ",", "\"n\"", ",", "\"C\"", ",", "\"c\"", "]", ":", "\n", "            ", "return", "\"cancel\"", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"Unrecognized input: {char}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.env_data_already_collected": [[33, 38], ["data_io.paths.get_eval_tmp_dataset_name", "data_io.paths.get_dataset_dir", "os.path.join", "os.path.isfile", "data_io.train_data.get_supervised_data_filename"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_supervised_data_filename"], ["", "", "", "def", "env_data_already_collected", "(", "env_id", ",", "model_name", ",", "run_name", ")", ":", "\n", "    ", "dname", "=", "get_eval_tmp_dataset_name", "(", "model_name", ",", "run_name", ")", "\n", "dataset_path", "=", "get_dataset_dir", "(", "dname", ")", "\n", "data_file", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "get_supervised_data_filename", "(", "env_id", ")", ")", "\n", "return", "os", ".", "path", ".", "isfile", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.check_and_prompt_if_data_exists": [[40, 63], ["parameters.switch_to_namespace", "data_io.paths.get_eval_tmp_dataset_name", "data_io.paths.get_dataset_dir", "os.path.exists", "len", "print", "print", "print", "parameters.get_current_parameters", "existing_datasets.append", "input", "print", "sys.exit", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "check_and_prompt_if_data_exists", "(", "system_namespaces", ")", ":", "\n", "    ", "existing_datasets", "=", "[", "]", "\n", "for", "namespace", "in", "system_namespaces", ":", "\n", "        ", "P", ".", "switch_to_namespace", "(", "namespace", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "dname", "=", "get_eval_tmp_dataset_name", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"run_name\"", "]", ")", "\n", "dpath", "=", "get_dataset_dir", "(", "dname", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dpath", ")", ":", "\n", "            ", "existing_datasets", ".", "append", "(", "dname", ")", "\n", "\n", "", "", "if", "len", "(", "existing_datasets", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"The following evaluation rollout datasets already exist:\"", ")", "\n", "print", "(", "existing_datasets", ")", "\n", "print", "(", "\"Do you want to continue evaluation and extend these datasets?\"", ")", "\n", "while", "True", ":", "\n", "            ", "char", "=", "input", "(", "\"(y/n)>>>>\"", ")", "\n", "if", "char", "in", "[", "\"Y\"", ",", "\"y\"", "]", ":", "\n", "                ", "return", "\n", "", "elif", "char", "in", "[", "\"N\"", ",", "\"n\"", "]", ":", "\n", "                ", "print", "(", "\"You may delete/move the existing datasets and run again!\"", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"Unrecognized input: {char}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.setup_parameter_namespaces": [[65, 85], ["parameters.load_parameters", "parameters.log_experiment_start", "parameters.load_parameters", "utils.dict_tools.dict_merge", "parameters.set_parameters_for_namespace", "system_namespaces.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.load_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.log_experiment_start", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.load_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.set_parameters_for_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "", "", "def", "setup_parameter_namespaces", "(", ")", ":", "\n", "    ", "global_params", "=", "P", ".", "load_parameters", "(", "None", ")", "\n", "systems_params", "=", "global_params", "[", "\"MultipleEval\"", "]", "[", "\"SystemsParams\"", "]", "\n", "setup_overlay", "=", "global_params", "[", "\"MultipleEval\"", "]", "[", "\"SetupOverlay\"", "]", "\n", "\n", "# ----------------------------------------------------------------------------------------", "\n", "# Initialize systems", "\n", "# ----------------------------------------------------------------------------------------", "\n", "\n", "# Set up parameters for each system that will be evaluated", "\n", "system_namespaces", "=", "[", "]", "\n", "for", "system_params", "in", "systems_params", ":", "\n", "        ", "namespace", "=", "system_params", "[", "\"param_namespace\"", "]", "\n", "local_params", "=", "P", ".", "load_parameters", "(", "system_params", "[", "\"param_file\"", "]", ")", "\n", "local_params", "[", "\"Setup\"", "]", "=", "dict_merge", "(", "local_params", "[", "\"Setup\"", "]", ",", "setup_overlay", ")", "\n", "P", ".", "set_parameters_for_namespace", "(", "local_params", ",", "namespace", ")", "\n", "system_namespaces", ".", "append", "(", "namespace", ")", "\n", "\n", "", "P", ".", "log_experiment_start", "(", "global_params", "[", "\"MultipleEval\"", "]", "[", "\"run_name\"", "]", ")", "\n", "return", "global_params", ",", "system_namespaces", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.multiple_eval_rollout": [[87, 152], ["multiple_eval_rollout.setup_parameter_namespaces", "multiple_eval_rollout.check_and_prompt_if_data_exists", "rollout.simple_rollout.SimplePolicyRoller", "list", "print", "parameters.switch_to_namespace", "data_io.models.load_model", "policies.append", "sorted", "data_io.instructions.get_segs_available_for_env", "print", "enumerate", "parameters.get_current_parameters", "data_io.instructions.get_correct_eval_env_id_list", "len", "len", "print", "zip", "print", "parameters.switch_to_namespace", "multiple_eval_rollout.env_data_already_collected", "data_io.paths.get_eval_tmp_dataset_name", "rollout.simple_rollout.SimplePolicyRoller.set_policy", "rollout.simple_rollout.SimplePolicyRoller.rollout_segments", "print", "parameters.get_current_parameters", "print", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.setup_parameter_namespaces", "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.check_and_prompt_if_data_exists", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_segs_available_for_env", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_correct_eval_env_id_list", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.env_data_already_collected", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.set_policy", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.rollout_segments", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "multiple_eval_rollout", "(", ")", ":", "\n", "\n", "    ", "params", ",", "system_namespaces", "=", "setup_parameter_namespaces", "(", ")", "\n", "setup_overlay", "=", "params", "[", "\"MultipleEval\"", "]", "[", "\"SetupOverlay\"", "]", "\n", "domain", "=", "\"real\"", "if", "setup_overlay", "[", "\"real_drone\"", "]", "else", "\"sim\"", "\n", "one_at_a_time", "=", "params", "[", "\"MultipleEval\"", "]", "[", "\"one_at_a_time\"", "]", "\n", "check_and_prompt_if_data_exists", "(", "system_namespaces", ")", "\n", "\n", "# Load the systems", "\n", "# TODO: Check how many can fit in GPU memory. If not too many, perhaps we can move them off-GPU between rounds", "\n", "policies", "=", "[", "]", "\n", "for", "system_namespace", "in", "system_namespaces", ":", "\n", "        ", "P", ".", "switch_to_namespace", "(", "system_namespace", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "policy", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"model_file\"", "]", ",", "domain", ")", "\n", "policies", ".", "append", "(", "policy", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------", "\n", "# Initialize Roller", "\n", "# ----------------------------------------------------------------------------------------", "\n", "", "policy_roller", "=", "SimplePolicyRoller", "(", "\n", "instance_id", "=", "7", ",", "\n", "real_drone", "=", "setup_overlay", "[", "\"real_drone\"", "]", ",", "\n", "policy", "=", "None", ",", "\n", "oracle", "=", "None", ",", "\n", "no_reward", "=", "True", "\n", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------", "\n", "# Collect rollouts", "\n", "# ----------------------------------------------------------------------------------------", "\n", "\n", "eval_envs", "=", "list", "(", "sorted", "(", "get_correct_eval_env_id_list", "(", ")", ")", ")", "\n", "count", "=", "0", "\n", "\n", "# Loop over environments", "\n", "for", "env_id", "in", "eval_envs", ":", "\n", "        ", "seg_ids", "=", "get_segs_available_for_env", "(", "env_id", ",", "0", ")", "\n", "env_ids", "=", "[", "env_id", "]", "*", "len", "(", "seg_ids", ")", "\n", "print", "(", "\"Beginning rollouts for env: {env_id}\"", ")", "\n", "if", "len", "(", "seg_ids", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"   NO SEGMENTS! Next...\"", ")", "\n", "continue", "\n", "\n", "# Loop over systems and save data", "\n", "", "for", "i", ",", "(", "policy", ",", "system_namespace", ")", "in", "enumerate", "(", "zip", "(", "policies", ",", "system_namespaces", ")", ")", ":", "\n", "            ", "print", "(", "f\"Rolling policy in namespace {system_namespace} for env: {env_id}\"", ")", "\n", "P", ".", "switch_to_namespace", "(", "system_namespace", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "if", "env_data_already_collected", "(", "env_id", ",", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"run_name\"", "]", ")", ":", "\n", "                ", "print", "(", "f\"Skipping env_id: {env_id}, policy: {setup['model']}\"", ")", "\n", "continue", "\n", "\n", "", "eval_dataset_name", "=", "get_eval_tmp_dataset_name", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"run_name\"", "]", ")", "\n", "policy_roller", ".", "set_policy", "(", "policy", ")", "\n", "# when the last policy is done, we should land the drone", "\n", "policy_roller", ".", "rollout_segments", "(", "env_ids", ",", "seg_ids", ",", "None", ",", "False", ",", "0", ",", "save_dataset_name", "=", "eval_dataset_name", ",", "\n", "rl_rollout", "=", "False", ",", "land_afterwards", "=", "(", "i", "==", "len", "(", "policies", ")", "-", "1", ")", ")", "\n", "count", "+=", "1", "\n", "\n", "", "if", "one_at_a_time", "and", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Stopping. Run again to roll-out on the next environment!\"", ")", "\n", "break", "\n", "\n", "", "", "print", "(", "\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_multiple_saved_rollouts.evaluate_multiple_saved_rollouts": [[7, 17], ["mains.eval.multiple_eval_rollout.setup_parameter_namespaces", "parameters.switch_to_namespace", "mains.eval.evaluate_saved_rollouts.evaluate_saved_rollouts"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.eval.multiple_eval_rollout.setup_parameter_namespaces", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.evaluate_saved_rollouts"], ["def", "evaluate_multiple_saved_rollouts", "(", ")", ":", "\n", "    ", "params", ",", "system_namespaces", "=", "setup_parameter_namespaces", "(", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------", "\n", "# Initialize systems", "\n", "# ----------------------------------------------------------------------------------------", "\n", "\n", "for", "system_namespace", "in", "system_namespaces", ":", "\n", "        ", "P", ".", "switch_to_namespace", "(", "system_namespace", ")", "\n", "evaluate_saved_rollouts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.generate_path_prediction_overlays.train_supervised_bidomain": [[10, 61], ["parameters.initialize_experiment", "data_io.models.load_model", "data_io.models.load_model", "data_io.models.load_model", "print", "data_io.instructions.get_restricted_env_id_lists", "setup.get", "setup.get", "setup.get", "learning.training.trainer_supervised_bidomain.TrainerBidomain", "learning.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch", "parameters.get_current_parameters", "print", "data_io.models.load_model", "model_sim.set_save_path_overlays", "model_real.print_metrics", "model_sim.print_metrics", "print", "data_io.models.load_model", "model_real.set_save_path_overlays", "model_real.set_save_path_overlays", "model_sim.set_save_path_overlays", "print", "ValueError"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.set_save_path_overlays", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.print_metrics", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.print_metrics", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.set_save_path_overlays", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.set_save_path_overlays", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.set_save_path_overlays"], ["def", "train_supervised_bidomain", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "model_sim", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"sim_model_file\"", "]", ",", "domain", "=", "\"sim\"", ")", "\n", "model_real", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"real_model_file\"", "]", ",", "domain", "=", "\"real\"", ")", "\n", "model_critic", ",", "_", "=", "load_model", "(", "setup", "[", "\"critic_model\"", "]", ",", "setup", "[", "\"critic_model_file\"", "]", ")", "\n", "\n", "print", "(", "\"Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "env_list_name", "=", "setup", ".", "get", "(", "\"eval_env_set\"", ",", "\"dev\"", ")", "\n", "if", "env_list_name", "==", "\"dev\"", ":", "\n", "        ", "print", "(", "\"Using DEV envs\"", ")", "\n", "use_envs", "=", "dev_envs", "\n", "", "elif", "env_list_name", "==", "\"train\"", ":", "\n", "        ", "print", "(", "\"Using TRAIN envs\"", ")", "\n", "use_envs", "=", "train_envs", "\n", "", "elif", "env_list_name", "==", "\"test\"", ":", "\n", "        ", "print", "(", "\"Using TEST envs\"", ")", "\n", "use_envs", "=", "test_envs", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown env set {env_list_name}\"", ")", "\n", "\n", "", "env_range_start", "=", "setup", ".", "get", "(", "\"env_range_start\"", ")", "\n", "if", "env_range_start", ">", "0", ":", "\n", "        ", "use_envs", "=", "[", "e", "for", "e", "in", "use_envs", "if", "e", ">=", "env_range_start", "]", "\n", "", "env_range_end", "=", "setup", ".", "get", "(", "\"env_range_end\"", ")", "\n", "if", "env_range_end", ">", "0", ":", "\n", "        ", "use_envs", "=", "[", "e", "for", "e", "in", "use_envs", "if", "e", "<", "env_range_end", "]", "\n", "\n", "", "restricted_domain", "=", "\"simulator\"", "\n", "if", "restricted_domain", "==", "\"simulator\"", ":", "\n", "# Load dummy model for real domain", "\n", "        ", "model_real", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"sim_model_file\"", "]", ",", "domain", "=", "\"sim\"", ")", "\n", "model_sim", ".", "set_save_path_overlays", "(", "True", ")", "\n", "", "elif", "restricted_domain", "==", "\"real\"", ":", "\n", "# Load dummy model for sim domain", "\n", "        ", "model_sim", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"real_model_file\"", "]", ",", "domain", "=", "\"real\"", ")", "\n", "model_real", ".", "set_save_path_overlays", "(", "True", ")", "\n", "", "else", ":", "\n", "        ", "model_real", ".", "set_save_path_overlays", "(", "True", ")", "\n", "model_sim", ".", "set_save_path_overlays", "(", "True", ")", "\n", "\n", "", "trainer", "=", "TrainerBidomain", "(", "model_real", ",", "model_sim", ",", "model_critic", ",", "epoch", "=", "0", ")", "\n", "trainer", ".", "train_epoch", "(", "env_list", "=", "use_envs", ",", "eval", "=", "True", ",", "restricted_domain", "=", "restricted_domain", ")", "\n", "\n", "if", "restricted_domain", "!=", "\"simulator\"", ":", "\n", "        ", "model_real", ".", "print_metrics", "(", ")", "\n", "", "if", "restricted_domain", "!=", "\"real\"", ":", "\n", "        ", "model_sim", ".", "print_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log": [[10, 15], ["print", "os.makedirs", "open", "fp.write"], "function", ["None"], ["def", "log", "(", "text", ",", "logdir", ")", ":", "\n", "    ", "print", "(", "text", ")", "\n", "os", ".", "makedirs", "(", "logdir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "f\"{logdir}/log.txt\"", ",", "\"a\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "text", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.evaluate_saved_rollouts": [[17, 60], ["parameters.get_current_parameters", "data_io.paths.get_eval_tmp_dataset_name", "set", "data_io.train_data.load_multiple_env_data", "set", "data_io.paths.get_results_dir", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluation.evaluate_nl.DataEvalNL", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "evaluation.evaluate_nl.DataEvalNL", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "evaluation.evaluate_nl.DataEvalNL", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "evaluate_saved_rollouts.log", "list", "len", "print", "sorted", "data_io.instructions.get_correct_eval_env_id_list", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_multiple_env_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_dir", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_correct_eval_env_id_list"], ["", "", "def", "evaluate_saved_rollouts", "(", ")", ":", "\n", "    ", "params", "=", "P", ".", "get_current_parameters", "(", ")", "\n", "setup", "=", "params", "[", "\"Setup\"", "]", "\n", "model_name", "=", "setup", "[", "\"model\"", "]", "\n", "run_name", "=", "setup", "[", "\"run_name\"", "]", "\n", "eval_dname", "=", "get_eval_tmp_dataset_name", "(", "model_name", ",", "run_name", ")", "\n", "\n", "eval_envs", "=", "set", "(", "list", "(", "sorted", "(", "get_correct_eval_env_id_list", "(", ")", ")", ")", ")", "\n", "rollouts", "=", "load_multiple_env_data", "(", "eval_dname", ")", "\n", "present_envs", "=", "set", "(", "[", "rollout", "[", "0", "]", "[", "\"env_id\"", "]", "for", "rollout", "in", "rollouts", "if", "len", "(", "rollout", ")", ">", "0", "]", ")", "\n", "missing_envs", "=", "eval_envs", "-", "present_envs", "\n", "\n", "logdir", "=", "get_results_dir", "(", "run_name", ")", "\n", "\n", "if", "len", "(", "missing_envs", ")", ">", "0", ":", "\n", "        ", "print", "(", "f\"Warning! {len(missing_envs)} envs missing: {missing_envs}\"", ")", "\n", "#sys.exit(1)", "\n", "\n", "", "log", "(", "\"\"", ",", "logdir", ")", "\n", "log", "(", "\"--------------------------------------------------------------------------------------------\"", ",", "logdir", ")", "\n", "log", "(", "f\"Evaluating rollouts for run {run_name}\"", ",", "logdir", ")", "\n", "log", "(", "f\"   using dataset {eval_dname}\"", ",", "logdir", ")", "\n", "log", "(", "f\"   missing envs {missing_envs}\"", ",", "logdir", ")", "\n", "log", "(", "\"--------------------------------------------------------------------------------------------\"", ",", "logdir", ")", "\n", "\n", "evaler1", "=", "DataEvalNL", "(", "setup", "[", "\"run_name\"", "]", "+", "\"1-1\"", ",", "save_images", "=", "False", ",", "entire_trajectory", "=", "False", ",", "aug_len", "=", "1", ")", "\n", "evaler1", ".", "evaluate_dataset", "(", "rollouts", ")", "\n", "results1", "=", "evaler1", ".", "get_results", "(", ")", "\n", "\n", "evaler2", "=", "DataEvalNL", "(", "setup", "[", "\"run_name\"", "]", "+", "\"2-2\"", ",", "save_images", "=", "False", ",", "entire_trajectory", "=", "False", ",", "aug_len", "=", "2", ")", "\n", "evaler2", ".", "evaluate_dataset", "(", "rollouts", ")", "\n", "results2", "=", "evaler2", ".", "get_results", "(", ")", "\n", "\n", "evalerf", "=", "DataEvalNL", "(", "setup", "[", "\"run_name\"", "]", "+", "\"1-2\"", ",", "save_images", "=", "True", ",", "entire_trajectory", "=", "False", ")", "\n", "evalerf", ".", "evaluate_dataset", "(", "rollouts", ")", "\n", "resultsf", "=", "evalerf", ".", "get_results", "(", ")", "\n", "\n", "log", "(", "f\"Results 1-1:{results1}\"", ",", "logdir", ")", "\n", "log", "(", "f\"Results 2-2:{results2}\"", ",", "logdir", ")", "\n", "log", "(", "f\"Results 1-2:{resultsf}\"", ",", "logdir", ")", "\n", "\n", "log", "(", "f\" -- END EVALUATION FOR {run_name}-- \"", ",", "logdir", ")", "\n", "log", "(", "\"--------------------------------------------------------------------------------------------\"", ",", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_supervised_bidomain.train_supervised_bidomain": [[11, 78], ["parameters.initialize_experiment", "data_io.models.load_model", "data_io.models.load_model", "data_io.models.load_model", "[].get", "print", "data_io.instructions.get_restricted_env_id_lists", "[].get", "print", "range", "parameters.get_current_parameters", "parameters.get_current_parameters", "data_io.models.load_model", "model_oracle_critic.set_model_name", "learning.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata", "print", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "learning.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata", "learning.training.trainer_supervised_bidomain.TrainerBidomain", "learning.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch", "learning.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch", "learning.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch", "learning.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "print", "parameters.get_current_parameters", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic.PVN_Stage1_Critic.set_model_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["def", "train_supervised_bidomain", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "supervised_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Supervised\"", "]", "\n", "num_epochs", "=", "supervised_params", "[", "\"num_epochs\"", "]", "\n", "\n", "model_sim", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"sim_model_file\"", "]", ",", "domain", "=", "\"sim\"", ")", "\n", "model_real", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"real_model_file\"", "]", ",", "domain", "=", "\"real\"", ")", "\n", "model_critic", ",", "_", "=", "load_model", "(", "setup", "[", "\"critic_model\"", "]", ",", "setup", "[", "\"critic_model_file\"", "]", ")", "\n", "\n", "if", "P", ".", "get_current_parameters", "(", ")", "[", "\"Training\"", "]", ".", "get", "(", "\"use_oracle_critic\"", ",", "False", ")", ":", "\n", "        ", "model_oracle_critic", ",", "_", "=", "load_model", "(", "setup", "[", "\"critic_model\"", "]", ",", "setup", "[", "\"critic_model_file\"", "]", ")", "\n", "# This changes the name in the summary writer to get a different color plot", "\n", "oname", "=", "model_oracle_critic", ".", "model_name", "\n", "model_oracle_critic", ".", "set_model_name", "(", "oname", "+", "\"_oracle\"", ")", "\n", "model_oracle_critic", ".", "model_name", "=", "oname", "\n", "", "else", ":", "\n", "        ", "model_oracle_critic", "=", "None", "\n", "\n", "", "print", "(", "\"Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "real_filename", "=", "f\"supervised_{setup['model']}_{setup['run_name']}_real\"", "\n", "sim_filename", "=", "f\"supervised_{setup['model']}_{setup['run_name']}_sim\"", "\n", "critic_filename", "=", "f\"supervised_{setup['critic_model']}_{setup['run_name']}_critic\"", "\n", "\n", "# TODO: (Maybe) Implement continuing of training", "\n", "\n", "# Bidata means that we treat Lani++ and LaniOriginal examples differently, only computing domain-adversarial stuff on Lani++", "\n", "bidata", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Training\"", "]", ".", "get", "(", "\"bidata\"", ",", "False", ")", "\n", "if", "bidata", "==", "\"v2\"", ":", "\n", "        ", "trainer", "=", "TrainerBidomainBidata", "(", "model_real", ",", "model_sim", ",", "model_critic", ",", "model_oracle_critic", ",", "epoch", "=", "0", ")", "\n", "train_envs_common", "=", "[", "e", "for", "e", "in", "train_envs", "if", "6000", "<=", "e", "<", "7000", "]", "\n", "train_envs_sim", "=", "train_envs", "\n", "dev_envs_common", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "6000", "<=", "e", "<", "7000", "]", "\n", "dev_envs_sim", "=", "dev_envs", "\n", "", "elif", "bidata", ":", "\n", "        ", "trainer", "=", "TrainerBidomainBidata", "(", "model_real", ",", "model_sim", ",", "model_critic", ",", "model_oracle_critic", ",", "epoch", "=", "0", ")", "\n", "train_envs_common", "=", "[", "e", "for", "e", "in", "train_envs", "if", "6000", "<=", "e", "<", "7000", "]", "\n", "train_envs_sim", "=", "[", "e", "for", "e", "in", "train_envs", "if", "e", "<", "6000", "]", "\n", "dev_envs_common", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "6000", "<=", "e", "<", "7000", "]", "\n", "dev_envs_sim", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "e", "<", "6000", "]", "\n", "", "else", ":", "\n", "        ", "trainer", "=", "TrainerBidomain", "(", "model_real", ",", "model_sim", ",", "model_critic", ",", "model_oracle_critic", ",", "epoch", "=", "0", ")", "\n", "\n", "", "print", "(", "\"Beginning training...\"", ")", "\n", "best_test_loss", "=", "1000", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "if", "bidata", ":", "\n", "            ", "train_loss", "=", "trainer", ".", "train_epoch", "(", "env_list_common", "=", "train_envs_common", ",", "env_list_sim", "=", "train_envs_sim", ",", "eval", "=", "False", ")", "\n", "test_loss", "=", "trainer", ".", "train_epoch", "(", "env_list_common", "=", "dev_envs_common", ",", "env_list_sim", "=", "dev_envs_sim", ",", "eval", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "train_loss", "=", "trainer", ".", "train_epoch", "(", "env_list", "=", "train_envs", ",", "eval", "=", "False", ")", "\n", "test_loss", "=", "trainer", ".", "train_epoch", "(", "env_list", "=", "dev_envs", ",", "eval", "=", "True", ")", "\n", "\n", "", "if", "test_loss", "<", "best_test_loss", ":", "\n", "            ", "best_test_loss", "=", "test_loss", "\n", "save_pytorch_model", "(", "model_real", ",", "real_filename", ")", "\n", "save_pytorch_model", "(", "model_sim", ",", "sim_filename", ")", "\n", "save_pytorch_model", "(", "model_critic", ",", "critic_filename", ")", "\n", "print", "(", "f\"Saved models in: \\n Real: {real_filename} \\n Sim: {sim_filename} \\n Critic: {critic_filename}\"", ")", "\n", "\n", "", "print", "(", "\"Epoch\"", ",", "epoch", ",", "\"train_loss:\"", ",", "train_loss", ",", "\"test_loss:\"", ",", "test_loss", ")", "\n", "save_pytorch_model", "(", "model_real", ",", "f\"tmp/{real_filename}_epoch_{epoch}\"", ")", "\n", "save_pytorch_model", "(", "model_sim", ",", "f\"tmp/{sim_filename}_epoch_{epoch}\"", ")", "\n", "save_pytorch_model", "(", "model_critic", ",", "f\"tmp/{critic_filename}_epoch_{epoch}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_rl.epoch_filename": [[11, 13], ["str"], "function", ["None"], ["def", "epoch_filename", "(", "fname", ",", "epoch", ")", ":", "\n", "    ", "return", "\"tmp/\"", "+", "fname", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_rl.train_rl": [[15, 58], ["parameters.parameter_server.initialize_experiment", "print", "data_io.instructions.get_restricted_env_id_lists", "learning.training.trainer_rl.TrainerRL", "range", "print", "range", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "train_rl.epoch_filename", "os.path.join", "print", "data_io.model_io.load_pytorch_model", "learning.training.trainer_rl.TrainerRL.set_start_epoch", "learning.training.trainer_rl.TrainerRL.train_epoch", "learning.training.trainer_rl.TrainerRL.train_epoch", "print", "data_io.model_io.save_pytorch_model", "hasattr", "utils.dict_tools.dict_merge", "data_io.paths.get_model_dir", "os.path.exists", "train_rl.epoch_filename", "train_rl.epoch_filename", "learning.training.trainer_rl.TrainerRL.full_model.save", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_rl.epoch_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.set_start_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_rl.epoch_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_rl.epoch_filename", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save"], ["", "def", "train_rl", "(", ")", ":", "\n", "    ", "initialize_experiment", "(", ")", "\n", "\n", "setup", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "params", "=", "get_current_parameters", "(", ")", "[", "\"RL\"", "]", "\n", "\n", "print", "(", "\"Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "filename", "=", "\"rl_\"", "+", "setup", "[", "\"model\"", "]", "+", "\"_\"", "+", "setup", "[", "\"run_name\"", "]", "\n", "\n", "trainer", "=", "TrainerRL", "(", "params", "=", "dict_merge", "(", "setup", ",", "params", ")", ")", "\n", "\n", "for", "start_epoch", "in", "range", "(", "10000", ")", ":", "\n", "        ", "epfname", "=", "epoch_filename", "(", "filename", ",", "start_epoch", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "get_model_dir", "(", ")", ",", "str", "(", "epfname", ")", "+", "\".pytorch\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "start_epoch", ">", "0", ":", "\n", "        ", "print", "(", "f\"CONTINUING RL TRAINING FROM EPOCH: {start_epoch}\"", ")", "\n", "load_pytorch_model", "(", "trainer", ".", "full_model", ",", "epoch_filename", "(", "filename", ",", "start_epoch", "-", "1", ")", ")", "\n", "trainer", ".", "set_start_epoch", "(", "start_epoch", ")", "\n", "\n", "", "print", "(", "\"Beginning training...\"", ")", "\n", "best_dev_reward", "=", "-", "1e+10", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "10000", ")", ":", "\n", "        ", "train_reward", ",", "metrics", "=", "trainer", ".", "train_epoch", "(", "eval", "=", "False", ",", "envs", "=", "\"train\"", ")", "\n", "# TODO: Test on just a few dev environments", "\n", "# TODO: Take most likely or mean action when testing", "\n", "dev_reward", ",", "metrics", "=", "trainer", ".", "train_epoch", "(", "eval", "=", "True", ",", "envs", "=", "\"dev\"", ")", "\n", "#dev_reward, metrics = trainer.train_epoch(eval=True, envs=\"dev\")", "\n", "dev_reward", "=", "0", "\n", "\n", "#if dev_reward >= best_dev_reward:", "\n", "#    best_dev_reward = dev_reward", "\n", "#    save_pytorch_model(trainer.full_model, filename)", "\n", "#    print(\"Saved model in:\", filename)", "\n", "\n", "print", "(", "\"Epoch\"", ",", "epoch", ",", "\"train reward:\"", ",", "train_reward", ",", "\"dev reward:\"", ",", "dev_reward", ")", "\n", "save_pytorch_model", "(", "trainer", ".", "full_model", ",", "epoch_filename", "(", "filename", ",", "epoch", ")", ")", "\n", "if", "hasattr", "(", "trainer", ".", "full_model", ",", "\"save\"", ")", ":", "\n", "            ", "trainer", ".", "full_model", ".", "save", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.copy_seed_dataset": [[24, 60], ["data_io.paths.get_dataset_dir", "data_io.paths.get_dataset_dir", "os.path.exists", "os.makedirs", "os.listdir", "data_io.instructions.get_restricted_env_id_lists", "set", "set", "set", "list", "random.shuffle", "print", "print", "input", "int", "zip", "os.path.join", "os.path.join", "shutil.copy", "ValueError", "files_to_copy.append", "f.split"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "copy_seed_dataset", "(", "from_dataset", ",", "to_dataset", ",", "seed_count", ")", ":", "\n", "    ", "from_dir", "=", "get_dataset_dir", "(", "from_dataset", ")", "\n", "to_dir", "=", "get_dataset_dir", "(", "to_dataset", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "to_dir", ")", ":", "\n", "        ", "print", "(", "\"DATASET EXISTS! Continue where left off?\"", ")", "\n", "c", "=", "input", "(", "\" (y/n) >>> \"", ")", "\n", "if", "c", "==", "\"y\"", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Not continuing: Dataset {to_dataset} exists. Delete it if you like and try again\"", ")", "\n", "", "", "os", ".", "makedirs", "(", "to_dir", ")", "\n", "from_files", "=", "os", ".", "listdir", "(", "from_dir", ")", "\n", "\n", "train_ids", ",", "dev_ids", ",", "test_ids", "=", "get_restricted_env_id_lists", "(", ")", "\n", "train_ids", "=", "set", "(", "train_ids", ")", "\n", "dev_ids", "=", "set", "(", "dev_ids", ")", "\n", "test_ids", "=", "set", "(", "test_ids", ")", "\n", "\n", "file_envs", "=", "[", "int", "(", "f", ".", "split", "(", "\"supervised_train_data_env_\"", ")", "[", "1", "]", ")", "for", "f", "in", "from_files", "]", "\n", "files_and_envs", "=", "list", "(", "zip", "(", "from_files", ",", "file_envs", ")", ")", "\n", "random", ".", "shuffle", "(", "files_and_envs", ")", "\n", "\n", "files_to_copy", "=", "[", "]", "\n", "train_envs_copied", "=", "0", "\n", "for", "file", ",", "env", "in", "files_and_envs", ":", "\n", "        ", "if", "env", "in", "train_ids", "and", "train_envs_copied", "<", "seed_count", ":", "\n", "            ", "files_to_copy", ".", "append", "(", "file", ")", "\n", "if", "env", "in", "train_ids", ":", "\n", "                ", "train_envs_copied", "+=", "1", "\n", "\n", "", "", "", "print", "(", "f\"Copying {train_envs_copied} train envs, and all dev/test envs from {from_dataset} to {to_dataset}\"", ")", "\n", "\n", "for", "file", "in", "files_to_copy", ":", "\n", "        ", "from_path", "=", "os", ".", "path", ".", "join", "(", "from_dir", ",", "file", ")", "\n", "to_path", "=", "os", ".", "path", ".", "join", "(", "to_dir", ",", "file", ")", "\n", "shutil", ".", "copy", "(", "from_path", ",", "to_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.epoch_dag_filename": [[63, 65], ["None"], "function", ["None"], ["", "", "def", "epoch_dag_filename", "(", "run_name", ",", "epoch", ")", ":", "\n", "    ", "return", "f\"dag/{run_name}_DAG_{epoch}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_dataset_name": [[67, 69], ["None"], "function", ["None"], ["", "def", "dagger_dataset_name", "(", "run_name", ")", ":", "\n", "    ", "return", "f\"_dagger_data_{run_name}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.prune_dataset": [[71, 83], ["data_io.paths.get_dataset_dir", "os.listdir", "print", "train_dagger_simple.dagger_dataset_name", "len", "random.sample", "len", "os.path.join", "os.remove"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "prune_dataset", "(", "run_name", ",", "count", ")", ":", "\n", "    ", "dataset_dir", "=", "get_dataset_dir", "(", "dagger_dataset_name", "(", "run_name", ")", ")", "\n", "files", "=", "os", ".", "listdir", "(", "dataset_dir", ")", "\n", "deleted", "=", "0", "\n", "if", "len", "(", "files", ")", ">", "count", ":", "\n", "        ", "num_drop", "=", "len", "(", "files", ")", "-", "count", "\n", "files_to_drop", "=", "random", ".", "sample", "(", "files", ",", "num_drop", ")", "\n", "for", "file", "in", "files_to_drop", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "file", ")", "\n", "os", ".", "remove", "(", "filepath", ")", "\n", "deleted", "+=", "1", "\n", "", "", "print", "(", "f\"Deleted {deleted} files when pruning dataset {dataset_dir}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_beta": [[85, 88], ["math.pow"], "function", ["None"], ["", "def", "dagger_beta", "(", "params", ",", "iteration", ")", ":", "\n", "    ", "oracle_factor", "=", "params", "[", "\"oracle_decay_factor\"", "]", "\n", "return", "math", ".", "pow", "(", "oracle_factor", ",", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.train_dagger_simple": [[94, 212], ["parameters.initialize_experiment", "params.get", "params.get", "params.get", "params.get", "data_io.instructions.get_restricted_env_id_lists", "print", "data_io.instructions.get_restricted_env_id_lists", "[].to", "range", "learning.training.trainer_supervised.Trainer", "learning.training.trainer_supervised.Trainer.set_dataset_names", "rollout.simple_parallel_rollout.SimpleParallelPolicyRoller", "rollout.rollout_sampler.RolloutSampler", "print", "range", "parameters.get_current_parameters", "parameters.get_current_parameters", "train_dagger_simple.copy_seed_dataset", "data_io.paths.get_dataset_dir", "os.path.exists", "data_io.models.load_model", "train_dagger_simple.epoch_dag_filename", "os.path.join", "print", "data_io.model_io.load_pytorch_model", "print", "train_dagger_simple.prune_dataset", "[].to.get_policy_state", "rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.kill_airsim", "print", "learning.training.trainer_supervised.Trainer.train_epoch", "print", "data_io.model_io.save_pytorch_model", "train_dagger_simple.dagger_dataset_name", "print", "input", "os.makedirs", "len", "data_io.paths.get_model_dir", "os.path.exists", "train_dagger_simple.epoch_dag_filename", "train_dagger_simple.dagger_dataset_name", "train_dagger_simple.dagger_dataset_name", "evaluation.evaluate_nl.DataEvalNL", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "print", "evaluation.evaluate_nl.DataEvalNL.write_summaries", "train_dagger_simple.epoch_dag_filename", "train_dagger_simple.dagger_dataset_name", "ValueError", "os.listdir", "data_io.models.load_model", "str", "train_dagger_simple.dagger_beta"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_dataset_names", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.copy_seed_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.epoch_dag_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.prune_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.get_policy_state", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.kill_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.epoch_dag_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.write_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.epoch_dag_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_simple.dagger_beta"], ["", "def", "train_dagger_simple", "(", ")", ":", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "# Load params and configure stuff", "\n", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"SimpleDagger\"", "]", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "num_iterations", "=", "params", "[", "\"num_iterations\"", "]", "\n", "sim_seed_dataset", "=", "params", ".", "get", "(", "\"sim_seed_dataset\"", ")", "\n", "run_name", "=", "setup", "[", "\"run_name\"", "]", "\n", "device", "=", "params", ".", "get", "(", "\"device\"", ",", "\"cuda:1\"", ")", "\n", "dataset_limit", "=", "params", ".", "get", "(", "\"dataset_size_limit_envs\"", ")", "\n", "seed_count", "=", "params", ".", "get", "(", "\"seed_count\"", ")", "\n", "\n", "# Trigger rebuild if necessary before going into all the threads and processes", "\n", "_", "=", "get_restricted_env_id_lists", "(", "full", "=", "True", ")", "\n", "\n", "# Initialize the dataset", "\n", "if", "sim_seed_dataset", ":", "\n", "        ", "copy_seed_dataset", "(", "from_dataset", "=", "sim_seed_dataset", ",", "to_dataset", "=", "dagger_dataset_name", "(", "run_name", ")", ",", "seed_count", "=", "seed_count", "or", "dataset_limit", ")", "\n", "gap", "=", "0", "\n", "", "else", ":", "\n", "# TODO: Refactor this into a prompt function", "\n", "        ", "data_path", "=", "get_dataset_dir", "(", "dagger_dataset_name", "(", "run_name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "            ", "print", "(", "\"DATASET EXISTS! Continue where left off?\"", ")", "\n", "c", "=", "input", "(", "\" (y/n) >>> \"", ")", "\n", "if", "c", "!=", "\"y\"", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Not continuing: Dataset {data_path} exists. Delete it if you like and try again\"", ")", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_path", ",", "exist_ok", "=", "True", ")", "\n", "", "gap", "=", "dataset_limit", "-", "len", "(", "os", ".", "listdir", "(", "data_path", ")", ")", "\n", "\n", "", "print", "(", "\"SUPP: Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "# Load / initialize model", "\n", "\n", "model", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"model_file\"", "]", ",", "domain", "=", "\"sim\"", ")", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "oracle", "=", "load_model", "(", "\"oracle\"", ")", "[", "0", "]", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "# Continue where we left off - load the model and set the iteration/epoch number", "\n", "\n", "for", "start_iteration", "in", "range", "(", "10000", ")", ":", "\n", "        ", "epfname", "=", "epoch_dag_filename", "(", "run_name", ",", "start_iteration", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "get_model_dir", "(", ")", ",", "str", "(", "epfname", ")", "+", "\".pytorch\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "break", "\n", "", "", "if", "start_iteration", ">", "0", ":", "\n", "        ", "print", "(", "f\"DAG: CONTINUING DAGGER TRAINING FROM ITERATION: {start_iteration}\"", ")", "\n", "load_pytorch_model", "(", "model", ",", "epoch_dag_filename", "(", "run_name", ",", "start_iteration", "-", "1", ")", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "# Intialize trainer", "\n", "\n", "", "trainer", "=", "Trainer", "(", "model", ",", "epoch", "=", "start_iteration", ",", "name", "=", "setup", "[", "\"model\"", "]", ",", "run_name", "=", "setup", "[", "\"run_name\"", "]", ")", "\n", "trainer", ".", "set_dataset_names", "(", "[", "dagger_dataset_name", "(", "run_name", ")", "]", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "# Initialize policy roller", "\n", "\n", "roller", "=", "SimpleParallelPolicyRoller", "(", "\n", "num_workers", "=", "params", "[", "\"num_workers\"", "]", ",", "\n", "device", "=", "params", "[", "\"device\"", "]", ",", "\n", "policy_name", "=", "setup", "[", "\"model\"", "]", ",", "\n", "policy_file", "=", "setup", "[", "\"model_file\"", "]", ",", "\n", "oracle", "=", "oracle", ",", "\n", "dataset_save_name", "=", "dagger_dataset_name", "(", "run_name", ")", ",", "\n", "no_reward", "=", "True", ")", "\n", "rollout_sampler", "=", "RolloutSampler", "(", "roller", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "# Train DAgger - loop over iteartions, in each, prune, rollout and train an epoch", "\n", "\n", "print", "(", "\"SUPP: Beginning training...\"", ")", "\n", "for", "iteration", "in", "range", "(", "start_iteration", ",", "num_iterations", ")", ":", "\n", "        ", "print", "(", "f\"DAG: Starting iteration {iteration}\"", ")", "\n", "\n", "# Remove extra rollouts to keep within DAggerFM limit", "\n", "prune_dataset", "(", "run_name", ",", "dataset_limit", ")", "\n", "\n", "# Rollout and collect more data for training and evaluation", "\n", "policy_state", "=", "model", ".", "get_policy_state", "(", ")", "\n", "rollout_sampler", ".", "sample_n_rollouts", "(", "\n", "n", "=", "gap", "if", "iteration", "==", "0", "else", "params", "[", "\"train_envs_per_iteration\"", "]", ",", "\n", "policy_state", "=", "policy_state", ",", "\n", "sample", "=", "False", ",", "\n", "envs", "=", "\"train\"", ",", "\n", "dagger_beta", "=", "dagger_beta", "(", "params", ",", "iteration", ")", ")", "\n", "\n", "eval_rollouts", "=", "rollout_sampler", ".", "sample_n_rollouts", "(", "\n", "n", "=", "params", "[", "\"eval_envs_per_iteration\"", "]", ",", "\n", "policy_state", "=", "policy_state", ",", "\n", "sample", "=", "False", ",", "\n", "envs", "=", "\"dev\"", ",", "\n", "dagger_beta", "=", "0", ")", "\n", "\n", "# Kill airsim instances so that they don't take up GPU memory and in general slow things down during training", "\n", "roller", ".", "kill_airsim", "(", ")", "\n", "\n", "# Evaluate success / metrics and save to tensorboard", "\n", "if", "setup", "[", "\"eval_nl\"", "]", ":", "\n", "            ", "evaler", "=", "DataEvalNL", "(", "run_name", ",", "entire_trajectory", "=", "False", ",", "save_images", "=", "False", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "eval_rollouts", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "print", "(", "\"Results:\"", ",", "results", ")", "\n", "evaler", ".", "write_summaries", "(", "setup", "[", "\"run_name\"", "]", ",", "\"dagger_eval\"", ",", "iteration", ")", "\n", "\n", "# Do one epoch of supervised training", "\n", "", "print", "(", "\"SUPP: Beginning Epoch\"", ")", "\n", "train_loss", "=", "trainer", ".", "train_epoch", "(", "train_envs", "=", "train_envs", ",", "eval", "=", "False", ")", "\n", "#test_loss = trainer.train_epoch(env_list_common=dev_envs_common, env_list_sim=dev_envs_sim, eval=True)", "\n", "\n", "# Save the model to file", "\n", "print", "(", "\"SUPP: Epoch\"", ",", "iteration", ",", "\"train_loss:\"", ",", "train_loss", ")", "\n", "save_pytorch_model", "(", "model", ",", "epoch_dag_filename", "(", "run_name", ",", "iteration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_dagger_data_dir": [[29, 31], ["None"], "function", ["None"], ["def", "get_dagger_data_dir", "(", "setup", ",", "real_drone", ")", ":", "\n", "    ", "return", "f\"dagger_data/{setup['run_name']}/{'real' if real_drone else 'simulator'}/\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename": [[32, 34], ["None"], "function", ["None"], ["", "def", "get_latest_model_filename", "(", "setup", ",", "suffix", ")", ":", "\n", "    ", "return", "f\"dagger_{setup['model']}_{setup['run_name']}_{suffix}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_model_filename": [[35, 37], ["None"], "function", ["None"], ["", "def", "get_model_filename", "(", "setup", ",", "suffix", ")", ":", "\n", "    ", "return", "f\"dagger_{setup['model']}_{setup['model']}_{setup['run_name']}_{suffix}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_model_filename_at_iteration": [[38, 40], ["train_dagger_bidomain.get_model_filename"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_model_filename"], ["", "def", "get_model_filename_at_iteration", "(", "setup", ",", "i", ",", "suffix", ")", ":", "\n", "    ", "return", "f\"dagger/{get_model_filename(setup, suffix)}_iter_{i}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.restore_data": [[56, 68], ["range", "print", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "str", "str", "print", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["def", "restore_data", "(", "dataset_name", ",", "dagger_data_dir", ",", "all_train_data", ",", "all_test_data", ")", ":", "\n", "# TODO: Adapt this to bi-domain", "\n", "# Roll forward", "\n", "    ", "for", "i", "in", "range", "(", "PARAMS", "[", "\"restore\"", "]", ")", ":", "\n", "        ", "print", "(", "\"Restoring dagger data: \"", "+", "str", "(", "i", ")", ")", "\n", "train_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"train_\"", "+", "str", "(", "i", ")", ")", "\n", "all_train_data", "+=", "train_data_i", "\n", "try", ":", "\n", "            ", "test_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"test_\"", "+", "str", "(", "i", ")", ")", "\n", "all_test_data", "+=", "test_data_i", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Error re-loading test data\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.restore_data_latest": [[69, 73], ["data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["", "", "", "def", "restore_data_latest", "(", "dagger_data_dir", ",", "dataset_name", ")", ":", "\n", "    ", "train_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"train_latest\"", ")", "\n", "test_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"test_latest\"", ")", "\n", "return", "train_data_i", ",", "test_data_i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.pick_policy_roller": [[74, 80], ["rollout.parallel_roll_out.ParallelPolicyRoller", "rollout.roll_out.PolicyRoller"], "function", ["None"], ["", "def", "pick_policy_roller", "(", "setup", ")", ":", "\n", "    ", "if", "setup", "[", "\"num_workers\"", "]", ">", "1", ":", "\n", "        ", "roller", "=", "ParallelPolicyRoller", "(", "num_workers", "=", "setup", "[", "\"num_workers\"", "]", ",", "first_worker", "=", "setup", "[", "\"first_worker\"", "]", ",", "reduce", "=", "PARAMS", "[", "\"segment_level\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "roller", "=", "PolicyRoller", "(", ")", "\n", "", "return", "roller", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.rollout_on_env_set": [[84, 116], ["rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag", "roller.roll_out_policy", "parameters.get_current_parameters", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag.setRolloutStrategy().setMixtureReferenceProbability().setHorizon", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction().setSegmentLevel().setPlotDir().setCuda", "str", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag.setRolloutStrategy().setMixtureReferenceProbability", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction().setSegmentLevel().setPlotDir", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag.setRolloutStrategy", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction().setSegmentLevel", "str", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone().setShowAction", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setRealDrone", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName", "parameters.get_setup_name", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile", "rollout.roll_out_params.RollOutParams().setModelName", "rollout.roll_out_params.RollOutParams"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setFlag", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_policy", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setHorizon", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCuda", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setMixtureReferenceProbability", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setPlotDir", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRolloutStrategy", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentLevel", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setShowAction", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRealDrone", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSavePlots", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setMaxDeviation", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setBuildTrainData", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setWriteSummaries", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSetupName", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_setup_name", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRunName", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelFile", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelName"], ["", "def", "rollout_on_env_set", "(", "roller", ",", "env_list", ",", "iteration", ",", "model_filename", ",", "test", "=", "False", ",", "real_drone", "=", "False", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "roll_out_params", "=", "RollOutParams", "(", ")", ".", "setModelName", "(", "setup", "[", "\"model\"", "]", ")", ".", "setModelFile", "(", "model_filename", ")", ".", "setRunName", "(", "setup", "[", "\"run_name\"", "]", ")", ".", "setSetupName", "(", "P", ".", "get_setup_name", "(", ")", ")", ".", "setWriteSummaries", "(", "False", ")", ".", "setBuildTrainData", "(", "False", ")", ".", "setEnvList", "(", "env_list", ")", ".", "setMaxDeviation", "(", "PARAMS", "[", "\"max_deviation\"", "]", ")", ".", "setSavePlots", "(", "False", ")", ".", "setRealDrone", "(", "real_drone", ")", ".", "setShowAction", "(", "False", ")", ".", "setSegmentLevel", "(", "PARAMS", "[", "\"segment_level\"", "]", ")", ".", "setPlotDir", "(", "\"dagger_\"", "+", "setup", "[", "\"run_name\"", "]", "+", "\"/\"", "+", "\"iteration_\"", "+", "str", "(", "iteration", ")", ")", ".", "setCuda", "(", "setup", "[", "\"cuda\"", "]", ")", ".", "setFlag", "(", "\"dagger_\"", "+", "str", "(", "iteration", ")", ")", "\n", "\n", "# If we are training, use a mixture policy for experience collection", "\n", "if", "not", "test", ":", "\n", "# At each timestep, execute oracle action with probability expert_prob", "\n", "# The average of these must supposedly go to 0, so we raise to a power a bit bigger than 1", "\n", "        ", "expert_prob", "=", "PARAMS", "[", "\"oracle_discount_factor\"", "]", "**", "(", "iteration", "+", "1", ")", "\n", "# expert_prob = 0", "\n", "roll_out_params", ".", "setRolloutStrategy", "(", "RolloutStrategy", ".", "MIXTURE", ")", ".", "setMixtureReferenceProbability", "(", "expert_prob", ")", ".", "setHorizon", "(", "100", ")", "\n", "\n", "", "data_i", "=", "roller", ".", "roll_out_policy", "(", "roll_out_params", ")", "\n", "return", "data_i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.sample_n_from_list": [[118, 122], ["random.sample", "range", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "sample_n_from_list", "(", "list", ",", "n", ")", ":", "\n", "    ", "indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "list", ")", ")", ",", "min", "(", "n", ",", "len", "(", "list", ")", ")", ")", "\n", "sublist", "=", "[", "list", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "return", "sublist", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.collect_iteration_data": [[123, 155], ["train_dagger_bidomain.sample_n_from_list", "train_dagger_bidomain.rollout_on_env_set", "train_dagger_bidomain.rollout_on_env_set", "os.system", "os.system", "parameters.get_current_parameters", "train_dagger_bidomain.sample_n_from_list", "evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "print", "evaluation.evaluate_nl.DataEvalNL.write_summaries", "evaluation.evaluate_nl.DataEvalNL", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "print", "evaluation.evaluate_nl.DataEvalNL.write_summaries"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.sample_n_from_list", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.rollout_on_env_set", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.rollout_on_env_set", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.sample_n_from_list", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.write_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.write_summaries"], ["", "def", "collect_iteration_data", "(", "roller", ",", "iteration", ",", "train_envs", ",", "test_envs", ",", "latest_model_filename", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "# Collect data with current policy", "\n", "num_train_samples", "=", "PARAMS", "[", "\"train_envs_per_iteration\"", "]", "\n", "train_envs_i", "=", "sample_n_from_list", "(", "train_envs", ",", "num_train_samples", ")", "\n", "if", "PARAMS", "[", "\"test_on_train\"", "]", ":", "\n", "        ", "test_envs_i", "=", "train_envs_i", "\n", "", "else", ":", "\n", "        ", "test_envs_i", "=", "sample_n_from_list", "(", "test_envs", ",", "PARAMS", "[", "\"test_envs_per_iteration\"", "]", ")", "\n", "\n", "", "train_data_i", "=", "rollout_on_env_set", "(", "roller", ",", "train_envs_i", ",", "iteration", ",", "latest_model_filename", ",", "test", "=", "False", ")", "\n", "test_data_i", "=", "rollout_on_env_set", "(", "roller", ",", "test_envs_i", ",", "iteration", ",", "latest_model_filename", ",", "test", "=", "True", ")", "\n", "\n", "if", "setup", "[", "\"eval_landmark_side\"", "]", ":", "\n", "        ", "evaler", "=", "DataEvalLandmarkSide", "(", "setup", "[", "\"run_name\"", "]", ",", "save_images", "=", "False", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "test_data_i", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "print", "(", "\"Results:\"", ",", "results", ")", "\n", "evaler", ".", "write_summaries", "(", "setup", "[", "\"run_name\"", "]", ",", "\"dagger_eval\"", ",", "iteration", ")", "\n", "", "if", "setup", "[", "\"eval_nl\"", "]", ":", "\n", "        ", "evaler", "=", "DataEvalNL", "(", "setup", "[", "\"run_name\"", "]", ",", "entire_trajectory", "=", "not", "PARAMS", "[", "\"segment_level\"", "]", ",", "save_images", "=", "False", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "test_data_i", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "print", "(", "\"Results:\"", ",", "results", ")", "\n", "evaler", ".", "write_summaries", "(", "setup", "[", "\"run_name\"", "]", ",", "\"dagger_eval\"", ",", "iteration", ")", "\n", "\n", "# Kill the simulators after each rollout to save CPU cycles and avoid the slowdown", "\n", "", "os", ".", "system", "(", "\"killall -9 MyProject5-Linux-Shipping\"", ")", "\n", "os", ".", "system", "(", "\"killall -9 MyProject5\"", ")", "\n", "\n", "return", "train_data_i", ",", "test_data_i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.load_latest_model": [[157, 166], ["parameters.get_current_parameters", "data_io.models.load_model", "data_io.models.load_model"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model"], ["", "def", "load_latest_model", "(", "latest_model_filename", ")", ":", "\n", "# If we retrain every iteration, don't load previously trained model, but train from scratch", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "if", "PARAMS", "[", "\"retrain_every_iteration\"", "]", ":", "\n", "        ", "model", ",", "model_loaded", "=", "load_model", "(", "model_file_override", "=", "\"reset\"", ")", "\n", "# Otherwise load the latest model", "\n", "", "else", ":", "\n", "        ", "model", ",", "model_loaded", "=", "load_model", "(", "model_file_override", "=", "latest_model_filename", ")", "\n", "", "return", "model", ",", "model_loaded", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.discard_if_too_many": [[168, 176], ["len", "print", "set", "print", "len", "random.sample", "list", "enumerate", "str", "range", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "discard_if_too_many", "(", "data_list", ",", "max_samples", ")", ":", "\n", "    ", "if", "len", "(", "data_list", ")", ">", "max_samples", ">", "0", ":", "# and iteration != args.dagger_restore:", "\n", "        ", "num_discard", "=", "len", "(", "data_list", ")", "-", "max_samples", "\n", "print", "(", "\"Too many samples in memory! Dropping \"", "+", "str", "(", "num_discard", ")", "+", "\" samples\"", ")", "\n", "discards", "=", "set", "(", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "data_list", ")", ")", ")", ",", "num_discard", ")", ")", "\n", "all_train_data", "=", "[", "sample", "for", "i", ",", "sample", "in", "enumerate", "(", "data_list", ")", "if", "i", "not", "in", "discards", "]", "\n", "print", "(", "\"Now left \"", "+", "str", "(", "len", "(", "all_train_data", ")", ")", "+", "\" samples\"", ")", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.train_dagger": [[178, 266], ["parameters.initialize_experiment", "train_dagger_bidomain.pick_policy_roller", "data_io.helpers.save_json", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "print", "print", "print", "data_io.models.load_model", "data_io.models.load_model", "data_io.models.load_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "range", "parameters.get_current_parameters", "parameters.get_current_parameters", "train_dagger_bidomain.get_latest_model_filename", "train_dagger_bidomain.get_latest_model_filename", "train_dagger_bidomain.get_latest_model_filename", "gc.collect", "print", "print", "print", "train_dagger_bidomain.discard_if_too_many", "train_dagger_bidomain.discard_if_too_many", "train_dagger_bidomain.get_latest_model_filename", "train_dagger_bidomain.collect_iteration_data", "print", "print", "print", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.models.load_model", "data_io.models.load_model", "data_io.models.load_model", "learning.training.trainer_supervised_bidomain.TrainerBidomain", "range", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "learning.training.trainer_supervised_bidomain.TrainerBidomain.get_state", "train_dagger_bidomain.get_dagger_data_dir", "len", "len", "train_dagger_bidomain.get_latest_model_filename", "train_dagger_bidomain.get_latest_model_filename", "train_dagger_bidomain.get_latest_model_filename", "learning.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch", "learning.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "print", "train_dagger_bidomain.get_model_filename_at_iteration", "train_dagger_bidomain.get_model_filename_at_iteration", "train_dagger_bidomain.get_model_filename_at_iteration", "len", "len", "len", "len", "train_dagger_bidomain.get_dagger_data_dir", "train_dagger_bidomain.get_dagger_data_dir", "train_dagger_bidomain.get_latest_model_filename", "train_dagger_bidomain.get_latest_model_filename", "train_dagger_bidomain.get_latest_model_filename"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.pick_policy_roller", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.discard_if_too_many", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.discard_if_too_many", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.collect_iteration_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_dagger_data_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.get_model_filename_at_iteration", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.get_model_filename_at_iteration", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.get_model_filename_at_iteration", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_dagger_data_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_dagger_data_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger_bidomain.get_latest_model_filename"], ["", "def", "train_dagger", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "global", "PARAMS", "\n", "PARAMS", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Dagger\"", "]", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "roller", "=", "pick_policy_roller", "(", "setup", ")", "\n", "\n", "save_json", "(", "PARAMS", ",", "get_dagger_data_dir", "(", "setup", ",", "real_drone", "=", "False", ")", "+", "\"run_params.json\"", ")", "\n", "\n", "# Load less tf data, but sample dagger rollouts from more environments to avoid overfitting.", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "data_io", ".", "instructions", ".", "get_restricted_env_id_lists", "(", "max_envs", "=", "PARAMS", "[", "\"max_envs_dag\"", "]", ")", "\n", "\n", "all_train_data_real", ",", "all_dev_data_real", "=", "data_io", ".", "train_data", ".", "load_supervised_data", "(", "\"real\"", ",", "max_envs", "=", "PARAMS", "[", "\"max_envs_sup\"", "]", ",", "split_segments", "=", "PARAMS", "[", "\"segment_level\"", "]", ")", "\n", "all_train_data_sim", ",", "all_dev_data_sim", "=", "data_io", ".", "train_data", ".", "load_supervised_data", "(", "\"simulator\"", ",", "max_envs", "=", "PARAMS", "[", "\"max_envs_sup\"", "]", ",", "split_segments", "=", "PARAMS", "[", "\"segment_level\"", "]", ")", "\n", "\n", "print", "(", "\"Loaded data: \"", ")", "\n", "print", "(", "f\"   Real train {len(all_train_data_real)}, dev {len(all_dev_data_real)}\"", ")", "\n", "print", "(", "f\"   Sim train {len(all_train_data_sim)}, dev {len(all_dev_data_sim)}\"", ")", "\n", "\n", "# Load and re-save models from supervised learning stage", "\n", "model_sim", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"sim_model_file\"", "]", ",", "domain", "=", "\"sim\"", ")", "\n", "model_real", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "setup", "[", "\"real_model_file\"", "]", ",", "domain", "=", "\"real\"", ")", "\n", "model_critic", ",", "_", "=", "load_model", "(", "setup", "[", "\"critic_model\"", "]", ",", "setup", "[", "\"critic_model_file\"", "]", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_sim", ",", "get_latest_model_filename", "(", "setup", ",", "\"sim\"", ")", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_real", ",", "get_latest_model_filename", "(", "setup", ",", "\"real\"", ")", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_critic", ",", "get_latest_model_filename", "(", "setup", ",", "\"critic\"", ")", ")", "\n", "\n", "last_trainer_state", "=", "None", "\n", "\n", "for", "iteration", "in", "range", "(", "0", ",", "PARAMS", "[", "\"max_iterations\"", "]", ")", ":", "\n", "        ", "gc", ".", "collect", "(", ")", "\n", "print", "(", "\"-------------------------------\"", ")", "\n", "print", "(", "\"DAGGER ITERATION : \"", ",", "iteration", ")", "\n", "print", "(", "\"-------------------------------\"", ")", "\n", "\n", "# If we have too many training examples in memory, discard uniformly at random to keep a somewhat fixed bound", "\n", "max_samples", "=", "PARAMS", "[", "\"max_samples_in_memory\"", "]", "\n", "all_train_data_real", "=", "discard_if_too_many", "(", "all_train_data_real", ",", "max_samples", ")", "\n", "all_train_data_sim", "=", "discard_if_too_many", "(", "all_train_data_sim", ",", "max_samples", ")", "\n", "\n", "# Roll out new data in simulation only", "\n", "latest_model_filename_sim", "=", "get_latest_model_filename", "(", "setup", ",", "\"sim\"", ")", "\n", "train_data_i_sim", ",", "dev_data_i_sim", "=", "collect_iteration_data", "(", "roller", ",", "iteration", ",", "train_envs", ",", "test_envs", ",", "latest_model_filename_sim", ")", "\n", "\n", "# TODO: Save", "\n", "#data_io.train_data.save_dataset(dataset_name, train_data_i, dagger_data_dir + \"train_\" + str(iteration))", "\n", "#data_io.train_data.save_dataset(dataset_name, test_data_i, dagger_data_dir + \"test_\" + str(iteration))", "\n", "\n", "# Aggregate the dataset", "\n", "all_train_data_sim", "+=", "train_data_i_sim", "\n", "all_dev_data_sim", "+=", "dev_data_i_sim", "\n", "print", "(", "\"Aggregated dataset!)\"", ")", "\n", "print", "(", "\"Total samples: \"", ",", "len", "(", "all_train_data_sim", ")", ")", "\n", "print", "(", "\"New samples: \"", ",", "len", "(", "train_data_i_sim", ")", ")", "\n", "\n", "data_io", ".", "train_data", ".", "save_dataset", "(", "\"sim_dagger\"", ",", "all_train_data_sim", ",", "get_dagger_data_dir", "(", "setup", ",", "False", ")", "+", "\"train_latest\"", ")", "\n", "data_io", ".", "train_data", ".", "save_dataset", "(", "\"sim_dagger\"", ",", "dev_data_i_sim", ",", "get_dagger_data_dir", "(", "setup", ",", "False", ")", "+", "\"test_latest\"", ")", "\n", "\n", "model_sim", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "get_latest_model_filename", "(", "setup", ",", "\"sim\"", ")", ",", "domain", "=", "\"sim\"", ")", "\n", "model_real", ",", "_", "=", "load_model", "(", "setup", "[", "\"model\"", "]", ",", "get_latest_model_filename", "(", "setup", ",", "\"real\"", ")", ",", "domain", "=", "\"real\"", ")", "\n", "model_critic", ",", "_", "=", "load_model", "(", "setup", "[", "\"critic_model\"", "]", ",", "get_latest_model_filename", "(", "setup", ",", "\"critic\"", ")", ")", "\n", "\n", "trainer", "=", "TrainerBidomain", "(", "model_real", ",", "model_sim", ",", "model_critic", ",", "state", "=", "last_trainer_state", ")", "\n", "\n", "# Hacky reset of the rollout flag after doing the rollouts", "\n", "import", "rollout", ".", "run_metadata", "as", "run_md", "\n", "run_md", ".", "IS_ROLLOUT", "=", "False", "\n", "\n", "# Train on the newly aggregated dataset", "\n", "num_epochs", "=", "PARAMS", "[", "\"epochs_per_iteration\"", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "            ", "loss", "=", "trainer", ".", "train_epoch", "(", "data_list_real", "=", "all_train_data_real", ",", "data_list_sim", "=", "all_train_data_sim", ")", "\n", "dev_loss", "=", "trainer", ".", "train_epoch", "(", "data_list_real", "=", "all_dev_data_real", ",", "data_list_sim", "=", "dev_data_i_sim", ",", "eval", "=", "True", ")", "\n", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_sim", ",", "get_latest_model_filename", "(", "setup", ",", "\"sim\"", ")", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_real", ",", "get_latest_model_filename", "(", "setup", ",", "\"real\"", ")", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_critic", ",", "get_latest_model_filename", "(", "setup", ",", "\"critic\"", ")", ")", "\n", "\n", "print", "(", "\"Epoch\"", ",", "epoch", ",", "\"Loss: Train:\"", ",", "loss", ",", "\"Test:\"", ",", "dev_loss", ")", "\n", "\n", "", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_real", ",", "get_model_filename_at_iteration", "(", "setup", ",", "iteration", ",", "\"real\"", ")", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_sim", ",", "get_model_filename_at_iteration", "(", "setup", ",", "iteration", ",", "\"sim\"", ")", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model_critic", ",", "get_model_filename_at_iteration", "(", "setup", ",", "iteration", ",", "\"critic\"", ")", ")", "\n", "\n", "last_trainer_state", "=", "trainer", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.receive_stage1_state": [[23, 35], ["conn.poll", "conn.recv", "conn.poll", "print", "time.sleep"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["def", "receive_stage1_state", "(", "conn", ",", "halt", "=", "False", ")", ":", "\n", "    ", "stage1_model_state_dict", "=", "None", "\n", "if", "halt", ":", "\n", "        ", "while", "not", "conn", ".", "poll", "(", ")", ":", "\n", "            ", "print", "(", "\"   RLP: Waiting for Stage 1 model\"", ")", "\n", "sleep", "(", "1", ")", "\n", "# Grab the latest model if there are multiple on the pipe", "\n", "", "", "while", "conn", ".", "poll", "(", ")", ":", "\n", "        ", "msg", "=", "conn", ".", "recv", "(", ")", "\n", "if", "msg", "[", "0", "]", "==", "\"stage1_model_state_dict\"", ":", "\n", "            ", "stage1_model_state_dict", "=", "msg", "[", "1", "]", "\n", "", "", "return", "stage1_model_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.copy_seed_dataset": [[37, 50], ["data_io.paths.get_dataset_dir", "data_io.paths.get_dataset_dir", "os.path.exists", "print", "shutil.copytree", "print", "input", "ValueError"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir"], ["", "def", "copy_seed_dataset", "(", "from_dataset", ",", "to_dataset", ")", ":", "\n", "    ", "from_path", "=", "get_dataset_dir", "(", "from_dataset", ")", "\n", "to_path", "=", "get_dataset_dir", "(", "to_dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "to_path", ")", ":", "\n", "        ", "print", "(", "f\"Copying dataset from {from_dataset} to {to_dataset}\"", ")", "\n", "shutil", ".", "copytree", "(", "from_path", ",", "to_path", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"DATASET EXISTS! Continue?\"", ")", "\n", "c", "=", "input", "(", "\" (y/n) >>> \"", ")", "\n", "if", "c", "==", "\"y\"", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not continuing: Dataset exists\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_rl_filename": [[53, 55], ["None"], "function", ["None"], ["", "", "", "def", "epoch_rl_filename", "(", "run_name", ",", "epoch", ",", "model", ")", ":", "\n", "    ", "return", "f\"comb/{run_name}_{model}_RL_epoch_{epoch}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename": [[58, 60], ["None"], "function", ["None"], ["", "def", "epoch_sup_filename", "(", "run_name", ",", "epoch", ",", "model", ",", "domain", "=", "\"sim\"", ")", ":", "\n", "    ", "return", "f\"comb/{run_name}_SUP_{model}_{domain}_{epoch}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.rl_dataset_name": [[62, 64], ["None"], "function", ["None"], ["", "def", "rl_dataset_name", "(", "run_name", ")", ":", "\n", "    ", "return", "f\"_rl_sup_data_{run_name}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.train_supervised_worker": [[66, 141], ["parameters.initialize_experiment", "rlsup.get", "print", "data_io.instructions.get_restricted_env_id_lists", "[].to", "[].to", "[].to", "print", "rlsup_params.get", "learning.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata", "learning.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_dataset_names", "range", "print", "range", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters", "train_sureal.rl_dataset_name", "train_sureal.epoch_sup_filename", "os.path.join", "print", "data_io.model_io.load_pytorch_model", "data_io.model_io.load_pytorch_model", "data_io.model_io.load_pytorch_model", "learning.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_start_epoch", "print", "[].to.reset", "rl_process_conn.send", "print", "learning.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.train_epoch", "learning.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.train_epoch", "print", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.paths.get_model_dir", "os.path.exists", "train_sureal.epoch_sup_filename", "train_sureal.epoch_sup_filename", "train_sureal.epoch_sup_filename", "data_io.paths.get_dataset_dir", "os.makedirs", "train_sureal.epoch_sup_filename", "train_sureal.epoch_sup_filename", "train_sureal.epoch_sup_filename", "data_io.models.load_model", "data_io.models.load_model", "data_io.models.load_model", "str", "[].to.state_dict", "time.sleep", "train_sureal.rl_dataset_name", "len", "print", "time.sleep", "os.listdir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_dataset_names", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.rl_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.set_start_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_sup_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.rl_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["", "def", "train_supervised_worker", "(", "rl_process_conn", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "rlsup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"RLSUP\"", "]", "\n", "setup", "[", "\"trajectory_length\"", "]", "=", "setup", "[", "\"sup_trajectory_length\"", "]", "\n", "run_name", "=", "setup", "[", "\"run_name\"", "]", "\n", "supervised_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Supervised\"", "]", "\n", "num_epochs", "=", "supervised_params", "[", "\"num_epochs\"", "]", "\n", "sup_device", "=", "rlsup", ".", "get", "(", "\"sup_device\"", ",", "\"cuda:1\"", ")", "\n", "\n", "model_oracle_critic", "=", "None", "\n", "\n", "print", "(", "\"SUPP: Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "\n", "# Load the starter model and save it at epoch 0", "\n", "# Supervised worker to use GPU 1, RL will use GPU 0. Simulators run on GPU 2", "\n", "model_sim", "=", "load_model", "(", "setup", "[", "\"sup_model\"", "]", ",", "setup", "[", "\"sim_model_file\"", "]", ",", "domain", "=", "\"sim\"", ")", "[", "0", "]", ".", "to", "(", "sup_device", ")", "\n", "model_real", "=", "load_model", "(", "setup", "[", "\"sup_model\"", "]", ",", "setup", "[", "\"real_model_file\"", "]", ",", "domain", "=", "\"real\"", ")", "[", "0", "]", ".", "to", "(", "sup_device", ")", "\n", "model_critic", "=", "load_model", "(", "setup", "[", "\"sup_critic_model\"", "]", ",", "setup", "[", "\"critic_model_file\"", "]", ")", "[", "0", "]", ".", "to", "(", "sup_device", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "\n", "print", "(", "\"SUPP: Initializing trainer\"", ")", "\n", "rlsup_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"RLSUP\"", "]", "\n", "sim_seed_dataset", "=", "rlsup_params", ".", "get", "(", "\"sim_seed_dataset\"", ")", "\n", "\n", "# TODO: Figure if 6000 or 7000 here", "\n", "trainer", "=", "TrainerBidomainBidata", "(", "model_real", ",", "model_sim", ",", "model_critic", ",", "model_oracle_critic", ",", "epoch", "=", "0", ")", "\n", "train_envs_common", "=", "[", "e", "for", "e", "in", "train_envs", "if", "6000", "<=", "e", "<", "7000", "]", "\n", "train_envs_sim", "=", "[", "e", "for", "e", "in", "train_envs", "if", "e", "<", "7000", "]", "\n", "dev_envs_common", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "6000", "<=", "e", "<", "7000", "]", "\n", "dev_envs_sim", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "e", "<", "7000", "]", "\n", "sim_datasets", "=", "[", "rl_dataset_name", "(", "run_name", ")", "]", "\n", "real_datasets", "=", "[", "\"real\"", "]", "\n", "trainer", ".", "set_dataset_names", "(", "sim_datasets", "=", "sim_datasets", ",", "real_datasets", "=", "real_datasets", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "for", "start_sup_epoch", "in", "range", "(", "10000", ")", ":", "\n", "        ", "epfname", "=", "epoch_sup_filename", "(", "run_name", ",", "start_sup_epoch", ",", "model", "=", "\"stage1\"", ",", "domain", "=", "\"sim\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "get_model_dir", "(", ")", ",", "str", "(", "epfname", ")", "+", "\".pytorch\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "break", "\n", "", "", "if", "start_sup_epoch", ">", "0", ":", "\n", "        ", "print", "(", "f\"SUPP: CONTINUING SUP TRAINING FROM EPOCH: {start_sup_epoch}\"", ")", "\n", "load_pytorch_model", "(", "model_real", ",", "epoch_sup_filename", "(", "run_name", ",", "start_sup_epoch", "-", "1", ",", "model", "=", "\"stage1\"", ",", "domain", "=", "\"real\"", ")", ")", "\n", "load_pytorch_model", "(", "model_sim", ",", "epoch_sup_filename", "(", "run_name", ",", "start_sup_epoch", "-", "1", ",", "model", "=", "\"stage1\"", ",", "domain", "=", "\"sim\"", ")", ")", "\n", "load_pytorch_model", "(", "model_critic", ",", "epoch_sup_filename", "(", "run_name", ",", "start_sup_epoch", "-", "1", ",", "model", "=", "\"critic\"", ",", "domain", "=", "\"critic\"", ")", ")", "\n", "trainer", ".", "set_start_epoch", "(", "start_sup_epoch", ")", "\n", "\n", "# ----------------------------------------------------------------------------------------------------------------", "\n", "", "print", "(", "\"SUPP: Beginning training...\"", ")", "\n", "for", "epoch", "in", "range", "(", "start_sup_epoch", ",", "num_epochs", ")", ":", "\n", "# Tell the RL process that a new Stage 1 model is ready for loading", "\n", "        ", "print", "(", "\"SUPP: Sending model to RL\"", ")", "\n", "model_sim", ".", "reset", "(", ")", "\n", "rl_process_conn", ".", "send", "(", "[", "\"stage1_model_state_dict\"", ",", "model_sim", ".", "state_dict", "(", ")", "]", ")", "\n", "if", "DEBUG_RL", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "sleep", "(", "1", ")", "\n", "\n", "", "", "if", "not", "sim_seed_dataset", ":", "\n", "            ", "ddir", "=", "get_dataset_dir", "(", "rl_dataset_name", "(", "run_name", ")", ")", "\n", "os", ".", "makedirs", "(", "ddir", ",", "exist_ok", "=", "True", ")", "\n", "while", "len", "(", "os", ".", "listdir", "(", "ddir", ")", ")", "<", "20", ":", "\n", "                ", "print", "(", "\"SUPP: Waiting for rollouts to appear\"", ")", "\n", "sleep", "(", "3", ")", "\n", "\n", "", "", "print", "(", "\"SUPP: Beginning Epoch\"", ")", "\n", "train_loss", "=", "trainer", ".", "train_epoch", "(", "env_list_common", "=", "train_envs_common", ",", "env_list_sim", "=", "train_envs_sim", ",", "eval", "=", "False", ")", "\n", "test_loss", "=", "trainer", ".", "train_epoch", "(", "env_list_common", "=", "dev_envs_common", ",", "env_list_sim", "=", "dev_envs_sim", ",", "eval", "=", "True", ")", "\n", "print", "(", "\"SUPP: Epoch\"", ",", "epoch", ",", "\"train_loss:\"", ",", "train_loss", ",", "\"test_loss:\"", ",", "test_loss", ")", "\n", "save_pytorch_model", "(", "model_real", ",", "epoch_sup_filename", "(", "run_name", ",", "epoch", ",", "model", "=", "\"stage1\"", ",", "domain", "=", "\"real\"", ")", ")", "\n", "save_pytorch_model", "(", "model_sim", ",", "epoch_sup_filename", "(", "run_name", ",", "epoch", ",", "model", "=", "\"stage1\"", ",", "domain", "=", "\"sim\"", ")", ")", "\n", "save_pytorch_model", "(", "model_critic", ",", "epoch_sup_filename", "(", "run_name", ",", "epoch", ",", "model", "=", "\"critic\"", ",", "domain", "=", "\"critic\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.train_rl_worker": [[143, 190], ["parameters.initialize_experiment", "rlsup.get", "learning.training.trainer_rl.TrainerRL", "range", "time.sleep", "print", "range", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters", "train_sureal.epoch_rl_filename", "os.path.join", "print", "data_io.model_io.load_pytorch_model", "learning.training.trainer_rl.TrainerRL.set_start_epoch", "train_sureal.receive_stage1_state", "learning.training.trainer_rl.TrainerRL.train_epoch", "learning.training.trainer_rl.TrainerRL.train_epoch", "print", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "utils.dict_tools.dict_merge", "train_sureal.rl_dataset_name", "data_io.paths.get_model_dir", "os.path.exists", "train_sureal.epoch_rl_filename", "print", "learning.training.trainer_rl.TrainerRL.reload_stage1", "train_sureal.epoch_rl_filename", "train_sureal.epoch_rl_filename", "train_sureal.epoch_rl_filename", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_rl_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.set_start_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.receive_stage1_state", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.rl_dataset_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_rl_filename", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.reload_stage1", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_rl_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_rl_filename", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.epoch_rl_filename"], ["", "", "def", "train_rl_worker", "(", "sup_process_conn", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "setup", "[", "\"trajectory_length\"", "]", "=", "setup", "[", "\"rl_trajectory_length\"", "]", "\n", "run_name", "=", "setup", "[", "\"run_name\"", "]", "\n", "rlsup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"RLSUP\"", "]", "\n", "params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"RL\"", "]", "\n", "num_rl_epochs", "=", "params", "[", "\"num_epochs\"", "]", "\n", "# These need to be distinguished between supervised and RL because supervised trains on ALL envs, RL only on 6000-7000", "\n", "setup", "[", "\"env_range_start\"", "]", "=", "setup", "[", "\"rl_env_range_start\"", "]", "\n", "setup", "[", "\"env_range_end\"", "]", "=", "setup", "[", "\"rl_env_range_end\"", "]", "\n", "rl_device", "=", "rlsup", ".", "get", "(", "\"rl_device\"", ",", "\"cuda:0\"", ")", "\n", "\n", "trainer", "=", "TrainerRL", "(", "params", "=", "dict_merge", "(", "setup", ",", "params", ")", ",", "save_rollouts_to_dataset", "=", "rl_dataset_name", "(", "run_name", ")", ",", "device", "=", "rl_device", ")", "\n", "\n", "# -------------------------------------------------------------------------------------", "\n", "# TODO: Continue (including figure out how to initialize Supervised Stage 1 real/sim/critic and RL Stage 2 policy", "\n", "start_rl_epoch", "=", "0", "\n", "for", "start_rl_epoch", "in", "range", "(", "num_rl_epochs", ")", ":", "\n", "        ", "epfname", "=", "epoch_rl_filename", "(", "run_name", ",", "start_rl_epoch", ",", "model", "=", "\"full\"", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "get_model_dir", "(", ")", ",", "str", "(", "epfname", ")", "+", "\".pytorch\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "break", "\n", "", "", "if", "start_rl_epoch", ">", "0", ":", "\n", "        ", "print", "(", "f\"RLP: CONTINUING RL TRAINING FROM EPOCH: {start_rl_epoch}\"", ")", "\n", "load_pytorch_model", "(", "trainer", ".", "full_model", ",", "epoch_rl_filename", "(", "run_name", ",", "start_rl_epoch", "-", "1", ",", "model", "=", "\"full\"", ")", ")", "\n", "trainer", ".", "set_start_epoch", "(", "start_rl_epoch", ")", "\n", "# Wait for supervised process to send it's model", "\n", "", "sleep", "(", "2", ")", "\n", "\n", "# -------------------------------------------------------------------------------------", "\n", "\n", "print", "(", "\"RLP: Beginning training...\"", ")", "\n", "for", "rl_epoch", "in", "range", "(", "start_rl_epoch", ",", "num_rl_epochs", ")", ":", "\n", "# Get the latest Stage 1 model. Halt on the first epoch so that we can actually initialize the Stage 1", "\n", "        ", "new_stage1_model_state_dict", "=", "receive_stage1_state", "(", "sup_process_conn", ",", "halt", "=", "(", "rl_epoch", "==", "start_rl_epoch", ")", ")", "\n", "if", "new_stage1_model_state_dict", ":", "\n", "            ", "print", "(", "f\"RLP: Re-loading latest Stage 1 model\"", ")", "\n", "trainer", ".", "reload_stage1", "(", "new_stage1_model_state_dict", ")", "\n", "\n", "", "train_reward", ",", "metrics", "=", "trainer", ".", "train_epoch", "(", "epoch_num", "=", "rl_epoch", ",", "eval", "=", "False", ",", "envs", "=", "\"train\"", ")", "\n", "dev_reward", ",", "metrics", "=", "trainer", ".", "train_epoch", "(", "epoch_num", "=", "rl_epoch", ",", "eval", "=", "True", ",", "envs", "=", "\"dev\"", ")", "\n", "\n", "print", "(", "\"RLP: RL Epoch\"", ",", "rl_epoch", ",", "\"train reward:\"", ",", "train_reward", ",", "\"dev reward:\"", ",", "dev_reward", ")", "\n", "save_pytorch_model", "(", "trainer", ".", "full_model", ",", "epoch_rl_filename", "(", "run_name", ",", "rl_epoch", ",", "model", "=", "\"full\"", ")", ")", "\n", "save_pytorch_model", "(", "trainer", ".", "full_model", ".", "stage1_visitation_prediction", ",", "epoch_rl_filename", "(", "run_name", ",", "rl_epoch", ",", "model", "=", "\"stage1\"", ")", ")", "\n", "save_pytorch_model", "(", "trainer", ".", "full_model", ".", "stage2_action_generation", ",", "epoch_rl_filename", "(", "run_name", ",", "rl_epoch", ",", "model", "=", "\"stage2\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.train_sureal": [[192, 222], ["parameters.initialize_experiment", "multiprocessing.get_context", "mp.get_context.Pipe", "rlsup_params.get", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "parameters.get_current_parameters", "train_sureal.copy_seed_dataset", "train_sureal.train_supervised_worker", "parameters.get_current_parameters", "mp.get_context.Process", "ctx.Process.start", "train_sureal.train_rl_worker", "mp.get_context.Process", "mp.get_context.Process", "ctx.Process.start", "ctx.Process.start", "train_sureal.rl_dataset_name"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.copy_seed_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.train_supervised_worker", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.train_rl_worker", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_sureal.rl_dataset_name"], ["", "", "def", "train_sureal", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "ctx", "=", "mp", ".", "get_context", "(", "\"spawn\"", ")", "\n", "\n", "pipe_rl_end", ",", "pipe_sup_end", "=", "ctx", ".", "Pipe", "(", ")", "\n", "\n", "rlsup_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"RLSUP\"", "]", "\n", "sim_seed_dataset", "=", "rlsup_params", ".", "get", "(", "\"sim_seed_dataset\"", ")", "\n", "run_name", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"run_name\"", "]", "\n", "\n", "# Trigger rebuild if necessary before going into all the threads and processes", "\n", "_", "=", "get_restricted_env_id_lists", "(", ")", "\n", "_", "=", "get_restricted_env_id_lists", "(", "full", "=", "True", ")", "\n", "\n", "if", "sim_seed_dataset", ":", "\n", "        ", "copy_seed_dataset", "(", "from_dataset", "=", "sim_seed_dataset", ",", "to_dataset", "=", "rl_dataset_name", "(", "run_name", ")", ")", "\n", "\n", "", "if", "DEBUG_SUP", ":", "\n", "        ", "train_supervised_worker", "(", "pipe_sup_end", ")", "\n", "", "elif", "DEBUG_RL", ":", "\n", "# Start supervised learning in another process. Keep RL in main process.", "\n", "        ", "sup_proces", "=", "ctx", ".", "Process", "(", "target", "=", "train_supervised_worker", ",", "args", "=", "[", "pipe_sup_end", "]", ")", "\n", "sup_proces", ".", "start", "(", ")", "\n", "train_rl_worker", "(", "pipe_rl_end", ")", "\n", "", "else", ":", "\n", "        ", "rl_process", "=", "ctx", ".", "Process", "(", "target", "=", "train_rl_worker", ",", "args", "=", "[", "pipe_rl_end", "]", ")", "\n", "sup_proces", "=", "ctx", ".", "Process", "(", "target", "=", "train_supervised_worker", ",", "args", "=", "[", "pipe_sup_end", "]", ")", "\n", "\n", "rl_process", ".", "start", "(", ")", "\n", "sup_proces", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.get_model_filename_at_iteration": [[26, 29], ["str"], "function", ["None"], ["def", "get_model_filename_at_iteration", "(", "setup", ",", "i", ")", ":", "\n", "    ", "dagger_filename", "=", "\"dagger_\"", "+", "setup", "[", "\"model\"", "]", "+", "\"_\"", "+", "setup", "[", "\"run_name\"", "]", "\n", "return", "\"dagger/\"", "+", "dagger_filename", "+", "\"_iteration_\"", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.rollout_on_env_set": [[31, 62], ["rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag", "roller.roll_out_policy", "parameters.get_current_parameters", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag.setRolloutStrategy().setMixtureReferenceProbability().setHorizon", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction().setSegmentLevel().setPlotDir().setCuda", "str", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag.setRolloutStrategy().setMixtureReferenceProbability", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction().setSegmentLevel().setPlotDir", "RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction().setSegmentLevel().setPlotDir().setCuda().setFlag.setRolloutStrategy", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction().setSegmentLevel", "str", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots().setShowAction", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation().setSavePlots", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList().setMaxDeviation", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData().setEnvList", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries().setBuildTrainData", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName().setWriteSummaries", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName().setSetupName", "parameters.get_setup_name", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile().setRunName", "rollout.roll_out_params.RollOutParams().setModelName().setModelFile", "rollout.roll_out_params.RollOutParams().setModelName", "rollout.roll_out_params.RollOutParams"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setFlag", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_policy", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setHorizon", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCuda", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setMixtureReferenceProbability", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setPlotDir", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRolloutStrategy", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentLevel", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setShowAction", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSavePlots", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setMaxDeviation", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setBuildTrainData", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setWriteSummaries", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSetupName", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_setup_name", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRunName", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelFile", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelName"], ["", "def", "rollout_on_env_set", "(", "roller", ",", "env_list", ",", "iteration", ",", "model_filename", ",", "test", "=", "False", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "roll_out_params", "=", "RollOutParams", "(", ")", ".", "setModelName", "(", "setup", "[", "\"model\"", "]", ")", ".", "setModelFile", "(", "model_filename", ")", ".", "setRunName", "(", "setup", "[", "\"run_name\"", "]", ")", ".", "setSetupName", "(", "P", ".", "get_setup_name", "(", ")", ")", ".", "setWriteSummaries", "(", "False", ")", ".", "setBuildTrainData", "(", "False", ")", ".", "setEnvList", "(", "env_list", ")", ".", "setMaxDeviation", "(", "PARAMS", "[", "\"max_deviation\"", "]", ")", ".", "setSavePlots", "(", "True", ")", ".", "setShowAction", "(", "False", ")", ".", "setSegmentLevel", "(", "PARAMS", "[", "\"segment_level\"", "]", ")", ".", "setPlotDir", "(", "\"dagger_\"", "+", "setup", "[", "\"run_name\"", "]", "+", "\"/\"", "+", "\"iteration_\"", "+", "str", "(", "iteration", ")", ")", ".", "setCuda", "(", "setup", "[", "\"cuda\"", "]", ")", ".", "setFlag", "(", "\"dagger_\"", "+", "str", "(", "iteration", ")", ")", "\n", "\n", "# If we are training, use a mixture policy for experience collection", "\n", "if", "not", "test", ":", "\n", "# At each timestep, execute oracle action with probability expert_prob", "\n", "# The average of these must supposedly go to 0, so we raise to a power a bit bigger than 1", "\n", "        ", "expert_prob", "=", "PARAMS", "[", "\"oracle_discount_factor\"", "]", "**", "(", "iteration", "+", "1", ")", "\n", "# expert_prob = 0", "\n", "roll_out_params", ".", "setRolloutStrategy", "(", "RolloutStrategy", ".", "MIXTURE", ")", ".", "setMixtureReferenceProbability", "(", "expert_prob", ")", ".", "setHorizon", "(", "100", ")", "\n", "\n", "", "data_i", "=", "roller", ".", "roll_out_policy", "(", "roll_out_params", ")", "\n", "return", "data_i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.sample_n_from_list": [[64, 68], ["random.sample", "range", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "sample_n_from_list", "(", "list", ",", "n", ")", ":", "\n", "    ", "indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "list", ")", ")", ",", "min", "(", "n", ",", "len", "(", "list", ")", ")", ")", "\n", "sublist", "=", "[", "list", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "return", "sublist", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.load_dagger_model": [[70, 82], ["parameters.get_current_parameters", "print", "data_io.models.load_model", "data_io.models.load_model", "train_dagger.get_model_filename_at_iteration", "data_io.models.load_model"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.get_model_filename_at_iteration", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model"], ["", "def", "load_dagger_model", "(", "latest_model_filename", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "# Load and re-save the model to the continuously updated dagger filename", "\n", "if", "PARAMS", "[", "\"restore_latest\"", "]", ":", "\n", "        ", "print", "(", "\"Loading latest model: \"", ",", "latest_model_filename", ")", "\n", "model", ",", "model_loaded", "=", "load_model", "(", "model_file_override", "=", "latest_model_filename", ")", "\n", "", "elif", "PARAMS", "[", "\"restore\"", "]", "==", "0", "or", "setup", "[", "\"restore_data_only\"", "]", ":", "\n", "        ", "model", ",", "model_loaded", "=", "load_model", "(", ")", "\n", "", "elif", "setup", "[", "\"restore\"", "]", ">", "0", "and", "not", "setup", "[", "\"restore_data_only\"", "]", ":", "\n", "        ", "model_name", "=", "get_model_filename_at_iteration", "(", "setup", ",", "setup", "[", "\"dagger_restore\"", "]", "-", "1", ")", "\n", "model", ",", "model_loaded", "=", "load_model", "(", "model_file_override", "=", "model_name", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.restore_data": [[84, 95], ["range", "print", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "str", "str", "print", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["", "def", "restore_data", "(", "dataset_name", ",", "dagger_data_dir", ",", "all_train_data", ",", "all_test_data", ")", ":", "\n", "# Roll forward", "\n", "    ", "for", "i", "in", "range", "(", "PARAMS", "[", "\"restore\"", "]", ")", ":", "\n", "        ", "print", "(", "\"Restoring dagger data: \"", "+", "str", "(", "i", ")", ")", "\n", "train_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"train_\"", "+", "str", "(", "i", ")", ")", "\n", "all_train_data", "+=", "train_data_i", "\n", "try", ":", "\n", "            ", "test_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"test_\"", "+", "str", "(", "i", ")", ")", "\n", "all_test_data", "+=", "test_data_i", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Error re-loading test data\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.restore_data_latest": [[97, 101], ["data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset", "data_io.train_data.load_dataset"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["", "", "", "def", "restore_data_latest", "(", "dagger_data_dir", ",", "dataset_name", ")", ":", "\n", "    ", "train_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"train_latest\"", ")", "\n", "test_data_i", "=", "data_io", ".", "train_data", ".", "load_dataset", "(", "dataset_name", ",", "dagger_data_dir", "+", "\"test_latest\"", ")", "\n", "return", "train_data_i", ",", "test_data_i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.collect_iteration_data": [[103, 142], ["train_dagger.sample_n_from_list", "train_dagger.rollout_on_env_set", "train_dagger.rollout_on_env_set", "os.system", "os.system", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "parameters.get_current_parameters", "train_dagger.sample_n_from_list", "evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "print", "evaluation.evaluate_nl.DataEvalNL.write_summaries", "evaluation.evaluate_nl.DataEvalNL", "evaluation.evaluate_nl.DataEvalNL.evaluate_dataset", "evaluation.evaluate_nl.DataEvalNL.get_results", "print", "evaluation.evaluate_nl.DataEvalNL.write_summaries", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.sample_n_from_list", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.rollout_on_env_set", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.rollout_on_env_set", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.sample_n_from_list", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.write_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.write_summaries"], ["", "def", "collect_iteration_data", "(", "roller", ",", "iteration", ",", "train_envs", ",", "test_envs", ",", "latest_model_filename", ",", "dagger_data_dir", ",", "dataset_name", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "# Collect data with current policy", "\n", "num_train_samples", "=", "PARAMS", "[", "\"train_envs_per_iteration_override\"", "]", "[", "iteration", "]", "if", "iteration", "in", "PARAMS", "[", "\"train_envs_per_iteration_override\"", "]", "else", "PARAMS", "[", "\"train_envs_per_iteration\"", "]", "\n", "\n", "train_envs_i", "=", "sample_n_from_list", "(", "train_envs", ",", "num_train_samples", ")", "\n", "if", "PARAMS", "[", "\"test_on_train\"", "]", ":", "\n", "        ", "test_envs_i", "=", "train_envs_i", "\n", "", "else", ":", "\n", "        ", "test_envs_i", "=", "sample_n_from_list", "(", "test_envs", ",", "PARAMS", "[", "\"test_envs_per_iteration\"", "]", ")", "\n", "\n", "", "train_data_i", "=", "rollout_on_env_set", "(", "roller", ",", "train_envs_i", ",", "iteration", ",", "latest_model_filename", ",", "test", "=", "False", ")", "\n", "test_data_i", "=", "rollout_on_env_set", "(", "roller", ",", "test_envs_i", ",", "iteration", ",", "latest_model_filename", ",", "test", "=", "True", ")", "\n", "\n", "if", "setup", "[", "\"eval_landmark_side\"", "]", ":", "\n", "        ", "evaler", "=", "DataEvalLandmarkSide", "(", "setup", "[", "\"run_name\"", "]", ",", "save_images", "=", "False", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "test_data_i", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "print", "(", "\"Results:\"", ",", "results", ")", "\n", "evaler", ".", "write_summaries", "(", "setup", "[", "\"run_name\"", "]", ",", "\"dagger_eval\"", ",", "iteration", ")", "\n", "", "if", "setup", "[", "\"eval_nl\"", "]", ":", "\n", "        ", "evaler", "=", "DataEvalNL", "(", "setup", "[", "\"run_name\"", "]", ",", "entire_trajectory", "=", "not", "PARAMS", "[", "\"segment_level\"", "]", ",", "save_images", "=", "False", ")", "\n", "evaler", ".", "evaluate_dataset", "(", "test_data_i", ")", "\n", "results", "=", "evaler", ".", "get_results", "(", ")", "\n", "print", "(", "\"Results:\"", ",", "results", ")", "\n", "evaler", ".", "write_summaries", "(", "setup", "[", "\"run_name\"", "]", ",", "\"dagger_eval\"", ",", "iteration", ")", "\n", "#TODO: Complete", "\n", "\n", "# Kill the simulators after each rollout to save CPU cycles and avoid the slowdown", "\n", "", "os", ".", "system", "(", "\"killall -9 MyProject5-Linux-Shipping\"", ")", "\n", "os", ".", "system", "(", "\"killall -9 MyProject5\"", ")", "\n", "\n", "#save_json(train_summary, dagger_data_dir + \"dagger_train_summary_\" + str(iteration) + \".json\")", "\n", "#save_json(test_summary, dagger_data_dir + \"dagger_test_summary_\" + str(iteration) + \".json\")", "\n", "data_io", ".", "train_data", ".", "save_dataset", "(", "dataset_name", ",", "train_data_i", ",", "dagger_data_dir", "+", "\"train_\"", "+", "str", "(", "iteration", ")", ")", "\n", "data_io", ".", "train_data", ".", "save_dataset", "(", "dataset_name", ",", "test_data_i", ",", "dagger_data_dir", "+", "\"test_\"", "+", "str", "(", "iteration", ")", ")", "\n", "\n", "return", "train_data_i", ",", "test_data_i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.load_latest_model": [[144, 153], ["parameters.get_current_parameters", "data_io.models.load_model", "data_io.models.load_model"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model"], ["", "def", "load_latest_model", "(", "latest_model_filename", ")", ":", "\n", "# If we retrain every iteration, don't load previously trained model, but train from scratch", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "if", "PARAMS", "[", "\"retrain_every_iteration\"", "]", ":", "\n", "        ", "model", ",", "model_loaded", "=", "load_model", "(", "model_file_override", "=", "\"reset\"", ")", "\n", "# Otherwise load the latest model", "\n", "", "else", ":", "\n", "        ", "model", ",", "model_loaded", "=", "load_model", "(", "model_file_override", "=", "latest_model_filename", ")", "\n", "", "return", "model", ",", "model_loaded", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.resample_supervised_data": [[155, 170], ["data_io.train_data.filter_env_list_has_data", "random.sample", "enumerate", "len", "type", "type"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.filter_env_list_has_data", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "resample_supervised_data", "(", "dataset_name", ",", "train_data", ",", "all_env_ids", ")", ":", "\n", "    ", "\"\"\"\n    :param train_data: list of training data, where integers represent supervised data environments and the rest are lists of samples\n    :param all_env_ids: the env id's from which to resample the integers representing supervised data\n    :return: Nothing, the list is modified in place.\n    \"\"\"", "\n", "# All the integers that have been mixed in with the training data represent supervised data", "\n", "eligible_env_ids", "=", "filter_env_list_has_data", "(", "dataset_name", ",", "all_env_ids", ",", "\"supervised\"", ")", "\n", "current_supervised_envs", "=", "[", "env_id", "for", "env_id", "in", "train_data", "if", "type", "(", "env_id", ")", "is", "int", "]", "\n", "new_supervised_envs", "=", "random", ".", "sample", "(", "eligible_env_ids", ",", "len", "(", "current_supervised_envs", ")", ")", "\n", "j", "=", "0", "\n", "for", "i", ",", "env", "in", "enumerate", "(", "train_data", ")", ":", "\n", "        ", "if", "type", "(", "env", ")", "is", "int", ":", "\n", "            ", "train_data", "[", "i", "]", "=", "new_supervised_envs", "[", "j", "]", "\n", "j", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.train_dagger": [[172, 271], ["parameters.initialize_experiment", "data_io.helpers.save_json", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_restricted_env_id_lists", "train_dagger.resample_supervised_data", "train_dagger.resample_supervised_data", "print", "train_dagger.load_dagger_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "range", "parameters.get_current_parameters", "parameters.get_current_parameters", "rollout.parallel_roll_out.ParallelPolicyRoller", "rollout.roll_out.PolicyRoller", "list", "list", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "data_io.train_data.load_supervised_data", "train_dagger.restore_data_latest", "train_dagger.restore_data", "gc.collect", "print", "print", "print", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "data_io.train_data.save_dataset", "train_dagger.load_latest_model", "learning.training.trainer_supervised.Trainer", "range", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "hasattr", "learning.training.trainer_supervised.Trainer.get_state", "parameters.get_current_parameters", "range", "range", "str", "print", "set", "print", "train_dagger.collect_iteration_data", "print", "print", "print", "learning.training.trainer_supervised.Trainer.train_epoch", "learning.training.trainer_supervised.Trainer.train_epoch", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "data_io.model_io.save_pytorch_model", "print", "train_dagger.get_model_filename_at_iteration", "learning.training.trainer_supervised.Trainer.model.save", "len", "len", "len", "random.sample", "len", "len", "str", "list", "enumerate", "str", "len", "str", "range", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.resample_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.resample_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.load_dagger_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.restore_data_latest", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.restore_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.load_latest_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.collect_iteration_data", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.train.train_dagger.get_model_filename_at_iteration", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "", "", "def", "train_dagger", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "global", "PARAMS", "\n", "PARAMS", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Dagger\"", "]", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "dataset_name", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "[", "\"dataset_name\"", "]", "\n", "\n", "if", "setup", "[", "\"num_workers\"", "]", ">", "1", ":", "\n", "        ", "roller", "=", "ParallelPolicyRoller", "(", "num_workers", "=", "setup", "[", "\"num_workers\"", "]", ",", "first_worker", "=", "setup", "[", "\"first_worker\"", "]", ",", "reduce", "=", "PARAMS", "[", "\"segment_level\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "roller", "=", "PolicyRoller", "(", ")", "\n", "\n", "", "latest_model_filename", "=", "\"dagger_\"", "+", "setup", "[", "\"model\"", "]", "+", "\"_\"", "+", "setup", "[", "\"run_name\"", "]", "\n", "dagger_data_dir", "=", "\"dagger_data/\"", "+", "setup", "[", "\"run_name\"", "]", "+", "\"/\"", "\n", "\n", "save_json", "(", "PARAMS", ",", "dagger_data_dir", "+", "\"run_params.json\"", ")", "\n", "\n", "# Load less tf data, but sample dagger rollouts from more environments to avoid overfitting.", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "data_io", ".", "instructions", ".", "get_restricted_env_id_lists", "(", "max_envs", "=", "PARAMS", "[", "\"max_envs_dag\"", "]", ")", "\n", "\n", "if", "PARAMS", "[", "\"resample_supervised_data\"", "]", ":", "\n", "# Supervised data are represented as integers that will be later loaded by the dataset", "\n", "        ", "all_train_data", "=", "list", "(", "range", "(", "PARAMS", "[", "\"max_samples_in_memory\"", "]", ")", ")", "\n", "all_test_data", "=", "list", "(", "range", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "all_train_data", ",", "all_test_data", "=", "data_io", ".", "train_data", ".", "load_supervised_data", "(", "dataset_name", ",", "max_envs", "=", "PARAMS", "[", "\"max_envs_sup\"", "]", ",", "split_segments", "=", "PARAMS", "[", "\"segment_level\"", "]", ")", "\n", "\n", "", "resample_supervised_data", "(", "dataset_name", ",", "all_train_data", ",", "train_envs", ")", "\n", "resample_supervised_data", "(", "dataset_name", ",", "all_test_data", ",", "test_envs", ")", "\n", "\n", "print", "(", "\"Loaded tf data size: \"", "+", "str", "(", "len", "(", "all_train_data", ")", ")", "+", "\" : \"", "+", "str", "(", "len", "(", "all_test_data", ")", ")", ")", "\n", "\n", "model", "=", "load_dagger_model", "(", "latest_model_filename", ")", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "model", ",", "latest_model_filename", ")", "\n", "\n", "if", "PARAMS", "[", "\"restore_latest\"", "]", ":", "\n", "        ", "all_train_data", ",", "all_test_data", "=", "restore_data_latest", "(", "dagger_data_dir", ",", "dataset_name", ")", "\n", "", "else", ":", "\n", "        ", "restore_data", "(", "dataset_name", ",", "dagger_data_dir", ",", "all_train_data", ",", "all_test_data", ")", "\n", "\n", "", "last_trainer_state", "=", "None", "\n", "\n", "for", "iteration", "in", "range", "(", "PARAMS", "[", "\"restore\"", "]", ",", "PARAMS", "[", "\"max_iterations\"", "]", ")", ":", "\n", "        ", "gc", ".", "collect", "(", ")", "\n", "print", "(", "\"-------------------------------\"", ")", "\n", "print", "(", "\"DAGGER ITERATION : \"", ",", "iteration", ")", "\n", "print", "(", "\"-------------------------------\"", ")", "\n", "\n", "test_data_i", "=", "all_test_data", "\n", "\n", "# If we have too many training examples in memory, discard uniformly at random to keep a somewhat fixed bound", "\n", "max_samples", "=", "PARAMS", "[", "\"max_samples_in_memory\"", "]", "\n", "if", "max_samples", ">", "0", "and", "len", "(", "all_train_data", ")", ">", "max_samples", ":", "# and iteration != args.dagger_restore:", "\n", "            ", "num_discard", "=", "len", "(", "all_train_data", ")", "-", "max_samples", "\n", "print", "(", "\"Too many samples in memory! Dropping \"", "+", "str", "(", "num_discard", ")", "+", "\" samples\"", ")", "\n", "discards", "=", "set", "(", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "all_train_data", ")", ")", ")", ",", "num_discard", ")", ")", "\n", "all_train_data", "=", "[", "sample", "for", "i", ",", "sample", "in", "enumerate", "(", "all_train_data", ")", "if", "i", "not", "in", "discards", "]", "\n", "print", "(", "\"Now left \"", "+", "str", "(", "len", "(", "all_train_data", ")", ")", "+", "\" samples\"", ")", "\n", "\n", "# Roll out new data at iteration i, except if we are restoring to that iteration, in which case we already have data", "\n", "", "if", "iteration", "!=", "PARAMS", "[", "\"restore\"", "]", "or", "iteration", "==", "0", ":", "\n", "            ", "train_data_i", ",", "test_data_i", "=", "collect_iteration_data", "(", "roller", ",", "iteration", ",", "train_envs", ",", "test_envs", ",", "latest_model_filename", ",", "dagger_data_dir", ",", "dataset_name", ")", "\n", "\n", "# Aggregate the dataset", "\n", "all_train_data", "+=", "train_data_i", "\n", "all_test_data", "+=", "test_data_i", "\n", "print", "(", "\"Aggregated dataset!)\"", ")", "\n", "print", "(", "\"Total samples: \"", ",", "len", "(", "all_train_data", ")", ")", "\n", "print", "(", "\"New samples: \"", ",", "len", "(", "train_data_i", ")", ")", "\n", "\n", "", "data_io", ".", "train_data", ".", "save_dataset", "(", "dataset_name", ",", "all_train_data", ",", "dagger_data_dir", "+", "\"train_latest\"", ")", "\n", "data_io", ".", "train_data", ".", "save_dataset", "(", "dataset_name", ",", "test_data_i", ",", "dagger_data_dir", "+", "\"test_latest\"", ")", "\n", "\n", "model", ",", "model_loaded", "=", "load_latest_model", "(", "latest_model_filename", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "model", ",", "state", "=", "last_trainer_state", ")", "\n", "\n", "import", "rollout", ".", "run_metadata", "as", "run_md", "\n", "run_md", ".", "IS_ROLLOUT", "=", "False", "\n", "\n", "# Train on the newly aggregated dataset", "\n", "num_epochs", "=", "PARAMS", "[", "\"epochs_per_iteration_override\"", "]", "[", "iteration", "]", "if", "iteration", "in", "PARAMS", "[", "\"epochs_per_iteration_override\"", "]", "else", "PARAMS", "[", "\"epochs_per_iteration\"", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "# Get a random sample of all test data for calculating eval loss", "\n", "#epoch_test_sample = sample_n_from_list(all_test_data, PARAMS[\"num_test_samples\"])", "\n", "# Just evaluate on the latest test data", "\n", "            ", "epoch_test_sample", "=", "test_data_i", "\n", "\n", "loss", "=", "trainer", ".", "train_epoch", "(", "all_train_data", ")", "\n", "test_loss", "=", "trainer", ".", "train_epoch", "(", "epoch_test_sample", ",", "eval", "=", "True", ")", "\n", "\n", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "trainer", ".", "model", ",", "latest_model_filename", ")", "\n", "print", "(", "\"Epoch\"", ",", "epoch", ",", "\"Loss: Train:\"", ",", "loss", ",", "\"Test:\"", ",", "test_loss", ")", "\n", "\n", "", "data_io", ".", "model_io", ".", "save_pytorch_model", "(", "trainer", ".", "model", ",", "get_model_filename_at_iteration", "(", "setup", ",", "iteration", ")", ")", "\n", "if", "hasattr", "(", "trainer", ".", "model", ",", "\"save\"", ")", ":", "\n", "            ", "trainer", ".", "model", ".", "save", "(", "\"dag\"", "+", "str", "(", "iteration", ")", ")", "\n", "", "last_trainer_state", "=", "trainer", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_top_down_pred.train_top_down_pred": [[19, 79], ["parameters.parameter_server.initialize_experiment", "data_io.models.load_model", "learning.training.trainer_supervised.Trainer", "data_io.instructions.get_restricted_env_id_lists", "print", "range", "pandas.DataFrame", "pd.DataFrame.to_csv", "data_io.weights.restore_pretrained_weights", "learning.training.trainer_supervised.Trainer.train_epoch", "pd.DataFrame.append", "learning.training.trainer_supervised.Trainer.train_epoch", "print", "data_io.model_io.save_pytorch_model", "data_io.weights.save_pretrained_weights", "print", "data_io.model_io.save_pytorch_model", "print", "data_io.paths.get_model_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.restore_pretrained_weights", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.save_pretrained_weights", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir"], ["def", "train_top_down_pred", "(", "args", ",", "max_epoch", "=", "SUPERVISED_EPOCHS", ")", ":", "\n", "    ", "initialize_experiment", "(", "args", ".", "run_name", ",", "args", ".", "setup_name", ")", "\n", "\n", "model", ",", "model_loaded", "=", "load_model", "(", ")", "\n", "\n", "# TODO: Get batch size from global parameter server when it exists", "\n", "batch_size", "=", "1", "if", "args", ".", "model", "==", "\"top_down\"", "or", "args", ".", "model", "==", "\"top_down_prior\"", "or", "args", ".", "model", "==", "\"top_down_sm\"", "or", "args", ".", "model", "==", "\"top_down_pretrain\"", "or", "args", ".", "model", "==", "\"top_down_goal_pretrain\"", "or", "args", ".", "model", "==", "\"top_down_nav\"", "or", "args", ".", "model", "==", "\"top_down_cond\"", "else", "BATCH_SIZE", "\n", "\n", "lr", "=", "0.001", "# * batch_size", "\n", "trainer", "=", "Trainer", "(", "model", ",", "epoch", "=", "args", ".", "start_epoch", ",", "name", "=", "args", ".", "model", ",", "run_name", "=", "args", ".", "run_name", ")", "\n", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", "max_envs", "=", "args", ".", "max_envs", ")", "\n", "\n", "filename", "=", "\"top_down_\"", "+", "args", ".", "model", "+", "\"_\"", "+", "args", ".", "run_name", "\n", "\n", "if", "args", ".", "restore_weights_name", "is", "not", "None", ":", "\n", "        ", "restore_pretrained_weights", "(", "model", ",", "args", ".", "restore_weights_name", ",", "args", ".", "fix_restored_weights", ")", "\n", "\n", "", "print", "(", "\"Beginning training...\"", ")", "\n", "best_test_loss", "=", "1000", "\n", "\n", "validation_loss", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "SUPERVISED_EPOCHS", ")", ":", "\n", "        ", "train_loss", "=", "-", "1", "\n", "\n", "if", "not", "args", ".", "eval_pretrain", ":", "\n", "            ", "train_loss", "=", "trainer", ".", "train_epoch", "(", "train_envs", "=", "train_envs", ",", "eval", "=", "False", ")", "\n", "\n", "", "test_loss", "=", "trainer", ".", "train_epoch", "(", "train_envs", "=", "dev_envs", ",", "eval", "=", "True", ")", "\n", "validation_loss", ".", "append", "(", "[", "epoch", ",", "test_loss", "]", ")", "\n", "\n", "if", "not", "args", ".", "eval_pretrain", ":", "\n", "            ", "if", "test_loss", "<", "best_test_loss", ":", "\n", "                ", "best_test_loss", "=", "test_loss", "\n", "save_pytorch_model", "(", "trainer", ".", "model", ",", "filename", ")", "\n", "print", "(", "\"Saved model in:\"", ",", "filename", ")", "\n", "\n", "", "print", "(", "\"Epoch\"", ",", "epoch", ",", "\"train_loss:\"", ",", "train_loss", ",", "\"test_loss:\"", ",", "test_loss", ")", "\n", "save_pytorch_model", "(", "trainer", ".", "model", ",", "\"tmp/\"", "+", "filename", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", ")", "\n", "save_pretrained_weights", "(", "trainer", ".", "model", ",", "args", ".", "run_name", ")", "\n", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "if", "max_epoch", "is", "not", "None", "and", "epoch", ">", "max_epoch", ":", "\n", "            ", "print", "(", "\"Reached epoch limit!\"", ")", "\n", "break", "\n", "\n", "", "", "test_loss_dir", "=", "get_model_dir", "(", ")", "+", "\"/test_loss/\"", "+", "filename", "+", "\"_test_loss.csv\"", "\n", "validation_loss", "=", "pd", ".", "DataFrame", "(", "validation_loss", ",", "columns", "=", "[", "'epoch'", ",", "\"test_loss\"", "]", ")", "\n", "validation_loss", ".", "to_csv", "(", "test_loss_dir", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.generate_env_subsets.first_choice_ok": [[18, 29], ["numpy.asarray", "numpy.asarray().sum", "print", "len", "range", "numpy.asarray", "len"], "function", ["None"], ["def", "first_choice_ok", "(", "choice", ")", ":", "\n", "    ", "if", "len", "(", "choice", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "charray", "=", "np", ".", "asarray", "(", "choice", ")", "\n", "c5", "=", "(", "charray", "/", "5", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "copies", "=", "[", "c5", "[", "c", "]", "in", "c5", "[", ":", "c", "]", "or", "c", "in", "c5", "[", "c", "+", "1", ":", "]", "for", "c", "in", "range", "(", "len", "(", "c5", ")", ")", "]", "\n", "num_copies", "=", "np", ".", "asarray", "(", "copies", ")", ".", "sum", "(", ")", "\n", "print", "(", "\"num_envs_same: \"", ",", "num_copies", ")", "\n", "if", "num_copies", ">", "0", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.train.train_supervised.train_supervised": [[12, 54], ["parameters.parameter_server.initialize_experiment", "data_io.models.load_model", "print", "data_io.instructions.get_restricted_env_id_lists", "learning.training.trainer_supervised.Trainer", "print", "range", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "str", "data_io.train_data.file_exists", "learning.training.trainer_supervised.Trainer.train_epoch", "learning.training.trainer_supervised.Trainer.train_epoch", "print", "print", "data_io.model_io.save_pytorch_model", "hasattr", "data_io.weights.save_pretrained_weights", "data_io.model_io.load_pytorch_model", "print", "print", "exit", "data_io.model_io.save_pytorch_model", "print", "learning.training.trainer_supervised.Trainer.model.save", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.file_exists", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.save_pretrained_weights", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save"], ["def", "train_supervised", "(", ")", ":", "\n", "    ", "initialize_experiment", "(", ")", "\n", "\n", "setup", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "supervised_params", "=", "get_current_parameters", "(", ")", "[", "\"Supervised\"", "]", "\n", "num_epochs", "=", "supervised_params", "[", "\"num_epochs\"", "]", "\n", "\n", "model", ",", "model_loaded", "=", "load_model", "(", ")", "\n", "\n", "print", "(", "\"Loading data\"", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "filename", "=", "\"supervised_\"", "+", "setup", "[", "\"model\"", "]", "+", "\"_\"", "+", "setup", "[", "\"run_name\"", "]", "\n", "start_filename", "=", "\"tmp/\"", "+", "filename", "+", "\"_epoch_\"", "+", "str", "(", "supervised_params", "[", "\"start_epoch\"", "]", ")", "\n", "if", "supervised_params", "[", "\"start_epoch\"", "]", ">", "0", ":", "\n", "        ", "if", "file_exists", "(", "start_filename", ",", "\"\"", ")", ":", "\n", "            ", "load_pytorch_model", "(", "model", ",", "start_filename", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Couldn't continue training. Model file doesn't exist at:\"", ")", "\n", "print", "(", "start_filename", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "", "trainer", "=", "Trainer", "(", "model", ",", "epoch", "=", "supervised_params", "[", "\"start_epoch\"", "]", ",", "name", "=", "setup", "[", "\"model\"", "]", ",", "run_name", "=", "setup", "[", "\"run_name\"", "]", ")", "\n", "\n", "print", "(", "\"Beginning training...\"", ")", "\n", "best_test_loss", "=", "1000", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "train_loss", "=", "trainer", ".", "train_epoch", "(", "train_data", "=", "None", ",", "train_envs", "=", "train_envs", ",", "eval", "=", "False", ")", "\n", "trainer", ".", "model", ".", "correct_goals", "=", "0", "\n", "trainer", ".", "model", ".", "total_goals", "=", "0", "\n", "test_loss", "=", "trainer", ".", "train_epoch", "(", "train_data", "=", "None", ",", "train_envs", "=", "dev_envs", ",", "eval", "=", "True", ")", "\n", "\n", "print", "(", "\"GOALS: \"", ",", "trainer", ".", "model", ".", "correct_goals", ",", "trainer", ".", "model", ".", "total_goals", ")", "\n", "\n", "if", "test_loss", "<", "best_test_loss", ":", "\n", "            ", "best_test_loss", "=", "test_loss", "\n", "save_pytorch_model", "(", "trainer", ".", "model", ",", "filename", ")", "\n", "print", "(", "\"Saved model in:\"", ",", "filename", ")", "\n", "", "print", "(", "\"Epoch\"", ",", "epoch", ",", "\"train_loss:\"", ",", "train_loss", ",", "\"test_loss:\"", ",", "test_loss", ")", "\n", "save_pytorch_model", "(", "trainer", ".", "model", ",", "\"tmp/\"", "+", "filename", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", ")", "\n", "if", "hasattr", "(", "trainer", ".", "model", ",", "\"save\"", ")", ":", "\n", "            ", "trainer", ".", "model", ".", "save", "(", "epoch", ")", "\n", "", "save_pretrained_weights", "(", "trainer", ".", "model", ",", "setup", "[", "\"run_name\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_landmark_fpv_images.build_default_fpv_config": [[15, 34], ["landmark_radii.items", "config[].append", "config[].append", "config[].append", "config[].append", "config[].append", "env_config.definitions.landmarks.PORTABLE_LANDMARK_RADII"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "build_default_fpv_config", "(", "landmark_radii", ")", ":", "\n", "    ", "config", "=", "{", "\n", "\"zPos\"", ":", "[", "]", ",", "\n", "\"xPos\"", ":", "[", "]", ",", "\n", "\"isEnabled\"", ":", "[", "]", ",", "\n", "\"radius\"", ":", "[", "]", ",", "\n", "\"landmarkName\"", ":", "[", "]", "\n", "}", "\n", "lm_name_to_idx", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "lm_name", ",", "lm_radius", "in", "landmark_radii", ".", "items", "(", ")", ":", "\n", "        ", "config", "[", "\"xPos\"", "]", ".", "append", "(", "-", "500", ")", "\n", "config", "[", "\"zPos\"", "]", ".", "append", "(", "-", "500", ")", "\n", "config", "[", "\"isEnabled\"", "]", ".", "append", "(", "True", ")", "\n", "config", "[", "\"radius\"", "]", ".", "append", "(", "lm_radius", ")", "\n", "config", "[", "\"landmarkName\"", "]", ".", "append", "(", "lm_name", ")", "\n", "lm_name_to_idx", "[", "lm_name", "]", "=", "i", "\n", "i", "+=", "1", "\n", "", "return", "config", ",", "lm_name_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_landmark_fpv_images.collect_fpv_images": [[36, 68], ["parameters.initialize_experiment", "os.makedirs", "env_config.definitions.landmarks.PORTABLE_LANDMARK_RADII.keys", "parameters.get_current_parameters", "drones.droneController.drone_controller_factory", "data_io.paths.get_landmark_images_dir", "print", "collect_landmark_fpv_images.build_default_fpv_config", "drone.set_current_env_from_config", "drone.reset_environment", "time.sleep", "drone.teleport_to", "drone.send_local_velocity_command", "drone.get_state", "visualization.Presenter().show_image", "env_config.definitions.landmarks.get_landmark_stage_name", "cv2.putText", "cv2.putText", "data_io.paths.get_landmark_image_path", "imageio.imsave", "parameters.get_current_parameters", "visualization.Presenter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneController.drone_controller_factory", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_images_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_landmark_fpv_images.build_default_fpv_config", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.set_current_env_from_config", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.reset_environment", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_to", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_stage_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_image_path", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "collect_fpv_images", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "flight_height", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"PomdpInterface\"", "]", "[", "\"flight_height\"", "]", "\n", "drone", "=", "drone_controller_factory", "(", "simulator", "=", "True", ")", "(", "instance", "=", "0", ",", "flight_height", "=", "flight_height", ")", "\n", "\n", "os", ".", "makedirs", "(", "get_landmark_images_dir", "(", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "landmark", "in", "LM_RADII", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "f\"Saving landmark: {landmark}\"", ")", "\n", "config", ",", "lm_name_to_idx", "=", "build_default_fpv_config", "(", "LM_RADII", ")", "\n", "idx", "=", "lm_name_to_idx", "[", "landmark", "]", "\n", "config", "[", "\"xPos\"", "]", "[", "idx", "]", "=", "500", "\n", "config", "[", "\"zPos\"", "]", "[", "idx", "]", "=", "500", "\n", "\n", "drone", ".", "set_current_env_from_config", "(", "config", ",", "instance_id", "=", "0", ")", "\n", "drone", ".", "reset_environment", "(", ")", "\n", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "drone", ".", "teleport_to", "(", "[", "4.7", "-", "1.5", ",", "4.7", "-", "1.5", "]", ",", "0.78", "+", "3.14159", ")", "\n", "drone", ".", "send_local_velocity_command", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "state", ",", "img", "=", "drone", ".", "get_state", "(", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "img", ",", "\"img\"", ",", "waitkey", "=", "10", ")", "\n", "\n", "stage_name", "=", "get_landmark_stage_name", "(", "landmark", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "stage_name", ",", "(", "5", ",", "40", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "1.5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "5", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "stage_name", ",", "(", "5", ",", "40", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "1.5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "3", ")", "\n", "\n", "impath", "=", "get_landmark_image_path", "(", "stage_name", ")", "\n", "imageio", ".", "imsave", "(", "impath", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.build_noisy_pose_data.build_noisy_pose_data": [[9, 34], ["parameters.parameter_server.initialize_experiment", "parameters.parameter_server.get_current_parameters", "data_io.instructions.get_restricted_env_id_lists", "print", "learning.inputs.pose.get_pose_noise_np", "learning.datasets.rss_noisy_poses.save_noisy_poses", "print", "str", "len", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_pose_noise_np", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.rss_noisy_poses.save_noisy_poses"], ["def", "build_noisy_pose_data", "(", ")", ":", "\n", "    ", "\"\"\"\n    Randomly sample pose noise for every observation in every environment for the RSS experiment with noisy poses.\n    This needs to be pre-computed once before training to simulate the noise being measured during trajectory collection.\n    If we were to randomize poses during training, that would be akin to regularization,\n    which could actually improve instead of hurt performance.\n    :return:\n    \"\"\"", "\n", "initialize_experiment", "(", ")", "\n", "params", "=", "get_current_parameters", "(", ")", "\n", "setup_params", "=", "params", "[", "\"Setup\"", "]", "\n", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", "\n", "max_envs", "=", "setup_params", "[", "\"max_envs\"", "]", ",", "\n", "prune_ambiguous", "=", "setup_params", "[", "\"prune_ambiguous\"", "]", ")", "\n", "\n", "envs", "=", "dev_envs", "+", "train_envs", "+", "test_envs", "\n", "print", "(", "\"Num envs:\"", "+", "str", "(", "len", "(", "envs", ")", ")", ")", "\n", "\n", "pos_noise", "=", "params", "[", "\"Data\"", "]", "[", "\"noisy_pos_variance\"", "]", "\n", "rot_noise", "=", "params", "[", "\"Data\"", "]", "[", "\"noisy_rot_variance\"", "]", "\n", "\n", "noisy_poses", "=", "get_pose_noise_np", "(", "setup_params", "[", "\"max_envs\"", "]", ",", "setup_params", "[", "\"trajectory_length\"", "]", ",", "pos_noise", ",", "rot_noise", ")", "\n", "save_noisy_poses", "(", "noisy_poses", ")", "\n", "print", "(", "\"saved noisy poses for \"", "+", "str", "(", "setup_params", "[", "\"max_envs\"", "]", ")", "+", "\" envs\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.filter_uncollected_envs": [[13, 25], ["print", "print", "data_io.paths.get_supervised_data_filename", "data_io.train_data.file_exists", "uncollected.append", "excluded.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_supervised_data_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.file_exists", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "filter_uncollected_envs", "(", "dataset_name", ",", "env_list", ")", ":", "\n", "    ", "uncollected", "=", "[", "]", "\n", "excluded", "=", "[", "]", "\n", "for", "env", "in", "env_list", ":", "\n", "        ", "filename", "=", "get_supervised_data_filename", "(", "env", ")", "\n", "if", "not", "file_exists", "(", "filename", ",", "dataset_name", ")", ":", "\n", "            ", "uncollected", ".", "append", "(", "env", ")", "\n", "", "else", ":", "\n", "            ", "excluded", ".", "append", "(", "env", ")", "\n", "", "", "print", "(", "\"Including envs: \"", ",", "uncollected", ")", "\n", "print", "(", "\"Excluding envs: \"", ",", "excluded", ")", "\n", "return", "uncollected", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.collect_data_on_env_list": [[27, 91], ["[].get", "[].get", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel().setPlot().setBuildTrainData().setRealDrone().setCuda().setSegmentReset().setWrongPathP", "print", "collect_supervised_data.filter_uncollected_envs", "range", "parameters.get_current_parameters", "rollout.parallel_roll_out.ParallelPolicyRoller", "rollout.roll_out.PolicyRoller", "setup.get", "setup.get", "len", "RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel().setPlot().setBuildTrainData().setRealDrone().setCuda().setSegmentReset().setWrongPathP.setEnvList", "rollout.roll_out.PolicyRoller.roll_out_policy", "range", "parameters.get_current_parameters", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel().setPlot().setBuildTrainData().setRealDrone().setCuda().setSegmentReset", "len", "drones.airsim_interface.droneController.killAirSim", "parameters.get_current_parameters", "parameters.get_current_parameters", "len", "data_io.paths.get_supervised_data_filename", "data_io.train_data.save_dataset", "print", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel().setPlot().setBuildTrainData().setRealDrone().setCuda", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel().setPlot().setBuildTrainData().setRealDrone", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel().setPlot().setBuildTrainData", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel().setPlot", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples().setSegmentLevel", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots().setSaveSamples", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName().setSavePlots", "rollout.roll_out_params.RollOutParams().setModelName().setRunName().setSetupName", "parameters.get_setup_name", "rollout.roll_out_params.RollOutParams().setModelName().setRunName", "rollout.roll_out_params.RollOutParams().setModelName", "rollout.roll_out_params.RollOutParams"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setWrongPathP", "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.filter_uncollected_envs", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_policy", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentReset", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.killAirSim", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_supervised_data_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCuda", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRealDrone", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setBuildTrainData", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setPlot", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentLevel", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSaveSamples", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSavePlots", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSetupName", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_setup_name", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRunName", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelName"], ["", "def", "collect_data_on_env_list", "(", "env_list", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "dataset_name", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "[", "\"dataset_name\"", "]", "\n", "\n", "if", "setup", "[", "\"num_workers\"", "]", ">", "1", ":", "\n", "        ", "roller", "=", "ParallelPolicyRoller", "(", "num_workers", "=", "setup", "[", "\"num_workers\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "roller", "=", "PolicyRoller", "(", ")", "\n", "\n", "", "group_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", ".", "get", "(", "\"collect_n_at_a_time\"", ",", "5", ")", "\n", "\n", "wrong_paths_p", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Rollout\"", "]", ".", "get", "(", "\"wrong_path_p\"", ",", "0.0", ")", "\n", "\n", "# setSetupName is important - it allows the threads to load the same json file and initialize stuff correctly", "\n", "roll_params", "=", "RollOutParams", "(", ")", ".", "setModelName", "(", "\"oracle\"", ")", ".", "setRunName", "(", "setup", "[", "\"run_name\"", "]", ")", ".", "setSetupName", "(", "P", ".", "get_setup_name", "(", ")", ")", ".", "setSavePlots", "(", "False", ")", ".", "setSaveSamples", "(", "False", ")", ".", "setSegmentLevel", "(", "False", ")", ".", "setPlot", "(", "False", ")", ".", "setBuildTrainData", "(", "False", ")", ".", "setRealDrone", "(", "setup", "[", "\"real_drone\"", "]", ")", ".", "setCuda", "(", "setup", "[", "\"cuda\"", "]", ")", ".", "setSegmentReset", "(", "\"always\"", ")", ".", "setWrongPathP", "(", "wrong_paths_p", ")", "\n", "\n", "# Collect training data", "\n", "print", "(", "\"Collecting training data!\"", ")", "\n", "\n", "if", "setup", ".", "get", "(", "\"env_range_start\"", ")", ">", "0", ":", "\n", "        ", "env_list", "=", "[", "e", "for", "e", "in", "env_list", "if", "e", ">=", "setup", "[", "\"env_range_start\"", "]", "]", "\n", "", "if", "setup", ".", "get", "(", "\"env_range_end\"", ")", ">", "0", ":", "\n", "        ", "env_list", "=", "[", "e", "for", "e", "in", "env_list", "if", "e", "<", "setup", "[", "\"env_range_end\"", "]", "]", "\n", "\n", "", "env_list", "=", "env_list", "[", ":", "setup", "[", "\"max_envs\"", "]", "]", "\n", "env_list", "=", "filter_uncollected_envs", "(", "dataset_name", ",", "env_list", ")", "\n", "\n", "group_size", "=", "setup", "[", "\"num_workers\"", "]", "*", "group_size", "\n", "\n", "kill_airsim_every_n_rounds", "=", "50", "\n", "round_counter", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "env_list", ")", ",", "group_size", ")", ":", "\n", "# Rollout on group_size envs at a time. After each group, land the drone and save the data", "\n", "        ", "round_envs", "=", "env_list", "[", "i", ":", "]", "\n", "round_envs", "=", "round_envs", "[", ":", "group_size", "]", "\n", "roll_params", ".", "setEnvList", "(", "round_envs", ")", "\n", "env_datas", "=", "roller", ".", "roll_out_policy", "(", "roll_params", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "env_datas", ")", ")", ":", "\n", "            ", "env_data", "=", "env_datas", "[", "j", "]", "\n", "if", "len", "(", "env_data", ")", ">", "0", ":", "\n", "# KeyError: 0:", "\n", "                ", "env_id", "=", "env_data", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "filename", "=", "get_supervised_data_filename", "(", "env_id", ")", "\n", "save_dataset", "(", "dataset_name", ",", "env_data", ",", "filename", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Empty rollout!\"", ")", "\n", "# AirSim tends to clog up and become slow. Kill it every so often to restart it.", "\n", "", "", "round_counter", "+=", "1", "\n", "if", "round_counter", ">", "kill_airsim_every_n_rounds", ":", "\n", "            ", "round_counter", "=", "0", "\n", "killAirSim", "(", "do_kill", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.collect_supervised_data": [[93, 109], ["parameters.initialize_experiment", "data_io.instructions.get_restricted_env_id_lists", "parameters.get_current_parameters", "[].get", "print", "collect_supervised_data.collect_data_on_env_list", "[].get", "print", "collect_supervised_data.collect_data_on_env_list", "print", "collect_supervised_data.collect_data_on_env_list", "collect_supervised_data.collect_data_on_env_list", "parameters.get_current_parameters", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.collect_data_on_env_list", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.collect_data_on_env_list", "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.collect_data_on_env_list", "home.repos.pwc.inspect_result.clic-lab_drif.data_collect.collect_supervised_data.collect_data_on_env_list", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "", "", "def", "collect_supervised_data", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "#", "\n", "\n", "if", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"env_set\"", ")", "==", "\"train\"", ":", "\n", "        ", "print", "(", "\"Collecting data for training envs\"", ")", "\n", "collect_data_on_env_list", "(", "train_envs", ")", "\n", "", "elif", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"env_set\"", ")", "==", "\"dev\"", ":", "\n", "        ", "print", "(", "\"Collecting data for dev envs\"", ")", "\n", "collect_data_on_env_list", "(", "dev_envs", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Collecting data for both training and dev envs\"", ")", "\n", "collect_data_on_env_list", "(", "train_envs", ")", "\n", "collect_data_on_env_list", "(", "dev_envs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.__init__": [[16, 33], ["numpy.zeros", "fancy_carrot_planner.FancyCarrotPlanner.set_path", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.set_path", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ",", "max_deviation", "=", "200", ")", ":", "\n", "        ", "self", ".", "path", "=", "None", "\n", "self", ".", "end_idx", "=", "0", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"FancyCarrotPlanner\"", "]", "\n", "self", ".", "dynamics_params", "=", "get_current_parameters", "(", ")", "[", "\"Dynamics\"", "]", "\n", "\n", "self", ".", "current_step", "=", "0", "\n", "self", ".", "current_lookahead", "=", "self", ".", "params", "[", "\"LOOKAHEAD\"", "]", "\n", "self", ".", "current_vel_lookahed", "=", "self", ".", "params", "[", "\"VEL_LOOKAHEAD\"", "]", "\n", "self", ".", "finished", "=", "False", "\n", "self", ".", "discrete", "=", "False", "\n", "self", ".", "control_step", "=", "0", "\n", "self", ".", "max_deviation", "=", "max_deviation", "\n", "\n", "self", ".", "last_sanity_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "set_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.set_path": [[34, 38], ["numpy.asarray", "len"], "methods", ["None"], ["", "def", "set_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "np", ".", "asarray", "(", "path", ")", "\n", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "end_idx", "=", "len", "(", "path", ")", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.clip_vel": [[39, 51], ["None"], "methods", ["None"], ["", "", "def", "clip_vel", "(", "self", ",", "action", ")", ":", "\n", "# Never go backwards", "\n", "        ", "if", "action", "[", "0", "]", ">", "self", ".", "dynamics_params", "[", "\"MAX_VEL_X\"", "]", ":", "\n", "            ", "action", "[", "0", "]", "=", "self", ".", "dynamics_params", "[", "\"MAX_VEL_X\"", "]", "\n", "", "if", "action", "[", "0", "]", "<", "0", ":", "\n", "            ", "action", "[", "0", "]", "=", "0", "\n", "\n", "", "if", "action", "[", "2", "]", ">", "self", ".", "dynamics_params", "[", "\"MAX_VEL_Theta\"", "]", ":", "\n", "            ", "action", "[", "2", "]", "=", "self", ".", "dynamics_params", "[", "\"MAX_VEL_Theta\"", "]", "\n", "", "if", "action", "[", "2", "]", "<", "-", "self", ".", "dynamics_params", "[", "\"MAX_VEL_Theta\"", "]", ":", "\n", "            ", "action", "[", "2", "]", "=", "-", "self", ".", "dynamics_params", "[", "\"MAX_VEL_Theta\"", "]", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.get_action_target_yaw": [[52, 58], ["numpy.asarray", "fancy_carrot_planner.FancyCarrotPlanner.clip_vel"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.clip_vel"], ["", "def", "get_action_target_yaw", "(", "self", ",", "target_yaw", ",", "current_yaw", ")", ":", "\n", "        ", "diff_yaw", "=", "target_yaw", "-", "current_yaw", "\n", "vel_yaw", "=", "diff_yaw", "*", "self", ".", "params", "[", "\"K_Yaw\"", "]", "\n", "action", "=", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "vel_yaw", "]", ")", "\n", "action", "=", "self", ".", "clip_vel", "(", "action", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.set_current_segment": [[59, 72], ["len", "len", "len"], "methods", ["None"], ["", "def", "set_current_segment", "(", "self", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "#print (\"Starting segment: [\" + str(start_idx) + \", \" + str(end_idx) + \"]\")", "\n", "        ", "self", ".", "end_idx", "=", "end_idx", "\n", "self", ".", "current_step", "=", "start_idx", "\n", "self", ".", "current_lookahead", "=", "self", ".", "params", "[", "\"LOOKAHEAD\"", "]", "\n", "self", ".", "current_vel_lookahed", "=", "self", ".", "params", "[", "\"VEL_LOOKAHEAD\"", "]", "\n", "self", ".", "finished", "=", "False", "\n", "\n", "if", "len", "(", "self", ".", "path", ")", "<", "2", "or", "end_idx", "-", "start_idx", "<", "2", ":", "\n", "            ", "self", ".", "finished", "=", "True", "\n", "\n", "", "if", "self", ".", "end_idx", ">", "len", "(", "self", ".", "path", ")", "-", "2", ":", "\n", "            ", "self", ".", "end_idx", "=", "len", "(", "self", ".", "path", ")", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.get_action_go_to_position": [[73, 91], ["geometry.pos_to_drone", "geometry.vec_to_yaw", "geometry.clip_angle", "numpy.asarray", "fancy_carrot_planner.FancyCarrotPlanner.clip_vel"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.pos_to_drone", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.clip_vel"], ["", "", "def", "get_action_go_to_position", "(", "self", ",", "target_pos", ",", "current_pos", ",", "current_yaw", ")", ":", "\n", "\n", "        ", "target_pos_drone", "=", "pos_to_drone", "(", "current_pos", ",", "current_yaw", ",", "target_pos", ")", "\n", "target_heading", "=", "target_pos", "-", "current_pos", "\n", "target_yaw", "=", "vec_to_yaw", "(", "target_heading", ")", "\n", "\n", "diff_yaw", "=", "clip_angle", "(", "target_yaw", "-", "current_yaw", ")", "\n", "diff_x", "=", "target_pos_drone", "[", "0", "]", "\n", "diff_y", "=", "target_pos_drone", "[", "1", "]", "\n", "\n", "vel_x", "=", "diff_x", "*", "self", ".", "params", "[", "\"K_X\"", "]", "\n", "vel_y", "=", "diff_y", "*", "self", ".", "params", "[", "\"K_Y\"", "]", "\n", "vel_yaw", "=", "diff_yaw", "*", "self", ".", "params", "[", "\"K_Yaw\"", "]", "\n", "\n", "action", "=", "np", ".", "asarray", "(", "[", "vel_x", ",", "vel_y", ",", "vel_yaw", "]", ")", "\n", "action", "=", "self", ".", "clip_vel", "(", "action", ")", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.get_action_go_to_position_cvel": [[92, 109], ["fancy_carrot_planner.FancyCarrotPlanner.get_action_go_to_position", "fancy_carrot_planner.FancyCarrotPlanner.clip_vel"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action_go_to_position", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.clip_vel"], ["", "def", "get_action_go_to_position_cvel", "(", "self", ",", "target_pos", ",", "current_pos", ",", "current_yaw", ")", ":", "\n", "# Get the action corresponding to going to a point further along the vector", "\n", "        ", "action", "=", "self", ".", "get_action_go_to_position", "(", "target_pos", ",", "current_pos", ",", "current_yaw", ")", "\n", "\n", "# Then just clip it to constant velocity", "\n", "if", "action", "[", "0", "]", ">", "self", ".", "params", "[", "\"Line_Epsilon\"", "]", ":", "\n", "            ", "action", "[", "0", "]", "=", "self", ".", "dynamics_params", "[", "\"MAX_VEL_X\"", "]", "\n", "", "elif", "action", "[", "0", "]", "<", "-", "self", ".", "params", "[", "\"Line_Epsilon\"", "]", ":", "\n", "            ", "action", "[", "0", "]", "=", "-", "self", ".", "dynamics_params", "[", "\"MAX_VEL_X\"", "]", "\n", "", "else", ":", "\n", "            ", "action", "[", "0", "]", "=", "0.0", "\n", "\n", "", "action", "[", "1", "]", "=", "0", "\n", "\n", "action", "=", "self", ".", "clip_vel", "(", "action", ")", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.get_action_follow_vector": [[110, 150], ["fancy_carrot_planner.FancyCarrotPlanner.get_action_go_to_position", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.cross"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action_go_to_position"], ["", "def", "get_action_follow_vector", "(", "self", ",", "start_pos", ",", "vector", ",", "current_pos", ",", "current_yaw", ")", ":", "\n", "# Get the action corresponding to going to a point further along the vector", "\n", "        ", "action", "=", "self", ".", "get_action_go_to_position", "(", "current_pos", "+", "vector", ",", "current_pos", ",", "current_yaw", ")", "\n", "\n", "# Then just clip it to constant velocity", "\n", "if", "action", "[", "0", "]", ">", "self", ".", "params", "[", "\"Line_Epsilon\"", "]", ":", "\n", "            ", "action", "[", "0", "]", "=", "self", ".", "params", "[", "\"Line_Vel_X\"", "]", "\n", "", "elif", "action", "[", "0", "]", "<", "-", "self", ".", "params", "[", "\"Line_Epsilon\"", "]", ":", "\n", "            ", "action", "[", "0", "]", "=", "-", "self", ".", "params", "[", "\"Line_Vel_X\"", "]", "\n", "", "else", ":", "\n", "            ", "action", "[", "0", "]", "=", "0.0", "\n", "\n", "", "if", "action", "[", "1", "]", ">", "self", ".", "params", "[", "\"Line_Epsilon\"", "]", ":", "\n", "            ", "action", "[", "1", "]", "=", "self", ".", "params", "[", "\"Line_Vel_Y\"", "]", "\n", "", "elif", "action", "[", "1", "]", "<", "-", "self", ".", "params", "[", "\"Line_Epsilon\"", "]", ":", "\n", "            ", "action", "[", "1", "]", "=", "-", "self", ".", "params", "[", "\"Line_Vel_Y\"", "]", "\n", "", "else", ":", "\n", "            ", "action", "[", "1", "]", "=", "0.0", "\n", "\n", "# Also encourage the drone cancel any lateral error", "\n", "", "actual_direction", "=", "current_pos", "-", "start_pos", "\n", "actual_direction", "[", "2", "]", "=", "0", "\n", "\n", "# TODO: Actual direction is often zero, producing a NaN!!", "\n", "dir_mag", "=", "np", ".", "linalg", ".", "norm", "(", "actual_direction", ")", "\n", "act_mag", "=", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n", "# If we haven't moved at all yet.", "\n", "if", "(", "1e-9", ">", "dir_mag", ">", "-", "1e-9", ")", "or", "(", "1e-9", ">", "act_mag", ">", "-", "1e-9", ")", ":", "\n", "            ", "return", "action", "\n", "\n", "", "v1", "=", "vector", "/", "act_mag", "\n", "v2", "=", "actual_direction", "/", "dir_mag", "\n", "\n", "cross", "=", "np", ".", "cross", "(", "v1", ",", "v2", ")", "\n", "\n", "# If we have veered off path, steer back on the path", "\n", "action", "[", "2", "]", "-=", "self", ".", "params", "[", "\"K_Yaw_Offset\"", "]", "*", "cross", "[", "2", "]", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.reduce_speed_for_bendy_paths": [[151, 171], ["geometry.vec_to_yaw", "math.fabs", "geometry.clip_angle", "math.fabs", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle"], ["", "def", "reduce_speed_for_bendy_paths", "(", "self", ",", "action", ",", "current_pos", ",", "current_yaw", ",", "lookahead_pos", ")", ":", "\n", "\n", "        ", "lookahead_dir", "=", "lookahead_pos", "-", "current_pos", "\n", "lookahead_dir", "=", "lookahead_dir", "/", "np", ".", "linalg", ".", "norm", "(", "lookahead_dir", ")", "\n", "lookahead_yaw", "=", "vec_to_yaw", "(", "lookahead_dir", ")", "\n", "\n", "diff", "=", "math", ".", "fabs", "(", "current_yaw", "-", "lookahead_yaw", ")", "\n", "diff", "=", "clip_angle", "(", "diff", ")", "\n", "diff", "=", "math", ".", "fabs", "(", "diff", ")", "\n", "diff", "/=", "3.14159", "\n", "diff", "*=", "self", ".", "params", "[", "\"K_X_Lookahead_Reduction\"", "]", "\n", "\n", "multiplier", "=", "1", "-", "diff", "\n", "if", "multiplier", "<", "0.3", ":", "\n", "            ", "multiplier", "=", "0.3", "\n", "", "if", "multiplier", ">", "1", ":", "\n", "            ", "multiplier", "=", "1.0", "\n", "#print(\"diff:\", diff, \"m:\", multiplier)", "\n", "", "action", "[", "0", "]", "*=", "multiplier", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.reduce_speed_for_initial_acceleration": [[172, 178], ["float"], "methods", ["None"], ["", "def", "reduce_speed_for_initial_acceleration", "(", "self", ",", "action", ")", ":", "\n", "        ", "factor", "=", "float", "(", "(", "self", ".", "current_step", "+", "1", ")", "/", "self", ".", "params", "[", "\"ACCELERATE_STEPS\"", "]", ")", "\n", "if", "factor", ">", "1.0", ":", "\n", "            ", "factor", "=", "1.0", "\n", "", "action", "[", "0", "]", "*=", "factor", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.set_discrete": [[179, 181], ["None"], "methods", ["None"], ["", "def", "set_discrete", "(", "self", ",", "discrete", ")", ":", "\n", "        ", "self", ".", "discrete", "=", "discrete", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.discretize_action": [[182, 190], ["None"], "methods", ["None"], ["", "def", "discretize_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "[", "0", "]", ">", "self", ".", "params", "[", "\"DISCRETE_EPSILON_X\"", "]", ":", "\n", "            ", "action", "[", "0", "]", "=", "self", ".", "dynamics_params", "[", "\"MAX_VEL_X\"", "]", "\n", "", "elif", "action", "[", "0", "]", "<", "-", "SETTINGS", "[", "\"DISCRETE_EPSILON_X\"", "]", ":", "\n", "            ", "action", "[", "0", "]", "=", "-", "self", ".", "dynamics_params", "[", "\"MAX_VEL_X\"", "]", "\n", "", "else", ":", "\n", "            ", "action", "[", "0", "]", "=", "0", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.pos_from_state": [[191, 193], ["None"], "methods", ["None"], ["", "def", "pos_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.vel_from_state": [[194, 196], ["None"], "methods", ["None"], ["", "def", "vel_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "6", ":", "9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.yaw_from_state": [[197, 199], ["None"], "methods", ["None"], ["", "def", "yaw_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.get_follow_path_action": [[201, 298], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "int", "int", "fancy_carrot_planner.FancyCarrotPlanner.yaw_from_state", "numpy.zeros", "fancy_carrot_planner.FancyCarrotPlanner.get_action_follow_vector", "pomdp.normalize_action", "fancy_carrot_planner.FancyCarrotPlanner.reduce_speed_for_bendy_paths", "fancy_carrot_planner.FancyCarrotPlanner.reduce_speed_for_bendy_paths", "fancy_carrot_planner.FancyCarrotPlanner.reduce_speed_for_initial_acceleration", "numpy.isnan().any", "print", "numpy.asarray", "print", "numpy.asarray", "fancy_carrot_planner.FancyCarrotPlanner.pos_from_state", "fancy_carrot_planner.FancyCarrotPlanner.vel_from_state", "numpy.linalg.norm", "numpy.dot", "fancy_carrot_planner.FancyCarrotPlanner.discretize_action", "print", "max", "max", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.isnan", "list", "print", "numpy.asarray", "len", "len", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.yaw_from_state", "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action_follow_vector", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.convert_action.normalize_action", "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.reduce_speed_for_bendy_paths", "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.reduce_speed_for_bendy_paths", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_initial_acceleration", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.pos_from_state", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.vel_from_state", "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.discretize_action"], ["", "def", "get_follow_path_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "self", ".", "finished", ":", "\n", "            ", "print", "(", "\"Oracle: Already finished\"", ")", "\n", "return", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "", "start_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "next_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "lookahead_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "vel_lookahead_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "curr_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "curr_vel", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "curr_pos", "[", "0", ":", "2", "]", "=", "self", ".", "pos_from_state", "(", "state", ")", "[", "0", ":", "2", "]", "\n", "curr_vel", "[", "0", ":", "2", "]", "=", "self", ".", "vel_from_state", "(", "state", ")", "[", "0", ":", "2", "]", "\n", "\n", "# Change the lookahead depending on drone's current velocity.", "\n", "percent_speed", "=", "np", ".", "linalg", ".", "norm", "(", "curr_vel", ")", "/", "self", ".", "dynamics_params", "[", "\"MAX_VEL_X\"", "]", "\n", "self", ".", "current_lookahead", "=", "int", "(", "self", ".", "params", "[", "\"MIN_LOOKAHEAD\"", "]", "+", "self", ".", "params", "[", "\"LOOKAHEAD\"", "]", "*", "percent_speed", ")", "\n", "self", ".", "current_vel_lookahed", "=", "int", "(", "self", ".", "params", "[", "\"MIN_LOOKAHEAD\"", "]", "+", "self", ".", "params", "[", "\"VEL_LOOKAHEAD\"", "]", "*", "percent_speed", ")", "\n", "\n", "curr_yaw", "=", "self", ".", "yaw_from_state", "(", "state", ")", "\n", "\n", "self", ".", "control_step", "+=", "1", "\n", "\n", "action", "=", "np", ".", "zeros", "(", "3", ")", "\n", "start_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "]", "\n", "\n", "# Advance the step counter along the path", "\n", "while", "True", ":", "\n", "# If there are no longer LOOKAHEAD steps available in the path,", "\n", "# keep reducing lookahead until we finish the path", "\n", "            ", "max_lookahead", "=", "max", "(", "len", "(", "self", ".", "path", ")", "-", "2", ",", "self", ".", "end_idx", ")", "-", "self", ".", "current_step", "\n", "\n", "# Keep reducing lookahead until MIN_LOOKAHEAD when ending a segment", "\n", "if", "self", ".", "current_lookahead", ">", "self", ".", "params", "[", "\"MIN_LOOKAHEAD\"", "]", ":", "\n", "                ", "max_lookahead", "=", "self", ".", "end_idx", "-", "self", ".", "current_step", "\n", "# If ending the entire path, reduce lookahead all the way to 0", "\n", "", "else", ":", "\n", "                ", "max_lookahead", "=", "max", "(", "len", "(", "self", ".", "path", ")", "-", "2", "-", "self", ".", "current_step", ",", "0", ")", "\n", "\n", "", "if", "self", ".", "current_lookahead", ">", "max_lookahead", ":", "\n", "                ", "self", ".", "current_lookahead", "=", "max_lookahead", "\n", "", "if", "self", ".", "current_vel_lookahed", ">", "max_lookahead", ":", "\n", "                ", "self", ".", "current_vel_lookahed", "=", "max_lookahead", "\n", "\n", "", "next_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "+", "1", "]", "\n", "lookahead_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "+", "self", ".", "current_lookahead", "]", "\n", "vel_lookahead_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "+", "self", ".", "current_vel_lookahed", "]", "\n", "\n", "curr_direction", "=", "lookahead_pos", "-", "start_pos", "\n", "path_direction", "=", "lookahead_pos", "-", "start_pos", "\n", "threshold_dot", "=", "np", ".", "dot", "(", "next_pos", ",", "path_direction", ")", "\n", "\n", "# Must advance along path", "\n", "if", "np", ".", "dot", "(", "curr_pos", ",", "path_direction", ")", ">", "threshold_dot", ":", "\n", "                ", "self", ".", "current_step", "+=", "1", "\n", "\n", "#print (\"Step = \" + str(self.current_step) + \"/\" + str(self.end_idx))", "\n", "# If this is the end of path, mark as finished and return the final action", "\n", "if", "self", ".", "current_step", ">=", "self", ".", "end_idx", ":", "\n", "                    ", "self", ".", "current_lookahead", "=", "self", ".", "params", "[", "\"LOOKAHEAD\"", "]", "\n", "self", ".", "current_vel_lookahed", "=", "self", ".", "params", "[", "\"VEL_LOOKAHEAD\"", "]", "\n", "self", ".", "finished", "=", "True", "\n", "print", "(", "\"Oracle: End of path reached after \"", "+", "str", "(", "self", ".", "control_step", ")", "+", "\" actions\"", ")", "\n", "return", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "# We're good, let's compute the action", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "action", "=", "self", ".", "get_action_follow_vector", "(", "start_pos", ",", "curr_direction", ",", "curr_pos", ",", "curr_yaw", ")", "\n", "\n", "if", "self", ".", "discrete", ":", "\n", "            ", "action", "=", "self", ".", "discretize_action", "(", "action", ")", "\n", "\n", "", "action", "=", "DC", ".", "normalize_action", "(", "action", ")", "\n", "\n", "action", "=", "self", ".", "reduce_speed_for_bendy_paths", "(", "action", ",", "curr_pos", ",", "curr_yaw", ",", "vel_lookahead_pos", ")", "\n", "action", "=", "self", ".", "reduce_speed_for_bendy_paths", "(", "action", ",", "curr_pos", ",", "curr_yaw", ",", "lookahead_pos", ")", "\n", "action", "=", "self", ".", "reduce_speed_for_initial_acceleration", "(", "action", ")", "\n", "\n", "# Sometimes the speed reductions above cause the drone to stop completely. Don't let that happen:", "\n", "if", "action", "[", "0", "]", "<", "self", ".", "params", "[", "\"Min_Vel_X\"", "]", ":", "# and action[0] > 0:", "\n", "            ", "action", "[", "0", "]", "=", "self", ".", "params", "[", "\"Min_Vel_X\"", "]", "\n", "\n", "", "if", "np", ".", "linalg", ".", "norm", "(", "next_pos", "-", "curr_pos", ")", ">", "self", ".", "max_deviation", "and", "np", ".", "linalg", ".", "norm", "(", "start_pos", "-", "curr_pos", ")", ">", "self", ".", "max_deviation", "and", "np", ".", "linalg", ".", "norm", "(", "lookahead_pos", "-", "curr_pos", ")", ">", "self", ".", "max_deviation", ":", "\n", "            ", "return", "None", "\n", "\n", "#print (\"Action: \", action)", "\n", "", "if", "np", ".", "isnan", "(", "action", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "\"ERROR! Oracle produced a NaN action!\"", ")", "\n", "return", "None", "\n", "\n", "", "print", "(", "\"Fancy Oracle Action : \"", ",", "action", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "list", "(", "action", ")", "+", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.start_sequence": [[301, 303], ["None"], "methods", ["None"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.fancy_carrot_planner.FancyCarrotPlanner.get_action": [[304, 306], ["fancy_carrot_planner.FancyCarrotPlanner.get_follow_path_action"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.get_follow_path_action"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "get_follow_path_action", "(", "state", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.stop.BaselineStop.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.stop.BaselineStop.start_sequence": [[10, 12], ["None"], "methods", ["None"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.stop.BaselineStop.get_action": [[13, 18], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", "=", "None", ",", "sample", "=", "False", ",", "rl_rollout", "=", "False", ")", ":", "\n", "        ", "action", "=", "np", ".", "zeros", "(", "4", ")", "\n", "action", "[", "3", "]", "=", "1.0", "\n", "\n", "return", "action", ",", "{", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.baseline_average.BaselineAverage.__init__": [[9, 15], ["parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "params", "=", "get_current_parameters", "(", ")", "[", "\"BaselineAverage\"", "]", "\n", "self", ".", "current_step", "=", "0", "\n", "self", ".", "avg_fwd_vel", "=", "params", "[", "\"AvgSpeed\"", "]", "\n", "self", ".", "avg_yawrate", "=", "params", "[", "\"AvgYawrate\"", "]", "\n", "self", ".", "avg_num_steps", "=", "params", "[", "\"AvgSteps\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.baseline_average.BaselineAverage.start_sequence": [[16, 18], ["None"], "methods", ["None"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.baseline_average.BaselineAverage.get_action": [[19, 30], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", "=", "None", ",", "sample", "=", "False", ",", "rl_rollout", "=", "False", ")", ":", "\n", "        ", "action", "=", "np", ".", "zeros", "(", "4", ")", "\n", "action", "[", "0", "]", "=", "self", ".", "avg_fwd_vel", "\n", "action", "[", "2", "]", "=", "self", ".", "avg_yawrate", "\n", "\n", "# Stop after average number of steps", "\n", "self", ".", "current_step", "+=", "1", "\n", "if", "self", ".", "current_step", ">=", "self", ".", "avg_num_steps", ":", "\n", "            ", "action", "[", "3", "]", "=", "1.0", "\n", "\n", "", "return", "action", ",", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.__init__": [[24, 45], ["numpy.zeros", "simple_carrot_planner.SimpleCarrotPlanner.set_path", "utils.paths.condense_path_with_mapping", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.set_path", "home.repos.pwc.inspect_result.clic-lab_drif.utils.paths.condense_path_with_mapping", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "max_deviation", "=", "500", ")", ":", "\n", "        ", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "path", ",", "self", ".", "path_idx_map", "=", "condense_path_with_mapping", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "path", "=", "None", "\n", "self", ".", "path_idx_map", "=", "None", "\n", "", "self", ".", "end_idx", "=", "0", "\n", "self", ".", "env_id", "=", "-", "1", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"SimpleCarrotPlanner\"", "]", "\n", "\n", "self", ".", "current_step", "=", "0", "\n", "self", ".", "control_step", "=", "0", "\n", "\n", "self", ".", "current_lookahead", "=", "self", ".", "params", "[", "\"lookahead\"", "]", "\n", "self", ".", "finished", "=", "False", "\n", "self", ".", "max_deviation", "=", "max_deviation", "\n", "\n", "self", ".", "wrong_path_prob", "=", "0.0", "\n", "\n", "self", ".", "last_sanity_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "set_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.set_path": [[46, 54], ["utils.paths.condense_path_with_mapping", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.paths.condense_path_with_mapping"], ["", "def", "set_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "path", "is", "None", ":", "\n", "            ", "return", "\n", "", "condensed_path", ",", "path_map", "=", "condense_path_with_mapping", "(", "path", ")", "\n", "self", ".", "path", "=", "condensed_path", "\n", "self", ".", "path_idx_map", "=", "path_map", "\n", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "end_idx", "=", "len", "(", "path", ")", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.clip_vel": [[55, 67], ["None"], "methods", ["None"], ["", "", "def", "clip_vel", "(", "self", ",", "action", ")", ":", "\n", "# Never go backwards", "\n", "        ", "if", "action", "[", "0", "]", ">", "1", ":", "\n", "            ", "action", "[", "0", "]", "=", "1", "\n", "", "if", "action", "[", "0", "]", "<", "0", ":", "\n", "            ", "action", "[", "0", "]", "=", "0", "\n", "\n", "", "if", "action", "[", "2", "]", ">", "1", ":", "\n", "            ", "action", "[", "2", "]", "=", "1", "\n", "", "if", "action", "[", "2", "]", "<", "-", "1", ":", "\n", "            ", "action", "[", "2", "]", "=", "-", "1", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.set_wrong_path_prob": [[68, 70], ["None"], "methods", ["None"], ["", "def", "set_wrong_path_prob", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "wrong_path_prob", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.setEnvContext": [[71, 73], ["None"], "methods", ["None"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.set_current_segment": [[74, 94], ["print", "len", "len", "len", "random.uniform", "env_config.generation.generate_nl_curves.generate_random_wrong_path"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.generate_random_wrong_path"], ["", "def", "set_current_segment", "(", "self", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "        ", "self", ".", "end_idx", "=", "self", ".", "path_idx_map", "[", "end_idx", "]", "\n", "self", ".", "current_step", "=", "self", ".", "path_idx_map", "[", "start_idx", "]", "\n", "self", ".", "current_lookahead", "=", "self", ".", "params", "[", "\"lookahead\"", "]", "\n", "self", ".", "finished", "=", "False", "\n", "\n", "if", "len", "(", "self", ".", "path", ")", "<", "2", "or", "end_idx", "-", "start_idx", "<", "2", ":", "\n", "            ", "self", ".", "finished", "=", "True", "\n", "\n", "", "if", "self", ".", "end_idx", ">", "len", "(", "self", ".", "path", ")", "-", "2", ":", "\n", "            ", "self", ".", "end_idx", "=", "len", "(", "self", ".", "path", ")", "-", "2", "\n", "\n", "", "if", "self", ".", "wrong_path_prob", ">", "0.0", ":", "\n", "            ", "print", "(", "\"GENERATING WRONG REPLACEMENT PATH!\"", ")", "\n", "gen_wrong_path", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "self", ".", "wrong_path_prob", "\n", "if", "gen_wrong_path", ":", "\n", "                ", "replacement_path", "=", "generate_random_wrong_path", "(", "self", ".", "env_id", ",", "start_idx", ",", "end_idx", ")", "\n", "self", ".", "path", "=", "replacement_path", "\n", "self", ".", "end_idx", "=", "self", ".", "end_idx", "-", "self", ".", "current_step", "\n", "self", ".", "current_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action_go_to_position": [[96, 113], ["geometry.pos_to_drone", "geometry.vec_to_yaw", "geometry.clip_angle", "numpy.asarray", "simple_carrot_planner.SimpleCarrotPlanner.clip_vel"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.pos_to_drone", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.clip_vel"], ["", "", "", "def", "get_action_go_to_position", "(", "self", ",", "target_pos", ",", "current_pos", ",", "current_yaw", ")", ":", "\n", "\n", "        ", "target_pos_drone", "=", "pos_to_drone", "(", "current_pos", ",", "current_yaw", ",", "target_pos", ")", "\n", "target_heading", "=", "target_pos", "-", "current_pos", "\n", "target_yaw", "=", "vec_to_yaw", "(", "target_heading", ")", "\n", "\n", "diff_yaw_raw", "=", "target_yaw", "-", "current_yaw", "\n", "diff_yaw", "=", "clip_angle", "(", "diff_yaw_raw", ")", "\n", "diff_x", "=", "target_pos_drone", "[", "0", "]", "\n", "\n", "vel_x", "=", "self", ".", "params", "[", "\"vel_x\"", "]", "\n", "vel_yaw", "=", "diff_yaw", "*", "self", ".", "params", "[", "\"k_yaw\"", "]", "\n", "\n", "action", "=", "np", ".", "asarray", "(", "[", "vel_x", ",", "0", ",", "vel_yaw", "]", ")", "\n", "action", "=", "self", ".", "clip_vel", "(", "action", ")", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action_follow_vector": [[114, 139], ["simple_carrot_planner.SimpleCarrotPlanner.get_action_go_to_position", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.cross"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action_go_to_position"], ["", "def", "get_action_follow_vector", "(", "self", ",", "start_pos", ",", "vector", ",", "current_pos", ",", "current_yaw", ")", ":", "\n", "# Get the action corresponding to going to a point further along the vector", "\n", "        ", "action", "=", "self", ".", "get_action_go_to_position", "(", "current_pos", "+", "vector", ",", "current_pos", ",", "current_yaw", ")", "\n", "\n", "# Also encourage the drone cancel any lateral error", "\n", "actual_direction", "=", "current_pos", "-", "start_pos", "\n", "actual_direction", "[", "2", "]", "=", "0", "\n", "\n", "# TODO: Actual direction is often zero, producing a NaN!!", "\n", "dir_mag", "=", "np", ".", "linalg", ".", "norm", "(", "actual_direction", ")", "\n", "act_mag", "=", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n", "# If we haven't moved at all yet.", "\n", "if", "(", "1e-9", ">", "dir_mag", ">", "-", "1e-9", ")", "or", "(", "1e-9", ">", "act_mag", ">", "-", "1e-9", ")", ":", "\n", "            ", "return", "action", "\n", "\n", "", "v1", "=", "vector", "/", "act_mag", "\n", "v2", "=", "actual_direction", "/", "dir_mag", "\n", "\n", "cross", "=", "np", ".", "cross", "(", "v1", ",", "v2", ")", "\n", "\n", "# If we have veered off path, steer back on the path", "\n", "action", "[", "2", "]", "-=", "self", ".", "params", "[", "\"k_offset\"", "]", "*", "cross", "[", "2", "]", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.reduce_speed_for_initial_acceleration": [[140, 146], ["float"], "methods", ["None"], ["", "def", "reduce_speed_for_initial_acceleration", "(", "self", ",", "action", ")", ":", "\n", "        ", "factor", "=", "float", "(", "(", "self", ".", "current_step", "+", "1", ")", "/", "self", ".", "params", "[", "\"accelerate_steps\"", "]", ")", "\n", "if", "factor", ">", "1.0", ":", "\n", "            ", "factor", "=", "1.0", "\n", "", "action", "[", "0", "]", "*=", "factor", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.pos_from_state": [[147, 149], ["None"], "methods", ["None"], ["", "def", "pos_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.vel_from_state": [[150, 152], ["None"], "methods", ["None"], ["", "def", "vel_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "6", ":", "9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.yaw_from_state": [[153, 155], ["None"], "methods", ["None"], ["", "def", "yaw_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_follow_path_action": [[156, 234], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "simple_carrot_planner.SimpleCarrotPlanner.yaw_from_state", "numpy.zeros", "simple_carrot_planner.SimpleCarrotPlanner.get_action_follow_vector", "simple_carrot_planner.SimpleCarrotPlanner.reduce_speed_for_initial_acceleration", "simple_carrot_planner.SimpleCarrotPlanner.clip_vel", "numpy.isnan().any", "numpy.asarray", "print", "numpy.asarray", "simple_carrot_planner.SimpleCarrotPlanner.pos_from_state", "numpy.dot", "print", "print", "print", "min", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.isnan", "list", "print", "print", "numpy.asarray", "len", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.yaw_from_state", "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action_follow_vector", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_initial_acceleration", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.clip_vel", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.pos_from_state"], ["", "def", "get_follow_path_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "self", ".", "finished", ":", "\n", "            ", "print", "(", "\"Oracle: Already finished\"", ")", "\n", "return", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "", "start_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "next_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "lookahead_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "curr_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "curr_pos", "[", "0", ":", "2", "]", "=", "self", ".", "pos_from_state", "(", "state", ")", "[", "0", ":", "2", "]", "\n", "curr_yaw", "=", "self", ".", "yaw_from_state", "(", "state", ")", "\n", "\n", "# Change the lookahead depending on drone's current velocity.", "\n", "self", ".", "current_lookahead", "=", "self", ".", "params", "[", "\"lookahead\"", "]", "\n", "\n", "self", ".", "control_step", "+=", "1", "\n", "\n", "action", "=", "np", ".", "zeros", "(", "3", ")", "\n", "start_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "]", "\n", "\n", "# Advance the step counter along the path", "\n", "while", "True", ":", "\n", "# If there are no longer LOOKAHEAD steps available in the path,", "\n", "# keep reducing lookahead until we finish the path", "\n", "            ", "max_lookahead", "=", "min", "(", "len", "(", "self", ".", "path", ")", "-", "2", ",", "self", ".", "end_idx", ")", "-", "self", ".", "current_step", "\n", "if", "self", ".", "current_lookahead", ">", "max_lookahead", ":", "\n", "                ", "self", ".", "current_lookahead", "=", "max_lookahead", "\n", "\n", "", "next_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "+", "1", "]", "\n", "try", ":", "\n", "                ", "lookahead_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "+", "self", ".", "current_lookahead", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error looking ahead\"", ")", "\n", "\n", "", "curr_direction", "=", "lookahead_pos", "-", "curr_pos", "\n", "path_direction", "=", "lookahead_pos", "-", "start_pos", "\n", "threshold_dot", "=", "np", ".", "dot", "(", "next_pos", ",", "path_direction", ")", "\n", "\n", "# Must advance along path", "\n", "if", "np", ".", "dot", "(", "curr_pos", ",", "path_direction", ")", ">", "threshold_dot", ":", "\n", "                ", "self", ".", "current_step", "+=", "1", "\n", "\n", "#print (\"Step = \" + str(self.current_step) + \"/\" + str(self.end_idx))", "\n", "# If this is the end of path, mark as finished and return the final action", "\n", "if", "self", ".", "current_step", ">=", "self", ".", "end_idx", ":", "\n", "                    ", "self", ".", "current_lookahead", "=", "self", ".", "params", "[", "\"lookahead\"", "]", "\n", "self", ".", "finished", "=", "True", "\n", "print", "(", "\"Oracle: End of path reached after \"", "+", "str", "(", "self", ".", "control_step", ")", "+", "\" actions\"", ")", "\n", "return", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "# We're good, let's compute the action", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "\n", "# TODO: What happens if we set curr_direction in terms of current position?", "\n", "", "", "action", "=", "self", ".", "get_action_follow_vector", "(", "start_pos", ",", "curr_direction", ",", "curr_pos", ",", "curr_yaw", ")", "\n", "action", "=", "self", ".", "reduce_speed_for_initial_acceleration", "(", "action", ")", "\n", "action", "=", "self", ".", "clip_vel", "(", "action", ")", "\n", "\n", "# Sometimes the speed reductions above cause the drone to stop completely. Don't let that happen:", "\n", "if", "action", "[", "0", "]", "<", "self", ".", "params", "[", "\"min_vel_x\"", "]", ":", "# and action[0] > 0:", "\n", "            ", "action", "[", "0", "]", "=", "self", ".", "params", "[", "\"min_vel_x\"", "]", "\n", "\n", "", "if", "np", ".", "linalg", ".", "norm", "(", "next_pos", "-", "curr_pos", ")", ">", "self", ".", "max_deviation", "and", "np", ".", "linalg", ".", "norm", "(", "start_pos", "-", "curr_pos", ")", ">", "self", ".", "max_deviation", "and", "np", ".", "linalg", ".", "norm", "(", "lookahead_pos", "-", "curr_pos", ")", ">", "self", ".", "max_deviation", ":", "\n", "            ", "print", "(", "\"Exceeded max deviation of: \"", ",", "self", ".", "max_deviation", ")", "\n", "print", "(", "\" curr pos: \"", ",", "curr_pos", ",", "\"next_pos: \"", ",", "next_pos", ")", "\n", "return", "None", "\n", "\n", "#print (\"Action: \", action)", "\n", "", "if", "np", ".", "isnan", "(", "action", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "\"ERROR! Oracle produced a NaN action!\"", ")", "\n", "return", "None", "\n", "\n", "#print(\"Oracle action : \", action)", "\n", "\n", "", "return", "np", ".", "asarray", "(", "list", "(", "action", ")", "+", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.start_sequence": [[237, 239], ["None"], "methods", ["None"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.get_action": [[240, 242], ["simple_carrot_planner.SimpleCarrotPlanner.get_follow_path_action"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.get_follow_path_action"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "get_follow_path_action", "(", "state", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.abstract_policy.AbstractPolicy.start_sequence": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.abstract_policy.AbstractPolicy.get_action": [[7, 9], ["None"], "methods", ["None"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", "=", "None", ")", ":", "\n", "        ", "...", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.model_policy.ModelPolicy.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.model_policy.ModelPolicy.start_sequence": [[11, 13], ["model_policy.ModelPolicy.model.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.model_policy.ModelPolicy.get_action": [[14, 18], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", "=", "None", ")", ":", "\n", "        ", "action", "=", "np", ".", "zeros", "(", "3", ")", "\n", "action", "[", "0", "]", "=", "0.83", "\n", "return", "action", ",", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.__init__": [[17, 39], ["numpy.zeros", "basic_carrot_planner.BasicCarrotPlanner.set_path", "parameters.parameter_server.get_current_parameters", "RvizInterface", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.set_path", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "max_deviation", "=", "500", ")", ":", "\n", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "end_idx", "=", "0", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"BasicCarrotPlanner\"", "]", "\n", "\n", "self", ".", "current_step", "=", "0", "\n", "self", ".", "control_step", "=", "0", "\n", "\n", "self", ".", "finished", "=", "False", "\n", "self", ".", "max_deviation", "=", "max_deviation", "\n", "self", ".", "last_sanity_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "set_path", "(", "path", ")", "\n", "\n", "self", ".", "ros", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"real_drone\"", "]", "\n", "self", ".", "rviz", "=", "None", "\n", "if", "self", ".", "ros", ":", "\n", "            ", "from", "drones", ".", "aero_interface", ".", "rviz", "import", "RvizInterface", "\n", "self", ".", "rviz", "=", "RvizInterface", "(", "\n", "base_name", "=", "\"/bcp/\"", ",", "\n", "path_topics", "=", "[", "\"ground_truth\"", "]", ",", "\n", "markerarray_topics", "=", "[", "\"instruction\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.set_path": [[40, 44], ["len"], "methods", ["None"], ["", "", "def", "set_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "end_idx", "=", "len", "(", "path", ")", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.clip_vel": [[45, 57], ["None"], "methods", ["None"], ["", "", "def", "clip_vel", "(", "self", ",", "action", ")", ":", "\n", "# Never go backwards", "\n", "        ", "if", "action", "[", "0", "]", ">", "1", ":", "\n", "            ", "action", "[", "0", "]", "=", "1", "\n", "", "if", "action", "[", "0", "]", "<", "0", ":", "\n", "            ", "action", "[", "0", "]", "=", "0", "\n", "\n", "", "if", "action", "[", "2", "]", ">", "1", ":", "\n", "            ", "action", "[", "2", "]", "=", "1", "\n", "", "if", "action", "[", "2", "]", "<", "-", "1", ":", "\n", "            ", "action", "[", "2", "]", "=", "-", "1", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.set_current_segment": [[58, 71], ["basic_carrot_planner.BasicCarrotPlanner.rviz.create_path_from_2d_array", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.create_path_from_2d_array"], ["", "def", "set_current_segment", "(", "self", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "        ", "self", ".", "end_idx", "=", "end_idx", "\n", "self", ".", "current_step", "=", "start_idx", "\n", "self", ".", "control_step", "=", "0", "\n", "self", ".", "finished", "=", "False", "\n", "if", "self", ".", "ros", ":", "\n", "            ", "self", ".", "rviz", ".", "create_path_from_2d_array", "(", "\"ground_truth\"", ",", "self", ".", "path", "[", "start_idx", ":", "end_idx", "]", ",", "publish", "=", "True", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "path", ")", "<", "2", "or", "end_idx", "-", "start_idx", "<", "2", ":", "\n", "            ", "self", ".", "finished", "=", "True", "\n", "\n", "", "if", "self", ".", "end_idx", ">", "len", "(", "self", ".", "path", ")", "-", "2", ":", "\n", "            ", "self", ".", "end_idx", "=", "len", "(", "self", ".", "path", ")", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.start_segment_rollout": [[72, 77], ["data_io.env.load_and_convert_path", "data_io.instructions.get_instruction_segment", "basic_carrot_planner.BasicCarrotPlanner.set_path", "basic_carrot_planner.BasicCarrotPlanner.set_current_segment"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.set_path", "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment"], ["", "", "def", "start_segment_rollout", "(", "self", ",", "env_id", ",", "set_idx", ",", "seg_idx", ")", ":", "\n", "        ", "path", "=", "load_and_convert_path", "(", "env_id", ")", "\n", "seg", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "self", ".", "set_path", "(", "path", ")", "\n", "self", ".", "set_current_segment", "(", "seg", "[", "\"start_idx\"", "]", ",", "seg", "[", "\"end_idx\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.get_action_go_to_carrot": [[78, 94], ["geometry.vec_to_yaw", "geometry.clip_angle", "numpy.asarray", "math.fabs"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle"], ["", "def", "get_action_go_to_carrot", "(", "self", ",", "curr_pos", ",", "curr_yaw", ",", "carrot_pos", ")", ":", "\n", "#print(f\"BCP: curr_pos: {curr_pos}  curr_yaw: {curr_yaw}  carrot_pos: {carrot_pos}\")", "\n", "        ", "carrot_dir", "=", "carrot_pos", "-", "curr_pos", "\n", "carrot_yaw", "=", "vec_to_yaw", "(", "carrot_dir", ")", "\n", "delta_yaw", "=", "carrot_yaw", "-", "curr_yaw", "\n", "delta_yaw", "=", "clip_angle", "(", "delta_yaw", ")", "\n", "\n", "#print(f\"BCP: Carrot pos: {carrot_pos}, current pos: {curr_pos}\")", "\n", "#print(f\"BCP: Carrot yaw: {carrot_yaw}, current yaw: {curr_yaw}\")", "\n", "\n", "vel_x", "=", "self", ".", "params", "[", "\"vel_x\"", "]", "/", "(", "1", "+", "2", "*", "math", ".", "fabs", "(", "delta_yaw", ")", "/", "math", ".", "pi", ")", "\n", "#vel_x = self.params[\"VEL_X\"]", "\n", "vel_yaw", "=", "self", ".", "params", "[", "\"k_yaw\"", "]", "*", "delta_yaw", "\n", "\n", "action", "=", "np", ".", "asarray", "(", "[", "vel_x", ",", "0", ",", "vel_yaw", "]", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_initial_acceleration": [[95, 101], ["float"], "methods", ["None"], ["", "def", "reduce_speed_for_initial_acceleration", "(", "self", ",", "action", ")", ":", "\n", "        ", "factor", "=", "float", "(", "(", "self", ".", "current_step", "+", "1", ")", "/", "self", ".", "params", "[", "\"accelerate_steps\"", "]", ")", "\n", "if", "factor", ">", "1.0", ":", "\n", "            ", "factor", "=", "1.0", "\n", "", "action", "[", "0", "]", "*=", "factor", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_path_end": [[102, 107], ["None"], "methods", ["None"], ["", "def", "reduce_speed_for_path_end", "(", "self", ",", "action", ",", "dst_to_end", ")", ":", "\n", "        ", "target_dst_end", "=", "self", ".", "params", "[", "\"end_dst\"", "]", "\n", "if", "dst_to_end", "<", "target_dst_end", ":", "\n", "            ", "action", "[", "0", "]", "=", "action", "[", "0", "]", "*", "(", "dst_to_end", "/", "target_dst_end", ")", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_turns": [[108, 114], ["geometry.vec_to_yaw", "geometry.clip_angle", "math.exp", "math.fabs"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle"], ["", "def", "reduce_speed_for_turns", "(", "self", ",", "action", ",", "curr_pos", ",", "curr_yaw", ",", "carrot_pos", ")", ":", "\n", "        ", "carrot_yaw", "=", "vec_to_yaw", "(", "carrot_pos", "-", "curr_pos", ")", "\n", "yaw_diff", "=", "clip_angle", "(", "carrot_yaw", "-", "curr_yaw", ")", "\n", "scaling", "=", "math", ".", "exp", "(", "-", "math", ".", "fabs", "(", "yaw_diff", ")", ")", "\n", "action", "[", "0", "]", "=", "action", "[", "0", "]", "*", "scaling", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.pos_from_state": [[115, 117], ["None"], "methods", ["None"], ["", "def", "pos_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.vel_from_state": [[118, 120], ["None"], "methods", ["None"], ["", "def", "vel_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "6", ":", "9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.yaw_from_state": [[121, 123], ["None"], "methods", ["None"], ["", "def", "yaw_from_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "state", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.find_carrot_pos": [[124, 140], ["range", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "find_carrot_pos", "(", "self", ",", "curr_pos", ")", ":", "\n", "        ", "prev_carrot_pos", "=", "self", ".", "path", "[", "self", ".", "current_step", "]", "\n", "carrot_pos", "=", "prev_carrot_pos", "\n", "carrot_idx", "=", "self", ".", "current_step", "\n", "cumdist", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "current_step", ",", "self", ".", "end_idx", ")", ":", "\n", "            ", "carrot_pos", "=", "self", ".", "path", "[", "i", "]", "\n", "carrot_idx", "=", "i", "\n", "dst_to_prev", "=", "np", ".", "linalg", ".", "norm", "(", "carrot_pos", "-", "prev_carrot_pos", ")", "\n", "cumdist", "+=", "dst_to_prev", "\n", "#print(\"dst: \", dst, curr_pos, carrot_pos)", "\n", "if", "cumdist", ">", "self", ".", "params", "[", "\"lookahead_dst\"", "]", ":", "\n", "                ", "break", "\n", "", "prev_carrot_pos", "=", "carrot_pos", "\n", "#print(\"carrot idx: \", self.current_step, carrot_idx, cumdist, self.params[\"LOOKAHEAD_DST\"])", "\n", "", "return", "carrot_pos", ",", "carrot_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.exceeded_max_deviation": [[141, 145], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "exceeded_max_deviation", "(", "self", ",", "curr_pos", ",", "dst_to_carrot", ")", ":", "\n", "        ", "current_path_pt", "=", "self", ".", "path", "[", "self", ".", "current_step", "]", "\n", "dst", "=", "np", ".", "linalg", ".", "norm", "(", "curr_pos", "-", "current_path_pt", ")", "\n", "return", "dst", ">", "self", ".", "max_deviation", "and", "dst_to_carrot", ">", "self", ".", "max_deviation", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.get_follow_path_action": [[146, 213], ["numpy.zeros", "numpy.zeros", "basic_carrot_planner.BasicCarrotPlanner.yaw_from_state", "basic_carrot_planner.BasicCarrotPlanner.find_carrot_pos", "numpy.linalg.norm", "numpy.linalg.norm", "basic_carrot_planner.BasicCarrotPlanner.get_action_go_to_carrot", "basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_initial_acceleration", "basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_path_end", "basic_carrot_planner.BasicCarrotPlanner.clip_vel", "basic_carrot_planner.BasicCarrotPlanner.exceeded_max_deviation", "numpy.isnan().any", "numpy.asarray", "numpy.asarray", "basic_carrot_planner.BasicCarrotPlanner.pos_from_state", "numpy.linalg.norm", "print", "numpy.asarray", "basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_turns", "print", "print", "numpy.linalg.norm", "numpy.isnan", "list", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.yaw_from_state", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.find_carrot_pos", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.get_action_go_to_carrot", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_initial_acceleration", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_path_end", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.clip_vel", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.exceeded_max_deviation", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.pos_from_state", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.reduce_speed_for_turns"], ["", "def", "get_follow_path_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "self", ".", "finished", ":", "\n", "#print(\"BCP: Already finished\")", "\n", "            ", "return", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "", "start_pos", "=", "np", ".", "zeros", "(", "3", ")", "\n", "curr_pos", "=", "np", ".", "zeros", "(", "2", ")", "\n", "curr_pos", "[", "0", ":", "2", "]", "=", "self", ".", "pos_from_state", "(", "state", ")", "[", "0", ":", "2", "]", "\n", "curr_yaw", "=", "self", ".", "yaw_from_state", "(", "state", ")", "\n", "carrot_pos", ",", "carrot_idx", "=", "self", ".", "find_carrot_pos", "(", "curr_pos", ")", "\n", "dst_to_carrot", "=", "np", ".", "linalg", ".", "norm", "(", "carrot_pos", "-", "curr_pos", ")", "\n", "dst_to_end", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "path", "[", "self", ".", "end_idx", "]", "-", "curr_pos", ")", "\n", "\n", "self", ".", "control_step", "+=", "1", "\n", "\n", "start_pos", "[", "0", ":", "2", "]", "=", "self", ".", "path", "[", "self", ".", "current_step", "]", "\n", "\n", "# Advance along the path", "\n", "end", "=", "False", "\n", "while", "True", ":", "\n", "            ", "this_step", "=", "self", ".", "path", "[", "self", ".", "current_step", "]", "\n", "next_idx", "=", "self", ".", "current_step", "+", "1", "\n", "hasnext", "=", "next_idx", "<=", "self", ".", "end_idx", "\n", "if", "hasnext", ":", "\n", "                ", "next_step", "=", "self", ".", "path", "[", "next_idx", "]", "\n", "dst_to_next", "=", "np", ".", "linalg", ".", "norm", "(", "next_step", "-", "curr_pos", ")", "\n", "", "else", ":", "\n", "                ", "end", "=", "True", "\n", "break", "\n", "\n", "", "dst_to_this", "=", "np", ".", "linalg", ".", "norm", "(", "this_step", "-", "curr_pos", ")", "\n", "if", "dst_to_next", "<=", "dst_to_this", "+", "1e-3", ":", "\n", "                ", "self", ".", "current_step", "+=", "1", "\n", "#print(f\"BCP Next {self.current_step}\")", "\n", "", "elif", "dst_to_carrot", "<=", "dst_to_this", "+", "1e-3", ":", "\n", "                ", "self", ".", "current_step", "=", "carrot_idx", "\n", "break", "\n", "", "else", ":", "\n", "                ", "break", "# Remain in the current step", "\n", "\n", "# Check if end of path reached:", "\n", "", "", "if", "end", "or", "dst_to_end", "<", "self", ".", "params", "[", "\"stop_dst\"", "]", ":", "\n", "#print(f\"BCP: pos: {curr_pos}  next point: {next_step}  dst: {dst_to_end}  end: {end}\")", "\n", "            ", "self", ".", "finished", "=", "True", "\n", "print", "(", "\"BCP: End of path reached after \"", "+", "str", "(", "self", ".", "control_step", ")", "+", "\" actions\"", ")", "\n", "return", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "", "action", "=", "self", ".", "get_action_go_to_carrot", "(", "curr_pos", ",", "curr_yaw", ",", "carrot_pos", ")", "\n", "action", "=", "self", ".", "reduce_speed_for_initial_acceleration", "(", "action", ")", "\n", "action", "=", "self", ".", "reduce_speed_for_path_end", "(", "action", ",", "dst_to_end", ")", "\n", "if", "self", ".", "params", "[", "\"decelerate_for_turns\"", "]", ":", "\n", "            ", "action", "=", "self", ".", "reduce_speed_for_turns", "(", "action", ",", "curr_pos", ",", "curr_yaw", ",", "carrot_pos", ")", "\n", "", "action", "=", "self", ".", "clip_vel", "(", "action", ")", "\n", "\n", "# Sometimes the speed reductions above cause the drone to stop completely. Don't let that happen:", "\n", "if", "action", "[", "0", "]", "<", "self", ".", "params", "[", "\"min_vel_x\"", "]", ":", "# and action[0] > 0:", "\n", "            ", "action", "[", "0", "]", "=", "self", ".", "params", "[", "\"min_vel_x\"", "]", "\n", "\n", "", "if", "self", ".", "exceeded_max_deviation", "(", "curr_pos", ",", "carrot_idx", ")", ":", "\n", "            ", "print", "(", "\"Exceeded max deviation of: \"", ",", "self", ".", "max_deviation", ")", "\n", "return", "None", "\n", "\n", "", "if", "np", ".", "isnan", "(", "action", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "\"ERROR! Oracle produced a NaN action!\"", ")", "\n", "return", "None", "\n", "\n", "", "return", "np", ".", "asarray", "(", "list", "(", "action", ")", "+", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.start_sequence": [[216, 218], ["None"], "methods", ["None"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.get_action": [[219, 223], ["basic_carrot_planner.BasicCarrotPlanner.rviz.publish_instruction_text", "basic_carrot_planner.BasicCarrotPlanner.get_follow_path_action", "data_io.instructions.debug_untokenize_instruction"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_instruction_text", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.get_follow_path_action", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", "=", "None", ",", "sample", "=", "False", ",", "rl_rollout", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "rviz", "is", "not", "None", ":", "\n", "            ", "self", ".", "rviz", ".", "publish_instruction_text", "(", "\"instruction\"", ",", "debug_untokenize_instruction", "(", "instruction", ")", ")", "\n", "", "return", "self", ".", "get_follow_path_action", "(", "state", ".", "state", ")", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image", "=", "None", ",", "state", "=", "None", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d": [[10, 12], ["None"], "methods", ["None"], ["", "def", "get_pos_2d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "0", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_3d": [[13, 15], ["None"], "methods", ["None"], ["", "def", "get_pos_3d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_cam_pos_3d": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get_cam_pos_3d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "9", ":", "12", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_cam_rot": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_cam_rot", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "12", ":", "16", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_rot_euler": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get_rot_euler", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "3", ":", "6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_depth_image": [[25, 27], ["None"], "methods", ["None"], ["", "def", "get_depth_image", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image", "[", ":", ",", ":", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_rgb_image": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_rgb_image", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_cam_pose": [[31, 36], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "get_cam_pose", "(", "self", ")", ":", "\n", "        ", "cam_pos", "=", "self", ".", "state", "[", "9", ":", "12", "]", "\n", "cam_rot", "=", "self", ".", "state", "[", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_drone_pose": [[37, 43], ["state.DroneState.get_pos_3d", "state.DroneState.get_rot_euler", "transforms3d.euler.euler2quat", "learning.inputs.pose.Pose"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_3d", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_rot_euler"], ["", "def", "get_drone_pose", "(", "self", ")", ":", "\n", "        ", "drn_pos", "=", "self", ".", "get_pos_3d", "(", ")", "\n", "drn_rot_euler", "=", "self", ".", "get_rot_euler", "(", ")", "\n", "drn_rot_quat", "=", "euler", ".", "euler2quat", "(", "drn_rot_euler", "[", "0", "]", ",", "drn_rot_euler", "[", "1", "]", ",", "drn_rot_euler", "[", "2", "]", ")", "\n", "pose", "=", "Pose", "(", "drn_pos", ",", "drn_rot_quat", ")", "\n", "return", "pose", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.convert_action.normalize_action": [[6, 21], ["numpy.zeros", "numpy.clip", "numpy.clip", "parameters.parameter_server.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["def", "normalize_action", "(", "action", ")", ":", "\n", "    ", "\"\"\"\n    Given an action executed in AirSim, produce an equivalent action in Neural Network R^3 space\n    :param action:\n    :return:\n    \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "3", ")", "\n", "params", "=", "get_current_parameters", "(", ")", "[", "\"Dynamics\"", "]", "\n", "ret", "[", "0", "]", "=", "action", "[", "0", "]", "/", "params", "[", "\"max_vel_x\"", "]", "\n", "ret", "[", "2", "]", "=", "action", "[", "2", "]", "/", "params", "[", "\"max_vel_theta\"", "]", "\n", "\n", "ret", "[", "0", "]", "=", "np", ".", "clip", "(", "ret", "[", "0", "]", ",", "0", ",", "1", ")", "\n", "ret", "[", "2", "]", "=", "np", ".", "clip", "(", "ret", "[", "2", "]", ",", "-", "1", ",", "1", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.convert_action.unnormalize_action": [[23, 39], ["numpy.zeros", "numpy.clip", "numpy.clip", "parameters.parameter_server.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "unnormalize_action", "(", "action", ")", ":", "\n", "    ", "\"\"\"\n    Given an action in R^3 [0-1] space, produce the correct AirSim action\n    :param action:\n    :return:\n    \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "3", ")", "\n", "params", "=", "get_current_parameters", "(", ")", "[", "\"Dynamics\"", "]", "\n", "ret", "[", "0", "]", "=", "action", "[", "0", "]", "*", "params", "[", "\"max_vel_x\"", "]", "\n", "ret", "[", "2", "]", "=", "action", "[", "2", "]", "*", "params", "[", "\"max_vel_theta\"", "]", "\n", "\n", "ret", "[", "0", "]", "=", "np", ".", "clip", "(", "ret", "[", "0", "]", ",", "0", ",", "params", "[", "\"max_vel_x\"", "]", ")", "\n", "ret", "[", "2", "]", "=", "np", ".", "clip", "(", "ret", "[", "2", "]", ",", "-", "params", "[", "\"max_vel_theta\"", "]", ",", "params", "[", "\"max_vel_theta\"", "]", ")", "\n", "#print(\"action in: \", action, \" action out: \", ret)", "\n", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.__init__": [[35, 66], ["drones.airsim_interface.rate.Rate", "print", "parameters.parameter_server.get_current_parameters", "drones.droneController.drone_controller_factory", "pomdp_interface.PomdpInterface.drone.get_real_time_rate", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneController.drone_controller_factory", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.get_real_time_rate"], ["def", "__init__", "(", "self", ",", "instance_id", "=", "0", ",", "cv_mode", "=", "False", ",", "is_real", "=", "False", ")", ":", "\n", "        ", "self", ".", "instance_id", "=", "instance_id", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"PomdpInterface\"", "]", "\n", "step_interval", "=", "self", ".", "params", "[", "\"step_interval\"", "]", "\n", "flight_height", "=", "self", ".", "params", "[", "\"flight_height\"", "]", "\n", "self", ".", "max_horizon", "=", "self", ".", "params", "[", "\"max_horizon\"", "]", "\n", "self", ".", "scale", "=", "self", ".", "params", "[", "\"scale\"", "]", "\n", "self", ".", "is_real", "=", "is_real", "\n", "\n", "self", ".", "drone", "=", "drone_controller_factory", "(", "simulator", "=", "not", "is_real", ")", "(", "instance", "=", "instance_id", ",", "flight_height", "=", "flight_height", ")", "\n", "rate", "=", "step_interval", "/", "self", ".", "drone", ".", "get_real_time_rate", "(", ")", "\n", "\n", "self", ".", "rate", "=", "Rate", "(", "rate", ")", "\n", "print", "(", "\"Adjusted rate: \"", "+", "str", "(", "rate", ")", ",", "\"Step interval: \"", ",", "step_interval", ")", "\n", "\n", "self", ".", "segment_path", "=", "None", "\n", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "reward_weights", "=", "[", "]", "\n", "\n", "self", ".", "instruction_set", "=", "None", "\n", "self", ".", "current_segment_ordinal", "=", "None", "\n", "self", ".", "current_segment_idx", "=", "None", "\n", "self", ".", "cv_mode", "=", "cv_mode", "\n", "\n", "self", ".", "seg_start", "=", "0", "\n", "self", ".", "seg_end", "=", "0", "\n", "self", ".", "stepcount", "=", "0", "\n", "\n", "self", ".", "instruction_override", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface._get_reward": [[67, 77], ["sum", "ValueError", "r", "zip"], "methods", ["None"], ["", "def", "_get_reward", "(", "self", ",", "state", ",", "drone_action", ",", "done_now", ")", ":", "\n", "# If we don't have an instruction set, we can't provide a reward", "\n", "        ", "if", "self", ".", "instruction_set", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"No instruction set: Can't provide a reward.\"", ")", "\n", "\n", "# Obtain the reward from the reward function", "\n", "", "rewards", "=", "[", "w", "*", "r", "(", "state", ",", "drone_action", ",", "done_now", ")", "for", "r", ",", "w", "in", "zip", "(", "self", ".", "rewards", ",", "self", ".", "reward_weights", ")", "]", "\n", "total_reward", "=", "sum", "(", "rewards", ")", "\n", "\n", "return", "total_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface._is_out_of_bounds": [[78, 92], ["state.get_pos_2d", "numpy.asarray", "numpy.argmin", "len", "print", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d"], ["", "def", "_is_out_of_bounds", "(", "self", ",", "state", ")", ":", "\n", "        ", "curr_pos", "=", "state", ".", "get_pos_2d", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "segment_path", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"OH NO OH NO OH NO!\"", ")", "\n", "return", "True", "\n", "\n", "", "distances", "=", "np", ".", "asarray", "(", "[", "np", ".", "linalg", ".", "norm", "(", "p", "-", "curr_pos", ")", "for", "p", "in", "self", ".", "segment_path", "]", ")", "\n", "minidx", "=", "np", ".", "argmin", "(", "distances", ")", "\n", "mindist", "=", "distances", "[", "minidx", "]", "\n", "#print(f\"Idx: {minidx} / {len(self.segment_path)}. Dst to path: {mindist}\")", "\n", "#done = (mindist > END_DISTANCE and minidx >= len(self.segment_path) - 1) or mindist > PATH_MAX_DISTANCE", "\n", "done", "=", "mindist", ">", "PATH_MAX_DISTANCE", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.land": [[93, 102], ["pomdp_interface.PomdpInterface.drone.land", "PomdpInterface.EnvException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.land"], ["", "def", "land", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        If using the real drone, this causes it to land and disarm\n        :return:\n        \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "drone", ".", "land", "(", ")", "\n", "", "except", "RolloutException", "as", "e", ":", "\n", "            ", "raise", "PomdpInterface", ".", "EnvException", "(", "\"Retry rollout\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.set_environment": [[103, 128], ["pomdp_interface.PomdpInterface.drone.set_current_env_id", "pomdp_interface.PomdpInterface.drone.reset_environment", "time.sleep", "PomdpInterface.EnvException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.set_current_env_id", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.reset_environment", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["", "", "def", "set_environment", "(", "self", ",", "env_id", ",", "instruction_set", "=", "None", ",", "fast", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Switch the simulation to env_id. Causes the environment configuration from\n        configs/configs/random_config_<env_id>.json to be loaded and landmarks arranged in the simulator\n        :param env_id: integer ID\n        :param instruction_set: Instruction set to follow for displaying instructions\n        :param fast: Set to True to skip a delay at a risk of environment not loading before subsequent function calls\n        :return:\n        \"\"\"", "\n", "self", ".", "env_id", "=", "env_id", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "drone", ".", "set_current_env_id", "(", "env_id", ",", "self", ".", "instance_id", ")", "\n", "self", ".", "drone", ".", "reset_environment", "(", ")", "\n", "", "except", "RolloutException", "as", "e", ":", "\n", "            ", "raise", "PomdpInterface", ".", "EnvException", "(", "\"Retry rollout\"", ")", "\n", "\n", "# This is necessary to allow the new frame to be rendered with the new pomdp, so that the drone doesn't", "\n", "# accidentally see the old pomdp at the start", "\n", "", "if", "not", "fast", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "self", ".", "instruction_set", "=", "instruction_set", "\n", "self", ".", "stepcount", "=", "0", "\n", "self", ".", "instruction_override", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.set_current_segment": [[129, 156], ["enumerate", "data_io.env.load_and_convert_path", "pomdp_interface.PomdpInterface.drone.set_current_seg_idx", "PomdpInterface.EnvException", "pomdp.reward.path_field_reward.FollowPathFieldReward", "pomdp.reward.correct_stop_reward.StopCorrectlyReward"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.set_current_seg_idx"], ["", "def", "set_current_segment", "(", "self", ",", "seg_idx", ")", ":", "\n", "        ", "self", ".", "current_segment_ordinal", "=", "None", "\n", "for", "i", ",", "seg", "in", "enumerate", "(", "self", ".", "instruction_set", ")", ":", "\n", "            ", "if", "seg", "[", "\"seg_idx\"", "]", "==", "seg_idx", ":", "\n", "                ", "self", ".", "current_segment_ordinal", "=", "i", "\n", "", "", "assert", "self", ".", "current_segment_ordinal", "is", "not", "None", ",", "f\"Requested segment {seg_idx} not found in provided instruction data\"", "\n", "self", ".", "current_segment_idx", "=", "seg_idx", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "drone", ".", "set_current_seg_idx", "(", "seg_idx", ",", "self", ".", "instance_id", ")", "\n", "", "except", "RolloutException", "as", "e", ":", "\n", "            ", "raise", "PomdpInterface", ".", "EnvException", "(", "\"Retry rollout\"", ")", "\n", "\n", "", "end_idx", "=", "self", ".", "instruction_set", "[", "self", ".", "current_segment_ordinal", "]", "[", "\"end_idx\"", "]", "\n", "start_idx", "=", "self", ".", "instruction_set", "[", "self", ".", "current_segment_ordinal", "]", "[", "\"start_idx\"", "]", "\n", "full_path", "=", "load_and_convert_path", "(", "self", ".", "env_id", ")", "\n", "self", ".", "segment_path", "=", "full_path", "[", "start_idx", ":", "end_idx", "]", "\n", "self", ".", "instruction_override", "=", "None", "\n", "\n", "self", ".", "stepcount", "=", "0", "\n", "if", "start_idx", "==", "end_idx", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "self", ".", "segment_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "rewards", "=", "[", "FollowPathFieldReward", "(", "self", ".", "segment_path", ")", ",", "StopCorrectlyReward", "(", "self", ".", "segment_path", ")", "]", "\n", "self", ".", "reward_weights", "=", "[", "1.0", ",", "1.0", "]", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.reset": [[157, 192], ["pomdp_interface.PomdpInterface.rate.reset", "pomdp_interface.PomdpInterface.drone.reset_environment", "pomdp_interface.PomdpInterface.get_start_pos", "pomdp_interface.PomdpInterface.params.get", "pomdp_interface.PomdpInterface.drone.rollout_begin", "pomdp_interface.PomdpInterface.rate.sleep", "pomdp_interface.PomdpInterface.drone.get_state", "pomdp.state.DroneState", "pomdp_interface.PomdpInterface.drone.teleport_3d", "pomdp_interface.PomdpInterface.drone.teleport_to", "pomdp_interface.PomdpInterface.get_current_nl_command", "utils.text2speech.say", "pomdp_interface.PomdpInterface.get_current_nl_command", "PomdpInterface.EnvException", "numpy.random.seed", "float", "numpy.random.normal", "numpy.random.normal", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.reset_environment", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.get_start_pos", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.rollout_begin", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_3d", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_to", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.get_current_nl_command", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.say", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.get_current_nl_command"], ["", "def", "reset", "(", "self", ",", "seg_idx", "=", "0", ",", "landmark_pos", "=", "None", ",", "random_yaw", "=", "0", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "rate", ".", "reset", "(", ")", "\n", "self", ".", "drone", ".", "reset_environment", "(", ")", "\n", "self", ".", "stepcount", "=", "0", "\n", "start_pos", ",", "start_angle", "=", "self", ".", "get_start_pos", "(", "seg_idx", ",", "landmark_pos", ")", "\n", "\n", "if", "self", ".", "cv_mode", ":", "\n", "                ", "start_rpy", "=", "start_angle", "\n", "self", ".", "drone", ".", "teleport_3d", "(", "start_pos", ",", "start_rpy", ",", "pos_in_airsim", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "                ", "start_yaw", "=", "start_angle", "\n", "if", "self", ".", "params", "[", "\"randomize_init_pos\"", "]", ":", "\n", "                    ", "np", ".", "random", ".", "seed", "(", ")", "\n", "yaw_offset", "=", "float", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "params", "[", "\"init_yaw_variance\"", "]", ",", "1", ")", ")", "\n", "pos_offset", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "params", "[", "\"init_pos_variance\"", "]", ",", "2", ")", "\n", "#print(\"offset:\", pos_offset, yaw_offset)", "\n", "\n", "start_pos", "=", "np", ".", "asarray", "(", "start_pos", ")", "+", "pos_offset", "\n", "start_yaw", "=", "start_yaw", "+", "yaw_offset", "\n", "", "self", ".", "drone", ".", "teleport_to", "(", "start_pos", ",", "start_yaw", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "get", "(", "\"voice\"", ")", ":", "\n", "                ", "cmd", "=", "self", ".", "get_current_nl_command", "(", ")", "\n", "say", "(", "cmd", ")", "\n", "\n", "", "self", ".", "drone", ".", "rollout_begin", "(", "self", ".", "get_current_nl_command", "(", ")", ")", "\n", "self", ".", "rate", ".", "sleep", "(", "quiet", "=", "True", ")", "\n", "#time.sleep(0.2)", "\n", "drone_state", ",", "image", "=", "self", ".", "drone", ".", "get_state", "(", ")", "\n", "\n", "return", "DroneState", "(", "image", ",", "drone_state", ")", "\n", "", "except", "RolloutException", "as", "e", ":", "\n", "            ", "raise", "PomdpInterface", ".", "EnvException", "(", "\"Retry rollout\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.get_end_pos": [[193, 204], ["pomdp_interface.PomdpInterface.seg_idx_to_ordinal", "data_io.env.convert_pos_from_config", "data_io.env.convert_yaw_from_config"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.seg_idx_to_ordinal", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_pos_from_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_yaw_from_config"], ["", "", "def", "get_end_pos", "(", "self", ",", "seg_idx", "=", "0", ",", "landmark_pos", "=", "None", ")", ":", "\n", "\n", "        ", "seg_ordinal", "=", "self", ".", "seg_idx_to_ordinal", "(", "seg_idx", ")", "\n", "if", "not", "self", ".", "cv_mode", ":", "\n", "            ", "if", "self", ".", "instruction_set", ":", "\n", "                ", "end_pos", "=", "convert_pos_from_config", "(", "self", ".", "instruction_set", "[", "seg_ordinal", "]", "[", "\"end_pos\"", "]", ")", "\n", "end_angle", "=", "convert_yaw_from_config", "(", "self", ".", "instruction_set", "[", "seg_ordinal", "]", "[", "\"end_yaw\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "end_pos", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "end_angle", "=", "0", "\n", "", "", "return", "end_pos", ",", "end_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.seg_idx_to_ordinal": [[205, 209], ["enumerate"], "methods", ["None"], ["", "def", "seg_idx_to_ordinal", "(", "self", ",", "seg_idx", ")", ":", "\n", "        ", "for", "i", ",", "instr", "in", "enumerate", "(", "self", ".", "instruction_set", ")", ":", "\n", "            ", "if", "instr", "[", "\"seg_idx\"", "]", "==", "seg_idx", ":", "\n", "                ", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.get_start_pos": [[210, 240], ["pomdp_interface.PomdpInterface.seg_idx_to_ordinal", "random.uniform", "random.uniform", "numpy.asarray", "random.uniform", "geometry.vec_to_yaw", "data_io.env.convert_pos_from_config", "data_io.env.convert_yaw_from_config", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.seg_idx_to_ordinal", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_pos_from_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_yaw_from_config"], ["", "", "", "def", "get_start_pos", "(", "self", ",", "seg_idx", "=", "0", ",", "landmark_pos", "=", "None", ")", ":", "\n", "\n", "        ", "seg_ordinal", "=", "self", ".", "seg_idx_to_ordinal", "(", "seg_idx", ")", "\n", "# If we are not in CV mode, then we have a path to follow and track reward for following it closely", "\n", "if", "not", "self", ".", "cv_mode", ":", "\n", "            ", "if", "self", ".", "instruction_set", ":", "\n", "                ", "start_pos", "=", "convert_pos_from_config", "(", "self", ".", "instruction_set", "[", "seg_ordinal", "]", "[", "\"start_pos\"", "]", ")", "\n", "start_angle", "=", "convert_yaw_from_config", "(", "self", ".", "instruction_set", "[", "seg_ordinal", "]", "[", "\"start_yaw\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "start_pos", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "start_angle", "=", "0", "\n", "\n", "# If we are in CV mode, there is no path to be followed. Instead we are collecting images of landmarks.", "\n", "# Initialize the drone to face the position provided. TODO: Generalize this to other CV uses", "\n", "", "", "else", ":", "\n", "            ", "drone_angle", "=", "random", ".", "uniform", "(", "0", ",", "2", "*", "math", ".", "pi", ")", "\n", "drone_dist_mult", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "drone_dist", "=", "60", "+", "drone_dist_mult", "*", "300", "\n", "drone_pos_dir", "=", "np", ".", "asarray", "(", "[", "math", ".", "cos", "(", "drone_angle", ")", ",", "math", ".", "sin", "(", "drone_angle", ")", "]", ")", "\n", "\n", "start_pos", "=", "landmark_pos", "+", "drone_pos_dir", "*", "drone_dist", "\n", "start_height", "=", "random", ".", "uniform", "(", "-", "1.5", ",", "-", "2.5", ")", "\n", "start_pos", "=", "[", "start_pos", "[", "0", "]", ",", "start_pos", "[", "1", "]", ",", "start_height", "]", "\n", "\n", "drone_dir", "=", "-", "drone_pos_dir", "\n", "start_yaw", "=", "vec_to_yaw", "(", "drone_dir", ")", "\n", "start_roll", "=", "0", "\n", "start_pitch", "=", "0", "\n", "start_angle", "=", "[", "start_roll", ",", "start_pitch", ",", "start_yaw", "]", "\n", "", "return", "start_pos", ",", "start_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.get_current_nl_command": [[241, 247], ["len"], "methods", ["None"], ["", "def", "get_current_nl_command", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "instruction_override", ":", "\n", "            ", "return", "self", ".", "instruction_override", "\n", "", "if", "self", ".", "current_segment_ordinal", "<", "len", "(", "self", ".", "instruction_set", ")", ":", "\n", "            ", "return", "self", ".", "instruction_set", "[", "self", ".", "current_segment_ordinal", "]", "[", "\"instruction\"", "]", "\n", "", "return", "\"FINISHED!\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.override_instruction": [[248, 250], ["None"], "methods", ["None"], ["", "def", "override_instruction", "(", "self", ",", "instr_str", ")", ":", "\n", "        ", "self", ".", "instruction_override", "=", "instr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act": [[251, 263], ["copy.deepcopy", "pomdp.convert_action.unnormalize_action", "pomdp_interface.PomdpInterface.drone.send_local_velocity_command", "PomdpInterface.EnvException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.convert_action.unnormalize_action", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command"], ["", "def", "act", "(", "self", ",", "action", ")", ":", "\n", "# Action", "\n", "        ", "action", "=", "deepcopy", "(", "action", ")", "\n", "drone_action", "=", "action", "[", "0", ":", "3", "]", "\n", "# print(\"Action: \", action)", "\n", "\n", "raw_action", "=", "unnormalize_action", "(", "drone_action", ")", "\n", "# print(drone_action, raw_action)", "\n", "try", ":", "\n", "            ", "self", ".", "drone", ".", "send_local_velocity_command", "(", "raw_action", ")", "\n", "", "except", "RolloutException", "as", "e", ":", "\n", "            ", "raise", "PomdpInterface", ".", "EnvException", "(", "\"Retry rollout\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.await_env": [[264, 266], ["pomdp_interface.PomdpInterface.rate.sleep"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["", "", "def", "await_env", "(", "self", ")", ":", "\n", "        ", "self", ".", "rate", ".", "sleep", "(", "quiet", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.observe": [[267, 289], ["pomdp_interface.PomdpInterface.drone.get_state", "pomdp.state.DroneState", "pomdp_interface.PomdpInterface._is_out_of_bounds", "pomdp_interface.PomdpInterface._get_reward", "pomdp_interface.PomdpInterface.drone.send_local_velocity_command", "pomdp_interface.PomdpInterface.drone.rollout_end", "PomdpInterface.EnvException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface._is_out_of_bounds", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface._get_reward", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.rollout_end"], ["", "def", "observe", "(", "self", ",", "prev_action", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "drone_state", ",", "image", "=", "self", ".", "drone", ".", "get_state", "(", ")", "\n", "state", "=", "DroneState", "(", "image", ",", "drone_state", ")", "\n", "out_of_bounds", "=", "self", ".", "_is_out_of_bounds", "(", "state", ")", "\n", "reward", "=", "self", ".", "_get_reward", "(", "state", ",", "prev_action", ",", "out_of_bounds", ")", "\n", "\n", "self", ".", "stepcount", "+=", "1", "\n", "expired", "=", "self", ".", "stepcount", ">", "self", ".", "max_horizon", "\n", "\n", "drone_stop", "=", "prev_action", "[", "3", "]", "\n", "done", "=", "out_of_bounds", "or", "drone_stop", ">", "0.5", "or", "expired", "\n", "\n", "# Actually stop the drone (execute stop-action)", "\n", "if", "done", ":", "\n", "                ", "self", ".", "drone", ".", "send_local_velocity_command", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "drone", ".", "rollout_end", "(", ")", "\n", "\n", "# TODO: Respect the done", "\n", "", "return", "state", ",", "reward", ",", "done", ",", "expired", ",", "out_of_bounds", "\n", "", "except", "RolloutException", "as", "e", ":", "\n", "            ", "raise", "PomdpInterface", ".", "EnvException", "(", "\"Retry rollout\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step": [[290, 299], ["pomdp_interface.PomdpInterface.act", "pomdp_interface.PomdpInterface.await_env", "pomdp_interface.PomdpInterface.observe"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.await_env", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.observe"], ["", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Takes an action, executes it in the simulation and returns the state, reward and done indicator\n        :param action: array of length 4: [forward velocity, left velocity, yaw rate, stop probability]\n        :return: DroneState object, reward (float), done (bool)\n        \"\"\"", "\n", "self", ".", "act", "(", "action", ")", "\n", "self", ".", "await_env", "(", ")", "\n", "return", "self", ".", "observe", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.reset_to_random_cv_env": [[305, 312], ["env_config.generation.generate_random_config.make_config_with_landmark", "pomdp_interface.PomdpInterface.drone.set_current_env_from_config", "time.sleep", "numpy.asarray", "pomdp_interface.PomdpInterface.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config.make_config_with_landmark", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.set_current_env_from_config", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset_to_random_cv_env", "(", "self", ",", "landmark_name", "=", "None", ")", ":", "\n", "        ", "config", ",", "pos_x", ",", "pos_z", "=", "make_config_with_landmark", "(", "landmark_name", ")", "\n", "self", ".", "drone", ".", "set_current_env_from_config", "(", "config", ",", "instance_id", "=", "self", ".", "instance_id", ")", "\n", "time", ".", "sleep", "(", "0.2", ")", "\n", "landmark_pos_2d", "=", "np", ".", "asarray", "(", "[", "pos_x", ",", "pos_z", "]", ")", "\n", "self", ".", "cv_mode", "=", "True", "\n", "return", "self", ".", "reset", "(", "landmark_pos", "=", "landmark_pos_2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.snap_birdseye": [[313, 325], ["pomdp_interface.PomdpInterface.drone.reset_environment", "pomdp_interface.PomdpInterface.drone.teleport_3d", "pomdp_interface.PomdpInterface.drone.get_state"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.reset_environment", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_3d", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state"], ["", "def", "snap_birdseye", "(", "self", ",", "fast", "=", "False", ",", "small_env", "=", "False", ")", ":", "\n", "        ", "self", ".", "drone", ".", "reset_environment", "(", ")", "\n", "# TODO: Check environment dimensions", "\n", "if", "small_env", ":", "\n", "            ", "pos_birdseye_as", "=", "[", "2.25", ",", "2.35", ",", "-", "4.92", "*", "2", "-", "0.06", "-", "0.12", "]", "\n", "rpy_birdseye_as", "=", "[", "-", "1.3089", ",", "0", ",", "0", "]", "# For 15 deg camera", "\n", "", "else", ":", "\n", "            ", "pos_birdseye_as", "=", "[", "15", ",", "15", ",", "-", "25", "]", "\n", "rpy_birdseye_as", "=", "[", "-", "1.3089", ",", "0", ",", "0", "]", "# For 15 deg camera", "\n", "", "self", ".", "drone", ".", "teleport_3d", "(", "pos_birdseye_as", ",", "rpy_birdseye_as", ",", "fast", "=", "fast", ")", "\n", "_", ",", "image", "=", "self", ".", "drone", ".", "get_state", "(", "depth", "=", "False", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.snap_cv": [[326, 336], ["pomdp_interface.PomdpInterface.drone.reset_environment", "transforms3d.euler.quat2euler", "pomdp_interface.PomdpInterface.drone.teleport_3d", "time.sleep", "pomdp_interface.PomdpInterface.drone.teleport_3d", "time.sleep", "pomdp_interface.PomdpInterface.drone.get_state"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.reset_environment", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_3d", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_3d", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state"], ["", "def", "snap_cv", "(", "self", ",", "pos", ",", "quat", ")", ":", "\n", "        ", "self", ".", "drone", ".", "reset_environment", "(", ")", "\n", "pos_birdseye_as", "=", "pos", "\n", "rpy_birdseye_as", "=", "euler", ".", "quat2euler", "(", "quat", ")", "\n", "self", ".", "drone", ".", "teleport_3d", "(", "pos_birdseye_as", ",", "rpy_birdseye_as", ",", "pos_in_airsim", "=", "True", ",", "fast", "=", "True", ")", "\n", "time", ".", "sleep", "(", "0.3", ")", "\n", "self", ".", "drone", ".", "teleport_3d", "(", "pos_birdseye_as", ",", "rpy_birdseye_as", ",", "pos_in_airsim", "=", "True", ",", "fast", "=", "True", ")", "\n", "time", ".", "sleep", "(", "0.3", ")", "\n", "_", ",", "image", "=", "self", ".", "drone", ".", "get_state", "(", "depth", "=", "False", ")", "\n", "return", "image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.correct_stop_reward.StopCorrectlyReward.__init__": [[9, 12], ["pomdp.reward.abstract_reward.AbstractReward.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", "StopCorrectlyReward", ",", "self", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.correct_stop_reward.StopCorrectlyReward.get_reward": [[13, 36], ["numpy.linalg.norm", "max", "len", "state.get_pos_2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d"], ["", "def", "get_reward", "(", "self", ",", "state", ",", "action", ",", "done_now", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "path", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "dst_to_endpt", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "path", "[", "-", "1", "]", "-", "state", ".", "get_pos_2d", "(", ")", ")", "\n", "correct_stop", "=", "dst_to_endpt", "<", "CORRECT_STOP_DISTANCE", "\n", "\n", "stop_reward", "=", "max", "(", "(", "CORRECT_STOP_DISTANCE", "-", "dst_to_endpt", ")", "/", "CORRECT_STOP_DISTANCE", ",", "-", "0.5", ")", "\n", "\n", "# Return reward 1 if stopped in correct goal region.", "\n", "# Reward -0.5 if stopped outside of correct goal region", "\n", "status", "=", "\"\"", "\n", "if", "action", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "status", "=", "\"PASS\"", "if", "correct_stop", "else", "\"FAIL\"", "\n", "#reward = 1.0 if correct_stop else -0.5", "\n", "reward", "=", "stop_reward", "\n", "# Return negative reward if didn't stop and flew off", "\n", "", "elif", "done_now", ":", "\n", "            ", "reward", "=", "-", "0.5", "\n", "# Otherwise return 0", "\n", "", "else", ":", "\n", "            ", "reward", "=", "0.0", "\n", "#print(f\"StopCorrectlyReward: {reward} {status}\")", "\n", "", "return", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_field_reward.FollowPathFieldReward.__init__": [[7, 12], ["pomdp.reward.abstract_reward.AbstractReward.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", "FollowPathFieldReward", ",", "self", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "end_idx", "=", "len", "(", "self", ".", "path", ")", "-", "1", "\n", "self", ".", "prev_potential", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_field_reward.FollowPathFieldReward._calc_potential": [[13, 25], ["numpy.asarray", "numpy.argmin", "len", "len", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "_calc_potential", "(", "self", ",", "curr_pos", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "path", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "distances", "=", "np", ".", "asarray", "(", "[", "np", ".", "linalg", ".", "norm", "(", "curr_pos", "-", "p", ")", "for", "p", "in", "self", ".", "path", "]", ")", "\n", "closest_pt_idx", "=", "np", ".", "argmin", "(", "distances", ")", "\n", "closest_pt_dst", "=", "distances", "[", "closest_pt_idx", "]", "\n", "\n", "path_term", "=", "closest_pt_dst", "\n", "goal_term", "=", "closest_pt_idx", "/", "len", "(", "self", ".", "path", ")", "\n", "\n", "potential", "=", "path_term", "+", "goal_term", "\n", "return", "potential", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_field_reward.FollowPathFieldReward.get_reward": [[26, 39], ["state.get_pos_2d", "path_field_reward.FollowPathFieldReward._calc_potential"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_field_reward.FollowPathFieldReward._calc_potential"], ["", "def", "get_reward", "(", "self", ",", "state", ",", "action", ",", "done_now", ")", ":", "\n", "        ", "curr_pos", "=", "state", ".", "get_pos_2d", "(", ")", "\n", "potential", "=", "self", ".", "_calc_potential", "(", "curr_pos", ")", "\n", "\n", "if", "self", ".", "prev_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_potential", "=", "potential", "\n", "\n", "", "reward", "=", "potential", "-", "self", ".", "prev_potential", "\n", "self", ".", "prev_potential", "=", "potential", "\n", "\n", "#print(f\"FollowPathFieldReward: {reward}\")", "\n", "\n", "return", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.abstract_reward.AbstractReward.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.abstract_reward.AbstractReward.get_reward": [[5, 7], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "state", ",", "action", ",", "done_now", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.abstract_reward.AbstractReward.__call__": [[8, 10], ["abstract_reward.AbstractReward.get_reward"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.get_reward"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "get_reward", "(", "*", "args", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.imitation_reward.ImitationReward.__init__": [[10, 22], ["pomdp.reward.abstract_reward.AbstractReward.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", "ImitationReward", ",", "self", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "curr_idx", "=", "0", "\n", "self", ".", "last_pos", "=", "None", "\n", "#currentparams = get_current_parameters()", "\n", "#if currentparams is not None:", "\n", "#    self.params = get_current_parameters()[\"RolloutParams\"]", "\n", "#    self.ref_policy = FancyCarrotPlanner(path) if self.params[\"OracleType\"] == \"FancyCarrotPlanner\" else SimpleCarrotPlanner(path)", "\n", "#else:", "\n", "#    self.ref_policy = None", "\n", "self", ".", "end_idx", "=", "len", "(", "self", ".", "path", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.imitation_reward.ImitationReward.set_current_segment": [[23, 25], ["None"], "methods", ["None"], ["", "def", "set_current_segment", "(", "self", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "        ", "pass", "\n", "#self.ref_policy.set_current_segment(start_idx, end_idx)", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.imitation_reward.ImitationReward.get_reward": [[27, 37], ["imitation_reward.ImitationReward.ref_policy.get_action", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action"], ["", "def", "get_reward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "return", "0", "\n", "if", "self", ".", "ref_policy", "is", "None", ":", "\n", "            ", "return", "0", "\n", "", "ref_action", "=", "self", ".", "ref_policy", ".", "get_action", "(", "state", ")", "\n", "if", "ref_action", "is", "None", "or", "action", "is", "None", ":", "\n", "            ", "return", "0", "\n", "", "reward", "=", "-", "np", ".", "linalg", ".", "norm", "(", "ref_action", "[", "0", ":", "3", "]", "-", "action", "[", "0", ":", "3", "]", ")", "\n", "reward", "=", "0", "#broken", "\n", "return", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.__init__": [[25, 32], ["pomdp.reward.abstract_reward.AbstractReward.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", "FollowPathReward", ",", "self", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "curr_idx", "=", "0", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "complete", "=", "False", "\n", "self", ".", "end_idx", "=", "len", "(", "self", ".", "path", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment": [[33, 38], ["len", "len"], "methods", ["None"], ["", "def", "set_current_segment", "(", "self", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "        ", "if", "end_idx", ">", "len", "(", "self", ".", "path", ")", "-", "1", ":", "\n", "            ", "end_idx", "=", "len", "(", "self", ".", "path", ")", "-", "1", "\n", "", "self", ".", "end_idx", "=", "end_idx", "\n", "self", ".", "complete", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.get_reward": [[39, 98], ["numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.norm", "numpy.norm", "state.get_pos_2d", "numpy.norm", "numpy.norm", "state.get_pos_2d", "numpy.norm", "numpy.norm", "numpy.norm", "numpy.norm", "len", "state.get_pos_2d", "numpy.exp", "numpy.exp", "state.get_pos_2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d"], ["", "def", "get_reward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "\n", "        ", "stopped", "=", "action", "[", "3", "]", ">", "0.5", "\n", "\n", "reward", "=", "0", "\n", "\n", "if", "self", ".", "curr_idx", ">=", "self", ".", "end_idx", "or", "self", ".", "curr_idx", ">=", "len", "(", "self", ".", "path", ")", ":", "\n", "            ", "self", ".", "complete", "=", "True", "\n", "\n", "", "if", "stopped", "and", "not", "self", ".", "complete", ":", "\n", "            ", "self", ".", "complete", "=", "True", "\n", "reward", "+=", "REWARD_FALSE_STOP", "\n", "\n", "", "if", "stopped", "and", "self", ".", "complete", ":", "\n", "            ", "reward", "+=", "REWARD_TRUE_STOP", "\n", "\n", "", "if", "not", "stopped", "and", "self", ".", "complete", ":", "\n", "            ", "reward", "+=", "REWARD_OVERSHOOT", "\n", "\n", "", "if", "self", ".", "complete", ":", "\n", "            ", "return", "reward", ",", "self", ".", "complete", "\n", "\n", "# Retrieve the locations of current and next points along the path", "\n", "", "curr_point_pos", "=", "self", ".", "path", "[", "self", ".", "curr_idx", "]", "\n", "next_point_pos", "=", "self", ".", "path", "[", "self", ".", "curr_idx", "+", "1", "]", "\n", "seg_end_pos", "=", "self", ".", "path", "[", "self", ".", "end_idx", "-", "1", "]", "\n", "\n", "curr_dir", "=", "next_point_pos", "-", "curr_point_pos", "\n", "curr_dir", "/=", "(", "npl", ".", "norm", "(", "curr_dir", ")", "+", "1e-9", ")", "\n", "\n", "next_dot", "=", "np", ".", "dot", "(", "next_point_pos", ",", "curr_dir", ")", "\n", "curr_dot", "=", "np", ".", "dot", "(", "state", ".", "get_pos_2d", "(", ")", ",", "curr_dir", ")", "\n", "\n", "curr_dist", "=", "npl", ".", "norm", "(", "state", ".", "get_pos_2d", "(", ")", "-", "next_point_pos", ")", "\n", "\n", "#Give some reward for getting closer to the next point:", "\n", "if", "self", ".", "last_pos", "is", "not", "None", ":", "\n", "            ", "last_dist_seg_end", "=", "npl", ".", "norm", "(", "self", ".", "last_pos", "-", "seg_end_pos", ")", "\n", "curr_dist_seg_end", "=", "npl", ".", "norm", "(", "state", ".", "get_pos_2d", "(", ")", "-", "seg_end_pos", ")", "\n", "advancement", "=", "last_dist_seg_end", "-", "curr_dist_seg_end", "\n", "reward_shaping", "=", "REWARD_CLOSER", "*", "advancement", "/", "NOMINAL_ADVANCEMENT", "\n", "reward", "+=", "reward_shaping", "\n", "", "self", ".", "last_pos", "=", "state", ".", "get_pos_2d", "(", ")", "\n", "\n", "\n", "#Then check if we have reached the next point and give step reward, higher if we are closer", "\n", "if", "(", "curr_dot", ">", "next_dot", "and", "curr_dist", "<", "DIST_THRESHOLD", ")", "or", "curr_dist", "<", "SEG_END_THRESHOLD", ":", "\n", "            ", "self", ".", "curr_idx", "+=", "1", "\n", "reward", "+=", "REWARD_STEP_BASELINE", "*", "np", ".", "exp", "(", "-", "curr_dist", "**", "2", ")", "\n", "\n", "", "reward", "+=", "REWARD_ITERATION", "\n", "\n", "if", "self", ".", "curr_idx", "==", "self", ".", "end_idx", ":", "\n", "            ", "self", ".", "complete", "=", "True", "\n", "reward", "+=", "REWARD_SEGMENT", "\n", "#print (\" segment complete!\")", "\n", "\n", "#print (\"get_reward: \", reward)", "\n", "", "return", "reward", ",", "self", ".", "complete", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.__init__": [[39, 52], ["visualization.Presenter", "simple_rollout.SimplePolicyRoller.load_all_envs", "pomdp.pomdp_interface.PomdpInterface"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.load_all_envs"], ["def", "__init__", "(", "self", ",", "instance_id", "=", "0", ",", "real_drone", "=", "False", ",", "policy", "=", "None", ",", "oracle", "=", "None", ",", "no_reward", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "presenter", "=", "Presenter", "(", ")", "\n", "self", ".", "instance_id", "=", "instance_id", "\n", "\n", "self", ".", "word2token", "=", "None", "\n", "self", ".", "all_instructions", "=", "None", "\n", "self", ".", "all_env_ids", ",", "self", ".", "all_instructions", ",", "self", ".", "corpus", ",", "self", ".", "token2term", ",", "self", ".", "word2token", "=", "self", ".", "load_all_envs", "(", ")", "\n", "\n", "self", ".", "env", "=", "PomdpInterface", "(", "instance_id", "=", "self", ".", "instance_id", ",", "is_real", "=", "real_drone", ")", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "oracle", "=", "oracle", "\n", "self", ".", "no_reward", "=", "no_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.load_all_envs": [[53, 59], ["data_io.instructions.get_all_instructions", "data_io.instructions.merge_instruction_sets", "data_io.instructions.get_word_to_token_map", "list", "data_io.instructions.merge_instruction_sets.keys"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.merge_instruction_sets", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map"], ["", "def", "load_all_envs", "(", "self", ")", ":", "\n", "        ", "train_i", ",", "dev_i", ",", "test_i", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "all_instructions", "=", "merge_instruction_sets", "(", "train_i", ",", "dev_i", ",", "test_i", ")", "\n", "token2term", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "env_ids", "=", "list", "(", "all_instructions", ".", "keys", "(", ")", ")", "\n", "return", "env_ids", ",", "all_instructions", ",", "corpus", ",", "token2term", ",", "word2token", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.tokenize_string": [[60, 64], ["filter", "list", "s.split", "map"], "methods", ["None"], ["", "def", "tokenize_string", "(", "self", ",", "s", ")", ":", "\n", "        ", "word_list", "=", "filter", "(", "None", ",", "s", ".", "split", "(", "\" \"", ")", ")", "\n", "token_instruction", "=", "list", "(", "map", "(", "lambda", "w", ":", "self", ".", "word2token", "[", "w", "]", ",", "word_list", ")", ")", "\n", "return", "token_instruction", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.set_policy": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_policy", "(", "self", ",", "policy", ")", ":", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.save_rollouts": [[68, 81], ["env_rollouts.items", "len", "data_io.train_data.save_dataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset"], ["", "def", "save_rollouts", "(", "self", ",", "rollouts", ",", "dataset_name", ")", ":", "\n", "        ", "env_rollouts", "=", "{", "}", "\n", "for", "rollout", "in", "rollouts", ":", "\n", "            ", "env_id", "=", "rollout", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "if", "env_id", "not", "in", "env_rollouts", ":", "\n", "                ", "env_rollouts", "[", "env_id", "]", "=", "[", "]", "\n", "", "env_rollouts", "[", "env_id", "]", "+=", "rollout", "\n", "\n", "", "for", "env_id", ",", "rollouts", "in", "env_rollouts", ".", "items", "(", ")", ":", "\n", "# This saves just a single segment per environment, as opposed to all segments that the oracle saves. Problem?", "\n", "            ", "if", "len", "(", "rollouts", ")", ">", "0", ":", "\n", "#pruned_rollouts = [prune_sample(s) for s in rollouts]", "\n", "                ", "save_dataset", "(", "dataset_name", ",", "rollouts", ",", "env_id", "=", "env_id", ",", "lock", "=", "True", ")", "\n", "#save_metadata(dataset_name, env_id, {\"seg_ids\": segments})", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.choose_action": [[83, 89], ["random.uniform"], "methods", ["None"], ["", "", "", "def", "choose_action", "(", "self", ",", "pol_action", ",", "ref_action", ",", "dagger_beta", ")", ":", "\n", "        ", "use_expert", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "dagger_beta", "\n", "if", "use_expert", ":", "\n", "            ", "return", "ref_action", "\n", "", "else", ":", "\n", "            ", "return", "pol_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.sample_to_cpu": [[90, 94], ["sample.items", "hasattr", "isinstance", "v.to"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "", "def", "sample_to_cpu", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", "and", "isinstance", "(", "v", ".", "to", ",", "types", ".", "MethodType", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "v", ".", "to", "(", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.single_segment_rollout": [[95, 177], ["data_io.instructions.get_instruction_segment", "simple_rollout.SimplePolicyRoller.env.set_environment", "simple_rollout.SimplePolicyRoller.env.set_current_segment", "simple_rollout.SimplePolicyRoller.policy.start_sequence", "hasattr", "simple_rollout.SimplePolicyRoller.tokenize_string", "simple_rollout.SimplePolicyRoller.env.reset", "simple_rollout.SimplePolicyRoller.policy.start_segment_rollout", "simple_rollout.SimplePolicyRoller.oracle.start_segment_rollout", "simple_rollout.SimplePolicyRoller.policy.get_action", "simple_rollout.SimplePolicyRoller.env.step", "sum", "utils.dict_tools.dict_merge", "rollout_sample.append", "simple_rollout.SimplePolicyRoller.oracle.get_action", "simple_rollout.SimplePolicyRoller.choose_action", "hasattr", "simple_rollout.SimplePolicyRoller.policy.calc_intrinsic_rewards", "simple_rollout.SimplePolicyRoller.values", "utils.dict_tools.dict_merge", "simple_rollout.SimplePolicyRoller.sample_to_cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.set_environment", "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.tokenize_string", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.start_segment_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.start_segment_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.choose_action", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.calc_intrinsic_rewards", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.sample_to_cpu"], ["", "", "", "def", "single_segment_rollout", "(", "self", ",", "env_id", ",", "set_idx", ",", "seg_idx", ",", "do_sample", ",", "dagger_beta", "=", "0", ",", "rl_rollout", "=", "True", ")", ":", "\n", "        ", "instruction_sets", "=", "self", ".", "all_instructions", "[", "env_id", "]", "[", "set_idx", "]", "[", "'instructions'", "]", "\n", "for", "instruction_set", "in", "instruction_sets", ":", "\n", "            ", "if", "instruction_set", "[", "\"seg_idx\"", "]", "==", "seg_idx", ":", "\n", "                ", "break", "\n", "\n", "# TODO: Get rid of this idiocy:", "\n", "", "", "md", ".", "IS_ROLLOUT", "=", "True", "\n", "\n", "instruction_set", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "all_instr", "=", "self", ".", "all_instructions", ")", "\n", "\n", "self", ".", "env", ".", "set_environment", "(", "env_id", ",", "instruction_set", "=", "instruction_sets", ",", "fast", "=", "True", ")", "\n", "self", ".", "env", ".", "set_current_segment", "(", "seg_idx", ")", "\n", "\n", "self", ".", "policy", ".", "start_sequence", "(", ")", "\n", "if", "hasattr", "(", "self", ".", "policy", ",", "\"start_segment_rollout\"", ")", ":", "\n", "            ", "self", ".", "policy", ".", "start_segment_rollout", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "", "if", "self", ".", "oracle", ":", "\n", "            ", "self", ".", "oracle", ".", "start_segment_rollout", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "\n", "", "string_instruction", ",", "end_idx", ",", "start_idx", "=", "instruction_set", "[", "\"instruction\"", "]", ",", "instruction_set", "[", "\"end_idx\"", "]", ",", "instruction_set", "[", "\"start_idx\"", "]", "\n", "token_instruction", "=", "self", ".", "tokenize_string", "(", "string_instruction", ")", "\n", "\n", "# TODO: Support oracle (including setCurrentSegment, and setting the path)", "\n", "rollout_sample", "=", "[", "]", "\n", "\n", "# Reset the drone to the segment starting position:", "\n", "state", "=", "self", ".", "env", ".", "reset", "(", "seg_idx", ")", "\n", "\n", "first", "=", "True", "\n", "while", "True", ":", "\n", "            ", "action", ",", "rl_stuff", "=", "self", ".", "policy", ".", "get_action", "(", "state", ",", "token_instruction", ",", "sample", "=", "do_sample", ",", "rl_rollout", "=", "rl_rollout", ")", "\n", "\n", "if", "self", ".", "oracle", ":", "\n", "                ", "ref_action", ",", "_", "=", "self", ".", "oracle", ".", "get_action", "(", "state", ",", "token_instruction", ")", "\n", "exec_action", "=", "self", ".", "choose_action", "(", "action", ",", "ref_action", ",", "dagger_beta", ")", "\n", "", "else", ":", "\n", "                ", "ref_action", "=", "action", "\n", "exec_action", "=", "action", "\n", "\n", "", "next_state", ",", "extrinsic_reward", ",", "done", ",", "expired", ",", "oob", "=", "self", ".", "env", ".", "step", "(", "exec_action", ")", "\n", "\n", "# Calculate intrinsic reward (I don't like that this delays the loop)", "\n", "if", "hasattr", "(", "self", ".", "policy", ",", "\"calc_intrinsic_rewards\"", ")", "and", "not", "self", ".", "no_reward", ":", "\n", "                ", "intrinsic_rewards", "=", "self", ".", "policy", ".", "calc_intrinsic_rewards", "(", "next_state", ",", "action", ",", "done", ",", "first", ")", "\n", "", "else", ":", "\n", "                ", "intrinsic_rewards", "=", "{", "\"x\"", ":", "0", "}", "\n", "", "intrinsic_reward", "=", "sum", "(", "intrinsic_rewards", ".", "values", "(", ")", ")", "\n", "\n", "sample", "=", "{", "\n", "\"instruction\"", ":", "string_instruction", ",", "\n", "\"ref_action\"", ":", "ref_action", ",", "\n", "\"pol_action\"", ":", "action", ",", "\n", "\"action\"", ":", "exec_action", ",", "\n", "\"state\"", ":", "state", ",", "\n", "\"extrinsic_reward\"", ":", "extrinsic_reward", ",", "\n", "\"intrinsic_reward\"", ":", "intrinsic_reward", "-", "(", "1.0", "if", "oob", "else", "0.0", ")", ",", "\n", "\"full_reward\"", ":", "extrinsic_reward", "+", "intrinsic_reward", ",", "\n", "\"done\"", ":", "done", ",", "\n", "\"expired\"", ":", "expired", ",", "\n", "\"env_id\"", ":", "env_id", ",", "\n", "\"set_idx\"", ":", "set_idx", ",", "\n", "\"seg_idx\"", ":", "seg_idx", ",", "\n", "}", "\n", "sample", "=", "dict_merge", "(", "sample", ",", "rl_stuff", ")", "\n", "if", "not", "self", ".", "no_reward", ":", "\n", "                ", "sample", "=", "dict_merge", "(", "sample", ",", "intrinsic_rewards", ")", "\n", "", "rollout_sample", ".", "append", "(", "sample", ")", "\n", "\n", "# Multiprocessing has stopped playing nice with PyTorch cuda. Move sample to cpu first.", "\n", "if", "rl_rollout", ":", "\n", "                ", "self", ".", "sample_to_cpu", "(", "sample", ")", "\n", "\n", "", "state", "=", "next_state", "\n", "first", "=", "False", "\n", "if", "done", ":", "\n", "#print(f\"Done! Last action: {exec_action}\")", "\n", "                ", "break", "\n", "\n", "", "", "md", ".", "IS_ROLLOUT", "=", "False", "\n", "# Add discounted returns", "\n", "return", "rollout_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.rollout_segments": [[178, 201], ["zip", "simple_rollout.SimplePolicyRoller.policy.set_policy_state", "data.append", "simple_rollout.SimplePolicyRoller.save_rollouts", "simple_rollout.SimplePolicyRoller.env.land", "simple_rollout.SimplePolicyRoller.single_segment_rollout"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.set_policy_state", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.save_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.land", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.single_segment_rollout"], ["", "def", "rollout_segments", "(", "self", ",", "env_ids", ",", "seg_ids", ",", "policy_state", ",", "sample", ",", "dagger_beta", "=", "0", ",", "save_dataset_name", "=", "None", ",", "land_afterwards", "=", "False", ",", "rl_rollout", "=", "True", ")", ":", "\n", "        ", "if", "policy_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "policy", ".", "set_policy_state", "(", "policy_state", ")", "\n", "\n", "", "data", "=", "[", "]", "\n", "for", "env_id", ",", "seg_idx", "in", "zip", "(", "env_ids", ",", "seg_ids", ")", ":", "\n", "            ", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "                ", "try", ":", "\n", "                    ", "seg_data", "=", "self", ".", "single_segment_rollout", "(", "env_id", ",", "0", ",", "seg_idx", ",", "sample", ",", "dagger_beta", ",", "rl_rollout", ")", "\n", "done", "=", "True", "\n", "", "except", "PomdpInterface", ".", "EnvException", "as", "e", ":", "\n", "                    ", "continue", "\n", "", "", "data", ".", "append", "(", "seg_data", ")", "\n", "\n", "", "if", "save_dataset_name", ":", "\n", "            ", "self", ".", "save_rollouts", "(", "data", ",", "save_dataset_name", ")", "\n", "\n", "# Land the real drone if we have one.", "\n", "", "if", "land_afterwards", ":", "\n", "            ", "self", ".", "env", ".", "land", "(", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.prune_sample": [[15, 32], ["None"], "function", ["None"], ["def", "prune_sample", "(", "s", ")", ":", "\n", "    ", "pruned_sample", "=", "{", "\n", "\"instruction\"", ":", "s", "[", "\"instruction\"", "]", ",", "\n", "\"ref_action\"", ":", "s", "[", "\"ref_action\"", "]", ",", "\n", "\"pol_action\"", ":", "s", "[", "\"pol_action\"", "]", ",", "\n", "\"action\"", ":", "s", "[", "\"action\"", "]", ",", "\n", "\"state\"", ":", "s", "[", "\"state\"", "]", ",", "\n", "\"extrinsic_reward\"", ":", "s", "[", "\"extrinsic_reward\"", "]", ",", "\n", "\"intrinsic_reward\"", ":", "s", "[", "\"intrinsic_reward\"", "]", ",", "\n", "\"full_reward\"", ":", "s", "[", "\"full_reward\"", "]", ",", "\n", "\"done\"", ":", "s", "[", "\"done\"", "]", ",", "\n", "\"expired\"", ":", "s", "[", "\"expired\"", "]", ",", "\n", "\"env_id\"", ":", "s", "[", "\"env_id\"", "]", ",", "\n", "\"set_idx\"", ":", "s", "[", "\"set_idx\"", "]", ",", "\n", "\"seg_idx\"", ":", "s", "[", "\"seg_idx\"", "]", "\n", "}", "\n", "return", "pruned_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.__init__": [[57, 81], ["data_io.models.load_model", "simple_parallel_rollout.SimpleParallelPolicyRoller.shared_policy.make_picklable", "simple_parallel_rollout.SimpleParallelPolicyRoller.shared_policy.to", "range", "multiprocessing.get_context", "multiprocessing.get_context.Pipe", "print", "multiprocessing.get_context.Process", "simple_parallel_rollout.SimpleParallelPolicyRoller.processes.append", "simple_parallel_rollout.SimpleParallelPolicyRoller.connections.append", "mp.get_context.Process.start"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.make_picklable", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["    ", "def", "__init__", "(", "self", ",", "policy_name", ",", "policy_file", ",", "num_workers", ",", "\n", "oracle", "=", "None", ",", "device", "=", "None", ",", "dataset_save_name", "=", "\"\"", ",", "restart_every_n", "=", "1000", ",", "\n", "no_reward", "=", "False", ")", ":", "\n", "        ", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "processes", "=", "[", "]", "\n", "self", ".", "connections", "=", "[", "]", "\n", "self", ".", "policy_name", "=", "policy_name", "\n", "self", ".", "shared_policy", ",", "_", "=", "load_model", "(", "policy_name", ",", "policy_file", ")", "\n", "self", ".", "shared_policy", ".", "make_picklable", "(", ")", "\n", "self", ".", "shared_policy", "=", "self", ".", "shared_policy", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "dataset_save_name", "=", "dataset_save_name", "\n", "self", ".", "restart_every_n", "=", "restart_every_n", "\n", "self", ".", "rollout_num", "=", "0", "\n", "self", ".", "no_reward", "=", "no_reward", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "ctx", "=", "mp", ".", "get_context", "(", "\"spawn\"", ")", "\n", "parent_conn", ",", "child_conn", "=", "ctx", ".", "Pipe", "(", ")", "\n", "print", "(", "f\"LAUNCHING WORKER {i}\"", ")", "\n", "p", "=", "ctx", ".", "Process", "(", "target", "=", "worker_process", ",", "args", "=", "(", "child_conn", ",", "i", ",", "dataset_save_name", ",", "self", ".", "shared_policy", ",", "oracle", ",", "device", ",", "no_reward", ")", ")", "\n", "self", ".", "processes", ".", "append", "(", "p", ")", "\n", "self", ".", "connections", ".", "append", "(", "parent_conn", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.__enter__": [[82, 84], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.__exit__": [[85, 90], ["range", "range", "simple_parallel_rollout.SimpleParallelPolicyRoller.connections[].send", "simple_parallel_rollout.SimpleParallelPolicyRoller.processes[].join"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "self", ".", "connections", "[", "i", "]", ".", "send", "(", "[", "\"Stop\"", ",", "None", "]", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "self", ".", "processes", "[", "i", "]", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller._split_list_for_workers": [[91, 97], ["int", "range", "len", "split.append", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "_split_list_for_workers", "(", "self", ",", "lst", ")", ":", "\n", "        ", "n_each", "=", "int", "(", "(", "len", "(", "lst", ")", "+", "self", ".", "num_workers", "-", "1", ")", "/", "self", ".", "num_workers", ")", "\n", "split", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lst", ")", ",", "n_each", ")", ":", "\n", "            ", "split", ".", "append", "(", "lst", "[", "i", ":", "i", "+", "n_each", "]", ")", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.update_stage1_on_workers": [[98, 104], ["stage1_module.make_picklable", "range", "print", "simple_parallel_rollout.SimpleParallelPolicyRoller.connections[].send"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.make_picklable"], ["", "def", "update_stage1_on_workers", "(", "self", ",", "stage1_module", ")", ":", "\n", "        ", "stage1_module", ".", "make_picklable", "(", ")", "\n", "self", ".", "shared_policy", ".", "stage1_visitation_prediction", "=", "stage1_module", "\n", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "print", "(", "f\"  Reloading stage 1 on worker {i}\"", ")", "\n", "self", ".", "connections", "[", "i", "]", ".", "send", "(", "[", "\"ReloadStaticState\"", ",", "stage1_module", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.kill_airsim": [[105, 108], ["range", "simple_parallel_rollout.SimpleParallelPolicyRoller.connections[].send"], "methods", ["None"], ["", "", "def", "kill_airsim", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "self", ".", "connections", "[", "i", "]", ".", "send", "(", "[", "\"KillSim\"", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.rollout_segments": [[109, 135], ["simple_parallel_rollout.SimpleParallelPolicyRoller._split_list_for_workers", "simple_parallel_rollout.SimpleParallelPolicyRoller._split_list_for_workers", "range", "range", "print", "int", "range", "simple_parallel_rollout.SimpleParallelPolicyRoller.connections[].send", "simple_parallel_rollout.SimpleParallelPolicyRoller.connections[].recv", "simple_parallel_rollout.SimpleParallelPolicyRoller.connections[].send", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller._split_list_for_workers", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller._split_list_for_workers"], ["", "", "def", "rollout_segments", "(", "self", ",", "env_ids", ",", "seg_idx", ",", "policy_state", ",", "sample", ",", "dagger_beta", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "rollout_num", "+=", "int", "(", "len", "(", "env_ids", ")", "/", "self", ".", "num_workers", ")", "+", "1", "\n", "# Restart AirSim every N rollouts. This is needed because the workers for some reason", "\n", "# tend to get slower and slower as if there was a memory leak or something", "\n", "if", "self", ".", "rollout_num", "%", "self", ".", "restart_every_n", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "                ", "self", ".", "connections", "[", "i", "]", ".", "send", "(", "[", "\"Restart\"", ",", "None", "]", ")", "\n", "\n", "# Split env_ids and seg_ids", "\n", "", "", "env_ids_split", "=", "self", ".", "_split_list_for_workers", "(", "env_ids", ")", "\n", "seg_ids_split", "=", "self", ".", "_split_list_for_workers", "(", "seg_idx", ")", "\n", "\n", "# Send to each of the worker tasks", "\n", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "self", ".", "connections", "[", "i", "]", ".", "send", "(", "[", "\"Rollout\"", ",", "[", "env_ids_split", "[", "i", "]", ",", "seg_ids_split", "[", "i", "]", ",", "policy_state", ",", "sample", ",", "dagger_beta", "]", "]", ")", "\n", "\n", "# Collect and return results", "\n", "", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "result", "=", "self", ".", "connections", "[", "i", "]", ".", "recv", "(", ")", "\n", "results", "+=", "result", "\n", "\n", "", "print", "(", "\"SimpleParallelRollout: Finished N Rollouts\"", ")", "\n", "# Keep worker tasks alive.", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.worker_process": [[13, 53], ["parameters.initialize_experiment", "rollout.simple_rollout.SimplePolicyRoller", "conn.close", "conn.recv", "print", "os.system", "print", "os.system", "time.sleep", "rollout.simple_rollout.SimplePolicyRoller", "print", "print", "rollout.simple_rollout.SimplePolicyRoller.set_policy", "rollout.simple_rollout.SimplePolicyRoller.rollout_segments", "conn.send", "ValueError", "rollout.simple_rollout.SimplePolicyRoller", "next", "payload.parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_rollout.SimplePolicyRoller.set_policy", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.rollout_segments", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["def", "worker_process", "(", "conn", ",", "instance_id", ",", "save_dataset_name", ",", "policy", ",", "oracle", ",", "device", ",", "no_reward", ")", ":", "\n", "# This doesn't carry over to subprocess, so have to re-load the params from json", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "policy_roller", "=", "SimplePolicyRoller", "(", "instance_id", "=", "instance_id", ",", "policy", "=", "policy", ",", "oracle", "=", "oracle", ",", "no_reward", "=", "no_reward", ")", "\n", "current_policy", "=", "policy", "\n", "while", "True", ":", "\n", "        ", "msg", ",", "payload", "=", "conn", ".", "recv", "(", ")", "\n", "\n", "if", "msg", "==", "\"Stop\"", ":", "\n", "            ", "break", "\n", "\n", "", "elif", "msg", "==", "\"KillSim\"", ":", "\n", "            ", "print", "(", "f\"  RECV: {msg}\"", ")", "\n", "del", "policy_roller", "\n", "os", ".", "system", "(", "\"killall -9 MyProject5-Linux-Shipping\"", ")", "\n", "policy_roller", "=", "None", "\n", "\n", "", "elif", "msg", "==", "\"Restart\"", ":", "\n", "            ", "print", "(", "f\"  RECV: {msg}\"", ")", "\n", "del", "policy_roller", "\n", "os", ".", "system", "(", "\"killall -9 MyProject5-Linux-Shipping\"", ")", "\n", "sleep", "(", "2", ")", "\n", "policy_roller", "=", "SimplePolicyRoller", "(", "instance_id", "=", "instance_id", ",", "policy", "=", "current_policy", ")", "\n", "\n", "", "elif", "msg", "==", "\"ReloadStaticState\"", ":", "\n", "            ", "print", "(", "f\"  RECV: {msg}\"", ")", "\n", "print", "(", "f\"payload.device: {next(payload.parameters()).device}\"", ")", "\n", "# TODO: This should be general and not know anything about model details:", "\n", "current_policy", ".", "stage1_visitation_prediction", "=", "payload", "\n", "policy_roller", ".", "set_policy", "(", "current_policy", ")", "\n", "\n", "", "elif", "msg", "==", "\"Rollout\"", ":", "\n", "            ", "if", "policy_roller", "is", "None", ":", "\n", "                ", "policy_roller", "=", "SimplePolicyRoller", "(", "instance_id", "=", "instance_id", ",", "policy", "=", "current_policy", ",", "no_reward", "=", "no_reward", ")", "\n", "", "env_ids", ",", "seg_ids", ",", "policy_state", ",", "sample", ",", "dagger_beta", "=", "payload", "\n", "result", "=", "policy_roller", ".", "rollout_segments", "(", "env_ids", ",", "seg_ids", ",", "policy_state", ",", "sample", ",", "dagger_beta", ",", "save_dataset_name", ")", "\n", "conn", ".", "send", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unrecognized worker task message: {msg}\"", ")", "\n", "", "", "conn", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.parallel_roll_out.ParallelPolicyRoller.__init__": [[36, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_workers", "=", "1", ",", "first_worker", "=", "0", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "first_worker", "=", "first_worker", "\n", "self", ".", "reduce", "=", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.parallel_roll_out.ParallelPolicyRoller.reset": [[41, 43], ["parallel_roll_out.ParallelPolicyRoller.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "self", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.parallel_roll_out.ParallelPolicyRoller.roll_out_policy": [[44, 81], ["range", "range", "range", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "list", "env_lists.append", "len", "env_lists[].append", "worker_arglists.append", "itertools.chain.from_iterable", "list", "copy.deepcopy", "copy.deepcopy.setEnvList", "worker_arglist.append", "itertools.chain.from_iterable"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "roll_out_policy", "(", "self", ",", "params", ")", ":", "\n", "\n", "# Distribute the environments across workers", "\n", "        ", "env_lists", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "env_lists", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "params", ".", "envs", ")", ")", ":", "\n", "            ", "env_lists", "[", "i", "%", "self", ".", "num_workers", "]", ".", "append", "(", "params", ".", "envs", "[", "i", "]", ")", "\n", "\n", "", "worker_arglists", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "            ", "worker_arglist", "=", "[", "]", "\n", "for", "e", "in", "env_lists", "[", "i", "]", ":", "\n", "                ", "params", "=", "copy", ".", "deepcopy", "(", "params", ")", "\n", "params", ".", "setEnvList", "(", "[", "e", "]", ")", "\n", "worker_arglist", ".", "append", "(", "params", ")", "\n", "", "worker_arglists", ".", "append", "(", "(", "self", ".", "first_worker", "+", "i", ",", "worker_arglist", ")", ")", "\n", "\n", "", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "self", ".", "num_workers", ")", "\n", "\n", "# Map", "\n", "results", "=", "pool", ".", "map", "(", "exec_roll_out_policy", ",", "worker_arglists", ")", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "# Eeach pool worker will return a list of lists of individual rollouts.", "\n", "# We don't care which worker each rollout came from, so chain these together in a single list", "\n", "results", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "results", ")", ")", "\n", "\n", "# Reduce", "\n", "datasets", "=", "results", "\n", "if", "self", ".", "reduce", ":", "\n", "            ", "datasets_out", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "datasets", ")", ")", "\n", "", "else", ":", "\n", "            ", "datasets_out", "=", "datasets", "\n", "", "return", "datasets_out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.parallel_roll_out.exec_roll_out_policy": [[17, 29], ["enumerate", "params.loadPolicy", "print", "rollout.roll_out.PolicyRoller", "rollout.roll_out.PolicyRoller.roll_out_policy", "results.append", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.loadPolicy", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_policy", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "exec_roll_out_policy", "(", "arguments", ")", ":", "\n", "    ", "worker_num", "=", "arguments", "[", "0", "]", "\n", "param_list", "=", "arguments", "[", "1", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", ",", "params", "in", "enumerate", "(", "param_list", ")", ":", "\n", "        ", "params", ".", "loadPolicy", "(", ")", "\n", "print", "(", "\"Staring execution for worker: \"", "+", "str", "(", "worker_num", ")", "+", "\" rollout: \"", "+", "str", "(", "i", ")", ")", "\n", "roller", "=", "PolicyRoller", "(", "instance_id", "=", "worker_num", ")", "\n", "dataset", "=", "roller", ".", "roll_out_policy", "(", "params", ")", "\n", "#error_tracker = roller.get_error_tracker()", "\n", "results", ".", "append", "(", "dataset", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.__init__": [[28, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "=", "None", "\n", "self", ".", "policy_loaded", "=", "False", "\n", "self", ".", "use_policy", "=", "False", "\n", "self", ".", "flag", "=", "None", "# Flag added to the metadata of each sample", "\n", "self", ".", "ignore_policy_stop", "=", "False", "\n", "self", ".", "write_summaries", "=", "True", "\n", "self", ".", "model_name", "=", "\"unnamed\"", "\n", "self", ".", "model_file", "=", "None", "\n", "self", ".", "run_name", "=", "\"default_run\"", "\n", "self", ".", "segment_reset", "=", "\"always\"", "\n", "self", ".", "first_person", "=", "False", "\n", "self", ".", "plot", "=", "False", "\n", "self", ".", "show_action", "=", "False", "\n", "self", ".", "plot_dir", "=", "\".\"", "\n", "self", ".", "save_plots", "=", "False", "\n", "self", ".", "save_samples", "=", "False", "\n", "self", ".", "collect_data", "=", "False", "\n", "self", ".", "envs", "=", "None", "\n", "self", ".", "seg_list", "=", "None", "\n", "self", ".", "custom_instructions", "=", "None", "\n", "self", ".", "cuda", "=", "False", "\n", "self", ".", "build_train_data", "=", "False", "\n", "self", ".", "max_deviation", "=", "100.0", "\n", "self", ".", "horizon", "=", "80.0", "\n", "self", ".", "steps_to_kill", "=", "50.0", "\n", "self", ".", "segment_level", "=", "False", "\n", "self", ".", "debug", "=", "False", "\n", "self", ".", "setup_name", "=", "\"\"", "\n", "self", ".", "first_segment_only", "=", "False", "\n", "self", ".", "wrong_path_p", "=", "0.0", "\n", "\n", "self", ".", "switch_prob", "=", "0.0", "\n", "self", ".", "mixture_ref_prob", "=", "0.0", "\n", "self", ".", "rollout_strategy", "=", "RolloutStrategy", ".", "POLICY", "\n", "self", ".", "threshold_strategy", "=", "SwitchThresholdStrategy", ".", "IN_ONLY", "\n", "\n", "self", ".", "real_drone", "=", "False", "\n", "self", ".", "policy", "=", "None", "\n", "self", ".", "ref_policy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelName": [[70, 73], ["None"], "methods", ["None"], ["", "def", "setModelName", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "model_name", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setModelFile": [[74, 77], ["None"], "methods", ["None"], ["", "def", "setModelFile", "(", "self", ",", "model_file", ")", ":", "\n", "        ", "self", ".", "model_file", "=", "model_file", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setWriteSummaries": [[78, 81], ["None"], "methods", ["None"], ["", "def", "setWriteSummaries", "(", "self", ",", "write_summaries", ")", ":", "\n", "        ", "self", ".", "write_summaries", "=", "write_summaries", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRunName": [[82, 85], ["None"], "methods", ["None"], ["", "def", "setRunName", "(", "self", ",", "run_name", ")", ":", "\n", "        ", "self", ".", "run_name", "=", "run_name", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSetupName": [[86, 89], ["None"], "methods", ["None"], ["", "def", "setSetupName", "(", "self", ",", "setup_name", ")", ":", "\n", "        ", "self", ".", "setup_name", "=", "setup_name", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRealtimeFirstPerson": [[90, 93], ["None"], "methods", ["None"], ["", "def", "setRealtimeFirstPerson", "(", "self", ",", "first_person", ")", ":", "\n", "        ", "self", ".", "first_person", "=", "first_person", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setPlot": [[94, 97], ["None"], "methods", ["None"], ["", "def", "setPlot", "(", "self", ",", "plot", ")", ":", "\n", "        ", "self", ".", "plot", "=", "plot", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setShowAction": [[98, 101], ["None"], "methods", ["None"], ["", "def", "setShowAction", "(", "self", ",", "show_action", ")", ":", "\n", "        ", "self", ".", "show_action", "=", "show_action", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setPlotDir": [[102, 105], ["None"], "methods", ["None"], ["", "def", "setPlotDir", "(", "self", ",", "dir", ")", ":", "\n", "        ", "self", ".", "plot_dir", "=", "dir", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSavePlots": [[106, 109], ["None"], "methods", ["None"], ["", "def", "setSavePlots", "(", "self", ",", "save_plots", ")", ":", "\n", "        ", "self", ".", "save_plots", "=", "save_plots", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSaveSamples": [[110, 113], ["None"], "methods", ["None"], ["", "def", "setSaveSamples", "(", "self", ",", "save_samples", ")", ":", "\n", "        ", "self", ".", "save_samples", "=", "save_samples", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCollectData": [[114, 117], ["None"], "methods", ["None"], ["", "def", "setCollectData", "(", "self", ",", "collect_data", ")", ":", "\n", "        ", "self", ".", "collect_data", "=", "collect_data", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setEnvList": [[118, 121], ["None"], "methods", ["None"], ["", "def", "setEnvList", "(", "self", ",", "env_list", ")", ":", "\n", "        ", "self", ".", "envs", "=", "env_list", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegList": [[122, 125], ["None"], "methods", ["None"], ["", "def", "setSegList", "(", "self", ",", "seg_list", ")", ":", "\n", "        ", "self", ".", "seg_list", "=", "seg_list", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCustomInstructions": [[126, 129], ["None"], "methods", ["None"], ["", "def", "setCustomInstructions", "(", "self", ",", "custom_instr", ")", ":", "\n", "        ", "self", ".", "custom_instructions", "=", "custom_instr", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentReset": [[131, 134], ["None"], "methods", ["None"], ["", "def", "setSegmentReset", "(", "self", ",", "segment_reset", ")", ":", "\n", "        ", "self", ".", "segment_reset", "=", "segment_reset", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSegmentLevel": [[135, 138], ["None"], "methods", ["None"], ["", "def", "setSegmentLevel", "(", "self", ",", "is_segment_level", ")", ":", "\n", "        ", "self", ".", "segment_level", "=", "is_segment_level", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setFirstSegmentOnly": [[139, 142], ["None"], "methods", ["None"], ["", "def", "setFirstSegmentOnly", "(", "self", ",", "first_seg_only", ")", ":", "\n", "        ", "self", ".", "first_segment_only", "=", "first_seg_only", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isSegmentLevel": [[143, 145], ["None"], "methods", ["None"], ["", "def", "isSegmentLevel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "segment_level", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCuda": [[146, 149], ["None"], "methods", ["None"], ["", "def", "setCuda", "(", "self", ",", "cuda", ")", ":", "\n", "        ", "self", ".", "cuda", "=", "cuda", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setMaxDeviation": [[150, 153], ["None"], "methods", ["None"], ["", "def", "setMaxDeviation", "(", "self", ",", "deviation", ")", ":", "\n", "        ", "self", ".", "max_deviation", "=", "deviation", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setStepsToForceStop": [[154, 157], ["None"], "methods", ["None"], ["", "def", "setStepsToForceStop", "(", "self", ",", "steps_to_stop", ")", ":", "\n", "        ", "self", ".", "steps_to_kill", "=", "steps_to_stop", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setHorizon": [[158, 161], ["None"], "methods", ["None"], ["", "def", "setHorizon", "(", "self", ",", "horizon", ")", ":", "\n", "        ", "self", ".", "horizon", "=", "horizon", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRolloutStrategy": [[162, 165], ["None"], "methods", ["None"], ["", "def", "setRolloutStrategy", "(", "self", ",", "strategy", ")", ":", "\n", "        ", "self", ".", "rollout_strategy", "=", "strategy", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSwitchThresholdStrategy": [[166, 169], ["None"], "methods", ["None"], ["", "def", "setSwitchThresholdStrategy", "(", "self", ",", "strategy", ")", ":", "\n", "        ", "self", ".", "threshold_strategy", "=", "strategy", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setSwitchProbability": [[170, 173], ["None"], "methods", ["None"], ["", "def", "setSwitchProbability", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "switch_prob", "=", "prob", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setMixtureReferenceProbability": [[174, 177], ["None"], "methods", ["None"], ["", "def", "setMixtureReferenceProbability", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "mixture_ref_prob", "=", "prob", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setIgnorePolicyStop": [[178, 181], ["None"], "methods", ["None"], ["", "def", "setIgnorePolicyStop", "(", "self", ",", "ignore", ")", ":", "\n", "        ", "self", ".", "ignore_policy_stop", "=", "ignore", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setFlag": [[182, 185], ["None"], "methods", ["None"], ["", "def", "setFlag", "(", "self", ",", "flag", ")", ":", "\n", "        ", "self", ".", "flag", "=", "flag", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setWrongPathP": [[186, 189], ["None"], "methods", ["None"], ["", "def", "setWrongPathP", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "wrong_path_p", "=", "p", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setDebug": [[190, 193], ["None"], "methods", ["None"], ["", "def", "setDebug", "(", "self", ",", "debug", ")", ":", "\n", "        ", "self", ".", "debug", "=", "debug", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setRealDrone": [[194, 197], ["None"], "methods", ["None"], ["", "def", "setRealDrone", "(", "self", ",", "realDrone", ")", ":", "\n", "        ", "self", ".", "real_drone", "=", "realDrone", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isRealDrone": [[198, 200], ["None"], "methods", ["None"], ["", "def", "isRealDrone", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "real_drone", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isDebug": [[201, 203], ["None"], "methods", ["None"], ["", "def", "isDebug", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.loadPolicy": [[205, 222], ["parameters.initialize_experiment", "parameters.get_current_parameters", "print", "print", "data_io.models.load_model", "print", "print", "print", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model"], ["", "def", "loadPolicy", "(", "self", ")", ":", "\n", "        ", "P", ".", "initialize_experiment", "(", "self", ".", "setup_name", ")", "\n", "self", ".", "params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Rollout\"", "]", "\n", "if", "self", ".", "model_name", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"RollOutParams loading model\"", ")", "\n", "print", "(", "\"Use cuda: \"", "+", "str", "(", "self", ".", "cuda", ")", ")", "\n", "self", ".", "policy", ",", "self", ".", "policy_loaded", "=", "load_model", "(", "model_file_override", "=", "self", ".", "model_file", ")", "\n", "\n", "self", ".", "use_policy", "=", "True", "\n", "if", "self", ".", "policy", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"Loaded policy: \"", ",", "self", ".", "model_name", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Error loading policy: \"", ",", "self", ".", "model_name", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Error! Requested loadPolicy, but model_name is None!\"", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.initPolicyContext": [[223, 240], ["roll_out_params.RollOutParams.policyRequresGroundTruth", "hasattr", "policies.simple_carrot_planner.SimpleCarrotPlanner", "roll_out_params.RollOutParams.policy.set_path", "roll_out_params.RollOutParams.policy.set_wrong_path_prob", "roll_out_params.RollOutParams.policy.setEnvContext", "policies.fancy_carrot_planner.FancyCarrotPlanner", "policies.basic_carrot_planner.BasicCarrotPlanner", "Exception", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.policyRequresGroundTruth", "home.repos.pwc.inspect_result.clic-lab_drif.policies.basic_carrot_planner.BasicCarrotPlanner.set_path", "home.repos.pwc.inspect_result.clic-lab_drif.policies.simple_carrot_planner.SimpleCarrotPlanner.set_wrong_path_prob", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.setEnvContext"], ["", "def", "initPolicyContext", "(", "self", ",", "env_id", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "params", "[", "\"oracle_type\"", "]", "==", "\"SimpleCarrotPlanner\"", ":", "\n", "            ", "self", ".", "ref_policy", "=", "SimpleCarrotPlanner", "(", "path", ",", "max_deviation", "=", "self", ".", "max_deviation", ")", "\n", "", "elif", "self", ".", "params", "[", "\"oracle_type\"", "]", "==", "\"FancyCarrotPlanner\"", ":", "\n", "            ", "self", ".", "ref_policy", "=", "FancyCarrotPlanner", "(", "path", ",", "max_deviation", "=", "self", ".", "max_deviation", ")", "\n", "", "elif", "self", ".", "params", "[", "\"oracle_type\"", "]", "==", "\"BasicCarrotPlanner\"", ":", "\n", "            ", "self", ".", "ref_policy", "=", "BasicCarrotPlanner", "(", "path", ",", "max_deviation", "=", "self", ".", "max_deviation", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown Oracle in RollOutParams: \"", "+", "str", "(", "self", ".", "params", "[", "\"OracleType\"", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "policyRequresGroundTruth", "(", ")", ":", "\n", "            ", "self", ".", "policy", ".", "set_path", "(", "path", ")", "\n", "", "if", "self", ".", "wrong_path_p", ">", "0", ":", "\n", "            ", "self", ".", "policy", ".", "set_wrong_path_prob", "(", "self", ".", "wrong_path_p", ")", "\n", "", "if", "hasattr", "(", "self", ".", "policy", ",", "\"setEnvContext\"", ")", ":", "\n", "            ", "self", ".", "policy", ".", "setEnvContext", "(", "{", "\"env_id\"", ":", "env_id", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCurrentSegment": [[241, 245], ["roll_out_params.RollOutParams.ref_policy.set_current_segment", "roll_out_params.RollOutParams.policyRequresGroundTruth", "roll_out_params.RollOutParams.policy.set_current_segment"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.policyRequresGroundTruth", "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment"], ["", "", "def", "setCurrentSegment", "(", "self", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "        ", "self", ".", "ref_policy", ".", "set_current_segment", "(", "start_idx", ",", "end_idx", ")", "\n", "if", "self", ".", "policyRequresGroundTruth", "(", ")", ":", "\n", "            ", "self", ".", "policy", ".", "set_current_segment", "(", "start_idx", ",", "end_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setBuildTrainData": [[246, 249], ["None"], "methods", ["None"], ["", "", "def", "setBuildTrainData", "(", "self", ",", "should", ")", ":", "\n", "        ", "self", ".", "build_train_data", "=", "should", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldBuildTrainData": [[250, 252], ["None"], "methods", ["None"], ["", "def", "shouldBuildTrainData", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "build_train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.policyRequresGroundTruth": [[253, 257], ["isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "policyRequresGroundTruth", "(", "self", ")", ":", "\n", "        ", "return", "isinstance", "(", "self", ".", "policy", ",", "FancyCarrotPlanner", ")", "or", "isinstance", "(", "self", ".", "policy", ",", "SimpleCarrotPlanner", ")", "or", "isinstance", "(", "self", ".", "policy", ",", "BasicCarrotPlanner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldResetAlways": [[259, 261], ["None"], "methods", ["None"], ["", "def", "shouldResetAlways", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "segment_reset", "==", "\"always\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldResetIfFailed": [[262, 264], ["None"], "methods", ["None"], ["", "def", "shouldResetIfFailed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "segment_reset", "==", "\"if_failed\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldNeverReset": [[265, 267], ["None"], "methods", ["None"], ["", "def", "shouldNeverReset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "segment_reset", "==", "\"never\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.hasPolicy": [[268, 270], ["None"], "methods", ["None"], ["", "def", "hasPolicy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "use_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.getFlag": [[271, 273], ["None"], "methods", ["None"], ["", "def", "getFlag", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldIgnorePolicyStop": [[274, 276], ["None"], "methods", ["None"], ["", "def", "shouldIgnorePolicyStop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ignore_policy_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.getSaveSamplesPath": [[277, 283], ["data_io.get_rollout_samples_dir", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_samples_dir"], ["", "def", "getSaveSamplesPath", "(", "self", ",", "env_id", ",", "instruction_set_id", ",", "seg_idx", ",", "step_num", ")", ":", "\n", "        ", "image_data_path", "=", "paths", ".", "get_rollout_samples_dir", "(", ")", "\n", "folder", "=", "image_data_path", "+", "\"/\"", "+", "self", ".", "run_name", "+", "\"_\"", "+", "self", ".", "model_name", "+", "\"_env_\"", "+", "str", "(", "env_id", ")", "+", "\"_set_\"", "+", "str", "(", "instruction_set_id", ")", "+", "\"/\"", "\n", "filename", "=", "\"seg_\"", "+", "str", "(", "seg_idx", ")", "+", "\"_step_\"", "+", "str", "(", "step_num", ")", "\n", "return", "folder", "+", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.getSavePlotPath": [[284, 290], ["data_io.get_rollout_plots_dir", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_plots_dir"], ["", "def", "getSavePlotPath", "(", "self", ",", "env_id", ",", "instruction_set_id", ",", "seg_idx", ")", ":", "\n", "        ", "plot_data_path", "=", "paths", ".", "get_rollout_plots_dir", "(", ")", "\n", "filaname", "=", "plot_data_path", "+", "self", ".", "plot_dir", "+", "\"/\"", "\n", "filename", "=", "filaname", "+", "self", ".", "run_name", "+", "\"_\"", "+", "self", ".", "model_name", "+", "\"_env_\"", "+", "str", "(", "env_id", ")", "+", "\"_set_\"", "+", "str", "(", "instruction_set_id", ")", "+", "\"_seg_\"", "+", "str", "(", "seg_idx", ")", "\n", "return", "filename", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler_test.test_rollout_sampler": [[8, 37], ["data_io.models.load_model", "policy.get_policy_state", "rollout.simple_parallel_rollout.SimpleParallelPolicyRoller", "rollout.rollout_sampler.RolloutSampler", "print", "rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "print", "rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "print", "rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.__exit__", "print", "print", "print", "state.get_rgb_image", "Presenter().show_image", "Presenter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.get_policy_state", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.__exit__", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_rgb_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["def", "test_rollout_sampler", "(", ")", ":", "\n", "    ", "policy", ",", "_", "=", "load_model", "(", "\"pvn_full_bidomain\"", ")", "\n", "policy_state", "=", "policy", ".", "get_policy_state", "(", ")", "\n", "from", "visualization", "import", "Presenter", "\n", "\n", "#roller = SimplePolicyRoller(policy_factory)", "\n", "roller", "=", "SimpleParallelPolicyRoller", "(", "\"pvn_full_bidomain\"", ",", "num_workers", "=", "4", ")", "\n", "rollout_sampler", "=", "RolloutSampler", "(", "roller", ")", "\n", "\n", "# TODO: Load some policy", "\n", "print", "(", "\"Sampling once\"", ")", "\n", "rollouts", "=", "rollout_sampler", ".", "sample_n_rollouts", "(", "12", ",", "policy_state", ")", "\n", "\n", "print", "(", "\"Sampling twice\"", ")", "\n", "rollouts", "+=", "rollout_sampler", ".", "sample_n_rollouts", "(", "12", ",", "policy_state", ")", "\n", "\n", "print", "(", "\"Sampling thrice\"", ")", "\n", "rollouts", "+=", "rollout_sampler", ".", "sample_n_rollouts", "(", "12", ",", "policy_state", ")", "\n", "\n", "for", "rollout", "in", "rollouts", ":", "\n", "        ", "print", "(", "\"Visualizing rollout\"", ")", "\n", "for", "sample", "in", "rollout", ":", "\n", "            ", "state", "=", "sample", "[", "\"state\"", "]", "\n", "image", "=", "state", ".", "get_rgb_image", "(", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "image", ",", "\"fpv\"", ",", "waitkey", "=", "True", ",", "scale", "=", "4", ")", "\n", "", "print", "(", "\"Done!\"", ")", "\n", "\n", "", "roller", ".", "__exit__", "(", ")", "\n", "print", "(", "\"ding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.__init__": [[21, 28], ["visualization.Presenter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "instance_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "presenter", "=", "Presenter", "(", ")", "\n", "self", ".", "instance_id", "=", "instance_id", "\n", "self", ".", "env", "=", "None", "\n", "\n", "self", ".", "word2token", "=", "None", "\n", "self", ".", "all_instructions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.reset": [[29, 31], ["roll_out.PolicyRoller.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.load_all_envs": [[32, 38], ["data_io.instructions.get_all_instructions", "data_io.instructions.merge_instruction_sets", "data_io.instructions.get_word_to_token_map", "list", "data_io.instructions.merge_instruction_sets.keys"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.merge_instruction_sets", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map"], ["", "def", "load_all_envs", "(", "self", ")", ":", "\n", "        ", "train_i", ",", "dev_i", ",", "test_i", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "all_instructions", "=", "merge_instruction_sets", "(", "train_i", ",", "dev_i", ",", "test_i", ")", "\n", "token2term", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "env_ids", "=", "list", "(", "all_instructions", ".", "keys", "(", ")", ")", "\n", "return", "env_ids", ",", "all_instructions", ",", "corpus", ",", "token2term", ",", "word2token", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.tokenize_string": [[39, 43], ["filter", "list", "s.split", "map"], "methods", ["None"], ["", "def", "tokenize_string", "(", "self", ",", "s", ")", ":", "\n", "        ", "word_list", "=", "filter", "(", "None", ",", "s", ".", "split", "(", "\" \"", ")", ")", "\n", "token_instruction", "=", "list", "(", "map", "(", "lambda", "w", ":", "self", ".", "word2token", "[", "w", "]", ",", "word_list", ")", ")", "\n", "return", "token_instruction", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_on_segment": [[44, 46], ["None"], "methods", ["None"], ["", "def", "roll_out_on_segment", "(", "self", ",", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.choose_action": [[47, 72], ["random.uniform"], "methods", ["None"], ["", "def", "choose_action", "(", "self", ",", "params", ",", "step", ",", "switch_thres", ",", "reference_action", ",", "policy_action", ")", ":", "\n", "        ", "\"\"\"\n        Choose whether to perform the policy action or the reference (oracle) action based on the type of mixture\n        policy that is being executed\n        :param params: RolloutParams instance\n        :param step: current control step number\n        :param switch_thres: roll-in/roll-out control step number\n        :param reference_action: action executed by oracle\n        :param policy_action: action executed by policy\n        :return:\n        \"\"\"", "\n", "if", "params", ".", "rollout_strategy", "==", "RolloutStrategy", ".", "POLICY", ":", "\n", "            ", "return", "policy_action", "\n", "", "elif", "params", ".", "rollout_strategy", "==", "RolloutStrategy", ".", "REFERENCE", ":", "\n", "            ", "return", "reference_action", "\n", "", "elif", "params", ".", "rollout_strategy", "==", "RolloutStrategy", ".", "POLICY_IN_REF_OUT", ":", "\n", "            ", "if", "step", ">", "switch_thres", ":", "\n", "                ", "return", "reference_action", "\n", "", "else", ":", "\n", "                ", "return", "policy_action", "\n", "", "", "elif", "params", ".", "rollout_strategy", "==", "RolloutStrategy", ".", "MIXTURE", ":", "\n", "            ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "params", ".", "mixture_ref_prob", ":", "\n", "                ", "return", "reference_action", "\n", "", "else", ":", "\n", "                ", "return", "policy_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_on_env": [[73, 272], ["roll_out.PolicyRoller.env.set_environment", "data_io.env.load_and_convert_path", "params.initPolicyContext", "list", "params.policy.start_sequence", "len", "print", "roll_out.PolicyRoller.env.set_current_segment", "print", "hasattr", "roll_out.PolicyRoller.tokenize_string", "params.setCurrentSegment", "callable", "params.isSegmentLevel", "range", "print", "print", "params.policy.start_sequence", "random.uniform", "random.uniform", "print", "params.policy.start_segment_rollout", "params.shouldResetAlways", "roll_out.PolicyRoller.env.reset", "time.sleep", "params.ref_policy.get_action", "params.policy.get_action", "roll_out.PolicyRoller.choose_action", "roll_out.PolicyRoller.env.step", "segment_dataset.append", "getattr", "params.policy.on_rollout_end", "env_dataset.append", "roll_out.PolicyRoller.presenter.save_plot", "print", "len", "params.shouldResetIfFailed", "print", "print", "params.getFlag", "params.isSegmentLevel", "env_dataset.append", "roll_out.PolicyRoller.presenter.show_sample", "roll_out.PolicyRoller.presenter.plot_paths", "params.getSaveSamplesPath", "roll_out.PolicyRoller.presenter.save_sample", "roll_out.PolicyRoller.presenter.show_action", "roll_out.PolicyRoller.presenter.show_action", "print", "params.isSegmentLevel", "roll_out.PolicyRoller.presenter.plot_paths", "params.getSavePlotPath", "len", "len", "params.shouldIgnorePolicyStop", "roll_out.PolicyRoller.get_pos_2d", "print", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.set_environment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.initPolicyContext", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence", "home.repos.pwc.inspect_result.clic-lab_drif.reward.path_reward.FollowPathReward.set_current_segment", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.tokenize_string", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.setCurrentSegment", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isSegmentLevel", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.start_segment_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldResetAlways", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.choose_action", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_plot", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldResetIfFailed", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.getFlag", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isSegmentLevel", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_sample", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_paths", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.getSaveSamplesPath", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_sample", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_action", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_action", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isSegmentLevel", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_paths", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.getSavePlotPath", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.shouldIgnorePolicyStop", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d"], ["", "", "", "def", "roll_out_on_env", "(", "self", ",", "params", ",", "instructions_set", ",", "set_idx", ",", "only_seg_idx", "=", "None", ",", "custom_instr", "=", "None", ")", ":", "\n", "\n", "        ", "env_dataset", "=", "[", "]", "\n", "failed", "=", "False", "\n", "\n", "env_id", "=", "instructions_set", "[", "\"env\"", "]", "\n", "self", ".", "env", ".", "set_environment", "(", "env_id", ",", "instruction_set", "=", "instructions_set", "[", "'instructions'", "]", ")", "\n", "path", "=", "load_and_convert_path", "(", "env_id", ")", "\n", "params", ".", "initPolicyContext", "(", "env_id", ",", "path", ")", "\n", "\n", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "segments", "=", "list", "(", "instructions_set", "[", "'instructions'", "]", ")", "\n", "\n", "# all segments with at least length 2", "\n", "valid_segments", "=", "[", "(", "segments", "[", "i", "]", ",", "segments", "[", "i", "]", "[", "\"seg_idx\"", "]", ")", "for", "i", "in", "range", "(", "len", "(", "segments", ")", ")", "if", "segments", "[", "i", "]", "[", "\"end_idx\"", "]", "-", "segments", "[", "i", "]", "[", "\"start_idx\"", "]", ">=", "2", "]", "\n", "\n", "if", "len", "(", "valid_segments", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Ding dong!\"", ")", "\n", "\n", "", "first_seg", "=", "True", "\n", "\n", "# For recurrent policy, we need to explicity start a segment and reset the LSTM state", "\n", "# TODO: Make sure this still works for the older non-NL model", "\n", "params", ".", "policy", ".", "start_sequence", "(", ")", "\n", "\n", "for", "segment", ",", "seg_idx", "in", "valid_segments", ":", "\n", "            ", "if", "only_seg_idx", "is", "not", "None", "and", "seg_idx", "!=", "only_seg_idx", ":", "\n", "                ", "print", "(", "\"Skipping seg: \"", "+", "str", "(", "seg_idx", ")", "+", "\" as not requested\"", ")", "\n", "continue", "\n", "\n", "", "valid_segment", "=", "self", ".", "env", ".", "set_current_segment", "(", "seg_idx", ")", "\n", "if", "not", "valid_segment", ":", "\n", "                ", "print", "(", "f\"Skipping segment {seg_idx} as it is empty / invalid for env {env_id}\"", ")", "\n", "continue", "\n", "\n", "", "if", "params", ".", "segment_level", ":", "\n", "                ", "params", ".", "policy", ".", "start_sequence", "(", ")", "\n", "\n", "", "segment_dataset", "=", "[", "]", "\n", "\n", "# Decide when to switch policies", "\n", "switch_threshold", "=", "params", ".", "horizon", "+", "1", "# Never switch policies by default", "\n", "do_switch", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "params", ".", "switch_prob", "\n", "if", "do_switch", "and", "params", ".", "threshold_strategy", "==", "SwitchThresholdStrategy", ".", "UNIFORM", ":", "\n", "                ", "switch_threshold", "=", "random", ".", "uniform", "(", "0", ",", "params", ".", "horizon", ")", "\n", "\n", "", "string_instruction", ",", "end_idx", ",", "start_idx", "=", "segment", "[", "\"instruction\"", "]", ",", "segment", "[", "\"end_idx\"", "]", ",", "segment", "[", "\"start_idx\"", "]", "\n", "\n", "# Manual instruction override to allow rolling out arbitrary instructions for debugging", "\n", "if", "custom_instr", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"REPLACED: \"", ",", "string_instruction", ")", "\n", "string_instruction", "=", "custom_instr", "\n", "", "print", "(", "\"INSTRUCTION:\"", ",", "string_instruction", ")", "\n", "\n", "# Set some global parameters that can be accessed by other parts of the system", "\n", "md", ".", "IS_ROLLOUT", "=", "True", "\n", "md", ".", "REAL_DRONE", "=", "params", ".", "real_drone", "\n", "md", ".", "RUN_NAME", "=", "params", ".", "run_name", "\n", "md", ".", "ENV_ID", "=", "env_id", "\n", "md", ".", "SET_IDX", "=", "set_idx", "\n", "md", ".", "SEG_IDX", "=", "seg_idx", "\n", "md", ".", "START_IDX", "=", "start_idx", "\n", "md", ".", "END_IDX", "=", "end_idx", "\n", "md", ".", "INSTRUCTION", "=", "string_instruction", "\n", "\n", "if", "hasattr", "(", "params", ".", "policy", ",", "\"start_segment_rollout\"", ")", ":", "\n", "                ", "params", ".", "policy", ".", "start_segment_rollout", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "\n", "", "token_instruction", "=", "self", ".", "tokenize_string", "(", "string_instruction", ")", "\n", "\n", "# At the end of segment N, should we reset drone position to the start of segment N+1 or continue", "\n", "# rolling out seamlessly?", "\n", "if", "first_seg", "or", "params", ".", "shouldResetAlways", "(", ")", "or", "(", "failed", "and", "params", ".", "shouldResetIfFailed", "(", ")", ")", ":", "\n", "                ", "state", "=", "self", ".", "env", ".", "reset", "(", "seg_idx", ")", "\n", "#instr_str = debug_untokenize_instruction(instruction)", "\n", "#Presenter().show_instruction(string_instruction.replace(\"  \", \" \"))", "\n", "failed", "=", "False", "\n", "first_seg", "=", "False", "\n", "sleep", "(", "sleepytime", ")", "\n", "\n", "# Tell the oracle which part of the path is currently being executed", "\n", "", "params", ".", "setCurrentSegment", "(", "start_idx", ",", "end_idx", ")", "\n", "\n", "step_num", "=", "0", "\n", "total_reward", "=", "0", "\n", "# If the path has been finished according to the oracle, allow rolling out STEPS_TO_KILL more steps", "\n", "# If we finish the segment, but don't stop, log the position at which we finish the segment", "\n", "oracle_finished_countdown", "=", "params", ".", "steps_to_kill", "\n", "\n", "# Finally the actual policy roll out on the path segment!", "\n", "while", "True", ":", "\n", "\n", "# Get oracle action (labels)", "\n", "                ", "ref_action", ",", "_", "=", "params", ".", "ref_policy", ".", "get_action", "(", "state", ",", "token_instruction", ")", "\n", "\n", "if", "ref_action", "is", "None", "or", "step_num", "==", "params", ".", "horizon", ":", "\n", "                    ", "failed", "=", "True", "# Either veered off too far, or ran out of time. Either way, we consider it a fail", "\n", "print", "(", "\"Failed segment\"", ")", "\n", "break", "\n", "\n", "# Get the policy action (actions to be rolled out)", "\n", "", "action", ",", "_", "=", "params", ".", "policy", ".", "get_action", "(", "state", ",", "token_instruction", ")", "#, env_id=env_id)", "\n", "\n", "if", "action", "is", "None", ":", "\n", "                    ", "print", "(", "\"POLICY PRODUCED None ACTION\"", ")", "\n", "break", "\n", "\n", "# Choose which action to execute (reference or policy) based on the selected procedure", "\n", "", "exec_action", "=", "self", ".", "choose_action", "(", "params", ",", "step_num", ",", "switch_threshold", ",", "ref_action", ",", "action", ")", "\n", "\n", "# action = [vel_x, vel_y, vel_yaw] vel_y is unused currently. Execute the action in the pomdp", "\n", "state", ",", "reward", ",", "done", ",", "exceeded", ",", "oob", "=", "self", ".", "env", ".", "step", "(", "exec_action", ")", "\n", "\n", "total_reward", "+=", "reward", "\n", "\n", "# Collect the data into a dataset", "\n", "sample", "=", "{", "\n", "\"instruction\"", ":", "string_instruction", ",", "\n", "\"state\"", ":", "state", ",", "\n", "\"ref_action\"", ":", "ref_action", ",", "\n", "\"reward\"", ":", "reward", ",", "\n", "\"done\"", ":", "done", ",", "\n", "#\"metadata\": {", "\n", "\"seg_path\"", ":", "path", "[", "start_idx", ":", "end_idx", "+", "1", "]", ",", "\n", "\"path\"", ":", "path", ",", "\n", "\"env_id\"", ":", "env_id", ",", "\n", "\"set_idx\"", ":", "set_idx", ",", "\n", "\"seg_idx\"", ":", "seg_idx", ",", "\n", "\"start_idx\"", ":", "start_idx", ",", "\n", "\"end_idx\"", ":", "end_idx", ",", "\n", "\"action\"", ":", "exec_action", ",", "\n", "\"pol_action\"", ":", "action", ",", "\n", "#\"ref_action\": ref_action,", "\n", "#\"instruction\": string_instruction,", "\n", "\"flag\"", ":", "params", ".", "getFlag", "(", ")", "\n", "#}", "\n", "}", "\n", "\n", "segment_dataset", ".", "append", "(", "sample", ")", "\n", "if", "not", "params", ".", "isSegmentLevel", "(", ")", ":", "\n", "                    ", "env_dataset", ".", "append", "(", "sample", ")", "\n", "\n", "# Do visual feedback and logging", "\n", "", "if", "params", ".", "first_person", ":", "\n", "                    ", "self", ".", "presenter", ".", "show_sample", "(", "state", ",", "exec_action", ",", "reward", ",", "string_instruction", ")", "\n", "", "if", "params", ".", "plot", ":", "\n", "                    ", "self", ".", "presenter", ".", "plot_paths", "(", "segment_dataset", ",", "interactive", "=", "True", ")", "\n", "", "if", "params", ".", "save_samples", ":", "\n", "                    ", "file_path", "=", "params", ".", "getSaveSamplesPath", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "step_num", ")", "\n", "self", ".", "presenter", ".", "save_sample", "(", "file_path", ",", "state", ",", "exec_action", ",", "reward", ",", "string_instruction", ")", "\n", "", "if", "params", ".", "show_action", ":", "\n", "                    ", "self", ".", "presenter", ".", "show_action", "(", "ref_action", ",", "\"ref_action\"", ")", "\n", "self", ".", "presenter", ".", "show_action", "(", "exec_action", ",", "\"exec_action\"", ")", "\n", "\n", "# If the policy is finished, we stop. Otherwise the oracle should just keep outputing", "\n", "# examples that say that the policy should output finished at this point", "\n", "", "if", "exec_action", "[", "3", "]", ">", "0.5", "and", "not", "params", ".", "shouldIgnorePolicyStop", "(", ")", ":", "\n", "                    ", "print", "(", "\"Policy stop!\"", ")", "\n", "break", "\n", "# If oracle says we're finished, allow a number of steps before terminating.", "\n", "", "if", "ref_action", "[", "3", "]", ">", "0.5", ":", "\n", "                    ", "if", "oracle_finished_countdown", "==", "params", ".", "steps_to_kill", ":", "\n", "                        ", "drone_pos_force_stop", "=", "state", ".", "get_pos_2d", "(", ")", "\n", "", "oracle_finished_countdown", "-=", "1", "\n", "if", "oracle_finished_countdown", "==", "0", ":", "\n", "                        ", "print", "(", "\"Oracle forced stop!\"", ")", "\n", "break", "\n", "", "", "step_num", "+=", "1", "\n", "\n", "# Call the rollout end callback, so that the model can save any debugging information, such as feature maps", "\n", "", "if", "callable", "(", "getattr", "(", "params", ".", "policy", ",", "\"on_rollout_end\"", ",", "None", ")", ")", ":", "\n", "                ", "params", ".", "policy", ".", "on_rollout_end", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "\n", "", "if", "params", ".", "isSegmentLevel", "(", ")", ":", "\n", "                ", "env_dataset", ".", "append", "(", "segment_dataset", ")", "\n", "\n", "# Plot the trajectories for error tracking", "\n", "# TODO: Plot entire envs not segment by segment", "\n", "", "if", "params", ".", "save_plots", ":", "\n", "                ", "if", "not", "params", ".", "isSegmentLevel", "(", ")", ":", "\n", "                    ", "self", ".", "presenter", ".", "plot_paths", "(", "env_dataset", ",", "segment_path", "=", "path", "[", "start_idx", ":", "end_idx", "+", "1", "]", ",", "interactive", "=", "False", ",", "bg", "=", "True", ",", "world_size", "=", "4.7", ")", "\n", "", "self", ".", "presenter", ".", "save_plot", "(", "params", ".", "getSavePlotPath", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", ")", "\n", "\n", "# Calculate end of segment error", "\n", "", "if", "end_idx", ">", "len", "(", "path", ")", "-", "1", ":", "\n", "                ", "end_idx", "=", "len", "(", "path", ")", "-", "1", "\n", "\n", "# The reward is proportional to path length. Weigh it down, so that max reward is 1:", "\n", "", "seg_len", "=", "end_idx", "-", "start_idx", "\n", "#self.error_tracker.add_sample(not failed, drone_pos_force_stop, state.get_pos(), path[end_idx],", "\n", "#                              path[end_idx - 1], total_reward, seg_len)", "\n", "\n", "if", "params", ".", "first_segment_only", ":", "\n", "                ", "print", "(", "\"Only running the first segment\"", ")", "\n", "break", "\n", "\n", "#sleep(sleepytime)", "\n", "\n", "", "", "return", "env_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_policy": [[273, 351], ["params.isDebug", "roll_out.PolicyRoller.env.land", "params.loadPolicy", "params.hasPolicy", "pomdp.pomdp_interface.PomdpInterface", "roll_out.PolicyRoller.load_all_envs", "enumerate", "enumerate", "print_error", "print_error", "print_error", "len", "print", "traceback.format_exc", "dataset.append", "learning.modules.dbg_writer.DebugWriter().commit", "params.isRealDrone", "len", "str", "roll_out.PolicyRoller.roll_out_on_env", "print_error", "print_error", "print_error", "learning.modules.dbg_writer.DebugWriter", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isDebug", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.land", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.loadPolicy", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.hasPolicy", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.load_all_envs", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.commit", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out_params.RollOutParams.isRealDrone", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.roll_out.PolicyRoller.roll_out_on_env", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error"], ["", "def", "roll_out_policy", "(", "self", ",", "params", ")", ":", "\n", "        ", "\"\"\"\n        Given the provided rollout parameters, spawn a simulator instance and execute the specified policy on all\n        environments specified in params.setEnvIds.\n\n        Awful function that really needs to be simplified.\n        A lot of the code is simply checking various error conditions, because the data has issues, and logging the outcome.\n        The actual rollout is a very small part of the code.\n        :param params: RollOutParams instance defining the parameters of the rollout\n        :return: Aggregated dataset with images, states and oracle actions.\n        If params.isSegmentLevel(), the returned dataset will be a list (over environments) of samples\n        otherwise it will be a list (over environments) of lists (over segments) of samples\n        \"\"\"", "\n", "\n", "if", "params", ".", "isDebug", "(", ")", ":", "\n", "            ", "run_metadata", ".", "WRITE_DEBUG_DATA", "=", "True", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "try", ":", "\n", "# Load the neural network policy from file", "\n", "# We can't just pass a neural network into this function, because it can't be pickled", "\n", "            ", "params", ".", "loadPolicy", "(", ")", "\n", "assert", "params", ".", "hasPolicy", "(", ")", "\n", "\n", "self", ".", "env", "=", "PomdpInterface", "(", "instance_id", "=", "self", ".", "instance_id", ",", "is_real", "=", "params", ".", "real_drone", ")", "\n", "\n", "all_env_ids", ",", "all_instructions", ",", "corpus", ",", "token2term", ",", "self", ".", "word2token", "=", "self", ".", "load_all_envs", "(", ")", "\n", "env_ids", "=", "params", ".", "envs", "# if params.envs is not None else all_env_ids", "\n", "seg_indices", "=", "params", ".", "seg_list", "\n", "custom_instructions", "=", "params", ".", "custom_instructions", "\n", "\n", "# Filter out the envs that are not in all_instructions (we don't have instructions available for them)", "\n", "valid_env_ids", "=", "[", "i", "for", "i", "in", "env_ids", "if", "i", "in", "all_instructions", "]", "\n", "\n", "count", "=", "0", "\n", "\n", "# Loop through environments", "\n", "for", "i", ",", "env_id", "in", "enumerate", "(", "valid_env_ids", ")", ":", "\n", "#print (\"Rolling out on env: \" + str(env_id))", "\n", "# Loop through all non-empty sets of instructions for each pomdp", "\n", "                ", "instruction_sets", "=", "[", "s", "for", "s", "in", "all_instructions", "[", "env_id", "]", "if", "len", "(", "s", ")", ">", "0", "]", "\n", "\n", "if", "len", "(", "instruction_sets", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\"No instruction sets for env: \"", "+", "str", "(", "env_id", ")", ")", "\n", "\n", "", "for", "j", ",", "instructions_set", "in", "enumerate", "(", "instruction_sets", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "try", ":", "\n", "                        ", "seg_id", "=", "seg_indices", "[", "i", "]", "if", "seg_indices", "is", "not", "None", "else", "None", "\n", "custom_instr", "=", "custom_instructions", "[", "i", "]", "if", "custom_instructions", "is", "not", "None", "else", "None", "\n", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "md", ".", "CUSTOM_INSTR_NO", "=", "i", "\n", "# TODO: Check if this works!", "\n", "dataset", ".", "append", "(", "self", ".", "roll_out_on_env", "(", "params", ",", "instructions_set", ",", "j", ",", "seg_id", ",", "custom_instr", ")", ")", "\n", "#log(\"Path finished!\")", "\n", "DebugWriter", "(", ")", ".", "commit", "(", ")", "\n", "\n", "if", "params", ".", "isRealDrone", "(", ")", ":", "\n", "                            ", "break", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "import", "traceback", "\n", "from", "utils", ".", "colors", "import", "print_error", "\n", "print_error", "(", "\"Error encountered during policy rollout!\"", ")", "\n", "print_error", "(", "e", ")", "\n", "print_error", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "continue", "\n", "\n", "", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "import", "traceback", "\n", "from", "utils", ".", "colors", "import", "print_error", "\n", "print_error", "(", "\"Error encountered during policy rollout!\"", ")", "\n", "print_error", "(", "e", ")", "\n", "print_error", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n", "", "self", ".", "env", ".", "land", "(", ")", "\n", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.__init__": [[11, 21], ["data_io.instructions.get_all_instructions", "data_io.instructions.get_restricted_env_id_lists", "data_io.instructions.get_word_to_token_map", "[].get", "rollout_sampler.RolloutSampler._init_env_and_seg_ids", "rollout_sampler.RolloutSampler._init_env_and_seg_ids", "rollout_sampler.RolloutSampler.train_i.items", "rollout_sampler.RolloutSampler.dev_i.items", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler._init_env_and_seg_ids", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler._init_env_and_seg_ids", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "simple_roller", ")", ":", "\n", "        ", "self", ".", "roller", "=", "simple_roller", "\n", "self", ".", "train_i", ",", "self", ".", "dev_i", ",", "test_i", ",", "self", ".", "corpus", "=", "get_all_instructions", "(", ")", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "self", ".", "train_i", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "train_i", ".", "items", "(", ")", "if", "k", "in", "train_envs", "}", "\n", "self", ".", "dev_i", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "dev_i", ".", "items", "(", ")", "if", "k", "in", "dev_envs", "}", "\n", "self", ".", "token2term", ",", "self", ".", "word2token", "=", "get_word_to_token_map", "(", "self", ".", "corpus", ")", "\n", "self", ".", "only_seg_0", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"seg_0_only\"", ",", "False", ")", "\n", "self", ".", "train_env_and_seg_ids", "=", "self", ".", "_init_env_and_seg_ids", "(", "self", ".", "train_i", ")", "\n", "self", ".", "dev_env_and_seg_ids", "=", "self", ".", "_init_env_and_seg_ids", "(", "self", ".", "dev_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler._init_env_and_seg_ids": [[22, 42], ["instructions.items", "print", "enumerate", "len", "ids.append", "ids.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "_init_env_and_seg_ids", "(", "self", ",", "instructions", ")", ":", "\n", "        ", "ids", "=", "[", "]", "\n", "num_invalid", "=", "0", "\n", "for", "k", ",", "instr_sets", "in", "instructions", ".", "items", "(", ")", ":", "\n", "            ", "instr_set", "=", "instr_sets", "[", "0", "]", "\n", "env_id", "=", "instr_set", "[", "\"env\"", "]", "\n", "for", "i", ",", "instr", "in", "enumerate", "(", "instr_set", "[", "\"instructions\"", "]", ")", ":", "\n", "                ", "valid_segment", "=", "True", "\n", "if", "instr", "[", "\"end_idx\"", "]", "-", "instr", "[", "\"start_idx\"", "]", "<", "2", ":", "\n", "                    ", "valid_segment", "=", "False", "\n", "", "if", "valid_segment", ":", "\n", "                    ", "if", "self", ".", "only_seg_0", ":", "\n", "                        ", "ids", ".", "append", "(", "[", "env_id", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "ids", ".", "append", "(", "[", "env_id", ",", "instr", "[", "\"seg_idx\"", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "num_invalid", "+=", "1", "\n", "\n", "", "", "", "print", "(", "f\"Counted {num_invalid} invalid segments and {len(ids)} valid ones\"", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.update_stage1_on_workers": [[43, 45], ["rollout_sampler.RolloutSampler.roller.update_stage1_on_workers"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.update_stage1_on_workers"], ["", "def", "update_stage1_on_workers", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "roller", ".", "update_stage1_on_workers", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.sample_n_rollouts": [[46, 63], ["random.sample", "tuple", "rollout_sampler.RolloutSampler.roller.rollout_segments", "len", "zip", "ValueError", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.simple_parallel_rollout.SimpleParallelPolicyRoller.rollout_segments"], ["", "def", "sample_n_rollouts", "(", "self", ",", "n", ",", "policy_state", ",", "sample", "=", "True", ",", "envs", "=", "\"train\"", ",", "dagger_beta", "=", "0", ")", ":", "\n", "        ", "if", "n", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "if", "envs", "==", "\"train\"", ":", "\n", "            ", "use_envs", "=", "self", ".", "train_env_and_seg_ids", "\n", "", "elif", "envs", "==", "\"dev\"", ":", "\n", "            ", "use_envs", "=", "self", ".", "dev_env_and_seg_ids", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unrecognized envs: {envs}\"", ")", "\n", "\n", "", "if", "len", "(", "use_envs", ")", "<", "n", ":", "\n", "            ", "use_envs", "=", "use_envs", "*", "int", "(", "(", "n", "+", "len", "(", "use_envs", ")", "-", "1", ")", "/", "len", "(", "use_envs", ")", ")", "\n", "\n", "", "pick_env_and_seg_ids", "=", "random", ".", "sample", "(", "use_envs", ",", "n", ")", "\n", "env_ids", ",", "seg_ids", "=", "tuple", "(", "zip", "(", "*", "pick_env_and_seg_ids", ")", ")", "\n", "return", "self", ".", "roller", ".", "rollout_segments", "(", "env_ids", ",", "seg_ids", ",", "policy_state", ",", "sample", ",", "dagger_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.__init__": [[15, 17], ["units.UnrealUnits.get_scale"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "get_scale", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_scale": [[18, 20], ["parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_scale", "(", "self", ")", ":", "\n", "        ", "return", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"scale\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_scale": [[21, 23], ["numpy.asarray", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_config_scale", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"config_scale\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_size": [[24, 26], ["numpy.asarray", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_config_size", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"config_size\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_origin": [[27, 29], ["numpy.asarray", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_config_origin", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"config_origin\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_size": [[30, 32], ["numpy.asarray", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_env_size", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"env_size\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_origin": [[33, 35], ["numpy.asarray", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_env_origin", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"env_origin\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_to_ue": [[37, 43], ["numpy.asarray", "units.UnrealUnits.get_config_scale", "units.UnrealUnits.get_config_size", "units.UnrealUnits.get_env_origin", "units.UnrealUnits.get_config_origin", "units.UnrealUnits.get_env_size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_scale", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_size", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_origin", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_origin", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_size"], ["", "def", "pos3d_to_ue", "(", "self", ",", "point", ")", ":", "\n", "        ", "point", "=", "np", ".", "asarray", "(", "point", ")", "\n", "normalizing_factor", "=", "self", ".", "get_config_scale", "(", ")", "/", "self", ".", "get_config_size", "(", ")", "\n", "point_normalized", "=", "(", "point", "-", "self", ".", "get_config_origin", "(", ")", ")", "*", "normalizing_factor", "\n", "point_ue", "=", "(", "point_normalized", "*", "self", ".", "get_env_size", "(", ")", ")", "+", "self", ".", "get_env_origin", "(", ")", "\n", "return", "point_ue", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_from_ue": [[44, 49], ["numpy.asarray", "units.UnrealUnits.get_env_size", "units.UnrealUnits.get_config_origin", "units.UnrealUnits.get_env_origin", "units.UnrealUnits.get_config_size", "units.UnrealUnits.get_config_scale"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_size", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_origin", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_origin", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_size", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_scale"], ["", "def", "pos3d_from_ue", "(", "self", ",", "point_ue", ")", ":", "\n", "        ", "point_ue", "=", "np", ".", "asarray", "(", "point_ue", ")", "\n", "point_normalized", "=", "(", "point_ue", "/", "self", ".", "scale", "-", "self", ".", "get_env_origin", "(", ")", ")", "/", "self", ".", "get_env_size", "(", ")", "\n", "point_config", "=", "point_normalized", "*", "(", "self", ".", "get_config_size", "(", ")", "/", "self", ".", "get_config_scale", "(", ")", ")", "+", "self", ".", "get_config_origin", "(", ")", "\n", "return", "point_config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_to_ue": [[50, 55], ["numpy.asarray", "units.UnrealUnits.get_config_size", "units.UnrealUnits.get_env_size", "units.UnrealUnits.get_config_scale"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_size", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_size", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_scale"], ["", "def", "vel3d_to_ue", "(", "self", ",", "vel", ")", ":", "\n", "        ", "vel", "=", "np", ".", "asarray", "(", "vel", ")", "\n", "vel_normalized", "=", "vel", "*", "self", ".", "get_config_scale", "(", ")", "/", "self", ".", "get_config_size", "(", ")", "\n", "vel_ue", "=", "vel_normalized", "*", "self", ".", "get_env_size", "(", ")", "\n", "return", "vel_ue", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_from_ue": [[56, 61], ["numpy.asarray", "units.UnrealUnits.get_config_scale", "units.UnrealUnits.get_env_size", "units.UnrealUnits.get_config_size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_scale", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_env_size", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.get_config_size"], ["", "def", "vel3d_from_ue", "(", "self", ",", "vel_ue", ")", ":", "\n", "        ", "vel_ue", "=", "np", ".", "asarray", "(", "vel_ue", ")", "\n", "vel_normalized", "=", "vel_ue", "/", "(", "self", ".", "scale", "*", "self", ".", "get_env_size", "(", ")", ")", "\n", "vel_config", "=", "vel_normalized", "*", "self", ".", "get_config_size", "(", ")", "/", "self", ".", "get_config_scale", "(", ")", "\n", "return", "vel_config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_ue": [[64, 69], ["numpy.zeros", "units.UnrealUnits.pos3d_to_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_to_ue"], ["", "def", "pos2d_to_ue", "(", "self", ",", "point", ")", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "3", ")", "\n", "temp", "[", "0", ":", "2", "]", "=", "point", "\n", "res", "=", "self", ".", "pos3d_to_ue", "(", "temp", ")", "[", ":", "2", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_from_ue": [[70, 74], ["numpy.zeros", "units.UnrealUnits.pos3d_from_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_from_ue"], ["", "def", "pos2d_from_ue", "(", "self", ",", "point", ")", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "3", ")", "\n", "temp", "[", "0", ":", "2", "]", "=", "point", "\n", "return", "self", ".", "pos3d_from_ue", "(", "temp", ")", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_to_ue": [[75, 79], ["numpy.zeros", "units.UnrealUnits.vel3d_to_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_to_ue"], ["", "def", "vel2d_to_ue", "(", "self", ",", "point", ")", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "3", ")", "\n", "temp", "[", "0", ":", "2", "]", "=", "point", "\n", "return", "self", ".", "vel3d_to_ue", "(", "temp", ")", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_from_ue": [[80, 84], ["numpy.zeros", "units.UnrealUnits.vel3d_from_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_from_ue"], ["", "def", "vel2d_from_ue", "(", "self", ",", "point", ")", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "3", ")", "\n", "temp", "[", "0", ":", "2", "]", "=", "point", "\n", "return", "self", ".", "vel3d_from_ue", "(", "temp", ")", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_to_as": [[87, 89], ["units.UnrealUnits.pos3d_to_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_to_ue"], ["", "def", "pos3d_to_as", "(", "self", ",", "point", ")", ":", "\n", "        ", "return", "self", ".", "pos3d_to_ue", "(", "point", ")", "/", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_from_as": [[90, 93], ["numpy.asarray", "units.UnrealUnits.pos3d_from_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_from_ue"], ["", "def", "pos3d_from_as", "(", "self", ",", "point", ")", ":", "\n", "        ", "point", "=", "np", ".", "asarray", "(", "point", ")", "\n", "return", "self", ".", "pos3d_from_ue", "(", "point", "*", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as": [[94, 97], ["units.UnrealUnits.pos2d_to_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_ue"], ["", "def", "pos2d_to_as", "(", "self", ",", "point", ")", ":", "\n", "# TODO: Double check if this is correct. It seems that UE4 x-axis might be AirSim's y axis.", "\n", "        ", "return", "self", ".", "pos2d_to_ue", "(", "point", ")", "/", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_from_as": [[98, 101], ["numpy.asarray", "units.UnrealUnits.pos2d_from_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_from_ue"], ["", "def", "pos2d_from_as", "(", "self", ",", "point", ")", ":", "\n", "        ", "point", "=", "np", ".", "asarray", "(", "point", ")", "\n", "return", "self", ".", "pos2d_from_ue", "(", "point", "*", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_to_as": [[104, 106], ["units.UnrealUnits.vel3d_to_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_to_ue"], ["", "def", "vel3d_to_as", "(", "self", ",", "point", ")", ":", "\n", "        ", "return", "self", ".", "vel3d_to_ue", "(", "point", ")", "/", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_from_as": [[107, 110], ["numpy.asarray", "units.UnrealUnits.vel3d_from_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_from_ue"], ["", "def", "vel3d_from_as", "(", "self", ",", "point", ")", ":", "\n", "        ", "point", "=", "np", ".", "asarray", "(", "point", ")", "\n", "return", "self", ".", "vel3d_from_ue", "(", "point", "*", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_to_as": [[111, 113], ["units.UnrealUnits.vel2d_to_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_to_ue"], ["", "def", "vel2d_to_as", "(", "self", ",", "point", ")", ":", "\n", "        ", "return", "self", ".", "vel2d_to_ue", "(", "point", ")", "/", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_from_as": [[114, 117], ["numpy.asarray", "units.UnrealUnits.vel2d_from_ue"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_from_ue"], ["", "def", "vel2d_from_as", "(", "self", ",", "point", ")", ":", "\n", "        ", "point", "=", "np", ".", "asarray", "(", "point", ")", "\n", "return", "self", ".", "vel2d_from_ue", "(", "point", "*", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.yaw_rate_to_as": [[119, 121], ["None"], "methods", ["None"], ["", "def", "yaw_rate_to_as", "(", "self", ",", "yaw_rate", ")", ":", "\n", "        ", "return", "-", "yaw_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.yaw_to_as": [[122, 127], ["numpy.asarray", "units.UnrealUnits.vel2d_to_as", "math.atan2", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_to_as"], ["", "def", "yaw_to_as", "(", "self", ",", "yaw", ")", ":", "\n", "        ", "tmp_vec", "=", "np", ".", "asarray", "(", "[", "math", ".", "cos", "(", "yaw", ")", ",", "math", ".", "sin", "(", "yaw", ")", "]", ")", "\n", "as_vec", "=", "self", ".", "vel2d_to_as", "(", "tmp_vec", ")", "\n", "as_yaw", "=", "math", ".", "atan2", "(", "as_vec", "[", "1", "]", ",", "as_vec", "[", "0", "]", ")", "\n", "return", "as_yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.yaw_from_as": [[128, 133], ["numpy.asarray", "units.UnrealUnits.vel2d_from_as", "math.atan2", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel2d_from_as"], ["", "def", "yaw_from_as", "(", "self", ",", "yaw", ")", ":", "\n", "        ", "tmp_vec", "=", "np", ".", "asarray", "(", "[", "math", ".", "cos", "(", "yaw", ")", ",", "math", ".", "sin", "(", "yaw", ")", "]", ")", "\n", "config_vec", "=", "self", ".", "vel2d_from_as", "(", "tmp_vec", ")", "\n", "config_yaw", "=", "math", ".", "atan2", "(", "config_vec", "[", "1", "]", ",", "config_vec", "[", "0", "]", ")", "\n", "return", "config_yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.euler_from_as": [[134, 139], ["transforms3d.euler.euler2axangle", "units.UnrealUnits.vel3d_from_as", "transforms3d.euler.axangle2euler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.vel3d_from_as"], ["", "def", "euler_from_as", "(", "self", ",", "roll", ",", "pitch", ",", "yaw", ")", ":", "\n", "        ", "rot_vec_as", ",", "theta", "=", "euler", ".", "euler2axangle", "(", "roll", ",", "pitch", ",", "yaw", ")", "\n", "rot_vec", "=", "self", ".", "vel3d_from_as", "(", "rot_vec_as", ")", "\n", "r", ",", "p", ",", "y", "=", "euler", ".", "axangle2euler", "(", "rot_vec", ",", "theta", ")", "\n", "return", "r", ",", "p", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.height_to_as": [[141, 143], ["units.UnrealUnits.pos3d_to_as"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_to_as"], ["", "def", "height_to_as", "(", "self", ",", "height", ")", ":", "\n", "        ", "return", "self", ".", "pos3d_to_as", "(", "[", "0", ",", "0", ",", "height", "]", ")", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.height_from_as": [[144, 146], ["units.UnrealUnits.pos3d_from_as"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_from_as"], ["", "def", "height_from_as", "(", "self", ",", "height", ")", ":", "\n", "        ", "return", "self", ".", "pos3d_from_as", "(", "[", "0", ",", "0", ",", "height", "]", ")", "[", "2", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model": [[33, 209], ["parameters.get_current_parameters", "setup.get", "setup.get", "learning.utils.get_n_params", "learning.utils.get_n_trainable_params", "print", "print", "print", "learning.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.init_weights", "learning.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.eval", "parameters.parameter_server.get_current_parameters", "policies.simple_carrot_planner.SimpleCarrotPlanner", "print", "policies.baseline_average.BaselineAverage", "data_io.model_io.load_pytorch_model", "print", "learning.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.cuda", "policies.basic_carrot_planner.BasicCarrotPlanner", "print", "policies.stop.BaselineStop", "str", "str", "policies.fancy_carrot_planner.FancyCarrotPlanner", "print", "print", "exit", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_gs_fpv_mem.ModelGSFPV", "learning.models.model_gs_fpv_mem.ModelGSFPV", "learning.models.model_sm_rss_global.ModelTrajectoryTopDown", "learning.models.model_gsmn_bidomain.ModelGSMNBiDomain", "learning.models.model_gsmn_critic.ModelGsmnCritic", "learning.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown", "learning.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown", "learning.models.model_sm_action_gt.ModelTrajectoryToAction", "learning.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown", "learning.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown", "learning.models.model_sm_action_gt.ModelTrajectoryToAction", "learning.models.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor", "learning.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original", "learning.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain", "learning.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain", "learning.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic", "learning.models.model_pvn_stage1_critic.PVN_Stage1_Critic", "learning.models.model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big", "learning.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain", "learning.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["def", "load_model", "(", "model_name_override", "=", "False", ",", "model_file_override", "=", "None", ",", "domain", "=", "\"sim\"", ")", ":", "\n", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "model_name", "=", "model_name_override", "or", "setup", "[", "\"model\"", "]", "\n", "model_file", "=", "model_file_override", "or", "setup", "[", "\"model_file\"", "]", "or", "None", "\n", "# TODO: Move this stuff elsewhere and tidy up the model", "\n", "perception_model_file", "=", "setup", ".", "get", "(", "\"perception_model_file\"", ")", "or", "None", "\n", "perception_model_real", "=", "setup", ".", "get", "(", "\"perception_model_real\"", ")", "or", "None", "\n", "cuda", "=", "setup", "[", "\"cuda\"", "]", "\n", "run_name", "=", "setup", "[", "\"run_name\"", "]", "\n", "\n", "model", "=", "None", "\n", "pytorch_model", "=", "False", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# Oracles / baselines that ignore images", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "if", "model_name", "==", "\"oracle\"", ":", "\n", "        ", "rollout_params", "=", "get_current_parameters", "(", ")", "[", "\"Rollout\"", "]", "\n", "if", "rollout_params", "[", "\"oracle_type\"", "]", "==", "\"SimpleCarrotPlanner\"", ":", "\n", "            ", "model", "=", "SimpleCarrotPlanner", "(", ")", "\n", "print", "(", "\"Using simple carrot planner\"", ")", "\n", "", "elif", "rollout_params", "[", "\"oracle_type\"", "]", "==", "\"BasicCarrotPlanner\"", ":", "\n", "            ", "model", "=", "BasicCarrotPlanner", "(", ")", "\n", "print", "(", "\"Using basic carrot planner\"", ")", "\n", "", "elif", "rollout_params", "[", "\"oracle_type\"", "]", "==", "\"FancyCarrotPlanner\"", ":", "\n", "            ", "model", "=", "FancyCarrotPlanner", "(", ")", "\n", "print", "(", "\"Using fancy carrot planner\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"UNKNOWN ORACLE: \"", ",", "rollout_params", "[", "\"OracleType\"", "]", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "elif", "model_name", "==", "\"average\"", ":", "\n", "        ", "model", "=", "BaselineAverage", "(", ")", "\n", "", "elif", "model_name", "==", "\"stop\"", ":", "\n", "        ", "model", "=", "BaselineStop", "(", ")", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# FASTER RSS 2018 Resubmission Model", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "elif", "model_name", "==", "\"gsmn\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_features", "=", "False", ",", "aux_grounding_features", "=", "False", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"gsmn_wo_jlang\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "False", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"gsmn_wo_jgnd\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "False", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"gsmn_wo_jclass\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_map", "=", "False", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"gsmn_wo_jgoal\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "False", ",", "aux_lang", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"gsmn_w_posnoise\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_features", "=", "False", ",", "aux_grounding_features", "=", "False", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "True", ",", "\n", "pos_noise", "=", "True", ",", "rot_noise", "=", "False", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"gsmn_w_rotnoise\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_features", "=", "False", ",", "aux_grounding_features", "=", "False", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "True", ",", "\n", "pos_noise", "=", "False", ",", "rot_noise", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"gsmn_w_bothnoise\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "ModelRSS", ".", "MODEL_RSS", ",", "\n", "aux_class_features", "=", "False", ",", "aux_grounding_features", "=", "False", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "True", ",", "\n", "pos_noise", "=", "True", ",", "rot_noise", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# RSS Baselines", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "elif", "model_name", "==", "\"gs_fpv\"", ":", "\n", "        ", "model", "=", "ModelGSFPV", "(", "run_name", ",", "aux_class_features", "=", "True", ",", "aux_grounding_features", "=", "True", ",", "aux_lang", "=", "True", ",", "recurrence", "=", "False", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"gs_fpv_mem\"", ":", "\n", "        ", "model", "=", "ModelGSFPV", "(", "run_name", ",", "aux_class_features", "=", "True", ",", "aux_grounding_features", "=", "True", ",", "aux_lang", "=", "True", ",", "recurrence", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# RSS Model for Cage", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "elif", "model_name", "==", "\"gsmn_cage\"", ":", "\n", "        ", "model", "=", "ModelRSS", "(", "run_name", ",", "model_class", "=", "msrg", ".", "MODEL_RSS", ",", "\n", "aux_class_features", "=", "False", ",", "aux_grounding_features", "=", "False", ",", "\n", "aux_class_map", "=", "True", ",", "aux_grounding_map", "=", "True", ",", "aux_goal_map", "=", "True", ",", "aux_lang", "=", "False", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"gsmn_bidomain\"", ":", "\n", "        ", "model", "=", "ModelGSMNBiDomain", "(", "run_name", ",", "model_instance_name", "=", "domain", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"gsmn_critic\"", ":", "\n", "        ", "model", "=", "ModelGsmnCritic", "(", "run_name", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# CoRL 2018 Model", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "elif", "model_name", "==", "\"sm_traj_nav_ratio\"", ":", "\n", "        ", "model", "=", "ModelTrajectoryProbRatio", "(", "run_name", ",", "model_class", "=", "mtpr", ".", "MODEL_FPV", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"sm_traj_nav_ratio_path\"", ":", "\n", "        ", "model", "=", "ModelTrajectoryProbRatio", "(", "run_name", ",", "model_class", "=", "mtpr", ".", "PVN_STAGE1_ONLY", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"action_gtr\"", ":", "\n", "        ", "model", "=", "ModelTrajectoryToAction", "(", "run_name", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# CoRL 2018 Refactored", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_full\"", ":", "\n", "        ", "model", "=", "ModelTrajectoryProbRatio", "(", "run_name", ",", "model_class", "=", "mtpr", ".", "MODEL_FPV", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"pvn_stage1\"", ":", "\n", "        ", "model", "=", "ModelTrajectoryProbRatio", "(", "run_name", ",", "model_class", "=", "mtpr", ".", "PVN_STAGE1_ONLY", ")", ";", "pytorch_model", "=", "True", "\n", "", "elif", "model_name", "==", "\"pvn_stage2\"", ":", "\n", "        ", "model", "=", "ModelTrajectoryToAction", "(", "run_name", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# CoRL 2018 Top-Down Full Observability Models", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "elif", "model_name", "==", "\"top_down_goal_batched\"", ":", "\n", "        ", "model", "=", "ModelTopDownPathGoalPredictorBatched", "(", "run_name", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "# CoRL Model for cage (bidomain)", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_original_stage1_bidomain\"", ":", "\n", "        ", "model", "=", "PVN_Stage1_Bidomain_Original", "(", "run_name", ",", "domain", "=", "domain", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_stage1_bidomain\"", ":", "\n", "        ", "model", "=", "PVN_Stage1_Bidomain", "(", "run_name", ",", "domain", "=", "domain", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_stage2_bidomain\"", ":", "\n", "        ", "model", "=", "PVN_Stage2_Bidomain", "(", "run_name", ",", "model_instance_name", "=", "domain", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_stage2_actor_critic\"", ":", "\n", "        ", "model", "=", "PVN_Stage2_ActorCritic", "(", "run_name", ",", "model_instance_name", "=", "domain", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_stage1_critic\"", ":", "\n", "        ", "model", "=", "PVN_Stage1_Critic", "(", "run_name", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_stage1_critic_big\"", ":", "\n", "        ", "model", "=", "PVN_Stage1_Critic_Big", "(", "run_name", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_full_bidomain\"", ":", "\n", "        ", "model", "=", "PVN_Wrapper_Bidomain", "(", "run_name", ",", "model_instance_name", "=", "domain", ",", "oracle_stage1", "=", "False", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "", "elif", "model_name", "==", "\"pvn_full_bidomain_ground_truth\"", ":", "\n", "        ", "model", "=", "PVN_Wrapper_Bidomain", "(", "run_name", ",", "model_instance_name", "=", "domain", ",", "oracle_stage1", "=", "True", ")", ";", "pytorch_model", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "model_loaded", "=", "False", "\n", "if", "pytorch_model", ":", "\n", "        ", "n_params", "=", "get_n_params", "(", "model", ")", "\n", "n_params_tr", "=", "get_n_trainable_params", "(", "model", ")", "\n", "print", "(", "\"Loaded PyTorch model!\"", ")", "\n", "print", "(", "\"Number of model parameters: \"", "+", "str", "(", "n_params", ")", ")", "\n", "print", "(", "\"Trainable model parameters: \"", "+", "str", "(", "n_params_tr", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "if", "model_file", ":", "\n", "            ", "load_pytorch_model", "(", "model", ",", "model_file", ",", "pytorch3to4", "=", "True", ")", "\n", "print", "(", "\"Loaded previous model: \"", ",", "model_file", ")", "\n", "model_loaded", "=", "True", "\n", "\n", "", "if", "cuda", ":", "\n", "            ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "", "return", "model", ",", "model_loaded", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset": [[23, 28], ["os.path.join", "train_data.save_dataset_to_path", "data_io.paths.get_supervised_data_filename", "data_io.paths.get_dataset_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset_to_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_supervised_data_filename", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir"], ["def", "save_dataset", "(", "dataset_name", ",", "dataset", ",", "name", "=", "None", ",", "env_id", "=", "None", ",", "lock", "=", "False", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "get_supervised_data_filename", "(", "env_id", ")", "\n", "", "full_path", "=", "os", ".", "path", ".", "join", "(", "get_dataset_dir", "(", "dataset_name", ")", ",", "str", "(", "name", ")", ")", "\n", "save_dataset_to_path", "(", "full_path", ",", "dataset", ",", "lock", "=", "lock", ")", "\n", "#print(f\"Saved {len(dataset)} rollouts for dataset {dataset_name}/{name}\")", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.lock_path": [[31, 33], ["None"], "function", ["None"], ["", "def", "lock_path", "(", "path", ")", ":", "\n", "    ", "return", "path", "+", "\"_lock_\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.has_lock": [[35, 37], ["os.path.exists", "train_data.lock_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.lock_path"], ["", "def", "has_lock", "(", "path", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "exists", "(", "lock_path", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.do_lock": [[39, 46], ["train_data.await_lock", "open", "open.writelines", "open.close", "train_data.lock_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.await_lock", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.lock_path"], ["", "def", "do_lock", "(", "path", ")", ":", "\n", "# There is a possible point of contention where both processes simultaneously clear await_lock()", "\n", "# and then proceed to execute do_lock at the same time. I'd wager this is a very low probability event", "\n", "    ", "await_lock", "(", "path", ")", "\n", "f", "=", "open", "(", "lock_path", "(", "path", ")", ",", "\"w\"", ")", "\n", "f", ".", "writelines", "(", "[", "\"locked\"", "]", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.do_unlock": [[48, 51], ["os.path.exists", "train_data.lock_path", "os.remove", "train_data.lock_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.lock_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.lock_path"], ["", "def", "do_unlock", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "lock_path", "(", "path", ")", ")", ":", "\n", "        ", "os", ".", "remove", "(", "lock_path", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.await_lock": [[53, 65], ["train_data.has_lock", "time.sleep", "print", "train_data.do_unlock"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.has_lock", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.do_unlock"], ["", "", "def", "await_lock", "(", "path", ")", ":", "\n", "    ", "time_slept", "=", "0.0", "\n", "removed", "=", "False", "\n", "while", "has_lock", "(", "path", ")", ":", "\n", "        ", "if", "removed", ":", "\n", "            ", "print", "(", "f\"LOCK REMOVED BUT STILL HAS_LOCK: {path}\"", ")", "\n", "", "sleep", "(", "LOCK_WAIT_TIME", ")", "\n", "time_slept", "+=", "LOCK_WAIT_TIME", "\n", "if", "time_slept", ">", "LOCK_TIMEOUT", ":", "\n", "            ", "do_unlock", "(", "path", ")", "\n", "removed", "=", "True", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset_to_path": [[67, 83], ["os.path.dirname", "gc.disable", "open", "pickle.dump", "open.close", "gc.enable", "[].get", "os.path.isdir", "train_data.do_lock", "train_data.do_unlock", "os.makedirs", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.do_lock", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.do_unlock", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "save_dataset_to_path", "(", "full_path", ",", "dataset", ",", "lock", "=", "False", ")", ":", "\n", "    ", "lock", "=", "lock", "or", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", ".", "get", "(", "\"locking\"", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "full_path", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "        ", "try", ":", "os", ".", "makedirs", "(", "dirname", ")", "\n", "except", "Exception", ":", "pass", "\n", "\n", "", "if", "lock", ":", "\n", "        ", "do_lock", "(", "full_path", ")", "\n", "", "gc", ".", "disable", "(", ")", "\n", "f", "=", "open", "(", "full_path", ",", "\"wb\"", ")", "\n", "pickle", ".", "dump", "(", "dataset", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "gc", ".", "enable", "(", ")", "\n", "if", "lock", ":", "\n", "        ", "do_unlock", "(", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset": [[85, 88], ["os.path.join", "train_data.load_dataset_from_path", "data_io.paths.get_dataset_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset_from_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir"], ["", "", "def", "load_dataset", "(", "dataset_name", ",", "name", ",", "lock", "=", "False", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "get_dataset_dir", "(", "dataset_name", ")", ",", "str", "(", "name", ")", ")", "\n", "return", "load_dataset_from_path", "(", "path", ",", "lock", "=", "lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset_from_path": [[90, 106], ["gc.disable", "open", "open.close", "gc.enable", "[].get", "train_data.do_lock", "pickle.load", "train_data.do_unlock", "print", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.do_lock", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.do_unlock", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "load_dataset_from_path", "(", "path", ",", "lock", "=", "False", ")", ":", "\n", "    ", "lock", "=", "lock", "or", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", ".", "get", "(", "\"locking\"", ")", "\n", "if", "lock", ":", "\n", "        ", "do_lock", "(", "path", ")", "\n", "", "gc", ".", "disable", "(", ")", "\n", "f", "=", "open", "(", "path", ",", "\"rb\"", ")", "\n", "try", ":", "\n", "        ", "dataset", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Error loading dataset pickle\"", ")", "\n", "dataset", "=", "[", "]", "\n", "", "f", ".", "close", "(", ")", "\n", "gc", ".", "enable", "(", ")", "\n", "if", "lock", ":", "\n", "        ", "do_unlock", "(", "path", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_from_dataset": [[108, 113], ["train_data.load_single_env_supervised_data", "train_data.load_dataset", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_supervised_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["", "def", "load_single_env_from_dataset", "(", "dataset_name", ",", "env", ",", "prefix", ")", ":", "\n", "    ", "if", "prefix", "==", "\"supervised\"", ":", "\n", "        ", "return", "load_single_env_supervised_data", "(", "dataset_name", ",", "env", ")", "\n", "", "else", ":", "\n", "        ", "return", "load_dataset", "(", "dataset_name", ",", "prefix", "+", "\"_\"", "+", "str", "(", "env", ")", "if", "prefix", "else", "str", "(", "env", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_metadata_from_dataset": [[115, 121], ["train_data.load_dataset"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["", "", "def", "load_single_env_metadata_from_dataset", "(", "dataset_name", ",", "env", ",", "prefix", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "metadata", "=", "load_dataset", "(", "dataset_name", ",", "f\"metadata_{env}\"", ")", "\n", "return", "metadata", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_metadata": [[123, 125], ["train_data.save_dataset"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset"], ["", "", "def", "save_metadata", "(", "dataset_name", ",", "env", ",", "metadata", ")", ":", "\n", "    ", "save_dataset", "(", "dataset_name", ",", "metadata", ",", "f\"metadata_{env}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.filter_env_list_has_data": [[127, 148], ["os.path.join", "print", "print", "data_io.paths.get_dataset_dir", "os.path.isfile", "str", "str", "os.path.getsize", "good_envs.append", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "filter_env_list_has_data", "(", "dataset_name", ",", "env_list", ",", "prefix", ")", ":", "\n", "    ", "good_envs", "=", "[", "]", "\n", "cut_some", "=", "False", "\n", "too_small_count", "=", "0", "\n", "missing", "=", "0", "\n", "for", "env", "in", "env_list", ":", "\n", "        ", "filename", "=", "\"supervised_train_data_env_\"", "+", "str", "(", "env", ")", "if", "prefix", "==", "\"supervised\"", "else", "prefix", "+", "\"_\"", "+", "str", "(", "env", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "get_dataset_dir", "(", "dataset_name", ")", ",", "filename", ")", "\n", "# Check that the data file exists and", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "missing", "+=", "1", "\n", "cut_some", "=", "True", "\n", "", "elif", "os", ".", "path", ".", "getsize", "(", "path", ")", "<", "1000", ":", "\n", "            ", "too_small_count", "+=", "1", "\n", "cut_some", "=", "True", "\n", "", "else", ":", "\n", "            ", "good_envs", ".", "append", "(", "env", ")", "\n", "", "", "if", "cut_some", ":", "\n", "        ", "print", "(", "\"Filtered out \"", "+", "str", "(", "len", "(", "env_list", ")", "-", "len", "(", "good_envs", ")", ")", "+", "\" envs because of missing data\"", ")", "\n", "print", "(", "f\"   {too_small_count} files too small, {missing} files missing\"", ")", "\n", "", "return", "good_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_data": [[150, 161], ["train_data.load_dataset", "print", "print", "print", "str", "sys.exc_info", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["", "def", "load_single_env_data", "(", "dataset_name", ",", "prefix", ",", "env", ")", ":", "\n", "    ", "env_data", "=", "[", "]", "\n", "#print (\"Data env: \", env)", "\n", "try", ":", "\n", "        ", "env_data", "=", "load_dataset", "(", "dataset_name", ",", "prefix", "+", "\"_\"", "+", "str", "(", "env", ")", ")", "\n", "", "except", "ImportError", "as", "err", ":", "\n", "        ", "print", "(", "err", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "print", "(", "\"Data for env \"", "+", "str", "(", "env", ")", "+", "\"unavailable! Skipping..\"", ")", "\n", "print", "(", "sys", ".", "exc_info", "(", ")", "[", "0", "]", ")", "\n", "", "return", "env_data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_supervised_data": [[163, 174], ["train_data.load_dataset", "print", "print", "print", "str", "sys.exc_info", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_dataset"], ["", "def", "load_single_env_supervised_data", "(", "dataset_name", ",", "env", ")", ":", "\n", "    ", "env_data", "=", "[", "]", "\n", "#print (\"Data env: \", env)", "\n", "try", ":", "\n", "        ", "env_data", "=", "load_dataset", "(", "dataset_name", ",", "\"supervised_train_data_env_\"", "+", "str", "(", "env", ")", ")", "\n", "", "except", "ImportError", "as", "err", ":", "\n", "        ", "print", "(", "err", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "print", "(", "\"Data for env \"", "+", "str", "(", "env", ")", "+", "\"unavailable! Skipping..\"", ")", "\n", "print", "(", "sys", ".", "exc_info", "(", ")", "[", "0", "]", ")", "\n", "", "return", "env_data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.sanitize_data": [[176, 185], ["parameters.get_current_parameters", "len", "data_out.append", "print", "str", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "sanitize_data", "(", "data", ")", ":", "\n", "    ", "data_out", "=", "[", "]", "\n", "max_sample_length", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"trajectory_length\"", "]", "\n", "for", "rollout", "in", "data", ":", "\n", "        ", "if", "MIN_SAMPLE_LENGTH", "<", "len", "(", "rollout", ")", "<", "max_sample_length", ":", "\n", "            ", "data_out", ".", "append", "(", "rollout", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipping rollout of length: \"", "+", "str", "(", "len", "(", "rollout", ")", ")", ")", "\n", "", "", "return", "data_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.split_in_segments": [[187, 202], ["enumerate", "len", "output_segs.append", "output_segs.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "split_in_segments", "(", "data", ")", ":", "\n", "    ", "output_segs", "=", "[", "]", "\n", "for", "env_rollout", "in", "data", ":", "\n", "        ", "if", "len", "(", "env_rollout", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "seg_idx", "=", "0", "\n", "prev", "=", "0", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "env_rollout", ")", ":", "\n", "            ", "if", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "!=", "seg_idx", ":", "\n", "                ", "output_segs", ".", "append", "(", "env_rollout", "[", "prev", ":", "i", "]", ")", "\n", "prev", "=", "i", "\n", "seg_idx", "=", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "", "", "if", "prev", "<", "len", "(", "env_rollout", ")", "-", "1", ":", "\n", "            ", "output_segs", ".", "append", "(", "env_rollout", "[", "prev", ":", "len", "(", "env_rollout", ")", "-", "1", "]", ")", "\n", "", "", "return", "output_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_multiple_env_data": [[204, 207], ["data_io.paths.get_dataset_dir", "train_data.load_multiple_env_data_from_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_multiple_env_data_from_dir"], ["", "def", "load_multiple_env_data", "(", "dataset_name", ")", ":", "\n", "    ", "ddir", "=", "get_dataset_dir", "(", "dataset_name", ")", "\n", "return", "load_multiple_env_data_from_dir", "(", "ddir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_multiple_env_data_from_dir": [[209, 216], ["os.listdir", "multiprocessing.pool.Pool", "multiprocessing.pool.Pool.map", "os.path.join"], "function", ["None"], ["", "def", "load_multiple_env_data_from_dir", "(", "data_dir", ")", ":", "\n", "    ", "all_files", "=", "os", ".", "listdir", "(", "data_dir", ")", "\n", "all_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fname", ")", "for", "fname", "in", "all_files", "]", "\n", "\n", "pool", "=", "Pool", "(", "processes", "=", "20", ")", "\n", "env_datas", "=", "pool", ".", "map", "(", "load_dataset_from_path", ",", "all_paths", ")", "\n", "return", "env_datas", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_supervised_data": [[218, 246], ["data_io.instructions.get_all_instructions", "data_io.instructions.get_env_ids", "data_io.instructions.get_env_ids", "multiprocessing.pool.Pool", "multiprocessing.pool.Pool.map", "multiprocessing.pool.Pool.map", "multiprocessing.pool.Pool.close", "train_data.sanitize_data", "train_data.sanitize_data", "functools.partial", "functools.partial", "train_data.split_in_segments", "train_data.split_in_segments"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_env_ids", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_env_ids", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.sanitize_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.sanitize_data", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.split_in_segments", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.split_in_segments"], ["", "def", "load_supervised_data", "(", "dataset_name", ",", "max_envs", "=", "None", ",", "split_segments", "=", "False", ")", ":", "\n", "    ", "train_i", ",", "dev_i", ",", "test_i", ",", "_", "=", "get_all_instructions", "(", "max_envs", ")", "\n", "train_env_ids", "=", "get_env_ids", "(", "train_i", ")", "\n", "dev_env_ids", "=", "get_env_ids", "(", "dev_i", ")", "\n", "\n", "pool", "=", "Pool", "(", "processes", "=", "20", ")", "\n", "\n", "# Load dataset for each env in parallel", "\n", "train_env_data", "=", "pool", ".", "map", "(", "partial", "(", "load_single_env_data", ",", "dataset_name", ",", "\"supervised_train_data_env\"", ")", ",", "train_env_ids", ")", "\n", "dev_env_data", "=", "pool", ".", "map", "(", "partial", "(", "load_single_env_data", ",", "dataset_name", ",", "\"supervised_train_data_env\"", ")", ",", "dev_env_ids", ")", "\n", "pool", ".", "close", "(", ")", "\n", "\n", "#dev_data = []", "\n", "#train_data = []", "\n", "# Combine into a single dataset", "\n", "#for data in train_env_data:", "\n", "#    train_data += data", "\n", "#for data in dev_env_data:", "\n", "#    dev_data += data", "\n", "\n", "train_data", "=", "sanitize_data", "(", "train_env_data", ")", "\n", "dev_data", "=", "sanitize_data", "(", "dev_env_data", ")", "\n", "\n", "if", "split_segments", ":", "\n", "        ", "train_data", "=", "split_in_segments", "(", "train_data", ")", "\n", "dev_data", "=", "split_in_segments", "(", "dev_data", ")", "\n", "\n", "", "return", "train_data", ",", "dev_data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.file_exists": [[248, 254], ["os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "data_io.paths.get_dataset_dir", "str", "data_io.paths.get_model_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir"], ["", "def", "file_exists", "(", "name", ",", "dataset_name", ")", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "get_dataset_dir", "(", "dataset_name", ")", ",", "str", "(", "name", ")", ")", "\n", "data_exists", "=", "os", ".", "path", ".", "exists", "(", "full_path", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "get_model_dir", "(", ")", ",", "str", "(", "name", ")", ")", "\n", "model_exists", "=", "os", ".", "path", ".", "exists", "(", "full_path", ")", "\n", "return", "data_exists", "or", "model_exists", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving": [[8, 23], ["hasattr", "model.dont_freeze_weights.append", "weights.fix_weights", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.fix_weights"], ["def", "enable_weight_saving", "(", "model", ",", "key", ",", "alwaysfreeze", "=", "False", ",", "neverfreeze", "=", "False", ")", ":", "\n", "    ", "model", ".", "pretrained_weights_key", "=", "key", "\n", "model", ".", "get_weights_key", "=", "get_weights_key", "\n", "model", ".", "fix_weights", "=", "fix_weights", "\n", "model", ".", "set_pretrained_weights", "=", "set_pretrained_weights", "\n", "model", ".", "get_pretrained_weights", "=", "get_pretrained_weights", "\n", "\n", "if", "not", "hasattr", "(", "model", ",", "\"dont_freeze_weights\"", ")", ":", "\n", "        ", "model", ".", "dont_freeze_weights", "=", "[", "]", "\n", "", "if", "neverfreeze", ":", "\n", "        ", "model", ".", "dont_freeze_weights", ".", "append", "(", "key", ")", "\n", "\n", "", "if", "alwaysfreeze", ":", "\n", "        ", "fix_weights", "(", "model", ")", "\n", "print", "(", "\"Froze weights: \"", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.restore_pretrained_weights": [[25, 45], ["os.path.join", "print", "model.named_modules", "data_io.paths.get_pretrained_weight_dir", "hasattr", "module.get_weights_key", "os.path.join", "os.path.isfile", "print", "torch.load", "module.set_pretrained_weights", "print", "str", "print", "module.fix_weights", "print", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_pretrained_weight_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.get_weights_key", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.set_pretrained_weights", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.fix_weights"], ["", "", "def", "restore_pretrained_weights", "(", "model", ",", "restore_run_name", ",", "fix_weights", "=", "False", ")", ":", "\n", "# retrieve from models/restore_run_name", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "get_pretrained_weight_dir", "(", ")", ",", "restore_run_name", ")", "\n", "\n", "print", "(", "\"Restoring weights from pre-training run \"", "+", "restore_run_name", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "\"set_pretrained_weights\"", ")", ":", "\n", "            ", "key", "=", "module", ".", "get_weights_key", "(", "module", ")", "\n", "state_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "key", ")", "+", "\".weights\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "state_path", ")", ":", "\n", "                ", "print", "(", "\"    restoring module : \"", "+", "str", "(", "key", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "state_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "module", ".", "set_pretrained_weights", "(", "module", ",", "state_dict", ")", "\n", "if", "fix_weights", "and", "key", "not", "in", "module", ".", "dont_freeze_weights", ":", "\n", "                    ", "print", "(", "\"        fixing weights : \"", "+", "str", "(", "key", ")", ")", "\n", "module", ".", "fix_weights", "(", "module", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"        NOT fixing loaded weights : \"", "+", "str", "(", "key", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"ERROR: WEIGHTS NOT FOUND FOR: \"", "+", "str", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.save_pretrained_weights": [[47, 59], ["os.path.join", "os.makedirs", "model.named_modules", "data_io.paths.get_pretrained_weight_dir", "hasattr", "module.get_pretrained_weights", "module.get_weights_key", "os.path.join", "torch.save", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_pretrained_weight_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.get_pretrained_weights", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.get_weights_key", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save"], ["", "", "", "", "def", "save_pretrained_weights", "(", "model", ",", "name", ")", ":", "\n", "# store in models/run_name/", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "get_pretrained_weight_dir", "(", ")", ",", "name", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "\"get_pretrained_weights\"", ")", ":", "\n", "            ", "state_dict", "=", "module", ".", "get_pretrained_weights", "(", "module", ")", "\n", "key", "=", "module", ".", "get_weights_key", "(", "module", ")", "\n", "state_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "key", ")", "+", "\".weights\"", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "state_path", ")", "\n", "print", "(", "\"Saved pretrained weights: \"", "+", "str", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.get_weights_key": [[61, 63], ["None"], "function", ["None"], ["", "", "", "def", "get_weights_key", "(", "module", ")", ":", "\n", "    ", "return", "module", ".", "pretrained_weights_key", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.fix_weights": [[65, 68], ["module.parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "fix_weights", "(", "module", ")", ":", "\n", "    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.set_pretrained_weights": [[70, 72], ["module.load_state_dict"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict"], ["", "", "def", "set_pretrained_weights", "(", "module", ",", "weights", ")", ":", "\n", "    ", "module", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.get_pretrained_weights": [[74, 76], ["module.state_dict"], "function", ["None"], ["", "def", "get_pretrained_weights", "(", "module", ")", ":", "\n", "    ", "return", "module", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.is_pretrainable": [[78, 83], ["hasattr", "hasattr", "hasattr", "hasattr"], "function", ["None"], ["", "def", "is_pretrainable", "(", "module", ")", ":", "\n", "    ", "return", "hasattr", "(", "module", ",", "\"set_pretrained_weights\"", ")", "and", "hasattr", "(", "module", ",", "\"get_pretrained_weights\"", ")", "and", "hasattr", "(", "module", ",", "\"fix_weights\"", ")", "and", "hasattr", "(", "module", ",", "\"get_weights_key\"", ")", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model": [[8, 15], ["os.path.join", "os.path.dirname", "torch.save", "data_io.paths.get_model_dir", "os.path.isdir", "model.state_dict", "str", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir"], ["def", "save_pytorch_model", "(", "model", ",", "name", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "get_model_dir", "(", ")", ",", "str", "(", "name", ")", "+", "\".pytorch\"", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "        ", "try", ":", "os", ".", "makedirs", "(", "dirname", ")", "\n", "except", "Exception", ":", "pass", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model": [[17, 41], ["os.path.join", "torch.load", "data_io.paths.get_model_dir", "torch.load.copy", "model_dict.copy.items", "torch.load.items", "model.load_state_dict", "str", "key.endswith", "k.startswith", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict"], ["", "def", "load_pytorch_model", "(", "model", ",", "name", ",", "pytorch3to4", "=", "False", ",", "namespace", "=", "None", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "get_model_dir", "(", ")", ",", "str", "(", "name", ")", "+", "\".pytorch\"", ")", "\n", "\n", "model_dict", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "# Fix for loading PyTorch 0.3 models in PyTorch 0.4", "\n", "if", "pytorch3to4", ":", "\n", "        ", "model_dict_clone", "=", "model_dict", ".", "copy", "(", ")", "# We can't mutate while iterating", "\n", "for", "key", ",", "value", "in", "model_dict_clone", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "endswith", "(", "(", "'running_mean'", ",", "'running_var'", ")", ")", ":", "\n", "                ", "del", "model_dict", "[", "key", "]", "\n", "\n", "", "", "", "if", "namespace", "is", "not", "None", ":", "\n", "        ", "new_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "namespace", ")", ":", "\n", "                ", "k", "=", "k", "[", "len", "(", "namespace", ")", "+", "1", ":", "]", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "", "", "model_dict", "=", "new_dict", "\n", "\n", "", "if", "model", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "else", ":", "\n", "        ", "return", "model_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.find_state_subdict": [[42, 48], ["state_dict.items", "k.startswith", "len"], "function", ["None"], ["", "", "def", "find_state_subdict", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "subdict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "prefix", ")", ":", "\n", "            ", "subdict", "[", "k", "[", "len", "(", "prefix", ")", "+", "1", ":", "]", "]", "=", "v", "\n", "", "", "return", "subdict", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json": [[5, 13], ["os.path.expanduser", "os.path.dirname", "os.path.isdir", "os.makedirs", "open", "json.dump"], "function", ["None"], ["def", "save_json", "(", "data", ",", "full_path", ")", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "expanduser", "(", "full_path", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "full_path", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "with", "open", "(", "full_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json": [[15, 26], ["os.path.expanduser", "os.path.isfile", "open", "json.load", "print"], "function", ["None"], ["", "", "def", "load_json", "(", "full_path", ")", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "expanduser", "(", "full_path", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "full_path", ")", ":", "\n", "        ", "return", "None", "\n", "", "try", ":", "\n", "        ", "with", "open", "(", "full_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "ret", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "f\"Exception when loading config: {full_path}\"", ")", "\n", "raise", "(", "e", ")", "\n", "", "return", "ret", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.results.save_results_extra_image": [[10, 22], ["data_io.paths.get_results_dir", "os.makedirs", "os.path.join", "imageio.imsave", "os.path.join", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_dir"], ["def", "save_results_extra_image", "(", "run_name", ",", "env_id", ",", "set_id", ",", "seg_id", ",", "name", ",", "image_np", ",", "extra", "=", "True", ")", ":", "\n", "    ", "results_dir", "=", "get_results_dir", "(", "run_name", ",", "makedir", "=", "True", ")", "\n", "if", "extra", ":", "\n", "        ", "extra_dir", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "\"extra\"", ")", "\n", "", "else", ":", "\n", "        ", "extra_dir", "=", "results_dir", "\n", "", "os", ".", "makedirs", "(", "extra_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "img_filename", "=", "str", "(", "env_id", ")", "+", "\"_\"", "+", "str", "(", "set_id", ")", "+", "\"_\"", "+", "str", "(", "seg_id", ")", "+", "f\"{'_extra-' if extra else ''}\"", "+", "name", "+", "\".jpg\"", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "extra_dir", ",", "img_filename", ")", "\n", "\n", "imsave", "(", "img_path", ",", "image_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.results.save_results_extra_gif": [[24, 39], ["data_io.paths.get_results_dir", "os.path.join", "os.makedirs", "os.path.join", "imageio.mimsave", "len", "print", "visualization.filter_for_gif", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_dir", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.filter_for_gif"], ["", "def", "save_results_extra_gif", "(", "run_name", ",", "env_id", ",", "set_id", ",", "seg_id", ",", "name", ",", "image_list", ")", ":", "\n", "    ", "results_dir", "=", "get_results_dir", "(", "run_name", ",", "makedir", "=", "True", ")", "\n", "extra_dir", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "\"extra\"", ")", "\n", "os", ".", "makedirs", "(", "extra_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "len", "(", "image_list", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"Empty image list: Not saving GIF!\"", ")", "\n", "return", "\n", "\n", "", "img_filename", "=", "str", "(", "env_id", ")", "+", "\"_\"", "+", "str", "(", "set_id", ")", "+", "\"_\"", "+", "str", "(", "seg_id", ")", "+", "\"_extra-\"", "+", "name", "+", "\".gif\"", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "extra_dir", ",", "img_filename", ")", "\n", "\n", "image_list_filtered", "=", "[", "filter_for_gif", "(", "image", ")", "for", "image", "in", "image_list", "]", "\n", "\n", "imageio", ".", "mimsave", "(", "img_path", ",", "image_list_filtered", ",", "fps", "=", "5.0", ")", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_executable_path": [[13, 15], ["parameters.parameter_server.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["if", "len", "(", "path", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_config_dir": [[17, 19], ["parameters.parameter_server.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["out_path", ".", "append", "(", "prev_point", ")", "\n", "for", "point", "in", "path", ":", "\n", "        ", "if", "np", ".", "linalg", ".", "norm", "(", "point", "-", "prev_point", ")", ">", "1e-9", ":", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_path": [[23, 25], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], ["\n", "\n", "", "def", "condense_path_with_mapping", "(", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_template_path": [[27, 29], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instructions_path": [[31, 33], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], ["\n", "out_path", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_curve_path": [[35, 37], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], ["if", "len", "(", "path", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "out_path", ")", ",", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_curve_plot_path": [[39, 41], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], ["out_path", ".", "append", "(", "prev_point", ")", "\n", "out_map", "[", "0", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_anno_curve_path": [[43, 45], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], ["        ", "if", "np", ".", "linalg", ".", "norm", "(", "point", "-", "prev_point", ")", ">", "1e-9", ":", "\n", "            ", "out_path", ".", "append", "(", "point", ")", "\n", "", "out_map", "[", "i", "]", "=", "len", "(", "out_path", ")", "-", "1", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_fpv_img_dir": [[47, 50], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], ["", "return", "np", ".", "asarray", "(", "out_path", ")", ",", "out_map", "\n", "\n", "\n", "", "def", "get_closest_point_in_path", "(", "path", ",", "pos", ")", ":", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_fpv_img_flight_dir": [[52, 54], ["os.path.join", "paths.get_fpv_img_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_fpv_img_dir"], ["counter", "=", "np", ".", "argsort", "(", "distance_matrix", ".", "flatten", "(", ")", ")", "[", "0", "]", "\n", "return", "counter", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_all_poses_dir": [[56, 58], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_poses_dir": [[60, 62], ["os.path.join", "paths.get_all_poses_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_all_poses_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_all_real_images_dir": [[64, 66], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_all_sim_images_dir": [[68, 70], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_real_images_dir": [[72, 74], ["os.path.join", "paths.get_all_real_images_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_all_real_images_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_images_dir": [[76, 78], ["os.path.join", "paths.get_all_sim_images_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_all_sim_images_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_dir": [[80, 82], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_pose_path": [[84, 86], ["os.path.join", "paths.get_poses_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_poses_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_real_img_path": [[88, 90], ["os.path.join", "paths.get_real_images_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_real_images_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_img_path": [[92, 94], ["os.path.join", "paths.get_sim_images_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_images_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_plots_dir": [[96, 98], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_samples_dir": [[100, 102], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_plots_dir": [[104, 106], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_samples_dir": [[108, 110], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_video_dir": [[112, 116], ["os.path.join", "os.makedirs", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir": [[118, 122], ["os.path.join", "os.makedirs", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sprites_dir": [[124, 127], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instruction_annotations_path": [[130, 132], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir": [[137, 140], ["parameters.parameter_server.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_pretrained_weight_dir": [[142, 144], ["os.path.join", "paths.get_model_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_model_dir": [[146, 148], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir": [[150, 152], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_viz_dir": [[154, 156], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_debug_viz_dir": [[158, 160], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir": [[162, 164], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instruction_cache_dir": [[166, 168], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_tmp_dir": [[170, 172], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_supervised_data_filename": [[174, 177], ["str"], "function", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_weights_path": [[179, 182], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_self_attention_path": [[184, 187], ["paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_noisy_pose_path": [[189, 192], ["os.path.join", "paths.get_dataset_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.load_config_file": [[195, 200], ["paths.get_env_config_path", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_path"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.load_config_files": [[201, 209], ["paths.get_env_config_path", "list_of_dict.append", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_path", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_path": [[213, 218], ["os.path.join", "os.path.join", "paths.get_config_base_dir", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_dir": [[220, 228], ["os.path.join", "os.path.join", "os.makedirs", "paths.get_config_base_dir", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_image_path": [[233, 236], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_images_dir": [[238, 241], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_image_path": [[243, 253], ["paths.get_config_dir", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_current_config_folder": [[255, 261], ["str"], "function", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_english_vocab_path": [[263, 266], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_thesaurus_path": [[268, 271], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_similar_instruction_path": [[273, 276], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_close_landmarks_path": [[278, 281], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_semantic_maps_path": [[283, 286], ["os.path.join", "paths.get_dataset_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_dataset_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_human_eval_envs_path": [[288, 291], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_human_eval_root_path": [[293, 296], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_split_path": [[298, 301], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_metadata_path": [[303, 306], ["os.path.join", "paths.get_config_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_ceiling_cam_calibration_path": [[308, 311], ["os.path.expanduser"], "function", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_eval_tmp_dataset_name": [[313, 316], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_amt_batch_dir": [[318, 320], ["os.path.join", "paths.get_config_base_dir"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_base_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_locations": [[323, 328], ["enumerate", "landmark_loc.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], []], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_train_dev_test_annotations": [[28, 46], ["data_io.paths.get_config_dir", "[].get", "data_io.helpers.load_json", "data_io.helpers.load_json", "data_io.helpers.load_json", "os.path.join", "os.path.join", "os.path.join", "data_io.helpers.load_json", "data_io.helpers.load_json", "data_io.helpers.load_json", "parameters.get_current_parameters", "os.path.join", "os.path.join", "os.path.join", "data_io.helpers.load_json", "ValueError", "os.path.join"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json"], ["def", "load_train_dev_test_annotations", "(", ")", ":", "\n", "    ", "config_dir", "=", "get_config_dir", "(", ")", "\n", "anno_set", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", ".", "get", "(", "\"annotation_set\"", ")", "\n", "if", "anno_set", "==", "\"7000\"", ":", "\n", "        ", "train_data", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "\"train_annotations_7000.json\"", ")", ")", "\n", "dev_data", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "\"dev_annotations_7000.json\"", ")", ")", "\n", "test_data", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "\"test_annotations_7000.json\"", ")", ")", "\n", "return", "train_data", ",", "dev_data", ",", "test_data", "\n", "", "elif", "anno_set", "==", "\"6000\"", ":", "\n", "        ", "train_data", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "\"train_annotations_6000.json\"", ")", ")", "\n", "dev_data", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "\"dev_annotations_6000.json\"", ")", ")", "\n", "test_data", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "\"test_annotations_6000.json\"", ")", ")", "\n", "return", "train_data", ",", "dev_data", ",", "test_data", "\n", "", "elif", "anno_set", "==", "\"4000\"", ":", "\n", "        ", "data", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "\"annotation_results.json\"", ")", ")", "\n", "return", "data", "[", "\"train\"", "]", ",", "data", "[", "\"dev\"", "]", ",", "data", "[", "\"test\"", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown annotation set: {anno_set}. Expected one of: 4000, 6000, 7000\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.augment_dataset": [[48, 95], ["print", "max", "dataset.items", "print", "range", "len", "len", "range", "range", "range", "new_segs.append", "range", "range"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "augment_dataset", "(", "dataset", ",", "merge_len", "=", "2", ",", "min_merge_len", "=", "1", ")", ":", "\n", "    ", "print", "(", "\"ding\"", ")", "\n", "total_added", "=", "0", "\n", "merge_range_start", "=", "max", "(", "2", ",", "min_merge_len", ")", "\n", "\n", "for", "env", ",", "sets", "in", "dataset", ".", "items", "(", ")", ":", "\n", "        ", "for", "set_idx", "in", "range", "(", "len", "(", "sets", ")", ")", ":", "\n", "            ", "set", "=", "sets", "[", "set_idx", "]", "\n", "all_segs", "=", "set", "[", "\"instructions\"", "]", "\n", "num_segs", "=", "len", "(", "set", "[", "\"instructions\"", "]", ")", "\n", "for", "i", "in", "range", "(", "num_segs", ")", ":", "\n", "                ", "set", "[", "\"instructions\"", "]", "[", "i", "]", "[", "\"int_points\"", "]", "=", "[", "]", "\n", "set", "[", "\"instructions\"", "]", "[", "i", "]", "[", "\"merge_len\"", "]", "=", "1", "\n", "set", "[", "\"instructions\"", "]", "[", "i", "]", "[", "\"seg_idx\"", "]", "=", "i", "\n", "\n", "", "augseg_id", "=", "num_segs", "\n", "#set[\"instructions\"] is a list of dicts, where each dict corresponds to an instruction segment", "\n", "# each instruction segment dict has keys:", "\n", "#   instruction: str", "\n", "#   end_idx, start_idx - path end/start indices, integers", "\n", "#   start_pos, end_pos - list, 2D coordinate", "\n", "#   start_yaw, end_yaw - float, radians", "\n", "new_segs", "=", "[", "]", "\n", "for", "this_merge_len", "in", "range", "(", "merge_range_start", ",", "merge_len", "+", "1", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_segs", "-", "this_merge_len", "+", "1", ")", ":", "\n", "                    ", "aug_segs", "=", "[", "all_segs", "[", "j", "]", "for", "j", "in", "range", "(", "i", ",", "i", "+", "this_merge_len", ")", "]", "\n", "aug_seg_d", "=", "{", "}", "\n", "aug_seg_d", "[", "\"instruction\"", "]", "=", "\" \"", ".", "join", "(", "[", "seg", "[", "\"instruction\"", "]", "for", "seg", "in", "aug_segs", "]", ")", "\n", "aug_seg_d", "[", "\"end_idx\"", "]", "=", "aug_segs", "[", "-", "1", "]", "[", "\"end_idx\"", "]", "\n", "aug_seg_d", "[", "\"start_idx\"", "]", "=", "aug_segs", "[", "0", "]", "[", "\"start_idx\"", "]", "\n", "aug_seg_d", "[", "\"start_pos\"", "]", "=", "aug_segs", "[", "0", "]", "[", "\"start_pos\"", "]", "\n", "aug_seg_d", "[", "\"start_yaw\"", "]", "=", "aug_segs", "[", "0", "]", "[", "\"start_yaw\"", "]", "\n", "aug_seg_d", "[", "\"end_pos\"", "]", "=", "aug_segs", "[", "-", "1", "]", "[", "\"end_pos\"", "]", "\n", "aug_seg_d", "[", "\"end_yaw\"", "]", "=", "aug_segs", "[", "-", "1", "]", "[", "\"end_yaw\"", "]", "\n", "aug_seg_d", "[", "\"int_points\"", "]", "=", "[", "aug_segs", "[", "i", "]", "[", "\"end_pos\"", "]", "for", "i", "in", "range", "(", "this_merge_len", "-", "1", ")", "]", "\n", "aug_seg_d", "[", "\"merge_len\"", "]", "=", "this_merge_len", "\n", "aug_seg_d", "[", "\"seg_idx\"", "]", "=", "augseg_id", "\n", "total_added", "+=", "1", "\n", "augseg_id", "+=", "1", "\n", "new_segs", ".", "append", "(", "aug_seg_d", ")", "\n", "\n", "", "", "if", "min_merge_len", ">", "1", ":", "\n", "                ", "dataset", "[", "env", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "=", "new_segs", "\n", "", "else", ":", "\n", "                ", "dataset", "[", "env", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "+=", "new_segs", "\n", "", "", "", "print", "(", "f\"Augmented dataset with {total_added} new merged segments\"", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions": [[97, 212], ["[].get", "[].get", "data_io.paths.get_instruction_cache_dir", "data_io.paths.get_config_dir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "int", "int", "int", "instructions.slice_list_tail", "instructions.slice_list_tail", "instructions.slice_list_tail", "instructions.prune_ambiguous", "instructions.prune_ambiguous", "instructions.prune_ambiguous", "instructions.load_instruction_data_from_json", "instructions.load_instruction_data_from_json", "instructions.load_instruction_data_from_json", "print", "print", "os.makedirs", "instructions.load_train_dev_test_annotations", "print", "print", "print", "instructions.parse_dataset", "print", "instructions.parse_dataset", "print", "instructions.parse_dataset", "print", "instructions.augment_dataset", "instructions.augment_dataset", "instructions.augment_dataset", "data_io.helpers.save_json", "data_io.helpers.save_json", "data_io.helpers.save_json", "print", "math.ceil", "math.ceil", "math.ceil", "parameters.get_current_parameters", "open", "list", "collections.defaultdict", "set", "data_io.helpers.save_json", "data_io.helpers.save_json", "print", "parameters.get_current_parameters", "json.load", "list"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instruction_cache_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.slice_list_tail", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.slice_list_tail", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.slice_list_tail", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.prune_ambiguous", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.prune_ambiguous", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.prune_ambiguous", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_instruction_data_from_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_instruction_data_from_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_instruction_data_from_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_train_dev_test_annotations", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.parse_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.parse_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.parse_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.augment_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.augment_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.augment_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_all_instructions", "(", "max_size", "=", "0", ",", "do_prune_ambiguous", "=", "False", ",", "full", "=", "False", ")", ":", "\n", "#print(\"max_size:\", max_size)", "\n", "\n", "# If instructions already loaded in memory, return them", "\n", "    ", "global", "cache", "\n", "global", "loaded_corpus", "\n", "global", "loaded_size", "\n", "\n", "if", "full", ":", "\n", "        ", "min_augment_len", "=", "1", "\n", "", "else", ":", "\n", "        ", "min_augment_len", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"min_augment_len\"", ",", "1", ")", "\n", "", "max_augment_len", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"augment_len\"", ",", "1", ")", "\n", "\n", "train_key", "=", "f\"train-{min_augment_len}-{max_augment_len}\"", "\n", "dev_key", "=", "f\"dev-{min_augment_len}-{max_augment_len}\"", "\n", "test_key", "=", "f\"test-{min_augment_len}-{max_augment_len}\"", "\n", "\n", "if", "cache", "is", "not", "None", "and", "train_key", "in", "cache", ":", "# loaded_size == max_size:", "\n", "        ", "train_instructions", "=", "cache", "[", "train_key", "]", "\n", "dev_instructions", "=", "cache", "[", "dev_key", "]", "\n", "test_instructions", "=", "cache", "[", "test_key", "]", "\n", "corpus", "=", "loaded_corpus", "\n", "\n", "# Otherwise see if they've been pre-build in tmp files", "\n", "", "else", ":", "\n", "# Cache", "\n", "        ", "cache_dir", "=", "get_instruction_cache_dir", "(", ")", "\n", "corpus_dir", "=", "get_config_dir", "(", ")", "\n", "\n", "train_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "f\"train_{min_augment_len}-{max_augment_len}.json\"", ")", "\n", "dev_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "f\"dev_{min_augment_len}-{max_augment_len}.json\"", ")", "\n", "test_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "f\"test_{min_augment_len}-{max_augment_len}.json\"", ")", "\n", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "corpus_dir", ",", "\"corpus.json\"", ")", "\n", "wfreq_file", "=", "os", ".", "path", ".", "join", "(", "corpus_dir", ",", "\"word_freq.json\"", ")", "\n", "\n", "corpus_already_exists", "=", "False", "\n", "if", "os", ".", "path", ".", "isfile", "(", "corpus_file", ")", ":", "\n", "            ", "with", "open", "(", "corpus_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "corpus", "=", "list", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "#print(\"corpus: \", len(corpus))", "\n", "", "corpus_already_exists", "=", "True", "\n", "\n", "# If they have been saved in tmp files, load them", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "train_file", ")", ":", "\n", "            ", "train_instructions", "=", "load_instruction_data_from_json", "(", "train_file", ")", "\n", "dev_instructions", "=", "load_instruction_data_from_json", "(", "dev_file", ")", "\n", "test_instructions", "=", "load_instruction_data_from_json", "(", "test_file", ")", "\n", "assert", "corpus_already_exists", ",", "\"Insruction data exists but corpus is gone!\"", "\n", "\n", "# Otherwise rebuild instruction data from annotations", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"REBUILDING INSTRUCTION DATA FOR SEGMENT LENGTHS: {min_augment_len} to {max_augment_len}!\"", ")", "\n", "print", "(", "f\"USING OLD CORPUS: {corpus_already_exists}\"", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "all_instructions", ",", "new_corpus", "=", "defaultdict", "(", "list", ")", ",", "set", "(", ")", "\n", "\n", "train_an", ",", "dev_an", ",", "test_an", "=", "load_train_dev_test_annotations", "(", ")", "\n", "\n", "print", "(", "\"Loaded JSON Data\"", ")", "\n", "\n", "print", "(", "\"Parsing dataset\"", ")", "\n", "print", "(", "\"    train...\"", ")", "\n", "train_instructions", ",", "new_corpus", ",", "word_freq", "=", "parse_dataset", "(", "train_an", ",", "new_corpus", ")", "\n", "print", "(", "\"    dev...\"", ")", "\n", "dev_instructions", ",", "new_corpus", ",", "_", "=", "parse_dataset", "(", "dev_an", ",", "new_corpus", ")", "\n", "print", "(", "\"    test...\"", ")", "\n", "test_instructions", ",", "new_corpus", ",", "_", "=", "parse_dataset", "(", "test_an", ",", "new_corpus", ")", "\n", "\n", "print", "(", "\"Augmenting maybe?\"", ")", "\n", "train_instructions", "=", "augment_dataset", "(", "train_instructions", ",", "merge_len", "=", "max_augment_len", ",", "min_merge_len", "=", "min_augment_len", ")", "\n", "dev_instructions", "=", "augment_dataset", "(", "dev_instructions", ",", "merge_len", "=", "max_augment_len", ",", "min_merge_len", "=", "min_augment_len", ")", "\n", "test_instructions", "=", "augment_dataset", "(", "test_instructions", ",", "merge_len", "=", "max_augment_len", ",", "min_merge_len", "=", "min_augment_len", ")", "\n", "\n", "save_json", "(", "train_instructions", ",", "train_file", ")", "\n", "save_json", "(", "dev_instructions", ",", "dev_file", ")", "\n", "save_json", "(", "test_instructions", ",", "test_file", ")", "\n", "\n", "if", "not", "corpus_already_exists", ":", "\n", "                ", "corpus", "=", "new_corpus", "\n", "save_json", "(", "list", "(", "corpus", ")", ",", "corpus_file", ")", "\n", "save_json", "(", "word_freq", ",", "wfreq_file", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Warning! Regenerated pomdp, but kept the old corpus!\"", ")", "\n", "\n", "", "print", "(", "\"Saved instructions for quicker loading!\"", ")", "\n", "\n", "# Clip datasets to the provided size", "\n", "", "", "if", "max_size", "is", "not", "None", "and", "max_size", ">", "0", ":", "\n", "        ", "num_train", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "*", "0.7", ")", ")", "\n", "num_dev", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "*", "0.15", ")", ")", "\n", "num_test", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "*", "0.15", ")", ")", "\n", "\n", "train_instructions", "=", "slice_list_tail", "(", "train_instructions", ",", "num_train", ")", "\n", "dev_instructions", "=", "slice_list_tail", "(", "dev_instructions", ",", "num_dev", ")", "\n", "test_instructions", "=", "slice_list_tail", "(", "test_instructions", ",", "num_test", ")", "\n", "\n", "", "if", "do_prune_ambiguous", ":", "\n", "        ", "train_instructions", "=", "prune_ambiguous", "(", "train_instructions", ")", "\n", "dev_instructions", "=", "prune_ambiguous", "(", "dev_instructions", ")", "\n", "test_instructions", "=", "prune_ambiguous", "(", "test_instructions", ")", "\n", "\n", "#print(\"Corpus: \", len(corpus))", "\n", "#print(\"Loaded: \", len(train_instructions), len(dev_instructions), len(test_instructions))", "\n", "", "if", "cache", "is", "None", ":", "\n", "        ", "cache", "=", "{", "}", "\n", "\n", "", "cache", "[", "train_key", "]", "=", "train_instructions", "\n", "cache", "[", "dev_key", "]", "=", "dev_instructions", "\n", "cache", "[", "test_key", "]", "=", "test_instructions", "\n", "loaded_corpus", "=", "corpus", "\n", "loaded_size", "=", "max_size", "\n", "\n", "return", "train_instructions", ",", "dev_instructions", ",", "test_instructions", ",", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment": [[214, 228], ["instructions.get_all_instructions", "print", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions"], ["", "def", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "full", "=", "True", ",", "all_instr", "=", "None", ")", ":", "\n", "    ", "if", "all_instr", "is", "None", ":", "\n", "        ", "train_instr", ",", "dev_instr", ",", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", "full", "=", "full", ")", "\n", "all_instr", "=", "{", "**", "train_instr", ",", "**", "dev_instr", ",", "**", "test_instr", "}", "\n", "", "inst_segment", "=", "None", "\n", "try", ":", "\n", "        ", "for", "seg", "in", "all_instr", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", ":", "\n", "            ", "if", "seg", "[", "\"seg_idx\"", "]", "==", "seg_idx", ":", "\n", "                ", "inst_segment", "=", "seg", "\n", "break", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"ding\"", ")", "\n", "print", "(", "e", ")", "\n", "", "return", "inst_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_segs_available_for_env": [[230, 236], ["set", "list", "instructions.get_all_instructions", "sorted"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions"], ["", "def", "get_segs_available_for_env", "(", "env_id", ",", "set_idx", ",", "full", "=", "False", ",", "all_instr", "=", "None", ")", ":", "\n", "    ", "if", "all_instr", "is", "None", ":", "\n", "        ", "train_instr", ",", "dev_instr", ",", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", "full", "=", "full", ")", "\n", "all_instr", "=", "{", "**", "train_instr", ",", "**", "dev_instr", ",", "**", "test_instr", "}", "\n", "", "segs_available", "=", "set", "(", "[", "s", "[", "\"seg_idx\"", "]", "for", "s", "in", "all_instr", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "]", ")", "\n", "return", "list", "(", "sorted", "(", "segs_available", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_instruction": [[238, 241], ["instructions.get_instruction_segment"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment"], ["", "def", "load_instruction", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", ":", "\n", "    ", "segment", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "return", "segment", "[", "\"instruction\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction": [[243, 245], ["set"], "function", ["None"], ["", "def", "clean_instruction", "(", "instruction_str", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "ch", "if", "ch", "not", "in", "set", "(", "string", ".", "punctuation", ")", "else", "' '", "for", "ch", "in", "instruction_str", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.split_instruction": [[247, 250], ["instructions.clean_instruction", "clean_instruction.split"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction"], ["", "def", "split_instruction", "(", "instruction_str", ")", ":", "\n", "    ", "instruction_str", "=", "clean_instruction", "(", "instruction_str", ")", "\n", "return", "instruction_str", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction": [[252, 261], ["instructions.clean_instruction", "instructions.split_instruction", "print", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.split_instruction"], ["", "def", "tokenize_instruction", "(", "instruction_str", ",", "word2token", ")", ":", "\n", "    ", "instruction_str", "=", "clean_instruction", "(", "instruction_str", ")", "\n", "instruction_split", "=", "split_instruction", "(", "instruction_str", ")", "\n", "if", "word2token", "is", "None", ":", "\n", "        ", "print", "(", "\"word2token is None\"", ")", "\n", "", "tokenized", "=", "[", "word2token", "[", "word", "]", "if", "word", "in", "word2token", "else", "0", "for", "word", "in", "instruction_split", "]", "\n", "if", "len", "(", "tokenized", ")", "==", "0", ":", "\n", "        ", "tokenized", "=", "[", "0", "]", "\n", "", "return", "tokenized", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction": [[263, 270], ["isinstance", "instructions.get_all_instructions", "instructions.get_word_to_token_map", "t.item"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map"], ["", "def", "debug_untokenize_instruction", "(", "tokens", ",", "token2term", "=", "None", ")", ":", "\n", "    ", "if", "token2term", "is", "None", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "token2term", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "", "if", "isinstance", "(", "tokens", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "tokens", "=", "[", "t", ".", "item", "(", ")", "for", "t", "in", "tokens", "]", "\n", "", "return", "\" \"", ".", "join", "(", "[", "token2term", "[", "w", "]", "for", "w", "in", "tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.words_to_terms": [[272, 274], ["None"], "function", ["None"], ["", "def", "words_to_terms", "(", "word_list", ",", "word2term", ")", ":", "\n", "    ", "return", "[", "word2term", "[", "word", "]", "for", "word", "in", "word_list", "if", "word", "in", "word2term", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_closest_point_idx": [[276, 280], ["numpy.argmin", "numpy.linalg.norm"], "function", ["None"], ["", "def", "get_closest_point_idx", "(", "path", ",", "point", ")", ":", "\n", "    ", "dists", "=", "[", "np", ".", "linalg", ".", "norm", "(", "point", "-", "p_point", ")", "for", "p_point", "in", "path", "]", "\n", "min_idx", "=", "np", ".", "argmin", "(", "dists", ")", "\n", "return", "min_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.anno_to_config": [[282, 287], ["None"], "function", ["None"], ["", "def", "anno_to_config", "(", "point", ")", ":", "\n", "    ", "if", "UNITY_UNITS", ":", "\n", "        ", "return", "(", "point", "-", "[", "225", ",", "225", "]", ")", "*", "1000", "/", "50", "\n", "", "else", ":", "\n", "        ", "return", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_path_end_indices": [[289, 306], ["len", "data_io.env.load_path", "range", "numpy.asarray", "int", "indices.append", "len", "instructions.get_closest_point_idx"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_closest_point_idx"], ["", "", "def", "get_path_end_indices", "(", "env_id", ",", "entry", ")", ":", "\n", "    ", "num_segments", "=", "len", "(", "entry", "[", "\"instructions\"", "]", ")", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_segments", ")", ":", "\n", "        ", "end_x", "=", "entry", "[", "\"end_x\"", "]", "[", "i", "]", "\n", "end_z", "=", "entry", "[", "\"end_z\"", "]", "[", "i", "]", "\n", "end_point", "=", "np", ".", "asarray", "(", "[", "end_x", ",", "end_z", "]", ")", "\n", "# Convert from Unity-specific to normalized coordinates", "\n", "# TODO FIXME: This check is a potential source of future bugs!", "\n", "# The real language data from unity includes ground truth moves. The templated one doesn't", "\n", "# Unity data stores end coordinate in unity coords, templated data in config coords.", "\n", "if", "len", "(", "entry", "[", "\"moves\"", "]", ")", ">", "0", ":", "\n", "            ", "end_point", "=", "(", "end_point", "-", "[", "225", ",", "225", "]", ")", "*", "(", "1000", "/", "50", ")", "\n", "", "end_idx", "=", "int", "(", "get_closest_point_idx", "(", "path", ",", "end_point", ")", ")", "\n", "indices", ".", "append", "(", "end_idx", ")", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.extract_start_end_pos": [[308, 318], ["len", "range", "numpy.asarray", "start_pos.append", "numpy.asarray", "end_pos.append", "instructions.anno_to_config", "instructions.anno_to_config"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.anno_to_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.anno_to_config"], ["", "def", "extract_start_end_pos", "(", "entry", ")", ":", "\n", "    ", "num_seg", "=", "len", "(", "entry", "[", "\"instructions\"", "]", ")", "\n", "start_pos", "=", "[", "]", "\n", "end_pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_seg", ")", ":", "\n", "        ", "start_p_unity", "=", "np", ".", "asarray", "(", "[", "entry", "[", "\"start_x\"", "]", "[", "i", "]", ",", "entry", "[", "\"start_z\"", "]", "[", "i", "]", "]", ")", "\n", "start_pos", ".", "append", "(", "anno_to_config", "(", "start_p_unity", ")", ")", "\n", "end_p_unity", "=", "np", ".", "asarray", "(", "[", "entry", "[", "\"end_x\"", "]", "[", "i", "]", ",", "entry", "[", "\"end_z\"", "]", "[", "i", "]", "]", ")", "\n", "end_pos", ".", "append", "(", "anno_to_config", "(", "end_p_unity", ")", ")", "\n", "", "return", "start_pos", ",", "end_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.parse_dataset": [[320, 371], ["collections.defaultdict", "enumerate", "list", "list", "numpy.asarray", "numpy.argsort", "collections.OrderedDict", "int", "instructions.get_path_end_indices", "instructions.extract_start_end_pos", "range", "collections.OrderedDict.keys", "collections.OrderedDict.values", "len", "instructions.clean_instruction", "instructions.append", "corpus.union.union", "clean_instruction.split", "all_instructions[].append", "list", "list", "clean_instruction.split", "len", "numpy.deg2rad", "numpy.deg2rad"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_path_end_indices", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.extract_start_end_pos", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "parse_dataset", "(", "data", ",", "corpus", ",", "max_size", "=", "0", ")", ":", "\n", "    ", "word_freq", "=", "{", "}", "\n", "all_instructions", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "dp", "=", "{", "}", "\n", "env", "=", "int", "(", "entry", "[", "\"id\"", "]", ")", "\n", "dp", "[", "\"env\"", "]", "=", "env", "\n", "segment_end_indices", "=", "get_path_end_indices", "(", "env", ",", "entry", ")", "\n", "start_pos", ",", "end_pos", "=", "extract_start_end_pos", "(", "entry", ")", "\n", "text_instructions", "=", "entry", "[", "\"instructions\"", "]", "\n", "instructions", "=", "[", "]", "\n", "prev_seg_end", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "text_instructions", ")", ")", ":", "\n", "            ", "inst", "=", "text_instructions", "[", "i", "]", "\n", "inst", "=", "clean_instruction", "(", "inst", ")", "\n", "start_yaw", "=", "-", "np", ".", "deg2rad", "(", "entry", "[", "\"start_rot\"", "]", "[", "i", "]", ")", "+", "np", ".", "pi", "/", "2", "\n", "if", "\"end_rot\"", "in", "entry", ":", "\n", "                ", "end_yaw", "=", "-", "np", ".", "deg2rad", "(", "entry", "[", "\"end_rot\"", "]", "[", "i", "]", ")", "+", "np", ".", "pi", "/", "2", "\n", "", "else", ":", "\n", "                ", "end_yaw", "=", "0", "\n", "", "seg_entry", "=", "{", "\n", "\"instruction\"", ":", "inst", ",", "\n", "\"end_idx\"", ":", "segment_end_indices", "[", "i", "]", ",", "\n", "\"start_idx\"", ":", "prev_seg_end", ",", "\n", "\"start_pos\"", ":", "list", "(", "start_pos", "[", "i", "]", ")", ",", "\n", "\"start_yaw\"", ":", "start_yaw", ",", "\n", "\"end_yaw\"", ":", "end_yaw", ",", "\n", "\"end_pos\"", ":", "list", "(", "end_pos", "[", "i", "]", ")", "\n", "}", "\n", "instructions", ".", "append", "(", "seg_entry", ")", "\n", "prev_seg_end", "=", "segment_end_indices", "[", "i", "]", "\n", "corpus", "=", "corpus", ".", "union", "(", "inst", ".", "split", "(", ")", ")", "\n", "\n", "# Count word frequencies", "\n", "for", "word", "in", "inst", ".", "split", "(", ")", ":", "\n", "                ", "if", "word", "not", "in", "word_freq", ":", "\n", "                    ", "word_freq", "[", "word", "]", "=", "0", "\n", "", "word_freq", "[", "word", "]", "+=", "1", "\n", "\n", "", "", "dp", "[", "\"instructions\"", "]", "=", "instructions", "\n", "if", "max_size", "==", "0", "or", "len", "(", "all_instructions", ")", "<", "max_size", ":", "\n", "            ", "all_instructions", "[", "env", "]", ".", "append", "(", "dp", ")", "\n", "\n", "", "", "keys", "=", "list", "(", "all_instructions", ".", "keys", "(", ")", ")", "\n", "values", "=", "list", "(", "all_instructions", ".", "values", "(", ")", ")", "\n", "\n", "integer_keys", "=", "np", ".", "asarray", "(", "keys", ")", "\n", "sort_indices", "=", "np", ".", "argsort", "(", "integer_keys", ")", "\n", "\n", "all_instructions", "=", "OrderedDict", "(", "[", "(", "keys", "[", "i", "]", ",", "values", "[", "i", "]", ")", "for", "i", "in", "sort_indices", "]", ")", "\n", "return", "all_instructions", ",", "corpus", ",", "word_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.slice_list_tail": [[373, 381], ["sorted", "enumerate", "list", "dataset.keys"], "function", ["None"], ["", "def", "slice_list_tail", "(", "dataset", ",", "size", ")", ":", "\n", "    ", "keys_int", "=", "sorted", "(", "list", "(", "dataset", ".", "keys", "(", ")", ")", ")", "\n", "dataset_out", "=", "{", "}", "\n", "for", "i", ",", "intkey", "in", "enumerate", "(", "keys_int", ")", ":", "\n", "        ", "if", "i", ">", "size", ":", "\n", "            ", "break", "\n", "", "dataset_out", "[", "intkey", "]", "=", "dataset", "[", "intkey", "]", "\n", "", "return", "dataset_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_instruction_data_from_json": [[383, 390], ["json.load.keys", "open", "json.load", "int"], "function", ["None"], ["", "def", "load_instruction_data_from_json", "(", "json_file", ")", ":", "\n", "    ", "proper_data", "=", "{", "}", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "data_w_string_keys", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "key", "in", "data_w_string_keys", ".", "keys", "(", ")", ":", "\n", "        ", "proper_data", "[", "int", "(", "key", ")", "]", "=", "data_w_string_keys", "[", "key", "]", "\n", "", "return", "proper_data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.is_ambiguous": [[392, 409], ["data_io.env.load_template", "data_io.env.load_env_config", "env_config.definitions.nlp_templates.has_ambiguous_noun_phrase", "print", "exit"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.has_ambiguous_noun_phrase"], ["", "def", "is_ambiguous", "(", "env_id", ")", ":", "\n", "    ", "template", "=", "load_template", "(", "env_id", ")", "\n", "config", "=", "load_env_config", "(", "env_id", ")", "\n", "#TODO: Handle the case where instructions refer to multiple landmarks", "\n", "ref_landmark", "=", "template", "[", "\"landmark1\"", "]", "\n", "occ_count", "=", "0", "\n", "for", "landmark_name", "in", "config", "[", "\"landmarkName\"", "]", ":", "\n", "        ", "if", "has_ambiguous_noun_phrase", "(", "landmark_name", ",", "ref_landmark", ")", ":", "\n", "            ", "occ_count", "+=", "1", "\n", "", "", "if", "occ_count", "==", "0", ":", "\n", "        ", "print", "(", "\"Error! Referred to landmark that's not found in env!\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "# More than one such landmark occurs in the test set", "\n", "", "if", "occ_count", ">", "1", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.prune_ambiguous": [[411, 422], ["print", "instruction_data.items", "print", "str", "instructions.is_ambiguous", "len", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.is_ambiguous"], ["", "", "def", "prune_ambiguous", "(", "instruction_data", ")", ":", "\n", "    ", "print", "(", "\"Pruning ambiguous instructions on dataset of size: \"", "+", "str", "(", "len", "(", "instruction_data", ")", ")", ")", "\n", "data_out", "=", "{", "}", "\n", "num_pruned", "=", "0", "\n", "for", "key", ",", "val", "in", "instruction_data", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "is_ambiguous", "(", "key", ")", ":", "\n", "            ", "data_out", "[", "key", "]", "=", "val", "\n", "", "else", ":", "\n", "            ", "num_pruned", "+=", "1", "\n", "", "", "print", "(", "\"Pruned \"", "+", "str", "(", "num_pruned", ")", "+", "\" envs from instruction data\"", ")", "\n", "return", "data_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.merge_instruction_sets": [[424, 429], ["collections.OrderedDict", "itertools.chain", "collections.OrderedDict", "train.items", "dev.items", "itertools.chain", "collections.OrderedDict.items", "test.items"], "function", ["None"], ["", "def", "merge_instruction_sets", "(", "train", ",", "dev", ",", "test", "=", "None", ")", ":", "\n", "    ", "res", "=", "OrderedDict", "(", "chain", "(", "train", ".", "items", "(", ")", ",", "dev", ".", "items", "(", ")", ")", ")", "\n", "if", "test", "is", "not", "None", ":", "\n", "        ", "res", "=", "OrderedDict", "(", "chain", "(", "res", ".", "items", "(", ")", ",", "test", ".", "items", "(", ")", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_env_ids": [[431, 435], ["instruction_set.keys", "int"], "function", ["None"], ["", "def", "get_env_ids", "(", "instruction_set", ")", ":", "\n", "    ", "keys", "=", "instruction_set", ".", "keys", "(", ")", "\n", "ids", "=", "[", "int", "(", "key", ")", "for", "key", "in", "keys", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.seg_idx_to_ordinal": [[437, 442], ["enumerate", "ValueError"], "function", ["None"], ["", "def", "seg_idx_to_ordinal", "(", "instruction_segments", ",", "seg_idx", ")", ":", "\n", "    ", "for", "i", ",", "seg", "in", "enumerate", "(", "instruction_segments", ")", ":", "\n", "        ", "if", "seg", "[", "\"seg_idx\"", "]", "==", "seg_idx", ":", "\n", "            ", "return", "i", "\n", "", "", "raise", "ValueError", "(", "\"Seg idx can't be converted to ordinal - not present!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists": [[444, 474], ["instructions.get_all_instructions", "sorted", "sorted", "sorted", "setup.get", "parameters.get_current_parameters", "setup.get", "setup.get", "int", "int", "int", "train_instructions.keys", "dev_instructions.keys", "test_instructions.keys"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "get_restricted_env_id_lists", "(", "prune_ambiguous", "=", "False", ",", "full", "=", "False", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "train_instructions", ",", "dev_instructions", ",", "test_instructions", ",", "_", "=", "get_all_instructions", "(", "setup", "[", "\"max_envs\"", "]", ",", "do_prune_ambiguous", "=", "prune_ambiguous", ",", "full", "=", "full", ")", "\n", "\n", "train_envs", "=", "sorted", "(", "[", "int", "(", "key", ")", "for", "key", "in", "train_instructions", ".", "keys", "(", ")", "]", ")", "\n", "dev_envs", "=", "sorted", "(", "[", "int", "(", "key", ")", "for", "key", "in", "dev_instructions", ".", "keys", "(", ")", "]", ")", "\n", "test_envs", "=", "sorted", "(", "[", "int", "(", "key", ")", "for", "key", "in", "test_instructions", ".", "keys", "(", ")", "]", ")", "\n", "\n", "if", "setup", ".", "get", "(", "\"env_range_start\"", ",", "0", ")", ">", "0", ":", "\n", "        ", "train_envs", "=", "[", "e", "for", "e", "in", "train_envs", "if", "e", ">=", "setup", "[", "\"env_range_start\"", "]", "]", "\n", "dev_envs", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "e", ">=", "setup", "[", "\"env_range_start\"", "]", "]", "\n", "test_envs", "=", "[", "e", "for", "e", "in", "test_envs", "if", "e", ">=", "setup", "[", "\"env_range_start\"", "]", "]", "\n", "\n", "", "if", "setup", ".", "get", "(", "\"env_range_end\"", ",", "0", ")", ">", "0", ":", "\n", "        ", "train_envs", "=", "[", "e", "for", "e", "in", "train_envs", "if", "e", "<", "setup", "[", "\"env_range_end\"", "]", "]", "\n", "dev_envs", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "e", "<", "setup", "[", "\"env_range_end\"", "]", "]", "\n", "test_envs", "=", "[", "e", "for", "e", "in", "test_envs", "if", "e", "<", "setup", "[", "\"env_range_end\"", "]", "]", "\n", "\n", "", "if", "setup", "[", "\"max_envs\"", "]", ">", "0", ":", "\n", "        ", "train_envs", "=", "train_envs", "[", ":", "setup", "[", "\"max_envs\"", "]", "]", "\n", "dev_envs", "=", "dev_envs", "[", ":", "setup", "[", "\"max_envs\"", "]", "]", "\n", "test_envs", "=", "test_envs", "[", ":", "setup", "[", "\"max_envs\"", "]", "]", "\n", "\n", "", "specenvs", "=", "setup", ".", "get", "(", "\"only_specific_envs\"", ")", "\n", "if", "specenvs", ":", "\n", "        ", "train_envs", "=", "[", "e", "for", "e", "in", "train_envs", "if", "e", "in", "specenvs", "]", "\n", "dev_envs", "=", "[", "e", "for", "e", "in", "dev_envs", "if", "e", "in", "specenvs", "]", "\n", "test_envs", "=", "[", "e", "for", "e", "in", "test_envs", "if", "e", "in", "specenvs", "]", "\n", "\n", "", "return", "train_envs", ",", "dev_envs", ",", "test_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_correct_eval_env_id_list": [[476, 504], ["instructions.get_restricted_env_id_lists", "setup.get", "parameters.get_current_parameters", "print", "setup.get", "setup.get", "print", "setup.get", "print", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "get_correct_eval_env_id_list", "(", ")", ":", "\n", "    ", "setup", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "\n", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", "setup", "[", "\"prune_ambiguous\"", "]", ")", "\n", "\n", "eval_envs", "=", "dev_envs", "\n", "if", "setup", "[", "\"eval_env_set\"", "]", "==", "\"train\"", ":", "\n", "        ", "print", "(", "\"Using TRAIN set!\"", ")", "\n", "eval_envs", "=", "train_envs", "\n", "", "elif", "setup", "[", "\"eval_env_set\"", "]", "==", "\"test\"", ":", "\n", "        ", "print", "(", "\"Using TEST set!\"", ")", "\n", "eval_envs", "=", "test_envs", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Using DEV set!\"", ")", "\n", "\n", "", "if", "setup", ".", "get", "(", "\"env_range_start\"", ",", "0", ")", ">", "0", ":", "\n", "        ", "eval_envs", "=", "[", "e", "for", "e", "in", "eval_envs", "if", "e", ">=", "setup", "[", "\"env_range_start\"", "]", "]", "\n", "", "if", "setup", ".", "get", "(", "\"env_range_end\"", ",", "0", ")", ">", "0", ":", "\n", "        ", "eval_envs", "=", "[", "e", "for", "e", "in", "eval_envs", "if", "e", "<", "setup", "[", "\"env_range_end\"", "]", "]", "\n", "", "if", "setup", "[", "\"max_envs\"", "]", ">", "0", ":", "\n", "        ", "eval_envs", "=", "eval_envs", "[", ":", "setup", "[", "\"max_envs\"", "]", "]", "\n", "\n", "", "if", "setup", ".", "get", "(", "\"only_specific_envs\"", ",", "False", ")", ":", "\n", "        ", "print", "(", "\"Using only specific envs!\"", ")", "\n", "specific_envs", "=", "setup", ".", "get", "(", "\"only_specific_envs\"", ")", "\n", "for", "specific_env", "in", "specific_envs", ":", "\n", "            ", "assert", "specific_env", "in", "eval_envs", ",", "\"Env id from only_specific_envs does not match the rest of the specification!\"", "\n", "", "return", "specific_envs", "\n", "", "return", "eval_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_env_id_lists_perception": [[506, 525], ["min", "round", "round", "print", "numpy.arange", "numpy.random.shuffle", "int", "len", "os.listdir", "dirname.endswith", "data_io.paths.get_env_config_dir", "dirname.replace().split", "dirname.replace"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_dir"], ["", "def", "get_env_id_lists_perception", "(", "max_envs", ",", "p_train", "=", "0.8", ",", "p_dev", "=", "0.2", ",", "p_test", "=", "0.0", ")", ":", "\n", "    ", "assert", "(", "p_train", "+", "p_dev", "+", "p_test", ">", "0.99", ")", "\n", "assert", "(", "p_train", "+", "p_dev", "+", "p_test", "<", "1.01", ")", "\n", "config_files", "=", "[", "dirname", "for", "dirname", "in", "os", ".", "listdir", "(", "get_env_config_dir", "(", ")", ")", "if", "dirname", ".", "endswith", "(", "\".json\"", ")", "]", "\n", "env_ids", "=", "[", "int", "(", "dirname", ".", "replace", "(", "'.'", ",", "'_'", ")", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", ")", "for", "dirname", "in", "config_files", "]", "\n", "\n", "n", "=", "min", "(", "len", "(", "env_ids", ")", ",", "max_envs", ")", "\n", "n_train", "=", "round", "(", "n", "*", "p_train", ")", "\n", "n_dev", "=", "round", "(", "n", "*", "p_dev", ")", "\n", "n_test", "=", "n", "-", "n_train", "-", "n_dev", "\n", "print", "(", "n_train", ",", "n_dev", ",", "n_test", ")", "\n", "idx", "=", "np", ".", "arange", "(", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "\n", "train_envs", "=", "[", "env_ids", "[", "i", "]", "for", "i", "in", "idx", "[", ":", "n_train", "]", "]", "\n", "dev_envs", "=", "[", "env_ids", "[", "i", "]", "for", "i", "in", "idx", "[", "n_train", ":", "n_train", "+", "n_dev", "]", "]", "\n", "test_envs", "=", "[", "env_ids", "[", "i", "]", "for", "i", "in", "idx", "[", "n_test", ":", "]", "]", "\n", "\n", "return", "train_envs", ",", "dev_envs", ",", "test_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_english_vocabulary": [[527, 542], ["data_io.paths.get_english_vocab_path", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_english_vocab_path"], ["", "def", "load_english_vocabulary", "(", ")", ":", "\n", "    ", "path", "=", "get_english_vocab_path", "(", ")", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "vocab", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "# Add words missing in the dictionary:", "\n", "", "vocab", "[", "\"dumpster\"", "]", "=", "1", "\n", "vocab", "[", "\"waterfountain\"", "]", "=", "1", "\n", "vocab", "[", "\"photobooth\"", "]", "=", "1", "\n", "vocab", "[", "\"streetlamp\"", "]", "=", "1", "\n", "vocab", "[", "\"kingkong\"", "]", "=", "1", "\n", "vocab", "[", "\"gravesite\"", "]", "=", "1", "\n", "vocab", "[", "\"trashcan\"", "]", "=", "1", "\n", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map": [[544, 588], ["list", "instructions.load_landmark_alignments", "list", "enumerate", "len", "enumerate", "sorted", "term2word.keys"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_landmark_alignments"], ["", "def", "get_word_to_token_map", "(", "corpus", ",", "use_thesaurus", "=", "True", ")", ":", "\n", "    ", "corpus", "=", "list", "(", "corpus", ")", "\n", "thesaurus", "=", "load_landmark_alignments", "(", ")", "\n", "\n", "# Final outputs", "\n", "word2token", "=", "{", "}", "\n", "token2term", "=", "{", "}", "\n", "\n", "# If we don't have a thesaurus, give each word in the corpus a unique ID", "\n", "if", "thesaurus", "is", "None", "or", "not", "use_thesaurus", ":", "\n", "        ", "for", "i", ",", "w", "in", "enumerate", "(", "corpus", ")", ":", "\n", "            ", "word2token", "[", "w", "]", "=", "i", "\n", "token2term", "[", "i", "]", "=", "w", "\n", "\n", "", "return", "token2term", ",", "word2token", "\n", "\n", "# Intermediate storage", "\n", "", "term2token", "=", "{", "}", "\n", "word2term", "=", "thesaurus", "[", "\"word2term\"", "]", "\n", "term2word", "=", "thesaurus", "[", "\"term2word\"", "]", "\n", "\n", "# If we do have a thesaurus, tokenize in a smarter way.", "\n", "# We will have a token for each term in the thesaurus", "\n", "# every word that's not found in the thesaurus will be assigned a special \"unknown\" token", "\n", "# every token will map back to it's term in the thesaurus (not the word). Unknown tokens will map to a special term", "\n", "terms", "=", "list", "(", "sorted", "(", "term2word", ".", "keys", "(", ")", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "terms", ")", ":", "\n", "        ", "term2token", "[", "t", "]", "=", "i", "\n", "\n", "", "unknown_token", "=", "len", "(", "terms", ")", "\n", "unknown_term", "=", "\"NA\"", "\n", "\n", "for", "word", "in", "corpus", ":", "\n", "        ", "if", "word", "in", "word2term", ":", "\n", "            ", "term", "=", "word2term", "[", "word", "]", "\n", "token", "=", "term2token", "[", "term", "]", "\n", "word2token", "[", "word", "]", "=", "token", "\n", "token2term", "[", "token", "]", "=", "term", "\n", "", "else", ":", "\n", "            ", "word2token", "[", "word", "]", "=", "unknown_token", "\n", "\n", "", "", "token2term", "[", "unknown_token", "]", "=", "unknown_term", "\n", "\n", "return", "token2term", ",", "word2token", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.save_landmark_alignments": [[590, 595], ["data_io.paths.get_thesaurus_path", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_thesaurus_path"], ["", "def", "save_landmark_alignments", "(", "alignments", ")", ":", "\n", "    ", "path", "=", "get_thesaurus_path", "(", ")", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "alignments", ",", "fp", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "\"Saved thesaurus\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_landmark_alignments": [[597, 610], ["data_io.paths.get_thesaurus_path", "open", "json.load", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_thesaurus_path"], ["", "def", "load_landmark_alignments", "(", ")", ":", "\n", "    ", "global", "loaded_alignments", "\n", "if", "loaded_alignments", "is", "None", ":", "\n", "        ", "path", "=", "get_thesaurus_path", "(", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                ", "loaded_alignments", "=", "json", ".", "load", "(", "fp", ")", "\n", "#print(\"Loaded thesaurus with \" + str(len(loaded_alignments[\"term2word\"])) + \" terms\")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Failed loading thesaurus\"", ")", "\n", "loaded_alignments", "=", "None", "\n", "\n", "", "", "return", "loaded_alignments", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_mentioned_landmarks": [[612, 631], ["instructions.split_instruction", "env_config.definitions.landmarks.get_landmark_name_to_index", "instructions.words_to_terms", "set", "list", "instructions.clean_instruction", "list.add"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.split_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.words_to_terms", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction"], ["", "def", "get_mentioned_landmarks", "(", "thesaurus", ",", "str_instruction", ")", ":", "\n", "    ", "split_instr", "=", "split_instruction", "(", "clean_instruction", "(", "str_instruction", ")", ")", "\n", "word2term", "=", "thesaurus", "[", "\"word2term\"", "]", "\n", "term_groundings", "=", "thesaurus", "[", "\"term_groundings\"", "]", "\n", "lm_name2index", "=", "get_landmark_name_to_index", "(", ")", "\n", "\n", "# Map each word in the instruction to it's corresponding term:", "\n", "split_instr_terms", "=", "words_to_terms", "(", "split_instr", ",", "word2term", ")", "\n", "\n", "mentioned_landmark_names", "=", "set", "(", ")", "\n", "\n", "# For each term, find all the landmarks that have been mentioned", "\n", "for", "term", "in", "split_instr_terms", ":", "\n", "        ", "for", "landmark_name", "in", "term_groundings", "[", "term", "]", "[", "\"landmarks\"", "]", ":", "\n", "            ", "mentioned_landmark_names", ".", "add", "(", "landmark_name", ")", "\n", "\n", "", "", "mentioned_landmark_names", "=", "list", "(", "mentioned_landmark_names", ")", "\n", "mentioned_landmark_indices", "=", "[", "lm_name2index", "[", "name", "]", "for", "name", "in", "mentioned_landmark_names", "]", "\n", "return", "mentioned_landmark_names", ",", "mentioned_landmark_indices", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_config_metadata": [[15, 19], ["open", "json.load", "data_io.paths.get_config_metadata_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_metadata_path"], ["def", "load_config_metadata", "(", ")", ":", "\n", "    ", "with", "open", "(", "paths", ".", "get_config_metadata_path", "(", ")", ")", "as", "fp", ":", "\n", "        ", "cmd", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config": [[21, 25], ["open", "json.load", "data_io.paths.get_env_config_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_path"], ["", "def", "load_env_config", "(", "env_id", ")", ":", "\n", "    ", "with", "open", "(", "paths", ".", "get_env_config_path", "(", "env_id", ")", ")", "as", "fp", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_env_config": [[26, 38], ["env.load_env_config", "data_io.units.UnrealUnits", "enumerate", "data_io.units.UnrealUnits.pos2d_to_as", "config[].append", "config[].append", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "load_and_convert_env_config", "(", "env_id", ")", ":", "\n", "    ", "config", "=", "load_env_config", "(", "env_id", ")", "\n", "units", "=", "UnrealUnits", "(", ")", "\n", "config", "[", "\"x_pos_as\"", "]", "=", "[", "]", "\n", "config", "[", "\"y_pos_as\"", "]", "=", "[", "]", "\n", "for", "i", ",", "landmark", "in", "enumerate", "(", "config", "[", "\"landmarkName\"", "]", ")", ":", "\n", "        ", "x", "=", "config", "[", "\"xPos\"", "]", "[", "i", "]", "\n", "y", "=", "config", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "conv", "=", "units", ".", "pos2d_to_as", "(", "np", ".", "asarray", "(", "[", "x", ",", "y", "]", ")", ")", "\n", "config", "[", "\"x_pos_as\"", "]", ".", "append", "(", "conv", "[", "0", "]", ")", "\n", "config", "[", "\"y_pos_as\"", "]", ".", "append", "(", "conv", "[", "1", "]", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.configs_equal": [[39, 45], ["env.load_env_config", "env.load_env_config"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config"], ["", "def", "configs_equal", "(", "env_id_a", ",", "env_id_b", ")", ":", "\n", "    ", "if", "env_id_a", "<", "0", "or", "env_id_b", "<", "0", ":", "\n", "        ", "return", "False", "\n", "", "config_a", "=", "load_env_config", "(", "env_id_a", ")", "\n", "config_b", "=", "load_env_config", "(", "env_id_b", ")", "\n", "return", "config_a", "==", "config_b", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.get_available_env_ids": [[46, 53], ["data_io.paths.get_env_config_dir", "os.listdir", "list", "int", "sorted", "j.endswith", "[].split", "j.split"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_dir"], ["", "def", "get_available_env_ids", "(", ")", ":", "\n", "    ", "conf_dir", "=", "paths", ".", "get_env_config_dir", "(", ")", "\n", "jsons", "=", "os", ".", "listdir", "(", "conf_dir", ")", "\n", "jsons", "=", "[", "j", "for", "j", "in", "jsons", "if", "j", ".", "endswith", "(", "\".json\"", ")", "]", "\n", "# extract ID from random_config_ID.json where ID is an integer", "\n", "ids", "=", "[", "int", "(", "j", ".", "split", "(", "\"_\"", ")", "[", "2", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "for", "j", "in", "jsons", "]", "\n", "return", "list", "(", "sorted", "(", "ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.get_list_of_sample_ids": [[55, 61], ["data_io.paths.get_poses_dir", "os.listdir", "list", "int", "sorted", "j.endswith", "[].split", "j.split"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_poses_dir"], ["", "def", "get_list_of_sample_ids", "(", "env_id", ")", ":", "\n", "    ", "poses_dir", "=", "paths", ".", "get_poses_dir", "(", "env_id", ")", "\n", "jsons", "=", "os", ".", "listdir", "(", "poses_dir", ")", "\n", "jsons", "=", "[", "j", "for", "j", "in", "jsons", "if", "j", ".", "endswith", "(", "\".json\"", ")", "]", "\n", "pose_ids", "=", "[", "int", "(", "j", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "for", "j", "in", "jsons", "]", "\n", "return", "list", "(", "sorted", "(", "pose_ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template": [[63, 70], ["open", "json.load", "data_io.paths.get_template_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_template_path"], ["", "def", "load_template", "(", "env_id", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "paths", ".", "get_template_path", "(", "env_id", ")", ")", "as", "fp", ":", "\n", "            ", "template_dict", "=", "json", ".", "load", "(", "fp", ")", "\n", "return", "template_dict", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_instructions": [[72, 77], ["open", "fp.read", "data_io.paths.get_instructions_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instructions_path"], ["", "", "def", "load_instructions", "(", "env_id", ")", ":", "\n", "# TODO: Get this from annotations", "\n", "    ", "with", "open", "(", "paths", ".", "get_instructions_path", "(", "env_id", ")", ")", "as", "fp", ":", "\n", "        ", "instructions", "=", "fp", ".", "read", "(", "10000", ")", "\n", "return", "instructions", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path": [[79, 92], ["data_io.paths.get_anno_curve_path", "numpy.asarray", "os.path.isfile", "data_io.helpers.load_json", "data_io.helpers.load_json", "print", "list", "data_io.paths.get_curve_path", "zip", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_anno_curve_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_curve_path"], ["", "", "def", "load_path", "(", "env_id", ",", "anno", "=", "True", ")", ":", "\n", "    ", "anno_curve_path", "=", "paths", ".", "get_anno_curve_path", "(", "env_id", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "anno_curve_path", ")", "and", "anno", ":", "\n", "        ", "path", "=", "load_json", "(", "anno_curve_path", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "load_json", "(", "paths", ".", "get_curve_path", "(", "env_id", ")", ")", "\n", "", "if", "path", "is", "None", ":", "\n", "        ", "print", "(", "\"Ground truth path not found for env: \"", "+", "str", "(", "env_id", ")", ")", "\n", "return", "path", "\n", "", "x_arr", "=", "path", "[", "'x_array'", "]", "\n", "y_arr", "=", "path", "[", "'z_array'", "]", "\n", "path", "=", "np", ".", "asarray", "(", "list", "(", "zip", "(", "x_arr", ",", "y_arr", ")", ")", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_path": [[93, 97], ["data_io.units.UnrealUnits", "numpy.asarray", "data_io.units.UnrealUnits.pos2d_to_as"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as"], ["", "def", "convert_path", "(", "raw_path", ")", ":", "\n", "    ", "units", "=", "UnrealUnits", "(", ")", "\n", "conv_path", "=", "np", ".", "asarray", "(", "[", "units", ".", "pos2d_to_as", "(", "p", ")", "for", "p", "in", "raw_path", "]", ")", "\n", "return", "conv_path", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_path": [[98, 100], ["env.convert_path", "env.load_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path"], ["", "def", "load_and_convert_path", "(", "env_id", ",", "anno", "=", "True", ")", ":", "\n", "    ", "return", "convert_path", "(", "load_path", "(", "env_id", ",", "anno", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_pos_from_config": [[101, 105], ["data_io.units.UnrealUnits", "data_io.units.UnrealUnits.pos2d_to_as"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as"], ["", "def", "convert_pos_from_config", "(", "pos", ")", ":", "\n", "    ", "units", "=", "UnrealUnits", "(", ")", "\n", "pos_conv", "=", "units", ".", "pos2d_to_as", "(", "pos", ")", "\n", "return", "pos_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_yaw_from_config": [[106, 110], ["data_io.units.UnrealUnits", "data_io.units.UnrealUnits.yaw_to_as"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.yaw_to_as"], ["", "def", "convert_yaw_from_config", "(", "yaw", ")", ":", "\n", "    ", "units", "=", "UnrealUnits", "(", ")", "\n", "yaw_conv", "=", "units", ".", "yaw_to_as", "(", "yaw", ")", "\n", "return", "yaw_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.pose_ros_enu_to_airsim_ned": [[111, 157], ["pos.copy", "quat_out.copy.copy", "quat.copy.copy", "transforms3d.quaternions.quat2mat", "transforms3d.euler.mat2euler", "transforms3d.euler.euler2mat", "numpy.asarray", "numpy.dot", "numpy.dot", "numpy.asarray", "numpy.dot", "transforms3d.quaternions.mat2quat", "transforms3d.euler.quat2euler", "print"], "function", ["None"], ["", "def", "pose_ros_enu_to_airsim_ned", "(", "pos", ",", "quat", ")", ":", "\n", "    ", "pos_as", "=", "pos", ".", "copy", "(", ")", "\n", "quat_out", "=", "quat", ".", "copy", "(", ")", "\n", "\n", "# ROS xyzw to Transforms3D/AirSim wxyz", "\n", "quat_out", "[", "1", ":", "4", "]", "=", "quat", "[", "0", ":", "3", "]", "\n", "quat_out", "[", "0", "]", "=", "quat", "[", "3", "]", "\n", "quat", "=", "quat_out", ".", "copy", "(", ")", "\n", "\n", "R_map_enu_to_drn_enu", "=", "quaternions", ".", "quat2mat", "(", "quat", ")", "\n", "\n", "rot_x", ",", "rot_y", ",", "rot_z", "=", "euler", ".", "mat2euler", "(", "R_map_enu_to_drn_enu", ")", "\n", "R_map_enu_to_drn_enu", "=", "euler", ".", "euler2mat", "(", "rot_x", ",", "-", "rot_y", ",", "rot_z", ")", "\n", "\n", "R_ros_enu_to_as_ned", "=", "np", ".", "asarray", "(", "[", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "1", "]", "\n", "]", ")", "\n", "R_as_ned_to_ros_enu", "=", "R_ros_enu_to_as_ned", ".", "T", "\n", "\n", "R_map_ned_to_drn_enu", "=", "np", ".", "dot", "(", "R_map_enu_to_drn_enu", ",", "R_as_ned_to_ros_enu", ")", "\n", "R_map_ned_to_drn_ned", "=", "np", ".", "dot", "(", "R_ros_enu_to_as_ned", ",", "R_map_ned_to_drn_enu", ")", "\n", "R_drn_ned_to_drn_as", "=", "np", ".", "asarray", "(", "[", "\n", "[", "0", ",", "-", "1", ",", "0", "]", ",", "# 0, -1, 0", "\n", "[", "1", ",", "0", ",", "0", "]", ",", "# 1, 0, 0", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "R_map_ned_to_drn_as", "=", "np", ".", "dot", "(", "R_drn_ned_to_drn_as", ",", "R_map_ned_to_drn_ned", ")", "\n", "\n", "quat_as", "=", "quaternions", ".", "mat2quat", "(", "R_map_ned_to_drn_as", ")", "\n", "\n", "as_rot_x", ",", "as_rot_y", ",", "as_rot_z", "=", "euler", ".", "quat2euler", "(", "quat_as", ")", "\n", "print", "(", "\"AirSim euler: \"", ",", "as_rot_x", "*", "180", "/", "np", ".", "pi", ",", "as_rot_y", "*", "180", "/", "np", ".", "pi", ",", "as_rot_z", "*", "180", "/", "np", ".", "pi", ")", "\n", "\n", "# ENU to NED Position", "\n", "# The drone in AirSim starts at 1m height, so we have to subtract back 1m. In practice a bit less to account", "\n", "# for the fact that the real-world camera is mounted a bit higher.", "\n", "pos_as", "[", "2", "]", "=", "-", "pos", "[", "2", "]", "+", "0.8", "\n", "pos_as", "[", "1", "]", "=", "pos", "[", "0", "]", "\n", "pos_as", "[", "0", "]", "=", "pos", "[", "1", "]", "\n", "\n", "#quat_as = euler.euler2quat(0, 0, 0)", "\n", "#pos_as = [0, 0, 0]", "\n", "\n", "return", "pos_as", ",", "quat_as", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_real_drone_pose": [[159, 184], ["data_io.paths.get_pose_path", "numpy.asarray", "numpy.asarray", "env.pose_ros_enu_to_airsim_ned", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_pose_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.pose_ros_enu_to_airsim_ned"], ["", "def", "load_real_drone_pose", "(", "env_id", ",", "pose_id", ")", ":", "\n", "    ", "\"\"\"\n    Loads drone pose saved from ROS and converts to AirSim convention\n    AirSim convention is NED, with quaternions in w,x,y,z order.\n    ROS convention is ENU with quaternions in x,y,z,w order.\n    :param env_id:\n    :param pose_id:\n    :return:\n    \"\"\"", "\n", "path", "=", "paths", ".", "get_pose_path", "(", "env_id", ",", "pose_id", ")", "\n", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "        ", "pose_json", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "drone_pose", "=", "pose_json", "[", "\"drone\"", "]", "\n", "# The real drone pose is expressed in the map ENU frame", "\n", "# The drone's axis are: x-forward, y-right, z-up", "\n", "# The simulator drone pose is expressed in the map NED frame", "\n", "# The sim drone's axis are x-forward, y-left, z-down", "\n", "# TODO: Convert properly", "\n", "\n", "pos", "=", "np", ".", "asarray", "(", "drone_pose", "[", "\"position\"", "]", ")", "\n", "quat", "=", "np", ".", "asarray", "(", "drone_pose", "[", "\"orientation\"", "]", ")", "\n", "\n", "pos", ",", "quat", "=", "pose_ros_enu_to_airsim_ned", "(", "pos", ",", "quat", ")", "\n", "\n", "return", "pos", ",", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_real_drone_image": [[186, 195], ["data_io.paths.get_real_img_path", "imageio.imread"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_real_img_path"], ["", "def", "load_real_drone_image", "(", "env_id", ",", "pose_id", ")", ":", "\n", "    ", "\"\"\"\n    :param env_id:\n    :param pose_id:\n    :return:\n    \"\"\"", "\n", "path", "=", "paths", ".", "get_real_img_path", "(", "env_id", ",", "pose_id", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.save_sim_drone_image": [[197, 207], ["data_io.paths.get_sim_img_path", "os.makedirs", "print", "imageio.imsave", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_img_path"], ["", "def", "save_sim_drone_image", "(", "env_id", ",", "pose_id", ",", "img", ")", ":", "\n", "    ", "\"\"\"\n    :param env_id:\n    :param pose_id:\n    :return:\n    \"\"\"", "\n", "path", "=", "paths", ".", "get_sim_img_path", "(", "env_id", ",", "pose_id", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "\"imsave: \"", ",", "path", ")", "\n", "imsave", "(", "path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.save_anno_path": [[209, 217], ["data_io.paths.get_anno_curve_path", "data_io.helpers.save_json", "list", "list"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_anno_curve_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json"], ["", "def", "save_anno_path", "(", "env_id", ",", "path", ")", ":", "\n", "    ", "anno_curve_path", "=", "paths", ".", "get_anno_curve_path", "(", "env_id", ")", "\n", "path_json", "=", "{", "\n", "'x_array'", ":", "list", "(", "path", "[", ":", ",", "0", "]", ")", ",", "\n", "'z_array'", ":", "list", "(", "path", "[", ":", ",", "1", "]", ")", "\n", "}", "\n", "save_json", "(", "path_json", ",", "anno_curve_path", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img": [[219, 243], ["imageio.imread", "numpy.array", "data_io.paths.get_env_image_path", "skimage.resize", "numpy.flip", "np.concatenate.transpose", "numpy.concatenate", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_image_path"], ["", "def", "load_env_img", "(", "env_id", ",", "\n", "width", "=", "None", ",", "\n", "height", "=", "None", ",", "\n", "real_drone", "=", "False", ",", "\n", "origin_bottom_left", "=", "False", ",", "\n", "flipdiag", "=", "False", ",", "\n", "alpha", "=", "False", ",", "\n", "directory_override", "=", "None", ")", ":", "\n", "    ", "img", "=", "imread", "(", "paths", ".", "get_env_image_path", "(", "env_id", ",", "real_drone", "=", "real_drone", ",", "dir_override", "=", "directory_override", ")", ")", "\n", "if", "width", "is", "not", "None", ":", "\n", "        ", "img", "=", "transform", ".", "resize", "(", "\n", "img", ",", "[", "width", ",", "height", "]", ",", "mode", "=", "\"constant\"", ")", "\n", "\n", "# Flip vertically to put origin on bottom-left corner", "\n", "", "if", "origin_bottom_left", ":", "\n", "        ", "img", "=", "np", ".", "flip", "(", "img", ",", "0", ")", "\n", "\n", "", "if", "flipdiag", ":", "\n", "        ", "img", "=", "img", ".", "transpose", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "", "if", "alpha", ":", "\n", "        ", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "np", ".", "ones", "(", "img", "[", ":", ",", ":", ",", "0", ":", "1", "]", ".", "shape", ")", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.save_env_img": [[245, 251], ["data_io.paths.get_env_image_path", "os.path.dirname", "os.makedirs", "imageio.imsave", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_image_path"], ["", "def", "save_env_img", "(", "env_id", ",", "img", ",", "real_drone", "=", "False", ")", ":", "\n", "    ", "path", "=", "paths", ".", "get_env_image_path", "(", "env_id", ",", "real_drone", "=", "real_drone", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "imsave", "(", "path", ",", "img", ")", "\n", "print", "(", "f\"Saved env image for env {env_id} in {path}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.save_env_split": [[252, 255], ["data_io.paths.get_env_split_path", "data_io.helpers.save_json"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_split_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json"], ["", "def", "save_env_split", "(", "dict_of_lists", ")", ":", "\n", "    ", "path", "=", "paths", ".", "get_env_split_path", "(", ")", "\n", "save_json", "(", "dict_of_lists", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_split": [[257, 261], ["data_io.paths.get_env_split_path", "data_io.helpers.load_json"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_split_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json"], ["", "def", "load_env_split", "(", ")", ":", "\n", "    ", "path", "=", "paths", ".", "get_env_split_path", "(", ")", "\n", "split", "=", "load_json", "(", "path", ")", "\n", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.get_landmark_locations_airsim": [[263, 283], ["data_io.units.UnrealUnits", "enumerate", "env_config.definitions.landmarks.get_landmark_name_to_index", "env.load_env_config", "numpy.asarray", "numpy.zeros", "data_io.units.UnrealUnits.pos2d_to_as", "landmark_names.append", "landmark_positions.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_landmark_locations_airsim", "(", "config_json", "=", "None", ",", "add_empty", "=", "False", ",", "env_id", "=", "None", ")", ":", "\n", "    ", "assert", "config_json", "is", "not", "None", "or", "env_id", "is", "not", "None", ",", "\"At least one of config_json or env_id must be provided\"", "\n", "if", "config_json", "is", "None", ":", "\n", "        ", "config_json", "=", "load_env_config", "(", "env_id", ")", "\n", "", "landmark_names", "=", "[", "]", "\n", "landmark_positions", "=", "[", "]", "\n", "units", "=", "UnrealUnits", "(", ")", "\n", "for", "i", ",", "landmarkName", "in", "enumerate", "(", "config_json", "[", "\"landmarkName\"", "]", ")", ":", "\n", "        ", "x_pos", "=", "config_json", "[", "\"xPos\"", "]", "[", "i", "]", "\n", "y_pos", "=", "config_json", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "pt", "=", "np", ".", "asarray", "(", "[", "x_pos", ",", "y_pos", "]", ")", "\n", "pt_as", "=", "np", ".", "zeros", "(", "3", ")", "\n", "pt_as", "[", "0", ":", "2", "]", "=", "units", ".", "pos2d_to_as", "(", "pt", ")", "\n", "landmark_names", ".", "append", "(", "landmarkName", ")", "\n", "landmark_positions", ".", "append", "(", "pt_as", ")", "\n", "\n", "", "landmark_indices", "=", "get_landmark_name_to_index", "(", "add_empty", "=", "add_empty", ")", "\n", "landmark_indices", "=", "[", "landmark_indices", "[", "name", "]", "for", "name", "in", "landmark_names", "]", "\n", "\n", "return", "landmark_names", ",", "landmark_indices", ",", "landmark_positions", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._get_param_server_dir": [[13, 17], ["os.path.realpath", "os.path.dirname"], "function", ["None"], ["def", "_get_param_server_dir", "(", ")", ":", "\n", "    ", "pyfile", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", "\n", "pydir", "=", "os", ".", "path", ".", "dirname", "(", "pyfile", ")", "\n", "return", "pydir", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._get_past_run_dir": [[19, 24], ["parameter_server._get_param_server_dir", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._get_param_server_dir"], ["", "def", "_get_past_run_dir", "(", "run_name", ")", ":", "\n", "    ", "pydir", "=", "_get_param_server_dir", "(", ")", "\n", "past_runs_dir", "=", "os", ".", "path", ".", "join", "(", "pydir", ",", "\"past_runs_pre_submission\"", ")", "\n", "run_dir", "=", "os", ".", "path", ".", "join", "(", "past_runs_dir", ",", "run_name", ")", "\n", "return", "run_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._load_params": [[26, 34], ["parameter_server._get_param_server_dir", "os.path.join", "os.path.join", "data_io.helpers.load_json"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._get_param_server_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.load_json"], ["", "def", "_load_params", "(", "setup_name", ")", ":", "\n", "    ", "pydir", "=", "_get_param_server_dir", "(", ")", "\n", "paramsdir", "=", "os", ".", "path", ".", "join", "(", "pydir", ",", "\"run_params\"", ")", "\n", "paramsname", "=", "setup_name", "+", "\".json\"", "\n", "paramsfile", "=", "os", ".", "path", ".", "join", "(", "paramsdir", ",", "paramsname", ")", "\n", "params", "=", "load_json", "(", "paramsfile", ")", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_state": [[36, 41], ["None"], "function", ["None"], ["", "def", "get_state", "(", ")", ":", "\n", "    ", "global", "CURRENT_RUN", ",", "CURRENT_NAMESPACE", ",", "CURRENT_PARAMS", "\n", "return", "{", "\"CURRENT_PARAMS\"", ":", "CURRENT_PARAMS", ",", "\n", "\"CURRENT_NAMESPACE\"", ":", "CURRENT_NAMESPACE", ",", "\n", "\"CURRENT_RUN\"", ":", "CURRENT_RUN", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.set_state": [[43, 48], ["None"], "function", ["None"], ["", "def", "set_state", "(", "state", ")", ":", "\n", "    ", "global", "CURRENT_RUN", ",", "CURRENT_NAMESPACE", ",", "CURRENT_PARAMS", "\n", "CURRENT_RUN", "=", "state", "[", "\"CURRENT_RUN\"", "]", "\n", "CURRENT_NAMESPACE", "=", "state", "[", "\"CURRENT_NAMESPACE\"", "]", "\n", "CURRENT_PARAMS", "=", "state", "[", "\"CURRENT_PARAMS\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.log_experiment_start": [[50, 55], ["parameter_server._get_past_run_dir", "os.path.join", "data_io.helpers.save_json"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._get_past_run_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json"], ["", "def", "log_experiment_start", "(", "run_name", ")", ":", "\n", "    ", "global", "CURRENT_PARAMS", ",", "CURRENT_RUN", "\n", "rundir", "=", "_get_past_run_dir", "(", "run_name", ")", "\n", "paramsfile", "=", "os", ".", "path", ".", "join", "(", "rundir", ",", "\"params.json\"", ")", "\n", "save_json", "(", "CURRENT_PARAMS", ",", "paramsfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.import_include_params": [[57, 71], ["utils.dict_tools.dict_merge", "utils.dict_tools.dict_merge.get", "parameter_server._load_params", "parameter_server.import_include_params", "utils.dict_tools.dict_merge", "ValueError"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._load_params", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.import_include_params", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge"], ["", "def", "import_include_params", "(", "params", ")", ":", "\n", "    ", "includes", "=", "params", ".", "get", "(", "\"@include\"", ")", "or", "[", "]", "\n", "inherited_params", "=", "{", "}", "\n", "for", "include", "in", "includes", ":", "\n", "#print(\"Including params:\", include)", "\n", "        ", "incl_params", "=", "_load_params", "(", "include", ")", "\n", "if", "incl_params", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"No parameter file include found for: \"", ",", "include", ")", "\n", "", "incl_params", "=", "import_include_params", "(", "incl_params", ")", "\n", "inherited_params", "=", "dict_merge", "(", "inherited_params", ",", "incl_params", ")", "\n", "\n", "# Overlay the defined parameters on top of the included parameters", "\n", "", "params", "=", "dict_merge", "(", "inherited_params", ",", "params", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.load_parameters": [[73, 84], ["parameter_server._load_params", "parameter_server.import_include_params", "print", "len", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server._load_params", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.import_include_params"], ["", "def", "load_parameters", "(", "setup_name", ")", ":", "\n", "    ", "if", "setup_name", "is", "None", ":", "\n", "        ", "assert", "len", "(", "sys", ".", "argv", ")", ">=", "2", ",", "\"The second command-line argument provided must be the setup name\"", "\n", "setup_name", "=", "sys", ".", "argv", "[", "1", "]", "\n", "# Load the base configuration", "\n", "", "params", "=", "_load_params", "(", "setup_name", ")", "\n", "if", "params", "is", "None", ":", "\n", "        ", "print", "(", "\"Whoops! Parameters not found for: \"", "+", "str", "(", "setup_name", ")", ")", "\n", "# Load all the included parameters", "\n", "", "params", "=", "import_include_params", "(", "params", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.set_parameters_for_namespace": [[86, 91], ["None"], "function", ["None"], ["", "def", "set_parameters_for_namespace", "(", "params", ",", "namespace", ")", ":", "\n", "    ", "global", "CURRENT_PARAMS", "\n", "if", "CURRENT_PARAMS", "is", "None", ":", "\n", "        ", "CURRENT_PARAMS", "=", "{", "}", "\n", "", "CURRENT_PARAMS", "[", "namespace", "]", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.switch_to_namespace": [[93, 96], ["None"], "function", ["None"], ["", "def", "switch_to_namespace", "(", "namespace", ")", ":", "\n", "    ", "global", "CURRENT_NAMESPACE", "\n", "CURRENT_NAMESPACE", "=", "namespace", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_namespace": [[98, 101], ["None"], "function", ["None"], ["", "def", "get_current_namespace", "(", ")", ":", "\n", "    ", "global", "CURRENT_NAMESPACE", "\n", "return", "CURRENT_NAMESPACE", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment": [[103, 125], ["parameter_server.load_parameters", "parameter_server.log_experiment_start"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.load_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.log_experiment_start"], ["", "def", "initialize_experiment", "(", "setup_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param setup_name: relative path from parameters/run_params, excluding .json extension,\n    that specifies which config file to load and use. If None, uses the first argument provided to the program.\n    :param namespace: load experiments in a specific namespace. Namespaces allow multiple experiment\n    configs to be present at once, and switching between which one to use.\n    :return:\n    \"\"\"", "\n", "params", "=", "load_parameters", "(", "setup_name", ")", "\n", "\n", "if", "\"Setup\"", "in", "params", "and", "\"run_name\"", "in", "params", "[", "\"Setup\"", "]", ":", "\n", "        ", "run_name", "=", "params", "[", "\"Setup\"", "]", "[", "\"run_name\"", "]", "\n", "", "else", ":", "\n", "        ", "run_name", "=", "\"UntitledRun\"", "\n", "\n", "# Save for external access", "\n", "", "global", "CURRENT_PARAMS", ",", "CURRENT_RUN", ",", "SETUP_NAME", ",", "CURRENT_NAMESPACE", "\n", "CURRENT_NAMESPACE", "=", "\"Global\"", "\n", "CURRENT_PARAMS", "=", "{", "CURRENT_NAMESPACE", ":", "params", "}", "\n", "CURRENT_RUN", "=", "{", "CURRENT_NAMESPACE", ":", "run_name", "}", "\n", "SETUP_NAME", "=", "setup_name", "\n", "log_experiment_start", "(", "run_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_run_name": [[127, 130], ["None"], "function", ["None"], ["", "def", "get_current_run_name", "(", ")", ":", "\n", "    ", "global", "CURRENT_RUN", ",", "CURRENT_NAMESPACE", "\n", "return", "CURRENT_RUN", "[", "CURRENT_NAMESPACE", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters": [[132, 135], ["None"], "function", ["None"], ["", "def", "get_current_parameters", "(", ")", ":", "\n", "    ", "global", "CURRENT_PARAMS", ",", "CURRENT_NAMESPACE", "\n", "return", "CURRENT_PARAMS", "[", "CURRENT_NAMESPACE", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_setup_name": [[137, 141], ["print", "DeprecationWarning"], "function", ["None"], ["", "def", "get_setup_name", "(", ")", ":", "\n", "    ", "print", "(", "DeprecationWarning", "(", "\"get_setup_name is deprecated as it is inconsistent with namespaces! To be removed...\"", ")", ")", "\n", "global", "SETUP_NAME", "\n", "return", "SETUP_NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_stamp": [[143, 146], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.now"], ["", "def", "get_stamp", "(", ")", ":", "\n", "    ", "stamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%M %d %Y - %H:%M:%S\"", ")", "\n", "return", "stamp", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.__init__": [[11, 16], ["learning.modules.module_base.ModuleBase.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "learning.modules.gather_2d.Gather2D", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_vec_len", ",", "num_outputs", "=", "63", ")", ":", "\n", "        ", "super", "(", "AuxLandmarkClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aux_class_linear", "=", "nn", ".", "Linear", "(", "feature_vec_len", ",", "num_outputs", ")", "\n", "self", ".", "gather_2d", "=", "Gather2D", "(", ")", "\n", "self", ".", "aux_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduce", "=", "False", ",", "size_average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.init_weights": [[17, 20], ["aux_landmark_classify.AuxLandmarkClassifier.aux_class_linear.weight.data.normal_", "aux_landmark_classify.AuxLandmarkClassifier.aux_class_linear.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "aux_class_linear", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "self", ".", "aux_class_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss": [[21, 23], ["aux_landmark_classify.AuxLandmarkClassifier.aux_loss"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "pred", ",", "landmark_labels", ")", ":", "\n", "        ", "return", "self", ".", "aux_loss", "(", "pred", ",", "landmark_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.forward": [[24, 28], ["aux_landmark_classify.AuxLandmarkClassifier.gather_2d", "aux_landmark_classify.AuxLandmarkClassifier.aux_class_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature_images", ",", "landmark_coords", ")", ":", "\n", "        ", "landmark_feature_vectors", "=", "self", ".", "gather_2d", "(", "feature_images", ",", "landmark_coords", ")", "\n", "pred", "=", "self", ".", "aux_class_linear", "(", "landmark_feature_vectors", ")", "\n", "return", "pred", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.__init__": [[9, 15], ["learning.modules.module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "output_size_xy", ")", ":", "\n", "        ", "super", "(", "MultiscaleStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size_xy", "\n", "self", ".", "is_cuda", "=", "False", "\n", "self", ".", "cuda_device", "=", "None", "\n", "self", ".", "scales", "=", "scales", "\n", "# e.g. scales = [1.0, 0.5, 0.25]", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.cuda": [[17, 20], ["None"], "methods", ["None"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "is_cuda", "=", "True", "\n", "self", ".", "cuda_device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.init_weights": [[21, 23], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.crop_output": [[24, 32], ["output_map.size", "output_map.size", "int", "int"], "methods", ["None"], ["", "def", "crop_output", "(", "self", ",", "output_map", ")", ":", "\n", "        ", "out_x", "=", "self", ".", "output_size", "[", "0", "]", "\n", "out_y", "=", "self", ".", "output_size", "[", "1", "]", "\n", "in_x", "=", "output_map", ".", "size", "(", "2", ")", "\n", "in_y", "=", "output_map", ".", "size", "(", "3", ")", "\n", "l_gap_x", "=", "int", "(", "(", "in_x", "-", "out_x", ")", "/", "2", ")", "\n", "u_gap_y", "=", "int", "(", "(", "in_y", "-", "out_y", ")", "/", "2", ")", "\n", "return", "output_map", "[", ":", ",", ":", ",", "l_gap_x", ":", "l_gap_x", "+", "out_x", ",", "u_gap_y", ":", "u_gap_y", "+", "out_y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.forward_scale": [[33, 42], ["multiscale_stack.MultiscaleStack.crop_output", "int", "torch.avg_pool2d", "torch.avg_pool2d", "multiscale_stack.MultiscaleStack.crop_output", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.crop_output", "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.crop_output"], ["", "def", "forward_scale", "(", "self", ",", "input", ",", "scale", ")", ":", "\n", "        ", "if", "scale", "==", "1", ":", "\n", "            ", "return", "self", ".", "crop_output", "(", "input", ")", "\n", "", "elif", "0", "<", "scale", "<", "1", ":", "\n", "            ", "stride", "=", "int", "(", "1", "/", "scale", ")", "\n", "rescaled", "=", "F", ".", "avg_pool2d", "(", "input", ",", "stride", ")", "\n", "return", "self", ".", "crop_output", "(", "rescaled", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Invalid scale! Must be int in range (0; 1] \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.forward": [[43, 49], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "catlist.append", "multiscale_stack.MultiscaleStack.forward_scale"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.rss.multiscale_stack.MultiscaleStack.forward_scale"], ["", "", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "catlist", "=", "[", "]", "\n", "for", "i", ",", "scale", "in", "enumerate", "(", "self", ".", "scales", ")", ":", "\n", "            ", "catlist", ".", "append", "(", "self", ".", "forward_scale", "(", "image", ",", "scale", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "catlist", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_spatial_filter.MapLangSpatialFilter.__init__": [[10, 26], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "text_embed_size", ",", "in_map_channels", ",", "out_map_channels", ")", ":", "\n", "        ", "super", "(", "MapLangSpatialFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_conv1_weights", "=", "in_map_channels", "*", "(", "3", "*", "3", ")", "*", "in_map_channels", "\n", "self", ".", "num_conv2_weights", "=", "in_map_channels", "*", "(", "3", "*", "3", ")", "*", "out_map_channels", "\n", "\n", "self", ".", "in_map_channels", "=", "in_map_channels", "\n", "self", ".", "out_map_channels", "=", "out_map_channels", "\n", "\n", "self", ".", "lang_gate_linear", "=", "nn", ".", "Linear", "(", "text_embed_size", ",", "self", ".", "num_conv1_weights", "+", "self", ".", "num_conv2_weights", ")", "\n", "\n", "self", ".", "conv1_weights", "=", "None", "\n", "self", ".", "conv2_weights", "=", "None", "\n", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "in_map_channels", ")", "\n", "self", ".", "norm_out", "=", "nn", ".", "InstanceNorm2d", "(", "out_map_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_spatial_filter.MapLangSpatialFilter.precompute_conv_weights": [[27, 39], ["text_embedding.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.normalize", "torch.normalize", "map_lang_spatial_filter.MapLangSpatialFilter.conv1_weights.view", "torch.normalize", "torch.normalize", "map_lang_spatial_filter.MapLangSpatialFilter.conv2_weights.view", "map_lang_spatial_filter.MapLangSpatialFilter.lang_gate_linear"], "methods", ["None"], ["", "def", "precompute_conv_weights", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "batch_size", "=", "text_embedding", ".", "size", "(", "0", ")", "\n", "all_weights", "=", "torch", ".", "sigmoid", "(", "self", ".", "lang_gate_linear", "(", "text_embedding", ")", ")", "\n", "\n", "self", ".", "conv1_weights", "=", "all_weights", "[", ":", ",", "0", ":", "self", ".", "num_conv1_weights", "]", "\n", "self", ".", "conv2_weights", "=", "all_weights", "[", ":", ",", "self", ".", "num_conv1_weights", ":", "self", ".", "num_conv1_weights", "+", "self", ".", "num_conv2_weights", "]", "\n", "\n", "self", ".", "conv1_weights", "=", "F", ".", "normalize", "(", "self", ".", "conv1_weights", ",", "dim", "=", "1", ")", "\n", "self", ".", "conv1_weights", "=", "self", ".", "conv1_weights", ".", "view", "(", "batch_size", ",", "self", ".", "in_map_channels", ",", "self", ".", "in_map_channels", ",", "3", ",", "3", ")", "\n", "\n", "self", ".", "conv2_weights", "=", "F", ".", "normalize", "(", "self", ".", "conv2_weights", ",", "dim", "=", "1", ")", "\n", "self", ".", "conv2_weights", "=", "self", ".", "conv2_weights", ".", "view", "(", "batch_size", ",", "self", ".", "out_map_channels", ",", "self", ".", "in_map_channels", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_spatial_filter.MapLangSpatialFilter.init_weights": [[40, 43], ["map_lang_spatial_filter.MapLangSpatialFilter.lang_gate_linear.weight.data.normal_", "map_lang_spatial_filter.MapLangSpatialFilter.lang_gate_linear.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "lang_gate_linear", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "self", ".", "lang_gate_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_spatial_filter.MapLangSpatialFilter.forward": [[44, 67], ["input.size", "map_lang_spatial_filter.MapLangSpatialFilter.conv1_weights.size", "int", "list", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.leaky_relu", "torch.leaky_relu", "map_lang_spatial_filter.MapLangSpatialFilter.norm_out", "input.size", "torch.conv2d", "torch.conv2d", "torch.leaky_relu", "torch.leaky_relu", "map_lang_spatial_filter.MapLangSpatialFilter.norm", "torch.conv2d", "torch.conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "weight_batch_size", "=", "self", ".", "conv1_weights", ".", "size", "(", "0", ")", "\n", "batch_factor", "=", "int", "(", "input_batch_size", "/", "weight_batch_size", ")", "\n", "\n", "out_size", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "out_size", "[", "1", "]", "=", "self", ".", "out_map_channels", "\n", "out", "=", "torch", ".", "zeros", "(", "out_size", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "for", "group", "in", "range", "(", "weight_batch_size", ")", ":", "\n", "            ", "group_inputs", "=", "input", "[", "group", "*", "batch_factor", ":", "(", "group", "+", "1", ")", "*", "batch_factor", "]", "\n", "conv1_w_group", "=", "self", ".", "conv1_weights", "[", "group", "]", "\n", "conv2_w_group", "=", "self", ".", "conv2_weights", "[", "group", "]", "\n", "x", "=", "F", ".", "conv2d", "(", "group_inputs", ",", "conv1_w_group", ",", "dilation", "=", "1", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "conv2_w_group", ",", "dilation", "=", "3", ",", "padding", "=", "3", ")", "\n", "out", "[", "group", "*", "batch_factor", ":", "(", "group", "+", "1", ")", "*", "batch_factor", "]", "=", "x", "\n", "\n", "", "out", "=", "F", ".", "leaky_relu", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_out", "(", "out", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.__init__": [[10, 22], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "text_embed_size", ",", "in_map_channels", ",", "out_map_channels", ")", ":", "\n", "        ", "super", "(", "MapLangSemanticFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_conv_weights", "=", "in_map_channels", "*", "out_map_channels", "\n", "self", ".", "in_map_channels", "=", "in_map_channels", "\n", "self", ".", "out_map_channels", "=", "out_map_channels", "\n", "\n", "self", ".", "lang_gate_linear", "=", "nn", ".", "Linear", "(", "text_embed_size", ",", "self", ".", "num_conv_weights", ")", "\n", "\n", "self", ".", "conv_weights", "=", "None", "\n", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "out_map_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights": [[23, 28], ["text_embeddings.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.normalize", "torch.normalize", "map_lang_semantic_filter.MapLangSemanticFilter.conv_weights.view", "map_lang_semantic_filter.MapLangSemanticFilter.lang_gate_linear"], "methods", ["None"], ["", "def", "precompute_conv_weights", "(", "self", ",", "text_embeddings", ")", ":", "\n", "        ", "batch_size", "=", "text_embeddings", ".", "size", "(", "0", ")", "\n", "self", ".", "conv_weights", "=", "torch", ".", "sigmoid", "(", "self", ".", "lang_gate_linear", "(", "text_embeddings", ")", ")", "\n", "self", ".", "conv_weights", "=", "F", ".", "normalize", "(", "self", ".", "conv_weights", ",", "dim", "=", "1", ")", "\n", "self", ".", "conv_weights", "=", "self", ".", "conv_weights", ".", "view", "(", "batch_size", ",", "self", ".", "out_map_channels", ",", "self", ".", "in_map_channels", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.init_weights": [[29, 32], ["map_lang_semantic_filter.MapLangSemanticFilter.lang_gate_linear.weight.data.normal_", "map_lang_semantic_filter.MapLangSemanticFilter.lang_gate_linear.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "lang_gate_linear", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "self", ".", "lang_gate_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.forward": [[33, 53], ["input.size", "map_lang_semantic_filter.MapLangSemanticFilter.conv_weights.size", "int", "list", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "map_lang_semantic_filter.MapLangSemanticFilter.norm", "input.size", "torch.conv2d", "torch.conv2d", "torch.leaky_relu", "torch.leaky_relu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "weight_batch_size", "=", "self", ".", "conv_weights", ".", "size", "(", "0", ")", "\n", "batch_factor", "=", "int", "(", "input_batch_size", "/", "weight_batch_size", ")", "\n", "\n", "out_size", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "out_size", "[", "1", "]", "=", "self", ".", "out_map_channels", "\n", "out", "=", "torch", ".", "zeros", "(", "out_size", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "for", "group", "in", "range", "(", "weight_batch_size", ")", ":", "\n", "            ", "group_inputs", "=", "input", "[", "group", "*", "batch_factor", ":", "(", "group", "+", "1", ")", "*", "batch_factor", "]", "\n", "conv_w_group", "=", "self", ".", "conv_weights", "[", "group", "]", "\n", "x", "=", "F", ".", "conv2d", "(", "group_inputs", ",", "conv_w_group", ",", "dilation", "=", "1", ",", "padding", "=", "0", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "out", "[", "group", "*", "batch_factor", ":", "(", "group", "+", "1", ")", "*", "batch_factor", "]", "=", "x", "\n", "\n", "# TODO: Test and consider", "\n", "", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase._get_yaw": [[10, 12], ["None"], "methods", ["None"], ["", "def", "_get_yaw", "(", "self", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase._action_to_global": [[13, 21], ["droneControllerBase.DroneControllerBase._get_yaw", "numpy.zeros", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._get_yaw"], ["", "def", "_action_to_global", "(", "self", ",", "action", ")", ":", "\n", "        ", "drone_yaw", "=", "self", ".", "_get_yaw", "(", ")", "\n", "action_global", "=", "np", ".", "zeros", "(", "3", ")", "\n", "# TODO: Add action[1]", "\n", "action_global", "[", "0", "]", "=", "action", "[", "0", "]", "*", "math", ".", "cos", "(", "drone_yaw", ")", "\n", "action_global", "[", "1", "]", "=", "action", "[", "0", "]", "*", "math", ".", "sin", "(", "drone_yaw", ")", "\n", "action_global", "[", "2", "]", "=", "action", "[", "2", "]", "\n", "return", "action_global", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase.get_real_time_rate": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get_real_time_rate", "(", "self", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase.send_local_velocity_command": [[25, 27], ["None"], "methods", ["None"], ["", "def", "send_local_velocity_command", "(", "self", ",", "cmd_vel", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase.teleport_to": [[28, 30], ["None"], "methods", ["None"], ["", "def", "teleport_to", "(", "self", ",", "position", ",", "yaw", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase.get_state": [[31, 33], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase.reset_environment": [[34, 36], ["None"], "methods", ["None"], ["", "def", "reset_environment", "(", "self", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase.set_current_env_id": [[37, 39], ["None"], "methods", ["None"], ["", "def", "set_current_env_id", "(", "self", ",", "env_id", ")", ":", "\n", "        ", "...", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.droneController.drone_controller_factory": [[11, 16], ["None"], "function", ["None"], ["def", "drone_controller_factory", "(", "simulator", ")", ":", "\n", "    ", "if", "simulator", ":", "\n", "        ", "return", "DroneControllerAirSim", "\n", "", "else", ":", "\n", "        ", "return", "DroneControllerROS", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.drones.rollout_exception.RolloutException.__init__": [[2, 4], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "message", ")", ":", "\n", "        ", "super", "(", "RolloutException", ",", "self", ")", ".", "__init__", "(", "message", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.camcorder.Camcorder.__init__": [[10, 17], ["parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "instance", "=", "1", ")", ":", "\n", "        ", "self", ".", "params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "f\"Camcorder{instance}\"", "]", "\n", "self", ".", "video_devices", "=", "self", ".", "params", "[", "\"video_devices\"", "]", "\n", "self", ".", "video_names", "=", "self", ".", "params", "[", "\"video_names\"", "]", "\n", "self", ".", "options", "=", "self", ".", "params", "[", "\"options\"", "]", "\n", "self", ".", "processes", "=", "[", "]", "\n", "self", ".", "discard_output", "=", "self", ".", "params", "[", "\"discard_output\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.camcorder.Camcorder.start_recording_rollout": [[18, 31], ["data_io.paths.get_rollout_video_dir", "zip", "time.sleep", "print", "os.path.join", "camcorder.Camcorder.processes.append", "subprocess.Popen", "open", "fp.write"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_rollout_video_dir", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "start_recording_rollout", "(", "self", ",", "run_name", ",", "env_id", ",", "set_id", ",", "seg_idx", ",", "caption", "=", "\"\"", ")", ":", "\n", "        ", "viddir", "=", "get_rollout_video_dir", "(", "run_name", ")", "\n", "for", "device", ",", "name", ",", "opt", "in", "zip", "(", "self", ".", "video_devices", ",", "self", ".", "video_names", ",", "self", ".", "options", ")", ":", "\n", "            ", "print", "(", "f\"Starting video capture on device: {device}\"", ")", "\n", "filename", "=", "f\"rollout_{name}_{env_id}-{set_id}-{seg_idx}\"", "\n", "outpath", "=", "os", ".", "path", ".", "join", "(", "viddir", ",", "filename", ")", "\n", "if", "caption", ":", "\n", "                ", "with", "open", "(", "f\"{outpath}.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "                    ", "fp", ".", "write", "(", "caption", ")", "\n", "", "", "command", "=", "f\"ffmpeg -y -i {device} -framerate 30 {opt} {outpath}.mkv {'> /dev/null 2>&1' if self.discard_output else ''}\"", "\n", "self", ".", "processes", ".", "append", "(", "subprocess", ".", "Popen", "(", "command", ",", "shell", "=", "True", ",", "env", "=", "os", ".", "environ", ",", "preexec_fn", "=", "os", ".", "setsid", ")", ")", "\n", "# Wait for the capture to start", "\n", "", "sleep", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.camcorder.Camcorder.stop_recording_rollout": [[32, 40], ["time.sleep", "time.sleep", "os.killpg", "os.getpgid"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["", "def", "stop_recording_rollout", "(", "self", ")", ":", "\n", "# Wait for the capture to catch up", "\n", "        ", "sleep", "(", "1.0", ")", "\n", "for", "process", "in", "self", ".", "processes", ":", "\n", "            ", "os", ".", "killpg", "(", "os", ".", "getpgid", "(", "process", ".", "pid", ")", ",", "signal", ".", "SIGTERM", ")", "\n", "", "self", ".", "processes", "=", "[", "]", "\n", "# Wait for processes to shut down before starting the next round", "\n", "sleep", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.__init__": [[38, 84], ["drones.droneControllerBase.DroneControllerBase.__init__", "drones.init_node_if_necessary", "utils.simple_profiler.SimpleProfiler", "droneController.DroneController._read_clock_speed", "drones.aero_interface.landmarkConfigurator.LandmarkConfigurator", "drones.aero_interface.camcorder.Camcorder", "[].get", "drones.aero_interface.rviz.RvizInterface", "droneController.DroneController._init_tf_listener", "rospy.Subscriber", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher", "droneController.DroneController._wait_ros_boot", "print", "ValueError", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.ros_node.init_node_if_necessary", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._read_clock_speed", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._init_tf_listener", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._wait_ros_boot", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._read_clock_speed": [[85, 91], ["print", "parameters.get_current_parameters", "str", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._init_tf_listener": [[92, 109], ["tf.TransformListener", "rospy.Rate", "rospy.is_shutdown", "rospy.Rate.sleep", "tf.TransformListener.lookupTransform", "rospy.Time", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._wait_ros_boot": [[110, 115], ["rospy.Rate", "droneController.DroneController._is_ros_system_healty", "print", "rospy.Rate.sleep"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._is_ros_system_healty", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._is_ros_system_healty": [[116, 126], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._image_callback": [[127, 135], ["print", "droneController.DroneController.fpv_image_pub.publish", "rospy.get_rostime"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._is_close": [[136, 153], ["max", "numpy.linalg.norm", "min", "numpy.abs", "numpy.array", "numpy.array", "numpy.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_converted_image": [[154, 164], ["cv_bridge.CvBridge", "cv_bridge.CvBridge.imgmsg_to_cv2", "cv2.resize", "print", "rospy.get_rostime"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_pos": [[165, 171], ["droneController.DroneController.tf_listener.lookupTransform", "rospy.Time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_yaw": [[172, 178], ["droneController.DroneController.tf_listener.lookupTransform", "tf.transformations.euler_from_quaternion", "rospy.Time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_state_vector": [[179, 201], ["droneController.DroneController.tf_listener.lookupTransform", "droneController.DroneController.tf_listener.lookupTransform", "droneController.DroneController.rviz.add_pose_and_publish_array", "tf.transformations.euler_from_quaternion", "numpy.concatenate", "rospy.Time", "rospy.Time"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.add_pose_and_publish_array"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.get_real_time_rate": [[202, 204], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.visualize_twist_as_pose": [[205, 215], ["numpy.asarray", "numpy.asarray", "geometry.vec_to_yaw", "tf.transformations.quaternion_from_euler", "tf.transformations.quaternion_from_euler", "droneController.DroneController.rviz.add_pose_and_publish_array", "droneController.DroneController.rviz.add_pose_and_publish_array"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.add_pose_and_publish_array", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.add_pose_and_publish_array"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.send_local_velocity_command": [[216, 254], ["droneController.DroneController._action_to_global", "geometry_msgs.msg.TwistStamped", "rospy.get_rostime", "droneController.DroneController.visualize_twist_as_pose", "drones.rollout_exception.RolloutException", "droneController.DroneController.velocity_target_pub.publish", "droneController.DroneController.velocity_target_pub.publish"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase._action_to_global", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.visualize_twist_as_pose"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.land": [[255, 272], ["droneController.DroneController._get_pos", "std_msgs.msg.Bool", "droneController.DroneController.landing_publisher.publish", "print", "drones.aero_interface.find_landing_location.find_safe_landing_location", "droneController.DroneController.teleport_to", "droneController.DroneController._get_pos"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_pos", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location.find_safe_landing_location", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_to", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_pos"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.set_current_env_id": [[273, 292], ["data_io.env.load_and_convert_env_config", "droneController.DroneController.rviz.publish_env_config", "data_io.env.save_env_img", "droneController.DroneController.landmark_configurator.configure_landmarks", "data_io.env.load_env_img", "data_io.env.configs_equal", "[].get", "droneController.DroneController.land", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.save_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.configure_landmarks", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.configs_equal", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.land", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.set_current_seg_idx": [[293, 295], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.rollout_begin": [[296, 298], ["droneController.DroneController.camcorder1.start_recording_rollout", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.camcorder.Camcorder.start_recording_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.rollout_end": [[299, 301], ["droneController.DroneController.camcorder1.stop_recording_rollout"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.camcorder.Camcorder.stop_recording_rollout"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.teleport_to": [[302, 358], ["list", "geometry_msgs.msg.PoseStamped", "rospy.get_rostime", "tf.transformations.quaternion_from_euler", "time.sleep", "rospy.Rate", "print", "len", "list.append", "float", "droneController.DroneController.pose_publisher.publish", "rospy.is_shutdown", "droneController.DroneController.pose_publisher.publish", "droneController.DroneController.tf_listener.lookupTransform", "droneController.DroneController.tf_listener.lookupTransform", "rospy.Rate.sleep", "tf.transformations.euler_from_quaternion", "droneController.DroneController._is_close", "rospy.Time", "rospy.Time", "print", "time.sleep", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._is_close", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.teleport_3d": [[359, 361], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.get_state": [[362, 366], ["droneController.DroneController._get_state_vector", "droneController.DroneController._get_converted_image"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_state_vector", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController._get_converted_image"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.droneController.DroneController.reset_environment": [[367, 371], ["droneController.DroneController.rviz.reset_pose_array", "droneController.DroneController.rviz.reset_pose_array", "droneController.DroneController.rviz.reset_pose_array"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.reset_pose_array", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.reset_pose_array", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.reset_pose_array"], []], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.ros_node.init_node_if_necessary": [[5, 11], ["rospy.init_node", "print"], "function", ["None"], ["def", "init_node_if_necessary", "(", ")", ":", "\n", "    ", "global", "INITIALIZED", "\n", "if", "not", "INITIALIZED", ":", "\n", "        ", "rospy", ".", "init_node", "(", "\"py_drone_controller\"", ")", "\n", "print", "(", "\"Initialized ROS node\"", ")", "\n", "INITIALIZED", "=", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.__init__": [[14, 52], ["drones.init_node_if_necessary", "rviz.RvizInterface._set_pub", "rviz.RvizInterface._set_pub", "rviz.RvizInterface._set_pub", "rviz.RvizInterface._set_pub", "rviz.RvizInterface._set_pub", "rviz.RvizInterface._set_pub", "rviz.RvizInterface._set_pub", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher", "rviz.RvizInterface._topic", "rviz.RvizInterface._topic", "rviz.RvizInterface._topic", "rviz.RvizInterface._topic", "rviz.RvizInterface._topic", "rviz.RvizInterface._topic", "rviz.RvizInterface._topic"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.ros_node.init_node_if_necessary", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic"], ["    ", "def", "__init__", "(", "self", ",", "\n", "base_name", "=", "\"/visualizer/\"", ",", "\n", "pose_topics", "=", "None", ",", "\n", "posearray_topics", "=", "None", ",", "\n", "path_topics", "=", "None", ",", "\n", "markerarray_topics", "=", "None", ",", "\n", "map_topics", "=", "None", ",", "\n", "voxel_topics", "=", "None", ")", ":", "\n", "\n", "        ", "rn", ".", "init_node_if_necessary", "(", ")", "\n", "self", ".", "base_name", "=", "base_name", "\n", "if", "pose_topics", ":", "\n", "            ", "for", "topic", "in", "pose_topics", ":", "\n", "                ", "self", ".", "_set_pub", "(", "topic", ",", "rospy", ".", "Publisher", "(", "self", ".", "_topic", "(", "topic", ")", ",", "PoseStamped", ",", "queue_size", "=", "1", ")", ")", "\n", "\n", "", "", "if", "posearray_topics", ":", "\n", "            ", "for", "topic", "in", "posearray_topics", ":", "\n", "                ", "self", ".", "_set_pub", "(", "topic", ",", "rospy", ".", "Publisher", "(", "self", ".", "_topic", "(", "topic", ")", ",", "PoseArray", ",", "queue_size", "=", "1", ")", ")", "\n", "self", ".", "_set_pub", "(", "topic", "+", "\"_path\"", ",", "rospy", ".", "Publisher", "(", "self", ".", "_topic", "(", "topic", "+", "\"_path\"", ")", ",", "Path", ",", "queue_size", "=", "1", ")", ")", "\n", "\n", "", "", "if", "path_topics", ":", "\n", "            ", "for", "topic", "in", "path_topics", ":", "\n", "                ", "self", ".", "_set_pub", "(", "topic", ",", "rospy", ".", "Publisher", "(", "self", ".", "_topic", "(", "topic", ")", ",", "Path", ",", "queue_size", "=", "1", ")", ")", "\n", "\n", "", "", "if", "markerarray_topics", ":", "\n", "            ", "for", "topic", "in", "markerarray_topics", ":", "\n", "                ", "self", ".", "_set_pub", "(", "topic", ",", "rospy", ".", "Publisher", "(", "self", ".", "_topic", "(", "topic", ")", ",", "MarkerArray", ",", "queue_size", "=", "1", ")", ")", "\n", "\n", "", "", "if", "map_topics", ":", "\n", "            ", "for", "topic", "in", "map_topics", ":", "\n", "                ", "self", ".", "_set_pub", "(", "topic", ",", "rospy", ".", "Publisher", "(", "self", ".", "_topic", "(", "topic", ")", ",", "PointCloud", ",", "queue_size", "=", "1", ")", ")", "\n", "\n", "", "", "if", "voxel_topics", ":", "\n", "            ", "for", "topic", "in", "voxel_topics", ":", "\n", "                ", "self", ".", "_set_pub", "(", "topic", ",", "rospy", ".", "Publisher", "(", "self", ".", "_topic", "(", "topic", ")", ",", "PointCloud", ",", "queue_size", "=", "1", ")", ")", "\n", "\n", "", "", "self", ".", "pose_arrays", "=", "{", "}", "\n", "self", ".", "paths", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._topic": [[53, 55], ["None"], "methods", ["None"], ["", "def", "_topic", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "base_name", "+", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._publisher_attr": [[56, 58], ["None"], "methods", ["None"], ["", "def", "_publisher_attr", "(", "self", ",", "topic", ")", ":", "\n", "        ", "return", "topic", "+", "\"_publisher\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub": [[59, 61], ["rviz.RvizInterface.__getattribute__", "rviz.RvizInterface._publisher_attr"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._publisher_attr"], ["", "def", "_get_pub", "(", "self", ",", "topic", ")", ":", "\n", "        ", "return", "self", ".", "__getattribute__", "(", "self", ".", "_publisher_attr", "(", "topic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._set_pub": [[62, 64], ["rviz.RvizInterface.__setattr__", "rviz.RvizInterface._publisher_attr"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._publisher_attr"], ["", "def", "_set_pub", "(", "self", ",", "topic", ",", "pub", ")", ":", "\n", "        ", "self", ".", "__setattr__", "(", "self", ".", "_publisher_attr", "(", "topic", ")", ",", "pub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._make_pose_msg": [[65, 82], ["geometry_msgs.msg.Pose"], "methods", ["None"], ["", "def", "_make_pose_msg", "(", "self", ",", "pos_vec", ",", "rot_quat", ",", "wxyz", ")", ":", "\n", "        ", "pose", "=", "Pose", "(", ")", "\n", "pose", ".", "position", ".", "x", "=", "pos_vec", "[", "0", "]", "\n", "pose", ".", "position", ".", "y", "=", "pos_vec", "[", "1", "]", "\n", "pose", ".", "position", ".", "z", "=", "pos_vec", "[", "2", "]", "\n", "if", "rot_quat", "is", "not", "None", ":", "\n", "            ", "if", "wxyz", ":", "\n", "                ", "pose", ".", "orientation", ".", "w", "=", "rot_quat", "[", "0", "]", "\n", "pose", ".", "orientation", ".", "x", "=", "rot_quat", "[", "1", "]", "\n", "pose", ".", "orientation", ".", "y", "=", "rot_quat", "[", "2", "]", "\n", "pose", ".", "orientation", ".", "z", "=", "rot_quat", "[", "3", "]", "\n", "", "else", ":", "\n", "                ", "pose", ".", "orientation", ".", "x", "=", "rot_quat", "[", "0", "]", "\n", "pose", ".", "orientation", ".", "y", "=", "rot_quat", "[", "1", "]", "\n", "pose", ".", "orientation", ".", "z", "=", "rot_quat", "[", "2", "]", "\n", "pose", ".", "orientation", ".", "w", "=", "rot_quat", "[", "3", "]", "\n", "", "", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_map": [[83, 121], ["sensor_msgs.msg.PointCloud", "rospy.get_rostime", "numpy.linspace", "numpy.asarray", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.PointCloud.channels.append", "sensor_msgs.msg.PointCloud.channels.append", "sensor_msgs.msg.PointCloud.channels.append", "range", "rviz.RvizInterface._get_pub().publish", "numpy.min", "numpy.max", "numpy.meshgrid", "range", "geometry_msgs.msg.Point32", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.PointCloud.points.append", "rviz.RvizInterface._get_pub", "float", "float", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.ChannelFloat32.values.append", "float"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "publish_map", "(", "self", ",", "topic", ",", "map_data_np", ",", "map_size_m", ",", "frame", "=", "\"/map_ned\"", ")", ":", "\n", "        ", "msg", "=", "PointCloud", "(", ")", "\n", "msg", ".", "header", ".", "frame_id", "=", "frame", "\n", "msg", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "\n", "# Shift and scale to 0-1 range", "\n", "map_data_np", "=", "map_data_np", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "map_data_np", "=", "map_data_np", "-", "np", ".", "min", "(", "map_data_np", ")", "\n", "map_data_np", "/=", "(", "np", ".", "max", "(", "map_data_np", ")", "+", "1e-9", ")", "\n", "\n", "c", "=", "np", ".", "linspace", "(", "0", ",", "map_size_m", ",", "map_data_np", ".", "shape", "[", "1", "]", ")", "\n", "cgrid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "c", ",", "c", ")", ")", "\n", "\n", "r", "=", "ChannelFloat32", "(", ")", "\n", "r", ".", "name", "=", "\"r\"", "\n", "g", "=", "ChannelFloat32", "(", ")", "\n", "g", ".", "name", "=", "\"g\"", "\n", "b", "=", "ChannelFloat32", "(", ")", "\n", "b", ".", "name", "=", "\"b\"", "\n", "msg", ".", "channels", ".", "append", "(", "r", ")", "\n", "msg", ".", "channels", ".", "append", "(", "g", ")", "\n", "msg", ".", "channels", ".", "append", "(", "b", ")", "\n", "\n", "for", "x", "in", "range", "(", "map_data_np", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "map_data_np", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "p", "=", "Point32", "(", ")", "\n", "p", ".", "x", "=", "cgrid", "[", "0", ",", "x", ",", "y", "]", "\n", "p", ".", "y", "=", "cgrid", "[", "1", ",", "x", ",", "y", "]", "\n", "p", ".", "z", "=", "0.05", "\n", "r", ".", "values", ".", "append", "(", "float", "(", "map_data_np", "[", "x", ",", "y", ",", "0", "]", ")", ")", "\n", "g", ".", "values", ".", "append", "(", "float", "(", "map_data_np", "[", "x", ",", "y", ",", "1", "]", ")", ")", "\n", "if", "map_data_np", ".", "shape", "[", "2", "]", ">", "2", ":", "\n", "                    ", "b", ".", "values", ".", "append", "(", "float", "(", "map_data_np", "[", "x", ",", "y", ",", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "b", ".", "values", ".", "append", "(", "0", ")", "\n", "", "msg", ".", "points", ".", "append", "(", "p", ")", "\n", "\n", "", "", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.create_path_from_2d_array": [[122, 129], ["rviz.RvizInterface.clear_path", "rviz.RvizInterface.add_point_to_path", "rviz.RvizInterface.publish_path"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.clear_path", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.add_point_to_path", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_path"], ["", "def", "create_path_from_2d_array", "(", "self", ",", "topic", ",", "array", ",", "height", "=", "0", ",", "frame", "=", "\"/map_ned\"", ",", "publish", "=", "True", ")", ":", "\n", "        ", "self", ".", "clear_path", "(", "topic", ")", "\n", "for", "pt", "in", "array", ":", "\n", "            ", "pos", "=", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "height", "]", "\n", "self", ".", "add_point_to_path", "(", "topic", ",", "pos", ",", "frame", "=", "frame", ")", "\n", "", "if", "publish", ":", "\n", "            ", "self", ".", "publish_path", "(", "topic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.add_point_to_path": [[130, 144], ["rospy.get_rostime", "rviz.RvizInterface._make_pose_msg", "geometry_msgs.msg.PoseStamped", "rospy.get_rostime", "nav_msgs.msg.Path.poses.append", "nav_msgs.msg.Path"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._make_pose_msg", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "add_point_to_path", "(", "self", ",", "topic", ",", "pos_vec", ",", "rot_quat", "=", "None", ",", "frame", "=", "\"/map_ned\"", ",", "wxyz", "=", "False", ")", ":", "\n", "        ", "if", "topic", "not", "in", "self", ".", "paths", ":", "\n", "            ", "path", "=", "Path", "(", ")", "\n", "path", ".", "header", ".", "frame_id", "=", "frame", "\n", "self", ".", "paths", "[", "topic", "]", "=", "path", "\n", "", "else", ":", "\n", "            ", "path", "=", "self", ".", "paths", "[", "topic", "]", "\n", "", "path", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "pose", "=", "self", ".", "_make_pose_msg", "(", "pos_vec", ",", "rot_quat", ",", "wxyz", "=", "wxyz", ")", "\n", "ps", "=", "PoseStamped", "(", ")", "\n", "ps", ".", "header", ".", "frame_id", "=", "frame", "\n", "ps", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "ps", ".", "pose", "=", "pose", "\n", "path", ".", "poses", ".", "append", "(", "ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.clear_path": [[145, 148], ["None"], "methods", ["None"], ["", "def", "clear_path", "(", "self", ",", "topic", ")", ":", "\n", "        ", "if", "topic", "in", "self", ".", "paths", ":", "\n", "            ", "del", "self", ".", "paths", "[", "topic", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_instruction_text": [[149, 180], ["visualization_msgs.msg.MarkerArray", "visualization_msgs.msg.Marker", "visualization_msgs.msg.MarkerArray.markers.append", "rviz.RvizInterface._get_pub().publish", "visualization_msgs.msg.MarkerArray", "visualization_msgs.msg.Marker", "rospy.get_rostime", "visualization_msgs.msg.MarkerArray.markers.append", "rviz.RvizInterface._get_pub().publish", "rviz.RvizInterface._get_pub", "rviz.RvizInterface._get_pub"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub"], ["", "", "def", "publish_instruction_text", "(", "self", ",", "topic", ",", "text", ")", ":", "\n", "        ", "delarray", "=", "MarkerArray", "(", ")", "\n", "delete", "=", "Marker", "(", ")", "\n", "delete", ".", "action", "=", "Marker", ".", "DELETEALL", "\n", "delarray", ".", "markers", ".", "append", "(", "delete", ")", "\n", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "delarray", ")", "\n", "\n", "markerarray", "=", "MarkerArray", "(", ")", "\n", "\n", "t", "=", "Marker", "(", ")", "\n", "t", ".", "ns", "=", "\"instruction_text\"", "\n", "t", ".", "id", "=", "0", "\n", "t", ".", "action", "=", "Marker", ".", "ADD", "\n", "t", ".", "header", ".", "frame_id", "=", "\"/map_ned\"", "\n", "t", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "t", ".", "type", "=", "Marker", ".", "TEXT_VIEW_FACING", "\n", "t", ".", "text", "=", "text", "\n", "t", ".", "pose", ".", "position", ".", "x", "=", "5.0", "\n", "t", ".", "pose", ".", "position", ".", "y", "=", "2.35", "\n", "t", ".", "pose", ".", "position", ".", "z", "=", "-", "0.4", "\n", "t", ".", "pose", ".", "orientation", ".", "w", "=", "1", "\n", "t", ".", "scale", ".", "x", "=", "0.2", "\n", "t", ".", "scale", ".", "y", "=", "0.2", "\n", "t", ".", "scale", ".", "z", "=", "0.2", "\n", "t", ".", "color", ".", "a", "=", "1.0", "\n", "t", ".", "color", ".", "r", "=", "1.0", "\n", "t", ".", "color", ".", "g", "=", "1.0", "\n", "t", ".", "color", ".", "b", "=", "1.0", "\n", "\n", "markerarray", ".", "markers", ".", "append", "(", "t", ")", "\n", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "markerarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_env_config": [[181, 253], ["visualization_msgs.msg.MarkerArray", "visualization_msgs.msg.Marker", "visualization_msgs.msg.MarkerArray.markers.append", "rviz.RvizInterface._get_pub().publish", "visualization_msgs.msg.MarkerArray", "visualization_msgs.msg.Marker", "rospy.get_rostime", "visualization_msgs.msg.MarkerArray.markers.append", "enumerate", "rviz.RvizInterface._get_pub().publish", "visualization_msgs.msg.Marker", "rospy.get_rostime", "visualization_msgs.msg.Marker", "rospy.get_rostime", "visualization_msgs.msg.MarkerArray.markers.append", "visualization_msgs.msg.MarkerArray.markers.append", "rviz.RvizInterface._get_pub", "float", "float", "float", "float", "float", "float", "rviz.RvizInterface._get_pub"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub"], ["", "def", "publish_env_config", "(", "self", ",", "topic", ",", "env_config", ")", ":", "\n", "        ", "delarray", "=", "MarkerArray", "(", ")", "\n", "delete", "=", "Marker", "(", ")", "\n", "delete", ".", "action", "=", "Marker", ".", "DELETEALL", "\n", "delarray", ".", "markers", ".", "append", "(", "delete", ")", "\n", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "delarray", ")", "\n", "\n", "markerarray", "=", "MarkerArray", "(", ")", "\n", "\n", "bg", "=", "Marker", "(", ")", "\n", "bg", ".", "ns", "=", "\"env_config_bg\"", "\n", "bg", ".", "id", "=", "0", "\n", "bg", ".", "action", "=", "Marker", ".", "ADD", "\n", "bg", ".", "header", ".", "frame_id", "=", "\"/map_ned\"", "\n", "bg", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "bg", ".", "type", "=", "Marker", ".", "CUBE", "\n", "bg", ".", "pose", ".", "position", ".", "x", "=", "2.35", "\n", "bg", ".", "pose", ".", "position", ".", "y", "=", "2.35", "\n", "bg", ".", "pose", ".", "position", ".", "z", "=", "0.01", "\n", "bg", ".", "pose", ".", "orientation", ".", "w", "=", "1.0", "\n", "bg", ".", "scale", ".", "x", "=", "4.7", "\n", "bg", ".", "scale", ".", "y", "=", "4.7", "\n", "bg", ".", "scale", ".", "z", "=", "0.02", "\n", "bg", ".", "color", ".", "a", "=", "1.0", "\n", "bg", ".", "color", ".", "r", "=", "0.2", "\n", "bg", ".", "color", ".", "g", "=", "0.6", "\n", "bg", ".", "color", ".", "b", "=", "0.3", "\n", "markerarray", ".", "markers", ".", "append", "(", "bg", ")", "\n", "\n", "for", "i", ",", "lmname", "in", "enumerate", "(", "env_config", "[", "\"landmarkName\"", "]", ")", ":", "\n", "            ", "x", ",", "y", "=", "env_config", "[", "\"x_pos_as\"", "]", "[", "i", "]", ",", "env_config", "[", "\"y_pos_as\"", "]", "[", "i", "]", "\n", "m", "=", "Marker", "(", ")", "\n", "m", ".", "ns", "=", "\"env_config_balls\"", "\n", "m", ".", "id", "=", "i", "\n", "m", ".", "action", "=", "Marker", ".", "ADD", "\n", "m", ".", "header", ".", "frame_id", "=", "\"/map_ned\"", "\n", "m", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "m", ".", "type", "=", "Marker", ".", "SPHERE", "\n", "m", ".", "pose", ".", "position", ".", "x", "=", "x", "\n", "m", ".", "pose", ".", "position", ".", "y", "=", "y", "\n", "m", ".", "pose", ".", "orientation", ".", "w", "=", "1", "\n", "m", ".", "scale", ".", "x", "=", "0.2", "\n", "m", ".", "scale", ".", "y", "=", "0.2", "\n", "m", ".", "scale", ".", "z", "=", "0.2", "\n", "m", ".", "color", ".", "a", "=", "1.0", "\n", "m", ".", "color", ".", "r", "=", "float", "(", "colors", "[", "i", "]", "[", "0", "]", ")", "/", "255", "\n", "m", ".", "color", ".", "g", "=", "float", "(", "colors", "[", "i", "]", "[", "1", "]", ")", "/", "255", "\n", "m", ".", "color", ".", "b", "=", "float", "(", "colors", "[", "i", "]", "[", "2", "]", ")", "/", "255", "\n", "\n", "t", "=", "Marker", "(", ")", "\n", "t", ".", "ns", "=", "\"env_config_text\"", "\n", "t", ".", "id", "=", "i", "\n", "t", ".", "action", "=", "Marker", ".", "ADD", "\n", "t", ".", "header", ".", "frame_id", "=", "\"/map_ned\"", "\n", "t", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "t", ".", "type", "=", "Marker", ".", "TEXT_VIEW_FACING", "\n", "t", ".", "text", "=", "lmname", "\n", "t", ".", "pose", ".", "position", ".", "x", "=", "x", "\n", "t", ".", "pose", ".", "position", ".", "y", "=", "y", "\n", "t", ".", "pose", ".", "position", ".", "z", "=", "-", "0.4", "\n", "t", ".", "pose", ".", "orientation", ".", "w", "=", "1", "\n", "t", ".", "scale", ".", "x", "=", "0.4", "\n", "t", ".", "scale", ".", "y", "=", "0.4", "\n", "t", ".", "scale", ".", "z", "=", "0.4", "\n", "t", ".", "color", ".", "a", "=", "1.0", "\n", "t", ".", "color", ".", "r", "=", "float", "(", "colors", "[", "i", "]", "[", "0", "]", ")", "/", "255", "\n", "t", ".", "color", ".", "g", "=", "float", "(", "colors", "[", "i", "]", "[", "1", "]", ")", "/", "255", "\n", "t", ".", "color", ".", "b", "=", "float", "(", "colors", "[", "i", "]", "[", "2", "]", ")", "/", "255", "\n", "\n", "markerarray", ".", "markers", ".", "append", "(", "m", ")", "\n", "markerarray", ".", "markers", ".", "append", "(", "t", ")", "\n", "", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "markerarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.tensor_2d_to_pointcloud": [[254, 288], ["sensor_msgs.msg.PointCloud", "rospy.get_rostime", "numpy.linspace", "numpy.asarray", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.PointCloud.channels.append", "sensor_msgs.msg.PointCloud.channels.append", "sensor_msgs.msg.PointCloud.channels.append", "range", "numpy.min", "numpy.max", "numpy.meshgrid", "range", "geometry_msgs.msg.Point32", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.PointCloud.points.append", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "tensor_2d_to_pointcloud", "(", "self", ",", "ndarray", ",", "axis0_size_m", ",", "frame", "=", "\"/map_ned\"", ")", ":", "\n", "        ", "msg", "=", "PointCloud", "(", ")", "\n", "msg", ".", "header", ".", "frame_id", "=", "frame", "\n", "msg", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "\n", "# Shift and scale to 0-1 range", "\n", "map_data_np", "=", "ndarray", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "map_data_np", "=", "map_data_np", "-", "np", ".", "min", "(", "map_data_np", ")", "\n", "map_data_np", "/=", "(", "np", ".", "max", "(", "map_data_np", ")", "+", "1e-9", ")", "\n", "\n", "c", "=", "np", ".", "linspace", "(", "0", ",", "axis0_size_m", ",", "map_data_np", ".", "shape", "[", "1", "]", ")", "\n", "cgrid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "c", ",", "c", ")", ")", "\n", "\n", "r", "=", "ChannelFloat32", "(", ")", "\n", "r", ".", "name", "=", "\"r\"", "\n", "g", "=", "ChannelFloat32", "(", ")", "\n", "g", ".", "name", "=", "\"g\"", "\n", "b", "=", "ChannelFloat32", "(", ")", "\n", "b", ".", "name", "=", "\"b\"", "\n", "msg", ".", "channels", ".", "append", "(", "r", ")", "\n", "msg", ".", "channels", ".", "append", "(", "g", ")", "\n", "msg", ".", "channels", ".", "append", "(", "b", ")", "\n", "\n", "for", "x", "in", "range", "(", "map_data_np", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "map_data_np", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "p", "=", "Point32", "(", ")", "\n", "p", ".", "x", "=", "cgrid", "[", "0", ",", "x", ",", "y", "]", "\n", "p", ".", "y", "=", "cgrid", "[", "1", ",", "x", ",", "y", "]", "\n", "p", ".", "z", "=", "0.05", "\n", "r", ".", "values", ".", "append", "(", "float", "(", "map_data_np", "[", "x", ",", "y", ",", "0", "]", ")", ")", "\n", "g", ".", "values", ".", "append", "(", "float", "(", "map_data_np", "[", "x", ",", "y", ",", "1", "]", ")", ")", "\n", "b", ".", "values", ".", "append", "(", "float", "(", "map_data_np", "[", "x", ",", "y", ",", "2", "]", ")", ")", "\n", "msg", ".", "points", ".", "append", "(", "p", ")", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.tensor_3d_to_pointcloud": [[289, 333], ["sensor_msgs.msg.PointCloud", "rospy.get_rostime", "numpy.linspace", "numpy.asarray", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.ChannelFloat32", "sensor_msgs.msg.PointCloud.channels.append", "sensor_msgs.msg.PointCloud.channels.append", "sensor_msgs.msg.PointCloud.channels.append", "range", "print", "numpy.min", "numpy.max", "numpy.meshgrid", "range", "range", "int", "range", "len", "numpy.linalg.norm", "geometry_msgs.msg.Point32", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.ChannelFloat32.values.append", "sensor_msgs.msg.PointCloud.points.append", "numpy.linalg.norm", "min", "min", "min", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "tensor_3d_to_pointcloud", "(", "self", ",", "ndarray", ",", "axis0_size_m", ",", "frame", "=", "\"/map_ned\"", ")", ":", "\n", "        ", "msg", "=", "PointCloud", "(", ")", "\n", "msg", ".", "header", ".", "frame_id", "=", "frame", "\n", "msg", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "\n", "# Shift and scale to 0-1 range", "\n", "map_data_np", "=", "ndarray", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "map_data_np", "=", "map_data_np", "-", "np", ".", "min", "(", "map_data_np", ")", "\n", "map_data_np", "/=", "(", "np", ".", "max", "(", "map_data_np", ")", "+", "1e-9", ")", "\n", "\n", "c", "=", "np", ".", "linspace", "(", "0", ",", "axis0_size_m", ",", "map_data_np", ".", "shape", "[", "1", "]", ")", "\n", "cgrid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "c", ",", "c", ",", "c", ")", ")", "\n", "\n", "r", "=", "ChannelFloat32", "(", ")", "\n", "r", ".", "name", "=", "\"r\"", "\n", "g", "=", "ChannelFloat32", "(", ")", "\n", "g", ".", "name", "=", "\"g\"", "\n", "b", "=", "ChannelFloat32", "(", ")", "\n", "b", ".", "name", "=", "\"b\"", "\n", "msg", ".", "channels", ".", "append", "(", "r", ")", "\n", "msg", ".", "channels", ".", "append", "(", "g", ")", "\n", "msg", ".", "channels", ".", "append", "(", "b", ")", "\n", "\n", "for", "x", "in", "range", "(", "map_data_np", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "map_data_np", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "z", "in", "range", "(", "map_data_np", ".", "shape", "[", "2", "]", ")", ":", "\n", "                    ", "col", "=", "map_data_np", "[", "x", ",", "y", ",", "z", ",", ":", "]", "\n", "# TODO: Clear up this hack", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "col", ")", "<", "0.1", ":", "\n", "                        ", "continue", "\n", "\n", "# Add multiple overlapping points to increase alpha value", "\n", "", "intensity", "=", "int", "(", "(", "np", ".", "linalg", ".", "norm", "(", "col", ")", ")", "*", "10", ")", "\n", "for", "i", "in", "range", "(", "intensity", ")", ":", "\n", "                        ", "p", "=", "Point32", "(", ")", "\n", "p", ".", "x", "=", "cgrid", "[", "0", ",", "x", ",", "y", ",", "z", "]", "\n", "p", ".", "y", "=", "cgrid", "[", "1", ",", "x", ",", "y", ",", "z", "]", "\n", "p", ".", "z", "=", "cgrid", "[", "2", ",", "x", ",", "y", ",", "z", "]", "\n", "r", ".", "values", ".", "append", "(", "min", "(", "float", "(", "col", "[", "0", "]", ")", "*", "10", ",", "1.0", ")", ")", "\n", "g", ".", "values", ".", "append", "(", "min", "(", "float", "(", "col", "[", "1", "]", ")", "*", "10", ",", "1.0", ")", ")", "\n", "b", ".", "values", ".", "append", "(", "min", "(", "float", "(", "col", "[", "2", "]", ")", "*", "10", ",", "1.0", ")", ")", "\n", "msg", ".", "points", ".", "append", "(", "p", ")", "\n", "", "", "", "", "print", "(", "f\"Generated pointcloud with {len(msg.points)} points\"", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_tensor": [[334, 341], ["rviz.RvizInterface._get_pub().publish", "len", "rviz.RvizInterface.tensor_2d_to_pointcloud", "len", "rviz.RvizInterface.tensor_3d_to_pointcloud", "rviz.RvizInterface._get_pub"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.tensor_2d_to_pointcloud", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.tensor_3d_to_pointcloud", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub"], ["", "def", "publish_tensor", "(", "self", ",", "topic", ",", "ndarray", ",", "axis0_size_m", ",", "frame", "=", "\"/map_ned\"", ")", ":", "\n", "        ", "if", "len", "(", "ndarray", ".", "shape", ")", "==", "3", ":", "\n", "            ", "pc", "=", "self", ".", "tensor_2d_to_pointcloud", "(", "ndarray", ",", "axis0_size_m", ",", "frame", "=", "frame", ")", "\n", "", "elif", "len", "(", "ndarray", ".", "shape", ")", "==", "4", ":", "\n", "            ", "pc", "=", "self", ".", "tensor_3d_to_pointcloud", "(", "ndarray", ",", "axis0_size_m", ",", "frame", "=", "frame", ")", "\n", "\n", "", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "pc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_path": [[342, 346], ["rviz.RvizInterface._get_pub().publish", "rviz.RvizInterface._get_pub"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub"], ["", "def", "publish_path", "(", "self", ",", "topic", ")", ":", "\n", "        ", "if", "topic", "in", "self", ".", "paths", ":", "\n", "            ", "path", "=", "self", ".", "paths", "[", "topic", "]", "\n", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_pose": [[347, 360], ["geometry_msgs.msg.PoseStamped", "rospy.get_rostime", "rviz.RvizInterface._make_pose_msg", "rviz.RvizInterface._get_pub().publish", "rviz.RvizInterface._get_pub"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._make_pose_msg", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub"], ["", "", "def", "publish_pose", "(", "self", ",", "topic", ",", "pos_vec", ",", "rot_quat", ",", "frame", "=", "\"/map_ned\"", ",", "wxyz", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param topic: ROS topic to publish to.\n        :param pos_vec: 3-dimensional indexable position\n        :param rot_quat: wxyz quaternion, indexable\n        :param frame: frame_id to publish to. Default: /map_ned\n        :return:\n        \"\"\"", "\n", "ps", "=", "PoseStamped", "(", ")", "\n", "ps", ".", "header", ".", "frame_id", "=", "frame", "\n", "ps", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "ps", ".", "pose", "=", "self", ".", "_make_pose_msg", "(", "pos_vec", ",", "rot_quat", ",", "wxyz", "=", "wxyz", ")", "\n", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.add_pose_and_publish_array": [[362, 395], ["rviz.RvizInterface._make_pose_msg", "rospy.get_rostime", "geometry_msgs.msg.PoseArray.poses.append", "geometry_msgs.msg.PoseStamped", "nav_msgs.msg.Path.poses.append", "rviz.RvizInterface._get_pub().publish", "rviz.RvizInterface._get_pub().publish", "geometry_msgs.msg.PoseArray", "nav_msgs.msg.Path", "rviz.RvizInterface._get_pub", "rviz.RvizInterface._get_pub"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._make_pose_msg", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface._get_pub"], ["", "def", "add_pose_and_publish_array", "(", "self", ",", "topic", ",", "pos_vec", ",", "rot_quat", ",", "frame", "=", "\"/map_ned\"", ",", "wxyz", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param topic: ROS topic to publish to.\n        :param pos_vec: 3-dimensional indexable position\n        :param rot_quat: wxyz quaternion, indexable\n        :param frame: frame_id to publish to. Default: /map_ned\n        :return:\n        \"\"\"", "\n", "pose", "=", "self", ".", "_make_pose_msg", "(", "pos_vec", ",", "rot_quat", ",", "wxyz", "=", "wxyz", ")", "\n", "\n", "if", "topic", "not", "in", "self", ".", "pose_arrays", ":", "\n", "            ", "pa", "=", "PoseArray", "(", ")", "\n", "pa", ".", "header", ".", "frame_id", "=", "frame", "\n", "path", "=", "Path", "(", ")", "\n", "path", ".", "header", ".", "frame_id", "=", "frame", "\n", "self", ".", "pose_arrays", "[", "topic", "]", "=", "pa", "\n", "self", ".", "paths", "[", "topic", "]", "=", "path", "\n", "", "else", ":", "\n", "            ", "pa", "=", "self", ".", "pose_arrays", "[", "topic", "]", "\n", "path", "=", "self", ".", "paths", "[", "topic", "]", "\n", "\n", "", "pa", ".", "header", ".", "stamp", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "path", ".", "header", ".", "stamp", "=", "pa", ".", "header", ".", "stamp", "\n", "\n", "pa", ".", "poses", ".", "append", "(", "pose", ")", "\n", "\n", "ps", "=", "PoseStamped", "(", ")", "\n", "ps", ".", "header", "=", "pa", ".", "header", "\n", "ps", ".", "pose", "=", "pose", "\n", "path", ".", "poses", ".", "append", "(", "ps", ")", "\n", "\n", "self", ".", "_get_pub", "(", "topic", ")", ".", "publish", "(", "pa", ")", "\n", "self", ".", "_get_pub", "(", "topic", "+", "\"_path\"", ")", ".", "publish", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.reset_pose_array": [[396, 399], ["None"], "methods", ["None"], ["", "def", "reset_pose_array", "(", "self", ",", "topic", ")", ":", "\n", "        ", "if", "topic", "in", "self", ".", "pose_arrays", ":", "\n", "            ", "del", "self", ".", "pose_arrays", "[", "topic", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.EnterMonitor.__init__": [[30, 33], ["pykeyboard.PyKeyboardEvent.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "PyKeyboardEvent", ".", "__init__", "(", "self", ")", "\n", "self", ".", "tapped", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.EnterMonitor.tap": [[34, 40], ["print", "print"], "methods", ["None"], ["", "def", "tap", "(", "self", ",", "keycode", ",", "c", ",", "press", ")", ":", "\n", "        ", "'''Monitor Super key.'''", "\n", "print", "(", "\"TAP\"", ")", "\n", "print", "(", "c", ")", "\n", "if", "c", "==", "\"Return\"", ":", "\n", "            ", "self", ".", "tapped", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.MonitorRunner.__init__": [[43, 48], ["threading.Thread", "landmarkConfigurator.MonitorRunner.thread.start"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "monitor", ")", ":", "\n", "        ", "self", ".", "mon", "=", "monitor", "\n", "self", ".", "thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "run", ",", "args", "=", "(", ")", ")", "\n", "self", ".", "thread", ".", "daemon", "=", "True", "\n", "self", ".", "thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.MonitorRunner.run": [[49, 51], ["landmarkConfigurator.MonitorRunner.mon.run"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.MonitorRunner.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "mon", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.__init__": [[56, 91], ["drones.aero_interface.ros_node.init_node_if_necessary", "rospy.Time", "data_io.paths.get_ceiling_cam_calibration_path", "os.path.exists", "numpy.load", "numpy.load", "print", "print", "print", "landmarkConfigurator.LandmarkConfigurator.compute_and_save_f_matrix"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.ros_node.init_node_if_necessary", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_ceiling_cam_calibration_path", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.compute_and_save_f_matrix"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "init_node_if_necessary", "(", ")", "\n", "self", ".", "subscriber", "=", "None", "\n", "self", ".", "state_positioning", "=", "False", "\n", "self", ".", "state_instructions_printed", "=", "False", "\n", "self", ".", "env_config", "=", "None", "\n", "self", ".", "last_prompt_time", "=", "rospy", ".", "Time", "(", "0", ")", "\n", "self", ".", "image_to_show", "=", "None", "\n", "self", ".", "new_image", "=", "False", "\n", "\n", "self", ".", "enter_monitor", "=", "None", "\n", "self", ".", "monitor_runner", "=", "None", "\n", "\n", "# Calibration of rectified ceiling camera", "\n", "self", ".", "calib_s", "=", "470.0", "\n", "self", ".", "m_s", "=", "4.7", "\n", "self", ".", "calib_coords_m", "=", "[", "[", "0.0", ",", "0.0", "]", ",", "[", "0.0", ",", "self", ".", "m_s", "]", ",", "[", "self", ".", "m_s", ",", "0.0", "]", ",", "[", "self", ".", "m_s", ",", "self", ".", "m_s", "]", "]", "\n", "self", ".", "calib_coords_px", "=", "[", "[", "0.0", ",", "0.0", "]", ",", "[", "0.0", ",", "self", ".", "calib_s", "]", ",", "[", "self", ".", "calib_s", ",", "0.0", "]", ",", "[", "self", ".", "calib_s", ",", "self", ".", "calib_s", "]", "]", "\n", "self", ".", "calib_coords_px_in", "=", "[", "]", "\n", "self", ".", "lines_to_draw", "=", "[", "]", "\n", "\n", "# Loading calibration results:", "\n", "# TODO: Save and load from file", "\n", "self", ".", "img_topic", "=", "\"/ceiling_cam/image_rect_color\"", "\n", "path", "=", "get_ceiling_cam_calibration_path", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", "+", "\"_img2img.npy\"", ")", ":", "\n", "            ", "self", ".", "F_cam_p1_to_img_p2", "=", "np", ".", "load", "(", "path", "+", "\"_img2img.npy\"", ")", "\n", "self", ".", "F_world_m_to_img_p2", "=", "np", ".", "load", "(", "path", "+", "\"_world2img.npy\"", ")", "\n", "print", "(", "\"Loaded camera calibration: \"", ")", "\n", "print", "(", "self", ".", "F_cam_p1_to_img_p2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "F_cam_p1_to_img_p2", "=", "None", "\n", "self", ".", "F_world_m_to_img_p2", "=", "None", "\n", "print", "(", "\"Ceiling cam calibration missing. Computing!\"", ")", "\n", "self", ".", "compute_and_save_f_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.compute_and_save_f_matrix": [[92, 129], ["cv2.namedWindow", "cv2.setMouseCallback", "rospy.Subscriber", "cv2.imshow", "cv2.waitKey", "landmarkConfigurator.LandmarkConfigurator.project_image", "cv2.imshow", "cv2.waitKey", "cv2.line", "len", "tuple", "tuple", "len", "len", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.asarray().astype", "cv2.getPerspectiveTransform", "cv2.getPerspectiveTransform", "print", "print", "print", "print", "data_io.paths.get_ceiling_cam_calibration_path", "numpy.save", "numpy.save", "print", "len", "print", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.project_image", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_ceiling_cam_calibration_path", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save"], ["", "", "def", "compute_and_save_f_matrix", "(", "self", ")", ":", "\n", "        ", "cv2", ".", "namedWindow", "(", "\"ui\"", ")", "\n", "cv2", ".", "setMouseCallback", "(", "\"ui\"", ",", "self", ".", "_opencv_click_callback", ")", "\n", "\n", "self", ".", "subscriber", "=", "rospy", ".", "Subscriber", "(", "self", ".", "img_topic", ",", "Image", ",", "self", ".", "_calibration_image_callback", ")", "\n", "current_calib_len", "=", "-", "1", "\n", "while", "True", ":", "\n", "            ", "if", "self", ".", "new_image", ":", "\n", "                ", "if", "self", ".", "F_cam_p1_to_img_p2", "is", "None", ":", "\n", "                    ", "for", "pt1", ",", "pt2", "in", "self", ".", "lines_to_draw", ":", "\n", "                        ", "cv2", ".", "line", "(", "self", ".", "image_to_show", ",", "tuple", "(", "pt1", ")", ",", "tuple", "(", "pt2", ")", ",", "color", "=", "(", "255", ",", "0", ",", "255", ")", ")", "\n", "", "cv2", ".", "imshow", "(", "\"ui\"", ",", "self", ".", "image_to_show", ")", "\n", "cv2", ".", "waitKey", "(", "20", ")", "\n", "if", "len", "(", "self", ".", "calib_coords_px_in", ")", ">", "current_calib_len", ":", "\n", "                        ", "if", "len", "(", "self", ".", "calib_coords_px_in", ")", "==", "len", "(", "self", ".", "calib_coords_m", ")", ":", "\n", "                            ", "p1", "=", "np", ".", "asarray", "(", "self", ".", "calib_coords_px_in", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "p2", "=", "np", ".", "asarray", "(", "self", ".", "calib_coords_px", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "p3", "=", "np", ".", "asarray", "(", "self", ".", "calib_coords_m", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "F_cam_p1_to_img_p2", "=", "cv2", ".", "getPerspectiveTransform", "(", "p1", ",", "p2", ")", "\n", "self", ".", "F_world_m_to_img_p2", "=", "cv2", ".", "getPerspectiveTransform", "(", "p3", ",", "p2", ")", "\n", "print", "(", "\"Calibration img2img:\"", ")", "\n", "print", "(", "self", ".", "F_cam_p1_to_img_p2", ")", "\n", "print", "(", "\"Calibration world2img:\"", ")", "\n", "print", "(", "self", ".", "F_world_m_to_img_p2", ")", "\n", "path", "=", "get_ceiling_cam_calibration_path", "(", ")", "\n", "np", ".", "save", "(", "path", "+", "\"_img2img.npy\"", ",", "self", ".", "F_cam_p1_to_img_p2", ")", "\n", "np", ".", "save", "(", "path", "+", "\"_world2img.npy\"", ",", "self", ".", "F_world_m_to_img_p2", ")", "\n", "print", "(", "f\"Saved to {path}\"", ")", "\n", "", "else", ":", "\n", "                            ", "current_calib_len", "=", "len", "(", "self", ".", "calib_coords_px_in", ")", "\n", "print", "(", "f\"Click on the image the world point: {self.calib_coords_m[current_calib_len]}\"", ")", "\n", "", "", "", "else", ":", "\n", "# Show the calibration results", "\n", "                    ", "proj", "=", "self", ".", "project_image", "(", "self", ".", "image_to_show", ",", "self", ".", "F_cam_p1_to_img_p2", ")", "\n", "cv2", ".", "imshow", "(", "\"result\"", ",", "proj", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.project_image": [[131, 134], ["cv2.warpPerspective", "int", "int"], "methods", ["None"], ["", "", "", "", "def", "project_image", "(", "self", ",", "img_in", ",", "F", ")", ":", "\n", "        ", "img_out", "=", "cv2", ".", "warpPerspective", "(", "img_in", ",", "F", ",", "(", "int", "(", "self", ".", "calib_s", ")", ",", "int", "(", "self", ".", "calib_s", ")", ")", ")", "\n", "return", "img_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.configure_landmarks": [[135, 164], ["data_io.env.load_and_convert_env_config", "rospy.Subscriber", "landmarkConfigurator.EnterMonitor", "landmarkConfigurator.MonitorRunner", "data_io.env.load_env_img", "time.sleep", "cv2.destroyWindow", "cv2.destroyWindow", "landmarkConfigurator.LandmarkConfigurator.subscriber.unregister", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "cv2.moveWindow", "cv2.moveWindow", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "configure_landmarks", "(", "self", ",", "env_id", ")", ":", "\n", "        ", "self", ".", "env_config", "=", "load_and_convert_env_config", "(", "env_id", ")", "\n", "self", ".", "state_positioning", "=", "True", "\n", "self", ".", "state_instructions_printed", "=", "False", "\n", "\n", "self", ".", "subscriber", "=", "rospy", ".", "Subscriber", "(", "self", ".", "img_topic", ",", "Image", ",", "self", ".", "_image_callback", ")", "\n", "\n", "self", ".", "enter_monitor", "=", "EnterMonitor", "(", ")", "\n", "self", ".", "monitor_runner", "=", "MonitorRunner", "(", "self", ".", "enter_monitor", ")", "\n", "\n", "env_sim_img", "=", "load_env_img", "(", "env_id", ",", "width", "=", "400", ",", "height", "=", "400", ",", "real_drone", "=", "False", ",", "origin_bottom_left", "=", "False", ")", "\n", "\n", "new", "=", "True", "\n", "while", "True", ":", "\n", "            ", "if", "self", ".", "new_image", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "self", ".", "image_to_show", ",", "\"Landmark Positioning\"", ",", "scale", "=", "2", ",", "waitkey", "=", "10", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "env_sim_img", ",", "\"Sim Image\"", ",", "scale", "=", "2", ",", "waitkey", "=", "10", ")", "\n", "if", "new", ":", "\n", "                    ", "cv2", ".", "moveWindow", "(", "\"Landmark Positioning\"", ",", "20", ",", "20", ")", "\n", "cv2", ".", "moveWindow", "(", "\"Sim Image\"", ",", "1000", ",", "20", ")", "\n", "new", "=", "False", "\n", "", "", "if", "self", ".", "enter_monitor", ".", "tapped", "or", "SKIP_CONFIGURATION", ":", "\n", "                ", "break", "\n", "\n", "", "", "sleep", "(", "1", ")", "\n", "cv2", ".", "destroyWindow", "(", "'Landmark Positioning'", ")", "\n", "cv2", ".", "destroyWindow", "(", "\"Sim Image\"", ")", "\n", "self", ".", "subscriber", ".", "unregister", "(", ")", "\n", "return", "self", ".", "image_to_show", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator._opencv_click_callback": [[165, 174], ["print", "landmarkConfigurator.LandmarkConfigurator.calib_coords_px_in.append", "landmarkConfigurator.LandmarkConfigurator.lines_to_draw.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "_opencv_click_callback", "(", "self", ",", "event", ",", "x", ",", "y", ",", "flags", ",", "param", ")", ":", "\n", "        ", "if", "event", "==", "cv2", ".", "EVENT_LBUTTONDOWN", ":", "\n", "            ", "print", "(", "x", ",", "y", ")", "\n", "self", ".", "calib_coords_px_in", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "", "elif", "event", "==", "cv2", ".", "EVENT_MOUSEMOVE", ":", "\n", "# Draw polygon connecting this new point with each of the existing points:", "\n", "            ", "self", ".", "lines_to_draw", "=", "[", "]", "\n", "for", "existing_pt", "in", "self", ".", "calib_coords_px_in", ":", "\n", "                ", "self", ".", "lines_to_draw", ".", "append", "(", "[", "existing_pt", ",", "[", "x", ",", "y", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator._pad_image": [[175, 183], ["list", "numpy.zeros().astype", "numpy.zeros"], "methods", ["None"], ["", "", "", "def", "_pad_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "PADDING", "=", "200", "\n", "new_shape", "=", "list", "(", "img", ".", "shape", ")", "\n", "new_shape", "[", "0", "]", "+=", "2", "*", "PADDING", "\n", "new_shape", "[", "1", "]", "+=", "2", "*", "PADDING", "\n", "img_array_out", "=", "np", ".", "zeros", "(", "new_shape", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "img_array_out", "[", "PADDING", ":", "new_shape", "[", "0", "]", "-", "PADDING", ",", "PADDING", ":", "new_shape", "[", "1", "]", "-", "PADDING", ",", ":", "]", "=", "img", "\n", "return", "img_array_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator._calibration_image_callback": [[184, 189], ["cv_bridge.CvBridge", "numpy.asarray", "landmarkConfigurator.LandmarkConfigurator._pad_image", "cv_bridge.CvBridge.imgmsg_to_cv2"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator._pad_image"], ["", "def", "_calibration_image_callback", "(", "self", ",", "img", ")", ":", "\n", "        ", "bridge", "=", "CvBridge", "(", ")", "\n", "image_array", "=", "np", ".", "asarray", "(", "bridge", ".", "imgmsg_to_cv2", "(", "img", ",", "\"rgb8\"", ")", ")", "\n", "self", ".", "image_to_show", "=", "self", ".", "_pad_image", "(", "image_array", ")", "\n", "self", ".", "new_image", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator._image_callback": [[190, 222], ["rospy.is_shutdown", "cv_bridge.CvBridge", "numpy.asarray", "landmarkConfigurator.LandmarkConfigurator._pad_image", "landmarkConfigurator.LandmarkConfigurator.project_image", "enumerate", "cv_bridge.CvBridge.imgmsg_to_cv2", "int", "int", "names_and_colors.append", "cv2.circle", "cv2.putText", "print", "rospy.get_rostime", "rospy.get_rostime"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator._pad_image", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.landmarkConfigurator.LandmarkConfigurator.project_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "_image_callback", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "not", "rospy", ".", "is_shutdown", "(", ")", ":", "\n", "            ", "bridge", "=", "CvBridge", "(", ")", "\n", "image_array", "=", "np", ".", "asarray", "(", "bridge", ".", "imgmsg_to_cv2", "(", "img", ",", "\"rgb8\"", ")", ")", "\n", "image_array", "=", "self", ".", "_pad_image", "(", "image_array", ")", "\n", "image_array", "=", "self", ".", "project_image", "(", "image_array", ",", "self", ".", "F_cam_p1_to_img_p2", ")", "\n", "\n", "names_and_colors", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "env_config", "[", "\"landmarkName\"", "]", ")", ":", "\n", "                ", "x_m", ",", "y_m", "=", "self", ".", "env_config", "[", "\"x_pos_as\"", "]", "[", "i", "]", ",", "self", ".", "env_config", "[", "\"y_pos_as\"", "]", "[", "i", "]", "\n", "x_px", "=", "int", "(", "x_m", "*", "self", ".", "calib_s", "/", "self", ".", "m_s", ")", "\n", "y_px", "=", "int", "(", "y_m", "*", "self", ".", "calib_s", "/", "self", ".", "m_s", ")", "\n", "#lm_pos_m = np.asarray([x, y, 1])", "\n", "#lm_pos_px = np.dot(self.F_world_m_to_img_p2, lm_pos_m).astype(np.int32)", "\n", "color", "=", "colors", "[", "i", "]", "\n", "color_name", "=", "color_names", "[", "i", "]", "\n", "names_and_colors", ".", "append", "(", "(", "name", ",", "color_name", ")", ")", "\n", "cv2", ".", "circle", "(", "image_array", ",", "(", "y_px", ",", "x_px", ")", ",", "5", ",", "color", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "image_array", ",", "name", ",", "(", "y_px", ",", "x_px", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.6", ",", "color", ",", "2", ")", "\n", "\n", "", "prompt", "=", "\". \\n\"", ".", "join", "(", "[", "f\"{lm} is {c}\"", "for", "lm", ",", "c", "in", "names_and_colors", "]", ")", "\n", "\n", "if", "not", "self", ".", "state_instructions_printed", ":", "\n", "                ", "print", "(", "prompt", ")", "\n", "#t2s(prompt)", "\n", "self", ".", "state_instructions_printed", "=", "True", "\n", "", "if", "(", "rospy", ".", "get_rostime", "(", ")", "-", "self", ".", "last_prompt_time", ")", ".", "to_sec", "(", ")", ">", "10", ":", "\n", "#repeat(dontblock=True)", "\n", "                ", "self", ".", "last_prompt_time", "=", "rospy", ".", "get_rostime", "(", ")", "\n", "\n", "", "self", ".", "image_to_show", "=", "image_array", "\n", "self", ".", "new_image", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location._landmark_cost_grid": [[12, 38], ["numpy.zeros", "int", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter.min", "int", "int", "scipy.ndimage.gaussian_filter.max", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["def", "_landmark_cost_grid", "(", "landmark_locations", ")", ":", "\n", "    ", "\"\"\"\n    Assign cost to areas near landmarks following gaussian distributions\n    :param landmark_locations:\n    :return:\n    \"\"\"", "\n", "cost_grid", "=", "np", ".", "zeros", "(", "(", "GRID_RES", ",", "GRID_RES", ")", ")", "\n", "world_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", "\n", "for", "lm_coord", "in", "landmark_locations", ":", "\n", "        ", "lm_x", "=", "lm_coord", "[", "0", "]", "\n", "lm_y", "=", "lm_coord", "[", "1", "]", "\n", "\n", "lm_coord_x", "=", "int", "(", "lm_x", "*", "GRID_RES", "/", "world_size", ")", "\n", "lm_coord_y", "=", "int", "(", "lm_y", "*", "GRID_RES", "/", "world_size", ")", "\n", "cost_grid", "[", "lm_coord_x", ",", "lm_coord_y", "]", "=", "1.0", "\n", "\n", "", "clearance_grid", "=", "int", "(", "CLEARANCE_M", "*", "GRID_RES", "/", "world_size", ")", "\n", "\n", "# Gaussian blur", "\n", "cost_grid", "=", "gaussian_filter", "(", "cost_grid", ",", "clearance_grid", ")", "\n", "\n", "# Normalize in the range of 0-1", "\n", "cost_grid", "-=", "cost_grid", ".", "min", "(", ")", "\n", "cost_grid", "/=", "(", "cost_grid", ".", "max", "(", ")", "+", "1e-9", ")", "\n", "\n", "return", "cost_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location._drone_pos_cost_grid": [[40, 58], ["numpy.linspace", "numpy.asarray", "numpy.asarray", "numpy.linalg.norm", "numpy.abs", "numpy.min", "numpy.meshgrid", "numpy.max", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "_drone_pos_cost_grid", "(", "curr_pos", ")", ":", "\n", "    ", "\"\"\"\n    Assign higher cost to areas further from the drone\n    :param curr_pos:\n    :return:\n    \"\"\"", "\n", "world_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", "\n", "c", "=", "np", ".", "linspace", "(", "0", ",", "world_size", ",", "20", ")", "\n", "coord_grid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "c", ",", "c", ")", ")", "\n", "curr_pos", "=", "np", ".", "asarray", "(", "curr_pos", "[", ":", "2", "]", ")", "\n", "vec_to_drone", "=", "coord_grid", "-", "curr_pos", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "dst_to_drone", "=", "np", ".", "linalg", ".", "norm", "(", "vec_to_drone", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "abs_dst_to_drone", "=", "np", ".", "abs", "(", "dst_to_drone", ")", "\n", "\n", "abs_dst_to_drone", "-=", "np", ".", "min", "(", "abs_dst_to_drone", ")", "\n", "abs_dst_to_drone", "/=", "(", "np", ".", "max", "(", "abs_dst_to_drone", ")", "+", "1e-9", ")", "\n", "\n", "return", "abs_dst_to_drone", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location._cage_boundary_cost_grid": [[59, 74], ["numpy.zeros", "int", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter.min", "scipy.ndimage.gaussian_filter.max", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "_cage_boundary_cost_grid", "(", ")", ":", "\n", "    ", "cost_grid", "=", "np", ".", "zeros", "(", "(", "GRID_RES", ",", "GRID_RES", ")", ")", "\n", "cost_grid", "[", "0", ",", ":", "]", "=", "1.0", "\n", "cost_grid", "[", "-", "1", ",", ":", "]", "=", "1.0", "\n", "cost_grid", "[", ":", ",", "0", "]", "=", "1.0", "\n", "cost_grid", "[", ":", ",", "-", "1", "]", "=", "1.0", "\n", "\n", "world_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", "\n", "clearance_grid", "=", "int", "(", "CLEARANCE_M", "*", "GRID_RES", "/", "world_size", ")", "\n", "cost_grid", "=", "gaussian_filter", "(", "cost_grid", ",", "clearance_grid", ")", "\n", "\n", "# Normalize in the range of 0-1", "\n", "cost_grid", "-=", "cost_grid", ".", "min", "(", ")", "\n", "cost_grid", "/=", "(", "cost_grid", ".", "max", "(", ")", "+", "1e-9", ")", "\n", "return", "cost_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location.find_safe_landing_location": [[75, 116], ["enumerate", "find_landing_location._landmark_cost_grid", "find_landing_location._cage_boundary_cost_grid", "numpy.argmin", "numpy.asarray", "landmark_locations.append", "enumerate", "find_landing_location._drone_pos_cost_grid", "numpy.zeros", "numpy.unravel_index", "parameters.get_current_parameters", "landmark_locations.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location._landmark_cost_grid", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location._cage_boundary_cost_grid", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.find_landing_location._drone_pos_cost_grid", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "find_safe_landing_location", "(", "config_a", ",", "config_b", "=", "None", ",", "current_pos", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Finds a safe landing location that does not intersect any of the landmarks in either of the configs\n    and is close to the drone's current position\n    :param config_a: the first config (e.g. current config)\n    :param config_b: the second config (e.g. what we're reconfiguring to)\n    :param curr_pos: 2D position of where the drone currently is\n    :return:\n    \"\"\"", "\n", "world_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", "\n", "landmark_locations", "=", "[", "]", "\n", "for", "i", ",", "lm_name", "in", "enumerate", "(", "config_a", "[", "\"landmarkName\"", "]", ")", ":", "\n", "        ", "x", "=", "config_a", "[", "\"x_pos_as\"", "]", "[", "i", "]", "\n", "y", "=", "config_a", "[", "\"y_pos_as\"", "]", "[", "i", "]", "\n", "landmark_locations", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "", "if", "config_b", ":", "\n", "        ", "for", "i", ",", "lm_name", "in", "enumerate", "(", "config_b", "[", "\"landmarkName\"", "]", ")", ":", "\n", "            ", "x", "=", "config_a", "[", "\"x_pos_as\"", "]", "[", "i", "]", "\n", "y", "=", "config_a", "[", "\"y_pos_as\"", "]", "[", "i", "]", "\n", "landmark_locations", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "", "", "landmark_cost_grid", "=", "_landmark_cost_grid", "(", "landmark_locations", ")", "\n", "if", "current_pos", "is", "not", "None", ":", "\n", "        ", "drone_cost_grid", "=", "_drone_pos_cost_grid", "(", "current_pos", ")", "\n", "", "else", ":", "\n", "        ", "drone_cost_grid", "=", "np", ".", "zeros", "(", "(", "GRID_RES", ",", "GRID_RES", ")", ")", "\n", "\n", "", "cage_cost_grid", "=", "_cage_boundary_cost_grid", "(", ")", "\n", "\n", "# TODO: Maybe it's better to land close to landmarks than close to cage edges", "\n", "cost_grid", "=", "landmark_cost_grid", "+", "0.5", "*", "drone_cost_grid", "+", "cage_cost_grid", "\n", "\n", "best_loc", "=", "np", ".", "argmin", "(", "cost_grid", ")", "\n", "best_loc", "=", "np", ".", "asarray", "(", "np", ".", "unravel_index", "(", "best_loc", ",", "cost_grid", ".", "shape", ")", ")", "\n", "best_loc", "=", "best_loc", "*", "world_size", "/", "GRID_RES", "\n", "\n", "#cv2.imshow(\"landing cost grid\", cost_grid)", "\n", "#cv2.waitKey(0)", "\n", "#Presenter().show_image(cost_grid, \"landing cost grid\", scale=5, waitkey=True)", "\n", "\n", "return", "best_loc", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.__init__": [[12, 15], ["rate.Rate.now"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.now"], ["def", "__init__", "(", "self", ",", "rate", ")", ":", "\n", "        ", "self", ".", "rate", "=", "rate", "\n", "self", ".", "last_ticks", "=", "self", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.now": [[16, 26], ["datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.now"], ["", "def", "now", "(", "self", ")", ":", "\n", "        ", "datetime_now", "=", "datetime", ".", "now", "(", ")", "\n", "secs", "=", "datetime_now", ".", "month", "*", "12", "*", "24", "*", "60", "*", "60", "+", "datetime_now", ".", "day", "*", "24", "*", "60", "*", "60", "+", "datetime_now", ".", "hour", "*", "60", "*", "60", "+", "datetime_now", ".", "minute", "*", "60", "+", "datetime_now", ".", "second", "+", "datetime_now", ".", "microsecond", "*", "1e-6", "\n", "\n", "return", "secs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.reset": [[27, 29], ["rate.Rate.now"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.now"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "last_ticks", "=", "self", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep": [[30, 40], ["rate.Rate.now", "time.sleep", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.now", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["", "def", "sleep", "(", "self", ",", "quiet", "=", "False", ")", ":", "\n", "        ", "now", "=", "self", ".", "now", "(", ")", "\n", "next_time", "=", "self", ".", "last_ticks", "+", "self", ".", "rate", "\n", "self", ".", "last_ticks", "=", "now", "\n", "sleep_time", "=", "next_time", "-", "now", "\n", "if", "sleep_time", "<=", "0", ":", "\n", "            ", "if", "not", "quiet", ":", "\n", "                ", "print", "(", "\"Warning: Rate missed desired interval: \"", "+", "str", "(", "self", ".", "rate", ")", "+", "\" by \"", "+", "str", "(", "sleep_time", ")", ")", "\n", "", "return", "\n", "", "sleep", "(", "sleep_time", ")", "\n", "#Uncomment for debugging:", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep_n_intervals": [[44, 48], ["rate.Rate.reset", "range", "rate.Rate.sleep"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep"], ["", "def", "sleep_n_intervals", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "self", ".", "sleep", "(", "quiet", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.__init__": [[112, 129], ["drones.droneControllerBase.DroneControllerBase.__init__", "droneController.DroneController._read_clock_speed", "print", "drones.airsim_interface.rate.Rate", "[].get", "droneController.killAirSim", "droneController.DroneController._write_airsim_settings", "droneController.startAirSim", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._read_clock_speed", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.killAirSim", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._write_airsim_settings", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._get_config": [[130, 133], ["data_io.env.load_env_config"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._set_config": [[134, 153], ["data_io.get_current_config_folder", "os.path.join", "os.path.isfile", "subprocess.check_call", "data_io.get_sim_config_dir", "os.path.isdir", "os.remove", "open", "json.dump", "str", "os.path.dirname", "os.makedirs", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_current_config_folder", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_config_dir"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._load_drone_config": [[154, 157], ["data_io.env.load_env_config", "droneController.DroneController._set_config"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._set_config"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start_call": [[158, 172], ["droneController.DroneController.client.enableApiControl", "droneController.DroneController.client.armDisarm", "print_error", "print_error", "print_error", "droneController.startAirSim", "drones.rollout_exception.RolloutException", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.enableApiControl", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.armDisarm", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.utils.colors.print_error", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start": [[173, 186], ["MultirotorClient", "droneController.DroneController.client.confirmConnection", "droneController.DroneController._start_call", "droneController.DroneController.client.getPosition", "print", "droneController.DroneController.teleport_3d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.confirmConnection", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start_call", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getPosition", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_3d"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._read_clock_speed": [[187, 193], ["print", "parameters.get_current_parameters", "str", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._write_airsim_settings": [[194, 200], ["os.path.expanduser", "data_io.helpers.save_json", "print", "parameters.get_current_parameters", "parameters.get_current_parameters", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._try_teleport_to": [[211, 243], ["droneController.DroneController.client.toQuaternion", "droneController.DroneController.send_local_velocity_command", "Vector3r", "droneController.DroneController.client.simSetPose", "droneController.DroneController.send_local_velocity_command", "droneController.DroneController.rate.sleep_n_intervals", "droneController.DroneController.rate.sleep_n_intervals", "droneController.DroneController.client.getPosition", "droneController.DroneController.client.simSetPose", "droneController.DroneController.rate.sleep_n_intervals", "droneController.DroneController.client.simSetPose", "droneController.DroneController.rate.sleep_n_intervals"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.toQuaternion", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simSetPose", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep_n_intervals", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep_n_intervals", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getPosition", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simSetPose", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep_n_intervals", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simSetPose", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep_n_intervals"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._get_yaw": [[245, 249], ["droneController.DroneController.client.getOrientation", "transforms3d.euler.quat2euler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getOrientation"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.get_real_time_rate": [[250, 252], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command": [[253, 271], ["droneController.DroneController._action_to_global", "len", "YawMode", "droneController.DroneController.client.moveByVelocityZ", "droneController.startAirSim", "drones.rollout_exception.RolloutException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.drones.droneControllerBase.DroneControllerBase._action_to_global", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveByVelocityZ", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_to": [[272, 296], ["range", "droneController.DroneController._try_teleport_to", "droneController.DroneController.client.getPosition", "np.asarray", "print", "print", "print", "droneController.DroneController.client.moveToPosition", "droneController.startAirSim", "drones.rollout_exception.RolloutException", "np.linalg.norm", "math.fabs"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._try_teleport_to", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getPosition", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveToPosition", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.teleport_3d": [[298, 316], ["droneController.DroneController.client.toQuaternion", "droneController.DroneController.send_local_velocity_command", "droneController.DroneController.rate.sleep_n_intervals", "Vector3r", "droneController.DroneController.client.simSetPose", "droneController.DroneController.send_local_velocity_command", "time.sleep", "droneController.startAirSim", "drones.rollout_exception.RolloutException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.toQuaternion", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep_n_intervals", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simSetPose", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.send_local_velocity_command", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.get_state": [[318, 387], ["droneController.DroneController.client.simGetImages", "np.frombuffer", "np.frombuffer.reshape", "np.concatenate", "droneController.DroneController.client.getPosition", "droneController.DroneController.client.getVelocity", "droneController.DroneController.client.getOrientation", "np.asarray", "np.asarray", "np.asarray", "np.concatenate", "ImageRequest", "request.append", "request.append", "np.asarray", "np.asarray.reshape", "np.clip", "depth_raw.astype.astype.astype", "concat.append", "np.frombuffer", "np.frombuffer.reshape", "concat.append", "transforms3d.euler.quat2euler", "droneController.startAirSim", "drones.rollout_exception.RolloutException", "ImageRequest", "ImageRequest"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simGetImages", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getPosition", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getVelocity", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getOrientation", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.set_current_env_from_config": [[388, 400], ["droneController.DroneController._set_config", "droneController.startAirSim", "drones.rollout_exception.RolloutException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._set_config", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.set_current_env_id": [[401, 408], ["droneController.DroneController._load_drone_config", "gc.collect", "droneController.startAirSim", "drones.rollout_exception.RolloutException"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._load_drone_config", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.set_current_seg_idx": [[409, 411], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.rollout_begin": [[412, 414], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.rollout_end": [[415, 417], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.reset_environment": [[418, 422], ["droneController.DroneController._start_call", "droneController.DroneController.client.simResetEnv", "droneController.DroneController._start_call"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start_call", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simResetEnv", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start_call"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController.land": [[423, 425], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_headless_worker": [[44, 50], ["print", "print", "print", "subprocess.Popen", "str", "str", "data_io.get_sim_executable_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_executable_path"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_worker": [[52, 68], ["str", "str", "str", "subprocess.Popen", "parameters.get_current_parameters", "str", "[].get", "[].get", "str", "parameters.get_current_parameters", "parameters.get_current_parameters", "data_io.get_sim_executable_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_sim_executable_path"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_workers": [[70, 77], ["range", "[].get", "droneController.spawn_headless_worker", "droneController.spawn_worker", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_headless_worker", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_worker", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.startAirSim": [[79, 102], ["controller._start", "print", "print", "[].get", "time.sleep", "controller._start", "droneController.spawn_headless_worker", "droneController.spawn_worker", "droneController.killAirSim", "print", "[].get", "time.sleep", "controller._start", "droneController.spawn_headless_worker", "droneController.spawn_worker", "str", "parameters.get_current_parameters", "str", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_headless_worker", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_worker", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.killAirSim", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.DroneController._start", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_headless_worker", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.spawn_worker", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.droneController.killAirSim": [[104, 107], ["os.system"], "function", ["None"], []], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.to_msgpack": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "to_msgpack", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "# msgpack.dump(self.to_dict(*args, **kwargs))", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack": [[16, 21], ["cls", "k.decode", "encoded.items"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_msgpack", "(", "cls", ",", "encoded", ")", ":", "\n", "        ", "obj", "=", "cls", "(", ")", "\n", "obj", ".", "__dict__", "=", "{", "k", ".", "decode", "(", "'utf-8'", ")", ":", "v", "for", "k", ",", "v", "in", "encoded", ".", "items", "(", ")", "}", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.Vector3r.__init__": [[48, 52], ["numpy.float32", "numpy.float32", "numpy.float32"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x_val", "=", "np", ".", "float32", "(", "0", ")", ",", "y_val", "=", "np", ".", "float32", "(", "0", ")", ",", "z_val", "=", "np", ".", "float32", "(", "0", ")", ")", ":", "\n", "        ", "self", ".", "x_val", "=", "x_val", "\n", "self", ".", "y_val", "=", "y_val", "\n", "self", ".", "z_val", "=", "z_val", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.Quaternionr.__init__": [[60, 65], ["numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x_val", "=", "np", ".", "float32", "(", "0", ")", ",", "y_val", "=", "np", ".", "float32", "(", "0", ")", ",", "z_val", "=", "np", ".", "float32", "(", "0", ")", ",", "w_val", "=", "np", ".", "float32", "(", "1", ")", ")", ":", "\n", "        ", "self", ".", "x_val", "=", "x_val", "\n", "self", ".", "y_val", "=", "y_val", "\n", "self", ".", "z_val", "=", "z_val", "\n", "self", ".", "w_val", "=", "w_val", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.Pose.__init__": [[71, 74], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "position_val", ",", "orientation_val", ")", ":", "\n", "        ", "self", ".", "position", "=", "position_val", "\n", "self", ".", "orientation", "=", "orientation_val", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.YawMode.__init__": [[95, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_rate", "=", "True", ",", "yaw_or_rate", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "is_rate", "=", "is_rate", "\n", "self", ".", "yaw_or_rate", "=", "yaw_or_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.ImageRequest.__init__": [[106, 111], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "camera_id", ",", "image_type", ",", "pixels_as_float", "=", "False", ",", "compress", "=", "True", ")", ":", "\n", "        ", "self", ".", "camera_id", "=", "camera_id", "\n", "self", ".", "image_type", "=", "image_type", "\n", "self", ".", "pixels_as_float", "=", "pixels_as_float", "\n", "self", ".", "compress", "=", "compress", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.CarControls.set_throttle": [[136, 145], ["abs", "abs"], "methods", ["None"], ["def", "set_throttle", "(", "self", ",", "throttle_val", ",", "forward", ")", ":", "\n", "        ", "if", "(", "forward", ")", ":", "\n", "            ", "is_manual_gear", "=", "False", "\n", "manual_gear", "=", "0", "\n", "throttle", "=", "abs", "(", "throttle_val", ")", "\n", "", "else", ":", "\n", "            ", "is_manual_gear", "=", "False", "\n", "manual_gear", "=", "-", "1", "\n", "throttle", "=", "-", "abs", "(", "throttle_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.__init__": [[156, 158], ["msgpackrpc.Client", "msgpackrpc.Address"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ip", ",", "port", ")", ":", "\n", "        ", "self", ".", "client", "=", "msgpackrpc", ".", "Client", "(", "msgpackrpc", ".", "Address", "(", "ip", ",", "port", ")", ",", "timeout", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.ping": [[159, 161], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "ping", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'ping'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.reset": [[162, 164], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "client", ".", "call", "(", "'reset'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.confirmConnection": [[165, 174], ["print", "airsimClientNew.AirSimClientBase.getHomeGeoPoint", "print", "math.isnan", "math.isnan", "math.isnan", "time.sleep", "airsimClientNew.AirSimClientBase.getHomeGeoPoint", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.getHomeGeoPoint", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.getHomeGeoPoint"], ["", "def", "confirmConnection", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Waiting for connection: '", ",", "end", "=", "''", ")", "\n", "home", "=", "self", ".", "getHomeGeoPoint", "(", ")", "\n", "while", "(", "(", "home", ".", "latitude", "==", "0", "and", "home", ".", "longitude", "==", "0", "and", "home", ".", "altitude", "==", "0", ")", "or", "\n", "math", ".", "isnan", "(", "home", ".", "latitude", ")", "or", "math", ".", "isnan", "(", "home", ".", "longitude", ")", "or", "math", ".", "isnan", "(", "home", ".", "altitude", ")", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "home", "=", "self", ".", "getHomeGeoPoint", "(", ")", "\n", "print", "(", "'X'", ",", "end", "=", "''", ")", "\n", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.getHomeGeoPoint": [[175, 177], ["airsimClientNew.MsgpackMixin.from_msgpack", "airsimClientNew.AirSimClientBase.client.call"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "getHomeGeoPoint", "(", "self", ")", ":", "\n", "        ", "return", "GeoPoint", ".", "from_msgpack", "(", "self", ".", "client", ".", "call", "(", "'getHomeGeoPoint'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.enableApiControl": [[179, 181], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "enableApiControl", "(", "self", ",", "is_enabled", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'enableApiControl'", ",", "is_enabled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.isApiControlEnabled": [[182, 184], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "isApiControlEnabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'isApiControlEnabled'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simSetSegmentationObjectID": [[185, 187], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "simSetSegmentationObjectID", "(", "self", ",", "mesh_name", ",", "object_id", ",", "is_name_regex", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'simSetSegmentationObjectID'", ",", "mesh_name", ",", "object_id", ",", "is_name_regex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simGetSegmentationObjectID": [[188, 190], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "simGetSegmentationObjectID", "(", "self", ",", "mesh_name", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'simGetSegmentationObjectID'", ",", "mesh_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simGetImage": [[194, 200], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "simGetImage", "(", "self", ",", "camera_id", ",", "image_type", ")", ":", "\n", "# because this method returns std::vector<uint8>, msgpack decides to encode it as a string unfortunately.", "\n", "        ", "result", "=", "self", ".", "client", ".", "call", "(", "'simGetImage'", ",", "camera_id", ",", "image_type", ")", "\n", "if", "(", "result", "==", "\"\"", "or", "result", "==", "\"\\0\"", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simGetImages": [[204, 207], ["airsimClientNew.AirSimClientBase.client.call", "airsimClientNew.MsgpackMixin.from_msgpack"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "simGetImages", "(", "self", ",", "requests", ")", ":", "\n", "        ", "responses_raw", "=", "self", ".", "client", ".", "call", "(", "'simGetImages'", ",", "requests", ")", "\n", "return", "[", "ImageResponse", ".", "from_msgpack", "(", "response_raw", ")", "for", "response_raw", "in", "responses_raw", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.stringToUint8Array": [[208, 211], ["numpy.fromstring"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "stringToUint8Array", "(", "bstr", ")", ":", "\n", "        ", "return", "np", ".", "fromstring", "(", "bstr", ",", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.stringToFloatArray": [[212, 215], ["numpy.fromstring"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "stringToFloatArray", "(", "bstr", ")", ":", "\n", "        ", "return", "np", ".", "fromstring", "(", "bstr", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.listTo2DFloatArray": [[216, 219], ["numpy.reshape", "numpy.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "listTo2DFloatArray", "(", "flst", ",", "width", ",", "height", ")", ":", "\n", "        ", "return", "np", ".", "reshape", "(", "np", ".", "asarray", "(", "flst", ",", "np", ".", "float32", ")", ",", "(", "height", ",", "width", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.getPfmArray": [[220, 223], ["airsimClientNew.AirSimClientBase.listTo2DFloatArray"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.listTo2DFloatArray"], ["", "@", "staticmethod", "\n", "def", "getPfmArray", "(", "response", ")", ":", "\n", "        ", "return", "AirSimClientBase", ".", "listTo2DFloatArray", "(", "response", ".", "image_data_float", ",", "response", ".", "width", ",", "response", ".", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.get_public_fields": [[224, 231], ["dir", "attr.startswith", "inspect.isbuiltin", "inspect.isfunction", "inspect.ismethod"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_public_fields", "(", "obj", ")", ":", "\n", "        ", "return", "[", "attr", "for", "attr", "in", "dir", "(", "obj", ")", "\n", "if", "not", "(", "attr", ".", "startswith", "(", "\"_\"", ")", "\n", "or", "inspect", ".", "isbuiltin", "(", "attr", ")", "\n", "or", "inspect", ".", "isfunction", "(", "attr", ")", "\n", "or", "inspect", ".", "ismethod", "(", "attr", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.to_dict": [[232, 235], ["dict", "getattr", "airsimClientNew.AirSimClientBase.get_public_fields"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.get_public_fields"], ["", "@", "staticmethod", "\n", "def", "to_dict", "(", "obj", ")", ":", "\n", "        ", "return", "dict", "(", "[", "attr", ",", "getattr", "(", "obj", ",", "attr", ")", "]", "for", "attr", "in", "AirSimClientBase", ".", "get_public_fields", "(", "obj", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.to_str": [[236, 239], ["str", "airsimClientNew.AirSimClientBase.to_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.to_dict"], ["", "@", "staticmethod", "\n", "def", "to_str", "(", "obj", ")", ":", "\n", "        ", "return", "str", "(", "AirSimClientBase", ".", "to_dict", "(", "obj", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.write_file": [[240, 244], ["open", "afile.write"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "write_file", "(", "filename", ",", "bstr", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "afile", ":", "\n", "            ", "afile", ".", "write", "(", "bstr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simSetPose": [[245, 248], ["airsimClientNew.Pose", "airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "", "def", "simSetPose", "(", "self", ",", "position", ",", "orientation", ")", ":", "\n", "        ", "pose", "=", "Pose", "(", "position", ",", "orientation", ")", "\n", "return", "self", ".", "client", ".", "call", "(", "'simSetPose'", ",", "pose", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simResetEnv": [[249, 252], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "simResetEnv", "(", "self", ")", ":", "\n", "#print(\"Calling client to reset pomdp\")", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'simResetEnv'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.simGetPose": [[253, 255], ["airsimClientNew.AirSimClientBase.client.call"], "methods", ["None"], ["", "def", "simGetPose", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'simGetPose'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.toEulerianAngle": [[258, 285], ["math.atan2", "math.asin", "math.atan2"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "toEulerianAngle", "(", "q", ")", ":", "\n", "        ", "z", "=", "q", ".", "z_val", "\n", "y", "=", "q", ".", "y_val", "\n", "x", "=", "q", ".", "x_val", "\n", "w", "=", "q", ".", "w_val", "\n", "ysqr", "=", "y", "*", "y", "\n", "\n", "# roll (x-axis rotation)", "\n", "t0", "=", "+", "2.0", "*", "(", "w", "*", "x", "+", "y", "*", "z", ")", "\n", "t1", "=", "+", "1.0", "-", "2.0", "*", "(", "x", "*", "x", "+", "ysqr", ")", "\n", "roll", "=", "math", ".", "atan2", "(", "t0", ",", "t1", ")", "\n", "\n", "# pitch (y-axis rotation)", "\n", "t2", "=", "+", "2.0", "*", "(", "w", "*", "y", "-", "z", "*", "x", ")", "\n", "if", "(", "t2", ">", "1.0", ")", ":", "\n", "            ", "t2", "=", "1", "\n", "", "if", "(", "t2", "<", "-", "1.0", ")", ":", "\n", "            ", "t2", "=", "-", "1.0", "\n", "", "pitch", "=", "math", ".", "asin", "(", "t2", ")", "\n", "\n", "# yaw (z-axis rotation)", "\n", "t3", "=", "+", "2.0", "*", "(", "w", "*", "z", "+", "x", "*", "y", ")", "\n", "t4", "=", "+", "1.0", "-", "2.0", "*", "(", "ysqr", "+", "z", "*", "z", ")", "\n", "yaw", "=", "math", ".", "atan2", "(", "t3", ",", "t4", ")", "\n", "\n", "return", "(", "pitch", ",", "roll", ",", "yaw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.toQuaternion": [[286, 301], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "airsimClientNew.Quaternionr"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "toQuaternion", "(", "pitch", ",", "roll", ",", "yaw", ")", ":", "\n", "        ", "t0", "=", "math", ".", "cos", "(", "yaw", "*", "0.5", ")", "\n", "t1", "=", "math", ".", "sin", "(", "yaw", "*", "0.5", ")", "\n", "t2", "=", "math", ".", "cos", "(", "roll", "*", "0.5", ")", "\n", "t3", "=", "math", ".", "sin", "(", "roll", "*", "0.5", ")", "\n", "t4", "=", "math", ".", "cos", "(", "pitch", "*", "0.5", ")", "\n", "t5", "=", "math", ".", "sin", "(", "pitch", "*", "0.5", ")", "\n", "\n", "q", "=", "Quaternionr", "(", ")", "\n", "q", ".", "w_val", "=", "t0", "*", "t2", "*", "t4", "+", "t1", "*", "t3", "*", "t5", "# w", "\n", "q", ".", "x_val", "=", "t0", "*", "t3", "*", "t4", "-", "t1", "*", "t2", "*", "t5", "# x", "\n", "q", ".", "y_val", "=", "t0", "*", "t2", "*", "t5", "+", "t1", "*", "t3", "*", "t4", "# y", "\n", "q", ".", "z_val", "=", "t1", "*", "t2", "*", "t4", "-", "t0", "*", "t3", "*", "t5", "# z", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.wait_key": [[302, 329], ["print", "msvcrt.getch", "sys.stdin.fileno", "termios.tcgetattr", "termios.tcgetattr", "termios.tcsetattr", "sys.stdin.read", "termios.tcsetattr"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "wait_key", "(", "message", "=", "''", ")", ":", "\n", "        ", "''' Wait for a key press on the console and return it. '''", "\n", "if", "message", "!=", "''", ":", "\n", "            ", "print", "(", "message", ")", "\n", "\n", "", "result", "=", "None", "\n", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "            ", "import", "msvcrt", "\n", "result", "=", "msvcrt", ".", "getch", "(", ")", "\n", "", "else", ":", "\n", "            ", "import", "termios", "\n", "fd", "=", "sys", ".", "stdin", ".", "fileno", "(", ")", "\n", "\n", "oldterm", "=", "termios", ".", "tcgetattr", "(", "fd", ")", "\n", "newattr", "=", "termios", ".", "tcgetattr", "(", "fd", ")", "\n", "newattr", "[", "3", "]", "=", "newattr", "[", "3", "]", "&", "~", "termios", ".", "ICANON", "&", "~", "termios", ".", "ECHO", "\n", "termios", ".", "tcsetattr", "(", "fd", ",", "termios", ".", "TCSANOW", ",", "newattr", ")", "\n", "\n", "try", ":", "\n", "                ", "result", "=", "sys", ".", "stdin", ".", "read", "(", "1", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "pass", "\n", "", "finally", ":", "\n", "                ", "termios", ".", "tcsetattr", "(", "fd", ",", "termios", ".", "TCSAFLUSH", ",", "oldterm", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.read_pfm": [[330, 373], ["open", "open.readline().rstrip", "str", "str", "re.match", "float", "numpy.fromfile", "numpy.reshape", "open.close", "bytes.decode", "bytes.decode", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "open.readline", "re.match.groups", "open.readline"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "read_pfm", "(", "file", ")", ":", "\n", "        ", "\"\"\" Read a pfm file \"\"\"", "\n", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "header", "=", "str", "(", "bytes", ".", "decode", "(", "header", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "            ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "temp_str", "=", "str", "(", "bytes", ".", "decode", "(", "file", ".", "readline", "(", ")", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "temp_str", ")", "\n", "if", "dim_match", ":", "\n", "            ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "            ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "            ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "# DEY: I don't know why this was there.", "\n", "# data = np.flipud(data)", "\n", "file", ".", "close", "(", ")", "\n", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.write_pfm": [[374, 406], ["open", "numpy.flipud", "open.write", "open.write", "open.write", "numpy.flipud.tofile", "Exception", "temp_str.encode", "temp_str.encode", "len", "Exception", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "write_pfm", "(", "file", ",", "image", ",", "scale", "=", "1", ")", ":", "\n", "        ", "\"\"\" Write a pfm file \"\"\"", "\n", "file", "=", "open", "(", "file", ",", "'wb'", ")", "\n", "\n", "color", "=", "None", "\n", "\n", "if", "image", ".", "dtype", ".", "name", "!=", "'float32'", ":", "\n", "            ", "raise", "Exception", "(", "'Image dtype must be float32.'", ")", "\n", "\n", "", "image", "=", "np", ".", "flipud", "(", "image", ")", "\n", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "# color image", "\n", "            ", "color", "=", "True", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", "or", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# greyscale", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Image must have H x W x 3, H x W x 1 or H x W dimensions.'", ")", "\n", "\n", "", "file", ".", "write", "(", "'PF\\n'", ".", "encode", "(", "'utf-8'", ")", "if", "color", "else", "'Pf\\n'", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "temp_str", "=", "'%d %d\\n'", "%", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "file", ".", "write", "(", "temp_str", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n", "endian", "=", "image", ".", "dtype", ".", "byteorder", "\n", "\n", "if", "endian", "==", "'<'", "or", "endian", "==", "'='", "and", "sys", ".", "byteorder", "==", "'little'", ":", "\n", "            ", "scale", "=", "-", "scale", "\n", "\n", "", "temp_str", "=", "'%f\\n'", "%", "scale", "\n", "file", ".", "write", "(", "temp_str", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n", "image", ".", "tofile", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.write_png": [[407, 435], ["image.flatten().tobytes", "airsimClientNew.AirSimClientBase.write_file", "image.flatten", "struct.pack", "airsimClientNew.AirSimClientBase.write_png.png_pack"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.write_file"], ["", "@", "staticmethod", "\n", "def", "write_png", "(", "filename", ",", "image", ")", ":", "\n", "        ", "\"\"\" image must be numpy array H X W X channels\n        \"\"\"", "\n", "import", "zlib", ",", "struct", "\n", "\n", "buf", "=", "image", ".", "flatten", "(", ")", ".", "tobytes", "(", ")", "\n", "width", "=", "image", ".", "shape", "[", "1", "]", "\n", "height", "=", "image", ".", "shape", "[", "0", "]", "\n", "\n", "# reverse the vertical line order and add null bytes at the start", "\n", "width_byte_4", "=", "width", "*", "4", "\n", "raw_data", "=", "b''", ".", "join", "(", "b'\\x00'", "+", "buf", "[", "span", ":", "span", "+", "width_byte_4", "]", "\n", "for", "span", "in", "range", "(", "(", "height", "-", "1", ")", "*", "width_byte_4", ",", "-", "1", ",", "-", "width_byte_4", ")", ")", "\n", "\n", "def", "png_pack", "(", "png_tag", ",", "data", ")", ":", "\n", "            ", "chunk_head", "=", "png_tag", "+", "data", "\n", "return", "(", "struct", ".", "pack", "(", "\"!I\"", ",", "len", "(", "data", ")", ")", "+", "\n", "chunk_head", "+", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "0xFFFFFFFF", "&", "zlib", ".", "crc32", "(", "chunk_head", ")", ")", ")", "\n", "\n", "", "png_bytes", "=", "b''", ".", "join", "(", "[", "\n", "b'\\x89PNG\\r\\n\\x1a\\n'", ",", "\n", "png_pack", "(", "b'IHDR'", ",", "struct", ".", "pack", "(", "\"!2I5B\"", ",", "width", ",", "height", ",", "8", ",", "6", ",", "0", ",", "0", ",", "0", ")", ")", ",", "\n", "png_pack", "(", "b'IDAT'", ",", "zlib", ".", "compress", "(", "raw_data", ",", "9", ")", ")", ",", "\n", "png_pack", "(", "b'IEND'", ",", "b''", ")", "]", ")", "\n", "\n", "AirSimClientBase", ".", "write_file", "(", "filename", ",", "png_bytes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.__init__": [[439, 443], ["airsimClientNew.AirSimClientBase.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ip", "=", "\"\"", ",", "port", "=", "41451", ")", ":", "\n", "        ", "if", "(", "ip", "==", "\"\"", ")", ":", "\n", "            ", "ip", "=", "\"127.0.0.1\"", "\n", "", "super", "(", "MultirotorClient", ",", "self", ")", ".", "__init__", "(", "ip", ",", "port", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.armDisarm": [[444, 446], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "armDisarm", "(", "self", ",", "arm", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'armDisarm'", ",", "arm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.takeoff": [[447, 449], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "takeoff", "(", "self", ",", "max_wait_seconds", "=", "15", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'takeoff'", ",", "max_wait_seconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.land": [[450, 452], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "land", "(", "self", ",", "max_wait_seconds", "=", "60", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'land'", ",", "max_wait_seconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.goHome": [[453, 455], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "goHome", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'goHome'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.hover": [[456, 458], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "hover", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'hover'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getPosition": [[460, 462], ["airsimClientNew.MsgpackMixin.from_msgpack", "airsimClientNew.MultirotorClient.client.call"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "getPosition", "(", "self", ")", ":", "\n", "        ", "return", "Vector3r", ".", "from_msgpack", "(", "self", ".", "client", ".", "call", "(", "'getPosition'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getVelocity": [[463, 465], ["airsimClientNew.MsgpackMixin.from_msgpack", "airsimClientNew.MultirotorClient.client.call"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "getVelocity", "(", "self", ")", ":", "\n", "        ", "return", "Vector3r", ".", "from_msgpack", "(", "self", ".", "client", ".", "call", "(", "'getVelocity'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getOrientation": [[466, 468], ["airsimClientNew.MsgpackMixin.from_msgpack", "airsimClientNew.MultirotorClient.client.call"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "getOrientation", "(", "self", ")", ":", "\n", "        ", "return", "Quaternionr", ".", "from_msgpack", "(", "self", ".", "client", ".", "call", "(", "'getOrientation'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getLandedState": [[469, 471], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "getLandedState", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'getLandedState'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getGpsLocation": [[472, 474], ["airsimClientNew.MsgpackMixin.from_msgpack", "airsimClientNew.MultirotorClient.client.call"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "getGpsLocation", "(", "self", ")", ":", "\n", "        ", "return", "GeoPoint", ".", "from_msgpack", "(", "self", ".", "client", ".", "call", "(", "'getGpsLocation'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getRollPitchYaw": [[475, 477], ["airsimClientNew.MultirotorClient.toEulerianAngle", "airsimClientNew.MultirotorClient.getOrientation"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.AirSimClientBase.toEulerianAngle", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getOrientation"], ["", "def", "getRollPitchYaw", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "toEulerianAngle", "(", "self", ".", "getOrientation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getCollisionInfo": [[478, 480], ["airsimClientNew.MsgpackMixin.from_msgpack", "airsimClientNew.MultirotorClient.client.call"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "getCollisionInfo", "(", "self", ")", ":", "\n", "        ", "return", "CollisionInfo", ".", "from_msgpack", "(", "self", ".", "client", ".", "call", "(", "'getCollisionInfo'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.timestampNow": [[483, 485], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "timestampNow", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'timestampNow'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.isApiControlEnabled": [[486, 488], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "isApiControlEnabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'isApiControlEnabled'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.isSimulationMode": [[489, 491], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "isSimulationMode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'isSimulationMode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.getServerDebugInfo": [[492, 494], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "getServerDebugInfo", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'getServerDebugInfo'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveByAngle": [[496, 498], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "moveByAngle", "(", "self", ",", "pitch", ",", "roll", ",", "z", ",", "yaw", ",", "duration", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'moveByAngle'", ",", "pitch", ",", "roll", ",", "z", ",", "yaw", ",", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveByVelocity": [[499, 501], ["airsimClientNew.YawMode", "airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "moveByVelocity", "(", "self", ",", "vx", ",", "vy", ",", "vz", ",", "duration", ",", "drivetrain", "=", "DrivetrainType", ".", "MaxDegreeOfFreedom", ",", "yaw_mode", "=", "YawMode", "(", ")", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'moveByVelocity'", ",", "vx", ",", "vy", ",", "vz", ",", "duration", ",", "drivetrain", ",", "yaw_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveByVelocityZ": [[502, 504], ["airsimClientNew.YawMode", "airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "moveByVelocityZ", "(", "self", ",", "vx", ",", "vy", ",", "z", ",", "duration", ",", "drivetrain", "=", "DrivetrainType", ".", "MaxDegreeOfFreedom", ",", "yaw_mode", "=", "YawMode", "(", ")", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'moveByVelocityZ'", ",", "vx", ",", "vy", ",", "z", ",", "duration", ",", "drivetrain", ",", "yaw_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveOnPath": [[505, 509], ["airsimClientNew.YawMode", "airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "moveOnPath", "(", "self", ",", "path", ",", "velocity", ",", "max_wait_seconds", "=", "60", ",", "drivetrain", "=", "DrivetrainType", ".", "MaxDegreeOfFreedom", ",", "\n", "yaw_mode", "=", "YawMode", "(", ")", ",", "lookahead", "=", "-", "1", ",", "adaptive_lookahead", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'moveOnPath'", ",", "path", ",", "velocity", ",", "max_wait_seconds", ",", "drivetrain", ",", "yaw_mode", ",", "lookahead", ",", "\n", "adaptive_lookahead", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveToZ": [[510, 512], ["airsimClientNew.YawMode", "airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "moveToZ", "(", "self", ",", "z", ",", "velocity", ",", "max_wait_seconds", "=", "60", ",", "yaw_mode", "=", "YawMode", "(", ")", ",", "lookahead", "=", "-", "1", ",", "adaptive_lookahead", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'moveToZ'", ",", "z", ",", "velocity", ",", "max_wait_seconds", ",", "yaw_mode", ",", "lookahead", ",", "adaptive_lookahead", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveToPosition": [[513, 517], ["airsimClientNew.YawMode", "airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "moveToPosition", "(", "self", ",", "x", ",", "y", ",", "z", ",", "velocity", ",", "max_wait_seconds", "=", "60", ",", "drivetrain", "=", "DrivetrainType", ".", "MaxDegreeOfFreedom", ",", "\n", "yaw_mode", "=", "YawMode", "(", ")", ",", "lookahead", "=", "-", "1", ",", "adaptive_lookahead", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'moveToPosition'", ",", "x", ",", "y", ",", "z", ",", "velocity", ",", "max_wait_seconds", ",", "drivetrain", ",", "yaw_mode", ",", "lookahead", ",", "\n", "adaptive_lookahead", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.moveByManual": [[518, 521], ["airsimClientNew.YawMode", "airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "moveByManual", "(", "self", ",", "vx_max", ",", "vy_max", ",", "z_min", ",", "duration", ",", "drivetrain", "=", "DrivetrainType", ".", "MaxDegreeOfFreedom", ",", "\n", "yaw_mode", "=", "YawMode", "(", ")", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'moveByManual'", ",", "vx_max", ",", "vy_max", ",", "z_min", ",", "duration", ",", "drivetrain", ",", "yaw_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.rotateToYaw": [[522, 524], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "rotateToYaw", "(", "self", ",", "yaw", ",", "max_wait_seconds", "=", "60", ",", "margin", "=", "5", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'rotateToYaw'", ",", "yaw", ",", "max_wait_seconds", ",", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MultirotorClient.rotateByYawRate": [[525, 527], ["airsimClientNew.MultirotorClient.client.call"], "methods", ["None"], ["", "def", "rotateByYawRate", "(", "self", ",", "yaw_rate", ",", "duration", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "call", "(", "'rotateByYawRate'", ",", "yaw_rate", ",", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.CarClient.__init__": [[531, 535], ["airsimClientNew.AirSimClientBase.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ip", "=", "\"\"", ")", ":", "\n", "        ", "if", "(", "ip", "==", "\"\"", ")", ":", "\n", "            ", "ip", "=", "\"127.0.0.1\"", "\n", "", "super", "(", "CarClient", ",", "self", ")", ".", "__init__", "(", "ip", ",", "42451", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.CarClient.setCarControls": [[536, 538], ["airsimClientNew.CarClient.client.call"], "methods", ["None"], ["", "def", "setCarControls", "(", "self", ",", "controls", ")", ":", "\n", "        ", "self", ".", "client", ".", "call", "(", "'setCarControls'", ",", "controls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.CarClient.getCarState": [[539, 542], ["airsimClientNew.CarClient.client.call", "airsimClientNew.MsgpackMixin.from_msgpack"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.airsimClientNew.MsgpackMixin.from_msgpack"], ["", "def", "getCarState", "(", "self", ")", ":", "\n", "        ", "state_raw", "=", "self", ".", "client", ".", "call", "(", "'getCarState'", ")", "\n", "return", "CarState", ".", "from_msgpack", "(", "state_raw", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.__init__": [[3, 5], ["None"], "methods", ["None"], ["import", "drones", ".", "aero_interface", ".", "ros_node", "as", "rn", "\n", "from", "drones", ".", "aero_interface", ".", "landmark_colors", "import", "color_names", ",", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.publish_pose": [[6, 8], ["None"], "methods", ["None"], ["import", "random", "\n", "from", "geometry_msgs", ".", "msg", "import", "PoseStamped", ",", "Pose", ",", "PoseArray", ",", "Point32", "\n", "from", "nav_msgs", ".", "msg", "import", "Path", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.add_pose_and_publish_array": [[9, 11], ["None"], "methods", ["None"], ["from", "sensor_msgs", ".", "msg", "import", "PointCloud2", ",", "PointCloud", ",", "ChannelFloat32", "\n", "from", "visualization_msgs", ".", "msg", "import", "MarkerArray", ",", "Marker", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rviz.RvizInterface.reset_pose_array": [[12, 14], ["None"], "methods", ["None"], ["class", "RvizInterface", "(", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.__init__": [[35, 71], ["learning.modules.cuda_module.CudaModule.__init__", "learning.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.load_models_from_file", "learning.modules.visitation_softmax.VisitationSoftmax", "learning.modules.map_transformer.MapTransformer", "parameters.get_current_parameters", "drones.aero_interface.rviz.RvizInterface", "parameters.get_current_parameters", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.load_models_from_file", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_instance_name", "=", "\"only\"", ")", ":", "\n", "        ", "super", "(", "PVN_Keyboard_Wrapper_Bidomain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "instance_name", "=", "model_instance_name", "\n", "self", ".", "s1_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "\n", "self", ".", "wrapper_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"PVNWrapper\"", "]", "\n", "self", ".", "real_drone", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"real_drone\"", "]", "\n", "self", ".", "rviz", "=", "None", "\n", "if", "self", ".", "real_drone", ":", "\n", "            ", "self", ".", "rviz", "=", "RvizInterface", "(", "\n", "base_name", "=", "\"/pvn/\"", ",", "\n", "map_topics", "=", "[", "\"semantic_map\"", ",", "\"visitation_dist\"", "]", ",", "\n", "markerarray_topics", "=", "[", "\"instruction\"", "]", ")", "\n", "\n", "", "self", ".", "rl", "=", "self", ".", "wrapper_params", "[", "\"learning_mode\"", "]", "==", "\"reinforcement_learning\"", "\n", "self", ".", "stage1_visitation_prediction", "=", "PVN_Stage1_Bidomain", "(", "run_name", ",", "model_instance_name", ")", "\n", "self", ".", "load_models_from_file", "(", ")", "\n", "\n", "#self.spatialsoftmax = SpatialSoftmax2d()", "\n", "self", ".", "visitation_softmax", "=", "VisitationSoftmax", "(", ")", "\n", "\n", "self", ".", "map_transformer_w_to_r", "=", "MapTransformer", "(", "\n", "source_map_size", "=", "self", ".", "s1_params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "s1_params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "s1_params", "[", "\"world_size_m\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "s1_params", "[", "\"world_size_px\"", "]", "\n", ")", "\n", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "start_poses", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "log_v_dist_w", "=", "None", "\n", "self", ".", "v_dist_w", "=", "None", "\n", "self", ".", "log_goal_oob_score", "=", "None", "\n", "self", ".", "goal_oob_prob_w", "=", "None", "\n", "self", ".", "map_coverage_w", "=", "None", "\n", "self", ".", "map_uncoverage_w", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.load_models_from_file": [[72, 76], ["model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.wrapper_params.get", "print", "data_io.models.load_pytorch_model"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model"], ["", "def", "load_models_from_file", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "wrapper_params", ".", "get", "(", "\"stage1_file\"", ")", ":", "\n", "            ", "print", "(", "\"PVNWrapper: Loading Stage 1\"", ")", "\n", "load_pytorch_model", "(", "self", ".", "stage1_visitation_prediction", ",", "self", ".", "wrapper_params", "[", "\"stage1_file\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.get_policy_state": [[79, 81], ["None"], "methods", ["None"], ["", "", "def", "get_policy_state", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.set_policy_state": [[82, 84], ["None"], "methods", ["None"], ["", "def", "set_policy_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.init_weights": [[85, 88], ["model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage1_visitation_prediction.init_weights", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.load_models_from_file"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.load_models_from_file"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "stage1_visitation_prediction", ".", "init_weights", "(", ")", "\n", "self", ".", "load_models_from_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.cuda": [[89, 94], ["learning.modules.cuda_module.CudaModule.cuda", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage1_visitation_prediction.cuda", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.map_transformer_w_to_r.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "CudaModule", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "stage1_visitation_prediction", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transformer_w_to_r", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.reset": [[95, 108], ["model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage1_visitation_prediction.reset", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.map_coverage_reward.reset", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.visitation_reward.reset", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.wd_visitation_and_exploration_reward.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "stage1_visitation_prediction", ".", "reset", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "start_poses", "=", "None", "\n", "self", ".", "log_v_dist_w", "=", "None", "\n", "self", ".", "v_dist_w", "=", "None", "\n", "self", ".", "log_goal_oob_score", "=", "None", "\n", "self", ".", "goal_oob_prob_w", "=", "None", "\n", "self", ".", "map_coverage_w", "=", "None", "\n", "self", ".", "map_uncoverage_w", "=", "None", "\n", "self", ".", "map_coverage_reward", ".", "reset", "(", ")", "\n", "self", ".", "visitation_reward", ".", "reset", "(", ")", "\n", "self", ".", "wd_visitation_and_exploration_reward", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.start_sequence": [[109, 112], ["model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.start_segment_rollout": [[113, 115], ["model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_segment_rollout", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.cam_poses_from_states": [[116, 121], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.calc_intrinsic_rewards": [[122, 151], ["ValueError", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.action_oob_reward.get_reward", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.s1_params.get", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.wrapper_params.get", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.wd_visitation_and_exploration_reward", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.s1_params.get", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.visitation_and_exploration_reward", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.visitation_reward"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.get_reward", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "calc_intrinsic_rewards", "(", "self", ",", "next_state", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "v_dist_w", "is", "None", "or", "self", ".", "map_coverage_w", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Computing intrinsic reward prior to any rollouts!\"", ")", "\n", "", "else", ":", "\n", "            ", "states_np", "=", "next_state", ".", "state", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "states", "=", "torch", ".", "from_numpy", "(", "states_np", ")", "\n", "cam_pos", "=", "states", "[", ":", ",", "0", ":", "12", "]", "\n", "\n", "if", "self", ".", "s1_params", ".", "get", "(", "\"clip_observability\"", ")", "and", "self", ".", "wrapper_params", ".", "get", "(", "\"wasserstein_reward\"", ")", ":", "\n", "                ", "visitation_reward", ",", "stop_reward", ",", "exploration_reward", "=", "self", ".", "wd_visitation_and_exploration_reward", "(", "\n", "self", ".", "v_dist_w", ",", "self", ".", "goal_oob_prob_w", ",", "cam_pos", ",", "action", ")", "\n", "\n", "", "elif", "self", ".", "s1_params", ".", "get", "(", "\"clip_observability\"", ")", ":", "\n", "                ", "visitation_reward", ",", "stop_reward", ",", "exploration_reward", "=", "self", ".", "visitation_and_exploration_reward", "(", "\n", "self", ".", "v_dist_w", ",", "self", ".", "goal_oob_prob_w", ",", "cam_pos", ",", "action", ")", "\n", "", "else", ":", "\n", "                ", "visitation_reward", ",", "stop_reward", "=", "self", ".", "visitation_reward", "(", "self", ".", "v_dist_w", ",", "cam_pos", ",", "action", ")", "\n", "exploration_reward", "=", "0.0", "\n", "\n", "#map_reward = self.map_coverage_reward(self.map_coverage_w)", "\n", "#return visitation_reward +  map_reward", "\n", "", "negative_per_step_reward", "=", "-", "0.04", "\n", "action_oob_reward", "=", "self", ".", "action_oob_reward", ".", "get_reward", "(", "action", ")", "\n", "\n", "return", "{", "\"visitation_reward\"", ":", "visitation_reward", ",", "\n", "\"stop_reward\"", ":", "stop_reward", ",", "\n", "\"exploration_reward\"", ":", "exploration_reward", ",", "\n", "\"negative_per_step_reward\"", ":", "negative_per_step_reward", ",", "\n", "\"action_oob_reward\"", ":", "action_oob_reward", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.states_to_torch": [[153, 160], ["learning.inputs.vision.standardize_images", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_images"], ["", "", "def", "states_to_torch", "(", "self", ",", "state", ")", ":", "\n", "        ", "states_np", "=", "state", ".", "state", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "images_np", "=", "state", ".", "image", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "images_np", "=", "standardize_images", "(", "images_np", ",", "out_np", "=", "True", ")", "\n", "images_fpv", "=", "torch", ".", "from_numpy", "(", "images_np", ")", ".", "float", "(", ")", "\n", "states", "=", "torch", ".", "from_numpy", "(", "states_np", ")", "\n", "return", "states", ",", "images_fpv", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.get_action": [[161, 294], ["model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.eval", "utils.simple_profiler.SimpleProfiler", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.states_to_torch", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.cam_poses_from_states", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.map_transformer_w_to_r", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.map_transformer_w_to_r", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.map_transformer_w_to_r", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.reset", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.cam_poses_from_states", "images_fpv.to.to.to", "states.to.to.to", "instructions.to.to.to", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.start_poses.to", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage1_visitation_prediction", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.visitation_softmax", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage2_action_generation", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage2_action_generation.action_logprob", "xvel.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "yawrate.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "stop.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "xvel_logprob.detach.detach.detach", "yawrate_logprob.detach.detach.detach", "stop_logprob.detach.detach.detach", "value.detach.detach.detach", "numpy.concatenate", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.loop", "utils.simple_profiler.SimpleProfiler.print_stats", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage2_action_generation", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.squeeze().data.cpu().numpy", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.rviz.publish_instruction_text", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "next", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.v_dist_w[].data.cpu().numpy().transpose", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.rviz.publish_map", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage2_action_generation.sample_action", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.stage2_action_generation.mode_action", "v_dist_r[].detach", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.v_dist_w[].detach", "map_uncoverage_r[].detach", "visualization.Presenter().split_lines", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.parameters", "numpy.max", "numpy.max", "xvel.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "yawrate.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "stop.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "numpy.zeros", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.squeeze().data.cpu", "data_io.instructions.debug_untokenize_instruction", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.v_dist_w[].data.cpu().numpy", "visualization.Presenter", "xvel.detach().cpu().numpy.detach().cpu().numpy.detach", "yawrate.detach().cpu().numpy.detach().cpu().numpy.detach", "stop.detach().cpu().numpy.detach().cpu().numpy.detach", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.v_dist_w[].data.cpu", "model_pvn_keyboard_wrapper_bidomain.PVN_Keyboard_Wrapper_Bidomain.squeeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.states_to_torch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.action_logprob", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_instruction_text", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_map", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.sample_action", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.mode_action", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.split_lines", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ",", "sample", "=", "False", ",", "rl_rollout", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        :param sample: (Only applies if self.rl): If true, sample action from action distribution. If False, take most likely action.\n        #TODO: Absorb corpus within model\n        :return:\n        \"\"\"", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "ACTPROF", "=", "False", "\n", "actprof", "=", "SimpleProfiler", "(", "print", "=", "ACTPROF", ",", "torch_sync", "=", "ACTPROF", ")", "\n", "\n", "states", ",", "images_fpv", "=", "self", ".", "states_to_torch", "(", "state", ")", "\n", "\n", "first_step", "=", "True", "\n", "if", "instruction", "==", "self", ".", "prev_instruction", ":", "\n", "            ", "first_step", "=", "False", "\n", "", "if", "first_step", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "self", ".", "start_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "if", "self", ".", "rviz", "is", "not", "None", ":", "\n", "                ", "dbg_instr", "=", "\"\\n\"", ".", "join", "(", "Presenter", "(", ")", ".", "split_lines", "(", "debug_untokenize_instruction", "(", "instruction", ")", ",", "maxchars", "=", "45", ")", ")", "\n", "self", ".", "rviz", ".", "publish_instruction_text", "(", "\"instruction\"", ",", "dbg_instr", ")", "\n", "\n", "", "", "self", ".", "prev_instruction", "=", "instruction", "\n", "self", ".", "seq_step", "+=", "1", "\n", "\n", "instr_len", "=", "[", "len", "(", "instruction", ")", "]", "if", "instruction", "is", "not", "None", "else", "None", "\n", "instructions", "=", "torch", ".", "LongTensor", "(", "instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "plan_now", "=", "self", ".", "seq_step", "%", "self", ".", "s1_params", "[", "\"plan_every_n_steps\"", "]", "==", "0", "or", "first_step", "\n", "\n", "# Run stage1 visitation prediction", "\n", "# TODO: There's a bug here where we ignore images between planning timesteps. That's why must plan every timestep", "\n", "if", "plan_now", "or", "True", ":", "\n", "            ", "device", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "images_fpv", "=", "images_fpv", ".", "to", "(", "device", ")", "\n", "states", "=", "states", ".", "to", "(", "device", ")", "\n", "instructions", "=", "instructions", ".", "to", "(", "device", ")", "\n", "self", ".", "start_poses", "=", "self", ".", "start_poses", ".", "to", "(", "device", ")", "\n", "\n", "actprof", ".", "tick", "(", "\"start\"", ")", "\n", "#print(\"Planning for: \" + debug_untokenize_instruction(list(instructions[0].detach().cpu().numpy())))", "\n", "self", ".", "log_v_dist_w", ",", "v_dist_w_poses", ",", "self", ".", "log_goal_oob_score", ",", "rl_outputs", "=", "self", ".", "stage1_visitation_prediction", "(", "\n", "images_fpv", ",", "states", ",", "instructions", ",", "instr_len", ",", "\n", "plan", "=", "[", "True", "]", ",", "firstseg", "=", "[", "first_step", "]", ",", "\n", "noisy_start_poses", "=", "self", ".", "start_poses", ",", "\n", "start_poses", "=", "self", ".", "start_poses", ",", "\n", "select_only", "=", "True", ",", "\n", "rl", "=", "True", "\n", ")", "\n", "actprof", ".", "tick", "(", "\"stage1\"", ")", "\n", "\n", "self", ".", "map_coverage_w", "=", "rl_outputs", "[", "\"map_coverage_w\"", "]", "\n", "self", ".", "map_uncoverage_w", "=", "rl_outputs", "[", "\"map_uncoverage_w\"", "]", "\n", "self", ".", "v_dist_w", ",", "self", ".", "goal_oob_prob_w", "=", "self", ".", "visitation_softmax", "(", "self", ".", "log_v_dist_w", ",", "self", ".", "log_goal_oob_score", ")", "\n", "if", "self", ".", "rviz", ":", "\n", "                ", "v_dist_w_np", "=", "self", ".", "v_dist_w", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "# expand to 0-1 range", "\n", "v_dist_w_np", "[", ":", ",", ":", ",", "0", "]", "/=", "(", "np", ".", "max", "(", "v_dist_w_np", "[", ":", ",", ":", ",", "0", "]", ")", "+", "1e-10", ")", "\n", "v_dist_w_np", "[", ":", ",", ":", ",", "1", "]", "/=", "(", "np", ".", "max", "(", "v_dist_w_np", "[", ":", ",", ":", ",", "1", "]", ")", "+", "1e-10", ")", "\n", "self", ".", "rviz", ".", "publish_map", "(", "\"visitation_dist\"", ",", "v_dist_w_np", ",", "\n", "self", ".", "s1_params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Transform to robot reference frame", "\n", "", "", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "# Log-distributions CANNOT be transformed - the transformer fills empty space with zeroes, which makes sense for", "\n", "# probability distributions, but makes no sense for likelihood scores", "\n", "map_coverage_r", ",", "_", "=", "self", ".", "map_transformer_w_to_r", "(", "self", ".", "map_coverage_w", ",", "None", ",", "cam_poses", ")", "\n", "map_uncoverage_r", ",", "_", "=", "self", ".", "map_transformer_w_to_r", "(", "self", ".", "map_uncoverage_w", ",", "None", ",", "cam_poses", ")", "\n", "v_dist_r", ",", "r_poses", "=", "self", ".", "map_transformer_w_to_r", "(", "self", ".", "v_dist_w", ",", "None", ",", "cam_poses", ")", "\n", "\n", "# Run stage2 action generation", "\n", "if", "self", ".", "rl", ":", "\n", "            ", "actprof", ".", "tick", "(", "\"pipes\"", ")", "\n", "# If RL, stage 2 outputs distributions over actions (following torch.distributions API)", "\n", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "value", "=", "self", ".", "stage2_action_generation", "(", "v_dist_r", ",", "map_uncoverage_r", ",", "eval", "=", "True", ")", "\n", "\n", "actprof", ".", "tick", "(", "\"stage2\"", ")", "\n", "if", "sample", ":", "\n", "                ", "xvel", ",", "yawrate", ",", "stop", "=", "self", ".", "stage2_action_generation", ".", "sample_action", "(", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", "\n", "", "else", ":", "\n", "                ", "xvel", ",", "yawrate", ",", "stop", "=", "self", ".", "stage2_action_generation", ".", "mode_action", "(", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", "\n", "\n", "", "actprof", ".", "tick", "(", "\"sample\"", ")", "\n", "xvel_logprob", ",", "yawrate_logprob", ",", "stop_logprob", "=", "self", ".", "stage2_action_generation", ".", "action_logprob", "(", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "xvel", ",", "yawrate", ",", "stop", ")", "\n", "\n", "xvel", "=", "xvel", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "yawrate", "=", "yawrate", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stop", "=", "stop", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xvel_logprob", "=", "xvel_logprob", ".", "detach", "(", ")", "\n", "yawrate_logprob", "=", "yawrate_logprob", ".", "detach", "(", ")", "\n", "stop_logprob", "=", "stop_logprob", ".", "detach", "(", ")", "\n", "value", "=", "value", ".", "detach", "(", ")", "#.cpu().numpy()", "\n", "\n", "# Add an empty column for sideways velocity", "\n", "act", "=", "np", ".", "concatenate", "(", "[", "xvel", ",", "np", ".", "zeros", "(", "xvel", ".", "shape", ")", ",", "yawrate", ",", "stop", "]", ")", "\n", "\n", "# This will be needed to compute rollout statistics later on", "\n", "#v_dist_w = self.visitation_softmax(self.log_v_dist_w, self.log_goal_oob_score)", "\n", "\n", "# Keep all the info we will need later for A2C / PPO training", "\n", "# TODO: We assume independence between velocity and stop distributions. Not true, but what ya gonna do?", "\n", "rl_data", "=", "{", "\n", "\"policy_input\"", ":", "v_dist_r", "[", "0", "]", ".", "detach", "(", ")", ",", "\n", "\"v_dist_w\"", ":", "self", ".", "v_dist_w", "[", "0", "]", ".", "detach", "(", ")", ",", "\n", "\"policy_input_b\"", ":", "map_uncoverage_r", "[", "0", "]", ".", "detach", "(", ")", ",", "\n", "\"value_pred\"", ":", "value", "[", "0", "]", ",", "\n", "\"xvel\"", ":", "xvel", ",", "\n", "\"yawrate\"", ":", "yawrate", ",", "\n", "\"stop\"", ":", "stop", ",", "\n", "\"xvel_logprob\"", ":", "xvel_logprob", ",", "\n", "\"yawrate_logprob\"", ":", "yawrate_logprob", ",", "\n", "\"stop_logprob\"", ":", "stop_logprob", ",", "\n", "\"action_logprob\"", ":", "xvel_logprob", "+", "stop_logprob", "+", "yawrate_logprob", "\n", "}", "\n", "actprof", ".", "tick", "(", "\"end\"", ")", "\n", "actprof", ".", "loop", "(", ")", "\n", "actprof", ".", "print_stats", "(", "1", ")", "\n", "if", "rl_rollout", ":", "\n", "                ", "return", "act", ",", "rl_data", "\n", "", "else", ":", "\n", "                ", "return", "act", "\n", "\n", "", "", "else", ":", "\n", "            ", "action", "=", "self", ".", "stage2_action_generation", "(", "v_dist_r", ",", "firstseg", "=", "[", "first_step", "]", ",", "eval", "=", "True", ")", "\n", "output_action", "=", "action", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stop_prob", "=", "output_action", "[", "3", "]", "\n", "output_stop", "=", "1", "if", "stop_prob", ">", "self", ".", "s2_params", "[", "\"stop_threshold\"", "]", "else", "0", "\n", "output_action", "[", "3", "]", "=", "output_stop", "\n", "\n", "return", "output_action", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params": [[10, 18], ["list", "model.parameters", "list", "p.size"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["def", "get_n_params", "(", "model", ")", ":", "\n", "    ", "pp", "=", "0", "\n", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "nn", "=", "1", "\n", "for", "s", "in", "list", "(", "p", ".", "size", "(", ")", ")", ":", "\n", "            ", "nn", "=", "nn", "*", "s", "\n", "", "pp", "+=", "nn", "\n", "", "return", "pp", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params": [[19, 29], ["list", "model.parameters", "list", "p.size"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "get_n_trainable_params", "(", "model", ")", ":", "\n", "    ", "pp", "=", "0", "\n", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "not", "p", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "nn", "=", "1", "\n", "for", "s", "in", "list", "(", "p", ".", "size", "(", ")", ")", ":", "\n", "            ", "nn", "=", "nn", "*", "s", "\n", "", "pp", "+=", "nn", "\n", "", "return", "pp", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.seq_to_batch_3d": [[30, 32], ["image_sequence.view", "image_sequence.size", "image_sequence.size", "image_sequence.size"], "function", ["None"], ["", "def", "seq_to_batch_3d", "(", "image_sequence", ")", ":", "\n", "    ", "return", "image_sequence", ".", "view", "(", "[", "-", "1", ",", "image_sequence", ".", "size", "(", "2", ")", ",", "image_sequence", ".", "size", "(", "3", ")", ",", "image_sequence", ".", "size", "(", "4", ")", "]", ")", "if", "image_sequence", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.batch_to_seq_3d": [[34, 36], ["image_batch.view", "image_batch.size", "image_batch.size", "image_batch.size"], "function", ["None"], ["", "def", "batch_to_seq_3d", "(", "image_batch", ",", "seq_len", ")", ":", "\n", "    ", "return", "image_batch", ".", "view", "(", "[", "-", "1", ",", "seq_len", ",", "image_batch", ".", "size", "(", "1", ")", ",", "image_batch", ".", "size", "(", "2", ")", ",", "image_batch", ".", "size", "(", "3", ")", "]", ")", "if", "image_batch", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.seq_to_batch_1d": [[38, 40], ["vec_sequence.view", "vec_sequence.size"], "function", ["None"], ["", "def", "seq_to_batch_1d", "(", "vec_sequence", ")", ":", "\n", "    ", "return", "vec_sequence", ".", "view", "(", "[", "-", "1", ",", "vec_sequence", ".", "size", "(", "2", ")", "]", ")", "if", "vec_sequence", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.batch_to_seq_1d": [[42, 44], ["vec_batch.view", "vec_batch.size"], "function", ["None"], ["", "def", "batch_to_seq_1d", "(", "vec_batch", ",", "seq_len", ")", ":", "\n", "    ", "return", "vec_batch", ".", "view", "(", "[", "-", "1", ",", "seq_len", ",", "vec_batch", ".", "size", "(", "1", ")", "]", ")", "if", "vec_batch", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.seq_to_batch_2d": [[46, 48], ["mat_sequence.view", "mat_sequence.size", "mat_sequence.size"], "function", ["None"], ["", "def", "seq_to_batch_2d", "(", "mat_sequence", ")", ":", "\n", "    ", "return", "mat_sequence", ".", "view", "(", "[", "-", "1", ",", "mat_sequence", ".", "size", "(", "2", ")", ",", "mat_sequence", ".", "size", "(", "3", ")", "]", ")", "if", "mat_sequence", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.batch_to_seq_2d": [[50, 52], ["mat_batch.view", "mat_batch.size", "mat_batch.size"], "function", ["None"], ["", "def", "batch_to_seq_2d", "(", "mat_batch", ",", "seq_len", ")", ":", "\n", "    ", "return", "mat_batch", ".", "view", "(", "[", "-", "1", ",", "seq_len", ",", "mat_batch", ".", "size", "(", "1", ")", ",", "mat_batch", ".", "size", "(", "2", ")", "]", ")", "if", "mat_batch", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries": [[54, 57], ["writer.add_histogram", "writer.add_histogram", "layer.bias.data.cpu().numpy", "layer.weight.data.cpu().numpy", "layer.bias.data.cpu", "layer.weight.data.cpu"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "layer_histogram_summaries", "(", "writer", ",", "name", ",", "layer", ",", "idx", ")", ":", "\n", "    ", "writer", ".", "add_histogram", "(", "name", "+", "\"/bias\"", ",", "layer", ".", "bias", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "idx", ",", "bins", "=", "\"auto\"", ")", "\n", "writer", ".", "add_histogram", "(", "name", "+", "\"/weight\"", ",", "layer", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "idx", ",", "bins", "=", "\"auto\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.draw_drone_poses": [[59, 71], ["len", "numpy.zeros", "transformations.poses_m_to_px", "enumerate", "torch.from_numpy", "int", "int"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px"], ["", "def", "draw_drone_poses", "(", "drone_poses", ")", ":", "\n", "    ", "num_poses", "=", "len", "(", "drone_poses", ")", "\n", "pic", "=", "np", ".", "zeros", "(", "[", "num_poses", ",", "1", ",", "128", ",", "128", "]", ")", "\n", "# TODO: Fix this call:", "\n", "poses_map", "=", "poses_m_to_px", "(", "drone_poses", ",", "128", ",", "batch_dim", "=", "True", ")", "\n", "for", "i", ",", "pose", "in", "enumerate", "(", "poses_map", ")", ":", "\n", "        ", "x", "=", "int", "(", "pose", ".", "position", "[", "0", "]", ")", "\n", "y", "=", "int", "(", "pose", ".", "position", "[", "1", "]", ")", "\n", "if", "x", ">", "0", "and", "y", ">", "0", "and", "x", "<", "128", "and", "y", "<", "128", ":", "\n", "            ", "pic", "[", "i", ",", "0", ",", "x", ",", "y", "]", "=", "1.0", "\n", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "pic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout": [[72, 83], ["parameters.get_current_run_name", "os.path.join", "os.makedirs", "data_io.paths.get_results_dir", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_run_name", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_dir"], ["", "def", "get_viz_dir_for_rollout", "(", ")", ":", "\n", "    ", "run_name", "=", "ps", ".", "get_current_run_name", "(", ")", "\n", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "instr_idx", "=", "md", ".", "CUSTOM_INSTR_NO", "\n", "env_id", "=", "md", ".", "ENV_ID", "\n", "seg_idx", "=", "md", ".", "SEG_IDX", "\n", "real_drone", "=", "md", ".", "REAL_DRONE", "\n", "vizdir", "=", "os", ".", "path", ".", "join", "(", "get_results_dir", "(", "run_name", ")", ",", "\n", "f\"viz_{'real' if real_drone else 'sim'}/{env_id}{'_' + str(seg_idx) if seg_idx is not None else ''}_{instr_idx}/\"", ")", "\n", "os", ".", "makedirs", "(", "vizdir", ",", "exist_ok", "=", "True", ")", "\n", "return", "vizdir", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout": [[85, 102], ["np.concatenate.data.cpu().numpy", "np.concatenate.transpose().squeeze", "imageio.imsave", "numpy.zeros_like", "numpy.concatenate", "range", "numpy.min", "np.concatenate.data.cpu", "np.concatenate.transpose", "len", "len", "numpy.min", "numpy.max", "numpy.max", "utils.get_viz_dir_for_rollout"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout"], ["", "def", "save_tensor_as_img_during_rollout", "(", "tensor", ",", "name", ",", "prefix", "=", "\"\"", ",", "renorm_each_channel", "=", "False", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tensor", "=", "tensor", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "len", "(", "tensor", ".", "shape", ")", ">", "2", "and", "tensor", ".", "shape", "[", "2", "]", "==", "2", ":", "\n", "        ", "extra_layer", "=", "np", ".", "zeros_like", "(", "tensor", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "tensor", "=", "np", ".", "concatenate", "(", "(", "tensor", ",", "extra_layer", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "if", "renorm_each_channel", "and", "len", "(", "tensor", ".", "shape", ")", ">", "2", ":", "\n", "        ", "for", "c", "in", "range", "(", "tensor", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "tensor", "[", ":", ",", ":", ",", "c", "]", "-=", "np", ".", "min", "(", "tensor", "[", ":", ",", ":", ",", "c", "]", ")", "\n", "tensor", "[", ":", ",", ":", ",", "c", "]", "/=", "(", "np", ".", "max", "(", "tensor", "[", ":", ",", ":", ",", "c", "]", "+", "1e-9", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "tensor", "-=", "np", ".", "min", "(", "tensor", ")", "\n", "tensor", "/=", "(", "np", ".", "max", "(", "tensor", ")", "+", "1e-9", ")", "\n", "\n", "", "imsave", "(", "get_viz_dir_for_rollout", "(", ")", "+", "name", "+", "prefix", "+", "\".png\"", ",", "tensor", ")", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.dual_dataloader._DualDataLoaderIterator.__init__": [[6, 12], ["iter", "iter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dual_dataloader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "dual_dataloader", "\n", "self", ".", "iter_a", "=", "iter", "(", "self", ".", "loader", ".", "loader_a", ")", "\n", "self", ".", "iter_b", "=", "iter", "(", "self", ".", "loader", ".", "loader_b", ")", "\n", "self", ".", "a_finished", "=", "False", "\n", "self", ".", "b_finished", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.dual_dataloader._DualDataLoaderIterator.get": [[13, 23], ["next", "iter", "next"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "it", ",", "finished", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "next_item", "=", "next", "(", "it", ")", "\n", "", "except", "StopIteration", ":", "\n", "# When loader A is finished, reset it", "\n", "            ", "it", "=", "iter", "(", "self", ".", "loader", ".", "loader_a", ")", "\n", "# If this throws exception too, that means the dataloder length is zero. In this case we don't want to catch it", "\n", "next_item", "=", "next", "(", "it", ")", "\n", "finished", "=", "True", "\n", "", "return", "next_item", ",", "finished", ",", "it", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.dual_dataloader._DualDataLoaderIterator.__next__": [[24, 42], ["dual_dataloader._DualDataLoaderIterator.get", "dual_dataloader._DualDataLoaderIterator.get", "StopIteration", "StopIteration"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "next_a", ",", "self", ".", "a_finished", ",", "self", ".", "iter_a", "=", "self", ".", "get", "(", "self", ".", "iter_a", ",", "self", ".", "a_finished", ")", "\n", "next_b", ",", "self", ".", "b_finished", ",", "self", ".", "iter_b", "=", "self", ".", "get", "(", "self", ".", "iter_b", ",", "self", ".", "b_finished", ")", "\n", "\n", "# Dataloader length is maximum of both datasets", "\n", "if", "self", ".", "loader", ".", "joint_length", "==", "\"max\"", ":", "\n", "            ", "if", "self", ".", "a_finished", "and", "self", ".", "b_finished", ":", "\n", "                ", "raise", "StopIteration", "(", ")", "\n", "# Dataloder length is minimum of both datasets", "\n", "", "", "elif", "self", ".", "loader", ".", "joint_length", "==", "\"min\"", ":", "\n", "            ", "if", "self", ".", "a_finished", "or", "self", ".", "b_finished", ":", "\n", "                ", "raise", "StopIteration", "(", ")", "\n", "# Dataloder length is infinte - reset the finished flags to False as soon as they become True", "\n", "", "", "elif", "self", ".", "loader", ".", "joint_length", "==", "\"infinite\"", ":", "\n", "            ", "self", ".", "a_finished", "=", "False", "\n", "self", ".", "b_finished", "=", "False", "\n", "\n", "", "return", "next_a", ",", "next_b", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.dual_dataloader.DualDataloader.__init__": [[46, 106], ["hasattr", "hasattr", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.dataloader.DataLoader", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_a", ",", "dataset_b", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "sampler_a", "=", "None", ",", "sampler_b", "=", "None", ",", "batch_sampler_a", "=", "None", ",", "batch_sampler_b", "=", "None", ",", "\n", "num_workers", "=", "0", ",", "collate_fn", "=", "default_collate", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ",", "joint_length", "=", "\"max\"", ")", ":", "\n", "        ", "\"\"\"\n        :param dataset_a:\n        :param dataset_b:\n        :param batch_size:\n        :param shuffle:\n        :param sampler_a:\n        :param sampler_b:\n        :param batch_sampler_a:\n        :param batch_sampler_b:\n        :param num_workers:\n        :param collate_fn:\n        :param pin_memory:\n        :param drop_last:\n        :param timeout:\n        :param worker_init_fn:\n        :param joint_length: either \"max\", \"min\" or \"infinite\"\n        \"\"\"", "\n", "\n", "if", "hasattr", "(", "dataset_a", ",", "\"collate_fn\"", ")", ":", "\n", "            ", "collate_a", "=", "dataset_a", ".", "collate_fn", "\n", "", "else", ":", "\n", "            ", "collate_a", "=", "collate_fn", "\n", "", "if", "hasattr", "(", "dataset_b", ",", "\"collate_fn\"", ")", ":", "\n", "            ", "collate_b", "=", "dataset_a", ".", "collate_fn", "\n", "", "else", ":", "\n", "            ", "collate_b", "=", "collate_fn", "\n", "\n", "", "self", ".", "loader_a", "=", "DataLoader", "(", "dataset_a", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "sampler", "=", "sampler_a", ",", "\n", "batch_sampler", "=", "batch_sampler_a", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_a", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "drop_last", "=", "drop_last", ",", "\n", "timeout", "=", "timeout", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "\n", "self", ".", "loader_b", "=", "DataLoader", "(", "dataset_b", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "sampler", "=", "sampler_b", ",", "\n", "batch_sampler", "=", "batch_sampler_b", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_b", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "drop_last", "=", "drop_last", ",", "\n", "timeout", "=", "timeout", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "\n", "self", ".", "dataset_a", "=", "dataset_a", "\n", "self", ".", "dataset_b", "=", "dataset_b", "\n", "self", ".", "length_a", "=", "len", "(", "self", ".", "loader_a", ")", "\n", "self", ".", "length_b", "=", "len", "(", "self", ".", "loader_b", ")", "\n", "self", ".", "joint_length", "=", "joint_length", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.dual_dataloader.DualDataloader.__len__": [[107, 114], ["max", "min"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "joint_length", "==", "\"max\"", ":", "\n", "            ", "return", "max", "(", "self", ".", "length_a", ",", "self", ".", "length_b", ")", "\n", "", "elif", "self", ".", "joint_length", "==", "\"min\"", ":", "\n", "            ", "return", "min", "(", "self", ".", "length_a", ",", "self", ".", "length_b", ")", "\n", "", "elif", "self", ".", "joint_length", "==", "\"infinity\"", ":", "\n", "            ", "return", "math", ".", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.learning.dual_dataloader.DualDataloader.__iter__": [[115, 117], ["dual_dataloader._DualDataLoaderIterator"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "_DualDataLoaderIterator", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.mask_tensors": [[10, 34], ["tuple", "tensor.data.storage().size", "mask.data.storage().size", "result.append", "torch.masked_select", "tensor.dim", "result.append", "tensor.data.storage", "mask.data.storage", "mask.view_as", "torch.masked_select().view", "tensor.dim", "mask.unsqueeze", "expand_mask.expand_as.expand_as", "result.append", "tensor.size", "torch.masked_select().view", "tensor.dim", "mask.unsqueeze().unsqueeze", "expand_mask.expand_as.expand_as", "result.append", "torch.masked_select", "tensor.size", "tensor.size", "torch.masked_select().view", "tensor.dim", "mask.dim", "result.append", "print", "print", "mask.expand_as", "torch.masked_select", "mask.unsqueeze", "tensor.size", "tensor.size", "tensor.size", "torch.masked_select", "tensor.dim", "tensor.size", "expand_mask.expand_as.expand_as", "torch.masked_select", "mask.squeeze", "expand_mask.expand_as.expand_as"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "mask_tensors", "(", "tensors", ",", "mask", ")", ":", "\n", "# If tensor and mask have the same number of elements", "\n", "    ", "result", "=", "[", "]", "\n", "for", "tensor", "in", "tensors", ":", "\n", "        ", "if", "tensor", ".", "data", ".", "storage", "(", ")", ".", "size", "(", ")", "==", "mask", ".", "data", ".", "storage", "(", ")", ".", "size", "(", ")", ":", "\n", "            ", "result", ".", "append", "(", "torch", ".", "masked_select", "(", "tensor", ",", "mask", ".", "view_as", "(", "tensor", ")", ")", ")", "\n", "# Tensor has more dimensions and hence more elements", "\n", "", "elif", "tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "result", ".", "append", "(", "torch", ".", "masked_select", "(", "tensor", ",", "mask", ".", "expand_as", "(", "tensor", ")", ")", ".", "view", "(", "-", "1", ",", "tensor", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "tensor", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "expand_mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "expand_mask", "=", "expand_mask", ".", "expand_as", "(", "tensor", ")", "\n", "result", ".", "append", "(", "torch", ".", "masked_select", "(", "tensor", ",", "expand_mask", ".", "expand_as", "(", "tensor", ")", ")", ".", "view", "(", "-", "1", ",", "tensor", ".", "size", "(", "1", ")", ",", "tensor", ".", "size", "(", "2", ")", ")", ")", "\n", "", "elif", "tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "expand_mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "expand_mask", "=", "expand_mask", ".", "expand_as", "(", "tensor", ")", "\n", "result", ".", "append", "(", "torch", ".", "masked_select", "(", "tensor", ",", "expand_mask", ".", "expand_as", "(", "tensor", ")", ")", ".", "view", "(", "-", "1", ",", "tensor", ".", "size", "(", "1", ")", ",", "tensor", ".", "size", "(", "2", ")", ",", "tensor", ".", "size", "(", "3", ")", ")", ")", "\n", "# If tensor has less dimensions than the mask, squeeze the mask", "\n", "", "elif", "tensor", ".", "dim", "(", ")", "<", "mask", ".", "dim", "(", ")", ":", "\n", "            ", "result", ".", "append", "(", "torch", ".", "masked_select", "(", "tensor", ",", "mask", ".", "squeeze", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "tensor", ".", "dim", "(", ")", ",", "tensor", ".", "size", "(", ")", ")", "\n", "print", "(", "\"Unsupported combination of inputs at mask_tensors\"", ")", "\n", "", "", "return", "tuple", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.instruction_sequence_batch_to_tensor": [[36, 66], ["len", "range", "max", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "range", "enumerate", "torch.unsqueeze.dim", "torch.unsqueeze", "torch.autograd.Variable", "parameters.get_current_parameters", "lenlist.append", "torch.LongTensor", "torch.LongTensor", "len", "torch.FloatTensor", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "instruction_sequence_batch_to_tensor", "(", "instructions", ",", "variable", "=", "True", ")", ":", "\n", "    ", "traj_len", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"trajectory_length\"", "]", "\n", "\n", "bs", "=", "len", "(", "instructions", ")", "\n", "lenlist", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "instruction", "in", "instructions", "[", "b", "]", ":", "\n", "            ", "lenlist", ".", "append", "(", "len", "(", "instruction", ")", "if", "instruction", "is", "not", "None", "else", "0", ")", "\n", "", "", "maxlen", "=", "max", "(", "lenlist", ")", "\n", "\n", "instructions_t", "=", "torch", ".", "LongTensor", "(", "bs", ",", "traj_len", ",", "maxlen", "+", "1", ")", ".", "fill_", "(", "0", ")", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "bs", ",", "traj_len", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "b", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "i", ",", "instruction", "in", "enumerate", "(", "instructions", "[", "b", "]", ")", ":", "\n", "            ", "if", "instruction", "is", "None", ":", "\n", "                ", "continue", "\n", "", "lengths", "[", "b", "]", "[", "i", "]", "=", "len", "(", "instruction", ")", "\n", "instruction_padded", "=", "instruction", "+", "[", "0", "for", "x", "in", "range", "(", "maxlen", "-", "len", "(", "instruction", ")", "+", "1", ")", "]", "\n", "instructions_t", "[", "b", "]", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "instruction_padded", ")", "\n", "\n", "", "", "if", "instructions_t", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "instructions_t", "=", "torch", ".", "unsqueeze", "(", "instructions_t", ",", "0", ")", "\n", "\n", "", "if", "variable", ":", "\n", "        ", "instructions_v", "=", "Variable", "(", "instructions_t", ")", "\n", "", "else", ":", "\n", "        ", "instructions_v", "=", "instructions_t", "\n", "\n", "", "return", "instructions_v", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_batch_to_tensor": [[68, 96], ["len", "range", "max", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "range", "enumerate", "torch.unsqueeze.dim", "torch.unsqueeze", "torch.autograd.Variable", "lenlist.append", "torch.LongTensor", "torch.LongTensor", "len", "torch.FloatTensor", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "sequence_batch_to_tensor", "(", "instructions", ",", "variable", "=", "True", ")", ":", "\n", "    ", "bs", "=", "len", "(", "instructions", ")", "\n", "lenlist", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "instruction", "in", "instructions", "[", "b", "]", ":", "\n", "            ", "lenlist", ".", "append", "(", "len", "(", "instruction", ")", "if", "instruction", "is", "not", "None", "else", "0", ")", "\n", "", "", "maxlen", "=", "max", "(", "lenlist", ")", "\n", "\n", "instructions_t", "=", "torch", ".", "LongTensor", "(", "bs", ",", "maxlen", "+", "1", ")", ".", "fill_", "(", "0", ")", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "bs", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "b", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "i", ",", "instruction", "in", "enumerate", "(", "instructions", "[", "b", "]", ")", ":", "\n", "            ", "if", "instruction", "is", "None", ":", "\n", "                ", "continue", "\n", "", "lengths", "[", "b", "]", "[", "i", "]", "=", "len", "(", "instruction", ")", "\n", "instruction_padded", "=", "instruction", "+", "[", "0", "for", "x", "in", "range", "(", "maxlen", "-", "len", "(", "instruction", ")", "+", "1", ")", "]", "\n", "instructions_t", "[", "b", "]", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "instruction_padded", ")", "\n", "\n", "", "", "if", "instructions_t", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "instructions_t", "=", "torch", ".", "unsqueeze", "(", "instructions_t", ",", "0", ")", "\n", "\n", "", "if", "variable", ":", "\n", "        ", "instructions_v", "=", "Variable", "(", "instructions_t", ")", "\n", "", "else", ":", "\n", "        ", "instructions_v", "=", "instructions_t", "\n", "\n", "", "return", "instructions_v", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_list_to_tensor": [[98, 121], ["len", "max", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "len", "torch.autograd.Variable", "len", "torch.FloatTensor", "torch.unsqueeze.dim", "torch.unsqueeze", "torch.LongTensor", "torch.LongTensor", "list", "range", "len"], "function", ["None"], ["", "def", "sequence_list_to_tensor", "(", "instructions", ",", "variable", "=", "True", ")", ":", "\n", "    ", "bs", "=", "len", "(", "instructions", ")", "\n", "lenlist", "=", "[", "len", "(", "instr", ")", "for", "instr", "in", "instructions", "]", "\n", "maxlen", "=", "max", "(", "lenlist", ")", "\n", "\n", "instructions_t", "=", "torch", ".", "LongTensor", "(", "bs", ",", "maxlen", "+", "1", ")", ".", "fill_", "(", "0", ")", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "bs", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "if", "variable", ":", "\n", "        ", "instructions_v", "=", "Variable", "(", "instructions_t", ")", "\n", "\n", "", "for", "i", ",", "instruction", "in", "enumerate", "(", "instructions", ")", ":", "\n", "        ", "if", "instruction", "is", "None", ":", "\n", "            ", "continue", "\n", "", "lengths", "[", "i", "]", "=", "len", "(", "instruction", ")", "\n", "instruction_padded", "=", "list", "(", "instruction", ")", "+", "[", "0", "for", "x", "in", "range", "(", "maxlen", "-", "len", "(", "instruction", ")", "+", "1", ")", "]", "\n", "# Long tensors can't be created like this", "\n", "instructions_v", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "instruction_padded", ")", "\n", "\n", "", "if", "instructions_v", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "instructions_v", "=", "torch", ".", "unsqueeze", "(", "instructions_v", ",", "0", ")", "\n", "\n", "", "return", "instructions_v", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_list_to_masked_tensor": [[124, 155], ["len", "max", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "len", "torch.FloatTensor", "torch.FloatTensor", "instructions_v.unsqueeze.dim", "instructions_v.unsqueeze.unsqueeze", "mask_v.unsqueeze.unsqueeze", "torch.LongTensor", "torch.LongTensor", "list", "range", "range", "range", "len"], "function", ["None"], ["", "def", "sequence_list_to_masked_tensor", "(", "instructions", ")", ":", "\n", "    ", "\"\"\"\n    Takes a list of B sequences, each a list of integer tokens, possibly variable length, where the longest sequence\n    is of length N.\n    Produces a BxN sequence tensor containing the B sequences, each padded with zeroes if shorter than N.\n    Also produces a BxN mask with one's for each element in the sequence tensor and zeroes for every padded element\n    :param instructions: list of lists of integers, where each inner list is a tokenized instruction\n    :return: tensor_instructions, tensor_mask\n    \"\"\"", "\n", "bs", "=", "len", "(", "instructions", ")", "\n", "lenlist", "=", "[", "len", "(", "instr", ")", "for", "instr", "in", "instructions", "]", "\n", "maxlen", "=", "max", "(", "lenlist", ")", "\n", "\n", "instructions_v", "=", "torch", ".", "LongTensor", "(", "bs", ",", "maxlen", "+", "1", ")", ".", "fill_", "(", "0", ")", "\n", "mask_v", "=", "torch", ".", "LongTensor", "(", "bs", ",", "maxlen", "+", "1", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "i", ",", "instruction", "in", "enumerate", "(", "instructions", ")", ":", "\n", "        ", "if", "instruction", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "instruction_padded", "=", "list", "(", "instruction", ")", "+", "[", "0", "for", "x", "in", "range", "(", "maxlen", "-", "len", "(", "instruction", ")", "+", "1", ")", "]", "\n", "instruction_mask", "=", "[", "1", "for", "i", "in", "range", "(", "0", ",", "lenlist", "[", "i", "]", ")", "]", "+", "[", "0", "for", "i", "in", "range", "(", "lenlist", "[", "i", "]", ",", "maxlen", "+", "1", ")", "]", "\n", "# Long tensors can't be created like this", "\n", "instructions_v", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "instruction_padded", ")", "\n", "mask_v", "[", "i", "]", "=", "torch", ".", "FloatTensor", "(", "instruction_mask", ")", "\n", "\n", "", "if", "instructions_v", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "instructions_v", "=", "instructions_v", ".", "unsqueeze", "(", "0", ")", "\n", "mask_v", "=", "mask_v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "instructions_v", ",", "mask_v", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor": [[157, 174], ["len", "torch.FloatTensor().fill_", "range", "torch.unsqueeze", "tensor_seq.cuda.cuda", "torch.FloatTensor", "torch.from_numpy().float", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "none_padded_seq_to_tensor", "(", "sequence", ",", "insert_batch_dim", "=", "False", ",", "cuda", "=", "False", ")", ":", "\n", "    ", "bs", "=", "len", "(", "sequence", ")", "\n", "size", "=", "[", "bs", ",", "*", "sequence", "[", "0", "]", ".", "shape", "]", "\n", "\n", "tensor_seq", "=", "torch", ".", "FloatTensor", "(", "*", "size", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "if", "sequence", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "tensor_seq", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "sequence", "[", "i", "]", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "if", "insert_batch_dim", ":", "\n", "        ", "tensor_seq", "=", "torch", ".", "unsqueeze", "(", "tensor_seq", ",", "0", ")", "\n", "\n", "", "if", "cuda", ":", "\n", "        ", "tensor_seq", "=", "tensor_seq", ".", "cuda", "(", ")", "\n", "\n", "", "return", "tensor_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.pad_segment_with_nones": [[176, 182], ["len", "seg_rect.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "pad_segment_with_nones", "(", "segment", ",", "max_seg_len", ")", ":", "\n", "    ", "seg_rect", "=", "segment", "[", ":", "max_seg_len", "]", "\n", "while", "len", "(", "seg_rect", ")", "<", "max_seg_len", ":", "\n", "        ", "seg_rect", ".", "append", "(", "{", "\"instruction\"", ":", "None", ",", "\"state\"", ":", "None", ",", "\"ref_action\"", ":", "None", ",", "\"reward\"", ":", "None", ",", "\"done\"", ":", "None", ",", "\"metadata\"", ":", "None", "}", ")", "\n", "\n", "", "return", "seg_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.pad_batch_with_nones": [[184, 198], ["max", "list", "seg_batch_rect.append", "zip", "len", "len", "seg_rect.append", "Sample"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "pad_batch_with_nones", "(", "seg_batch", ")", ":", "\n", "    ", "max_seg_len", "=", "max", "(", "[", "len", "(", "seg", ")", "for", "seg", "in", "seg_batch", "]", ")", "\n", "# Clip segments at 80 to keep memory consumption reasonable", "\n", "if", "max_seg_len", ">", "70", ":", "\n", "        ", "max_seg_len", "=", "70", "\n", "", "seg_batch_rect", "=", "[", "]", "\n", "for", "segment", "in", "seg_batch", ":", "\n", "        ", "seg_rect", "=", "segment", "[", ":", "max_seg_len", "]", "\n", "while", "len", "(", "seg_rect", ")", "<", "max_seg_len", ":", "\n", "            ", "seg_rect", ".", "append", "(", "Sample", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "", "seg_batch_rect", ".", "append", "(", "seg_rect", ")", "\n", "\n", "", "sample_batches", "=", "list", "(", "zip", "(", "*", "seg_batch_rect", ")", ")", "\n", "return", "sample_batches", ",", "max_seg_len", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.len_until_nones": [[200, 207], ["None"], "function", ["None"], ["", "def", "len_until_nones", "(", "sequence", ")", ":", "\n", "    ", "l", "=", "0", "\n", "for", "item", "in", "sequence", ":", "\n", "        ", "if", "item", "is", "None", ":", "\n", "            ", "break", "\n", "", "l", "+=", "1", "\n", "", "return", "l", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.__init__": [[11, 17], ["super().__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inner_distribution", ",", "outer_prob_mass", ")", ":", "\n", "        ", "super", "(", "Partial2DDistribution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inner_distribution", "=", "inner_distribution", "\n", "self", ".", "outer_prob_mass", "=", "outer_prob_mass", "\n", "self", ".", "log_softmax_module", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "2", ")", "\n", "self", ".", "softmax_module", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.from_distribution_and_mask": [[18, 34], ["range", "v_dist_inner_masked.view().sum", "partial_2d_distribution.Partial2DDistribution", "v_dist_inner_masked.view", "v_dist[].view().sum", "v_dist[].view"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_distribution_and_mask", "(", "cls", ",", "v_dist", ",", "cov_mask", ")", ":", "\n", "# Masks a visitation distribution and creates a Partial2DDistribution", "\n", "        ", "batch_size", "=", "v_dist", ".", "shape", "[", "0", "]", "\n", "channels", "=", "v_dist", ".", "shape", "[", "1", "]", "\n", "# Normalize before masking", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "            ", "v_dist", "[", ":", ",", "c", "]", "/=", "(", "v_dist", "[", ":", ",", "c", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "+", "1e-10", ")", "\n", "\n", "# Mask distribution", "\n", "", "v_dist_inner_masked", "=", "v_dist", "*", "cov_mask", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "\n", "probs_inside", "=", "v_dist_inner_masked", ".", "view", "(", "[", "batch_size", ",", "channels", ",", "-", "1", "]", ")", ".", "sum", "(", "2", ")", "\n", "probs_outside", "=", "1", "-", "probs_inside", "\n", "v_dist_masked", "=", "Partial2DDistribution", "(", "v_dist_inner_masked", ",", "probs_outside", ")", "\n", "return", "v_dist_masked", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.to": [[35, 39], ["partial_2d_distribution.Partial2DDistribution.inner_distribution.to", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.to"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inner_distribution", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "outer_prob_mass", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.cuda": [[40, 44], ["partial_2d_distribution.Partial2DDistribution.inner_distribution.cuda", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inner_distribution", ".", "cuda", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "outer_prob_mass", ".", "cuda", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.get_full_flat_distribution": [[45, 52], ["partial_2d_distribution.Partial2DDistribution.inner_distribution.view", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "get_full_flat_distribution", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "inner_distribution", ".", "shape", "[", "0", "]", "\n", "num_distributions", "=", "self", ".", "inner_distribution", ".", "shape", "[", "1", "]", "\n", "inner_flat", "=", "self", ".", "inner_distribution", ".", "view", "(", "[", "batch_size", ",", "num_distributions", ",", "-", "1", "]", ")", "\n", "outer", "=", "self", ".", "outer_prob_mass", ".", "view", "(", "[", "batch_size", ",", "num_distributions", ",", "-", "1", "]", ")", "\n", "full_flat", "=", "torch", ".", "cat", "(", "[", "inner_flat", ",", "outer", "]", ",", "dim", "=", "2", ")", "\n", "return", "full_flat", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.__index__": [[53, 57], ["partial_2d_distribution.Partial2DDistribution.inner_distribution.__index__", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.__index__", "partial_2d_distribution.Partial2DDistribution"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.__index__", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.__index__"], ["", "def", "__index__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "new_inner", "=", "self", ".", "inner_distribution", ".", "__index__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "new_outer", "=", "self", ".", "outer_prob_mass", ".", "__index__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "Partial2DDistribution", "(", "new_inner", ",", "new_outer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach": [[58, 60], ["partial_2d_distribution.Partial2DDistribution", "partial_2d_distribution.Partial2DDistribution.inner_distribution.detach", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "detach", "(", "self", ")", ":", "\n", "        ", "return", "Partial2DDistribution", "(", "self", ".", "inner_distribution", ".", "detach", "(", ")", ",", "self", ".", "outer_prob_mass", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax": [[61, 80], ["partial_2d_distribution.Partial2DDistribution.inner_distribution.size", "partial_2d_distribution.Partial2DDistribution.inner_distribution.size", "partial_2d_distribution.Partial2DDistribution.inner_distribution.size", "partial_2d_distribution.Partial2DDistribution.inner_distribution.size", "partial_2d_distribution.Partial2DDistribution.inner_distribution.view", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "softmax_func", "flat_softmaxed[].view", "partial_2d_distribution.Partial2DDistribution"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "logsoftmax", "=", "False", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "inner_distribution", ".", "size", "(", "0", ")", "\n", "num_channels", "=", "self", ".", "inner_distribution", ".", "size", "(", "1", ")", "\n", "assert", "num_channels", "==", "2", ",", "\"Must have 2 channels: visitation distribution scores and goal distribution scores\"", "\n", "height", "=", "self", ".", "inner_distribution", ".", "size", "(", "2", ")", "\n", "width", "=", "self", ".", "inner_distribution", ".", "size", "(", "3", ")", "\n", "\n", "flat_inner", "=", "self", ".", "inner_distribution", ".", "view", "(", "[", "batch_size", ",", "num_channels", ",", "-", "1", "]", ")", "\n", "flat_outer", "=", "self", ".", "outer_prob_mass", ".", "view", "(", "[", "batch_size", ",", "num_channels", ",", "-", "1", "]", ")", "\n", "flat_full", "=", "torch", ".", "cat", "(", "[", "flat_inner", ",", "flat_outer", "]", ",", "dim", "=", "2", ")", "\n", "\n", "softmax_func", "=", "self", ".", "log_softmax_module", "if", "logsoftmax", "else", "self", ".", "softmax_module", "\n", "\n", "flat_softmaxed", "=", "softmax_func", "(", "flat_full", ")", "\n", "\n", "new_inner_distribution", "=", "flat_softmaxed", "[", ":", ",", ":", ",", ":", "-", "1", "]", ".", "view", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "new_outer_prob_mass", "=", "flat_softmaxed", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "\n", "return", "Partial2DDistribution", "(", "new_inner_distribution", ",", "new_outer_prob_mass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone": [[81, 83], ["partial_2d_distribution.Partial2DDistribution", "partial_2d_distribution.Partial2DDistribution.inner_distribution.clone", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.clone"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "return", "Partial2DDistribution", "(", "self", ".", "inner_distribution", ".", "clone", "(", ")", ",", "self", ".", "outer_prob_mass", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.visualize": [[84, 105], ["int", "numpy.zeros", "partial_2d_distribution.Partial2DDistribution.inner_distribution[].detach().cpu().numpy().transpose", "range", "range", "[].item", "int", "partial_2d_distribution.Partial2DDistribution.inner_distribution[].detach().cpu().numpy", "npinner[].max", "partial_2d_distribution.Partial2DDistribution.inner_distribution[].detach().cpu", "partial_2d_distribution.Partial2DDistribution.outer_prob_mass.detach", "partial_2d_distribution.Partial2DDistribution.inner_distribution[].detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "visualize", "(", "self", ",", "idx", "=", "0", ")", ":", "\n", "        ", "width", "=", "self", ".", "inner_distribution", ".", "shape", "[", "3", "]", "\n", "height", "=", "self", ".", "inner_distribution", ".", "shape", "[", "2", "]", "\n", "channels", "=", "self", ".", "inner_distribution", ".", "shape", "[", "1", "]", "\n", "barwidth", "=", "int", "(", "width", "/", "5", ")", "\n", "\n", "# Include 2 bars - stop and visitation", "\n", "showwidth", "=", "width", "+", "channels", "*", "barwidth", "\n", "showheight", "=", "height", "\n", "show_img", "=", "np", ".", "zeros", "(", "(", "showheight", ",", "showwidth", ",", "channels", ")", ")", "\n", "\n", "npinner", "=", "self", ".", "inner_distribution", "[", "idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "            ", "npinner", "[", ":", ",", ":", ",", "c", "]", "/=", "(", "npinner", "[", ":", ",", ":", ",", "c", "]", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "\n", "", "show_img", "[", "0", ":", "height", ",", "0", ":", "width", ",", ":", "]", "=", "npinner", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "            ", "value", "=", "self", ".", "outer_prob_mass", ".", "detach", "(", ")", "[", "idx", ",", "c", "]", ".", "item", "(", ")", "\n", "barheight", "=", "int", "(", "value", "*", "showheight", ")", "\n", "show_img", "[", "showheight", "-", "barheight", ":", ",", "width", "+", "c", "*", "barwidth", ":", "width", "+", "(", "c", "+", "1", ")", "*", "barwidth", ",", "c", "]", "=", "1.0", "\n", "", "return", "show_img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.show": [[106, 109], ["partial_2d_distribution.Partial2DDistribution.visualize", "visualization.Presenter().show_image", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.visualize", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "show", "(", "self", ",", "name", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ",", "idx", "=", "0", ")", ":", "\n", "        ", "show_img", "=", "self", ".", "visualize", "(", "idx", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "show_img", ",", "name", ",", "scale", "=", "scale", ",", "waitkey", "=", "waitkey", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsBase.__init__": [[23, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "side_indices", "=", "{", "\"left\"", ":", "0", ",", "\"right\"", ":", "1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsBase.__call__": [[26, 91], ["learning.models.semantic_map.pinhole_projection_map.PinholeProjector", "data_io.env.load_env_config", "env_config.definitions.landmarks.get_landmark_name_to_index", "data_io.env.get_landmark_locations_airsim", "data_io.env.load_path", "torch.zeros.AuxLabelsBase.__get_goal_location_airsim", "torch.zeros", "torch.from_numpy().unsqueeze().unsqueeze().expand_as", "enumerate", "range", "torch.from_numpy().unsqueeze().clone().repeat", "images.size", "learning.models.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image", "enumerate", "images.size", "images.size", "images.size", "len", "torch.from_numpy().unsqueeze().unsqueeze", "torch.zeros.size", "torch.from_numpy().unsqueeze().expand_as", "learning.models.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image", "torch.from_numpy().unsqueeze().clone", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.__get_goal_location_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone"], ["", "def", "__call__", "(", "self", ",", "images", ",", "states", ",", "segment_data", ",", "mask", ")", ":", "\n", "        ", "projector", "=", "PinholeProjector", "(", "img_x", "=", "images", ".", "size", "(", "3", ")", ",", "img_y", "=", "images", ".", "size", "(", "2", ")", ")", "\n", "# presenter = Presenter()", "\n", "\n", "env_id", "=", "segment_data", ".", "metadata", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "\n", "conf_json", "=", "load_env_config", "(", "env_id", ")", "\n", "all_landmark_indices", "=", "get_landmark_name_to_index", "(", ")", "\n", "landmark_names", ",", "landmark_indices", ",", "landmark_pos", "=", "get_landmark_locations_airsim", "(", "conf_json", ")", "\n", "\n", "path_array", "=", "load_path", "(", "env_id", ")", "\n", "goal_loc", "=", "self", ".", "__get_goal_location_airsim", "(", "path_array", ")", "\n", "\n", "# Traj length x 64 landmarks x 14", "\n", "# 0-5: Present landmarks data", "\n", "#   0 - landmark present in img", "\n", "#   1-2 - landmark pix_x | pix_y", "\n", "#   3-5 - landmark world coords m_x | m_y", "\n", "# 6-7: Template data", "\n", "#   6 - landmark_mentioned index", "\n", "#   7 - mentioned_side index", "\n", "#   8 - landmark mentioned", "\n", "# 9-13: Goal data", "\n", "#   9-10 - goal_x_pix | goal_y_pix", "\n", "#   11-12 - goal_x | goal_y (world)", "\n", "#   13 - goal visible", "\n", "aux_labels", "=", "torch", ".", "zeros", "(", "(", "images", ".", "size", "(", "0", ")", ",", "len", "(", "all_landmark_indices", ")", ",", "14", ")", ")", "\n", "\n", "# Store goal location in airsim coordinates", "\n", "aux_labels", "[", ":", ",", ":", ",", "11", ":", "13", "]", "=", "torch", ".", "from_numpy", "(", "goal_loc", "[", "0", ":", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "\n", "aux_labels", "[", ":", ",", ":", ",", "11", ":", "13", "]", ")", "\n", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "landmark_indices", ")", ":", "\n", "            ", "aux_labels", "[", ":", ",", "idx", ",", "3", ":", "6", "]", "=", "torch", ".", "from_numpy", "(", "\n", "landmark_pos", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "clone", "(", ")", ".", "repeat", "(", "aux_labels", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "\n", "", "for", "timestep", "in", "range", "(", "images", ".", "size", "(", "0", ")", ")", ":", "\n", "# presenter.save_image(images[timestep], name=\"tmp.png\", torch=True)", "\n", "\n", "            ", "if", "mask", "[", "timestep", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "cam_pos", "=", "states", "[", "timestep", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", "timestep", ",", "12", ":", "16", "]", "\n", "\n", "goal_in_img", ",", "goal_in_cam", ",", "status", "=", "projector", ".", "world_point_to_image", "(", "cam_pos", ",", "cam_rot", ",", "goal_loc", ")", "\n", "if", "goal_in_img", "is", "not", "None", ":", "\n", "                ", "aux_labels", "[", "timestep", ",", ":", ",", "9", ":", "11", "]", "=", "torch", ".", "from_numpy", "(", "goal_in_img", "[", "0", ":", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "\n", "aux_labels", "[", "timestep", ",", ":", ",", "9", ":", "11", "]", ")", "\n", "aux_labels", "[", "timestep", ",", ":", ",", "13", "]", "=", "1.0", "\n", "\n", "", "for", "i", ",", "landmark_world", "in", "enumerate", "(", "landmark_pos", ")", ":", "\n", "                ", "landmark_idx", "=", "landmark_indices", "[", "i", "]", "\n", "\n", "landmark_in_img", ",", "landmark_in_cam", ",", "status", "=", "projector", ".", "world_point_to_image", "(", "cam_pos", ",", "cam_rot", ",", "\n", "landmark_world", ")", "\n", "# This is None if the landmark is behind the camera.", "\n", "if", "landmark_in_img", "is", "not", "None", ":", "\n", "# presenter.save_image(images[timestep], name=\"tmp.png\", torch=True, draw_point=landmark_in_img)", "\n", "                    ", "aux_labels", "[", "timestep", ",", "landmark_idx", ",", "0", "]", "=", "1.0", "\n", "aux_labels", "[", "timestep", ",", "landmark_idx", ",", "1", ":", "3", "]", "=", "torch", ".", "from_numpy", "(", "landmark_in_img", "[", "0", ":", "2", "]", ")", "\n", "# aux_labels[timestep, landmark_idx, 3:6] = torch.from_numpy(landmark_in_cam[0:3])", "\n", "# aux_labels[timestep, landmark_idx, 8] = 1.0 if landmark_idx == mentioned_landmark_idx else 0", "\n", "\n", "", "", "", "return", "aux_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsBase.__get_goal_location_airsim": [[92, 100], ["data_io.units.UnrealUnits", "numpy.asarray", "numpy.zeros", "data_io.units.UnrealUnits.pos2d_to_as"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as"], ["", "def", "__get_goal_location_airsim", "(", "self", ",", "path_array", ")", ":", "\n", "        ", "units", "=", "UnrealUnits", "(", "1.0", ")", "\n", "goal_x", "=", "path_array", "[", "-", "1", "]", "[", "0", "]", "\n", "goal_y", "=", "path_array", "[", "-", "1", "]", "[", "1", "]", "\n", "pt", "=", "np", ".", "asarray", "(", "[", "goal_x", ",", "goal_y", "]", ")", "\n", "pt_as", "=", "np", ".", "zeros", "(", "3", ")", "\n", "pt_as", "[", "0", ":", "2", "]", "=", "units", ".", "pos2d_to_as", "(", "pt", ")", "\n", "return", "pt_as", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsNL.__init__": [[102, 109], ["aux_labels.AuxLabelsBase.__init__", "data_io.instructions.load_landmark_alignments", "data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_landmark_alignments", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AuxLabelsNL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thesaurus", "=", "load_landmark_alignments", "(", ")", "\n", "train_instructions", ",", "dev_instructions", ",", "test_instructions", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "all_instructions", "=", "{", "**", "train_instructions", ",", "**", "dev_instructions", ",", "**", "test_instructions", "}", "\n", "self", ".", "corpus", "=", "corpus", "\n", "self", ".", "word2token", ",", "self", ".", "token2term", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsNL.__call__": [[110, 122], ["super().__call__.AuxLabelsBase.__call__", "super().__call__.AuxLabelsNL.__add_aux_data_nl", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__call__", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsNL.__add_aux_data_nl"], ["", "def", "__call__", "(", "self", ",", "images", ",", "states", ",", "segment_data", ",", "mask", ")", ":", "\n", "        ", "aux_labels", "=", "super", "(", "AuxLabelsNL", ",", "self", ")", ".", "__call__", "(", "images", ",", "states", ",", "segment_data", ",", "mask", ")", "\n", "env_id", "=", "segment_data", ".", "metadata", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "set_idx", "=", "segment_data", ".", "metadata", "[", "0", "]", "[", "\"set_idx\"", "]", "\n", "seg_idx", "=", "segment_data", ".", "metadata", "[", "0", "]", "[", "\"seg_idx\"", "]", "\n", "\n", "str_instruction", "=", "self", ".", "all_instructions", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_idx", "]", "[", "\"instruction\"", "]", "\n", "\n", "added", "=", "self", ".", "__add_aux_data_nl", "(", "aux_labels", ",", "str_instruction", ")", "\n", "if", "not", "added", ":", "\n", "            ", "print", "(", "\"Couldn't add auxiliary NL data!\"", ")", "\n", "", "return", "aux_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsNL.__add_aux_data_nl": [[123, 133], ["data_io.instructions.get_mentioned_landmarks", "range", "len", "labels.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_mentioned_landmarks"], ["", "def", "__add_aux_data_nl", "(", "self", ",", "labels", ",", "str_instruction", ")", ":", "\n", "\n", "        ", "mentioned_landmark_names", ",", "mentioned_landmark_indices", "=", "get_mentioned_landmarks", "(", "self", ".", "thesaurus", ",", "str_instruction", ")", "\n", "\n", "if", "len", "(", "mentioned_landmark_indices", ")", ">", "0", ":", "\n", "            ", "labels", "[", ":", ",", ":", ",", "6", "]", "=", "mentioned_landmark_indices", "[", "0", "]", "\n", "", "for", "landmark_idx", "in", "range", "(", "labels", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "labels", "[", ":", ",", "landmark_idx", ",", "8", "]", "=", "1.0", "if", "landmark_idx", "in", "mentioned_landmark_indices", "else", "0", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsTemplateLandmarkSide.__init__": [[137, 139], ["aux_labels.AuxLabelsBase.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AuxLabelsTemplateLandmarkSide", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsTemplateLandmarkSide.__call__": [[140, 147], ["super().__call__.AuxLabelsBase.__call__", "super().__call__.AuxLabelsTemplateLandmarkSide.__add_aux_data_template", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__call__", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsTemplateLandmarkSide.__add_aux_data_template"], ["", "def", "__call__", "(", "self", ",", "images", ",", "states", ",", "segment_split", ",", "mask", ")", ":", "\n", "        ", "aux_labels", "=", "super", "(", "AuxLabelsTemplateLandmarkSide", ",", "self", ")", ".", "__call__", "(", "images", ",", "states", ",", "segment_split", ",", "mask", ")", "\n", "env_id", "=", "segment_split", ".", "metadata", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "added", "=", "self", ".", "__add_aux_data_template", "(", "aux_labels", ",", "env_id", ")", "\n", "if", "not", "added", ":", "\n", "            ", "print", "(", "\"Couldn't add auxiliary template data!\"", ")", "\n", "", "return", "aux_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsTemplateLandmarkSide.__add_aux_data_template": [[148, 164], ["data_io.env.load_template", "aux_labels.AuxLabelsTemplateLandmarkSide.__get_goal_landmark_idx", "range", "labels.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsTemplateLandmarkSide.__get_goal_landmark_idx"], ["", "def", "__add_aux_data_template", "(", "self", ",", "labels", ",", "env_id", ")", ":", "\n", "        ", "template_json", "=", "load_template", "(", "env_id", ")", "\n", "\n", "# Template data is unavailable - means this is probably real natural language", "\n", "if", "template_json", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "mentioned_landmark_idx", ",", "mentioned_side_idx", "=", "self", ".", "__get_goal_landmark_idx", "(", "template_json", ")", "\n", "\n", "labels", "[", ":", ",", ":", ",", "6", "]", "=", "mentioned_landmark_idx", "\n", "labels", "[", ":", ",", ":", ",", "7", "]", "=", "mentioned_side_idx", "\n", "\n", "for", "landmark_idx", "in", "range", "(", "labels", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "labels", "[", ":", ",", "landmark_idx", ",", "8", "]", "=", "1.0", "if", "landmark_idx", "==", "mentioned_landmark_idx", "else", "0", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.aux_labels.AuxLabelsTemplateLandmarkSide.__get_goal_landmark_idx": [[165, 172], ["env_config.definitions.landmarks.get_landmark_name_to_index"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index"], ["", "def", "__get_goal_landmark_idx", "(", "self", ",", "template_json", ")", ":", "\n", "        ", "landmark_name", "=", "template_json", "[", "\"landmark1\"", "]", "\n", "landmark_indices", "=", "get_landmark_name_to_index", "(", ")", "\n", "idx", "=", "landmark_indices", "[", "landmark_name", "]", "\n", "side", "=", "template_json", "[", "\"side\"", "]", "\n", "side_idx", "=", "self", ".", "side_indices", "[", "side", "]", "\n", "return", "idx", ",", "side_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.cuda_var": [[6, 12], ["torch.autograd.Variable", "tensor.contiguous().cuda.contiguous().cuda", "type", "tensor.contiguous().cuda.contiguous"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["def", "cuda_var", "(", "tensor", ",", "cuda", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "cuda", ":", "\n", "        ", "tensor", "=", "tensor", ".", "contiguous", "(", ")", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "type", "(", "tensor", ")", "==", "Variable", ":", "\n", "        ", "return", "tensor", "\n", "", "return", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor": [[14, 21], ["torch.FloatTensor.fill_", "torch.cuda.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "empty_float_tensor", "(", "sizes", ",", "cuda", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "cuda", ":", "\n", "        ", "tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "*", "sizes", ")", "\n", "", "else", ":", "\n", "        ", "tensor", "=", "torch", ".", "FloatTensor", "(", "*", "sizes", ")", "\n", "", "tensor", ".", "fill_", "(", "0", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.np_to_tensor": [[23, 36], ["isinstance", "torch.from_numpy().float", "torch.FloatTensor", "torch.unsqueeze", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "np_to_tensor", "(", "np_tensor", ",", "insert_batch_dim", "=", "True", ",", "var", "=", "True", ",", "cuda", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "np_tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "from_numpy", "(", "np_tensor", ")", ".", "float", "(", ")", "\n", "", "else", ":", "# Probably a lone float", "\n", "        ", "tensor", "=", "torch", ".", "FloatTensor", "(", "[", "np_tensor", "]", ")", "\n", "\n", "", "if", "insert_batch_dim", ":", "\n", "        ", "tensor", "=", "torch", ".", "unsqueeze", "(", "tensor", ",", "0", ")", "\n", "", "if", "cuda", ":", "\n", "        ", "tensor", "=", "tensor", ".", "cuda", "(", ")", "\n", "", "if", "var", ":", "\n", "        ", "tensor", "=", "Variable", "(", "tensor", ")", "\n", "", "return", "tensor", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_images": [[8, 15], ["enumerate", "np.asarray.append", "numpy.asarray", "vision.standardize_image"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image"], ["def", "standardize_images", "(", "np_images", ",", "out_np", "=", "False", ")", ":", "\n", "    ", "images_out", "=", "[", "]", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "np_images", ")", ":", "\n", "        ", "images_out", ".", "append", "(", "standardize_image", "(", "image", ")", ")", "\n", "", "if", "out_np", ":", "\n", "        ", "images_out", "=", "np", ".", "asarray", "(", "images_out", ")", "\n", "", "return", "images_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_depth_images": [[17, 22], ["enumerate", "images_out.append", "vision.standardize_depth_image"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_depth_image"], ["", "def", "standardize_depth_images", "(", "np_images", ")", ":", "\n", "    ", "images_out", "=", "[", "]", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "np_images", ")", ":", "\n", "        ", "images_out", ".", "append", "(", "standardize_depth_image", "(", "image", ")", ")", "\n", "", "return", "images_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_depth_image": [[24, 40], ["numpy.asarray().astype", "np.expand_dims.transpose", "len", "numpy.expand_dims", "numpy.asarray"], "function", ["None"], ["", "def", "standardize_depth_image", "(", "np_image", ")", ":", "\n", "    ", "if", "np_image", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "channel", "=", "0", "\n", "if", "len", "(", "np_image", ".", "shape", ")", "<", "3", ":", "\n", "        ", "np_image", "=", "np", ".", "expand_dims", "(", "np_image", ",", "2", ")", "\n", "\n", "", "if", "np_image", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "channel", "=", "3", "\n", "\n", "", "np_image", "=", "np", ".", "asarray", "(", "np_image", ")", ".", "astype", "(", "float", ")", "\n", "np_image", "=", "np_image", "[", ":", ",", ":", ",", "channel", ":", "channel", "+", "1", "]", "\n", "np_image", "=", "np_image", "/", "DEPTH_SCALE", "\n", "np_image", "=", "np_image", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "np_image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image": [[42, 52], ["numpy.asarray().astype", "numpy.mean", "np_image.transpose.transpose", "numpy.std", "numpy.asarray"], "function", ["None"], ["", "def", "standardize_image", "(", "np_image", ")", ":", "\n", "    ", "if", "np_image", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "np_image", "=", "np", ".", "asarray", "(", "np_image", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "np_image", "=", "np_image", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "np_image", "-=", "np", ".", "mean", "(", "np_image", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", "\n", "np_image", "/=", "(", "np", ".", "std", "(", "np_image", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", "+", "1e-9", ")", "\n", "np_image", "=", "np_image", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "np_image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist": [[54, 64], ["numpy.asarray().astype", "np_image.transpose.transpose", "np_image.transpose.min", "np_image.transpose.sum", "numpy.asarray"], "function", ["None"], ["", "def", "standardize_2d_prob_dist", "(", "np_dist_stack", ")", ":", "\n", "    ", "if", "np_dist_stack", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "np_image", "=", "np", ".", "asarray", "(", "np_dist_stack", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "assert", "np_image", ".", "min", "(", ")", ">=", "0", ",", "\"Probability density must be positive\"", "\n", "np_image", "/=", "(", "np_image", ".", "sum", "(", "axis", "=", "(", "0", ",", "1", ")", ",", "keepdims", "=", "True", ")", "+", "1e-9", ")", "\n", "#print(\"normsum: \", np_image.sum(axis=(0, 1)))", "\n", "np_image", "=", "np_image", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "np_image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_path_ground_truth": [[66, 76], ["numpy.asarray().astype", "numpy.min", "np_image.transpose.transpose", "numpy.max", "numpy.asarray"], "function", ["None"], ["", "def", "standardize_path_ground_truth", "(", "np_image", ")", ":", "\n", "    ", "if", "np_image", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "np_image", "=", "np", ".", "asarray", "(", "np_image", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "np_image", "=", "np_image", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "np_image", "-=", "np", ".", "min", "(", "np_image", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", "\n", "np_image", "/=", "(", "np", ".", "max", "(", "np_image", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", "+", "1e-9", ")", "\n", "np_image", "=", "np_image", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "np_image", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.viz_img": [[78, 87], ["tensor.cpu.cpu", "type", "torch.min", "torch.max"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "viz_img", "(", "variable_or_tensor", ")", ":", "\n", "    ", "if", "type", "(", "variable_or_tensor", ")", "is", "Variable", ":", "\n", "        ", "tensor", "=", "variable_or_tensor", ".", "data", "\n", "", "else", ":", "\n", "        ", "tensor", "=", "variable_or_tensor", "\n", "", "tensor", "=", "tensor", ".", "cpu", "(", ")", "\n", "tensor", "=", "tensor", "-", "torch", ".", "min", "(", "tensor", ")", "\n", "tensor", "=", "tensor", "/", "(", "torch", ".", "max", "(", "tensor", ")", "+", "1e-9", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.torch_to_np": [[89, 107], ["hasattr", "type", "img.transpose.data.cpu", "img.transpose.numpy", "numpy.min", "len", "img.transpose.transpose", "img.transpose.transpose", "numpy.max"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy"], ["", "def", "torch_to_np", "(", "variable_or_tensor", ")", ":", "\n", "# If this is a torch Variable", "\n", "    ", "img", "=", "variable_or_tensor", "\n", "if", "type", "(", "img", ")", "is", "Variable", ":", "\n", "        ", "img", "=", "img", ".", "data", ".", "cpu", "(", ")", "\n", "# If this is a torch tensor", "\n", "", "if", "hasattr", "(", "img", ",", "\"cuda\"", ")", ":", "\n", "        ", "img", "=", "img", ".", "numpy", "(", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "# Normalize", "\n", "", "", "img", "=", "img", "-", "np", ".", "min", "(", "img", ")", "\n", "img", "=", "img", "/", "(", "np", ".", "max", "(", "img", ")", "+", "1e-9", ")", "\n", "\n", "return", "img", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "position", ",", "orientation", ")", ":", "\n", "        ", "self", ".", "position", "=", "position", "\n", "self", ".", "orientation", "=", "orientation", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.__eq__": [[12, 23], ["hasattr", "poseq.all.all.all", "roteq.all.all.all"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.all", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.all"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "other", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "poseq", "=", "self", ".", "position", "==", "other", ".", "position", "\n", "roteq", "=", "self", ".", "orientation", "==", "other", ".", "orientation", "\n", "# For numpy arrays, torch ByteTensors and variables containing ByteTensors", "\n", "if", "hasattr", "(", "poseq", ",", "\"all\"", ")", ":", "\n", "            ", "poseq", "=", "poseq", ".", "all", "(", ")", "\n", "roteq", "=", "roteq", ".", "all", "(", ")", "\n", "", "return", "poseq", "and", "roteq", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.__getitem__": [[24, 31], ["type", "pose.Pose.position[].view", "pose.Pose.orientation[].view", "pose.Pose", "pose.Pose", "i[].expand_as", "i[].expand_as"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "type", "(", "i", ")", "in", "[", "torch", ".", "ByteTensor", ",", "torch", ".", "cuda", ".", "ByteTensor", "]", ":", "\n", "            ", "pos", "=", "self", ".", "position", "[", "i", "[", ":", ",", "np", ".", "newaxis", "]", ".", "expand_as", "(", "self", ".", "position", ")", "]", ".", "view", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "rot", "=", "self", ".", "orientation", "[", "i", "[", ":", ",", "np", ".", "newaxis", "]", ".", "expand_as", "(", "self", ".", "orientation", ")", "]", ".", "view", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "return", "Pose", "(", "pos", ",", "rot", ")", "\n", "", "else", ":", "\n", "            ", "return", "Pose", "(", "self", ".", "position", "[", "i", "]", ",", "self", ".", "orientation", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu": [[32, 36], ["pose.Pose.position.cpu", "pose.Pose.orientation.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "position", "=", "self", ".", "position", ".", "cpu", "(", ")", "\n", "self", ".", "orientation", "=", "self", ".", "orientation", ".", "cpu", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cuda": [[37, 41], ["pose.Pose.position.cuda", "pose.Pose.orientation.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "position", "=", "self", ".", "position", ".", "cuda", "(", "device", ")", "\n", "self", ".", "orientation", "=", "self", ".", "orientation", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.to_torch": [[42, 46], ["torch.from_numpy", "torch.from_numpy", "pose.Pose"], "methods", ["None"], ["", "def", "to_torch", "(", "self", ")", ":", "\n", "        ", "position", "=", "torch", ".", "from_numpy", "(", "self", ".", "position", ")", "\n", "orientation", "=", "torch", ".", "from_numpy", "(", "self", ".", "orientation", ")", "\n", "return", "Pose", "(", "position", ",", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.to_var": [[47, 51], ["torch.autograd.Variable", "torch.autograd.Variable", "pose.Pose"], "methods", ["None"], ["", "def", "to_var", "(", "self", ")", ":", "\n", "        ", "position", "=", "Variable", "(", "self", ".", "position", ")", "\n", "orientation", "=", "Variable", "(", "self", ".", "orientation", ")", "\n", "return", "Pose", "(", "position", ",", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.repeat_np": [[52, 56], ["numpy.tile", "numpy.tile", "pose.Pose"], "methods", ["None"], ["", "def", "repeat_np", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "position", "=", "np", ".", "tile", "(", "self", ".", "position", "[", "np", ".", "newaxis", ",", ":", "]", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "orientation", "=", "np", ".", "tile", "(", "self", ".", "orientation", "[", "np", ".", "newaxis", ",", ":", "]", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "return", "Pose", "(", "position", ",", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy": [[57, 67], ["isinstance", "hasattr", "pose.Pose", "pos.cpu().numpy.cpu().numpy.cpu().numpy", "rot.cpu().numpy.cpu().numpy.cpu().numpy", "pos.cpu().numpy.cpu().numpy.cpu", "rot.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "numpy", "(", "self", ")", ":", "\n", "        ", "pos", "=", "self", ".", "position", "\n", "rot", "=", "self", ".", "orientation", "\n", "if", "isinstance", "(", "pos", ",", "Variable", ")", ":", "\n", "            ", "pos", "=", "pos", ".", "data", "\n", "rot", "=", "rot", ".", "data", "\n", "", "if", "hasattr", "(", "pos", ",", "\"cuda\"", ")", ":", "\n", "            ", "pos", "=", "pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rot", "=", "rot", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "Pose", "(", "pos", ",", "rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.__len__": [[68, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "position", "is", "None", ":", "\n", "            ", "return", "0", "\n", "", "return", "len", "(", "self", ".", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.__str__": [[73, 75], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Pose \"", "+", "str", "(", "self", ".", "position", ")", "+", "\" : \"", "+", "str", "(", "self", ".", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_np": [[76, 93], ["numpy.stack().astype", "numpy.stack().astype", "pose.Pose", "numpy.random.normal", "numpy.random.normal", "numpy.asarray", "transforms3d.euler.euler2quat", "np.stack().astype.append", "np.stack().astype.append", "transforms3d.euler.quat2euler", "numpy.stack", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "get_noisy_poses_np", "(", "clean_poses", ",", "position_variance", ",", "orientation_variance", ")", ":", "\n", "    ", "noisy_pos", "=", "[", "]", "\n", "noisy_rot", "=", "[", "]", "\n", "for", "pose", "in", "clean_poses", ":", "\n", "        ", "pos_eta", "=", "np", ".", "random", ".", "normal", "(", "[", "0", "]", "*", "3", ",", "[", "position_variance", "]", "*", "3", ")", "\n", "rot_eta", "=", "np", ".", "random", ".", "normal", "(", "[", "0", "]", "*", "3", ",", "[", "0", "]", "*", "2", "+", "[", "orientation_variance", "]", ")", "\n", "\n", "rpy", "=", "np", ".", "asarray", "(", "euler", ".", "quat2euler", "(", "pose", ".", "orientation", ")", ")", "\n", "rpy_n", "=", "rpy", "+", "rot_eta", "\n", "rot_noisy", "=", "euler", ".", "euler2quat", "(", "rpy_n", "[", "0", "]", ",", "rpy_n", "[", "1", "]", ",", "rpy_n", "[", "2", "]", ")", "\n", "pos_noisy", "=", "pose", ".", "position", "+", "pos_eta", "\n", "noisy_pos", ".", "append", "(", "pos_noisy", ")", "\n", "noisy_rot", ".", "append", "(", "rot_noisy", ")", "\n", "\n", "", "noisy_pos", "=", "np", ".", "stack", "(", "noisy_pos", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "noisy_rot", "=", "np", ".", "stack", "(", "noisy_rot", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "Pose", "(", "noisy_pos", ",", "noisy_rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.stack_poses_np": [[94, 101], ["pose.Pose", "pos.append", "rot.append", "numpy.stack", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "stack_poses_np", "(", "poses", ")", ":", "\n", "    ", "pos", "=", "[", "]", "\n", "rot", "=", "[", "]", "\n", "for", "pose", "in", "poses", ":", "\n", "        ", "pos", ".", "append", "(", "pose", ".", "position", ")", "\n", "rot", ".", "append", "(", "pose", ".", "orientation", ")", "\n", "", "return", "Pose", "(", "np", ".", "stack", "(", "pos", ")", ",", "np", ".", "stack", "(", "rot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_torch": [[102, 109], ["clean_poses.numpy", "pose.get_noisy_poses_np", "get_noisy_poses_np.to_torch().to_var", "noisy_t.cuda.cuda", "get_noisy_poses_np.to_torch"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_np", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.to_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.to_torch"], ["", "def", "get_noisy_poses_torch", "(", "clean_poses", ",", "position_variance", ",", "orientation_variance", ",", "cuda", "=", "False", ",", "cuda_device", "=", "None", ")", ":", "\n", "    ", "poses_np", "=", "clean_poses", ".", "numpy", "(", ")", "\n", "noisy_np", "=", "get_noisy_poses_np", "(", "poses_np", ",", "position_variance", ",", "orientation_variance", ")", "\n", "noisy_t", "=", "noisy_np", ".", "to_torch", "(", ")", ".", "to_var", "(", ")", "\n", "if", "cuda", ":", "\n", "        ", "noisy_t", "=", "noisy_t", ".", "cuda", "(", "cuda_device", ")", "\n", "", "return", "noisy_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_pose_noise_np": [[111, 123], ["range", "print", "range", "all_env_poses.append", "numpy.random.normal", "numpy.random.normal", "numpy.concatenate", "env_poses.append", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_pose_noise_np", "(", "numenvs", ",", "poses_per_env", ",", "pos_variance", ",", "rot_variance", ")", ":", "\n", "    ", "all_env_poses", "=", "[", "]", "\n", "for", "env_id", "in", "range", "(", "numenvs", ")", ":", "\n", "        ", "env_poses", "=", "[", "]", "\n", "print", "(", "\"env: \"", ",", "env_id", ")", "\n", "for", "i", "in", "range", "(", "poses_per_env", ")", ":", "\n", "            ", "pos_eta", "=", "np", ".", "random", ".", "normal", "(", "[", "0", "]", "*", "3", ",", "[", "pos_variance", "]", "*", "3", ")", "\n", "rot_eta", "=", "np", ".", "random", ".", "normal", "(", "[", "0", "]", "*", "3", ",", "[", "rot_variance", "]", "*", "3", ")", "\n", "noise", "=", "np", ".", "concatenate", "(", "[", "pos_eta", ",", "rot_eta", "]", ")", "\n", "env_poses", ".", "append", "(", "noise", ")", "\n", "", "all_env_poses", ".", "append", "(", "np", ".", "asarray", "(", "env_poses", ")", ")", "\n", "", "return", "all_env_poses", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.draw_null_landmark_pos": [[58, 72], ["numpy.asarray", "numpy.random.uniform", "parameters.get_current_parameters", "min", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["def", "draw_null_landmark_pos", "(", "landmark_positions", ")", ":", "\n", "    ", "\"\"\"\n    Given an array of real landmark positions, finds a place far enough away from all\n    other landmarks\n    :param landmark_positions:\n    :return:\n    \"\"\"", "\n", "world_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", "\n", "dst_t", "=", "world_size", "*", "0.2", "\n", "pos_good", "=", "False", "\n", "while", "not", "pos_good", ":", "\n", "        ", "new_pos", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "world_size", ",", "2", ")", "\n", "pos_good", "=", "min", "(", "[", "np", ".", "linalg", ".", "norm", "(", "new_pos", "-", "p", "[", ":", "2", "]", ")", "for", "p", "in", "landmark_positions", "]", ")", ">", "dst_t", "\n", "", "return", "np", ".", "asarray", "(", "[", "new_pos", "[", "0", "]", ",", "new_pos", "[", "1", "]", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim": [[74, 98], ["data_io.units.UnrealUnits", "enumerate", "env_config.definitions.landmarks.get_landmark_name_to_index", "numpy.asarray", "numpy.zeros", "data_io.units.UnrealUnits.pos2d_to_as", "landmark_names.append", "landmark_positions.append", "aux_data_providers.draw_null_landmark_pos", "landmark_names.append", "landmark_positions.append", "env_config.definitions.landmarks.get_null_landmark_name"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.draw_null_landmark_pos", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_null_landmark_name"], ["", "def", "get_landmark_locations_airsim", "(", "config_json", ")", ":", "\n", "    ", "landmark_names", "=", "[", "]", "\n", "landmark_positions", "=", "[", "]", "\n", "units", "=", "UnrealUnits", "(", ")", "\n", "for", "i", ",", "landmarkName", "in", "enumerate", "(", "config_json", "[", "\"landmarkName\"", "]", ")", ":", "\n", "        ", "x_pos", "=", "config_json", "[", "\"xPos\"", "]", "[", "i", "]", "\n", "y_pos", "=", "config_json", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "pt", "=", "np", ".", "asarray", "(", "[", "x_pos", ",", "y_pos", "]", ")", "\n", "pt_as", "=", "np", ".", "zeros", "(", "3", ")", "\n", "pt_as", "[", "0", ":", "2", "]", "=", "units", ".", "pos2d_to_as", "(", "pt", ")", "\n", "# TODO: Grab this from the parameter server", "\n", "pt_as", "[", "2", "]", "=", "0.0", "if", "LANDMARKS_ON_FLOOR", "else", "-", "1.0", "# Landmarks assumed to be floating 1m above ground.", "\n", "landmark_names", ".", "append", "(", "landmarkName", ")", "\n", "landmark_positions", ".", "append", "(", "pt_as", ")", "\n", "\n", "", "if", "ADD_NULL_LANDMARK", ":", "\n", "        ", "null_pos", "=", "draw_null_landmark_pos", "(", "landmark_positions", ")", "\n", "landmark_names", ".", "append", "(", "get_null_landmark_name", "(", ")", ")", "\n", "landmark_positions", ".", "append", "(", "null_pos", ")", "\n", "\n", "", "name2idx", "=", "get_landmark_name_to_index", "(", "add_empty", "=", "ADD_NULL_LANDMARK", ")", "\n", "landmark_indices", "=", "[", "name2idx", "[", "name", "]", "for", "name", "in", "landmark_names", "]", "\n", "\n", "return", "landmark_names", ",", "landmark_indices", ",", "landmark_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_mentioned_landmarks_nl": [[100, 122], ["data_io.instructions.load_landmark_alignments", "data_io.instructions.split_instruction", "env_config.definitions.landmarks.get_landmark_name_to_index", "data_io.instructions.words_to_terms", "set", "list", "data_io.instructions.clean_instruction", "list.add"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_landmark_alignments", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.split_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.words_to_terms", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction"], ["", "def", "get_mentioned_landmarks_nl", "(", "str_instruction", ")", ":", "\n", "    ", "thesaurus", "=", "load_landmark_alignments", "(", ")", "\n", "if", "thesaurus", "is", "None", ":", "\n", "        ", "return", "[", "]", ",", "[", "]", "\n", "", "split_instr", "=", "split_instruction", "(", "clean_instruction", "(", "str_instruction", ")", ")", "\n", "word2term", "=", "thesaurus", "[", "\"word2term\"", "]", "\n", "term_groundings", "=", "thesaurus", "[", "\"term_groundings\"", "]", "\n", "lm_name2index", "=", "get_landmark_name_to_index", "(", ")", "\n", "\n", "# Map each word in the instruction to it's corresponding term:", "\n", "split_instr_terms", "=", "words_to_terms", "(", "split_instr", ",", "word2term", ")", "\n", "\n", "mentioned_landmark_names", "=", "set", "(", ")", "\n", "\n", "# For each term, find all the landmarks that have been mentioned", "\n", "for", "term", "in", "split_instr_terms", ":", "\n", "        ", "for", "landmark_name", "in", "term_groundings", "[", "term", "]", "[", "\"landmarks\"", "]", ":", "\n", "            ", "mentioned_landmark_names", ".", "add", "(", "landmark_name", ")", "\n", "\n", "", "", "mentioned_landmark_names", "=", "list", "(", "mentioned_landmark_names", ")", "\n", "mentioned_landmark_indices", "=", "[", "lm_name2index", "[", "name", "]", "for", "name", "in", "mentioned_landmark_names", "]", "\n", "return", "mentioned_landmark_names", ",", "mentioned_landmark_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.any_string_is_substring": [[124, 130], ["str.find"], "function", ["None"], ["", "def", "any_string_is_substring", "(", "stringlist", ",", "str", ")", ":", "\n", "    ", "appears", "=", "False", "\n", "for", "referent", "in", "stringlist", ":", "\n", "        ", "if", "str", ".", "find", "(", "referent", ")", ">", "0", ":", "\n", "            ", "appears", "=", "True", "\n", "", "", "return", "appears", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_mentioned_landmarks_tplt": [[132, 141], ["set", "env_config.definitions.nlp_templates.N_LANDMARKS.items", "list", "env_config.definitions.landmarks.get_landmark_name_to_index", "aux_data_providers.any_string_is_substring", "list.add"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.any_string_is_substring"], ["", "def", "get_mentioned_landmarks_tplt", "(", "str_instruction", ")", ":", "\n", "    ", "mentioned_names", "=", "set", "(", ")", "\n", "for", "landmark_name", ",", "referents", "in", "N_LANDMARKS", ".", "items", "(", ")", ":", "\n", "        ", "if", "any_string_is_substring", "(", "referents", ",", "str_instruction", ")", ":", "\n", "            ", "mentioned_names", ".", "add", "(", "landmark_name", ")", "\n", "", "", "mentioned_names", "=", "list", "(", "mentioned_names", ")", "\n", "lm_name2index", "=", "get_landmark_name_to_index", "(", ")", "\n", "mentioned_indices", "=", "[", "lm_name2index", "[", "name", "]", "for", "name", "in", "mentioned_names", "]", "\n", "return", "mentioned_names", ",", "mentioned_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_mentioned_landmark_side_tplt": [[143, 154], ["data_io.env.load_template", "env_config.definitions.landmarks.get_landmark_name_to_index", "env_config.definitions.nlp_templates.get_side_name2idx"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.get_side_name2idx"], ["", "def", "get_mentioned_landmark_side_tplt", "(", "env_id", ")", ":", "\n", "    ", "template", "=", "load_template", "(", "env_id", ")", "\n", "mentioned_lm", "=", "template", "[", "\"landmark1\"", "]", "\n", "lm_name2index", "=", "get_landmark_name_to_index", "(", ")", "\n", "mentioned_index", "=", "lm_name2index", "[", "mentioned_lm", "]", "\n", "\n", "mentioned_side", "=", "template", "[", "\"side\"", "]", "\n", "side_name2index", "=", "get_side_name2idx", "(", ")", "\n", "side_idx", "=", "side_name2index", "[", "mentioned_side", "]", "\n", "\n", "return", "mentioned_lm", ",", "mentioned_index", ",", "mentioned_side", ",", "side_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_mentioned_sides_tplt": [[156, 163], ["enumerate", "sorted", "aux_data_providers.any_string_is_substring", "env_config.definitions.nlp_templates.N_SIDES.keys"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.any_string_is_substring"], ["", "def", "get_mentioned_sides_tplt", "(", "str_instruction", ")", ":", "\n", "\n", "    ", "for", "i", ",", "side_name", "in", "enumerate", "(", "sorted", "(", "N_SIDES", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "referents", "=", "N_SIDES", "[", "side_name", "]", "\n", "if", "any_string_is_substring", "(", "referents", ",", "str_instruction", ")", ":", "\n", "            ", "return", "side_name", ",", "i", "\n", "", "", "return", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_image_env": [[165, 185], ["data_io.env.load_env_img", "learning.inputs.vision.standardize_image", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "numpy.zeros", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image"], ["", "def", "get_top_down_image_env", "(", "env_id", ",", "map_w", ",", "map_h", ",", "img_w", ",", "img_h", ")", ":", "\n", "    ", "\"\"\"\n    To be called externally to retrieve a top-down environment image oriented with the start of the requested segment\n    :param env_id:  environment id\n    :return:\n    \"\"\"", "\n", "env_image_in", "=", "load_env_img", "(", "env_id", ",", "map_w", ",", "map_h", ")", "\n", "# If we need to return a bigger image resolution than we loaded", "\n", "if", "map_w", "!=", "img_w", "or", "map_h", "!=", "img_h", ":", "\n", "        ", "env_image", "=", "np", ".", "zeros", "(", "[", "img_h", ",", "img_w", ",", "env_image_in", ".", "shape", "[", "2", "]", "]", ")", "\n", "env_image", "[", "0", ":", "map_h", ",", "0", ":", "map_w", ",", ":", "]", "=", "env_image_in", "\n", "", "else", ":", "\n", "        ", "env_image", "=", "env_image_in", "\n", "#path_img = cf_to_img(path, [env_image.shape[0], env_image.shape[1]])", "\n", "#self.plot_path_on_img(env_image, path_img)", "\n", "", "env_image", "=", "standardize_image", "(", "env_image", ")", "\n", "env_img_t", "=", "torch", ".", "from_numpy", "(", "env_image", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "#presenter = Presenter()", "\n", "#presenter.show_image(env_img_t[0], \"data_img\", torch=True, scale=1)", "\n", "return", "env_img_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_ego": [[187, 232], ["data_io.env.load_path", "learning.get_start_pt_and_yaw", "learning.get_affine_matrix", "numpy.zeros().astype", "transformations.cf_to_img", "learning.plot_path_on_img", "learning.apply_affine", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "learning.inputs.vision.standardize_2d_prob_dist", "learning.inputs.vision.standardize_2d_prob_dist", "numpy.concatenate", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "numpy.array", "len", "learning.plot_dot_on_img", "cv2.imshow", "cv2.imshow", "cv2.waitKey", "numpy.zeros", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_start_pt_and_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_affine_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_dot_on_img"], ["", "def", "get_top_down_ground_truth_static_ego", "(", "env_id", ",", "start_idx", ",", "img_w", ",", "img_h", ",", "map_w", ",", "map_h", ")", ":", "\n", "    ", "\"\"\"\n    Returns the ground-truth label oriented in the global map frame\n    :param env_id:\n    :param start_idx:\n    :param img_w:\n    :param img_h:\n    :param map_w:\n    :param map_h:\n    :return:\n    \"\"\"", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "#instruction_segments = [self.all_instr[env_id][set_idx][\"instructions\"][seg_idx]]", "\n", "\n", "start_pt", ",", "dir_yaw", "=", "tdd", ".", "get_start_pt_and_yaw", "(", "path", ",", "start_idx", ",", "map_w", ",", "map_h", ",", "0", ")", "\n", "affine", "=", "tdd", ".", "get_affine_matrix", "(", "start_pt", ",", "dir_yaw", ",", "img_w", ",", "img_h", ")", "\n", "\n", "seg_labels", "=", "np", ".", "zeros", "(", "[", "img_w", ",", "img_h", ",", "2", "]", ")", ".", "astype", "(", "float", ")", "\n", "path_in_img", "=", "cf_to_img", "(", "path", ",", "np", ".", "array", "(", "[", "map_w", ",", "map_h", "]", ")", ")", "\n", "\n", "#gauss_sigma = map_w / 96", "\n", "gauss_sigma", "=", "map_w", "/", "32", "\n", "\n", "seg_labels", "[", ":", ",", ":", ",", "0", "]", "=", "tdd", ".", "plot_path_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "0", "]", ",", "path_in_img", ")", "\n", "if", "len", "(", "path_in_img", ")", ">", "1", ":", "\n", "        ", "seg_labels", "[", ":", ",", ":", ",", "1", "]", "=", "tdd", ".", "plot_dot_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "1", "]", ",", "path_in_img", "[", "-", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "", "seg_labels_rot", "=", "tdd", ".", "apply_affine", "(", "seg_labels", ",", "affine", ",", "img_w", ",", "img_h", ")", "\n", "seg_labels_rot", "[", ":", ",", ":", ",", "0", "]", "=", "gaussian_filter", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "0", "]", ",", "gauss_sigma", ")", "\n", "seg_labels_rot", "[", ":", ",", ":", ",", "1", "]", "=", "gaussian_filter", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "DEBUG", "=", "True", "\n", "if", "DEBUG", ":", "\n", "        ", "cv2", ".", "imshow", "(", "\"l_traj\"", ",", "seg_labels_rot", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "cv2", ".", "imshow", "(", "\"l_endpt\"", ",", "seg_labels_rot", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "# Standardize both channels separately (each has mean zero, unit variance)", "\n", "", "seg_labels_path", "=", "standardize_2d_prob_dist", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "seg_labels_endpt", "=", "standardize_2d_prob_dist", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "\n", "seg_labels_rot", "=", "np", ".", "concatenate", "(", "(", "seg_labels_path", ",", "seg_labels_endpt", ")", ",", "axis", "=", "0", ")", "\n", "\n", "seg_labels_t", "=", "torch", ".", "from_numpy", "(", "seg_labels_rot", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "return", "seg_labels_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.resolve_and_get_ground_truth_static_global": [[234, 240], ["data_io.instructions.get_instruction_segment", "aux_data_providers.get_top_down_ground_truth_static_global"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global"], ["", "def", "resolve_and_get_ground_truth_static_global", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "map_size_px", ",", "world_size_px", ")", ":", "\n", "    ", "seg", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "start_idx", "=", "seg", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "seg", "[", "\"end_idx\"", "]", "\n", "return", "get_top_down_ground_truth_static_global", "(", "env_id", ",", "start_idx", ",", "end_idx", ",", "\n", "map_size_px", ",", "map_size_px", ",", "world_size_px", ",", "world_size_px", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global": [[242, 282], ["data_io.env.load_path", "numpy.zeros().astype", "transformations.cf_to_img", "learning.plot_path_on_img", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "learning.inputs.vision.standardize_2d_prob_dist", "learning.inputs.vision.standardize_2d_prob_dist", "numpy.concatenate", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "numpy.array", "len", "learning.plot_dot_on_img", "cv2.imshow", "cv2.imshow", "cv2.waitKey", "numpy.zeros", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_dot_on_img"], ["", "def", "get_top_down_ground_truth_static_global", "(", "env_id", ",", "start_idx", ",", "end_idx", ",", "img_w", ",", "img_h", ",", "map_w", ",", "map_h", ")", ":", "\n", "    ", "\"\"\"\n    Returns the ground-truth label oriented in the global map frame\n    :param env_id:\n    :param start_idx:\n    :param img_w:\n    :param img_h:\n    :param map_w:\n    :param map_h:\n    :return:\n    \"\"\"", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "path", "=", "path", "[", "start_idx", ":", "end_idx", "]", "\n", "#instruction_segments = [self.all_instr[env_id][set_idx][\"instructions\"][seg_idx]]", "\n", "\n", "seg_labels", "=", "np", ".", "zeros", "(", "[", "img_w", ",", "img_h", ",", "2", "]", ")", ".", "astype", "(", "float", ")", "\n", "path_in_img", "=", "cf_to_img", "(", "path", ",", "np", ".", "array", "(", "[", "map_w", ",", "map_h", "]", ")", ")", "\n", "gauss_sigma", "=", "map_w", "/", "96", "\n", "\n", "seg_labels", "[", ":", ",", ":", ",", "0", "]", "=", "tdd", ".", "plot_path_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "0", "]", ",", "path_in_img", ")", "\n", "if", "len", "(", "path_in_img", ")", ">", "1", ":", "\n", "        ", "seg_labels", "[", ":", ",", ":", ",", "1", "]", "=", "tdd", ".", "plot_dot_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "1", "]", ",", "path_in_img", "[", "-", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "", "seg_labels", "[", ":", ",", ":", ",", "0", "]", "=", "gaussian_filter", "(", "seg_labels", "[", ":", ",", ":", ",", "0", "]", ",", "gauss_sigma", ")", "\n", "seg_labels", "[", ":", ",", ":", ",", "1", "]", "=", "gaussian_filter", "(", "seg_labels", "[", ":", ",", ":", ",", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "# Standardize both channels separately (each has mean zero, unit variance)", "\n", "seg_labels_path", "=", "standardize_2d_prob_dist", "(", "seg_labels", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "seg_labels_endpt", "=", "standardize_2d_prob_dist", "(", "seg_labels", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "\n", "DEBUG", "=", "False", "\n", "if", "DEBUG", ":", "\n", "        ", "cv2", ".", "imshow", "(", "\"l_traj\"", ",", "seg_labels_path", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "cv2", ".", "imshow", "(", "\"l_endpt\"", ",", "seg_labels_endpt", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "cv2", ".", "waitKey", "(", "10", ")", "\n", "\n", "", "seg_labels", "=", "np", ".", "concatenate", "(", "(", "seg_labels_path", ",", "seg_labels_endpt", ")", ",", "axis", "=", "0", ")", "\n", "\n", "seg_labels_t", "=", "torch", ".", "from_numpy", "(", "seg_labels", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "return", "seg_labels_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_dynamic_global": [[284, 349], ["utils.simple_profiler.SimpleProfiler", "data_io.env.load_path", "utils.simple_profiler.SimpleProfiler.tick", "data_io.units.UnrealUnits", "data_io.units.UnrealUnits.pos3d_from_as", "learning.datasets.dynamic_ground_truth.get_dynamic_ground_truth_v2", "utils.simple_profiler.SimpleProfiler.tick", "numpy.zeros().astype", "transformations.cf_to_img", "learning.plot_path_on_img", "utils.simple_profiler.SimpleProfiler.tick", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "learning.inputs.vision.standardize_2d_prob_dist", "learning.inputs.vision.standardize_2d_prob_dist", "utils.simple_profiler.SimpleProfiler.tick", "numpy.concatenate", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.print_stats", "numpy.array", "len", "learning.plot_dot_on_img", "transformations.cf_to_img", "numpy.zeros", "learning.plot_path_on_img", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "numpy.zeros", "numpy.asarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos3d_from_as", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dynamic_ground_truth.get_dynamic_ground_truth_v2", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_dot_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "get_top_down_ground_truth_dynamic_global", "(", "env_id", ",", "start_idx", ",", "end_idx", ",", "drone_pos_as", ",", "img_w", ",", "img_h", ",", "map_w", ",", "map_h", ")", ":", "\n", "    ", "\"\"\"\n    Returns the ground-truth label oriented in the global map frame\n    :param env_id:\n    :param start_idx:\n    :param img_w:\n    :param img_h:\n    :param map_w:\n    :param map_h:\n    :return:\n    \"\"\"", "\n", "PROFILE", "=", "False", "\n", "prof", "=", "SimpleProfiler", "(", "False", ",", "PROFILE", ")", "\n", "path", "=", "load_path", "(", "env_id", ",", "anno", "=", "True", ")", "\n", "#print(len(path), start_idx, end_idx)", "\n", "\n", "path", "=", "path", "[", "start_idx", ":", "end_idx", "]", "\n", "#instruction_segments = [self.all_instr[env_id][set_idx][\"instructions\"][seg_idx]]", "\n", "\n", "prof", ".", "tick", "(", "\"load_path\"", ")", "\n", "units", "=", "UnrealUnits", "(", "1.0", ")", "\n", "drone_pos_cf", "=", "units", ".", "pos3d_from_as", "(", "drone_pos_as", ")", "\n", "\n", "#print(\"Dynamic ground truth for \", env_id, start_idx, end_idx)", "\n", "gt_dynamic", "=", "get_dynamic_ground_truth_v2", "(", "path", ",", "drone_pos_cf", "[", ":", "2", "]", ")", "\n", "#Presenter().plot_path(env_id, [path[start_idx:end_idx], gt_dynamic])", "\n", "\n", "prof", ".", "tick", "(", "\"gen_gt_path\"", ")", "\n", "\n", "seg_labels", "=", "np", ".", "zeros", "(", "[", "img_w", ",", "img_h", ",", "2", "]", ")", ".", "astype", "(", "float", ")", "\n", "path_in_img", "=", "cf_to_img", "(", "gt_dynamic", ",", "np", ".", "array", "(", "[", "map_w", ",", "map_h", "]", ")", ")", "\n", "gauss_sigma", "=", "map_w", "/", "96", "\n", "\n", "seg_labels", "[", ":", ",", ":", ",", "0", "]", "=", "tdd", ".", "plot_path_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "0", "]", ",", "path_in_img", ")", "\n", "if", "len", "(", "path_in_img", ")", ">", "1", ":", "\n", "        ", "seg_labels", "[", ":", ",", ":", ",", "1", "]", "=", "tdd", ".", "plot_dot_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "1", "]", ",", "path_in_img", "[", "-", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "", "prof", ".", "tick", "(", "\"plot_path\"", ")", "\n", "\n", "seg_labels", "[", ":", ",", ":", ",", "0", "]", "=", "gaussian_filter", "(", "seg_labels", "[", ":", ",", ":", ",", "0", "]", ",", "gauss_sigma", ")", "\n", "seg_labels", "[", ":", ",", ":", ",", "1", "]", "=", "gaussian_filter", "(", "seg_labels", "[", ":", ",", ":", ",", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "# Standardize both channels separately (each has mean zero, unit variance)", "\n", "seg_labels_path", "=", "standardize_2d_prob_dist", "(", "seg_labels", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "seg_labels_endpt", "=", "standardize_2d_prob_dist", "(", "seg_labels", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "\n", "prof", ".", "tick", "(", "\"process_img\"", ")", "\n", "\n", "DEBUG", "=", "False", "\n", "if", "DEBUG", ":", "\n", "        ", "gt_path_in_img", "=", "cf_to_img", "(", "path", ",", "np", ".", "asarray", "(", "[", "map_w", ",", "map_h", "]", ")", ")", "\n", "dbg_labels_gt", "=", "np", ".", "zeros", "(", "[", "img_w", ",", "img_h", ",", "1", "]", ")", "\n", "dbg_labels_gt", "[", ":", ",", ":", ",", "0", "]", "=", "tdd", ".", "plot_path_on_img", "(", "dbg_labels_gt", "[", ":", ",", ":", ",", "0", "]", ",", "gt_path_in_img", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "dbg_labels_gt", ",", "\"dbg\"", ",", "torch", "=", "False", ",", "waitkey", "=", "10", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "torch", ".", "from_numpy", "(", "seg_labels_path", ")", ",", "\"l_path\"", ",", "torch", "=", "True", ",", "waitkey", "=", "10", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "torch", ".", "from_numpy", "(", "seg_labels_endpt", ")", ",", "\"l_endp\"", ",", "torch", "=", "True", ",", "waitkey", "=", "100", ",", "scale", "=", "4", ")", "\n", "\n", "", "seg_labels", "=", "np", ".", "concatenate", "(", "(", "seg_labels_path", ",", "seg_labels_endpt", ")", ",", "axis", "=", "0", ")", "\n", "\n", "seg_labels_t", "=", "torch", ".", "from_numpy", "(", "seg_labels", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "prof", ".", "tick", "(", "\"prep_out\"", ")", "\n", "prof", ".", "print_stats", "(", ")", "\n", "\n", "return", "seg_labels_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.__get_goal_location_airsim": [[351, 359], ["data_io.units.UnrealUnits", "numpy.asarray", "numpy.zeros", "data_io.units.UnrealUnits.pos2d_to_as"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.units.UnrealUnits.pos2d_to_as"], ["", "def", "__get_goal_location_airsim", "(", "goal", ")", ":", "\n", "    ", "units", "=", "UnrealUnits", "(", ")", "\n", "goal_x", "=", "goal", "[", "0", "]", "\n", "goal_y", "=", "goal", "[", "1", "]", "\n", "pt", "=", "np", ".", "asarray", "(", "[", "goal_x", ",", "goal_y", "]", ")", "\n", "pt_as", "=", "np", ".", "zeros", "(", "2", ")", "\n", "pt_as", "[", "0", ":", "2", "]", "=", "units", ".", "pos2d_to_as", "(", "pt", ")", "\n", "return", "pt_as", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_lm_pos_lm_indices_fpv": [[361, 440], ["data_io.env.load_env_config", "env_config.definitions.landmarks.get_landmark_name_to_index", "aux_data_providers.get_landmark_locations_airsim", "learning.models.semantic_map.pinhole_camera_inv.PinholeCameraProjection", "len", "range", "parameters.get_current_parameters().get", "parameters.get_current_parameters().get().get", "lm_pos_fpv.append", "lm_pos_map.append", "lm_indices.append", "lm_mentioned.append", "[].get_cam_pos_3d", "[].get_cam_rot", "aux_data_providers.get_mentioned_landmarks_nl", "enumerate", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "parameters.get_current_parameters", "parameters.get_current_parameters().get", "learning.models.semantic_map.pinhole_camera_inv.PinholeCameraProjection.world_point_to_image", "torch.from_numpy().float.append", "torch.from_numpy().float.append", "torch.from_numpy().long.append", "torch.from_numpy().long.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "parameters.get_current_parameters", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_cam_pos_3d", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_cam_rot", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_mentioned_landmarks_nl", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "provider_lm_pos_lm_indices_fpv", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    Data provider that gives the positions and indices of all landmarks visible in the FPV image.\n    :param segment_data: segment dataset for which to provide data\n    :return: (\"lm_pos\", lm_pos) - lm_pos is a list (over timesteps) of lists (over landmarks visible in image) of the\n                landmark locations in image pixel coordinates\n             (\"lm_indices\", lm_indices) - lm_indices is a list (over timesteps) of lists (over landmarks visible in image)\n                of the landmark indices for every landmark included in lm_pos. These are the landmark classifier labels\n    \"\"\"", "\n", "env_id", "=", "segment_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"env_id\"", "]", "\n", "domain", "=", "segment_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"domain\"", "]", "\n", "\n", "#if INSTRUCTIONS_FROM_FILE:", "\n", "#    env_instr = load_instructions(env_id)", "\n", "\n", "conf_json", "=", "load_env_config", "(", "env_id", ")", "\n", "all_landmark_indices", "=", "get_landmark_name_to_index", "(", ")", "\n", "landmark_names", ",", "landmark_indices", ",", "landmark_pos", "=", "get_landmark_locations_airsim", "(", "conf_json", ")", "\n", "\n", "params", "=", "P", ".", "get_current_parameters", "(", ")", ".", "get", "(", "\"Model\"", ")", "or", "P", ".", "get_current_parameters", "(", ")", ".", "get", "(", "\"ModelPVN\"", ")", ".", "get", "(", "\"Stage1\"", ")", "\n", "projector", "=", "PinholeCameraProjection", "(", "\n", "map_size_px", "=", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "params", "[", "\"world_size_m\"", "]", ",", "\n", "img_x", "=", "params", "[", "\"img_w\"", "]", ",", "\n", "img_y", "=", "params", "[", "\"img_h\"", "]", ",", "\n", "cam_fov", "=", "params", "[", "\"cam_h_fov\"", "]", ",", "\n", "domain", "=", "domain", ",", "\n", "use_depth", "=", "False", "\n", ")", "\n", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "\n", "lm_pos_fpv", "=", "[", "]", "\n", "lm_indices", "=", "[", "]", "\n", "lm_mentioned", "=", "[", "]", "\n", "lm_pos_map", "=", "[", "]", "\n", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "        ", "t_lm_pos_fpv", "=", "[", "]", "\n", "t_lm_indices", "=", "[", "]", "\n", "t_lm_mentioned", "=", "[", "]", "\n", "t_lm_pos_map", "=", "[", "]", "\n", "\n", "if", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", "is", "not", "None", ":", "\n", "            ", "cam_pos", "=", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", ".", "get_cam_pos_3d", "(", ")", "\n", "cam_rot", "=", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", ".", "get_cam_rot", "(", ")", "\n", "instruction_str", "=", "segment_data", "[", "timestep", "]", "[", "\"instruction\"", "]", "\n", "mentioned_landmark_names", ",", "mentioned_landmark_indices", "=", "get_mentioned_landmarks_nl", "(", "instruction_str", ")", "\n", "\n", "for", "i", ",", "landmark_in_world", "in", "enumerate", "(", "landmark_pos", ")", ":", "\n", "                ", "landmark_idx", "=", "landmark_indices", "[", "i", "]", "\n", "landmark_in_img", ",", "landmark_in_cam", ",", "status", "=", "projector", ".", "world_point_to_image", "(", "cam_pos", ",", "cam_rot", ",", "landmark_in_world", ")", "\n", "this_lm_mentioned", "=", "1", "if", "landmark_idx", "in", "mentioned_landmark_indices", "else", "0", "\n", "\n", "# This is None if the landmark is behind the camera.", "\n", "if", "landmark_in_img", "is", "not", "None", ":", "\n", "# presenter.save_image(images[timestep], name=\"tmp.png\", torch=True, draw_point=landmark_in_img)", "\n", "                    ", "t_lm_pos_fpv", ".", "append", "(", "landmark_in_img", "[", "0", ":", "2", "]", ")", "\n", "t_lm_pos_map", ".", "append", "(", "landmark_in_world", "[", "0", ":", "2", "]", ")", "\n", "t_lm_indices", ".", "append", "(", "landmark_idx", ")", "\n", "t_lm_mentioned", ".", "append", "(", "this_lm_mentioned", ")", "\n", "\n", "", "", "", "if", "len", "(", "t_lm_pos_fpv", ")", ">", "0", ":", "\n", "            ", "t_lm_pos_fpv", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "t_lm_pos_fpv", ")", ")", ".", "float", "(", ")", "\n", "t_lm_pos_map", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "t_lm_pos_map", ")", ")", ".", "float", "(", ")", "\n", "t_lm_indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "t_lm_indices", ")", ")", ".", "long", "(", ")", "\n", "t_lm_mentioned", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "t_lm_mentioned", ")", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "t_lm_pos_fpv", "=", "None", "\n", "t_lm_pos_map", "=", "None", "\n", "t_lm_indices", "=", "None", "\n", "t_lm_mentioned", "=", "None", "\n", "\n", "", "lm_pos_fpv", ".", "append", "(", "t_lm_pos_fpv", ")", "\n", "lm_pos_map", ".", "append", "(", "t_lm_pos_map", ")", "\n", "lm_indices", ".", "append", "(", "t_lm_indices", ")", "\n", "lm_mentioned", ".", "append", "(", "t_lm_mentioned", ")", "\n", "\n", "", "return", "[", "(", "\"lm_pos_fpv\"", ",", "lm_pos_fpv", ")", ",", "(", "\"lm_indices\"", ",", "lm_indices", ")", ",", "(", "\"lm_mentioned\"", ",", "lm_mentioned", ")", ",", "(", "\"lm_pos_map\"", ",", "lm_pos_map", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_goal_pos_map": [[442, 480], ["data_io.env.load_path", "len", "range", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "data_io.instructions.get_instruction_segment", "aux_data_providers.__get_goal_location_airsim", "np.asarray.append", "np.asarray.append", "len", "torch.from_numpy", "torch.from_numpy", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.__get_goal_location_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "provider_goal_pos_map", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n        Data provider that gives the positions and indices of all landmarks visible in the FPV image.\n        :param segment_data: segment dataset for which to provide data\n        :return: (\"lm_pos\", lm_pos) - lm_pos is a list (over timesteps) of lists (over landmarks visible in image) of the\n                    landmark locations in image pixel coordinates\n                 (\"lm_indices\", lm_indices) - lm_indices is a list (over timesteps) of lists (over landmarks visible in image)\n                    of the landmark indices for every landmark included in lm_pos. These are the landmark classifier labels\n        \"\"\"", "\n", "\n", "env_id", "=", "segment_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"env_id\"", "]", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "\n", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "\n", "goal_loc", "=", "[", "]", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "        ", "if", "segment_data", "[", "timestep", "]", "is", "None", ":", "\n", "            ", "goal_loc", ".", "append", "(", "np", ".", "asarray", "(", "[", "0.0", ",", "0.0", "]", ")", ")", "\n", "continue", "\n", "\n", "", "set_idx", "=", "segment_data", "[", "timestep", "]", "[", "\"metadata\"", "]", "[", "\"set_idx\"", "]", "\n", "seg_idx", "=", "segment_data", "[", "timestep", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "\n", "seg", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "end_idx", "=", "seg", "[", "\"end_idx\"", "]", "\n", "\n", "if", "end_idx", "<", "len", "(", "path", ")", ":", "\n", "            ", "end_pt", "=", "path", "[", "end_idx", "]", "\n", "", "else", ":", "\n", "            ", "end_pt", "=", "path", "[", "-", "1", "]", "\n", "", "goal_as", "=", "__get_goal_location_airsim", "(", "end_pt", ")", "\n", "goal_loc", ".", "append", "(", "goal_as", ")", "\n", "\n", "", "goal_loc", "=", "np", ".", "asarray", "(", "goal_loc", ")", "\n", "goal_loc_t", "=", "torch", ".", "from_numpy", "(", "goal_loc", ")", ".", "float", "(", ")", "\n", "\n", "return", "[", "(", "\"goal_loc\"", ",", "goal_loc_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_mentioned_lang_template": [[482, 502], ["len", "aux_data_providers.get_mentioned_landmark_side_tplt", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "numpy.asarray", "all_mentioned_lm_indices.append", "all_mentioned_side_indices.append", "all_mentioned_lm_indices.append", "all_mentioned_side_indices.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_mentioned_landmark_side_tplt", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "provider_mentioned_lang_template", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "all_mentioned_lm_indices", "=", "[", "]", "\n", "all_mentioned_side_indices", "=", "[", "]", "\n", "\n", "lm_name", ",", "lm_idx", ",", "side_name", ",", "side_idx", "=", "get_mentioned_landmark_side_tplt", "(", "segment_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"env_id\"", "]", ")", "\n", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "        ", "if", "segment_data", "[", "timestep", "]", "is", "not", "None", ":", "\n", "# TODO: for natural language, we'll use the NL functions above, instead of the tlpt ones", "\n", "            ", "all_mentioned_lm_indices", ".", "append", "(", "lm_idx", ")", "\n", "all_mentioned_side_indices", ".", "append", "(", "side_idx", ")", "\n", "", "else", ":", "\n", "            ", "all_mentioned_lm_indices", ".", "append", "(", "0", ")", "\n", "all_mentioned_side_indices", ".", "append", "(", "0", ")", "\n", "\n", "", "", "amlit", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "all_mentioned_lm_indices", ")", ")", "\n", "amsit", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "all_mentioned_side_indices", ")", ")", "\n", "\n", "return", "[", "(", "\"lm_mentioned_tplt\"", ",", "amlit", ")", ",", "(", "\"side_mentioned_tplt\"", ",", "amsit", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_trajectory_ground_truth": [[504, 553], ["len", "learning.datasets.masking.get_obs_mask_every_n_and_segstart", "learning.datasets.masking.get_obs_mask_segstart", "range", "torch.stack", "torch.stack", "parameters.get_current_parameters", "data_io.instructions.get_instruction_segment", "torch.stack.append", "aux_data_providers.get_top_down_ground_truth_dynamic_global", "aux_data_providers.get_top_down_ground_truth_dynamic_global", "aux_data_providers.get_top_down_ground_truth_static_global", "Exception"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.masking.get_obs_mask_every_n_and_segstart", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.masking.get_obs_mask_segstart", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_dynamic_global", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_dynamic_global", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global"], ["", "def", "provider_trajectory_ground_truth", "(", "segment_data", ",", "data", ",", "kind", "=", "\"static\"", ")", ":", "\n", "# For now, use only the first label", "\n", "    ", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "env_id", "=", "segment_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"env_id\"", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "# TODO: This could be more general than PVN model, but for now it's really not gonna be", "\n", "model_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "\n", "plan_every_n_steps", "=", "model_params", "[", "\"plan_every_n_steps\"", "]", "\n", "#m_size = model_params[\"local_map_size\"]", "\n", "m_size", "=", "model_params", "[", "\"global_map_size\"", "]", "\n", "w_size", "=", "model_params", "[", "\"world_size_px\"", "]", "\n", "\n", "# True for planning timesteps, False for the other timesteps", "\n", "obs_mask", "=", "get_obs_mask_every_n_and_segstart", "(", "plan_every_n_steps", ",", "segment_data", ")", "\n", "firstseg_mask", "=", "get_obs_mask_segstart", "(", "segment_data", ")", "\n", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "# TODO: Shouldn't do this for every single timestep, otherwise it takes really long!", "\n", "        ", "if", "segment_data", "[", "timestep", "]", "is", "not", "None", "and", "obs_mask", "[", "timestep", "]", ":", "\n", "            ", "md", "=", "segment_data", "[", "timestep", "]", "[", "\"metadata\"", "]", "\n", "seg", "=", "get_instruction_segment", "(", "md", "[", "\"env_id\"", "]", ",", "md", "[", "\"set_idx\"", "]", ",", "md", "[", "\"seg_idx\"", "]", ")", "\n", "start_idx", "=", "seg", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "seg", "[", "\"end_idx\"", "]", "\n", "\n", "if", "kind", "==", "\"dynamic\"", ":", "\n", "                ", "pos", "=", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", ".", "state", "[", "9", ":", "12", "]", "\n", "labels_t", "=", "get_top_down_ground_truth_dynamic_global", "(", "env_id", ",", "start_idx", ",", "end_idx", ",", "pos", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "\n", "", "elif", "kind", "==", "\"dynamic_noisy\"", ":", "\n", "                ", "assert", "\"noisy_poses\"", "in", "data", ",", "\"Noisy poses must be computed before computing dynamic ground truth!\"", "\n", "pos", "=", "data", "[", "\"noisy_poses\"", "]", "[", "timestep", "]", ".", "position", "\n", "labels_t", "=", "get_top_down_ground_truth_dynamic_global", "(", "env_id", ",", "start_idx", ",", "end_idx", ",", "pos", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "\n", "", "elif", "kind", "==", "\"static\"", ":", "\n", "                ", "labels_t", "=", "get_top_down_ground_truth_static_global", "(", "env_id", ",", "start_idx", ",", "end_idx", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Unknown trajectory ground truth kind\"", ")", "\n", "# append CxHxW", "\n", "", "labels", ".", "append", "(", "labels_t", "[", "0", "]", ")", "\n", "# TODO: for natural language, we'll use the NL functions above, instead of the tlpt ones", "\n", "#else:", "\n", "#    labels.append(labels[-1])", "\n", "\n", "# create labels SxCxHxW", "\n", "", "", "labels", "=", "torch", ".", "stack", "(", "labels", ",", "dim", "=", "0", ")", "\n", "\n", "return", "[", "(", "\"traj_ground_truth\"", ",", "labels", ")", ",", "(", "\"plan_mask\"", ",", "obs_mask", ")", ",", "(", "\"firstseg_mask\"", ",", "firstseg_mask", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_trajectory_ground_truth_static": [[555, 557], ["aux_data_providers.provider_trajectory_ground_truth"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_trajectory_ground_truth"], ["", "def", "provider_trajectory_ground_truth_static", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "return", "provider_trajectory_ground_truth", "(", "segment_data", ",", "data", ",", "\"static\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_trajectory_ground_truth_dynamic": [[559, 561], ["aux_data_providers.provider_trajectory_ground_truth"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_trajectory_ground_truth"], ["", "def", "provider_trajectory_ground_truth_dynamic", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "return", "provider_trajectory_ground_truth", "(", "segment_data", ",", "data", ",", "\"dynamic\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_trajectory_ground_truth_dynamic_noisy": [[563, 565], ["aux_data_providers.provider_trajectory_ground_truth"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_trajectory_ground_truth"], ["", "def", "provider_trajectory_ground_truth_dynamic_noisy", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "return", "provider_trajectory_ground_truth", "(", "segment_data", ",", "data", ",", "\"dynamic_noisy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_top_down_images": [[567, 583], ["len", "range", "torch.stack", "torch.stack", "aux_data_providers.get_top_down_image_env", "top_down_images.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.get_top_down_image_env", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "provider_top_down_images", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "traj_len", "=", "len", "(", "segment_data", ".", "metadata", ")", "\n", "env_id", "=", "segment_data", ".", "metadata", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "\n", "top_down_images", "=", "[", "]", "\n", "#env_image is CxHxW", "\n", "env_image", "=", "get_top_down_image_env", "(", "env_id", ",", "256", ",", "256", ",", "512", ",", "512", ")", "[", "0", "]", "\n", "\n", "prev_seg", "=", "{", "\"env_id\"", ":", "-", "1", ",", "\"set_idx\"", ":", "-", "1", ",", "\"seg_idx\"", ":", "-", "1", "}", "\n", "for", "timestep", "in", "range", "(", "1", ")", ":", "\n", "        ", "top_down_images", ".", "append", "(", "env_image", ")", "\n", "\n", "# SxCxHxW", "\n", "", "top_down_images_t", "=", "torch", ".", "stack", "(", "top_down_images", ",", "dim", "=", "0", ")", "\n", "\n", "return", "[", "(", "\"top_down_images\"", ",", "top_down_images_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_rot_top_down_images": [[585, 618], ["data_io.env.load_path", "data_io.env.load_env_img", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data_io.instructions.get_instruction_segment", "learning.get_start_pt_and_yaw", "learning.get_affine_matrix", "learning.gen_top_down_image", "learning.gen_top_down_labels", "top_down_images.append", "top_down_labels.append", "torch.max_pool2d", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_start_pt_and_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_affine_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.gen_top_down_image", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.gen_top_down_labels", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "provider_rot_top_down_images", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "env_id", "=", "segment_data", ".", "metadata", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "env_image", "=", "load_env_img", "(", "env_id", ",", "256", ",", "256", ")", "\n", "\n", "top_down_images", "=", "[", "]", "\n", "top_down_labels", "=", "[", "]", "\n", "\n", "for", "md", "in", "segment_data", ".", "metadata", ":", "\n", "        ", "if", "md", "is", "None", ":", "\n", "            ", "break", "\n", "", "set_idx", "=", "md", "[", "\"set_idx\"", "]", "\n", "seg_idx", "=", "md", "[", "\"seg_idx\"", "]", "\n", "\n", "instr_seg", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "start_idx", "=", "instr_seg", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "instr_seg", "[", "\"end_idx\"", "]", "\n", "\n", "start_pt", ",", "dir_yaw", "=", "tdd", ".", "get_start_pt_and_yaw", "(", "path", ",", "start_idx", ",", "256", ",", "256", ",", "0", ")", "\n", "affine", "=", "tdd", ".", "get_affine_matrix", "(", "start_pt", ",", "dir_yaw", ",", "512", ",", "512", ")", "\n", "seg_img_t", "=", "tdd", ".", "gen_top_down_image", "(", "env_image", ",", "affine", ",", "512", ",", "512", ",", "256", ",", "256", ")", "\n", "seg_labels_t", "=", "tdd", ".", "gen_top_down_labels", "(", "path", "[", "start_idx", ":", "end_idx", "]", ",", "affine", ",", "512", ",", "512", ",", "256", ",", "256", ",", "True", ",", "True", ")", "\n", "\n", "seg_labels_t", "=", "F", ".", "max_pool2d", "(", "Variable", "(", "seg_labels_t", ")", ",", "8", ")", ".", "data", "\n", "\n", "top_down_images", ".", "append", "(", "seg_img_t", ")", "\n", "top_down_labels", ".", "append", "(", "seg_labels_t", ")", "\n", "\n", "", "tdimg_t", "=", "torch", ".", "cat", "(", "top_down_images", ",", "dim", "=", "0", ")", "\n", "tdlab_t", "=", "torch", ".", "cat", "(", "top_down_labels", ",", "dim", "=", "0", ")", "\n", "\n", "return", "[", "(", "\"top_down_images\"", ",", "tdimg_t", ")", ",", "(", "\"traj_ground_truth\"", ",", "tdlab_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_landmarks_mentioned": [[620, 647], ["len", "range", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "aux_data_providers.get_mentioned_landmarks_nl", "mentioned_lm_indices.append", "mentioned_lm_names.append", "mentioned_lm_stack.append", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_mentioned_landmarks_nl", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "provider_landmarks_mentioned", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "\n", "mentioned_lm_indices", "=", "[", "]", "\n", "mentioned_lm_names", "=", "[", "]", "\n", "mentioned_lm_stack", "=", "[", "]", "\n", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "        ", "if", "segment_data", "[", "timestep", "]", "is", "not", "None", ":", "\n", "            ", "mentioned_lm_t", "=", "torch", ".", "zeros", "(", "[", "NUM_LANDMARKS", "]", ")", ".", "long", "(", ")", "\n", "\n", "instruction_str", "=", "segment_data", "[", "timestep", "]", "[", "\"instruction\"", "]", "\n", "mentioned_landmark_names", ",", "mentioned_landmark_indices", "=", "get_mentioned_landmarks_nl", "(", "instruction_str", ")", "\n", "mentioned_lm_indices", ".", "append", "(", "mentioned_landmark_indices", ")", "\n", "mentioned_lm_names", ".", "append", "(", "mentioned_lm_names", ")", "\n", "\n", "# TODO: Why is this a double-list?", "\n", "for", "index", "in", "mentioned_lm_indices", "[", "0", "]", ":", "\n", "                ", "mentioned_lm_t", "[", "index", "]", "=", "1", "\n", "\n", "", "mentioned_lm_stack", ".", "append", "(", "mentioned_lm_t", ")", "\n", "\n", "", "", "mentioned_lms_t", "=", "torch", ".", "stack", "(", "mentioned_lm_stack", ",", "dim", "=", "0", ")", "\n", "\n", "return", "[", "(", "\"lang_lm_mentioned_indices\"", ",", "mentioned_lm_indices", ")", ",", "\n", "(", "\"lang_lm_mentioned_names\"", ",", "mentioned_lm_names", ")", ",", "\n", "(", "\"lang_lm_mentioned\"", ",", "mentioned_lms_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_past_trajectory": [[649, 669], ["len", "numpy.zeros", "range", "torch.stack", "torch.stack", "torch.from_numpy", "torch.from_numpy", "torch.stack.append", "transformations.pos_m_to_px", "learning.plot_path_on_img", "cv2.imshow", "np.zeros.copy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img"], ["", "def", "provider_past_trajectory", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "\n", "canvas", "=", "np", ".", "zeros", "(", "(", "64", ",", "64", ")", ")", "\n", "canvases_t", "=", "[", "]", "\n", "last_pos", "=", "None", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "        ", "if", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", "is", "None", ":", "\n", "            ", "break", "\n", "", "pos_as", "=", "segment_data", ".", "state", "[", "timestep", "]", ".", "state", "[", "9", ":", "12", "]", "\n", "pos_map", "=", "pos_m_to_px", "(", "pos_as", "[", "np", ".", "newaxis", ",", ":", "]", ",", "img_size_px", "=", "32", ")", "[", "0", "]", "\n", "if", "last_pos", "!=", "None", ":", "\n", "            ", "coords", "=", "[", "last_pos", ",", "pos_map", "]", "\n", "last_pos", "=", "pos_map", "\n", "tdd", ".", "plot_path_on_img", "(", "canvas", ",", "coords", ")", "\n", "cv2", ".", "imshow", "(", "\"past_traje\"", ",", "canvas", ")", "\n", "", "canvas_t", "=", "torch", ".", "from_numpy", "(", "canvas", ".", "copy", "(", ")", ")", "\n", "canvases_t", ".", "append", "(", "canvas_t", ")", "\n", "", "canvases_t", "=", "torch", ".", "stack", "(", "canvases_t", ",", "dim", "=", "0", ")", "\n", "return", "[", "(", "\"past_trajectory_map\"", ",", "canvases_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_noisy_poses": [[671, 714], ["len", "range", "learning.inputs.pose.get_noisy_poses_np", "learning.inputs.pose.get_noisy_poses_np.to_torch", "learning.inputs.pose.Pose", "clean_poses.append", "parameters.get_current_parameters", "parameters.get_current_parameters"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_np", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.to_torch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "provider_noisy_poses", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    This provider returns noisy poses of type learning.inputs.Pose\n    These noisy poses are used during training to rotate the semantic map by a random angle before predicting visitation\n    probabilities as a form of data augmentation.\n    :param segment_data:\n    :param data:\n    :return:\n    \"\"\"", "\n", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "last_pos", "=", "None", "\n", "clean_poses", "=", "[", "]", "\n", "\n", "model_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "\n", "use_first_pose", "=", "model_params", "[", "\"predict_in_start_frame\"", "]", "\n", "\n", "seg_idx", "=", "-", "1", "\n", "first_step", "=", "0", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "\n", "        ", "if", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", "is", "None", ":", "\n", "            ", "break", "\n", "", "if", "segment_data", "[", "timestep", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "!=", "seg_idx", ":", "\n", "            ", "first_step", "=", "timestep", "\n", "seg_idx", "=", "segment_data", "[", "timestep", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "\n", "", "if", "use_first_pose", ":", "\n", "# X[\"state\"] is a DroneState object", "\n", "            ", "pos_as", "=", "segment_data", "[", "first_step", "]", "[", "\"state\"", "]", ".", "state", "[", "9", ":", "12", "]", "\n", "rot_as", "=", "segment_data", "[", "first_step", "]", "[", "\"state\"", "]", ".", "state", "[", "12", ":", "16", "]", "\n", "", "else", ":", "\n", "            ", "pos_as", "=", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", ".", "state", "[", "9", ":", "12", "]", "\n", "rot_as", "=", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", ".", "state", "[", "12", ":", "16", "]", "\n", "\n", "", "clean_pose", "=", "Pose", "(", "pos_as", ",", "rot_as", ")", "\n", "clean_poses", ".", "append", "(", "clean_pose", ")", "\n", "\n", "", "params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "\n", "\n", "noisy_poses", "=", "get_noisy_poses_np", "(", "clean_poses", ",", "params", "[", "\"noisy_pos_variance\"", "]", ",", "params", "[", "\"noisy_rot_variance\"", "]", ")", "\n", "noisy_poses_t", "=", "noisy_poses", ".", "to_torch", "(", ")", "\n", "\n", "return", "[", "(", "\"noisy_poses\"", ",", "noisy_poses_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.provider_start_poses": [[716, 735], ["len", "range", "learning.inputs.pose.stack_poses_np", "learning.inputs.pose.stack_poses_np.to_torch", "learning.inputs.pose.stack_poses_np.append", "learning.inputs.pose.Pose"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.stack_poses_np", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.to_torch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "provider_start_poses", "(", "segment_data", ",", "data", ")", ":", "\n", "    ", "traj_len", "=", "len", "(", "segment_data", ")", "\n", "start_poses", "=", "[", "]", "\n", "\n", "seg_idx", "=", "-", "2", "\n", "for", "timestep", "in", "range", "(", "traj_len", ")", ":", "\n", "        ", "if", "segment_data", "[", "timestep", "]", "is", "None", ":", "\n", "            ", "break", "\n", "", "if", "segment_data", "[", "timestep", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "!=", "seg_idx", ":", "\n", "            ", "seg_idx", "=", "segment_data", "[", "timestep", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "pos_as", "=", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", ".", "state", "[", "9", ":", "12", "]", "\n", "rot_as", "=", "segment_data", "[", "timestep", "]", "[", "\"state\"", "]", ".", "state", "[", "12", ":", "16", "]", "\n", "start_pose", "=", "Pose", "(", "pos_as", ",", "rot_as", ")", "\n", "", "start_poses", ".", "append", "(", "start_pose", ")", "\n", "\n", "", "start_poses", "=", "stack_poses_np", "(", "start_poses", ")", "\n", "sart_poses_t", "=", "start_poses", ".", "to_torch", "(", ")", "\n", "\n", "return", "[", "(", "\"start_poses\"", ",", "sart_poses_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.resolve_data_provider": [[737, 768], ["None"], "function", ["None"], ["", "def", "resolve_data_provider", "(", "aux_provider_name", ")", ":", "\n", "    ", "\"\"\"\n    Given a name of one of the auxiliary data providers, returns a function that takes a data segment and returns the\n    multiple auxiliary data sources\n    :param aux_provider_name: one of lm_pos_lm_indices_fpv, lm_pos_lm_indices_map, goal_pos_map, trajectory_map\n    :return:\n    \"\"\"", "\n", "if", "aux_provider_name", "==", "PROVIDER_LM_POS_DATA", ":", "\n", "        ", "return", "provider_lm_pos_lm_indices_fpv", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ":", "\n", "        ", "return", "provider_trajectory_ground_truth_static", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ":", "\n", "        ", "return", "provider_trajectory_ground_truth_dynamic", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ":", "\n", "        ", "return", "provider_trajectory_ground_truth_dynamic_noisy", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_GOAL_POS", ":", "\n", "        ", "return", "provider_goal_pos_map", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_LANG_TEMPLATE", ":", "\n", "        ", "return", "provider_mentioned_lang_template", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_TOP_DOWN_IMAGES", ":", "\n", "        ", "return", "provider_top_down_images", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_ROT_TOP_DOWN", ":", "\n", "        ", "return", "provider_rot_top_down_images", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_LANDMARKS_MENTIONED", ":", "\n", "        ", "return", "provider_landmarks_mentioned", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_TRAJ_HISTORY", ":", "\n", "        ", "return", "provider_past_trajectory", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_NOISY_POSES", ":", "\n", "        ", "return", "provider_noisy_poses", "\n", "", "elif", "aux_provider_name", "==", "PROVIDER_START_POSES", ":", "\n", "        ", "return", "provider_start_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_aux_label_names": [[770, 803], ["None"], "function", ["None"], ["", "", "def", "get_aux_label_names", "(", "aux_provider_names", ")", ":", "\n", "    ", "\"\"\"\n    :param aux_provider_names:\n    :return:\n    \"\"\"", "\n", "label_names", "=", "[", "]", "\n", "for", "provider", "in", "aux_provider_names", ":", "\n", "        ", "if", "provider", "==", "PROVIDER_LM_POS_DATA", ":", "\n", "            ", "label_names", "+=", "[", "\"lm_pos_fpv\"", ",", "\"lm_pos_map\"", ",", "\"lm_indices\"", ",", "\"lm_mentioned\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_GOAL_POS", ":", "\n", "            ", "label_names", "+=", "[", "\"goal_loc\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ":", "\n", "            ", "label_names", "+=", "[", "\"traj_ground_truth\"", ",", "\"plan_mask\"", ",", "\"firstseg_mask\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ":", "\n", "            ", "label_names", "+=", "[", "\"traj_ground_truth\"", ",", "\"plan_mask\"", ",", "\"firstseg_mask\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ":", "\n", "            ", "label_names", "+=", "[", "\"traj_ground_truth\"", ",", "\"plan_mask\"", ",", "\"firstseg_mask\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_LANG_TEMPLATE", ":", "\n", "            ", "label_names", "+=", "[", "\"lm_mentioned_tplt\"", ",", "\"side_mentioned_tplt\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TOP_DOWN_IMAGES", ":", "\n", "            ", "label_names", "+=", "[", "\"top_down_images\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_ROT_TOP_DOWN", ":", "\n", "            ", "label_names", "+=", "[", "\"top_down_images\"", ",", "\"traj_ground_truth\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_LANDMARKS_MENTIONED", ":", "\n", "            ", "label_names", "+=", "[", "\"lang_lm_mentioned\"", ",", "\"lang_lm_mentioned_indices\"", ",", "\"lang_lm_mentioned_names\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJ_HISTORY", ":", "\n", "            ", "label_names", "+=", "[", "\"past_trajectory_map\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_NOISY_POSES", ":", "\n", "            ", "label_names", "+=", "[", "\"noisy_poses\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_START_POSES", ":", "\n", "            ", "label_names", "+=", "[", "\"start_poses\"", "]", "\n", "\n", "", "", "return", "label_names", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_stackable_label_names": [[805, 837], ["None"], "function", ["None"], ["", "def", "get_stackable_label_names", "(", "aux_provider_names", ")", ":", "\n", "    ", "\"\"\"\n    Returns a list of label names that can be stacked as tensors within the collate function.\n    Some labels are variable length, some are lists and can't be trivially stacked.\n    This should basically include all data that's in form of uniform-length tensors\n    :param aux_provider_names:\n    :return:\n    \"\"\"", "\n", "label_names", "=", "[", "]", "\n", "for", "provider", "in", "aux_provider_names", ":", "\n", "        ", "if", "provider", "==", "PROVIDER_LANG_TEMPLATE", ":", "\n", "            ", "label_names", "+=", "[", "\"lm_mentioned_tplt\"", ",", "\"side_mentioned_tplt\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TOP_DOWN_IMAGES", ":", "\n", "            ", "label_names", "+=", "[", "\"top_down_images\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ":", "\n", "            ", "label_names", "+=", "[", "\"traj_ground_truth\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ":", "\n", "            ", "label_names", "+=", "[", "\"traj_ground_truth\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ":", "\n", "            ", "label_names", "+=", "[", "\"traj_ground_truth\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_ROT_TOP_DOWN", ":", "\n", "            ", "label_names", "+=", "[", "\"top_down_images\"", ",", "\"traj_ground_truth\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_LANDMARKS_MENTIONED", ":", "\n", "            ", "label_names", "+=", "[", "\"lang_lm_mentioned\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_TRAJ_HISTORY", ":", "\n", "            ", "label_names", "+=", "[", "\"past_trajectory_map\"", "]", "\n", "", "elif", "provider", "==", "PROVIDER_NOISY_POSES", ":", "\n", "            ", "pass", "\n", "", "elif", "provider", "==", "PROVIDER_START_POSES", ":", "\n", "            ", "pass", "\n", "\n", "", "", "return", "label_names", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.RealSimDataset.__init__": [[8, 14], ["len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "real_dataset", ",", "sim_dataset", ",", "aligned", "=", "False", ")", ":", "\n", "        ", "self", ".", "real_dataset", "=", "real_dataset", "\n", "self", ".", "sim_dataset", "=", "sim_dataset", "\n", "self", ".", "aligned", "=", "aligned", "\n", "if", "aligned", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "sim_dataset", ")", "==", "len", "(", "self", ".", "real_dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.RealSimDataset.__len__": [[15, 17], ["min", "len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "len", "(", "self", ".", "real_dataset", ")", ",", "len", "(", "self", ".", "sim_dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.RealSimDataset.__getitem__": [[18, 28], ["numpy.random.randint", "numpy.random.seed", "numpy.random.seed"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "aligned", ":", "\n", "            ", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "32", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "sample_real", "=", "self", ".", "real_dataset", "[", "index", "]", "\n", "if", "self", ".", "aligned", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "sample_sim", "=", "self", ".", "sim_dataset", "[", "index", "]", "\n", "out_dict", "=", "{", "\"real\"", ":", "sample_real", ",", "\"sim\"", ":", "sample_sim", "}", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.RealSimDataset.collate_fn": [[29, 35], ["dataset_real_sim.RealSimDataset.real_dataset.collate_fn", "dataset_real_sim.RealSimDataset.real_dataset.collate_fn"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.collate_fn", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.collate_fn"], ["", "def", "collate_fn", "(", "self", ",", "list_of_samples", ")", ":", "\n", "        ", "out_tuple_real", "=", "self", ".", "real_dataset", ".", "collate_fn", "(", "[", "sample", "[", "\"real\"", "]", "for", "sample", "in", "list_of_samples", "]", ")", "\n", "out_tuple_sim", "=", "self", ".", "real_dataset", ".", "collate_fn", "(", "[", "sample", "[", "\"sim\"", "]", "for", "sample", "in", "list_of_samples", "]", ")", "\n", "out_dict", "=", "{", "\"real\"", ":", "out_tuple_real", ",", "\"sim\"", ":", "out_tuple_sim", "}", "\n", "# 1 datasample is 1 real sample + 1 simulated sample. This enables to have the same number of each.", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.ConcatRealSimDataset.__init__": [[38, 43], ["len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "real_dataset", ",", "sim_dataset", ")", ":", "\n", "        ", "self", ".", "real_dataset", "=", "real_dataset", "\n", "self", ".", "sim_dataset", "=", "sim_dataset", "\n", "self", ".", "nreal", "=", "len", "(", "real_dataset", ")", "\n", "self", ".", "nsim", "=", "len", "(", "sim_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.ConcatRealSimDataset.__len__": [[44, 46], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "real_dataset", ")", "+", "len", "(", "self", ".", "sim_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.ConcatRealSimDataset.__getitem__": [[47, 55], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "<", "self", ".", "nreal", ":", "\n", "            ", "out", "=", "self", ".", "real_dataset", "[", "index", "]", "\n", "out", "[", "'label'", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "sim_dataset", "[", "index", "-", "self", ".", "nreal", "]", "\n", "out", "[", "'label'", "]", "=", "0.", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dataset_real_sim.ConcatRealSimDataset.collate_fn": [[56, 61], ["dataset_real_sim.ConcatRealSimDataset.real_dataset.collate_fn"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.collate_fn"], ["", "def", "collate_fn", "(", "self", ",", "list_of_samples", ")", ":", "\n", "        ", "labels", "=", "[", "sample", "[", "'label'", "]", "for", "sample", "in", "list_of_samples", "]", "\n", "out_tuple", "=", "self", ".", "real_dataset", ".", "collate_fn", "(", "list_of_samples", ")", "\n", "out_tuple", "+=", "(", "labels", ",", ")", "\n", "return", "out_tuple", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dynamic_ground_truth.get_dynamic_ground_truth": [[13, 46], ["numpy.array", "numpy.vstack", "scipy.spatial.distance.cdist", "numpy.array().reshape", "numpy.array", "numpy.dot", "numpy.vstack", "numpy.arccos", "numpy.linalg.norm", "numpy.vstack", "numpy.array", "numpy.argsort", "numpy.cos", "numpy.sin", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.clip", "numpy.array", "distance.cdist.flatten", "numpy.sqrt", "numpy.array", "numpy.dot", "numpy.array", "numpy.sqrt", "combine_force.dot", "np.dot.dot"], "function", ["None"], ["def", "get_dynamic_ground_truth", "(", "path", ",", "pose", ")", ":", "\n", "    ", "\"\"\"\n    :param path: Nx2 matrix ground truth trajectory\n    :param pose: pose.position - 2D vector of X/Y, pose.orientation - yaw angle (radians)\n    :return: Mx2 matrix of generated ground truth that tries to follow the path\n    \"\"\"", "\n", "counter", "=", "0", "\n", "yaw_angle", "=", "2.5", "\n", "new_traj", "=", "np", ".", "array", "(", "pose", ")", "\n", "new_traj", "=", "np", ".", "vstack", "(", "[", "new_traj", ",", "np", ".", "array", "(", "pose", ")", "]", ")", "\n", "distance_matrix", "=", "distance", ".", "cdist", "(", "path", ",", "np", ".", "array", "(", "pose", ")", ".", "reshape", "(", "1", ",", "2", ")", ")", "\n", "if", "distance_matrix", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "        ", "counter", "=", "np", ".", "argsort", "(", "distance_matrix", ".", "flatten", "(", ")", ")", "[", "0", "]", "\n", "\n", "", "while", "counter", "<", "path", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "        ", "c", ",", "s", "=", "np", ".", "cos", "(", "yaw_angle", ")", ",", "np", ".", "sin", "(", "yaw_angle", ")", "\n", "R", "=", "np", ".", "array", "(", "(", "(", "c", ",", "-", "s", ")", ",", "(", "s", ",", "c", ")", ")", ")", "\n", "current_ref", "=", "path", "[", "counter", "]", "\n", "next_ref", "=", "path", "[", "counter", "+", "1", "]", "\n", "origin_force", "=", "np", ".", "dot", "(", "R", ",", "(", "next_ref", "-", "current_ref", ")", ")", "\n", "shift", "=", "next_ref", "-", "new_traj", "[", "-", "1", "]", "\n", "combine_force", "=", "origin_force", "+", "shift", "\n", "next_pos", "=", "new_traj", "[", "-", "1", "]", "+", "combine_force", "*", "(", "np", ".", "sqrt", "(", "origin_force", ".", "dot", "(", "origin_force", ")", ")", ")", "/", "np", ".", "sqrt", "(", "combine_force", ".", "dot", "(", "combine_force", ")", ")", "\n", "new_traj", "=", "np", ".", "vstack", "(", "[", "new_traj", ",", "np", ".", "array", "(", "next_pos", ")", "]", ")", "\n", "dynamic_v", "=", "(", "new_traj", "[", "-", "1", "]", "-", "new_traj", "[", "-", "2", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "(", "new_traj", "[", "-", "1", "]", "-", "new_traj", "[", "-", "2", "]", ")", ")", "\n", "truth_v", "=", "(", "next_ref", "-", "current_ref", ")", "/", "np", ".", "linalg", ".", "norm", "(", "(", "next_ref", "-", "current_ref", ")", ")", "\n", "yaw_angle", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "dynamic_v", ",", "truth_v", ")", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "counter", "+=", "1", "\n", "", "if", "np", ".", "linalg", ".", "norm", "(", "path", "[", "-", "1", "]", "-", "new_traj", "[", "-", "1", "]", ")", ">", "10", ":", "\n", "        ", "next_pos", "=", "path", "[", "-", "1", "]", "\n", "new_traj", "=", "np", ".", "vstack", "(", "[", "new_traj", ",", "np", ".", "array", "(", "next_pos", ")", "]", ")", "\n", "", "return", "new_traj", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dynamic_ground_truth.get_dynamic_ground_truth_smooth": [[48, 77], ["numpy.array", "numpy.vstack", "numpy.array", "scipy.spatial.distance.cdist", "numpy.dot", "range", "numpy.arccos", "numpy.array", "numpy.linalg.norm", "numpy.cos", "numpy.sin", "new_traj[].reshape", "numpy.argsort", "numpy.vstack", "numpy.clip", "distance.cdist.flatten", "len", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.dot", "numpy.linalg.norm", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "get_dynamic_ground_truth_smooth", "(", "path", ",", "pose", ")", ":", "\n", "    ", "yaw_angle", "=", "2.5", "\n", "new_traj", "=", "np", ".", "array", "(", "pose", ")", "\n", "new_traj", "=", "np", ".", "vstack", "(", "[", "new_traj", ",", "np", ".", "array", "(", "pose", ")", "]", ")", "\n", "count", "=", "0", "\n", "while", "np", ".", "linalg", ".", "norm", "(", "path", "[", "-", "1", "]", "-", "new_traj", "[", "-", "1", "]", ")", ">", "20", "and", "count", "<", "1000", ":", "\n", "        ", "count", "+=", "1", "\n", "c", ",", "s", "=", "np", ".", "cos", "(", "yaw_angle", ")", ",", "np", ".", "sin", "(", "yaw_angle", ")", "\n", "R", "=", "np", ".", "array", "(", "(", "(", "c", ",", "-", "s", ")", ",", "(", "s", ",", "c", ")", ")", ")", "\n", "distance_matrix", "=", "distance", ".", "cdist", "(", "path", ",", "new_traj", "[", "-", "1", "]", ".", "reshape", "(", "1", ",", "2", ")", ")", "\n", "pointer", "=", "np", ".", "argsort", "(", "distance_matrix", ".", "flatten", "(", ")", ")", "[", "0", "]", "\n", "if", "pointer", ">=", "len", "(", "path", ")", "-", "1", ":", "\n", "            ", "current_ref", "=", "path", "[", "-", "2", "]", "\n", "next_ref", "=", "path", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "current_ref", "=", "path", "[", "pointer", "]", "\n", "next_ref", "=", "path", "[", "pointer", "+", "1", "]", "\n", "", "origin_force", "=", "np", ".", "dot", "(", "R", ",", "(", "next_ref", "-", "current_ref", ")", ")", "\n", "shift", "=", "next_ref", "-", "new_traj", "[", "-", "1", "]", "\n", "last_pos", "=", "new_traj", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "combine_force", "=", "origin_force", "+", "(", "shift", "*", "np", ".", "linalg", ".", "norm", "(", "shift", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "origin_force", ")", "+", "1e-9", ")", ")", "*", "(", "(", "i", "/", "5", ")", "**", "2", ")", "\n", "combine_force", "=", "combine_force", "/", "(", "np", ".", "linalg", ".", "norm", "(", "combine_force", ")", "+", "1e-18", ")", "\n", "next_pos", "=", "last_pos", "+", "combine_force", "**", "(", "5", "-", "i", ")", "\n", "new_traj", "=", "np", ".", "vstack", "(", "[", "new_traj", ",", "np", ".", "array", "(", "next_pos", ")", "]", ")", "\n", "", "dynamic_v", "=", "(", "new_traj", "[", "-", "1", "]", "-", "new_traj", "[", "-", "6", "]", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "(", "new_traj", "[", "-", "1", "]", "-", "new_traj", "[", "-", "6", "]", ")", ")", "+", "1e-18", ")", "\n", "truth_v", "=", "(", "next_ref", "-", "current_ref", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "(", "next_ref", "-", "current_ref", ")", ")", "+", "1e-18", ")", "\n", "yaw_angle", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "dynamic_v", ",", "truth_v", ")", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "", "return", "new_traj", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dynamic_ground_truth.get_dynamic_ground_truth_v2": [[79, 130], ["utils.paths.condense_path", "numpy.array", "numpy.vstack", "utils.paths.get_closest_point_in_path", "numpy.zeros", "geometry.yaw_to_vec", "len", "numpy.asarray", "numpy.vstack", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.paths.condense_path", "home.repos.pwc.inspect_result.clic-lab_drif.utils.paths.get_closest_point_in_path", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.yaw_to_vec"], ["", "def", "get_dynamic_ground_truth_v2", "(", "path", ",", "position_cf", ")", ":", "\n", "    ", "yaw", "=", "0", "\n", "start_dir", "=", "geometry", ".", "yaw_to_vec", "(", "yaw", ")", "[", ":", "2", "]", "\n", "\n", "if", "len", "(", "path", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "[", "position_cf", ",", "position_cf", "]", ")", "\n", "\n", "", "path", "=", "condense_path", "(", "path", ")", "\n", "\n", "current_pos", "=", "position_cf", "\n", "new_traj", "=", "np", ".", "array", "(", "position_cf", ")", "\n", "new_traj", "=", "np", ".", "vstack", "(", "[", "new_traj", ",", "np", ".", "array", "(", "position_cf", ")", "]", ")", "\n", "\n", "counter", "=", "get_closest_point_in_path", "(", "path", ",", "position_cf", ")", "\n", "current_vel", "=", "start_dir", "*", "10", "\n", "current_vel", "=", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "count", "=", "0", "\n", "while", "np", ".", "linalg", ".", "norm", "(", "path", "[", "-", "1", "]", "-", "new_traj", "[", "-", "1", "]", ")", ">", "20", "and", "count", "<", "10000", "and", "counter", "<", "len", "(", "path", ")", "-", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "LOOKAHEAD", "=", "5", "\n", "if", "LOOKAHEAD", "+", "counter", ">", "len", "(", "path", ")", "-", "1", ":", "\n", "            ", "LOOKAHEAD", "=", "len", "(", "path", ")", "-", "1", "-", "counter", "\n", "\n", "", "dir_along_path", "=", "path", "[", "counter", "+", "LOOKAHEAD", "]", "-", "path", "[", "counter", "]", "\n", "dir_along_path", "/=", "(", "np", ".", "linalg", ".", "norm", "(", "dir_along_path", ")", "+", "1e-9", ")", "\n", "\n", "dir_towards_path", "=", "path", "[", "counter", "+", "LOOKAHEAD", "]", "-", "current_pos", "\n", "dir_towards_path", "/=", "(", "np", ".", "linalg", ".", "norm", "(", "dir_towards_path", ")", "+", "1e-9", ")", "\n", "\n", "lamda", "=", "0.2", "\n", "force", "=", "lamda", "*", "dir_along_path", "+", "(", "1", "-", "lamda", ")", "*", "dir_towards_path", "\n", "\n", "current_vel", "+=", "force", "\n", "\n", "MAX_VEL", "=", "20", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "current_vel", ")", ">", "MAX_VEL", ":", "\n", "            ", "current_vel", "/=", "np", ".", "linalg", ".", "norm", "(", "current_vel", ")", "\n", "current_vel", "*=", "MAX_VEL", "\n", "\n", "", "new_pos", "=", "current_pos", "+", "current_vel", "*", "0.1", "\n", "new_traj", "=", "np", ".", "vstack", "(", "[", "new_traj", ",", "new_pos", "]", ")", "\n", "current_pos", "=", "new_pos", "\n", "\n", "dst_to_next", "=", "np", ".", "linalg", ".", "norm", "(", "path", "[", "counter", "+", "1", "]", "-", "current_pos", ")", "\n", "dst_to_this", "=", "np", ".", "linalg", ".", "norm", "(", "path", "[", "counter", "]", "-", "current_pos", ")", "\n", "if", "dst_to_next", "<", "dst_to_this", ":", "\n", "            ", "counter", "+=", "1", "\n", "\n", "", "", "return", "new_traj", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.rss_noisy_poses.save_noisy_poses": [[13, 23], ["data_io.paths.get_noisy_pose_path", "os.makedirs", "range", "len", "os.path.join", "open", "pickle.dump", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_noisy_pose_path"], ["def", "save_noisy_poses", "(", "poses", ")", ":", "\n", "    ", "path", "=", "get_noisy_pose_path", "(", ")", "\n", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "        ", "filename", "=", "\"poses_\"", "+", "str", "(", "i", ")", "+", "\".pickle\"", "\n", "fullfile", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "with", "open", "(", "fullfile", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "poses", "[", "i", "]", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.rss_noisy_poses.load_noisy_poses": [[25, 32], ["data_io.paths.get_noisy_pose_path", "os.path.join", "open", "pickle.load", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_noisy_pose_path"], ["", "", "", "def", "load_noisy_poses", "(", "env_id", ")", ":", "\n", "    ", "path", "=", "get_noisy_pose_path", "(", ")", "\n", "filename", "=", "\"poses_\"", "+", "str", "(", "env_id", ")", "+", "\".pickle\"", "\n", "fullfile", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "with", "open", "(", "fullfile", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "        ", "env_poses", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "return", "env_poses", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_nav_dataset.TopDownNavDataset.__init__": [[18, 46], ["torch.utils.data.Dataset.__init__", "deprecated.learning.datasets.sm_dataset_simple.SMSegmentDataset", "learning.datasets.top_down_dataset.TopDownDataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "\n", "data", "=", "None", ",", "\n", "env_list", "=", "None", ",", "\n", "dataset_name", "=", "\"supervised\"", ",", "\n", "seg_start_only", "=", "True", ",", "\n", "aux_provider_names", "=", "[", "]", ",", "\n", "max_traj_len", "=", "None", ",", "\n", "img_w", "=", "IMG_WIDTH", ",", "\n", "img_h", "=", "IMG_HEIGHT", ",", "\n", "map_w", "=", "None", ",", "\n", "map_h", "=", "None", ")", ":", "\n", "        ", "super", "(", "TopDownNavDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "map_w", "is", "None", ":", "\n", "            ", "map_w", "=", "map_w", "\n", "map_h", "=", "map_h", "\n", "\n", "", "self", ".", "segment_dataset", "=", "SMSegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "env_list", ",", "dataset_name", "=", "\"supervised\"", ",", "max_traj_length", "=", "max_traj_len", ",", "aux_provider_names", "=", "aux_provider_names", ")", "\n", "self", ".", "top_down_dataset", "=", "TopDownDataset", "(", "env_list", "=", "env_list", ",", "\n", "instr_negatives", "=", "False", ",", "\n", "instr_negatives_similar_only", "=", "False", ",", "\n", "seg_level", "=", "False", ",", "\n", "yaw_rand_range", "=", "0.0", ",", "\n", "img_w", "=", "img_w", ",", "\n", "img_h", "=", "img_h", ",", "\n", "map_w", "=", "map_w", ",", "\n", "map_h", "=", "map_h", ")", "\n", "self", ".", "seg_start_only", "=", "seg_start_only", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_nav_dataset.TopDownNavDataset.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "segment_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_nav_dataset.TopDownNavDataset.__getitem__": [[50, 85], ["data[].size", "torch.cat().unsqueeze", "range", "torch.cat", "utils.dict_tools.dict_slice", "top_down_nav_dataset.TopDownNavDataset.top_down_dataset.get_top_down_image_env", "top_down_images.append", "top_down_images.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_slice", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.get_top_down_image_env", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "segment_dataset", "[", "idx", "]", "\n", "\n", "# The data returned by the segment dataset includes instructions, actions, images and poses", "\n", "# We would like to add a top-down view of the scene for either every pose in the segment or only the first pose", "\n", "# Data is a dict, where each item is a list/batchtensor over timesteps of the entire env-long trajectory", "\n", "# For each of these timesteps, we would want to retrieve a top-down image to be used.", "\n", "# TODO: The data is always of size TRAJECTORY_LEN. Perhaps it's a good idea to have a variable batch size.", "\n", "\n", "top_down_images", "=", "[", "]", "\n", "top_down_poses", "=", "[", "]", "\n", "\n", "num_items", "=", "data", "[", "\"images\"", "]", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "seg_start_only", ":", "\n", "            ", "prev_seg", "=", "{", "\"env_id\"", ":", "-", "1", ",", "\"set_idx\"", ":", "-", "1", ",", "\"seg_idx\"", ":", "-", "1", "}", "\n", "for", "i", "in", "range", "(", "num_items", ")", ":", "\n", "                ", "if", "data", "[", "\"md\"", "]", "[", "i", "]", "is", "None", ":", "\n", "                    ", "curr_seg", "=", "prev_seg", "\n", "", "else", ":", "\n", "                    ", "curr_seg", "=", "dict_slice", "(", "data", "[", "\"md\"", "]", "[", "i", "]", ",", "[", "\"env_id\"", ",", "\"set_idx\"", ",", "\"seg_idx\"", "]", ")", "\n", "", "if", "curr_seg", "!=", "prev_seg", ":", "\n", "                    ", "prev_seg", "=", "curr_seg", "\n", "top_down_image", "=", "self", ".", "top_down_dataset", ".", "get_top_down_image_env", "(", "curr_seg", "[", "\"env_id\"", "]", ")", "\n", "#Presenter().show_image(top_down_image, \"tdown_img\", torch=True, waitkey=True)", "\n", "top_down_images", ".", "append", "(", "top_down_image", ")", "\n", "", "else", ":", "\n", "                    ", "top_down_images", ".", "append", "(", "top_down_images", "[", "-", "1", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "...", "\n", "#TODO: Implement the case where we get a rotated image for each timestep, not only the first one in the segment", "\n", "#EDIT: Nope, we're not doing that. TODO: Simplify this whole thing into a single function that loads an image of the env", "\n", "\n", "", "data", "[", "\"top_down_images\"", "]", "=", "torch", ".", "cat", "(", "top_down_images", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "#data[\"top_down_poses\"] = torch.cat(top_down_poses, dim=0).unsqueeze(0)", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_nav_dataset.TopDownNavDataset.collate_fn": [[86, 95], ["top_down_nav_dataset.TopDownNavDataset.segment_dataset.collate_fn", "torch.autograd.Variable", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.collate_fn"], ["", "def", "collate_fn", "(", "self", ",", "list_of_samples", ")", ":", "\n", "\n", "# This will correctly collate everything, but the \"env_image\" that we added will become a list of tensors", "\n", "# instead of a single tensor. Turn it into a batch tensor", "\n", "        ", "data_t", "=", "self", ".", "segment_dataset", ".", "collate_fn", "(", "list_of_samples", ")", "\n", "data_t", "[", "\"top_down_images\"", "]", "=", "Variable", "(", "torch", ".", "cat", "(", "data_t", "[", "\"top_down_images\"", "]", ",", "0", ")", ")", "\n", "#data_t[\"top_down_poses\"] = Variable(torch.cat(data_t[\"top_down_poses\"], 0))", "\n", "\n", "return", "data_t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dynamic_ground_truth_test.dyn_gt_test": [[10, 30], ["visualization.Presenter", "data_io.instructions.get_all_instructions", "range", "data_io.env.load_path", "random.randint", "learning.inputs.pose.Pose", "random.randint", "learning.datasets.dynamic_ground_truth.get_dynamic_ground_truth", "learning.datasets.dynamic_ground_truth.get_dynamic_ground_truth_smooth", "visualization.Presenter.plot_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dynamic_ground_truth.get_dynamic_ground_truth", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.dynamic_ground_truth.get_dynamic_ground_truth_smooth", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_path"], ["def", "dyn_gt_test", "(", ")", ":", "\n", "    ", "presenter", "=", "Presenter", "(", ")", "\n", "train_instr", ",", "dev_instr", ",", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "all_instr", "=", "{", "**", "train_instr", ",", "**", "dev_instr", ",", "**", "test_instr", "}", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "path", "=", "load_path", "(", "i", ")", "\n", "segments", "=", "all_instr", "[", "i", "]", "[", "0", "]", "[", "\"instructions\"", "]", "\n", "for", "seg", "in", "segments", ":", "\n", "            ", "start_idx", "=", "seg", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "seg", "[", "\"end_idx\"", "]", "\n", "randInt", "=", "random", ".", "randint", "(", "10", ",", "100", ")", "\n", "\n", "start_pose", "=", "Pose", "(", "path", "[", "start_idx", "]", "-", "randInt", ",", "0", ")", "\n", "\n", "if", "end_idx", "-", "start_idx", ">", "0", ":", "\n", "                ", "randInt", "=", "random", ".", "randint", "(", "10", ",", "100", ")", "\n", "new_path", "=", "get_dynamic_ground_truth", "(", "path", "[", "start_idx", ":", "end_idx", "]", ",", "(", "path", "[", "start_idx", "]", "-", "randInt", ")", ")", "\n", "new_path1", "=", "get_dynamic_ground_truth_smooth", "(", "path", "[", "start_idx", ":", "end_idx", "]", ",", "(", "path", "[", "start_idx", "]", "-", "randInt", ")", ")", "\n", "presenter", ".", "plot_path", "(", "i", ",", "[", "path", "[", "start_idx", ":", "end_idx", "]", ",", "new_path", ",", "new_path1", "]", ")", "\n", "#new_path = get_dynamic_ground_truth(path[start_idx:end_idx], (path[start_idx]-randInt))", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.__init__": [[25, 59], ["data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "data_io.instructions.load_landmark_alignments", "data_io.meta.load_similar_instruction_map", "enumerate", "enumerate", "top_down_dataset_sm.TopDownDatasetSM.seg_list.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_landmark_alignments", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["    ", "def", "__init__", "(", "self", ",", "\n", "env_list", "=", "None", ",", "\n", "instr_negatives", "=", "False", ",", "\n", "instr_negatives_similar_only", "=", "False", ",", "\n", "seg_level", "=", "False", ",", "\n", "img_scale", "=", "1", ",", "\n", "yaw_rand_range", "=", "0", ",", "\n", "pos_rand_range", "=", "0", "\n", ")", ":", "\n", "# If data is already loaded in memory, use it", "\n", "        ", "self", ".", "env_list", "=", "env_list", "\n", "self", ".", "train_instr", ",", "self", ".", "dev_instr", ",", "self", ".", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "all_instr", "=", "{", "**", "self", ".", "train_instr", ",", "**", "self", ".", "dev_instr", ",", "**", "self", ".", "test_instr", "}", "\n", "self", ".", "token2term", ",", "self", ".", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "self", ".", "thesaurus", "=", "load_landmark_alignments", "(", ")", "\n", "self", ".", "include_instr_negatives", "=", "instr_negatives", "\n", "if", "instr_negatives", ":", "\n", "            ", "self", ".", "similar_instruction_map", "=", "load_similar_instruction_map", "(", ")", "\n", "", "self", ".", "instr_negatives_similar_only", "=", "instr_negatives_similar_only", "\n", "self", ".", "img_scale", "=", "img_scale", "\n", "\n", "self", ".", "yaw_rand_range", "=", "yaw_rand_range", "\n", "self", ".", "pos_rand_range", "=", "pos_rand_range", "\n", "self", ".", "pos_rand_image", "=", "0", "\n", "\n", "# If the data is supposed to be at seg level (not nested envs + segs), then we can support batching", "\n", "# but we need to correctly infer the dataset size", "\n", "self", ".", "seg_level", "=", "seg_level", "\n", "if", "seg_level", ":", "\n", "            ", "self", ".", "seg_list", "=", "[", "]", "\n", "for", "env", "in", "self", ".", "env_list", ":", "\n", "                ", "for", "set_idx", ",", "set", "in", "enumerate", "(", "self", ".", "all_instr", "[", "env", "]", ")", ":", "\n", "                    ", "for", "seg_idx", ",", "seg", "in", "enumerate", "(", "set", "[", "\"instructions\"", "]", ")", ":", "\n", "                        ", "self", ".", "seg_list", ".", "append", "(", "[", "env", ",", "set_idx", ",", "seg_idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.__len__": [[61, 63], ["len", "len"], "methods", ["None"], ["", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "env_list", ")", "if", "not", "self", ".", "seg_level", "else", "len", "(", "self", ".", "seg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.get_affine_matrix": [[65, 94], ["geometry.vec_to_yaw", "transformations.get_affine_scale_2d", "transformations.get_affine_trans_2d", "transformations.get_affine_rot_2d", "transformations.get_affine_trans_2d", "numpy.dot", "tuple", "random.uniform", "random.uniform", "random.uniform", "numpy.dot", "len", "numpy.array", "numpy.dot", "numpy.asarray", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_scale_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_rot_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d"], ["", "def", "get_affine_matrix", "(", "self", ",", "path", ",", "start_idx", ",", "origin", ",", "world_scaling_factor", ")", ":", "\n", "        ", "if", "start_idx", ">", "len", "(", "path", ")", "-", "2", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "start_pt", "=", "path", "[", "start_idx", "]", "\n", "next_pt", "=", "path", "[", "start_idx", "+", "1", "]", "\n", "dir_vec", "=", "next_pt", "-", "start_pt", "\n", "dir_yaw", "=", "vec_to_yaw", "(", "dir_vec", ")", "\n", "\n", "if", "self", ".", "yaw_rand_range", ">", "0", ":", "\n", "            ", "dir_yaw_offset", "=", "random", ".", "uniform", "(", "-", "self", ".", "yaw_rand_range", ",", "self", ".", "yaw_rand_range", ")", "\n", "dir_yaw", "+=", "dir_yaw_offset", "\n", "\n", "", "if", "self", ".", "pos_rand_image", ">", "0", ":", "\n", "            ", "pos_offset", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "pos_rand_range", ")", "\n", "angle", "=", "random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "offset_vec", "=", "pos_offset", "*", "np", ".", "array", "(", "[", "np", ".", "cos", "(", "angle", ")", ",", "np", ".", "sin", "(", "angle", ")", "]", ")", "\n", "start_pt", "+=", "offset_vec", "\n", "\n", "", "affine_s", "=", "get_affine_scale_2d", "(", "[", "world_scaling_factor", ",", "world_scaling_factor", "]", ")", "\n", "affine_t", "=", "get_affine_trans_2d", "(", "-", "start_pt", ")", "\n", "affine_rot", "=", "get_affine_rot_2d", "(", "-", "dir_yaw", ")", "\n", "affine_t2", "=", "get_affine_trans_2d", "(", "origin", ")", "\n", "\n", "#return affine_t", "\n", "affine_total", "=", "np", ".", "dot", "(", "affine_t2", ",", "np", ".", "dot", "(", "affine_s", ",", "np", ".", "dot", "(", "affine_rot", ",", "affine_t", ")", ")", ")", "\n", "out_crop_size", "=", "tuple", "(", "np", ".", "asarray", "(", "origin", ")", "*", "2", ")", "\n", "\n", "return", "affine_total", ",", "out_crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.plot_path_on_img": [[95, 109], ["int", "int", "skimage.line", "skimage.line", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "plot_path_on_img", "(", "self", ",", "img", ",", "path", ")", ":", "\n", "        ", "prev_x", "=", "None", "\n", "prev_y", "=", "None", "\n", "for", "coord", "in", "path", ":", "\n", "            ", "x", "=", "int", "(", "coord", "[", "0", "]", ")", "\n", "y", "=", "int", "(", "coord", "[", "1", "]", ")", "\n", "if", "prev_x", "is", "not", "None", "and", "prev_y", "is", "not", "None", ":", "\n", "                ", "rr", ",", "cc", "=", "draw", ".", "line", "(", "prev_x", ",", "prev_y", ",", "x", ",", "y", ")", "\n", "rr", "=", "np", ".", "clip", "(", "rr", ",", "0", ",", "img", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "cc", "=", "np", ".", "clip", "(", "cc", ",", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "img", "[", "rr", ",", "cc", "]", "=", "1.0", "\n", "", "prev_x", "=", "x", "\n", "prev_y", "=", "y", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img": [[110, 115], ["None"], "methods", ["None"], ["", "def", "cf_to_img", "(", "self", ",", "img_size", ",", "as_coords", ")", ":", "\n", "        ", "scale", "=", "img_size", "/", "1000", "\n", "out_coords", "=", "as_coords", "*", "scale", "\n", "out_coords", "=", "img_size", "-", "out_coords", "\n", "return", "out_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.as_to_img": [[116, 121], ["None"], "methods", ["None"], ["", "def", "as_to_img", "(", "self", ",", "img_size", ",", "as_coords", ")", ":", "\n", "        ", "scale", "=", "img_size", "/", "30", "\n", "out_coords", "=", "as_coords", "*", "scale", "\n", "out_coords", "[", ":", ",", "0", "]", "=", "img_size", "-", "out_coords", "[", ":", ",", "0", "]", "\n", "return", "out_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.normalize_0_1": [[122, 126], ["numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "normalize_0_1", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", "-", "np", ".", "min", "(", "img", ")", "\n", "img", "=", "img", "/", "(", "np", ".", "max", "(", "img", ")", "+", "1e-9", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.apply_affine": [[127, 134], ["cv2.warpAffine", "len", "len", "numpy.expand_dims"], "methods", ["None"], ["", "def", "apply_affine", "(", "self", ",", "img", ",", "affine_mat", ",", "out_crop_size", ")", ":", "\n", "        ", "affine_swap", "=", "affine_mat", "[", "[", "1", ",", "0", "]", "]", "\n", "affine_swap", "=", "affine_swap", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "out", "=", "cv2", ".", "warpAffine", "(", "img", ",", "affine_swap", ",", "out_crop_size", ")", "\n", "if", "len", "(", "out", ".", "shape", ")", "<", "len", "(", "img", ".", "shape", ")", ":", "\n", "            ", "out", "=", "np", ".", "expand_dims", "(", "out", ",", "2", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.apply_affine_on_pts": [[135, 142], ["numpy.ones", "numpy.zeros_like", "range", "numpy.matmul"], "methods", ["None"], ["", "def", "apply_affine_on_pts", "(", "self", ",", "pts", ",", "affine", ")", ":", "\n", "        ", "pts_aff", "=", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "pts_aff", "[", ":", ",", "0", ":", "2", "]", "=", "pts", "\n", "pts_out", "=", "np", ".", "zeros_like", "(", "pts", ")", "\n", "for", "i", "in", "range", "(", "pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pts_out", "[", "i", "]", "[", "0", ":", "2", "]", "=", "np", ".", "matmul", "(", "affine", ",", "pts_aff", "[", "i", "]", ")", "[", "0", ":", "2", "]", "\n", "", "return", "pts_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.__getitem__": [[143, 295], ["data_io.env.load_env_config", "data_io.env.get_landmark_locations_airsim", "data_io.env.load_env_img", "data_io.env.load_path", "top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "top_down_dataset_sm.TopDownDatasetSM.as_to_img", "enumerate", "data_io.env.load_env_img.copy", "top_down_dataset_sm.TopDownDatasetSM.get_affine_matrix", "top_down_dataset_sm.TopDownDatasetSM.apply_affine", "numpy.zeros_like().astype", "top_down_dataset_sm.TopDownDatasetSM.plot_path_on_img", "scipy.ndimage.filters.gaussian_filter", "top_down_dataset_sm.TopDownDatasetSM.apply_affine", "top_down_dataset_sm.TopDownDatasetSM.normalize_0_1", "data_io.instructions.tokenize_instruction", "torch.LongTensor().unsqueeze", "top_down_dataset_sm.TopDownDatasetSM.apply_affine_on_pts", "learning.inputs.vision.standardize_image", "learning.inputs.vision.standardize_image", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze", "torch.LongTensor().unsqueeze", "torch.gt", "torch.lt", "torch.masked_select().view", "torch.masked_select().view", "data_io.instructions.get_mentioned_landmarks", "learning.inputs.common.empty_float_tensor().long", "enumerate", "input_images.append", "input_instructions.append", "label_images.append", "aux_labels.append", "numpy.asarray", "cv2.imshow", "cv2.imshow", "skimage.resize.squeeze", "cv2.imshow", "cv2.waitKey", "skimage.resize", "skimage.resize", "skimage.resize", "skimage.resize", "torch.from_numpy().unsqueeze().float.size", "random.choice", "data_io.instructions.tokenize_instruction", "torch.LongTensor().unsqueeze", "int", "int", "numpy.zeros_like", "skimage.resize.astype", "torch.LongTensor", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.LongTensor", "torch.masked_select", "torch.masked_select", "learning.inputs.common.empty_float_tensor", "len", "mask.unsqueeze().expand_as", "list", "len", "list", "random.choice", "list", "random.choice", "torch.LongTensor", "torch.from_numpy", "torch.from_numpy", "torch.masked_select().view.size", "str", "top_down_dataset_sm.TopDownDatasetSM.similar_instruction_map.keys", "top_down_dataset_sm.TopDownDatasetSM.similar_instruction_map[].keys", "len", "mask.unsqueeze", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.as_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_affine_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.normalize_0_1", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine_on_pts", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_mentioned_landmarks", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "seg_level", ":", "\n", "            ", "env_id", "=", "self", ".", "seg_list", "[", "idx", "]", "[", "0", "]", "\n", "set_idx", "=", "self", ".", "seg_list", "[", "idx", "]", "[", "1", "]", "\n", "seg_idx", "=", "self", ".", "seg_list", "[", "idx", "]", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "env_id", "=", "self", ".", "env_list", "[", "idx", "]", "\n", "\n", "", "env_conf_json", "=", "load_env_config", "(", "env_id", ")", "\n", "landmark_names", ",", "landmark_indices", ",", "landmark_positions", "=", "get_landmark_locations_airsim", "(", "env_conf_json", ")", "\n", "\n", "top_down_image", "=", "load_env_img", "(", "env_id", ")", "\n", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "\n", "img_x", "=", "top_down_image", ".", "shape", "[", "0", "]", "\n", "img_y", "=", "top_down_image", ".", "shape", "[", "1", "]", "\n", "\n", "path_in_img_coords", "=", "self", ".", "cf_to_img", "(", "img_x", ",", "path", ")", "\n", "landmark_pos_in_img", "=", "self", ".", "as_to_img", "(", "img_x", ",", "np", ".", "asarray", "(", "landmark_positions", ")", "[", ":", ",", "0", ":", "2", "]", ")", "\n", "self", ".", "pos_rand_image", "=", "self", ".", "pos_rand_range", "*", "img_x", "\n", "\n", "#self.plot_path_on_img(top_down_image, path_in_img_coords)", "\n", "#self.plot_path_on_img(top_down_image, landmark_pos_in_img)", "\n", "#cv2.imshow(\"top_down\", top_down_image)", "\n", "#cv2.waitKey()", "\n", "\n", "input_images", "=", "[", "]", "\n", "input_instructions", "=", "[", "]", "\n", "label_images", "=", "[", "]", "\n", "aux_labels", "=", "[", "]", "\n", "\n", "# Somehow load the instruction with the start and end indices for each of the N segments", "\n", "if", "self", ".", "seg_level", ":", "\n", "            ", "instruction_segments", "=", "[", "self", ".", "all_instr", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "instruction_segments", "=", "self", ".", "all_instr", "[", "env_id", "]", "[", "0", "]", "[", "\"instructions\"", "]", "\n", "\n", "", "for", "seg_idx", ",", "seg", "in", "enumerate", "(", "instruction_segments", ")", ":", "\n", "            ", "start_idx", "=", "seg", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "seg", "[", "\"end_idx\"", "]", "\n", "instruction", "=", "seg", "[", "\"instruction\"", "]", "\n", "\n", "# TODO: Check for overflowz", "\n", "seg_path", "=", "path_in_img_coords", "[", "start_idx", ":", "end_idx", "]", "\n", "seg_img", "=", "top_down_image", ".", "copy", "(", ")", "\n", "\n", "#test_plot = self.plot_path_on_img(seg_img, seg_path)", "\n", "# TODO: Validate the 0.5 choice, should it be 2?", "\n", "affine", ",", "cropsize", "=", "self", ".", "get_affine_matrix", "(", "seg_path", ",", "0", ",", "[", "int", "(", "img_x", "/", "2", ")", ",", "int", "(", "img_y", "/", "2", ")", "]", ",", "0.5", ")", "\n", "if", "affine", "is", "None", ":", "\n", "                ", "continue", "\n", "", "seg_img_rot", "=", "self", ".", "apply_affine", "(", "seg_img", ",", "affine", ",", "cropsize", ")", "\n", "\n", "seg_labels", "=", "np", ".", "zeros_like", "(", "seg_img", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", ".", "astype", "(", "float", ")", "\n", "seg_labels", "=", "self", ".", "plot_path_on_img", "(", "seg_labels", ",", "seg_path", ")", "\n", "seg_labels", "=", "gaussian_filter", "(", "seg_labels", ",", "4", ")", "\n", "seg_labels_rot", "=", "self", ".", "apply_affine", "(", "seg_labels", ",", "affine", ",", "cropsize", ")", "\n", "\n", "#seg_labels_rot = gaussian_filter(seg_labels_rot, 4)", "\n", "seg_labels_rot", "=", "self", ".", "normalize_0_1", "(", "seg_labels_rot", ")", "\n", "\n", "# Change to true to visualize the paths / labels", "\n", "if", "False", ":", "\n", "                ", "cv2", ".", "imshow", "(", "\"rot_img\"", ",", "seg_img_rot", ")", "\n", "cv2", ".", "imshow", "(", "\"seg_labels\"", ",", "seg_labels_rot", ")", "\n", "rot_viz", "=", "seg_img_rot", ".", "astype", "(", "np", ".", "float64", ")", "/", "512", "\n", "rot_viz", "[", ":", ",", ":", ",", "0", "]", "+=", "seg_labels_rot", ".", "squeeze", "(", ")", "\n", "cv2", ".", "imshow", "(", "\"rot_viz\"", ",", "rot_viz", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "", "tok_instruction", "=", "tokenize_instruction", "(", "instruction", ",", "self", ".", "word2token", ")", "\n", "instruction_t", "=", "torch", ".", "LongTensor", "(", "tok_instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Get landmark classification labels", "\n", "landmark_pos_in_seg_img", "=", "self", ".", "apply_affine_on_pts", "(", "landmark_pos_in_img", ",", "affine", ")", "\n", "\n", "# Down-size images and labels if requested by the model", "\n", "if", "self", ".", "img_scale", "!=", "1.0", ":", "\n", "                ", "seg_img_rot", "=", "transform", ".", "resize", "(", "\n", "seg_img_rot", ",", "\n", "[", "seg_img_rot", ".", "shape", "[", "0", "]", "*", "self", ".", "img_scale", ",", "\n", "seg_img_rot", ".", "shape", "[", "1", "]", "*", "self", ".", "img_scale", "]", ",", "mode", "=", "\"constant\"", ")", "\n", "seg_labels_rot", "=", "transform", ".", "resize", "(", "\n", "seg_labels_rot", ",", "\n", "[", "seg_labels_rot", ".", "shape", "[", "0", "]", "*", "self", ".", "img_scale", ",", "\n", "seg_labels_rot", ".", "shape", "[", "1", "]", "*", "self", ".", "img_scale", "]", ",", "mode", "=", "\"constant\"", ")", "\n", "landmark_pos_in_seg_img", "=", "landmark_pos_in_seg_img", "*", "self", ".", "img_scale", "\n", "\n", "", "seg_img_rot", "=", "standardize_image", "(", "seg_img_rot", ")", "\n", "seg_labels_rot", "=", "standardize_image", "(", "seg_labels_rot", ")", "\n", "seg_img_t", "=", "torch", ".", "from_numpy", "(", "seg_img_rot", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "seg_labels_t", "=", "torch", ".", "from_numpy", "(", "seg_labels_rot", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "landmark_pos_t", "=", "torch", ".", "from_numpy", "(", "landmark_pos_in_seg_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "landmark_indices_t", "=", "torch", ".", "LongTensor", "(", "landmark_indices", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "mask1", "=", "torch", ".", "gt", "(", "landmark_pos_t", ",", "0", ")", "\n", "mask2", "=", "torch", ".", "lt", "(", "landmark_pos_t", ",", "seg_img_t", ".", "size", "(", "2", ")", ")", "\n", "mask", "=", "mask1", "*", "mask2", "\n", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "*", "mask", "[", ":", ",", ":", ",", "1", "]", "\n", "mask", "=", "mask", "\n", "\n", "landmark_pos_t", "=", "torch", ".", "masked_select", "(", "landmark_pos_t", ",", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "landmark_pos_t", ")", ")", ".", "view", "(", "[", "-", "1", ",", "2", "]", ")", "\n", "landmark_indices_t", "=", "torch", ".", "masked_select", "(", "landmark_indices_t", ",", "mask", ")", ".", "view", "(", "[", "-", "1", "]", ")", "\n", "\n", "mentioned_names", ",", "mentioned_indices", "=", "get_mentioned_landmarks", "(", "self", ".", "thesaurus", ",", "instruction", ")", "\n", "mentioned_labels_t", "=", "empty_float_tensor", "(", "list", "(", "landmark_indices_t", ".", "size", "(", ")", ")", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "landmark_idx_present", "in", "enumerate", "(", "landmark_indices_t", ")", ":", "\n", "                ", "if", "landmark_idx_present", "in", "mentioned_indices", ":", "\n", "                    ", "mentioned_labels_t", "[", "i", "]", "=", "1", "\n", "\n", "", "", "aux_label", "=", "{", "\n", "\"landmark_pos\"", ":", "landmark_pos_t", ",", "\n", "\"landmark_indices\"", ":", "landmark_indices_t", ",", "\n", "\"landmark_mentioned\"", ":", "mentioned_labels_t", ",", "\n", "\"visible_mask\"", ":", "mask", ",", "\n", "}", "\n", "\n", "if", "self", ".", "include_instr_negatives", ":", "\n", "# If we are to be using similar instructions according to the json file, then", "\n", "# initialize choices with similar instructions. Otherwise let choices be empty, and they will", "\n", "# be filled in the following lines.", "\n", "                ", "if", "self", ".", "instr_negatives_similar_only", ":", "\n", "                    ", "choices", "=", "self", ".", "similar_instruction_map", "[", "str", "(", "env_id", ")", "]", "[", "str", "(", "seg_idx", ")", "]", "\n", "", "else", ":", "\n", "                    ", "choices", "=", "[", "]", "\n", "# If there are no similar instructions to this instruction, pick a completely random instruction", "\n", "", "if", "len", "(", "choices", ")", "==", "0", ":", "\n", "                    ", "while", "len", "(", "choices", ")", "==", "0", ":", "\n", "                        ", "env_options", "=", "list", "(", "self", ".", "similar_instruction_map", ".", "keys", "(", ")", ")", "\n", "random_env", "=", "random", ".", "choice", "(", "env_options", ")", "\n", "seg_options", "=", "list", "(", "self", ".", "similar_instruction_map", "[", "random_env", "]", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "seg_options", ")", "==", "0", ":", "\n", "                            ", "continue", "\n", "", "random_seg", "=", "random", ".", "choice", "(", "seg_options", ")", "\n", "choices", "=", "self", ".", "similar_instruction_map", "[", "random_env", "]", "[", "random_seg", "]", "\n", "\n", "", "", "pick", "=", "random", ".", "choice", "(", "choices", ")", "\n", "picked_env", "=", "pick", "[", "\"env_id\"", "]", "\n", "picked_seg", "=", "pick", "[", "\"seg_idx\"", "]", "\n", "picked_set", "=", "pick", "[", "\"set_idx\"", "]", "\n", "picked_instruction", "=", "self", ".", "all_instr", "[", "picked_env", "]", "[", "picked_set", "]", "[", "\"instructions\"", "]", "[", "picked_seg", "]", "[", "\"instruction\"", "]", "\n", "tok_fake_instruction", "=", "tokenize_instruction", "(", "picked_instruction", ",", "self", ".", "word2token", ")", "\n", "aux_label", "[", "\"negative_instruction\"", "]", "=", "torch", ".", "LongTensor", "(", "tok_fake_instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "input_images", ".", "append", "(", "seg_img_t", ")", "\n", "input_instructions", ".", "append", "(", "instruction_t", ")", "\n", "label_images", ".", "append", "(", "seg_labels_t", ")", "\n", "aux_labels", ".", "append", "(", "aux_label", ")", "\n", "\n", "", "return", "[", "input_images", ",", "input_instructions", ",", "label_images", ",", "aux_labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.set_word2token": [[296, 299], ["None"], "methods", ["None"], ["", "def", "set_word2token", "(", "self", ",", "token2term", ",", "word2token", ")", ":", "\n", "        ", "self", ".", "token2term", "=", "token2term", "\n", "self", ".", "word2token", "=", "word2token", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.collate_one": [[300, 306], ["torch.stack", "torch.autograd.Variable", "one.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "collate_one", "(", "self", ",", "one", ")", ":", "\n", "        ", "one", "=", "torch", ".", "stack", "(", "one", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "one", "=", "one", ".", "cuda", "(", ")", "\n", "", "one", "=", "Variable", "(", "one", ")", "\n", "return", "one", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.collate_fn": [[307, 331], ["tuple", "tuple", "map", "utils.dict_tools.dict_zip", "torch.cat", "torch.cat", "zip", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_zip"], ["", "def", "collate_fn", "(", "self", ",", "list_of_samples", ")", ":", "\n", "        ", "if", "None", "in", "list_of_samples", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "not", "self", ".", "seg_level", ":", "\n", "            ", "images", ",", "instructions", ",", "labels", ",", "aux_labels", "=", "tuple", "(", "zip", "(", "*", "list_of_samples", ")", ")", "\n", "return", "[", "images", ",", "instructions", ",", "labels", ",", "aux_labels", "]", "\n", "", "else", ":", "\n", "# Keep only those samples that have data", "\n", "            ", "list_of_samples", "=", "[", "sample", "for", "sample", "in", "list_of_samples", "if", "len", "(", "sample", "[", "0", "]", ")", ">", "0", "]", "\n", "images", ",", "instructions", ",", "labels", ",", "aux_labels", "=", "tuple", "(", "zip", "(", "*", "list_of_samples", ")", ")", "\n", "# each is a list of lists, where the inner lists contain a single element each. Turn it into a list of elements", "\n", "images", ",", "instructions", ",", "labels", ",", "aux_labels", "=", "map", "(", "lambda", "m", ":", "[", "a", "[", "0", "]", "for", "a", "in", "m", "]", ",", "[", "images", ",", "instructions", ",", "labels", ",", "aux_labels", "]", ")", "\n", "# Now images and labels can be trivially cat together, but aux_labels is a list of dicts.", "\n", "# Turn it into a dict of lists, where each can be trivially cat together", "\n", "aux_labels", "=", "dict_zip", "(", "aux_labels", ")", "\n", "\n", "# images and labels are not sequences and can be easily cat into a batch", "\n", "images", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "0", ")", "\n", "\n", "# All the other things are sequences and we just leave them as lists. The model should sort it out.", "\n", "return", "[", "images", ",", "instructions", ",", "labels", ",", "aux_labels", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.get_display": [[13, 62], ["numpy.array", "enumerate", "matplotlib.figure", "matplotlib.title", "matplotlib.imshow", "matplotlib.show", "range", "matplotlib.subplots", "numpy.array", "plt.figure.canvas.mpl_connect", "os.listdir", "plt.figure.savefig", "range", "print", "len", "os.path.join", "numpy.array", "print", "int", "numpy.max", "re.findall", "min", "min", "max", "max", "int", "int"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show"], ["def", "get_display", "(", "image", ",", "xy_list", ",", "title", "=", "\"\"", ",", "condition", "=", "[", "]", ",", "imshow", "=", "True", ",", "border", "=", "False", ",", "delete_box", "=", "False", ",", "save", "=", "False", ")", ":", "\n", "    ", "img_display", "=", "np", ".", "array", "(", "image", ")", "\n", "x_max", ",", "y_max", "=", "img_display", ".", "shape", "[", ":", "2", "]", "\n", "if", "not", "(", "xy_list", "is", "None", ")", ":", "\n", "        ", "for", "i_pos", ",", "pos", "in", "enumerate", "(", "xy_list", ")", ":", "\n", "            ", "if", "not", "(", "condition", ")", ":", "\n", "                ", "pass", "\n", "", "elif", "condition", "[", "i_pos", "]", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "for", "ix", "in", "range", "(", "-", "2", ",", "2", ")", ":", "\n", "                ", "for", "iy", "in", "range", "(", "-", "2", ",", "2", ")", ":", "\n", "                    ", "img_display", "[", "min", "(", "max", "(", "0", ",", "int", "(", "pos", "[", "0", "]", ")", "+", "ix", ")", ",", "x_max", "-", "1", ")", ",", "\n", "min", "(", "max", "(", "0", ",", "iy", "+", "int", "(", "pos", "[", "1", "]", ")", ")", ",", "y_max", "-", "1", ")", "]", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "255", "]", ")", "\n", "", "", "", "", "if", "border", ":", "\n", "        ", "img_display", "[", "20", ":", "x_max", "-", "20", ",", "20", "]", "=", "0", "\n", "img_display", "[", "20", ":", "x_max", "-", "20", ",", "y_max", "-", "20", "]", "=", "0", "\n", "img_display", "[", "20", ",", "20", ":", "y_max", "-", "20", "]", "=", "0", "\n", "img_display", "[", "x_max", "-", "20", ",", "20", ":", "y_max", "-", "20", "]", "=", "0", "\n", "", "if", "imshow", ":", "\n", "\n", "        ", "if", "delete_box", ":", "\n", "            ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "img_display", "[", ":", "10", ",", ":", "10", "]", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "\n", "\n", "def", "onclick", "(", "event", ")", ":", "\n", "                ", "if", "(", "event", ".", "xdata", "<", "10", ")", "&", "(", "event", ".", "ydata", "<", "10", ")", ":", "\n", "                    ", "print", "(", "\"delete image\"", ")", "\n", "", "print", "(", "'%s click: button=%d, x=%d, y=%d, xdata=%f, ydata=%f'", "%", "\n", "(", "'double'", "if", "event", ".", "dblclick", "else", "'single'", ",", "event", ".", "button", ",", "\n", "event", ".", "x", ",", "event", ".", "y", ",", "event", ".", "xdata", ",", "event", ".", "ydata", ")", ")", "\n", "\n", "", "cid", "=", "fig", ".", "canvas", ".", "mpl_connect", "(", "'button_press_event'", ",", "onclick", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "imshow", "(", "img_display", "/", "256", ")", "\n", "plt", ".", "show", "(", ")", "\n", "if", "save", ":", "\n", "            ", "folder", "=", "\"/media/valts/shelf_space/droning/drone-sim/drones/train_real/saved_images\"", "\n", "filenames", "=", "os", ".", "listdir", "(", "folder", ")", "\n", "if", "len", "(", "filenames", ")", ">", "0", ":", "\n", "                ", "i_list", "=", "[", "int", "(", "re", ".", "findall", "(", "\"[\\w']+\"", ",", "x", ")", "[", "1", "]", ")", "for", "x", "in", "filenames", "]", "\n", "i", "=", "np", ".", "max", "(", "i_list", ")", "+", "1", "\n", "", "else", ":", "\n", "                ", "i", "=", "1", "\n", "", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "\"fig {}.pdf\"", ".", "format", "(", "i", ")", ")", ")", "\n", "", "", "return", "img_display", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.rot": [[64, 85], ["utils.simple_profiler.SimpleProfiler", "image.rotate", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.print_stats", "numpy.deg2rad", "numpy.array", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats"], ["", "def", "rot", "(", "image", ",", "xy_list", ",", "angle", ")", ":", "\n", "    ", "PROFILE", "=", "False", "\n", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "#im_rot = rotate(image, angle)", "\n", "\n", "im_rot", "=", "image", ".", "rotate", "(", "angle", ")", "#affine(image, angle=angle, translate=(0, 0), scale=1, shear=0)", "\n", "prof", ".", "tick", "(", "\"rotation\"", ")", "\n", "\n", "width0", ",", "height0", "=", "image", ".", "size", "\n", "width_rot", ",", "height_rot", "=", "im_rot", ".", "size", "\n", "org_center", "=", "(", "np", ".", "array", "(", "[", "height0", ",", "width0", "]", ")", "-", "1", ")", "/", "2.", "\n", "rot_center", "=", "(", "np", ".", "array", "(", "[", "height_rot", ",", "width_rot", "]", ")", "-", "1", ")", "/", "2.", "\n", "\n", "org_list", "=", "[", "xy", "-", "org_center", "for", "xy", "in", "xy_list", "]", "\n", "a", "=", "-", "np", ".", "deg2rad", "(", "angle", ")", "\n", "new_list", "=", "[", "np", ".", "array", "(", "[", "org", "[", "0", "]", "*", "np", ".", "cos", "(", "a", ")", "+", "org", "[", "1", "]", "*", "np", ".", "sin", "(", "a", ")", ",", "\n", "-", "org", "[", "0", "]", "*", "np", ".", "sin", "(", "a", ")", "+", "org", "[", "1", "]", "*", "np", ".", "cos", "(", "a", ")", "]", ")", "for", "org", "in", "org_list", "]", "\n", "xy_list_new", "=", "[", "new", "+", "rot_center", "for", "new", "in", "new_list", "]", "\n", "prof", ".", "print_stats", "(", ")", "\n", "return", "im_rot", ",", "xy_list_new", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.rotate_and_label": [[87, 113], ["numpy.random.randint", "numpy.deg2rad", "fpv_data_augmentation.rot", "int", "int", "int", "int", "torchvision.transforms.functional.crop", "zip", "numpy.array", "numpy.array", "numpy.array", "round", "round", "round", "round", "numpy.array", "lm_pos_out.append", "lm_idx_out.append", "numpy.tan", "numpy.tan", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.rot", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "rotate_and_label", "(", "img_to_transform", ",", "lm_idx", ",", "lm_pos_fpv", ")", ":", "\n", "# rotate image", "\n", "    ", "angle", "=", "np", ".", "random", ".", "randint", "(", "-", "10", ",", "10", ")", "\n", "angle_rad", "=", "np", ".", "deg2rad", "(", "angle", ")", "\n", "img_rotated", ",", "lm_pos_rotated", "=", "rot", "(", "img_to_transform", ",", "\n", "np", ".", "array", "(", "lm_pos_fpv", ")", ",", "angle", ")", "\n", "x0", "=", "int", "(", "round", "(", "img_rotated", ".", "size", "[", "0", "]", "*", "np", ".", "tan", "(", "np", ".", "abs", "(", "angle_rad", ")", ")", ")", ")", "\n", "y0", "=", "int", "(", "round", "(", "img_rotated", ".", "size", "[", "1", "]", "*", "np", ".", "tan", "(", "np", ".", "abs", "(", "angle_rad", ")", ")", ")", ")", "\n", "\n", "xmax", "=", "int", "(", "round", "(", "img_rotated", ".", "size", "[", "1", "]", "-", "x0", ")", ")", "\n", "ymax", "=", "int", "(", "round", "(", "img_rotated", ".", "size", "[", "0", "]", "-", "y0", ")", ")", "\n", "\n", "img_cropped", "=", "crop", "(", "img_rotated", ",", "x0", ",", "y0", ",", "-", "x0", "+", "xmax", "+", "1", ",", "-", "y0", "+", "ymax", "+", "1", ")", "\n", "lm_pos_out", "=", "[", "]", "\n", "lm_idx_out", "=", "[", "]", "\n", "for", "pos", ",", "idx", "in", "zip", "(", "lm_pos_rotated", ",", "lm_idx", ")", ":", "\n", "        ", "if", "(", "pos", "[", "0", "]", ">", "x0", ")", "&", "(", "pos", "[", "0", "]", "<", "xmax", ")", "&", "(", "pos", "[", "1", "]", ">", "y0", ")", "&", "(", "pos", "[", "1", "]", "<", "ymax", ")", ":", "\n", "            ", "pos_cropped", "=", "np", ".", "array", "(", "[", "pos", "[", "0", "]", "-", "x0", ",", "pos", "[", "1", "]", "-", "y0", "]", ")", "\n", "lm_pos_out", ".", "append", "(", "pos_cropped", ")", "\n", "lm_idx_out", ".", "append", "(", "idx", ")", "\n", "", "", "lm_indices_out", "=", "np", ".", "array", "(", "lm_idx_out", ",", "dtype", "=", "int", ")", "\n", "lm_pos_fpv_out", "=", "np", ".", "array", "(", "lm_pos_out", ",", "dtype", "=", "float", ")", "\n", "\n", "out_img", "=", "img_cropped", "\n", "return", "out_img", ",", "lm_indices_out", ",", "lm_pos_fpv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.flip_and_label": [[115, 121], ["torchvision.transforms.functional.hflip", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "flip_and_label", "(", "img", ",", "lm_pos_fpv", ")", ":", "\n", "    ", "ymax", ",", "_", "=", "img", ".", "size", "\n", "img_out", "=", "hflip", "(", "img", ")", "\n", "lm_pos_fpv_out", "=", "np", ".", "array", "(", "[", "[", "pos", "[", "0", "]", ",", "ymax", "-", "pos", "[", "1", "]", "]", "for", "pos", "in", "np", ".", "array", "(", "lm_pos_fpv", ")", "]", ",", "dtype", "=", "float", ")", "\n", "\n", "return", "img_out", ",", "lm_pos_fpv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.random_crop_and_label": [[123, 151], ["int", "numpy.random.randint", "numpy.random.randint", "torchvision.transforms.functional.crop", "zip", "numpy.array", "numpy.array", "numpy.random.rand", "numpy.array", "lm_pos_out.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "random_crop_and_label", "(", "img", ",", "lm_idx", ",", "lm_pos_fpv", ",", "ratio", ")", ":", "\n", "    ", "width", ",", "height", "=", "img", ".", "size", "\n", "size", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "0.5", "+", "0.5", "\n", "\n", "new_height", "=", "int", "(", "height", "*", "size", ")", "\n", "new_width", "=", "new_height", "*", "ratio", "\n", "\n", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "height", "-", "new_height", "+", "1", ")", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "width", "-", "new_width", "+", "1", ")", "\n", "\n", "xmax", "=", "x0", "+", "new_height", "-", "1", "\n", "ymax", "=", "y0", "+", "new_width", "-", "1", "\n", "\n", "out_img", "=", "crop", "(", "img", ",", "x0", ",", "y0", ",", "new_height", ",", "new_width", ")", "\n", "lm_pos_out", "=", "[", "]", "\n", "lm_idx_out", "=", "[", "]", "\n", "\n", "for", "pos", ",", "idx", "in", "zip", "(", "lm_pos_fpv", ",", "lm_idx", ")", ":", "\n", "        ", "if", "(", "pos", "[", "0", "]", ">", "x0", ")", "&", "(", "pos", "[", "0", "]", "<", "xmax", ")", "&", "(", "pos", "[", "1", "]", ">", "y0", ")", "&", "(", "pos", "[", "1", "]", "<", "ymax", ")", ":", "\n", "            ", "pos_cropped", "=", "np", ".", "array", "(", "[", "pos", "[", "0", "]", "-", "x0", ",", "pos", "[", "1", "]", "-", "y0", "]", ")", "\n", "lm_pos_out", ".", "append", "(", "pos_cropped", ")", "\n", "lm_idx_out", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "lm_idx_out", "=", "np", ".", "array", "(", "lm_idx_out", ",", "dtype", "=", "int", ")", "\n", "lm_pos_fpv_out", "=", "np", ".", "array", "(", "lm_pos_out", ",", "dtype", "=", "float", ")", "\n", "\n", "return", "out_img", ",", "lm_idx_out", ",", "lm_pos_fpv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.data_augmentation": [[153, 201], ["copy.copy", "numpy.array", "numpy.array", "prof.tick", "torchvision.transforms.functional.resize", "prof.tick", "prof.tick", "len", "fpv_data_augmentation.get_display", "matplotlib.close", "fpv_data_augmentation.get_display", "numpy.random.rand", "fpv_data_augmentation.flip_and_label", "prof.tick", "numpy.random.rand", "fpv_data_augmentation.rotate_and_label", "prof.tick", "len", "numpy.array", "fpv_data_augmentation.get_display", "fpv_data_augmentation.get_display", "numpy.random.rand", "fpv_data_augmentation.random_crop_and_label", "prof.tick", "fpv_data_augmentation.get_display"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.get_display", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.get_display", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.flip_and_label", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.rotate_and_label", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.get_display", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.get_display", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.random_crop_and_label", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.get_display"], ["", "def", "data_augmentation", "(", "image", ",", "lm_indices", ",", "lm_pos_fpv", ",", "IMG_HEIGHT", ",", "IMG_WIDTH", ",", "eval", ",", "prof", ",", "show", "=", "False", ")", ":", "\n", "    ", "width", ",", "height", "=", "image", ".", "size", "\n", "out_img", "=", "copy", ".", "copy", "(", "image", ")", "\n", "out_lm_indices", "=", "np", ".", "array", "(", "lm_indices", ")", "\n", "out_lm_pos_fpv", "=", "np", ".", "array", "(", "lm_pos_fpv", ")", "\n", "prof", ".", "tick", "(", "\"to_pil + reshape\"", ")", "\n", "\n", "ratio", "=", "width", "/", "height", "\n", "if", "not", "eval", ":", "\n", "        ", "p_flip", ",", "p_rot", ",", "p_crop", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", "\n", "if", "show", ":", "\n", "            ", "get_display", "(", "out_img", ",", "np", ".", "array", "(", "out_lm_pos_fpv", ")", ",", "title", "=", "\"Original image\"", ")", "\n", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "1", "-", "p_flip", ":", "# flip image", "\n", "\n", "            ", "out_img", ",", "out_lm_pos_fpv", "=", "flip_and_label", "(", "out_img", ",", "out_lm_pos_fpv", ")", "\n", "prof", ".", "tick", "(", "\"flip\"", ")", "\n", "if", "show", ":", "\n", "                ", "get_display", "(", "out_img", ",", "out_lm_pos_fpv", ",", "title", "=", "\"Flipped image\"", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "1", "-", "p_rot", ":", "# rotate image", "\n", "            ", "out_img", ",", "out_lm_indices", ",", "out_lm_pos_fpv", "=", "rotate_and_label", "(", "out_img", ",", "out_lm_indices", ",", "out_lm_pos_fpv", ")", "\n", "prof", ".", "tick", "(", "\"rotate\"", ")", "\n", "if", "show", ":", "\n", "                ", "get_display", "(", "out_img", ",", "out_lm_pos_fpv", ",", "title", "=", "\"Rotated image\"", ")", "\n", "\n", "", "", "if", "len", "(", "out_lm_indices", ")", ">", "0", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "1", "-", "p_crop", ":", "# crop image", "\n", "                ", "out_img", ",", "out_lm_indices", ",", "out_lm_pos_fpv", "=", "random_crop_and_label", "(", "out_img", ",", "out_lm_indices", ",", "out_lm_pos_fpv", ",", "ratio", ")", "\n", "prof", ".", "tick", "(", "\"crop\"", ")", "\n", "if", "show", ":", "\n", "                    ", "get_display", "(", "out_img", ",", "out_lm_pos_fpv", ",", "title", "=", "\"Cropped image\"", ")", "\n", "\n", "", "", "", "", "old_width", ",", "old_height", "=", "out_img", ".", "size", "\n", "if", "len", "(", "out_lm_pos_fpv", ")", ">", "0", ":", "\n", "        ", "out_lm_pos_fpv", "[", ":", ",", "0", "]", "=", "out_lm_pos_fpv", "[", ":", ",", "0", "]", "*", "IMG_HEIGHT", "/", "old_height", "\n", "out_lm_pos_fpv", "[", ":", ",", "1", "]", "=", "out_lm_pos_fpv", "[", ":", ",", "1", "]", "*", "IMG_WIDTH", "/", "old_width", "\n", "", "out_img", "=", "resize", "(", "out_img", ",", "(", "IMG_HEIGHT", ",", "IMG_WIDTH", ")", ")", "#scipy.misc.imresize(out_img, (IMG_HEIGHT, IMG_WIDTH))", "\n", "prof", ".", "tick", "(", "\"resize\"", ")", "\n", "if", "show", ":", "\n", "        ", "get_display", "(", "out_img", ",", "out_lm_pos_fpv", ",", "title", "=", "\"Final image\"", ")", "\n", "\n", "", "prof", ".", "tick", "(", "\"img to torch\"", ")", "\n", "\n", "if", "show", ":", "\n", "        ", "plt", ".", "close", "(", "\"all\"", ")", "\n", "\n", "", "return", "(", "out_img", ",", "out_lm_indices", ",", "out_lm_pos_fpv", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.__init__": [[188, 247], ["data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "data_io.instructions.load_landmark_alignments", "print", "print", "print", "print", "enumerate", "str", "enumerate", "top_down_dataset.TopDownDataset.seg_list.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_landmark_alignments", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["    ", "def", "__init__", "(", "self", ",", "\n", "env_list", "=", "None", ",", "\n", "instr_negatives", "=", "False", ",", "\n", "instr_negatives_similar_only", "=", "False", ",", "\n", "seg_level", "=", "False", ",", "\n", "yaw_rand_range", "=", "0", ",", "\n", "img_w", "=", "512", ",", "\n", "img_h", "=", "512", ",", "\n", "map_w", "=", "None", ",", "\n", "map_h", "=", "None", ",", "\n", "incl_path", "=", "True", ",", "\n", "incl_endpoint", "=", "False", ",", "\n", "use_semantic_maps", "=", "False", ")", ":", "\n", "\n", "# If data is already loaded in memory, use it", "\n", "        ", "self", ".", "cuda", "=", "False", "\n", "self", ".", "env_list", "=", "env_list", "\n", "self", ".", "train_instr", ",", "self", ".", "dev_instr", ",", "self", ".", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "all_instr", "=", "{", "**", "self", ".", "train_instr", ",", "**", "self", ".", "dev_instr", ",", "**", "self", ".", "test_instr", "}", "\n", "self", ".", "token2term", ",", "self", ".", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "self", ".", "thesaurus", "=", "load_landmark_alignments", "(", ")", "\n", "self", ".", "include_instr_negatives", "=", "instr_negatives", "\n", "#if instr_negatives:", "\n", "#    self.similar_instruction_map = load_similar_instruction_map()", "\n", "self", ".", "instr_negatives_similar_only", "=", "instr_negatives_similar_only", "\n", "\n", "self", ".", "use_semantic_maps", "=", "use_semantic_maps", "\n", "\n", "self", ".", "img_w", "=", "img_w", "\n", "self", ".", "img_h", "=", "img_h", "\n", "\n", "if", "map_w", "is", "None", ":", "\n", "            ", "self", ".", "map_w", "=", "self", ".", "img_w", "\n", "self", ".", "map_h", "=", "self", ".", "img_h", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_w", "=", "map_w", "\n", "self", ".", "map_h", "=", "map_h", "\n", "\n", "", "self", ".", "yaw_rand_range", "=", "yaw_rand_range", "\n", "self", ".", "latest_img_dbg", "=", "None", "\n", "self", ".", "latest_rot_img_dbg", "=", "None", "\n", "\n", "self", ".", "incl_endpoint", "=", "incl_endpoint", "\n", "self", ".", "incl_path", "=", "incl_path", "\n", "\n", "# If the data is supposed to be at seg level (not nested envs + segs), then we can support batching", "\n", "# but we need to correctly infer the dataset size", "\n", "self", ".", "seg_level", "=", "seg_level", "\n", "if", "seg_level", ":", "\n", "            ", "self", ".", "seg_list", "=", "[", "]", "\n", "for", "env", "in", "self", ".", "env_list", ":", "\n", "                ", "for", "set_idx", ",", "set", "in", "enumerate", "(", "self", ".", "all_instr", "[", "env", "]", ")", ":", "\n", "                    ", "for", "seg_idx", ",", "seg", "in", "enumerate", "(", "set", "[", "\"instructions\"", "]", ")", ":", "\n", "                        ", "self", ".", "seg_list", ".", "append", "(", "[", "env", ",", "set_idx", ",", "seg_idx", "]", ")", "\n", "\n", "", "", "", "", "print", "(", "\"Initialzied dataset!\"", ")", "\n", "print", "(", "\"   yaw range : \"", "+", "str", "(", "self", ".", "yaw_rand_range", ")", ")", "\n", "print", "(", "\"   map size: \"", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ")", "\n", "print", "(", "\"   img size: \"", ",", "self", ".", "img_w", ",", "self", ".", "img_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.__len__": [[249, 251], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "env_list", ")", "if", "not", "self", ".", "seg_level", "else", "len", "(", "self", ".", "seg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.gen_instruction": [[252, 262], ["data_io.instructions.tokenize_instruction", "torch.LongTensor", "instruction_t.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction"], ["", "def", "gen_instruction", "(", "self", ",", "instruction", ")", ":", "\n", "        ", "tok_instruction", "=", "tokenize_instruction", "(", "instruction", ",", "self", ".", "word2token", ")", "\n", "instruction_t", "=", "torch", ".", "LongTensor", "(", "tok_instruction", ")", "\n", "\n", "# If we're doing segment level, we want to support batching later on.", "\n", "# Otherwise each instance is a batch in itself", "\n", "# TODO Move unsqueezing into the collate_fn", "\n", "if", "not", "self", ".", "seg_level", ":", "\n", "            ", "instruction_t", "=", "instruction_t", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "instruction_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.gen_neg_instructions": [[263, 289], ["random.choice", "data_io.instructions.tokenize_instruction", "torch.LongTensor().unsqueeze", "len", "len", "list", "random.choice", "list", "random.choice", "torch.LongTensor", "str", "top_down_dataset.TopDownDataset.similar_instruction_map.keys", "top_down_dataset.TopDownDataset.similar_instruction_map[].keys", "len", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction"], ["", "def", "gen_neg_instructions", "(", "self", ",", "env_id", ",", "seg_idx", ")", ":", "\n", "# If we are to be using similar instructions according to the json file, then", "\n", "# initialize choices with similar instructions. Otherwise let choices be empty, and they will", "\n", "# be filled in the following lines.", "\n", "        ", "if", "self", ".", "instr_negatives_similar_only", ":", "\n", "            ", "choices", "=", "self", ".", "similar_instruction_map", "[", "str", "(", "env_id", ")", "]", "[", "str", "(", "seg_idx", ")", "]", "\n", "", "else", ":", "\n", "            ", "choices", "=", "[", "]", "\n", "# If there are no similar instructions to this instruction, pick a completely random instruction", "\n", "", "if", "len", "(", "choices", ")", "==", "0", ":", "\n", "            ", "while", "len", "(", "choices", ")", "==", "0", ":", "\n", "                ", "env_options", "=", "list", "(", "self", ".", "similar_instruction_map", ".", "keys", "(", ")", ")", "\n", "random_env", "=", "random", ".", "choice", "(", "env_options", ")", "\n", "seg_options", "=", "list", "(", "self", ".", "similar_instruction_map", "[", "random_env", "]", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "seg_options", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "random_seg", "=", "random", ".", "choice", "(", "seg_options", ")", "\n", "choices", "=", "self", ".", "similar_instruction_map", "[", "random_env", "]", "[", "random_seg", "]", "\n", "\n", "", "", "pick", "=", "random", ".", "choice", "(", "choices", ")", "\n", "picked_env", "=", "pick", "[", "\"env_id\"", "]", "\n", "picked_seg", "=", "pick", "[", "\"seg_idx\"", "]", "\n", "picked_set", "=", "pick", "[", "\"set_idx\"", "]", "\n", "picked_instruction", "=", "self", ".", "all_instr", "[", "picked_env", "]", "[", "picked_set", "]", "[", "\"instructions\"", "]", "[", "picked_seg", "]", "[", "\"instruction\"", "]", "\n", "tok_fake_instruction", "=", "tokenize_instruction", "(", "picked_instruction", ",", "self", ".", "word2token", ")", "\n", "return", "torch", ".", "LongTensor", "(", "tok_fake_instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.gen_lm_aux_labels": [[290, 338], ["data_io.env.load_env_config", "data_io.env.get_landmark_locations_airsim", "transformations.pos_m_to_px", "top_down_dataset.apply_affine_on_pts", "torch.from_numpy().unsqueeze", "torch.LongTensor().unsqueeze", "torch.gt", "torch.lt", "torch.masked_select().view", "torch.masked_select().view", "data_io.instructions.get_mentioned_landmarks", "learning.inputs.common.empty_float_tensor().long", "enumerate", "numpy.array", "top_down_dataset.plot_path_on_img", "top_down_dataset.plot_path_on_img", "cv2.imshow", "cv2.imshow", "cv2.waitKey", "len", "numpy.asarray", "torch.from_numpy", "torch.LongTensor", "torch.masked_select", "torch.masked_select", "learning.inputs.common.empty_float_tensor", "mask.unsqueeze().expand_as", "list", "torch.masked_select().view.size", "mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine_on_pts", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_mentioned_landmarks", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "gen_lm_aux_labels", "(", "self", ",", "env_id", ",", "instruction", ",", "affine", ")", ":", "\n", "\n", "        ", "env_conf_json", "=", "load_env_config", "(", "env_id", ")", "\n", "landmark_names", ",", "landmark_indices", ",", "landmark_positions", "=", "get_landmark_locations_airsim", "(", "env_conf_json", ")", "\n", "landmark_pos_in_img", "=", "pos_m_to_px", "(", "np", ".", "asarray", "(", "landmark_positions", ")", "[", ":", ",", "0", ":", "2", "]", ",", "np", ".", "array", "(", "[", "self", ".", "map_w", ",", "self", ".", "map_h", "]", ")", ")", "\n", "landmark_pos_in_seg_img", "=", "apply_affine_on_pts", "(", "landmark_pos_in_img", ",", "affine", ")", "\n", "\n", "if", "False", ":", "\n", "            ", "plot_path_on_img", "(", "self", ".", "latest_img_dbg", ",", "landmark_pos_in_img", ")", "\n", "plot_path_on_img", "(", "self", ".", "latest_rot_img_dbg", ",", "landmark_pos_in_seg_img", ")", "\n", "cv2", ".", "imshow", "(", "\"img\"", ",", "self", ".", "latest_img_dbg", ")", "\n", "cv2", ".", "imshow", "(", "\"rot_img\"", ",", "self", ".", "latest_rot_img_dbg", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "", "landmark_pos_t", "=", "torch", ".", "from_numpy", "(", "landmark_pos_in_seg_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "landmark_indices_t", "=", "torch", ".", "LongTensor", "(", "landmark_indices", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "mask1", "=", "torch", ".", "gt", "(", "landmark_pos_t", ",", "0", ")", "\n", "mask2", "=", "torch", ".", "lt", "(", "landmark_pos_t", ",", "self", ".", "img_w", ")", "\n", "mask", "=", "mask1", "*", "mask2", "\n", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "*", "mask", "[", ":", ",", ":", ",", "1", "]", "\n", "mask", "=", "mask", "\n", "\n", "landmark_pos_t", "=", "torch", ".", "masked_select", "(", "landmark_pos_t", ",", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "landmark_pos_t", ")", ")", ".", "view", "(", "\n", "[", "-", "1", ",", "2", "]", ")", "\n", "landmark_indices_t", "=", "torch", ".", "masked_select", "(", "landmark_indices_t", ",", "mask", ")", ".", "view", "(", "[", "-", "1", "]", ")", "\n", "\n", "mentioned_names", ",", "mentioned_indices", "=", "get_mentioned_landmarks", "(", "self", ".", "thesaurus", ",", "instruction", ")", "\n", "mentioned_labels_t", "=", "empty_float_tensor", "(", "list", "(", "landmark_indices_t", ".", "size", "(", ")", ")", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "landmark_idx_present", "in", "enumerate", "(", "landmark_indices_t", ")", ":", "\n", "            ", "if", "landmark_idx_present", "in", "mentioned_indices", ":", "\n", "                ", "mentioned_labels_t", "[", "i", "]", "=", "1", "\n", "\n", "", "", "if", "len", "(", "landmark_indices_t", ")", ">", "0", ":", "\n", "            ", "aux_label", "=", "{", "\n", "\"lm_pos\"", ":", "landmark_pos_t", ",", "\n", "\"lm_indices\"", ":", "landmark_indices_t", ",", "\n", "\"lm_mentioned\"", ":", "mentioned_labels_t", ",", "\n", "\"lm_visible\"", ":", "mask", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "aux_label", "=", "{", "\n", "\"lm_pos\"", ":", "[", "]", ",", "\n", "\"lm_indices\"", ":", "[", "]", ",", "\n", "\"lm_mentioned\"", ":", "[", "]", ",", "\n", "\"lm_visible\"", ":", "[", "]", "\n", "}", "\n", "", "return", "aux_label", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.get_item": [[339, 409], ["data_io.env.load_path", "data_io.env.load_env_img", "enumerate", "top_down_dataset.get_start_pt_and_yaw", "top_down_dataset.get_affine_matrix", "top_down_dataset.gen_top_down_image", "top_down_dataset.gen_top_down_labels", "top_down_dataset.TopDownDataset.gen_instruction", "top_down_dataset.TopDownDataset.gen_lm_aux_labels", "data[].append", "data[].append", "data[].append", "data[].append", "data[].append", "data[].append", "data[].append", "utils.dict_tools.dictlist_append", "print", "print", "transformations.cf_to_img", "env_image.copy.copy.copy", "top_down_dataset.plot_path_on_img", "cv2.waitKey", "top_down_dataset.TopDownDataset.gen_neg_instructions", "data[].append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_start_pt_and_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_affine_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.gen_top_down_image", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.gen_top_down_labels", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.gen_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.gen_lm_aux_labels", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dictlist_append", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.gen_neg_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_item", "(", "self", ",", "env_id", ",", "set_idx", ",", "seg_idx", ")", ":", "\n", "\n", "        ", "path", "=", "load_path", "(", "env_id", ")", "\n", "env_image", "=", "load_env_img", "(", "env_id", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ")", "\n", "\n", "self", ".", "latest_img_dbg", "=", "env_image", "\n", "\n", "data", "=", "{", "\n", "\"images\"", ":", "[", "]", ",", "\n", "\"instr\"", ":", "[", "]", ",", "\n", "\"traj_labels\"", ":", "[", "]", ",", "\n", "\"affines_g_to_s\"", ":", "[", "]", ",", "\n", "\"lm_pos\"", ":", "[", "]", ",", "\n", "\"lm_indices\"", ":", "[", "]", ",", "\n", "\"lm_mentioned\"", ":", "[", "]", ",", "\n", "\"lm_visible\"", ":", "[", "]", ",", "\n", "\"set_idx\"", ":", "[", "]", ",", "\n", "\"seg_idx\"", ":", "[", "]", ",", "\n", "\"env_id\"", ":", "[", "]", "\n", "}", "\n", "\n", "if", "self", ".", "include_instr_negatives", ":", "\n", "            ", "data", "[", "\"neg_instr\"", "]", "=", "[", "]", "\n", "\n", "# Somehow load the instruction with the start and end indices for each of the N segments", "\n", "", "if", "self", ".", "seg_level", ":", "\n", "            ", "instruction_segments", "=", "[", "self", ".", "all_instr", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "instruction_segments", "=", "self", ".", "all_instr", "[", "env_id", "]", "[", "0", "]", "[", "\"instructions\"", "]", "\n", "\n", "", "for", "seg_idx", ",", "seg", "in", "enumerate", "(", "instruction_segments", ")", ":", "\n", "            ", "start_idx", "=", "seg", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "seg", "[", "\"end_idx\"", "]", "\n", "instruction", "=", "seg", "[", "\"instruction\"", "]", "\n", "start_pt", ",", "dir_yaw", "=", "get_start_pt_and_yaw", "(", "path", ",", "start_idx", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ",", "self", ".", "yaw_rand_range", ")", "\n", "if", "start_pt", "is", "None", ":", "\n", "                ", "continue", "\n", "", "affine", "=", "get_affine_matrix", "(", "start_pt", ",", "dir_yaw", ",", "self", ".", "img_w", ",", "self", ".", "img_h", ")", "\n", "\n", "if", "DEBUG", ":", "\n", "                ", "env_image", "=", "self", ".", "latest_img_dbg", "\n", "print", "(", "\"Start Pt: \"", ",", "start_pt", ")", "\n", "print", "(", "\"Start Yaw: \"", ",", "dir_yaw", ")", "\n", "path_img", "=", "cf_to_img", "(", "path", ",", "[", "env_image", ".", "shape", "[", "0", "]", ",", "env_image", ".", "shape", "[", "1", "]", "]", ")", "\n", "seg_path", "=", "path_img", "[", "start_idx", ":", "end_idx", "]", "\n", "env_image", "=", "env_image", ".", "copy", "(", ")", "\n", "plot_path_on_img", "(", "env_image", ",", "seg_path", ")", "\n", "\n", "", "seg_img_t", "=", "gen_top_down_image", "(", "env_image", ",", "affine", ",", "self", ".", "img_w", ",", "self", ".", "img_h", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ")", "\n", "seg_labels_t", "=", "gen_top_down_labels", "(", "path", "[", "start_idx", ":", "end_idx", "]", ",", "affine", ",", "self", ".", "img_w", ",", "self", ".", "img_h", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ",", "self", ".", "incl_path", ",", "self", ".", "incl_endpoint", ")", "\n", "instruction_t", "=", "self", ".", "gen_instruction", "(", "instruction", ")", "\n", "aux_label", "=", "self", ".", "gen_lm_aux_labels", "(", "env_id", ",", "instruction", ",", "affine", ")", "\n", "\n", "if", "DEBUG", ":", "\n", "                ", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "", "if", "self", ".", "include_instr_negatives", ":", "\n", "                ", "neg_instruction_t", "=", "self", ".", "gen_neg_instructions", "(", "env_id", ",", "seg_idx", ")", "\n", "data", "[", "\"neg_instr\"", "]", ".", "append", "(", "neg_instruction_t", ")", "\n", "\n", "", "data", "[", "\"images\"", "]", ".", "append", "(", "seg_img_t", ")", "\n", "data", "[", "\"instr\"", "]", ".", "append", "(", "instruction_t", ")", "\n", "data", "[", "\"traj_labels\"", "]", ".", "append", "(", "seg_labels_t", ")", "\n", "data", "[", "\"affines_g_to_s\"", "]", ".", "append", "(", "affine", ")", "\n", "data", "[", "\"env_id\"", "]", ".", "append", "(", "env_id", ")", "\n", "data", "[", "\"set_idx\"", "]", ".", "append", "(", "set_idx", ")", "\n", "data", "[", "\"seg_idx\"", "]", ".", "append", "(", "seg_idx", ")", "\n", "data", "=", "dictlist_append", "(", "data", ",", "aux_label", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.get_top_down_image_env": [[410, 436], ["data_io.env.load_path", "data_io.env.load_env_img", "learning.inputs.vision.standardize_image", "torch.from_numpy().unsqueeze().float", "numpy.zeros", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image"], ["", "@", "DeprecationWarning", "\n", "# TODO: Get rid of this. This functionality moved into aux_data_providers", "\n", "def", "get_top_down_image_env", "(", "self", ",", "env_id", ",", "egocentric", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        To be called externally to retrieve a top-down environment image oriented with the start of the requested segment\n        :param env_id:  environment id\n        :return:\n        \"\"\"", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "env_image_in", "=", "load_env_img", "(", "env_id", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ")", "\n", "\n", "# If we need to return a bigger image resolution than we loaded", "\n", "if", "self", ".", "map_w", "!=", "self", ".", "img_w", "or", "self", ".", "map_h", "!=", "self", ".", "img_h", ":", "\n", "            ", "env_image", "=", "np", ".", "zeros", "(", "[", "self", ".", "img_h", ",", "self", ".", "img_w", ",", "env_image_in", ".", "shape", "[", "2", "]", "]", ")", "\n", "env_image", "[", "0", ":", "self", ".", "map_h", ",", "0", ":", "self", ".", "map_w", ",", ":", "]", "=", "env_image_in", "\n", "", "else", ":", "\n", "            ", "env_image", "=", "env_image_in", "\n", "\n", "#path_img = cf_to_img(path, [env_image.shape[0], env_image.shape[1]])", "\n", "#self.plot_path_on_img(env_image, path_img)", "\n", "\n", "", "env_image", "=", "standardize_image", "(", "env_image", ")", "\n", "env_img_t", "=", "torch", ".", "from_numpy", "(", "env_image", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "#presenter = Presenter()", "\n", "#presenter.show_image(env_img_t[0], \"data_img\", torch=True, scale=1)", "\n", "return", "env_img_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.get_top_down_image": [[437, 469], ["data_io.env.load_path", "data_io.env.load_env_img", "transformations.cf_to_img", "top_down_dataset.plot_path_on_img", "top_down_dataset.get_start_pt_and_yaw", "top_down_dataset.get_affine_matrix", "top_down_dataset.TopDownDataset.gen_top_down_image", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_start_pt_and_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_affine_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.gen_top_down_image"], ["", "@", "DeprecationWarning", "\n", "# TODO: Probably get rid of this", "\n", "def", "get_top_down_image", "(", "self", ",", "env_id", ",", "set_idx", ",", "seg_idx", ")", ":", "\n", "        ", "\"\"\"\n        To be called externally to retrieve a top-down environment image oriented with the start of the requested segment\n        :param env_id:  environment id\n        :param set_idx: instruction set number\n        :param seg_idx: segment index\n        :return:\n        \"\"\"", "\n", "# TODO: Revise the bazillion versions of poses - get rid of this specific one", "\n", "path", "=", "load_path", "(", "env_id", ")", "\n", "env_image", "=", "load_env_img", "(", "env_id", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ")", "\n", "\n", "path_img", "=", "cf_to_img", "(", "path", ",", "[", "env_image", ".", "shape", "[", "0", "]", ",", "env_image", ".", "shape", "[", "1", "]", "]", ")", "\n", "plot_path_on_img", "(", "env_image", ",", "path_img", ")", "\n", "\n", "seg", "=", "self", ".", "all_instr", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_idx", "]", "\n", "\n", "start_idx", "=", "seg", "[", "\"start_idx\"", "]", "\n", "start_pt", ",", "dir_yaw", "=", "get_start_pt_and_yaw", "(", "path", ",", "start_idx", ",", "self", ".", "map_w", ",", "self", ".", "map_h", ",", "self", ".", "yaw_rand_range", ")", "\n", "if", "start_pt", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "affine", "=", "get_affine_matrix", "(", "start_pt", ",", "dir_yaw", ")", "\n", "seg_img_t", "=", "self", ".", "gen_top_down_image", "(", "env_image", ",", "affine", ")", "\n", "#seg_img_t = seg_img_t.permute(0, 1, 3, 2)", "\n", "\n", "# A 2D pose is specified as [pos_x, pos_y, yaw]", "\n", "# A 3D pose would be [pos_x, pos_y, pos_z, r_x, r_y, r_z, r_w]", "\n", "img_pose_2d", "=", "{", "\"pos\"", ":", "start_pt", ",", "\"yaw\"", ":", "dir_yaw", "}", "\n", "img_pose_2d_t", "=", "torch", ".", "FloatTensor", "(", "[", "start_pt", "[", "0", "]", ",", "start_pt", "[", "1", "]", ",", "dir_yaw", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "seg_img_t", ",", "img_pose_2d_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.__getitem__": [[470, 481], ["top_down_dataset.TopDownDataset.get_item"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.get_item"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "seg_level", ":", "\n", "            ", "env_id", "=", "self", ".", "seg_list", "[", "idx", "]", "[", "0", "]", "\n", "set_idx", "=", "self", ".", "seg_list", "[", "idx", "]", "[", "1", "]", "\n", "seg_idx", "=", "self", ".", "seg_list", "[", "idx", "]", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "env_id", "=", "self", ".", "env_list", "[", "idx", "]", "\n", "set_idx", "=", "0", "\n", "seg_idx", "=", "0", "\n", "\n", "", "return", "self", ".", "get_item", "(", "env_id", ",", "set_idx", ",", "seg_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.set_word2token": [[482, 485], ["None"], "methods", ["None"], ["", "def", "set_word2token", "(", "self", ",", "token2term", ",", "word2token", ")", ":", "\n", "        ", "self", ".", "token2term", "=", "token2term", "\n", "self", ".", "word2token", "=", "word2token", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.collate_one": [[486, 492], ["torch.stack", "torch.autograd.Variable", "one.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "collate_one", "(", "self", ",", "one", ")", ":", "\n", "        ", "one", "=", "torch", ".", "stack", "(", "one", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "one", "=", "one", ".", "cuda", "(", ")", "\n", "", "one", "=", "Variable", "(", "one", ")", "\n", "return", "one", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.TopDownDataset.collate_fn": [[493, 519], ["utils.dict_tools.dict_zip", "utils.dict_tools.dict_zip", "utils.dict_tools.dict_map", "torch.cat", "torch.cat", "learning.inputs.sequence.sequence_list_to_masked_tensor", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_zip", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_zip", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_map", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_list_to_masked_tensor"], ["", "def", "collate_fn", "(", "self", ",", "list_of_samples", ")", ":", "\n", "        ", "if", "None", "in", "list_of_samples", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "not", "self", ".", "seg_level", ":", "\n", "            ", "data", "=", "dict_zip", "(", "list_of_samples", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "# Keep only those samples that have data", "\n", "            ", "list_of_samples", "=", "[", "sample", "for", "sample", "in", "list_of_samples", "if", "len", "(", "sample", "[", "\"images\"", "]", ")", ">", "0", "]", "\n", "data", "=", "dict_zip", "(", "list_of_samples", ")", "\n", "# each is a list of lists, where the inner lists contain a single element each. Turn it into a list of elements", "\n", "data", "=", "dict_map", "(", "data", ",", "lambda", "m", ":", "[", "a", "[", "0", "]", "for", "a", "in", "m", "]", ")", "#, [\"images\", \"instr\", \"traj_labels\", \"lm_pos\", \"lm_idx\", \"lm_mentioned\", \"lm_visible\"])", "\n", "\n", "if", "\"images\"", "not", "in", "data", ":", "\n", "                ", "return", "None", "\n", "\n", "# images and labels are not sequences and can be easily cat into a batch", "\n", "", "data", "[", "\"images\"", "]", "=", "torch", ".", "cat", "(", "data", "[", "\"images\"", "]", ",", "0", ")", "\n", "data", "[", "\"traj_labels\"", "]", "=", "torch", ".", "cat", "(", "data", "[", "\"traj_labels\"", "]", ",", "0", ")", "\n", "\n", "# Instructions are variable length, so we need to pad them in a tensor that has space for the longest instruction", "\n", "data", "[", "\"instr\"", "]", ",", "data", "[", "\"instr_mask\"", "]", "=", "sequence_list_to_masked_tensor", "(", "data", "[", "\"instr\"", "]", ")", "\n", "\n", "# All the other things are sequences and we just leave them as lists. The model should sort it out.", "\n", "return", "data", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_affine_matrix": [[32, 42], ["numpy.array", "transformations.get_affine_trans_2d", "transformations.get_affine_rot_2d", "transformations.get_affine_trans_2d", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_rot_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d"], ["def", "get_affine_matrix", "(", "start_pt", ",", "dir_yaw", ",", "img_w", ",", "img_h", ")", ":", "\n", "    ", "img_origin", "=", "np", ".", "array", "(", "[", "img_w", "/", "2", ",", "img_h", "/", "2", "]", ")", "\n", "\n", "affine_t", "=", "get_affine_trans_2d", "(", "-", "start_pt", ")", "\n", "affine_rot", "=", "get_affine_rot_2d", "(", "-", "dir_yaw", ")", "\n", "affine_t2", "=", "get_affine_trans_2d", "(", "img_origin", ")", "\n", "\n", "affine_total", "=", "np", ".", "dot", "(", "affine_t2", ",", "np", ".", "dot", "(", "affine_rot", ",", "affine_t", ")", ")", "\n", "\n", "return", "affine_total", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.get_start_pt_and_yaw": [[44, 67], ["transformations.cf_to_img", "numpy.array", "geometry.vec_to_yaw", "random.gauss", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw"], ["", "def", "get_start_pt_and_yaw", "(", "path", ",", "start_idx", ",", "map_w", ",", "map_h", ",", "yaw_rand_range", ")", ":", "\n", "    ", "path_img", "=", "cf_to_img", "(", "path", ",", "np", ".", "array", "(", "[", "map_w", ",", "map_h", "]", ")", ")", "\n", "if", "start_idx", ">", "len", "(", "path", ")", "-", "2", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "start_pt", "=", "path_img", "[", "start_idx", "]", "\n", "\n", "# Due to the way the data is collected, turns result in multiple subsequent points at the same location,", "\n", "# which messes up the start orientation. That's why we search for the next point that isn't the same as current pt", "\n", "next_idx", "=", "start_idx", "+", "1", "\n", "next_pt", "=", "path_img", "[", "next_idx", "]", "\n", "while", "(", "next_pt", "==", "start_pt", ")", ".", "all", "(", ")", "and", "next_idx", "<", "len", "(", "path", ")", "-", "1", ":", "\n", "        ", "next_idx", "+=", "1", "\n", "next_pt", "=", "path_img", "[", "next_idx", "]", "\n", "\n", "", "dir_vec", "=", "next_pt", "-", "start_pt", "\n", "dir_yaw", "=", "vec_to_yaw", "(", "dir_vec", ")", "-", "np", ".", "pi", "/", "2", "\n", "\n", "if", "yaw_rand_range", ">", "0", ":", "\n", "        ", "dir_yaw_offset", "=", "random", ".", "gauss", "(", "0", ",", "yaw_rand_range", ")", "\n", "#dir_yaw_offset = random.uniform(-yaw_rand_range, yaw_rand_range)", "\n", "dir_yaw", "=", "dir_yaw", "+", "dir_yaw_offset", "\n", "", "return", "start_pt", ",", "dir_yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img": [[69, 83], ["int", "int", "skimage.line", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "plot_path_on_img", "(", "img", ",", "path", ")", ":", "\n", "    ", "prev_x", "=", "None", "\n", "prev_y", "=", "None", "\n", "for", "coord", "in", "path", ":", "\n", "        ", "x", "=", "int", "(", "coord", "[", "0", "]", ")", "\n", "y", "=", "int", "(", "coord", "[", "1", "]", ")", "\n", "if", "prev_x", "is", "not", "None", "and", "prev_y", "is", "not", "None", ":", "\n", "            ", "rr", ",", "cc", "=", "draw", ".", "line", "(", "prev_x", ",", "prev_y", ",", "x", ",", "y", ")", "\n", "rr", "=", "np", ".", "clip", "(", "rr", ",", "0", ",", "img", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "cc", "=", "np", ".", "clip", "(", "cc", ",", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "img", "[", "rr", ",", "cc", "]", "=", "1.0", "\n", "", "prev_x", "=", "x", "\n", "prev_y", "=", "y", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_point_on_img": [[85, 100], ["range", "int", "int", "range"], "function", ["None"], ["", "def", "plot_point_on_img", "(", "img", ",", "point", ",", "size", ")", ":", "\n", "    ", "point", "=", "[", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "-", "size", ",", "size", ")", ":", "\n", "        ", "x", "=", "point", "[", "0", "]", "+", "i", "\n", "if", "x", "<", "0", "or", "x", ">=", "img", ".", "shape", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "", "for", "j", "in", "range", "(", "-", "size", ",", "size", ")", ":", "\n", "            ", "y", "=", "point", "[", "1", "]", "+", "j", "\n", "if", "y", "<", "0", "or", "y", ">=", "img", ".", "shape", "[", "1", "]", ":", "\n", "                ", "continue", "\n", "", "if", "i", "**", "2", "+", "j", "**", "2", ">", "size", "**", "2", ":", "\n", "                ", "continue", "\n", "\n", "", "img", "[", "x", "]", "[", "y", "]", "=", "1.0", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_dot_on_img": [[102, 106], ["int", "int"], "function", ["None"], ["", "def", "plot_dot_on_img", "(", "img", ",", "dot", ",", "brightness", "=", "1.0", ")", ":", "\n", "    ", "dot", "=", "[", "int", "(", "dot", "[", "0", "]", ")", ",", "int", "(", "dot", "[", "1", "]", ")", "]", "\n", "img", "[", "dot", "[", "0", "]", ",", "dot", "[", "1", "]", "]", "=", "brightness", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.swap_affine_xy": [[108, 112], ["None"], "function", ["None"], ["", "def", "swap_affine_xy", "(", "affine", ")", ":", "\n", "    ", "affine_swap", "=", "affine", "[", "[", "1", ",", "0", "]", "]", "\n", "affine_swap", "=", "affine_swap", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "return", "affine_swap", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine": [[114, 124], ["top_down_dataset.swap_affine_xy", "numpy.array", "cv2.warpAffine", "tuple", "len", "len", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.swap_affine_xy"], ["", "def", "apply_affine", "(", "img", ",", "affine_mat", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "# swap x and y axis, because OpenCV uses the y,x addressing convention instead of x,y.", "\n", "    ", "affine_swap", "=", "swap_affine_xy", "(", "affine_mat", ")", "\n", "#affine_swap = affine_mat[[0, 1]]", "\n", "out_crop_size", "=", "np", ".", "array", "(", "[", "crop_w", ",", "crop_h", "]", ")", "\n", "\n", "out", "=", "cv2", ".", "warpAffine", "(", "img", ",", "affine_swap", ",", "tuple", "(", "out_crop_size", ")", ")", "\n", "if", "len", "(", "out", ".", "shape", ")", "<", "len", "(", "img", ".", "shape", ")", ":", "\n", "        ", "out", "=", "np", ".", "expand_dims", "(", "out", ",", "2", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine_on_pts": [[126, 134], ["numpy.ones", "numpy.zeros_like", "range", "numpy.matmul"], "function", ["None"], ["", "def", "apply_affine_on_pts", "(", "pts", ",", "affine", ")", ":", "\n", "    ", "pts_aff", "=", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "#affine = self.swap_affine_xy(affine)", "\n", "pts_aff", "[", ":", ",", "0", ":", "2", "]", "=", "pts", "\n", "pts_out", "=", "np", ".", "zeros_like", "(", "pts", ")", "\n", "for", "i", "in", "range", "(", "pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "pts_out", "[", "i", "]", "[", "0", ":", "2", "]", "=", "np", ".", "matmul", "(", "affine", ",", "pts_aff", "[", "i", "]", ")", "[", "0", ":", "2", "]", "\n", "", "return", "pts_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.gen_top_down_labels": [[136, 167], ["numpy.zeros().astype", "transformations.cf_to_img", "top_down_dataset.plot_path_on_img", "top_down_dataset.apply_affine", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "learning.inputs.vision.standardize_2d_prob_dist", "learning.inputs.vision.standardize_2d_prob_dist", "torch.from_numpy().unsqueeze().float", "numpy.array", "len", "top_down_dataset.plot_dot_on_img", "cv2.imshow", "cv2.imshow", "cv2.waitKey", "numpy.zeros", "numpy.concatenate", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset_sm.TopDownDatasetSM.cf_to_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_2d_prob_dist", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_dot_on_img"], ["", "def", "gen_top_down_labels", "(", "path", ",", "affine", ",", "img_w", ",", "img_h", ",", "map_w", ",", "map_h", ",", "incl_path", "=", "True", ",", "incl_endp", "=", "True", ")", ":", "\n", "    ", "seg_labels", "=", "np", ".", "zeros", "(", "[", "img_w", ",", "img_h", ",", "2", "]", ")", ".", "astype", "(", "float", ")", "\n", "path_in_img", "=", "cf_to_img", "(", "path", ",", "np", ".", "array", "(", "[", "map_w", ",", "map_h", "]", ")", ")", "\n", "gauss_sigma", "=", "map_w", "/", "96", "\n", "\n", "seg_labels", "[", ":", ",", ":", ",", "0", "]", "=", "plot_path_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "0", "]", ",", "path_in_img", ")", "\n", "if", "len", "(", "path_in_img", ")", ">", "1", ":", "\n", "        ", "seg_labels", "[", ":", ",", ":", ",", "1", "]", "=", "plot_dot_on_img", "(", "seg_labels", "[", ":", ",", ":", ",", "1", "]", ",", "path_in_img", "[", "-", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "", "seg_labels_rot", "=", "apply_affine", "(", "seg_labels", ",", "affine", ",", "img_w", ",", "img_h", ")", "\n", "seg_labels_rot", "[", ":", ",", ":", ",", "0", "]", "=", "gaussian_filter", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "0", "]", ",", "gauss_sigma", ")", "\n", "seg_labels_rot", "[", ":", ",", ":", ",", "1", "]", "=", "gaussian_filter", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "1", "]", ",", "gauss_sigma", ")", "\n", "\n", "# Standardize both channels separately (each has mean zero, unit variance)", "\n", "seg_labels_path", "=", "standardize_2d_prob_dist", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "seg_labels_endpt", "=", "standardize_2d_prob_dist", "(", "seg_labels_rot", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "\n", "if", "DEBUG", ":", "\n", "        ", "cv2", ".", "imshow", "(", "\"l_traj\"", ",", "seg_labels_path", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "cv2", ".", "imshow", "(", "\"l_endpt\"", ",", "seg_labels_endpt", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "", "if", "incl_path", "and", "not", "incl_endp", ":", "\n", "        ", "seg_labels_rot", "=", "seg_labels_path", "\n", "", "elif", "incl_endp", "and", "not", "incl_path", ":", "\n", "        ", "seg_labels_rot", "=", "seg_labels_endpt", "\n", "", "else", ":", "\n", "        ", "seg_labels_rot", "=", "np", ".", "concatenate", "(", "(", "seg_labels_path", ",", "seg_labels_endpt", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "seg_labels_t", "=", "torch", ".", "from_numpy", "(", "seg_labels_rot", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "return", "seg_labels_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.gen_top_down_image": [[169, 185], ["env_top_down_image.copy", "top_down_dataset.apply_affine", "learning.inputs.vision.standardize_image", "torch.from_numpy().unsqueeze().float", "cv2.imshow", "cv2.waitKey", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.apply_affine", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image"], ["", "def", "gen_top_down_image", "(", "env_top_down_image", ",", "affine", ",", "img_w", ",", "img_h", ",", "map_w", ",", "map_h", ")", ":", "\n", "#top_down_image = load_env_img(env_id)", "\n", "# TODO: Check for overflowz", "\n", "    ", "seg_img", "=", "env_top_down_image", ".", "copy", "(", ")", "\n", "seg_img_rot", "=", "apply_affine", "(", "seg_img", ",", "affine", ",", "img_w", ",", "img_h", ")", "\n", "\n", "if", "DEBUG", ":", "\n", "        ", "cv2", ".", "imshow", "(", "\"rot_top\"", ",", "seg_img_rot", ")", "\n", "cv2", ".", "waitKey", "(", "10", ")", "\n", "\n", "#self.latest_rot_img_dbg = seg_img_rot", "\n", "\n", "", "seg_img_rot", "=", "standardize_image", "(", "seg_img_rot", ")", "\n", "seg_img_t", "=", "torch", ".", "from_numpy", "(", "seg_img_rot", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "return", "seg_img_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.__init__": [[23, 55], ["utils.simple_profiler.SimpleProfiler", "fpv_image_dataset.FpvImageDataset.prof.tick", "fpv_image_dataset.FpvImageDataset.data_from_env_ids", "fpv_image_dataset.FpvImageDataset.prof.tick", "fpv_image_dataset.FpvImageDataset.compute_pos_idx", "fpv_image_dataset.FpvImageDataset.prof.tick", "fpv_image_dataset.FpvImageDataset.filter_none", "fpv_image_dataset.FpvImageDataset.prof.tick", "fpv_image_dataset.FpvImageDataset.update_dic", "fpv_image_dataset.FpvImageDataset.prof.tick", "fpv_image_dataset.FpvImageDataset.prof.print_stats", "parameters.get_current_parameters", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.data_from_env_ids", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.compute_pos_idx", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.filter_none", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.update_dic", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "env_ids", ",", "dataset_name", ",", "eval", ",", "real", ",", "real_poses", "=", "None", ")", ":", "\n", "        ", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "real", "=", "real", "\n", "if", "real_poses", ":", "\n", "            ", "self", ".", "real_poses", "=", "real_poses", "\n", "", "else", ":", "\n", "            ", "self", ".", "real_poses", "=", "real", "\n", "", "self", ".", "eval", "=", "eval", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "env_ids", "=", "env_ids", "\n", "\n", "# Assume that these parameters include cam_h_fov, img_w, img_h", "\n", "self", ".", "model_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Model\"", "]", "\n", "self", ".", "cam_h_fov", "=", "self", ".", "model_params", "[", "\"cam_h_fov\"", "]", "\n", "self", ".", "img_w", "=", "self", ".", "model_params", "[", "\"img_w\"", "]", "\n", "self", ".", "img_h", "=", "self", ".", "model_params", "[", "\"img_h\"", "]", "\n", "self", ".", "data_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "\n", "self", ".", "load_img_w", "=", "self", ".", "data_params", "[", "\"load_img_w\"", "]", "\n", "self", ".", "load_img_h", "=", "self", ".", "data_params", "[", "\"load_img_h\"", "]", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "self", ".", "instructions", ",", "self", ".", "poses", ",", "self", ".", "images", ",", "self", ".", "env_ids_decompressed", "=", "self", ".", "data_from_env_ids", "(", "env_ids", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"data from env\"", ")", "\n", "self", ".", "lm_pos_fpv", ",", "self", ".", "lm_idx", ",", "self", ".", "lm_pos_map", "=", "self", ".", "compute_pos_idx", "(", "add_null", "=", "0", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"compute pos idx\"", ")", "\n", "self", ".", "filter_none", "(", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"filter none\"", ")", "\n", "\n", "self", ".", "update_dic", "(", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"update dic\"", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "env_ids_decompressed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.__getitem__": [[59, 118], ["utils.simple_profiler.SimpleProfiler", "utils.simple_profiler.SimpleProfiler.tick", "type", "utils.simple_profiler.SimpleProfiler.tick", "learning.datasets.fpv_data_augmentation.data_augmentation", "learning.inputs.vision.standardize_image", "torch.from_numpy", "torch.tensor", "torch.tensor", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.print_stats", "learning.datasets.fpv_data_augmentation.data_augmentation", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.data_augmentation", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_data_augmentation.data_augmentation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "if", "type", "(", "index", ")", "==", "int", ":", "\n", "            ", "image", "=", "self", ".", "images", "[", "index", "]", "\n", "lm_pos_fpv", "=", "self", ".", "lm_pos_fpv", "[", "index", "]", "\n", "lm_indices", "=", "self", ".", "lm_idx", "[", "index", "]", "\n", "lm_pos_map", "=", "self", ".", "lm_pos_map", "[", "index", "]", "\n", "prof", ".", "tick", "(", "\"retrieve data\"", ")", "\n", "\n", "# data augmentation. If eval no data augmentation.", "\n", "out_img", ",", "out_lm_indices", ",", "out_lm_pos_fpv", "=", "data_augmentation", "(", "\n", "image", ",", "lm_indices", ",", "lm_pos_fpv", ",", "self", ".", "img_h", ",", "self", ".", "img_w", ",", "self", ".", "eval", ",", "prof", ")", "\n", "if", "(", "len", "(", "out_lm_indices", ")", "==", "0", ")", "|", "(", "out_lm_indices", "is", "None", ")", ":", "\n", "                ", "out_img", ",", "out_lm_indices", ",", "out_lm_pos_fpv", "=", "data_augmentation", "(", "\n", "image", ",", "lm_indices", ",", "lm_pos_fpv", ",", "self", ".", "img_h", ",", "self", ".", "img_w", ",", "True", ",", "prof", ")", "\n", "\n", "", "out_img", "=", "standardize_image", "(", "np", ".", "array", "(", "out_img", ")", ")", "\n", "out_img", "=", "torch", ".", "from_numpy", "(", "out_img", ")", "\n", "\n", "out_lm_indices", "=", "torch", ".", "tensor", "(", "out_lm_indices", ")", "\n", "out_lm_pos_fpv", "=", "torch", ".", "tensor", "(", "out_lm_pos_fpv", ")", "\n", "\n", "sample", "=", "{", "\"poses\"", ":", "self", ".", "poses", "[", "index", "]", ",", "\n", "\"instructions\"", ":", "[", "]", ",", "# self.instructions[index],", "\n", "\"images\"", ":", "out_img", ",", "\n", "\"env_ids\"", ":", "self", ".", "env_ids_decompressed", "[", "index", "]", ",", "\n", "\"lm_pos_fpv\"", ":", "out_lm_pos_fpv", ",", "\n", "\"lm_indices\"", ":", "out_lm_indices", ",", "\n", "\"lm_pos_map\"", ":", "lm_pos_map", "}", "\n", "prof", ".", "tick", "(", "\"dic\"", ")", "\n", "prof", ".", "print_stats", "(", ")", "\n", "\n", "", "\"\"\"\n        elif type(index) == list:\n            out_images_list, out_lm_indices_list, out_lm_pos_fpv_list = [], [], []\n            for i in index:\n                image = self.images[i]\n                lm_pos_fpv = self.lm_pos_fpv[i]\n                lm_indices = self.lm_idx[i]\n\n                out_img, out_lm_indices, out_lm_pos_fpv = data_augmentation(image, lm_indices, lm_pos_fpv, IMG_HEIGHT, IMG_WIDTH, self.eval, prof)\n\n                if (len(out_lm_indices) == 0) | (out_lm_indices is None):\n                    out_img, out_lm_indices, out_lm_pos_fpv = data_augmentation(image, lm_indices, lm_pos_fpv, IMG_HEIGHT, IMG_WIDTH, True, prof)\n\n                out_images_list.append(out_img)\n                out_lm_indices_list.append(out_lm_indices)\n                out_lm_pos_fpv_list.append(out_lm_pos_fpv)\n\n            sample = {\"poses\": [self.poses[i] for i in index],\n                      \"instructions\": [],  # self.instructions[index],\n                      \"lm_mentioned\": [],\n                      \"images\": out_images_list,\n                      \"env_ids\": [self.env_ids_decompressed[i] for i in index],\n                      \"lm_pos_fpv\": out_lm_pos_fpv_list,\n                      \"lm_idx\": out_lm_indices_list}\n        \"\"\"", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.data_from_env_ids": [[120, 177], ["print", "data_io.paths.get_poses_dir", "data_io.paths.get_fpv_img_flight_dir", "numpy.sort", "numpy.sort", "os.listdir", "print", "numpy.random.choice", "gen_imgpath", "os.listdir", "f.endswith", "os.listdir", "len", "len", "print", "int", "int", "print", "os.path.join", "os.path.exists", "gen_imgpath", "open", "PIL.Image.open().resize", "images.append", "env_ids_decompressed.append", "f.endswith", "f.endswith", "os.listdir", "os.listdir", "os.path.join", "poses.append", "f.replace().split", "f.endswith", "f.endswith", "len", "json.load", "PIL.Image.open", "f.replace"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_poses_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_fpv_img_flight_dir", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "data_from_env_ids", "(", "self", ",", "env_ids", ",", "proba_selection", "=", "1.0", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "poses", "=", "[", "]", "\n", "# list of all env_ids (with duplicates)", "\n", "env_ids_decompressed", "=", "[", "]", "\n", "# TODO: fill instructions", "\n", "instructions", "=", "[", "]", "\n", "print", "(", "\"Using {} images\"", ".", "format", "(", "\"real\"", "if", "self", ".", "real", "else", "\"simulated\"", ")", ")", "\n", "for", "env_id", "in", "env_ids", ":", "\n", "            ", "poses_dir", "=", "get_poses_dir", "(", "env_id", ")", "\n", "images_dir", "=", "get_fpv_img_flight_dir", "(", "env_id", ",", "self", ".", "real", ")", "\n", "pose_filenames", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "poses_dir", ")", "if", "f", ".", "endswith", "(", "'.json'", ")", "]", "\n", "image_filenames", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "images_dir", ")", "if", "(", "f", ".", "endswith", "(", "'.jpg'", ")", "|", "f", ".", "endswith", "(", "'.png'", ")", ")", "]", "\n", "try", ":", "\n", "                ", "assert", "len", "(", "image_filenames", ")", "==", "len", "(", "pose_filenames", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"error {}: different count of poses and images\"", ".", "format", "(", "env_id", ")", ")", "\n", "\n", "", "if", "not", "(", "os", ".", "listdir", "(", "images_dir", ")", ")", ":", "\n", "                ", "print", "(", "images_dir", "+", "\"is empty\"", ")", "\n", "assert", "(", "not", "(", "not", "(", "os", ".", "listdir", "(", "images_dir", ")", ")", ")", ")", "\n", "\n", "", "img_ids", "=", "np", ".", "sort", "(", "\n", "[", "int", "(", "f", ".", "replace", "(", "'.'", ",", "'_'", ")", ".", "split", "(", "'_'", ")", "[", "-", "2", "]", ")", "for", "f", "in", "os", ".", "listdir", "(", "images_dir", ")", "if", "(", "f", ".", "endswith", "(", "'.jpg'", ")", "|", "f", ".", "endswith", "(", "'.png'", ")", ")", "]", ")", "\n", "try", ":", "\n", "                ", "selected", "=", "np", ".", "random", ".", "choice", "(", "img_ids", ",", "\n", "int", "(", "len", "(", "image_filenames", ")", "*", "proba_selection", ")", ",", "\n", "replace", "=", "False", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "img_ids", ")", "\n", "", "selected_ids", "=", "np", ".", "sort", "(", "selected", ")", "\n", "\n", "for", "img_id", "in", "selected_ids", ":", "\n", "                ", "filename_pose", "=", "\"pose_{}.json\"", ".", "format", "(", "img_id", ")", "\n", "\n", "gen_imgpath", "=", "lambda", "id", ",", "ext", ":", "os", ".", "path", ".", "join", "(", "images_dir", ",", "f\"usb_cam_{img_id}.{ext}\"", ")", "\n", "img_path", "=", "gen_imgpath", "(", "img_id", ",", "\"jpg\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "                    ", "img_path", "=", "gen_imgpath", "(", "img_id", ",", "\"png\"", ")", "\n", "\n", "#print(filename_pose, filename_img)", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "poses_dir", ",", "filename_pose", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "try", ":", "\n", "                        ", "pose", "=", "json", ".", "load", "(", "f", ")", "[", "\"camera\"", "]", "\n", "poses", ".", "append", "(", "pose", ")", "\n", "read_success", "=", "True", "\n", "", "except", ":", "\n", "                        ", "read_success", "=", "False", "\n", "\n", "", "", "if", "read_success", ":", "\n", "# Images are resized in bigger shape. They will be resized to 256*144 after data augmentation", "\n", "                    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "resize", "(", "(", "self", ".", "load_img_w", ",", "self", ".", "load_img_h", ")", ")", "\n", "images", ".", "append", "(", "img", ")", "\n", "\n", "env_ids_decompressed", ".", "append", "(", "(", "env_id", ",", "img_id", ")", ")", "\n", "\n", "", "", "", "return", "instructions", ",", "poses", ",", "images", ",", "env_ids_decompressed", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.update_dic": [[178, 186], ["None"], "methods", ["None"], ["", "def", "update_dic", "(", "self", ")", ":", "\n", "        ", "self", ".", "dic", "=", "{", "\"poses\"", ":", "self", ".", "poses", ",", "\n", "\"instructions\"", ":", "self", ".", "instructions", ",", "\n", "\"images\"", ":", "self", ".", "images", ",", "\n", "\"env_ids\"", ":", "self", ".", "env_ids_decompressed", ",", "\n", "\"lm_pos_fpv\"", ":", "self", ".", "lm_pos_fpv", ",", "\n", "\"lm_indices\"", ":", "self", ".", "lm_idx", ",", "\n", "\"lm_pos_map\"", ":", "self", ".", "lm_pos_map", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.provider_lm_pos_lm_indices_fpv": [[187, 297], ["data_io.paths.load_config_files", "learning.models.semantic_map.pinhole_camera_inv.PinholeCameraProjection", "len", "range", "numpy.unique", "enumerate", "data_io.env.get_landmark_locations_airsim", "landmark_indices_list.append", "landmark_pos_list.append", "lm_pos_fpv.append", "lm_pos_map.append", "lm_indices.append", "numpy.array", "numpy.array", "numpy.stack", "range", "enumerate", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "[].append", "[].append", "[].append", "[].append", "numpy.where", "learning.models.semantic_map.pinhole_camera_inv.PinholeCameraProjection.world_point_to_image", "numpy.linalg.norm", "numpy.min", "torch.from_numpy().float.append", "torch.from_numpy().float.append", "torch.from_numpy().long.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.rand", "numpy.random.rand", "numpy.unique", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.load_config_files", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "provider_lm_pos_lm_indices_fpv", "(", "self", ",", "env_ids", ",", "add_null", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Data provider that gives the positions and indices of all landmarks visible in the FPV image.\n        :param pose_list: B*7 list of poses decomposed in 3 position and 4 orientation floats\n         [x,y,z, orient_x, orient_y, orient_z, orient_w]\n         img_x, img_y: shape of images\n         env_ids: list of environments.\n        :return: (\"lm_pos\", lm_pos) - lm_pos is a list (over timesteps) of lists (over landmarks visible in image) of the\n                    landmark locations in image pixel coordinates\n                 (\"lm_indices\", lm_indices) - lm_indices is a list (over timesteps) of lists (over landmarks visible in image)\n                    of the landmark indices for every landmark included in lm_pos. These are the landmark classifier labels\n        \"\"\"", "\n", "list_of_conf", "=", "load_config_files", "(", "np", ".", "unique", "(", "env_ids", ")", ")", "#, perception=True)", "\n", "# add add_null empty objects on each config.", "\n", "if", "add_null", ">", "0", ":", "\n", "            ", "for", "i", ",", "conf", "in", "enumerate", "(", "list_of_conf", ")", ":", "\n", "                ", "zpos", "=", "conf", "[", "\"zPos\"", "]", "\n", "xpos", "=", "conf", "[", "\"xPos\"", "]", "\n", "lm_positions", "=", "np", ".", "stack", "(", "[", "xpos", ",", "zpos", "]", ",", "1", ")", "\n", "for", "_", "in", "range", "(", "add_null", ")", ":", "# add 2 empty objects on configuration", "\n", "                    ", "i_null", "=", "0", "\n", "while", "i_null", "<", "100", ":", "\n", "                        ", "xnull", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "4.7", "\n", "znull", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "4.7", "\n", "distances_to_lm", "=", "np", ".", "linalg", ".", "norm", "(", "lm_positions", "-", "np", ".", "array", "(", "[", "xnull", ",", "znull", "]", ")", ",", "axis", "=", "1", ")", "\n", "min_dist_to_lm", "=", "np", ".", "min", "(", "distances_to_lm", ")", "\n", "if", "min_dist_to_lm", ">", "1.2", ":", "\n", "                            ", "break", "\n", "", "i_null", "+=", "1", "\n", "\n", "", "list_of_conf", "[", "i", "]", "[", "\"xPos\"", "]", ".", "append", "(", "xnull", ")", "\n", "list_of_conf", "[", "i", "]", "[", "\"zPos\"", "]", ".", "append", "(", "znull", ")", "\n", "list_of_conf", "[", "i", "]", "[", "\"landmarkName\"", "]", ".", "append", "(", "\"0Null\"", ")", "\n", "list_of_conf", "[", "i", "]", "[", "\"radius\"", "]", ".", "append", "(", "\"100\"", ")", "\n", "\n", "", "", "", "landmark_indices_list", "=", "[", "]", "\n", "landmark_pos_list", "=", "[", "]", "\n", "for", "conf_json", "in", "list_of_conf", ":", "\n", "            ", "lm_names", ",", "landmark_indices", ",", "landmark_pos", "=", "get_landmark_locations_airsim", "(", "conf_json", ",", "add_empty", "=", "True", ")", "\n", "#landmark_pos = get_landmark_locations(conf_json)", "\n", "landmark_indices_list", ".", "append", "(", "landmark_indices", ")", "\n", "landmark_pos_list", ".", "append", "(", "landmark_pos", ")", "\n", "\n", "# TODO: Grab image size from segment_data", "\n", "\n", "# TODO: recode CAM_FOV in parameters instead of hardcoding", "\n", "", "projector", "=", "PinholeCameraProjection", "(", "\n", "map_size_px", "=", "None", ",", "\n", "world_size_px", "=", "None", ",", "\n", "world_size_m", "=", "None", ",", "\n", "img_x", "=", "self", ".", "load_img_w", ",", "\n", "img_y", "=", "self", ".", "load_img_h", ",", "\n", "cam_fov", "=", "self", ".", "cam_h_fov", ",", "\n", "use_depth", "=", "False", ",", "\n", "start_height_offset", "=", "0.0", ")", "\n", "n_obs", "=", "len", "(", "self", ".", "poses", ")", "\n", "\n", "lm_pos_fpv", "=", "[", "]", "\n", "lm_indices", "=", "[", "]", "\n", "lm_mentioned", "=", "[", "]", "\n", "lm_pos_map", "=", "[", "]", "\n", "\n", "for", "i_obs", "in", "range", "(", "n_obs", ")", ":", "\n", "\n", "# index of the environment in the list of unique environments", "\n", "            ", "env_id", "=", "env_ids", "[", "i_obs", "]", "\n", "i_env_id", "=", "np", ".", "where", "(", "np", ".", "unique", "(", "env_ids", ")", "==", "env_id", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "t_lm_pos_fpv", "=", "[", "]", "\n", "t_lm_indices", "=", "[", "]", "\n", "t_lm_pos_map", "=", "[", "]", "\n", "\n", "if", "self", ".", "poses", "[", "i_obs", "]", "is", "not", "None", ":", "\n", "                ", "cam_pos", "=", "self", ".", "poses", "[", "i_obs", "]", "[", "'position'", "]", "\n", "cam_rot", "=", "self", ".", "poses", "[", "i_obs", "]", "[", "'orientation'", "]", "\n", "# convert xyzw to wxyz (airsim convention)", "\n", "cam_rot_airsim", "=", "[", "cam_rot", "[", "-", "1", "]", "]", "+", "cam_rot", "[", ":", "-", "1", "]", "\n", "\n", "for", "i_lm", ",", "landmark_in_world", "in", "enumerate", "(", "landmark_pos_list", "[", "i_env_id", "]", ")", ":", "\n", "# landmark_in_world = landmark_in_world[0]", "\n", "                    ", "landmark_idx", "=", "landmark_indices_list", "[", "i_env_id", "]", "[", "i_lm", "]", "\n", "\n", "landmark_in_img", ",", "landmark_in_cam", ",", "status", "=", "projector", ".", "world_point_to_image", "(", "cam_pos", ",", "cam_rot_airsim", ",", "\n", "landmark_in_world", ")", "\n", "# This is None if the landmark is behind the camera.", "\n", "if", "landmark_in_img", "is", "not", "None", ":", "\n", "# presenter.save_image(images[timestep], name=\"tmp.png\", torch=True, draw_point=landmark_in_img)", "\n", "                        ", "t_lm_pos_fpv", ".", "append", "(", "landmark_in_img", "[", "0", ":", "2", "]", ")", "\n", "t_lm_pos_map", ".", "append", "(", "landmark_in_world", "[", "0", ":", "2", "]", ")", "\n", "t_lm_indices", ".", "append", "(", "landmark_idx", ")", "\n", "# t_lm_mentioned.append(this_lm_mentioned)", "\n", "\n", "", "", "", "if", "len", "(", "t_lm_pos_fpv", ")", ">", "0", ":", "\n", "\n", "                ", "t_lm_pos_fpv", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "t_lm_pos_fpv", ")", ")", ".", "float", "(", ")", "\n", "t_lm_pos_map", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "t_lm_pos_map", ")", ")", ".", "float", "(", ")", "\n", "t_lm_indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "t_lm_indices", ")", ")", ".", "long", "(", ")", "\n", "\n", "", "else", ":", "\n", "                ", "t_lm_pos_fpv", "=", "None", "\n", "t_lm_pos_map", "=", "None", "\n", "t_lm_indices", "=", "None", "\n", "t_lm_mentioned", "=", "None", "\n", "\n", "", "lm_pos_fpv", ".", "append", "(", "t_lm_pos_fpv", ")", "\n", "lm_pos_map", ".", "append", "(", "t_lm_pos_map", ")", "\n", "lm_indices", ".", "append", "(", "t_lm_indices", ")", "\n", "# lm_mentioned.append(t_lm_mentioned)", "\n", "\n", "", "return", "np", ".", "array", "(", "lm_pos_fpv", ")", ",", "np", ".", "array", "(", "lm_indices", ")", ",", "lm_pos_map", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.compute_pos_idx": [[298, 308], ["fpv_image_dataset.FpvImageDataset.provider_lm_pos_lm_indices_fpv"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.provider_lm_pos_lm_indices_fpv"], ["", "def", "compute_pos_idx", "(", "self", ",", "add_null", "=", "0", ")", ":", "# number of Null objects added to the map", "\n", "        ", "\"\"\"\n\n        :param add_null: How many empty objects are added per config. 1 is generally enough\n        :return: landmark positions on images, landmark imdices on mages, lanmdark coordinates on map.\n        \"\"\"", "\n", "env_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "env_ids_decompressed", "]", "\n", "# Provider is inspired from provider used for Airsim but different", "\n", "lm_pos_fpv", ",", "lm_idx_fpv", ",", "lm_pos_map", "=", "self", ".", "provider_lm_pos_lm_indices_fpv", "(", "env_ids", ",", "add_null", ")", "\n", "return", "lm_pos_fpv", ",", "lm_idx_fpv", ",", "lm_pos_map", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.filter_none": [[309, 324], ["enumerate", "len", "no_none.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "filter_none", "(", "self", ")", ":", "\n", "# Filter images that contain no object", "\n", "\n", "        ", "no_none", "=", "[", "]", "\n", "for", "i", ",", "idx_list", "in", "enumerate", "(", "self", ".", "lm_idx", ")", ":", "\n", "            ", "if", "not", "(", "(", "idx_list", "is", "None", ")", ")", ":", "\n", "                ", "if", "len", "(", "idx_list", ")", ">", "0", ":", "\n", "                    ", "no_none", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "self", ".", "poses", "=", "[", "self", ".", "poses", "[", "i", "]", "for", "i", "in", "no_none", "]", "\n", "self", ".", "images", "=", "[", "self", ".", "images", "[", "i", "]", "for", "i", "in", "no_none", "]", "\n", "self", ".", "env_ids_decompressed", "=", "[", "self", ".", "env_ids_decompressed", "[", "i", "]", "for", "i", "in", "no_none", "]", "\n", "self", ".", "lm_idx", "=", "[", "self", ".", "lm_idx", "[", "i", "]", "for", "i", "in", "no_none", "]", "\n", "self", ".", "lm_pos_fpv", "=", "[", "self", ".", "lm_pos_fpv", "[", "i", "]", "for", "i", "in", "no_none", "]", "\n", "self", ".", "lm_pos_map", "=", "[", "self", ".", "lm_pos_map", "[", "i", "]", "for", "i", "in", "no_none", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.dic_to_pose": [[325, 332], ["learning.inputs.pose.Pose", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "dic_to_pose", "(", "self", ",", "dic_of_pose", ")", ":", "\n", "        ", "\"\"\"\n        :param dic_of_pose: pose stored as a dictionary\n        :return: Pose object\n        \"\"\"", "\n", "pose", "=", "Pose", "(", "torch", ".", "tensor", "(", "dic_of_pose", "[", "'position'", "]", ")", ",", "torch", ".", "tensor", "(", "dic_of_pose", "[", "'orientation'", "]", ")", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.collate_fn": [[333, 347], ["torch.stack", "dict", "fpv_image_dataset.FpvImageDataset.dic_to_pose", "zip"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.FpvImageDataset.dic_to_pose"], ["", "def", "collate_fn", "(", "self", ",", "list_of_samples", ")", ":", "\n", "        ", "images", "=", "[", "sample", "[", "'images'", "]", "for", "sample", "in", "list_of_samples", "]", "\n", "lm_indices", "=", "[", "sample", "[", "'lm_indices'", "]", "for", "sample", "in", "list_of_samples", "]", "\n", "lm_pos_fpv", "=", "[", "sample", "[", "'lm_pos_fpv'", "]", "for", "sample", "in", "list_of_samples", "]", "\n", "lm_pos_map", "=", "[", "sample", "[", "'lm_pos_map'", "]", "for", "sample", "in", "list_of_samples", "]", "\n", "env_ids", "=", "[", "sample", "[", "'env_ids'", "]", "for", "sample", "in", "list_of_samples", "]", "\n", "poses", "=", "[", "self", ".", "dic_to_pose", "(", "sample", "[", "'poses'", "]", ")", "for", "sample", "in", "list_of_samples", "]", "\n", "\n", "images", "=", "torch", ".", "stack", "(", "images", ",", "dim", "=", "0", ")", "\n", "\n", "keys", "=", "[", "\"images\"", ",", "\"env_ids\"", ",", "\"poses\"", ",", "\"lm_indices\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_pos_map\"", "]", "#\"instructions\", \"lm_mentioned\"]", "\n", "out_tuple", "=", "(", "images", ",", "env_ids", ",", "poses", ",", "lm_indices", ",", "lm_pos_fpv", ",", "lm_pos_map", ")", "# instructions, lm_mentioned)", "\n", "out_dict", "=", "dict", "(", "zip", "(", "keys", ",", "out_tuple", ")", ")", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.get_stats": [[349, 354], ["numpy.unique", "numpy.array"], "function", ["None"], ["", "", "def", "get_stats", "(", "b", ")", ":", "\n", "    ", "idx_a", "=", "[", "np", ".", "array", "(", "x", ")", "for", "x", "in", "b", "[", "\"labels\"", "]", "]", "\n", "flatten", "=", "[", "x", "for", "sublist", "in", "idx_a", "for", "x", "in", "sublist", "]", "\n", "values", ",", "counts", "=", "np", ".", "unique", "(", "flatten", ",", "return_counts", "=", "True", ")", "\n", "return", "values", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.get_stats_total": [[356, 369], ["len", "fpv_image_dataset.get_stats", "fpv_image_dataset.get_stats", "enumerate", "enumerate", "fpv_image_dataset.get_stats", "dict", "zip", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.get_stats", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.get_stats", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.fpv_image_dataset.get_stats"], ["", "def", "get_stats_total", "(", "batch", ")", ":", "\n", "    ", "dic_out", "=", "{", "\"real\"", ":", "{", "}", ",", "\"sim\"", ":", "{", "}", "}", "\n", "if", "len", "(", "batch", ")", "==", "2", ":", "\n", "        ", "values_real", ",", "counts_real", "=", "get_stats", "(", "batch", "[", "\"real\"", "]", ")", "\n", "values_sim", ",", "counts_sim", "=", "get_stats", "(", "batch", "[", "\"sim\"", "]", ")", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "values_real", ")", ":", "\n", "            ", "dic_out", "[", "\"real\"", "]", "[", "str", "(", "v", ")", "]", "=", "counts_real", "[", "i", "]", "\n", "", "for", "i", ",", "v", "in", "enumerate", "(", "values_sim", ")", ":", "\n", "            ", "dic_out", "[", "\"sim\"", "]", "[", "str", "(", "v", ")", "]", "=", "counts_sim", "[", "i", "]", "\n", "", "", "else", ":", "\n", "        ", "values", ",", "counts", "=", "get_stats", "(", "batch", ")", "\n", "dic_out", "=", "dict", "(", "zip", "(", "values", ",", "counts", ")", ")", "\n", "", "return", "dic_out", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.masking.get_obs_mask_every_n": [[1, 6], ["range", "mask.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "get_obs_mask_every_n", "(", "ever_n_steps", ",", "N", ")", ":", "\n", "    ", "mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "mask", ".", "append", "(", "i", "%", "ever_n_steps", "==", "0", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.masking.get_obs_mask_segstart": [[8, 18], ["range", "len", "mask.append", "mask.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_obs_mask_segstart", "(", "segment_data", ")", ":", "\n", "    ", "mask", "=", "[", "]", "\n", "seg_idx", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "segment_data", ")", ")", ":", "\n", "        ", "if", "segment_data", "[", "i", "]", "is", "not", "None", "and", "segment_data", "[", "i", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "!=", "seg_idx", ":", "\n", "            ", "mask", ".", "append", "(", "True", ")", "\n", "seg_idx", "=", "segment_data", "[", "i", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "", "else", ":", "\n", "            ", "mask", ".", "append", "(", "False", ")", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.masking.get_obs_mask_every_n_and_segstart": [[19, 24], ["masking.get_obs_mask_every_n", "masking.get_obs_mask_segstart", "len", "zip"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.masking.get_obs_mask_every_n", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.masking.get_obs_mask_segstart"], ["", "def", "get_obs_mask_every_n_and_segstart", "(", "ever_n_steps", ",", "segment_metadata", ")", ":", "\n", "    ", "mask_n", "=", "get_obs_mask_every_n", "(", "ever_n_steps", ",", "len", "(", "segment_metadata", ")", ")", "\n", "mask_start", "=", "get_obs_mask_segstart", "(", "segment_metadata", ")", "\n", "mask", "=", "[", "a", "or", "b", "for", "a", ",", "b", "in", "zip", "(", "mask_n", ",", "mask_start", ")", "]", "\n", "return", "mask", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.__init__": [[25, 91], ["utils.simple_profiler.SimpleProfiler", "[].get", "[].get", "[].get", "data_io.instructions.get_all_instructions", "data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "learning.datasets.aux_data_providers.get_aux_label_names", "learning.datasets.aux_data_providers.get_stackable_label_names", "print", "enumerate", "data_io.train_data.filter_env_list_has_data", "zip", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters", "segment_dataset_simple.SegmentDataset.split_into_segments", "segment_dataset_simple.SegmentDataset.sample_ids.append", "list", "parameters.get_current_parameters", "segment_dataset_simple.SegmentDataset.dataset_restricted_envs.keys"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_aux_label_names", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_stackable_label_names", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.filter_env_list_has_data", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.split_into_segments", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data", "=", "None", ",", "\n", "env_list", "=", "None", ",", "\n", "dataset_names", "=", "[", "\"simulator\"", "]", ",", "\n", "dataset_prefix", "=", "\"supervised\"", ",", "\n", "domain", "=", "\"sim\"", ",", "\n", "max_traj_length", "=", "None", ",", "\n", "aux_provider_names", "=", "[", "]", ",", "\n", "segment_level", "=", "False", ",", "\n", "cache", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Dataset for the replay memory\n        :param data: if data is pre-loaded in memory, this is the training data\n        :param env_list: if data is to be loaded by the dataset, this is the list of environments for which to include data\n        :param dataset_names: list of datasets from which to load data\n        :param dataset_prefix: name of the dataset. Default: supervised will use data collected with collect_supervised_data\n        :param max_traj_length: truncate trajectories to this long\n        :param cuda:\n        :param aux_provider_names:\n        \"\"\"", "\n", "\n", "# If data is already loaded in memory, use it", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "False", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "min_seg_len", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", ".", "get", "(", "\"min_seg_len\"", ",", "3", ")", "\n", "self", ".", "do_cache", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", ".", "get", "(", "\"cache\"", ",", "False", ")", "\n", "self", ".", "dataset_prefix", "=", "dataset_prefix", "\n", "self", ".", "dataset_names", "=", "dataset_names", "\n", "self", ".", "domain", "=", "domain", "\n", "\n", "self", ".", "env_restrictions", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", ".", "get", "(", "\"dataset_env_restrictions\"", ")", "\n", "if", "self", ".", "env_restrictions", ":", "\n", "            ", "self", ".", "dataset_restricted_envs", "=", "{", "dname", ":", "P", ".", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "[", "\"EnvRestrictionGroups\"", "]", "[", "self", ".", "env_restrictions", "[", "dname", "]", "]", "for", "dname", "in", "dataset_names", "if", "dname", "in", "self", ".", "env_restrictions", "}", "\n", "print", "(", "f\"Using restricted envs: {list(self.dataset_restricted_envs.keys())}\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset_restricted_envs", "=", "{", "}", "\n", "\n", "", "self", ".", "max_traj_length", "=", "max_traj_length", "\n", "train_instr", ",", "dev_instr", ",", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "# TODO: This shouldn't have access to all instructions. We should really make distinct train, dev, test modes", "\n", "self", ".", "all_instr", "=", "{", "**", "train_instr", ",", "**", "dev_instr", ",", "**", "test_instr", "}", "\n", "\n", "train_instr_full", ",", "dev_instr_full", ",", "test_instr_full", ",", "corpus", "=", "get_all_instructions", "(", "full", "=", "True", ")", "\n", "self", ".", "all_instr_full", "=", "{", "**", "train_instr_full", ",", "**", "dev_instr_full", ",", "**", "test_instr_full", "}", "\n", "\n", "self", ".", "segment_level", "=", "segment_level", "\n", "self", ".", "sample_ids", "=", "[", "]", "\n", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "assert", "env_list", "is", "not", "None", "\n", "for", "i", ",", "dataset_name", "in", "enumerate", "(", "self", ".", "dataset_names", ")", ":", "\n", "                ", "dataset_env_list", "=", "filter_env_list_has_data", "(", "dataset_name", ",", "env_list", ",", "dataset_prefix", ")", "\n", "if", "self", ".", "segment_level", ":", "\n", "                    ", "dataset_env_list", ",", "dataset_seg_list", "=", "self", ".", "split_into_segments", "(", "dataset_env_list", ",", "dataset_name", ")", "\n", "", "else", ":", "\n", "                    ", "dataset_seg_list", "=", "[", "0", "for", "_", "in", "dataset_env_list", "]", "\n", "", "for", "env", ",", "seg", "in", "zip", "(", "dataset_env_list", ",", "dataset_seg_list", ")", ":", "\n", "                    ", "self", ".", "sample_ids", ".", "append", "(", "(", "dataset_name", ",", "env", ",", "seg", ")", ")", "\n", "\n", "", "", "", "self", ".", "token2word", ",", "self", ".", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "self", ".", "aux_provider_names", "=", "aux_provider_names", "\n", "self", ".", "aux_label_names", "=", "get_aux_label_names", "(", "aux_provider_names", ")", "\n", "self", ".", "stackable_names", "=", "get_stackable_label_names", "(", "aux_provider_names", ")", "\n", "self", ".", "data_cache", "=", "{", "dataset_name", ":", "{", "}", "for", "dataset_name", "in", "dataset_names", "}", "\n", "\n", "self", ".", "traj_len", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"trajectory_length\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.load_env_data": [[92, 99], ["data_io.train_data.load_single_env_from_dataset", "data_io.train_data.load_single_env_from_dataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_from_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_from_dataset"], ["", "def", "load_env_data", "(", "self", ",", "dataset_name", ",", "env_id", ")", ":", "\n", "        ", "if", "self", ".", "do_cache", ":", "\n", "            ", "if", "env_id", "not", "in", "self", ".", "data_cache", "[", "dataset_name", "]", ":", "\n", "                ", "self", ".", "data_cache", "[", "dataset_name", "]", "[", "env_id", "]", "=", "load_single_env_from_dataset", "(", "dataset_name", ",", "env_id", ",", "self", ".", "dataset_prefix", ")", "\n", "", "return", "self", ".", "data_cache", "[", "dataset_name", "]", "[", "env_id", "]", "\n", "", "else", ":", "\n", "            ", "return", "load_single_env_from_dataset", "(", "dataset_name", ",", "env_id", ",", "self", ".", "dataset_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.__len__": [[100, 105], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "sample_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.__getitem__": [[106, 235], ["segment_dataset_simple.SegmentDataset.prof.tick", "data_io.instructions.get_instruction_segment", "data_io.instructions.get_instruction_segment", "learning.inputs.vision.standardize_images", "learning.inputs.sequence.none_padded_seq_to_tensor", "learning.inputs.sequence.none_padded_seq_to_tensor", "learning.inputs.sequence.none_padded_seq_to_tensor", "torch.FloatTensor", "torch.FloatTensor", "segment_dataset_simple.SegmentDataset.prof.tick", "NotImplementedError", "segment_dataset_simple.SegmentDataset.load_env_data", "len", "print", "len", "print", "segment_dataset_simple.SegmentDataset.prof.tick", "type", "NotImplementedError", "set", "set", "range", "range", "data_io.instructions.tokenize_instruction", "range", "learning.datasets.aux_data_providers.resolve_data_provider", "set.add", "len", "print", "len", "len", "len", "len", "len", "data_io.instructions.get_instruction_segment", "set.add", "print", "len", "print", "len", "print", "len", "random.choice", "seg_data.append", "list", "print", "random.choice", "len", "len", "list", "print", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_images", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.load_env_data", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.tokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.resolve_data_provider", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "# If data is already loaded, use it", "\n", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "seg_data", "=", "self", ".", "data", "[", "idx", "]", "\n", "raise", "NotImplementedError", "(", "\"Not implemented and tested\"", ")", "\n", "if", "type", "(", "seg_data", ")", "is", "int", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Mixing dynamically loaded envs with training data is no longer supported.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "dataset_name", ",", "env_id", ",", "seg_idx", "=", "self", ".", "sample_ids", "[", "idx", "]", "\n", "env_data", "=", "self", ".", "load_env_data", "(", "dataset_name", ",", "env_id", ")", "\n", "\n", "if", "self", ".", "segment_level", ":", "\n", "                ", "seg_data", "=", "[", "]", "\n", "segs_in_data", "=", "set", "(", ")", "\n", "for", "sample", "in", "env_data", ":", "\n", "# This is a hack around the dataset format change - some stuff used to be inside the metadata dict,", "\n", "# but is now moved into the root level", "\n", "                    ", "if", "\"metadata\"", "not", "in", "sample", ":", "\n", "                        ", "sample", "[", "\"metadata\"", "]", "=", "sample", "\n", "# TODO: Set this at rollout time - we know which domain we're rolling out, but this can potentially be mixed up", "\n", "", "sample", "[", "\"metadata\"", "]", "[", "\"domain\"", "]", "=", "self", ".", "domain", "\n", "segs_in_data", ".", "add", "(", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", ")", "\n", "\n", "# Keep the segments for which we have instructions", "\n", "", "segs_in_data_and_instructions", "=", "set", "(", ")", "\n", "for", "_seg_idx", "in", "segs_in_data", ":", "\n", "                    ", "if", "get_instruction_segment", "(", "env_id", ",", "0", ",", "_seg_idx", ",", "all_instr", "=", "self", ".", "all_instr_full", ")", "is", "not", "None", ":", "\n", "                        ", "segs_in_data_and_instructions", ".", "add", "(", "_seg_idx", ")", "\n", "\n", "", "", "if", "seg_idx", "not", "in", "segs_in_data_and_instructions", ":", "\n", "                    ", "if", "DEBUG", ":", "print", "(", "f\"Segment {env_id}::{seg_idx} not in (data)and(instructions)\"", ")", "\n", "# If there's a single segment in this entire dataset, just return that segment even if it's not a match.", "\n", "if", "len", "(", "segs_in_data", ")", "==", "1", ":", "\n", "                        ", "seg_data", "=", "env_data", "\n", "if", "DEBUG", ":", "print", "(", "f\"  Only one seg in data ({segs_in_data}): returning that\"", ")", "\n", "# Otherwise return a random segment instead", "\n", "", "elif", "len", "(", "segs_in_data_and_instructions", ")", ">", "0", ":", "\n", "                        ", "seg_idx", "=", "random", ".", "choice", "(", "list", "(", "segs_in_data_and_instructions", ")", ")", "\n", "if", "DEBUG", ":", "print", "(", "f\"  Returning a random segment from (data)and(instructions): {seg_idx}\"", ")", "\n", "", "elif", "dataset_name", "==", "\"real\"", "and", "len", "(", "segs_in_data", ")", ">", "0", ":", "\n", "                        ", "seg_idx", "=", "random", ".", "choice", "(", "list", "(", "segs_in_data", ")", ")", "\n", "if", "DEBUG", ":", "print", "(", "f\"  REAL dataset. Returning a random seg from data: {seg_idx}\"", ")", "\n", "", "else", ":", "\n", "                        ", "seg_idx", "=", "-", "1", "\n", "if", "DEBUG", ":", "print", "(", "f\"  No segment found. Skipping example\"", ")", "\n", "\n", "", "", "if", "len", "(", "seg_data", ")", "==", "0", ":", "\n", "                    ", "if", "DEBUG", ":", "print", "(", "f\"   Grabing segment: {seg_idx}\"", ")", "\n", "for", "sample", "in", "env_data", ":", "\n", "                        ", "if", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "==", "seg_idx", ":", "\n", "                            ", "seg_data", ".", "append", "(", "sample", ")", "\n", "", "", "", "if", "DEBUG", ":", "print", "(", "f\"   Returning segment data of length: {len(seg_data)}\"", ")", "\n", "", "else", ":", "\n", "                ", "seg_data", "=", "env_data", "\n", "# I get a lot of Nones here in RL training because the dataset index is created based on different data than available!", "\n", "# TODO: in RL training, treat entire environment as a single segment and don't distinguish.", "\n", "# How? Check above", "\n", "", "", "if", "len", "(", "seg_data", ")", "<", "self", ".", "min_seg_len", ":", "\n", "            ", "print", "(", "f\"   None reason: len:{len(seg_data)} in {dataset_name}, env:{env_id}, seg:{seg_idx}\"", ")", "\n", "return", "None", "\n", "\n", "", "if", "len", "(", "seg_data", ")", ">", "self", ".", "traj_len", ":", "\n", "            ", "seg_data", "=", "seg_data", "[", ":", "self", ".", "traj_len", "]", "\n", "\n", "", "seg_idx", "=", "seg_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "set_idx", "=", "seg_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"set_idx\"", "]", "\n", "env_id", "=", "seg_data", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"env_id\"", "]", "\n", "instr", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "all_instr", "=", "self", ".", "all_instr", ")", "\n", "if", "instr", "is", "None", "and", "dataset_name", "!=", "\"real\"", ":", "\n", "#print(f\"{dataset_name} Seg {env_id}:{set_idx}:{seg_idx} not present in instruction data\")", "\n", "            ", "return", "None", "\n", "\n", "", "instr", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "all_instr", "=", "self", ".", "all_instr_full", ")", "\n", "if", "instr", "is", "None", ":", "\n", "            ", "print", "(", "f\"{dataset_name} Seg {env_id}:{set_idx}:{seg_idx} not present in FULL instruction data. WTF?\"", ")", "\n", "return", "None", "\n", "\n", "# Convert to tensors, replacing Nones with zero's", "\n", "", "images_in", "=", "[", "seg_data", "[", "i", "]", "[", "\"state\"", "]", ".", "image", "if", "i", "<", "len", "(", "seg_data", ")", "else", "None", "for", "i", "in", "range", "(", "len", "(", "seg_data", ")", ")", "]", "\n", "states", "=", "[", "seg_data", "[", "i", "]", "[", "\"state\"", "]", ".", "state", "if", "i", "<", "len", "(", "seg_data", ")", "else", "None", "for", "i", "in", "range", "(", "len", "(", "seg_data", ")", ")", "]", "\n", "\n", "images_np", "=", "standardize_images", "(", "images_in", ")", "\n", "images", "=", "none_padded_seq_to_tensor", "(", "images_np", ")", "\n", "\n", "#depth_images_np = standardize_depth_images(images_in)", "\n", "#depth_images = none_padded_seq_to_tensor(depth_images_np)", "\n", "\n", "states", "=", "none_padded_seq_to_tensor", "(", "states", ")", "\n", "\n", "actions", "=", "[", "s", "[", "\"ref_action\"", "]", "for", "s", "in", "seg_data", "]", "\n", "actions", "=", "none_padded_seq_to_tensor", "(", "actions", ")", "\n", "stops", "=", "[", "1.0", "if", "s", "[", "\"done\"", "]", "else", "0.0", "for", "s", "in", "seg_data", "]", "\n", "\n", "# e.g. [1 1 1 1 1 1 0 0 0 0 .. 0] for segment with 6 samples", "\n", "mask", "=", "[", "1.0", "if", "s", "[", "\"ref_action\"", "]", "is", "not", "None", "else", "0.0", "for", "s", "in", "seg_data", "]", "\n", "\n", "stops", "=", "torch", ".", "FloatTensor", "(", "stops", ")", "\n", "mask", "=", "torch", ".", "FloatTensor", "(", "mask", ")", "\n", "\n", "# This is a list, converted to tensor in collate_fn", "\n", "#if INSTRUCTIONS_FROM_FILE:", "\n", "#    tok_instructions = [tokenize_instruction(load_instruction(md[\"env_id\"], md[\"set_idx\"], md[\"seg_idx\"]), self.word2token) if s[\"md\"] is not None else None for s in seg_data]", "\n", "#else:", "\n", "tok_instructions", "=", "[", "tokenize_instruction", "(", "s", "[", "\"instruction\"", "]", ",", "self", ".", "word2token", ")", "if", "s", "[", "\"instruction\"", "]", "is", "not", "None", "else", "None", "for", "s", "in", "seg_data", "]", "\n", "\n", "md", "=", "[", "seg_data", "[", "i", "]", "[", "\"metadata\"", "]", "for", "i", "in", "range", "(", "len", "(", "seg_data", ")", ")", "]", "\n", "flag", "=", "md", "[", "0", "]", "[", "\"flag\"", "]", "if", "\"flag\"", "in", "md", "[", "0", "]", "else", "None", "\n", "\n", "data", "=", "{", "\n", "\"instr\"", ":", "tok_instructions", ",", "\n", "\"images\"", ":", "images", ",", "\n", "#\"depth_images\": depth_images,", "\n", "\"states\"", ":", "states", ",", "\n", "\"actions\"", ":", "actions", ",", "\n", "\"stops\"", ":", "stops", ",", "\n", "\"masks\"", ":", "mask", ",", "\n", "\"flags\"", ":", "flag", ",", "\n", "\"md\"", ":", "md", "\n", "}", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"getitem_core\"", ")", "\n", "for", "aux_provider_name", "in", "self", ".", "aux_provider_names", ":", "\n", "            ", "aux_datas", "=", "resolve_data_provider", "(", "aux_provider_name", ")", "(", "seg_data", ",", "data", ")", "\n", "for", "d", "in", "aux_datas", ":", "\n", "                ", "data", "[", "d", "[", "0", "]", "]", "=", "d", "[", "1", "]", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"getitem_\"", "+", "aux_provider_name", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.split_into_segments": [[236, 260], ["print", "print", "print", "envs.append", "segs.append", "print", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "split_into_segments", "(", "self", ",", "env_list", ",", "dname", ")", ":", "\n", "        ", "envs", "=", "[", "]", "\n", "segs", "=", "[", "]", "\n", "sk", "=", "0", "\n", "skipenv", "=", "0", "\n", "for", "env_id", "in", "env_list", ":", "\n", "# If we only allow certain envs from a dataset, and this env is not allowed, skip it", "\n", "# (Intended use is to train Stage1 with limited real-world data and compare)", "\n", "            ", "if", "dname", "in", "self", ".", "dataset_restricted_envs", ":", "\n", "                ", "if", "env_id", "not", "in", "self", ".", "dataset_restricted_envs", "[", "dname", "]", ":", "\n", "                    ", "skipenv", "+=", "1", "\n", "continue", "\n", "# 0th instr set", "\n", "", "", "instruction_set", "=", "self", ".", "all_instr", "[", "env_id", "]", "[", "0", "]", "[", "\"instructions\"", "]", "\n", "for", "seg", "in", "instruction_set", ":", "\n", "                ", "seg_idx", "=", "seg", "[", "\"seg_idx\"", "]", "\n", "if", "DEBUG", ":", "print", "(", "f\"For env {env_id} including segment: {seg_idx}\"", ")", "\n", "envs", ".", "append", "(", "env_id", ")", "\n", "segs", ".", "append", "(", "seg_idx", ")", "\n", "", "", "print", "(", "f\"Skipped {sk} segments due to merge_len constraints from dataset: {dname}\"", ")", "\n", "print", "(", "f\"Skipped {skipenv} environments due to restriction on dataset: {dname}\"", ")", "\n", "print", "(", "f\"  kept {len(segs)} segments\"", ")", "\n", "#envs, segs = self.filter_segment_availability(dname, envs, segs)", "\n", "return", "envs", ",", "segs", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.filter_segment_availability": [[261, 273], ["zip", "data_io.train_data.load_single_env_metadata_from_dataset", "envs_out.append", "segs_out.append", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.load_single_env_metadata_from_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "filter_segment_availability", "(", "self", ",", "dname", ",", "envs", ",", "segs", ")", ":", "\n", "        ", "data_env", "=", "None", "\n", "envs_out", ",", "segs_out", "=", "[", "]", ",", "[", "]", "\n", "# TODO: When saving envs, also save metadata for which segments are present", "\n", "for", "env_id", ",", "seg_id", "in", "zip", "(", "envs", ",", "segs", ")", ":", "\n", "                ", "md", "=", "load_single_env_metadata_from_dataset", "(", "dname", ",", "env_id", ",", "self", ".", "dataset_prefix", ")", "\n", "if", "md", "is", "None", "or", "seg_id", "in", "md", "[", "\"seg_ids\"", "]", ":", "\n", "                    ", "envs_out", ".", "append", "(", "env_id", ")", "\n", "segs_out", ".", "append", "(", "seg_id", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f\"Env {env_id} doesn't have seg {seg_id}\"", ")", "\n", "", "", "return", "envs_out", ",", "segs_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.set_word2token": [[274, 277], ["None"], "methods", ["None"], ["", "def", "set_word2token", "(", "self", ",", "token2term", ",", "word2token", ")", ":", "\n", "        ", "self", ".", "token2term", "=", "token2term", "\n", "self", ".", "word2token", "=", "word2token", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.stack_tensors": [[278, 284], ["torch.stack", "torch.autograd.Variable"], "methods", ["None"], ["", "def", "stack_tensors", "(", "self", ",", "one", ")", ":", "\n", "        ", "if", "one", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "one", "=", "torch", ".", "stack", "(", "one", ",", "dim", "=", "0", ")", "\n", "one", "=", "Variable", "(", "one", ")", "\n", "return", "one", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.collate_fn": [[285, 306], ["segment_dataset_simple.SegmentDataset.prof.tick", "utils.dict_tools.dict_zip", "utils.dict_tools.dict_map", "learning.inputs.sequence.instruction_sequence_batch_to_tensor", "[].clone", "[].clone", "segment_dataset_simple.SegmentDataset.prof.tick", "segment_dataset_simple.SegmentDataset.prof.loop", "segment_dataset_simple.SegmentDataset.prof.print_stats"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_zip", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_map", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.instruction_sequence_batch_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats"], ["", "def", "collate_fn", "(", "self", ",", "list_of_samples", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "if", "None", "in", "list_of_samples", ":", "\n", "            ", "return", "None", "\n", "\n", "", "data_batch", "=", "dict_zip", "(", "list_of_samples", ")", "\n", "\n", "data_t", "=", "dict_map", "(", "data_batch", ",", "self", ".", "stack_tensors", ",", "\n", "[", "\"images\"", ",", "\"states\"", ",", "\"actions\"", ",", "\"stops\"", ",", "\"masks\"", "]", "+", "self", ".", "stackable_names", ")", "\n", "\n", "instructions_t", ",", "instruction_lengths", "=", "instruction_sequence_batch_to_tensor", "(", "data_batch", "[", "\"instr\"", "]", ")", "\n", "\n", "data_t", "[", "\"instr\"", "]", "=", "instructions_t", "\n", "data_t", "[", "\"instr_len\"", "]", "=", "instruction_lengths", "\n", "data_t", "[", "\"cam_pos\"", "]", "=", "data_t", "[", "\"states\"", "]", "[", ":", ",", "9", ":", "12", "]", ".", "clone", "(", ")", "\n", "data_t", "[", "\"cam_rot\"", "]", "=", "data_t", "[", "\"states\"", "]", "[", ":", ",", "12", ":", "16", "]", ".", "clone", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"collate\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "5", ")", "\n", "return", "data_t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.goal_map_success_rate.goal_map_success_rate": [[3, 24], ["goal_maps_pred.view().max", "goal_maps_gt.view().max", "torch.stack", "torch.stack", "torch.norm", "good.sum", "good.sum.float", "goal_maps_pred.view", "goal_maps_gt.view", "torch.stack.float", "torch.stack.float"], "function", ["None"], ["def", "goal_map_success_rate", "(", "goal_maps_pred", ",", "goal_maps_gt", ")", ":", "\n", "    ", "bs", "=", "goal_maps_pred", ".", "shape", "[", "0", "]", "\n", "_", ",", "argmax_pred_goal", "=", "goal_maps_pred", ".", "view", "(", "bs", ",", "-", "1", ")", ".", "max", "(", "1", ")", "\n", "_", ",", "argmax_gt_goal", "=", "goal_maps_gt", ".", "view", "(", "bs", ",", "-", "1", ")", ".", "max", "(", "1", ")", "\n", "\n", "pred_stop_pos_x", "=", "argmax_pred_goal", "/", "goal_maps_pred", ".", "shape", "[", "1", "]", "\n", "pred_stop_pos_y", "=", "argmax_pred_goal", "%", "goal_maps_pred", ".", "shape", "[", "1", "]", "\n", "pred_stop_pos", "=", "torch", ".", "stack", "(", "[", "pred_stop_pos_x", ",", "pred_stop_pos_y", "]", ",", "dim", "=", "1", ")", "\n", "\n", "gt_stop_pos_x", "=", "argmax_gt_goal", "/", "goal_maps_gt", ".", "shape", "[", "1", "]", "\n", "gt_stop_pos_y", "=", "argmax_gt_goal", "%", "goal_maps_gt", ".", "shape", "[", "1", "]", "\n", "gt_stop_pos", "=", "torch", ".", "stack", "(", "[", "gt_stop_pos_x", ",", "gt_stop_pos_y", "]", ",", "dim", "=", "1", ")", "\n", "\n", "dst_to_best_stop", "=", "torch", ".", "norm", "(", "(", "pred_stop_pos", ".", "float", "(", ")", "-", "gt_stop_pos", ".", "float", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# TODO: Grab from config!", "\n", "good", "=", "dst_to_best_stop", "<", "3.2", "\n", "num_good", "=", "good", ".", "sum", "(", ")", "\n", "sucess_rate", "=", "num_good", ".", "float", "(", ")", "/", "goal_maps_pred", ".", "shape", "[", "0", "]", "\n", "\n", "return", "sucess_rate", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.__init__": [[4, 8], ["float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "N", ")", ":", "\n", "        ", "self", ".", "last_value", "=", "None", "\n", "self", ".", "avg_value", "=", "None", "\n", "self", ".", "N", "=", "float", "(", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put": [[9, 15], ["None"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "avg_value", "is", "None", ":", "\n", "            ", "self", ".", "avg_value", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg_value", "=", "self", ".", "avg_value", "*", "(", "(", "self", ".", "N", "-", "1", ")", "/", "self", ".", "N", ")", "+", "value", "*", "(", "1", "/", "self", ".", "N", ")", "\n", "", "self", ".", "last_value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.get": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg_value", "if", "self", ".", "avg_value", "is", "not", "None", "else", "0", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters": [[5, 7], ["None"], "function", ["None"], ["def", "get_current_meters", "(", ")", ":", "\n", "    ", "return", "CURRENT_STATES", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.log_value": [[9, 13], ["None"], "function", ["None"], ["", "def", "log_value", "(", "key", ",", "value", ")", ":", "\n", "#prefix = get_run_name() + \"/\" + KEY_PREFIX + \"/\"", "\n", "#key = prefix + key", "\n", "    ", "CURRENT_STATES", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.reset": [[15, 18], ["None"], "function", ["None"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "global", "CURRENT_STATES", "\n", "CURRENT_STATES", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.set_prefix": [[20, 23], ["None"], "function", ["None"], ["", "def", "set_prefix", "(", "prefix", ")", ":", "\n", "    ", "global", "KEY_PREFIX", "\n", "KEY_PREFIX", "=", "prefix", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.__init__": [[18, 57], ["data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "learning.utils.get_n_params", "learning.utils.get_n_trainable_params", "print", "print", "print", "trainer_supervised.Trainer.set_state", "parameters.parameter_server.get_current_parameters", "torch.Adam", "torch.Adam", "str", "str", "trainer_supervised.Trainer.get_model_parameters", "torch.SGD", "torch.SGD", "trainer_supervised.Trainer.get_model_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_state", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "state", "=", "None", ",", "\n", "epoch", "=", "0", ",", "\n", "name", "=", "\"\"", ",", "\n", "run_name", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "token2word", ",", "self", ".", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"Training\"", "]", "\n", "self", ".", "batch_size", "=", "self", ".", "params", "[", "'batch_size'", "]", "\n", "self", ".", "weight_decay", "=", "self", ".", "params", "[", "'weight_decay'", "]", "\n", "self", ".", "optimizer", "=", "self", ".", "params", "[", "'optimizer'", "]", "\n", "self", ".", "num_loaders", "=", "self", ".", "params", "[", "'num_loaders'", "]", "\n", "self", ".", "lr", "=", "self", ".", "params", "[", "'lr'", "]", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "dataset_names", "=", "None", "\n", "\n", "n_params", "=", "get_n_params", "(", "model", ")", "\n", "n_params_tr", "=", "get_n_trainable_params", "(", "model", ")", "\n", "print", "(", "\"Training Model:\"", ")", "\n", "print", "(", "\"Number of model parameters: \"", "+", "str", "(", "n_params", ")", ")", "\n", "print", "(", "\"Trainable model parameters: \"", "+", "str", "(", "n_params_tr", ")", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "run_name", "=", "run_name", "\n", "if", "self", ".", "optimizer", "==", "\"adam\"", ":", "\n", "            ", "self", ".", "optim", "=", "optim", ".", "Adam", "(", "self", ".", "get_model_parameters", "(", "self", ".", "model", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "", "elif", "self", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "            ", "self", ".", "optim", "=", "optim", ".", "SGD", "(", "self", ".", "get_model_parameters", "(", "self", ".", "model", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ",", "momentum", "=", "0.9", ")", "\n", "", "self", ".", "train_epoch_num", "=", "epoch", "\n", "self", ".", "train_segment", "=", "0", "\n", "self", ".", "test_epoch_num", "=", "epoch", "\n", "self", ".", "test_segment", "=", "0", "\n", "self", ".", "set_state", "(", "state", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.get_model_parameters": [[58, 68], ["model.parameters", "print", "params_out.append", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_model_parameters", "(", "self", ",", "model", ")", ":", "\n", "        ", "params_out", "=", "[", "]", "\n", "skipped_params", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "params_out", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "skipped_params", "+=", "1", "\n", "", "", "print", "(", "str", "(", "skipped_params", ")", "+", "\" parameters frozen\"", ")", "\n", "return", "params_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.get_state": [[69, 77], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "}", "\n", "state", "[", "\"name\"", "]", "=", "self", ".", "name", "\n", "state", "[", "\"train_epoch_num\"", "]", "=", "self", ".", "train_epoch_num", "\n", "state", "[", "\"train_segment\"", "]", "=", "self", ".", "train_segment", "\n", "state", "[", "\"test_epoch_num\"", "]", "=", "self", ".", "test_epoch_num", "\n", "state", "[", "\"test_segment\"", "]", "=", "self", ".", "test_segment", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.set_state": [[78, 86], ["None"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "name", "=", "state", "[", "\"name\"", "]", "\n", "self", ".", "train_epoch_num", "=", "state", "[", "\"train_epoch_num\"", "]", "\n", "self", ".", "train_segment", "=", "state", "[", "\"train_segment\"", "]", "\n", "self", ".", "test_epoch_num", "=", "state", "[", "\"test_epoch_num\"", "]", "\n", "self", ".", "test_segment", "=", "state", "[", "\"test_segment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.write_grad_summaries": [[87, 100], ["parameter.data.cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "weights.numpy.numpy.numpy", "writer.add_histogram", "writer.add_scalar", "parameter.grad.data.cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "grad.numpy.numpy.numpy", "writer.add_histogram", "writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar"], ["", "def", "write_grad_summaries", "(", "self", ",", "writer", ",", "named_params", ",", "idx", ")", ":", "\n", "        ", "for", "name", ",", "parameter", "in", "named_params", ":", "\n", "            ", "weights", "=", "parameter", ".", "data", ".", "cpu", "(", ")", "\n", "mean_weight", "=", "torch", ".", "mean", "(", "weights", ")", "\n", "weights", "=", "weights", ".", "numpy", "(", ")", "\n", "writer", ".", "add_histogram", "(", "self", ".", "model", ".", "model_name", "+", "\"_internals\"", "+", "\"/hist_\"", "+", "name", "+", "\"_data\"", ",", "weights", ",", "idx", ",", "bins", "=", "100", ")", "\n", "writer", ".", "add_scalar", "(", "self", ".", "model", ".", "model_name", "+", "\"_internals\"", "+", "\"/mean_\"", "+", "name", "+", "\"_data\"", ",", "mean_weight", ",", "idx", ")", "\n", "if", "parameter", ".", "grad", "is", "not", "None", ":", "\n", "                ", "grad", "=", "parameter", ".", "grad", ".", "data", ".", "cpu", "(", ")", "\n", "mean_grad", "=", "torch", ".", "mean", "(", "grad", ")", "\n", "grad", "=", "grad", ".", "numpy", "(", ")", "\n", "writer", ".", "add_histogram", "(", "self", ".", "model", ".", "model_name", "+", "\"_internals\"", "+", "\"/hist_\"", "+", "name", "+", "\"_grad\"", ",", "grad", ",", "idx", ",", "bins", "=", "100", ")", "\n", "writer", ".", "add_scalar", "(", "self", ".", "model", ".", "model_name", "+", "\"_internals\"", "+", "\"/mean_\"", "+", "name", "+", "\"_grad\"", ",", "mean_grad", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.write_grouped_loss_summaries": [[101, 103], ["None"], "methods", ["None"], ["", "", "", "def", "write_grouped_loss_summaries", "(", "self", ",", "writer", ",", "losses", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.set_dataset_names": [[104, 106], ["None"], "methods", ["None"], ["", "def", "set_dataset_names", "(", "self", ",", "dataset_names", ")", ":", "\n", "        ", "self", ".", "dataset_names", "=", "dataset_names", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised.Trainer.train_epoch": [[107, 214], ["print", "trainer_supervised.Trainer.model.get_dataset", "hasattr", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.dataloader.DataLoader", "len", "int", "utils.simple_profiler.SimpleProfiler", "utils.simple_profiler.SimpleProfiler.tick", "hasattr", "print", "hasattr", "trainer_supervised.Trainer.model.eval", "trainer_supervised.Trainer.model.train", "parameters.parameter_server.get_current_parameters().get().get", "trainer_supervised.Trainer.set_word2token", "print", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised.Trainer.optim.zero_grad", "trainer_supervised.Trainer.model.sup_loss_on_batch", "utils.simple_profiler.SimpleProfiler.tick", "batch_loss.data.item", "sys.stdout.write", "sys.stdout.flush", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.loop", "utils.simple_profiler.SimpleProfiler.print_stats", "trainer_supervised.Trainer.model.write_eoe_summaries", "trainer_supervised.Trainer.model.writer.add_scalar", "type", "print", "batch_loss.backward", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised.Trainer.optim.step", "utils.simple_profiler.SimpleProfiler.tick", "parameters.parameter_server.get_current_parameters().get", "str", "batch_loss.data.item", "parameters.parameter_server.get_current_parameters", "str", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.segment_dataset_simple.SegmentDataset.set_word2token", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.write_eoe_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "train_epoch", "(", "self", ",", "train_data", "=", "None", ",", "train_envs", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "if", "eval", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "inference_type", "=", "\"eval\"", "\n", "epoch_num", "=", "self", ".", "train_epoch_num", "\n", "self", ".", "test_epoch_num", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "inference_type", "=", "\"train\"", "\n", "epoch_num", "=", "self", ".", "train_epoch_num", "\n", "self", ".", "train_epoch_num", "+=", "1", "\n", "\n", "", "if", "self", ".", "dataset_names", "is", "None", ":", "\n", "            ", "dataset_names", "=", "get_current_parameters", "(", ")", ".", "get", "(", "\"Data\"", ")", ".", "get", "(", "\"dataset_names\"", ")", "\n", "", "else", ":", "\n", "            ", "dataset_names", "=", "self", ".", "dataset_names", "\n", "\n", "", "print", "(", "\"WARNING: ASSUMING THAT SUPERVISED SINGLE_DOMAIN DATA COMES FROM SIMULATOR!\"", ")", "\n", "dataset", "=", "self", ".", "model", ".", "get_dataset", "(", "data", "=", "train_data", ",", "envs", "=", "train_envs", ",", "domain", "=", "\"sim\"", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ")", "\n", "# TODO: Get rid of this:", "\n", "if", "hasattr", "(", "dataset", ",", "\"set_word2token\"", ")", ":", "\n", "            ", "dataset", ".", "set_word2token", "(", "self", ".", "token2word", ",", "self", ".", "word2token", ")", "\n", "\n", "", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "collate_fn", "=", "dataset", ".", "collate_fn", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_loaders", ",", "\n", "pin_memory", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "num_samples", "=", "len", "(", "dataset", ")", "\n", "if", "num_samples", "==", "0", ":", "\n", "            ", "print", "(", "\"DATASET HAS NO DATA!\"", ")", "\n", "return", "-", "1.0", "\n", "\n", "", "num_batches", "=", "int", "(", "(", "num_samples", "+", "self", ".", "batch_size", "-", "1", ")", "/", "self", ".", "batch_size", ")", "\n", "\n", "epoch_loss", "=", "0", "\n", "count", "=", "0", "\n", "\n", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "for", "batch", "in", "dataloader", ":", "\n", "\n", "            ", "if", "batch", "is", "None", ":", "\n", "#print(\"None batch!\")", "\n", "                ", "continue", "\n", "\n", "", "prof", ".", "tick", "(", "\"batch_load\"", ")", "\n", "# Zero gradients before each segment and initialize zero segment loss", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "batch_loss", ",", "tensor_store", "=", "self", ".", "model", ".", "sup_loss_on_batch", "(", "batch", ",", "eval", ")", "\n", "\n", "if", "type", "(", "batch_loss", ")", "==", "int", ":", "\n", "                ", "print", "(", "\"Ding\"", ")", "\n", "\n", "", "prof", ".", "tick", "(", "\"forward\"", ")", "\n", "\n", "# Backprop and step", "\n", "if", "not", "eval", ":", "\n", "                ", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "prof", ".", "tick", "(", "\"backward\"", ")", "\n", "\n", "# This is SLOW! Don't do it often", "\n", "# TODO: Get rid of tensorboard", "\n", "#if self.batch_num % 20 == 0 and hasattr(self.model, \"writer\"):", "\n", "#    params = self.model.named_parameters()", "\n", "#    self.write_grad_summaries(self.model.writer, params, self.batch_num)", "\n", "\n", "self", ".", "batch_num", "+=", "1", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "prof", ".", "tick", "(", "\"optim\"", ")", "\n", "\n", "# Get losses as floats", "\n", "", "epoch_loss", "+=", "batch_loss", ".", "data", ".", "item", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r Batch:\"", "+", "str", "(", "count", ")", "+", "\" / \"", "+", "str", "(", "num_batches", ")", "+", "\" loss: \"", "+", "str", "(", "batch_loss", ".", "data", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "self", ".", "train_segment", "+=", "0", "if", "eval", "else", "1", "\n", "self", ".", "test_segment", "+=", "1", "if", "eval", "else", "0", "\n", "\n", "prof", ".", "tick", "(", "\"rep\"", ")", "\n", "\n", "prof", ".", "loop", "(", ")", "\n", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ".", "model", ",", "\"write_eoe_summaries\"", ")", ":", "\n", "            ", "self", ".", "model", ".", "write_eoe_summaries", "(", "inference_type", ",", "epoch_num", ")", "\n", "\n", "", "print", "(", "\"\"", ")", "\n", "epoch_loss", "/=", "(", "count", "+", "1e-15", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "\"writer\"", ")", ":", "\n", "            ", "self", ".", "model", ".", "writer", ".", "add_scalar", "(", "self", ".", "name", "+", "\"/\"", "+", "inference_type", "+", "\"_epoch_loss\"", ",", "epoch_loss", ",", "epoch_num", ")", "\n", "\n", "", "return", "epoch_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.from_rollouts": [[11, 27], ["RolloutStorage.RolloutStorage", "print", "RolloutStorage.RolloutStorage.initialize", "len", "RolloutStorage.RolloutStorage.to"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.initialize", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["    ", "@", "classmethod", "\n", "def", "from_rollouts", "(", "cls", ",", "rollouts", ",", "device", "=", "None", ",", "intrinsic_reward_only", "=", "False", ")", ":", "\n", "# Count how many steps in the rollouts", "\n", "        ", "num_steps", "=", "0", "\n", "for", "r", "in", "rollouts", ":", "\n", "            ", "num_steps", "+=", "len", "(", "r", ")", "\n", "\n", "# We don't have a hidden state", "\n", "", "rollout_storage", "=", "RolloutStorage", "(", "num_steps", ",", "1", ",", "action_shape", "=", "4", ",", "\n", "recurrent_hidden_state_size", "=", "1", ")", "\n", "print", "(", "\"RolloutStorage: initialize\"", ")", "\n", "rollout_storage", ".", "initialize", "(", "rollouts", ",", "intrinsic_reward_only", "=", "intrinsic_reward_only", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "            ", "rollout_storage", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "rollout_storage", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.__init__": [[28, 47], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "num_steps", ",", "num_processes", ",", "action_shape", ",", "\n", "recurrent_hidden_state_size", ")", ":", "\n", "#self.obs = torch.zeros(num_steps + 1, num_processes, *obs_shape)", "\n", "        ", "self", ".", "obs", "=", "[", "None", "]", "*", "num_steps", "\n", "self", ".", "obsb", "=", "[", "None", "]", "*", "num_steps", "#torch.zeros(num_steps + 1, num_processes, *obsb_shape)", "\n", "self", ".", "recurrent_hidden_states", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "recurrent_hidden_state_size", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "value_preds", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "action_log_probs", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "action_shape", ")", "\n", "self", ".", "masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "# Masks that indicate whether it's a true terminal state", "\n", "# or time limit end state", "\n", "self", ".", "bad_masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.initialize": [[49, 77], ["rollout_storage.RolloutStorage.actions[].copy_", "rollout_storage.RolloutStorage.action_log_probs[].copy_", "rollout_storage.RolloutStorage.value_preds[].copy_", "int", "int", "torch.from_numpy"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "rollouts", ",", "intrinsic_reward_only", "=", "False", ")", ":", "\n", "        ", "for", "rollout", "in", "rollouts", ":", "\n", "            ", "for", "sample", "in", "rollout", ":", "\n", "# Observation at start of timestep t", "\n", "# Calling clone here resulted in an un-debuggable hang! Can't figure out why.", "\n", "#x = sample[\"policy_input\"].clone()", "\n", "                ", "self", ".", "obs", "[", "self", ".", "step", "]", "=", "sample", "[", "\"policy_input\"", "]", "\n", "#x = sample[\"policy_input_b\"].clone()", "\n", "self", ".", "obsb", "[", "self", ".", "step", "]", "=", "sample", "[", "\"policy_input_b\"", "]", "\n", "# Action taken at timestep t", "\n", "self", ".", "actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "sample", "[", "\"action\"", "]", ")", ")", "\n", "self", ".", "action_log_probs", "[", "self", ".", "step", "]", ".", "copy_", "(", "sample", "[", "\"action_logprob\"", "]", ")", "\n", "\n", "# Predicted value for observation at timestep t", "\n", "self", ".", "value_preds", "[", "self", ".", "step", "]", ".", "copy_", "(", "sample", "[", "\"value_pred\"", "]", ")", "\n", "# Reward for executing action a_t at timestep t and ending up at state s_t+1.", "\n", "# Really computed based on state s_t+1.", "\n", "# TODO: Compute map coverage based on next state too (early-forward stage and keep results)", "\n", "if", "intrinsic_reward_only", ":", "\n", "                    ", "self", ".", "rewards", "[", "self", ".", "step", "]", "=", "sample", "[", "\"intrinsic_reward\"", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "rewards", "[", "self", ".", "step", "]", "=", "sample", "[", "\"full_reward\"", "]", "\n", "\n", "# Whether timestep t is the last timestep of an episode", "\n", "", "self", ".", "masks", "[", "self", ".", "step", "]", "=", "int", "(", "sample", "[", "\"done\"", "]", ")", "\n", "self", ".", "bad_masks", "[", "self", ".", "step", "]", "=", "int", "(", "sample", "[", "\"expired\"", "]", ")", "\n", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.to": [[78, 89], ["rollout_storage.RolloutStorage.recurrent_hidden_states.to", "rollout_storage.RolloutStorage.rewards.to", "rollout_storage.RolloutStorage.value_preds.to", "rollout_storage.RolloutStorage.returns.to", "rollout_storage.RolloutStorage.action_log_probs.to", "rollout_storage.RolloutStorage.actions.to", "rollout_storage.RolloutStorage.masks.to", "rollout_storage.RolloutStorage.bad_masks.to", "o.to", "o.to"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "obs", "=", "[", "o", ".", "to", "(", "device", ")", "for", "o", "in", "self", ".", "obs", "if", "o", "is", "not", "None", "]", "\n", "self", ".", "obsb", "=", "[", "o", ".", "to", "(", "device", ")", "for", "o", "in", "self", ".", "obsb", "if", "o", "is", "not", "None", "]", "\n", "self", ".", "recurrent_hidden_states", "=", "self", ".", "recurrent_hidden_states", ".", "to", "(", "device", ")", "\n", "self", ".", "rewards", "=", "self", ".", "rewards", ".", "to", "(", "device", ")", "\n", "self", ".", "value_preds", "=", "self", ".", "value_preds", ".", "to", "(", "device", ")", "\n", "self", ".", "returns", "=", "self", ".", "returns", ".", "to", "(", "device", ")", "\n", "self", ".", "action_log_probs", "=", "self", ".", "action_log_probs", ".", "to", "(", "device", ")", "\n", "self", ".", "actions", "=", "self", ".", "actions", ".", "to", "(", "device", ")", "\n", "self", ".", "masks", "=", "self", ".", "masks", ".", "to", "(", "device", ")", "\n", "self", ".", "bad_masks", "=", "self", ".", "bad_masks", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.compute_returns": [[110, 160], ["reversed", "reversed", "reversed", "reversed", "range", "range", "range", "range", "rollout_storage.RolloutStorage.rewards.size", "rollout_storage.RolloutStorage.rewards.size", "rollout_storage.RolloutStorage.rewards.size", "rollout_storage.RolloutStorage.rewards.size"], "methods", ["None"], ["def", "compute_returns", "(", "self", ",", "\n", "next_value", ",", "\n", "use_gae", ",", "\n", "gamma", ",", "\n", "gae_lambda", ",", "\n", "use_proper_time_limits", "=", "True", ")", ":", "\n", "# TODO: Change interpretations of masks as done masks. Thus far they been used as not-done masks. Done for last block", "\n", "        ", "if", "use_proper_time_limits", ":", "\n", "            ", "if", "use_gae", ":", "\n", "                ", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "gamma", "*", "self", ".", "value_preds", "[", "\n", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "gamma", "*", "gae_lambda", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "*", "gae", "\n", "gae", "=", "gae", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "returns", "[", "-", "1", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "self", ".", "returns", "[", "step", "]", "=", "(", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "+", "self", ".", "rewards", "[", "step", "]", ")", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "+", "(", "1", "-", "self", ".", "bad_masks", "[", "step", "+", "1", "]", ")", "*", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "", "else", ":", "\n", "            ", "if", "use_gae", ":", "\n", "#self.value_preds[-1] = next_value", "\n", "                ", "gae", "=", "0", "\n", "\n", "# Cumuative returns are the correct empirical returns at the end of every step", "\n", "#cumulative_returns = [self.rewards[0]]", "\n", "#for step in range(1, self.rewards.size(0)):", "\n", "#    cumret = cumulative_returns[step-1] * (1 - self.masks[step-1])", "\n", "#    cumulative_returns.append(cumret)", "\n", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "gamma", "*", "self", ".", "value_preds", "[", "\n", "step", "+", "1", "]", "*", "(", "1", "-", "self", ".", "masks", "[", "step", "]", ")", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "gamma", "*", "gae_lambda", "*", "(", "1", "-", "self", ".", "masks", "[", "step", "]", ")", "*", "gae", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "                ", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "# TODO WARNING: Changed here from self.masks[step + 1] to self.masks[step]", "\n", "# TODO: Do the same when using GAE", "\n", "                    ", "prop", "=", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "(", "1", "-", "self", ".", "masks", "[", "step", "]", ")", "\n", "ret", "=", "prop", "+", "self", ".", "rewards", "[", "step", "]", "\n", "self", ".", "returns", "[", "step", "]", "=", "ret", "\n", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.feed_forward_generator": [[161, 203], ["torch.utils.data.sampler.BatchSampler", "rollout_storage.RolloutStorage.rewards.size", "torch.utils.data.sampler.SubsetRandomSampler", "range", "rollout_storage.RolloutStorage.recurrent_hidden_states[].view", "rollout_storage.RolloutStorage.actions.view", "rollout_storage.RolloutStorage.value_preds[].view", "rollout_storage.RolloutStorage.returns[].view", "rollout_storage.RolloutStorage.masks[].view", "rollout_storage.RolloutStorage.action_log_probs.view", "rollout_storage.RolloutStorage.recurrent_hidden_states.size", "rollout_storage.RolloutStorage.actions.size", "advantages.view"], "methods", ["None"], ["", "def", "feed_forward_generator", "(", "self", ",", "\n", "advantages", ",", "\n", "num_mini_batch", "=", "None", ",", "\n", "mini_batch_size", "=", "None", ")", ":", "\n", "        ", "num_steps", ",", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "batch_size", "=", "num_processes", "*", "num_steps", "\n", "\n", "if", "mini_batch_size", "is", "None", ":", "\n", "            ", "assert", "batch_size", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"* number of steps ({}) = {} \"", "\n", "\"to be greater than or equal to the number of PPO mini batches ({}).\"", "\n", "\"\"", ".", "format", "(", "num_processes", ",", "num_steps", ",", "num_processes", "*", "num_steps", ",", "\n", "num_mini_batch", ")", ")", "\n", "mini_batch_size", "=", "batch_size", "//", "num_mini_batch", "\n", "", "sampler", "=", "BatchSampler", "(", "\n", "SubsetRandomSampler", "(", "range", "(", "batch_size", ")", ")", ",", "\n", "mini_batch_size", ",", "\n", "drop_last", "=", "False", ")", "\n", "for", "indices", "in", "sampler", ":", "\n", "            ", "obs_batch", "=", "[", "self", ".", "obs", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "obsb_batch", "=", "[", "self", ".", "obsb", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "recurrent_hidden_states_batch", "=", "self", ".", "recurrent_hidden_states", "[", ":", "-", "1", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "recurrent_hidden_states", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "actions_batch", "=", "self", ".", "actions", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "actions", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "value_preds_batch", "=", "self", ".", "value_preds", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "return_batch", "=", "self", ".", "returns", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "masks_batch", "=", "self", ".", "masks", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "old_action_log_probs_batch", "=", "self", ".", "action_log_probs", ".", "view", "(", "-", "1", ",", "\n", "1", ")", "[", "indices", "]", "\n", "if", "advantages", "is", "None", ":", "\n", "                ", "adv_targ", "=", "None", "\n", "", "else", ":", "\n", "                ", "adv_targ", "=", "advantages", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "\n", "# Remove the redundant dimension - it clashes with things! This should be a 1D vector", "\n", "", "old_action_log_probs_batch", "=", "old_action_log_probs_batch", "[", ":", ",", "0", "]", "\n", "\n", "# TODO: return map coverages / semantic maps or wahtever", "\n", "yield", "obs_batch", ",", "obsb_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.recurrent_generator": [[204, 262], ["rollout_storage.RolloutStorage.rewards.size", "torch.randperm", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().view", "rollout_storage._flatten_helper", "rollout_storage._flatten_helper", "rollout_storage._flatten_helper", "rollout_storage._flatten_helper", "rollout_storage._flatten_helper", "rollout_storage._flatten_helper", "rollout_storage._flatten_helper", "_flatten_helper.append", "torch.stack().view.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "recurrent_generator", "(", "self", ",", "advantages", ",", "num_mini_batch", ")", ":", "\n", "        ", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", "1", ")", "\n", "assert", "num_processes", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"to be greater than or equal to the number of \"", "\n", "\"PPO mini batches ({}).\"", ".", "format", "(", "num_processes", ",", "num_mini_batch", ")", ")", "\n", "num_envs_per_batch", "=", "num_processes", "//", "num_mini_batch", "\n", "perm", "=", "torch", ".", "randperm", "(", "num_processes", ")", "\n", "for", "start_ind", "in", "range", "(", "0", ",", "num_processes", ",", "num_envs_per_batch", ")", ":", "\n", "            ", "obs_batch", "=", "[", "]", "\n", "recurrent_hidden_states_batch", "=", "[", "]", "\n", "actions_batch", "=", "[", "]", "\n", "value_preds_batch", "=", "[", "]", "\n", "return_batch", "=", "[", "]", "\n", "masks_batch", "=", "[", "]", "\n", "old_action_log_probs_batch", "=", "[", "]", "\n", "adv_targ", "=", "[", "]", "\n", "\n", "for", "offset", "in", "range", "(", "num_envs_per_batch", ")", ":", "\n", "                ", "ind", "=", "perm", "[", "start_ind", "+", "offset", "]", "\n", "obs_batch", ".", "append", "(", "self", ".", "obs", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "recurrent_hidden_states_batch", ".", "append", "(", "\n", "self", ".", "recurrent_hidden_states", "[", "0", ":", "1", ",", "ind", "]", ")", "\n", "actions_batch", ".", "append", "(", "self", ".", "actions", "[", ":", ",", "ind", "]", ")", "\n", "value_preds_batch", ".", "append", "(", "self", ".", "value_preds", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "return_batch", ".", "append", "(", "self", ".", "returns", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "masks_batch", ".", "append", "(", "self", ".", "masks", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "old_action_log_probs_batch", ".", "append", "(", "\n", "self", ".", "action_log_probs", "[", ":", ",", "ind", "]", ")", "\n", "adv_targ", ".", "append", "(", "advantages", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "T", ",", "N", "=", "self", ".", "num_steps", ",", "num_envs_per_batch", "\n", "# These are all tensors of size (T, N, -1)", "\n", "obs_batch", "=", "torch", ".", "stack", "(", "obs_batch", ",", "1", ")", "\n", "actions_batch", "=", "torch", ".", "stack", "(", "actions_batch", ",", "1", ")", "\n", "value_preds_batch", "=", "torch", ".", "stack", "(", "value_preds_batch", ",", "1", ")", "\n", "return_batch", "=", "torch", ".", "stack", "(", "return_batch", ",", "1", ")", "\n", "masks_batch", "=", "torch", ".", "stack", "(", "masks_batch", ",", "1", ")", "\n", "old_action_log_probs_batch", "=", "torch", ".", "stack", "(", "\n", "old_action_log_probs_batch", ",", "1", ")", "\n", "adv_targ", "=", "torch", ".", "stack", "(", "adv_targ", ",", "1", ")", "\n", "\n", "# States is just a (N, -1) tensor", "\n", "recurrent_hidden_states_batch", "=", "torch", ".", "stack", "(", "\n", "recurrent_hidden_states_batch", ",", "1", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n", "# Flatten the (T, N, ...) tensors to (T * N, ...)", "\n", "obs_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "obs_batch", ")", "\n", "actions_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "actions_batch", ")", "\n", "value_preds_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "value_preds_batch", ")", "\n", "return_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "return_batch", ")", "\n", "masks_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "masks_batch", ")", "\n", "old_action_log_probs_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "old_action_log_probs_batch", ")", "\n", "adv_targ", "=", "_flatten_helper", "(", "T", ",", "N", ",", "adv_targ", ")", "\n", "\n", "yield", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage._flatten_helper": [[5, 7], ["_tensor.view", "_tensor.size"], "function", ["None"], ["def", "_flatten_helper", "(", "T", ",", "N", ",", "_tensor", ")", ":", "\n", "    ", "return", "_tensor", ".", "view", "(", "T", "*", "N", ",", "*", "_tensor", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.__init__": [[58, 66], ["super().__init__", "torch.distributions.Uniform", "torch.distributions.Uniform"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "min", ",", "max", ")", ":", "\n", "# Clamp the mean to not go more than one std dev outside of the permitted interval", "\n", "#mean = torch.max(torch.min(mean, max + std), min - std)", "\n", "        ", "super", "(", "BoundedNormal", ",", "self", ")", ".", "__init__", "(", "mean", ",", "std", ")", "\n", "self", ".", "lower", "=", "min", "\n", "self", ".", "upper", "=", "max", "\n", "self", ".", "proposal", "=", "torch", ".", "distributions", ".", "Uniform", "(", "self", ".", "lower", ",", "self", ".", "upper", ")", "\n", "self", ".", "uniform", "=", "torch", ".", "distributions", ".", "Uniform", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob": [[67, 73], ["torch.log().detach", "super().log_prob", "fixed_distributions.BoundedNormal.cdf", "fixed_distributions.BoundedNormal.cdf", "torch.log"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "interval_prob", "=", "self", ".", "cdf", "(", "self", ".", "upper", ")", "-", "self", ".", "cdf", "(", "self", ".", "lower", ")", "\n", "interval_log_prob", "=", "torch", ".", "log", "(", "interval_prob", ")", ".", "detach", "(", ")", "\n", "logprob", "=", "super", "(", "BoundedNormal", ",", "self", ")", ".", "log_prob", "(", "value", ")", "\n", "# P(X) = P(X) under gaussian / P(interval)", "\n", "return", "logprob", "-", "interval_log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.entropy": [[74, 76], ["super().entropy().mean", "super().entropy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "BoundedNormal", ",", "self", ")", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample": [[77, 113], ["torch.Size", "fixed_distributions.BoundedNormal.proposal.sample().to", "fixed_distributions.BoundedNormal.uniform.sample().to", "torch.exp", "torch.exp", "torch.zeros_like", "fixed_distributions.BoundedNormal.log_prob", "fixed_distributions.BoundedNormal.log_prob", "overall_accept.long().sum", "fixed_distributions.BoundedNormal.proposal.sample().to", "fixed_distributions.BoundedNormal.uniform.sample().to", "torch.exp", "print", "print", "fixed_distributions.BoundedNormal.proposal.sample", "fixed_distributions.BoundedNormal.uniform.sample", "torch.clamp", "fixed_distributions.BoundedNormal.log_prob", "overall_accept.long", "fixed_distributions.BoundedNormal.proposal.sample", "fixed_distributions.BoundedNormal.uniform.sample"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "sample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", "[", "]", ")", ")", ":", "\n", "# Rejection sampling from a bounded interval", "\n", "        ", "dim", "=", "self", ".", "mean", ".", "shape", "[", "0", "]", "\n", "#self.prof.tick(\"out\")", "\n", "\n", "proposals", "=", "self", ".", "proposal", ".", "sample", "(", "self", ".", "mean", ".", "shape", ")", ".", "to", "(", "self", ".", "mean", ".", "device", ")", "\n", "uniforms", "=", "self", ".", "uniform", ".", "sample", "(", "self", ".", "mean", ".", "shape", ")", ".", "to", "(", "self", ".", "mean", ".", "device", ")", "\n", "pdfs", "=", "torch", ".", "exp", "(", "self", ".", "log_prob", "(", "proposals", ")", ")", "\n", "maxpdf", "=", "torch", ".", "exp", "(", "self", ".", "log_prob", "(", "torch", ".", "clamp", "(", "self", ".", "mean", ",", "self", ".", "lower", ",", "self", ".", "upper", ")", ")", ")", "\n", "norm_pdfs", "=", "pdfs", "/", "maxpdf", "\n", "\n", "accepted_samples", "=", "torch", ".", "zeros_like", "(", "proposals", ")", "\n", "overall_accept", "=", "uniforms", "<", "norm_pdfs", "\n", "accepted_samples", "[", "overall_accept", "]", "=", "proposals", "[", "overall_accept", "]", "\n", "\n", "count", "=", "0", "\n", "while", "overall_accept", ".", "long", "(", ")", ".", "sum", "(", ")", "<", "dim", ":", "\n", "            ", "proposals", "=", "self", ".", "proposal", ".", "sample", "(", "self", ".", "mean", ".", "shape", ")", ".", "to", "(", "self", ".", "mean", ".", "device", ")", "\n", "uniforms", "=", "self", ".", "uniform", ".", "sample", "(", "self", ".", "mean", ".", "shape", ")", ".", "to", "(", "self", ".", "mean", ".", "device", ")", "\n", "pdfs", "=", "torch", ".", "exp", "(", "self", ".", "log_prob", "(", "proposals", ")", ")", "\n", "norm_pdfs", "=", "pdfs", "/", "maxpdf", "\n", "accept", "=", "uniforms", "<", "norm_pdfs", "\n", "# TODO: Don't re-sample already accepted values", "\n", "new_accept", "=", "accept", "and", "not", "overall_accept", "\n", "accepted_samples", "[", "new_accept", "]", "=", "proposals", "[", "new_accept", "]", "\n", "overall_accept", "=", "overall_accept", "or", "accept", "\n", "count", "+=", "1", "\n", "\n", "", "if", "count", ">", "10", ":", "\n", "            ", "print", "(", "f\"Sampling took {count} attempts!\"", ")", "\n", "", "if", "count", ">", "100", ":", "\n", "            ", "print", "(", "\"Shite!\"", ")", "\n", "#self.prof.tick(\"sampling\")", "\n", "#self.prof.loop()", "\n", "#self.prof.print_stats(1)", "\n", "", "return", "accepted_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.mode": [[114, 116], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain.TrainerBidomain.__init__": [[23, 99], ["data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "trainer_supervised_bidomain.TrainerBidomain.params.get", "trainer_supervised_bidomain.TrainerBidomain.params.get", "trainer_supervised_bidomain.TrainerBidomain.params.get", "trainer_supervised_bidomain.TrainerBidomain.params.get", "trainer_supervised_bidomain.TrainerBidomain.params.get", "learning.utils.get_n_params", "learning.utils.get_n_trainable_params", "learning.utils.get_n_params", "learning.utils.get_n_trainable_params", "learning.utils.get_n_params", "learning.utils.get_n_params", "print", "print", "print", "print", "print", "print", "print", "Optim", "Optim", "trainer_supervised_bidomain.TrainerBidomain.set_state", "parameters.parameter_server.get_current_parameters", "trainer_supervised_bidomain.TrainerBidomain.params.get", "print", "model_real.steal_cross_domain_modules", "print", "trainer_supervised_bidomain.TrainerBidomain.model_real.both_domain_parameters", "trainer_supervised_bidomain.TrainerBidomain.get_model_parameters", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "str", "str", "str", "str", "str", "str", "ValueError"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_state", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.steal_cross_domain_modules", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.both_domain_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_real", ",", "\n", "model_sim", ",", "\n", "model_critic", ",", "\n", "state", "=", "None", ",", "\n", "epoch", "=", "0", "\n", ")", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "token2word", ",", "self", ".", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"Training\"", "]", "\n", "self", ".", "run_name", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"run_name\"", "]", "\n", "self", ".", "batch_size", "=", "self", ".", "params", "[", "'batch_size'", "]", "\n", "self", ".", "weight_decay", "=", "self", ".", "params", "[", "'weight_decay'", "]", "\n", "self", ".", "optimizer", "=", "self", ".", "params", "[", "'optimizer'", "]", "\n", "self", ".", "num_loaders", "=", "self", ".", "params", "[", "'num_loaders'", "]", "\n", "self", ".", "lr", "=", "self", ".", "params", "[", "'lr'", "]", "\n", "self", ".", "critic_steps", "=", "self", ".", "params", "[", "'critic_steps'", "]", "\n", "self", ".", "critic_warmup_steps", "=", "self", ".", "params", "[", "'critic_warmup_steps'", "]", "\n", "self", ".", "critic_warmup_iterations", "=", "self", ".", "params", "[", "'critic_warmup_iterations'", "]", "\n", "self", ".", "model_steps", "=", "self", ".", "params", "[", "'model_steps'", "]", "\n", "self", ".", "critic_batch_size", "=", "self", ".", "params", "[", "\"critic_batch_size\"", "]", "\n", "self", ".", "model_batch_size", "=", "self", ".", "params", "[", "\"model_batch_size\"", "]", "\n", "self", ".", "disable_wloss", "=", "self", ".", "params", "[", "\"disable_wloss\"", "]", "\n", "self", ".", "sim_steps_per_real_step", "=", "self", ".", "params", ".", "get", "(", "\"sim_steps_per_real_step\"", ",", "1", ")", "\n", "self", ".", "real_grad_noise", "=", "self", ".", "params", ".", "get", "(", "\"real_grad_noise\"", ",", "False", ")", "\n", "\n", "self", ".", "critic_steps_cycle", "=", "self", ".", "params", ".", "get", "(", "\"critic_steps_cycle\"", ",", "False", ")", "\n", "self", ".", "critic_steps_amplitude", "=", "self", ".", "params", ".", "get", "(", "\"critic_steps_amplitude\"", ",", "0", ")", "\n", "self", ".", "critic_steps_period", "=", "self", ".", "params", ".", "get", "(", "\"critic_steps_period\"", ",", "1", ")", "\n", "\n", "self", ".", "sim_datasets", "=", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "[", "\"sim_datasets\"", "]", "\n", "self", ".", "real_datasets", "=", "get_current_parameters", "(", ")", "[", "\"Data\"", "]", "[", "\"real_datasets\"", "]", "\n", "\n", "n_params_real", "=", "get_n_params", "(", "model_real", ")", "\n", "n_params_real_tr", "=", "get_n_trainable_params", "(", "model_real", ")", "\n", "n_params_sim", "=", "get_n_params", "(", "model_sim", ")", "\n", "n_params_sim_tr", "=", "get_n_trainable_params", "(", "model_sim", ")", "\n", "n_params_c", "=", "get_n_params", "(", "model_critic", ")", "\n", "n_params_c_tr", "=", "get_n_params", "(", "model_critic", ")", "\n", "\n", "print", "(", "\"Training Model:\"", ")", "\n", "print", "(", "\"Real # model parameters: \"", "+", "str", "(", "n_params_real", ")", ")", "\n", "print", "(", "\"Real # trainable parameters: \"", "+", "str", "(", "n_params_real_tr", ")", ")", "\n", "print", "(", "\"Sim  # model parameters: \"", "+", "str", "(", "n_params_sim", ")", ")", "\n", "print", "(", "\"Sim  # trainable parameters: \"", "+", "str", "(", "n_params_sim_tr", ")", ")", "\n", "print", "(", "\"Critic  # model parameters: \"", "+", "str", "(", "n_params_c", ")", ")", "\n", "print", "(", "\"Critic  # trainable parameters: \"", "+", "str", "(", "n_params_c_tr", ")", ")", "\n", "\n", "# Share those modules that are to be shared between real and sim models", "\n", "if", "not", "self", ".", "params", ".", "get", "(", "\"disable_domain_weight_sharing\"", ")", ":", "\n", "            ", "print", "(", "\"Sharing weights between sim and real modules\"", ")", "\n", "model_real", ".", "steal_cross_domain_modules", "(", "model_sim", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"NOT Sharing weights between sim and real modules\"", ")", "\n", "\n", "", "self", ".", "model_real", "=", "model_real", "\n", "self", ".", "model_sim", "=", "model_sim", "\n", "self", ".", "model_critic", "=", "model_critic", "\n", "\n", "if", "self", ".", "optimizer", "==", "\"adam\"", ":", "\n", "            ", "Optim", "=", "optim", ".", "Adam", "\n", "", "elif", "self", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "            ", "Optim", "=", "optim", ".", "SGD", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unsuppored optimizer {self.optimizer}\"", ")", "\n", "\n", "", "self", ".", "optim_models", "=", "Optim", "(", "self", ".", "model_real", ".", "both_domain_parameters", "(", "self", ".", "model_sim", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "self", ".", "optim_critic", "=", "Optim", "(", "self", ".", "get_model_parameters", "(", "self", ".", "model_critic", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "\n", "self", ".", "train_epoch_num", "=", "epoch", "\n", "self", ".", "train_segment", "=", "0", "\n", "self", ".", "test_epoch_num", "=", "epoch", "\n", "self", ".", "test_segment", "=", "0", "\n", "self", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain.TrainerBidomain.get_model_parameters": [[100, 110], ["model.parameters", "print", "params_out.append", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_model_parameters", "(", "self", ",", "model", ")", ":", "\n", "        ", "params_out", "=", "[", "]", "\n", "skipped_params", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "params_out", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "skipped_params", "+=", "1", "\n", "", "", "print", "(", "str", "(", "skipped_params", ")", "+", "\" parameters frozen\"", ")", "\n", "return", "params_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain.TrainerBidomain.get_state": [[111, 118], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "}", "\n", "state", "[", "\"train_epoch_num\"", "]", "=", "self", ".", "train_epoch_num", "\n", "state", "[", "\"train_segment\"", "]", "=", "self", ".", "train_segment", "\n", "state", "[", "\"test_epoch_num\"", "]", "=", "self", ".", "test_epoch_num", "\n", "state", "[", "\"test_segment\"", "]", "=", "self", ".", "test_segment", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain.TrainerBidomain.set_state": [[119, 126], ["None"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "train_epoch_num", "=", "state", "[", "\"train_epoch_num\"", "]", "\n", "self", ".", "train_segment", "=", "state", "[", "\"train_segment\"", "]", "\n", "self", ".", "test_epoch_num", "=", "state", "[", "\"test_epoch_num\"", "]", "\n", "self", ".", "test_segment", "=", "state", "[", "\"test_segment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain.TrainerBidomain.train_epoch": [[127, 351], ["trainer_supervised_bidomain.TrainerBidomain.model_sim.get_dataset", "learning.dual_dataloader.DualDataloader", "learning.dual_dataloader.DualDataloader", "iter", "len", "len", "len", "utils.simple_profiler.SimpleProfiler", "utils.simple_profiler.SimpleProfiler.tick", "print", "trainer_supervised_bidomain.TrainerBidomain.model_real.eval", "trainer_supervised_bidomain.TrainerBidomain.model_sim.eval", "trainer_supervised_bidomain.TrainerBidomain.model_critic.eval", "trainer_supervised_bidomain.TrainerBidomain.model_real.train", "trainer_supervised_bidomain.TrainerBidomain.model_sim.train", "trainer_supervised_bidomain.TrainerBidomain.model_critic.train", "trainer_supervised_bidomain.TrainerBidomain.model_sim.get_dataset", "trainer_supervised_bidomain.TrainerBidomain.model_real.get_dataset", "print", "utils.simple_profiler.SimpleProfiler.tick", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.key_tensor_store.KeyTensorStore", "range", "sys.stdout.write", "sys.stdout.flush", "total_loss.data.item", "utils.simple_profiler.SimpleProfiler.loop", "utils.simple_profiler.SimpleProfiler.print_stats", "range", "print", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain.TrainerBidomain.model_real.sup_loss_on_batch", "learning.modules.key_tensor_store.KeyTensorStore.append", "trainer_supervised_bidomain.TrainerBidomain.model_sim.sup_loss_on_batch", "learning.modules.key_tensor_store.KeyTensorStore.append", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain.TrainerBidomain.model_critic.calc_domain_loss", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain.TrainerBidomain.optim_models.zero_grad", "trainer_supervised_bidomain.TrainerBidomain.optim_models.step", "utils.simple_profiler.SimpleProfiler.tick", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.key_tensor_store.KeyTensorStore", "range", "trainer_supervised_bidomain.TrainerBidomain.model_critic.calc_domain_loss", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain.TrainerBidomain.optim_critic.zero_grad", "trainer_supervised_bidomain.TrainerBidomain.optim_critic.step", "sys.stdout.write", "sys.stdout.flush", "utils.simple_profiler.SimpleProfiler.tick", "total_loss.backward", "int", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.tick", "learning.modules.key_tensor_store.KeyTensorStore.append", "learning.modules.key_tensor_store.KeyTensorStore.append", "utils.simple_profiler.SimpleProfiler.tick", "print", "print", "sim_loss.data.item", "next", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer_supervised_bidomain.TrainerBidomain.model_real.sup_loss_on_batch", "trainer_supervised_bidomain.TrainerBidomain.model_sim.sup_loss_on_batch", "real_loss.data.item", "wdist_loss_a.data.item", "math.sin"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.calc_domain_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.calc_domain_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch"], ["", "def", "train_epoch", "(", "self", ",", "env_list", "=", "None", ",", "data_list_real", "=", "None", ",", "data_list_sim", "=", "None", ",", "eval", "=", "False", ",", "restricted_domain", "=", "False", ")", ":", "\n", "\n", "        ", "if", "eval", ":", "\n", "            ", "self", ".", "model_real", ".", "eval", "(", ")", "\n", "self", ".", "model_sim", ".", "eval", "(", ")", "\n", "self", ".", "model_critic", ".", "eval", "(", ")", "\n", "inference_type", "=", "\"eval\"", "\n", "epoch_num", "=", "self", ".", "train_epoch_num", "\n", "self", ".", "test_epoch_num", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_real", ".", "train", "(", ")", "\n", "self", ".", "model_sim", ".", "train", "(", ")", "\n", "self", ".", "model_critic", ".", "train", "(", ")", "\n", "inference_type", "=", "\"train\"", "\n", "epoch_num", "=", "self", ".", "train_epoch_num", "\n", "self", ".", "train_epoch_num", "+=", "1", "\n", "\n", "# Allow testing with both domains being simulation domain", "\n", "", "if", "self", ".", "params", "[", "\"sim_domain_only\"", "]", ":", "\n", "            ", "dataset_real", "=", "self", ".", "model_sim", ".", "get_dataset", "(", "data", "=", "data_list_sim", ",", "envs", "=", "env_list", ",", "dataset_names", "=", "self", ".", "sim_datasets", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ")", "\n", "self", ".", "model_real", "=", "self", ".", "model_sim", "\n", "", "else", ":", "\n", "            ", "dataset_real", "=", "self", ".", "model_real", ".", "get_dataset", "(", "data", "=", "data_list_real", ",", "envs", "=", "env_list", ",", "dataset_names", "=", "self", ".", "real_datasets", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ")", "\n", "\n", "", "dataset_sim", "=", "self", ".", "model_sim", ".", "get_dataset", "(", "data", "=", "data_list_sim", ",", "envs", "=", "env_list", ",", "dataset_names", "=", "self", ".", "sim_datasets", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ")", "\n", "\n", "dual_model_loader", "=", "DualDataloader", "(", "\n", "dataset_a", "=", "dataset_real", ",", "\n", "dataset_b", "=", "dataset_sim", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_loaders", ",", "\n", "pin_memory", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "drop_last", "=", "False", ",", "\n", "joint_length", "=", "\"max\"", "\n", ")", "\n", "\n", "dual_critic_loader", "=", "DualDataloader", "(", "\n", "dataset_a", "=", "dataset_real", ",", "\n", "dataset_b", "=", "dataset_sim", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_loaders", ",", "\n", "pin_memory", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "drop_last", "=", "False", ",", "\n", "joint_length", "=", "\"infinite\"", "\n", ")", "\n", "dual_critic_iterator", "=", "iter", "(", "dual_critic_loader", ")", "\n", "\n", "#wloss_before_updates_writer = LoggingSummaryWriter(log_dir=f\"runs/{self.run_name}/discriminator_before_updates\")", "\n", "#wloss_after_updates_writer = LoggingSummaryWriter(log_dir=f\"runs/{self.run_name}/discriminator_after_updates\")", "\n", "\n", "samples_real", "=", "len", "(", "dataset_real", ")", "\n", "samples_sim", "=", "len", "(", "dataset_sim", ")", "\n", "if", "samples_real", "==", "0", "or", "samples_sim", "==", "0", ":", "\n", "            ", "print", "(", "f\"DATASET HAS NO DATA: REAL: {samples_real > 0}, SIM: {samples_sim > 0}\"", ")", "\n", "return", "-", "1.0", "\n", "\n", "", "num_batches", "=", "len", "(", "dual_model_loader", ")", "\n", "\n", "epoch_loss", "=", "0", "\n", "count", "=", "0", "\n", "critic_elapsed_iterations", "=", "0", "\n", "\n", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# Alternate training critic and model", "\n", "for", "real_batch", ",", "sim_batch", "in", "dual_model_loader", ":", "\n", "            ", "if", "restricted_domain", "==", "\"real\"", ":", "\n", "                ", "sim_batch", "=", "real_batch", "\n", "", "elif", "restricted_domain", "==", "\"simulator\"", ":", "\n", "                ", "real_batch", "=", "sim_batch", "\n", "", "if", "real_batch", "is", "None", "or", "sim_batch", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "# We run more updates on the sim data than on the real data to speed up training and", "\n", "# avoid overfitting on the scarce real data", "\n", "", "if", "self", ".", "sim_steps_per_real_step", "==", "1", "or", "self", ".", "sim_steps_per_real_step", "==", "0", "or", "count", "%", "self", ".", "sim_steps_per_real_step", "==", "0", ":", "\n", "                ", "train_sim_only", "=", "False", "\n", "", "else", ":", "\n", "                ", "train_sim_only", "=", "True", "\n", "\n", "", "if", "sim_batch", "is", "None", "or", "(", "not", "train_sim_only", "and", "real_batch", "is", "None", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "prof", ".", "tick", "(", "\"load_model_data\"", ")", "\n", "# Train the model for model_steps in a row, then train the critic, and repeat", "\n", "critic_batch_num", "=", "0", "\n", "\n", "if", "count", "%", "self", ".", "model_steps", "==", "0", "and", "not", "eval", "and", "not", "self", ".", "disable_wloss", ":", "\n", "#print(\"\\nTraining critic\\n\")", "\n", "# Train the critic for self.critic_steps steps", "\n", "                ", "if", "critic_elapsed_iterations", ">", "self", ".", "critic_warmup_iterations", ":", "\n", "                    ", "critic_steps", "=", "self", ".", "critic_steps", "\n", "if", "self", ".", "critic_steps_cycle", ":", "\n", "                        ", "critic_steps_delta", "=", "int", "(", "self", ".", "critic_steps_amplitude", "*", "math", ".", "sin", "(", "count", "*", "3.14159", "/", "self", ".", "critic_steps_period", ")", "+", "0.5", ")", "\n", "critic_steps", "+=", "critic_steps_delta", "\n", "", "", "else", ":", "\n", "                    ", "critic_steps", "=", "self", ".", "critic_warmup_steps", "\n", "\n", "", "assert", "(", "critic_steps", ">", "0", ")", ",", "\"Need more than one iteration for critic!\"", "\n", "for", "cstep", "in", "range", "(", "critic_steps", ")", ":", "\n", "\n", "# Each batch is actually a single rollout (we batch the rollout data across the sequence)", "\n", "# To collect a batch of rollouts, we need to keep iterating", "\n", "                    ", "real_store", "=", "KeyTensorStore", "(", ")", "\n", "sim_store", "=", "KeyTensorStore", "(", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "critic_batch_size", ")", ":", "\n", "# Get the next non-None batch", "\n", "                        ", "real_c_batch", ",", "sim_c_batch", "=", "None", ",", "None", "\n", "while", "real_c_batch", "is", "None", "or", "sim_c_batch", "is", "None", ":", "\n", "                            ", "real_c_batch", ",", "sim_c_batch", "=", "next", "(", "dual_critic_iterator", ")", "\n", "", "prof", ".", "tick", "(", "\"critic_load_data\"", ")", "\n", "# When training the critic, we don't backprop into the model, so we don't need gradients here", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "real_loss", ",", "real_store_b", "=", "self", ".", "model_real", ".", "sup_loss_on_batch", "(", "real_c_batch", ",", "eval", "=", "eval", ",", "halfway", "=", "True", ")", "\n", "sim_loss", ",", "sim_store_b", "=", "self", ".", "model_sim", ".", "sup_loss_on_batch", "(", "sim_c_batch", ",", "eval", "=", "eval", ",", "halfway", "=", "True", ")", "\n", "", "prof", ".", "tick", "(", "\"critic_features\"", ")", "\n", "real_store", ".", "append", "(", "real_store_b", ")", "\n", "sim_store", ".", "append", "(", "sim_store_b", ")", "\n", "prof", ".", "tick", "(", "\"critic_store_append\"", ")", "\n", "\n", "# Forward the critic", "\n", "# The real_store and sim_store should really be a batch of multiple rollouts", "\n", "", "wdist_loss_a", ",", "critic_store", "=", "self", ".", "model_critic", ".", "calc_domain_loss", "(", "real_store", ",", "sim_store", ")", "\n", "\n", "prof", ".", "tick", "(", "\"critic_domain_loss\"", ")", "\n", "\n", "# Store the first and last critic loss", "\n", "#if cstep == 0:", "\n", "#    wdist_loss_before_updates = wdist_loss_a.detach().cpu()", "\n", "#if cstep == critic_steps - 1:", "\n", "#    wdist_loss_after_updates = wdist_loss_a.detach().cpu()", "\n", "\n", "# Update the critic", "\n", "critic_batch_num", "+=", "1", "\n", "self", ".", "optim_critic", ".", "zero_grad", "(", ")", "\n", "# Wasserstein distance is maximum distance transport cost under Lipschitz constraint, so we maximize it", "\n", "(", "-", "wdist_loss_a", ")", ".", "backward", "(", ")", "\n", "self", ".", "optim_critic", ".", "step", "(", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "f\"\\r    Critic batch: {critic_batch_num}/{critic_steps} d_loss: {wdist_loss_a.data.item()}\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "prof", ".", "tick", "(", "\"critic_backward\"", ")", "\n", "\n", "# Write wasserstein loss before and after wasertein loss updates", "\n", "#prefix = \"pvn_critic\" + (\"/eval\" if eval else \"/train\")", "\n", "#wloss_before_updates_writer.add_scalar(f\"{prefix}/w_score_before_updates\", wdist_loss_before_updates.item(), self.model_critic.get_iter())", "\n", "#wloss_after_updates_writer.add_scalar(f\"{prefix}/w_score_before_updates\", wdist_loss_after_updates.item(), self.model_critic.get_iter())", "\n", "\n", "", "critic_elapsed_iterations", "+=", "1", "\n", "print", "(", "\"Continuing model training\\n\"", ")", "\n", "\n", "# Clean up GPU memory", "\n", "del", "wdist_loss_a", "\n", "del", "critic_store", "\n", "del", "real_store", "\n", "del", "sim_store", "\n", "del", "real_store_b", "\n", "del", "sim_store_b", "\n", "prof", ".", "tick", "(", "\"del\"", ")", "\n", "\n", "# Forward the model", "\n", "", "real_store", "=", "KeyTensorStore", "(", ")", "\n", "sim_store", "=", "KeyTensorStore", "(", ")", "\n", "real_loss", "=", "None", "\n", "sim_loss", "=", "None", "\n", "# TODO: Get rid of this loop!. It doesn't even loop over and sample new batches", "\n", "for", "b", "in", "range", "(", "self", ".", "model_batch_size", ")", ":", "\n", "                ", "real_loss_b", ",", "real_store_b", "=", "self", ".", "model_real", ".", "sup_loss_on_batch", "(", "real_batch", ",", "eval", ",", "halfway", "=", "train_sim_only", ",", "grad_noise", "=", "self", ".", "real_grad_noise", ")", "\n", "real_loss", "=", "(", "real_loss", "+", "real_loss_b", ")", "if", "real_loss", "else", "real_loss_b", "\n", "real_store", ".", "append", "(", "real_store_b", ")", "\n", "\n", "sim_loss_b", ",", "sim_store_b", "=", "self", ".", "model_sim", ".", "sup_loss_on_batch", "(", "sim_batch", ",", "eval", ",", "halfway", "=", "False", ")", "\n", "sim_loss", "=", "(", "sim_loss", "+", "sim_loss_b", ")", "if", "sim_loss", "else", "sim_loss_b", "\n", "sim_store", ".", "append", "(", "sim_store_b", ")", "\n", "prof", ".", "tick", "(", "\"model_forward\"", ")", "\n", "\n", "", "sim_loss", "=", "sim_loss", "/", "self", ".", "model_batch_size", "\n", "if", "train_sim_only", ":", "\n", "                ", "total_loss", "=", "sim_loss", "\n", "", "else", ":", "\n", "                ", "real_loss", "=", "real_loss", "/", "self", ".", "model_batch_size", "\n", "total_loss", "=", "real_loss", "+", "sim_loss", "\n", "\n", "", "if", "not", "self", ".", "disable_wloss", ":", "\n", "# Forward the critic", "\n", "                ", "wdist_loss_b", ",", "critic_store", "=", "self", ".", "model_critic", ".", "calc_domain_loss", "(", "real_store", ",", "sim_store", ")", "\n", "\n", "prof", ".", "tick", "(", "\"model_domain_loss\"", ")", "\n", "# Minimize average real/sim losses, maximize domain loss", "\n", "total_loss", "=", "total_loss", "+", "wdist_loss_b", "\n", "\n", "# Grad step", "\n", "", "if", "not", "eval", "and", "total_loss", ".", "requires_grad", ":", "\n", "                ", "self", ".", "optim_models", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "                    ", "total_loss", ".", "backward", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "\"Error backpropping: \"", ")", "\n", "print", "(", "e", ")", "\n", "", "self", ".", "optim_models", ".", "step", "(", ")", "\n", "prof", ".", "tick", "(", "\"model_backward\"", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "f\"\\r Batch: {count}/{num_batches} r_loss: {real_loss.data.item() if real_loss else None} s_loss: {sim_loss.data.item()}\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Get losses as floats", "\n", "epoch_loss", "+=", "total_loss", ".", "data", ".", "item", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "self", ".", "train_segment", "+=", "0", "if", "eval", "else", "1", "\n", "self", ".", "test_segment", "+=", "1", "if", "eval", "else", "0", "\n", "\n", "prof", ".", "loop", "(", ")", "\n", "prof", ".", "print_stats", "(", "self", ".", "model_steps", ")", "\n", "\n", "", "print", "(", "\"\"", ")", "\n", "epoch_loss", "/=", "(", "count", "+", "1e-15", ")", "\n", "\n", "return", "epoch_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.__init__": [[26, 105], ["data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "learning.utils.get_n_params", "learning.utils.get_n_trainable_params", "learning.utils.get_n_params", "learning.utils.get_n_trainable_params", "learning.utils.get_n_params", "learning.utils.get_n_params", "print", "print", "print", "print", "print", "print", "print", "Optim", "Optim", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_state", "parameters.parameter_server.get_current_parameters", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "print", "model_real.steal_cross_domain_modules", "print", "print", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.both_domain_parameters", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.critic_parameters", "parameters.parameter_server.get_current_parameters", "str", "str", "str", "str", "str", "str", "ValueError"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_state", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.steal_cross_domain_modules", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.both_domain_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.critic_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_real", ",", "\n", "model_sim", ",", "\n", "model_critic", ",", "\n", "model_oracle_critic", "=", "None", ",", "\n", "state", "=", "None", ",", "\n", "epoch", "=", "0", "\n", ")", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "token2word", ",", "self", ".", "word2token", "=", "get_word_to_token_map", "(", "corpus", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"Training\"", "]", "\n", "self", ".", "run_name", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"run_name\"", "]", "\n", "self", ".", "batch_size", "=", "self", ".", "params", "[", "'batch_size'", "]", "\n", "self", ".", "iterations_per_epoch", "=", "self", ".", "params", ".", "get", "(", "\"iterations_per_epoch\"", ",", "None", ")", "\n", "self", ".", "weight_decay", "=", "self", ".", "params", "[", "'weight_decay'", "]", "\n", "self", ".", "optimizer", "=", "self", ".", "params", "[", "'optimizer'", "]", "\n", "self", ".", "critic_loaders", "=", "self", ".", "params", "[", "'critic_loaders'", "]", "\n", "self", ".", "model_common_loaders", "=", "self", ".", "params", "[", "'model_common_loaders'", "]", "\n", "self", ".", "model_sim_loaders", "=", "self", ".", "params", "[", "'model_sim_loaders'", "]", "\n", "self", ".", "lr", "=", "self", ".", "params", "[", "'lr'", "]", "\n", "self", ".", "critic_steps", "=", "self", ".", "params", "[", "'critic_steps'", "]", "\n", "self", ".", "model_steps", "=", "self", ".", "params", "[", "'model_steps'", "]", "\n", "self", ".", "critic_batch_size", "=", "self", ".", "params", "[", "\"critic_batch_size\"", "]", "\n", "self", ".", "model_batch_size", "=", "self", ".", "params", "[", "\"model_batch_size\"", "]", "\n", "self", ".", "disable_wloss", "=", "self", ".", "params", "[", "\"disable_wloss\"", "]", "\n", "self", ".", "sim_steps_per_real_step", "=", "self", ".", "params", ".", "get", "(", "\"sim_steps_per_real_step\"", ",", "1", ")", "\n", "\n", "self", ".", "real_dataset_names", "=", "self", ".", "params", ".", "get", "(", "\"real_dataset_names\"", ")", "\n", "self", ".", "sim_dataset_names", "=", "self", ".", "params", ".", "get", "(", "\"sim_dataset_names\"", ")", "\n", "\n", "self", ".", "bidata", "=", "self", ".", "params", ".", "get", "(", "\"bidata\"", ",", "False", ")", "\n", "self", ".", "sim_steps_per_common_step", "=", "self", ".", "params", ".", "get", "(", "\"sim_steps_per_common_step\"", ",", "1", ")", "\n", "\n", "n_params_real", "=", "get_n_params", "(", "model_real", ")", "\n", "n_params_real_tr", "=", "get_n_trainable_params", "(", "model_real", ")", "\n", "n_params_sim", "=", "get_n_params", "(", "model_sim", ")", "\n", "n_params_sim_tr", "=", "get_n_trainable_params", "(", "model_sim", ")", "\n", "n_params_c", "=", "get_n_params", "(", "model_critic", ")", "\n", "n_params_c_tr", "=", "get_n_params", "(", "model_critic", ")", "\n", "\n", "print", "(", "\"Training Model:\"", ")", "\n", "print", "(", "\"Real # model parameters: \"", "+", "str", "(", "n_params_real", ")", ")", "\n", "print", "(", "\"Real # trainable parameters: \"", "+", "str", "(", "n_params_real_tr", ")", ")", "\n", "print", "(", "\"Sim  # model parameters: \"", "+", "str", "(", "n_params_sim", ")", ")", "\n", "print", "(", "\"Sim  # trainable parameters: \"", "+", "str", "(", "n_params_sim_tr", ")", ")", "\n", "print", "(", "\"Critic  # model parameters: \"", "+", "str", "(", "n_params_c", ")", ")", "\n", "print", "(", "\"Critic  # trainable parameters: \"", "+", "str", "(", "n_params_c_tr", ")", ")", "\n", "\n", "# Share those modules that are to be shared between real and sim models", "\n", "if", "not", "self", ".", "params", ".", "get", "(", "\"disable_domain_weight_sharing\"", ")", ":", "\n", "            ", "print", "(", "\"Sharing weights between sim and real modules\"", ")", "\n", "model_real", ".", "steal_cross_domain_modules", "(", "model_sim", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"NOT Sharing weights between sim and real modules\"", ")", "\n", "\n", "", "self", ".", "model_real", "=", "model_real", "\n", "self", ".", "model_sim", "=", "model_sim", "\n", "self", ".", "model_critic", "=", "model_critic", "\n", "self", ".", "model_oracle_critic", "=", "model_oracle_critic", "\n", "if", "self", ".", "model_oracle_critic", ":", "\n", "            ", "print", "(", "\"Using oracle critic\"", ")", "\n", "\n", "", "if", "self", ".", "optimizer", "==", "\"adam\"", ":", "\n", "            ", "Optim", "=", "optim", ".", "Adam", "\n", "", "elif", "self", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "            ", "Optim", "=", "optim", ".", "SGD", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unsuppored optimizer {self.optimizer}\"", ")", "\n", "\n", "", "self", ".", "optim_models", "=", "Optim", "(", "self", ".", "model_real", ".", "both_domain_parameters", "(", "self", ".", "model_sim", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "self", ".", "optim_critic", "=", "Optim", "(", "self", ".", "critic_parameters", "(", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "\n", "self", ".", "train_epoch_num", "=", "epoch", "\n", "self", ".", "train_segment", "=", "0", "\n", "self", ".", "test_epoch_num", "=", "epoch", "\n", "self", ".", "test_segment", "=", "0", "\n", "self", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_dataset_names": [[106, 109], ["None"], "methods", ["None"], ["", "def", "set_dataset_names", "(", "self", ",", "sim_datasets", ",", "real_datasets", ")", ":", "\n", "        ", "self", ".", "sim_dataset_names", "=", "sim_datasets", "\n", "self", ".", "real_dataset_names", "=", "real_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_start_epoch": [[110, 113], ["None"], "methods", ["None"], ["", "def", "set_start_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "train_epoch_num", "=", "epoch", "\n", "self", ".", "test_epoch_num", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.critic_parameters": [[114, 120], ["trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters"], ["", "def", "critic_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "get_model_parameters", "(", "self", ".", "model_critic", ")", ":", "\n", "            ", "yield", "p", "\n", "", "if", "self", ".", "model_oracle_critic", ":", "\n", "            ", "for", "p", "in", "self", ".", "get_model_parameters", "(", "self", ".", "model_oracle_critic", ")", ":", "\n", "                ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_model_parameters": [[121, 131], ["model.parameters", "print", "params_out.append", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "", "def", "get_model_parameters", "(", "self", ",", "model", ")", ":", "\n", "        ", "params_out", "=", "[", "]", "\n", "skipped_params", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "params_out", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "skipped_params", "+=", "1", "\n", "", "", "print", "(", "str", "(", "skipped_params", ")", "+", "\" parameters frozen\"", ")", "\n", "return", "params_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.get_state": [[132, 139], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "}", "\n", "state", "[", "\"train_epoch_num\"", "]", "=", "self", ".", "train_epoch_num", "\n", "state", "[", "\"train_segment\"", "]", "=", "self", ".", "train_segment", "\n", "state", "[", "\"test_epoch_num\"", "]", "=", "self", ".", "test_epoch_num", "\n", "state", "[", "\"test_segment\"", "]", "=", "self", ".", "test_segment", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.set_state": [[140, 147], ["None"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "train_epoch_num", "=", "state", "[", "\"train_epoch_num\"", "]", "\n", "self", ".", "train_segment", "=", "state", "[", "\"train_segment\"", "]", "\n", "self", ".", "test_epoch_num", "=", "state", "[", "\"test_epoch_num\"", "]", "\n", "self", ".", "test_segment", "=", "state", "[", "\"test_segment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_supervised_bidomain_bidata.TrainerBidomainBidata.train_epoch": [[148, 385], ["trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.get_dataset", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.get_dataset", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.get_dataset", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.get_dataset", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_sim.get_dataset", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "learning.dual_dataloader.DualDataloader", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.dataloader.DataLoader", "iter", "learning.dual_dataloader.DualDataloader", "iter", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.logging_summary_writer.LoggingSummaryWriter", "len", "len", "len", "len", "utils.simple_profiler.SimpleProfiler", "utils.simple_profiler.SimpleProfiler.tick", "print", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.eval", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_sim.eval", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_critic.eval", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.train", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_sim.train", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_critic.train", "len", "len", "len", "len", "len", "len", "len", "print", "print", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.sup_loss_on_batch", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_sim.sup_loss_on_batch", "utils.simple_profiler.SimpleProfiler.tick", "range", "utils.simple_profiler.SimpleProfiler.tick", "print", "total_loss.data.item", "utils.simple_profiler.SimpleProfiler.loop", "utils.simple_profiler.SimpleProfiler.print_stats", "len", "len", "print", "range", "utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.params.get", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_sim.sup_loss_on_batch", "utils.simple_profiler.SimpleProfiler.tick", "max", "max", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_critic.calc_domain_loss", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.optim_models.zero_grad", "total_loss.backward", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.optim_models.step", "utils.simple_profiler.SimpleProfiler.tick", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.key_tensor_store.KeyTensorStore", "range", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_critic.calc_domain_loss", "utils.simple_profiler.SimpleProfiler.tick", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.optim_critic.zero_grad", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.optim_critic.step", "utils.simple_profiler.SimpleProfiler.tick", "wdist_loss_a.detach().cpu.item", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_critic.get_iter", "wdist_loss_a.detach().cpu.item", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_critic.get_iter", "data_io.paths.get_logging_dir", "data_io.paths.get_logging_dir", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.tick", "learning.modules.key_tensor_store.KeyTensorStore.append", "learning.modules.key_tensor_store.KeyTensorStore.append", "utils.simple_profiler.SimpleProfiler.tick", "wdist_loss_a.detach().cpu", "wdist_loss_a.detach().cpu", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_oracle_critic.calc_domain_loss", "next", "sim_loss.data.item", "next", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_real.sup_loss_on_batch", "trainer_supervised_bidomain_bidata.TrainerBidomainBidata.model_sim.sup_loss_on_batch", "iter", "print", "real_loss.data.item", "wdist_loss_a.detach", "wdist_loss_a.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.calc_domain_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.calc_domain_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.calc_domain_loss", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "train_epoch", "(", "self", ",", "env_list_common", "=", "None", ",", "env_list_sim", "=", "None", ",", "data_list_real", "=", "None", ",", "data_list_sim", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "\n", "        ", "if", "eval", ":", "\n", "            ", "self", ".", "model_real", ".", "eval", "(", ")", "\n", "self", ".", "model_sim", ".", "eval", "(", ")", "\n", "self", ".", "model_critic", ".", "eval", "(", ")", "\n", "inference_type", "=", "\"eval\"", "\n", "epoch_num", "=", "self", ".", "train_epoch_num", "\n", "self", ".", "test_epoch_num", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_real", ".", "train", "(", ")", "\n", "self", ".", "model_sim", ".", "train", "(", ")", "\n", "self", ".", "model_critic", ".", "train", "(", ")", "\n", "inference_type", "=", "\"train\"", "\n", "epoch_num", "=", "self", ".", "train_epoch_num", "\n", "self", ".", "train_epoch_num", "+=", "1", "\n", "\n", "", "dataset_real_common", "=", "self", ".", "model_real", ".", "get_dataset", "(", "data", "=", "data_list_real", ",", "envs", "=", "env_list_common", ",", "domain", "=", "\"real\"", ",", "dataset_names", "=", "self", ".", "real_dataset_names", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ")", "\n", "dataset_sim_common", "=", "self", ".", "model_real", ".", "get_dataset", "(", "data", "=", "data_list_real", ",", "envs", "=", "env_list_common", ",", "domain", "=", "\"sim\"", ",", "dataset_names", "=", "self", ".", "sim_dataset_names", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ")", "\n", "dataset_real_halfway", "=", "self", ".", "model_real", ".", "get_dataset", "(", "data", "=", "data_list_real", ",", "envs", "=", "env_list_common", ",", "domain", "=", "\"real\"", ",", "dataset_names", "=", "self", ".", "real_dataset_names", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ",", "halfway_only", "=", "True", ")", "\n", "dataset_sim_halfway", "=", "self", ".", "model_real", ".", "get_dataset", "(", "data", "=", "data_list_real", ",", "envs", "=", "env_list_common", ",", "domain", "=", "\"sim\"", ",", "dataset_names", "=", "self", ".", "sim_dataset_names", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ",", "halfway_only", "=", "True", ")", "\n", "dataset_sim", "=", "self", ".", "model_sim", ".", "get_dataset", "(", "data", "=", "data_list_sim", ",", "envs", "=", "env_list_sim", ",", "domain", "=", "\"sim\"", ",", "dataset_names", "=", "self", ".", "sim_dataset_names", ",", "dataset_prefix", "=", "\"supervised\"", ",", "eval", "=", "eval", ")", "\n", "\n", "print", "(", "\"Beginning supervised epoch:\"", ")", "\n", "print", "(", "\"   Sim dataset names: \"", ",", "self", ".", "sim_dataset_names", ")", "\n", "print", "(", "\"   Dataset sizes: \"", ")", "\n", "print", "(", "\"   dataset_real_common  \"", ",", "len", "(", "dataset_real_common", ")", ")", "\n", "print", "(", "\"   dataset_sim_common  \"", ",", "len", "(", "dataset_sim_common", ")", ")", "\n", "print", "(", "\"   dataset_real_halfway  \"", ",", "len", "(", "dataset_real_halfway", ")", ")", "\n", "print", "(", "\"   dataset_sim_halfway  \"", ",", "len", "(", "dataset_sim_halfway", ")", ")", "\n", "print", "(", "\"   dataset_sim  \"", ",", "len", "(", "dataset_sim", ")", ")", "\n", "print", "(", "\"   env_list_sim_len \"", ",", "len", "(", "env_list_sim", ")", ")", "\n", "print", "(", "\"   env_list_common_len \"", ",", "len", "(", "env_list_common", ")", ")", "\n", "if", "len", "(", "dataset_sim", ")", "==", "0", "or", "len", "(", "dataset_sim_common", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Missing data! Waiting for RL to generate it?\"", ")", "\n", "return", "0", "\n", "\n", "", "dual_model_loader", "=", "DualDataloader", "(", "\n", "dataset_a", "=", "dataset_real_common", ",", "\n", "dataset_b", "=", "dataset_sim_common", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "model_common_loaders", ",", "\n", "pin_memory", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "drop_last", "=", "False", ",", "\n", "joint_length", "=", "\"max\"", "\n", ")", "\n", "\n", "sim_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset_sim", ",", "\n", "collate_fn", "=", "dataset_sim", ".", "collate_fn", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "model_sim_loaders", ",", "\n", "pin_memory", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "sim_iterator", "=", "iter", "(", "sim_loader", ")", "\n", "\n", "dual_critic_loader", "=", "DualDataloader", "(", "\n", "dataset_a", "=", "dataset_real_halfway", ",", "\n", "dataset_b", "=", "dataset_sim_halfway", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "critic_loaders", ",", "\n", "pin_memory", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "drop_last", "=", "False", ",", "\n", "joint_length", "=", "\"infinite\"", "\n", ")", "\n", "dual_critic_iterator", "=", "iter", "(", "dual_critic_loader", ")", "\n", "\n", "wloss_before_updates_writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{self.run_name}/discriminator_before_updates\"", ")", "\n", "wloss_after_updates_writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{self.run_name}/discriminator_after_updates\"", ")", "\n", "\n", "samples_real", "=", "len", "(", "dataset_real_common", ")", "\n", "samples_common", "=", "len", "(", "dataset_sim_common", ")", "\n", "samples_sim", "=", "len", "(", "dataset_sim", ")", "\n", "if", "samples_real", "==", "0", "or", "samples_sim", "==", "0", "or", "samples_common", "==", "0", ":", "\n", "            ", "print", "(", "f\"DATASET HAS NO DATA: REAL: {samples_real > 0}, SIM: {samples_sim > 0}, COMMON: {samples_common}\"", ")", "\n", "return", "-", "1.0", "\n", "\n", "", "num_batches", "=", "len", "(", "dual_model_loader", ")", "\n", "\n", "epoch_loss", "=", "0", "\n", "count", "=", "0", "\n", "critic_elapsed_iterations", "=", "0", "\n", "\n", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# Alternate training critic and model", "\n", "for", "real_batch", ",", "sim_batch", "in", "dual_model_loader", ":", "\n", "            ", "if", "real_batch", "is", "None", "or", "sim_batch", "is", "None", ":", "\n", "                ", "print", "(", "\"none\"", ")", "\n", "continue", "\n", "\n", "", "prof", ".", "tick", "(", "\"load_model_data\"", ")", "\n", "# Train the model for model_steps in a row, then train the critic, and repeat", "\n", "critic_batch_num", "=", "0", "\n", "\n", "if", "count", "%", "self", ".", "model_steps", "==", "0", "and", "not", "eval", "and", "not", "self", ".", "disable_wloss", ":", "\n", "#print(\"\\nTraining critic\\n\")", "\n", "# Train the critic for self.critic_steps steps", "\n", "                ", "for", "cstep", "in", "range", "(", "self", ".", "critic_steps", ")", ":", "\n", "# Each batch is actually a single rollout (we batch the rollout data across the sequence)", "\n", "# To collect a batch of rollouts, we need to keep iterating", "\n", "                    ", "real_store", "=", "KeyTensorStore", "(", ")", "\n", "sim_store", "=", "KeyTensorStore", "(", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "critic_batch_size", ")", ":", "\n", "# Get the next non-None batch", "\n", "                        ", "real_c_batch", ",", "sim_c_batch", "=", "None", ",", "None", "\n", "while", "real_c_batch", "is", "None", "or", "sim_c_batch", "is", "None", ":", "\n", "                            ", "real_c_batch", ",", "sim_c_batch", "=", "next", "(", "dual_critic_iterator", ")", "\n", "", "prof", ".", "tick", "(", "\"critic_load_data\"", ")", "\n", "# When training the critic, we don't backprop into the model, so we don't need gradients here", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "real_loss", ",", "real_store_b", "=", "self", ".", "model_real", ".", "sup_loss_on_batch", "(", "real_c_batch", ",", "eval", "=", "eval", ",", "halfway", "=", "True", ")", "\n", "sim_loss", ",", "sim_store_b", "=", "self", ".", "model_sim", ".", "sup_loss_on_batch", "(", "sim_c_batch", ",", "eval", "=", "eval", ",", "halfway", "=", "True", ")", "\n", "", "prof", ".", "tick", "(", "\"critic_features\"", ")", "\n", "real_store", ".", "append", "(", "real_store_b", ")", "\n", "sim_store", ".", "append", "(", "sim_store_b", ")", "\n", "prof", ".", "tick", "(", "\"critic_store_append\"", ")", "\n", "\n", "# Forward the critic", "\n", "# The real_store and sim_store should really be a batch of multiple rollouts", "\n", "", "wdist_loss_a", ",", "critic_store", "=", "self", ".", "model_critic", ".", "calc_domain_loss", "(", "real_store", ",", "sim_store", ")", "\n", "\n", "prof", ".", "tick", "(", "\"critic_domain_loss\"", ")", "\n", "\n", "# Store the first and last critic loss", "\n", "if", "cstep", "==", "0", ":", "\n", "                        ", "wdist_loss_before_updates", "=", "wdist_loss_a", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "if", "cstep", "==", "self", ".", "critic_steps", "-", "1", ":", "\n", "                        ", "wdist_loss_after_updates", "=", "wdist_loss_a", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "if", "self", ".", "model_oracle_critic", ":", "\n", "                        ", "wdist_loss_oracle", ",", "oracle_store", "=", "self", ".", "model_oracle_critic", ".", "calc_domain_loss", "(", "real_store", ",", "sim_store", ")", "\n", "wdist_loss_a", "+=", "wdist_loss_oracle", "\n", "\n", "# Update the critic", "\n", "", "critic_batch_num", "+=", "1", "\n", "self", ".", "optim_critic", ".", "zero_grad", "(", ")", "\n", "# Wasserstein distance is maximum distance transport cost under Lipschitz constraint, so we maximize it", "\n", "(", "-", "wdist_loss_a", ")", ".", "backward", "(", ")", "\n", "self", ".", "optim_critic", ".", "step", "(", ")", "\n", "#sys.stdout.write(f\"\\r    Critic batch: {critic_batch_num}/{critic_steps} d_loss: {wdist_loss_a.data.item()}\")", "\n", "#sys.stdout.flush()", "\n", "prof", ".", "tick", "(", "\"critic_backward\"", ")", "\n", "\n", "# Write wasserstein loss before and after wasertein loss updates", "\n", "", "prefix", "=", "\"pvn_critic\"", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "wloss_before_updates_writer", ".", "add_scalar", "(", "f\"{prefix}/w_score_before_updates\"", ",", "wdist_loss_before_updates", ".", "item", "(", ")", ",", "self", ".", "model_critic", ".", "get_iter", "(", ")", ")", "\n", "wloss_after_updates_writer", ".", "add_scalar", "(", "f\"{prefix}/w_score_before_updates\"", ",", "wdist_loss_after_updates", ".", "item", "(", ")", ",", "self", ".", "model_critic", ".", "get_iter", "(", ")", ")", "\n", "\n", "critic_elapsed_iterations", "+=", "1", "\n", "\n", "# Clean up GPU memory", "\n", "del", "wdist_loss_a", "\n", "del", "critic_store", "\n", "del", "real_store", "\n", "del", "sim_store", "\n", "del", "real_store_b", "\n", "del", "sim_store_b", "\n", "prof", ".", "tick", "(", "\"del\"", ")", "\n", "\n", "\n", "# Forward the model on the bi-domain data", "\n", "", "disable_losses", "=", "[", "\"visitation_dist\"", "]", "if", "self", ".", "params", ".", "get", "(", "\"disable_real_loss\"", ")", "else", "[", "]", "\n", "real_loss", ",", "real_store", "=", "self", ".", "model_real", ".", "sup_loss_on_batch", "(", "real_batch", ",", "eval", ",", "halfway", "=", "False", ",", "grad_noise", "=", "False", ",", "disable_losses", "=", "disable_losses", ")", "\n", "sim_loss", ",", "sim_store", "=", "self", ".", "model_sim", ".", "sup_loss_on_batch", "(", "sim_batch", ",", "eval", ",", "halfway", "=", "False", ")", "\n", "prof", ".", "tick", "(", "\"model_forward\"", ")", "\n", "\n", "# Forward the model K times on simulation only data", "\n", "for", "b", "in", "range", "(", "self", ".", "sim_steps_per_common_step", ")", ":", "\n", "# Get the next non-None batch", "\n", "                ", "sim_batch", "=", "None", "\n", "while", "sim_batch", "is", "None", ":", "\n", "                    ", "try", ":", "\n", "                        ", "sim_batch", "=", "next", "(", "sim_iterator", ")", "\n", "", "except", "StopIteration", "as", "e", ":", "\n", "                        ", "sim_iterator", "=", "iter", "(", "sim_loader", ")", "\n", "print", "(", "\"retry\"", ")", "\n", "continue", "\n", "", "", "prof", ".", "tick", "(", "\"load_model_data\"", ")", "\n", "sim_loss_b", ",", "_", "=", "self", ".", "model_sim", ".", "sup_loss_on_batch", "(", "sim_batch", ",", "eval", ",", "halfway", "=", "False", ")", "\n", "sim_loss", "=", "(", "sim_loss", "+", "sim_loss_b", ")", "if", "sim_loss", "else", "sim_loss_b", "\n", "#print(f\"  Model forward common sim, loss: {sim_loss_b.detach().cpu().item()}\")", "\n", "prof", ".", "tick", "(", "\"model_forward\"", ")", "\n", "\n", "", "prof", ".", "tick", "(", "\"model_forward\"", ")", "\n", "\n", "# TODO: Reconsider this", "\n", "sim_loss", "=", "sim_loss", "/", "max", "(", "self", ".", "model_batch_size", ",", "self", ".", "sim_steps_per_common_step", ")", "\n", "real_loss", "=", "real_loss", "/", "max", "(", "self", ".", "model_batch_size", ",", "self", ".", "sim_steps_per_common_step", ")", "\n", "total_loss", "=", "real_loss", "+", "sim_loss", "\n", "\n", "if", "not", "self", ".", "disable_wloss", ":", "\n", "# Forward the critic", "\n", "                ", "wdist_loss_b", ",", "critic_store", "=", "self", ".", "model_critic", ".", "calc_domain_loss", "(", "real_store", ",", "sim_store", ")", "\n", "# Increase the iteration on the oracle without running it so that the Tensorboard plots align", "\n", "if", "self", ".", "model_oracle_critic", ":", "\n", "                    ", "self", ".", "model_oracle_critic", ".", "iter", "+=", "1", "\n", "\n", "", "prof", ".", "tick", "(", "\"model_domain_loss\"", ")", "\n", "# Minimize average real/sim losses, maximize domain loss", "\n", "total_loss", "=", "total_loss", "+", "wdist_loss_b", "\n", "\n", "# Grad step", "\n", "", "if", "not", "eval", "and", "total_loss", ".", "requires_grad", ":", "\n", "                ", "self", ".", "optim_models", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_models", ".", "step", "(", ")", "\n", "prof", ".", "tick", "(", "\"model_backward\"", ")", "\n", "\n", "", "print", "(", "f\"Batch: {count}/{num_batches} r_loss: {real_loss.data.item() if real_loss else None} s_loss: {sim_loss.data.item()}\"", ")", "\n", "\n", "# Get losses as floats", "\n", "epoch_loss", "+=", "total_loss", ".", "data", ".", "item", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "self", ".", "train_segment", "+=", "0", "if", "eval", "else", "1", "\n", "self", ".", "test_segment", "+=", "1", "if", "eval", "else", "0", "\n", "\n", "prof", ".", "loop", "(", ")", "\n", "prof", ".", "print_stats", "(", "self", ".", "model_steps", ")", "\n", "\n", "if", "self", ".", "iterations_per_epoch", "and", "count", ">", "self", ".", "iterations_per_epoch", ":", "\n", "                ", "break", "\n", "\n", "", "", "print", "(", "\"\"", ")", "\n", "epoch_loss", "/=", "(", "count", "+", "1e-15", ")", "\n", "\n", "return", "epoch_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.__init__": [[91, 158], ["params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "rollout.simple_parallel_rollout.SimpleParallelPolicyRoller", "rollout.rollout_sampler.RolloutSampler", "data_io.models.load_model", "trainer_rl.TrainerRL.full_model.to", "trainer_rl.TrainerRL.full_model.stage1_visitation_prediction.eval", "utils.logging_summary_writer.LoggingSummaryWriter", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "utils.simple_profiler.SimpleProfiler", "print", "print", "learning.training.ppo.PPO", "params.get", "params.get", "learning.utils.get_n_trainable_params", "learning.utils.get_n_params", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.models.load_model", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_trainable_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "save_rollouts_to_dataset", "=", "\"\"", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "iterations_per_epoch", "=", "params", ".", "get", "(", "\"iterations_per_epoch\"", ",", "1", ")", "\n", "self", ".", "test_iterations_per_epoch", "=", "params", ".", "get", "(", "\"test_iterations_per_epoch\"", ",", "1", ")", "\n", "self", ".", "num_workers", "=", "params", ".", "get", "(", "\"num_workers\"", ")", "\n", "self", ".", "num_rollouts_per_iter", "=", "params", ".", "get", "(", "\"num_rollouts_per_iter\"", ")", "\n", "self", ".", "model_name", "=", "params", ".", "get", "(", "\"model\"", ")", "or", "params", ".", "get", "(", "\"rl_model\"", ")", "\n", "self", ".", "init_model_file", "=", "params", ".", "get", "(", "\"model_file\"", ")", "\n", "self", ".", "num_steps", "=", "params", ".", "get", "(", "\"trajectory_len\"", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "summary_every_n", "=", "params", ".", "get", "(", "\"plot_every_n\"", ")", "\n", "\n", "self", ".", "roller", "=", "SimpleParallelPolicyRoller", "(", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "policy_name", "=", "self", ".", "model_name", ",", "\n", "policy_file", "=", "self", ".", "init_model_file", ",", "\n", "dataset_save_name", "=", "save_rollouts_to_dataset", ")", "\n", "\n", "self", ".", "rollout_sampler", "=", "RolloutSampler", "(", "self", ".", "roller", ")", "\n", "\n", "# This should load it's own weights from file based on", "\n", "self", ".", "full_model", ",", "_", "=", "load_model", "(", "self", ".", "model_name", ")", "\n", "self", ".", "full_model", "=", "self", ".", "full_model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actor_critic", "=", "self", ".", "full_model", ".", "stage2_action_generation", "\n", "# Train in eval mode to disable dropout", "\n", "#self.actor_critic.eval()", "\n", "self", ".", "full_model", ".", "stage1_visitation_prediction", ".", "eval", "(", ")", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{params['run_name']}/ppo\"", ")", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "self", ".", "stage1_updates", "=", "0", "\n", "\n", "clip_param", "=", "params", ".", "get", "(", "\"clip\"", ")", "\n", "num_mini_batch", "=", "params", ".", "get", "(", "\"num_mini_batch\"", ")", "\n", "value_loss_coef", "=", "params", ".", "get", "(", "\"value_loss_coef\"", ")", "\n", "lr", "=", "params", ".", "get", "(", "\"lr\"", ")", "\n", "eps", "=", "params", ".", "get", "(", "\"eps\"", ")", "\n", "max_grad_norm", "=", "params", ".", "get", "(", "\"max_grad_norm\"", ")", "\n", "use_clipped_value_loss", "=", "params", ".", "get", "(", "\"use_clipped_value_loss\"", ")", "\n", "\n", "self", ".", "entropy_coef", "=", "params", ".", "get", "(", "\"entropy_coef\"", ")", "\n", "self", ".", "entropy_schedule_epochs", "=", "params", ".", "get", "(", "\"entropy_schedule_epochs\"", ",", "[", "]", ")", "\n", "self", ".", "entropy_schedule_multipliers", "=", "params", ".", "get", "(", "\"entropy_schedule_multipliers\"", ",", "[", "]", ")", "\n", "\n", "self", ".", "minibatch_size", "=", "params", ".", "get", "(", "\"minibatch_size\"", ")", "\n", "\n", "self", ".", "use_gae", "=", "params", ".", "get", "(", "\"use_gae\"", ")", "\n", "self", ".", "gamma", "=", "params", ".", "get", "(", "\"gamma\"", ")", "\n", "self", ".", "gae_lambda", "=", "params", ".", "get", "(", "\"gae_lambda\"", ")", "\n", "self", ".", "intrinsic_reward_only", "=", "params", ".", "get", "(", "\"intrinsic_reward_only\"", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "print", "(", "f\"PPO trainable parameters: {get_n_trainable_params(self.actor_critic)}\"", ")", "\n", "print", "(", "f\"PPO actor-critic all parameters: {get_n_params(self.actor_critic)}\"", ")", "\n", "\n", "self", ".", "ppo", "=", "PPO", "(", "self", ".", "actor_critic", ",", "\n", "clip_param", "=", "clip_param", ",", "\n", "ppo_epoch", "=", "1", ",", "\n", "num_mini_batch", "=", "num_mini_batch", ",", "\n", "value_loss_coef", "=", "value_loss_coef", ",", "\n", "entropy_coef", "=", "self", ".", "entropy_coef", ",", "\n", "lr", "=", "lr", ",", "\n", "eps", "=", "eps", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "\n", "use_clipped_value_loss", "=", "use_clipped_value_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.set_start_epoch": [[159, 162], ["int"], "methods", ["None"], ["", "def", "set_start_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "prints_per_epoch", "=", "int", "(", "self", ".", "iterations_per_epoch", "/", "self", ".", "summary_every_n", ")", "\n", "self", ".", "global_step", "=", "epoch", "*", "prints_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.save_rollouts": [[163, 169], ["len", "data_io.train_data.save_dataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.train_data.save_dataset"], ["", "def", "save_rollouts", "(", "self", ",", "rollouts", ",", "dataset_name", ")", ":", "\n", "        ", "for", "rollout", "in", "rollouts", ":", "\n", "# This saves just a single segment per environment, as opposed to all segments that the oracle saves. Problem?", "\n", "            ", "if", "len", "(", "rollout", ")", ">", "0", ":", "\n", "                ", "env_id", "=", "rollout", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "save_dataset", "(", "dataset_name", ",", "rollout", ",", "env_id", "=", "env_id", ",", "lock", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.reload_stage1": [[170, 177], ["print", "trainer_rl.TrainerRL.full_model.stage1_visitation_prediction.load_state_dict", "print", "trainer_rl.TrainerRL.rollout_sampler.update_stage1_on_workers", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.update_stage1_on_workers"], ["", "", "", "def", "reload_stage1", "(", "self", ",", "module_state_dict", ")", ":", "\n", "        ", "print", "(", "\"Reloading stage 1 model in RL trainer\"", ")", "\n", "self", ".", "full_model", ".", "stage1_visitation_prediction", ".", "load_state_dict", "(", "module_state_dict", ")", "\n", "print", "(", "\"Reloading stage 1 model in rollout sampler\"", ")", "\n", "self", ".", "rollout_sampler", ".", "update_stage1_on_workers", "(", "self", ".", "full_model", ".", "stage1_visitation_prediction", ")", "\n", "print", "(", "\"Done reloading stage1\"", ")", "\n", "self", ".", "stage1_updates", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.TrainerRL.train_epoch": [[178, 313], ["trainer_rl.TrainerRL.prof.tick", "range", "numpy.mean", "numpy.mean", "trainer_rl.TrainerRL.prof.tick", "trainer_rl.TrainerRL.prof.loop", "trainer_rl.TrainerRL.prof.print_stats", "len", "zip", "trainer_rl.TrainerRL.ppo.set_entropy_coef", "trainer_rl.TrainerRL.full_model.get_policy_state", "print", "trainer_rl.TrainerRL.rollout_sampler.sample_n_rollouts", "trainer_rl.TrainerRL.prof.tick", "print", "trainer_rl.calc_rollout_metrics", "utils.dict_tools.dictlist_append", "learning.training.rollout_storage.RolloutStorage.from_rollouts", "learning.training.rollout_storage.RolloutStorage.from_rollouts.compute_returns", "trainer_rl.TrainerRL.prof.tick", "learning.training.rollout_storage.RolloutStorage.from_rollouts.rewards.mean().detach().cpu().item", "learning.training.rollout_storage.RolloutStorage.from_rollouts.value_preds.mean().detach().cpu().item", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].detach().cpu().numpy().mean", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].mean().detach().cpu().item", "print", "trainer_rl.TrainerRL.prof.tick", "print", "returns.append", "rewards.append", "value_losses.append", "action_losses.append", "dist_entropies.append", "value_preds.append", "vels.append", "stopprobs.append", "trainer_rl.TrainerRL.prof.tick", "print", "numpy.asarray", "numpy.asarray", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "next", "trainer_rl.TrainerRL.ppo.update", "print", "numpy.mean", "numpy.mean", "numpy.mean", "utils.dict_tools.dict_map", "trainer_rl.TrainerRL.writer.add_scalar", "trainer_rl.TrainerRL.writer.add_scalar", "trainer_rl.TrainerRL.writer.add_scalar", "trainer_rl.TrainerRL.writer.add_dict", "trainer_rl.TrainerRL.writer.add_dict", "trainer_rl.TrainerRL.writer.add_scalar", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "trainer_rl.TrainerRL.full_model.parameters", "learning.training.rollout_storage.RolloutStorage.from_rollouts.rewards.mean().detach().cpu", "learning.training.rollout_storage.RolloutStorage.from_rollouts.value_preds.mean().detach().cpu", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].detach().cpu().numpy", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].mean().detach().cpu", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "next", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray().mean", "iter", "learning.training.rollout_storage.RolloutStorage.from_rollouts.rewards.mean().detach", "learning.training.rollout_storage.RolloutStorage.from_rollouts.value_preds.mean().detach", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].detach().cpu", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].mean().detach", "numpy.asarray", "learning.training.rollout_storage.RolloutStorage.from_rollouts.rewards.mean", "learning.training.rollout_storage.RolloutStorage.from_rollouts.masks[].sum", "learning.training.rollout_storage.RolloutStorage.from_rollouts.value_preds.mean", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].detach", "learning.training.rollout_storage.RolloutStorage.from_rollouts.actions[].mean"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.training.ppo.PPO.set_entropy_coef", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.get_policy_state", "home.repos.pwc.inspect_result.clic-lab_drif.rollout.rollout_sampler.RolloutSampler.sample_n_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.calc_rollout_metrics", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dictlist_append", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.from_rollouts", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.compute_returns", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.training.ppo.PPO.update", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_map", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "train_epoch", "(", "self", ",", "epoch_num", ",", "eval", "=", "False", ",", "envs", "=", "\"train\"", ")", ":", "\n", "\n", "        ", "rewards", "=", "[", "]", "\n", "returns", "=", "[", "]", "\n", "value_losses", "=", "[", "]", "\n", "action_losses", "=", "[", "]", "\n", "dist_entropies", "=", "[", "]", "\n", "value_preds", "=", "[", "]", "\n", "vels", "=", "[", "]", "\n", "stopprobs", "=", "[", "]", "\n", "\n", "step_rollout_metrics", "=", "{", "}", "\n", "\n", "# Update entropy coefficient by applying scaling", "\n", "if", "len", "(", "self", ".", "entropy_schedule_epochs", ")", ">", "0", ":", "\n", "            ", "scaled_entropy_coeff", "=", "self", ".", "entropy_coef", "\n", "for", "e_multiplier", ",", "e_epoch", "in", "zip", "(", "self", ".", "entropy_schedule_multipliers", ",", "self", ".", "entropy_schedule_epochs", ")", ":", "\n", "                ", "if", "epoch_num", ">", "e_epoch", ":", "\n", "                    ", "scaled_entropy_coeff", "=", "e_multiplier", "*", "self", ".", "entropy_coef", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "self", ".", "ppo", ".", "set_entropy_coef", "(", "scaled_entropy_coeff", ")", "\n", "", "else", ":", "\n", "            ", "scaled_entropy_coeff", "=", "self", ".", "entropy_coef", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# TODO: Make the 100 a parameter", "\n", "iterations", "=", "self", ".", "test_iterations_per_epoch", "if", "eval", "else", "self", ".", "iterations_per_epoch", "\n", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "            ", "policy_state", "=", "self", ".", "full_model", ".", "get_policy_state", "(", ")", "\n", "device", "=", "policy_state", "[", "next", "(", "(", "iter", "(", "policy_state", ")", ")", ")", "]", ".", "device", "\n", "print", "(", "\"TrainerRL: Sampling N Rollouts\"", ")", "\n", "rollouts", "=", "self", ".", "rollout_sampler", ".", "sample_n_rollouts", "(", "self", ".", "num_rollouts_per_iter", ",", "policy_state", ",", "sample", "=", "not", "eval", ",", "envs", "=", "envs", ")", "\n", "#if save_rollouts_to_dataset is not None:", "\n", "#    self.save_rollouts(rollouts, save_rollouts_to_dataset)", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"sample_rollouts\"", ")", "\n", "print", "(", "\"TrainerRL: Calculating Rollout Metrics\"", ")", "\n", "i_rollout_metrics", "=", "calc_rollout_metrics", "(", "rollouts", ")", "\n", "step_rollout_metrics", "=", "dictlist_append", "(", "step_rollout_metrics", ",", "i_rollout_metrics", ")", "\n", "\n", "assert", "len", "(", "rollouts", ")", ">", "0", "\n", "\n", "# Convert our rollouts to the format used by Ilya Kostrikov", "\n", "device", "=", "next", "(", "self", ".", "full_model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "rollout_storage", "=", "RolloutStorage", ".", "from_rollouts", "(", "rollouts", ",", "device", "=", "device", ",", "intrinsic_reward_only", "=", "self", ".", "intrinsic_reward_only", ")", "\n", "next_value", "=", "None", "\n", "\n", "rollout_storage", ".", "compute_returns", "(", "next_value", ",", "self", ".", "use_gae", ",", "self", ".", "gamma", ",", "self", ".", "gae_lambda", ",", "False", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"compute_storage\"", ")", "\n", "\n", "reward", "=", "rollout_storage", ".", "rewards", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "avg_return", "=", "(", "(", "(", "rollout_storage", ".", "returns", "[", "1", ":", "]", "*", "rollout_storage", ".", "masks", "[", ":", "-", "1", "]", ")", ".", "sum", "(", ")", "+", "rollout_storage", ".", "returns", "[", "0", "]", ")", "/", "(", "rollout_storage", ".", "masks", "[", ":", "-", "1", "]", ".", "sum", "(", ")", "+", "1", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "avg_value", "=", "rollout_storage", ".", "value_preds", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "avg_vel", "=", "rollout_storage", ".", "actions", "[", ":", ",", "0", ",", "0", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "avg_stopprob", "=", "rollout_storage", ".", "actions", "[", ":", ",", "0", ",", "3", "]", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "print", "(", "\"TrainerRL: PPO Update\"", ")", "\n", "if", "not", "eval", ":", "\n", "                ", "value_loss", ",", "action_loss", ",", "dist_entropy", ",", "avg_ratio", "=", "self", ".", "ppo", ".", "update", "(", "rollout_storage", ",", "self", ".", "global_step", ",", "self", ".", "minibatch_size", ")", "\n", "print", "(", "f\"Iter: {i}/{iterations}, Value loss: {value_loss}, Action loss: {action_loss}, Entropy: {dist_entropy}, Reward: {reward}\"", ")", "\n", "", "else", ":", "\n", "                ", "value_loss", "=", "0", "\n", "action_loss", "=", "0", "\n", "dist_entropy", "=", "0", "\n", "avg_ratio", "=", "0", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"ppo_update\"", ")", "\n", "print", "(", "\"TrainerRL: PPO Update Done\"", ")", "\n", "\n", "returns", ".", "append", "(", "avg_return", ")", "\n", "rewards", ".", "append", "(", "reward", ")", "\n", "value_losses", ".", "append", "(", "value_loss", ")", "\n", "action_losses", ".", "append", "(", "action_loss", ")", "\n", "dist_entropies", ".", "append", "(", "dist_entropy", ")", "\n", "value_preds", ".", "append", "(", "avg_value", ")", "\n", "vels", ".", "append", "(", "avg_vel", ")", "\n", "stopprobs", ".", "append", "(", "avg_stopprob", ")", "\n", "\n", "if", "i", "%", "self", ".", "summary_every_n", "==", "self", ".", "summary_every_n", "-", "1", ":", "\n", "                ", "avg_reward", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "rewards", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ")", "\n", "avg_return", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "returns", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ")", "\n", "avg_vel", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "vels", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "\n", "metrics", "=", "{", "\n", "\"value_loss\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "value_losses", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ")", ",", "\n", "\"action_loss\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "action_losses", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ")", ",", "\n", "\"dist_entropy\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "dist_entropies", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ")", ",", "\n", "\"avg_value\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "value_preds", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ")", ",", "\n", "\"avg_vel_x\"", ":", "avg_vel", "[", "0", "]", ",", "\n", "\"avg_yaw_rate\"", ":", "avg_vel", "[", "2", "]", ",", "\n", "\"avg_stopprob\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "stopprobs", "[", "-", "self", ".", "summary_every_n", ":", "]", ")", ")", ",", "\n", "\"ratio\"", ":", "avg_ratio", "\n", "}", "\n", "\n", "# Reduce average", "\n", "step_rollout_metrics", "=", "dict_map", "(", "step_rollout_metrics", ",", "lambda", "m", ":", "np", ".", "asarray", "(", "m", ")", ".", "mean", "(", ")", ")", "\n", "\n", "mode", "=", "\"eval\"", "if", "eval", "else", "\"train\"", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"ppo_{mode}/reward\"", ",", "avg_reward", ",", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"ppo_{mode}/return\"", ",", "avg_return", ",", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"ppo_{mode}/stage1_updates\"", ",", "self", ".", "stage1_updates", ",", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "f\"ppo_{mode}/\"", ",", "metrics", ",", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "f\"ppo_{mode}/\"", ",", "step_rollout_metrics", ",", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"ppo_{mode}/scaled_entropy_coeff\"", ",", "scaled_entropy_coeff", ",", "self", ".", "global_step", ")", "\n", "step_rollout_metrics", "=", "{", "}", "\n", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"logging\"", ")", "\n", "print", "(", "\"TrainerRL: Finished Step\"", ")", "\n", "\n", "# TODO: Remove code duplication (this was easier for now)", "\n", "", "avg_reward", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "rewards", ")", ")", "\n", "avg_vel", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "vels", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "metrics", "=", "{", "\n", "\"value_loss\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "value_losses", ")", ")", ",", "\n", "\"action_loss\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "action_losses", ")", ")", ",", "\n", "\"dist_entropy\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "dist_entropies", ")", ")", ",", "\n", "\"avg_value\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "value_preds", ")", ")", ",", "\n", "\"avg_vel_x\"", ":", "avg_vel", "[", "0", "]", ",", "\n", "\"avg_yaw_rate\"", ":", "avg_vel", "[", "2", "]", ",", "\n", "\"avg_stopprob\"", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "stopprobs", ")", ")", "\n", "}", "\n", "#pprint(metrics)", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"logging\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "avg_reward", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.stop_success": [[33, 50], ["state.get_pos_2d", "goal_distribution.view().max", "int", "int", "torch.Tensor", "torch.from_numpy().float", "torch.norm", "transformations.pos_m_to_px", "torch.norm.detach().item", "goal_distribution.view", "torch.from_numpy", "torch.norm.detach"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["def", "stop_success", "(", "rollout", ")", ":", "\n", "    ", "last_sample", "=", "rollout", "[", "-", "1", "]", "\n", "state", "=", "last_sample", "[", "\"state\"", "]", "\n", "stop_pos", "=", "state", ".", "get_pos_2d", "(", ")", "\n", "# TODO: Grab these from parameter serve", "\n", "stop_pos_map", "=", "pos_m_to_px", "(", "stop_pos", "[", "np", ".", "newaxis", ",", ":", "]", ",", "img_size_px", "=", "32", ",", "world_size_px", "=", "32", ",", "world_size_m", "=", "4.7", ")", "[", "0", "]", "\n", "goal_distribution", "=", "last_sample", "[", "\"v_dist_w\"", "]", "[", "1", ",", ":", ",", ":", "]", "\n", "\n", "_", ",", "argmax_best_goal", "=", "goal_distribution", ".", "view", "(", "-", "1", ")", ".", "max", "(", "0", ")", "\n", "best_stop_pos_x", "=", "int", "(", "argmax_best_goal", "/", "goal_distribution", ".", "shape", "[", "0", "]", ")", "\n", "best_stop_pos_y", "=", "int", "(", "argmax_best_goal", "%", "goal_distribution", ".", "shape", "[", "0", "]", ")", "\n", "\n", "best_stop_pos", "=", "torch", ".", "Tensor", "(", "[", "best_stop_pos_x", ",", "best_stop_pos_y", "]", ")", "\n", "pos", "=", "torch", ".", "from_numpy", "(", "stop_pos_map", ")", ".", "float", "(", ")", "\n", "dst_to_best_stop", "=", "torch", ".", "norm", "(", "pos", "-", "best_stop_pos", ")", "\n", "\n", "return", "dst_to_best_stop", ".", "detach", "(", ")", ".", "item", "(", ")", "<", "3.2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.calc_rollout_metrics": [[52, 86], ["evaluation.evaluate_nl.DataEvalNL", "numpy.asarray().mean", "utils.dict_tools.dict_merge", "evaluation.evaluate_nl.DataEvalNL.rollout_success", "trainer_rl.stop_success", "len", "len", "len", "numpy.mean", "[].keys", "k.endswith", "sum", "rewards[].append", "numpy.asarray", "numpy.asarray", "rewards.items"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.rollout_success", "home.repos.pwc.inspect_result.clic-lab_drif.training.trainer_rl.stop_success", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "calc_rollout_metrics", "(", "rollouts", ")", ":", "\n", "    ", "ev", "=", "DataEvalNL", "(", "\"\"", ",", "save_images", "=", "False", ",", "entire_trajectory", "=", "False", ")", "\n", "metrics", "=", "{", "}", "\n", "total_task_success", "=", "0", "\n", "total_stop_success", "=", "0", "\n", "coverages", "=", "[", "]", "\n", "reward_keys", "=", "[", "k", "for", "k", "in", "rollouts", "[", "0", "]", "[", "0", "]", ".", "keys", "(", ")", "if", "k", ".", "endswith", "(", "\"_reward\"", ")", "]", "\n", "rewards", "=", "{", "k", ":", "[", "]", "for", "k", "in", "reward_keys", "}", "\n", "\n", "for", "rollout", "in", "rollouts", ":", "\n", "        ", "success", "=", "ev", ".", "rollout_success", "(", "rollout", "[", "0", "]", "[", "\"env_id\"", "]", ",", "rollout", "[", "0", "]", "[", "\"set_idx\"", "]", ",", "rollout", "[", "0", "]", "[", "\"seg_idx\"", "]", ",", "rollout", ")", "\n", "\n", "# Take sum of rewards for each type of reward", "\n", "for", "k", "in", "reward_keys", ":", "\n", "            ", "v", "=", "sum", "(", "[", "s", "[", "k", "]", "for", "s", "in", "rollout", "]", ")", "\n", "rewards", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "visit_success", "=", "stop_success", "(", "rollout", ")", "\n", "total_stop_success", "+=", "1", "if", "visit_success", "else", "0", "\n", "total_task_success", "+=", "1", "if", "success", "else", "0", "\n", "\n", "", "task_success_rate", "=", "total_task_success", "/", "len", "(", "rollouts", ")", "\n", "visit_success_rate", "=", "total_stop_success", "/", "len", "(", "rollouts", ")", "\n", "\n", "metrics", "[", "\"task_success_rate\"", "]", "=", "task_success_rate", "\n", "metrics", "[", "\"visit_success_rate\"", "]", "=", "visit_success_rate", "\n", "\n", "rollout_lens", "=", "[", "len", "(", "rollout", ")", "for", "rollout", "in", "rollouts", "]", "\n", "metrics", "[", "\"mean_rollout_len\"", "]", "=", "np", ".", "asarray", "(", "rollout_lens", ")", ".", "mean", "(", ")", "\n", "\n", "# Average each reward across rollouts", "\n", "rewards", "=", "{", "k", ":", "np", ".", "mean", "(", "np", ".", "asarray", "(", "l", ")", ")", "for", "k", ",", "l", "in", "rewards", ".", "items", "(", ")", "}", "\n", "metrics", "=", "dict_merge", "(", "metrics", ",", "rewards", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.ppo.PPO.__init__": [[8, 33], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "actor_critic.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "actor_critic", ",", "\n", "clip_param", ",", "\n", "ppo_epoch", ",", "\n", "num_mini_batch", ",", "\n", "value_loss_coef", ",", "\n", "entropy_coef", ",", "\n", "lr", "=", "None", ",", "\n", "eps", "=", "None", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "use_clipped_value_loss", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "actor_critic", "=", "actor_critic", "\n", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "ppo_epoch", "=", "ppo_epoch", "\n", "self", ".", "num_mini_batch", "=", "num_mini_batch", "\n", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "use_clipped_value_loss", "=", "use_clipped_value_loss", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "actor_critic", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "eps", "=", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.ppo.PPO.set_entropy_coef": [[34, 37], ["print"], "methods", ["None"], ["", "def", "set_entropy_coef", "(", "self", ",", "new_entropy_coef", ")", ":", "\n", "        ", "print", "(", "f\"PPO SCALED ENTROPY COEFF: {new_entropy_coef}\"", ")", "\n", "self", ".", "entropy_coef", "=", "new_entropy_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.training.ppo.PPO.update": [[38, 105], ["range", "enumerate", "advantages.mean", "advantages.std", "rollouts.recurrent_generator", "rollouts.feed_forward_generator", "ppo.PPO.actor_critic.evaluate_actions", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ppo.PPO.optimizer.zero_grad", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "ppo.PPO.optimizer.step", "value_loss.item", "action_loss.item", "dist_entropy.item", "torch.exp.mean().item", "torch.exp.mean().item", "torch.exp.mean().item", "torch.exp.mean().item", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "ppo.PPO.actor_critic.parameters", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.exp.mean", "torch.exp.mean", "torch.exp.mean", "torch.exp.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.recurrent_generator", "home.repos.pwc.inspect_result.clic-lab_drif.training.rollout_storage.RolloutStorage.feed_forward_generator", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.evaluate_actions", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.step", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "update", "(", "self", ",", "rollouts", ",", "global_step", ",", "mbs", ")", ":", "\n", "        ", "advantages", "=", "rollouts", ".", "returns", "[", ":", "-", "1", "]", "-", "rollouts", ".", "value_preds", "[", ":", "-", "1", "]", "\n", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "\n", "advantages", ".", "std", "(", ")", "+", "1e-5", ")", "\n", "\n", "value_loss_epoch", "=", "0", "\n", "action_loss_epoch", "=", "0", "\n", "dist_entropy_epoch", "=", "0", "\n", "\n", "total_ratio", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "self", ".", "ppo_epoch", ")", ":", "\n", "            ", "if", "self", ".", "actor_critic", ".", "is_recurrent", ":", "\n", "                ", "data_generator", "=", "rollouts", ".", "recurrent_generator", "(", "\n", "advantages", ",", "self", ".", "num_mini_batch", ",", "mbs", ")", "\n", "", "else", ":", "\n", "                ", "data_generator", "=", "rollouts", ".", "feed_forward_generator", "(", "\n", "advantages", ",", "self", ".", "num_mini_batch", ")", "\n", "\n", "", "for", "s", ",", "sample", "in", "enumerate", "(", "data_generator", ")", ":", "\n", "                ", "obs_batch", ",", "obs_b_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "=", "sample", "\n", "\n", "# Reshape to do in a single forward pass for all steps", "\n", "values", ",", "action_log_probs", ",", "dist_entropy", ",", "_", "=", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "obs_batch", ",", "obs_b_batch", ",", "recurrent_hidden_states_batch", ",", "masks_batch", ",", "\n", "actions_batch", ",", "global_step", ")", "\n", "\n", "ratio", "=", "torch", ".", "exp", "(", "action_log_probs", "-", "\n", "old_action_log_probs_batch", ")", "\n", "surr1", "=", "ratio", "*", "adv_targ", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "\n", "1.0", "+", "self", ".", "clip_param", ")", "*", "adv_targ", "\n", "action_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "use_clipped_value_loss", ":", "\n", "                    ", "value_pred_clipped", "=", "value_preds_batch", "+", "(", "values", "-", "value_preds_batch", ")", ".", "clamp", "(", "-", "self", ".", "clip_param", ",", "self", ".", "clip_param", ")", "\n", "value_losses", "=", "(", "values", "-", "return_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_losses_clipped", "=", "(", "\n", "value_pred_clipped", "-", "return_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "0.5", "*", "torch", ".", "max", "(", "value_losses", ",", "\n", "value_losses_clipped", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "value_loss", "=", "0.5", "*", "(", "return_batch", "-", "values", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "value_loss", "*", "self", ".", "value_loss_coef", "+", "action_loss", "-", "\n", "dist_entropy", "*", "self", ".", "entropy_coef", ")", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor_critic", ".", "parameters", "(", ")", ",", "\n", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "value_loss_epoch", "+=", "value_loss", ".", "item", "(", ")", "\n", "action_loss_epoch", "+=", "action_loss", ".", "item", "(", ")", "\n", "dist_entropy_epoch", "+=", "dist_entropy", ".", "item", "(", ")", "\n", "total_ratio", "+=", "ratio", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "num_updates", "=", "self", ".", "ppo_epoch", "*", "self", ".", "num_mini_batch", "\n", "\n", "value_loss_epoch", "/=", "num_updates", "\n", "action_loss_epoch", "/=", "num_updates", "\n", "dist_entropy_epoch", "/=", "num_updates", "\n", "avg_ratio", "=", "total_ratio", "/", "num_updates", "\n", "\n", "return", "value_loss_epoch", ",", "action_loss_epoch", ",", "dist_entropy_epoch", ",", "avg_ratio", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.crossentropy2d.CrossEntropy2d.__init__": [[10, 15], ["torch.Module.__init__", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "ang_weight", "=", "0.33", ",", "fwd_weight", "=", "0.33", ",", "stop_weight", "=", "0.33", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "softmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "logsoftmax", "=", "SpatialSoftmax2d", "(", "log", "=", "True", ")", "\n", "self", ".", "logsoftmax1d", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.crossentropy2d.CrossEntropy2d.forward": [[16, 49], ["pred.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.sum().sum.sum().sum.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.sum().sum.sum().sum.sum().sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "crossentropy2d.CrossEntropy2d.logsoftmax1d", "crossentropy2d.CrossEntropy2d.logsoftmax", "x.sum().sum.sum().sum.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "labels", ",", "oob_pred", "=", "None", ",", "oob_label", "=", "None", ")", ":", "\n", "\n", "#x = - self.softmax(labels) * self.logsoftmax(pred)", "\n", "\n", "        ", "batch_size", "=", "pred", ".", "shape", "[", "0", "]", "\n", "channels", "=", "pred", ".", "shape", "[", "1", "]", "\n", "\n", "# Handle extra pixel that captures probability outside the masks", "\n", "if", "oob_pred", "is", "not", "None", ":", "\n", "            ", "assert", "oob_label", "is", "not", "None", "\n", "assert", "channels", "==", "1", ",", "\"When using oob pixels, only 1-channel probability maps are supported\"", "\n", "# Concatenate oob_pred to pred and oob_label to label", "\n", "pred_flat", "=", "pred", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "pred_full", "=", "torch", ".", "cat", "(", "[", "pred_flat", ",", "oob_pred", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "labels_flat", "=", "labels", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "labels_full", "=", "torch", ".", "cat", "(", "[", "labels_flat", ",", "oob_label", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "-", "labels_full", "*", "self", ".", "logsoftmax1d", "(", "pred_full", ")", "\n", "# Sum over spatial dimensions:", "\n", "x", "=", "x", ".", "sum", "(", "1", ")", "\n", "# Average over channels and batches", "\n", "loss", "=", "torch", ".", "mean", "(", "x", ")", "\n", "\n", "# All probability mass is distributed over the masks", "\n", "", "else", ":", "\n", "            ", "x", "=", "-", "labels", "*", "self", ".", "logsoftmax", "(", "pred", ")", "\n", "\n", "# Sum over spatial dimensions:", "\n", "x", "=", "x", ".", "sum", "(", "2", ")", ".", "sum", "(", "2", ")", "\n", "# Average over channels and batches", "\n", "loss", "=", "torch", ".", "mean", "(", "x", ")", "\n", "\n", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_objective_base.AuxiliaryObjective.__init__": [[6, 10], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "AuxiliaryObjective", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "required_inputs", "=", "inputs", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_objective_base.AuxiliaryObjective.get_name": [[11, 13], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_objective_base.AuxiliaryObjective.get_required_inputs": [[14, 16], ["None"], "methods", ["None"], ["", "def", "get_required_inputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "required_inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.visitation_softmax.VisitationSoftmax.__init__": [[8, 13], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log", "=", "False", ")", ":", "\n", "        ", "super", "(", "VisitationSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "log", "=", "log", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.visitation_softmax.VisitationSoftmax.forward": [[14, 54], ["visitation_distributions.size", "visitation_distributions.size", "visitation_distributions.size", "visitation_distributions.size", "softmax_func().view", "visitation_dist_scores.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "softmax_func", "goal_dist_full[].view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "softmax_func().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "softmax_func", "goal_inside_dist_scores.size", "goal_inside_dist_scores.size", "visitation_dist_scores.view", "goal_inside_dist_scores.view", "softmax_func", "goal_inside_dist_scores.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "visitation_distributions", ",", "goal_outside_score", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Applies softmax on visitation distributions, while handling the case where we assign additional\n        probability of the goal being outside of the observed map region.\n        :param visitation_distributions:\n        :return: Nx3xHxW tensor where first channel is probability over visited locations, second channel is probability of stop locations,\n        third channel is a copy of the same value indicating the probability that goal location is not visible\n        \"\"\"", "\n", "batch_size", "=", "visitation_distributions", ".", "size", "(", "0", ")", "\n", "num_channels", "=", "visitation_distributions", ".", "size", "(", "1", ")", "\n", "assert", "num_channels", "==", "2", ",", "\"Must have 2 channels: visitation distribution scores and goal distribution scores\"", "\n", "height", "=", "visitation_distributions", ".", "size", "(", "2", ")", "\n", "width", "=", "visitation_distributions", ".", "size", "(", "3", ")", "\n", "\n", "visitation_dist_scores", "=", "visitation_distributions", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "goal_inside_dist_scores", "=", "visitation_distributions", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "softmax_func", "=", "self", ".", "log_softmax", "if", "self", ".", "log", "else", "self", ".", "softmax", "\n", "\n", "# Visitation distribution: Flatten, softmax, reshape back", "\n", "visitation_dist", "=", "softmax_func", "(", "visitation_dist_scores", ".", "view", "(", "batch_size", ",", "width", "*", "height", ")", ")", ".", "view", "(", "visitation_dist_scores", ".", "size", "(", ")", ")", "\n", "\n", "# We are modelling OOB probability", "\n", "if", "goal_outside_score", "is", "not", "None", ":", "\n", "# Goal distribution: Flatten, append outside score, softmax, split off outside score, reshape back", "\n", "            ", "goal_scores_full", "=", "torch", ".", "cat", "(", "[", "goal_inside_dist_scores", ".", "view", "(", "batch_size", ",", "width", "*", "height", ")", ",", "goal_outside_score", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "dim", "=", "1", ")", "\n", "goal_dist_full", "=", "softmax_func", "(", "goal_scores_full", ")", "\n", "goal_inside_partial_dist", "=", "goal_dist_full", "[", ":", ",", ":", "-", "1", "]", ".", "view", "(", "goal_inside_dist_scores", ".", "size", "(", ")", ")", "\n", "goal_outside_prob_or_logprob", "=", "goal_dist_full", "[", ":", ",", "-", "1", "]", "\n", "\n", "# Re-assemble back into the Bx2xHxW tensor representation", "\n", "visitation_prob_or_log_prob_out", "=", "torch", ".", "stack", "(", "[", "visitation_dist", ",", "goal_inside_partial_dist", "]", ",", "dim", "=", "1", ")", "\n", "return", "visitation_prob_or_log_prob_out", ",", "goal_outside_prob_or_logprob", "\n", "\n", "", "else", ":", "\n", "            ", "goal_dist", "=", "softmax_func", "(", "goal_inside_dist_scores", ".", "view", "(", "batch_size", ",", "width", "*", "height", ")", ")", ".", "view", "(", "\n", "goal_inside_dist_scores", ".", "size", "(", ")", ")", "\n", "# Re-assemble back into the Bx2xHxW tensor representation", "\n", "visitation_prob_or_log_prob_out", "=", "torch", ".", "stack", "(", "[", "visitation_dist", ",", "goal_dist", "]", ",", "dim", "=", "1", ")", "\n", "return", "visitation_prob_or_log_prob_out", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.gather_2d.Gather2D.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Gather2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.gather_2d.Gather2D.init_weights": [[14, 16], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.gather_2d.Gather2D.dbg_viz": [[17, 28], ["image.data.cpu.data.cpu.data.cpu", "torch.min", "torch.min", "torch.min", "torch.min", "visualization.Presenter().show_image", "torch.max", "torch.max", "torch.max", "torch.max", "coord.long", "coord.long.data.item", "coord.long.data.item", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "dbg_viz", "(", "self", ",", "image", ",", "coords_in_features", ")", ":", "\n", "        ", "image", "=", "image", ".", "data", ".", "cpu", "(", ")", "\n", "image", "[", "0", ",", ":", ",", ":", "]", "=", "0.0", "\n", "image", "-=", "torch", ".", "min", "(", "image", ")", "\n", "image", "/=", "(", "torch", ".", "max", "(", "image", ")", "+", "1e-9", ")", "\n", "for", "coord", "in", "coords_in_features", ":", "\n", "            ", "c", "=", "coord", ".", "long", "(", ")", "\n", "x", "=", "c", ".", "data", ".", "item", "(", ")", "\n", "y", "=", "c", ".", "data", ".", "item", "(", ")", "\n", "image", "[", "0", ",", "x", ",", "y", "]", "=", "1.0", "\n", "", "Presenter", "(", ")", ".", "show_image", "(", "image", ",", "\"gather_dbg\"", ",", "torch", "=", "True", ",", "scale", "=", "2", ",", "waitkey", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.gather_2d.Gather2D.forward": [[29, 66], ["coords_in_features[].contiguous().view", "coords_in_features[].contiguous().view", "coords_in_features[].contiguous().view.expand", "coords_in_features[].contiguous().view.expand", "list", "coords_in_features.size", "image.expand", "gather_img_x.clamp.clamp.clamp", "gather_img_y.clamp.clamp.clamp", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "len", "gather_2d.Gather2D.dbg_viz", "image.size", "coords_in_features.size", "coords_in_features.data.type", "coords_in_features.data.type", "coords_in_features[].contiguous", "coords_in_features[].contiguous", "image.size", "image.size", "image.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.gather_2d.Gather2D.dbg_viz"], ["", "def", "forward", "(", "self", ",", "image", ",", "coords_in_features", ",", "axes", "=", "(", "2", ",", "3", ")", ")", ":", "\n", "\n", "# Get rid of the batch dimension", "\n", "# TODO Handle batch dimension properly", "\n", "        ", "if", "len", "(", "coords_in_features", ".", "size", "(", ")", ")", ">", "2", ":", "\n", "            ", "coords_in_features", "=", "coords_in_features", "[", "0", "]", "\n", "\n", "", "assert", "coords_in_features", ".", "data", ".", "type", "(", ")", "==", "'torch.LongTensor'", "or", "coords_in_features", ".", "data", ".", "type", "(", ")", "==", "'torch.cuda.LongTensor'", "\n", "\n", "# TODO: Handle additional batch axis. Currently batch axis must be of dimension 1", "\n", "assert", "len", "(", "axes", ")", "==", "2", "\n", "\n", "if", "False", ":", "\n", "            ", "self", ".", "dbg_viz", "(", "image", "[", "0", "]", ",", "coords_in_features", ")", "\n", "\n", "# Gather the full feature maps for each of the 2 batches", "\n", "", "gather_x", "=", "coords_in_features", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "gather_y", "=", "coords_in_features", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", ".", "view", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "gather_img_x", "=", "gather_x", ".", "expand", "(", "[", "-", "1", ",", "image", ".", "size", "(", "1", ")", ",", "1", ",", "image", ".", "size", "(", "3", ")", "]", ")", "\n", "gather_img_y", "=", "gather_y", ".", "expand", "(", "[", "-", "1", ",", "image", ".", "size", "(", "1", ")", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Make enough", "\n", "img_size", "=", "list", "(", "image", ".", "size", "(", ")", ")", "\n", "img_size", "[", "0", "]", "=", "coords_in_features", ".", "size", "(", "0", ")", "\n", "image_in", "=", "image", ".", "expand", "(", "img_size", ")", "\n", "\n", "gather_img_x", "=", "gather_img_x", ".", "clamp", "(", "0", ",", "image_in", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "gather_img_y", "=", "gather_img_y", ".", "clamp", "(", "0", ",", "image_in", ".", "shape", "[", "3", "]", "-", "1", ")", "\n", "\n", "vec_y", "=", "torch", ".", "gather", "(", "image_in", ",", "2", ",", "gather_img_x", ")", "\n", "vec", "=", "torch", ".", "gather", "(", "vec_y", ",", "3", ",", "gather_img_y", ")", "\n", "vec", "=", "torch", ".", "squeeze", "(", "vec", ",", "3", ")", "\n", "vec", "=", "torch", ".", "squeeze", "(", "vec", ",", "2", ")", "\n", "\n", "return", "vec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer.MapTransformer.__init__": [[10, 21], ["torch.Module.__init__", "learning.models.semantic_map.map_affine.MapAffine"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ",", "dest_map_size", "=", "None", ")", ":", "\n", "        ", "super", "(", "MapTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "dest_map_size", "is", "None", ":", "\n", "            ", "dest_map_size", "=", "source_map_size", "\n", "\n", "", "self", ".", "map_affine", "=", "MapAffine", "(", "\n", "source_map_size", "=", "source_map_size", ",", "\n", "dest_map_size", "=", "dest_map_size", ",", "\n", "world_size_px", "=", "world_size_px", ",", "\n", "world_size_m", "=", "world_size_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer.MapTransformer.init_weights": [[22, 24], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer.MapTransformer.forward": [[25, 43], ["list", "list.remove", "map_transformer.MapTransformer.map_affine", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "map_transformer.MapTransformer.map_affine", "range", "out_channel_list.append", "out_channel_list.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "forward", "(", "self", ",", "maps", ",", "map_poses", ",", "new_map_poses", ",", "skip_channel", "=", "None", ")", ":", "\n", "        ", "if", "skip_channel", "is", "not", "None", ":", "\n", "            ", "total_num_channels", "=", "maps", ".", "shape", "[", "1", "]", "\n", "incl_channels", "=", "list", "(", "range", "(", "total_num_channels", ")", ")", "\n", "incl_channels", ".", "remove", "(", "skip_channel", ")", "\n", "select_maps", "=", "self", ".", "map_affine", "(", "maps", "[", ":", ",", "incl_channels", ",", ":", ",", ":", "]", ",", "map_poses", ",", "new_map_poses", ")", "\n", "out_channel_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_num_channels", ")", ":", "\n", "                ", "if", "i", "in", "incl_channels", ":", "\n", "                    ", "out_channel_list", ".", "append", "(", "select_maps", "[", ":", ",", "i", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_channel_list", ".", "append", "(", "maps", "[", ":", ",", "skip_channel", ",", ":", ",", ":", "]", ")", "\n", "", "", "transformed_maps", "=", "torch", ".", "stack", "(", "out_channel_list", ",", "dim", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "transformed_maps", "=", "self", ".", "map_affine", "(", "maps", ",", "map_poses", ",", "new_map_poses", ")", "\n", "\n", "", "return", "transformed_maps", ",", "new_map_poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.__init__": [[27, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "{", "}", "\n", "self", ".", "flags", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.reset": [[31, 34], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "{", "}", "\n", "self", ".", "flags", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.cuda": [[35, 38], ["key_tensor_store.KeyTensorStore.tensors.items", "v.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "tensors", ".", "items", "(", ")", ":", "\n", "            ", "v", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.set_flag": [[39, 41], ["None"], "methods", ["None"], ["", "", "def", "set_flag", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "flags", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_flag": [[42, 44], ["key_tensor_store.KeyTensorStore.flags.get"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "get_flag", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "flags", ".", "get", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.to": [[45, 48], ["key_tensor_store.KeyTensorStore.tensors.items", "v.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "to", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "tensors", ".", "items", "(", ")", ":", "\n", "            ", "v", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append": [[49, 55], ["other.tensors.items", "isinstance"], "methods", ["None"], ["", "", "def", "append", "(", "self", ",", "other", ")", ":", "\n", "        ", "for", "k", ",", "tlist", "in", "other", ".", "tensors", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "tlist", ",", "list", ")", "\n", "if", "k", "not", "in", "self", ".", "tensors", ":", "\n", "                ", "self", ".", "tensors", "[", "k", "]", "=", "[", "]", "\n", "", "self", ".", "tensors", "[", "k", "]", "+=", "tlist", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input": [[56, 66], ["key_tensor_store.KeyTensorStore.tensors[].append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "keep_input", "(", "self", ",", "key", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Stores a tensor for later retrieval with a given key\n        :param key:\n        :param input:\n        :return:\n        \"\"\"", "\n", "if", "key", "not", "in", "self", ".", "tensors", ":", "\n", "            ", "self", ".", "tensors", "[", "key", "]", "=", "[", "]", "\n", "", "self", ".", "tensors", "[", "key", "]", ".", "append", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs": [[67, 87], ["range", "isinstance", "type", "type", "input.size", "key_tensor_store.KeyTensorStore.keep_input", "key_tensor_store.KeyTensorStore.keep_input", "type", "range", "Exception", "len", "key_tensor_store.KeyTensorStore.keep_input", "type", "inp.unsqueeze.unsqueeze.unsqueeze", "str", "type"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input"], ["", "def", "keep_inputs", "(", "self", ",", "key", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Stores a batch or sequence of tensors for later retrieval with a given key\n        :param key:\n        :param input:\n        :return:\n        \"\"\"", "\n", "if", "type", "(", "input", ")", "==", "Variable", "or", "type", "(", "input", ")", "==", "torch", ".", "Tensor", ":", "\n", "            ", "for", "i", "in", "range", "(", "input", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "self", ".", "keep_input", "(", "key", ",", "input", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "", "", "elif", "isinstance", "(", "input", ",", "Partial2DDistribution", ")", ":", "\n", "            ", "self", ".", "keep_input", "(", "key", ",", "input", ")", "\n", "", "elif", "type", "(", "input", ")", "==", "list", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", ":", "\n", "                ", "inp", "=", "input", "[", "i", "]", "\n", "if", "type", "(", "inp", ")", "is", "Variable", ":", "\n", "                    ", "inp", "=", "inp", ".", "unsqueeze", "(", "0", ")", "\n", "", "self", ".", "keep_input", "(", "key", ",", "inp", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"ModuleWithAuxiliaries: Unrecognized input: \"", "+", "str", "(", "type", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get": [[88, 92], ["None"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "tensors", ":", "\n", "            ", "return", "self", ".", "tensors", "[", "key", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input": [[93, 102], ["None"], "methods", ["None"], ["", "def", "get_latest_input", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves a the latest previously stored tensor with the given key\n        :param key:\n        :return:\n        \"\"\"", "\n", "if", "key", "in", "self", ".", "tensors", ":", "\n", "            ", "return", "self", ".", "tensors", "[", "key", "]", "[", "-", "1", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch": [[103, 120], ["isinstance", "torch.cat", "torch.stack"], "methods", ["None"], ["", "def", "get_inputs_batch", "(", "self", ",", "key", ",", "cat_not_stack", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves all tensors with the given key, stacked in batch\n        :param key:\n        :return:\n        \"\"\"", "\n", "if", "key", "not", "in", "self", ".", "tensors", ":", "\n", "            ", "return", "None", "\n", "\n", "", "v", "=", "self", ".", "tensors", "[", "key", "]", "\n", "if", "isinstance", "(", "v", "[", "0", "]", ",", "Partial2DDistribution", ")", ":", "\n", "            ", "return", "v", "\n", "\n", "", "if", "cat_not_stack", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "self", ".", "tensors", "[", "key", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "self", ".", "tensors", "[", "key", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.clear_inputs": [[121, 129], ["None"], "methods", ["None"], ["", "", "def", "clear_inputs", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        Removes all stored tensors associated with the given key\n        :param key:\n        :return:\n        \"\"\"", "\n", "if", "key", "in", "self", ".", "tensors", ":", "\n", "            ", "del", "self", ".", "tensors", "[", "key", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.save_tensors_as_images": [[6, 24], ["tensor_store.get_inputs_batch", "learning.utils.save_tensor_as_img_during_rollout", "print", "len", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout"], ["def", "save_tensors_as_images", "(", "tensor_store", ",", "list_of_keys", ",", "prefix", ")", ":", "\n", "    ", "for", "key", "in", "list_of_keys", ":", "\n", "        ", "tensor", "=", "tensor_store", ".", "get_inputs_batch", "(", "key", ",", "cat_not_stack", "=", "True", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "            ", "print", "(", "f\"save_tensors_as_images: Tensor {key} not present in tensor store\"", ")", "\n", "continue", "\n", "", "if", "len", "(", "tensor", ".", "shape", ")", "not", "in", "[", "3", ",", "4", "]", ":", "\n", "            ", "print", "(", "f\"save_tensors_as_images: Tensor {key} has unsupported shape: {tensor.shape}\"", ")", "\n", "continue", "\n", "\n", "# If it's a batch of images/feature maps, take the last one", "\n", "", "if", "len", "(", "tensor", ".", "shape", ")", "==", "4", ":", "\n", "            ", "tensor", "=", "tensor", "[", "-", "1", "]", "\n", "# If the remaining image/feature map has more than 3 channels, take the first 3", "\n", "", "if", "len", "(", "tensor", ".", "shape", ")", "==", "3", "and", "tensor", ".", "shape", "[", "0", "]", ">", "3", ":", "\n", "            ", "tensor", "=", "tensor", "[", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "", "save_tensor_as_img_during_rollout", "(", "tensor", ",", "key", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.__init__": [[84, 94], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "schemas", "=", "{", "\n", "\"map_overlaid\"", ":", "{", "\n", "\"fun\"", ":", "write_map_overlaid", "\n", "}", ",", "\n", "\"gif_overlaid\"", ":", "{", "\n", "\"fun\"", ":", "write_gif_overlaid", "\n", "}", ",", "\n", "\"gif\"", ":", "{", "\n", "\"fun\"", ":", "write_gif", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write": [[97, 100], ["None"], "methods", ["None"], ["", "def", "should_write", "(", "self", ")", ":", "\n", "        ", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "return", "md", ".", "IS_ROLLOUT", "and", "md", ".", "WRITE_DEBUG_DATA", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_schema": [[101, 104], ["None"], "methods", ["None"], ["", "def", "write_schema", "(", "self", ",", "md", ",", "img", ",", "key", ",", "args", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "schemas", ":", "\n", "            ", "self", ".", "schemas", "[", "key", "]", "[", "\"fun\"", "]", "(", "md", ",", "img", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img": [[105, 113], ["learning.inputs.vision.torch_to_np", "data_io.results.save_results_extra_image", "dbg_writer.DebugWriter.write_schema"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.torch_to_np", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.results.save_results_extra_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_schema"], ["", "", "def", "write_img", "(", "self", ",", "img", ",", "key", ",", "args", "=", "None", ")", ":", "\n", "        ", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "img", "=", "torch_to_np", "(", "img", ")", "\n", "\n", "if", "key", "not", "in", "self", ".", "schemas", ":", "\n", "            ", "save_results_extra_image", "(", "md", ".", "RUN_NAME", ",", "md", ".", "ENV_ID", ",", "md", ".", "SET_IDX", ",", "md", ".", "SEG_IDX", ",", "key", ",", "img", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "write_schema", "(", "md", ",", "img", ",", "key", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.commit": [[114, 122], ["gif_frames.items", "data_io.results.save_results_extra_gif", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.results.save_results_extra_gif"], ["", "", "def", "commit", "(", "self", ")", ":", "\n", "        ", "global", "gif_frames", "\n", "for", "key", ",", "gif", "in", "gif_frames", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "save_results_extra_gif", "(", "gif", "[", "\"run_name\"", "]", ",", "gif", "[", "\"env_id\"", "]", ",", "gif", "[", "\"set_idx\"", "]", ",", "gif", "[", "\"seg_idx\"", "]", ",", "\"map_overlaid\"", "+", "gif", "[", "\"name\"", "]", ",", "gif", "[", "\"frames\"", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"ding\"", ")", "\n", "", "", "gif_frames", "=", "{", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.get_map_overlaid": [[9, 13], ["data_io.env.load_env_img", "visualization.Presenter().overlaid_image", "visualization.Presenter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image"], ["def", "get_map_overlaid", "(", "img", ",", "env_id", ")", ":", "\n", "    ", "env_img", "=", "load_env_img", "(", "env_id", ",", "width", "=", "256", ",", "height", "=", "256", ")", "\n", "overlaid", "=", "Presenter", "(", ")", ".", "overlaid_image", "(", "env_img", ",", "img", ")", "\n", "return", "overlaid", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.write_map_overlaid": [[15, 27], ["dbg_writer.get_map_overlaid", "data_io.results.save_results_extra_image", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.get_map_overlaid", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.results.save_results_extra_image"], ["", "def", "write_map_overlaid", "(", "md", ",", "img", ",", "args", ")", ":", "\n", "    ", "name", "=", "\"\"", "\n", "if", "args", "is", "not", "None", ":", "\n", "        ", "world_size", "=", "args", "[", "\"world_size\"", "]", "\n", "name", "=", "\"_\"", "+", "str", "(", "args", "[", "\"name\"", "]", ")", "\n", "img", "=", "img", "[", "0", ":", "world_size", ",", "0", ":", "world_size", ",", ":", "]", "\n", "# Take the first 3 channels if there are more", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "overlaid", "=", "get_map_overlaid", "(", "img", ",", "md", ".", "ENV_ID", ")", "\n", "save_results_extra_image", "(", "md", ".", "RUN_NAME", ",", "md", ".", "ENV_ID", ",", "md", ".", "SET_IDX", ",", "md", ".", "SEG_IDX", ",", "\"map_overlaid\"", "+", "name", ",", "overlaid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.write_gif_overlaid": [[30, 55], ["dbg_writer.get_map_overlaid", "[].append", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.get_map_overlaid", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "write_gif_overlaid", "(", "md", ",", "img", ",", "args", ")", ":", "\n", "    ", "name", "=", "\"\"", "\n", "if", "args", "is", "not", "None", ":", "\n", "        ", "world_size", "=", "args", "[", "\"world_size\"", "]", "\n", "name", "=", "args", "[", "\"name\"", "]", "\n", "img", "=", "img", "[", "0", ":", "world_size", ",", "0", ":", "world_size", ",", ":", "]", "\n", "# Take the first 3 channels if there are more", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "overlaid", "=", "get_map_overlaid", "(", "img", ",", "md", ".", "ENV_ID", ")", "\n", "\n", "global", "gif_frames", "\n", "seg_identifier", "=", "str", "(", "md", ".", "RUN_NAME", ")", "+", "str", "(", "md", ".", "ENV_ID", ")", "+", "\"_\"", "+", "str", "(", "md", ".", "SET_IDX", ")", "+", "\"_\"", "+", "str", "(", "md", ".", "SEG_IDX", ")", "+", "\"_map_overlaid\"", "+", "str", "(", "name", ")", "\n", "if", "seg_identifier", "not", "in", "gif_frames", ":", "\n", "        ", "gif_frames", "[", "seg_identifier", "]", "=", "{", "\n", "\"frames\"", ":", "[", "]", ",", "\n", "\"run_name\"", ":", "md", ".", "RUN_NAME", ",", "\n", "\"env_id\"", ":", "md", ".", "ENV_ID", ",", "\n", "\"set_idx\"", ":", "md", ".", "SET_IDX", ",", "\n", "\"seg_idx\"", ":", "md", ".", "SEG_IDX", ",", "\n", "\"name\"", ":", "name", "\n", "}", "\n", "\n", "", "gif_frames", "[", "seg_identifier", "]", "[", "\"frames\"", "]", ".", "append", "(", "overlaid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.write_gif": [[57, 80], ["visualization.Presenter().prep_image", "[].append", "str", "visualization.Presenter", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.prep_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "write_gif", "(", "md", ",", "img", ",", "args", ")", ":", "\n", "    ", "name", "=", "\"\"", "\n", "if", "args", "is", "not", "None", ":", "\n", "        ", "name", "=", "args", "[", "\"name\"", "]", "\n", "# Take the first 3 channels if there are more", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "img", "=", "Presenter", "(", ")", ".", "prep_image", "(", "img", ")", "\n", "\n", "global", "gif_frames", "\n", "seg_identifier", "=", "str", "(", "md", ".", "RUN_NAME", ")", "+", "str", "(", "md", ".", "ENV_ID", ")", "+", "\"_\"", "+", "str", "(", "md", ".", "SET_IDX", ")", "+", "\"_\"", "+", "str", "(", "md", ".", "SEG_IDX", ")", "+", "\"_img\"", "+", "str", "(", "name", ")", "\n", "if", "seg_identifier", "not", "in", "gif_frames", ":", "\n", "        ", "gif_frames", "[", "seg_identifier", "]", "=", "{", "\n", "\"frames\"", ":", "[", "]", ",", "\n", "\"run_name\"", ":", "md", ".", "RUN_NAME", ",", "\n", "\"env_id\"", ":", "md", ".", "ENV_ID", ",", "\n", "\"set_idx\"", ":", "md", ".", "SET_IDX", ",", "\n", "\"seg_idx\"", ":", "md", ".", "SEG_IDX", ",", "\n", "\"name\"", ":", "name", "\n", "}", "\n", "\n", "", "gif_frames", "[", "seg_identifier", "]", "[", "\"frames\"", "]", ".", "append", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.identity.Identity.__init__": [[6, 8], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.identity.Identity.forward": [[9, 11], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockConditional.__init__": [[12, 21], ["super().__init__", "learning.modules.rss.map_lang_semantic_filter.MapLangSemanticFilter", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "text_embed_size", ",", "channels", "=", "16", ",", "c_out", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResBlockConditional", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "c_out", "is", "None", ":", "\n", "            ", "c_out", "=", "channels", "\n", "", "self", ".", "c_in", "=", "channels", "\n", "self", ".", "c_out", "=", "c_out", "\n", "if", "self", ".", "c_in", "!=", "self", ".", "c_out", ":", "\n", "            ", "print", "(", "\"WARNING: ResBlockConditional is not residual\"", ")", "\n", "", "self", ".", "lf", "=", "MapLangSemanticFilter", "(", "text_embed_size", ",", "channels", ",", "c_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockConditional.cuda": [[22, 25], ["super().cuda", "blocks.ResBlockConditional.lf.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResBlockConditional", ",", "self", ")", ".", "cuda", "(", ")", "\n", "self", ".", "lf", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockConditional.init_weights": [[26, 28], ["blocks.ResBlockConditional.lf.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "lf", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockConditional.forward": [[29, 37], ["blocks.ResBlockConditional.lf.precompute_conv_weights", "blocks.ResBlockConditional.lf"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights"], ["", "def", "forward", "(", "self", ",", "images", ",", "contexts", ")", ":", "\n", "        ", "self", ".", "lf", ".", "precompute_conv_weights", "(", "contexts", ")", "\n", "x", "=", "self", ".", "lf", "(", "images", ")", "\n", "if", "self", ".", "c_in", "==", "self", ".", "c_out", ":", "\n", "            ", "out", "=", "x", "+", "images", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlock.__init__": [[40, 50], ["super().__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", "=", "16", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "act2", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlock.init_weights": [[51, 57], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "blocks.ResBlock.conv1.bias.data.fill_", "blocks.ResBlock.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlock.forward": [[58, 63], ["blocks.ResBlock.act1", "blocks.ResBlock.act2", "blocks.ResBlock.conv1", "blocks.ResBlock.conv2", "blocks.ResBlock.norm1", "blocks.ResBlock.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "x", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "self", ".", "norm1", "(", "images", ")", ")", ")", "\n", "x", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "out", "=", "x", "+", "images", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlock.write_summaries": [[64, 67], ["learning.utils.layer_histogram_summaries", "learning.utils.layer_histogram_summaries"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries"], ["", "def", "write_summaries", "(", "self", ",", "writer", ",", "prefix", ",", "idx", ")", ":", "\n", "        ", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/conv1\"", ",", "self", ".", "conv1", ",", "idx", ")", "\n", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/conv2\"", ",", "self", ".", "conv2", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockStrided.__init__": [[70, 87], ["super().__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.AvgPool2d", "torch.AvgPool2d", "learning.modules.identity.Identity", "learning.modules.identity.Identity", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", "=", "16", ",", "stride", "=", "2", ",", "down_padding", "=", "0", ",", "groups", "=", "1", ",", "nonorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlockStrided", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "down_padding", ",", "groups", "=", "groups", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "act2", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n", "if", "nonorm", ":", "\n", "            ", "self", ".", "norm1", "=", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "\n", "", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "down_padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockStrided.init_weights": [[88, 94], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "blocks.ResBlockStrided.conv1.bias.data.fill_", "blocks.ResBlockStrided.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockStrided.forward": [[95, 100], ["blocks.ResBlockStrided.act1", "blocks.ResBlockStrided.act2", "blocks.ResBlockStrided.avg_pool", "blocks.ResBlockStrided.conv1", "blocks.ResBlockStrided.conv2", "blocks.ResBlockStrided.norm1", "blocks.ResBlockStrided.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "x", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "self", ".", "norm1", "(", "images", ")", ")", ")", "\n", "x_out", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "x_in", "=", "self", ".", "avg_pool", "(", "images", ")", "\n", "return", "x_in", "+", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockStrided.write_summaries": [[101, 104], ["learning.utils.layer_histogram_summaries", "learning.utils.layer_histogram_summaries"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries"], ["", "def", "write_summaries", "(", "self", ",", "writer", ",", "prefix", ",", "idx", ")", ":", "\n", "        ", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/conv1\"", ",", "self", ".", "conv1", ",", "idx", ")", "\n", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/conv2\"", ",", "self", ".", "conv2", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockStridedConv.__init__": [[107, 119], ["super().__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", "=", "16", ",", "c_out", "=", "32", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "ResBlockStridedConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_out", "=", "c_out", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "act2", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n", "self", ".", "convb", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockStridedConv.init_weights": [[120, 129], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "blocks.ResBlockStridedConv.convb.weight.data.normal_", "blocks.ResBlockStridedConv.conv1.bias.data.fill_", "blocks.ResBlockStridedConv.conv2.bias.data.fill_", "blocks.ResBlockStridedConv.convb.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "\n", "self", ".", "convb", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.0001", ")", "\n", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "convb", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockStridedConv.forward": [[130, 135], ["blocks.ResBlockStridedConv.act1", "blocks.ResBlockStridedConv.act2", "blocks.ResBlockStridedConv.convb", "blocks.ResBlockStridedConv.conv1", "blocks.ResBlockStridedConv.conv2", "blocks.ResBlockStridedConv.norm1", "blocks.ResBlockStridedConv.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "x", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "self", ".", "norm1", "(", "images", ")", ")", ")", "\n", "x_out", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "x_in", "=", "self", ".", "convb", "(", "images", ")", "\n", "return", "x_in", "+", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockUp.__init__": [[138, 146], ["super().__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", "=", "16", ")", ":", "\n", "        ", "super", "(", "ResBlockUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "1", ")", "\n", "self", ".", "act1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "1", ")", "\n", "self", ".", "act2", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockUp.init_weights": [[147, 153], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "blocks.ResBlockUp.conv1.bias.data.fill_", "blocks.ResBlockUp.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.ResBlockUp.forward": [[154, 159], ["blocks.ResBlockUp.act1", "blocks.ResBlockUp.act2", "blocks.ResBlockUp.conv1", "blocks.ResBlockUp.conv2", "blocks.ResBlockUp.norm1", "blocks.ResBlockUp.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "x", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "self", ".", "norm1", "(", "images", ")", ")", ")", "\n", "x", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "out", "=", "x", "+", "images", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.UpsampleBlock.__init__": [[162, 171], ["super().__init__", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.PixelShuffle", "torch.PixelShuffle", "blocks.UpsampleBlock.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "c_out", ",", "upscale_factor", ")", ":", "\n", "        ", "super", "(", "UpsampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", "*", "(", "upscale_factor", "**", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "c_out", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "upscale_factor", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.UpsampleBlock.forward": [[172, 178], ["blocks.UpsampleBlock.conv1", "blocks.UpsampleBlock.pixel_shuffle", "blocks.UpsampleBlock.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pixel_shuffle", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "#x = self.prelu(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.UpsampleBlock.init_weights": [[179, 181], ["torch.nn.init.orthogonal", "torch.nn.init.orthogonal", "torch.nn.init.orthogonal", "torch.nn.init.orthogonal", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "orthogonal", "(", "self", ".", "conv1", ".", "weight", ",", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseBlock.__init__": [[184, 195], ["super().__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", "=", "32", ",", "c_out", "=", "32", ")", ":", "\n", "        ", "super", "(", "DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", "+", "c_out", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "c_in", "+", "c_out", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act2", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", "+", "2", "*", "c_out", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "c_in", "+", "2", "*", "c_out", ",", "c_out", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act3", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseBlock.init_weights": [[196, 202], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "blocks.DenseBlock.conv1.bias.data.fill_", "blocks.DenseBlock.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseBlock.forward": [[203, 211], ["blocks.DenseBlock.act1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blocks.DenseBlock.act2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blocks.DenseBlock.act3", "blocks.DenseBlock.conv1", "blocks.DenseBlock.conv2", "blocks.DenseBlock.conv3", "blocks.DenseBlock.norm1", "blocks.DenseBlock.norm2", "blocks.DenseBlock.norm3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "x1", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "self", ".", "norm1", "(", "images", ")", ")", ")", "\n", "#print(x1.size(), images.size())", "\n", "x1_cat", "=", "torch", ".", "cat", "(", "[", "images", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "self", ".", "norm2", "(", "x1_cat", ")", ")", ")", "\n", "x2_cat", "=", "torch", ".", "cat", "(", "[", "images", ",", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x3", "=", "self", ".", "act3", "(", "self", ".", "conv3", "(", "self", ".", "norm3", "(", "x2_cat", ")", ")", ")", "\n", "return", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock2.__init__": [[214, 220], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "hidden_size", ",", "out_size", ")", ":", "\n", "        ", "super", "(", "DenseMlpBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "in_size", ",", "hidden_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "in_size", "+", "hidden_size", ",", "out_size", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock2.init_weights": [[221, 228], ["torch.nn.init.orthogonal", "torch.nn.init.orthogonal", "torch.nn.init.orthogonal", "torch.nn.init.orthogonal", "blocks.DenseMlpBlock2.linear1.bias.data.fill_", "blocks.DenseMlpBlock2.linear2.bias.data.fill_", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "init", ".", "orthogonal", "(", "self", ".", "linear1", ".", "weight", ",", "init", ".", "calculate_gain", "(", "\"leaky_relu\"", ")", ")", "\n", "init", ".", "orthogonal", "(", "self", ".", "linear2", ".", "weight", ",", "init", ".", "calculate_gain", "(", "\"leaky_relu\"", ")", ")", "\n", "#self.linear1.weight.data.normal_(0, 0.001)", "\n", "#self.linear2.weight.data.normal_(0, 0.001)", "\n", "self", ".", "linear1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "linear2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock2.forward": [[229, 234], ["blocks.DenseMlpBlock2.act1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blocks.DenseMlpBlock2.linear2", "blocks.DenseMlpBlock2.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x1", "=", "self", ".", "act1", "(", "self", ".", "linear1", "(", "input", ")", ")", "\n", "x1_cat", "=", "torch", ".", "cat", "(", "[", "input", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "linear2", "(", "x1_cat", ")", "\n", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock2.write_summaries": [[235, 238], ["learning.utils.layer_histogram_summaries", "learning.utils.layer_histogram_summaries"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries"], ["", "def", "write_summaries", "(", "self", ",", "writer", ",", "prefix", ",", "idx", ")", ":", "\n", "        ", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/linear1\"", ",", "self", ".", "linear1", ",", "idx", ")", "\n", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/linear2\"", ",", "self", ".", "linear2", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock3.__init__": [[241, 248], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "DenseMlpBlock3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "in_size", ",", "hidden_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "in_size", "+", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "in_size", "+", "2", "*", "hidden_size", ",", "out_size", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock3.init_weights": [[249, 259], ["blocks.DenseMlpBlock3.linear1.weight.data.normal_", "blocks.DenseMlpBlock3.linear2.weight.data.normal_", "blocks.DenseMlpBlock3.linear3.weight.data.normal_", "blocks.DenseMlpBlock3.linear1.bias.data.fill_", "blocks.DenseMlpBlock3.linear2.bias.data.fill_", "blocks.DenseMlpBlock3.linear3.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "#init.orthogonal(self.linear1.weight, init.calculate_gain(\"leaky_relu\"))", "\n", "#init.orthogonal(self.linear2.weight, init.calculate_gain(\"leaky_relu\"))", "\n", "#init.orthogonal(self.linear3.weight, init.calculate_gain(\"leaky_relu\"))", "\n", "        ", "self", ".", "linear1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "self", ".", "linear2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "self", ".", "linear3", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "self", ".", "linear1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "linear2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "linear3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock3.forward": [[260, 267], ["blocks.DenseMlpBlock3.act1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blocks.DenseMlpBlock3.act1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blocks.DenseMlpBlock3.linear3", "blocks.DenseMlpBlock3.linear1", "blocks.DenseMlpBlock3.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x1", "=", "self", ".", "act1", "(", "self", ".", "linear1", "(", "input", ")", ")", "\n", "x1_cat", "=", "torch", ".", "cat", "(", "[", "input", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "act1", "(", "self", ".", "linear2", "(", "x1_cat", ")", ")", "\n", "x2_cat", "=", "torch", ".", "cat", "(", "[", "input", ",", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x3", "=", "self", ".", "linear3", "(", "x2_cat", ")", "\n", "return", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.blocks.DenseMlpBlock3.write_summaries": [[268, 272], ["learning.utils.layer_histogram_summaries", "learning.utils.layer_histogram_summaries", "learning.utils.layer_histogram_summaries"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.layer_histogram_summaries"], ["", "def", "write_summaries", "(", "self", ",", "writer", ",", "prefix", ",", "idx", ")", ":", "\n", "        ", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/linear1\"", ",", "self", ".", "linear1", ",", "idx", ")", "\n", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/linear2\"", ",", "self", ".", "linear2", ",", "idx", ")", "\n", "layer_histogram_summaries", "(", "writer", ",", "prefix", "+", "\"/linear3\"", ",", "self", ".", "linear3", ",", "idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.__init__": [[10, 24], ["torch.Module.__init__", "learning.models.semantic_map.map_affine.MapAffine"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ",", "dest_map_size", "=", "None", ")", ":", "\n", "        ", "super", "(", "MapTransformerBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "dest_map_size", "is", "None", ":", "\n", "            ", "dest_map_size", "=", "source_map_size", "\n", "\n", "", "self", ".", "latest_maps", "=", "None", "\n", "self", ".", "latest_map_poses", "=", "None", "\n", "\n", "self", ".", "map_affine", "=", "MapAffine", "(", "\n", "source_map_size", "=", "source_map_size", ",", "\n", "dest_map_size", "=", "dest_map_size", ",", "\n", "world_size_px", "=", "world_size_px", ",", "\n", "world_size_m", "=", "world_size_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.init_weights": [[25, 27], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.reset": [[28, 31], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "latest_maps", "=", "None", "\n", "self", ".", "latest_map_poses", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.get_map": [[32, 50], ["map_transformer_base.MapTransformerBase.get_maps", "maps.size", "maps.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps"], ["", "def", "get_map", "(", "self", ",", "cam_pose", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Return the latest map that's been accumulated.\n        :param cam_pose: The map will be oriented in the frame of reference of cam_pose before returning\n        :return:\n        \"\"\"", "\n", "\"\"\"\n        if not self.latest_map_pose == cam_pose:\n            map_in_current_frame = self.map_affine(self.latest_map, self.latest_map_pose, cam_pose)\n            if show != \"\":\n                Presenter().show_image(map_in_current_frame.data[0, 0:3], show, torch=True, scale=8, waitkey=20)\n            return map_in_current_frame, cam_pose\n        else:\n            return self.latest_map, self.latest_map_pose\n        \"\"\"", "\n", "maps", ",", "poses", "=", "self", ".", "get_maps", "(", "cam_pose", ")", "\n", "# TODO: Check that this is correct and perhaps deprecate it", "\n", "return", "maps", "[", "maps", ".", "size", "(", "0", ")", "-", "1", ":", "maps", ".", "size", "(", "0", ")", "]", ",", "poses", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.get_maps": [[51, 68], ["map_transformer_base.MapTransformerBase.map_affine"], "methods", ["None"], ["", "def", "get_maps", "(", "self", ",", "cam_poses", ")", ":", "\n", "        ", "\"\"\"\n        Return the latest sequence of maps that's been stored.\n        :param cam_poses: Each map in the batch will be oriented in the frame of reference of cam_pose_i before returning\n        :return:\n        \"\"\"", "\n", "#maps = []", "\n", "## TODO: Add proper batch support to map_affine", "\n", "#for i, cam_pose in enumerate(cam_poses):", "\n", "#    if cam_pose == self.latest_map_poses[i]:", "\n", "#        maps.append(self.latest_maps[i])", "\n", "#    else:", "\n", "#        map_i_in_pose_i = self.map_affine(self.latest_maps[i:i+1], self.latest_map_poses[i:i+1], cam_pose)", "\n", "#        maps.append(map_i_in_pose_i)", "\n", "\n", "maps", "=", "self", ".", "map_affine", "(", "self", ".", "latest_maps", ",", "self", ".", "latest_map_poses", ",", "cam_poses", ")", "\n", "return", "maps", ",", "cam_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.set_map": [[69, 72], ["None"], "methods", ["None"], ["", "def", "set_map", "(", "self", ",", "map", ",", "pose", ")", ":", "\n", "        ", "self", ".", "latest_maps", "=", "map", "\n", "self", ".", "latest_map_poses", "=", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.set_maps": [[73, 76], ["None"], "methods", ["None"], ["", "def", "set_maps", "(", "self", ",", "maps", ",", "poses", ")", ":", "\n", "        ", "self", ".", "latest_maps", "=", "maps", "\n", "self", ".", "latest_map_poses", "=", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.add_maps": [[77, 80], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "add_maps", "(", "self", ",", "maps", ",", "poses", ")", ":", "\n", "        ", "self", ".", "latest_maps", "=", "torch", ".", "cat", "(", "[", "self", ".", "latest_maps", ",", "maps", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "latest_map_poses", "=", "self", ".", "latest_map_poses", "+", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_base.MapTransformerBase.forward": [[81, 84], ["map_transformer_base.MapTransformerBase.map_affine"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "maps", ",", "map_poses", ",", "new_map_poses", ")", ":", "\n", "        ", "maps", "=", "self", ".", "map_affine", "(", "maps", ",", "map_poses", ",", "new_map_poses", ")", "\n", "return", "maps", ",", "new_map_poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.__init__": [[14, 17], ["torch.nn.Module.__init__", "utils.simple_profiler.SimpleProfiler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Affine2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.cuda": [[18, 21], ["torch.nn.Module.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.get_pytorch_to_img_mat": [[22, 73], ["numpy.asarray", "numpy.asarray", "numpy.dot", "learning.inputs.common.np_to_tensor", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.np_to_tensor"], ["", "def", "get_pytorch_to_img_mat", "(", "self", ",", "img_size", ",", "inv", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Returns an affine transformation matrix that takes an image in coordinate range [-1,1] and turns it\n        into an image of coordinate range [W,H]\n        :param img_size: (W,H)\n        :return:\n        \"\"\"", "\n", "# First move the image so that the origin is in the top-left corner", "\n", "# (in pytorch, the origin is in the center of the image)", "\n", "\"\"\"\n        t1 = np.asarray([\n            [1.0, 0, 1.0],\n            [0, 1.0, 1.0],\n            [0, 0, 1.0]\n        ])\n\n        # Then scale the image up to the required size\n        scale_w = img_size[0] / 2\n        scale_h = img_size[1] / 2\n        t2 = np.asarray([\n            [scale_h, 0, 0],\n            [0, scale_w, 0],\n            [0, 0, 1]\n        ])\n        \"\"\"", "\n", "\n", "# First scale the image to pixel coordinates", "\n", "scale_w", "=", "img_size", "[", "0", "]", "/", "2", "\n", "scale_h", "=", "img_size", "[", "1", "]", "/", "2", "\n", "\n", "t1", "=", "np", ".", "asarray", "(", "[", "\n", "[", "scale_h", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "scale_w", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "\n", "# Then move it such that the corner is at the origin", "\n", "t2", "=", "np", ".", "asarray", "(", "[", "\n", "[", "1.0", ",", "0", ",", "scale_h", "]", ",", "\n", "[", "0", ",", "1.0", ",", "scale_w", "]", ",", "\n", "[", "0", ",", "0", ",", "1.0", "]", "\n", "]", ")", "\n", "\n", "T", "=", "np", ".", "dot", "(", "t2", ",", "t1", ")", "\n", "\n", "if", "inv", ":", "\n", "            ", "T", "=", "np", ".", "linalg", ".", "inv", "(", "T", ")", "\n", "\n", "", "T_t", "=", "np_to_tensor", "(", "T", ",", "cuda", "=", "False", ")", "\n", "\n", "return", "T_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.img_affines_to_pytorch_cpu": [[74, 99], ["affine_2d.Affine2D.get_pytorch_to_img_mat", "affine_2d.Affine2D.get_pytorch_to_img_mat", "affine_2d.Affine2D.prof.tick", "img_affines.size", "T_src.repeat.repeat.repeat", "Tinv_dst.repeat.repeat.repeat", "torch.bmm", "torch.bmm", "affine_2d.Affine2D.prof.tick", "affine_2d.Affine2D.prof.tick", "torch.stack", "affine_2d.Affine2D.prof.tick", "torch.inverse"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.get_pytorch_to_img_mat", "home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.get_pytorch_to_img_mat", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick"], ["", "def", "img_affines_to_pytorch_cpu", "(", "self", ",", "img_affines", ",", "img_in_size", ",", "out_size", ")", ":", "\n", "        ", "T_src", "=", "self", ".", "get_pytorch_to_img_mat", "(", "img_in_size", ",", "inv", "=", "False", ")", "\n", "Tinv_dst", "=", "self", ".", "get_pytorch_to_img_mat", "(", "out_size", ",", "inv", "=", "True", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"getmat\"", ")", "\n", "\n", "# Convert pytorch-coord image to imgage pixel coords, apply the transformation, then convert the result back.", "\n", "batch_size", "=", "img_affines", ".", "size", "(", "0", ")", "\n", "T_src", "=", "T_src", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "Tinv_dst", "=", "Tinv_dst", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "torch", ".", "bmm", "(", "img_affines", ",", "T_src", ")", "# Convert pytorch coords to pixel coords and apply the transformation", "\n", "pyt_affines", "=", "torch", ".", "bmm", "(", "Tinv_dst", ",", "x", ")", "# Convert the transformation back to pytorch coords", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"convert\"", ")", "\n", "\n", "inverses", "=", "[", "torch", ".", "inverse", "(", "affine", ")", "for", "affine", "in", "pyt_affines", "]", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"inverse\"", ")", "\n", "\n", "pyt_affines_inv", "=", "torch", ".", "stack", "(", "inverses", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"stack\"", ")", "\n", "\n", "return", "pyt_affines_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.forward": [[100, 133], ["image.size", "affine_2d.Affine2D.prof.tick", "affine_2d.Affine2D.img_affines_to_pytorch_cpu", "affines_pytorch.to.to.to", "torch.nn.functional.affine_grid().float", "affine_2d.Affine2D.prof.tick", "torch.nn.functional.grid_sample", "affine_2d.Affine2D.prof.tick", "affine_2d.Affine2D.prof.loop", "affine_2d.Affine2D.prof.print_stats", "list", "image.size", "torch.nn.functional.affine_grid", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.affine_2d.Affine2D.img_affines_to_pytorch_cpu", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats"], ["", "def", "forward", "(", "self", ",", "image", ",", "affine_mat", ",", "out_size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Applies the given batch of affine transformation matrices to the batch of images\n        :param image:   batch of images to transform\n        :param affine:  batch of affine matrices to apply. Specified in image coordinates (internally converted to pytorch coords)\n        :return:        batch of images of same size as the input batch with the affine matrix having been applied\n        \"\"\"", "\n", "\n", "batch_size", "=", "image", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\".\"", ")", "\n", "\n", "# Cut off the batch and channel to get the image size as the source size", "\n", "img_size", "=", "list", "(", "image", ".", "size", "(", ")", ")", "[", "2", ":", "4", "]", "\n", "if", "out_size", "is", "None", ":", "\n", "            ", "out_size", "=", "img_size", "\n", "\n", "", "affines_pytorch", "=", "self", ".", "img_affines_to_pytorch_cpu", "(", "affine_mat", ",", "img_size", ",", "out_size", ")", "\n", "affines_pytorch", "=", "affines_pytorch", ".", "to", "(", "image", ".", "device", ")", "\n", "\n", "# Build the affine grid", "\n", "grid", "=", "F", ".", "affine_grid", "(", "affines_pytorch", "[", ":", ",", "[", "0", ",", "1", "]", ",", ":", "]", ",", "torch", ".", "Size", "(", "(", "batch_size", ",", "1", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"affine_grid\"", ")", "\n", "\n", "# Rotate the input image", "\n", "rot_img", "=", "F", ".", "grid_sample", "(", "image", ",", "grid", ",", "padding_mode", "=", "\"zeros\"", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"grid_sample\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "rot_img", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.__init__": [[12, 22], ["torch.Module.__init__", "add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage._generate_mask"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask_circular.AddDroneInitPosToCoverage._generate_mask"], ["    ", "def", "__init__", "(", "self", ",", "world_size_px", ",", "world_size_m", ",", "map_size_px", ")", ":", "\n", "        ", "super", "(", "AddDroneInitPosToCoverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "map_size_px", "=", "map_size_px", "\n", "\n", "self", ".", "hfov", "=", "86", "*", "math", ".", "pi", "/", "180", "\n", "self", ".", "radius", "=", "8", "\n", "self", ".", "full_radius", "=", "2", "\n", "self", ".", "current_pos_mask", "=", "self", ".", "_generate_mask", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.cuda": [[23, 26], ["torch.Module.cuda", "torch.Module.cuda", "add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.current_pos_mask.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "current_pos_mask", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.to": [[27, 29], ["add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.current_pos_mask.to"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "current_pos_mask", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage._generate_mask": [[30, 45], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "visualization.Presenter().show_image", "int", "math.atan2", "math.sqrt", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "_generate_mask", "(", "self", ")", ":", "\n", "        ", "m", "=", "torch", ".", "zeros", "(", "[", "self", ".", "map_size_px", ",", "self", ".", "map_size_px", "]", ")", "\n", "c_x", ",", "c_y", "=", "[", "int", "(", "self", ".", "map_size_px", "/", "2", ")", "]", "*", "2", "\n", "c_x_a", "=", "c_x", "-", "2", "\n", "c_y_a", "=", "c_y", "\n", "for", "x", "in", "range", "(", "c_x", "-", "self", ".", "radius", ",", "c_x", "+", "self", ".", "radius", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "c_y", "-", "self", ".", "radius", ",", "c_y", "+", "self", ".", "radius", ")", ":", "\n", "                ", "angle", "=", "math", ".", "atan2", "(", "y", "-", "c_y_a", ",", "x", "-", "c_x_a", ")", "\n", "dst", "=", "math", ".", "sqrt", "(", "(", "y", "-", "c_y", ")", "**", "2", "+", "(", "x", "-", "c_x", ")", "**", "2", ")", "\n", "if", "(", "-", "self", ".", "hfov", "/", "2", "<", "angle", "<", "self", ".", "hfov", "/", "2", "and", "dst", "<", "self", ".", "radius", ")", "or", "dst", "<=", "self", ".", "full_radius", ":", "\n", "                    ", "m", "[", "y", ",", "x", "]", "=", "1.0", "\n", "\n", "", "", "", "if", "False", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "m", ",", "\"init_pos_mask\"", ",", "scale", "=", "4", ",", "waitkey", "=", "True", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.get_init_pos_masks": [[46, 49], ["add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.current_pos_mask.to", "add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.current_pos_mask[].repeat"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat"], ["", "def", "get_init_pos_masks", "(", "self", ",", "batch_size", ",", "device", ")", ":", "\n", "        ", "self", ".", "current_pos_mask", "=", "self", ".", "current_pos_mask", ".", "to", "(", "device", ")", "\n", "return", "self", ".", "current_pos_mask", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ".", "repeat", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.forward": [[50, 60], ["range", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "forward", "(", "self", ",", "coverage_masks", ",", "initpos_masks", ")", ":", "\n", "        ", "batch_size", "=", "coverage_masks", ".", "shape", "[", "0", "]", "\n", "coverage_masks_initpos", "=", "(", "coverage_masks", "+", "initpos_masks", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "if", "False", ":", "\n", "            ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "coverage_masks", "[", "i", ",", "0", "]", ",", "\"cov_mask_before\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "coverage_masks_initpos", "[", "i", ",", "0", "]", ",", "\"cov_mask_after\"", ",", "scale", "=", "4", ",", "waitkey", "=", "True", ")", "\n", "\n", "", "", "return", "coverage_masks_initpos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask_circular.AddDroneInitPosToCoverage.__init__": [[12, 21], ["learning.modules.cuda_module.CudaModule.__init__", "add_drone_pos_to_coverage_mask_circular.AddDroneInitPosToCoverage._generate_mask"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask_circular.AddDroneInitPosToCoverage._generate_mask"], ["    ", "def", "__init__", "(", "self", ",", "world_size_px", ",", "world_size_m", ",", "map_size_px", ")", ":", "\n", "        ", "super", "(", "AddDroneInitPosToCoverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "map_size_px", "=", "map_size_px", "\n", "\n", "self", ".", "hfov", "=", "84", "*", "math", ".", "pi", "/", "180", "\n", "self", ".", "radius", "=", "5.0", "\n", "self", ".", "current_pos_mask", "=", "self", ".", "_generate_mask", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask_circular.AddDroneInitPosToCoverage.cuda": [[23, 25], ["learning.modules.cuda_module.CudaModule.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "CudaModule", ".", "cuda", "(", "self", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask_circular.AddDroneInitPosToCoverage._generate_mask": [[26, 40], ["torch.zeros", "range", "range", "visualization.Presenter().show_image", "math.atan2", "math.sqrt", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "_generate_mask", "(", "self", ")", ":", "\n", "        ", "m", "=", "torch", ".", "zeros", "(", "[", "self", ".", "map_size_px", ",", "self", ".", "map_size_px", "]", ")", "\n", "c_x", ",", "c_y", "=", "self", ".", "map_size_px", "/", "2", "\n", "for", "x", "in", "range", "(", "c_x", "-", "self", ".", "radius", ",", "c_x", "+", "self", ".", "radius", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "c_y", "-", "self", ".", "radius", ",", "c_y", "+", "self", ".", "radius", ")", ":", "\n", "                ", "dx", "=", "x", "-", "c_x", "\n", "dy", "=", "y", "-", "c_y", "\n", "angle", "=", "math", ".", "atan2", "(", "dy", ",", "dx", ")", "\n", "dst", "=", "math", ".", "sqrt", "(", "dy", "**", "2", "+", "dx", "**", "2", ")", "\n", "if", "-", "self", ".", "hfov", "/", "2", "<", "angle", "<", "self", ".", "hfov", "/", "2", "and", "dst", "<", "self", ".", "radius", ":", "\n", "                    ", "m", "[", "c_x", ",", "c_y", "]", "=", "1.0", "\n", "\n", "", "", "", "if", "False", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "m", ",", "\"init_pos_mask\"", ",", "scale", "=", "4", ",", "waitkey", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask_circular.AddDroneInitPosToCoverage.forward": [[41, 71], ["transformations.pos_m_to_px", "torch.zeros_like", "[].item", "[].item", "int", "int", "max", "max", "min", "min", "range", "range", "range", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "", "def", "forward", "(", "self", ",", "coverage_masks_w", ",", "cam_poses", ")", ":", "\n", "        ", "pos_px", "=", "pos_m_to_px", "(", "cam_poses", ".", "position", "[", "0", ":", "1", "]", ",", "img_size_px", "=", "self", ".", "world_size_px", ",", "world_size_px", "=", "self", ".", "world_size_px", ",", "world_size_m", "=", "self", ".", "world_size_m", ")", "\n", "batch_size", "=", "coverage_masks_w", ".", "shape", "[", "0", "]", "\n", "# TODO: Don't do this at test-time for everything except the first action!", "\n", "assert", "cam_poses", ".", "position", ".", "shape", "[", "0", "]", ">", "0", ",", "\"Not implemented test-time behavior\"", "\n", "pos_mask", "=", "torch", ".", "zeros_like", "(", "coverage_masks_w", "[", "0", ",", "0", "]", ")", "\n", "radius", "=", "6", "# 6 pixels is a bit less than a meter", "\n", "\n", "x", "=", "pos_px", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "y", "=", "pos_px", "[", "0", "]", "[", "1", "]", ".", "item", "(", ")", "\n", "\n", "xi", "=", "int", "(", "x", ")", "\n", "yi", "=", "int", "(", "y", ")", "\n", "min_x", "=", "max", "(", "xi", "-", "radius", ",", "0", ")", "\n", "min_y", "=", "max", "(", "yi", "-", "radius", ",", "0", ")", "\n", "max_x", "=", "min", "(", "xi", "+", "radius", ",", "coverage_masks_w", ".", "shape", "[", "2", "]", ")", "\n", "max_y", "=", "min", "(", "yi", "+", "radius", ",", "coverage_masks_w", ".", "shape", "[", "2", "]", ")", "\n", "\n", "indices", "=", "[", "[", "i", ",", "j", "]", "for", "i", "in", "range", "(", "min_x", ",", "max_x", ")", "for", "j", "in", "range", "(", "min_y", ",", "max_y", ")", "if", "(", "x", "-", "i", "-", "0.5", ")", "**", "2", "+", "(", "y", "-", "j", "-", "0.5", ")", "**", "2", "<", "radius", "**", "2", "]", "\n", "for", "i", ",", "j", "in", "indices", ":", "\n", "            ", "pos_mask", "[", "i", ",", "j", "]", "=", "1.0", "\n", "\n", "", "coverage_masks_w_init_pos", "=", "(", "coverage_masks_w", "+", "pos_mask", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "if", "True", ":", "\n", "            ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "coverage_masks_w", "[", "i", ",", "0", "]", ",", "\"cov_mask_before\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "coverage_masks_w_init_pos", "[", "i", ",", "0", "]", ",", "\"cov_mask_after\"", ",", "scale", "=", "4", ",", "waitkey", "=", "True", ")", "\n", "\n", "", "", "return", "coverage_masks_w_init_pos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.spatial_softmax_2d.SpatialSoftmax2d.__init__": [[11, 17], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatialSoftmax2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "log", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.spatial_softmax_2d.SpatialSoftmax2d.forward": [[18, 29], ["images.view.view.size", "images.view.view.size", "images.view.view.size", "images.view.view.size", "images.view.view.view", "spatial_softmax_2d.SpatialSoftmax2d.softmax", "img_out.view.view.view"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax"], ["", "", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "num_channels", "=", "images", ".", "size", "(", "1", ")", "\n", "height", "=", "images", ".", "size", "(", "2", ")", "\n", "width", "=", "images", ".", "size", "(", "3", ")", "\n", "\n", "images", "=", "images", ".", "view", "(", "[", "batch_size", "*", "num_channels", ",", "width", "*", "height", "]", ")", "\n", "img_out", "=", "self", ".", "softmax", "(", "images", ")", "\n", "img_out", "=", "img_out", ".", "view", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "\n", "return", "img_out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss_Deprecated.__init__": [[11, 16], ["super().__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", "ActionLoss_Deprecated", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "act_loss", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "False", ",", "reduce", "=", "False", ")", "\n", "self", ".", "stoploss", "=", "nn", ".", "BCELoss", "(", "size_average", "=", "False", ",", "reduce", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss_Deprecated.forward": [[17, 42], ["action_loss.ActionLoss_Deprecated.act_loss", "action_loss.ActionLoss_Deprecated.act_loss", "action_loss.ActionLoss_Deprecated.stoploss", "mask.unsqueeze().byte.unsqueeze().byte.unsqueeze().byte", "learning.inputs.sequence.mask_tensors", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().data.item", "torch.sum().data.item", "torch.sum().data.item", "torch.sum().data.item", "ValueError", "mask.unsqueeze().byte.unsqueeze().byte.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "nans.long"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.mask_tensors"], ["", "def", "forward", "(", "self", ",", "action_label", ",", "stop_label", ",", "action_pred", ",", "stop_pred", ",", "mask", ",", "reduce", "=", "False", ",", "metadata", "=", "None", ")", ":", "\n", "        ", "fwd_pred", "=", "action_pred", "[", ":", ",", "0", "]", "# fwd velocity", "\n", "ang_pred", "=", "action_pred", "[", ":", ",", "2", "]", "# angular velocity", "\n", "fwd_label", "=", "action_label", "[", ":", ",", "0", "]", "\n", "ang_label", "=", "action_label", "[", ":", ",", "2", "]", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "byte", "(", ")", "\n", "(", "fwd_pred", ",", "ang_pred", ",", "stop_pred", ",", "fwd_label", ",", "ang_label", ",", "stop_label", ")", "=", "mask_tensors", "(", "(", "fwd_pred", ",", "ang_pred", ",", "stop_pred", ",", "fwd_label", ",", "ang_label", ",", "stop_label", ")", ",", "mask", ")", "\n", "\n", "", "fwd_loss", "=", "self", ".", "act_loss", "(", "fwd_pred", ",", "fwd_label", ")", "\n", "ang_loss", "=", "self", ".", "act_loss", "(", "ang_pred", ",", "ang_label", ")", "\n", "stop_loss", "=", "self", ".", "stoploss", "(", "stop_pred", ",", "stop_label", ")", "\n", "\n", "if", "reduce", ":", "\n", "            ", "loss", "=", "0.2", "*", "fwd_loss", "+", "0.6", "*", "ang_loss", "+", "0.2", "*", "stop_loss", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "cat", "(", "[", "fwd_loss", ",", "ang_loss", ",", "stop_loss", "]", ")", "\n", "\n", "", "nans", "=", "loss", "!=", "loss", "\n", "if", "torch", ".", "sum", "(", "nans", ".", "long", "(", ")", ")", ".", "data", ".", "item", "(", ")", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nan's encountered in loss calculation\"", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss_Deprecated.write_summaries": [[43, 49], ["action_loss.ActionLoss_Deprecated.writer.add_scalar", "action_loss.ActionLoss_Deprecated.writer.add_scalar", "action_loss.ActionLoss_Deprecated.writer.add_scalar", "action_loss.ActionLoss_Deprecated.writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar"], ["", "def", "write_summaries", "(", "self", ",", "prefix", ",", "idx", ",", "loss", ",", "avg_loss", ")", ":", "\n", "        ", "full_prefix", "=", "self", ".", "model_name", "+", "\"/\"", "+", "prefix", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_loss\"", ",", "avg_loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_fwd_loss\"", ",", "loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_ang_loss\"", ",", "loss", ".", "data", "[", "1", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_stop_loss\"", ",", "loss", ".", "data", "[", "2", "]", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.__init__": [[53, 60], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "ang_weight", "=", "0.33", ",", "fwd_weight", "=", "0.33", ",", "stop_weight", "=", "0.33", ")", ":", "\n", "        ", "super", "(", "ActionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act_loss", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "False", ",", "reduce", "=", "False", ")", "\n", "self", ".", "stoploss", "=", "nn", ".", "BCELoss", "(", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "0.8", "]", ")", ",", "size_average", "=", "False", ")", "\n", "self", ".", "ang_weight", "=", "ang_weight", "\n", "self", ".", "fwd_weight", "=", "fwd_weight", "\n", "self", ".", "stop_weight", "=", "stop_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.cuda": [[61, 65], ["torch.Module.cuda", "torch.Module.cuda", "action_loss.ActionLoss.act_loss.cuda", "action_loss.ActionLoss.stoploss.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "act_loss", ".", "cuda", "(", "device", ")", "\n", "self", ".", "stoploss", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.forward": [[66, 123], ["action_loss.ActionLoss.act_loss", "action_loss.ActionLoss.act_loss", "mask.unsqueeze().byte.unsqueeze().byte.unsqueeze().byte", "learning.inputs.sequence.mask_tensors", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "action_loss.ActionLoss.stoploss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "action_loss.ActionLoss.reduce_loss", "torch.sum().data.item", "torch.sum().data.item", "torch.sum().data.item", "torch.sum().data.item", "print", "print", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "len", "action_loss.ActionLoss.stoploss", "mask.unsqueeze().byte.unsqueeze().byte.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "nans.long", "action_loss.ActionLoss.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.mask_tensors", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "forward", "(", "self", ",", "action_label", ",", "action_pred", ",", "mask", "=", "None", ",", "reduce", "=", "False", ",", "flags", "=", "None", ",", "batchreduce", "=", "True", ")", ":", "\n", "        ", "fwd_pred", "=", "action_pred", "[", ":", ",", "0", "]", "# fwd velocity", "\n", "ang_pred", "=", "action_pred", "[", ":", ",", "2", "]", "# angular velocity", "\n", "stop_pred", "=", "action_pred", "[", ":", ",", "3", "]", "\n", "fwd_label", "=", "action_label", "[", ":", ",", "0", "]", "\n", "ang_label", "=", "action_label", "[", ":", ",", "2", "]", "\n", "stop_label", "=", "action_label", "[", ":", ",", "3", "]", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "byte", "(", ")", "\n", "(", "fwd_pred", ",", "ang_pred", ",", "stop_pred", ",", "fwd_label", ",", "ang_label", ",", "stop_label", ")", "=", "mask_tensors", "(", "(", "fwd_pred", ",", "ang_pred", ",", "stop_pred", ",", "fwd_label", ",", "ang_label", ",", "stop_label", ")", ",", "mask", ")", "\n", "\n", "# Compute loss for each element in the batch", "\n", "", "fwd_loss", "=", "self", ".", "act_loss", "(", "fwd_pred", ",", "fwd_label", ")", "\n", "ang_loss", "=", "self", ".", "act_loss", "(", "ang_pred", ",", "ang_label", ")", "\n", "\n", "# Aggregate", "\n", "\n", "flagged_losses", "=", "{", "}", "\n", "\"\"\"\n        if flags is not None and None not in flags:\n            batch_size = fwd_pred.size(0)\n            seq_len = int(batch_size / len(flags))\n            real_batch_size = int(batch_size / seq_len)\n            for b in range(real_batch_size):\n                for s in range(seq_len):\n                    flag_loss = (0.2 * fwd_loss[b * seq_len + s] + 0.6 * ang_loss[b * seq_len + s]).data\n                    flagged_losses[flags[b]] = flag_loss.cpu().numpy()[0]\n        \"\"\"", "\n", "\n", "if", "batchreduce", ":", "\n", "# Reduce the losses manually", "\n", "            ", "fwd_loss", "=", "torch", ".", "sum", "(", "fwd_loss", ")", "\n", "ang_loss", "=", "torch", ".", "sum", "(", "ang_loss", ")", "\n", "\n", "# Stop loss is already reduced, because PyTorch at the time of writing didn't have a reduce arg for it.", "\n", "stop_loss", "=", "self", ".", "stoploss", "(", "stop_pred", ",", "stop_label", ")", "\n", "loss", "=", "torch", ".", "cat", "(", "[", "fwd_loss", ",", "ang_loss", ",", "stop_loss", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "stop_loss", "=", "torch", ".", "zeros_like", "(", "stop_pred", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "stop_pred", ")", ")", ":", "\n", "                ", "stop_loss", "[", "i", ":", "i", "+", "1", "]", "=", "self", ".", "stoploss", "(", "stop_pred", "[", "i", ":", "i", "+", "1", "]", ",", "stop_label", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "", "loss", "=", "torch", ".", "stack", "(", "[", "fwd_loss", ",", "ang_loss", ",", "stop_loss", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "reduce", ":", "\n", "            ", "loss", "=", "self", ".", "reduce_loss", "(", "loss", ")", "\n", "\n", "", "nans", "=", "loss", "!=", "loss", "\n", "if", "torch", ".", "sum", "(", "nans", ".", "long", "(", ")", ")", ".", "data", ".", "item", "(", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"WARNING: Nan's encountered in loss calculation\"", ")", "\n", "print", "(", "loss", ")", "\n", "loss", "[", "nans", "]", "=", "0", "\n", "return", "torch", ".", "zeros", "(", "list", "[", "loss", ".", "size", "(", ")", "]", ")", ".", "to", "(", "stop_pred", ".", "device", ")", "\n", "\n", "", "return", "loss", ",", "flagged_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.batch_reduce_loss": [[124, 127], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "batch_reduce_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss": [[128, 131], ["None"], "methods", ["None"], ["", "def", "reduce_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "total_loss", "=", "loss", "[", "0", "]", "*", "self", ".", "fwd_weight", "+", "loss", "[", "1", "]", "*", "self", ".", "ang_weight", "+", "loss", "[", "2", "]", "*", "self", ".", "stop_weight", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.write_summaries": [[132, 138], ["action_loss.ActionLoss.writer.add_scalar", "action_loss.ActionLoss.writer.add_scalar", "action_loss.ActionLoss.writer.add_scalar", "action_loss.ActionLoss.writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar"], ["", "def", "write_summaries", "(", "self", ",", "prefix", ",", "idx", ",", "loss", ",", "avg_loss", ")", ":", "\n", "        ", "full_prefix", "=", "self", ".", "model_name", "+", "\"/\"", "+", "prefix", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_loss\"", ",", "avg_loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_fwd_loss\"", ",", "loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_ang_loss\"", ",", "loss", ".", "data", "[", "1", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"action_stop_loss\"", ",", "loss", ".", "data", "[", "2", "]", ",", "idx", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.__init__": [[11, 22], ["learning.modules.cuda_module.CudaModule.__init__", "learning.models.semantic_map.map_affine.MapAffine"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_size", ",", "world_size", ")", ":", "\n", "        ", "super", "(", "MapTransformerBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "latest_maps", "=", "None", "\n", "self", ".", "latest_map_poses", "=", "None", "\n", "self", ".", "latest_map", "=", "None", "\n", "self", ".", "latest_map_pose", "=", "None", "\n", "\n", "self", ".", "map_affine", "=", "MapAffine", "(", "\n", "source_map_size", "=", "map_size", ",", "\n", "world_size_px", "=", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.init_weights": [[23, 25], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.reset": [[26, 31], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "latest_maps", "=", "None", "\n", "self", ".", "latest_map_poses", "=", "None", "\n", "self", ".", "latest_map", "=", "None", "\n", "self", ".", "latest_map_pose", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.cuda": [[32, 36], ["learning.modules.cuda_module.CudaModule.cuda", "map_transformer_fast.MapTransformerBase.map_affine.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "CudaModule", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "map_affine", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map": [[37, 54], ["map_transformer_fast.MapTransformerBase.get_maps", "maps.size", "maps.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps"], ["", "def", "get_map", "(", "self", ",", "cam_pose", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Return the latest map that's been accumulated.\n        :param cam_pose: The map will be oriented in the frame of reference of cam_pose before returning\n        :return:\n        \"\"\"", "\n", "\"\"\"\n        if not self.latest_map_pose == cam_pose:\n            map_in_current_frame = self.map_affine(self.latest_map, self.latest_map_pose, cam_pose)\n            if show != \"\":\n                Presenter().show_image(map_in_current_frame.data[0, 0:3], show, torch=True, scale=8, waitkey=20)\n            return map_in_current_frame, cam_pose\n        else:\n            return self.latest_map, self.latest_map_pose\n        \"\"\"", "\n", "maps", ",", "poses", "=", "self", ".", "get_maps", "(", "[", "cam_pose", "]", ")", "\n", "return", "maps", "[", "maps", ".", "size", "(", "0", ")", "-", "1", ":", "maps", ".", "size", "(", "0", ")", "]", ",", "poses", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps": [[55, 72], ["map_transformer_fast.MapTransformerBase.map_affine"], "methods", ["None"], ["", "def", "get_maps", "(", "self", ",", "cam_poses", ")", ":", "\n", "        ", "\"\"\"\n        Return the latest sequence of maps that's been stored.\n        :param cam_poses: Each map in the batch will be oriented in the frame of reference of cam_pose_i before returning\n        :return:\n        \"\"\"", "\n", "#maps = []", "\n", "## TODO: Add proper batch support to map_affine", "\n", "#for i, cam_pose in enumerate(cam_poses):", "\n", "#    if cam_pose == self.latest_map_poses[i]:", "\n", "#        maps.append(self.latest_maps[i])", "\n", "#    else:", "\n", "#        map_i_in_pose_i = self.map_affine(self.latest_maps[i:i+1], self.latest_map_poses[i:i+1], cam_pose)", "\n", "#        maps.append(map_i_in_pose_i)", "\n", "\n", "maps", "=", "self", ".", "map_affine", "(", "self", ".", "latest_maps", ",", "self", ".", "latest_map_poses", ",", "cam_poses", ")", "\n", "return", "maps", ",", "cam_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map": [[73, 76], ["None"], "methods", ["None"], ["", "def", "set_map", "(", "self", ",", "map", ",", "pose", ")", ":", "\n", "        ", "self", ".", "latest_maps", "=", "map", "\n", "self", ".", "latest_map_poses", "=", "[", "pose", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps": [[77, 80], ["None"], "methods", ["None"], ["", "def", "set_maps", "(", "self", ",", "maps", ",", "poses", ")", ":", "\n", "        ", "self", ".", "latest_maps", "=", "maps", "\n", "self", ".", "latest_map_poses", "=", "poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.goal_pred_criterion.GoalPredictionGoodCriterion.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "ok_distance", "=", "3.2", ")", ":", "\n", "        ", "super", "(", "GoalPredictionGoodCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ok_distance", "=", "ok_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.goal_pred_criterion.GoalPredictionGoodCriterion.forward": [[19, 39], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "goal_mask.view", "goal_mask.view.max", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat().double", "torch.cat.size", "torch.cat.size", "goal_mask.size", "goal_mask.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "argmax_loc_x.unsqueeze", "torch.remainder.unsqueeze", "torch.remainder.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "masks", ",", "goal_pos", ")", ":", "\n", "\n", "        ", "masks", "=", "torch", ".", "cat", "(", "[", "m", ".", "inner_distribution", "for", "m", "in", "masks", "]", ",", "dim", "=", "0", ")", "\n", "\n", "if", "masks", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "            ", "return", "False", "\n", "\n", "# TODO: Handle batches if necessary", "\n", "", "goal_mask", "=", "masks", "[", "0", ",", "1", ",", ":", ",", ":", "]", "\n", "goal_pos", "=", "goal_pos", "[", "0", "]", "\n", "goal_mask_flat", "=", "goal_mask", ".", "view", "(", "[", "1", ",", "-", "1", "]", ")", "\n", "max_val", ",", "argmax", "=", "goal_mask_flat", ".", "max", "(", "1", ")", "\n", "argmax_loc_x", "=", "argmax", "/", "goal_mask", ".", "size", "(", "1", ")", "\n", "argmax_loc_y", "=", "torch", ".", "remainder", "(", "argmax", ",", "goal_mask", ".", "size", "(", "1", ")", ")", "\n", "argmax_loc", "=", "torch", ".", "cat", "(", "[", "argmax_loc_x", ".", "unsqueeze", "(", "1", ")", ",", "argmax_loc_y", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", ".", "double", "(", ")", "\n", "\n", "dist", "=", "(", "argmax_loc", "-", "goal_pos", ")", ".", "float", "(", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "success", "=", "dist", "<", "self", ".", "ok_distance", "\n", "\n", "return", "success", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.__init__": [[5, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AuxiliaryLosses", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aux_keys", "=", "[", "]", "\n", "self", ".", "auxiliaries", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.cuda": [[10, 14], ["torch.Module.cuda", "auxiliary_losses.AuxiliaryLosses.auxiliaries.items", "aux.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "cuda", "(", "self", ",", "device", ")", "\n", "for", "key", ",", "aux", "in", "self", ".", "auxiliaries", ".", "items", "(", ")", ":", "\n", "            ", "aux", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to": [[15, 19], ["torch.Module.to", "auxiliary_losses.AuxiliaryLosses.auxiliaries.items", "aux.to"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "to", "(", "self", ",", "device", ")", "\n", "for", "key", ",", "aux", "in", "self", ".", "auxiliaries", ".", "items", "(", ")", ":", "\n", "            ", "aux", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required": [[20, 25], ["auxiliary_losses.AuxiliaryLosses.auxiliaries.items", "aux.get_required_inputs"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_objective_base.AuxiliaryObjective.get_required_inputs"], ["", "", "def", "input_required", "(", "self", ",", "input_name", ")", ":", "\n", "        ", "for", "aux_key", ",", "aux", "in", "self", ".", "auxiliaries", ".", "items", "(", ")", ":", "\n", "            ", "if", "input_name", "in", "aux", ".", "get_required_inputs", "(", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary": [[26, 38], ["auxiliary_losses.AuxiliaryLosses.add_module", "auxiliary_losses.AuxiliaryLosses.aux_keys.append", "auxiliary_objective.get_name"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_objective_base.AuxiliaryObjective.get_name"], ["", "def", "add_auxiliary", "(", "self", ",", "auxiliary_objective", ",", "key", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Adds an auxiliary objective, which is a subclass of auxiliary_objective_base\n        :param auxiliary_objective:\n        :param key:\n        :return:\n        \"\"\"", "\n", "if", "key", "is", "None", ":", "\n", "            ", "key", "=", "auxiliary_objective", ".", "get_name", "(", ")", "\n", "", "self", ".", "auxiliaries", "[", "key", "]", "=", "auxiliary_objective", "\n", "self", ".", "add_module", "(", "key", ",", "auxiliary_objective", ")", "\n", "self", ".", "aux_keys", ".", "append", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info": [[39, 43], ["print", "print"], "methods", ["None"], ["", "def", "print_auxiliary_info", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Using auxiliary objectives:\"", ")", "\n", "for", "key", "in", "self", ".", "auxiliaries", ":", "\n", "            ", "print", "(", "\"       - \"", "+", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss": [[44, 115], ["set", "auxiliary_losses.AuxiliaryLosses.auxiliaries[].get_required_inputs", "utils.dict_tools.dict_cross_map", "utils.dict_tools.dict_cross_map", "print", "enumerate", "len", "metrics.items", "metrics.items", "input_list.append", "input_list.append", "print", "len", "ValueError", "tensor_store.get", "print", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_objective_base.AuxiliaryObjective.get_required_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_cross_map", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_cross_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "", "def", "calculate_aux_loss", "(", "self", ",", "tensor_store", ",", "reduce_average", "=", "False", ",", "disable_losses", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates all auxiliary objectives, taking their inputs from the kept inputs (from keep_input calls)\n        Returns their losses in a dictionary\n        :param targets: Dict, where keys are auxiliary names and values are lists of labels.\n            For each auxiliary, the number of labels provided must match the total number of inputs previously stored\n            If a given auxiliary doesn't require a target value, then it's key can be omitted\n        :return: Dict, where keys are auxiliary names and values are Variables with the total loss value\n        \"\"\"", "\n", "loss_dict", "=", "{", "}", "\n", "count_dict", "=", "{", "}", "\n", "metric_dict", "=", "{", "}", "\n", "metric_count_dict", "=", "{", "}", "\n", "\n", "disable_losses", "=", "set", "(", "disable_losses", ")", "\n", "for", "module_name", "in", "self", ".", "aux_keys", ":", "\n", "# Skip those losses that have been requested to be disabled", "\n", "            ", "if", "module_name", "in", "disable_losses", ":", "\n", "#print(\"Skipping loss: \", module_name)", "\n", "                ", "continue", "\n", "", "input_names", "=", "self", ".", "auxiliaries", "[", "module_name", "]", ".", "get_required_inputs", "(", ")", "\n", "input_list", "=", "[", "]", "\n", "for", "input_name", "in", "input_names", ":", "\n", "                ", "if", "input_name", "==", "\"tensor_store\"", ":", "\n", "                    ", "input_list", ".", "append", "(", "tensor_store", ")", "\n", "", "else", ":", "\n", "                    ", "input_list", ".", "append", "(", "tensor_store", ".", "get", "(", "input_name", ")", ")", "\n", "#input_list = list(zip(*input_list))", "\n", "# Input list is a list of lists, where outer list is over timesteps and inner list is over inputs to the auxiliary", "\n", "\n", "", "", "if", "None", "in", "input_list", ":", "\n", "                ", "print", "(", "f\"Skipping aux objective: {module_name} due to missing inputs\"", ")", "\n", "for", "j", ",", "inp", "in", "enumerate", "(", "input_list", ")", ":", "\n", "                    ", "if", "inp", "is", "None", ":", "\n", "                        ", "print", "(", "f\"   {input_names[j]}\"", ")", "\n", "", "", "continue", "\n", "\n", "", "try", ":", "\n", "                ", "ret_vals", "=", "self", ".", "auxiliaries", "[", "module_name", "]", "(", "*", "input_list", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "f\"Exception encountered when calling auxiliary objective {module_name}\"", ")", "\n", "raise", "e", "\n", "", "if", "len", "(", "ret_vals", ")", "==", "2", ":", "\n", "                ", "loss", ",", "count", "=", "ret_vals", "\n", "metrics", "=", "{", "}", "\n", "", "elif", "len", "(", "ret_vals", ")", "==", "3", ":", "\n", "                ", "loss", ",", "metrics", ",", "count", "=", "ret_vals", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Auxiliary objective returned {len(ret_vals)} arguments. Expected 2 or 3.\"", ")", "\n", "", "if", "loss", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "module_name", "in", "loss_dict", ":", "\n", "                ", "loss_dict", "[", "module_name", "]", "+=", "loss", "\n", "count_dict", "[", "module_name", "]", "+=", "count", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "metric_dict", "[", "f\"{module_name}/{k}\"", "]", "+=", "v", "\n", "metric_count_dict", "[", "f\"{module_name}/{k}\"", "]", "+=", "count", "\n", "", "", "else", ":", "\n", "                ", "loss_dict", "[", "module_name", "]", "=", "loss", "\n", "count_dict", "[", "module_name", "]", "=", "count", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "metric_dict", "[", "f\"{module_name}/{k}\"", "]", "=", "v", "\n", "metric_count_dict", "[", "f\"{module_name}/{k}\"", "]", "=", "count", "\n", "\n", "", "", "", "if", "reduce_average", ":", "\n", "            ", "avg_loss_dict", "=", "dict_cross_map", "(", "loss_dict", ",", "count_dict", ",", "lambda", "a", ",", "b", ":", "a", "/", "(", "b", "+", "1e-9", ")", ")", "\n", "avg_metric_dict", "=", "dict_cross_map", "(", "metric_dict", ",", "metric_count_dict", ",", "lambda", "a", ",", "b", ":", "a", "/", "(", "b", "+", "1e-9", ")", ")", "\n", "return", "avg_loss_dict", ",", "avg_metric_dict", "\n", "", "else", ":", "\n", "            ", "return", "loss_dict", ",", "metric_dict", ",", "count_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.combine_losses": [[116, 140], ["Exception", "str"], "methods", ["None"], ["", "", "def", "combine_losses", "(", "self", ",", "aux_losses", ",", "loss_weights", ")", ":", "\n", "        ", "\"\"\"\n        Takes a dictionary of auxiliary losses and a dictionary of associated weights, where weights and losses\n        are identified by the keys of the auxiliary objectives from which they came from.\n        Outputs a single loss value, which is a convex combination of auxiliary losses with the given weights\n        :param aux_losses:\n        :param loss_weights:\n        :return:\n        \"\"\"", "\n", "total_loss", "=", "None", "\n", "for", "key", "in", "aux_losses", ":", "\n", "            ", "weight", "=", "1", "\n", "if", "key", "in", "loss_weights", ":", "\n", "                ", "weight", "=", "loss_weights", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Auxiliary weight not defined for \"", "+", "str", "(", "key", ")", ")", "\n", "", "this_loss", "=", "aux_losses", "[", "key", "]", "*", "weight", "\n", "if", "total_loss", "is", "None", ":", "\n", "                ", "total_loss", "=", "this_loss", "\n", "", "else", ":", "\n", "                ", "total_loss", "+=", "this_loss", "\n", "", "", "if", "total_loss", "is", "None", ":", "\n", "            ", "return", "0", "\n", "", "return", "total_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.gradient_noise.GradientNoise.__init__": [[7, 9], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GradientNoise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.gradient_noise.GradientNoise.forward": [[10, 13], ["x.register_hook"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ".", "register_hook", "(", "self", ".", "backward_hook", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.modules.gradient_noise.GradientNoise.backward_hook": [[14, 28], ["grad_input.view().mean", "torch.randn().to", "grad_input.view", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "backward_hook", "(", "self", ",", "grad_input", ")", ":", "\n", "# grad_input has shape Bx2x64x64", "\n", "        ", "batch_size", "=", "grad_input", ".", "shape", "[", "0", "]", "\n", "\n", "# Should we scale per-dimension?", "\n", "mean_grad", "=", "grad_input", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "sigma", "=", "0.5", "*", "mean_grad", "\n", "standard_normal_noise", "=", "torch", ".", "randn", "(", "grad_input", ".", "shape", ")", ".", "to", "(", "grad_input", ".", "device", ")", "\n", "#print(\"GRADBACK: \", standard_normal_noise.shape, grad_input.shape, sigma.shape)", "\n", "\n", "noise", "=", "standard_normal_noise", "*", "sigma", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "\n", "noisy_grad_input", "=", "grad_input", "+", "noise", "\n", "return", "noisy_grad_input", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.downsample_map.downsample_res.DownsampleResidual.__init__": [[15, 31], ["super().__init__", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "channels", "=", "32", ",", "factor", "=", "4", ")", ":", "\n", "        ", "super", "(", "DownsampleResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad", "=", "1", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "channels", "=", "channels", "\n", "\n", "if", "factor", ">=", "2", ":", "\n", "            ", "self", ".", "res2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "pad", ",", "nonorm", "=", "False", ")", "\n", "", "if", "factor", ">=", "4", ":", "\n", "            ", "self", ".", "res4", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "pad", ",", "nonorm", "=", "False", ")", "\n", "", "if", "factor", ">=", "8", ":", "\n", "            ", "self", ".", "res8", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "pad", ",", "nonorm", "=", "False", ")", "\n", "", "if", "factor", ">=", "16", ":", "\n", "            ", "self", ".", "res16", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "pad", ",", "nonorm", "=", "False", ")", "\n", "\n", "", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.downsample_map.downsample_res.DownsampleResidual.init_weights": [[32, 41], ["downsample_res.DownsampleResidual.res2.init_weights", "downsample_res.DownsampleResidual.res4.init_weights", "downsample_res.DownsampleResidual.res8.init_weights", "downsample_res.DownsampleResidual.res16.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "factor", ">=", "2", ":", "\n", "            ", "self", ".", "res2", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "factor", ">=", "4", ":", "\n", "            ", "self", ".", "res4", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "factor", ">=", "8", ":", "\n", "            ", "self", ".", "res8", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "factor", ">=", "16", ":", "\n", "            ", "self", ".", "res16", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.downsample_map.downsample_res.DownsampleResidual.forward": [[42, 53], ["downsample_res.DownsampleResidual.res2", "downsample_res.DownsampleResidual.res4", "downsample_res.DownsampleResidual.res8", "downsample_res.DownsampleResidual.res16"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "x", "=", "image", "\n", "if", "self", ".", "factor", ">=", "2", ":", "\n", "            ", "x", "=", "self", ".", "res2", "(", "x", ")", "\n", "", "if", "self", ".", "factor", ">=", "4", ":", "\n", "            ", "x", "=", "self", ".", "res4", "(", "x", ")", "\n", "", "if", "self", ".", "factor", ">=", "8", ":", "\n", "            ", "x", "=", "self", ".", "res8", "(", "x", ")", "\n", "", "if", "self", ".", "factor", ">=", "16", ":", "\n", "            ", "x", "=", "self", ".", "res16", "(", "x", ")", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D.__init__": [[19, 32], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.__init__", "learning.modules.gather_2d.Gather2D", "torch.nn.Dropout", "torch.nn.Linear", "data_io.weights.enable_weight_saving", "torch.nn.CrossEntropyLoss", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "feature_vec_len", "=", "32", ",", "num_classes", "=", "64", ",", "dropout", "=", "0", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "ClassAuxiliary2D", ",", "self", ")", ".", "__init__", "(", "name", ",", "*", "inputs", ")", "\n", "self", ".", "gather_2d", "=", "Gather2D", "(", ")", "\n", "self", ".", "channels_in", "=", "feature_vec_len", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "cls_linear", "=", "nn", ".", "Linear", "(", "feature_vec_len", ",", "num_classes", ")", "\n", "enable_weight_saving", "(", "self", ".", "cls_linear", ",", "\"aux_class_linear_2d_\"", "+", "name", ")", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "name", "==", "\"aux_grounding_map\"", ":", "\n", "            ", "self", ".", "loss", ".", "weight", "=", "torch", ".", "tensor", "(", "[", "0.5", ",", "0.5", "]", ")", "\n", "", "self", ".", "meter_accuracy", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D.cuda": [[33, 36], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "AuxiliaryObjective", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D.plot_pts": [[37, 51], ["image.transpose.transpose.cpu().data.numpy", "image.transpose.transpose.transpose", "pts.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "visualization.Presenter().show_image", "visualization.Presenter", "image.transpose.transpose.cpu", "pts.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "plot_pts", "(", "self", ",", "image", ",", "pts", ")", ":", "\n", "        ", "\"\"\"\n        :param image: CxHxW image\n        :param pts: Nx2 points - (H,W) coords in the image\n        :return:\n        \"\"\"", "\n", "image", "=", "image", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "pts", "=", "pts", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "image", "[", ":", ",", ":", ",", "0", "]", "=", "0.0", "\n", "for", "pt", "in", "pts", ":", "\n", "            ", "image", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "0", "]", "=", "1.0", "\n", "\n", "", "Presenter", "(", ")", ".", "show_image", "(", "image", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "f\"aux_class_2d:{self.name}\"", ",", "torch", "=", "False", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D.forward": [[52, 128], ["len", "class_auxiliary_2d.ClassAuxiliary2D.dropout", "class_auxiliary_2d.ClassAuxiliary2D.cls_linear().permute", "range", "class_auxiliary_2d.ClassAuxiliary2D.meter_accuracy.get", "type", "torch.cat", "torch.cat.size", "tensor_store.keep_inputs", "class_auxiliary_2d.ClassAuxiliary2D.gather_2d", "class_auxiliary_2d.ClassAuxiliary2D.loss", "torch.max", "torch.sum", "float", "class_auxiliary_2d.ClassAuxiliary2D.meter_accuracy.put", "class_auxiliary_2d.ClassAuxiliary2D.cls_linear", "class_auxiliary_2d.ClassAuxiliary2D.plot_pts", "len", "labels.unsqueeze.unsqueeze.unsqueeze", "len", "torch.cat.permute"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.goal_auxiliary.GoalAuxiliary2D.plot_pts"], ["", "def", "forward", "(", "self", ",", "images", ",", "lm_pos_list_px", ",", "lm_indices_list", ",", "tensor_store", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param images:\n        :param lm_pos_list_px:\n        :param lm_indices_list:\n        :param tensor_store: KeyTensorStore where to store computed predictions for visualization and stuff\n        :return:\n        \"\"\"", "\n", "\n", "batch_size", "=", "len", "(", "images", ")", "\n", "\n", "if", "type", "(", "images", ")", "==", "list", ":", "\n", "            ", "images", "=", "torch", ".", "cat", "(", "images", ",", "dim", "=", "0", ")", "\n", "\n", "", "images", "=", "self", ".", "dropout", "(", "images", ")", "\n", "\n", "# Take the first N channels if we have more channels available than necessary", "\n", "if", "images", ".", "size", "(", "1", ")", ">", "self", ".", "channels_in", ":", "\n", "            ", "images", "=", "images", "[", ":", ",", "0", ":", "self", ".", "channels_in", ",", ":", ",", ":", "]", "\n", "\n", "", "loss_out", "=", "None", "\n", "accuracy", "=", "0", "\n", "\n", "# Move the channel dimension to the back to apply the linear layer, and then back forward to the channel slot", "\n", "all_predictions", "=", "self", ".", "cls_linear", "(", "images", ".", "permute", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "            ", "tensor_store", ".", "keep_inputs", "(", "f\"{self.name}_predictions\"", ",", "all_predictions", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# Apply the 2D gather to get a batch of feature vectors extracted at the landmark positions", "\n", "            ", "pred_i", "=", "all_predictions", "[", "i", ":", "i", "+", "1", "]", "\n", "lm_pos_i", "=", "lm_pos_list_px", "[", "i", "]", "\n", "if", "lm_pos_i", "is", "None", ":", "\n", "                ", "break", "\n", "\n", "# TODO: Very careful! This one flips the lm_pos_i axis and does a conversion", "\n", "#if self.world_size_px is not None:", "\n", "#    lm_pos_i = pos_m_to_px(lm_pos_i, self.world_size_px).long().unsqueeze(0)", "\n", "", "predictions", "=", "self", ".", "gather_2d", "(", "pred_i", ",", "lm_pos_i", ")", "\n", "\n", "if", "DBG", "and", "i", "==", "batch_size", "-", "1", ":", "\n", "                ", "if", "pred_i", ".", "shape", "[", "3", "]", ">", "32", ":", "\n", "                    ", "plot_pred", "=", "pred_i", "[", "0", ",", "[", "0", ",", "3", ",", "24", "]", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "plot_pred", "=", "pred_i", "[", "0", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "", "self", ".", "plot_pts", "(", "plot_pred", ",", "lm_pos_i", "[", "0", ":", "1", "]", ")", "\n", "\n", "#predictions = self.cls_linear(feature_vectors)", "\n", "", "labels", "=", "lm_indices_list", "[", "i", "]", "\n", "if", "len", "(", "labels", ".", "shape", ")", "==", "0", ":", "\n", "                ", "labels", "=", "labels", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# The batch here is over the landmarks visible in the image", "\n", "", "loss", "=", "self", ".", "loss", "(", "predictions", ",", "labels", ")", "\n", "if", "loss_out", "is", "None", ":", "\n", "                ", "loss_out", "=", "loss", "\n", "", "else", ":", "\n", "                ", "loss_out", "+=", "loss", "\n", "\n", "", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "predictions", ".", "data", ",", "1", ")", "\n", "correct", "=", "torch", ".", "sum", "(", "(", "pred_idx", "==", "labels", ".", "data", ")", ".", "float", "(", ")", ")", "\n", "total", "=", "float", "(", "len", "(", "labels", ")", ")", "\n", "accuracy", "=", "(", "correct", "/", "total", ")", "\n", "\n", "self", ".", "meter_accuracy", ".", "put", "(", "accuracy", ")", "\n", "\n", "#", "\n", "", "if", "loss_out", "is", "None", ":", "\n", "            ", "loss_out", "=", "0", "\n", "#else:", "\n", "#    loss_out /= batch_size", "\n", "", "acc", "=", "self", ".", "meter_accuracy", ".", "get", "(", ")", "\n", "# This acc * batch_size is a hack to get around auxiliary_losses later dividing by batch_size", "\n", "return", "loss_out", ",", "{", "\"accuracy\"", ":", "acc", "*", "batch_size", "}", ",", "batch_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D.__init__": [[16, 19], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "kind", "=", "\"l1\"", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "FeatureRegularizationAuxiliary2D", ",", "self", ")", ".", "__init__", "(", "name", ",", "*", "inputs", ")", "\n", "self", ".", "kind", "=", "kind", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D.cuda": [[20, 23], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "AuxiliaryObjective", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D.forward": [[24, 29], ["torch.cat", "torch.abs", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "torch", ".", "cat", "(", "images", ",", "dim", "=", "0", ")", "\n", "images_abv", "=", "torch", ".", "abs", "(", "images", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "images_abv", ")", "\n", "return", "loss", ",", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.path_auxiliary.PathAuxiliary2D.__init__": [[17, 28], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.__init__", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "torch.nn.LogSoftmax", "learning.modules.visitation_softmax.VisitationSoftmax", "learning.modules.crossentropy2d.CrossEntropy2d", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "lossfunc", ",", "clip_observability", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "PathAuxiliary2D", ",", "self", ")", ".", "__init__", "(", "name", ",", "*", "inputs", ")", "\n", "if", "lossfunc", "==", "\"crossentropy\"", ":", "\n", "            ", "self", ".", "loss", "=", "CrossEntropy2d", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "self", ".", "clip_observability", "=", "clip_observability", "\n", "self", ".", "lossfunc", "=", "lossfunc", "\n", "self", ".", "goal_location_criterion", "=", "GoalPredictionGoodCriterion", "(", ")", "\n", "self", ".", "logsoftmax1d", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "visit_softmax", "=", "VisitationSoftmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.path_auxiliary.PathAuxiliary2D.cuda": [[30, 35], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.cuda", "path_auxiliary.PathAuxiliary2D.logsoftmax1d.cuda", "path_auxiliary.PathAuxiliary2D.loss.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "AuxiliaryObjective", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "logsoftmax1d", ".", "cuda", "(", ")", "\n", "self", ".", "loss", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.path_auxiliary.PathAuxiliary2D.forward": [[36, 153], ["torch.cat", "torch.cat", "v_dist_labels[].view().sum", "v_dist_labels[].view().sum", "v_dist_labels[].view().sum", "v_dist_labels[].view().sum", "torch.cat.get_full_flat_distribution", "v_dist_labels[].view", "torch.cat", "v_dist_labels[].view", "torch.cat", "path_auxiliary.PathAuxiliary2D.logsoftmax1d", "path_auxiliary.PathAuxiliary2D.logsoftmax1d", "xg.sum.sum.sum", "xv.sum.sum.sum", "torch.mean", "torch.mean", "torch.exp", "goal_insideness_correct.sum", "gt_goal_inside.sum().float", "gt_goal_outside.sum().float", "torch.cat", "torch.cat", "path_auxiliary.PathAuxiliary2D.loss", "range", "len", "goal_inside_recall.detach().item", "goal_outside_recall.detach().item", "learning.meters_and_metrics.goal_map_success_rate.goal_map_success_rate", "torch.cat.size", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "v_dist_labels[].view", "v_dist_labels[].view().sum.view", "v_dist_labels[].view", "v_dist_labels[].view().sum.view", "v_dist_labels[].view", "v_dist_labels[].view", "gt_goal_inside.sum", "gt_goal_outside.sum", "goal_inside_recall.detach", "goal_outside_recall.detach", "gt_goal_inside.byte", "gt_goal_inside.byte", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.get_full_flat_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.goal_map_success_rate.goal_map_success_rate", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "forward", "(", "self", ",", "v_dist_pred", ",", "v_dist_labels", ",", "obs_masks", ")", ":", "\n", "\n", "# TODO: Simplify this shit", "\n", "        ", "if", "self", ".", "clip_observability", ":", "\n", "            ", "v_dist_labels", "=", "torch", ".", "cat", "(", "v_dist_labels", ",", "dim", "=", "0", ")", "\n", "# It's a list of Partial2DDistribution, but actually the list should only have 1 element for the entire batch / sequence", "\n", "assert", "len", "(", "v_dist_pred", ")", "==", "1", "\n", "v_dist_pred", "=", "v_dist_pred", "[", "0", "]", "\n", "\n", "batch_size", "=", "v_dist_labels", ".", "shape", "[", "0", "]", "\n", "obs_masks", "=", "torch", ".", "cat", "(", "obs_masks", ",", "dim", "=", "0", ")", "\n", "\n", "# TODO: Merge this piece of code with the one used to clip these distributions for Stage2 training", "\n", "# Renormalize goal distribution BEFORE clipping it", "\n", "sum_g_ps", "=", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "1", ")", "\n", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", "/", "(", "sum_g_ps", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", "+", "1e-10", ")", "\n", "# Renormalize visitation distributions BEFORE clipping", "\n", "sum_v_ps", "=", "v_dist_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "1", ")", "\n", "v_dist_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "v_dist_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "(", "sum_v_ps", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", "+", "1e-10", ")", "\n", "\n", "# Clip the visitation labels according to observability masks", "\n", "v_dist_labels", "=", "v_dist_labels", "*", "obs_masks", "\n", "\n", "# Goal distributions should not be renormalized - the remaining probability should be distributed to the oob pixel", "\n", "gt_prob_goal_inside", "=", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "1", ")", "\n", "gt_prob_visit_inside", "=", "v_dist_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "1", ")", "\n", "gt_prob_goal_outside", "=", "1", "-", "gt_prob_goal_inside", "\n", "gt_prob_visit_outside", "=", "1", "-", "gt_prob_visit_inside", "\n", "\n", "# ------------------------------------------------------", "\n", "# Calculate goal layer loss", "\n", "# Concatenate oob_pred to pred and oob_label to label", "\n", "\n", "flat_distributions", "=", "v_dist_pred", ".", "get_full_flat_distribution", "(", ")", "\n", "goal_labels_flat", "=", "v_dist_labels", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "goal_labels_full", "=", "torch", ".", "cat", "(", "[", "goal_labels_flat", ",", "gt_prob_goal_outside", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "dim", "=", "1", ")", "\n", "visit_labels_flat", "=", "v_dist_labels", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "visit_labels_full", "=", "torch", ".", "cat", "(", "[", "visit_labels_flat", ",", "gt_prob_visit_outside", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "pred_visit_logsoftmax_scores", "=", "self", ".", "logsoftmax1d", "(", "flat_distributions", "[", ":", ",", "0", "]", ")", "\n", "pred_goal_logsoftmax_scores", "=", "self", ".", "logsoftmax1d", "(", "flat_distributions", "[", ":", ",", "1", "]", ")", "\n", "\n", "# Calculate losses", "\n", "xg", "=", "-", "goal_labels_full", "*", "pred_goal_logsoftmax_scores", "\n", "xv", "=", "-", "visit_labels_full", "*", "pred_visit_logsoftmax_scores", "\n", "# Sum over spatial dimensions:", "\n", "xg", "=", "xg", ".", "sum", "(", "1", ")", "\n", "xv", "=", "xv", ".", "sum", "(", "1", ")", "\n", "# Average over channels and batches", "\n", "goal_loss", "=", "torch", ".", "mean", "(", "xg", ")", "\n", "visit_loss", "=", "torch", ".", "mean", "(", "xv", ")", "\n", "\n", "# ------------------------------------------------------", "\n", "#goal_loss = self.loss(v_dist_pred[:, 1:2, :, :], v_dist_labels[:, 1:2, :, :], goal_not_in_map_score_preds, prob_goal_not_in_map_labels)", "\n", "\n", "loss", "=", "visit_loss", "+", "goal_loss", "\n", "\n", "# We're done! Calculating metrics now...", "\n", "# ------------------------------------------------------", "\n", "\n", "metrics", "=", "{", "}", "\n", "pred_probs_flat", "=", "torch", ".", "exp", "(", "pred_goal_logsoftmax_scores", ")", "\n", "pred_prob_goal_outside", "=", "pred_probs_flat", "[", ":", ",", "-", "1", "]", "\n", "pred_prob_goal_inside", "=", "1", "-", "pred_prob_goal_outside", "\n", "pred_goal_inside", "=", "(", "pred_prob_goal_inside", ">", "0.5", ")", ".", "long", "(", ")", "\n", "\n", "gt_goal_inside", "=", "(", "gt_prob_goal_inside", ">", "0.5", ")", ".", "long", "(", ")", "\n", "gt_goal_outside", "=", "(", "1", "-", "gt_goal_inside", ")", "\n", "\n", "# Inside/Outside accuracy", "\n", "goal_insideness_correct", "=", "(", "pred_goal_inside", "==", "gt_goal_inside", ")", ".", "long", "(", ")", "\n", "num_goal_insideness_correct", "=", "goal_insideness_correct", ".", "sum", "(", ")", "\n", "goal_inside_accuracy", "=", "num_goal_insideness_correct", "/", "(", "batch_size", "+", "1e-9", ")", "\n", "metrics", "[", "\"goal_inside_outside_accuracy\"", "]", "=", "goal_inside_accuracy", "\n", "\n", "# Inside recall", "\n", "goal_inside_recalled", "=", "(", "goal_insideness_correct", "*", "gt_goal_inside", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "goal_inside_total", "=", "(", "gt_goal_inside", ".", "sum", "(", ")", ")", ".", "float", "(", ")", "\n", "goal_inside_recall", "=", "goal_inside_recalled", "/", "(", "goal_inside_total", "+", "1e-9", ")", "\n", "if", "goal_inside_recall", ".", "detach", "(", ")", ".", "item", "(", ")", ">", "1e-9", ":", "\n", "                ", "metrics", "[", "\"goal_inside_recall\"", "]", "=", "goal_inside_recall", "\n", "\n", "# Outside recall", "\n", "", "goal_outside_recalled", "=", "(", "goal_insideness_correct", "*", "gt_goal_outside", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "goal_outside_total", "=", "(", "gt_goal_outside", ".", "sum", "(", ")", ")", ".", "float", "(", ")", "\n", "goal_outside_recall", "=", "goal_outside_recalled", "/", "(", "goal_outside_total", "+", "1e-9", ")", "\n", "if", "goal_outside_recall", ".", "detach", "(", ")", ".", "item", "(", ")", ">", "1e-9", ":", "\n", "                ", "metrics", "[", "\"goal_outside_recall\"", "]", "=", "goal_outside_recall", "\n", "\n", "# Location success rate given ground truth goal is inside", "\n", "", "pred_goal_maps_where_goal_is_inside", "=", "v_dist_pred", ".", "inner_distribution", "[", "gt_goal_inside", ".", "byte", "(", ")", ",", "1", ",", ":", ",", ":", "]", "\n", "gt_goal_maps_where_goal_is_inside", "=", "v_dist_labels", "[", "gt_goal_inside", ".", "byte", "(", ")", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "if", "gt_goal_maps_where_goal_is_inside", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "goal_success_rate", "=", "goal_map_success_rate", "(", "pred_goal_maps_where_goal_is_inside", ",", "gt_goal_maps_where_goal_is_inside", ")", "\n", "metrics", "[", "\"goal_success_rate_when_goal_inside\"", "]", "=", "goal_success_rate", "\n", "metrics", "[", "\"goal_inside\"", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "metrics", "[", "\"goal_inside\"", "]", "=", "0", "\n", "\n", "", "count", "=", "1", "\n", "", "else", ":", "\n", "# TODO: Deal with these being Partial2DDistributions", "\n", "            ", "v_dist_pred", "=", "torch", ".", "cat", "(", "[", "v", ".", "inner_distribution", "for", "v", "in", "v_dist_pred", "]", ",", "dim", "=", "0", ")", "\n", "v_dist_labels", "=", "torch", ".", "cat", "(", "v_dist_labels", ",", "dim", "=", "0", ")", "\n", "loss", "=", "self", ".", "loss", "(", "v_dist_pred", ",", "v_dist_labels", ")", "\n", "metrics", "=", "{", "}", "\n", "count", "=", "1", "\n", "\n", "", "global", "pa2d_count", "\n", "if", "DBG", "and", "pa2d_count", "%", "10", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "v_dist_pred", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "v_dist_pred", ".", "data", "[", "i", ",", "0", "]", ",", "\"aux_path_pred\"", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "v_dist_labels", ".", "data", "[", "i", ",", "0", "]", ",", "\"aux_path_label\"", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "", "", "pa2d_count", "+=", "1", "\n", "\n", "return", "loss", ",", "metrics", ",", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.goal_auxiliary.GoalAuxiliary2D.__init__": [[20, 30], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.__init__", "learning.modules.gather_2d.Gather2D", "torch.nn.Linear", "data_io.weights.enable_weight_saving", "torch.nn.CrossEntropyLoss", "learning.meters_and_metrics.moving_average.MovingAverageMeter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "channels_in", "=", "32", ",", "map_size_px", "=", "32", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "GoalAuxiliary2D", ",", "self", ")", ".", "__init__", "(", "name", ",", "*", "inputs", ")", "\n", "self", ".", "gather_2d", "=", "Gather2D", "(", ")", "\n", "\n", "self", ".", "map_size_px", "=", "map_size_px", "\n", "self", ".", "channels_in", "=", "channels_in", "\n", "self", ".", "goal_linear", "=", "nn", ".", "Linear", "(", "channels_in", ",", "2", ")", "\n", "enable_weight_saving", "(", "self", ".", "goal_linear", ",", "\"aux_goal_linear_\"", "+", "name", ")", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "accuracy_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.goal_auxiliary.GoalAuxiliary2D.cuda": [[31, 34], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "AuxiliaryObjective", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.goal_auxiliary.GoalAuxiliary2D.plot_pts": [[35, 49], ["image.transpose.transpose.cpu().data.numpy", "image.transpose.transpose.transpose", "pts.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "visualization.Presenter().show_image", "visualization.Presenter", "image.transpose.transpose.cpu", "pts.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "plot_pts", "(", "self", ",", "image", ",", "pts", ")", ":", "\n", "        ", "\"\"\"\n        :param image: CxHxW image\n        :param pts: Nx2 points - (H,W) coords in the image\n        :return:\n        \"\"\"", "\n", "image", "=", "image", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "pts", "=", "pts", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "image", "[", ":", ",", ":", ",", "1", "]", "=", "0.0", "\n", "for", "pt", "in", "pts", ":", "\n", "            ", "image", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "0", "]", "=", "1.0", "\n", "\n", "", "Presenter", "(", ")", ".", "show_image", "(", "image", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\"aux_goal_\"", "+", "self", ".", "name", ",", "torch", "=", "False", ",", "waitkey", "=", "True", ",", "scale", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.goal_auxiliary.GoalAuxiliary2D.forward": [[50, 105], ["len", "torch.cat", "range", "torch.cat.size", "goal_pos[].long", "list", "list", "learning.inputs.common.empty_float_tensor", "goal_negative_coords_in_map.long().to.long().to.uniform_", "goal_negative_coords_in_map.long().to.long().to.long().to", "torch.cat().long", "torch.zeros().long().to", "goal_auxiliary.GoalAuxiliary2D.gather_2d", "goal_auxiliary.GoalAuxiliary2D.goal_linear", "goal_auxiliary.GoalAuxiliary2D.loss", "torch.max", "torch.sum", "float", "goal_auxiliary.GoalAuxiliary2D.accuracy_meter.put", "learning.meters_and_metrics.meter_server.log_value", "goal_pos[].long.size", "goal_pos[].long.size", "goal_auxiliary.GoalAuxiliary2D.plot_pts", "len", "float", "goal_auxiliary.GoalAuxiliary2D.accuracy_meter.get", "goal_negative_coords_in_map.long().to.long().to.long", "torch.cat", "torch.zeros().long", "torch.sum.item", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.log_value", "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.goal_auxiliary.GoalAuxiliary2D.plot_pts", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "forward", "(", "self", ",", "map", ",", "goal_pos", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "map", ")", "\n", "\n", "map", "=", "torch", ".", "cat", "(", "map", ",", "dim", "=", "0", ")", "\n", "\n", "if", "map", ".", "size", "(", "1", ")", ">", "self", ".", "channels_in", ":", "\n", "            ", "map", "=", "map", "[", ":", ",", "0", ":", "self", ".", "channels_in", ",", ":", ",", ":", "]", "\n", "\n", "", "loss_out", "=", "None", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "goal_coords_in_map", "=", "goal_pos", "[", "i", "]", ".", "long", "(", ")", "\n", "map_i", "=", "map", "[", "i", ":", "i", "+", "1", "]", "\n", "\n", "#goal_coords_in_map = pos_m_to_px(goal_pos_i, self.map_size_px, self.world_size_m, self.world_size_px).long()", "\n", "neg_samples", "=", "1", "\n", "neg_coords_size", "=", "list", "(", "goal_coords_in_map", ".", "size", "(", ")", ")", "\n", "neg_coords_size", "[", "0", "]", "=", "neg_coords_size", "[", "0", "]", "*", "neg_samples", "\n", "all_coords_size", "=", "list", "(", "goal_coords_in_map", ".", "size", "(", ")", ")", "\n", "all_coords_size", "[", "0", "]", "+=", "neg_coords_size", "[", "0", "]", "\n", "\n", "goal_negative_coords_in_map", "=", "empty_float_tensor", "(", "neg_coords_size", ")", "\n", "range_min", "=", "0", "\n", "range_max", "=", "self", ".", "map_size_px", "\n", "goal_negative_coords_in_map", ".", "uniform_", "(", "range_min", ",", "range_max", ")", "\n", "goal_negative_coords_in_map", "=", "goal_negative_coords_in_map", ".", "long", "(", ")", ".", "to", "(", "goal_coords_in_map", ".", "device", ")", "\n", "\n", "sample_pt_coords", "=", "torch", ".", "cat", "(", "[", "goal_coords_in_map", ",", "goal_negative_coords_in_map", "]", ",", "dim", "=", "0", ")", ".", "long", "(", ")", "\n", "sample_pt_labels", "=", "torch", ".", "zeros", "(", "[", "all_coords_size", "[", "0", "]", "]", ")", ".", "long", "(", ")", ".", "to", "(", "goal_coords_in_map", ".", "device", ")", "\n", "sample_pt_labels", "[", "0", "]", "=", "1", "\n", "sample_pt_labels", "[", "1", ":", "]", "=", "0", "\n", "\n", "sample_pt_features", "=", "self", ".", "gather_2d", "(", "map_i", ",", "sample_pt_coords", ")", "\n", "\n", "if", "DBG", ":", "\n", "                ", "self", ".", "plot_pts", "(", "map", "[", "0", "]", ",", "sample_pt_coords", ")", "\n", "\n", "", "pt_predictions", "=", "self", ".", "goal_linear", "(", "sample_pt_features", ")", "\n", "aux_loss_goal", "=", "self", ".", "loss", "(", "pt_predictions", ",", "sample_pt_labels", ")", "\n", "\n", "_", ",", "pred_idx", "=", "torch", ".", "max", "(", "pt_predictions", ".", "data", ",", "1", ")", "\n", "correct", "=", "torch", ".", "sum", "(", "(", "pred_idx", "==", "sample_pt_labels", ".", "data", ")", ".", "long", "(", ")", ")", "\n", "total", "=", "float", "(", "len", "(", "sample_pt_labels", ")", ")", "\n", "accuracy", "=", "float", "(", "correct", ".", "item", "(", ")", ")", "/", "total", "\n", "self", ".", "accuracy_meter", ".", "put", "(", "accuracy", ")", "\n", "log_value", "(", "self", ".", "name", "+", "\"/accuracy\"", ",", "self", ".", "accuracy_meter", ".", "get", "(", ")", ")", "\n", "\n", "if", "loss_out", "is", "None", ":", "\n", "                ", "loss_out", "=", "aux_loss_goal", "\n", "", "else", ":", "\n", "                ", "loss_out", "+=", "aux_loss_goal", "\n", "\n", "# TODO: Consider batch size / count", "\n", "\n", "", "", "return", "loss_out", ",", "batch_size", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.path_auxiliary_oob_goalonly.PathAuxiliary2D.__init__": [[17, 28], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.__init__", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "torch.nn.LogSoftmax", "learning.modules.visitation_softmax.VisitationSoftmax", "learning.modules.crossentropy2d.CrossEntropy2d", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "lossfunc", ",", "clip_observability", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "PathAuxiliary2D", ",", "self", ")", ".", "__init__", "(", "name", ",", "*", "inputs", ")", "\n", "if", "lossfunc", "==", "\"crossentropy\"", ":", "\n", "            ", "self", ".", "loss", "=", "CrossEntropy2d", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "self", ".", "clip_observability", "=", "clip_observability", "\n", "self", ".", "lossfunc", "=", "lossfunc", "\n", "self", ".", "goal_location_criterion", "=", "GoalPredictionGoodCriterion", "(", ")", "\n", "self", ".", "logsoftmax1d", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "visit_softmax", "=", "VisitationSoftmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.path_auxiliary_oob_goalonly.PathAuxiliary2D.cuda": [[30, 35], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.cuda", "path_auxiliary_oob_goalonly.PathAuxiliary2D.logsoftmax1d.cuda", "path_auxiliary_oob_goalonly.PathAuxiliary2D.loss.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "AuxiliaryObjective", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "logsoftmax1d", ".", "cuda", "(", ")", "\n", "self", ".", "loss", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.path_auxiliary_oob_goalonly.PathAuxiliary2D.forward": [[36, 144], ["torch.cat", "v_dist_labels[].view().sum", "v_dist_labels[].view().sum", "v_dist_labels[].view().sum", "path_auxiliary_oob_goalonly.PathAuxiliary2D.loss", "v_dist_pred[].view", "torch.cat", "v_dist_labels[].view", "torch.cat", "path_auxiliary_oob_goalonly.PathAuxiliary2D.logsoftmax1d", "x.sum.sum.sum", "torch.mean", "torch.exp", "goal_insideness_correct.sum", "gt_goal_inside.sum().float", "gt_goal_outside.sum().float", "torch.cat", "torch.cat", "path_auxiliary_oob_goalonly.PathAuxiliary2D.loss", "range", "goal_inside_recall.detach().item", "goal_outside_recall.detach().item", "learning.meters_and_metrics.goal_map_success_rate.goal_map_success_rate", "torch.cat.size", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "v_dist_labels[].view", "v_dist_labels[].view().sum.view", "v_dist_labels[].view", "v_dist_labels[].view().sum.view", "v_dist_labels[].view", "gt_goal_inside.sum", "gt_goal_outside.sum", "goal_inside_recall.detach", "goal_outside_recall.detach", "gt_goal_inside.byte", "gt_goal_inside.byte", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss", "home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.goal_map_success_rate.goal_map_success_rate", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "forward", "(", "self", ",", "v_dist_pred", ",", "v_dist_labels", ",", "obs_masks", ")", ":", "\n", "\n", "        ", "if", "self", ".", "clip_observability", ":", "\n", "            ", "batch_size", "=", "v_dist_labels", ".", "shape", "[", "0", "]", "\n", "obs_masks", "=", "torch", ".", "cat", "(", "obs_masks", ",", "dim", "=", "0", ")", "\n", "\n", "# Renormalize goal distribution BEFORE clipping it", "\n", "sum_g_ps", "=", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "1", ")", "\n", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", "/", "(", "sum_g_ps", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", "+", "1e-10", ")", "\n", "\n", "# Clip the visitation labels according to observability masks", "\n", "v_dist_labels", "=", "v_dist_labels", "*", "obs_masks", "\n", "\n", "# Renormalize visitation distributions so that they sum up to 1 AFTER clipping", "\n", "sum_v_ps", "=", "v_dist_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "1", ")", "\n", "v_dist_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "v_dist_labels", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "(", "sum_v_ps", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", "+", "1e-10", ")", "\n", "\n", "# Goal distributions should not be renormalized - the remaining probability should be distributed to the oob pixel", "\n", "gt_prob_goal_inside", "=", "v_dist_labels", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "sum", "(", "1", ")", "\n", "gt_prob_goal_outside", "=", "1", "-", "gt_prob_goal_inside", "\n", "prob_goal_not_in_map_labels", "=", "1", "-", "gt_prob_goal_inside", "\n", "\n", "# All the pixels in this channel are copies of each other. Just grab the first one - it's the same as taking the mean", "\n", "#goal_not_in_map_score_preds = v_dist_pred[:, 2, 0, 0]", "\n", "\n", "visit_loss", "=", "self", ".", "loss", "(", "v_dist_pred", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "v_dist_labels", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", "\n", "\n", "# ------------------------------------------------------", "\n", "# Calculate goal layer loss", "\n", "# Concatenate oob_pred to pred and oob_label to label", "\n", "goal_pred_flat", "=", "v_dist_pred", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "goal_pred_full", "=", "torch", ".", "cat", "(", "[", "goal_pred_flat", ",", "goal_not_in_map_score_preds", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "goal_labels_flat", "=", "v_dist_labels", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "goal_labels_full", "=", "torch", ".", "cat", "(", "[", "goal_labels_flat", ",", "prob_goal_not_in_map_labels", "[", ":", ",", "np", ".", "newaxis", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "pred_logsoftmax_scores", "=", "self", ".", "logsoftmax1d", "(", "goal_pred_full", ")", "\n", "\n", "# Calculate losses", "\n", "x", "=", "-", "goal_labels_full", "*", "pred_logsoftmax_scores", "\n", "# Sum over spatial dimensions:", "\n", "x", "=", "x", ".", "sum", "(", "1", ")", "\n", "# Average over channels and batches", "\n", "goal_loss", "=", "torch", ".", "mean", "(", "x", ")", "\n", "\n", "# ------------------------------------------------------", "\n", "#goal_loss = self.loss(v_dist_pred[:, 1:2, :, :], v_dist_labels[:, 1:2, :, :], goal_not_in_map_score_preds, prob_goal_not_in_map_labels)", "\n", "\n", "loss", "=", "visit_loss", "+", "goal_loss", "\n", "\n", "# Calculating metrics", "\n", "metrics", "=", "{", "}", "\n", "pred_probs_flat", "=", "torch", ".", "exp", "(", "pred_logsoftmax_scores", ")", "\n", "pred_prob_goal_outside", "=", "pred_probs_flat", "[", ":", ",", "-", "1", "]", "\n", "pred_prob_goal_inside", "=", "1", "-", "pred_prob_goal_outside", "\n", "pred_goal_inside", "=", "(", "pred_prob_goal_inside", ">", "0.5", ")", ".", "long", "(", ")", "\n", "\n", "gt_goal_inside", "=", "(", "gt_prob_goal_inside", ">", "0.5", ")", ".", "long", "(", ")", "\n", "gt_goal_outside", "=", "(", "1", "-", "gt_goal_inside", ")", "\n", "\n", "# Inside/Outside accuracy", "\n", "goal_insideness_correct", "=", "(", "pred_goal_inside", "==", "gt_goal_inside", ")", ".", "long", "(", ")", "\n", "num_goal_insideness_correct", "=", "goal_insideness_correct", ".", "sum", "(", ")", "\n", "goal_inside_accuracy", "=", "num_goal_insideness_correct", "/", "(", "batch_size", "+", "1e-9", ")", "\n", "metrics", "[", "\"goal_inside_outside_accuracy\"", "]", "=", "goal_inside_accuracy", "\n", "\n", "# Inside recall", "\n", "goal_inside_recalled", "=", "(", "goal_insideness_correct", "*", "gt_goal_inside", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "goal_inside_total", "=", "(", "gt_goal_inside", ".", "sum", "(", ")", ")", ".", "float", "(", ")", "\n", "goal_inside_recall", "=", "goal_inside_recalled", "/", "(", "goal_inside_total", "+", "1e-9", ")", "\n", "if", "goal_inside_recall", ".", "detach", "(", ")", ".", "item", "(", ")", ">", "1e-9", ":", "\n", "                ", "metrics", "[", "\"goal_inside_recall\"", "]", "=", "goal_inside_recall", "\n", "\n", "# Outside recall", "\n", "", "goal_outside_recalled", "=", "(", "goal_insideness_correct", "*", "gt_goal_outside", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "goal_outside_total", "=", "(", "gt_goal_outside", ".", "sum", "(", ")", ")", ".", "float", "(", ")", "\n", "goal_outside_recall", "=", "goal_outside_recalled", "/", "(", "goal_outside_total", "+", "1e-9", ")", "\n", "if", "goal_outside_recall", ".", "detach", "(", ")", ".", "item", "(", ")", ">", "1e-9", ":", "\n", "                ", "metrics", "[", "\"goal_outside_recall\"", "]", "=", "goal_outside_recall", "\n", "\n", "# Location success rate given ground truth goal is inside", "\n", "", "pred_goal_maps_where_goal_is_inside", "=", "v_dist_pred", "[", "gt_goal_inside", ".", "byte", "(", ")", ",", "1", ",", ":", ",", ":", "]", "\n", "gt_goal_maps_where_goal_is_inside", "=", "v_dist_labels", "[", "gt_goal_inside", ".", "byte", "(", ")", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "if", "gt_goal_maps_where_goal_is_inside", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "goal_success_rate", "=", "goal_map_success_rate", "(", "pred_goal_maps_where_goal_is_inside", ",", "gt_goal_maps_where_goal_is_inside", ")", "\n", "metrics", "[", "\"goal_success_rate_when_goal_inside\"", "]", "=", "goal_success_rate", "\n", "metrics", "[", "\"goal_inside\"", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "metrics", "[", "\"goal_inside\"", "]", "=", "0", "\n", "\n", "", "count", "=", "1", "\n", "", "else", ":", "\n", "# TODO: Deal with these being Partial2DDistributions", "\n", "            ", "v_dist_pred", "=", "torch", ".", "cat", "(", "v_dist_pred", ",", "dim", "=", "0", ")", "\n", "v_dist_labels", "=", "torch", ".", "cat", "(", "v_dist_labels", ",", "dim", "=", "0", ")", "\n", "loss", "=", "self", ".", "loss", "(", "v_dist_pred", ",", "v_dist_labels", ")", "\n", "metrics", "=", "{", "}", "\n", "count", "=", "1", "\n", "\n", "", "global", "pa2d_count", "\n", "if", "DBG", "and", "pa2d_count", "%", "10", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "v_dist_pred", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "v_dist_pred", ".", "data", "[", "i", ",", "0", "]", ",", "\"aux_path_pred\"", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "v_dist_labels", ".", "data", "[", "i", ",", "0", "]", ",", "\"aux_path_label\"", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "", "", "pa2d_count", "+=", "1", "\n", "\n", "return", "loss", ",", "metrics", ",", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.class_auxiliary.ClassAuxiliary.__init__": [[14, 25], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.__init__", "torch.nn.Linear", "data_io.weights.enable_weight_saving", "torch.nn.CrossEntropyLoss", "learning.meters_and_metrics.moving_average.MovingAverageMeter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "feature_vec_len", "=", "32", ",", "num_classes", "=", "2", ",", "num_outputs", "=", "1", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "ClassAuxiliary", ",", "self", ")", ".", "__init__", "(", "name", ",", "*", "inputs", ")", "\n", "self", ".", "channels_in", "=", "feature_vec_len", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_outputs", "=", "num_outputs", "\n", "\n", "self", ".", "cls_linear", "=", "nn", ".", "Linear", "(", "feature_vec_len", ",", "num_classes", "*", "num_outputs", ")", "\n", "enable_weight_saving", "(", "self", ".", "cls_linear", ",", "\"aux_class_linear_\"", "+", "name", ")", "\n", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "meter_accuracy", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.class_auxiliary.ClassAuxiliary.cuda": [[26, 29], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "AuxiliaryObjective", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.class_auxiliary.ClassAuxiliary.forward": [[30, 52], ["torch.cat", "torch.cat", "class_auxiliary.ClassAuxiliary.cls_linear", "pred.view.view.view", "labels.view.view.view", "class_auxiliary.ClassAuxiliary.loss", "torch.max", "torch.sum().data.item", "class_auxiliary.ClassAuxiliary.meter_accuracy.put", "learning.meters_and_metrics.meter_server.log_value", "len", "class_auxiliary.ClassAuxiliary.meter_accuracy.get", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.log_value", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "forward", "(", "self", ",", "fvectors", ",", "labels", ")", ":", "\n", "\n", "        ", "fvectors", "=", "torch", ".", "cat", "(", "fvectors", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "\n", "pred", "=", "self", ".", "cls_linear", "(", "fvectors", ")", "\n", "\n", "# If we're predicting multiple outputs for each input, reshape accordingly.", "\n", "pred", "=", "pred", ".", "view", "(", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "labels", "=", "labels", ".", "view", "(", "[", "-", "1", "]", ")", "\n", "\n", "loss", "=", "self", ".", "loss", "(", "pred", ",", "labels", ")", "\n", "\n", "_", ",", "maxidx", "=", "torch", ".", "max", "(", "pred", ",", "1", ")", "\n", "correct", "=", "torch", ".", "sum", "(", "(", "maxidx", "==", "labels", ")", ".", "long", "(", ")", ")", ".", "data", ".", "item", "(", ")", "\n", "accuracy", "=", "correct", "/", "len", "(", "labels", ")", "\n", "\n", "self", ".", "meter_accuracy", ".", "put", "(", "accuracy", ")", "\n", "log_value", "(", "self", ".", "name", "+", "\"/accuracy\"", ",", "self", ".", "meter_accuracy", ".", "get", "(", ")", ")", "\n", "\n", "# TODO: Track accuracy", "\n", "return", "loss", ",", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.visitation_confidence_auxiliary.VisitationConfidenceAuxiliary.__init__": [[12, 19], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.__init__", "torch.nn.BCEWithLogitsLoss", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "float"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "world_size_px", ",", "*", "inputs", ")", ":", "\n", "        ", "super", "(", "VisitationConfidenceAuxiliary", ",", "self", ")", ".", "__init__", "(", "name", ",", "*", "inputs", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "acc_threshold", "=", "float", "(", "self", ".", "world_size_px", ")", "/", "10", "\n", "#self.loss = nn.CrossEntropyLoss()", "\n", "self", ".", "meter_accuracy", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.visitation_confidence_auxiliary.VisitationConfidenceAuxiliary.cuda": [[20, 23], ["learning.modules.auxiliary_objective_base.AuxiliaryObjective.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "AuxiliaryObjective", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.auxiliaries.visitation_confidence_auxiliary.VisitationConfidenceAuxiliary.forward": [[24, 64], ["torch.cat", "torch.cat", "torch.cat", "g_dist_gt.view().max", "torch.stack", "g_dist.view().max", "torch.stack", "torch.norm", "visitation_confidence_auxiliary.VisitationConfidenceAuxiliary.loss", "target.float", "g_dist_gt.view", "g_dist.view"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rss.aux_landmark_classify.AuxLandmarkClassifier.loss"], ["", "def", "forward", "(", "self", ",", "confidence_scores", ",", "v_dist", ",", "v_dist_gt", ")", ":", "\n", "        ", "\"\"\"\n        :param confidence_scores:\n        :param v_dist: List of 1x2x64x64 tensors\n        :param v_dist_gt: List of 1x2x64x64 tensors\n        :return:\n        \"\"\"", "\n", "v_dist", "=", "torch", ".", "cat", "(", "v_dist", ",", "dim", "=", "0", ")", "\n", "\n", "#for vd in v_dist:", "\n", "#    Presenter().show_image(vd.detach().cpu(), \"v_dist_pred\", scale=2, waitkey=True)", "\n", "\n", "v_dist_gt", "=", "torch", ".", "cat", "(", "v_dist_gt", ",", "dim", "=", "0", ")", "\n", "confidences", "=", "torch", ".", "cat", "(", "confidence_scores", ",", "dim", "=", "0", ")", "\n", "goal_confidence", "=", "confidences", "[", ":", ",", "0", "]", "\n", "\n", "# Grab the goal channel", "\n", "g_dist", "=", "v_dist", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "g_dist_gt", "=", "v_dist_gt", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "batch_size", "=", "v_dist", ".", "shape", "[", "0", "]", "\n", "\n", "_", ",", "argmax_gt_goal", "=", "g_dist_gt", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "1", ")", "\n", "gt_goal_pos_x", "=", "argmax_gt_goal", "/", "g_dist_gt", ".", "shape", "[", "1", "]", "\n", "gt_goal_pos_y", "=", "argmax_gt_goal", "%", "g_dist_gt", ".", "shape", "[", "1", "]", "\n", "gt_goal_pos", "=", "torch", ".", "stack", "(", "[", "gt_goal_pos_x", ",", "gt_goal_pos_y", "]", ",", "dim", "=", "1", ")", "\n", "\n", "_", ",", "argmax_pred_goal", "=", "g_dist", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "1", ")", "\n", "pred_goal_pos_x", "=", "argmax_pred_goal", "/", "g_dist", ".", "shape", "[", "1", "]", "\n", "pred_goal_pos_y", "=", "argmax_pred_goal", "%", "g_dist", ".", "shape", "[", "1", "]", "\n", "pred_goal_pos", "=", "torch", ".", "stack", "(", "[", "pred_goal_pos_x", ",", "pred_goal_pos_y", "]", ",", "dim", "=", "1", ")", "\n", "\n", "dst_to_best_stop", "=", "torch", ".", "norm", "(", "(", "pred_goal_pos", "-", "gt_goal_pos", ")", ".", "float", "(", ")", ",", "dim", "=", "1", ")", "\n", "# TODO: Grab 3.2 from config", "\n", "target", "=", "(", "dst_to_best_stop", "<", "self", ".", "acc_threshold", ")", ".", "long", "(", ")", "\n", "predictions", "=", "(", "goal_confidence", ">", "0.0", ")", ".", "long", "(", ")", "\n", "\n", "confidence_loss", "=", "self", ".", "loss", "(", "goal_confidence", ",", "target", ".", "float", "(", ")", ")", "\n", "total_correct", "=", "(", "predictions", "==", "target", ")", ".", "sum", "(", ")", "\n", "\n", "return", "confidence_loss", ",", "{", "\"goal_confidence_accuracy\"", ":", "total_correct", "}", ",", "batch_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.img_to_features.ImgToFeatures.__init__": [[10, 24], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "learning.modules.resnet.resnet_13_s.ResNet13S", "learning.modules.resnet.resnet_13_light.ResNet13Light", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "out_channels", ",", "img_w", ",", "img_h", ")", ":", "\n", "        ", "super", "(", "ImgToFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "img_w", "==", "128", ":", "\n", "            ", "self", ".", "feature_net", "=", "ResNet13S", "(", "channels", ",", "down_pad", "=", "True", ")", "\n", "", "elif", "img_w", "==", "256", ":", "\n", "            ", "self", ".", "feature_net", "=", "ResNet13Light", "(", "channels", ",", "down_pad", "=", "True", ")", "\n", "#elif img_w == 128:", "\n", "#    self.feature_net = ResNet7(channels, down_pad=True)", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"ImgToFeatures: Unknown image dims: \"", ",", "img_w", ",", "img_h", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "self", ".", "do_down_conv", "=", "channels", "!=", "out_channels", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "channels", ",", "out_channels", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.img_to_features.ImgToFeatures.get_downscale_factor": [[25, 27], ["img_to_features.ImgToFeatures.feature_net.get_downscale_factor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.get_downscale_factor"], ["", "def", "get_downscale_factor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "feature_net", ".", "get_downscale_factor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.img_to_features.ImgToFeatures.init_weights": [[28, 33], ["img_to_features.ImgToFeatures.feature_net.init_weights", "torch.nn.init.kaiming_uniform_", "img_to_features.ImgToFeatures.conv_out.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "feature_net", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv_out", ".", "weight", ")", "\n", "self", ".", "conv_out", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.img_to_features.ImgToFeatures.forward": [[34, 39], ["img_to_features.ImgToFeatures.feature_net", "img_to_features.ImgToFeatures.act", "img_to_features.ImgToFeatures.conv_out"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_net", "(", "input", ")", "\n", "if", "self", ".", "do_down_conv", ":", "\n", "            ", "x", "=", "self", ".", "act", "(", "self", ".", "conv_out", "(", "x", ")", ")", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.identity_img_to_img.IdentityImgToImg.__init__": [[10, 12], ["learning.modules.cuda_module.CudaModule.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IdentityImgToImg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.identity_img_to_img.IdentityImgToImg.cuda": [[13, 15], ["learning.modules.cuda_module.CudaModule.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "CudaModule", ".", "cuda", "(", "self", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.identity_img_to_img.IdentityImgToImg.init_weights": [[16, 18], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_img.identity_img_to_img.IdentityImgToImg.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.__init__": [[15, 24], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "word_embedding_size", ",", "embed_size", ",", "lstm_layers", "=", "1", ",", "dropout", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "SentenceEmbeddingSimple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm_size", "=", "embed_size", "\n", "self", ".", "lstm_layers", "=", "lstm_layers", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "VOCAB_SIZE", ",", "word_embedding_size", ",", "sparse", "=", "False", ")", "\n", "self", ".", "lstm_txt", "=", "nn", ".", "LSTM", "(", "word_embedding_size", ",", "self", ".", "lstm_size", ",", "lstm_layers", ",", "dropout", "=", "0.0", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "last_output", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.init_weights": [[25, 33], ["sentence_embedding_simple.SentenceEmbeddingSimple.embedding.weight.data.normal_", "sentence_embedding_simple.SentenceEmbeddingSimple.lstm_txt.named_parameters", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "#self.embedding.weight.data.uniform_(-0.1, 0.1)", "\n", "for", "name", ",", "param", "in", "self", ".", "lstm_txt", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.reset": [[34, 36], ["None"], "methods", ["None"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "last_output", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "last_output", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.forward": [[40, 93], ["len", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "isinstance", "learning.inputs.sequence.sequence_list_to_tensor", "word_ids.to.to.to", "lengths.to.to.to", "int", "list", "outputs[].squeeze.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sentence_embedding_simple.SentenceEmbeddingSimple.embedding().unsqueeze", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "sentence_embedding_simple.SentenceEmbeddingSimple.lstm_txt", "outputs[].squeeze", "sentence_embedding_simple.SentenceEmbeddingSimple.embedding", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_list_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "forward", "(", "self", ",", "word_ids", ",", "lengths", "=", "None", ")", ":", "\n", "# TODO: Get rid of this and abstract in another layer", "\n", "        ", "device", "=", "self", ".", "embedding", ".", "weight", ".", "device", "\n", "if", "isinstance", "(", "word_ids", ",", "list", ")", "and", "lengths", "is", "None", ":", "\n", "            ", "word_ids", ",", "lengths", "=", "sequence_list_to_tensor", "(", "[", "word_ids", "]", ")", "\n", "word_ids", "=", "word_ids", ".", "to", "(", "device", ")", "\n", "lengths", "=", "lengths", ".", "to", "(", "device", ")", "\n", "\n", "", "batch_size", "=", "len", "(", "word_ids", ")", "\n", "sentence_embeddings", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "lstm_size", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "last_instruction", "=", "None", "\n", "last_embedding", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "length", "=", "int", "(", "lengths", "[", "i", "]", ")", "\n", "if", "length", "==", "0", ":", "\n", "#print(\"Empty caption\")", "\n", "                ", "continue", "\n", "\n", "# If this instruction is same as the previous instruction, no reason to recompute the embedding for it", "\n", "", "this_instruction", "=", "word_ids", "[", "i", ":", "i", "+", "1", ",", "0", ":", "length", "]", "\n", "#if this_instruction.dim() == 0:", "\n", "#    this_instr_list = [this_instruction.data.item()]", "\n", "#else:", "\n", "this_instr_list", "=", "list", "(", "this_instruction", ".", "data", "[", "0", "]", ")", "\n", "\n", "if", "last_instruction", "is", "None", "or", "this_instr_list", "!=", "last_instruction", ":", "\n", "                ", "embeddings_i", "=", "self", ".", "embedding", "(", "word_ids", "[", "i", ",", "0", ":", "length", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "#embeddings_i = word_embeddings[i, 0:length].unsqueeze(1)", "\n", "#word_ids_i = word_ids[i, 0:length]", "\n", "#print(debug_untokenize_instruction(word_ids_i.data))", "\n", "\n", "h0", "=", "torch", ".", "zeros", "(", "(", "self", ".", "lstm_layers", ",", "1", ",", "self", ".", "lstm_size", ")", ")", ".", "to", "(", "device", ")", "\n", "c0", "=", "torch", ".", "zeros", "(", "(", "self", ".", "lstm_layers", ",", "1", ",", "self", ".", "lstm_size", ")", ")", ".", "to", "(", "device", ")", "\n", "outputs", ",", "states", "=", "self", ".", "lstm_txt", "(", "embeddings_i", ",", "(", "h0", ",", "c0", ")", ")", "\n", "\n", "# Mean-reduce the 1st (sequence) dimension", "\n", "sentence_embedding", "=", "outputs", "[", "-", "1", "]", ".", "squeeze", "(", ")", "#torch.mean(outputs, 0)", "\n", "#sentence_embedding = self.dropout(sentence_embedding)", "\n", "last_embedding", "=", "sentence_embedding", "\n", "last_instruction", "=", "this_instr_list", "\n", "#print(\"computing\")", "\n", "", "else", ":", "\n", "#print(\"skipping\")", "\n", "                ", "sentence_embedding", "=", "last_embedding", "\n", "", "sentence_embeddings", "[", "i", "]", "=", "sentence_embedding", ".", "squeeze", "(", ")", "\n", "\n", "# Assuming the batch is a sequence, keep the last embedding around", "\n", "# TODO: Revise this assumption", "\n", "", "self", ".", "last_output", "=", "sentence_embeddings", "[", "batch_size", "-", "1", ":", "batch_size", "]", "\n", "\n", "return", "sentence_embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.__init__": [[17, 55], ["int", "learning.modules.cuda_module.CudaModule.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "pickle.load", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.init_weights", "open", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond."], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "word_embedding_size", ",", "\n", "lstm_size", ",", "\n", "lstm_layers", "=", "1", ",", "\n", "attention_heads", "=", "5", ",", "\n", "run_name", "=", "\"\"", ",", "BiLSTM", "=", "True", ",", "\n", "dropout", "=", "False", ",", "\n", "hc", "=", "32", ",", "\n", "k", "=", "5", ",", "\n", "stride", "=", "2", ")", ":", "\n", "\n", "        ", "pad", "=", "int", "(", "k", "/", "2", ")", "\n", "super", "(", "SentenceEmbeddingSelfAttentionCond", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_layers", "=", "lstm_layers", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "deprecated", ".", "config", ".", "vocab_size", ",", "word_embedding_size", ",", "sparse", "=", "False", ")", "\n", "self", ".", "BiLSTM", "=", "BiLSTM", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "factor", "=", "(", "2", "if", "self", ".", "BiLSTM", "else", "1", ")", "\n", "self", ".", "lstm_txt", "=", "nn", ".", "LSTM", "(", "word_embedding_size", ",", "self", ".", "lstm_size", ",", "self", ".", "lstm_layers", ",", "bidirectional", "=", "BiLSTM", ")", "\n", "self", ".", "Da", "=", "25", "\n", "# TODO: Make sure the overall embedding is of the size requested", "\n", "self", ".", "num_attn_heads", "=", "attention_heads", "\n", "self", ".", "W_s1", "=", "nn", ".", "Linear", "(", "self", ".", "factor", "*", "self", ".", "lstm_size", ",", "self", ".", "Da", ",", "bias", "=", "False", ")", "\n", "self", ".", "W_s2", "=", "nn", ".", "Linear", "(", "self", ".", "Da", ",", "self", ".", "num_attn_heads", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "idx2word", "=", "pickle", ".", "load", "(", "open", "(", "get_self_attention_path", "(", ")", "+", "\"idx2word.pickle\"", ",", "\"rb\"", ")", ")", "\n", "self", ".", "n_epoch", "=", "0", "\n", "self", ".", "n_batch", "=", "0", "\n", "\n", "#conv for feature map", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "hc", ",", "hc", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hc", ",", "hc", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "Linear_FeatureMap", "=", "nn", ".", "Linear", "(", "32", "*", "8", "*", "8", ",", "self", ".", "Da", ")", "\n", "\n", "self", ".", "dropout2d", "=", "nn", ".", "Dropout2d", "(", "0.6", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.init_weights": [[57, 72], ["sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.embedding.weight.data.normal_", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.lstm_txt.named_parameters", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.conv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.conv3.bias.data.fill_", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "#self.embedding.weight.data.uniform_(-0.1, 0.1)", "\n", "for", "name", ",", "param", "in", "self", ".", "lstm_txt", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "param", ")", "\n", "\n", "", "", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv3", ".", "weight", ")", "\n", "self", ".", "conv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.save_att_map": [[73, 77], ["None"], "methods", ["None"], ["", "def", "save_att_map", "(", "self", ",", "batch_num", ",", "epoch_num", ")", ":", "\n", "        ", "self", ".", "n_batch", "=", "batch_num", "\n", "self", ".", "n_epoch", "=", "epoch_num", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.forward": [[78, 163], ["sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.embedding", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.mm.view", "torch.mm.view", "torch.mm.view", "torch.mm.view.squeeze", "isinstance", "learning.inputs.sequence.sequence_list_to_tensor", "word_ids.to.to.to", "lengths.to.to.to", "learning.inputs.common.empty_float_tensor", "int", "word_embeddings[].unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.lstm_txt", "outputs.squeeze", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.dropout2d", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.dropout2d", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.Linear_FeatureMap", "torch.tanh", "torch.tanh", "torch.tanh", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.W_s2", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "range", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "[].data.cpu().numpy", "torch.softmax.data.cpu().numpy", "matplotlib.figure", "matplotlib.pcolor", "matplotlib.xticks", "matplotlib.gcf().subplots_adjust", "matplotlib.savefig", "print", "learning.inputs.common.empty_float_tensor", "learning.inputs.common.empty_float_tensor", "states[].squeeze", "states[].squeeze", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.conv1", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.conv2", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.view", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.W_s1", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.view", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.softmax.t", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.", "sentence_embedding_self_attention_cond.SentenceEmbeddingSelfAttentionCond.SentenceEmbeddingSelfAttentionCond.", "numpy.linspace", "[].data.cpu", "torch.softmax.data.cpu", "len", "matplotlib.gcf", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_list_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "forward", "(", "self", ",", "word_ids", ",", "feature_map", ",", "lengths", "=", "None", ")", ":", "\n", "# TODO: Get rid of this and abstract in another layer", "\n", "\n", "        ", "if", "isinstance", "(", "word_ids", ",", "list", ")", "and", "lengths", "is", "None", ":", "\n", "            ", "word_ids", ",", "lengths", "=", "sequence_list_to_tensor", "(", "[", "word_ids", "]", ")", "\n", "word_ids", "=", "word_ids", ".", "to", "(", "feature_map", ".", "device", ")", "\n", "lengths", "=", "lengths", ".", "to", "(", "feature_map", ".", "device", ")", "\n", "\n", "", "word_embeddings", "=", "self", ".", "embedding", "(", "word_ids", ")", "#size: [2, 500, 20] embedding size: 20", "\n", "batch_size", "=", "word_embeddings", ".", "size", "(", "0", ")", "# size:2", "\n", "sentence_embeddings", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "self", ".", "lstm_size", "*", "self", ".", "factor", "*", "(", "self", ".", "num_attn_heads", "+", "1", ")", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "#size [2,80]", "\n", "\n", "penal", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "length", "=", "int", "(", "lengths", "[", "i", "]", ")", "\n", "if", "length", "==", "0", ":", "\n", "                ", "print", "(", "\"Empty caption\"", ")", "\n", "continue", "\n", "", "embeddings_i", "=", "word_embeddings", "[", "i", ",", "0", ":", "length", "]", ".", "unsqueeze", "(", "1", ")", "# size: [instruction length, 1, 20]", "\n", "h0", "=", "Variable", "(", "empty_float_tensor", "(", "(", "self", ".", "lstm_layers", "*", "self", ".", "factor", ",", "1", ",", "self", ".", "lstm_size", ")", ",", "self", ".", "is_cuda", ")", ")", "#size: [2, 1, 40]", "\n", "c0", "=", "Variable", "(", "empty_float_tensor", "(", "(", "self", ".", "lstm_layers", "*", "self", ".", "factor", ",", "1", ",", "self", ".", "lstm_size", ")", ",", "self", ".", "is_cuda", ")", ")", "#size: [2, 1, 40]", "\n", "outputs", ",", "states", "=", "self", ".", "lstm_txt", "(", "embeddings_i", ",", "(", "h0", ",", "c0", ")", ")", "#output size: [intr_len, 1, 80]  #2 states: forward and backwward.  size: [2, 1, 40]", "\n", "H", "=", "outputs", ".", "squeeze", "(", "dim", "=", "1", ")", "#size: [instr_len, 80]", "\n", "hidden", ",", "cell", "=", "(", "states", "[", "0", "]", ".", "squeeze", "(", "dim", "=", "1", ")", ",", "states", "[", "1", "]", ".", "squeeze", "(", "dim", "=", "1", ")", ")", "#size: 2x[2,40]", "\n", "\n", "#image key", "\n", "# TODO: This is one good option (but leakyReLU)", "\n", "k1", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "feature_map", ")", ")", "#", "\n", "k1_dropout", "=", "self", ".", "dropout2d", "(", "k1", ")", "\n", "k2", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2", "(", "k1_dropout", ")", ")", "#", "\n", "k2_drop", "=", "self", ".", "dropout2d", "(", "k2", ")", "\n", "key", "=", "self", ".", "Linear_FeatureMap", "(", "k2_drop", ".", "view", "(", "-", "1", ")", ")", "\n", "# TODO: Dropout", "\n", "\n", "# TODO: Alternative: pooling", "\n", "\n", "#self-attention", "\n", "s1", "=", "F", ".", "tanh", "(", "self", ".", "W_s1", "(", "H", ")", ")", "\n", "s2_fixed", "=", "self", ".", "W_s2", "(", "s1", ")", "\n", "s2_dynamic", "=", "torch", ".", "mm", "(", "s1", ",", "key", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "s2_cat", "=", "torch", ".", "cat", "(", "(", "s2_fixed", ",", "s2_dynamic", ")", ",", "dim", "=", "1", ")", "\n", "\n", "A", "=", "F", ".", "softmax", "(", "s2_cat", ".", "t", "(", ")", ",", "dim", "=", "1", ")", "\n", "M", "=", "torch", ".", "mm", "(", "A", ",", "H", ")", "\n", "\n", "# if self.is_cuda:", "\n", "#     I = Variable(torch.eye(self.num_attn_heads).cuda())", "\n", "# else:", "\n", "#     I = Variable(torch.eye(self.num_attn_heads))", "\n", "\n", "AAt", "=", "torch", ".", "mm", "(", "A", ",", "A", ".", "t", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "num_attn_heads", ")", ":", "\n", "                ", "AAt", "[", "j", ",", "j", "]", "=", "0", "\n", "", "p", "=", "torch", ".", "norm", "(", "AAt", ",", "2", ")", "\n", "penal", "+=", "p", "*", "p", "\n", "\n", "\n", "", "penal", "/=", "batch_size", "\n", "# Mean-reduce the 1st (sequence) dimension", "\n", "#sentence_embedding = torch.mean(M, 0) #size [80]", "\n", "sentence_embedding", "=", "M", ".", "view", "(", "-", "1", ")", "\n", "sentence_embeddings", "[", "i", "]", "=", "sentence_embedding", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "n_batch", "%", "2000", "==", "0", ":", "\n", "            ", "str_id", "=", "word_ids", "[", "-", "1", "]", "[", ":", "length", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "instr", "=", "[", "self", ".", "idx2word", "[", "str", "(", "i", ")", "]", "for", "i", "in", "str_id", "]", "\n", "Att", "=", "A", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "filepath", "=", "get_self_attention_path", "(", ")", "+", "\"sample_instructions/sample_intr-{}-{}.txt\"", ".", "format", "(", "self", ".", "n_epoch", ",", "self", ".", "n_batch", ")", "\n", "# with open(filepath, \"w\") as f:", "\n", "#     for w in zip(instr, Att[0], Att[1], Att[2], Att[3], Att[4]):", "\n", "#         f.write(str(w)+\"\\n\")", "\n", "\n", "imgpath", "=", "get_self_attention_path", "(", ")", "+", "\"instruction_heatmap/intr_heatmap-{}-{}.png\"", ".", "format", "(", "self", ".", "n_epoch", ",", "self", ".", "n_batch", ")", "\n", "\n", "# plt.close()", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "len", "(", "instr", ")", "/", "6", ",", "1.8", ")", ")", "\n", "plt", ".", "pcolor", "(", "Att", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "linspace", "(", "0.5", ",", "len", "(", "instr", ")", "-", "0.5", ",", "len", "(", "instr", ")", ")", ",", "instr", ",", "rotation", "=", "90", ",", "fontsize", "=", "10", ")", "\n", "plt", ".", "gcf", "(", ")", ".", "subplots_adjust", "(", "bottom", "=", "0.5", ")", "\n", "plt", ".", "savefig", "(", "imgpath", ")", "\n", "# plt.show()", "\n", "self", ".", "n_batch", "+=", "1", "\n", "\n", "", "return", "sentence_embeddings", ",", "penal", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.__init__": [[16, 46], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "word_embedding_size", ",", "\n", "lstm_size", ",", "\n", "lstm_layers", "=", "1", ",", "\n", "attention_heads", "=", "5", ",", "\n", "run_name", "=", "\"\"", ",", "BiLSTM", "=", "True", ",", "\n", "dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "SentenceEmbeddingSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_layers", "=", "lstm_layers", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "VOCAB_SIZE", ",", "word_embedding_size", ",", "sparse", "=", "False", ")", "\n", "self", ".", "BiLSTM", "=", "BiLSTM", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "factor", "=", "(", "2", "if", "self", ".", "BiLSTM", "else", "1", ")", "\n", "self", ".", "lstm_txt", "=", "nn", ".", "LSTM", "(", "word_embedding_size", ",", "self", ".", "lstm_size", ",", "self", ".", "lstm_layers", ",", "bidirectional", "=", "BiLSTM", ",", "dropout", "=", "0.5", ")", "\n", "self", ".", "Da", "=", "25", "\n", "# TODO: Make sure the overall embedding is of the size requested", "\n", "self", ".", "num_attn_heads", "=", "attention_heads", "\n", "self", ".", "W_s1", "=", "nn", ".", "Linear", "(", "self", ".", "factor", "*", "self", ".", "lstm_size", ",", "self", ".", "Da", ",", "bias", "=", "False", ")", "\n", "self", ".", "W_s2", "=", "nn", ".", "Linear", "(", "self", ".", "Da", ",", "self", ".", "num_attn_heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "# self.W_s1 = nn.Parameter(torch.ones(self.Da, self.factor * self.lstm_size))", "\n", "# self.W_s2 = nn.Parameter(torch.ones(self.num_attn_heads, self.Da))", "\n", "\n", "# TODO: Use the proper way of loading this", "\n", "# self.idx2word = pickle.load(open(get_self_attention_path()+\"idx2word.pickle\", \"rb\"))", "\n", "self", ".", "idx2word", "=", "None", "\n", "\n", "self", ".", "n_epoch", "=", "0", "\n", "self", ".", "n_batch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.init_weights": [[48, 56], ["sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.embedding.weight.data.normal_", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.lstm_txt.named_parameters", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "#self.embedding.weight.data.uniform_(-0.1, 0.1)", "\n", "for", "name", ",", "param", "in", "self", ".", "lstm_txt", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.save_att_map": [[57, 61], ["None"], "methods", ["None"], ["", "", "", "def", "save_att_map", "(", "self", ",", "batch_num", ",", "epoch_num", ")", ":", "\n", "        ", "self", ".", "n_batch", "=", "batch_num", "\n", "self", ".", "n_epoch", "=", "epoch_num", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.forward": [[62, 128], ["sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.embedding", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.mm.view", "torch.mm.view", "torch.mm.view", "torch.mm.view.squeeze", "isinstance", "learning.inputs.sequence.sequence_list_to_tensor", "learning.inputs.common.empty_float_tensor", "int", "word_embeddings[].unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.lstm_txt", "outputs.squeeze", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.W_s1", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.W_s2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "range", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "[].data.cpu().numpy", "torch.softmax.data.cpu().numpy", "matplotlib.figure", "matplotlib.pcolor", "matplotlib.xticks", "matplotlib.gcf().subplots_adjust", "matplotlib.savefig", "word_ids.cuda.cuda.cuda", "lengths.cuda.cuda.cuda", "print", "learning.inputs.common.empty_float_tensor", "learning.inputs.common.empty_float_tensor", "states[].squeeze", "states[].squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.t", "torch.softmax.t", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.", "sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.SentenceEmbeddingSelfAttention.", "numpy.linspace", "[].data.cpu", "torch.softmax.data.cpu", "len", "matplotlib.gcf", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_list_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "forward", "(", "self", ",", "word_ids", ",", "lengths", "=", "None", ")", ":", "\n", "# TODO: Get rid of this and abstract in another layer", "\n", "\n", "        ", "if", "isinstance", "(", "word_ids", ",", "list", ")", "and", "lengths", "is", "None", ":", "\n", "            ", "word_ids", ",", "lengths", "=", "sequence_list_to_tensor", "(", "[", "word_ids", "]", ")", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "word_ids", "=", "word_ids", ".", "cuda", "(", ")", "#size: [2, 500] [batch size, max intruction len]", "\n", "lengths", "=", "lengths", ".", "cuda", "(", ")", "#instruction length", "\n", "", "", "word_embeddings", "=", "self", ".", "embedding", "(", "word_ids", ")", "#size: [2, 500, 20] embedding size: 20", "\n", "batch_size", "=", "word_embeddings", ".", "size", "(", "0", ")", "# size:2", "\n", "sentence_embeddings", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "self", ".", "lstm_size", "*", "self", ".", "factor", "*", "self", ".", "num_attn_heads", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "#size [2,80]", "\n", "\n", "penal", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "length", "=", "int", "(", "lengths", "[", "i", "]", ")", "\n", "if", "length", "==", "0", ":", "\n", "                ", "print", "(", "\"Empty caption\"", ")", "\n", "continue", "\n", "", "embeddings_i", "=", "word_embeddings", "[", "i", ",", "0", ":", "length", "]", ".", "unsqueeze", "(", "1", ")", "# size: [instruction length, 1, 20]", "\n", "h0", "=", "Variable", "(", "empty_float_tensor", "(", "(", "self", ".", "lstm_layers", "*", "self", ".", "factor", ",", "1", ",", "self", ".", "lstm_size", ")", ",", "self", ".", "is_cuda", ")", ")", "#size: [2, 1, 40]", "\n", "c0", "=", "Variable", "(", "empty_float_tensor", "(", "(", "self", ".", "lstm_layers", "*", "self", ".", "factor", ",", "1", ",", "self", ".", "lstm_size", ")", ",", "self", ".", "is_cuda", ")", ")", "#size: [2, 1, 40]", "\n", "outputs", ",", "states", "=", "self", ".", "lstm_txt", "(", "embeddings_i", ",", "(", "h0", ",", "c0", ")", ")", "#output size: [intr_len, 1, 80]  #2 states: forward and backwward.  size: [2, 1, 40]", "\n", "H", "=", "outputs", ".", "squeeze", "(", "dim", "=", "1", ")", "#size: [instr_len, 80]", "\n", "hidden", ",", "cell", "=", "(", "states", "[", "0", "]", ".", "squeeze", "(", "dim", "=", "1", ")", ",", "states", "[", "1", "]", ".", "squeeze", "(", "dim", "=", "1", ")", ")", "#size: 2x[2,40]", "\n", "\n", "#self-attention", "\n", "s1", "=", "self", ".", "W_s1", "(", "H", ")", "\n", "s2", "=", "self", ".", "W_s2", "(", "F", ".", "tanh", "(", "s1", ")", ")", "\n", "A", "=", "F", ".", "softmax", "(", "s2", ".", "t", "(", ")", ",", "dim", "=", "1", ")", "\n", "M", "=", "torch", ".", "mm", "(", "A", ",", "H", ")", "\n", "\n", "AAt", "=", "torch", ".", "mm", "(", "A", ",", "A", ".", "t", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "num_attn_heads", ")", ":", "\n", "                ", "AAt", "[", "j", ",", "j", "]", "=", "0", "\n", "", "p", "=", "torch", ".", "norm", "(", "AAt", ",", "2", ")", "\n", "penal", "+=", "p", "*", "p", "\n", "\n", "\n", "", "penal", "/=", "batch_size", "\n", "# Mean-reduce the 1st (sequence) dimension", "\n", "#sentence_embedding = torch.mean(M, 0) #size [80]", "\n", "sentence_embedding", "=", "M", ".", "view", "(", "-", "1", ")", "\n", "sentence_embeddings", "[", "i", "]", "=", "sentence_embedding", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "n_batch", "%", "2000", "==", "0", "and", "self", ".", "idx2word", "is", "not", "None", ":", "\n", "            ", "str_id", "=", "word_ids", "[", "-", "1", "]", "[", ":", "length", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "instr", "=", "[", "self", ".", "idx2word", "[", "str", "(", "i", ")", "]", "for", "i", "in", "str_id", "]", "\n", "Att", "=", "A", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "filepath", "=", "get_self_attention_path", "(", ")", "+", "\"sample_instructions/sample_intr-{}-{}.txt\"", ".", "format", "(", "self", ".", "n_epoch", ",", "self", ".", "n_batch", ")", "\n", "# with open(filepath, \"w\") as f:", "\n", "#     for w in zip(instr, Att[0], Att[1], Att[2], Att[3], Att[4]):", "\n", "#         f.write(str(w)+\"\\n\")", "\n", "\n", "imgpath", "=", "get_self_attention_path", "(", ")", "+", "\"instruction_heatmap/intr_heatmap-{}-{}.png\"", ".", "format", "(", "self", ".", "n_epoch", ",", "self", ".", "n_batch", ")", "\n", "\n", "# plt.close()", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "len", "(", "instr", ")", "/", "6", ",", "1.8", ")", ")", "\n", "plt", ".", "pcolor", "(", "Att", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "linspace", "(", "0.5", ",", "len", "(", "instr", ")", "-", "0.5", ",", "len", "(", "instr", ")", ")", ",", "instr", ",", "rotation", "=", "90", ",", "fontsize", "=", "10", ")", "\n", "plt", ".", "gcf", "(", ")", ".", "subplots_adjust", "(", "bottom", "=", "0.5", ")", "\n", "plt", ".", "savefig", "(", "imgpath", ")", "\n", "# plt.show()", "\n", "self", ".", "n_batch", "+=", "1", "\n", "\n", "", "return", "sentence_embeddings", ",", "penal", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.conditional_sentence_embedding_simple.SentenceEmbeddingSimple.__init__": [[13, 19], ["learning.modules.module_base.ModuleBase.__init__", "torch.Embedding", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "word_embedding_size", ",", "lstm_size", ",", "lstm_layers", "=", "1", ",", "run_name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", "SentenceEmbeddingSimple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_layers", "=", "lstm_layers", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "deprecated", ".", "config", ".", "vocab_size", ",", "word_embedding_size", ",", "sparse", "=", "False", ")", "\n", "self", ".", "lstm_txt", "=", "nn", ".", "LSTM", "(", "word_embedding_size", ",", "lstm_size", ",", "lstm_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.conditional_sentence_embedding_simple.SentenceEmbeddingSimple.init_weights": [[20, 28], ["conditional_sentence_embedding_simple.SentenceEmbeddingSimple.embedding.weight.data.normal_", "conditional_sentence_embedding_simple.SentenceEmbeddingSimple.lstm_txt.named_parameters", "torch.init.constant", "torch.init.xavier_normal"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "#self.embedding.weight.data.uniform_(-0.1, 0.1)", "\n", "for", "name", ",", "param", "in", "self", ".", "lstm_txt", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.conditional_sentence_embedding_simple.SentenceEmbeddingSimple.forward": [[29, 55], ["conditional_sentence_embedding_simple.SentenceEmbeddingSimple.embedding", "conditional_sentence_embedding_simple.SentenceEmbeddingSimple.size", "torch.autograd.Variable", "range", "isinstance", "learning.inputs.sequence.sequence_list_to_tensor", "learning.inputs.common.empty_float_tensor", "int", "word_embeddings[].unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "conditional_sentence_embedding_simple.SentenceEmbeddingSimple.lstm_txt", "sentence_embedding.squeeze", "word_ids.cuda.cuda.cuda", "lengths.cuda.cuda.cuda", "learning.inputs.common.empty_float_tensor", "learning.inputs.common.empty_float_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.sequence_list_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "", "", "def", "forward", "(", "self", ",", "word_ids", ",", "lengths", "=", "None", ")", ":", "\n", "# TODO: Get rid of this and abstract in another layer", "\n", "        ", "if", "isinstance", "(", "word_ids", ",", "list", ")", "and", "lengths", "is", "None", ":", "\n", "            ", "word_ids", ",", "lengths", "=", "sequence_list_to_tensor", "(", "[", "word_ids", "]", ")", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "word_ids", "=", "word_ids", ".", "cuda", "(", ")", "\n", "lengths", "=", "lengths", ".", "cuda", "(", ")", "\n", "", "", "word_embeddings", "=", "self", ".", "embedding", "(", "word_ids", ")", "\n", "batch_size", "=", "word_embeddings", ".", "size", "(", "0", ")", "\n", "\n", "sentence_embeddings", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "self", ".", "lstm_size", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "length", "=", "int", "(", "lengths", "[", "i", "]", ")", "\n", "if", "length", "==", "0", ":", "\n", "#print(\"Empty caption\")", "\n", "                ", "continue", "\n", "", "embeddings_i", "=", "word_embeddings", "[", "i", ",", "0", ":", "length", "]", ".", "unsqueeze", "(", "1", ")", "\n", "h0", "=", "Variable", "(", "empty_float_tensor", "(", "(", "self", ".", "lstm_layers", ",", "1", ",", "self", ".", "lstm_size", ")", ",", "self", ".", "is_cuda", ")", ")", "\n", "c0", "=", "Variable", "(", "empty_float_tensor", "(", "(", "self", ".", "lstm_layers", ",", "1", ",", "self", ".", "lstm_size", ")", ",", "self", ".", "is_cuda", ")", ")", "\n", "outputs", ",", "states", "=", "self", ".", "lstm_txt", "(", "embeddings_i", ",", "(", "h0", ",", "c0", ")", ")", "\n", "# Mean-reduce the 1st (sequence) dimension", "\n", "sentence_embedding", "=", "outputs", "[", "-", "1", "]", "#torch.mean(outputs, 0)", "\n", "sentence_embeddings", "[", "i", "]", "=", "sentence_embedding", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "sentence_embeddings", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.BCEWithLogitsLoss.__init__": [[99, 104], ["torch.nn.Module.__init__", "sentence_embedding_loss.BCEWithLogitsLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "super", "(", "BCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "reduce", "=", "reduce", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.BCEWithLogitsLoss.forward": [[105, 117], ["sentence_embedding_loss.binary_cross_entropy_with_logits", "sentence_embedding_loss.binary_cross_entropy_with_logits", "torch.autograd.Variable", "isinstance"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.binary_cross_entropy_with_logits", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.binary_cross_entropy_with_logits"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "var", "=", "Variable", "(", "self", ".", "weight", ")", "if", "not", "isinstance", "(", "self", ".", "weight", ",", "Variable", ")", "else", "self", ".", "weight", "\n", "return", "binary_cross_entropy_with_logits", "(", "input", ",", "target", ",", "\n", "var", ",", "\n", "self", ".", "size_average", ",", "\n", "reduce", "=", "self", ".", "reduce", ")", "\n", "", "else", ":", "\n", "            ", "return", "binary_cross_entropy_with_logits", "(", "input", ",", "target", ",", "\n", "size_average", "=", "self", ".", "size_average", ",", "\n", "\n", "reduce", "=", "self", ".", "reduce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.BCELoss.__init__": [[221, 224], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "super", "(", "BCELoss", ",", "self", ")", ".", "__init__", "(", "weight", ",", "size_average", ")", "\n", "self", ".", "reduce", "=", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.BCELoss.forward": [[225, 231], ["sentence_embedding_loss._assert_no_grad", "sentence_embedding_loss.binary_cross_entropy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss._assert_no_grad", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.binary_cross_entropy"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "_assert_no_grad", "(", "target", ")", "\n", "return", "binary_cross_entropy", "(", "input", ",", "target", ",", "weight", "=", "self", ".", "weight", ",", "\n", "size_average", "=", "self", ".", "size_average", ",", "\n", "\n", "reduce", "=", "self", ".", "reduce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.binary_cross_entropy_with_logits": [[10, 53], ["ValueError", "target.size", "input.size", "loss.mean", "loss.sum", "target.size", "input.size"], "function", ["None"], ["def", "binary_cross_entropy_with_logits", "(", "input", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Function that measures Binary Cross Entropy between target and output\n    logits.\n\n    See :class:`~torch.nn.BCEWithLogitsLoss` for details.\n\n    Args:\n        input: Variable of arbitrary shape\n        target: Variable of the same shape as input\n        weight (Variable, optional): a manual rescaling weight\n                if provided it's repeated to match input tensor shape\n        size_average (bool, optional): By default, the losses are averaged\n                over observations for each minibatch. However, if the field\n                :attr:`size_average` is set to ``False``, the losses are instead summed\n                for each minibatch. Default: ``True``\n        reduce (bool, optional): By default, the losses are averaged or summed over\n                observations for each minibatch depending on :attr:`size_average`. When :attr:`reduce`\n                is ``False``, returns a loss per input/target element instead and ignores\n                :attr:`size_average`. Default: ``True``\n\n    Examples::\n\n         >>> input = torch.randn(3, requires_grad=True)\n         >>> target = torch.FloatTensor(3).random_(2)\n         >>> loss = F.binary_cross_entropy_with_logits(input, target)\n         >>> loss.backward()\n    \"\"\"", "\n", "if", "not", "(", "target", ".", "size", "(", ")", "==", "input", ".", "size", "(", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Target size ({}) must be the same as input size ({})\"", ".", "format", "(", "target", ".", "size", "(", ")", ",", "input", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "max_val", "=", "(", "-", "input", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "loss", "=", "input", "-", "input", "*", "target", "+", "max_val", "+", "(", "(", "-", "max_val", ")", ".", "exp", "(", ")", "+", "(", "-", "input", "-", "max_val", ")", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "loss", "=", "loss", "*", "weight", "\n", "\n", "", "if", "not", "reduce", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "size_average", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss._assert_no_grad": [[120, 123], ["None"], "function", ["None"], ["", "", "", "def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "    ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.binary_cross_entropy": [[127, 168], ["torch._C._nn.binary_cross_entropy", "warnings.warn", "input.nelement", "target.nelement", "ValueError", "torch._C._infer_size", "weight.expand.expand", "torch.is_tensor", "target.size", "input.size", "target.size", "weight.expand.size", "target.size", "input.size", "target.nelement", "input.nelement"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_loss.binary_cross_entropy"], ["", "def", "binary_cross_entropy", "(", "input", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Function that measures the Binary Cross Entropy\n    between the target and the output.\n\n    See :class:`~torch.nn.BCELoss` for details.\n\n    Args:\n        input: Variable of arbitrary shape\n        target: Variable of the same shape as input\n        weight (Variable, optional): a manual rescaling weight\n                if provided it's repeated to match input tensor shape\n        size_average (bool, optional): By default, the losses are averaged\n                over observations for each minibatch. However, if the field\n                :attr:`size_average` is set to ``False``, the losses are instead summed\n                for each minibatch. Default: ``True``\n        reduce (bool, optional): By default, the losses are averaged or summed over\n                observations for each minibatch depending on :attr:`size_average`. When :attr:`reduce`\n                is ``False``, returns a loss per input/target element instead and ignores\n                :attr:`size_average`. Default: ``True``\n\n    Examples::\n\n        >>> input = torch.randn(3, requires_grad=True)\n        >>> target = torch.LongTensor(3).random_(2)\n        >>> loss = F.binary_cross_entropy(F.sigmoid(input), target)\n        >>> loss.backward()\n    \"\"\"", "\n", "if", "not", "(", "target", ".", "size", "(", ")", "==", "input", ".", "size", "(", ")", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Using a target size ({}) that is different to the input size ({}) is deprecated. \"", "\n", "\"Please ensure they have the same size.\"", ".", "format", "(", "target", ".", "size", "(", ")", ",", "input", ".", "size", "(", ")", ")", ")", "\n", "", "if", "input", ".", "nelement", "(", ")", "!=", "target", ".", "nelement", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Target and input must have the same number of elements. target nelement ({}) \"", "\n", "\"!= input nelement ({})\"", ".", "format", "(", "target", ".", "nelement", "(", ")", ",", "input", ".", "nelement", "(", ")", ")", ")", "\n", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "new_size", "=", "_infer_size", "(", "target", ".", "size", "(", ")", ",", "weight", ".", "size", "(", ")", ")", "\n", "weight", "=", "weight", ".", "expand", "(", "new_size", ")", "\n", "if", "torch", ".", "is_tensor", "(", "weight", ")", ":", "\n", "            ", "weight", "=", "weight", "\n", "\n", "", "", "return", "torch", ".", "_C", ".", "_nn", ".", "binary_cross_entropy", "(", "input", ",", "target", ",", "weight", ",", "size_average", ",", "reduce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_accumulation.identity_accumulator.IdentityMapAccumulator.__init__": [[10, 13], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", ":", "\n", "        ", "super", "(", "IdentityMapAccumulator", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "child_transformer", "=", "MapTransformerBase", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_accumulation.identity_accumulator.IdentityMapAccumulator.reset": [[14, 17], ["super().reset", "identity_accumulator.IdentityMapAccumulator.child_transformer.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "IdentityMapAccumulator", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "child_transformer", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_accumulation.identity_accumulator.IdentityMapAccumulator.cuda": [[18, 22], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "identity_accumulator.IdentityMapAccumulator.child_transformer.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "child_transformer", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_accumulation.identity_accumulator.IdentityMapAccumulator.init_weights": [[23, 25], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_accumulation.identity_accumulator.IdentityMapAccumulator.forward": [[26, 69], ["len", "range", "torch.cat", "identity_accumulator.IdentityMapAccumulator.set_maps", "identity_accumulator.IdentityMapAccumulator.set_maps", "identity_accumulator.IdentityMapAccumulator.get_map", "torch.cat.append", "identity_accumulator.IdentityMapAccumulator.set_map", "identity_accumulator.IdentityMapAccumulator.get_map", "identity_accumulator.IdentityMapAccumulator.set_map", "identity_accumulator.IdentityMapAccumulator.child_transformer.set_map", "identity_accumulator.IdentityMapAccumulator.child_transformer.get_map", "identity_accumulator.IdentityMapAccumulator.set_map", "visualization.Presenter().show_image", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "forward", "(", "self", ",", "current_maps", ",", "coverages", ",", "cam_poses", ",", "add_mask", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "cam_poses", ")", "\n", "\n", "assert", "add_mask", "is", "None", "or", "add_mask", "[", "0", "]", "is", "not", "None", ",", "\"The first observation in a sequence needs to be used!\"", "\n", "\n", "# If we don't have masked observations, just return each timestep observations", "\n", "if", "add_mask", "is", "None", ":", "\n", "            ", "self", ".", "set_maps", "(", "current_maps", ",", "cam_poses", ")", "\n", "return", "current_maps", ",", "cam_poses", "\n", "\n", "", "maps_r", "=", "[", "]", "\n", "\n", "# If we have masked observations, then for timesteps where observation is masked (False), get the previous observation", "\n", "# rotated to the current frame", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "# If we don't have a map yet, rotate this observation and initialize a map", "\n", "            ", "if", "self", ".", "latest_map", "is", "None", ":", "\n", "                ", "self", ".", "set_map", "(", "current_maps", "[", "i", ":", "i", "+", "1", "]", ",", "cam_poses", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "map_g", ",", "_", "=", "self", ".", "get_map", "(", "None", ")", "\n", "self", ".", "set_map", "(", "map_g", ",", "None", ")", "\n", "\n", "# Allow masking of observations", "\n", "", "if", "add_mask", "is", "None", "or", "add_mask", "[", "i", "]", ":", "\n", "# Transform the observation into the global (map) frame", "\n", "                ", "self", ".", "child_transformer", ".", "set_map", "(", "current_maps", "[", "i", ":", "i", "+", "1", "]", ",", "cam_poses", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "obs_g", ",", "_", "=", "self", ".", "child_transformer", ".", "get_map", "(", "None", ")", "\n", "\n", "# Remember this new map", "\n", "self", ".", "set_map", "(", "obs_g", ",", "None", ")", "\n", "\n", "# Return this map in the camera frame of reference", "\n", "", "map_r", ",", "_", "=", "self", ".", "get_map", "(", "cam_poses", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "map_r", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "\n", "", "maps_r", ".", "append", "(", "map_r", ")", "\n", "\n", "", "maps_r", "=", "torch", ".", "cat", "(", "maps_r", ",", "dim", "=", "0", ")", "\n", "self", ".", "set_maps", "(", "maps_r", ",", "cam_poses", ")", "\n", "\n", "return", "maps_r", ",", "cam_poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_valuehead.PVN_Stage2_ValueHead.__init__": [[7, 10], ["torch.Module.__init__", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "h2", "=", "128", ")", ":", "\n", "        ", "super", "(", "PVN_Stage2_ValueHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "h2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_valuehead.PVN_Stage2_ValueHead.init_weights": [[11, 13], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_valuehead.PVN_Stage2_ValueHead.forward": [[14, 17], ["pvn_stage2_valuehead.PVN_Stage2_ValueHead.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "features", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_actionhead.PVN_Stage2_ActionHead.__init__": [[7, 10], ["torch.Module.__init__", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ",", "h2", "=", "128", ")", ":", "\n", "        ", "super", "(", "PVN_Stage2_ActionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "h2", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_actionhead.PVN_Stage2_ActionHead.init_weights": [[11, 13], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_actionhead.PVN_Stage2_ActionHead.forward": [[14, 17], ["pvn_stage2_actionhead.PVN_Stage2_ActionHead.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "features", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_rlbase.PVN_Stage2_RLBase.__init__": [[9, 41], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "print", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.AvgPool2d", "torch.AvgPool2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_channels", "=", "1", ",", "map_struct_channels", "=", "1", ",", "map_size", "=", "32", ",", "crop_size", "=", "16", ",", "h1", "=", "8", ",", "structure_h1", "=", "8", ",", "h2", "=", "128", ",", "obs_dim", "=", "16", ",", "name", "=", "\"base\"", ")", ":", "\n", "        ", "super", "(", "PVN_Stage2_RLBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "map_channels", "=", "map_channels", "\n", "self", ".", "map_structure_channels", "=", "map_struct_channels", "\n", "self", ".", "map_size", "=", "map_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "name", "=", "name", "\n", "\n", "gap", "=", "int", "(", "(", "map_size", "-", "crop_size", ")", "/", "2", ")", "\n", "self", ".", "crop_l", "=", "gap", "\n", "self", ".", "crop_r", "=", "map_size", "-", "gap", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "map_channels", ",", "h1", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "structconv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "map_structure_channels", ",", "structure_h1", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "linear_in", "=", "int", "(", "(", "(", "self", ".", "crop_size", "/", "2", ")", "**", "2", ")", "*", "h1", ")", "+", "(", "8", "*", "8", "*", "structure_h1", ")", "+", "2", "*", "obs_dim", "# map channels + coverage channels + observability encoding channels", "\n", "print", "(", "f\"Stage 2 linear input size: {linear_in}\"", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "linear_in", ",", "h2", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "h2", "+", "linear_in", ",", "h2", ")", "\n", "\n", "self", ".", "goal_in_vec", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "obs_dim", ")", ")", "\n", "self", ".", "goal_out_vec", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "obs_dim", ")", ")", "\n", "self", ".", "visit_in_vec", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "obs_dim", ")", ")", "\n", "self", ".", "visit_out_vec", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "obs_dim", ")", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "4", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "h1", ")", "\n", "self", ".", "covnorm1", "=", "nn", ".", "InstanceNorm2d", "(", "structure_h1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_rlbase.PVN_Stage2_RLBase.init_weights": [[42, 47], ["pvn_stage2_rlbase.PVN_Stage2_RLBase.goal_in_vec.data.normal_", "pvn_stage2_rlbase.PVN_Stage2_RLBase.goal_out_vec.data.copy_", "pvn_stage2_rlbase.PVN_Stage2_RLBase.visit_in_vec.data.normal_", "pvn_stage2_rlbase.PVN_Stage2_RLBase.visit_out_vec.data.copy_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "goal_in_vec", ".", "data", ".", "normal_", "(", "0", ",", "1.0", ")", "\n", "self", ".", "goal_out_vec", ".", "data", ".", "copy_", "(", "-", "self", ".", "goal_in_vec", ".", "data", ")", "\n", "self", ".", "visit_in_vec", ".", "data", ".", "normal_", "(", "0", ",", "1.0", ")", "\n", "self", ".", "visit_out_vec", ".", "data", ".", "copy_", "(", "-", "self", ".", "visit_in_vec", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_rlbase.PVN_Stage2_RLBase.backward_hook": [[48, 51], ["print", "grad.max", "grad.min", "grad.mean"], "methods", ["None"], ["", "def", "backward_hook", "(", "self", ",", "name", ",", "grad", ")", ":", "\n", "        ", "if", "False", ":", "\n", "            ", "print", "(", "f\"Grad stats {self.name}/{name}: {grad.max()} {grad.min()} {grad.mean()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.pvn.pvn_stage2_rlbase.PVN_Stage2_RLBase.forward": [[52, 100], ["[].repeat", "[].repeat", "[].repeat", "[].repeat", "maps_r.outer_prob_mass[].detach", "maps_r.outer_prob_mass[].detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pvn_stage2_rlbase.PVN_Stage2_RLBase.avgpool", "pvn_stage2_rlbase.PVN_Stage2_RLBase.act", "pvn_stage2_rlbase.PVN_Stage2_RLBase.norm1", "pvn_stage2_rlbase.PVN_Stage2_RLBase.act", "pvn_stage2_rlbase.PVN_Stage2_RLBase.covnorm1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pvn_stage2_rlbase.PVN_Stage2_RLBase.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pvn_stage2_rlbase.PVN_Stage2_RLBase.act", "conv_in[].data.cpu().numpy().transpose", "visualization.Presenter().show_image", "pvn_stage2_rlbase.PVN_Stage2_RLBase.conv1", "pvn_stage2_rlbase.PVN_Stage2_RLBase.structconv1", "pvn_stage2_rlbase.PVN_Stage2_RLBase.linear1", "pvn_stage2_rlbase.PVN_Stage2_RLBase.linear2", "numpy.max", "numpy.max", "numpy.max", "pvn_stage2_rlbase.PVN_Stage2_RLBase.goal_in_vec.detach", "pvn_stage2_rlbase.PVN_Stage2_RLBase.goal_out_vec.detach", "pvn_stage2_rlbase.PVN_Stage2_RLBase.visit_in_vec.detach", "pvn_stage2_rlbase.PVN_Stage2_RLBase.visit_out_vec.detach", "conv_in[].data.cpu().numpy", "visualization.Presenter", "conv_in[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "", "def", "forward", "(", "self", ",", "maps_r", ",", "map_structure_r", ")", ":", "\n", "        ", "maps_r_cropped", "=", "maps_r", ".", "inner_distribution", "[", ":", ",", ":", ",", "self", ".", "crop_l", ":", "self", ".", "crop_r", ",", "self", ".", "crop_l", ":", "self", ".", "crop_r", "]", "\n", "batch_size", "=", "maps_r", ".", "inner_distribution", ".", "shape", "[", "0", "]", "\n", "\n", "# Create a context vector that encodes goal observability", "\n", "# Don't backprop into the embedding vectors - don't risk losing the only input we have", "\n", "gin", "=", "self", ".", "goal_in_vec", ".", "detach", "(", ")", "[", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "gout", "=", "self", ".", "goal_out_vec", ".", "detach", "(", ")", "[", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "vin", "=", "self", ".", "visit_in_vec", ".", "detach", "(", ")", "[", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "vout", "=", "self", ".", "visit_out_vec", ".", "detach", "(", ")", "[", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "p_visit_out", "=", "maps_r", ".", "outer_prob_mass", "[", ":", ",", "0", ":", "1", "]", ".", "detach", "(", ")", "\n", "p_goal_out", "=", "maps_r", ".", "outer_prob_mass", "[", ":", ",", "1", ":", "2", "]", ".", "detach", "(", ")", "\n", "\n", "g_context_vec", "=", "gout", "*", "p_goal_out", "+", "gin", "*", "(", "1", "-", "p_goal_out", ")", "\n", "v_context_vec", "=", "vout", "*", "p_visit_out", "+", "vin", "*", "(", "1", "-", "p_visit_out", ")", "\n", "obs_context_vec", "=", "torch", ".", "cat", "(", "[", "g_context_vec", ",", "v_context_vec", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# 64x64 -> 16x16", "\n", "uncov_r_pooled", "=", "self", ".", "avgpool", "(", "map_structure_r", ")", "\n", "\n", "if", "False", ":", "\n", "            ", "conv_in_np", "=", "conv_in", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "# expand to 0-1 range", "\n", "conv_in_np", "[", ":", ",", ":", ",", "0", "]", "/=", "(", "np", ".", "max", "(", "conv_in_np", "[", ":", ",", ":", ",", "0", "]", ")", "+", "1e-10", ")", "\n", "conv_in_np", "[", ":", ",", ":", ",", "1", "]", "/=", "(", "np", ".", "max", "(", "conv_in_np", "[", ":", ",", ":", ",", "1", "]", ")", "+", "1e-10", ")", "\n", "conv_in_np", "[", ":", ",", ":", ",", "2", "]", "/=", "(", "np", ".", "max", "(", "conv_in_np", "[", ":", ",", ":", ",", "2", "]", ")", "+", "1e-10", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "conv_in_np", ",", "\"rl_conv_in\"", ",", "scale", "=", "2", ")", "\n", "#Presenter().show_image(uncov_r_pooled[0], \"uncov_pooled\", scale=4)", "\n", "\n", "# From 16x16 down to 8x8", "\n", "", "x", "=", "self", ".", "act", "(", "self", ".", "conv1", "(", "maps_r_cropped", ")", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "\n", "# From 16x16 down to 8x8", "\n", "c", "=", "self", ".", "act", "(", "self", ".", "structconv1", "(", "uncov_r_pooled", ")", ")", "\n", "c", "=", "self", ".", "covnorm1", "(", "c", ")", "\n", "\n", "comb_map", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "lin_in", "=", "comb_map", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "lin_in", "=", "torch", ".", "cat", "(", "[", "lin_in", ",", "obs_context_vec", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "linear1", "(", "lin_in", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "lin_in", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "linear2", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.gs_fpv.recurrent_embedding.RecurrentEmbedding.__init__": [[9, 22], ["torch.Module.__init__", "torch.nn.LSTM", "torch.nn.LSTM", "recurrent_embedding.RecurrentEmbedding.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "RecurrentEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lstm", "=", "LSTM", "(", "input_size", ",", "hidden_size", ",", "1", ",", "True", ",", "False", ",", "0", ",", "False", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "last_h", "=", "None", "\n", "self", ".", "last_c", "=", "None", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "dbg_t", "=", "None", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.gs_fpv.recurrent_embedding.RecurrentEmbedding.init_weights": [[23, 25], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.gs_fpv.recurrent_embedding.RecurrentEmbedding.reset": [[26, 29], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next", "recurrent_embedding.RecurrentEmbedding.parameters", "recurrent_embedding.RecurrentEmbedding.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "last_h", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "self", ".", "hidden_size", "]", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "self", ".", "last_c", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "self", ".", "hidden_size", "]", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.gs_fpv.recurrent_embedding.RecurrentEmbedding.forward": [[30, 35], ["recurrent_embedding.RecurrentEmbedding.lstm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "lstm", "(", "inputs", ",", "(", "self", ".", "last_h", ",", "self", ".", "last_c", ")", ")", "\n", "self", ".", "last_h", "=", "outputs", "[", "1", "]", "[", "0", "]", "\n", "self", ".", "last_c", "=", "outputs", "[", "1", "]", "[", "1", "]", "\n", "return", "outputs", "[", "0", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15_comp.ResNet15Comp.__init__": [[8, 14], ["super().__init__", "learning.modules.resnet.resnet_15.ResNet15", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "res_channels", ",", "map_channels", ")", ":", "\n", "        ", "super", "(", "ResNet15Comp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resnet", "=", "ResNet15", "(", "res_channels", ")", "\n", "self", ".", "conv_end", "=", "nn", ".", "Conv2d", "(", "res_channels", ",", "map_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "map_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15_comp.ResNet15Comp.init_weights": [[15, 19], ["resnet_15_comp.ResNet15Comp.resnet.init_weights", "torch.nn.init.kaiming_uniform", "resnet_15_comp.ResNet15Comp.conv_end.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "resnet", ".", "init_weights", "(", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv_end", ".", "weight", ")", "\n", "self", ".", "conv_end", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15_comp.ResNet15Comp.forward": [[20, 25], ["resnet_15_comp.ResNet15Comp.resnet", "resnet_15_comp.ResNet15Comp.conv_end", "resnet_15_comp.ResNet15Comp.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "resnet", "(", "input", ")", "\n", "x", "=", "self", ".", "conv_end", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_comp.ResNet13Comp.__init__": [[8, 14], ["super().__init__", "learning.modules.resnet.resnet_13.ResNet13", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "res_channels", ",", "map_channels", ")", ":", "\n", "        ", "super", "(", "ResNet13Comp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resnet", "=", "ResNet13", "(", "res_channels", ")", "\n", "self", ".", "conv_end", "=", "nn", ".", "Conv2d", "(", "res_channels", ",", "map_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "map_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_comp.ResNet13Comp.init_weights": [[15, 19], ["resnet_13_comp.ResNet13Comp.resnet.init_weights", "torch.nn.init.kaiming_uniform", "resnet_13_comp.ResNet13Comp.conv_end.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "resnet", ".", "init_weights", "(", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv_end", ".", "weight", ")", "\n", "self", ".", "conv_end", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_comp.ResNet13Comp.forward": [[20, 25], ["resnet_13_comp.ResNet13Comp.resnet", "resnet_13_comp.ResNet13Comp.conv_end", "resnet_13_comp.ResNet13Comp.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "resnet", "(", "input", ")", "\n", "x", "=", "self", ".", "conv_end", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15.ResNet15.__init__": [[8, 24], ["super().__init__", "torch.nn.Conv2d", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ResNet15", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", ",", "3", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block15", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block25", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block3", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block35", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block4", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block45", "=", "ResBlock", "(", "channels", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15.ResNet15.init_weights": [[25, 38], ["resnet_15.ResNet15.block1.init_weights", "resnet_15.ResNet15.block2.init_weights", "resnet_15.ResNet15.block3.init_weights", "resnet_15.ResNet15.block4.init_weights", "resnet_15.ResNet15.block15.init_weights", "resnet_15.ResNet15.block25.init_weights", "resnet_15.ResNet15.block35.init_weights", "resnet_15.ResNet15.block45.init_weights", "torch.nn.init.kaiming_uniform", "resnet_15.ResNet15.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "self", ".", "block4", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "block15", ".", "init_weights", "(", ")", "\n", "self", ".", "block25", ".", "init_weights", "(", ")", "\n", "self", ".", "block35", ".", "init_weights", "(", ")", "\n", "self", ".", "block45", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15.ResNet15.forward": [[39, 51], ["resnet_15.ResNet15.conv1", "resnet_15.ResNet15.block1", "resnet_15.ResNet15.block15", "resnet_15.ResNet15.block2", "resnet_15.ResNet15.block25", "resnet_15.ResNet15.block3", "resnet_15.ResNet15.block35", "resnet_15.ResNet15.block4", "resnet_15.ResNet15.block45", "resnet_15.ResNet15.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block25", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block35", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block45", "(", "x", ")", "\n", "x", "=", "self", ".", "res_norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13.ResNet13.__init__": [[8, 26], ["super().__init__", "torch.nn.Conv2d", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "down_pad", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet13", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "down_padding", "=", "0", "\n", "if", "down_pad", ":", "\n", "            ", "down_padding", "=", "1", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block15", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block25", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block3", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block35", "=", "ResBlock", "(", "channels", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13.ResNet13.init_weights": [[27, 38], ["resnet_13.ResNet13.block1.init_weights", "resnet_13.ResNet13.block2.init_weights", "resnet_13.ResNet13.block3.init_weights", "resnet_13.ResNet13.block15.init_weights", "resnet_13.ResNet13.block25.init_weights", "resnet_13.ResNet13.block35.init_weights", "torch.nn.init.kaiming_uniform", "resnet_13.ResNet13.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "block15", ".", "init_weights", "(", ")", "\n", "self", ".", "block25", ".", "init_weights", "(", ")", "\n", "self", ".", "block35", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13.ResNet13.forward": [[39, 49], ["resnet_13.ResNet13.conv1", "resnet_13.ResNet13.block1", "resnet_13.ResNet13.block15", "resnet_13.ResNet13.block2", "resnet_13.ResNet13.block25", "resnet_13.ResNet13.block3", "resnet_13.ResNet13.block35", "resnet_13.ResNet13.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block25", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block35", "(", "x", ")", "\n", "x", "=", "self", ".", "res_norm", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_30.ResNet30.__init__": [[8, 34], ["super().__init__", "torch.nn.Conv2d", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "down_pad", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet30", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "down_padding", "=", "0", "\n", "if", "down_pad", ":", "\n", "            ", "down_padding", "=", "1", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block2", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block3", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block4", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "block5", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block6", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block7", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block8", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "block9", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block10", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block11", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block12", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_30.ResNet30.init_weights": [[35, 51], ["resnet_30.ResNet30.block1.init_weights", "resnet_30.ResNet30.block2.init_weights", "resnet_30.ResNet30.block3.init_weights", "resnet_30.ResNet30.block4.init_weights", "resnet_30.ResNet30.block5.init_weights", "resnet_30.ResNet30.block6.init_weights", "resnet_30.ResNet30.block7.init_weights", "resnet_30.ResNet30.block8.init_weights", "resnet_30.ResNet30.block9.init_weights", "resnet_30.ResNet30.block10.init_weights", "resnet_30.ResNet30.block11.init_weights", "resnet_30.ResNet30.block12.init_weights", "torch.nn.init.kaiming_uniform", "resnet_30.ResNet30.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "self", ".", "block4", ".", "init_weights", "(", ")", "\n", "self", ".", "block5", ".", "init_weights", "(", ")", "\n", "self", ".", "block6", ".", "init_weights", "(", ")", "\n", "self", ".", "block7", ".", "init_weights", "(", ")", "\n", "self", ".", "block8", ".", "init_weights", "(", ")", "\n", "self", ".", "block9", ".", "init_weights", "(", ")", "\n", "self", ".", "block10", ".", "init_weights", "(", ")", "\n", "self", ".", "block11", ".", "init_weights", "(", ")", "\n", "self", ".", "block12", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_30.ResNet30.forward": [[52, 68], ["resnet_30.ResNet30.conv1", "resnet_30.ResNet30.block1", "resnet_30.ResNet30.block2", "resnet_30.ResNet30.block3", "resnet_30.ResNet30.block4", "resnet_30.ResNet30.block5", "resnet_30.ResNet30.block6", "resnet_30.ResNet30.block7", "resnet_30.ResNet30.block8", "resnet_30.ResNet30.block9", "resnet_30.ResNet30.block10", "resnet_30.ResNet30.block11", "resnet_30.ResNet30.block12", "resnet_30.ResNet30.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "res_norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15_dilated.ResNet15.__init__": [[8, 24], ["super().__init__", "torch.nn.Conv2d", "learning.modules.resnet.resnet_15.ResBlockStrided", "learning.modules.resnet.resnet_15.ResBlock", "learning.modules.resnet.resnet_15.ResBlockStrided", "learning.modules.resnet.resnet_15.ResBlock", "learning.modules.resnet.resnet_15.ResBlockStrided", "learning.modules.resnet.resnet_15.ResBlock", "learning.modules.resnet.resnet_15.ResBlockStrided", "learning.modules.resnet.resnet_15.ResBlock", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ResNet15", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", ",", "3", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block15", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block25", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block3", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block35", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block4", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ")", "\n", "self", ".", "block45", "=", "ResBlock", "(", "channels", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15_dilated.ResNet15.init_weights": [[25, 38], ["resnet_15_dilated.ResNet15.block1.init_weights", "resnet_15_dilated.ResNet15.block2.init_weights", "resnet_15_dilated.ResNet15.block3.init_weights", "resnet_15_dilated.ResNet15.block4.init_weights", "resnet_15_dilated.ResNet15.block15.init_weights", "resnet_15_dilated.ResNet15.block25.init_weights", "resnet_15_dilated.ResNet15.block35.init_weights", "resnet_15_dilated.ResNet15.block45.init_weights", "torch.nn.init.kaiming_uniform", "resnet_15_dilated.ResNet15.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "self", ".", "block4", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "block15", ".", "init_weights", "(", ")", "\n", "self", ".", "block25", ".", "init_weights", "(", ")", "\n", "self", ".", "block35", ".", "init_weights", "(", ")", "\n", "self", ".", "block45", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_15_dilated.ResNet15.forward": [[39, 51], ["resnet_15_dilated.ResNet15.conv1", "resnet_15_dilated.ResNet15.block1", "resnet_15_dilated.ResNet15.block15", "resnet_15_dilated.ResNet15.block2", "resnet_15_dilated.ResNet15.block25", "resnet_15_dilated.ResNet15.block3", "resnet_15_dilated.ResNet15.block35", "resnet_15_dilated.ResNet15.block4", "resnet_15_dilated.ResNet15.block45", "resnet_15_dilated.ResNet15.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block25", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block35", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block45", "(", "x", ")", "\n", "x", "=", "self", ".", "res_norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_7.ResNet7.__init__": [[8, 23], ["super().__init__", "torch.nn.Conv2d", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "down_pad", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "down_padding", "=", "0", "\n", "if", "down_pad", ":", "\n", "            ", "down_padding", "=", "1", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block3", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "1", ",", "down_padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_7.ResNet7.init_weights": [[24, 31], ["resnet_7.ResNet7.block1.init_weights", "resnet_7.ResNet7.block2.init_weights", "resnet_7.ResNet7.block3.init_weights", "torch.nn.init.kaiming_uniform", "resnet_7.ResNet7.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_7.ResNet7.forward": [[32, 39], ["resnet_7.ResNet7.conv1", "resnet_7.ResNet7.block1", "resnet_7.ResNet7.block2", "resnet_7.ResNet7.block3", "resnet_7.ResNet7.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "res_norm", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_s.ResNet13S.__init__": [[8, 26], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "down_pad", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet13S", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "down_padding", "=", "0", "\n", "if", "down_pad", ":", "\n", "            ", "down_padding", "=", "1", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block15", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block25", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block3", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "1", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block35", "=", "ResBlock", "(", "channels", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_s.ResNet13S.get_downscale_factor": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_downscale_factor", "(", "self", ")", ":", "\n", "        ", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_s.ResNet13S.init_weights": [[30, 41], ["resnet_13_s.ResNet13S.block1.init_weights", "resnet_13_s.ResNet13S.block2.init_weights", "resnet_13_s.ResNet13S.block3.init_weights", "resnet_13_s.ResNet13S.block15.init_weights", "resnet_13_s.ResNet13S.block25.init_weights", "resnet_13_s.ResNet13S.block35.init_weights", "torch.nn.init.kaiming_uniform", "resnet_13_s.ResNet13S.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "block15", ".", "init_weights", "(", ")", "\n", "self", ".", "block25", ".", "init_weights", "(", ")", "\n", "self", ".", "block35", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_s.ResNet13S.forward": [[42, 52], ["resnet_13_s.ResNet13S.conv1", "resnet_13_s.ResNet13S.block1", "resnet_13_s.ResNet13S.block15", "resnet_13_s.ResNet13S.block2", "resnet_13_s.ResNet13S.block25", "resnet_13_s.ResNet13S.block3", "resnet_13_s.ResNet13S.block35", "resnet_13_s.ResNet13S.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block25", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block35", "(", "x", ")", "\n", "x", "=", "self", ".", "res_norm", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_conditional.ResNetConditional.__init__": [[7, 34], ["torch.nn.Module.__init__", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockConditional"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_size", ",", "channels", ",", "c_out", ")", ":", "\n", "        ", "super", "(", "ResNetConditional", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlock", "(", "channels", ")", "# RF: 5x5", "\n", "self", ".", "block1a", "=", "ResBlock", "(", "channels", ")", "# RF: 9x9", "\n", "self", ".", "cblock1", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ")", "# RF: 9x9", "\n", "self", ".", "block2", "=", "ResBlock", "(", "channels", ")", "# RF: 13x13", "\n", "self", ".", "block2a", "=", "ResBlock", "(", "channels", ")", "# RF: 17x17", "\n", "self", ".", "cblock2", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ")", "# RF: 17x17", "\n", "self", ".", "block3", "=", "ResBlock", "(", "channels", ")", "# RF: 21x21", "\n", "self", ".", "block3a", "=", "ResBlock", "(", "channels", ")", "# RF: 25x25", "\n", "self", ".", "cblock3", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ")", "# RF: 25x25", "\n", "self", ".", "block4", "=", "ResBlock", "(", "channels", ")", "# RF: 29x29", "\n", "self", ".", "block4a", "=", "ResBlock", "(", "channels", ")", "# RF: 33x33", "\n", "self", ".", "cblock4", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ")", "# RF: 33x33", "\n", "self", ".", "block5", "=", "ResBlock", "(", "channels", ")", "# RF: 37x37", "\n", "self", ".", "block5a", "=", "ResBlock", "(", "channels", ")", "# RF: 41x41", "\n", "self", ".", "cblock5", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ")", "# RF: 41x41", "\n", "self", ".", "block6", "=", "ResBlock", "(", "channels", ")", "# RF: 45x45", "\n", "self", ".", "block6a", "=", "ResBlock", "(", "channels", ")", "# RF: 49x49", "\n", "self", ".", "cblock6", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ")", "# RF: 49x49", "\n", "self", ".", "block7", "=", "ResBlock", "(", "channels", ")", "# RF: 53x53", "\n", "self", ".", "block7a", "=", "ResBlock", "(", "channels", ")", "# RF: 57x57", "\n", "self", ".", "cblock7", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ")", "# RF: 57x57", "\n", "self", ".", "block8", "=", "ResBlock", "(", "channels", ")", "# RF: 61x61", "\n", "self", ".", "block8a", "=", "ResBlock", "(", "channels", ")", "# RF: 65x65", "\n", "self", ".", "cblock8", "=", "ResBlockConditional", "(", "embed_size", ",", "channels", ",", "c_out", ")", "# RF: 65x65", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_conditional.ResNetConditional.init_weights": [[35, 39], ["resnet_conditional.ResNetConditional.modules", "hasattr", "mod.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "mod", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "mod", ",", "\"init_weights\"", ")", "and", "mod", "is", "not", "self", ":", "\n", "                ", "mod", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_conditional.ResNetConditional.forward": [[40, 66], ["resnet_conditional.ResNetConditional.block1", "resnet_conditional.ResNetConditional.block1a", "resnet_conditional.ResNetConditional.cblock1", "resnet_conditional.ResNetConditional.block2", "resnet_conditional.ResNetConditional.block2a", "resnet_conditional.ResNetConditional.cblock2", "resnet_conditional.ResNetConditional.block3", "resnet_conditional.ResNetConditional.block3a", "resnet_conditional.ResNetConditional.cblock3", "resnet_conditional.ResNetConditional.block4", "resnet_conditional.ResNetConditional.block4a", "resnet_conditional.ResNetConditional.cblock4", "resnet_conditional.ResNetConditional.block5", "resnet_conditional.ResNetConditional.block5a", "resnet_conditional.ResNetConditional.cblock5", "resnet_conditional.ResNetConditional.block6", "resnet_conditional.ResNetConditional.block6a", "resnet_conditional.ResNetConditional.cblock6", "resnet_conditional.ResNetConditional.block7", "resnet_conditional.ResNetConditional.block7a", "resnet_conditional.ResNetConditional.cblock7", "resnet_conditional.ResNetConditional.block8", "resnet_conditional.ResNetConditional.block8a", "resnet_conditional.ResNetConditional.cblock8"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ",", "contexts", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "inputs", ")", "\n", "x", "=", "self", ".", "block1a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock1", "(", "x", ",", "contexts", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block2a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock2", "(", "x", ",", "contexts", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block3a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock3", "(", "x", ",", "contexts", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block4a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock4", "(", "x", ",", "contexts", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block5a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock5", "(", "x", ",", "contexts", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block6a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock6", "(", "x", ",", "contexts", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block7a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock7", "(", "x", ",", "contexts", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block8a", "(", "x", ")", "\n", "x", "=", "self", ".", "cblock8", "(", "x", ",", "contexts", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_light.ResNet13Light.__init__": [[8, 26], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlock", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "down_pad", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet13Light", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "down_padding", "=", "0", "\n", "if", "down_pad", ":", "\n", "            ", "down_padding", "=", "1", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "block1", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block15", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block25", "=", "ResBlock", "(", "channels", ")", "\n", "self", ".", "block3", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "1", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block35", "=", "ResBlock", "(", "channels", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_light.ResNet13Light.get_downscale_factor": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_downscale_factor", "(", "self", ")", ":", "\n", "        ", "return", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_light.ResNet13Light.init_weights": [[30, 41], ["resnet_13_light.ResNet13Light.block1.init_weights", "resnet_13_light.ResNet13Light.block2.init_weights", "resnet_13_light.ResNet13Light.block3.init_weights", "resnet_13_light.ResNet13Light.block15.init_weights", "resnet_13_light.ResNet13Light.block25.init_weights", "resnet_13_light.ResNet13Light.block35.init_weights", "torch.nn.init.kaiming_uniform_", "resnet_13_light.ResNet13Light.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "block15", ".", "init_weights", "(", ")", "\n", "self", ".", "block25", ".", "init_weights", "(", ")", "\n", "self", ".", "block35", ".", "init_weights", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_13_light.ResNet13Light.forward": [[42, 52], ["resnet_13_light.ResNet13Light.conv1", "resnet_13_light.ResNet13Light.block1", "resnet_13_light.ResNet13Light.block15", "resnet_13_light.ResNet13Light.block2", "resnet_13_light.ResNet13Light.block25", "resnet_13_light.ResNet13Light.block3", "resnet_13_light.ResNet13Light.block35", "resnet_13_light.ResNet13Light.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block25", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block35", "(", "x", ")", "\n", "x", "=", "self", ".", "res_norm", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.__init__": [[7, 22], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided", "learning.modules.blocks.ResBlockStrided", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "down_pad", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet9Stride32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "down_padding", "=", "0", "\n", "if", "down_pad", ":", "\n", "            ", "down_padding", "=", "1", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "down_padding", ")", "\n", "self", ".", "block1", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block2", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block3", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "self", ".", "block4", "=", "ResBlockStrided", "(", "channels", ",", "stride", "=", "2", ",", "down_padding", "=", "down_padding", ")", "\n", "\n", "self", ".", "res_norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.get_downscale_factor": [[23, 25], ["None"], "methods", ["None"], ["", "def", "get_downscale_factor", "(", "self", ")", ":", "\n", "        ", "return", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.init_weights": [[26, 33], ["resnet_9_stride32.ResNet9Stride32.block1.init_weights", "resnet_9_stride32.ResNet9Stride32.block2.init_weights", "resnet_9_stride32.ResNet9Stride32.block3.init_weights", "resnet_9_stride32.ResNet9Stride32.block4.init_weights", "torch.nn.init.kaiming_uniform_", "resnet_9_stride32.ResNet9Stride32.conv1.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "block1", ".", "init_weights", "(", ")", "\n", "self", ".", "block2", ".", "init_weights", "(", ")", "\n", "self", ".", "block3", ".", "init_weights", "(", ")", "\n", "self", ".", "block4", ".", "init_weights", "(", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.forward": [[34, 41], ["resnet_9_stride32.ResNet9Stride32.conv1", "resnet_9_stride32.ResNet9Stride32.block1", "resnet_9_stride32.ResNet9Stride32.block2", "resnet_9_stride32.ResNet9Stride32.block3", "resnet_9_stride32.ResNet9Stride32.block4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.__init__": [[20, 53], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "learning.modules.blocks.DenseMlpBlock2", "torch.Dropout", "torch.Dropout", "torch.Dropout", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_channels", "=", "1", ",", "map_size", "=", "32", ",", "\n", "manual", "=", "False", ",", "path_only", "=", "False", ",", "recurrence", "=", "False", ")", ":", "\n", "        ", "super", "(", "CroppedMapToActionTriplet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "map_channels", "=", "map_channels", "\n", "self", ".", "manual", "=", "manual", "\n", "self", ".", "path_only", "=", "path_only", "\n", "self", ".", "use_recurrence", "=", "recurrence", "\n", "if", "self", ".", "path_only", ":", "\n", "            ", "print", "(", "\"WARNING! MAP TO ACTION WILL DISCARD GOAL-PREDICTION\"", ")", "\n", "\n", "# Downsample the map to get something suitable for feeding into the perceptron", "\n", "#self.downsample = DownsampleResidual(map_channels, factor=downsample_factor)", "\n", "\n", "", "self", ".", "l_crop", "=", "26", "\n", "self", ".", "t_crop", "=", "26", "\n", "self", ".", "r_crop", "=", "38", "\n", "self", ".", "b_crop", "=", "38", "\n", "self", ".", "crop_h", "=", "12", "\n", "self", ".", "crop_w", "=", "12", "\n", "\n", "map_size_s", "=", "self", ".", "crop_h", "*", "self", ".", "crop_w", "\n", "map_size_flat", "=", "map_size_s", "*", "map_channels", "\n", "\n", "self", ".", "recurrence", "=", "nn", ".", "LSTMCell", "(", "4", ",", "RECURRENCE_SIZE", ")", "\n", "self", ".", "last_h", "=", "None", "\n", "self", ".", "last_c", "=", "None", "\n", "\n", "# Apply the perceptron to produce the action", "\n", "mlp_in_size", "=", "map_size_flat", "+", "RECURRENCE_SIZE", "# + other_features_size", "\n", "self", ".", "mlp", "=", "DenseMlpBlock2", "(", "mlp_in_size", ",", "HIDDEN_SIZE", ",", "7", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.forget_recurrence": [[54, 57], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.parameters", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "forget_recurrence", "(", "self", ")", ":", "\n", "        ", "self", ".", "last_h", "=", "torch", ".", "zeros", "(", "[", "1", ",", "RECURRENCE_SIZE", "]", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "self", ".", "last_c", "=", "torch", ".", "zeros", "(", "[", "1", ",", "RECURRENCE_SIZE", "]", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.reset": [[58, 61], ["cropped_map_to_action_triplet.CroppedMapToActionTriplet.forget_recurrence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.forget_recurrence"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_recurrence", ":", "\n", "            ", "self", ".", "forget_recurrence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.init_weights": [[62, 65], ["cropped_map_to_action_triplet.CroppedMapToActionTriplet.mlp.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "#self.downsample.init_weights()", "\n", "        ", "self", ".", "mlp", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.forward_one": [[66, 114], ["maps_r.size", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "print", "maps_r[].contiguous", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.dropout", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.mlp", "actions_pred.clone.clone.clone", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.recurrence", "len", "visualization.Presenter().show_image", "maps_r[].contiguous.size", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.forget_recurrence", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next", "visualization.Presenter", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.parameters", "maps_r[].contiguous.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.forget_recurrence", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "forward_one", "(", "self", ",", "maps_r", ",", "other_features", ",", "firstseg", "=", "None", ")", ":", "\n", "# TODO: Log this somewhere", "\n", "        ", "if", "self", ".", "map_channels", "<", "maps_r", ".", "size", "(", "1", ")", ":", "\n", "            ", "maps_r", "=", "maps_r", "[", ":", ",", "0", ":", "self", ".", "map_channels", "]", "\n", "\n", "", "if", "self", ".", "manual", ":", "\n", "            ", "max", ",", "argmax", "=", "torch", ".", "max", "(", "maps_r", "[", ":", ",", "1", "]", ")", "\n", "print", "(", "argmax", ")", "\n", "", "if", "True", ":", "\n", "            ", "maps_s", "=", "maps_r", "[", ":", ",", ":", ",", "self", ".", "t_crop", ":", "self", ".", "b_crop", ",", "self", ".", "l_crop", ":", "self", ".", "r_crop", "]", ".", "contiguous", "(", ")", "\n", "\n", "# maps_s = self.downsample(maps_r)", "\n", "if", "self", ".", "path_only", ":", "\n", "# Copy over the trajectory channel, discarding the goal", "\n", "                ", "maps_in", "=", "torch", ".", "zeros_like", "(", "maps_s", ")", "\n", "maps_in", "[", ":", ",", "0", "]", "=", "maps_s", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "maps_in", "=", "maps_s", "\n", "\n", "", "DBG", "=", "run_md", ".", "IS_ROLLOUT", "# or True# and False", "\n", "if", "DBG", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "maps_s", ")", ")", ":", "\n", "                    ", "Presenter", "(", ")", ".", "show_image", "(", "maps_in", ".", "data", "[", "i", "]", ",", "\"d\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "\n", "", "", "map_features", "=", "maps_in", ".", "view", "(", "[", "maps_s", ".", "size", "(", "0", ")", ",", "-", "1", "]", ")", "\n", "\n", "# other_features_zero = torch.zeros_like(other_features)", "\n", "# mlp_in_features = torch.cat([map_features, other_features_zero], dim=1)", "\n", "\n", "mlp_in_features", "=", "map_features", "\n", "if", "self", ".", "use_recurrence", ":", "\n", "                ", "if", "firstseg", ":", "\n", "                    ", "self", ".", "forget_recurrence", "(", ")", "\n", "", "hist_features", "=", "self", ".", "last_h", "\n", "", "else", ":", "\n", "                ", "hist_features", "=", "torch", ".", "zeros", "(", "[", "maps_s", ".", "size", "(", "0", ")", ",", "RECURRENCE_SIZE", "]", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n", "", "mlp_in_features", "=", "torch", ".", "cat", "(", "[", "mlp_in_features", ",", "hist_features", "]", ",", "dim", "=", "1", ")", "\n", "mlp_in_features", "=", "self", ".", "dropout", "(", "mlp_in_features", ")", "\n", "actions_pred", "=", "self", ".", "mlp", "(", "mlp_in_features", ")", "\n", "\n", "if", "self", ".", "use_recurrence", ":", "\n", "                ", "self", ".", "last_h", ",", "self", ".", "last_c", "=", "self", ".", "recurrence", "(", "actions_pred", ",", "(", "self", ".", "last_h", ",", "self", ".", "last_c", ")", ")", "\n", "\n", "# this must be in 0-1 range for BCE loss", "\n", "", "actions_pred", "=", "actions_pred", ".", "clone", "(", ")", "\n", "actions_pred", "[", ":", ",", "3", "]", "=", "torch", ".", "sigmoid", "(", "actions_pred", "[", ":", ",", "3", "]", ")", "\n", "return", "actions_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.forward": [[115, 132], ["NotImplementedError", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.forward_one", "maps_r.size", "cropped_map_to_action_triplet.CroppedMapToActionTriplet.forward_one", "all_act_pred.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.forward_one", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet.forward_one", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "forward", "(", "self", ",", "maps_r", ",", "other_features", ",", "fistseg_mask", "=", "None", ")", ":", "\n", "# The old PVNv1 doesn't use outer probabilities", "\n", "        ", "maps_r", "=", "maps_r", ".", "inner_distribution", "\n", "\n", "# If we are using recurrence, we can't batch over the sequence. Apply this rule sequentially", "\n", "if", "self", ".", "use_recurrence", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Recurrence no longer implemented\"", ")", "\n", "all_act_pred", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "maps_r", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "msk_in", "=", "fistseg_mask", "[", "i", "]", "if", "fistseg_mask", "is", "not", "None", "else", "None", "\n", "ofin", "=", "other_features", "[", "i", ":", "i", "+", "1", "]", "if", "other_features", "is", "not", "None", "else", "None", "\n", "act_pred_i", "=", "self", ".", "forward_one", "(", "maps_r", "[", "i", ":", "i", "+", "1", "]", ",", "ofin", ",", "msk_in", ")", "\n", "all_act_pred", ".", "append", "(", "act_pred_i", ")", "\n", "", "return", "torch", ".", "cat", "(", "all_act_pred", ",", "dim", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_one", "(", "maps_r", ",", "other_features", ",", "firstseg", "=", "None", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet.__init__": [[13, 29], ["torch.Module.__init__", "learning.modules.downsample_map.downsample_res.DownsampleResidual", "int", "learning.modules.blocks.DenseMlpBlock2", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_channels", "=", "1", ",", "map_size", "=", "32", ",", "other_features_size", "=", "120", ")", ":", "\n", "        ", "super", "(", "EgoMapToActionTriplet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "map_channels", "=", "map_channels", "\n", "\n", "# Downsample the map to get something suitable for feeding into the perceptron", "\n", "self", ".", "downsample", "=", "DownsampleResidual", "(", "map_channels", ",", "factor", "=", "downsample_factor", ")", "\n", "\n", "map_size_s", "=", "int", "(", "map_size", "/", "downsample_factor", ")", "\n", "\n", "# Apply the perceptron to produce the action", "\n", "map_size_flat", "=", "map_size_s", "*", "map_size_s", "*", "map_channels", "\n", "mlp_in_size", "=", "map_size_flat", "# + other_features_size", "\n", "self", ".", "mlp", "=", "DenseMlpBlock2", "(", "mlp_in_size", ",", "HIDDEN_SIZE", ",", "4", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet.init_weights": [[30, 33], ["ego_map_to_action_triplet.EgoMapToActionTriplet.downsample.init_weights", "ego_map_to_action_triplet.EgoMapToActionTriplet.mlp.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "downsample", ".", "init_weights", "(", ")", "\n", "self", ".", "mlp", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet.forward": [[34, 56], ["ego_map_to_action_triplet.EgoMapToActionTriplet.downsample", "ego_map_to_action_triplet.EgoMapToActionTriplet.view", "ego_map_to_action_triplet.EgoMapToActionTriplet.dropout", "ego_map_to_action_triplet.EgoMapToActionTriplet.mlp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "maps_r.size", "ego_map_to_action_triplet.EgoMapToActionTriplet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "maps_r", ",", "other_features", ")", ":", "\n", "\n", "# TODO: Log this somewhere", "\n", "        ", "if", "self", ".", "map_channels", "<", "maps_r", ".", "size", "(", "1", ")", ":", "\n", "            ", "maps_r", "=", "maps_r", "[", ":", ",", "0", ":", "self", ".", "map_channels", "]", "\n", "\n", "", "maps_s", "=", "self", ".", "downsample", "(", "maps_r", ")", "\n", "\n", "map_features", "=", "maps_s", ".", "view", "(", "[", "maps_s", ".", "size", "(", "0", ")", ",", "-", "1", "]", ")", "\n", "\n", "#other_features_zero = torch.zeros_like(other_features)", "\n", "#mlp_in_features = torch.cat([map_features, other_features_zero], dim=1)", "\n", "\n", "mlp_in_features", "=", "map_features", "\n", "mlp_in_features", "=", "self", ".", "dropout", "(", "mlp_in_features", ")", "\n", "\n", "actions_pred", "=", "self", ".", "mlp", "(", "mlp_in_features", ")", "\n", "\n", "# this must be in 0-1 range for BCE loss", "\n", "actions_pred", "[", ":", ",", "3", "]", "=", "torch", ".", "sigmoid", "(", "actions_pred", "[", ":", ",", "3", "]", ")", "\n", "\n", "return", "actions_pred", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.global_map_to_action_triplet.GlobalMapToActionTriplet.__init__": [[11, 20], ["super().__init__", "deprecated.learning.models.semantic_map.map_affine_old.Rotation2DRelative", "learning.models.semantic_map.grid_sampler.GridSampler", "learning.modules.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_channels", ",", "map_size", "=", "(", "30", ",", "30", ")", ",", "other_features_size", "=", "120", ")", ":", "\n", "        ", "super", "(", "GlobalMapToActionTriplet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Rotate the global map to the robot's current frame", "\n", "self", ".", "map_affine", "=", "Rotation2DRelative", "(", ")", "\n", "self", ".", "grid_sampler", "=", "GridSampler", "(", ")", "\n", "\n", "# Then apply the local map to action rule", "\n", "self", ".", "ego_map_to_action", "=", "EgoMapToActionTriplet", "(", "map_channels", ",", "map_size", ",", "other_features_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.global_map_to_action_triplet.GlobalMapToActionTriplet.init_weights": [[21, 23], ["global_map_to_action_triplet.GlobalMapToActionTriplet.ego_map_to_action.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "ego_map_to_action", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_action.global_map_to_action_triplet.GlobalMapToActionTriplet.forward": [[24, 34], ["global_map_to_action_triplet.GlobalMapToActionTriplet.map_affine", "global_map_to_action_triplet.GlobalMapToActionTriplet.grid_sampler", "global_map_to_action_triplet.GlobalMapToActionTriplet.ego_map_to_action"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "map_g", ",", "other_features", ",", "pose", ")", ":", "\n", "# TODO: Correctly call this", "\n", "# Transform global-frame map to robot egocentric frame", "\n", "        ", "grid_mapping", "=", "self", ".", "map_affine", "(", "map_g", ",", "pose", ")", "\n", "map_r", "=", "self", ".", "grid_sampler", "(", "map_g", ",", "grid_mapping", ")", "\n", "\n", "# Apply the egocentric map rule", "\n", "action_pred", "=", "self", ".", "ego_map_to_action", "(", "map_r", ",", "other_features", ",", "pose", ")", "\n", "\n", "return", "action_pred", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine_fast.MapAffine.__init__": [[19, 28], ["torch.nn.Module.__init__", "learning.modules.affine_2d.Affine2D", "utils.simple_profiler.SimpleProfiler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_size", ",", "world_size_px", ",", "world_size_m", ")", ":", "\n", "        ", "super", "(", "MapAffine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "map_size", "=", "map_size", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "\n", "self", ".", "affine_2d", "=", "Affine2D", "(", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine_fast.MapAffine.pose_2d_to_mat_np": [[29, 54], ["transformations.get_affine_trans_2d", "transformations.get_affine_rot_2d", "transformations.get_affine_trans_2d", "numpy.dot", "numpy.dot", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_rot_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d"], ["", "def", "pose_2d_to_mat_np", "(", "self", ",", "pose_2d", ",", "inv", "=", "False", ")", ":", "\n", "        ", "pos", "=", "pose_2d", ".", "position", "\n", "yaw", "=", "pose_2d", ".", "orientation", "\n", "\n", "# Transform the img so that the drone's position ends up at the origin", "\n", "# TODO: Add batch support", "\n", "t1", "=", "get_affine_trans_2d", "(", "-", "pos", ")", "\n", "\n", "# Rotate the img so that it's aligned with the drone's orientation", "\n", "yaw", "=", "-", "yaw", "\n", "t2", "=", "get_affine_rot_2d", "(", "-", "yaw", ")", "\n", "\n", "# Translate the img so that it's centered around the drone", "\n", "t3", "=", "get_affine_trans_2d", "(", "[", "self", ".", "map_size", "/", "2", ",", "self", ".", "map_size", "/", "2", "]", ")", "\n", "\n", "mat", "=", "np", ".", "dot", "(", "t3", ",", "np", ".", "dot", "(", "t2", ",", "t1", ")", ")", "\n", "\n", "# Swap x and y axes (because of the BxCxHxW a.k.a BxCxYxX convention)", "\n", "swapmat", "=", "mat", "[", "[", "1", ",", "0", ",", "2", "]", ",", ":", "]", "\n", "mat", "=", "swapmat", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "\n", "if", "inv", ":", "\n", "            ", "mat", "=", "np", ".", "linalg", ".", "inv", "(", "mat", ")", "\n", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine_fast.MapAffine.get_old_to_new_pose_mat": [[55, 62], ["map_affine_fast.MapAffine.pose_2d_to_mat_np", "map_affine_fast.MapAffine.pose_2d_to_mat_np", "numpy.dot", "learning.inputs.common.np_to_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.pose_2d_to_mat_np", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.pose_2d_to_mat_np", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.np_to_tensor"], ["", "def", "get_old_to_new_pose_mat", "(", "self", ",", "old_pose", ",", "new_pose", ")", ":", "\n", "        ", "old_T_inv", "=", "self", ".", "pose_2d_to_mat_np", "(", "old_pose", ",", "inv", "=", "True", ")", "\n", "new_T", "=", "self", ".", "pose_2d_to_mat_np", "(", "new_pose", ",", "inv", "=", "False", ")", "\n", "mat", "=", "np", ".", "dot", "(", "new_T", ",", "old_T_inv", ")", "\n", "#mat = new_T", "\n", "mat_t", "=", "np_to_tensor", "(", "mat", ")", "\n", "return", "mat_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine_fast.MapAffine.get_canonical_frame_pose": [[63, 68], ["numpy.asarray", "numpy.asarray", "learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "get_canonical_frame_pose", "(", "self", ")", ":", "\n", "        ", "pos", "=", "np", ".", "asarray", "(", "[", "self", ".", "map_size", "/", "2", ",", "self", ".", "map_size", "/", "2", "]", ")", "\n", "rot", "=", "np", ".", "asarray", "(", "[", "0", "]", ")", "\n", "\n", "return", "Pose", "(", "pos", ",", "rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine_fast.MapAffine.forward": [[69, 120], ["map_affine_fast.MapAffine.prof.tick", "maps.size", "torch.zeros().to", "map_affine_fast.MapAffine.prof.tick", "range", "map_affine_fast.MapAffine.affine_2d", "map_affine_fast.MapAffine.prof.tick", "map_affine_fast.MapAffine.prof.loop", "map_affine_fast.MapAffine.prof.print_stats", "map_affine_fast.MapAffine.prof.tick", "map_affine_fast.MapAffine.get_old_to_new_pose_mat", "map_affine_fast.MapAffine.prof.tick", "torch.zeros", "map_pose[].numpy", "transformations.poses_m_to_px", "map_affine_fast.MapAffine.get_canonical_frame_pose", "cam_pose[].numpy", "transformations.poses_m_to_px", "map_affine_fast.MapAffine.get_canonical_frame_pose"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_old_to_new_pose_mat", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine_fast.MapAffine.get_canonical_frame_pose", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine_fast.MapAffine.get_canonical_frame_pose"], ["", "def", "forward", "(", "self", ",", "maps", ",", "map_pose", ",", "cam_pose", ")", ":", "\n", "        ", "\"\"\"\n        Affine transform the map from being centered around map_pose in the canonocial map frame to\n        being centered around cam_pose in the canonical map frame.\n        Canonical map frame is the one where the map origin aligns with the environment origin, but the env may\n        or may not take up the entire map.\n        :param map: map centered around the drone in map_pose\n        :param map_pose: the previous drone pose in canonical map frame\n        :param cam_pose: the new drone pose in canonical map frame\n        :return:\n        \"\"\"", "\n", "\n", "# TODO: Handle the case where cam_pose is None and return a map in the canonical frame", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "batch_size", "=", "maps", ".", "size", "(", "0", ")", "\n", "affine_matrices", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "3", ",", "3", "]", ")", ".", "to", "(", "maps", ".", "device", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"init\"", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "# Convert the pose from airsim coordinates to the image pixel coordinages", "\n", "# If the pose is None, use the canonical pose (global frame)", "\n", "            ", "if", "map_pose", "is", "not", "None", "and", "map_pose", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "map_pose_i", "=", "map_pose", "[", "i", "]", ".", "numpy", "(", ")", "\n", "map_pose_img", "=", "poses_m_to_px", "(", "map_pose_i", ",", "self", ".", "map_size", ",", "[", "self", ".", "world_size_px", ",", "self", ".", "world_size_px", "]", ",", "self", ".", "world_size_m", ")", "\n", "", "else", ":", "\n", "                ", "map_pose_img", "=", "self", ".", "get_canonical_frame_pose", "(", ")", "\n", "\n", "", "if", "cam_pose", "is", "not", "None", "and", "cam_pose", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "cam_pose_i", "=", "cam_pose", "[", "i", "]", ".", "numpy", "(", ")", "\n", "cam_pose_img", "=", "poses_m_to_px", "(", "cam_pose_i", ",", "self", ".", "map_size", ",", "[", "self", ".", "world_size_px", ",", "self", ".", "world_size_px", "]", ",", "self", ".", "world_size_m", ")", "\n", "", "else", ":", "\n", "                ", "cam_pose_img", "=", "self", ".", "get_canonical_frame_pose", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"pose\"", ")", "\n", "\n", "# Get the affine transformation matrix to transform the map to the new camera pose", "\n", "affine_i", "=", "self", ".", "get_old_to_new_pose_mat", "(", "map_pose_img", ",", "cam_pose_img", ")", "\n", "affine_matrices", "[", "i", "]", "=", "affine_i", "\n", "self", ".", "prof", ".", "tick", "(", "\"affine\"", ")", "\n", "\n", "# TODO: Do the same with OpenCV and compare results for testing", "\n", "\n", "# Apply the affine transformation on the map", "\n", "", "maps_out", "=", "self", ".", "affine_2d", "(", "maps", ",", "affine_matrices", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"affine_sample\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "20", ")", "\n", "\n", "return", "maps_out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.__init__": [[17, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "map_size_px", ",", "\n", "world_size_px", ",", "\n", "world_size_m", ",", "\n", "img_x", ",", "\n", "img_y", ",", "\n", "cam_fov", ",", "\n", "domain", ",", "\n", "use_depth", "=", "False", ",", "\n", "start_height_offset", "=", "0.0", ")", ":", "\n", "\n", "# TODO: For 30x30m AirSim simulator start_height_offset should be -2.0", "\n", "        ", "self", ".", "map_size_px", "=", "map_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "map_world_size_px", "=", "world_size_px", "\n", "\n", "self", ".", "res_x", "=", "img_x", "\n", "self", ".", "res_y", "=", "img_y", "\n", "self", ".", "use_depth", "=", "use_depth", "\n", "self", ".", "cam_fov", "=", "cam_fov", "\n", "self", ".", "h_offset", "=", "H_OFFSET_SIM", "if", "domain", "==", "\"sim\"", "else", "H_OFFSET_REAL", "\n", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.get_focal_len": [[41, 43], ["math.tan"], "methods", ["None"], ["", "def", "get_focal_len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "res_x", "*", "0.5", "/", "math", ".", "tan", "(", "self", ".", "cam_fov", "*", "0.5", "*", "3.14159", "/", "180", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.make_camera_matrix": [[44, 48], ["pinhole_camera_inv.PinholeCameraProjection.get_focal_len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_focal_len"], ["", "def", "make_camera_matrix", "(", "self", ")", ":", "\n", "        ", "f_x", "=", "self", ".", "get_focal_len", "(", ")", "\n", "f_y", "=", "f_x", "\n", "return", "np", ".", "asarray", "(", "[", "[", "f_x", ",", "0", ",", "self", ".", "res_x", "/", "2", "]", ",", "[", "0", ",", "f_y", ",", "self", ".", "res_y", "/", "2", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.make_rotation_matrix": [[49, 51], ["transforms3d.quaternions.quat2mat"], "methods", ["None"], ["", "def", "make_rotation_matrix", "(", "self", ",", "quat", ")", ":", "\n", "        ", "return", "quaternions", ".", "quat2mat", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.make_optical_rotation_matrix": [[52, 54], ["transforms3d.euler.euler2mat"], "methods", ["None"], ["", "def", "make_optical_rotation_matrix", "(", "self", ")", ":", "\n", "        ", "return", "euler", ".", "euler2mat", "(", "-", "1.579", ",", "0", ",", "-", "1.579", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.make_world_to_camera_mat": [[55, 59], ["transforms3d.quaternions.quat2mat", "transforms3d.affines.compose"], "methods", ["None"], ["", "def", "make_world_to_camera_mat", "(", "self", ",", "cam_pos", ",", "cam_rot", ")", ":", "\n", "        ", "rot_mat", "=", "quaternions", ".", "quat2mat", "(", "cam_rot", ")", "\n", "mat", "=", "affines", ".", "compose", "(", "cam_pos", ",", "rot_mat", ",", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.get_coord_grid": [[60, 87], ["str", "numpy.arange", "numpy.arange", "numpy.expand_dims().repeat", "numpy.concatenate", "numpy.ones", "numpy.concatenate", "str", "numpy.flip", "numpy.flip", "numpy.expand_dims().repeat", "numpy.zeros", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat"], ["", "def", "get_coord_grid", "(", "self", ",", "x_size", ",", "y_size", ",", "flip_x", "=", "True", ",", "flip_y", "=", "True", ",", "use_3d", "=", "False", ")", ":", "\n", "        ", "key", "=", "str", "(", "x_size", ")", "+", "\".\"", "+", "str", "(", "y_size", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "if", "key", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "x_pixels", "=", "np", ".", "arange", "(", "0", ",", "x_size", ",", "1", ")", "\n", "y_pixels", "=", "np", ".", "arange", "(", "0", ",", "y_size", ",", "1", ")", "\n", "\n", "if", "flip_x", ":", "\n", "                ", "x_pixels", "=", "np", ".", "flip", "(", "x_pixels", ",", "0", ")", "\n", "", "if", "flip_y", ":", "\n", "                ", "y_pixels", "=", "np", ".", "flip", "(", "y_pixels", ",", "0", ")", "\n", "\n", "", "x_pixels", "=", "np", ".", "expand_dims", "(", "x_pixels", ",", "1", ")", ".", "repeat", "(", "y_size", ",", "1", ")", "\n", "y_pixels", "=", "np", ".", "expand_dims", "(", "y_pixels", ",", "1", ")", ".", "repeat", "(", "x_size", ",", "1", ")", ".", "T", "\n", "\n", "coord_grid_2d", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "x_pixels", ",", "2", ")", ",", "np", ".", "expand_dims", "(", "y_pixels", ",", "2", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "if", "use_3d", "is", "not", "False", ":", "\n", "                ", "z", "=", "np", ".", "zeros", "(", "(", "coord_grid_2d", ".", "shape", "[", "0", "]", ",", "coord_grid_2d", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "coord_grid_2d", "=", "np", ".", "concatenate", "(", "(", "coord_grid_2d", ",", "z", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "zhom", "=", "np", ".", "ones", "(", "(", "coord_grid_2d", ".", "shape", "[", "0", "]", ",", "coord_grid_2d", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "coord_grid_homo", "=", "np", ".", "concatenate", "(", "(", "coord_grid_2d", ",", "zhom", ")", ",", "axis", "=", "2", ")", "\n", "self", ".", "cache", "[", "key", "]", "=", "coord_grid_homo", "\n", "return", "coord_grid_homo", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.get_coord_grid_fast": [[88, 96], ["numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.ones", "numpy.concatenate"], "methods", ["None"], ["", "", "def", "get_coord_grid_fast", "(", "self", ",", "x_size", ",", "y_size", ")", ":", "\n", "        ", "x_pixels", "=", "np", ".", "arange", "(", "x_size", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "y_pixels", "=", "np", ".", "arange", "(", "y_size", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "vx", ",", "vy", "=", "np", ".", "meshgrid", "(", "x_pixels", ",", "y_pixels", ")", "\n", "vx", "=", "vx", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "vy", "=", "vy", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z", "=", "np", ".", "ones", "(", "vx", ".", "shape", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "vy", ",", "vx", ",", "z", ")", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.world_point_to_image": [[97, 132], ["hasattr", "cam_pos.detach().cpu().numpy.detach().cpu().numpy.copy", "pinhole_camera_inv.PinholeCameraProjection.make_camera_matrix", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.asarray", "cam_pos.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "cam_rot.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "pinhole_camera_inv.PinholeCameraProjection.make_rotation_matrix", "pinhole_camera_inv.PinholeCameraProjection.make_optical_rotation_matrix", "cam_pos.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "cam_rot.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "cam_pos.detach().cpu().numpy.detach().cpu().numpy.detach", "cam_rot.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_camera_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "world_point_to_image", "(", "self", ",", "cam_pos", ",", "cam_rot", ",", "point", ")", ":", "\n", "        ", "if", "hasattr", "(", "cam_pos", ",", "\"cuda\"", ")", ":", "\n", "            ", "cam_pos", "=", "cam_pos", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cam_rot", "=", "cam_rot", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "cam_pos", "=", "cam_pos", ".", "copy", "(", ")", "\n", "cam_pos", "[", "2", "]", "+=", "self", ".", "h_offset", "\n", "\n", "K", "=", "self", ".", "make_camera_matrix", "(", ")", "\n", "R", "=", "self", ".", "make_rotation_matrix", "(", "cam_rot", ")", ".", "T", "\n", "R_opt", "=", "self", ".", "make_optical_rotation_matrix", "(", ")", ".", "T", "\n", "\n", "point_in_cam_pos", "=", "point", "-", "cam_pos", "# Point in global frame centered around camera position", "\n", "point_in_cam", "=", "np", ".", "dot", "(", "R", ",", "point_in_cam_pos", ")", "# Point in camera frame", "\n", "point_in_cam_opt", "=", "np", ".", "dot", "(", "R_opt", ",", "point_in_cam", ")", "# Point in camera's optical frame", "\n", "\n", "# This landmark is behind the drone not in front of it", "\n", "if", "point_in_cam_opt", "[", "2", "]", "<", "0", ":", "\n", "            ", "return", "None", ",", "point_in_cam_opt", ",", "\"point behind\"", "\n", "\n", "", "image_point", "=", "np", ".", "dot", "(", "K", ",", "point_in_cam_opt", ")", "# Point in the image in pixels coordinates", "\n", "image_point_in_pixels", "=", "image_point", "/", "image_point", "[", "2", "]", "\n", "\n", "# Landmark is in front of drone but out of image bounds", "\n", "if", "image_point_in_pixels", "[", "0", "]", "<", "0", "or", "image_point_in_pixels", "[", "0", "]", ">", "self", ".", "res_x", "or", "image_point_in_pixels", "[", "1", "]", "<", "0", "or", "image_point_in_pixels", "[", "1", "]", ">", "self", ".", "res_y", ":", "\n", "            ", "return", "None", ",", "point_in_cam_opt", ",", "\"point oob\"", "\n", "\n", "# Make sure coordinates are consistent with images. For some reason this is necessary...", "\n", "", "image_point_in_pixels_out", "=", "np", ".", "asarray", "(", "\n", "[", "self", ".", "res_y", "-", "image_point_in_pixels", "[", "1", "]", ",", "\n", "self", ".", "res_x", "-", "image_point_in_pixels", "[", "0", "]", "]", "\n", ")", "\n", "\n", "return", "image_point_in_pixels_out", ",", "point_in_cam_opt", ",", "\"point in camera\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.get_world_coord_grid": [[133, 137], ["pinhole_camera_inv.PinholeCameraProjection.get_coord_grid().reshape", "transformations.pos_px_to_m", "pinhole_camera_inv.PinholeCameraProjection.get_coord_grid"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_px_to_m", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_coord_grid"], ["", "def", "get_world_coord_grid", "(", "self", ")", ":", "\n", "        ", "coord_grid", "=", "self", ".", "get_coord_grid", "(", "self", ".", "map_size_px", ",", "self", ".", "map_size_px", ",", "flip_x", "=", "False", ",", "flip_y", "=", "False", ",", "use_3d", "=", "True", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "coord_grid", "[", ":", ",", "0", ":", "2", "]", "=", "pos_px_to_m", "(", "coord_grid", "[", ":", ",", "0", ":", "2", "]", ",", "self", ".", "map_size_px", ",", "self", ".", "world_size_m", ",", "self", ".", "map_world_size_px", ")", "\n", "return", "coord_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.get_projection_mapping": [[138, 211], ["cam_pos.copy.copy.copy", "pinhole_camera_inv.PinholeCameraProjection.make_camera_matrix", "pinhole_camera_inv.PinholeCameraProjection.make_optical_rotation_matrix", "transforms3d.affines.compose", "numpy.linalg.inv", "pinhole_camera_inv.PinholeCameraProjection.make_world_to_camera_mat", "numpy.linalg.inv", "numpy.matmul", "numpy.matmul", "numpy.reshape.squeeze", "numpy.reshape", "pinhole_camera_inv.PinholeCameraProjection.get_world_coord_grid", "numpy.matmul", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_camera_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.make_world_to_camera_mat", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.get_world_coord_grid"], ["", "def", "get_projection_mapping", "(", "self", ",", "cam_pos", ",", "cam_rot", ",", "local_frame", "=", "False", ",", "range1", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        For each pixel in the global map, compute the location of that pixel in the image\n        :param cam_pos: camera position\n        :param cam_rot: camera orientation\n        :param image:\n        :return:\n        \"\"\"", "\n", "\n", "cam_pos", "=", "cam_pos", ".", "copy", "(", ")", "\n", "cam_pos", "[", "2", "]", "+=", "self", ".", "h_offset", "\n", "\n", "K", "=", "self", ".", "make_camera_matrix", "(", ")", "\n", "R_opt", "=", "self", ".", "make_optical_rotation_matrix", "(", ")", "\n", "T_opt", "=", "affines", ".", "compose", "(", "[", "0", ",", "0", ",", "0", "]", ",", "R_opt", ",", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "T_opt_inv", "=", "np", ".", "linalg", ".", "inv", "(", "T_opt", ")", "\n", "T", "=", "self", ".", "make_world_to_camera_mat", "(", "cam_pos", ",", "cam_rot", ")", "\n", "Tinv", "=", "np", ".", "linalg", ".", "inv", "(", "T", ")", "\n", "\n", "# Get the map position encodings (MxMx3)", "\n", "pts_w", "=", "self", ".", "get_world_coord_grid", "(", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "# Get the coordinates in camera frame:", "\n", "if", "not", "local_frame", ":", "\n", "# If we're using a global map frame, transform the map coordinates into the camera frame", "\n", "            ", "pts_cam", "=", "np", ".", "matmul", "(", "Tinv", "[", "np", ".", "newaxis", ",", "...", "]", ",", "pts_w", ")", "\n", "", "else", ":", "\n", "# If we're using local frame, camera is centered in the map, but pitch must still be taken into account!", "\n", "# TODO: Fix this and add pitch", "\n", "            ", "pts_cam", "=", "pts_w", "\n", "pts_cam", "[", ":", ",", "0", ":", "2", "]", "=", "pts_cam", "[", ":", ",", "0", ":", "2", "]", "-", "self", ".", "map_world_size_px", "/", "2", "\n", "\n", "# Get the coordinates in optical frame", "\n", "", "pts_opt", "=", "np", ".", "matmul", "(", "T_opt_inv", "[", "np", ".", "newaxis", ",", "...", "]", ",", "pts_cam", ")", "\n", "\n", "# Get the 3D coordinates of the map pixels in the image frame:", "\n", "pts_img", "=", "np", ".", "matmul", "(", "K", "[", "np", ".", "newaxis", ",", "...", "]", ",", "pts_opt", "[", ":", ",", "0", ":", "3", ",", ":", "]", ")", "\n", "\n", "# Convert to homogeneous (image-plane) coordinates", "\n", "valid_z", "=", "pts_img", "[", ":", ",", "2", ":", "3", ",", ":", "]", ">", "0", "\n", "\n", "pts_img", "=", "pts_img", "/", "(", "pts_img", "[", ":", ",", "2", ":", "3", "]", "+", "1e-9", ")", "\n", "#pts_img[:, 0] = pts_img[:, 0] / (pts_img[:, 2] + 1e-9)", "\n", "#pts_img[:, 1] = pts_img[:, 1] / (pts_img[:, 2] + 1e-9)", "\n", "\n", "# Mask out all the map elements that don't project on the image", "\n", "valid_y1", "=", "pts_img", "[", ":", ",", "0", ":", "1", ",", ":", "]", ">", "0", "\n", "valid_y2", "=", "pts_img", "[", ":", ",", "0", ":", "1", ",", ":", "]", "<", "self", ".", "res_x", "\n", "valid_x1", "=", "pts_img", "[", ":", ",", "1", ":", "2", ",", ":", "]", ">", "0", "\n", "valid_x2", "=", "pts_img", "[", ":", ",", "1", ":", "2", ",", ":", "]", "<", "self", ".", "res_y", "\n", "\n", "# Throw away the homogeneous Z coordinate", "\n", "pts_img", "=", "pts_img", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "valid", "=", "valid_y1", "*", "valid_y2", "*", "valid_x1", "*", "valid_x2", "*", "valid_z", "\n", "\n", "# PyTorch takes projection mappings in -1 to 1 range:", "\n", "if", "range1", ":", "\n", "            ", "pts_img", "[", ":", ",", "0", "]", "=", "(", "-", "pts_img", "[", ":", ",", "0", "]", "+", "self", ".", "res_x", "/", "2", ")", "/", "(", "self", ".", "res_x", "/", "2", ")", "\n", "pts_img", "[", ":", ",", "1", "]", "=", "(", "-", "pts_img", "[", ":", ",", "1", "]", "+", "self", ".", "res_y", "/", "2", ")", "/", "(", "self", ".", "res_y", "/", "2", ")", "\n", "\n", "# Make sure the invalid points are out of range", "\n", "pts_img", "=", "pts_img", "*", "valid", "+", "2", "*", "np", ".", "ones_like", "(", "pts_img", ")", "*", "(", "1", "-", "valid", ")", "\n", "", "else", ":", "\n", "            ", "pts_img", "=", "pts_img", "*", "valid", "\n", "\n", "# Remove the extra 1-length dimension", "\n", "", "pts_img", "=", "pts_img", ".", "squeeze", "(", ")", "\n", "\n", "# Reshape into the 2D map representation", "\n", "pts_img", "=", "np", ".", "reshape", "(", "pts_img", ",", "[", "self", ".", "map_size_px", ",", "self", ".", "map_size_px", ",", "2", "]", ")", "\n", "\n", "return", "pts_img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjectionModuleGlobal.__init__": [[215, 226], ["torch.Module.__init__", "pinhole_camera_inv.PinholeCameraProjection"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "map_size", ",", "\n", "world_in_map_size", ",", "\n", "world_size", ",", "\n", "img_w", ",", "img_h", ",", "\n", "cam_fov", ",", "\n", "domain", ")", ":", "\n", "        ", "super", "(", "PinholeCameraProjectionModuleGlobal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "map_size", "=", "map_size", "\n", "self", ".", "projector", "=", "PinholeCameraProjection", "(", "map_size", ",", "world_in_map_size", ",", "world_size", ",", "img_w", ",", "img_h", ",", "cam_fov", ",", "domain", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjectionModuleGlobal.forward": [[227, 238], ["len", "learning.inputs.common.empty_float_tensor", "range", "pinhole_camera_inv.PinholeCameraProjectionModuleGlobal.projector.get_projection_mapping", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "cam_pose[].position.cpu().data.numpy", "cam_pose[].orientation.cpu().data.numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cam_pose[].position.cpu", "cam_pose[].orientation.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_camera_inv.PinholeCameraProjection.get_projection_mapping", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "forward", "(", "self", ",", "cam_pose", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "cam_pose", ")", "\n", "out_cpu", "=", "empty_float_tensor", "(", "[", "batch_size", ",", "self", ".", "map_size", ",", "self", ".", "map_size", ",", "2", "]", ")", "\n", "\n", "# TODO: parallel for loop this", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "mapping_i_np", "=", "self", ".", "projector", ".", "get_projection_mapping", "(", "cam_pose", "[", "i", "]", ".", "position", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "cam_pose", "[", "i", "]", ".", "orientation", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "range1", "=", "True", ")", "\n", "mapping_i", "=", "torch", ".", "from_numpy", "(", "mapping_i_np", ")", ".", "float", "(", ")", "\n", "out_cpu", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "mapping_i", "\n", "\n", "", "return", "out_cpu", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_rotation_2d.Rotation2D.__init__": [[13, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_size", "=", "30", ",", "world_size", "=", "30", ")", ":", "\n", "        ", "super", "(", "Rotation2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "map_size", "=", "map_size", "\n", "self", ".", "world_size", "=", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_rotation_2d.Rotation2D.forward": [[18, 51], ["image.size", "numpy.zeros", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "affine_in.to.to.to", "torch.affine_grid().float", "torch.affine_grid().float", "torch.affine_grid().float", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "cam_rot.data[].cpu().numpy", "cam_pos.data[].cpu().numpy", "transforms3d.euler.quat2euler", "math.cos", "math.sin", "numpy.asarray", "numpy.asarray", "numpy.matmul", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "cam_rot.data[].cpu", "cam_pos.data[].cpu", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "forward", "(", "self", ",", "image", ",", "cam_pos", ",", "cam_rot", ")", ":", "\n", "\n", "# First build the affine 2D matrices representing the rotation around Z axis", "\n", "        ", "batch_size", "=", "image", ".", "size", "(", "0", ")", "\n", "affines_np", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "b_rot", "=", "cam_rot", ".", "data", "[", "batch", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "b_pos", "=", "cam_pos", ".", "data", "[", "batch", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "roll", ",", "pitch", ",", "yaw", "=", "euler", ".", "quat2euler", "(", "b_rot", ")", "\n", "c", "=", "math", ".", "cos", "(", "-", "yaw", ")", "\n", "s", "=", "math", ".", "sin", "(", "-", "yaw", ")", "\n", "\n", "pos_rel", "=", "b_pos", "/", "self", ".", "world_size", "\n", "pos_rel", "=", "pos_rel", "-", "0.5", "\n", "pos_rel", "*=", "2", "\n", "\n", "# Affine matrix to center the map around the drone", "\n", "affine_displacement", "=", "np", ".", "asarray", "(", "[", "[", "1", ",", "0", ",", "pos_rel", "[", "0", "]", "]", ",", "[", "0", ",", "1", ",", "pos_rel", "[", "1", "]", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "# Affine matrix to rotate the map to the drone's frame", "\n", "affine_rotation", "=", "np", ".", "asarray", "(", "[", "[", "c", ",", "s", ",", "0", "]", ",", "[", "-", "s", ",", "c", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "# Translate first, then rotate", "\n", "affines_np", "[", "batch", "]", "=", "np", ".", "matmul", "(", "affine_displacement", ",", "affine_rotation", ")", "\n", "\n", "", "affine_in", "=", "torch", ".", "from_numpy", "(", "affines_np", "[", ":", ",", "0", ":", "2", ",", ":", "]", ")", "\n", "affine_in", "=", "affine_in", ".", "to", "(", "image", ".", "device", ")", "\n", "\n", "# Build the affine grid", "\n", "grid", "=", "F", ".", "affine_grid", "(", "affine_in", ",", "torch", ".", "Size", "(", "(", "batch_size", ",", "1", ",", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Rotate the input image", "\n", "rot_img", "=", "F", ".", "grid_sample", "(", "image", ",", "grid", ")", "\n", "return", "rot_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.__init__": [[14, 26], ["numpy.asarray", "param_dict.get", "param_dict.get", "param_dict.get", "param_dict.get"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["    ", "def", "__init__", "(", "self", ",", "param_dict", ")", ":", "\n", "\n", "        ", "self", ".", "map_size", "=", "param_dict", "[", "\"map_size\"", "]", "\n", "self", ".", "world_size", "=", "param_dict", "[", "\"world_size\"", "]", "\n", "self", ".", "map_world_size", "=", "param_dict", "[", "\"world_size_in_map\"", "]", "\n", "self", ".", "res_x", "=", "param_dict", "[", "\"img_x\"", "]", "\n", "self", ".", "res_y", "=", "param_dict", "[", "\"img_y\"", "]", "\n", "self", ".", "use_depth", "=", "param_dict", ".", "get", "(", "\"use_depth\"", ")", "or", "False", "\n", "map_x", "=", "param_dict", ".", "get", "(", "\"cam_map_x\"", ")", "or", "0", "\n", "map_y", "=", "param_dict", ".", "get", "(", "\"cam_map_y\"", ")", "or", "0", "\n", "self", ".", "map_origin", "=", "np", ".", "asarray", "(", "[", "map_x", ",", "map_y", "]", ")", "\n", "self", ".", "cam_fov", "=", "param_dict", ".", "get", "(", "\"cam_fov\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_focal_len": [[27, 29], ["math.tan"], "methods", ["None"], ["", "def", "get_focal_len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "res_x", "*", "0.5", "/", "math", ".", "tan", "(", "self", ".", "cam_fov", "*", "0.5", "*", "3.14159", "/", "180", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_camera_matrix": [[30, 33], ["pinhole_projection_map.PinholeProjector.get_focal_len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_focal_len"], ["", "def", "make_camera_matrix", "(", "self", ")", ":", "\n", "        ", "f", "=", "self", ".", "get_focal_len", "(", ")", "\n", "return", "np", ".", "asarray", "(", "[", "[", "f", ",", "0", ",", "self", ".", "res_x", "/", "2", "]", ",", "[", "0", ",", "f", ",", "self", ".", "res_y", "/", "2", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_rotation_matrix": [[34, 36], ["transforms3d.quaternions.quat2mat"], "methods", ["None"], ["", "def", "make_rotation_matrix", "(", "self", ",", "quat", ")", ":", "\n", "        ", "return", "quaternions", ".", "quat2mat", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix": [[37, 39], ["transforms3d.euler.euler2mat"], "methods", ["None"], ["", "def", "make_optical_rotation_matrix", "(", "self", ")", ":", "\n", "        ", "return", "euler", ".", "euler2mat", "(", "-", "1.579", ",", "0", ",", "-", "1.579", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_coord_grid": [[40, 56], ["numpy.arange", "numpy.arange", "numpy.expand_dims().repeat", "numpy.concatenate", "numpy.ones", "numpy.concatenate", "numpy.flip", "numpy.flip", "numpy.expand_dims().repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat"], ["", "def", "get_coord_grid", "(", "self", ",", "x_size", ",", "y_size", ",", "flip_x", "=", "False", ",", "flip_y", "=", "False", ")", ":", "\n", "        ", "x_pixels", "=", "np", ".", "arange", "(", "0", ",", "x_size", ",", "1", ")", "\n", "y_pixels", "=", "np", ".", "arange", "(", "0", ",", "y_size", ",", "1", ")", "\n", "\n", "if", "flip_x", ":", "\n", "            ", "x_pixels", "=", "np", ".", "flip", "(", "x_pixels", ",", "0", ")", "\n", "", "if", "flip_y", ":", "\n", "            ", "y_pixels", "=", "np", ".", "flip", "(", "y_pixels", ",", "0", ")", "\n", "\n", "", "x_pixels", "=", "np", ".", "expand_dims", "(", "x_pixels", ",", "1", ")", ".", "repeat", "(", "y_size", ",", "1", ")", "\n", "y_pixels", "=", "np", ".", "expand_dims", "(", "y_pixels", ",", "1", ")", ".", "repeat", "(", "x_size", ",", "1", ")", ".", "T", "\n", "\n", "coord_grid_2d", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "x_pixels", ",", "2", ")", ",", "np", ".", "expand_dims", "(", "y_pixels", ",", "2", ")", ")", ",", "axis", "=", "2", ")", "\n", "z", "=", "np", ".", "ones", "(", "(", "coord_grid_2d", ".", "shape", "[", "0", "]", ",", "coord_grid_2d", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "coord_grid_3d", "=", "np", ".", "concatenate", "(", "(", "coord_grid_2d", ",", "z", ")", ",", "axis", "=", "2", ")", "\n", "return", "coord_grid_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.plot_histogram": [[57, 63], ["numpy.histogram", "matplotlib.bar", "matplotlib.show"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show"], ["", "def", "plot_histogram", "(", "self", ",", "data", ")", ":", "\n", "        ", "hist", ",", "bins", "=", "np", ".", "histogram", "(", "data", ")", "\n", "width", "=", "0.7", "*", "(", "bins", "[", "1", "]", "-", "bins", "[", "0", "]", ")", "\n", "center", "=", "(", "bins", "[", ":", "-", "1", "]", "+", "bins", "[", "1", ":", "]", ")", "/", "2", "\n", "plt", ".", "bar", "(", "center", ",", "hist", ",", "align", "=", "'center'", ",", "width", "=", "width", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_sample": [[64, 78], ["numpy.asarray", "numpy.asarray", "cam_img.transpose.transpose.transpose", "open", "pickle.load"], "methods", ["None"], ["", "def", "get_sample", "(", "self", ",", "idx", ")", ":", "\n", "        ", "with", "open", "(", "\"cam_pos_samples\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "samples", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "sample", "=", "samples", "[", "idx", "]", "\n", "\n", "cam_pos", "=", "np", ".", "asarray", "(", "sample", "[", "\"pos\"", "]", ")", "\n", "cam_rot", "=", "np", ".", "asarray", "(", "sample", "[", "\"rot\"", "]", ")", "\n", "cam_img", "=", "sample", "[", "\"img\"", "]", "\n", "\n", "cam_img", "=", "cam_img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "cam_pos", "[", "2", "]", "=", "cam_pos", "[", "2", "]", "-", "2.0", "\n", "\n", "return", "cam_img", ",", "cam_pos", ",", "cam_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.plot_cloud": [[79, 104], ["pandas.DataFrame.squeeze", "image.reshape", "numpy.concatenate", "numpy.asarray", "numpy.concatenate", "pandas.DataFrame", "PyntCloud", "PyntCloud.add_scalar_field", "PyntCloud.plot", "len", "image.reshape"], "methods", ["None"], ["", "def", "plot_cloud", "(", "self", ",", "points", ",", "cam_pos", "=", "[", "0", ",", "0", ",", "0", "]", ",", "image", "=", "None", ")", ":", "\n", "        ", "if", "image", "is", "not", "None", "and", "len", "(", "image", ".", "reshape", "(", "-", "1", ")", ")", "%", "3", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "pts_xyz", "=", "points", ".", "squeeze", "(", ")", "\n", "pts_rgb", "=", "image", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "pts_np", "=", "np", ".", "concatenate", "(", "(", "pts_xyz", ",", "pts_rgb", ")", ",", "axis", "=", "1", ")", "\n", "\n", "c", "=", "cam_pos", "\n", "pts_border", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0.0", ",", "30.", ",", "0.0", ",", "0", ",", "255", ",", "0", "]", ",", "\n", "[", "30.", ",", "0.0", ",", "0.0", ",", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "30.", ",", "30.", ",", "0.0", ",", "255", ",", "255", ",", "0", "]", ",", "\n", "[", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ",", "0", ",", "255", ",", "255", "]", "\n", "]", "\n", ")", "\n", "\n", "pts_np", "=", "np", ".", "concatenate", "(", "(", "pts_np", ",", "pts_border", ")", ",", "axis", "=", "0", ")", "\n", "\n", "points", "=", "pd", ".", "DataFrame", "(", "pts_np", ",", "columns", "=", "[", "'x'", ",", "'y'", ",", "'z'", ",", "'red'", ",", "'green'", ",", "'blue'", "]", ")", "\n", "cloud", "=", "PyntCloud", "(", "points", ")", "\n", "cloud", ".", "add_scalar_field", "(", "\"rgb_intensity\"", ")", "\n", "return", "cloud", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image": [[105, 139], ["cam_pos.copy.copy.numpy", "cam_rot.numpy.numpy.numpy", "cam_pos.copy.copy.copy", "pinhole_projection_map.PinholeProjector.make_camera_matrix", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.asarray", "pinhole_projection_map.PinholeProjector.make_rotation_matrix", "pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_camera_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix"], ["", "def", "world_point_to_image", "(", "self", ",", "cam_pos", ",", "cam_rot", ",", "point", ")", ":", "\n", "        ", "cam_pos", "=", "cam_pos", ".", "numpy", "(", ")", "\n", "cam_rot", "=", "cam_rot", ".", "numpy", "(", ")", "\n", "\n", "cam_pos", "=", "cam_pos", ".", "copy", "(", ")", "\n", "cam_pos", "[", "2", "]", "+=", "DRONE_HEIGHT", "\n", "\n", "K", "=", "self", ".", "make_camera_matrix", "(", ")", "\n", "R", "=", "self", ".", "make_rotation_matrix", "(", "cam_rot", ")", ".", "T", "\n", "R_opt", "=", "self", ".", "make_optical_rotation_matrix", "(", ")", ".", "T", "\n", "\n", "point_in_cam_pos", "=", "point", "-", "cam_pos", "# Point in global frame centered around camera position", "\n", "point_in_cam", "=", "np", ".", "dot", "(", "R", ",", "point_in_cam_pos", ")", "# Point in camera frame", "\n", "point_in_cam_opt", "=", "np", ".", "dot", "(", "R_opt", ",", "point_in_cam", ")", "# Point in camera's optical frame", "\n", "\n", "# This landmark is behind the drone not in front of it", "\n", "if", "point_in_cam_opt", "[", "2", "]", "<", "0", ":", "\n", "            ", "return", "None", ",", "point_in_cam_opt", ",", "\"point behind\"", "\n", "\n", "", "image_point", "=", "np", ".", "dot", "(", "K", ",", "point_in_cam_opt", ")", "# Point in the image in pixels coordinates", "\n", "image_point_in_pixels", "=", "image_point", "/", "image_point", "[", "2", "]", "\n", "\n", "# Landmark is in front of drone but out of image bounds", "\n", "if", "image_point_in_pixels", "[", "0", "]", "<", "0", "or", "image_point_in_pixels", "[", "0", "]", ">", "self", ".", "res_x", "or", "image_point_in_pixels", "[", "1", "]", "<", "0", "or", "image_point_in_pixels", "[", "1", "]", ">", "self", ".", "res_y", ":", "\n", "            ", "return", "None", ",", "point_in_cam_opt", ",", "\"point oob\"", "\n", "\n", "# Make sure coordinates are consistent with images. For some reason this is necessary...", "\n", "", "image_point_in_pixels_out", "=", "np", ".", "asarray", "(", "\n", "[", "self", ".", "res_y", "-", "image_point_in_pixels", "[", "1", "]", ",", "\n", "self", ".", "res_x", "-", "image_point_in_pixels", "[", "0", "]", "]", "\n", ")", "\n", "\n", "return", "image_point_in_pixels_out", ",", "point_in_cam_opt", ",", "\"point in camera\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_projection_mapping_local": [[140, 202], ["numpy.linalg.inv", "pinhole_projection_map.PinholeProjector.make_rotation_matrix", "pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix", "pinhole_projection_map.PinholeProjector.get_coord_grid", "pinhole_projection_map.PinholeProjector.reshape", "numpy.expand_dims", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.clip", "numpy.expand_dims", "numpy.clip.astype", "numpy.clip", "numpy.clip", "numpy.full", "numpy.full", "numpy.put", "numpy.put", "numpy.concatenate", "pinhole_projection_map.PinholeProjector.make_camera_matrix", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.squeeze().transpose", "numpy.reshape", "int", "numpy.clip.reshape", "numpy.clip", "numpy.expand_dims", "numpy.expand_dims", "numpy.matmul().squeeze", "math.sqrt", "numpy.clip.astype", "ground_pts_camera.reshape", "numpy.expand_dims", "numpy.expand_dims", "numpy.squeeze", "numpy.matmul", "float", "float", "numpy.expand_dims", "numpy.full.reshape", "numpy.full.reshape"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_coord_grid", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_camera_matrix"], ["", "def", "get_projection_mapping_local", "(", "self", ",", "cam_pos", ",", "cam_rot", ",", "depth_im", "=", "None", ")", ":", "\n", "\n", "        ", "cam_Z", "=", "cam_pos", "[", "2", "]", "+", "DRONE_HEIGHT", "\n", "\n", "Kinv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "make_camera_matrix", "(", ")", ")", "\n", "R", "=", "self", ".", "make_rotation_matrix", "(", "cam_rot", ")", "\n", "R_opt", "=", "self", ".", "make_optical_rotation_matrix", "(", ")", "\n", "\n", "pts_grid", "=", "self", ".", "get_coord_grid", "(", "self", ".", "res_x", ",", "self", ".", "res_y", ",", "flip_x", "=", "True", ",", "flip_y", "=", "True", ")", "\n", "pts", "=", "pts_grid", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "pts", "=", "np", ".", "expand_dims", "(", "pts", ",", "axis", "=", "2", ")", "\n", "\n", "# Project pixel points out as rays into 3D space and rotate to the global reference frame", "\n", "rays_optical", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "Kinv", ",", "0", ")", ",", "pts", ")", "\n", "rays_camera", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "R_opt", ",", "0", ")", ",", "rays_optical", ")", "\n", "rays_global", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "R", ",", "0", ")", ",", "rays_camera", ")", "\n", "\n", "# Calculate ray lengths: the multipliers that would cause the global Z-coordinate to be 0 at the given drone height", "\n", "if", "depth_im", "is", "not", "None", "and", "self", ".", "use_depth", ":", "\n", "            ", "depth_im", "=", "np", ".", "squeeze", "(", "depth_im", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "depth_im_flat", "=", "np", ".", "reshape", "(", "depth_im", ",", "(", "-", "1", ")", ")", "\n", "subsampling_factor", "=", "int", "(", "math", ".", "sqrt", "(", "pts", ".", "shape", "[", "0", "]", "/", "depth_im_flat", ".", "shape", "[", "0", "]", ")", ")", "\n", "pts_index_depth", "=", "pts_grid", "/", "subsampling_factor", "\n", "pts_index_depth", "=", "pts_index_depth", ".", "astype", "(", "np", ".", "uint16", ")", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "pts_index_depth", "=", "pts_index_depth", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "\n", "#pts_index_depth[:, 0] = depth_im.shape[0] - pts_index_depth[:, 0]", "\n", "pts_index_depth", "[", ":", ",", "1", "]", "=", "depth_im", ".", "shape", "[", "1", "]", "-", "pts_index_depth", "[", ":", ",", "1", "]", "\n", "pts_index_depth", "=", "pts_index_depth", "[", ":", ",", "0", "]", "*", "depth_im", ".", "shape", "[", "1", "]", "+", "pts_index_depth", "[", ":", ",", "1", "]", "\n", "pts_index_depth", "=", "np", ".", "clip", "(", "pts_index_depth", ",", "0", ",", "depth_im_flat", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "depth", "=", "depth_im_flat", "[", "pts_index_depth", "]", "\n", "depth", "=", "np", ".", "expand_dims", "(", "depth", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "depth", "=", "-", "cam_Z", "/", "rays_global", "[", ":", ",", "2", ",", ":", "]", "\n", "\n", "", "depth", "=", "np", ".", "clip", "(", "depth", ",", "0", ",", "50", ")", "# Clip the ray length to avoid very large numbers near the horizon", "\n", "\n", "# Calculate the 3D locations of image points in the camera frame and convert to global frame", "\n", "ground_pts_optical", "=", "rays_optical", "*", "np", ".", "expand_dims", "(", "depth", ",", "1", ")", "\n", "ground_pts_camera", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "R_opt", ",", "0", ")", ",", "ground_pts_optical", ")", ".", "squeeze", "(", ")", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "scatter", "=", "ground_pts_camera", ".", "reshape", "(", "(", "self", ".", "res_x", ",", "self", ".", "res_y", ",", "2", ")", ")", "*", "self", ".", "map_world_size", "/", "self", ".", "world_size", "\n", "scatter", "+=", "np", ".", "expand_dims", "(", "self", ".", "map_origin", ",", "0", ")", "\n", "scatter", "=", "scatter", ".", "astype", "(", "int", ")", "\n", "scatter", "=", "np", ".", "clip", "(", "scatter", ",", "0", ",", "self", ".", "map_size", ")", "\n", "\n", "scatter_2d", "=", "scatter", "[", ":", ",", ":", ",", "1", "]", "*", "self", ".", "map_size", "+", "scatter", "[", ":", ",", ":", ",", "0", "]", "\n", "scatter_2d", "=", "np", ".", "clip", "(", "scatter_2d", ",", "0", ",", "self", ".", "map_size", "*", "self", ".", "map_size", "-", "1", ")", "\n", "\n", "# Now need to scatter the original 2D coordinates and we will obtain the gather grid", "\n", "projection_map_x", "=", "np", ".", "full", "(", "self", ".", "map_size", "*", "self", ".", "map_size", ",", "-", "1", ")", "\n", "projection_map_y", "=", "np", ".", "full", "(", "self", ".", "map_size", "*", "self", ".", "map_size", ",", "-", "1", ")", "\n", "\n", "np", ".", "put", "(", "projection_map_x", ",", "scatter_2d", ".", "flat", ",", "pts", "[", ":", ",", "0", ",", ":", "]", ".", "flat", ")", "\n", "np", ".", "put", "(", "projection_map_y", ",", "scatter_2d", ".", "flat", ",", "pts", "[", ":", ",", "1", ",", ":", "]", ".", "flat", ")", "\n", "\n", "# Notice the negative sign! It's to do with how grid_sample defines coordinates", "\n", "projection_map_x", "=", "-", "(", "projection_map_x", ".", "reshape", "(", "(", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ")", "*", "2", "/", "float", "(", "self", ".", "res_x", ")", "-", "1", ")", "\n", "projection_map_y", "=", "-", "(", "projection_map_y", ".", "reshape", "(", "(", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ")", "*", "2", "/", "float", "(", "self", ".", "res_y", ")", "-", "1", ")", "\n", "\n", "projection_map", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "projection_map_x", ",", "2", ")", ",", "np", ".", "expand_dims", "(", "projection_map_y", ",", "2", ")", ")", ",", "2", ")", "\n", "return", "projection_map", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_projection_mapping_global": [[203, 251], ["numpy.linalg.inv", "pinhole_projection_map.PinholeProjector.make_rotation_matrix", "pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix", "pinhole_projection_map.PinholeProjector.get_coord_grid().reshape", "numpy.expand_dims", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.clip", "numpy.matmul", "numpy.matmul", "scatter[].astype().squeeze", "numpy.clip", "numpy.clip", "numpy.full", "numpy.full", "numpy.put", "numpy.put", "numpy.concatenate", "pinhole_projection_map.PinholeProjector.make_camera_matrix", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "pinhole_projection_map.PinholeProjector.get_coord_grid", "numpy.expand_dims", "ground_pts_global.reshape", "scatter[].astype", "numpy.expand_dims", "numpy.expand_dims", "float", "float", "numpy.full.reshape", "numpy.full.reshape"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_optical_rotation_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.make_camera_matrix", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_coord_grid"], ["", "def", "get_projection_mapping_global", "(", "self", ",", "cam_pos", ",", "cam_rot", ",", "image", "=", "None", ")", ":", "\n", "\n", "        ", "cam_Z", "=", "cam_pos", "[", "2", "]", "+", "DRONE_HEIGHT", "\n", "\n", "Kinv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "make_camera_matrix", "(", ")", ")", "\n", "R", "=", "self", ".", "make_rotation_matrix", "(", "cam_rot", ")", "\n", "R_opt", "=", "self", ".", "make_optical_rotation_matrix", "(", ")", "\n", "pts", "=", "self", ".", "get_coord_grid", "(", "self", ".", "res_x", ",", "self", ".", "res_y", ",", "flip_x", "=", "True", ",", "flip_y", "=", "True", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "pts", "=", "np", ".", "expand_dims", "(", "pts", ",", "axis", "=", "2", ")", "\n", "\n", "# Project pixel points out as rays into 3D space and rotate them to the global reference frame", "\n", "rays_optical", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "Kinv", ",", "0", ")", ",", "pts", ")", "\n", "rays_camera", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "R_opt", ",", "0", ")", ",", "rays_optical", ")", "\n", "rays_global", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "R", ",", "0", ")", ",", "rays_camera", ")", "\n", "\n", "# Raytrace for ground: calculate the multipliers that would cause the global Z-coordinate to be 0", "\n", "# TODO: Use depth image instead", "\n", "depth", "=", "-", "cam_Z", "/", "rays_global", "[", ":", ",", "2", ",", ":", "]", "\n", "depth", "=", "np", ".", "clip", "(", "depth", ",", "0", ",", "50", ")", "# Clip the ray length to avoid very large numbers near the horizon", "\n", "\n", "# Calculate the 3D locations of image points in the camera frame and convert to global frame", "\n", "ground_pts_optical", "=", "rays_optical", "*", "np", ".", "expand_dims", "(", "depth", ",", "1", ")", "\n", "ground_pts_camera", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "R_opt", ",", "0", ")", ",", "ground_pts_optical", ")", "\n", "ground_pts_camera_global_rot", "=", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "R", ",", "0", ")", ",", "ground_pts_camera", ")", "\n", "ground_pts_global", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "cam_pos", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "+", "ground_pts_camera_global_rot", "\n", "\n", "#self.plot_cloud (ground_pts_global, cam_pos, image)", "\n", "\n", "scatter", "=", "ground_pts_global", ".", "reshape", "(", "(", "self", ".", "res_x", ",", "self", ".", "res_y", ",", "3", ")", ")", "*", "self", ".", "map_size", "/", "self", ".", "world_size", "\n", "scatter", "=", "scatter", "[", ":", ",", ":", ",", "0", ":", "2", "]", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "scatter", "=", "np", ".", "clip", "(", "scatter", ",", "0", ",", "self", ".", "map_size", ")", "\n", "\n", "scatter_2d", "=", "scatter", "[", ":", ",", ":", ",", "1", "]", "*", "self", ".", "map_size", "+", "scatter", "[", ":", ",", ":", ",", "0", "]", "\n", "scatter_2d", "=", "np", ".", "clip", "(", "scatter_2d", ",", "0", ",", "self", ".", "map_size", "*", "self", ".", "map_size", "-", "1", ")", "\n", "\n", "# Now need to scatter the original 2D coordinates and we will obtain the gather grid", "\n", "semantic_gather_x", "=", "np", ".", "full", "(", "self", ".", "map_size", "*", "self", ".", "map_size", ",", "-", "1", ")", "\n", "semantic_gather_y", "=", "np", ".", "full", "(", "self", ".", "map_size", "*", "self", ".", "map_size", ",", "-", "1", ")", "\n", "\n", "np", ".", "put", "(", "semantic_gather_x", ",", "scatter_2d", ".", "flat", ",", "pts", "[", ":", ",", "0", ",", ":", "]", ".", "flat", ")", "\n", "np", ".", "put", "(", "semantic_gather_y", ",", "scatter_2d", ".", "flat", ",", "pts", "[", ":", ",", "1", ",", ":", "]", ".", "flat", ")", "\n", "\n", "# Notice the negative sign! It's to do with how grid_sample defines coordinates", "\n", "semantic_gather_x", "=", "-", "(", "semantic_gather_x", ".", "reshape", "(", "(", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ")", "*", "2", "/", "float", "(", "self", ".", "res_x", ")", "-", "1", ")", "\n", "semantic_gather_y", "=", "-", "(", "semantic_gather_y", ".", "reshape", "(", "(", "self", ".", "map_size", ",", "self", ".", "map_size", ")", ")", "*", "2", "/", "float", "(", "self", ".", "res_y", ")", "-", "1", ")", "\n", "\n", "semantic_gather", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "semantic_gather_y", ",", "2", ")", ",", "np", ".", "expand_dims", "(", "semantic_gather_x", ",", "2", ")", ")", ",", "2", ")", "\n", "return", "semantic_gather", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.__init__": [[17, 35], ["torch.nn.Module.__init__", "learning.modules.affine_2d.Affine2D", "utils.simple_profiler.SimpleProfiler", "numpy.asarray", "numpy.asarray", "learning.inputs.pose.Pose", "numpy.asarray", "numpy.asarray", "learning.inputs.pose.Pose"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "dest_map_size", ",", "world_size_px", ",", "world_size_m", ")", ":", "\n", "        ", "super", "(", "MapAffine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "source_map_size_px", "=", "source_map_size", "\n", "self", ".", "dest_map_size_px", "=", "dest_map_size", "\n", "self", ".", "world_in_map_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "\n", "self", ".", "affine_2d", "=", "Affine2D", "(", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "pos", "=", "np", ".", "asarray", "(", "[", "self", ".", "source_map_size_px", "/", "2", ",", "self", ".", "source_map_size_px", "/", "2", "]", ")", "\n", "rot", "=", "np", ".", "asarray", "(", "[", "0", "]", ")", "\n", "self", ".", "canonical_pose_src", "=", "Pose", "(", "pos", ",", "rot", ")", "\n", "\n", "pos", "=", "np", ".", "asarray", "(", "[", "self", ".", "dest_map_size_px", "/", "2", ",", "self", ".", "dest_map_size_px", "/", "2", "]", ")", "\n", "rot", "=", "np", ".", "asarray", "(", "[", "0", "]", ")", "\n", "self", ".", "canonical_pose_dst", "=", "Pose", "(", "pos", ",", "rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.pose_2d_to_mat_np": [[36, 61], ["transformations.get_affine_trans_2d", "transformations.get_affine_rot_2d", "transformations.get_affine_trans_2d", "numpy.dot", "numpy.dot", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_rot_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d"], ["", "def", "pose_2d_to_mat_np", "(", "self", ",", "pose_2d", ",", "map_size", ",", "inv", "=", "False", ")", ":", "\n", "        ", "pos", "=", "pose_2d", ".", "position", "\n", "yaw", "=", "pose_2d", ".", "orientation", "\n", "\n", "# Transform the img so that the drone's position ends up at the origin", "\n", "# TODO: Add batch support", "\n", "t1", "=", "get_affine_trans_2d", "(", "-", "pos", ")", "\n", "\n", "# Rotate the img so that it's aligned with the drone's orientation", "\n", "yaw", "=", "-", "yaw", "\n", "t2", "=", "get_affine_rot_2d", "(", "-", "yaw", ")", "\n", "\n", "# Translate the img so that it's centered around the drone", "\n", "t3", "=", "get_affine_trans_2d", "(", "[", "map_size", "/", "2", ",", "map_size", "/", "2", "]", ")", "\n", "\n", "mat", "=", "np", ".", "dot", "(", "t3", ",", "np", ".", "dot", "(", "t2", ",", "t1", ")", ")", "\n", "\n", "# Swap x and y axes (because of the BxCxHxW a.k.a BxCxYxX convention)", "\n", "swapmat", "=", "mat", "[", "[", "1", ",", "0", ",", "2", "]", ",", ":", "]", "\n", "mat", "=", "swapmat", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "\n", "if", "inv", ":", "\n", "            ", "mat", "=", "np", ".", "linalg", ".", "inv", "(", "mat", ")", "\n", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.poses_2d_to_mat_np": [[62, 88], ["numpy.asarray", "numpy.asarray", "transformations.get_affine_trans_2d", "transformations.get_affine_rot_2d", "transformations.get_affine_trans_2d", "numpy.matmul", "numpy.matmul", "numpy.asarray", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_rot_2d", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.get_affine_trans_2d"], ["", "def", "poses_2d_to_mat_np", "(", "self", ",", "pose_2d", ",", "map_size", ",", "inv", "=", "False", ")", ":", "\n", "        ", "pos", "=", "np", ".", "asarray", "(", "pose_2d", ".", "position", ")", "\n", "yaw", "=", "np", ".", "asarray", "(", "pose_2d", ".", "orientation", ")", "\n", "\n", "# Transform the img so that the drone's position ends up at the origin", "\n", "# TODO: Add batch support", "\n", "t1", "=", "get_affine_trans_2d", "(", "-", "pos", ",", "batch", "=", "True", ")", "\n", "\n", "# Rotate the img so that it's aligned with the drone's orientation", "\n", "yaw", "=", "-", "yaw", "\n", "t2", "=", "get_affine_rot_2d", "(", "-", "yaw", ",", "batch", "=", "True", ")", "\n", "\n", "# Translate the img so that it's centered around the drone", "\n", "t3", "=", "get_affine_trans_2d", "(", "np", ".", "asarray", "(", "[", "map_size", "/", "2", ",", "map_size", "/", "2", "]", ")", ",", "batch", "=", "False", ")", "\n", "\n", "t21", "=", "np", ".", "matmul", "(", "t2", ",", "t1", ")", "\n", "mat", "=", "np", ".", "matmul", "(", "t3", ",", "t21", ")", "\n", "\n", "# Swap x and y axes (because of the BxCxHxW a.k.a BxCxYxX convention)", "\n", "swapmat", "=", "mat", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", ",", ":", "]", "\n", "mat", "=", "swapmat", "[", ":", ",", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "\n", "if", "inv", ":", "\n", "            ", "mat", "=", "np", ".", "linalg", ".", "inv", "(", "mat", ")", "\n", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_old_to_new_pose_mat": [[89, 96], ["map_affine.MapAffine.pose_2d_to_mat_np", "map_affine.MapAffine.pose_2d_to_mat_np", "numpy.dot", "learning.inputs.common.np_to_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.pose_2d_to_mat_np", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.pose_2d_to_mat_np", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.np_to_tensor"], ["", "def", "get_old_to_new_pose_mat", "(", "self", ",", "old_pose", ",", "new_pose", ")", ":", "\n", "        ", "old_T_inv", "=", "self", ".", "pose_2d_to_mat_np", "(", "old_pose", ",", "self", ".", "source_map_size_px", ",", "inv", "=", "True", ")", "\n", "new_T", "=", "self", ".", "pose_2d_to_mat_np", "(", "new_pose", ",", "self", ".", "dest_map_size_px", ",", "inv", "=", "False", ")", "\n", "mat", "=", "np", ".", "dot", "(", "new_T", ",", "old_T_inv", ")", "\n", "#mat = new_T", "\n", "mat_t", "=", "np_to_tensor", "(", "mat", ",", "cuda", "=", "False", ")", "\n", "return", "mat_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_old_to_new_pose_matrices": [[97, 104], ["map_affine.MapAffine.poses_2d_to_mat_np", "map_affine.MapAffine.poses_2d_to_mat_np", "numpy.matmul", "learning.inputs.common.np_to_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.poses_2d_to_mat_np", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.poses_2d_to_mat_np", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.np_to_tensor"], ["", "def", "get_old_to_new_pose_matrices", "(", "self", ",", "old_pose", ",", "new_pose", ")", ":", "\n", "        ", "old_T_inv", "=", "self", ".", "poses_2d_to_mat_np", "(", "old_pose", ",", "self", ".", "source_map_size_px", ",", "inv", "=", "True", ")", "\n", "new_T", "=", "self", ".", "poses_2d_to_mat_np", "(", "new_pose", ",", "self", ".", "dest_map_size_px", ",", "inv", "=", "False", ")", "\n", "mat", "=", "np", ".", "matmul", "(", "new_T", ",", "old_T_inv", ")", "\n", "#mat = new_T", "\n", "mat_t", "=", "np_to_tensor", "(", "mat", ",", "insert_batch_dim", "=", "False", ",", "cuda", "=", "False", ")", "\n", "return", "mat_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_affine_matrices": [[105, 125], ["map_affine.MapAffine.get_old_to_new_pose_matrices", "map_poses.numpy.numpy.numpy", "transformations.poses_m_to_px", "map_affine.MapAffine.canonical_pose_src.repeat_np", "cam_poses.numpy.numpy.numpy", "transformations.poses_m_to_px", "map_affine.MapAffine.canonical_pose_dst.repeat_np"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_old_to_new_pose_matrices", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.repeat_np", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.repeat_np"], ["", "def", "get_affine_matrices", "(", "self", ",", "map_poses", ",", "cam_poses", ",", "batch_size", ")", ":", "\n", "# Convert the pose from airsim coordinates to the image pixel coordinages", "\n", "# If the pose is None, use the canonical pose (global frame)", "\n", "        ", "if", "map_poses", "is", "not", "None", ":", "\n", "            ", "map_poses", "=", "map_poses", ".", "numpy", "(", ")", "# TODO: Check if we're gonna have a list here or something", "\n", "# TODO: This is the big bottleneck. Could we precompute it in the dataloader?", "\n", "map_poses_img", "=", "poses_m_to_px", "(", "map_poses", ",", "self", ".", "source_map_size_px", ",", "[", "self", ".", "world_in_map_size_px", ",", "self", ".", "world_in_map_size_px", "]", ",", "self", ".", "world_size_m", ",", "batch_dim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "map_poses_img", "=", "self", ".", "canonical_pose_src", ".", "repeat_np", "(", "batch_size", ")", "\n", "\n", "", "if", "cam_poses", "is", "not", "None", ":", "\n", "            ", "cam_poses", "=", "cam_poses", ".", "numpy", "(", ")", "\n", "cam_poses_img", "=", "poses_m_to_px", "(", "cam_poses", ",", "self", ".", "dest_map_size_px", ",", "[", "self", ".", "world_in_map_size_px", ",", "self", ".", "world_in_map_size_px", "]", ",", "self", ".", "world_size_m", ",", "batch_dim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "cam_poses_img", "=", "self", ".", "canonical_pose_dst", ".", "repeat_np", "(", "batch_size", ")", "\n", "\n", "# Get the affine transformation matrix to transform the map to the new camera pose", "\n", "", "affines", "=", "self", ".", "get_old_to_new_pose_matrices", "(", "map_poses_img", ",", "cam_poses_img", ")", "\n", "\n", "return", "affines", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_affine_i": [[126, 149], ["map_affine.MapAffine.prof.tick", "map_affine.MapAffine.prof.tick", "map_affine.MapAffine.get_old_to_new_pose_mat", "map_affine.MapAffine.prof.tick", "map_poses[].numpy", "transformations.poses_m_to_px", "cam_poses[].numpy", "transformations.poses_m_to_px"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_old_to_new_pose_mat", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px"], ["", "def", "get_affine_i", "(", "self", ",", "map_poses", ",", "cam_poses", ",", "i", ")", ":", "\n", "# Convert the pose from airsim coordinates to the image pixel coordinages", "\n", "# If the pose is None, use the canonical pose (global frame)", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "if", "map_poses", "is", "not", "None", "and", "map_poses", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "map_pose_i", "=", "map_poses", "[", "i", "]", ".", "numpy", "(", ")", "\n", "map_pose_img", "=", "poses_m_to_px", "(", "map_pose_i", ",", "self", ".", "source_map_size_px", ",", "[", "self", ".", "world_in_map_size_px", ",", "self", ".", "world_in_map_size_px", "]", ",", "self", ".", "world_size_m", ")", "\n", "", "else", ":", "\n", "            ", "map_pose_img", "=", "self", ".", "canonical_pose_src", "\n", "\n", "", "if", "cam_poses", "is", "not", "None", "and", "cam_poses", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "cam_pose_i", "=", "cam_poses", "[", "i", "]", ".", "numpy", "(", ")", "\n", "cam_pose_img", "=", "poses_m_to_px", "(", "cam_pose_i", ",", "self", ".", "dest_map_size_px", ",", "[", "self", ".", "world_in_map_size_px", ",", "self", ".", "world_in_map_size_px", "]", ",", "self", ".", "world_size_m", ")", "\n", "", "else", ":", "\n", "            ", "cam_pose_img", "=", "self", ".", "canonical_pose_dst", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"convert_pose\"", ")", "\n", "\n", "# Get the affine transformation matrix to transform the map to the new camera pose", "\n", "affine_i", "=", "self", ".", "get_old_to_new_pose_mat", "(", "map_pose_img", ",", "cam_pose_img", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"calc_affine\"", ")", "\n", "return", "affine_i", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.forward": [[150, 183], ["map_affine.MapAffine.prof.tick", "maps.size", "map_affine.MapAffine.prof.tick", "map_affine.MapAffine.get_affine_matrices", "map_affine.MapAffine.prof.tick", "map_affine.MapAffine.affine_2d", "map_affine.MapAffine.prof.tick", "map_affine.MapAffine.prof.loop", "map_affine.MapAffine.prof.print_stats"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.map_affine.MapAffine.get_affine_matrices", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats"], ["", "def", "forward", "(", "self", ",", "maps", ",", "current_poses", ",", "new_poses", ")", ":", "\n", "        ", "\"\"\"\n        Affine transform the map from being centered around map_pose in the canonocial map frame to\n        being centered around cam_pose in the canonical map frame.\n        Canonical map frame is the one where the map origin aligns with the environment origin, but the env may\n        or may not take up the entire map.\n        :param map: map centered around the drone in map_pose\n        :param current_poses: the previous drone pose in canonical map frame\n        :param new_poses: the new drone pose in canonical map frame\n        :return:\n        \"\"\"", "\n", "\n", "# TODO: Handle the case where cam_pose is None and return a map in the canonical frame", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "batch_size", "=", "maps", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"init\"", ")", "\n", "\n", "affine_matrices_cpu", "=", "self", ".", "get_affine_matrices", "(", "current_poses", ",", "new_poses", ",", "batch_size", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"affine_mat_and_pose\"", ")", "\n", "\n", "# Apply the affine transformation on the map", "\n", "# The affine matrices should be on CPU (if not, they'll be copied to CPU anyway!)", "\n", "# CUDA SYNC point:", "\n", "maps_out", "=", "self", ".", "affine_2d", "(", "maps", ",", "affine_matrices_cpu", ",", "out_size", "=", "[", "self", ".", "dest_map_size_px", ",", "self", ".", "dest_map_size_px", "]", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"affine_2d\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "if", "batch_size", ">", "1", ":", "\n", "            ", "self", ".", "prof", ".", "print_stats", "(", "20", ")", "\n", "\n", "", "return", "maps_out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.grid_sampler.GridSampler.__init__": [[12, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GridSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.grid_sampler.GridSampler.forward": [[15, 20], ["torch.nn.functional.grid_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "gather_maps", ")", ":", "\n", "# Semantic map", "\n", "#image = image.transpose(2, 3)   # Transpose the width and height before projection", "\n", "        ", "semantic_maps_out", "=", "F", ".", "grid_sample", "(", "image", ",", "gather_maps", ")", "\n", "return", "semantic_maps_out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.grid_sampler.PinholeProjectorPytorch.__init__": [[25, 37], ["torch.nn.Module.__init__", "learning.models.semantic_map.pinhole_projection_map.PinholeProjector"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_size", ",", "map_world_size", ",", "world_size", ",", "img_x", ",", "img_y", ",", "use_depth", "=", "False", ")", ":", "\n", "        ", "super", "(", "PinholeProjectorPytorch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "map_size", "=", "map_size", "\n", "self", ".", "map_world_size", "=", "map_world_size", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "projector", "=", "PinholeProjector", "(", "\n", "map_size", "=", "map_size", ",", "\n", "map_world_size", "=", "map_world_size", ",", "\n", "world_size", "=", "world_size", ",", "\n", "img_x", "=", "img_x", ",", "\n", "img_y", "=", "img_y", ",", "\n", "use_depth", "=", "use_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.grid_sampler.PinholeProjectorPytorch.get_gather_maps": [[38, 52], ["pos.size", "numpy.zeros", "range", "torch.from_numpy().float", "torch.autograd.Variable", "pos.data[].cpu().numpy", "rot.data[].cpu().numpy", "grid_sampler.PinholeProjectorPytorch.projector.get_projection_mapping_local", "torch.from_numpy", "pos.data[].cpu", "rot.data[].cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.get_projection_mapping_local", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "get_gather_maps", "(", "self", ",", "depth_images_np", ",", "pos", ",", "rot", ")", ":", "\n", "        ", "batch_size", "=", "pos", ".", "size", "(", "0", ")", "\n", "\n", "gather_maps", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "map_size", ",", "self", ".", "map_size", ",", "2", ")", ")", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "b_pos", "=", "pos", ".", "data", "[", "batch", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "b_rot", "=", "rot", ".", "data", "[", "batch", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "b_depth_image", "=", "depth_images_np", "[", "batch", "]", "#.cpu().numpy()", "\n", "gather_maps", "[", "batch", "]", "=", "self", ".", "projector", ".", "get_projection_mapping_local", "(", "b_pos", ",", "b_rot", ",", "depth_im", "=", "b_depth_image", ")", "\n", "\n", "# ----", "\n", "", "gather_maps", "=", "torch", ".", "from_numpy", "(", "gather_maps", ")", ".", "float", "(", ")", "\n", "gather_maps", "=", "Variable", "(", "gather_maps", ")", "\n", "return", "gather_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.grid_sampler.PinholeProjectorPytorch.forward": [[53, 58], ["torch.nn.functional.grid_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "gather_maps", ")", ":", "\n", "# Semantic map", "\n", "#image = image.transpose(2, 3)   # Transpose the width and height before projection", "\n", "        ", "semantic_maps_out", "=", "F", ".", "grid_sample", "(", "image", ",", "gather_maps", ")", "\n", "return", "semantic_maps_out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.DoubleConv.__init__": [[8, 12], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cin", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.DoubleConv.init_weights": [[13, 18], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3.DoubleConv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3.DoubleConv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.DoubleConv.forward": [[19, 24], ["unet_5_contextual_bneck3.DoubleConv.conv1", "torch.leaky_relu", "torch.leaky_relu", "unet_5_contextual_bneck3.DoubleConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.DoubleDeconv.__init__": [[27, 31], ["super().__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleDeconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ConvTranspose2d", "(", "cout", ",", "cout", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.DoubleDeconv.init_weights": [[32, 37], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3.DoubleDeconv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3.DoubleDeconv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.DoubleDeconv.forward": [[38, 45], ["unet_5_contextual_bneck3.DoubleDeconv.conv1", "torch.leaky_relu", "torch.leaky_relu", "unet_5_contextual_bneck3.DoubleDeconv.conv2", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "# TODO: 2 is stride", "\n", "        ", "osize1", "=", "[", "int", "(", "i", "/", "2", ")", "for", "i", "in", "output_size", "]", "\n", "x", "=", "self", ".", "conv1", "(", "img", ",", "output_size", "=", "osize1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "output_size", "=", "output_size", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.Unet5ContextualBneck.__init__": [[48, 99], ["super().__init__", "unet_5_contextual_bneck3.DoubleConv", "unet_5_contextual_bneck3.DoubleConv", "unet_5_contextual_bneck3.DoubleConv", "unet_5_contextual_bneck3.DoubleConv", "unet_5_contextual_bneck3.DoubleConv", "unet_5_contextual_bneck3.DoubleDeconv", "unet_5_contextual_bneck3.DoubleDeconv", "unet_5_contextual_bneck3.DoubleDeconv", "unet_5_contextual_bneck3.DoubleDeconv", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "embedding_size", ",", "hc1", "=", "32", ",", "hb1", "=", "16", ",", "hc2", "=", "256", ",", "stride", "=", "2", ",", "split_embedding", "=", "False", ")", ":", "\n", "        ", "super", "(", "Unet5ContextualBneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hc1", "=", "hc1", "\n", "self", ".", "hb1", "=", "hb1", "\n", "self", ".", "hc2", "=", "hc2", "\n", "\n", "self", ".", "split_embedding", "=", "split_embedding", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "if", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "DoubleConv", "(", "in_channels", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "deconv1", "=", "DoubleDeconv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "DoubleDeconv", "(", "hc1", "+", "hb1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv3", "=", "DoubleDeconv", "(", "hc1", "+", "hb1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv4", "=", "DoubleDeconv", "(", "hc1", "+", "hb1", ",", "hc2", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "hb1", "+", "hc2", ",", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc2", ")", "\n", "\n", "self", ".", "fnorm1", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "self", ".", "fnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "self", ".", "fnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "self", ".", "fnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.Unet5ContextualBneck.init_weights": [[100, 110], ["unet_5_contextual_bneck3.Unet5ContextualBneck.conv1.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv2.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv3.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv4.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv5.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv1.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv2.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv3.init_weights", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv4.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "init_weights", "(", ")", "\n", "self", ".", "conv2", ".", "init_weights", "(", ")", "\n", "self", ".", "conv3", ".", "init_weights", "(", ")", "\n", "self", ".", "conv4", ".", "init_weights", "(", ")", "\n", "self", ".", "conv5", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv1", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv2", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv3", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv4", ".", "init_weights", "(", ")", "\n", "#self.deconv5.init_weights()", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3.Unet5ContextualBneck.forward": [[112, 186], ["unet_5_contextual_bneck3.Unet5ContextualBneck.norm2", "unet_5_contextual_bneck3.Unet5ContextualBneck.norm3", "unet_5_contextual_bneck3.Unet5ContextualBneck.norm4", "unet_5_contextual_bneck3.Unet5ContextualBneck.norm5", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3.Unet5ContextualBneck.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3.Unet5ContextualBneck.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3.Unet5ContextualBneck.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv5", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv5", "torch.normalize", "torch.normalize", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.normalize.size", "range", "unet_5_contextual_bneck3.Unet5ContextualBneck.fnorm1", "unet_5_contextual_bneck3.Unet5ContextualBneck.fnorm2", "unet_5_contextual_bneck3.Unet5ContextualBneck.fnorm3", "unet_5_contextual_bneck3.Unet5ContextualBneck.fnorm4", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv1", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.act", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv1", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv2", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv3", "unet_5_contextual_bneck3.Unet5ContextualBneck.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv2", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv3", "unet_5_contextual_bneck3.Unet5ContextualBneck.deconv4", "input.size", "unet_5_contextual_bneck3.Unet5ContextualBneck.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "unet_5_contextual_bneck3.Unet5ContextualBneck.size", "unet_5_contextual_bneck3.Unet5ContextualBneck.size", "unet_5_contextual_bneck3.Unet5ContextualBneck.size", "unet_5_contextual_bneck3.Unet5ContextualBneck.lang19", "unet_5_contextual_bneck3.Unet5ContextualBneck.lang28", "unet_5_contextual_bneck3.Unet5ContextualBneck.lang37", "unet_5_contextual_bneck3.Unet5ContextualBneck.lang46", "unet_5_contextual_bneck3.Unet5ContextualBneck.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "embedding", "=", "F", ".", "normalize", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "# TODO: Verify if slicing like this is a terrible idea for performance", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "batch_size", "=", "embedding", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "", "x1", "=", "self", ".", "fnorm1", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "fnorm2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "fnorm3", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "fnorm4", "(", "x4f", ")", "\n", "x5", "=", "x5f", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "#x1 = self.dropout2(x1)", "\n", "#x2 = self.dropout2(x2)", "\n", "#x3 = self.dropout2(x3)", "\n", "#x4 = self.dropout2(x4)", "\n", "#x5 = self.dropout2(x5)", "\n", "\n", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.ConvBlock.__init__": [[10, 13], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "#self.conv2 = nn.Conv2d(cin, cout, k, stride=1, padding=padding)", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.ConvBlock.init_weights": [[15, 18], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_s.ConvBlock.conv1.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "#torch.nn.init.kaiming_uniform(self.conv2.weight)", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.ConvBlock.forward": [[21, 26], ["lingunet_5_s.ConvBlock.conv1", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "#x = self.conv2(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.DeconvBlock.__init__": [[29, 32], ["super().__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "DeconvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "#self.conv2 = nn.ConvTranspose2d(cout, cout, k, stride=stride, padding=padding)", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.DeconvBlock.init_weights": [[34, 37], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_s.DeconvBlock.conv1.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "#torch.nn.init.kaiming_uniform(self.conv2.weight)", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.DeconvBlock.forward": [[40, 47], ["lingunet_5_s.DeconvBlock.conv1", "torch.leaky_relu", "torch.leaky_relu", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "# TODO: 2 is stride", "\n", "        ", "osize1", "=", "[", "int", "(", "i", "/", "2", ")", "for", "i", "in", "output_size", "]", "\n", "x", "=", "self", ".", "conv1", "(", "img", ",", "output_size", "=", "output_size", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "#x = self.conv2(x, output_size=output_size)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.Lingunet5S.__init__": [[49, 96], ["super().__init__", "utils.dict_tools.objectview", "lingunet_5_s.ConvBlock", "lingunet_5_s.ConvBlock", "lingunet_5_s.ConvBlock", "lingunet_5_s.ConvBlock", "lingunet_5_s.ConvBlock", "lingunet_5_s.DeconvBlock", "lingunet_5_s.DeconvBlock", "lingunet_5_s.DeconvBlock", "lingunet_5_s.DeconvBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "#in_channels, out_channels, embedding_size, hc1=32, hb1=16, hc2=256, stride=2, split_embedding=False):", "\n", "        ", "super", "(", "Lingunet5S", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "objectview", "(", "params", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "self", ".", "p", ".", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "self", ".", "p", ".", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "ConvBlock", "(", "self", ".", "p", ".", "in_channels", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "ConvBlock", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "ConvBlock", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "ConvBlock", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "deconv1", "=", "DeconvBlock", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "DeconvBlock", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv3", "=", "DeconvBlock", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv4", "=", "DeconvBlock", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc2", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "p", ".", "hb1", "+", "self", ".", "p", ".", "hc2", ",", "self", ".", "p", ".", "out_channels", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc2", ")", "\n", "\n", "self", ".", "fnorm1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.Lingunet5S.init_weights": [[97, 107], ["lingunet_5_s.Lingunet5S.conv1.init_weights", "lingunet_5_s.Lingunet5S.conv2.init_weights", "lingunet_5_s.Lingunet5S.conv3.init_weights", "lingunet_5_s.Lingunet5S.conv4.init_weights", "lingunet_5_s.Lingunet5S.conv5.init_weights", "lingunet_5_s.Lingunet5S.deconv1.init_weights", "lingunet_5_s.Lingunet5S.deconv2.init_weights", "lingunet_5_s.Lingunet5S.deconv3.init_weights", "lingunet_5_s.Lingunet5S.deconv4.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "init_weights", "(", ")", "\n", "self", ".", "conv2", ".", "init_weights", "(", ")", "\n", "self", ".", "conv3", ".", "init_weights", "(", ")", "\n", "self", ".", "conv4", ".", "init_weights", "(", ")", "\n", "self", ".", "conv5", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv1", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv2", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv3", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv4", ".", "init_weights", "(", ")", "\n", "#self.deconv5.init_weights()", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_s.Lingunet5S.forward": [[109, 199], ["lingunet_5_s.Lingunet5S.norm2", "lingunet_5_s.Lingunet5S.norm3", "lingunet_5_s.Lingunet5S.norm4", "lingunet_5_s.Lingunet5S.norm5", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_s.Lingunet5S.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_s.Lingunet5S.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_s.Lingunet5S.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_s.Lingunet5S.deconv5", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.conv5", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "torch.normalize", "torch.normalize", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "lingunet_5_s.Lingunet5S.fnorm1", "lingunet_5_s.Lingunet5S.fnorm2", "lingunet_5_s.Lingunet5S.fnorm3", "lingunet_5_s.Lingunet5S.fnorm4", "lingunet_5_s.Lingunet5S.deconv1", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.act", "lingunet_5_s.Lingunet5S.conv1", "lingunet_5_s.Lingunet5S.conv2", "lingunet_5_s.Lingunet5S.conv3", "lingunet_5_s.Lingunet5S.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "lingunet_5_s.Lingunet5S.deconv2", "lingunet_5_s.Lingunet5S.deconv3", "lingunet_5_s.Lingunet5S.deconv4", "input.size", "lingunet_5_s.Lingunet5S.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "lingunet_5_s.Lingunet5S.size", "lingunet_5_s.Lingunet5S.size", "lingunet_5_s.Lingunet5S.size", "lingunet_5_s.Lingunet5S.lang19", "lingunet_5_s.Lingunet5S.lang28", "lingunet_5_s.Lingunet5S.lang37", "lingunet_5_s.Lingunet5S.lang46", "lingunet_5_s.Lingunet5S.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ",", "tensor_store", "=", "None", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "            ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f5\"", ",", "x5", ")", "\n", "\n", "", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "embedding", "=", "F", ".", "normalize", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "# TODO: Verify if slicing like this is a terrible idea for performance", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "emb_idx", "=", "i", "if", "embedding", ".", "shape", "[", "0", "]", "==", "batch_size", "else", "0", "\n", "\n", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "", "x1", "=", "self", ".", "fnorm1", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "fnorm2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "fnorm3", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "fnorm4", "(", "x4f", ")", "\n", "x5", "=", "x5f", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "                ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g5\"", ",", "x5", ")", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "#x1 = self.dropout2(x1)", "\n", "#x2 = self.dropout2(x2)", "\n", "#x3 = self.dropout2(x3)", "\n", "#x4 = self.dropout2(x4)", "\n", "#x5 = self.dropout2(x5)", "\n", "\n", "", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck.Unet5ContextualBneck.__init__": [[8, 55], ["super().__init__", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "embedding_size", ",", "hc1", "=", "32", ",", "hb1", "=", "16", ",", "hc2", "=", "256", ",", "k", "=", "5", ",", "stride", "=", "2", ",", "split_embedding", "=", "False", ")", ":", "\n", "        ", "super", "(", "Unet5ContextualBneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "int", "(", "k", "/", "2", ")", "\n", "self", ".", "hc1", "=", "hc1", "\n", "self", ".", "hb1", "=", "hb1", "\n", "self", ".", "hc2", "=", "hc2", "\n", "\n", "self", ".", "split_embedding", "=", "split_embedding", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "if", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "+", "hb1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "+", "hb1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv4", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "+", "hb1", ",", "hc2", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "hb1", "+", "hc2", ",", "out_channels", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc2", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck.Unet5ContextualBneck.init_weights": [[56, 78], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.conv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.conv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.conv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.conv5.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv5.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv3", ".", "weight", ")", "\n", "self", ".", "conv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv4", ".", "weight", ")", "\n", "self", ".", "conv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv5", ".", "weight", ")", "\n", "self", ".", "conv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv1", ".", "weight", ")", "\n", "self", ".", "deconv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv2", ".", "weight", ")", "\n", "self", ".", "deconv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv3", ".", "weight", ")", "\n", "self", ".", "deconv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv4", ".", "weight", ")", "\n", "self", ".", "deconv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv5", ".", "weight", ")", "\n", "self", ".", "deconv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck.Unet5ContextualBneck.forward": [[79, 145], ["unet_5_contextual_bneck.Unet5ContextualBneck.norm2", "unet_5_contextual_bneck.Unet5ContextualBneck.norm3", "unet_5_contextual_bneck.Unet5ContextualBneck.norm4", "unet_5_contextual_bneck.Unet5ContextualBneck.norm5", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.dropout2", "unet_5_contextual_bneck.Unet5ContextualBneck.dropout2", "unet_5_contextual_bneck.Unet5ContextualBneck.dropout2", "unet_5_contextual_bneck.Unet5ContextualBneck.dropout2", "unet_5_contextual_bneck.Unet5ContextualBneck.dropout2", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck.Unet5ContextualBneck.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck.Unet5ContextualBneck.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck.Unet5ContextualBneck.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv5", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.conv5", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "embedding.size", "range", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv1", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.act", "unet_5_contextual_bneck.Unet5ContextualBneck.conv1", "unet_5_contextual_bneck.Unet5ContextualBneck.conv2", "unet_5_contextual_bneck.Unet5ContextualBneck.conv3", "unet_5_contextual_bneck.Unet5ContextualBneck.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv2", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv3", "unet_5_contextual_bneck.Unet5ContextualBneck.deconv4", "input.size", "unet_5_contextual_bneck.Unet5ContextualBneck.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "unet_5_contextual_bneck.Unet5ContextualBneck.size", "unet_5_contextual_bneck.Unet5ContextualBneck.size", "unet_5_contextual_bneck.Unet5ContextualBneck.size", "unet_5_contextual_bneck.Unet5ContextualBneck.lang19", "unet_5_contextual_bneck.Unet5ContextualBneck.lang28", "unet_5_contextual_bneck.Unet5ContextualBneck.lang37", "unet_5_contextual_bneck.Unet5ContextualBneck.lang46", "unet_5_contextual_bneck.Unet5ContextualBneck.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "# TODO: Verify if slicing like this is a terrible idea for performance", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "batch_size", "=", "embedding", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "i", ":", "i", "+", "1", "]", ")", ",", "p", "=", "2", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "i", ":", "i", "+", "1", "]", ")", ",", "p", "=", "2", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "i", ":", "i", "+", "1", "]", ")", ",", "p", "=", "2", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "i", ":", "i", "+", "1", "]", ")", ",", "p", "=", "2", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "i", ":", "i", "+", "1", "]", ")", ",", "p", "=", "2", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "", "", "x1", "=", "self", ".", "dropout2", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "dropout2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "dropout2", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "dropout2", "(", "x4f", ")", "\n", "x5", "=", "self", ".", "dropout2", "(", "x5f", ")", "\n", "\n", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.DoubleConv.__init__": [[12, 16], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cin", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.DoubleConv.init_weights": [[17, 22], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_dualhead.DoubleConv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_dualhead.DoubleConv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.DoubleConv.forward": [[23, 28], ["lingunet_5_dualhead.DoubleConv.conv1", "torch.leaky_relu", "torch.leaky_relu", "lingunet_5_dualhead.DoubleConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.DoubleDeconv.__init__": [[31, 35], ["super().__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleDeconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ConvTranspose2d", "(", "cout", ",", "cout", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.DoubleDeconv.init_weights": [[36, 41], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_dualhead.DoubleDeconv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_dualhead.DoubleDeconv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.DoubleDeconv.forward": [[42, 49], ["lingunet_5_dualhead.DoubleDeconv.conv1", "torch.leaky_relu", "torch.leaky_relu", "lingunet_5_dualhead.DoubleDeconv.conv2", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "# TODO: 2 is stride", "\n", "        ", "osize1", "=", "[", "int", "(", "i", "/", "2", ")", "for", "i", "in", "output_size", "]", "\n", "x", "=", "self", ".", "conv1", "(", "img", ",", "output_size", "=", "osize1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "output_size", "=", "output_size", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.Lingunet5DualHead.__init__": [[51, 101], ["super().__init__", "utils.dict_tools.objectview", "lingunet_5_dualhead.DoubleConv", "lingunet_5_dualhead.DoubleConv", "lingunet_5_dualhead.DoubleConv", "lingunet_5_dualhead.DoubleConv", "lingunet_5_dualhead.DoubleConv", "lingunet_5_dualhead.DoubleDeconv", "lingunet_5_dualhead.DoubleDeconv", "lingunet_5_dualhead.DoubleDeconv", "lingunet_5_dualhead.DoubleDeconv", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "learning.modules.resnet.resnet_9_stride32.ResNet9Stride32", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Lingunet5DualHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "objectview", "(", "params", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "self", ".", "p", ".", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "self", ".", "p", ".", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "DoubleConv", "(", "self", ".", "p", ".", "in_channels", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "deconv1", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv3", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv4", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc2", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "p", ".", "hb1", "+", "self", ".", "p", ".", "hc2", ",", "self", ".", "p", ".", "out_channels", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc2", ")", "\n", "\n", "self", ".", "fnorm1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hc1", ")", "\n", "\n", "# TODO: Grab from parameters", "\n", "self", ".", "second_head_res", "=", "ResNet9Stride32", "(", "96", ",", "32", ")", "\n", "self", ".", "second_head_linear", "=", "nn", ".", "Linear", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.Lingunet5DualHead.init_weights": [[102, 113], ["lingunet_5_dualhead.Lingunet5DualHead.conv1.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.conv2.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.conv3.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.conv4.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.conv5.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.deconv1.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.deconv2.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.deconv3.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.deconv4.init_weights", "lingunet_5_dualhead.Lingunet5DualHead.second_head_res.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "init_weights", "(", ")", "\n", "self", ".", "conv2", ".", "init_weights", "(", ")", "\n", "self", ".", "conv3", ".", "init_weights", "(", ")", "\n", "self", ".", "conv4", ".", "init_weights", "(", ")", "\n", "self", ".", "conv5", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv1", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv2", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv3", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv4", ".", "init_weights", "(", ")", "\n", "self", ".", "second_head_res", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_dualhead.Lingunet5DualHead.forward": [[114, 209], ["lingunet_5_dualhead.Lingunet5DualHead.norm2", "lingunet_5_dualhead.Lingunet5DualHead.norm3", "lingunet_5_dualhead.Lingunet5DualHead.norm4", "lingunet_5_dualhead.Lingunet5DualHead.norm5", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_dualhead.Lingunet5DualHead.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_dualhead.Lingunet5DualHead.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_dualhead.Lingunet5DualHead.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_dualhead.Lingunet5DualHead.deconv5", "lingunet_5_dualhead.Lingunet5DualHead.second_head_res", "lingunet_5_dualhead.Lingunet5DualHead.second_head_linear", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.conv5", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "torch.normalize", "torch.normalize", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "lingunet_5_dualhead.Lingunet5DualHead.fnorm1", "lingunet_5_dualhead.Lingunet5DualHead.fnorm2", "lingunet_5_dualhead.Lingunet5DualHead.fnorm3", "lingunet_5_dualhead.Lingunet5DualHead.fnorm4", "lingunet_5_dualhead.Lingunet5DualHead.deconv1", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.act", "lingunet_5_dualhead.Lingunet5DualHead.view", "lingunet_5_dualhead.Lingunet5DualHead.conv1", "lingunet_5_dualhead.Lingunet5DualHead.conv2", "lingunet_5_dualhead.Lingunet5DualHead.conv3", "lingunet_5_dualhead.Lingunet5DualHead.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "lingunet_5_dualhead.Lingunet5DualHead.deconv2", "lingunet_5_dualhead.Lingunet5DualHead.deconv3", "lingunet_5_dualhead.Lingunet5DualHead.deconv4", "input.size", "lingunet_5_dualhead.Lingunet5DualHead.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "lingunet_5_dualhead.Lingunet5DualHead.size", "lingunet_5_dualhead.Lingunet5DualHead.size", "lingunet_5_dualhead.Lingunet5DualHead.size", "lingunet_5_dualhead.Lingunet5DualHead.lang19", "lingunet_5_dualhead.Lingunet5DualHead.lang28", "lingunet_5_dualhead.Lingunet5DualHead.lang37", "lingunet_5_dualhead.Lingunet5DualHead.lang46", "lingunet_5_dualhead.Lingunet5DualHead.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ",", "tensor_store", "=", "None", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "            ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f5\"", ",", "x5", ")", "\n", "\n", "", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "embedding", "=", "F", ".", "normalize", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "# TODO: Verify if slicing like this is a terrible idea for performance", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "emb_idx", "=", "i", "if", "embedding", ".", "shape", "[", "0", "]", "==", "batch_size", "else", "0", "\n", "\n", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "", "x1", "=", "self", ".", "fnorm1", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "fnorm2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "fnorm3", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "fnorm4", "(", "x4f", ")", "\n", "x5", "=", "x5f", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "                ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g5\"", ",", "x5", ")", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "#x1 = self.dropout2(x1)", "\n", "#x2 = self.dropout2(x2)", "\n", "#x3 = self.dropout2(x3)", "\n", "#x4 = self.dropout2(x4)", "\n", "#x5 = self.dropout2(x5)", "\n", "\n", "", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "batch_size", "=", "x19", ".", "shape", "[", "0", "]", "\n", "second_head_in", "=", "x19", "[", ":", ",", "0", ":", "96", ",", ":", ",", ":", "]", "\n", "h", "=", "self", ".", "second_head_res", "(", "second_head_in", ")", "\n", "second_head_out", "=", "self", ".", "second_head_linear", "(", "h", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "\n", "return", "out", ",", "second_head_out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual.Unet5Contextual.__init__": [[8, 54], ["super().__init__", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "embedding_size", ",", "hc1", "=", "32", ",", "hc2", "=", "256", ",", "k", "=", "5", ",", "stride", "=", "2", ",", "split_embedding", "=", "False", ")", ":", "\n", "        ", "super", "(", "Unet5Contextual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "int", "(", "k", "/", "2", ")", "\n", "self", ".", "hc1", "=", "hc1", "\n", "self", ".", "hc2", "=", "hc2", "\n", "\n", "self", ".", "split_embedding", "=", "split_embedding", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "if", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv4", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc2", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "+", "hc2", ",", "out_channels", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc2", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual.Unet5Contextual.init_weights": [[55, 77], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.conv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.conv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.conv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.conv5.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.deconv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.deconv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.deconv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.deconv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual.Unet5Contextual.deconv5.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv3", ".", "weight", ")", "\n", "self", ".", "conv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv4", ".", "weight", ")", "\n", "self", ".", "conv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv5", ".", "weight", ")", "\n", "self", ".", "conv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv1", ".", "weight", ")", "\n", "self", ".", "deconv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv2", ".", "weight", ")", "\n", "self", ".", "deconv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv3", ".", "weight", ")", "\n", "self", ".", "deconv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv4", ".", "weight", ")", "\n", "self", ".", "deconv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv5", ".", "weight", ")", "\n", "self", ".", "deconv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual.Unet5Contextual.forward": [[78, 134], ["unet_5_contextual.Unet5Contextual.norm2", "unet_5_contextual.Unet5Contextual.norm3", "unet_5_contextual.Unet5Contextual.norm4", "unet_5_contextual.Unet5Contextual.norm5", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual.Unet5Contextual.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual.Unet5Contextual.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual.Unet5Contextual.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual.Unet5Contextual.deconv5", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.conv5", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "unet_5_contextual.Unet5Contextual.dropout2", "unet_5_contextual.Unet5Contextual.dropout2", "unet_5_contextual.Unet5Contextual.dropout2", "unet_5_contextual.Unet5Contextual.dropout2", "unet_5_contextual.Unet5Contextual.dropout2", "unet_5_contextual.Unet5Contextual.deconv1", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.act", "unet_5_contextual.Unet5Contextual.conv1", "unet_5_contextual.Unet5Contextual.conv2", "unet_5_contextual.Unet5Contextual.conv3", "unet_5_contextual.Unet5Contextual.conv4", "unet_5_contextual.Unet5Contextual.deconv2", "unet_5_contextual.Unet5Contextual.deconv3", "unet_5_contextual.Unet5Contextual.deconv4", "input.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "unet_5_contextual.Unet5Contextual.size", "unet_5_contextual.Unet5Contextual.lang19", "unet_5_contextual.Unet5Contextual.lang28", "unet_5_contextual.Unet5Contextual.lang37", "unet_5_contextual.Unet5Contextual.lang46", "unet_5_contextual.Unet5Contextual.lang55", "unet_5_contextual.Unet5Contextual.size", "unet_5_contextual.Unet5Contextual.size", "unet_5_contextual.Unet5Contextual.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "# testing without dropout 4/16", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "=", "F", ".", "conv2d", "(", "x1", ",", "lf1", ")", "\n", "x2f", "=", "F", ".", "conv2d", "(", "x2", ",", "lf2", ")", "\n", "x3f", "=", "F", ".", "conv2d", "(", "x3", ",", "lf3", ")", "\n", "x4f", "=", "F", ".", "conv2d", "(", "x4", ",", "lf4", ")", "\n", "x5f", "=", "F", ".", "conv2d", "(", "x5", ",", "lf5", ")", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "x1f", "=", "self", ".", "dropout2", "(", "x1f", ")", "\n", "x2f", "=", "self", ".", "dropout2", "(", "x2f", ")", "\n", "x3f", "=", "self", ".", "dropout2", "(", "x3f", ")", "\n", "x4f", "=", "self", ".", "dropout2", "(", "x4f", ")", "\n", "x5f", "=", "self", ".", "dropout2", "(", "x5f", ")", "\n", "\n", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5f", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4f", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3f", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2f", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1f", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.DoubleConv.__init__": [[12, 16], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cin", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.DoubleConv.init_weights": [[17, 22], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5.DoubleConv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5.DoubleConv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.DoubleConv.forward": [[23, 28], ["lingunet_5.DoubleConv.conv1", "torch.leaky_relu", "torch.leaky_relu", "lingunet_5.DoubleConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.DoubleDeconv.__init__": [[31, 35], ["super().__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleDeconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ConvTranspose2d", "(", "cout", ",", "cout", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.DoubleDeconv.init_weights": [[36, 41], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5.DoubleDeconv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5.DoubleDeconv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.DoubleDeconv.forward": [[42, 49], ["lingunet_5.DoubleDeconv.conv1", "torch.leaky_relu", "torch.leaky_relu", "lingunet_5.DoubleDeconv.conv2", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "# TODO: 2 is stride", "\n", "        ", "osize1", "=", "[", "int", "(", "i", "/", "2", ")", "for", "i", "in", "output_size", "]", "\n", "x", "=", "self", ".", "conv1", "(", "img", ",", "output_size", "=", "osize1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "output_size", "=", "output_size", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.Lingunet5.__init__": [[51, 98], ["super().__init__", "utils.dict_tools.objectview", "lingunet_5.DoubleConv", "lingunet_5.DoubleConv", "lingunet_5.DoubleConv", "lingunet_5.DoubleConv", "lingunet_5.DoubleConv", "lingunet_5.DoubleDeconv", "lingunet_5.DoubleDeconv", "lingunet_5.DoubleDeconv", "lingunet_5.DoubleDeconv", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "#in_channels, out_channels, embedding_size, hc1=32, hb1=16, hc2=256, stride=2, split_embedding=False):", "\n", "        ", "super", "(", "Lingunet5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "objectview", "(", "params", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "self", ".", "p", ".", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "self", ".", "p", ".", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "DoubleConv", "(", "self", ".", "p", ".", "in_channels", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "deconv1", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv3", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv4", "=", "DoubleDeconv", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc2", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "p", ".", "hb1", "+", "self", ".", "p", ".", "hc2", ",", "self", ".", "p", ".", "out_channels", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc2", ")", "\n", "\n", "self", ".", "fnorm1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.Lingunet5.init_weights": [[99, 109], ["lingunet_5.Lingunet5.conv1.init_weights", "lingunet_5.Lingunet5.conv2.init_weights", "lingunet_5.Lingunet5.conv3.init_weights", "lingunet_5.Lingunet5.conv4.init_weights", "lingunet_5.Lingunet5.conv5.init_weights", "lingunet_5.Lingunet5.deconv1.init_weights", "lingunet_5.Lingunet5.deconv2.init_weights", "lingunet_5.Lingunet5.deconv3.init_weights", "lingunet_5.Lingunet5.deconv4.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "init_weights", "(", ")", "\n", "self", ".", "conv2", ".", "init_weights", "(", ")", "\n", "self", ".", "conv3", ".", "init_weights", "(", ")", "\n", "self", ".", "conv4", ".", "init_weights", "(", ")", "\n", "self", ".", "conv5", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv1", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv2", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv3", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv4", ".", "init_weights", "(", ")", "\n", "#self.deconv5.init_weights()", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5.Lingunet5.forward": [[111, 204], ["lingunet_5.Lingunet5.norm2", "lingunet_5.Lingunet5.norm3", "lingunet_5.Lingunet5.norm4", "lingunet_5.Lingunet5.norm5", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5.Lingunet5.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5.Lingunet5.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5.Lingunet5.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5.Lingunet5.deconv5", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.conv5", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "torch.normalize", "torch.normalize", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "lingunet_5.Lingunet5.fnorm1", "lingunet_5.Lingunet5.fnorm2", "lingunet_5.Lingunet5.fnorm3", "lingunet_5.Lingunet5.fnorm4", "lingunet_5.Lingunet5.deconv1", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.act", "lingunet_5.Lingunet5.conv1", "lingunet_5.Lingunet5.conv2", "lingunet_5.Lingunet5.conv3", "lingunet_5.Lingunet5.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "lingunet_5.Lingunet5.deconv2", "lingunet_5.Lingunet5.deconv3", "lingunet_5.Lingunet5.deconv4", "input.size", "lingunet_5.Lingunet5.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "lingunet_5.Lingunet5.size", "lingunet_5.Lingunet5.size", "lingunet_5.Lingunet5.size", "lingunet_5.Lingunet5.lang19", "lingunet_5.Lingunet5.lang28", "lingunet_5.Lingunet5.lang37", "lingunet_5.Lingunet5.lang46", "lingunet_5.Lingunet5.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ",", "tensor_store", "=", "None", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "            ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f5\"", ",", "x5", ")", "\n", "\n", "", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "embedding", "=", "F", ".", "normalize", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "# TODO: Verify if slicing like this is a terrible idea for performance", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "emb_idx", "=", "i", "if", "embedding", ".", "shape", "[", "0", "]", "==", "batch_size", "else", "0", "\n", "\n", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "", "x1", "=", "self", ".", "fnorm1", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "fnorm2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "fnorm3", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "fnorm4", "(", "x4f", ")", "\n", "x5", "=", "x5f", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "                ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g5\"", ",", "x5", ")", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "#x1 = self.dropout2(x1)", "\n", "#x2 = self.dropout2(x2)", "\n", "#x3 = self.dropout2(x3)", "\n", "#x4 = self.dropout2(x4)", "\n", "#x5 = self.dropout2(x5)", "\n", "\n", "", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "inner_scores", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "outer_scores", "=", "torch", ".", "zeros_like", "(", "inner_scores", "[", ":", ",", ":", ",", "0", ",", "0", "]", ")", "\n", "both_dist_scores", "=", "Partial2DDistribution", "(", "inner_scores", ",", "outer_scores", ")", "\n", "\n", "return", "both_dist_scores", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.UResBlock.__init__": [[7, 15], ["super().__init__", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", "=", "16", ")", ":", "\n", "        ", "super", "(", "UResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act2", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.UResBlock.init_weights": [[16, 22], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.UResBlock.conv1.bias.data.fill_", "unet_9_contextual.UResBlock.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.UResBlock.forward": [[23, 28], ["unet_9_contextual.UResBlock.act1", "unet_9_contextual.UResBlock.act2", "unet_9_contextual.UResBlock.conv1", "unet_9_contextual.UResBlock.conv2", "unet_9_contextual.UResBlock.norm1", "unet_9_contextual.UResBlock.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "x", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "self", ".", "norm1", "(", "images", ")", ")", ")", "\n", "x", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "out", "=", "x", "+", "images", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.UDeconvResBlock.__init__": [[31, 39], ["super().__init__", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", "=", "16", ")", ":", "\n", "        ", "super", "(", "UDeconvResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "c_in", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "c_in", ",", "c_in", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "act2", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.UDeconvResBlock.init_weights": [[40, 46], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.UDeconvResBlock.deconv1.bias.data.fill_", "unet_9_contextual.UDeconvResBlock.deconv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv2", ".", "weight", ")", "\n", "\n", "self", ".", "deconv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "deconv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.UDeconvResBlock.forward": [[47, 55], ["unet_9_contextual.UDeconvResBlock.act1", "unet_9_contextual.UDeconvResBlock.act2", "unet_9_contextual.UDeconvResBlock.deconv1", "unet_9_contextual.UDeconvResBlock.deconv2", "unet_9_contextual.UDeconvResBlock.norm2", "images.size", "unet_9_contextual.UDeconvResBlock.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "# In case we pass in a Cx1x1 vector, we don't want to normalize that", "\n", "#if images.size(2) > 1:", "\n", "#    x = self.norm1(images)", "\n", "        ", "x", "=", "self", ".", "act1", "(", "self", ".", "deconv1", "(", "images", ",", "output_size", "=", "images", ".", "size", "(", ")", ")", ")", "\n", "x", "=", "self", ".", "act2", "(", "self", ".", "deconv2", "(", "self", ".", "norm2", "(", "x", ")", ",", "output_size", "=", "x", ".", "size", "(", ")", ")", ")", "\n", "out", "=", "x", "+", "images", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.Unet9Contextual.__init__": [[58, 88], ["super().__init__", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "unet_9_contextual.UResBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "unet_9_contextual.UResBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "unet_9_contextual.UResBlock", "torch.nn.Dropout", "torch.nn.Dropout", "unet_9_contextual.UDeconvResBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "unet_9_contextual.UDeconvResBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "unet_9_contextual.UDeconvResBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "embedding_size", ",", "hc1", "=", "32", ",", "hc2", "=", "16", ",", "k", "=", "5", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Unet9Contextual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "int", "(", "k", "/", "2", ")", "\n", "self", ".", "hc1", "=", "hc1", "\n", "self", ".", "hc2", "=", "hc2", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "res1", "=", "UResBlock", "(", "hc1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "res2", "=", "UResBlock", "(", "hc1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "res3", "=", "UResBlock", "(", "hc1", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "deres3", "=", "UDeconvResBlock", "(", "hc1", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deres2", "=", "UDeconvResBlock", "(", "hc1", "*", "2", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "*", "2", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deres1", "=", "UDeconvResBlock", "(", "hc1", "*", "2", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "*", "2", ",", "hc2", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconvout", "=", "nn", ".", "ConvTranspose2d", "(", "hc2", ",", "out_channels", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n", "self", ".", "lang1", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang2", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang3", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "hc1", "*", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.Unet9Contextual.init_weights": [[89, 113], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.Unet9Contextual.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.Unet9Contextual.conv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.Unet9Contextual.conv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.Unet9Contextual.deconv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.Unet9Contextual.deconv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.Unet9Contextual.deconv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_9_contextual.Unet9Contextual.deconvout.bias.data.fill_", "unet_9_contextual.Unet9Contextual.lang1.weight.data.normal_", "unet_9_contextual.Unet9Contextual.lang2.weight.data.normal_", "unet_9_contextual.Unet9Contextual.lang3.weight.data.normal_", "unet_9_contextual.Unet9Contextual.lang1.bias.data.fill_", "unet_9_contextual.Unet9Contextual.lang2.bias.data.fill_", "unet_9_contextual.Unet9Contextual.lang3.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv3", ".", "weight", ")", "\n", "self", ".", "conv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv1", ".", "weight", ")", "\n", "self", ".", "deconv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv2", ".", "weight", ")", "\n", "self", ".", "deconv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv3", ".", "weight", ")", "\n", "self", ".", "deconv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconvout", ".", "weight", ")", "\n", "self", ".", "deconvout", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "lang1", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "lang2", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "lang3", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "\n", "self", ".", "lang1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "lang2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "lang3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_9_contextual.Unet9Contextual.forward": [[114, 140], ["unet_9_contextual.Unet9Contextual.res1", "unet_9_contextual.Unet9Contextual.res2", "unet_9_contextual.Unet9Contextual.res3", "unet_9_contextual.Unet9Contextual.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_9_contextual.Unet9Contextual.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_9_contextual.Unet9Contextual.act", "unet_9_contextual.Unet9Contextual.deconvout", "unet_9_contextual.Unet9Contextual.act", "unet_9_contextual.Unet9Contextual.act", "unet_9_contextual.Unet9Contextual.act", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "unet_9_contextual.Unet9Contextual.dropout", "unet_9_contextual.Unet9Contextual.dropout", "unet_9_contextual.Unet9Contextual.dropout", "unet_9_contextual.Unet9Contextual.deconv3", "unet_9_contextual.Unet9Contextual.deconv2", "unet_9_contextual.Unet9Contextual.deconv1", "unet_9_contextual.Unet9Contextual.conv1", "unet_9_contextual.Unet9Contextual.conv2", "unet_9_contextual.Unet9Contextual.conv3", "unet_9_contextual.Unet9Contextual.deres3", "unet_9_contextual.Unet9Contextual.deres2", "unet_9_contextual.Unet9Contextual.deres1", "input.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "unet_9_contextual.Unet9Contextual.size", "unet_9_contextual.Unet9Contextual.size", "input.size", "unet_9_contextual.Unet9Contextual.lang1", "unet_9_contextual.Unet9Contextual.lang2", "unet_9_contextual.Unet9Contextual.lang3"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ")", ":", "\n", "        ", "x1", "=", "self", ".", "res1", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "res2", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "res3", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang1", "(", "embedding", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang2", "(", "embedding", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang3", "(", "embedding", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "x1f", "=", "F", ".", "conv2d", "(", "x1", ",", "lf1", ")", "\n", "x2f", "=", "F", ".", "conv2d", "(", "x2", ",", "lf2", ")", "\n", "x3f", "=", "F", ".", "conv2d", "(", "x3", ",", "lf3", ")", "\n", "x1f", "=", "self", ".", "dropout", "(", "x1f", ")", "\n", "x2f", "=", "self", ".", "dropout", "(", "x2f", ")", "\n", "x3f", "=", "self", ".", "dropout", "(", "x3f", ")", "\n", "\n", "", "y2", "=", "self", ".", "act", "(", "self", ".", "deconv3", "(", "self", ".", "deres3", "(", "x3f", ")", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", "\n", "y2in", "=", "torch", ".", "cat", "(", "[", "x2f", ",", "y2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "y1", "=", "self", ".", "act", "(", "self", ".", "deconv2", "(", "self", ".", "deres2", "(", "y2in", ")", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", "\n", "y1in", "=", "torch", ".", "cat", "(", "[", "x1f", ",", "y1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "y0", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "self", ".", "deres1", "(", "y1in", ")", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", ")", "\n", "out", "=", "self", ".", "deconvout", "(", "y0", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.DoubleConv.__init__": [[13, 19], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "cmid", "=", "None", ",", "stride2", "=", "1", ")", ":", "\n", "        ", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "cmid", "is", "None", ":", "\n", "            ", "cmid", "=", "cin", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cmid", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cmid", ",", "cout", ",", "k", ",", "stride", "=", "stride2", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.DoubleConv.init_weights": [[20, 25], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_oob.DoubleConv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_oob.DoubleConv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.DoubleConv.forward": [[26, 31], ["lingunet_5_oob.DoubleConv.conv1", "torch.leaky_relu", "torch.leaky_relu", "lingunet_5_oob.DoubleConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.DoubleDeconv.__init__": [[34, 38], ["super().__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleDeconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ConvTranspose2d", "(", "cout", ",", "cout", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.DoubleDeconv.init_weights": [[39, 44], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_oob.DoubleDeconv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_oob.DoubleDeconv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.DoubleDeconv.forward": [[45, 52], ["lingunet_5_oob.DoubleDeconv.conv1", "torch.leaky_relu", "torch.leaky_relu", "lingunet_5_oob.DoubleDeconv.conv2", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "# TODO: 2 is stride", "\n", "        ", "osize1", "=", "[", "int", "(", "i", "/", "2", ")", "for", "i", "in", "output_size", "]", "\n", "x", "=", "self", ".", "conv1", "(", "img", ",", "output_size", "=", "osize1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "output_size", "=", "output_size", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.UpscaleDoubleConv.__init__": [[55, 60], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "UpscaleDoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "#self.upsample1 = Upsample(scale_factor=2, mode=\"nearest\")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cout", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.UpscaleDoubleConv.init_weights": [[61, 66], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_oob.UpscaleDoubleConv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_oob.UpscaleDoubleConv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.UpscaleDoubleConv.forward": [[67, 74], ["lingunet_5_oob.UpscaleDoubleConv.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.interpolate", "torch.interpolate", "lingunet_5_oob.UpscaleDoubleConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "#x = self.upsample1(x)", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.UpscaleConv.__init__": [[76, 80], ["super().__init__", "torch.nn.modules.upsampling.Upsample", "torch.nn.modules.upsampling.Upsample", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "UpscaleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample1", "=", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.UpscaleConv.init_weights": [[81, 84], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "lingunet_5_oob.UpscaleConv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.UpscaleConv.forward": [[85, 90], ["torch.leaky_relu", "torch.leaky_relu", "lingunet_5_oob.UpscaleConv.upsample1", "lingunet_5_oob.UpscaleConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "        ", "x", "=", "F", ".", "leaky_relu", "(", "img", ")", "\n", "x", "=", "self", ".", "upsample1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.Lingunet5OOB.__init__": [[92, 153], ["super().__init__", "utils.dict_tools.objectview", "lingunet_5_oob.DoubleConv", "lingunet_5_oob.DoubleConv", "lingunet_5_oob.DoubleConv", "lingunet_5_oob.DoubleConv", "lingunet_5_oob.DoubleConv", "DeconvOp", "DeconvOp", "DeconvOp", "DeconvOp", "lingunet_5_oob.DoubleConv", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int", "DeconvOp", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "#in_channels, out_channels, embedding_size, hc1=32, hb1=16, hc2=256, stride=2, split_embedding=False):", "\n", "        ", "super", "(", "Lingunet5OOB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "objectview", "(", "params", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "self", ".", "p", ".", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "self", ".", "p", ".", "embedding_size", "\n", "\n", "", "if", "self", ".", "p", ".", "upscale_conv", ":", "\n", "            ", "if", "self", ".", "p", ".", "double_up", ":", "\n", "                ", "DeconvOp", "=", "UpscaleDoubleConv", "\n", "", "else", ":", "\n", "                ", "DeconvOp", "=", "UpscaleConv", "\n", "", "", "else", ":", "\n", "            ", "DeconvOp", "=", "DoubleDeconv", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "DoubleConv", "(", "self", ".", "p", ".", "in_channels", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "DoubleConv", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "deconv1", "=", "DeconvOp", "(", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "DeconvOp", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv3", "=", "DeconvOp", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv4", "=", "DeconvOp", "(", "self", ".", "p", ".", "hc1", "+", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc2", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "p", ".", "upscale_conv", ":", "\n", "            ", "self", ".", "deconv5", "=", "DeconvOp", "(", "self", ".", "p", ".", "hb1", "+", "self", ".", "p", ".", "hc2", ",", "self", ".", "p", ".", "out_channels", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "p", ".", "hb1", "+", "self", ".", "p", ".", "hc2", ",", "self", ".", "p", ".", "out_channels", ",", "3", ",", "stride", "=", "self", ".", "p", ".", "stride", ",", "\n", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "convoob", "=", "DoubleConv", "(", "self", ".", "p", ".", "hb1", "+", "self", ".", "p", ".", "hc2", ",", "2", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "stride2", "=", "2", ",", "cmid", "=", "16", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hc2", ")", "\n", "\n", "self", ".", "fnorm1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "fnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "p", ".", "hb1", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hb1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "self", ".", "p", ".", "hc1", "*", "self", ".", "p", ".", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.Lingunet5OOB.init_weights": [[154, 164], ["lingunet_5_oob.Lingunet5OOB.conv1.init_weights", "lingunet_5_oob.Lingunet5OOB.conv2.init_weights", "lingunet_5_oob.Lingunet5OOB.conv3.init_weights", "lingunet_5_oob.Lingunet5OOB.conv4.init_weights", "lingunet_5_oob.Lingunet5OOB.conv5.init_weights", "lingunet_5_oob.Lingunet5OOB.deconv1.init_weights", "lingunet_5_oob.Lingunet5OOB.deconv2.init_weights", "lingunet_5_oob.Lingunet5OOB.deconv3.init_weights", "lingunet_5_oob.Lingunet5OOB.deconv4.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "init_weights", "(", ")", "\n", "self", ".", "conv2", ".", "init_weights", "(", ")", "\n", "self", ".", "conv3", ".", "init_weights", "(", ")", "\n", "self", ".", "conv4", ".", "init_weights", "(", ")", "\n", "self", ".", "conv5", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv1", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv2", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv3", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv4", ".", "init_weights", "(", ")", "\n", "#self.deconv5.init_weights()", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.lingunet_5_oob.Lingunet5OOB.forward": [[166, 271], ["lingunet_5_oob.Lingunet5OOB.norm2", "lingunet_5_oob.Lingunet5OOB.norm3", "lingunet_5_oob.Lingunet5OOB.norm4", "lingunet_5_oob.Lingunet5OOB.norm5", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_oob.Lingunet5OOB.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_oob.Lingunet5OOB.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_oob.Lingunet5OOB.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lingunet_5_oob.Lingunet5OOB.deconv5", "lingunet_5_oob.Lingunet5OOB.convoob", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.conv5", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "torch.normalize", "torch.normalize", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "lingunet_5_oob.Lingunet5OOB.fnorm1", "lingunet_5_oob.Lingunet5OOB.fnorm2", "lingunet_5_oob.Lingunet5OOB.fnorm3", "lingunet_5_oob.Lingunet5OOB.fnorm4", "lingunet_5_oob.Lingunet5OOB.deconv1", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.act", "lingunet_5_oob.Lingunet5OOB.conv1", "lingunet_5_oob.Lingunet5OOB.conv2", "lingunet_5_oob.Lingunet5OOB.conv3", "lingunet_5_oob.Lingunet5OOB.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "tensor_store.keep_inputs", "lingunet_5_oob.Lingunet5OOB.deconv2", "lingunet_5_oob.Lingunet5OOB.deconv3", "lingunet_5_oob.Lingunet5OOB.deconv4", "input.size", "torch.avg_pool2d", "torch.avg_pool2d", "lingunet_5_oob.Lingunet5OOB.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "lingunet_5_oob.Lingunet5OOB.size", "lingunet_5_oob.Lingunet5OOB.size", "lingunet_5_oob.Lingunet5OOB.size", "lingunet_5_oob.Lingunet5OOB.lang19", "lingunet_5_oob.Lingunet5OOB.lang28", "lingunet_5_oob.Lingunet5OOB.lang37", "lingunet_5_oob.Lingunet5OOB.lang46", "lingunet_5_oob.Lingunet5OOB.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ",", "tensor_store", "=", "None", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "            ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_f5\"", ",", "x5", ")", "\n", "\n", "", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "embedding", "=", "F", ".", "normalize", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "p", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "# TODO: Verify if slicing like this is a terrible idea for performance", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", "[", ":", ",", "0", ":", "self", ".", "p", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "emb_idx", "=", "i", "if", "embedding", ".", "shape", "[", "0", "]", "==", "batch_size", "else", "0", "\n", "\n", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hb1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "emb_idx", ":", "emb_idx", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "p", ".", "hc1", ",", "self", ".", "p", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "", "x1", "=", "self", ".", "fnorm1", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "fnorm2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "fnorm3", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "fnorm4", "(", "x4f", ")", "\n", "x5", "=", "x5f", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "                ", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g1\"", ",", "x1", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g2\"", ",", "x2", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g3\"", ",", "x3", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g4\"", ",", "x4", ")", "\n", "tensor_store", ".", "keep_inputs", "(", "\"lingunet_g5\"", ",", "x5", ")", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "#x1 = self.dropout2(x1)", "\n", "#x2 = self.dropout2(x2)", "\n", "#x3 = self.dropout2(x3)", "\n", "#x4 = self.dropout2(x4)", "\n", "#x5 = self.dropout2(x5)", "\n", "\n", "", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "inner_scores", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "# Predict probability masses / scores for the goal or trajectory traveling outside the observed part of the map", "\n", "o", "=", "self", ".", "convoob", "(", "x19", ")", "\n", "outer_scores", "=", "F", ".", "avg_pool2d", "(", "o", ",", "o", ".", "shape", "[", "2", "]", ")", ".", "view", "(", "[", "batch_size", ",", "2", "]", ")", "\n", "\n", "#d_v_inner_scores = out[:, 0, :, :]", "\n", "#d_g_inner_scores = out[:, 1, :, :]", "\n", "#d_v_outer_score = scores_outside[0]", "\n", "#d_g_outer_score = scores_outside[1]", "\n", "\n", "#d_v_scores = Partial2DDistribution(d_v_inner_scores, d_v_outer_score)", "\n", "#d_g_scores = Partial2DDistribution(d_g_inner_scores, d_g_outer_score)", "\n", "\n", "both_dist_scores", "=", "Partial2DDistribution", "(", "inner_scores", ",", "outer_scores", ")", "\n", "\n", "return", "both_dist_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual2.Unet5Contextual.__init__": [[8, 54], ["super().__init__", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "embedding_size", ",", "hc1", "=", "32", ",", "hc2", "=", "256", ",", "k", "=", "5", ",", "stride", "=", "2", ",", "split_embedding", "=", "False", ")", ":", "\n", "        ", "super", "(", "Unet5Contextual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "int", "(", "k", "/", "2", ")", "\n", "self", ".", "hc1", "=", "hc1", "\n", "self", ".", "hc2", "=", "hc2", "\n", "\n", "self", ".", "split_embedding", "=", "split_embedding", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "if", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "2", "*", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv4", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc2", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "+", "hc2", ",", "out_channels", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc2", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "2", "*", "hc1", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual2.Unet5Contextual.init_weights": [[55, 77], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.conv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.conv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.conv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.conv5.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.deconv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.deconv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.deconv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.deconv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual2.Unet5Contextual.deconv5.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv3", ".", "weight", ")", "\n", "self", ".", "conv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv4", ".", "weight", ")", "\n", "self", ".", "conv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv5", ".", "weight", ")", "\n", "self", ".", "conv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv1", ".", "weight", ")", "\n", "self", ".", "deconv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv2", ".", "weight", ")", "\n", "self", ".", "deconv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv3", ".", "weight", ")", "\n", "self", ".", "deconv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv4", ".", "weight", ")", "\n", "self", ".", "deconv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv5", ".", "weight", ")", "\n", "self", ".", "deconv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual2.Unet5Contextual.forward": [[78, 144], ["unet_5_contextual2.Unet5Contextual.norm2", "unet_5_contextual2.Unet5Contextual.norm3", "unet_5_contextual2.Unet5Contextual.norm4", "unet_5_contextual2.Unet5Contextual.norm5", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.dropout2", "unet_5_contextual2.Unet5Contextual.dropout2", "unet_5_contextual2.Unet5Contextual.dropout2", "unet_5_contextual2.Unet5Contextual.dropout2", "unet_5_contextual2.Unet5Contextual.dropout2", "unet_5_contextual2.Unet5Contextual.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual2.Unet5Contextual.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual2.Unet5Contextual.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual2.Unet5Contextual.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual2.Unet5Contextual.deconv5", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.conv5", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "embedding.size", "range", "unet_5_contextual2.Unet5Contextual.deconv1", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.act", "unet_5_contextual2.Unet5Contextual.conv1", "unet_5_contextual2.Unet5Contextual.conv2", "unet_5_contextual2.Unet5Contextual.conv3", "unet_5_contextual2.Unet5Contextual.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "unet_5_contextual2.Unet5Contextual.dropout", "unet_5_contextual2.Unet5Contextual.dropout", "unet_5_contextual2.Unet5Contextual.dropout", "unet_5_contextual2.Unet5Contextual.dropout", "unet_5_contextual2.Unet5Contextual.dropout", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "unet_5_contextual2.Unet5Contextual.deconv2", "unet_5_contextual2.Unet5Contextual.deconv3", "unet_5_contextual2.Unet5Contextual.deconv4", "input.size", "unet_5_contextual2.Unet5Contextual.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "unet_5_contextual2.Unet5Contextual.size", "unet_5_contextual2.Unet5Contextual.size", "unet_5_contextual2.Unet5Contextual.size", "unet_5_contextual2.Unet5Contextual.lang19", "unet_5_contextual2.Unet5Contextual.lang28", "unet_5_contextual2.Unet5Contextual.lang37", "unet_5_contextual2.Unet5Contextual.lang46", "unet_5_contextual2.Unet5Contextual.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "batch_size", "=", "embedding", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", "*", "2", ",", "self", ".", "hc1", "*", "2", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "lf1", "=", "self", ".", "dropout", "(", "lf1", ")", "\n", "lf2", "=", "self", ".", "dropout", "(", "lf2", ")", "\n", "lf3", "=", "self", ".", "dropout", "(", "lf3", ")", "\n", "lf4", "=", "self", ".", "dropout", "(", "lf4", ")", "\n", "lf5", "=", "self", ".", "dropout", "(", "lf5", ")", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "", "", "x1", "=", "self", ".", "dropout2", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "dropout2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "dropout2", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "dropout2", "(", "x4f", ")", "\n", "x5", "=", "self", ".", "dropout2", "(", "x5f", ")", "\n", "\n", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_3_contextual.Unet3Contextual.__init__": [[6, 36], ["super().__init__", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "embedding_size", ",", "hc1", "=", "32", ",", "hc2", "=", "16", ",", "k", "=", "5", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Unet3Contextual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "int", "(", "k", "/", "2", ")", "\n", "self", ".", "hc1", "=", "hc1", "\n", "self", ".", "hc2", "=", "hc2", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc2", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "+", "hc2", ",", "out_channels", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "#self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc2", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n", "self", ".", "lang11", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang22", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "hc1", "*", "hc1", ")", "\n", "self", ".", "lang33", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "hc1", "*", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_3_contextual.Unet3Contextual.init_weights": [[37, 58], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3_contextual.Unet3Contextual.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3_contextual.Unet3Contextual.conv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3_contextual.Unet3Contextual.conv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3_contextual.Unet3Contextual.deconv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3_contextual.Unet3Contextual.deconv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3_contextual.Unet3Contextual.deconv3.bias.data.fill_", "unet_3_contextual.Unet3Contextual.lang11.weight.data.normal_", "unet_3_contextual.Unet3Contextual.lang22.weight.data.normal_", "unet_3_contextual.Unet3Contextual.lang33.weight.data.normal_", "unet_3_contextual.Unet3Contextual.lang11.bias.data.fill_", "unet_3_contextual.Unet3Contextual.lang22.bias.data.fill_", "unet_3_contextual.Unet3Contextual.lang33.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv3", ".", "weight", ")", "\n", "self", ".", "conv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv1", ".", "weight", ")", "\n", "self", ".", "deconv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv2", ".", "weight", ")", "\n", "self", ".", "deconv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv3", ".", "weight", ")", "\n", "self", ".", "deconv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "lang11", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "lang22", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "lang33", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "lang11", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "lang22", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "lang33", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_3_contextual.Unet3Contextual.forward": [[59, 82], ["unet_3_contextual.Unet3Contextual.norm2", "unet_3_contextual.Unet3Contextual.norm3", "unet_3_contextual.Unet3Contextual.act", "unet_3_contextual.Unet3Contextual.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_3_contextual.Unet3Contextual.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_3_contextual.Unet3Contextual.deconv3", "unet_3_contextual.Unet3Contextual.act", "unet_3_contextual.Unet3Contextual.act", "unet_3_contextual.Unet3Contextual.conv3", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "unet_3_contextual.Unet3Contextual.dropout", "unet_3_contextual.Unet3Contextual.dropout", "unet_3_contextual.Unet3Contextual.dropout", "unet_3_contextual.Unet3Contextual.deconv1", "unet_3_contextual.Unet3Contextual.act", "unet_3_contextual.Unet3Contextual.conv1", "unet_3_contextual.Unet3Contextual.conv2", "unet_3_contextual.Unet3Contextual.deconv2", "input.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "unet_3_contextual.Unet3Contextual.size", "unet_3_contextual.Unet3Contextual.lang11", "unet_3_contextual.Unet3Contextual.lang22", "unet_3_contextual.Unet3Contextual.lang33", "unet_3_contextual.Unet3Contextual.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang11", "(", "embedding", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang22", "(", "embedding", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang33", "(", "embedding", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "x1f", "=", "F", ".", "conv2d", "(", "x1", ",", "lf1", ")", "\n", "x2f", "=", "F", ".", "conv2d", "(", "x2", ",", "lf2", ")", "\n", "x3f", "=", "F", ".", "conv2d", "(", "x3", ",", "lf3", ")", "\n", "x3f", "=", "self", ".", "dropout", "(", "x3f", ")", "\n", "x2f", "=", "self", ".", "dropout", "(", "x2f", ")", "\n", "x1f", "=", "self", ".", "dropout", "(", "x1f", ")", "\n", "\n", "", "y2", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x3f", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", "\n", "y22", "=", "torch", ".", "cat", "(", "[", "y2", ",", "x2f", "]", ",", "1", ")", "\n", "y1", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "y22", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "y11", "=", "torch", ".", "cat", "(", "[", "y1", ",", "x1f", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv3", "(", "y11", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.DoubleConv.__init__": [[9, 13], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cin", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.DoubleConv.init_weights": [[14, 19], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3_2head.DoubleConv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3_2head.DoubleConv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.DoubleConv.forward": [[20, 25], ["unet_5_contextual_bneck3_2head.DoubleConv.conv1", "torch.leaky_relu", "torch.leaky_relu", "unet_5_contextual_bneck3_2head.DoubleConv.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.DoubleDeconv.__init__": [[28, 32], ["super().__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "DoubleDeconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ConvTranspose2d", "(", "cout", ",", "cout", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.DoubleDeconv.init_weights": [[33, 38], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3_2head.DoubleDeconv.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_5_contextual_bneck3_2head.DoubleDeconv.conv2.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.DoubleDeconv.forward": [[39, 46], ["unet_5_contextual_bneck3_2head.DoubleDeconv.conv1", "torch.leaky_relu", "torch.leaky_relu", "unet_5_contextual_bneck3_2head.DoubleDeconv.conv2", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "output_size", ")", ":", "\n", "# TODO: 2 is stride", "\n", "        ", "osize1", "=", "[", "int", "(", "i", "/", "2", ")", "for", "i", "in", "output_size", "]", "\n", "x", "=", "self", ".", "conv1", "(", "img", ",", "output_size", "=", "osize1", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "output_size", "=", "output_size", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.__init__": [[49, 108], ["super().__init__", "unet_5_contextual_bneck3_2head.DoubleConv", "unet_5_contextual_bneck3_2head.DoubleConv", "unet_5_contextual_bneck3_2head.DoubleConv", "unet_5_contextual_bneck3_2head.DoubleConv", "unet_5_contextual_bneck3_2head.DoubleConv", "unet_5_contextual_bneck3_2head.DoubleDeconv", "unet_5_contextual_bneck3_2head.DoubleDeconv", "unet_5_contextual_bneck3_2head.DoubleDeconv", "unet_5_contextual_bneck3_2head.DoubleDeconv", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "learning.modules.resnet.resnet_9_stride32.ResNet9Stride32", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "embedding_size", ",", "\n", "hc1", "=", "32", ",", "hb1", "=", "16", ",", "hc2", "=", "256", ",", "stride", "=", "2", ",", "\n", "split_embedding", "=", "False", ",", "\n", "head_output_dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "Unet5ContextualBneckDoubleHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hc1", "=", "hc1", "\n", "self", ".", "hb1", "=", "hb1", "\n", "self", ".", "hc2", "=", "hc2", "\n", "\n", "self", ".", "split_embedding", "=", "split_embedding", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "if", "split_embedding", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "int", "(", "embedding_size", "/", "5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_block_size", "=", "embedding_size", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "", "self", ".", "conv1", "=", "DoubleConv", "(", "in_channels", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "DoubleConv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "deconv1", "=", "DoubleDeconv", "(", "hc1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "DoubleDeconv", "(", "hc1", "+", "hb1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv3", "=", "DoubleDeconv", "(", "hc1", "+", "hb1", ",", "hc1", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv4", "=", "DoubleDeconv", "(", "hc1", "+", "hb1", ",", "hc2", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "hb1", "+", "hc2", ",", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "# self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc2", ")", "\n", "\n", "self", ".", "fnorm1", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "self", ".", "fnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "self", ".", "fnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "self", ".", "fnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hb1", ")", "\n", "\n", "self", ".", "lang19", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang28", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang37", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang46", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hb1", ")", "\n", "self", ".", "lang55", "=", "nn", ".", "Linear", "(", "self", ".", "emb_block_size", ",", "hc1", "*", "hc1", ")", "\n", "\n", "self", ".", "second_head", "=", "ResNet9Stride32", "(", "32", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.init_weights": [[109, 120], ["unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv1.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv2.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv3.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv4.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv5.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv1.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv2.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv3.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv4.init_weights", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.second_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "init_weights", "(", ")", "\n", "self", ".", "conv2", ".", "init_weights", "(", ")", "\n", "self", ".", "conv3", ".", "init_weights", "(", ")", "\n", "self", ".", "conv4", ".", "init_weights", "(", ")", "\n", "self", ".", "conv5", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv1", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv2", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv3", ".", "init_weights", "(", ")", "\n", "self", ".", "deconv4", ".", "init_weights", "(", ")", "\n", "self", ".", "second_head", ".", "init_weights", "(", ")", "\n", "#self.deconv5.init_weights()", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.forward": [[122, 198], ["unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.norm2", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.norm3", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.norm4", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.norm5", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv5", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.second_head", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv5", "torch.normalize", "torch.normalize", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.normalize.size", "range", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.fnorm1", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.fnorm2", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.fnorm3", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.fnorm4", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv1", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.act", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv1", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv2", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv3", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.conv4", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv2", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv3", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.deconv4", "input.size", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.size", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.size", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.size", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.lang19", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.lang28", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.lang37", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.lang46", "unet_5_contextual_bneck3_2head.Unet5ContextualBneckDoubleHead.lang55"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "embedding", "=", "F", ".", "normalize", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "split_embedding", ":", "\n", "                ", "block_size", "=", "self", ".", "emb_block_size", "\n", "emb1", "=", "embedding", "[", ":", ",", "0", "*", "block_size", ":", "1", "*", "block_size", "]", "\n", "emb2", "=", "embedding", "[", ":", ",", "1", "*", "block_size", ":", "2", "*", "block_size", "]", "\n", "emb3", "=", "embedding", "[", ":", ",", "2", "*", "block_size", ":", "3", "*", "block_size", "]", "\n", "emb4", "=", "embedding", "[", ":", ",", "3", "*", "block_size", ":", "4", "*", "block_size", "]", "\n", "emb5", "=", "embedding", "[", ":", ",", "4", "*", "block_size", ":", "5", "*", "block_size", "]", "\n", "", "else", ":", "\n", "                ", "emb1", "=", "emb2", "=", "emb3", "=", "emb4", "=", "emb5", "=", "embedding", "\n", "\n", "# These conv filters are different for each element in the batch, but the functional convolution", "\n", "# operator assumes the same filters across the batch.", "\n", "# TODO: Verify if slicing like this is a terrible idea for performance", "\n", "", "x1f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x1", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x2f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x2", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x3f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x3", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x4f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x4", "[", ":", ",", "0", ":", "self", ".", "hb1", ",", ":", ",", ":", "]", ".", "data", ")", ")", "\n", "x5f", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "x5", ".", "data", ")", ")", "\n", "\n", "batch_size", "=", "embedding", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "lf1", "=", "F", ".", "normalize", "(", "self", ".", "lang19", "(", "emb1", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf2", "=", "F", ".", "normalize", "(", "self", ".", "lang28", "(", "emb2", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf3", "=", "F", ".", "normalize", "(", "self", ".", "lang37", "(", "emb3", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf4", "=", "F", ".", "normalize", "(", "self", ".", "lang46", "(", "emb4", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hb1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "lf5", "=", "F", ".", "normalize", "(", "self", ".", "lang55", "(", "emb5", "[", "i", ":", "i", "+", "1", "]", ")", ")", ".", "view", "(", "[", "self", ".", "hc1", ",", "self", ".", "hc1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Dropout on the convolutional filters computed from the language embedding. This might be a bad idea?", "\n", "#lf1 = self.dropout(lf1)", "\n", "#lf2 = self.dropout(lf2)", "\n", "#lf3 = self.dropout(lf3)", "\n", "#lf4 = self.dropout(lf4)", "\n", "#lf5 = self.dropout(lf5)", "\n", "\n", "x1f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x1", "[", "i", ":", "i", "+", "1", "]", ",", "lf1", ")", "\n", "x2f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x2", "[", "i", ":", "i", "+", "1", "]", ",", "lf2", ")", "\n", "x3f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x3", "[", "i", ":", "i", "+", "1", "]", ",", "lf3", ")", "\n", "x4f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x4", "[", "i", ":", "i", "+", "1", "]", ",", "lf4", ")", "\n", "x5f", "[", "i", ":", "i", "+", "1", "]", "=", "F", ".", "conv2d", "(", "x5", "[", "i", ":", "i", "+", "1", "]", ",", "lf5", ")", "\n", "\n", "", "x1", "=", "self", ".", "fnorm1", "(", "x1f", ")", "\n", "x2", "=", "self", ".", "fnorm2", "(", "x2f", ")", "\n", "x3", "=", "self", ".", "fnorm3", "(", "x3f", ")", "\n", "x4", "=", "self", ".", "fnorm4", "(", "x4f", ")", "\n", "x5", "=", "x5f", "\n", "\n", "# Dropout on the feature maps computed after filtering the input feature maps.", "\n", "#x1 = self.dropout2(x1)", "\n", "#x2 = self.dropout2(x2)", "\n", "#x3 = self.dropout2(x3)", "\n", "#x4 = self.dropout2(x4)", "\n", "#x5 = self.dropout2(x5)", "\n", "\n", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "second_head_out", "=", "self", ".", "second_head", "(", "x19", ")", "\n", "\n", "return", "out", ",", "second_head_out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_3.Unet3.__init__": [[6, 40], ["super().__init__", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "embedding_size", ",", "hc1", "=", "32", ",", "hc2", "=", "16", ",", "k", "=", "5", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Unet3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "int", "(", "k", "/", "2", ")", "\n", "self", ".", "hidden_channels", "=", "hc1", "\n", "\n", "# inchannels, outchannels, kernel size", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc1", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv4", "=", "nn", ".", "ConvTranspose2d", "(", "2", "*", "hc1", ",", "hc2", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "ConvTranspose2d", "(", "hc1", "+", "hc2", ",", "out_channels", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "norm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "#self.dnorm1 = nn.InstanceNorm2d(in_channels * 4)", "\n", "self", ".", "dnorm2", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm3", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm4", "=", "nn", ".", "InstanceNorm2d", "(", "hc1", ")", "\n", "self", ".", "dnorm5", "=", "nn", ".", "InstanceNorm2d", "(", "hc2", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n", "self", ".", "lang_filter_linear", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "hc1", "*", "hc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_3.Unet3.init_weights": [[41, 66], ["torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.conv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.conv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.conv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.conv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.conv5.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.deconv1.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.deconv2.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.deconv3.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.deconv4.bias.data.fill_", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "torch.nn.init.kaiming_uniform", "unet_3.Unet3.deconv5.bias.data.fill_", "unet_3.Unet3.lang_filter_linear.weight.normal_", "unet_3.Unet3.lang_filter_linear.bias.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "self", ".", "conv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "self", ".", "conv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv3", ".", "weight", ")", "\n", "self", ".", "conv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv4", ".", "weight", ")", "\n", "self", ".", "conv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "conv5", ".", "weight", ")", "\n", "self", ".", "conv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv1", ".", "weight", ")", "\n", "self", ".", "deconv1", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv2", ".", "weight", ")", "\n", "self", ".", "deconv2", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv3", ".", "weight", ")", "\n", "self", ".", "deconv3", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv4", ".", "weight", ")", "\n", "self", ".", "deconv4", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "deconv5", ".", "weight", ")", "\n", "self", ".", "deconv5", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "lang_filter_linear", ".", "weight", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "lang_filter_linear", ".", "bias", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.unet.unet_3.Unet3.forward": [[67, 101], ["unet_3.Unet3.norm2", "unet_3.Unet3.norm3", "unet_3.Unet3.norm4", "unet_3.Unet3.norm5", "unet_3.Unet3.act", "unet_3.Unet3.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_3.Unet3.dnorm3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_3.Unet3.dnorm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_3.Unet3.dnorm5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_3.Unet3.deconv5", "unet_3.Unet3.act", "unet_3.Unet3.act", "unet_3.Unet3.act", "unet_3.Unet3.act", "unet_3.Unet3.conv5", "torch.normalize", "torch.normalize", "lang_filter_weights.view.view.view", "torch.conv2d", "torch.conv2d", "unet_3.Unet3.dropout", "unet_3.Unet3.deconv1", "unet_3.Unet3.act", "unet_3.Unet3.act", "unet_3.Unet3.act", "unet_3.Unet3.conv1", "unet_3.Unet3.conv2", "unet_3.Unet3.conv3", "unet_3.Unet3.conv4", "unet_3.Unet3.lang_filter_linear", "unet_3.Unet3.deconv2", "unet_3.Unet3.deconv3", "unet_3.Unet3.deconv4", "input.size", "unet_3.Unet3.size", "unet_3.Unet3.size", "unet_3.Unet3.size", "unet_3.Unet3.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.act"], ["", "def", "forward", "(", "self", ",", "input", ",", "embedding", "=", "None", ")", ":", "\n", "        ", "x1", "=", "self", ".", "norm2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "x2", "=", "self", ".", "norm3", "(", "self", ".", "act", "(", "self", ".", "conv2", "(", "x1", ")", ")", ")", "\n", "x3", "=", "self", ".", "norm4", "(", "self", ".", "act", "(", "self", ".", "conv3", "(", "x2", ")", ")", ")", "\n", "x4", "=", "self", ".", "norm5", "(", "self", ".", "act", "(", "self", ".", "conv4", "(", "x3", ")", ")", ")", "\n", "x5", "=", "self", ".", "act", "(", "self", ".", "conv5", "(", "x4", ")", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "lang_filter_weights", "=", "F", ".", "normalize", "(", "self", ".", "lang_filter_linear", "(", "embedding", ")", ")", "\n", "lang_filter_weights", "=", "lang_filter_weights", ".", "view", "(", "[", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", "]", ")", "\n", "x5", "=", "F", ".", "conv2d", "(", "x5", ",", "lang_filter_weights", ")", "\n", "x5", "=", "self", ".", "dropout", "(", "x5", ")", "\n", "\n", "", "x6", "=", "self", ".", "act", "(", "self", ".", "deconv1", "(", "x5", ",", "output_size", "=", "x4", ".", "size", "(", ")", ")", ")", "\n", "x46", "=", "torch", ".", "cat", "(", "[", "x4", ",", "x6", "]", ",", "1", ")", "\n", "x7", "=", "self", ".", "dnorm3", "(", "self", ".", "act", "(", "self", ".", "deconv2", "(", "x46", ",", "output_size", "=", "x3", ".", "size", "(", ")", ")", ")", ")", "\n", "x37", "=", "torch", ".", "cat", "(", "[", "x3", ",", "x7", "]", ",", "1", ")", "\n", "x8", "=", "self", ".", "dnorm4", "(", "self", ".", "act", "(", "self", ".", "deconv3", "(", "x37", ",", "output_size", "=", "x2", ".", "size", "(", ")", ")", ")", ")", "\n", "x28", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x8", "]", ",", "1", ")", "\n", "x9", "=", "self", ".", "dnorm5", "(", "self", ".", "act", "(", "self", ".", "deconv4", "(", "x28", ",", "output_size", "=", "x1", ".", "size", "(", ")", ")", ")", ")", "\n", "x19", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x9", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "deconv5", "(", "x19", ",", "output_size", "=", "input", ".", "size", "(", ")", ")", "\n", "\n", "\"\"\"\n        print(\"in:\", input.size())\n        print(\"x1:\", x1.size())\n        print(\"x2:\", x2.size())\n        print(\"x3:\", x3.size())\n        print(\"x4:\", x4.size())\n        print(\"x5:\", x5.size())\n        print(\"x6:\", x6.size())\n        \"\"\"", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap.__init__": [[15, 29], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.modules.map_transformer_base.MapTransformerBase", "utils.simple_profiler.SimpleProfiler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ",", "lamda", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "LeakyIntegratorGlobalMap", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "map_size_px", "=", "source_map_size", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "child_transformer", "=", "MapTransformerBase", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "lamda", "=", "lamda", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "map_memory", "=", "[", "]", "\n", "self", ".", "coverage_memory", "=", "[", "]", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap.init_weights": [[30, 32], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap.reset": [[33, 39], ["super().reset", "leaky_integrator_w.LeakyIntegratorGlobalMap.child_transformer.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeakyIntegratorGlobalMap", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "map_memory", "=", "[", "]", "\n", "self", ".", "coverage_memory", "=", "[", "]", "\n", "self", ".", "child_transformer", ".", "reset", "(", ")", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap.cuda": [[40, 44], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "leaky_integrator_w.LeakyIntegratorGlobalMap.child_transformer.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "child_transformer", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap.dbg_write_extra": [[45, 60], ["learning.modules.dbg_writer.DebugWriter().should_write", "learning.modules.dbg_writer.DebugWriter().write_img", "learning.modules.dbg_writer.DebugWriter", "leaky_integrator_w.LeakyIntegratorGlobalMap.dbg_t.set_map", "leaky_integrator_w.LeakyIntegratorGlobalMap.dbg_t.get_map", "learning.modules.map_transformer_base.MapTransformerBase().to", "learning.modules.dbg_writer.DebugWriter", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "dbg_write_extra", "(", "self", ",", "map", ",", "pose", ")", ":", "\n", "        ", "if", "DebugWriter", "(", ")", ".", "should_write", "(", ")", ":", "\n", "            ", "map", "=", "map", "[", "0", ":", "1", ",", "0", ":", "3", "]", "\n", "self", ".", "seq", "+=", "1", "\n", "# Initialize a transformer module", "\n", "if", "pose", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "dbg_t", "is", "None", ":", "\n", "                    ", "self", ".", "dbg_t", "=", "MapTransformerBase", "(", "self", ".", "map_size_px", ",", "self", ".", "world_size_px", ",", "self", ".", "world_size_m", ")", ".", "to", "(", "map", ".", "device", ")", "\n", "\n", "# Transform the prediction to the global frame and write out to disk.", "\n", "", "self", ".", "dbg_t", ".", "set_map", "(", "map", ",", "pose", ")", "\n", "map_global", ",", "_", "=", "self", ".", "dbg_t", ".", "get_map", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "map_global", "=", "map", "\n", "", "DebugWriter", "(", ")", ".", "write_img", "(", "map_global", "[", "0", "]", ",", "\"gif_overlaid\"", ",", "args", "=", "{", "\"world_size\"", ":", "self", ".", "world_size_px", ",", "\"name\"", ":", "\"sm\"", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap.forward": [[61, 120], ["leaky_integrator_w.LeakyIntegratorGlobalMap.prof.tick", "len", "leaky_integrator_w.LeakyIntegratorGlobalMap.prof.tick", "range", "leaky_integrator_w.LeakyIntegratorGlobalMap.prof.tick", "torch.cat", "torch.cat", "leaky_integrator_w.LeakyIntegratorGlobalMap.prof.tick", "leaky_integrator_w.LeakyIntegratorGlobalMap.prof.loop", "leaky_integrator_w.LeakyIntegratorGlobalMap.prof.print_stats", "leaky_integrator_w.LeakyIntegratorGlobalMap.map_memory.append", "leaky_integrator_w.LeakyIntegratorGlobalMap.coverage_memory.append", "all_maps_out_w.append", "torch.cat.append", "visualization.Presenter().show_image", "len", "torch.clamp", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "", "def", "forward", "(", "self", ",", "images_w", ",", "coverages_w", ",", "add_mask", "=", "None", ",", "reset_mask", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "#show=\"li\"", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\".\"", ")", "\n", "batch_size", "=", "len", "(", "images_w", ")", "\n", "\n", "assert", "add_mask", "is", "None", "or", "add_mask", "[", "0", "]", "is", "not", "None", ",", "\"The first observation in a sequence needs to be used!\"", "\n", "\n", "masked_observations_w_add", "=", "self", ".", "lamda", "*", "images_w", "*", "coverages_w", "\n", "\n", "all_maps_out_w", "=", "[", "]", "\n", "all_coverages_out_w", "=", "[", "]", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_global\"", ")", "\n", "\n", "# TODO: Draw past trajectory on an extra channel of the semantic map", "\n", "# Step 2: Integrate serially in the global frame", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "map_memory", ")", "==", "0", "or", "(", "reset_mask", "is", "not", "None", "and", "reset_mask", "[", "i", "]", ")", ":", "\n", "                ", "new_map_w", "=", "images_w", "[", "i", ":", "i", "+", "1", "]", "\n", "new_map_cov_w", "=", "coverages_w", "[", "i", ":", "i", "+", "1", "]", "\n", "\n", "# Allow masking of observations", "\n", "", "elif", "add_mask", "is", "None", "or", "add_mask", "[", "i", "]", ":", "\n", "# Get the current global-frame map", "\n", "                ", "map_g", "=", "self", ".", "map_memory", "[", "-", "1", "]", "\n", "map_cov_g", "=", "self", ".", "coverage_memory", "[", "-", "1", "]", "\n", "cov_w", "=", "coverages_w", "[", "i", ":", "i", "+", "1", "]", "\n", "obs_cov_g", "=", "masked_observations_w_add", "[", "i", ":", "i", "+", "1", "]", "\n", "\n", "# Add the observation into the map using a leaky integrator rule (TODO: Output lamda from model)", "\n", "new_map_cov_w", "=", "torch", ".", "clamp", "(", "map_cov_g", "+", "cov_w", ",", "0", ",", "1", ")", "\n", "new_map_w", "=", "(", "1", "-", "self", ".", "lamda", ")", "*", "map_g", "+", "obs_cov_g", "+", "self", ".", "lamda", "*", "map_g", "*", "(", "1", "-", "cov_w", ")", "\n", "", "else", ":", "\n", "                ", "new_map_w", "=", "self", ".", "map_memory", "[", "-", "1", "]", "\n", "new_map_cov_w", "=", "self", ".", "coverage_memory", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "map_memory", ".", "append", "(", "new_map_w", ")", "\n", "self", ".", "coverage_memory", ".", "append", "(", "new_map_cov_w", ")", "\n", "all_maps_out_w", ".", "append", "(", "new_map_w", ")", "\n", "all_coverages_out_w", ".", "append", "(", "new_map_cov_w", ")", "\n", "\n", "#Presenter().show_image(new_map_cov_w.data[0, 0:3], \"map_cov\", torch=True, scale=8, waitkey=1)", "\n", "if", "show", "!=", "\"\"", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "new_map_cov_w", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "\n", "", "", "self", ".", "prof", ".", "tick", "(", "\"integrate\"", ")", "\n", "\n", "# Step 3: Convert all maps to local frame", "\n", "all_maps_w", "=", "torch", ".", "cat", "(", "all_maps_out_w", ",", "dim", "=", "0", ")", "\n", "all_coverages_out_w", "=", "torch", ".", "cat", "(", "all_coverages_out_w", ",", "dim", "=", "0", ")", "\n", "\n", "# Write gifs for debugging", "\n", "#self.dbg_write_extra(all_maps_w, None)", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_local\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "all_maps_w", ",", "all_coverages_out_w", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_integrator.IdentityIntegratorMap.__init__": [[15, 29], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.modules.map_transformer_base.MapTransformerBase", "utils.simple_profiler.SimpleProfiler", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", ":", "\n", "        ", "super", "(", "IdentityIntegratorMap", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "map_size", "=", "source_map_size", "\n", "self", ".", "world_size", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "child_transformer", "=", "MapTransformerBase", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "map_memory", "=", "MapTransformerBase", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "self", ".", "last_observation", "=", "None", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_integrator.IdentityIntegratorMap.init_weights": [[30, 32], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_integrator.IdentityIntegratorMap.reset": [[33, 39], ["super().reset", "identity_integrator.IdentityIntegratorMap.map_memory.reset", "identity_integrator.IdentityIntegratorMap.child_transformer.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "IdentityIntegratorMap", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "map_memory", ".", "reset", "(", ")", "\n", "self", ".", "child_transformer", ".", "reset", "(", ")", "\n", "self", ".", "seq", "=", "0", "\n", "self", ".", "last_observation", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_integrator.IdentityIntegratorMap.cuda": [[40, 45], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "identity_integrator.IdentityIntegratorMap.child_transformer.cuda", "identity_integrator.IdentityIntegratorMap.map_memory.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "child_transformer", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_memory", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_integrator.IdentityIntegratorMap.dbg_write_extra": [[46, 61], ["learning.modules.dbg_writer.DebugWriter().should_write", "learning.modules.dbg_writer.DebugWriter().write_img", "learning.modules.dbg_writer.DebugWriter", "identity_integrator.IdentityIntegratorMap.dbg_t.set_map", "identity_integrator.IdentityIntegratorMap.dbg_t.get_map", "learning.modules.map_transformer_base.MapTransformerBase().to", "learning.modules.dbg_writer.DebugWriter", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "dbg_write_extra", "(", "self", ",", "map", ",", "pose", ")", ":", "\n", "        ", "if", "DebugWriter", "(", ")", ".", "should_write", "(", ")", ":", "\n", "            ", "map", "=", "map", "[", "0", ":", "1", ",", "0", ":", "3", "]", "\n", "self", ".", "seq", "+=", "1", "\n", "# Initialize a transformer module", "\n", "if", "pose", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "dbg_t", "is", "None", ":", "\n", "                    ", "self", ".", "dbg_t", "=", "MapTransformerBase", "(", "self", ".", "map_size", ",", "self", ".", "world_size", ",", "self", ".", "world_size_m", ")", ".", "to", "(", "map", ".", "device", ")", "\n", "\n", "# Transform the prediction to the global frame and write out to disk.", "\n", "", "self", ".", "dbg_t", ".", "set_map", "(", "map", ",", "pose", ")", "\n", "map_global", ",", "_", "=", "self", ".", "dbg_t", ".", "get_map", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "map_global", "=", "map", "\n", "", "DebugWriter", "(", ")", ".", "write_img", "(", "map_global", "[", "0", "]", ",", "\"gif_overlaid\"", ",", "args", "=", "{", "\"world_size\"", ":", "self", ".", "world_size", ",", "\"name\"", ":", "\"identity_integrator\"", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_integrator.IdentityIntegratorMap.forward": [[62, 107], ["identity_integrator.IdentityIntegratorMap.prof.tick", "len", "identity_integrator.IdentityIntegratorMap.prof.tick", "range", "identity_integrator.IdentityIntegratorMap.prof.tick", "torch.cat", "identity_integrator.IdentityIntegratorMap.dbg_write_extra", "identity_integrator.IdentityIntegratorMap.set_maps", "identity_integrator.IdentityIntegratorMap.prof.tick", "identity_integrator.IdentityIntegratorMap.prof.loop", "identity_integrator.IdentityIntegratorMap.prof.print_stats", "all_maps_out_r.append", "identity_integrator.IdentityIntegratorMap.child_transformer.set_map", "identity_integrator.IdentityIntegratorMap.child_transformer.get_map", "visualization.Presenter().show_image", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.dbg_write_extra", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "cam_poses", ",", "add_mask", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "#show=\"li\"", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\".\"", ")", "\n", "batch_size", "=", "len", "(", "cam_poses", ")", "\n", "\n", "assert", "add_mask", "is", "None", "or", "add_mask", "[", "0", "]", "is", "not", "None", ",", "\"The first observation in a sequence needs to be used!\"", "\n", "\n", "all_maps_out_r", "=", "[", "]", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_global\"", ")", "\n", "\n", "# For each timestep, take the latest map that was available, transformed into this timestep", "\n", "# Do only a maximum of one transformation for any map to avoid cascading of errors!", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "if", "add_mask", "is", "None", "or", "add_mask", "[", "i", "]", ":", "\n", "                ", "this_obs", "=", "(", "images", "[", "i", ":", "i", "+", "1", "]", ",", "cam_poses", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "self", ".", "last_observation", "=", "this_obs", "\n", "", "else", ":", "\n", "                ", "last_obs", "=", "self", ".", "last_observation", "\n", "assert", "last_obs", "is", "not", "None", ",", "\"The first observation in a sequence needs to be used!\"", "\n", "\n", "self", ".", "child_transformer", ".", "set_map", "(", "last_obs", "[", "0", "]", ",", "last_obs", "[", "1", "]", ")", "\n", "this_obs", "=", "self", ".", "child_transformer", ".", "get_map", "(", "cam_poses", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "\n", "", "all_maps_out_r", ".", "append", "(", "this_obs", "[", "0", "]", ")", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "this_obs", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "50", ")", "\n", "\n", "", "", "self", ".", "prof", ".", "tick", "(", "\"integrate\"", ")", "\n", "\n", "# Step 3: Convert all maps to local frame", "\n", "all_maps_r", "=", "torch", ".", "cat", "(", "all_maps_out_r", ",", "dim", "=", "0", ")", "\n", "\n", "# Write gifs for debugging", "\n", "self", ".", "dbg_write_extra", "(", "all_maps_r", ",", "None", ")", "\n", "\n", "self", ".", "set_maps", "(", "all_maps_r", ",", "cam_poses", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_local\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "all_maps_r", ",", "cam_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_integrator.IdentityIntegratorMap.forward_deprecated": [[108, 163], ["identity_integrator.IdentityIntegratorMap.prof.tick", "len", "identity_integrator.IdentityIntegratorMap.child_transformer.set_maps", "identity_integrator.IdentityIntegratorMap.child_transformer.get_maps", "identity_integrator.IdentityIntegratorMap.prof.tick", "range", "identity_integrator.IdentityIntegratorMap.prof.tick", "torch.cat", "identity_integrator.IdentityIntegratorMap.dbg_write_extra", "identity_integrator.IdentityIntegratorMap.child_transformer.set_maps", "identity_integrator.IdentityIntegratorMap.child_transformer.get_maps", "identity_integrator.IdentityIntegratorMap.set_maps", "identity_integrator.IdentityIntegratorMap.prof.tick", "identity_integrator.IdentityIntegratorMap.prof.loop", "identity_integrator.IdentityIntegratorMap.prof.print_stats", "all_maps_out_g.append", "identity_integrator.IdentityIntegratorMap.map_memory.set_map", "identity_integrator.IdentityIntegratorMap.map_memory.set_map", "identity_integrator.IdentityIntegratorMap.map_memory.get_map", "visualization.Presenter().show_image", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.dbg_write_extra", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "forward_deprecated", "(", "self", ",", "images", ",", "cam_poses", ",", "add_mask", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "#show=\"li\"", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\".\"", ")", "\n", "batch_size", "=", "len", "(", "cam_poses", ")", "\n", "\n", "assert", "add_mask", "is", "None", "or", "add_mask", "[", "0", "]", "is", "not", "None", ",", "\"The first observation in a sequence needs to be used!\"", "\n", "\n", "# Step 1: All local maps to global:", "\n", "#  TODO: Allow inputing global maps when new projector is ready", "\n", "self", ".", "child_transformer", ".", "set_maps", "(", "images", ",", "cam_poses", ")", "\n", "observations_g", ",", "_", "=", "self", ".", "child_transformer", ".", "get_maps", "(", "None", ")", "\n", "\n", "all_maps_out_g", "=", "[", "]", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_global\"", ")", "\n", "\n", "# TODO: Draw past trajectory on an extra channel of the semantic map", "\n", "# Step 2: Integrate serially in the global frame", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "# If we don't have a map yet, initialize the map to this observation", "\n", "            ", "if", "self", ".", "map_memory", ".", "latest_maps", "is", "None", ":", "\n", "                ", "self", ".", "map_memory", ".", "set_map", "(", "observations_g", "[", "i", ":", "i", "+", "1", "]", ",", "None", ")", "\n", "\n", "# Allow masking of observations", "\n", "", "if", "add_mask", "is", "None", "or", "add_mask", "[", "i", "]", ":", "\n", "# Use the map from this frame", "\n", "                ", "map_g", "=", "observations_g", "[", "i", ":", "i", "+", "1", "]", "\n", "self", ".", "map_memory", ".", "set_map", "(", "map_g", ",", "None", ")", "\n", "", "else", ":", "\n", "# Use the latest available map oriented in global frame", "\n", "                ", "map_g", ",", "_", "=", "self", ".", "map_memory", ".", "get_map", "(", "None", ")", "\n", "\n", "", "if", "show", "!=", "\"\"", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "map_g", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "50", ")", "\n", "\n", "", "all_maps_out_g", ".", "append", "(", "map_g", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"integrate\"", ")", "\n", "\n", "# Step 3: Convert all maps to local frame", "\n", "all_maps_g", "=", "torch", ".", "cat", "(", "all_maps_out_g", ",", "dim", "=", "0", ")", "\n", "\n", "# Write gifs for debugging", "\n", "self", ".", "dbg_write_extra", "(", "all_maps_g", ",", "None", ")", "\n", "\n", "self", ".", "child_transformer", ".", "set_maps", "(", "all_maps_g", ",", "None", ")", "\n", "maps_r", ",", "_", "=", "self", ".", "child_transformer", ".", "get_maps", "(", "cam_poses", ")", "\n", "self", ".", "set_maps", "(", "maps_r", ",", "cam_poses", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_local\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "maps_r", ",", "cam_poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.__init__": [[14, 22], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "utils.simple_profiler.SimpleProfiler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", ":", "#, pos_variance=0, rot_variance=0.5):", "\n", "        ", "super", "(", "MapPerturbation", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "map_size", "=", "source_map_size", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "#self.pos_variance = pos_variance", "\n", "#self.rot_variance = rot_variance", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.init_weights": [[23, 25], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.cuda": [[26, 29], ["learning.modules.map_transformer_base.MapTransformerBase.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show": [[37, 40], ["visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["def", "show", "(", "self", ",", "perturbed_maps", ",", "unperturbed_maps", ",", "name", ")", ":", "\n", "        ", "Presenter", "(", ")", ".", "show_image", "(", "unperturbed_maps", ".", "data", "[", "0", "]", ",", "name", "+", "\"_unperturbed\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "perturbed_maps", ".", "data", "[", "0", "]", ",", "name", "+", "\"_perturbed\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.forward": [[41, 54], ["random_perturb.MapPerturbation.set_maps", "random_perturb.MapPerturbation.get_maps", "random_perturb.MapPerturbation.show", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show"], ["", "def", "forward", "(", "self", ",", "maps", ",", "map_poses_original", ",", "map_poses_w_noise", ",", "proc_mask", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "set_maps", "(", "maps", ",", "map_poses_original", ")", "\n", "# T#ODO: Remove this superfluous transformation", "\n", "#maps_g, _ = self.get_maps(None)", "\n", "#self.set_maps(maps_g, None)", "\n", "perturbed_maps", ",", "_", "=", "self", ".", "get_maps", "(", "map_poses_w_noise", ")", "\n", "if", "show", "!=", "\"\"", ":", "\n", "            ", "self", ".", "show", "(", "perturbed_maps", ",", "maps", ",", "str", "(", "show", ")", ")", "\n", "\n", "# WARNING: The actual poses are poses with noise. We're returning the original poses, so that other modules", "\n", "# don't rotate back and undo the random perturbations.", "\n", "# EDIT: Try outputting noisy poses instead to keep things consistent", "\n", "", "return", "perturbed_maps", ",", "map_poses_w_noise", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.path_predictor.PathPredictor.__init__": [[20, 35], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "lingunet_params.get", "learning.modules.unet.lingunet_5_s.Lingunet5S", "learning.modules.unet.lingunet_5.Lingunet5"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["    ", "def", "__init__", "(", "self", ",", "lingunet_params", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", ":", "\n", "        ", "super", "(", "PathPredictor", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "if", "lingunet_params", ".", "get", "(", "\"small_network\"", ")", ":", "\n", "            ", "self", ".", "unet", "=", "Lingunet5S", "(", "lingunet_params", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "unet", "=", "Lingunet5", "(", "lingunet_params", ")", "\n", "\n", "#self.map_filter = MapLangSemanticFilter(emb_size, feature_channels, 3)", "\n", "", "self", ".", "map_size_px", "=", "source_map_size", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.path_predictor.PathPredictor.init_weights": [[36, 38], ["path_predictor.PathPredictor.unet.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "unet", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.path_predictor.PathPredictor.reset": [[39, 42], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "PathPredictor", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.path_predictor.PathPredictor.cuda": [[43, 48], ["learning.modules.map_transformer_base.MapTransformerBase.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "#self.map_filter.cuda(device)", "\n", "self", ".", "dbg_t", "=", "None", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.path_predictor.PathPredictor.dbg_write_extra": [[49, 60], ["learning.modules.dbg_writer.DebugWriter().should_write", "path_predictor.PathPredictor.dbg_t.set_map", "path_predictor.PathPredictor.dbg_t.get_map", "learning.modules.dbg_writer.DebugWriter().write_img", "learning.modules.dbg_writer.DebugWriter", "learning.modules.map_transformer_base.MapTransformerBase().to", "learning.modules.dbg_writer.DebugWriter", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "dbg_write_extra", "(", "self", ",", "map", ",", "pose", ")", ":", "\n", "        ", "if", "DebugWriter", "(", ")", ".", "should_write", "(", ")", ":", "\n", "            ", "self", ".", "seq", "+=", "1", "\n", "# Initialize a transformer module", "\n", "if", "self", ".", "dbg_t", "is", "None", ":", "\n", "                ", "self", ".", "dbg_t", "=", "MapTransformerBase", "(", "self", ".", "map_size_px", ",", "self", ".", "world_size_px", ",", "self", ".", "world_size_m", ")", ".", "to", "(", "map", ".", "device", ")", "\n", "\n", "# Transform the prediction to the global frame and write out to disk.", "\n", "", "self", ".", "dbg_t", ".", "set_map", "(", "map", ",", "pose", ")", "\n", "map_global", ",", "_", "=", "self", ".", "dbg_t", ".", "get_map", "(", "None", ")", "\n", "DebugWriter", "(", ")", ".", "write_img", "(", "map_global", "[", "0", "]", ",", "\"gif_overlaid\"", ",", "args", "=", "{", "\"world_size\"", ":", "self", ".", "world_size_px", ",", "\"name\"", ":", "\"pathpred\"", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.path_predictor.PathPredictor.forward": [[61, 94], ["path_predictor.PathPredictor.unet", "image.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "image", ",", "sentence_embeddimg", ",", "map_poses", ",", "proc_mask", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "# TODO: Move map perturb data augmentation in here.", "\n", "\n", "        ", "if", "image", ".", "size", "(", "1", ")", ">", "self", ".", "feature_channels", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", "0", ":", "self", ".", "feature_channels", ",", ":", ",", ":", "]", "\n", "\n", "", "pred_mask", "=", "self", ".", "unet", "(", "image", ",", "sentence_embeddimg", ")", "\n", "\n", "# Wtf is this:", "\n", "#self.map_filter.precompute_conv_weights(sentence_embeddimg)", "\n", "#features_filtered = self.map_filter(image)", "\n", "#out_maps = torch.cat([pred_mask, features_filtered], dim=1)", "\n", "\n", "\"\"\"\n        if proc_mask is not None:\n            bs = pred_mask.size(0)\n            for i in range(bs):\n\n                # If we are using this processed map, apply it\n                if proc_mask[bs]:\n                    self.set_map(pred_mask[i:i+1], map_poses[i:i+1])\n\n                # Otherwise return the latest processed map, rotated in this frame of reference\n                pred_mask[i] = self.get_map(map_poses[i:i+1])\n\n        if show != \"\":\n            Presenter().show_image(pred_mask.data[0], show, torch=True, scale=8, waitkey=1)\n\n        self.set_maps(pred_mask, map_poses)\n\n        #self.dbg_write_extra(pred_mask, map_poses)\n        \"\"\"", "\n", "return", "pred_mask", ",", "map_poses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap.__init__": [[17, 30], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.modules.map_transformer_base.MapTransformerBase", "utils.simple_profiler.SimpleProfiler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ",", "lamda", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "DrawStartPosOnGlobalMap", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "map_size", "=", "source_map_size", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "child_transformer", "=", "MapTransformerBase", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "start_pose", "=", "None", "\n", "self", ".", "last_emb", "=", "None", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap.init_weights": [[31, 33], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap.reset": [[34, 40], ["super().reset", "draw_start_pos.DrawStartPosOnGlobalMap.child_transformer.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "DrawStartPosOnGlobalMap", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "start_pose", "=", "None", "\n", "self", ".", "last_emb", "=", "None", "\n", "self", ".", "child_transformer", ".", "reset", "(", ")", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap.cuda": [[41, 45], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "draw_start_pos.DrawStartPosOnGlobalMap.child_transformer.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "child_transformer", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap.get_start_poses": [[46, 58], ["len", "range", "start_poses.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_start_poses", "(", "self", ",", "cam_poses_w", ",", "sentence_embeddings", ")", ":", "\n", "# For each timestep, get the pose corresponding to the start of the instruction segment", "\n", "        ", "seq_len", "=", "len", "(", "sentence_embeddings", ")", "\n", "start_poses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "if", "self", ".", "last_emb", "is", "not", "None", "and", "(", "sentence_embeddings", "[", "i", "]", ".", "data", "==", "self", ".", "last_emb", ")", ".", "all", "(", ")", ":", "\n", "                ", "pass", "# Keep the same start pose since we're on the same segment", "\n", "", "else", ":", "\n", "                ", "self", ".", "last_emb", "=", "sentence_embeddings", "[", "i", "]", ".", "data", "\n", "self", ".", "start_pose", "=", "cam_poses_w", "[", "i", "]", "\n", "", "start_poses", ".", "append", "(", "self", ".", "start_pose", ")", "\n", "", "return", "start_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap.forward": [[59, 92], ["draw_start_pos.DrawStartPosOnGlobalMap.prof.tick", "len", "list", "learning.inputs.common.empty_float_tensor", "draw_start_pos.DrawStartPosOnGlobalMap.get_start_poses", "range", "draw_start_pos.DrawStartPosOnGlobalMap.prof.tick", "torch.cat", "draw_start_pos.DrawStartPosOnGlobalMap.prof.loop", "draw_start_pos.DrawStartPosOnGlobalMap.prof.print_stats", "maps_w.size", "transformations.poses_m_to_px", "min", "min", "visualization.Presenter().show_image", "max", "max", "torch.autograd.Variable", "int", "int", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap.get_start_poses", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.poses_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "forward", "(", "self", ",", "maps_w", ",", "sentence_embeddings", ",", "map_poses_w", ",", "cam_poses_w", ",", "show", "=", "False", ")", ":", "\n", "#show=\"li", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\".\"", ")", "\n", "batch_size", "=", "len", "(", "maps_w", ")", "\n", "\n", "# Initialize the layers of the same size as the maps, but with only one channel", "\n", "new_layer_size", "=", "list", "(", "maps_w", ".", "size", "(", ")", ")", "\n", "new_layer_size", "[", "1", "]", "=", "1", "\n", "all_maps_out_w", "=", "empty_float_tensor", "(", "new_layer_size", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n", "start_poses", "=", "self", ".", "get_start_poses", "(", "cam_poses_w", ",", "sentence_embeddings", ")", "\n", "\n", "poses_img", "=", "[", "poses_m_to_px", "(", "as_pose", ",", "self", ".", "map_size", ",", "self", ".", "world_size_px", ",", "self", ".", "world_size_m", ")", "for", "as_pose", "in", "start_poses", "]", "\n", "#poses_img = poses_as_to_img(start_poses, self.world_size, batch_dim=True)", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "x", "=", "min", "(", "max", "(", "int", "(", "poses_img", "[", "i", "]", ".", "position", ".", "data", "[", "0", "]", ")", ",", "0", ")", ",", "new_layer_size", "[", "2", "]", "-", "1", ")", "\n", "y", "=", "min", "(", "max", "(", "int", "(", "poses_img", "[", "i", "]", ".", "position", ".", "data", "[", "1", "]", ")", ",", "0", ")", ",", "new_layer_size", "[", "2", "]", "-", "1", ")", "\n", "all_maps_out_w", "[", "i", ",", "0", ",", "x", ",", "y", "]", "=", "10.0", "\n", "\n", "", "if", "show", "!=", "\"\"", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "all_maps_out_w", "[", "0", "]", ",", "show", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"draw\"", ")", "\n", "\n", "# Step 3: Convert all maps to local frame", "\n", "maps_out", "=", "torch", ".", "cat", "(", "[", "Variable", "(", "all_maps_out_w", ")", ",", "maps_w", "]", ",", "dim", "=", "1", ")", "\n", "#all_maps_w = torch.cat(all_maps_out_w, dim=0)", "\n", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "maps_out", ",", "map_poses_w", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.ratio_path_predictor_bak.RatioPathPredictor.__init__": [[20, 65], ["learning.modules.cuda_module.CudaModule.__init__", "lingunet_params.get", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "torch.InstanceNorm2d", "learning.modules.unet.lingunet_5_oob.Lingunet5OOB", "learning.modules.unet.lingunet_5_oob.Lingunet5OOB", "copy.deepcopy", "copy.deepcopy", "learning.modules.unet.lingunet_5_s.Lingunet5S", "learning.modules.unet.lingunet_5_s.Lingunet5S", "copy.deepcopy", "copy.deepcopy", "learning.modules.unet.lingunet_5_dualhead.Lingunet5DualHead", "learning.modules.unet.lingunet_5_dualhead.Lingunet5DualHead", "learning.modules.unet.lingunet_5.Lingunet5", "learning.modules.unet.lingunet_5.Lingunet5", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["    ", "def", "__init__", "(", "self", ",", "lingunet_params", ",", "\n", "prior_channels_in", ",", "\n", "posterior_channels_in", ",", "\n", "dual_head", "=", "False", ",", "\n", "compute_prior", "=", "True", ",", "\n", "use_prior", "=", "False", ",", "\n", "oob", "=", "False", ")", ":", "\n", "        ", "super", "(", "RatioPathPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_prior", "=", "use_prior", "\n", "self", ".", "prior_img_channels", "=", "prior_channels_in", "\n", "self", ".", "posterior_img_channels", "=", "posterior_channels_in", "\n", "self", ".", "dual_head", "=", "dual_head", "\n", "self", ".", "small_network", "=", "lingunet_params", ".", "get", "(", "\"small_network\"", ")", "\n", "self", ".", "oob", "=", "oob", "\n", "\n", "if", "use_prior", ":", "\n", "            ", "assert", "compute_prior", ",", "\"If we want to use the prior distribution, we should compute it, right?\"", "\n", "\n", "", "if", "self", ".", "oob", ":", "\n", "            ", "lingunet_params", "[", "\"in_channels\"", "]", "=", "posterior_channels_in", "\n", "self", ".", "unet_posterior", "=", "Lingunet5OOB", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "lingunet_params", "[", "\"in_channels\"", "]", "=", "prior_channels_in", "\n", "self", ".", "unet_prior", "=", "Lingunet5OOB", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "", "elif", "self", ".", "small_network", ":", "\n", "            ", "lingunet_params", "[", "\"in_channels\"", "]", "=", "posterior_channels_in", "\n", "self", ".", "unet_posterior", "=", "Lingunet5S", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "lingunet_params", "[", "\"in_channels\"", "]", "=", "prior_channels_in", "\n", "self", ".", "unet_prior", "=", "Lingunet5S", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "", "elif", "self", ".", "dual_head", ":", "\n", "            ", "lingunet_params", "[", "\"in_channels\"", "]", "=", "posterior_channels_in", "\n", "self", ".", "unet_posterior", "=", "Lingunet5DualHead", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "lingunet_params", "[", "\"in_channels\"", "]", "=", "prior_channels_in", "\n", "self", ".", "unet_prior", "=", "Lingunet5DualHead", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "", "else", ":", "\n", "            ", "lingunet_params", "[", "\"in_channels\"", "]", "=", "posterior_channels_in", "\n", "self", ".", "unet_posterior", "=", "Lingunet5", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "lingunet_params", "[", "\"in_channels\"", "]", "=", "prior_channels_in", "\n", "self", ".", "unet_prior", "=", "Lingunet5", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "\n", "", "self", ".", "softmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "2", ")", "\n", "self", ".", "compute_prior", "=", "compute_prior", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.ratio_path_predictor_bak.RatioPathPredictor.init_weights": [[66, 69], ["ratio_path_predictor_bak.RatioPathPredictor.unet_posterior.init_weights", "ratio_path_predictor_bak.RatioPathPredictor.unet_prior.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "unet_posterior", ".", "init_weights", "(", ")", "\n", "self", ".", "unet_prior", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.ratio_path_predictor_bak.RatioPathPredictor.cuda": [[70, 76], ["learning.modules.cuda_module.CudaModule.cuda", "ratio_path_predictor_bak.RatioPathPredictor.softmax.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "CudaModule", ".", "cuda", "(", "self", ",", "device", ")", "\n", "#self.map_filter.cuda(device)", "\n", "self", ".", "softmax", ".", "cuda", "(", "device", ")", "\n", "self", ".", "dbg_t", "=", "None", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.ratio_path_predictor_bak.RatioPathPredictor.forward": [[77, 133], ["torch.autograd.Variable", "ratio_path_predictor_bak.RatioPathPredictor.unet_posterior", "image.size", "learning.inputs.common.empty_float_tensor", "ratio_path_predictor_bak.RatioPathPredictor.unet_prior", "image.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "forward", "(", "self", ",", "image", ",", "sentence_embeddimg", ",", "map_poses", ",", "tensor_store", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "\n", "# TODO: Move map perturb data augmentation in here.", "\n", "        ", "if", "image", ".", "size", "(", "1", ")", ">", "self", ".", "posterior_img_channels", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", "0", ":", "self", ".", "posterior_img_channels", ",", ":", ",", ":", "]", "\n", "\n", "# channel 0 is start position", "\n", "# channels 1-3 are the grounded map", "\n", "# all other channels are the semantic map", "\n", "", "fake_embedding", "=", "Variable", "(", "empty_float_tensor", "(", "[", "image", ".", "size", "(", "0", ")", ",", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "# The first N channels would've been computed by grounding map processor first. Remove them so that the", "\n", "# prior is clean from any language", "\n", "\n", "tmp1", "=", "self", ".", "unet_posterior", "(", "image", ",", "sentence_embeddimg", ",", "tensor_store", ")", "\n", "if", "self", ".", "dual_head", ":", "\n", "            ", "pred_mask_posterior", ",", "second_output_posterior", "=", "tmp1", "\n", "", "elif", "self", ".", "oob", ":", "\n", "            ", "pred_mask_posterior", ",", "goal_oob_score", "=", "tmp1", "\n", "", "else", ":", "\n", "            ", "pred_mask_posterior", "=", "tmp1", "\n", "\n", "#pred_mask_posterior_prob = self.softmax(pred_mask_posterior)", "\n", "\n", "", "if", "self", ".", "compute_prior", ":", "\n", "            ", "lang_conditioned_channels", "=", "self", ".", "posterior_img_channels", "-", "self", ".", "prior_img_channels", "\n", "prior_image", "=", "image", "[", ":", ",", "lang_conditioned_channels", ":", "]", "\n", "tmp2", "=", "self", ".", "unet_prior", "(", "prior_image", ",", "fake_embedding", ")", "\n", "if", "self", ".", "dual_head", ":", "\n", "                ", "pred_mask_prior", ",", "second_output_prior", "=", "tmp2", "\n", "", "elif", "self", ".", "oob", ":", "\n", "                ", "pred_mask_prior", ",", "goal_oob_prior_score", "=", "tmp2", "\n", "", "else", ":", "\n", "                ", "pred_mask_prior", "=", "tmp2", "\n", "#pred_mask_prior_prob = self.softmax(pred_mask_prior)", "\n", "#ratio_mask = pred_mask_posterior_prob / (pred_mask_prior_prob + 1e-3)", "\n", "#ratio_mask = self.softmax(ratio_mask)", "\n", "#else:", "\n", "#    pred_mask_prior_prob = pred_mask_posterior", "\n", "\n", "#if show != \"\":", "\n", "#    Presenter().show_image(ratio_mask.data[i], show, torch=True, scale=8, waitkey=1)", "\n", "\n", "#self.set_maps(pred_mask_posterior_prob, map_poses)", "\n", "\n", "# TODO: Careful whether we use a prob dist or scores", "\n", "", "", "ret", "=", "pred_mask_posterior", "\n", "#if self.use_prior:", "\n", "#    ret = pred_mask_prior_prob", "\n", "\n", "if", "self", ".", "dual_head", ":", "\n", "            ", "return", "ret", ",", "map_poses", ",", "second_output_posterior", "\n", "", "elif", "self", ".", "oob", ":", "\n", "            ", "return", "ret", ",", "goal_oob_score", ",", "map_poses", "\n", "", "else", ":", "\n", "            ", "return", "ret", ",", "map_poses", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator.LeakyIntegratorMap.__init__": [[15, 28], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.modules.map_transformer_base.MapTransformerBase", "utils.simple_profiler.SimpleProfiler", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ",", "lamda", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "LeakyIntegratorMap", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "map_size", "=", "source_map_size", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "child_transformer", "=", "MapTransformerBase", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "lamda", "=", "lamda", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "map_memory", "=", "MapTransformerBase", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator.LeakyIntegratorMap.init_weights": [[29, 31], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator.LeakyIntegratorMap.reset": [[32, 37], ["super().reset", "leaky_integrator.LeakyIntegratorMap.map_memory.reset", "leaky_integrator.LeakyIntegratorMap.child_transformer.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeakyIntegratorMap", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "map_memory", ".", "reset", "(", ")", "\n", "self", ".", "child_transformer", ".", "reset", "(", ")", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator.LeakyIntegratorMap.cuda": [[38, 43], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "leaky_integrator.LeakyIntegratorMap.child_transformer.cuda", "leaky_integrator.LeakyIntegratorMap.map_memory.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "child_transformer", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_memory", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator.LeakyIntegratorMap.dbg_write_extra": [[44, 59], ["learning.modules.dbg_writer.DebugWriter().should_write", "learning.modules.dbg_writer.DebugWriter().write_img", "learning.modules.dbg_writer.DebugWriter", "leaky_integrator.LeakyIntegratorMap.dbg_t.set_map", "leaky_integrator.LeakyIntegratorMap.dbg_t.get_map", "learning.modules.map_transformer_base.MapTransformerBase().to", "learning.modules.dbg_writer.DebugWriter", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "dbg_write_extra", "(", "self", ",", "map", ",", "pose", ")", ":", "\n", "        ", "if", "DebugWriter", "(", ")", ".", "should_write", "(", ")", ":", "\n", "            ", "map", "=", "map", "[", "0", ":", "1", ",", "0", ":", "3", "]", "\n", "self", ".", "seq", "+=", "1", "\n", "# Initialize a transformer module", "\n", "if", "pose", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "dbg_t", "is", "None", ":", "\n", "                    ", "self", ".", "dbg_t", "=", "MapTransformerBase", "(", "self", ".", "map_size", ",", "self", ".", "world_size_px", ",", "self", ".", "world_size_m", ")", ".", "to", "(", "map", ".", "device", ")", "\n", "\n", "# Transform the prediction to the global frame and write out to disk.", "\n", "", "self", ".", "dbg_t", ".", "set_map", "(", "map", ",", "pose", ")", "\n", "map_global", ",", "_", "=", "self", ".", "dbg_t", ".", "get_map", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "map_global", "=", "map", "\n", "", "DebugWriter", "(", ")", ".", "write_img", "(", "map_global", "[", "0", "]", ",", "\"gif_overlaid\"", ",", "args", "=", "{", "\"world_size\"", ":", "self", ".", "world_size_px", ",", "\"name\"", ":", "\"sm\"", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.leaky_integrator.LeakyIntegratorMap.forward": [[60, 133], ["leaky_integrator.LeakyIntegratorMap.prof.tick", "len", "leaky_integrator.LeakyIntegratorMap.child_transformer.set_maps", "leaky_integrator.LeakyIntegratorMap.child_transformer.get_maps", "leaky_integrator.LeakyIntegratorMap.child_transformer.set_maps", "leaky_integrator.LeakyIntegratorMap.child_transformer.get_maps", "leaky_integrator.LeakyIntegratorMap.prof.tick", "range", "leaky_integrator.LeakyIntegratorMap.prof.tick", "torch.cat", "leaky_integrator.LeakyIntegratorMap.dbg_write_extra", "leaky_integrator.LeakyIntegratorMap.child_transformer.set_maps", "leaky_integrator.LeakyIntegratorMap.child_transformer.get_maps", "leaky_integrator.LeakyIntegratorMap.set_maps", "leaky_integrator.LeakyIntegratorMap.prof.tick", "leaky_integrator.LeakyIntegratorMap.prof.loop", "leaky_integrator.LeakyIntegratorMap.prof.print_stats", "leaky_integrator.LeakyIntegratorMap.map_memory.get_map", "all_maps_out_g.append", "leaky_integrator.LeakyIntegratorMap.map_memory.set_map", "leaky_integrator.LeakyIntegratorMap.map_memory.get_map", "leaky_integrator.LeakyIntegratorMap.map_memory.set_map", "visualization.Presenter().show_image", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.dbg_write_extra", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "coverages", ",", "cam_poses", ",", "add_mask", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "#show=\"li\"", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\".\"", ")", "\n", "batch_size", "=", "len", "(", "images", ")", "\n", "\n", "assert", "add_mask", "is", "None", "or", "add_mask", "[", "0", "]", "is", "not", "None", ",", "\"The first observation in a sequence needs to be used!\"", "\n", "\n", "# Step 1: All local maps to global: # TODO: Allow inputing global maps when new projector is ready", "\n", "self", ".", "child_transformer", ".", "set_maps", "(", "images", ",", "cam_poses", ")", "\n", "observations_g", ",", "_", "=", "self", ".", "child_transformer", ".", "get_maps", "(", "None", ")", "\n", "\n", "self", ".", "child_transformer", ".", "set_maps", "(", "coverages", ",", "cam_poses", ")", "\n", "coverages_g", ",", "_", "=", "self", ".", "child_transformer", ".", "get_maps", "(", "None", ")", "\n", "\n", "masked_observations_g_add", "=", "self", ".", "lamda", "*", "observations_g", "*", "coverages_g", "\n", "\n", "all_maps_out_g", "=", "[", "]", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_global\"", ")", "\n", "\n", "# TODO: Draw past trajectory on an extra channel of the semantic map", "\n", "\n", "# Step 2: Integrate serially in the global frame", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "# If we don't have a map yet, initialize the map to this observation", "\n", "            ", "if", "self", ".", "map_memory", ".", "latest_maps", "is", "None", ":", "\n", "                ", "self", ".", "map_memory", ".", "set_map", "(", "observations_g", "[", "i", ":", "i", "+", "1", "]", ",", "None", ")", "\n", "#self.set_map(observations_g[i:i+1], None)", "\n", "\n", "# Allow masking of observations", "\n", "", "if", "add_mask", "is", "None", "or", "add_mask", "[", "i", "]", ":", "\n", "# Get the current global-frame map", "\n", "                ", "map_g", ",", "_", "=", "self", ".", "map_memory", ".", "get_map", "(", "None", ")", "\n", "\n", "#obs_g = observations_g[i:i+1]", "\n", "cov_g", "=", "coverages_g", "[", "i", ":", "i", "+", "1", "]", "\n", "obs_cov_g", "=", "masked_observations_g_add", "[", "i", ":", "i", "+", "1", "]", "\n", "\n", "# Add the observation into the map using a leaky integrator rule (TODO: Output lamda from model)", "\n", "new_map_g", "=", "(", "1", "-", "self", ".", "lamda", ")", "*", "map_g", "+", "obs_cov_g", "+", "self", ".", "lamda", "*", "map_g", "*", "(", "1", "-", "cov_g", ")", "\n", "\n", "# Remember this new map", "\n", "self", ".", "map_memory", ".", "set_map", "(", "new_map_g", ",", "None", ")", "\n", "#self.set_map(new_map_g, None)", "\n", "\n", "", "map_g", ",", "_", "=", "self", ".", "map_memory", ".", "get_map", "(", "None", ")", "\n", "\n", "# Return this map in the camera frame of reference", "\n", "#map_r, _ = self.get_map(cam_poses[i:i+1])", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "map_g", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "50", ")", "\n", "\n", "", "all_maps_out_g", ".", "append", "(", "map_g", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"integrate\"", ")", "\n", "\n", "# Step 3: Convert all maps to local frame", "\n", "all_maps_g", "=", "torch", ".", "cat", "(", "all_maps_out_g", ",", "dim", "=", "0", ")", "\n", "\n", "# Write gifs for debugging", "\n", "self", ".", "dbg_write_extra", "(", "all_maps_g", ",", "None", ")", "\n", "\n", "self", ".", "child_transformer", ".", "set_maps", "(", "all_maps_g", ",", "None", ")", "\n", "maps_r", ",", "_", "=", "self", ".", "child_transformer", ".", "get_maps", "(", "cam_poses", ")", "\n", "self", ".", "set_maps", "(", "maps_r", ",", "cam_poses", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_local\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "maps_r", ",", "cam_poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.__init__": [[16, 30], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.modules.map_transformer_base.MapTransformerBase", "utils.simple_profiler.SimpleProfiler", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size_px", ",", "world_size_px", ",", "world_size_m", ")", ":", "\n", "        ", "super", "(", "MapBatchFillMissing", ",", "self", ")", ".", "__init__", "(", "source_map_size_px", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "map_size", "=", "source_map_size_px", "\n", "self", ".", "world_size", "=", "world_size_px", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "child_transformer", "=", "MapTransformerBase", "(", "source_map_size_px", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "map_memory", "=", "MapTransformerBase", "(", "source_map_size_px", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "self", ".", "last_observation", "=", "None", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "self", ".", "seq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.init_weights": [[31, 33], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.reset": [[34, 40], ["super().reset", "map_batch_fill_missing.MapBatchFillMissing.map_memory.reset", "map_batch_fill_missing.MapBatchFillMissing.child_transformer.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "MapBatchFillMissing", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "map_memory", ".", "reset", "(", ")", "\n", "self", ".", "child_transformer", ".", "reset", "(", ")", "\n", "self", ".", "seq", "=", "0", "\n", "self", ".", "last_observation", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.cuda": [[41, 46], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "map_batch_fill_missing.MapBatchFillMissing.child_transformer.cuda", "map_batch_fill_missing.MapBatchFillMissing.map_memory.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "child_transformer", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_memory", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.dbg_write_extra": [[47, 62], ["learning.modules.dbg_writer.DebugWriter().should_write", "learning.modules.dbg_writer.DebugWriter().write_img", "learning.modules.dbg_writer.DebugWriter", "map_batch_fill_missing.MapBatchFillMissing.dbg_t.set_map", "map_batch_fill_missing.MapBatchFillMissing.dbg_t.get_map", "learning.modules.map_transformer_base.MapTransformerBase().to", "learning.modules.dbg_writer.DebugWriter", "learning.modules.map_transformer_base.MapTransformerBase"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "dbg_write_extra", "(", "self", ",", "map", ",", "pose", ")", ":", "\n", "        ", "if", "DebugWriter", "(", ")", ".", "should_write", "(", ")", ":", "\n", "            ", "map", "=", "map", "[", "0", ":", "1", ",", "0", ":", "3", "]", "\n", "self", ".", "seq", "+=", "1", "\n", "# Initialize a transformer module", "\n", "if", "pose", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "dbg_t", "is", "None", ":", "\n", "                    ", "self", ".", "dbg_t", "=", "MapTransformerBase", "(", "self", ".", "map_size", ",", "self", ".", "world_size", ",", "self", ".", "world_size_m", ")", ".", "to", "(", "map", ".", "device", ")", "\n", "\n", "# Transform the prediction to the global frame and write out to disk.", "\n", "", "self", ".", "dbg_t", ".", "set_map", "(", "map", ",", "pose", ")", "\n", "map_global", ",", "_", "=", "self", ".", "dbg_t", ".", "get_map", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "map_global", "=", "map", "\n", "", "DebugWriter", "(", ")", ".", "write_img", "(", "map_global", "[", "0", "]", ",", "\"gif_overlaid\"", ",", "args", "=", "{", "\"world_size\"", ":", "self", ".", "world_size", ",", "\"name\"", ":", "\"identity_integrator\"", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_fill_missing.MapBatchFillMissing.forward": [[63, 113], ["map_batch_fill_missing.MapBatchFillMissing.prof.tick", "len", "map_batch_fill_missing.MapBatchFillMissing.prof.tick", "range", "map_batch_fill_missing.MapBatchFillMissing.prof.tick", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "map_batch_fill_missing.MapBatchFillMissing.prof.tick", "map_batch_fill_missing.MapBatchFillMissing.prof.loop", "map_batch_fill_missing.MapBatchFillMissing.prof.print_stats", "learning.inputs.partial_2d_distribution.Partial2DDistribution.append", "torch.cat", "torch.cat", "map_batch_fill_missing.MapBatchFillMissing.child_transformer.set_map", "map_batch_fill_missing.MapBatchFillMissing.child_transformer.get_map", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "visualization.Presenter().show_image", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "", "def", "forward", "(", "self", ",", "select_dist", ",", "all_cam_poses", ",", "plan_mask", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "#show=\"li\"", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\".\"", ")", "\n", "\n", "# During rollout, plan_mask will alternate between [True] and [False]", "\n", "if", "plan_mask", "is", "None", ":", "\n", "            ", "all_dist", "=", "select_dist", "\n", "return", "all_dist", ",", "all_cam_poses", "\n", "\n", "", "full_batch_size", "=", "len", "(", "all_cam_poses", ")", "\n", "\n", "all_dists_out_r", "=", "[", "]", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_global\"", ")", "\n", "\n", "# For each timestep, take the latest map that was available, transformed into this timestep", "\n", "# Do only a maximum of one transformation for any map to avoid cascading of errors!", "\n", "ptr", "=", "0", "\n", "for", "i", "in", "range", "(", "full_batch_size", ")", ":", "\n", "            ", "this_pose", "=", "all_cam_poses", "[", "i", ":", "i", "+", "1", "]", "\n", "if", "plan_mask", "[", "i", "]", ":", "\n", "                ", "this_obs", "=", "(", "select_dist", "[", "ptr", ":", "ptr", "+", "1", "]", ",", "this_pose", ")", "\n", "ptr", "+=", "1", "\n", "self", ".", "last_observation", "=", "this_obs", "\n", "", "else", ":", "\n", "                ", "assert", "self", ".", "last_observation", "is", "not", "None", ",", "\"The first observation in a sequence needs to be used!\"", "\n", "last_map", ",", "last_pose", "=", "self", ".", "last_observation", "\n", "\n", "# TODO: See if we can speed this up. Perhaps batch for all timesteps inbetween observations", "\n", "self", ".", "child_transformer", ".", "set_map", "(", "last_map", ".", "inner_distribution", ",", "last_pose", ")", "\n", "x", "=", "self", ".", "child_transformer", ".", "get_map", "(", "this_pose", ")", "\n", "this_obs", "=", "Partial2DDistribution", "(", "x", ",", "last_map", ".", "outer_prob_mass", ")", "\n", "\n", "", "all_dists_out_r", ".", "append", "(", "this_obs", ")", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "this_obs", ".", "inner_distribution", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "50", ")", "\n", "\n", "", "", "self", ".", "prof", ".", "tick", "(", "\"integrate\"", ")", "\n", "\n", "inner_list", "=", "[", "x", ".", "inner_distribution", "for", "x", "in", "all_dists_out_r", "]", "\n", "outer_list", "=", "[", "x", ".", "outer_prob_mass", "for", "x", "in", "all_dists_out_r", "]", "\n", "\n", "all_dists_out_r", "=", "Partial2DDistribution", "(", "torch", ".", "cat", "(", "inner_list", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "outer_list", ",", "dim", "=", "0", ")", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"maps_to_local\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "all_dists_out_r", ",", "all_cam_poses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor.__init__": [[12, 23], ["torch.Module.__init__", "learning.modules.rss.map_lang_spatial_filter.MapLangSpatialFilter", "learning.modules.rss.map_lang_semantic_filter.MapLangSemanticFilter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_size", ",", "in_channels", ",", "out_channels", ",", "spatial", "=", "False", ",", "cat_out", "=", "False", ")", ":", "\n", "        ", "super", "(", "LangFilterMapProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_size", "=", "embed_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "cat_out", "=", "cat_out", "\n", "\n", "if", "spatial", ":", "\n", "            ", "self", ".", "lang_filter", "=", "MapLangSpatialFilter", "(", "embed_size", ",", "in_channels", ",", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lang_filter", "=", "MapLangSemanticFilter", "(", "embed_size", ",", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor.init_weights": [[24, 26], ["lang_filter_map_to_map.LangFilterMapProcessor.lang_filter.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "lang_filter", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor.forward": [[27, 48], ["lang_filter_map_to_map.LangFilterMapProcessor.lang_filter.precompute_conv_weights", "lang_filter_map_to_map.LangFilterMapProcessor.lang_filter", "images.size", "visualization.Presenter().show_image", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "forward", "(", "self", ",", "images", ",", "sentence_embeddings", ",", "map_poses", ",", "proc_mask", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "\n", "# If we are supposed to use less channels than the input map has, just grab the first N channels", "\n", "        ", "if", "images", ".", "size", "(", "1", ")", ">", "self", ".", "in_channels", ":", "\n", "            ", "images_in", "=", "images", "[", ":", ",", "0", ":", "self", ".", "in_channels", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "images_in", "=", "images", "\n", "\n", "# Apply the language-conditioned convolutional filter", "\n", "", "self", ".", "lang_filter", ".", "precompute_conv_weights", "(", "sentence_embeddings", ")", "\n", "images_out", "=", "self", ".", "lang_filter", "(", "images_in", ")", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "images_out", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "\n", "# If requested, concatenate with the prior input, such that the first feature maps are from output", "\n", "# That allows chaining these modules and slicing", "\n", "", "if", "self", ".", "cat_out", ":", "\n", "            ", "images_out", "=", "torch", ".", "cat", "(", "[", "images_out", ",", "images_in", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "images_out", ",", "map_poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.__init__": [[13, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MapBatchSelect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.init_weights": [[16, 18], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one": [[19, 23], ["mask_t.to.to.to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "one", "(", "self", ",", "tensor", ",", "plan_mask", ",", "device", ")", ":", "\n", "        ", "mask_t", "=", "torch", ".", "Tensor", "(", "plan_mask", ")", "==", "True", "\n", "mask_t", "=", "mask_t", ".", "to", "(", "device", ")", "\n", "return", "tensor", "[", "mask_t", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.forward": [[24, 47], ["mask_t.to.to.to", "maps[].view", "map_coverages[].view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "list", "sent_embeds[].view", "maps.size", "map_coverages.size", "sent_embeds.size", "mask_t[].expand_as", "mask_t[].expand_as", "mask_t[].expand_as"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "forward", "(", "self", ",", "maps", ",", "map_coverages", ",", "map_poses", ",", "cam_poses", ",", "noisy_poses", ",", "start_poses", ",", "sent_embeds", ",", "plan_mask", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "        ", "if", "plan_mask", "is", "None", ":", "\n", "            ", "return", "maps", ",", "map_coverages", ",", "map_poses", ",", "cam_poses", ",", "noisy_poses", ",", "start_poses", ",", "sent_embeds", "\n", "\n", "", "mask_t", "=", "torch", ".", "Tensor", "(", "plan_mask", ")", "==", "True", "\n", "mask_t", "=", "mask_t", ".", "to", "(", "maps", ".", "device", ")", "\n", "\n", "maps_size", "=", "list", "(", "maps", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "select_maps", "=", "maps", "[", "mask_t", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "expand_as", "(", "maps", ")", "]", ".", "view", "(", "[", "-", "1", "]", "+", "maps_size", ")", "\n", "covs_size", "=", "list", "(", "map_coverages", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "select_coverages", "=", "map_coverages", "[", "mask_t", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "expand_as", "(", "map_coverages", ")", "]", ".", "view", "(", "[", "-", "1", "]", "+", "covs_size", ")", "\n", "if", "sent_embeds", ".", "shape", "[", "0", "]", "==", "mask_t", ".", "shape", "[", "0", "]", ":", "\n", "            ", "select_sent_embeds", "=", "sent_embeds", "[", "mask_t", "[", ":", ",", "np", ".", "newaxis", "]", ".", "expand_as", "(", "sent_embeds", ")", "]", ".", "view", "(", "[", "-", "1", ",", "sent_embeds", ".", "size", "(", "1", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "select_sent_embeds", "=", "sent_embeds", "\n", "", "select_poses", "=", "map_poses", "[", "mask_t", "]", "if", "map_poses", "is", "not", "None", "else", "None", "\n", "select_cam_poses", "=", "cam_poses", "[", "mask_t", "]", "if", "cam_poses", "is", "not", "None", "else", "None", "\n", "select_noisy_poses", "=", "noisy_poses", "[", "mask_t", "]", "if", "noisy_poses", "is", "not", "None", "else", "None", "\n", "select_start_poses", "=", "start_poses", "[", "mask_t", "]", "if", "start_poses", "is", "not", "None", "else", "None", "\n", "\n", "#print(\"Selected \" + str(len(select_maps)) + \" maps from \" + str(len(maps)))", "\n", "\n", "return", "select_maps", ",", "select_coverages", ",", "select_poses", ",", "select_cam_poses", ",", "select_noisy_poses", ",", "select_start_poses", ",", "select_sent_embeds", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.ratio_path_predictor.RatioPathPredictor.__init__": [[19, 54], ["torch.Module.__init__", "lingunet_params.get", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "learning.modules.unet.lingunet_5_oob.Lingunet5OOB", "learning.modules.unet.lingunet_5_oob.Lingunet5OOB", "learning.modules.unet.lingunet_5.Lingunet5", "learning.modules.unet.lingunet_5.Lingunet5", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["    ", "def", "__init__", "(", "self", ",", "lingunet_params", ",", "\n", "prior_channels_in", ",", "\n", "posterior_channels_in", ",", "\n", "dual_head", "=", "False", ",", "\n", "compute_prior", "=", "True", ",", "\n", "use_prior", "=", "False", ",", "\n", "oob", "=", "False", ")", ":", "\n", "        ", "super", "(", "RatioPathPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_prior", "=", "use_prior", "\n", "self", ".", "prior_img_channels", "=", "prior_channels_in", "\n", "self", ".", "posterior_img_channels", "=", "posterior_channels_in", "\n", "self", ".", "dual_head", "=", "dual_head", "\n", "self", ".", "small_network", "=", "lingunet_params", ".", "get", "(", "\"small_network\"", ")", "\n", "self", ".", "oob", "=", "oob", "\n", "\n", "if", "use_prior", ":", "\n", "            ", "assert", "compute_prior", ",", "\"If we want to use the prior distribution, we should compute it, right?\"", "\n", "\n", "", "if", "self", ".", "oob", ":", "\n", "            ", "lingunet_params", "[", "\"in_channels\"", "]", "=", "posterior_channels_in", "\n", "self", ".", "unet_posterior", "=", "Lingunet5OOB", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "lingunet_params", "[", "\"in_channels\"", "]", "=", "prior_channels_in", "\n", "self", ".", "unet_prior", "=", "Lingunet5OOB", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "", "else", ":", "\n", "            ", "lingunet_params", "[", "\"in_channels\"", "]", "=", "posterior_channels_in", "\n", "self", ".", "unet_posterior", "=", "Lingunet5", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "lingunet_params", "[", "\"in_channels\"", "]", "=", "prior_channels_in", "\n", "self", ".", "unet_prior", "=", "Lingunet5", "(", "deepcopy", "(", "lingunet_params", ")", ")", "\n", "\n", "", "self", ".", "softmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "2", ")", "\n", "self", ".", "compute_prior", "=", "compute_prior", "\n", "\n", "self", ".", "dbg_t", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.ratio_path_predictor.RatioPathPredictor.init_weights": [[55, 58], ["ratio_path_predictor.RatioPathPredictor.unet_posterior.init_weights", "ratio_path_predictor.RatioPathPredictor.unet_prior.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "unet_posterior", ".", "init_weights", "(", ")", "\n", "self", ".", "unet_prior", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.ratio_path_predictor.RatioPathPredictor.forward": [[59, 81], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "ratio_path_predictor.RatioPathPredictor.unet_posterior", "image.size", "ratio_path_predictor.RatioPathPredictor.unet_prior", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "image.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to"], ["", "def", "forward", "(", "self", ",", "image", ",", "sentence_embeddimg", ",", "map_poses", ",", "tensor_store", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "\n", "# TODO: Move map perturb data augmentation in here.", "\n", "        ", "if", "image", ".", "size", "(", "1", ")", ">", "self", ".", "posterior_img_channels", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", "0", ":", "self", ".", "posterior_img_channels", ",", ":", ",", ":", "]", "\n", "\n", "# channel 0 is start position", "\n", "# channels 1-3 are the grounded map", "\n", "# all other channels are the semantic map", "\n", "", "fake_embedding", "=", "torch", ".", "zeros", "(", "[", "image", ".", "size", "(", "0", ")", ",", "1", "]", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "\n", "# The first N channels would've been computed by grounding map processor first. Remove them so that the", "\n", "# prior is clean from any language", "\n", "\n", "posterior_distributions", "=", "self", ".", "unet_posterior", "(", "image", ",", "sentence_embeddimg", ",", "tensor_store", ")", "\n", "\n", "if", "self", ".", "compute_prior", ":", "\n", "            ", "lang_conditioned_channels", "=", "self", ".", "posterior_img_channels", "-", "self", ".", "prior_img_channels", "\n", "prior_image", "=", "image", "[", ":", ",", "lang_conditioned_channels", ":", "]", "\n", "prior_distributions", "=", "self", ".", "unet_prior", "(", "prior_image", ",", "fake_embedding", ")", "\n", "\n", "", "return", "posterior_distributions", ",", "map_poses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_map_to_map.IdentityMapProcessor.__init__": [[10, 14], ["learning.modules.map_transformer_base.MapTransformerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", ":", "\n", "        ", "super", "(", "IdentityMapProcessor", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "self", ".", "map_size", "=", "source_map_size", "\n", "self", ".", "world_size", "=", "world_size_px", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_map_to_map.IdentityMapProcessor.init_weights": [[15, 17], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_map_to_map.IdentityMapProcessor.cuda": [[18, 21], ["learning.modules.map_transformer_base.MapTransformerBase.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.identity_map_to_map.IdentityMapProcessor.forward": [[22, 25], ["identity_map_to_map.IdentityMapProcessor.set_maps"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps"], ["", "def", "forward", "(", "self", ",", "images", ",", "sentence_embeddimgs", ",", "map_poses", ",", "proc_mask", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "set_maps", "(", "images", ",", "map_poses", ")", "\n", "return", "images", ",", "map_poses", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_map.TopDownToEgoMap.__init__": [[12, 24], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.modules.resnet.resnet_13_light.ResNet13Light", "data_io.weights.enable_weight_saving", "learning.modules.rss.map_lang_semantic_filter.MapLangSemanticFilter", "data_io.weights.enable_weight_saving"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving"], ["    ", "def", "__init__", "(", "self", ",", "img_in_size", "=", "256", ",", "world_size_in_img", "=", "256", ",", "feature_channels", "=", "32", ",", "ground_channels", "=", "3", ",", "embed_size", "=", "40", ",", "aux_ground", "=", "False", ",", "freeze", "=", "False", ")", ":", "\n", "        ", "super", "(", "TopDownToEgoMap", ",", "self", ")", ".", "__init__", "(", "img_in_size", ",", "world_size_in_img", ")", "\n", "\n", "# Process images using a resnet to get a feature map", "\n", "self", ".", "feature_net", "=", "ResNet13Light", "(", "feature_channels", ",", "down_pad", "=", "True", ")", "\n", "\n", "self", ".", "aux_ground", "=", "aux_ground", "\n", "if", "aux_ground", ":", "\n", "            ", "self", ".", "lang_filter", "=", "MapLangSemanticFilter", "(", "embed_size", ",", "feature_channels", ",", "ground_channels", ")", "\n", "enable_weight_saving", "(", "self", ".", "lang_filter", ",", "\"ground_filter\"", ",", "alwaysfreeze", "=", "freeze", ")", "\n", "\n", "", "enable_weight_saving", "(", "self", ".", "feature_net", ",", "\"feature_resnet_light\"", ",", "alwaysfreeze", "=", "freeze", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_map.TopDownToEgoMap.cuda": [[25, 31], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "top_down_to_ego_map.TopDownToEgoMap.map_affine.cuda", "top_down_to_ego_map.TopDownToEgoMap.lang_filter.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "map_affine", ".", "cuda", "(", "device", ")", "\n", "if", "self", ".", "aux_ground", ":", "\n", "            ", "self", ".", "lang_filter", ".", "cuda", "(", "device", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_map.TopDownToEgoMap.init_weights": [[32, 34], ["top_down_to_ego_map.TopDownToEgoMap.feature_net.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "feature_net", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_map.TopDownToEgoMap.forward": [[35, 87], ["top_down_to_ego_map.TopDownToEgoMap.set_map", "top_down_to_ego_map.TopDownToEgoMap.get_map", "top_down_to_ego_map.TopDownToEgoMap.feature_net", "torch.ones_like", "parent.keep_inputs", "top_down_to_ego_map.TopDownToEgoMap.lang_filter.precompute_conv_weights", "top_down_to_ego_map.TopDownToEgoMap.lang_filter", "torch.cat", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "parent.keep_inputs", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward", "(", "self", ",", "image_g", ",", "pose", ",", "sentence_embed", ",", "parent", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "\n", "# scale to 0-1 range", "\n", "#image_g = image_g - torch.min(image_g)", "\n", "#image_g = image_g / (torch.max(image_g) + 1e-9)", "\n", "\n", "# rotate to robot frame", "\n", "# TODO: Temporarily changed to local pose", "\n", "        ", "self", ".", "set_map", "(", "image_g", ",", "pose", ")", "\n", "image_r", ",", "_", "=", "self", ".", "get_map", "(", "pose", ")", "\n", "\n", "\n", "\"\"\"\n        # normalize mean-0 std-1\n        image_r = image_r - torch.mean(image_r)\n        image_r = image_r / (torch.std(image_r) + 1e-9)\n\n        ones = torch.ones_like(image_g)\n        self.set_map(ones, None)\n        cov_r, _ = self.get_map(pose)\n        cov_r = cov_r - torch.min(cov_r)\n        cov_r /= (torch.max(cov_r) + 1e-9)\n        cov_rl = cov_r > 1e-8\n\n        blackcolor = torch.min(image_g)\n\n        #image_r[cov_rl] = blackcolor\n        \"\"\"", "\n", "\n", "features_r", "=", "self", ".", "feature_net", "(", "image_r", ")", "\n", "\n", "if", "parent", "is", "not", "None", ":", "\n", "            ", "parent", ".", "keep_inputs", "(", "\"fpv_features\"", ",", "features_r", ")", "\n", "\n", "", "if", "self", ".", "aux_ground", ":", "\n", "            ", "self", ".", "lang_filter", ".", "precompute_conv_weights", "(", "sentence_embed", ")", "\n", "features_g", "=", "self", ".", "lang_filter", "(", "features_r", ")", "\n", "if", "parent", "is", "not", "None", ":", "\n", "                ", "parent", ".", "keep_inputs", "(", "\"fpv_features_g\"", ",", "features_g", ")", "\n", "\n", "", "features_all", "=", "torch", ".", "cat", "(", "[", "features_g", ",", "features_r", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "features_all", "=", "features_r", "\n", "\n", "", "coverage", "=", "torch", ".", "ones_like", "(", "features_all", ")", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "image_r", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", "+", "\"_img\"", ",", "torch", "=", "True", ",", "scale", "=", "1", ",", "waitkey", "=", "20", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "features_r", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "12", ",", "waitkey", "=", "20", ")", "\n", "#Presenter().show_image(cov_r.data[0, 0:3], show+ \"_convg\", torch=True, scale=1, waitkey=20)", "\n", "\n", "", "return", "features_all", ",", "coverage", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_fpv.FPVToFPVMap.__init__": [[15, 24], ["torch.nn.Module.__init__", "learning.modules.img_to_img.img_to_features.ImgToFeatures", "utils.simple_profiler.SimpleProfiler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_w", ",", "img_h", ",", "res_channels", ",", "map_channels", ",", "img_dbg", "=", "False", ")", ":", "\n", "        ", "super", "(", "FPVToFPVMap", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "image_debug", "=", "img_dbg", "\n", "\n", "# Provide enough padding so that the map is scaled down by powers of 2.", "\n", "self", ".", "img_to_features", "=", "ImgToFeatures", "(", "res_channels", ",", "map_channels", ",", "img_w", ",", "img_h", ")", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "actual_images", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_fpv.FPVToFPVMap.init_weights": [[25, 27], ["fpv_to_fpv.FPVToFPVMap.img_to_features.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_fpv.FPVToFPVMap.reset": [[28, 30], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "actual_images", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_fpv.FPVToFPVMap.forward_fpv_features": [[31, 44], ["fpv_to_fpv.FPVToFPVMap.img_to_features"], "methods", ["None"], ["", "def", "forward_fpv_features", "(", "self", ",", "images", ",", "sentence_embeds", ",", "parent", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute the first-person image features given the first-person images\n        If grounding loss is enabled, will also return sentence_embedding conditioned image features\n        :param images: images to compute features on\n        :param sentence_embeds: sentence embeddings for each image\n        :param parent:\n        :return: features_fpv_vis - the visual features extracted using the ResNet\n                 features_fpv_gnd - the grounded visual features obtained after applying a 1x1 language-conditioned conv\n        \"\"\"", "\n", "# Extract image features. If they've been precomputed ahead of time, just grab it by the provided index", "\n", "features_fpv_vis", "=", "self", ".", "img_to_features", "(", "images", ")", "\n", "return", "features_fpv_vis", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_fpv.FPVToFPVMap.forward": [[45, 52], ["fpv_to_fpv.FPVToFPVMap.prof.tick", "fpv_to_fpv.FPVToFPVMap.forward_fpv_features"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.forward_fpv_features"], ["", "def", "forward", "(", "self", ",", "images", ",", "poses", ",", "sentence_embeds", ",", "parent", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "features_fpv_vis_only", "=", "self", ".", "forward_fpv_features", "(", "images", ",", "sentence_embeds", ",", "parent", ")", "\n", "\n", "return", "features_fpv_vis_only", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_global_map.FPVToGlobalMap.__init__": [[21, 55], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.models.semantic_map.pinhole_camera_inv.PinholeCameraProjectionModuleGlobal", "learning.models.semantic_map.grid_sampler.GridSampler", "utils.simple_profiler.SimpleProfiler", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "learning.modules.img_to_img.img_to_features.ImgToFeatures"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "source_map_size", ",", "\n", "world_size_px", ",", "\n", "world_size_m", ",", "\n", "img_w", ",", "\n", "img_h", ",", "\n", "res_channels", ",", "\n", "map_channels", ",", "\n", "cam_h_fov", ",", "\n", "domain", ",", "\n", "img_dbg", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "FPVToGlobalMap", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", ")", "\n", "\n", "self", ".", "image_debug", "=", "img_dbg", "\n", "\n", "self", ".", "use_lang_filter", "=", "False", "\n", "\n", "# Process images using a resnet to get a feature map", "\n", "if", "self", ".", "image_debug", ":", "\n", "            ", "self", ".", "img_to_features", "=", "nn", ".", "MaxPool2d", "(", "8", ")", "\n", "", "else", ":", "\n", "# Provide enough padding so that the map is scaled down by powers of 2.", "\n", "            ", "self", ".", "img_to_features", "=", "ImgToFeatures", "(", "res_channels", ",", "map_channels", ",", "img_w", ",", "img_h", ")", "\n", "\n", "# Project feature maps to the global frame", "\n", "", "self", ".", "map_projection", "=", "PinholeCameraProjectionModuleGlobal", "(", "\n", "source_map_size", ",", "world_size_px", ",", "world_size_m", ",", "img_w", ",", "img_h", ",", "cam_h_fov", ",", "domain", ")", "\n", "\n", "self", ".", "grid_sampler", "=", "GridSampler", "(", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "self", ".", "actual_images", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_global_map.FPVToGlobalMap.cuda": [[56, 63], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "fpv_to_global_map.FPVToGlobalMap.map_projection.cuda", "fpv_to_global_map.FPVToGlobalMap.grid_sampler.cuda", "fpv_to_global_map.FPVToGlobalMap.img_to_features.cuda", "fpv_to_global_map.FPVToGlobalMap.lang_filter.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "map_projection", ".", "cuda", "(", "device", ")", "\n", "self", ".", "grid_sampler", ".", "cuda", "(", "device", ")", "\n", "self", ".", "img_to_features", ".", "cuda", "(", "device", ")", "\n", "if", "self", ".", "use_lang_filter", ":", "\n", "            ", "self", ".", "lang_filter", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_global_map.FPVToGlobalMap.init_weights": [[64, 67], ["fpv_to_global_map.FPVToGlobalMap.img_to_features.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "image_debug", ":", "\n", "            ", "self", ".", "img_to_features", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_global_map.FPVToGlobalMap.reset": [[68, 71], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "actual_images", "=", "None", "\n", "super", "(", "FPVToGlobalMap", ",", "self", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_global_map.FPVToGlobalMap.forward_fpv_features": [[72, 99], ["fpv_to_global_map.FPVToGlobalMap.img_to_features", "tensor_store.keep_inputs", "fpv_to_global_map.FPVToGlobalMap.lang_filter.precompute_conv_weights", "fpv_to_global_map.FPVToGlobalMap.lang_filter", "tensor_store.keep_inputs"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward_fpv_features", "(", "self", ",", "images", ",", "sentence_embeds", ",", "tensor_store", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute the first-person image features given the first-person images\n        If grounding loss is enabled, will also return sentence_embedding conditioned image features\n        :param images: images to compute features on\n        :param sentence_embeds: sentence embeddings for each image\n        :param parent:\n        :return: features_fpv_vis - the visual features extracted using the ResNet\n                 features_fpv_gnd - the grounded visual features obtained after applying a 1x1 language-conditioned conv\n        \"\"\"", "\n", "# Extract image features. If they've been precomputed ahead of time, just grab it by the provided index", "\n", "features_fpv_vis", "=", "self", ".", "img_to_features", "(", "images", ")", "\n", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "            ", "tensor_store", ".", "keep_inputs", "(", "\"fpv_features\"", ",", "features_fpv_vis", ")", "\n", "#self.prof.tick(\"feat\")", "\n", "\n", "# If required, pre-process image features by grounding them in language", "\n", "", "if", "self", ".", "use_lang_filter", ":", "\n", "            ", "self", ".", "lang_filter", ".", "precompute_conv_weights", "(", "sentence_embeds", ")", "\n", "features_gnd", "=", "self", ".", "lang_filter", "(", "features_fpv_vis", ")", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "                ", "tensor_store", ".", "keep_inputs", "(", "\"fpv_features_g\"", ",", "features_gnd", ")", "\n", "#self.prof.tick(\"gnd\")", "\n", "", "return", "features_fpv_vis", ",", "features_gnd", "\n", "\n", "", "return", "features_fpv_vis", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_global_map.FPVToGlobalMap.forward": [[100, 162], ["fpv_to_global_map.FPVToGlobalMap.prof.tick", "poses.cpu", "fpv_to_global_map.FPVToGlobalMap.forward_fpv_features", "fpv_to_global_map.FPVToGlobalMap.map_projection", "fpv_to_global_map.FPVToGlobalMap.to", "fpv_to_global_map.FPVToGlobalMap.prof.tick", "fpv_to_global_map.FPVToGlobalMap.grid_sampler", "list", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fpv_to_global_map.FPVToGlobalMap.grid_sampler", "fpv_to_global_map.FPVToGlobalMap.prof.tick", "fpv_to_global_map.FPVToGlobalMap.prof.loop", "fpv_to_global_map.FPVToGlobalMap.prof.print_stats", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fpv_to_global_map.FPVToGlobalMap.grid_sampler", "torch.cat.size", "torch.cat.size", "torch.min", "torch.min", "torch.min", "torch.min", "visualization.Presenter().show_image", "fpv_to_global_map.FPVToGlobalMap.to.data[].numpy", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "tensor_store.keep_inputs", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.max", "torch.max", "torch.max", "torch.max", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.forward_fpv_features", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward", "(", "self", ",", "images", ",", "poses", ",", "sentence_embeds", ",", "tensor_store", "=", "None", ",", "show", "=", "\"\"", ",", "halfway", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# self.map_projection is implemented in numpy on CPU.", "\n", "# If we give it poses on the GPU, it will transfer them to the CPU, which causes a CUDA SYNC and waits for the", "\n", "# ResNet forward pass to complete. To make use of full GPU/CPU concurrency, we move the poses to the cpu first", "\n", "poses_cpu", "=", "poses", ".", "cpu", "(", ")", "\n", "\n", "features_fpv_vis_only", ",", "features_fpv_gnd_only", "=", "self", ".", "forward_fpv_features", "(", "images", ",", "sentence_embeds", ",", "tensor_store", ")", "\n", "\n", "# Halfway HAS to be True and not only truthy", "\n", "if", "halfway", "==", "True", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "# If we have grounding features, the overall features are a concatenation of grounded and non-grounded features", "\n", "", "if", "features_fpv_gnd_only", "is", "not", "None", ":", "\n", "            ", "features_fpv_all", "=", "torch", ".", "cat", "(", "[", "features_fpv_gnd_only", ",", "features_fpv_vis_only", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "features_fpv_all", "=", "features_fpv_vis_only", "\n", "\n", "# Project first-person view features on to the map in egocentric frame", "\n", "", "grid_maps_cpu", "=", "self", ".", "map_projection", "(", "poses_cpu", ")", "\n", "grid_maps", "=", "grid_maps_cpu", ".", "to", "(", "features_fpv_all", ".", "device", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"proj_map_and_features\"", ")", "\n", "features_r", "=", "self", ".", "grid_sampler", "(", "features_fpv_all", ",", "grid_maps", ")", "\n", "\n", "if", "DEBUG_WITH_IMG", ":", "\n", "            ", "img_w", "=", "self", ".", "grid_sampler", "(", "images", ",", "grid_maps", ")", "\n", "if", "tensor_store", "is", "not", "None", ":", "\n", "                ", "tensor_store", ".", "keep_inputs", "(", "\"images_w\"", ",", "img_w", ")", "\n", "#Presenter().show_image(images.data[0], \"fpv_raw\", torch=True, scale=2, waitkey=1)", "\n", "#Presenter().show_image(img_w.data[0], \"fpv_projected\", torch=True, scale=2, waitkey=1)", "\n", "\n", "# Obtain an ego-centric map mask of where we have new information", "\n", "", "", "ones_size", "=", "list", "(", "features_fpv_all", ".", "size", "(", ")", ")", "\n", "ones_size", "[", "1", "]", "=", "1", "\n", "tmp_ones", "=", "torch", ".", "ones", "(", "ones_size", ")", ".", "to", "(", "features_r", ".", "device", ")", "\n", "new_coverages", "=", "self", ".", "grid_sampler", "(", "tmp_ones", ",", "grid_maps", ")", "\n", "\n", "# Make sure that new_coverage is a 0/1 mask (grid_sampler applies bilinear interpolation)", "\n", "new_coverages", "=", "new_coverages", "-", "torch", ".", "min", "(", "new_coverages", ")", "\n", "new_coverages", "=", "new_coverages", "/", "(", "torch", ".", "max", "(", "new_coverages", ")", "+", "1e-18", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"gsample\"", ")", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "images", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", "+", "\"fpv_img\"", ",", "torch", "=", "True", ",", "scale", "=", "2", ",", "waitkey", "=", "1", ")", "\n", "\n", "grid_maps_np", "=", "grid_maps", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "grid_maps_np", ",", "show", "+", "\"_grid\"", ",", "torch", "=", "False", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "features_fpv_all", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", "+", "\"_preproj\"", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "images", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", "+", "\"_img\"", ",", "torch", "=", "True", ",", "scale", "=", "1", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "features_r", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", "+", "\"_projected\"", ",", "torch", "=", "True", ",", "scale", "=", "6", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "new_coverages", ".", "data", "[", "0", "]", ",", "show", "+", "\"_covg\"", ",", "torch", "=", "True", ",", "scale", "=", "6", ",", "waitkey", "=", "1", ")", "\n", "\n", "", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "features_r", ",", "new_coverages", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.identity_img_to_map.IdentityImgToMap.__init__": [[10, 18], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "learning.models.semantic_map.grid_sampler.GridSampler", "utils.simple_profiler.SimpleProfiler"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "source_map_size", ",", "world_size_px", ",", "\n", "world_size_px", ")", ":", "\n", "        ", "super", "(", "IdentityImgToMap", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", "=", "world_size_px", ")", "\n", "\n", "self", ".", "grid_sampler", "=", "GridSampler", "(", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.identity_img_to_map.IdentityImgToMap.cuda": [[19, 22], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "identity_img_to_map.IdentityImgToMap.grid_sampler.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "grid_sampler", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.identity_img_to_map.IdentityImgToMap.init_weights": [[23, 25], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.identity_img_to_map.IdentityImgToMap.reset": [[26, 28], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "IdentityImgToMap", ",", "self", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.identity_img_to_map.IdentityImgToMap.forward": [[29, 34], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "poses", ",", "sentence_embeds", ",", "parent", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "        ", "...", "\n", "# TODO: Implement this", "\n", "\n", "return", "images", ",", "new_coverages", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.__init__": [[18, 47], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "PinholeCameraProjectionModule", "learning.models.semantic_map.grid_sampler.GridSampler", "utils.simple_profiler.SimpleProfiler", "torch.nn.MaxPool2d", "learning.modules.img_to_img.img_to_features.ImgToFeatures", "learning.modules.rss.map_lang_semantic_filter.MapLangSemanticFilter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "source_map_size", ",", "world_size_px", ",", "\n", "world_size_m", ",", "img_w", ",", "img_h", ",", "\n", "embed_size", ",", "map_channels", ",", "gnd_channels", ",", "res_channels", "=", "32", ",", "\n", "lang_filter", "=", "False", ",", "img_dbg", "=", "False", ")", ":", "\n", "        ", "super", "(", "FPVToEgoMap", ",", "self", ")", ".", "__init__", "(", "source_map_size", ",", "world_size_px", ",", "world_size_m", "=", "world_size_m", ")", "\n", "\n", "self", ".", "image_debug", "=", "img_dbg", "\n", "self", ".", "use_lang_filter", "=", "lang_filter", "\n", "\n", "# Process images using a resnet to get a feature map", "\n", "if", "self", ".", "image_debug", ":", "\n", "            ", "self", ".", "img_to_features", "=", "nn", ".", "MaxPool2d", "(", "8", ")", "\n", "", "else", ":", "\n", "# Provide enough padding so that the map is scaled down by powers of 2.", "\n", "            ", "self", ".", "img_to_features", "=", "ImgToFeatures", "(", "res_channels", ",", "map_channels", ")", "\n", "\n", "", "if", "self", ".", "use_lang_filter", ":", "\n", "            ", "self", ".", "lang_filter", "=", "MapLangSemanticFilter", "(", "embed_size", ",", "map_channels", ",", "gnd_channels", ")", "\n", "\n", "# Project feature maps to the global frame", "\n", "", "self", ".", "map_projection", "=", "PinholeCameraProjectionModule", "(", "\n", "source_map_size", ",", "world_size_px", ",", "world_size_px", ",", "source_map_size", "/", "2", ",", "img_w", ",", "img_h", ")", "\n", "\n", "self", ".", "grid_sampler", "=", "GridSampler", "(", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "\n", "self", ".", "actual_images", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.cuda": [[48, 55], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "fpv_to_ego_map.FPVToEgoMap.map_projection.cuda", "fpv_to_ego_map.FPVToEgoMap.grid_sampler.cuda", "fpv_to_ego_map.FPVToEgoMap.img_to_features.cuda", "fpv_to_ego_map.FPVToEgoMap.lang_filter.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "map_projection", ".", "cuda", "(", "device", ")", "\n", "self", ".", "grid_sampler", ".", "cuda", "(", "device", ")", "\n", "self", ".", "img_to_features", ".", "cuda", "(", "device", ")", "\n", "if", "self", ".", "use_lang_filter", ":", "\n", "            ", "self", ".", "lang_filter", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.init_weights": [[56, 59], ["fpv_to_ego_map.FPVToEgoMap.img_to_features.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "image_debug", ":", "\n", "            ", "self", ".", "img_to_features", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.reset": [[60, 63], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "actual_images", "=", "None", "\n", "super", "(", "FPVToEgoMap", ",", "self", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.forward_fpv_features": [[64, 91], ["fpv_to_ego_map.FPVToEgoMap.img_to_features", "fpv_to_ego_map.FPVToEgoMap.prof.tick", "parent.keep_inputs", "fpv_to_ego_map.FPVToEgoMap.lang_filter.precompute_conv_weights", "fpv_to_ego_map.FPVToEgoMap.lang_filter", "fpv_to_ego_map.FPVToEgoMap.prof.tick", "parent.keep_inputs"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs"], ["", "def", "forward_fpv_features", "(", "self", ",", "images", ",", "sentence_embeds", ",", "parent", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute the first-person image features given the first-person images\n        If grounding loss is enabled, will also return sentence_embedding conditioned image features\n        :param images: images to compute features on\n        :param sentence_embeds: sentence embeddings for each image\n        :param parent:\n        :return: features_fpv_vis - the visual features extracted using the ResNet\n                 features_fpv_gnd - the grounded visual features obtained after applying a 1x1 language-conditioned conv\n        \"\"\"", "\n", "# Extract image features. If they've been precomputed ahead of time, just grab it by the provided index", "\n", "features_fpv_vis", "=", "self", ".", "img_to_features", "(", "images", ")", "\n", "\n", "if", "parent", "is", "not", "None", ":", "\n", "            ", "parent", ".", "keep_inputs", "(", "\"fpv_features\"", ",", "features_fpv_vis", ")", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"feat\"", ")", "\n", "\n", "# If required, pre-process image features by grounding them in language", "\n", "if", "self", ".", "use_lang_filter", ":", "\n", "            ", "self", ".", "lang_filter", ".", "precompute_conv_weights", "(", "sentence_embeds", ")", "\n", "features_gnd", "=", "self", ".", "lang_filter", "(", "features_fpv_vis", ")", "\n", "if", "parent", "is", "not", "None", ":", "\n", "                ", "parent", ".", "keep_inputs", "(", "\"fpv_features_g\"", ",", "features_gnd", ")", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"gnd\"", ")", "\n", "return", "features_fpv_vis", ",", "features_gnd", "\n", "\n", "", "return", "features_fpv_vis", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.forward": [[92, 130], ["fpv_to_ego_map.FPVToEgoMap.prof.tick", "fpv_to_ego_map.FPVToEgoMap.forward_fpv_features", "fpv_to_ego_map.FPVToEgoMap.map_projection", "fpv_to_ego_map.FPVToEgoMap.prof.tick", "fpv_to_ego_map.FPVToEgoMap.grid_sampler", "list", "learning.inputs.common.empty_float_tensor().fill_", "fpv_to_ego_map.FPVToEgoMap.grid_sampler", "fpv_to_ego_map.FPVToEgoMap.prof.tick", "fpv_to_ego_map.FPVToEgoMap.prof.loop", "fpv_to_ego_map.FPVToEgoMap.prof.print_stats", "torch.cat", "torch.cat.size", "torch.min", "torch.max", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "learning.inputs.common.empty_float_tensor", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.fpv_to_ego_map.FPVToEgoMap.forward_fpv_features", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "forward", "(", "self", ",", "images", ",", "poses", ",", "sentence_embeds", ",", "parent", "=", "None", ",", "show", "=", "\"\"", ")", ":", "\n", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "features_fpv_vis_only", ",", "features_fpv_gnd_only", "=", "self", ".", "forward_fpv_features", "(", "images", ",", "sentence_embeds", ",", "parent", ")", "\n", "\n", "# If we have grounding features, the overall features are a concatenation of grounded and non-grounded features", "\n", "if", "features_fpv_gnd_only", "is", "not", "None", ":", "\n", "            ", "features_fpv_all", "=", "torch", ".", "cat", "(", "[", "features_fpv_gnd_only", ",", "features_fpv_vis_only", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "features_fpv_all", "=", "features_fpv_vis_only", "\n", "\n", "# Project first-person view features on to the map in egocentric frame", "\n", "", "grid_maps", "=", "self", ".", "map_projection", "(", "poses", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"proj_map\"", ")", "\n", "features_r", "=", "self", ".", "grid_sampler", "(", "features_fpv_all", ",", "grid_maps", ")", "\n", "\n", "# Obtain an ego-centric map mask of where we have new information", "\n", "ones_size", "=", "list", "(", "features_fpv_all", ".", "size", "(", ")", ")", "\n", "ones_size", "[", "1", "]", "=", "1", "\n", "tmp_ones", "=", "empty_float_tensor", "(", "ones_size", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ".", "fill_", "(", "1.0", ")", "\n", "new_coverages", "=", "self", ".", "grid_sampler", "(", "tmp_ones", ",", "grid_maps", ")", "\n", "\n", "# Make sure that new_coverage is a 0/1 mask (grid_sampler applies bilinear interpolation)", "\n", "new_coverages", "=", "new_coverages", "-", "torch", ".", "min", "(", "new_coverages", ")", "\n", "new_coverages", "=", "new_coverages", "/", "torch", ".", "max", "(", "new_coverages", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"gsample\"", ")", "\n", "\n", "if", "show", "!=", "\"\"", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "images", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", "+", "\"_img\"", ",", "torch", "=", "True", ",", "scale", "=", "1", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "features_r", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "show", ",", "torch", "=", "True", ",", "scale", "=", "6", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "new_coverages", ".", "data", "[", "0", "]", ",", "show", "+", "\"_covg\"", ",", "torch", "=", "True", ",", "scale", "=", "6", ",", "waitkey", "=", "1", ")", "\n", "\n", "", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "10", ")", "\n", "\n", "return", "features_r", ",", "new_coverages", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_img.TopDownToEgoImg.__init__": [[11, 20], ["learning.modules.map_transformer_base.MapTransformerBase.__init__", "torch.nn.AvgPool2d", "learning.models.semantic_map.map_affine.MapAffine"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_in_size", "=", "256", ",", "world_size_px", "=", "32", ")", ":", "\n", "        ", "super", "(", "TopDownToEgoImg", ",", "self", ")", ".", "__init__", "(", "img_in_size", ",", "world_size_px", ",", "world_size_m", "=", "world_size_px", ")", "\n", "self", ".", "is_cuda", "=", "False", "\n", "self", ".", "cuda_device", "=", "None", "\n", "\n", "# Process images using a resnet to get a feature map", "\n", "self", ".", "feature_net", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "8", ")", "\n", "\n", "self", ".", "map_affine", "=", "MapAffine", "(", "source_map_size", "=", "img_in_size", ",", "world_size_px", "=", "world_size_px", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_img.TopDownToEgoImg.cuda": [[21, 27], ["learning.modules.map_transformer_base.MapTransformerBase.cuda", "top_down_to_ego_img.TopDownToEgoImg.map_affine.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "MapTransformerBase", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "is_cuda", "=", "True", "\n", "self", ".", "cuda_device", "=", "device", "\n", "self", ".", "map_affine", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_img.TopDownToEgoImg.init_weights": [[28, 30], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.img_to_map.top_down_to_ego_img.TopDownToEgoImg.forward": [[31, 43], ["top_down_to_ego_img.TopDownToEgoImg.set_map", "top_down_to_ego_img.TopDownToEgoImg.get_map", "visualization.Presenter", "visualization.Presenter.show_image", "visualization.Presenter.show_image", "top_down_to_ego_img.TopDownToEgoImg.feature_net", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_map", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_map", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "forward", "(", "self", ",", "image_g", ",", "pose", ")", ":", "\n", "\n", "        ", "self", ".", "set_map", "(", "image_g", ",", "None", ")", "\n", "image_r", ",", "_", "=", "self", ".", "get_map", "(", "pose", ")", "\n", "\n", "presenter", "=", "Presenter", "(", ")", "\n", "presenter", ".", "show_image", "(", "image_g", "[", "0", "]", ".", "data", ",", "\"img_g\"", ",", "torch", "=", "True", ",", "waitkey", "=", "False", ",", "scale", "=", "2", ")", "\n", "presenter", ".", "show_image", "(", "image_r", "[", "0", "]", ".", "data", ",", "\"img_r\"", ",", "torch", "=", "True", ",", "waitkey", "=", "100", ",", "scale", "=", "2", ")", "\n", "\n", "features_r", "=", "self", ".", "feature_net", "(", "image_r", ")", "\n", "coverage", "=", "torch", ".", "ones_like", "(", "features_r", ")", "\n", "return", "features_r", ",", "coverage", ",", "image_r", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.__init__": [[54, 223], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.params.get", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.auxiliary_losses.AuxiliaryLosses", "print", "learning.modules.img_to_map.fpv_to_global_map.FPVToGlobalMap", "learning.modules.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap", "learning.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.ratio_path_predictor.RatioPathPredictor", "print", "print", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.visitation_softmax.VisitationSoftmax", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.print_auxiliary_info", "parameters.parameter_server.get_current_parameters", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.root_params.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.add_auxiliary", "print", "utils.dict_tools.dict_merge", "str", "str", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "domain", "=", "\"sim\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage1_Bidomain_Original", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage1\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.domain}\"", ")", "\n", "#self.writer = DummySummaryWriter()", "\n", "\n", "self", ".", "root_params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "\n", "self", ".", "params", "=", "self", ".", "root_params", "[", "\"Stage1\"", "]", "\n", "self", ".", "use_aux", "=", "self", ".", "root_params", "[", "\"UseAux\"", "]", "\n", "self", ".", "aux_weights", "=", "self", ".", "root_params", "[", "\"AuxWeights\"", "]", "\n", "\n", "if", "self", ".", "params", ".", "get", "(", "\"weight_override\"", ")", ":", "\n", "            ", "aux_weights_override_name", "=", "\"AuxWeightsRealOverride\"", "if", "self", ".", "domain", "==", "\"real\"", "else", "\"AuxWeightsSimOverride\"", "\n", "aux_weights_override", "=", "self", ".", "root_params", ".", "get", "(", "aux_weights_override_name", ")", "\n", "if", "aux_weights_override", ":", "\n", "                ", "print", "(", "f\"Overriding auxiliary weights for domain: {self.domain}\"", ")", "\n", "self", ".", "aux_weights", "=", "dict_merge", "(", "self", ".", "aux_weights", ",", "aux_weights_override", ")", "\n", "\n", "", "", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "self", ".", "losses", "=", "AuxiliaryLosses", "(", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "self", ".", "do_perturb_maps", "=", "self", ".", "params", "[", "\"perturb_maps\"", "]", "\n", "print", "(", "\"Perturbing maps: \"", ",", "self", ".", "do_perturb_maps", ")", "\n", "\n", "# Path-pred FPV model definition", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "self", ".", "num_feature_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "# + params[\"relevance_channels\"]", "\n", "self", ".", "num_map_channels", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", "\n", "\n", "self", ".", "img_to_features_w", "=", "FPVToGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "res_channels", "=", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "map_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "img_w", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "img_h", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "cam_h_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "\n", "domain", "=", "domain", ",", "\n", "img_dbg", "=", "IMG_DBG", ")", "\n", "\n", "self", ".", "map_accumulator_w", "=", "LeakyIntegratorGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "add_init_pos_to_coverage", "=", "AddDroneInitPosToCoverage", "(", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "map_size_px", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ")", "\n", "\n", "# Pre-process the accumulated map to do language grounding if necessary - in the world reference frame", "\n", "self", ".", "map_processor_grounding", "=", "LangFilterMapProcessor", "(", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "spatial", "=", "False", ",", "cat_out", "=", "False", ")", "\n", "\n", "ratio_prior_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "\n", "\n", "# Process the global accumulated map", "\n", "self", ".", "path_predictor_lingunet", "=", "RatioPathPredictor", "(", "\n", "self", ".", "params", "[", "\"lingunet\"", "]", ",", "\n", "prior_channels_in", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "posterior_channels_in", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", ",", "\n", "dual_head", "=", "self", ".", "params", "[", "\"predict_confidence\"", "]", ",", "\n", "compute_prior", "=", "self", ".", "params", "[", "\"compute_prior\"", "]", ",", "\n", "use_prior", "=", "self", ".", "params", "[", "\"use_prior_only\"", "]", ",", "\n", "oob", "=", "self", ".", "params", "[", "\"clip_observability\"", "]", ")", "\n", "\n", "print", "(", "\"UNet Channels: \"", "+", "str", "(", "self", ".", "num_map_channels", ")", ")", "\n", "print", "(", "\"Feature Channels: \"", "+", "str", "(", "self", ".", "num_feature_channels", ")", ")", "\n", "\n", "# TODO:O Verify that config has the same randomization parameters (yaw, pos, etc)", "\n", "self", ".", "second_transform", "=", "self", ".", "do_perturb_maps", "or", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "\n", "\n", "# Sentence Embedding", "\n", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ",", "self", ".", "params", "[", "\"emb_dropout\"", "]", ")", "\n", "\n", "self", ".", "map_transform_local_to_local", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_global_to_local", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_local_to_global", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_s_to_p", "=", "self", ".", "map_transform_local_to_local", "\n", "self", ".", "map_transform_w_to_s", "=", "self", ".", "map_transform_global_to_local", "\n", "self", ".", "map_transform_w_to_r", "=", "self", ".", "map_transform_global_to_local", "\n", "self", ".", "map_transform_r_to_s", "=", "self", ".", "map_transform_local_to_local", "\n", "self", ".", "map_transform_r_to_w", "=", "self", ".", "map_transform_local_to_global", "\n", "self", ".", "map_transform_p_to_w", "=", "self", ".", "map_transform_local_to_global", "\n", "self", ".", "map_transform_p_to_r", "=", "self", ".", "map_transform_local_to_local", "\n", "\n", "# Batch select is used to drop and forget semantic maps at those timestaps that we're not planning in", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "# Since we only have path predictions for some timesteps (the ones not dropped above), we use this to fill", "\n", "# in the missing pieces by reorienting the past trajectory prediction into the frame of the current timestep", "\n", "self", ".", "map_batch_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "visitation_softmax", "=", "VisitationSoftmax", "(", ")", "\n", "\n", "#TODO:O Use CroppedMapToActionTriplet in Wrapper as Stage2", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# We add all auxiliaries that are necessary. The first argument is the auxiliary name, followed by parameters,", "\n", "# followed by variable number of names of inputs. ModuleWithAuxiliaries will automatically collect these inputs", "\n", "# that have been saved with keep_auxiliary_input() during execution", "\n", "if", "self", ".", "use_aux", "[", "\"class_features\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"class_features\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_indices\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_features\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"grounding_features\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_mentioned\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"class_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"class_map\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"S_W_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_indices_select\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"grounding_map\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"R_W_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_mentioned_select\"", ")", ")", "\n", "# CoRL model uses alignment-model groundings", "\n", "", "if", "self", ".", "use_aux", "[", "\"lang\"", "]", ":", "\n", "# one output for each landmark, 2 classes per output. This is for finetuning, so use the embedding that's gonna be fine tuned", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"lang\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux", "[", "\"regularize_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"regularize_map\"", ",", "\"l1\"", ",", "\"S_W_select\"", ")", ")", "\n", "\n", "", "lossfunc", "=", "self", ".", "params", "[", "\"path_loss_function\"", "]", "\n", "if", "self", ".", "params", "[", "\"clip_observability\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"visitation_dist\"", ",", "lossfunc", ",", "self", ".", "params", "[", "\"clip_observability\"", "]", ",", "\n", "\"log_v_dist_s_select\"", ",", "\"v_dist_s_ground_truth_select\"", ",", "\"SM_S_select\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"visitation_dist\"", ",", "lossfunc", ",", "self", ".", "params", "[", "\"clip_observability\"", "]", ",", "\n", "\"log_v_dist_s_select\"", ",", "\"v_dist_s_ground_truth_select\"", ",", "\"SM_S_select\"", ")", ")", "\n", "\n", "", "self", ".", "goal_good_criterion", "=", "GoalPredictionGoodCriterion", "(", "ok_distance", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "*", "0.1", ")", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "visible_goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "invisible_goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "visible_goal_frac_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n", "self", ".", "losses", ".", "print_auxiliary_info", "(", ")", "\n", "\n", "self", ".", "total_goals", "=", "0", "\n", "self", ".", "correct_goals", "=", "0", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "env_img", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "\n", "self", ".", "should_save_path_overlays", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.make_picklable": [[224, 226], ["utils.dummy_summary_writer.DummySummaryWriter"], "methods", ["None"], ["", "def", "make_picklable", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", "=", "DummySummaryWriter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.steal_cross_domain_modules": [[227, 234], ["None"], "methods", ["None"], ["", "def", "steal_cross_domain_modules", "(", "self", ",", "other_self", ")", ":", "\n", "        ", "self", ".", "iter", "=", "other_self", ".", "iter", "\n", "self", ".", "losses", "=", "other_self", ".", "losses", "\n", "self", ".", "sentence_embedding", "=", "other_self", ".", "sentence_embedding", "\n", "self", ".", "map_accumulator_w", "=", "other_self", ".", "map_accumulator_w", "\n", "self", ".", "map_processor_grounding", "=", "other_self", ".", "map_processor_grounding", "\n", "self", ".", "path_predictor_lingunet", "=", "other_self", ".", "path_predictor_lingunet", "\n", "#self.img_to_features_w = other_self.img_to_features_w", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.both_domain_parameters": [[236, 246], ["model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.parameters", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.img_to_features_w.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "both_domain_parameters", "(", "self", ",", "other_self", ")", ":", "\n", "# This function iterates and yields parameters from this module and the other module, but does not yield", "\n", "# shared parameters twice.", "\n", "# First yield all of the other module's parameters", "\n", "        ", "for", "p", "in", "other_self", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "# Then yield all the parameters from the this module that are not shared with the other one", "\n", "", "for", "p", "in", "self", ".", "img_to_features_w", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.get_iter": [[247, 249], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.inc_iter": [[250, 252], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.load_state_dict": [[253, 255], ["super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "super", "(", "PVN_Stage1_Bidomain_Original", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.init_weights": [[256, 262], ["model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.img_to_features_w.init_weights", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_accumulator_w.init_weights", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.sentence_embedding.init_weights", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_processor_grounding.init_weights", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.path_predictor_lingunet.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_grounding", ".", "init_weights", "(", ")", "\n", "self", ".", "path_predictor_lingunet", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.reset": [[263, 271], ["model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.reset", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.sentence_embedding.reset", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.img_to_features_w.reset", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_accumulator_w.reset", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_batch_fill_missing.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# TODO: This is error prone. Create a class StatefulModule, iterate submodules and reset all stateful modules", "\n", "        ", "self", ".", "tensor_store", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "reset", "(", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "reset", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.setEnvContext": [[272, 277], ["print", "data_io.env.load_env_img", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "self", ".", "env_img", "=", "env", ".", "load_env_img", "(", "self", ".", "env_id", ",", "256", ",", "256", ")", "\n", "self", ".", "env_img", "=", "self", ".", "env_img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.set_save_path_overlays": [[278, 280], ["None"], "methods", ["None"], ["", "def", "set_save_path_overlays", "(", "self", ",", "save_path_overlays", ")", ":", "\n", "        ", "self", ".", "should_save_path_overlays", "=", "save_path_overlays", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.print_metrics": [[283, 286], ["print", "print", "float"], "methods", ["None"], ["", "def", "print_metrics", "(", "self", ")", ":", "\n", "        ", "print", "(", "f\"Model {self.model_name}:{self.domain} metrics:\"", ")", "\n", "print", "(", "f\"   Goal accuracy: {float(self.correct_goals) / self.total_goals}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.goal_visible": [[287, 292], ["goal_pos[].long().detach", "bool", "masks.detach", "goal_pos[].long"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "goal_visible", "(", "self", ",", "masks", ",", "goal_pos", ")", ":", "\n", "        ", "goal_mask", "=", "masks", ".", "detach", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "goal_pos", "=", "goal_pos", "[", "0", "]", ".", "long", "(", ")", ".", "detach", "(", ")", "\n", "visible", "=", "bool", "(", "(", "goal_mask", "[", "goal_pos", "[", "0", "]", ",", "goal_pos", "[", "1", "]", "]", ">", "0.5", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "return", "visible", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.start_sequence": [[294, 298], ["model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cam_poses_from_states": [[299, 304], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.forward": [[305, 471], ["model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cam_poses_from_states", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.img_to_features_w", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.params.get", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_accumulator_w", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.batch_select", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_transform_w_to_s", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_transform_w_to_s", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.path_predictor_lingunet", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_transform_p_to_w", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_transform_p_to_r", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "tuple", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.sentence_embedding.get", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.add_init_pos_to_coverage.get_init_pos_masks", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_transform_r_to_w", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.add_init_pos_to_coverage", "len", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_processor_grounding", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_transform_s_to_p", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "range", "NotImplementedError", "return_list.append", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.sentence_embedding", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.sentence_embedding", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.get_iter", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "visualization.Presenter", "S_W_select.detach().cpu", "visualization.Presenter", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach().cpu", "visualization.Presenter", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach().cpu", "visualization.Presenter", "RS_P_select.detach().cpu", "S_W_select.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach", "RS_P_select.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d."], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.get_init_pos_masks", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "\n", "plan", "=", "None", ",", "noisy_start_poses", "=", "None", ",", "start_poses", "=", "None", ",", "firstseg", "=", "None", ",", "select_only", "=", "True", ",", "halfway", "=", "False", ",", "grad_noise", "=", "False", ",", "rl", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param plan: list of B booleans indicating True for timesteps where we do planning and False otherwise\n        :param noisy_start_poses: list of noisy start poses (for data-augmentation). These define the path-prediction frame at training time\n        :param start_poses: list of drone start poses (these should be equal in practice)\n        :param firstseg: list of booleans indicating True if a new segment starts at that timestep\n        :param select_only: boolean indicating whether to only compute visitation distributions for planning timesteps (default True)\n        :param rl: boolean indicating if we're doing reinforcement learning. If yes, output more than the visitation distribution\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "g_poses", "=", "None", "# None pose is a placeholder for the canonical global pose.", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"fpv\"", ",", "images", ")", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "# TODO: There's an assumption here that there's only a single instruction in the batch and it doesn't change", "\n", "# UNCOMMENT THE BELOW LINE TO REVERT BACK TO GENERAL CASE OF SEPARATE INSTRUCTION PER STEP", "\n", "            ", "if", "self", ".", "params", "[", "\"ignore_instruction\"", "]", ":", "\n", "# If we're ignoring instructions, just feed in an instruction that consists of a single zero-token", "\n", "                ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "torch", ".", "zeros_like", "(", "instructions", "[", "0", ":", "1", ",", "0", ":", "1", "]", ")", ",", "torch", ".", "ones_like", "(", "instr_lengths", "[", "0", ":", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", "[", "0", ":", "1", "]", ",", "instr_lengths", "[", "0", ":", "1", "]", ")", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "F_W", ",", "M_W", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ".", "tensor_store", ",", "show", "=", "\"\"", ",", "halfway", "=", "halfway", ")", "\n", "\n", "# For training the critic, this is as far as we need to poceed with the computation.", "\n", "# self.img_to_features_w has stored computed feature maps inside the tensor store, which will then be retrieved by the critic", "\n", "if", "halfway", "==", "True", ":", "# Warning: halfway must be True not truthy", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"F_w\"", ",", "F_W", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"M_w\"", ",", "M_W", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "\n", "# Accumulate the egocentric features in a global map", "\n", "reset_mask", "=", "firstseg", "if", "self", ".", "params", "[", "\"clear_history\"", "]", "else", "None", "\n", "\n", "# Consider the space very near the drone and right under it as observed - draw ones on the observability mask", "\n", "# If we treat that space as unobserved, then there's going to be a gap in the visitation distribution, which", "\n", "# makes training with RL more difficult, as there is no reward feedback if the drone doesn't cross that gap.", "\n", "if", "self", ".", "params", ".", "get", "(", "\"cover_init_pos\"", ",", "False", ")", ":", "\n", "            ", "StartMasks_R", "=", "self", ".", "add_init_pos_to_coverage", ".", "get_init_pos_masks", "(", "M_W", ".", "shape", "[", "0", "]", ",", "M_W", ".", "device", ")", "\n", "StartMasks_W", ",", "_", "=", "self", ".", "map_transform_r_to_w", "(", "StartMasks_R", ",", "cam_poses", ",", "None", ")", "\n", "M_W", "=", "self", ".", "add_init_pos_to_coverage", "(", "M_W", ",", "StartMasks_W", ")", "\n", "\n", "", "S_W", ",", "SM_W", "=", "self", ".", "map_accumulator_w", "(", "F_W", ",", "M_W", ",", "reset_mask", "=", "reset_mask", ",", "show", "=", "\"acc\"", "if", "IMG_DBG", "else", "\"\"", ")", "\n", "S_W_poses", "=", "g_poses", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_accumulate\"", ")", "\n", "\n", "# If we're training Stage 2 with imitation learning from ground truth visitation distributions, we want to", "\n", "# compute observability masks with the same code that's used in Stage 1 to avoid mistakes.", "\n", "if", "halfway", "==", "\"observability\"", ":", "\n", "            ", "map_uncoverage_w", "=", "1", "-", "SM_W", "\n", "return", "map_uncoverage_w", "\n", "\n", "# Throw away those timesteps that don't correspond to planning timesteps", "\n", "", "S_W_select", ",", "SM_W_select", ",", "S_W_poses_select", ",", "cam_poses_select", ",", "noisy_start_poses_select", ",", "start_poses_select", ",", "sent_embeddings_select", "=", "self", ".", "batch_select", "(", "S_W", ",", "SM_W", ",", "S_W_poses", ",", "cam_poses", ",", "noisy_start_poses", ",", "start_poses", ",", "sent_embeddings", ",", "plan", ")", "\n", "\n", "#maps_m_prior_select, maps_m_posterior_select = None, None", "\n", "\n", "# Only process the maps on plannieng timesteps", "\n", "if", "len", "(", "S_W_select", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"S_W_select\"", ",", "S_W_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"batch_select\"", ")", "\n", "\n", "# Process the map via the two map_procesors", "\n", "# Do grounding of objects in the map chosen to do so", "\n", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", ":", "\n", "            ", "R_W_select", ",", "RS_W_poses_select", "=", "self", ".", "map_processor_grounding", "(", "S_W_select", ",", "sent_embeddings_select", ",", "S_W_poses_select", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"R_W_select\"", ",", "R_W_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_gnd\"", ")", "\n", "# Concatenate grounding map and semantic map along channel dimension", "\n", "RS_W_select", "=", "torch", ".", "cat", "(", "[", "S_W_select", ",", "R_W_select", "]", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "RS_W_select", "=", "S_W_select", "\n", "RS_W_poses_select", "=", "S_W_poses_select", "\n", "\n", "", "s_poses_select", "=", "start_poses_select", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "else", "cam_poses_select", "\n", "RS_S_select", ",", "RS_S_poses_select", "=", "self", ".", "map_transform_w_to_s", "(", "RS_W_select", ",", "RS_W_poses_select", ",", "s_poses_select", ")", "\n", "SM_S_select", ",", "SM_S_poses_select", "=", "self", ".", "map_transform_w_to_s", "(", "SM_W_select", ",", "S_W_poses_select", ",", "s_poses_select", ")", "\n", "\n", "assert", "SM_S_poses_select", "==", "RS_S_poses_select", ",", "\"Masks and maps should have the same pose in start frame\"", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"RS_S_select\"", ",", "RS_S_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"SM_S_select\"", ",", "SM_S_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"transform_w_to_s\"", ")", "\n", "\n", "# Data augmentation for trajectory prediction", "\n", "map_poses_clean_select", "=", "None", "\n", "# TODO: Figure out if we can just swap out start poses for noisy poses and get rid of separate noisy poses", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "            ", "assert", "noisy_start_poses_select", "is", "not", "None", ",", "\"Noisy poses must be provided if we're perturbing maps\"", "\n", "RS_P_select", ",", "RS_P_poses_select", "=", "self", ".", "map_transform_s_to_p", "(", "RS_S_select", ",", "RS_S_poses_select", ",", "noisy_start_poses_select", ")", "\n", "", "else", ":", "\n", "            ", "RS_P_select", ",", "RS_P_poses_select", "=", "RS_S_select", ",", "RS_S_poses_select", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"RS_perturbed_select\"", ",", "RS_P_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_perturb\"", ")", "\n", "\n", "sent_embeddings_pp", "=", "sent_embeddings_select", "\n", "\n", "# Run lingunet on the map to predict visitation distribution scores (pre-softmax)", "\n", "# ---------", "\n", "log_v_dist_p_select", ",", "v_dist_p_poses_select", "=", "self", ".", "path_predictor_lingunet", "(", "RS_P_select", ",", "sent_embeddings_pp", ",", "RS_P_poses_select", ",", "tensor_store", "=", "self", ".", "tensor_store", ")", "\n", "# ---------", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"pathpred\"", ")", "\n", "\n", "# TODO: Shouldn't we be transforming probability distributions instead of scores? Otherwise OOB space will have weird values", "\n", "# Transform distributions back to world reference frame and keep them (these are the model outputs)", "\n", "both_inner_w", ",", "v_dist_w_poses_select", "=", "self", ".", "map_transform_p_to_w", "(", "log_v_dist_p_select", ".", "inner_distribution", ",", "v_dist_p_poses_select", ",", "None", ")", "\n", "log_v_dist_w_select", "=", "Partial2DDistribution", "(", "both_inner_w", ",", "log_v_dist_p_select", ".", "outer_prob_mass", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_v_dist_w_select\"", ",", "log_v_dist_w_select", ")", "\n", "\n", "# Transform distributions back to start reference frame and keep them (for auxiliary objective)", "\n", "both_inner_s", ",", "v_dist_s_poses_select", "=", "self", ".", "map_transform_p_to_r", "(", "log_v_dist_p_select", ".", "inner_distribution", ",", "v_dist_p_poses_select", ",", "start_poses_select", ")", "\n", "log_v_dist_s_select", "=", "Partial2DDistribution", "(", "both_inner_s", ",", "log_v_dist_p_select", ".", "outer_prob_mass", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_v_dist_s_select\"", ",", "log_v_dist_s_select", ")", "\n", "\n", "# prime number will mean that it will alternate between sim and real", "\n", "if", "self", ".", "get_iter", "(", ")", "%", "23", "==", "0", ":", "\n", "            ", "lsfm", "=", "SpatialSoftmax2d", "(", ")", "\n", "for", "i", "in", "range", "(", "S_W_select", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "S_W_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", ",", "0", ":", "3", "]", ",", "f\"{self.domain}_s_w_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "lsfm", "(", "log_v_dist_s_select", ".", "inner_distribution", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", "]", ",", "f\"{self.domain}_v_dist_s_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "lsfm", "(", "log_v_dist_p_select", ".", "inner_distribution", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", "]", ",", "f\"{self.domain}_v_dist_p_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "RS_P_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", ",", "0", ":", "3", "]", ",", "f\"{self.domain}_rs_p_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "break", "\n", "\n", "", "", "self", ".", "prof", ".", "tick", "(", "\"transform_back\"", ")", "\n", "\n", "# If we're predicting the trajectory only on some timesteps, then for each timestep k, use the map from", "\n", "# timestep k if predicting on timestep k. otherwise use the map from timestep j - the last timestep", "\n", "# that had a trajectory prediction, rotated in the frame of timestep k.", "\n", "if", "select_only", ":", "\n", "# If we're just pre-training the trajectory prediction, don't waste time on generating the missing maps", "\n", "            ", "log_v_dist_w", "=", "log_v_dist_w_select", "\n", "v_dist_w_poses", "=", "v_dist_w_poses_select", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"select_only must be True\"", ")", "\n", "\n", "", "return_list", "=", "[", "log_v_dist_w", ",", "v_dist_w_poses", "]", "\n", "if", "rl", ":", "\n", "            ", "internals_for_rl", "=", "{", "\"map_coverage_w\"", ":", "SM_W", ",", "\"map_uncoverage_w\"", ":", "1", "-", "SM_W", "}", "\n", "return_list", ".", "append", "(", "internals_for_rl", ")", "\n", "\n", "", "return", "tuple", "(", "return_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.maybe_cuda": [[472, 474], ["tensor.to", "next", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cuda_var": [[475, 477], ["tensor.to", "next", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.unbatch": [[478, 558], ["model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.maybe_cuda", "len", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.maybe_cuda", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.maybe_cuda", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.set_flag", "learning.inputs.pose.get_noisy_poses_torch", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.maybe_cuda", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.batch_select.one", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.map_transform_w_to_s", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.img_to_features_w.img_to_features.get_downscale_factor", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cuda_var", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cuda_var", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.keep_inputs", "start_poses.numpy", "transformations.pos_m_to_px", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "goal_pos_map_m.numpy", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cuda_var", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cuda_var", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cuda_var", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.cuda_var", "enumerate", "enumerate", "enumerate", "enumerate", "transformations.pos_m_to_px", "s.long", "p.numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.set_flag", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_torch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.get_downscale_factor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy"], ["", "def", "unbatch", "(", "self", ",", "batch", ",", "halfway", "=", "False", ")", ":", "\n", "# Inputs", "\n", "        ", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", "[", "0", "]", ")", "\n", "seq_len", "=", "len", "(", "images", ")", "\n", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", "[", "0", "]", "[", ":", "seq_len", "]", ")", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "[", "0", "]", "[", ":", "seq_len", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", "[", "0", "]", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "\n", "            ", "plan_mask", "=", "batch", "[", "\"plan_mask\"", "]", "[", "0", "]", "# True for every timestep that we do visitation prediction", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "[", "0", "]", "# True for every timestep that is a new instruction segment", "\n", "\n", "# Labels (including for auxiliary losses)", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "[", "0", "]", "# All object 2D coordinates in the first-person image", "\n", "lm_pos_map_m", "=", "batch", "[", "\"lm_pos_map\"", "]", "[", "0", "]", "# All object 2D coordinates in the semantic map", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "[", "0", "]", "# All object class indices", "\n", "goal_pos_map_m", "=", "batch", "[", "\"goal_loc\"", "]", "[", "0", "]", "# Goal location in the world in meters_and_metrics", "\n", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "[", "0", "]", "# 1/0 labels whether object was mentioned/not mentioned in template instruction", "\n", "# TODO: We're taking the FIRST label here. SINGLE SEGMENT ASSUMPTION", "\n", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "[", "0", "]", "[", "0", "]", "# integer labes as to which object was mentioned", "\n", "start_poses", "=", "batch", "[", "\"start_poses\"", "]", "[", "0", "]", "\n", "noisy_start_poses", "=", "get_noisy_poses_torch", "(", "start_poses", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"pos_variance\"", "]", ",", "self", ".", "params", "[", "\"rot_variance\"", "]", ",", "\n", "cuda", "=", "False", ",", "cuda_device", "=", "None", ")", "\n", "\n", "# Ground truth visitation distributions (in start and global frames)", "\n", "v_dist_w_ground_truth_select", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"traj_ground_truth\"", "]", "[", "0", "]", ")", "\n", "start_poses_select", "=", "self", ".", "batch_select", ".", "one", "(", "start_poses", ",", "plan_mask", ",", "v_dist_w_ground_truth_select", ".", "device", ")", "\n", "v_dist_s_ground_truth_select", ",", "poses_s", "=", "self", ".", "map_transform_w_to_s", "(", "v_dist_w_ground_truth_select", ",", "None", ",", "start_poses_select", ")", "\n", "#self.tensor_store.keep_inputs(\"v_dist_w_ground_truth_select\", v_dist_w_ground_truth_select)", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"v_dist_s_ground_truth_select\"", ",", "v_dist_s_ground_truth_select", ")", "\n", "#Presenter().show_image(v_dist_s_ground_truth_select.detach().cpu()[0,0], \"v_dist_s_ground_truth_select\", waitkey=1, scale=4)", "\n", "#Presenter().show_image(v_dist_w_ground_truth_select.detach().cpu()[0,0], \"v_dist_w_ground_truth_select\", waitkey=1, scale=4)", "\n", "\n", "lm_pos_map_px", "=", "[", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "p", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "lm_pos_map_m", "]", "\n", "goal_pos_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "goal_pos_map_m", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "\n", "resnet_factor", "=", "self", ".", "img_to_features_w", ".", "img_to_features", ".", "get_downscale_factor", "(", ")", "\n", "lm_pos_fpv", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "resnet_factor", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_fpv", "]", "\n", "lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_indices", "]", "\n", "lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_mentioned", "]", "\n", "lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "lang_lm_mentioned", ")", "\n", "lm_pos_map_px", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_map_px", "]", "\n", "goal_pos_map_px", "=", "self", ".", "cuda_var", "(", "goal_pos_map_px", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_fpv\"", ",", "lm_pos_fpv", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "lm_pos_map_px", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "lm_indices", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "lm_mentioned", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "lang_lm_mentioned", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map\"", ",", "goal_pos_map_px", ")", "\n", "\n", "lm_pos_map_select", "=", "[", "lm_pos", "for", "i", ",", "lm_pos", "in", "enumerate", "(", "lm_pos_map_px", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "lm_indices_select", "=", "[", "lm_idx", "for", "i", ",", "lm_idx", "in", "enumerate", "(", "lm_indices", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "lm_mentioned_select", "=", "[", "lm_m", "for", "i", ",", "lm_m", "in", "enumerate", "(", "lm_mentioned", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "goal_pos_map_select", "=", "[", "pos", "for", "i", ",", "pos", "in", "enumerate", "(", "goal_pos_map_px", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map_select\"", ",", "lm_pos_map_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices_select\"", ",", "lm_indices_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned_select\"", ",", "lm_mentioned_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map_select\"", ",", "goal_pos_map_select", ")", "\n", "\n", "# We won't need this extra information", "\n", "", "else", ":", "\n", "            ", "noisy_poses", ",", "start_poses", ",", "noisy_start_poses", "=", "None", ",", "None", ",", "None", "\n", "plan_mask", ",", "firstseg_mask", "=", "None", ",", "None", "\n", "\n", "", "metadata", "=", "batch", "[", "\"md\"", "]", "[", "0", "]", "[", "0", "]", "\n", "env_id", "=", "metadata", "[", "\"env_id\"", "]", "\n", "self", ".", "tensor_store", ".", "set_flag", "(", "\"env_id\"", ",", "env_id", ")", "\n", "\n", "return", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "plan_mask", ",", "firstseg_mask", ",", "start_poses", ",", "noisy_start_poses", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.sup_loss_on_batch": [[560, 642], ["model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.reset", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.unbatch", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.calculate_aux_loss", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.losses.combine_losses", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.get_iter", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.writer.add_dict", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.writer.add_dict", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.writer.add_dict", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.inc_iter", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.loop", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.print_stats", "print", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.save_path_overlays", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.get_inputs_batch", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.goal_good_criterion", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.goal_acc_meter.put", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.goal_visible", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.visible_goal_frac_meter.put", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.prof.tick", "learning.meters_and_metrics.meter_server.get_current_meters", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.writer.add_scalar", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.writer.add_scalar", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.writer.add_scalar", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.writer.add_scalar", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.get_inputs_batch", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.tensor_store.get_inputs_batch", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.visible_goal_acc_meter.put", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.invisible_goal_acc_meter.put", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.goal_acc_meter.get", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.visible_goal_acc_meter.get", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.invisible_goal_acc_meter.get", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.visible_goal_frac_meter.get", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "next", "model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.combine_losses", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.save_path_overlays", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_visible", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ",", "halfway", "=", "False", ",", "grad_noise", "=", "False", ",", "disable_losses", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "zero", "=", "torch", ".", "zeros", "(", "[", "1", "]", ")", ".", "float", "(", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "return", "zero", ",", "self", ".", "tensor_store", "\n", "\n", "", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "plan_mask", ",", "firstseg_mask", ",", "start_poses", ",", "noisy_start_poses", ",", "metadata", "=", "self", ".", "unbatch", "(", "batch", ",", "halfway", "=", "halfway", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"unbatch_inputs\"", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "_", "=", "self", "(", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "\n", "plan", "=", "plan_mask", ",", "firstseg", "=", "firstseg_mask", ",", "\n", "noisy_start_poses", "=", "start_poses", "if", "eval", "else", "noisy_start_poses", ",", "\n", "start_poses", "=", "start_poses", ",", "\n", "select_only", "=", "True", ",", "\n", "halfway", "=", "halfway", ",", "\n", "grad_noise", "=", "grad_noise", ")", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "if", "self", ".", "should_save_path_overlays", ":", "\n", "            ", "self", ".", "save_path_overlays", "(", "metadata", ")", "\n", "\n", "# If we run the model halfway, we only need to calculate features needed for the wasserstein loss", "\n", "# If we want to include more features in wasserstein critic, have to run the forward pass a bit further", "\n", "", "if", "halfway", "and", "not", "halfway", "==", "\"v2\"", ":", "\n", "            ", "return", "None", ",", "self", ".", "tensor_store", "\n", "\n", "# The returned values are not used here - they're kept in the tensor store which is used as an input to a loss", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "# Calculate goal-prediction accuracy:", "\n", "            ", "goal_pos", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"goal_pos_map\"", ",", "cat_not_stack", "=", "True", ")", "\n", "success_goal", "=", "self", ".", "goal_good_criterion", "(", "\n", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"log_v_dist_w_select\"", ",", "cat_not_stack", "=", "True", ")", ",", "\n", "goal_pos", "\n", ")", "\n", "acc", "=", "1.0", "if", "success_goal", "else", "0.0", "\n", "self", ".", "goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "goal_visible", "=", "self", ".", "goal_visible", "(", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"M_w\"", ",", "cat_not_stack", "=", "True", ")", ",", "goal_pos", ")", "\n", "if", "goal_visible", ":", "\n", "                ", "self", ".", "visible_goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "invisible_goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "", "self", ".", "visible_goal_frac_meter", ".", "put", "(", "1.0", "if", "goal_visible", "else", "0.0", ")", "\n", "\n", "self", ".", "correct_goals", "+=", "acc", "\n", "self", ".", "total_goals", "+=", "1", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"goal_acc\"", ")", "\n", "\n", "", "if", "halfway", "==", "\"v2\"", ":", "\n", "            ", "disable_losses", "=", "[", "\"visitation_dist\"", ",", "\"lang\"", "]", "\n", "\n", "", "losses", ",", "metrics", "=", "self", ".", "losses", ".", "calculate_aux_loss", "(", "tensor_store", "=", "self", ".", "tensor_store", ",", "reduce_average", "=", "True", ",", "disable_losses", "=", "disable_losses", ")", "\n", "loss", "=", "self", ".", "losses", ".", "combine_losses", "(", "losses", ",", "self", ".", "aux_weights", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"calc_losses\"", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "iteration", "=", "self", ".", "get_iter", "(", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "losses", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "metrics", ",", "iteration", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/goal_accuracy\"", ",", "self", ".", "goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/visible_goal_accuracy\"", ",", "self", ".", "visible_goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/invisible_goal_accuracy\"", ",", "self", ".", "invisible_goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/visible_goal_fraction\"", ",", "self", ".", "visible_goal_frac_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "\n", "", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "loss", ",", "self", ".", "tensor_store", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain_originalrec.PVN_Stage1_Bidomain_Original.get_dataset": [[643, 681], ["learning.datasets.segment_dataset_simple.SegmentDataset", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "print", "data_sources.append", "print", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "domain", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ",", "halfway_only", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "        ", "data_sources", "=", "[", "]", "\n", "# If we're running auxiliary objectives, we need to include the data sources for the auxiliary labels", "\n", "#if self.use_aux_class_features or self.use_aux_class_on_map or self.use_aux_grounding_features or self.use_aux_grounding_on_map:", "\n", "#if self.use_aux_goal_on_map:", "\n", "if", "not", "halfway_only", ":", "\n", "            ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_GOAL_POS", ")", "\n", "\n", "# Adding these in this order will compute poses with added noise and compute trajectory ground truth", "\n", "# in the reference frame of these noisy poses", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_START_POSES", ")", "\n", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "                ", "print", "(", "\"PERTURBING MAPS!\"", ")", "\n", "# TODO: The noisy poses from the provider are not actually used!! Those should replace states instead!", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "# TODO: Think this through. Perhaps we actually want dynamic ground truth given a noisy start position", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"NOT Perturbing Maps!\"", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ")", "\n", "\n", "", "", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANDMARKS_MENTIONED", ")", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"templates\"", "]", "\n", "if", "templates", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "", "", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "domain", "=", "domain", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.__init__": [[57, 227], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.params.get", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.auxiliary_losses.AuxiliaryLosses", "print", "learning.modules.img_to_map.fpv_to_global_map.FPVToGlobalMap", "learning.modules.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap", "learning.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.ratio_path_predictor.RatioPathPredictor", "print", "print", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.visitation_softmax.VisitationSoftmax", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.print_auxiliary_info", "parameters.parameter_server.get_current_parameters", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.root_params.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "print", "utils.dict_tools.dict_merge", "str", "str", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "domain", "=", "\"sim\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage1_Bidomain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage1\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.domain}\"", ")", "\n", "#self.writer = DummySummaryWriter()", "\n", "\n", "self", ".", "root_params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "\n", "self", ".", "params", "=", "self", ".", "root_params", "[", "\"Stage1\"", "]", "\n", "self", ".", "use_aux", "=", "self", ".", "root_params", "[", "\"UseAux\"", "]", "\n", "self", ".", "aux_weights", "=", "self", ".", "root_params", "[", "\"AuxWeights\"", "]", "\n", "\n", "if", "self", ".", "params", ".", "get", "(", "\"weight_override\"", ")", ":", "\n", "            ", "aux_weights_override_name", "=", "\"AuxWeightsRealOverride\"", "if", "self", ".", "domain", "==", "\"real\"", "else", "\"AuxWeightsSimOverride\"", "\n", "aux_weights_override", "=", "self", ".", "root_params", ".", "get", "(", "aux_weights_override_name", ")", "\n", "if", "aux_weights_override", ":", "\n", "                ", "print", "(", "f\"Overriding auxiliary weights for domain: {self.domain}\"", ")", "\n", "self", ".", "aux_weights", "=", "dict_merge", "(", "self", ".", "aux_weights", ",", "aux_weights_override", ")", "\n", "\n", "", "", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "self", ".", "losses", "=", "AuxiliaryLosses", "(", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "self", ".", "do_perturb_maps", "=", "self", ".", "params", "[", "\"perturb_maps\"", "]", "\n", "print", "(", "\"Perturbing maps: \"", ",", "self", ".", "do_perturb_maps", ")", "\n", "\n", "# Path-pred FPV model definition", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "self", ".", "num_feature_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "# + params[\"relevance_channels\"]", "\n", "# TODO: Fix this for if we don't have grounding", "\n", "self", ".", "num_map_channels", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", "\n", "\n", "self", ".", "img_to_features_w", "=", "FPVToGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "res_channels", "=", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "map_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "img_w", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "img_h", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "cam_h_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "\n", "domain", "=", "domain", ",", "\n", "img_dbg", "=", "IMG_DBG", ")", "\n", "\n", "self", ".", "map_accumulator_w", "=", "LeakyIntegratorGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "add_init_pos_to_coverage", "=", "AddDroneInitPosToCoverage", "(", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "map_size_px", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ")", "\n", "\n", "# Pre-process the accumulated map to do language grounding if necessary - in the world reference frame", "\n", "#if self.use_aux[\"grounding_map\"] and not self.use_aux[\"grounding_features\"]:", "\n", "self", ".", "map_processor_grounding", "=", "LangFilterMapProcessor", "(", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "spatial", "=", "False", ",", "cat_out", "=", "False", ")", "\n", "\n", "ratio_prior_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "\n", "\n", "# Process the global accumulated map", "\n", "self", ".", "path_predictor_lingunet", "=", "RatioPathPredictor", "(", "\n", "self", ".", "params", "[", "\"lingunet\"", "]", ",", "\n", "prior_channels_in", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "posterior_channels_in", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", ",", "\n", "dual_head", "=", "self", ".", "params", "[", "\"predict_confidence\"", "]", ",", "\n", "compute_prior", "=", "self", ".", "params", "[", "\"compute_prior\"", "]", ",", "\n", "use_prior", "=", "self", ".", "params", "[", "\"use_prior_only\"", "]", ",", "\n", "oob", "=", "self", ".", "params", "[", "\"clip_observability\"", "]", ")", "\n", "\n", "print", "(", "\"UNet Channels: \"", "+", "str", "(", "self", ".", "num_map_channels", ")", ")", "\n", "print", "(", "\"Feature Channels: \"", "+", "str", "(", "self", ".", "num_feature_channels", ")", ")", "\n", "\n", "self", ".", "second_transform", "=", "self", ".", "do_perturb_maps", "or", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "\n", "\n", "# Sentence Embedding", "\n", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ",", "self", ".", "params", "[", "\"emb_dropout\"", "]", ")", "\n", "\n", "self", ".", "map_transform_local_to_local", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_global_to_local", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_local_to_global", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_s_to_p", "=", "self", ".", "map_transform_local_to_local", "\n", "self", ".", "map_transform_w_to_s", "=", "self", ".", "map_transform_global_to_local", "\n", "self", ".", "map_transform_w_to_r", "=", "self", ".", "map_transform_global_to_local", "\n", "self", ".", "map_transform_r_to_s", "=", "self", ".", "map_transform_local_to_local", "\n", "self", ".", "map_transform_r_to_w", "=", "self", ".", "map_transform_local_to_global", "\n", "self", ".", "map_transform_p_to_w", "=", "self", ".", "map_transform_local_to_global", "\n", "self", ".", "map_transform_p_to_r", "=", "self", ".", "map_transform_local_to_local", "\n", "\n", "# Batch select is used to drop and forget semantic maps at those timestaps that we're not planning in", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "# Since we only have path predictions for some timesteps (the ones not dropped above), we use this to fill", "\n", "# in the missing pieces by reorienting the past trajectory prediction into the frame of the current timestep", "\n", "self", ".", "map_batch_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "visitation_softmax", "=", "VisitationSoftmax", "(", ")", "\n", "\n", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# We add all auxiliaries that are necessary. The first argument is the auxiliary name, followed by parameters,", "\n", "# followed by variable number of names of inputs. ModuleWithAuxiliaries will automatically collect these inputs", "\n", "# that have been saved with keep_auxiliary_input() during execution", "\n", "if", "self", ".", "use_aux", "[", "\"class_features\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"class_features\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_indices\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_features\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"grounding_features\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_mentioned\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"class_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"class_map\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"S_W_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_indices_select\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"grounding_map\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"R_W_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_mentioned_select\"", ")", ")", "\n", "# CoRL model uses alignment-model groundings", "\n", "", "if", "self", ".", "use_aux", "[", "\"lang\"", "]", ":", "\n", "# one output for each landmark, 2 classes per output. This is for finetuning, so use the embedding that's gonna be fine tuned", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"lang\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux", "[", "\"regularize_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"regularize_map\"", ",", "\"l1\"", ",", "\"S_W_select\"", ")", ")", "\n", "\n", "", "lossfunc", "=", "self", ".", "params", "[", "\"path_loss_function\"", "]", "\n", "if", "self", ".", "params", "[", "\"clip_observability\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"visitation_dist\"", ",", "lossfunc", ",", "self", ".", "params", "[", "\"clip_observability\"", "]", ",", "\n", "\"log_v_dist_s_select\"", ",", "\"v_dist_s_ground_truth_select\"", ",", "\"SM_S_select\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"visitation_dist\"", ",", "lossfunc", ",", "self", ".", "params", "[", "\"clip_observability\"", "]", ",", "\n", "\"log_v_dist_s_select\"", ",", "\"v_dist_s_ground_truth_select\"", ",", "\"SM_S_select\"", ")", ")", "\n", "\n", "", "self", ".", "goal_good_criterion", "=", "GoalPredictionGoodCriterion", "(", "ok_distance", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "*", "0.1", ")", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "visible_goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "invisible_goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "visible_goal_frac_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n", "self", ".", "losses", ".", "print_auxiliary_info", "(", ")", "\n", "\n", "self", ".", "total_goals", "=", "0", "\n", "self", ".", "correct_goals", "=", "0", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "env_img", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "\n", "self", ".", "should_save_path_overlays", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.make_picklable": [[228, 230], ["utils.dummy_summary_writer.DummySummaryWriter"], "methods", ["None"], ["", "def", "make_picklable", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", "=", "DummySummaryWriter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.steal_cross_domain_modules": [[231, 238], ["None"], "methods", ["None"], ["", "def", "steal_cross_domain_modules", "(", "self", ",", "other_self", ")", ":", "\n", "        ", "self", ".", "iter", "=", "other_self", ".", "iter", "\n", "self", ".", "losses", "=", "other_self", ".", "losses", "\n", "self", ".", "sentence_embedding", "=", "other_self", ".", "sentence_embedding", "\n", "self", ".", "map_accumulator_w", "=", "other_self", ".", "map_accumulator_w", "\n", "self", ".", "map_processor_grounding", "=", "other_self", ".", "map_processor_grounding", "\n", "self", ".", "path_predictor_lingunet", "=", "other_self", ".", "path_predictor_lingunet", "\n", "#self.img_to_features_w = other_self.img_to_features_w", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.both_domain_parameters": [[240, 250], ["model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.parameters", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "both_domain_parameters", "(", "self", ",", "other_self", ")", ":", "\n", "# This function iterates and yields parameters from this module and the other module, but does not yield", "\n", "# shared parameters twice.", "\n", "# First yield all of the other module's parameters", "\n", "        ", "for", "p", "in", "other_self", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "# Then yield all the parameters from the this module that are not shared with the other one", "\n", "", "for", "p", "in", "self", ".", "img_to_features_w", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.get_iter": [[251, 253], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.inc_iter": [[254, 256], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict": [[257, 259], ["super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "super", "(", "PVN_Stage1_Bidomain", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.init_weights": [[260, 266], ["model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.init_weights", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_accumulator_w.init_weights", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding.init_weights", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_processor_grounding.init_weights", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.path_predictor_lingunet.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_grounding", ".", "init_weights", "(", ")", "\n", "self", ".", "path_predictor_lingunet", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.reset": [[267, 275], ["model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.reset", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding.reset", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.reset", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_accumulator_w.reset", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_batch_fill_missing.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# TODO: This is error prone. Create a class StatefulModule, iterate submodules and reset all stateful modules", "\n", "        ", "self", ".", "tensor_store", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "reset", "(", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "reset", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.setEnvContext": [[276, 281], ["print", "data_io.env.load_env_img", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "self", ".", "env_img", "=", "env", ".", "load_env_img", "(", "self", ".", "env_id", ",", "256", ",", "256", ")", "\n", "self", ".", "env_img", "=", "self", ".", "env_img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.set_save_path_overlays": [[282, 284], ["None"], "methods", ["None"], ["", "def", "set_save_path_overlays", "(", "self", ",", "save_path_overlays", ")", ":", "\n", "        ", "self", ".", "should_save_path_overlays", "=", "save_path_overlays", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.save_path_overlays": [[285, 307], ["load_env_img().astype", "cv2.cvtColor", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.visitation_softmax", "v_dist_w.contiguous.contiguous.contiguous", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "visualization.Presenter().overlaid_image", "visualization.Presenter().overlay_text", "save_results_extra_image", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "load_env_img", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "visualization.Presenter", "visualization.Presenter", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "v_dist_w[].view", "v_dist_w[].view"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_text", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.results.save_results_extra_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "save_path_overlays", "(", "self", ",", "metadata", ")", ":", "\n", "        ", "from", "data_io", ".", "env", "import", "load_env_img", "\n", "from", "data_io", ".", "results", "import", "save_results_extra_image", "\n", "import", "cv2", "\n", "import", "numpy", "as", "np", "\n", "img", "=", "load_env_img", "(", "metadata", "[", "\"env_id\"", "]", ",", "width", "=", "256", ",", "height", "=", "256", ",", "real_drone", "=", "(", "self", ".", "domain", "==", "\"real\"", ")", ",", "flipdiag", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "log_v_dist", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"log_v_dist_w_select\"", ")", "[", "0", "]", "\n", "v_dist_w", ",", "goal_oob_prob", "=", "self", ".", "visitation_softmax", "(", "log_v_dist", ".", "inner_distribution", ",", "log_v_dist", ".", "outer_prob_mass", "[", ":", ",", "1", "]", ")", "\n", "v_dist_w", "=", "v_dist_w", ".", "contiguous", "(", ")", "\n", "# Squish distributions in 0-1 range", "\n", "#idx = int((v_dist_w.shape[0]) / 2)", "\n", "idx", "=", "-", "1", "\n", "mx1", "=", "torch", ".", "max", "(", "v_dist_w", "[", "idx", ",", "0", "]", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "mx2", "=", "torch", ".", "max", "(", "v_dist_w", "[", "idx", ",", "1", "]", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "v_dist_w", "[", "idx", ",", "0", "]", "/=", "(", "mx1", "+", "1e-10", ")", "\n", "v_dist_w", "[", "idx", ",", "1", "]", "/=", "(", "mx2", "+", "1e-10", ")", "\n", "overlaid_img", "=", "Presenter", "(", ")", ".", "overlaid_image", "(", "img", ",", "v_dist_w", "[", "idx", "]", ",", "gray_bg", "=", "False", ")", "\n", "overlaid_img", "=", "Presenter", "(", ")", ".", "overlay_text", "(", "overlaid_img", ",", "metadata", "[", "\"instruction\"", "]", ")", "\n", "name", "=", "f\"{self.domain}_pathpred_overlay\"", "\n", "name", "=", "\"\"", "\n", "save_results_extra_image", "(", "self", ".", "run_name", ",", "metadata", "[", "\"env_id\"", "]", ",", "metadata", "[", "\"set_idx\"", "]", ",", "metadata", "[", "\"seg_idx\"", "]", ",", "name", ",", "overlaid_img", ",", "extra", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.print_metrics": [[308, 311], ["print", "print", "float"], "methods", ["None"], ["", "def", "print_metrics", "(", "self", ")", ":", "\n", "        ", "print", "(", "f\"Model {self.model_name}:{self.domain} metrics:\"", ")", "\n", "print", "(", "f\"   Goal accuracy: {float(self.correct_goals) / self.total_goals}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.goal_visible": [[312, 317], ["goal_pos[].long().detach", "bool", "masks.detach", "goal_pos[].long"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "goal_visible", "(", "self", ",", "masks", ",", "goal_pos", ")", ":", "\n", "        ", "goal_mask", "=", "masks", ".", "detach", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "goal_pos", "=", "goal_pos", "[", "0", "]", ".", "long", "(", ")", ".", "detach", "(", ")", "\n", "visible", "=", "bool", "(", "(", "goal_mask", "[", "goal_pos", "[", "0", "]", ",", "goal_pos", "[", "1", "]", "]", ">", "0.5", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "return", "visible", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence": [[319, 323], ["model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states": [[324, 329], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.forward": [[330, 506], ["model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.params.get", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.params.get", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_accumulator_w", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.batch_select", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_w_to_s", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_w_to_s", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.path_predictor_lingunet", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_p_to_w", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_p_to_r", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "tuple", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding.get", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.add_init_pos_to_coverage.get_init_pos_masks", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_r_to_w", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.add_init_pos_to_coverage", "len", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_processor_grounding", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_s_to_p", "range", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_batch_fill_missing", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "return_list.append", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding", "torch.autograd.Variable", "torch.autograd.Variable", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "learning.utils.draw_drone_poses", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.get_iter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "visualization.Presenter", "S_W_select.detach().cpu", "visualization.Presenter", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach().cpu", "visualization.Presenter", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach().cpu", "visualization.Presenter", "RS_P_select.detach().cpu", "S_W_select.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach", "RS_P_select.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d."], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.get_init_pos_masks", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.draw_drone_poses", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "\n", "plan", "=", "None", ",", "noisy_start_poses", "=", "None", ",", "start_poses", "=", "None", ",", "firstseg", "=", "None", ",", "select_only", "=", "True", ",", "halfway", "=", "False", ",", "grad_noise", "=", "False", ",", "rl", "=", "False", ",", "noshow", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param plan: list of B booleans indicating True for timesteps where we do planning and False otherwise\n        :param noisy_start_poses: list of noisy start poses (for data-augmentation). These define the path-prediction frame at training time\n        :param start_poses: list of drone start poses (these should be equal in practice)\n        :param firstseg: list of booleans indicating True if a new segment starts at that timestep\n        :param select_only: boolean indicating whether to only compute visitation distributions for planning timesteps (default True)\n        :param rl: boolean indicating if we're doing reinforcement learning. If yes, output more than the visitation distribution\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "g_poses", "=", "None", "# None pose is a placeholder for the canonical global pose.", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# If we're running the blind baseline, simply replace the images with zeros. Keep all other computation.", "\n", "if", "self", ".", "params", ".", "get", "(", "\"blind\"", ")", ":", "\n", "            ", "images", "=", "torch", ".", "zeros_like", "(", "images", ")", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"fpv\"", ",", "images", ")", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "# TODO: handle this", "\n", "# ASSUMING IT'S THE SAME INSTRUCTION SEGMENT (PREDICT ONE SEGMENT AT A TIME).", "\n", "# UNCOMMENT THE BELOW LINE TO REVERT BACK TO GENERAL CASE OF SEPARATE INSTRUCTION PER STEP", "\n", "            ", "if", "self", ".", "params", "[", "\"ignore_instruction\"", "]", ":", "\n", "# If we're ignoring instructions, just feed in an instruction that consists of a single zero-token", "\n", "                ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "torch", ".", "zeros_like", "(", "instructions", "[", "0", ":", "1", ",", "0", ":", "1", "]", ")", ",", "torch", ".", "ones_like", "(", "torch", ".", "tensor", "(", "instr_lengths", "[", "0", ":", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", "[", "0", ":", "1", "]", ",", "instr_lengths", "[", "0", ":", "1", "]", ")", "\n", "#sent_embeddings = self.sentence_embedding(instructions, instr_lengths)", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "F_W", ",", "M_W", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ".", "tensor_store", ",", "show", "=", "\"\"", ",", "halfway", "=", "halfway", ")", "\n", "\n", "if", "halfway", "==", "True", "and", "not", "halfway", "==", "\"v2\"", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"F_w\"", ",", "F_W", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"M_w\"", ",", "M_W", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "\n", "# Accumulate the egocentric features in a global map", "\n", "reset_mask", "=", "firstseg", "if", "self", ".", "params", "[", "\"clear_history\"", "]", "else", "None", "\n", "\n", "# Consider the space very near the drone as observable - it is too hard to explore to consider it unobservable.", "\n", "if", "self", ".", "params", ".", "get", "(", "\"cover_init_pos\"", ",", "False", ")", ":", "\n", "            ", "StartMasks_R", "=", "self", ".", "add_init_pos_to_coverage", ".", "get_init_pos_masks", "(", "M_W", ".", "shape", "[", "0", "]", ",", "M_W", ".", "device", ")", "\n", "StartMasks_W", ",", "_", "=", "self", ".", "map_transform_r_to_w", "(", "StartMasks_R", ",", "cam_poses", ",", "None", ")", "\n", "M_W", "=", "self", ".", "add_init_pos_to_coverage", "(", "M_W", ",", "StartMasks_W", ")", "\n", "\n", "", "S_W", ",", "SM_W", "=", "self", ".", "map_accumulator_w", "(", "F_W", ",", "M_W", ",", "reset_mask", "=", "reset_mask", ",", "show", "=", "\"acc\"", "if", "IMG_DBG", "else", "\"\"", ")", "\n", "S_W_poses", "=", "g_poses", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"SM_w\"", ",", "SM_W", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_accumulate\"", ")", "\n", "\n", "if", "halfway", "==", "\"observability\"", ":", "\n", "            ", "map_uncoverage_w", "=", "1", "-", "SM_W", "\n", "return", "map_uncoverage_w", "\n", "\n", "# Throw away those timesteps that don't correspond to planning timesteps", "\n", "", "S_W_select", ",", "SM_W_select", ",", "S_W_poses_select", ",", "cam_poses_select", ",", "noisy_start_poses_select", ",", "start_poses_select", ",", "sent_embeddings_select", "=", "self", ".", "batch_select", "(", "S_W", ",", "SM_W", ",", "S_W_poses", ",", "cam_poses", ",", "noisy_start_poses", ",", "start_poses", ",", "sent_embeddings", ",", "plan", ")", "\n", "\n", "#maps_m_prior_select, maps_m_posterior_select = None, None", "\n", "\n", "# Only process the maps on plannieng timesteps", "\n", "if", "len", "(", "S_W_select", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"S_W_select\"", ",", "S_W_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"batch_select\"", ")", "\n", "\n", "# Create a figure where the drone is drawn on the map", "\n", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "            ", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"drone_poses\"", ",", "Variable", "(", "draw_drone_poses", "(", "cam_poses_select", ")", ")", ")", "\n", "\n", "# Process the map via the two map_procesors", "\n", "# Do grounding of objects in the map chosen to do so", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", ":", "\n", "            ", "R_W_select", ",", "RS_W_poses_select", "=", "self", ".", "map_processor_grounding", "(", "S_W_select", ",", "sent_embeddings_select", ",", "S_W_poses_select", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"R_W_select\"", ",", "R_W_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_gnd\"", ")", "\n", "# Concatenate grounding map and semantic map along channel dimension", "\n", "RS_W_select", "=", "torch", ".", "cat", "(", "[", "S_W_select", ",", "R_W_select", "]", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "RS_W_select", "=", "S_W_select", "\n", "RS_W_poses_select", "=", "S_W_poses_select", "\n", "\n", "", "s_poses_select", "=", "start_poses_select", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "else", "cam_poses_select", "\n", "RS_S_select", ",", "RS_S_poses_select", "=", "self", ".", "map_transform_w_to_s", "(", "RS_W_select", ",", "RS_W_poses_select", ",", "s_poses_select", ")", "\n", "SM_S_select", ",", "SM_S_poses_select", "=", "self", ".", "map_transform_w_to_s", "(", "SM_W_select", ",", "S_W_poses_select", ",", "s_poses_select", ")", "\n", "\n", "assert", "SM_S_poses_select", "==", "RS_S_poses_select", ",", "\"Masks and maps should have the same pose in start frame\"", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"RS_S_select\"", ",", "RS_S_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"SM_S_select\"", ",", "SM_S_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"transform_w_to_s\"", ")", "\n", "\n", "# Data augmentation for trajectory prediction", "\n", "map_poses_clean_select", "=", "None", "\n", "# TODO: Figure out if we can just swap out start poses for noisy poses and get rid of separate noisy poses", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "            ", "assert", "noisy_start_poses_select", "is", "not", "None", ",", "\"Noisy poses must be provided if we're perturbing maps\"", "\n", "RS_P_select", ",", "RS_P_poses_select", "=", "self", ".", "map_transform_s_to_p", "(", "RS_S_select", ",", "RS_S_poses_select", ",", "noisy_start_poses_select", ")", "\n", "", "else", ":", "\n", "            ", "RS_P_select", ",", "RS_P_poses_select", "=", "RS_S_select", ",", "RS_S_poses_select", "\n", "\n", "# TODO: Figure out why this is unused!", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"RS_perturbed_select\"", ",", "RS_P_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_perturb\"", ")", "\n", "\n", "sent_embeddings_pp", "=", "sent_embeddings_select", "\n", "\n", "# Process the map via the two map_procesors (e.g. predict the trajectory that we'll be taking)", "\n", "# ---------", "\n", "log_v_dist_p_select", ",", "v_dist_p_poses_select", "=", "self", ".", "path_predictor_lingunet", "(", "RS_P_select", ",", "sent_embeddings_pp", ",", "RS_P_poses_select", ",", "tensor_store", "=", "self", ".", "tensor_store", ")", "\n", "# ---------", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"pathpred\"", ")", "\n", "\n", "# Transform distributions back to world reference frame and keep them (these are the model outputs)", "\n", "both_inner_w", ",", "v_dist_w_poses_select", "=", "self", ".", "map_transform_p_to_w", "(", "log_v_dist_p_select", ".", "inner_distribution", ",", "v_dist_p_poses_select", ",", "None", ")", "\n", "log_v_dist_w_select", "=", "Partial2DDistribution", "(", "both_inner_w", ",", "log_v_dist_p_select", ".", "outer_prob_mass", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_v_dist_w_select\"", ",", "log_v_dist_w_select", ")", "\n", "\n", "# Transform distributions back to start reference frame and keep them (for auxiliary objective)", "\n", "both_inner_s", ",", "v_dist_s_poses_select", "=", "self", ".", "map_transform_p_to_r", "(", "log_v_dist_p_select", ".", "inner_distribution", ",", "v_dist_p_poses_select", ",", "start_poses_select", ")", "\n", "log_v_dist_s_select", "=", "Partial2DDistribution", "(", "both_inner_s", ",", "log_v_dist_p_select", ".", "outer_prob_mass", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_v_dist_s_select\"", ",", "log_v_dist_s_select", ")", "\n", "\n", "lsfm", "=", "SpatialSoftmax2d", "(", ")", "\n", "# prime number will mean that it will alternate between sim and real", "\n", "if", "self", ".", "get_iter", "(", ")", "%", "23", "==", "0", "and", "not", "noshow", ":", "\n", "            ", "for", "i", "in", "range", "(", "S_W_select", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "S_W_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", ",", "0", ":", "3", "]", ",", "f\"{self.domain}_s_w_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "lsfm", "(", "log_v_dist_s_select", ".", "inner_distribution", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", "]", ",", "f\"{self.domain}_v_dist_s_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "lsfm", "(", "log_v_dist_p_select", ".", "inner_distribution", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", "]", ",", "f\"{self.domain}_v_dist_p_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "RS_P_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", ",", "0", ":", "3", "]", ",", "f\"{self.domain}_rs_p_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "break", "\n", "\n", "", "", "self", ".", "prof", ".", "tick", "(", "\"transform_back\"", ")", "\n", "\n", "# If we're predicting the trajectory only on some timesteps, then for each timestep k, use the map from", "\n", "# timestep k if predicting on timestep k. otherwise use the map from timestep j - the last timestep", "\n", "# that had a trajectory prediction, rotated in the frame of timestep k.", "\n", "if", "select_only", ":", "\n", "# If we're just pre-training the trajectory prediction, don't waste time on generating the missing maps", "\n", "            ", "log_v_dist_w", "=", "log_v_dist_w_select", "\n", "v_dist_w_poses", "=", "v_dist_w_poses_select", "\n", "cam_poses", "=", "cam_poses_select", "\n", "sent_embeddings", "=", "sent_embeddings_select", "\n", "", "else", ":", "\n", "            ", "log_v_dist_w", ",", "v_dist_w_poses", ",", "log_goal_oob_score", "=", "self", ".", "map_batch_fill_missing", "(", "log_v_dist_w_select", ",", "v_dist_w_poses_select", ",", "plan", ",", "show", "=", "\"\"", ")", "\n", "# TODO: Fix this", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_both_dists_w\"", ",", "log_both_dists_w", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_fill_missing\"", ")", "\n", "\n", "", "return_list", "=", "[", "log_v_dist_w", ",", "v_dist_w_poses", "]", "\n", "if", "rl", ":", "\n", "            ", "internals_for_rl", "=", "{", "\"map_coverage_w\"", ":", "SM_W", ",", "\"map_uncoverage_w\"", ":", "1", "-", "SM_W", "}", "\n", "return_list", ".", "append", "(", "internals_for_rl", ")", "\n", "\n", "", "return", "tuple", "(", "return_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda": [[507, 509], ["tensor.to", "next", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var": [[510, 512], ["tensor.to", "next", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.unbatch": [[513, 593], ["model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "len", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.set_flag", "learning.inputs.pose.get_noisy_poses_torch", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.batch_select.one", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_w_to_s", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.img_to_features.get_downscale_factor", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "start_poses.numpy", "transformations.pos_m_to_px", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "goal_pos_map_m.numpy", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "enumerate", "enumerate", "enumerate", "enumerate", "transformations.pos_m_to_px", "s.long", "p.numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.set_flag", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_torch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.get_downscale_factor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy"], ["", "def", "unbatch", "(", "self", ",", "batch", ",", "halfway", "=", "False", ")", ":", "\n", "# Inputs", "\n", "        ", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", "[", "0", "]", ")", "\n", "seq_len", "=", "len", "(", "images", ")", "\n", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", "[", "0", "]", "[", ":", "seq_len", "]", ")", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "[", "0", "]", "[", ":", "seq_len", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", "[", "0", "]", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "\n", "            ", "plan_mask", "=", "batch", "[", "\"plan_mask\"", "]", "[", "0", "]", "# True for every timestep that we do visitation prediction", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "[", "0", "]", "# True for every timestep that is a new instruction segment", "\n", "\n", "# Labels (including for auxiliary losses)", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "[", "0", "]", "# All object 2D coordinates in the first-person image", "\n", "lm_pos_map_m", "=", "batch", "[", "\"lm_pos_map\"", "]", "[", "0", "]", "# All object 2D coordinates in the semantic map", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "[", "0", "]", "# All object class indices", "\n", "goal_pos_map_m", "=", "batch", "[", "\"goal_loc\"", "]", "[", "0", "]", "# Goal location in the world in meters_and_metrics", "\n", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "[", "0", "]", "# 1/0 labels whether object was mentioned/not mentioned in template instruction", "\n", "# TODO: We're taking the FIRST label here. SINGLE SEGMENT ASSUMPTION", "\n", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "[", "0", "]", "[", "0", "]", "# integer labes as to which object was mentioned", "\n", "start_poses", "=", "batch", "[", "\"start_poses\"", "]", "[", "0", "]", "\n", "noisy_start_poses", "=", "get_noisy_poses_torch", "(", "start_poses", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"pos_variance\"", "]", ",", "self", ".", "params", "[", "\"rot_variance\"", "]", ",", "\n", "cuda", "=", "False", ",", "cuda_device", "=", "None", ")", "\n", "\n", "# Ground truth visitation distributions (in start and global frames)", "\n", "v_dist_w_ground_truth_select", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"traj_ground_truth\"", "]", "[", "0", "]", ")", "\n", "start_poses_select", "=", "self", ".", "batch_select", ".", "one", "(", "start_poses", ",", "plan_mask", ",", "v_dist_w_ground_truth_select", ".", "device", ")", "\n", "v_dist_s_ground_truth_select", ",", "poses_s", "=", "self", ".", "map_transform_w_to_s", "(", "v_dist_w_ground_truth_select", ",", "None", ",", "start_poses_select", ")", "\n", "#self.tensor_store.keep_inputs(\"v_dist_w_ground_truth_select\", v_dist_w_ground_truth_select)", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"v_dist_s_ground_truth_select\"", ",", "v_dist_s_ground_truth_select", ")", "\n", "#Presenter().show_image(v_dist_s_ground_truth_select.detach().cpu()[0,0], \"v_dist_s_ground_truth_select\", waitkey=1, scale=4)", "\n", "#Presenter().show_image(v_dist_w_ground_truth_select.detach().cpu()[0,0], \"v_dist_w_ground_truth_select\", waitkey=1, scale=4)", "\n", "\n", "lm_pos_map_px", "=", "[", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "p", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "lm_pos_map_m", "]", "\n", "goal_pos_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "goal_pos_map_m", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "\n", "resnet_factor", "=", "self", ".", "img_to_features_w", ".", "img_to_features", ".", "get_downscale_factor", "(", ")", "\n", "lm_pos_fpv", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "resnet_factor", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_fpv", "]", "\n", "lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_indices", "]", "\n", "lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_mentioned", "]", "\n", "lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "lang_lm_mentioned", ")", "\n", "lm_pos_map_px", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_map_px", "]", "\n", "goal_pos_map_px", "=", "self", ".", "cuda_var", "(", "goal_pos_map_px", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_fpv\"", ",", "lm_pos_fpv", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "lm_pos_map_px", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "lm_indices", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "lm_mentioned", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "lang_lm_mentioned", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map\"", ",", "goal_pos_map_px", ")", "\n", "\n", "lm_pos_map_select", "=", "[", "lm_pos", "for", "i", ",", "lm_pos", "in", "enumerate", "(", "lm_pos_map_px", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "lm_indices_select", "=", "[", "lm_idx", "for", "i", ",", "lm_idx", "in", "enumerate", "(", "lm_indices", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "lm_mentioned_select", "=", "[", "lm_m", "for", "i", ",", "lm_m", "in", "enumerate", "(", "lm_mentioned", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "goal_pos_map_select", "=", "[", "pos", "for", "i", ",", "pos", "in", "enumerate", "(", "goal_pos_map_px", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map_select\"", ",", "lm_pos_map_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices_select\"", ",", "lm_indices_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned_select\"", ",", "lm_mentioned_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map_select\"", ",", "goal_pos_map_select", ")", "\n", "\n", "# We won't need this extra information", "\n", "", "else", ":", "\n", "            ", "noisy_poses", ",", "start_poses", ",", "noisy_start_poses", "=", "None", ",", "None", ",", "None", "\n", "plan_mask", ",", "firstseg_mask", "=", "None", ",", "None", "\n", "\n", "", "metadata", "=", "batch", "[", "\"md\"", "]", "[", "0", "]", "[", "0", "]", "\n", "env_id", "=", "metadata", "[", "\"env_id\"", "]", "\n", "self", ".", "tensor_store", ".", "set_flag", "(", "\"env_id\"", ",", "env_id", ")", "\n", "\n", "return", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "plan_mask", ",", "firstseg_mask", ",", "start_poses", ",", "noisy_start_poses", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.sup_loss_on_batch": [[595, 677], ["model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.reset", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.calculate_aux_loss", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.losses.combine_losses", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.get_iter", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_dict", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_dict", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_dict", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.inc_iter", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.loop", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.print_stats", "print", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.save_path_overlays", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.goal_good_criterion", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.goal_acc_meter.put", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.goal_visible", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_frac_meter.put", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "learning.meters_and_metrics.meter_server.get_current_meters", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_acc_meter.put", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.invisible_goal_acc_meter.put", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.goal_acc_meter.get", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_acc_meter.get", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.invisible_goal_acc_meter.get", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_frac_meter.get", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "next", "model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.combine_losses", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.save_path_overlays", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_visible", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ",", "halfway", "=", "False", ",", "grad_noise", "=", "False", ",", "disable_losses", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "zero", "=", "torch", ".", "zeros", "(", "[", "1", "]", ")", ".", "float", "(", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "return", "zero", ",", "self", ".", "tensor_store", "\n", "\n", "", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "plan_mask", ",", "firstseg_mask", ",", "start_poses", ",", "noisy_start_poses", ",", "metadata", "=", "self", ".", "unbatch", "(", "batch", ",", "halfway", "=", "halfway", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"unbatch_inputs\"", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "_", "=", "self", "(", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "\n", "plan", "=", "plan_mask", ",", "firstseg", "=", "firstseg_mask", ",", "\n", "noisy_start_poses", "=", "start_poses", "if", "eval", "else", "noisy_start_poses", ",", "\n", "start_poses", "=", "start_poses", ",", "\n", "select_only", "=", "True", ",", "\n", "halfway", "=", "halfway", ",", "\n", "grad_noise", "=", "grad_noise", ")", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "if", "self", ".", "should_save_path_overlays", ":", "\n", "            ", "self", ".", "save_path_overlays", "(", "metadata", ")", "\n", "\n", "# If we run the model halfway, we only need to calculate features needed for the wasserstein loss", "\n", "# If we want to include more features in wasserstein critic, have to run the forward pass a bit further", "\n", "", "if", "halfway", "and", "not", "halfway", "==", "\"v2\"", ":", "\n", "            ", "return", "None", ",", "self", ".", "tensor_store", "\n", "\n", "# The returned values are not used here - they're kept in the tensor store which is used as an input to a loss", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "# Calculate goal-prediction accuracy:", "\n", "            ", "goal_pos", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"goal_pos_map\"", ",", "cat_not_stack", "=", "True", ")", "\n", "success_goal", "=", "self", ".", "goal_good_criterion", "(", "\n", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"log_v_dist_w_select\"", ",", "cat_not_stack", "=", "True", ")", ",", "\n", "goal_pos", "\n", ")", "\n", "acc", "=", "1.0", "if", "success_goal", "else", "0.0", "\n", "self", ".", "goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "goal_visible", "=", "self", ".", "goal_visible", "(", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"M_w\"", ",", "cat_not_stack", "=", "True", ")", ",", "goal_pos", ")", "\n", "if", "goal_visible", ":", "\n", "                ", "self", ".", "visible_goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "invisible_goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "", "self", ".", "visible_goal_frac_meter", ".", "put", "(", "1.0", "if", "goal_visible", "else", "0.0", ")", "\n", "\n", "self", ".", "correct_goals", "+=", "acc", "\n", "self", ".", "total_goals", "+=", "1", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"goal_acc\"", ")", "\n", "\n", "", "if", "halfway", "==", "\"v2\"", ":", "\n", "            ", "disable_losses", "=", "[", "\"visitation_dist\"", ",", "\"lang\"", "]", "\n", "\n", "", "losses", ",", "metrics", "=", "self", ".", "losses", ".", "calculate_aux_loss", "(", "tensor_store", "=", "self", ".", "tensor_store", ",", "reduce_average", "=", "True", ",", "disable_losses", "=", "disable_losses", ")", "\n", "loss", "=", "self", ".", "losses", ".", "combine_losses", "(", "losses", ",", "self", ".", "aux_weights", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"calc_losses\"", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "iteration", "=", "self", ".", "get_iter", "(", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "losses", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "metrics", ",", "iteration", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/goal_accuracy\"", ",", "self", ".", "goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/visible_goal_accuracy\"", ",", "self", ".", "visible_goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/invisible_goal_accuracy\"", ",", "self", ".", "invisible_goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/visible_goal_fraction\"", ",", "self", ".", "visible_goal_frac_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "\n", "", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "loss", ",", "self", ".", "tensor_store", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain.get_dataset": [[678, 717], ["learning.datasets.segment_dataset_simple.SegmentDataset", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "print", "data_sources.append", "print", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "domain", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ",", "halfway_only", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "        ", "data_sources", "=", "[", "]", "\n", "# If we're running auxiliary objectives, we need to include the data sources for the auxiliary labels", "\n", "#if self.use_aux_class_features or self.use_aux_class_on_map or self.use_aux_grounding_features or self.use_aux_grounding_on_map:", "\n", "#if self.use_aux_goal_on_map:", "\n", "if", "not", "halfway_only", ":", "\n", "            ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_GOAL_POS", ")", "\n", "\n", "# Adding these in this order will compute poses with added noise and compute trajectory ground truth", "\n", "# in the reference frame of these noisy poses", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_START_POSES", ")", "\n", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "                ", "print", "(", "\"PERTURBING MAPS!\"", ")", "\n", "# TODO: The noisy poses from the provider are not actually used!! Those should replace states instead!", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "# TODO: Think this through. Perhaps we actually want dynamic ground truth given a noisy start position", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"NOT Perturbing Maps!\"", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ")", "\n", "\n", "", "", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANDMARKS_MENTIONED", ")", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"templates\"", "]", "\n", "if", "templates", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "\n", "", "", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "domain", "=", "domain", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.__init__": [[71, 248], ["torch.Module.__init__", "print", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.auxiliary_losses.AuxiliaryLosses", "model_sm_rss_global.ModelTrajectoryTopDown.params.get", "learning.modules.img_to_map.fpv_to_global_map.FPVToGlobalMap", "learning.modules.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "data_io.weights.enable_weight_saving", "data_io.weights.enable_weight_saving", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.print_auxiliary_info", "learning.modules.action_loss.ActionLoss", "str", "str", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "RvizInterface", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "learning.modules.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "learning.modules.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.goal_auxiliary.GoalAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.add_auxiliary", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_class", "=", "MODEL_RSS", ",", "\n", "aux_class_features", "=", "False", ",", "aux_grounding_features", "=", "False", ",", "\n", "aux_class_map", "=", "False", ",", "aux_grounding_map", "=", "False", ",", "aux_goal_map", "=", "False", ",", "\n", "aux_lang", "=", "False", ",", "aux_traj", "=", "False", ",", "rot_noise", "=", "False", ",", "pos_noise", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "ModelTrajectoryTopDown", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"sm_trajectory\"", "+", "str", "(", "model_class", ")", "\n", "self", ".", "model_class", "=", "model_class", "\n", "print", "(", "\"Init model of type: \"", ",", "str", "(", "model_class", ")", ")", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "\"runs/\"", "+", "run_name", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"Model\"", "]", "\n", "self", ".", "aux_weights", "=", "get_current_parameters", "(", ")", "[", "\"AuxWeights\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "self", ".", "aux_losses", "=", "AuxiliaryLosses", "(", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "self", ".", "use_aux_class_features", "=", "aux_class_features", "\n", "self", ".", "use_aux_grounding_features", "=", "aux_grounding_features", "\n", "self", ".", "use_aux_class_on_map", "=", "aux_class_map", "\n", "self", ".", "use_aux_grounding_on_map", "=", "aux_grounding_map", "\n", "self", ".", "use_aux_goal_on_map", "=", "aux_goal_map", "\n", "self", ".", "use_aux_lang", "=", "aux_lang", "\n", "self", ".", "use_aux_traj_on_map", "=", "aux_traj", "\n", "self", ".", "use_aux_reg_map", "=", "self", ".", "aux_weights", "[", "\"regularize_map\"", "]", "\n", "\n", "self", ".", "use_rot_noise", "=", "rot_noise", "\n", "self", ".", "use_pos_noise", "=", "pos_noise", "\n", "self", ".", "rviz", "=", "None", "\n", "if", "self", ".", "params", ".", "get", "(", "\"rviz\"", ")", ":", "\n", "            ", "self", ".", "rviz", "=", "RvizInterface", "(", "\n", "base_name", "=", "\"/gsmn/\"", ",", "\n", "map_topics", "=", "[", "\"semantic_map\"", ",", "\"grounding_map\"", ",", "\"goal_map\"", "]", ",", "\n", "markerarray_topics", "=", "[", "\"instruction\"", "]", ")", "\n", "\n", "\n", "# Path-pred FPV model definition", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "self", ".", "img_to_features_w", "=", "FPVToGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "res_channels", "=", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "map_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "img_w", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "img_h", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "cam_h_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "img_dbg", "=", "IMG_DBG", ")", "\n", "\n", "self", ".", "map_accumulator_w", "=", "LeakyIntegratorGlobalMap", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Pre-process the accumulated map to do language grounding if necessary - in the world reference frame", "\n", "if", "self", ".", "use_aux_grounding_on_map", "and", "not", "self", ".", "use_aux_grounding_features", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "LangFilterMapProcessor", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "spatial", "=", "False", ",", "cat_out", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "IdentityMapProcessor", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "", "if", "self", ".", "use_aux_goal_on_map", ":", "\n", "            ", "self", ".", "map_processor_b_r", "=", "LangFilterMapProcessor", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"goal_channels\"", "]", ",", "\n", "spatial", "=", "self", ".", "params", "[", "\"spatial_goal_filter\"", "]", ",", "\n", "cat_out", "=", "self", ".", "params", "[", "\"cat_rel_and_goal\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_processor_b_r", "=", "IdentityMapProcessor", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Common", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# Sentence Embedding", "\n", "", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ")", "\n", "\n", "self", ".", "map_transform_w_to_r", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "map_transform_r_to_w", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Batch select is used to drop and forget semantic maps at those timestaps that we're not planning in", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "# Since we only have path predictions for some timesteps (the ones not dropped above), we use this to fill", "\n", "# in the missing pieces by reorienting the past trajectory prediction into the frame of the current timestep", "\n", "self", ".", "map_batch_fill_missing", "=", "MapBatchFillMissing", "(", "\n", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Passing true to freeze will freeze these weights regardless of whether they've been explicitly reloaded or not", "\n", "enable_weight_saving", "(", "self", ".", "sentence_embedding", ",", "\"sentence_embedding\"", ",", "alwaysfreeze", "=", "False", ")", "\n", "\n", "# Output an action given the global semantic map", "\n", "if", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"downsample2\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "EgoMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "other_features_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ")", "\n", "\n", "", "elif", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"cropped\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "CroppedMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", "\n", ")", "\n", "\n", "# Don't freeze the trajectory to action weights, because it will be pre-trained during path-prediction training", "\n", "# and finetuned on all timesteps end-to-end", "\n", "", "enable_weight_saving", "(", "self", ".", "map_to_action", ",", "\"map_to_action\"", ",", "alwaysfreeze", "=", "False", ",", "neverfreeze", "=", "True", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# We add all auxiliaries that are necessary. The first argument is the auxiliary name, followed by parameters,", "\n", "# followed by variable number of names of inputs. ModuleWithAuxiliaries will automatically collect these inputs", "\n", "# that have been saved with keep_auxiliary_input() during execution", "\n", "if", "aux_class_features", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_indices\"", ")", ")", "\n", "", "if", "aux_grounding_features", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_ground\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_mentioned\"", ")", ")", "\n", "", "if", "aux_class_map", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class_map\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"map_s_w_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_indices_select\"", ")", ")", "\n", "", "if", "aux_grounding_map", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_grounding_map\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"map_a_w_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_mentioned_select\"", ")", ")", "\n", "", "if", "aux_goal_map", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "GoalAuxiliary2D", "(", "\"aux_goal_map\"", ",", "self", ".", "params", "[", "\"goal_channels\"", "]", ",", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\"map_b_w\"", ",", "\"goal_pos_map\"", ")", ")", "\n", "# RSS model uses templated data for landmark and side prediction", "\n", "", "if", "self", ".", "use_aux_lang", "and", "self", ".", "params", "[", "\"templates\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "1", ",", "\n", "\"sentence_embed\"", ",", "\"lm_mentioned_tplt\"", ")", ")", "\n", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_side\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"num_sides\"", "]", ",", "1", ",", "\n", "\"sentence_embed\"", ",", "\"side_mentioned_tplt\"", ")", ")", "\n", "# CoRL model uses alignment-model groundings", "\n", "", "elif", "self", ".", "use_aux_lang", ":", "\n", "# one output for each landmark, 2 classes per output. This is for finetuning, so use the embedding that's gonna be fine tuned", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm_nl\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_traj_on_map", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"aux_path\"", ",", "\"map_b_r_select\"", ",", "\"traj_gt_r_select\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux_reg_map", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"aux_regularize_features\"", ",", "None", ",", "\"l1\"", ",", "\n", "\"map_s_w_select\"", ",", "\"lm_pos_map_select\"", ")", ")", "\n", "\n", "", "self", ".", "goal_good_criterion", "=", "GoalPredictionGoodCriterion", "(", "ok_distance", "=", "3.2", ")", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n", "self", ".", "aux_losses", ".", "print_auxiliary_info", "(", ")", "\n", "\n", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.get_iter": [[249, 251], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.inc_iter": [[252, 254], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.load_img_feature_weights": [[255, 265], ["model_sm_rss_global.ModelTrajectoryTopDown.params.get", "model_sm_rss_global.ModelTrajectoryTopDown.params.get", "data_io.model_io.load_pytorch_model", "model_sm_rss_global.ModelTrajectoryTopDown.params.get", "model_sm_rss_global.ModelTrajectoryTopDown.img_to_features_w.img_to_features.load_state_dict", "print", "data_io.model_io.find_state_subdict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.find_state_subdict"], ["", "def", "load_img_feature_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "get", "(", "\"load_feature_net\"", ")", ":", "\n", "            ", "filename", "=", "self", ".", "params", ".", "get", "(", "\"feature_net_filename\"", ")", "\n", "weights", "=", "load_pytorch_model", "(", "None", ",", "filename", ")", "\n", "prefix", "=", "self", ".", "params", ".", "get", "(", "\"feature_net_tensor_name\"", ")", "\n", "if", "prefix", ":", "\n", "                ", "weights", "=", "find_state_subdict", "(", "weights", ",", "prefix", ")", "\n", "# TODO: This breaks OOP conventions", "\n", "", "self", ".", "img_to_features_w", ".", "img_to_features", ".", "load_state_dict", "(", "weights", ")", "\n", "print", "(", "f\"Loaded pretrained weights from file {filename} with prefix {prefix}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.init_weights": [[266, 274], ["model_sm_rss_global.ModelTrajectoryTopDown.img_to_features_w.init_weights", "model_sm_rss_global.ModelTrajectoryTopDown.load_img_feature_weights", "model_sm_rss_global.ModelTrajectoryTopDown.map_accumulator_w.init_weights", "model_sm_rss_global.ModelTrajectoryTopDown.sentence_embedding.init_weights", "model_sm_rss_global.ModelTrajectoryTopDown.map_to_action.init_weights", "model_sm_rss_global.ModelTrajectoryTopDown.map_processor_a_w.init_weights", "model_sm_rss_global.ModelTrajectoryTopDown.map_processor_b_r.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.load_img_feature_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "load_img_feature_weights", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "map_to_action", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_a_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_b_r", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.reset": [[275, 287], ["model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.reset", "model_sm_rss_global.ModelTrajectoryTopDown.sentence_embedding.reset", "model_sm_rss_global.ModelTrajectoryTopDown.img_to_features_w.reset", "model_sm_rss_global.ModelTrajectoryTopDown.map_accumulator_w.reset", "model_sm_rss_global.ModelTrajectoryTopDown.map_processor_a_w.reset", "model_sm_rss_global.ModelTrajectoryTopDown.map_processor_b_r.reset", "model_sm_rss_global.ModelTrajectoryTopDown.map_transform_w_to_r.reset", "model_sm_rss_global.ModelTrajectoryTopDown.map_transform_r_to_w.reset", "model_sm_rss_global.ModelTrajectoryTopDown.map_batch_fill_missing.reset", "model_sm_rss_global.ModelTrajectoryTopDown.load_img_feature_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.load_img_feature_weights"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensor_store", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_a_w", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_b_r", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_w_to_r", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "reset", "(", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "reset", "(", ")", "\n", "self", ".", "load_img_feature_weights", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.set_env_context": [[288, 291], ["print", "str"], "methods", ["None"], ["", "def", "set_env_context", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.save_viz": [[292, 317], ["imageio.imsave", "learning.modules.key_tensor_store.save_tensors_as_images", "[].data.cpu().squeeze().numpy", "visualization.Presenter().save_action", "os.path.join", "str", "learning.utils.get_viz_dir_for_rollout", "open", "fp.write", "learning.utils.get_viz_dir_for_rollout", "[].data.cpu().squeeze", "str", "visualization.Presenter", "learning.utils.get_viz_dir_for_rollout", "str", "[].data.cpu", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.get_inputs_batch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.save_tensors_as_images", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_action", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch"], ["", "def", "save_viz", "(", "self", ",", "images_in", ",", "instruction", ")", ":", "\n", "# Save incoming images", "\n", "        ", "imsave", "(", "os", ".", "path", ".", "join", "(", "get_viz_dir_for_rollout", "(", ")", ",", "\"fpv_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", ")", ",", "images_in", ")", "\n", "#self.tensor_store.keep_input(\"fpv_img\", images_in)", "\n", "# Save all of these tensors from the tensor store as images", "\n", "save_tensors_as_images", "(", "self", ".", "tensor_store", ",", "[", "\n", "\"images_w\"", ",", "\n", "\"fpv_img\"", ",", "\n", "\"fpv_features\"", ",", "\n", "\"f_w\"", ",", "\n", "\"m_w\"", ",", "\n", "\"map_s_w_select\"", ",", "\n", "\"map_a_w_select\"", ",", "\n", "\"map_a_r_select\"", ",", "\n", "\"map_b_r_select\"", "\n", "]", ",", "str", "(", "self", ".", "seq_step", ")", ")", "\n", "\n", "# Save action as image", "\n", "action", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"action\"", ")", "[", "-", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "action_fname", "=", "get_viz_dir_for_rollout", "(", ")", "+", "\"action_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", "\n", "Presenter", "(", ")", ".", "save_action", "(", "action", ",", "action_fname", ",", "\"\"", ")", "\n", "\n", "instruction_fname", "=", "get_viz_dir_for_rollout", "(", ")", "+", "\"instruction.txt\"", "\n", "with", "open", "(", "instruction_fname", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "instruction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.get_action": [[318, 383], ["model_sm_rss_global.ModelTrajectoryTopDown.eval", "learning.inputs.vision.standardize_image", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "data_io.instructions.debug_untokenize_instruction", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "learning.inputs.common.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.", "model_sm_rss_global.ModelTrajectoryTopDown.squeeze().data.cpu().numpy", "print", "learning.inputs.sequence.none_padded_seq_to_tensor", "learning.inputs.sequence.none_padded_seq_to_tensor", "state.cuda.cuda.cuda", "model_sm_rss_global.ModelTrajectoryTopDown.save_viz", "model_sm_rss_global.ModelTrajectoryTopDown.rviz.publish_instruction_text", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img_in_t.cuda.cuda.cuda", "model_sm_rss_global.ModelTrajectoryTopDown.squeeze().data.cpu", "data_io.instructions.debug_untokenize_instruction", "model_sm_rss_global.ModelTrajectoryTopDown.squeeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.save_viz", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_instruction_text", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction"], ["", "", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        #TODO: Absorb corpus within model\n        :return:\n        \"\"\"", "\n", "# TODO: Simplify this", "\n", "self", ".", "eval", "(", ")", "\n", "images_np_pure", "=", "state", ".", "image", "\n", "state_np", "=", "state", ".", "state", "\n", "\n", "#print(\"Act: \" + debug_untokenize_instruction(instruction))", "\n", "\n", "images_np", "=", "standardize_image", "(", "images_np_pure", ")", "\n", "image_fpv", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "images_np", "]", ")", ")", "\n", "state", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "state_np", "]", ")", ")", "\n", "# Add the batch dimension", "\n", "\n", "first_step", "=", "True", "\n", "if", "instruction", "==", "self", ".", "prev_instruction", ":", "\n", "            ", "first_step", "=", "False", "\n", "", "self", ".", "prev_instruction", "=", "instruction", "\n", "instruction_str", "=", "debug_untokenize_instruction", "(", "instruction", ")", "\n", "\n", "# TODO: Move this to PomdpInterface (for now it's here because this is already visualizing the maps)", "\n", "if", "first_step", ":", "\n", "            ", "if", "self", ".", "rviz", "is", "not", "None", ":", "\n", "                ", "self", ".", "rviz", ".", "publish_instruction_text", "(", "\"instruction\"", ",", "debug_untokenize_instruction", "(", "instruction", ")", ")", "\n", "#if first_step:", "\n", "#    say(debug_untokenize_instruction(instruction))", "\n", "\n", "", "", "img_in_t", "=", "image_fpv", "\n", "img_in_t", ".", "volatile", "=", "True", "\n", "\n", "instr_len", "=", "[", "len", "(", "instruction", ")", "]", "if", "instruction", "is", "not", "None", "else", "None", "\n", "instruction", "=", "torch", ".", "LongTensor", "(", "instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "instruction", "=", "cuda_var", "(", "instruction", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n", "state", ".", "volatile", "=", "True", "\n", "\n", "if", "self", ".", "is_cuda", ":", "\n", "            ", "if", "img_in_t", "is", "not", "None", ":", "\n", "                ", "img_in_t", "=", "img_in_t", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "", "state", "=", "state", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "\n", "", "step_enc", "=", "None", "\n", "plan_now", "=", "None", "\n", "\n", "self", ".", "seq_step", "+=", "1", "\n", "\n", "action", "=", "self", "(", "img_in_t", ",", "state", ",", "instruction", ",", "instr_len", ",", "plan", "=", "plan_now", ",", "pos_enc", "=", "step_enc", ")", "\n", "\n", "# Save materials for analysis and presentation", "\n", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "            ", "self", ".", "save_viz", "(", "images_np_pure", ",", "instruction_str", ")", "\n", "\n", "", "output_action", "=", "action", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stop_prob", "=", "output_action", "[", "3", "]", "\n", "print", "(", "f\"P(STOP): {stop_prob}\"", ")", "\n", "output_stop", "=", "1", "if", "stop_prob", ">", "self", ".", "params", "[", "\"stop_p\"", "]", "else", "0", "\n", "output_action", "[", "3", "]", "=", "output_stop", "\n", "\n", "return", "output_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.deterministic_action": [[384, 390], ["action_mean.size", "torch.autograd.Variable", "torch.autograd.Variable", "learning.inputs.common.empty_float_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "deterministic_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "batch_size", "=", "action_mean", ".", "size", "(", "0", ")", "\n", "action", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "4", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "action", "[", ":", ",", "0", ":", "3", "]", "=", "action_mean", "[", ":", ",", "0", ":", "3", "]", "\n", "action", "[", ":", ",", "3", "]", "=", "stop_prob", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.start_sequence": [[392, 397], ["model_sm_rss_global.ModelTrajectoryTopDown.reset", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "print", "(", "\"RESETTED!\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.cam_poses_from_states": [[399, 414], ["learning.inputs.pose.Pose", "learning.inputs.pose.get_noisy_poses_torch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_torch"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "\n", "pos_variance", "=", "0", "\n", "rot_variance", "=", "0", "\n", "if", "self", ".", "use_pos_noise", ":", "\n", "            ", "pos_variance", "=", "self", ".", "params", "[", "\"noisy_pos_variance\"", "]", "\n", "", "if", "self", ".", "use_rot_noise", ":", "\n", "            ", "rot_variance", "=", "self", ".", "params", "[", "\"noisy_rot_variance\"", "]", "\n", "\n", "", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "if", "self", ".", "use_pos_noise", "or", "self", ".", "use_rot_noise", ":", "\n", "            ", "pose", "=", "get_noisy_poses_torch", "(", "pose", ",", "pos_variance", ",", "rot_variance", ",", "cuda", "=", "self", ".", "is_cuda", ",", "cuda_device", "=", "self", ".", "cuda_device", ")", "\n", "", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.forward": [[415, 548], ["model_sm_rss_global.ModelTrajectoryTopDown.cam_poses_from_states", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.img_to_features_w", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.map_accumulator_w", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.batch_select", "model_sm_rss_global.ModelTrajectoryTopDown.map_batch_fill_missing", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.input_required", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.map_to_action", "model_sm_rss_global.ModelTrajectoryTopDown.deterministic_action", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.sentence_embedding", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.sentence_embedding.get", "features_w.detach.detach.detach", "visualization.Presenter().show_image", "len", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.map_processor_a_w", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "visualization.Presenter().show_image", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.map_transform_w_to_r.set_maps", "model_sm_rss_global.ModelTrajectoryTopDown.map_transform_w_to_r.get_maps", "visualization.Presenter().show_image", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.map_processor_b_r", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "visualization.Presenter().show_image", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.map_processor_b_r.get_maps", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_sm_rss_global.ModelTrajectoryTopDown.map_transform_r_to_w.set_maps", "model_sm_rss_global.ModelTrajectoryTopDown.map_transform_r_to_w.get_maps", "visualization.Presenter().show_image", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "model_sm_rss_global.ModelTrajectoryTopDown.rviz.publish_map", "visualization.Presenter", "visualization.Presenter", "pos_enc.unsqueeze", "visualization.Presenter", "maps_b_w_select[].data.cpu().numpy().transpose", "maps_b_w_select[].data.cpu().numpy", "maps_b_w_select[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.deterministic_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_map", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "has_obs", "=", "None", ",", "plan", "=", "None", ",", "save_maps_only", "=", "False", ",", "pos_enc", "=", "None", ",", "noisy_poses", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param has_obs: list of booleans of length B indicating whether the given element in the sequence has an observation\n        :param yield_semantic_maps: If true, will not compute actions (full model), but return the semantic maps that\n            were built along the way in response to the images. This is ugly, but allows code reuse\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "g_poses", "=", "None", "#[None for pose in cam_poses]", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "#str_instr = debug_untokenize_instruction(instructions[0].data[:instr_lengths[0]])", "\n", "#print(\"Trn: \" + str_instr)", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", ",", "instr_lengths", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "features_w", ",", "coverages_w", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ".", "tensor_store", ",", "show", "=", "\"\"", ")", "\n", "\n", "# Don't back-prop into resnet if we're freezing these features (TODO: instead set requires grad to false)", "\n", "if", "self", ".", "params", "[", "\"freeze_feature_net\"", "]", ":", "\n", "            ", "features_w", "=", "features_w", ".", "detach", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"f_w\"", ",", "features_w", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"m_w\"", ",", "coverages_w", ")", "\n", "\n", "if", "run_metadata", ".", "IS_ROLLOUT", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "features_w", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"F\"", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "\n", "# Accumulate the egocentric features in a global map", "\n", "", "maps_w", "=", "self", ".", "map_accumulator_w", "(", "features_w", ",", "coverages_w", ",", "add_mask", "=", "has_obs", ",", "show", "=", "\"acc\"", "if", "IMG_DBG", "else", "\"\"", ")", "\n", "map_poses_w", "=", "g_poses", "\n", "\n", "# TODO: Maybe keep maps_w if necessary", "\n", "#self.tensor_store.keep_inputs(\"map_sm_local\", maps_m)", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_accumulate\"", ")", "\n", "\n", "# Throw away those timesteps that don't correspond to planning timesteps", "\n", "maps_w_select", ",", "map_poses_w_select", ",", "cam_poses_select", ",", "noisy_poses_select", ",", "_", ",", "sent_embeddings_select", ",", "pos_enc", "=", "self", ".", "batch_select", "(", "maps_w", ",", "map_poses_w", ",", "cam_poses", ",", "noisy_poses", ",", "None", ",", "sent_embeddings", ",", "pos_enc", ",", "plan", ")", "\n", "\n", "# Only process the maps on planning timesteps", "\n", "if", "len", "(", "maps_w_select", ")", ">", "0", ":", "\n", "            ", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_s_w_select\"", ",", "maps_w_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"batch_select\"", ")", "\n", "\n", "# Process the map via the two map_procesors", "\n", "# Do grounding of objects in the map chosen to do so", "\n", "maps_w_select", ",", "map_poses_w_select", "=", "self", ".", "map_processor_a_w", "(", "\n", "maps_w_select", ",", "sent_embeddings_select", ",", "map_poses_w_select", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_a_w_select\"", ",", "maps_w_select", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_w_select", ".", "data", "[", "0", "]", ",", "\"R_map_W\"", ",", "torch", "=", "True", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_gnd\"", ")", "\n", "\n", "self", ".", "map_transform_w_to_r", ".", "set_maps", "(", "maps_w_select", ",", "map_poses_w_select", ")", "\n", "maps_m_select", ",", "map_poses_m_select", "=", "self", ".", "map_transform_w_to_r", ".", "get_maps", "(", "cam_poses_select", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_m_select", ".", "data", "[", "0", "]", ",", "\"R_map_R\"", ",", "torch", "=", "True", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_a_r_select\"", ",", "maps_w_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"transform_w_to_r\"", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_a_r_perturbed_select\"", ",", "maps_m_select", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_perturb\"", ")", "\n", "\n", "# Include positional encoding for path prediction", "\n", "if", "pos_enc", "is", "not", "None", ":", "\n", "                ", "sent_embeddings_pp", "=", "torch", ".", "cat", "(", "[", "sent_embeddings_select", ",", "pos_enc", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "sent_embeddings_pp", "=", "sent_embeddings_select", "\n", "\n", "# Process the map via the two map_procesors (e.g. predict the trajectory that we'll be taking)", "\n", "", "maps_m_select", ",", "map_poses_m_select", "=", "self", ".", "map_processor_b_r", "(", "\n", "maps_m_select", ",", "sent_embeddings_pp", ",", "map_poses_m_select", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_b_r_select\"", ",", "maps_m_select", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_m_select", ".", "data", "[", "0", "]", ",", "\"G_map_R\"", ",", "torch", "=", "True", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "\n", "if", "True", ":", "\n", "                ", "self", ".", "map_transform_r_to_w", ".", "set_maps", "(", "maps_m_select", ",", "map_poses_m_select", ")", "\n", "maps_b_w_select", ",", "_", "=", "self", ".", "map_transform_r_to_w", ".", "get_maps", "(", "None", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_b_w_select", ".", "data", "[", "0", "]", ",", "\"G_map_G\"", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_b_w_select\"", ",", "maps_b_w_select", ")", "\n", "if", "self", ".", "rviz", ":", "\n", "                    ", "self", ".", "rviz", ".", "publish_map", "(", "\"goal_map\"", ",", "maps_b_w_select", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "", "", "self", ".", "prof", ".", "tick", "(", "\"map_proc_b\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "maps_m_select", "=", "None", "\n", "\n", "", "maps_m", ",", "map_poses_m", "=", "self", ".", "map_batch_fill_missing", "(", "maps_m_select", ",", "cam_poses", ",", "plan", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_b_r\"", ",", "maps_m", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_fill_missing\"", ")", "\n", "\n", "# Keep global maps for auxiliary objectives if necessary", "\n", "if", "self", ".", "aux_losses", ".", "input_required", "(", "\"map_b_w\"", ")", ":", "\n", "            ", "maps_b", ",", "_", "=", "self", ".", "map_processor_b_r", ".", "get_maps", "(", "g_poses", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_b_w\"", ",", "maps_b", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"keep_global_maps\"", ")", "\n", "\n", "if", "run_metadata", ".", "IS_ROLLOUT", ":", "\n", "            ", "pass", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_m", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"plan_map_now\"", ",", "torch", "=", "True", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_w", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"sm_map_now\"", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"viz\"", ")", "\n", "\n", "# Output the final action given the processed map", "\n", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_m", ",", "sent_embeddings", ")", "\n", "out_action", "=", "self", ".", "deterministic_action", "(", "action_pred", "[", ":", ",", "0", ":", "3", "]", ",", "None", ",", "action_pred", "[", ":", ",", "3", "]", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"action\"", ",", "out_action", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_to_action\"", ")", "\n", "\n", "return", "out_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.maybe_cuda": [[550, 555], ["tensor.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.cuda_var": [[556, 558], ["learning.inputs.common.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "cuda_var", "(", "tensor", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.sup_loss_on_batch": [[560, 734], ["model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "torch.autograd.Variable", "torch.autograd.Variable", "model_sm_rss_global.ModelTrajectoryTopDown.maybe_cuda", "model_sm_rss_global.ModelTrajectoryTopDown.maybe_cuda", "model_sm_rss_global.ModelTrajectoryTopDown.maybe_cuda", "model_sm_rss_global.ModelTrajectoryTopDown.maybe_cuda", "model_sm_rss_global.ModelTrajectoryTopDown.maybe_cuda", "model_sm_rss_global.ModelTrajectoryTopDown.size", "model_sm_rss_global.ModelTrajectoryTopDown.size", "range", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.calculate_aux_loss", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.combine_losses", "model_sm_rss_global.ModelTrajectoryTopDown.writer.add_dict", "model_sm_rss_global.ModelTrajectoryTopDown.writer.add_dict", "model_sm_rss_global.ModelTrajectoryTopDown.writer.add_scalar", "model_sm_rss_global.ModelTrajectoryTopDown.writer.add_scalar", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.inc_iter", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.prof.loop", "model_sm_rss_global.ModelTrajectoryTopDown.prof.print_stats", "learning.inputs.common.empty_float_tensor", "print", "model_sm_rss_global.ModelTrajectoryTopDown.reset", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "learning.inputs.sequence.len_until_nones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.maybe_cuda", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.input_required", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.input_required", "model_sm_rss_global.ModelTrajectoryTopDown.aux_losses.input_required", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.", "model_sm_rss_global.ModelTrajectoryTopDown.action_loss", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "model_sm_rss_global.ModelTrajectoryTopDown.action_loss.batch_reduce_loss", "model_sm_rss_global.ModelTrajectoryTopDown.action_loss.reduce_loss", "model_sm_rss_global.ModelTrajectoryTopDown.prof.tick", "learning.meters_and_metrics.meter_server.get_current_meters", "model_sm_rss_global.ModelTrajectoryTopDown.get_iter", "model_sm_rss_global.ModelTrajectoryTopDown.get_iter", "action_loss_avg.data.cpu().item", "model_sm_rss_global.ModelTrajectoryTopDown.get_iter", "model_sm_rss_global.ModelTrajectoryTopDown.goal_acc_meter.get", "model_sm_rss_global.ModelTrajectoryTopDown.get_iter", "transformations.pos_m_to_px", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "model_sm_rss_global.ModelTrajectoryTopDown.tensor_store.keep_inputs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_sm_rss_global.ModelTrajectoryTopDown.numpy", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "model_sm_rss_global.ModelTrajectoryTopDown.cuda_var", "range", "range", "action_loss_avg.data.cpu", "transformations.pos_m_to_px", "s.long", "enumerate", "enumerate", "enumerate", "p.numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.combine_losses", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.len_until_nones", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.batch_reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "action_loss_total", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "return", "action_loss_total", "\n", "\n", "", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", ")", "\n", "\n", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", ")", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", ")", "\n", "actions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"actions\"", "]", ")", "\n", "\n", "# Auxiliary labels", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "\n", "lm_pos_map", "=", "batch", "[", "\"lm_pos_map\"", "]", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "\n", "goal_pos_map", "=", "batch", "[", "\"goal_loc\"", "]", "\n", "\n", "# TODO: Get rid of this. We will have lm_mentioned booleans and lm_mentioned_idx integers and that's it.", "\n", "TEMPLATES", "=", "True", "\n", "if", "TEMPLATES", ":", "\n", "            ", "lm_mentioned_tplt", "=", "batch", "[", "\"lm_mentioned_tplt\"", "]", "\n", "side_mentioned_tplt", "=", "batch", "[", "\"side_mentioned_tplt\"", "]", "\n", "", "else", ":", "\n", "            ", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "\n", "", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "\n", "\n", "\n", "# stops = self.maybe_cuda(batch[\"stops\"])", "\n", "masks", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"masks\"", "]", ")", "\n", "# This is the first-timestep metadata", "\n", "metadata", "=", "batch", "[", "\"md\"", "]", "\n", "\n", "seq_len", "=", "images", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "count", "=", "0", "\n", "correct_goal_count", "=", "0", "\n", "goal_count", "=", "0", "\n", "\n", "# Loop thru batch", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "seg_idx", "=", "-", "1", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "b_seq_len", "=", "len_until_nones", "(", "metadata", "[", "b", "]", ")", "\n", "\n", "# TODO: Generalize this", "\n", "# Slice the data according to the sequence length", "\n", "b_metadata", "=", "metadata", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_images", "=", "images", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instructions", "=", "instructions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instr_len", "=", "instr_lengths", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_states", "=", "states", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_actions", "=", "actions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_pos_fpv", "=", "lm_pos_fpv", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_pos_map", "=", "lm_pos_map", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_indices", "=", "lm_indices", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_goal_pos", "=", "goal_pos_map", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "if", "not", "TEMPLATES", ":", "\n", "                ", "b_lang_lm_mentioned", "=", "lang_lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "", "b_lm_mentioned", "=", "lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "\n", "# Convert landmark and goal position from meters_and_metrics to pixels", "\n", "b_lm_pos_map", "=", "[", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "p", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "b_lm_pos_map", "]", "\n", "\n", "b_goal_pos", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "b_goal_pos", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "\n", "b_lm_pos_map", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_pos_map", "]", "\n", "b_lm_pos_fpv", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "RESNET_FACTOR", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_pos_fpv", "]", "\n", "b_lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_indices", "]", "\n", "b_goal_pos", "=", "self", ".", "cuda_var", "(", "b_goal_pos", ")", "\n", "if", "not", "TEMPLATES", ":", "\n", "                ", "b_lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "b_lang_lm_mentioned", ")", "\n", "", "b_lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_mentioned", "]", "\n", "\n", "# TODO: Figure out how to keep these properly. Perhaps as a whole batch is best", "\n", "# TODO: Introduce a key-value store (encapsulate instead of inherit)", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_fpv\"", ",", "b_lm_pos_fpv", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "b_lm_pos_map", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "b_lm_indices", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map\"", ",", "b_goal_pos", ")", "\n", "if", "not", "TEMPLATES", ":", "\n", "                ", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "b_lang_lm_mentioned", ")", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "b_lm_mentioned", ")", "\n", "\n", "# TODO: Abstract all of these if-elses in a modular way once we know which ones are necessary", "\n", "if", "TEMPLATES", ":", "\n", "                ", "b_lm_mentioned_tplt", "=", "lm_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "side_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_side_mentioned_tplt", ")", "\n", "b_lm_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned_tplt\"", ",", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"side_mentioned_tplt\"", ",", "b_side_mentioned_tplt", ")", "\n", "\n", "#b_lm_mentioned = b_lm_mentioned_tplt", "\n", "\n", "", "b_obs_mask", "=", "[", "True", "for", "_", "in", "range", "(", "b_seq_len", ")", "]", "\n", "b_plan_mask", "=", "[", "True", "for", "_", "in", "range", "(", "b_seq_len", ")", "]", "\n", "b_plan_mask_t_cpu", "=", "torch", ".", "Tensor", "(", "b_plan_mask", ")", "==", "True", "\n", "b_plan_mask_t", "=", "self", ".", "maybe_cuda", "(", "b_plan_mask_t_cpu", ")", "\n", "b_pos_enc", "=", "None", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "# Optional Auxiliary Inputs", "\n", "# ----------------------------------------------------------------------------", "\n", "if", "self", ".", "aux_losses", ".", "input_required", "(", "\"lm_pos_map_select\"", ")", ":", "\n", "                ", "b_lm_pos_map_select", "=", "[", "lm_pos", "for", "i", ",", "lm_pos", "in", "enumerate", "(", "b_lm_pos_map", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map_select\"", ",", "b_lm_pos_map_select", ")", "\n", "", "if", "self", ".", "aux_losses", ".", "input_required", "(", "\"lm_indices_select\"", ")", ":", "\n", "                ", "b_lm_indices_select", "=", "[", "lm_idx", "for", "i", ",", "lm_idx", "in", "enumerate", "(", "b_lm_indices", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices_select\"", ",", "b_lm_indices_select", ")", "\n", "", "if", "self", ".", "aux_losses", ".", "input_required", "(", "\"lm_mentioned_select\"", ")", ":", "\n", "                ", "b_lm_mentioned_select", "=", "[", "lm_m", "for", "i", ",", "lm_m", "in", "enumerate", "(", "b_lm_mentioned", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned_select\"", ",", "b_lm_mentioned_select", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"inputs\"", ")", "\n", "\n", "actions", "=", "self", "(", "b_images", ",", "b_states", ",", "b_instructions", ",", "b_instr_len", ",", "\n", "has_obs", "=", "b_obs_mask", ",", "plan", "=", "b_plan_mask", ",", "pos_enc", "=", "b_pos_enc", ")", "\n", "\n", "action_losses", ",", "_", "=", "self", ".", "action_loss", "(", "b_actions", ",", "actions", ",", "batchreduce", "=", "False", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "\n", "action_losses", "=", "self", ".", "action_loss", ".", "batch_reduce_loss", "(", "action_losses", ")", "\n", "action_loss", "=", "self", ".", "action_loss", ".", "reduce_loss", "(", "action_losses", ")", "\n", "\n", "action_loss_total", "=", "action_loss", "\n", "count", "+=", "b_seq_len", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"loss\"", ")", "\n", "\n", "", "action_loss_avg", "=", "action_loss_total", "/", "(", "count", "+", "1e-9", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# Doing this in the end (outside of se", "\n", "aux_losses", "=", "self", ".", "aux_losses", ".", "calculate_aux_loss", "(", "self", ".", "tensor_store", ",", "reduce_average", "=", "True", ")", "\n", "aux_loss", "=", "self", ".", "aux_losses", ".", "combine_losses", "(", "aux_losses", ",", "self", ".", "aux_weights", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "aux_losses", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss_avg", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "# TODO: Log value here", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/goal_accuracy\"", ",", "self", ".", "goal_acc_meter", ".", "get", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"auxiliaries\"", ")", "\n", "\n", "total_loss", "=", "action_loss_avg", "+", "aux_loss", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_rss_global.ModelTrajectoryTopDown.get_dataset": [[735, 751], ["data_sources.append", "data_sources.append", "data_sources.append", "learning.datasets.segment_dataset_simple.SegmentDataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "#if self.fpv:", "\n", "        ", "data_sources", "=", "[", "]", "\n", "# If we're running auxiliary objectives, we need to include the data sources for the auxiliary labels", "\n", "#if self.use_aux_class_features or self.use_aux_class_on_map or self.use_aux_grounding_features or self.use_aux_grounding_on_map:", "\n", "#if self.use_aux_goal_on_map:", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_GOAL_POS", ")", "\n", "#data_sources.append(aup.PROVIDER_LANDMARKS_MENTIONED)", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "#if self.use_rot_noise or self.use_pos_noise:", "\n", "#    data_sources.append(aup.PROVIDER_POSE_NOISE)", "\n", "\n", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic.PVN_Stage1_Critic.__init__": [[22, 61], ["learning.models.wasserstein_critic_base.WassersteinCriticBase.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "model_pvn_stage1_critic.PVN_Stage1_Critic.params.get", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "parameters.parameter_server.get_current_parameters", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage1_Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage1_critic\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.model_name}\"", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelCritic\"", "]", "\n", "nc", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "\n", "ndf", "=", "self", ".", "params", "[", "\"critic_channels\"", "]", "\n", "self", ".", "grad_penalty_weight", "=", "self", ".", "params", "[", "\"grad_penalty_weight\"", "]", "\n", "self", ".", "clip_value", "=", "self", ".", "params", "[", "\"clip_value\"", "]", "\n", "\n", "self", ".", "env_id_range", "=", "self", ".", "params", ".", "get", "(", "'env_id_range'", ",", "None", ")", "\n", "\n", "# if True, remove batch normalization", "\n", "self", ".", "improved", "=", "True", "\n", "# TODO: try more sophisticated networks.", "\n", "# Indeed network cannot be too strong because of Wasserstein GAN property", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 18 x 32", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "nc", ",", "out_channels", "=", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 9 x 16", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", ",", "out_channels", "=", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 4 x 8", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", "*", "2", ",", "out_channels", "=", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 2 x 4", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", "*", "2", ",", "out_channels", "=", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 1 x 2", "\n", ")", "\n", "\n", "self", ".", "regressor", "=", "nn", ".", "Linear", "(", "(", "ndf", "*", "4", ")", "*", "2", ",", "1", ")", "\n", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic.PVN_Stage1_Critic.set_model_name": [[62, 65], ["utils.logging_summary_writer.LoggingSummaryWriter"], "methods", ["None"], ["", "def", "set_model_name", "(", "self", ",", "new_model_name", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "new_model_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"runs/{self.run_name}/{self.model_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic.PVN_Stage1_Critic.init_weights": [[66, 68], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic.PVN_Stage1_Critic.forward": [[69, 74], ["model_pvn_stage1_critic.PVN_Stage1_Critic.main", "features.view.view.view", "model_pvn_stage1_critic.PVN_Stage1_Critic.regressor", "model_pvn_stage1_critic.PVN_Stage1_Critic.view().squeeze", "features.view.view.size", "model_pvn_stage1_critic.PVN_Stage1_Critic.view"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.main"], ["", "def", "forward", "(", "self", ",", "fpv_features", ")", ":", "\n", "        ", "features", "=", "self", ".", "main", "(", "fpv_features", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "regressor", "(", "features", ")", "\n", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic.PVN_Stage1_Critic.cuda_var": [[75, 77], ["tensor.to", "next", "model_pvn_stage1_critic.PVN_Stage1_Critic.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic.PVN_Stage1_Critic.calc_domain_loss": [[79, 117], ["learning.modules.key_tensor_store.KeyTensorStore", "real_activation_store.get_inputs_batch", "sim_activation_store.get_inputs_batch", "model_pvn_stage1_critic.PVN_Stage1_Critic.", "model_pvn_stage1_critic.PVN_Stage1_Critic.", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "model_pvn_stage1_critic.PVN_Stage1_Critic.writer.add_scalar", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "model_pvn_stage1_critic.PVN_Stage1_Critic.writer.add_scalar", "model_pvn_stage1_critic.PVN_Stage1_Critic.inc_iter", "model_pvn_stage1_critic.PVN_Stage1_Critic.clip_weights", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_wass.item", "model_pvn_stage1_critic.PVN_Stage1_Critic.get_iter", "model_pvn_stage1_critic.PVN_Stage1_Critic.calc_gradient_penalty", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "loss_wass.item", "model_pvn_stage1_critic.PVN_Stage1_Critic.get_iter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.clip_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.calc_gradient_penalty", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter"], ["", "def", "calc_domain_loss", "(", "self", ",", "real_activation_store", ",", "sim_activation_store", ")", ":", "\n", "\n", "        ", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "\n", "features_real", "=", "real_activation_store", ".", "get_inputs_batch", "(", "\"fpv_features\"", ",", "cat_not_stack", "=", "True", ")", "\n", "features_sim", "=", "sim_activation_store", ".", "get_inputs_batch", "(", "\"fpv_features\"", ",", "cat_not_stack", "=", "True", ")", "\n", "\n", "# Real and simulated features might have different trajectory lengths. This could give away the source domain.", "\n", "# To deal with this, randomly sample a subset of the longest trajectory.", "\n", "\n", "# Use weight clipping instead of gradient penalty", "\n", "if", "self", ".", "grad_penalty_weight", "<=", "0", ":", "\n", "            ", "self", ".", "clip_weights", "(", ")", "\n", "\n", "# TODO: Handle different length sequences - choose number of feature maps to randomly sample", "\n", "", "pred_real", "=", "self", "(", "features_real", ")", "\n", "pred_sim", "=", "self", "(", "features_sim", ")", "\n", "\n", "# cf Wasserstein GAN paper. The critic tries to maximize this difference.", "\n", "loss_wass", "=", "torch", ".", "mean", "(", "pred_real", ")", "-", "torch", ".", "mean", "(", "pred_sim", ")", "\n", "\n", "tensor_store", ".", "keep_input", "(", "\"wass_loss\"", ",", "loss_wass", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{prefix}/wass_loss\"", ",", "loss_wass", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "total_loss", "=", "loss_wass", "\n", "if", "self", ".", "grad_penalty_weight", ">", "0", ":", "\n", "            ", "gradient_loss", "=", "self", ".", "calc_gradient_penalty", "(", "features_real", ",", "features_sim", ")", "\n", "tensor_store", ".", "keep_input", "(", "\"gradient_loss\"", ",", "gradient_loss", ")", "\n", "total_loss", "+=", "self", ".", "grad_penalty_weight", "*", "gradient_loss", "\n", "\n", "", "tensor_store", ".", "keep_input", "(", "\"total_loss\"", ",", "total_loss", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{prefix}/wass_loss_with_penalty\"", ",", "loss_wass", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "return", "total_loss", ",", "tensor_store", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.__init__": [[65, 252], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "print", "learning.modules.img_to_map.fpv_to_global_map.FPVToGlobalMap", "learning.modules.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "learning.modules.map_to_map.ratio_path_predictor.RatioPathPredictor", "print", "print", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "data_io.weights.enable_weight_saving", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.print_auxiliary_info", "learning.modules.action_loss.ActionLoss", "parameters.parameter_server.get_current_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "learning.modules.map_to_map.random_perturb.MapPerturbation", "learning.modules.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "data_io.weights.enable_weight_saving", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "str", "str", "Exception", "learning.modules.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.goal_auxiliary.GoalAuxiliary2D", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.add_auxiliary", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "domain", "=", "\"sim\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage1_Original_Bidomain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage1_original_bidomain\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.domain}\"", ")", "\n", "\n", "self", ".", "root_params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "\n", "self", ".", "params", "=", "self", ".", "root_params", "[", "\"Stage1\"", "]", "\n", "self", ".", "use_aux", "=", "self", ".", "root_params", "[", "\"UseAux\"", "]", "\n", "self", ".", "aux_weights", "=", "self", ".", "root_params", "[", "\"AuxWeights\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "self", ".", "use_aux_class_features", "=", "self", ".", "aux_params", "[", "\"class_features\"", "]", "\n", "self", ".", "use_aux_grounding_features", "=", "self", ".", "aux_params", "[", "\"grounding_features\"", "]", "\n", "self", ".", "use_aux_class_on_map", "=", "self", ".", "aux_params", "[", "\"class_map\"", "]", "\n", "self", ".", "use_aux_grounding_on_map", "=", "self", ".", "aux_params", "[", "\"grounding_map\"", "]", "\n", "self", ".", "use_aux_goal_on_map", "=", "self", ".", "aux_params", "[", "\"goal_map\"", "]", "\n", "self", ".", "use_aux_lang", "=", "self", ".", "aux_params", "[", "\"lang\"", "]", "\n", "self", ".", "use_aux_traj_on_map", "=", "False", "\n", "self", ".", "use_aux_traj_on_map_ratio", "=", "self", ".", "aux_params", "[", "\"path\"", "]", "\n", "self", ".", "use_aux_reg_map", "=", "self", ".", "aux_params", "[", "\"regularize_map\"", "]", "\n", "\n", "self", ".", "do_perturb_maps", "=", "self", ".", "params", "[", "\"perturb_maps\"", "]", "\n", "print", "(", "\"Perturbing maps: \"", ",", "self", ".", "do_perturb_maps", ")", "\n", "\n", "# Path-pred FPV model definition", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "self", ".", "num_feature_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "# + params[\"relevance_channels\"]", "\n", "# TODO: Fix this for if we don't have grounding", "\n", "self", ".", "num_map_channels", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", "\n", "\n", "self", ".", "img_to_features_w", "=", "FPVToGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "res_channels", "=", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "map_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "img_w", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "img_h", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "cam_h_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "img_dbg", "=", "IMG_DBG", ")", "\n", "\n", "self", ".", "map_accumulator_w", "=", "LeakyIntegratorGlobalMap", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Pre-process the accumulated map to do language grounding if necessary - in the world reference frame", "\n", "if", "self", ".", "use_aux_grounding_on_map", "and", "not", "self", ".", "use_aux_grounding_features", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "LangFilterMapProcessor", "(", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "spatial", "=", "False", ",", "cat_out", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "IdentityMapProcessor", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "", "self", ".", "map_processor_a_w2", "=", "IdentityMapProcessor", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Process the global accumulated map", "\n", "self", ".", "map_processor_b_r", "=", "RatioPathPredictor", "(", "\n", "lingunet_params", "=", "self", ".", "params", "[", "\"lingunet\"", "]", ",", "\n", "prior_channels_in", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "posterior_channels_in", "=", "self", ".", "num_map_channels", ",", "\n", "compute_prior", "=", "self", ".", "params", "[", "\"compute_prior\"", "]", ",", "\n", "use_prior", "=", "self", ".", "params", "[", "\"use_prior_only\"", "]", ")", "\n", "\n", "print", "(", "\"UNet Channels: \"", "+", "str", "(", "self", ".", "num_map_channels", ")", ")", "\n", "print", "(", "\"Feature Channels: \"", "+", "str", "(", "self", ".", "num_feature_channels", ")", ")", "\n", "\n", "self", ".", "second_transform", "=", "self", ".", "do_perturb_maps", "or", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "\n", "\n", "if", "self", ".", "second_transform", ":", "\n", "            ", "self", ".", "map_perturb", "=", "MapPerturbation", "(", "\n", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "if", "self", ".", "use_aux_goal_on_map", ":", "\n", "                ", "raise", "Exception", "(", "\"Perturbed maps not supported together with map goal auxiliary\"", ")", "\n", "\n", "# Sentence Embedding", "\n", "", "", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ")", "\n", "\n", "self", ".", "map_transform_w_to_s", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "self", ".", "map_transform_r_to_w", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "# Batch select is used to drop and forget semantic maps at those timestaps that we're not planning in", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "# Since we only have path predictions for some timesteps (the ones not dropped above), we use this to fill", "\n", "# in the missing pieces by reorienting the past trajectory prediction into the frame of the current timestep", "\n", "self", ".", "map_batch_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "# Passing true to freeze will freeze these weights regardless of whether they've been explicitly reloaded or not", "\n", "enable_weight_saving", "(", "self", ".", "sentence_embedding", ",", "\"sentence_embedding\"", ",", "alwaysfreeze", "=", "self", ".", "act_only", ")", "\n", "\n", "# Output an action given the global semantic map", "\n", "if", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"downsample2\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "EgoMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "other_features_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ")", "\n", "\n", "", "elif", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"cropped\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "CroppedMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "manual", "=", "self", ".", "params", "[", "\"manual_rule\"", "]", ",", "\n", "path_only", "=", "self", ".", "params", "[", "\"action_in_path_only\"", "]", ",", "\n", "recurrence", "=", "self", ".", "params", "[", "\"action_recurrence\"", "]", ")", "\n", "\n", "", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "if", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", ":", "\n", "            ", "self", ".", "gt_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "", "if", "self", ".", "params", "[", "\"load_action_policy\"", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "# Don't freeze the trajectory to action weights, because it will be pre-trained during path-prediction training", "\n", "# and finetuned on all timesteps end-to-end", "\n", "            ", "enable_weight_saving", "(", "self", ".", "map_to_action", ",", "\"map_to_action\"", ",", "alwaysfreeze", "=", "False", ",", "neverfreeze", "=", "True", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# We add all auxiliaries that are necessary. The first argument is the auxiliary name, followed by parameters,", "\n", "# followed by variable number of names of inputs. ModuleWithAuxiliaries will automatically collect these inputs", "\n", "# that have been saved with keep_auxiliary_input() during execution", "\n", "", "if", "self", ".", "use_aux_class_features", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class\"", ",", "None", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_indices\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_grounding_features", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_ground\"", ",", "None", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_mentioned\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_class_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class_map\"", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"map_s_w_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_indices_select\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_grounding_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_grounding_map\"", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"map_a_w_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_mentioned_select\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_goal_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "GoalAuxiliary2D", "(", "\"aux_goal_map\"", ",", "self", ".", "params", "[", "\"goal_channels\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "\"map_b_w\"", ",", "\"goal_pos_map\"", ")", ")", "\n", "\n", "# CoRL model uses alignment-model groundings", "\n", "", "elif", "self", ".", "use_aux_lang", ":", "\n", "# one output for each landmark, 2 classes per output. This is for finetuning, so use the embedding that's gonna be fine tuned", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm_nl\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "", "lossfunc", "=", "self", ".", "params", "[", "\"path_loss_function\"", "]", "\n", "if", "self", ".", "use_aux_traj_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"aux_path\"", ",", "lossfunc", ",", "\"map_b_r_select\"", ",", "\"traj_gt_r_select\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux_traj_on_map_ratio", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"aux_path_prior\"", ",", "lossfunc", ",", "\"map_b_r_prior_select\"", ",", "\"traj_gt_r_select\"", ")", ")", "\n", "self", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"aux_path_posterior\"", ",", "lossfunc", ",", "\"map_b_r_posterior_select\"", ",", "\"traj_gt_r_select\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux_reg_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"aux_regularize_features\"", ",", "None", ",", "\"l1\"", ",", "\n", "\"map_s_w_select\"", ",", "\"lm_pos_map_select\"", ")", ")", "\n", "\n", "", "self", ".", "goal_good_criterion", "=", "GoalPredictionGoodCriterion", "(", "ok_distance", "=", "3.2", ")", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n", "self", ".", "print_auxiliary_info", "(", ")", "\n", "\n", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "total_goals", "=", "0", "\n", "self", ".", "correct_goals", "=", "0", "\n", "\n", "self", ".", "visitation_ground_truth", "=", "False", "\n", "self", ".", "use_visitation_ground_truth", "=", "False", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "env_img", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "self", ".", "gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda": [[254, 273], ["ModuleWithAuxiliaries.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.sentence_embedding.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_accumulator_w.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w2.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_b_r.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.img_to_features_w.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_to_action.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.action_loss.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_batch_fill_missing.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_w_to_s.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_r_to_w.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.batch_select.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_perturb.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.gt_fill_missing.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "ModuleWithAuxiliaries", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "sentence_embedding", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_accumulator_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_a_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_a_w2", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_b_r", ".", "cuda", "(", "device", ")", "\n", "self", ".", "img_to_features_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_to_action", ".", "cuda", "(", "device", ")", "\n", "self", ".", "action_loss", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_w_to_s", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "batch_select", ".", "cuda", "(", "device", ")", "\n", "if", "self", ".", "second_transform", ":", "\n", "            ", "self", ".", "map_perturb", ".", "cuda", "(", "device", ")", "\n", "", "if", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", ":", "\n", "            ", "self", ".", "gt_fill_missing", ".", "cuda", "(", "device", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_iter": [[274, 276], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.inc_iter": [[277, 279], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.load_state_dict": [[280, 290], ["super().load_state_dict", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.params.get", "data_io.model_io.load_pytorch_model", "print", "data_io.model_io.load_pytorch_model", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "super", "(", "PVN_Stage1_Original_Bidomain", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "if", "self", ".", "params", ".", "get", "(", "\"load_image_feature\"", ")", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "img_to_features_w", ",", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "print", "(", "\"Loaded image-to-features weights from file: \"", "+", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "\n", "# Override loading of weights to use the pre-trained action module", "\n", "", "if", "self", ".", "params", "[", "\"load_action_policy\"", "]", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "map_to_action", ",", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "print", "(", "\"Loaded map-to-action weights from file: \"", "+", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.init_weights": [[291, 307], ["model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.img_to_features_w.init_weights", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_accumulator_w.init_weights", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.sentence_embedding.init_weights", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_to_action.init_weights", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w.init_weights", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_b_r.init_weights", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w2.init_weights", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.params.get", "data_io.model_io.load_pytorch_model", "print", "data_io.model_io.load_pytorch_model", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "map_to_action", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_a_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_b_r", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_a_w2", ".", "init_weights", "(", ")", "\n", "\n", "if", "self", ".", "params", ".", "get", "(", "\"load_image_feature\"", ")", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "img_to_features_w", ",", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "print", "(", "\"Loaded image-to-features weights from file: \"", "+", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "\n", "", "if", "self", ".", "params", "[", "\"load_action_policy\"", "]", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "map_to_action", ",", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "print", "(", "\"Loaded map-to-action weights from file: \"", "+", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.reset": [[308, 326], ["super().reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.sentence_embedding.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.img_to_features_w.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_accumulator_w.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w2.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_b_r.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_w_to_s.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_r_to_w.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_batch_fill_missing.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_perturb.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.gt_fill_missing.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "# TODO: This is error prone. Create a class StatefulModule, iterate submodules and reset all stateful modules", "\n", "        ", "super", "(", "PVN_Stage1_Original_Bidomain", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_a_w", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_a_w2", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_b_r", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_w_to_s", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "reset", "(", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "reset", "(", ")", "\n", "if", "self", ".", "second_transform", ":", "\n", "            ", "self", ".", "map_perturb", ".", "reset", "(", ")", "\n", "", "if", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", ":", "\n", "            ", "self", ".", "gt_fill_missing", ".", "reset", "(", ")", "\n", "", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.setEnvContext": [[327, 332], ["print", "data_io.env.load_env_img", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "self", ".", "env_img", "=", "env", ".", "load_env_img", "(", "self", ".", "env_id", ",", "256", ",", "256", ")", "\n", "self", ".", "env_img", "=", "self", ".", "env_img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.set_ground_truth_visitation_d": [[334, 339], ["visitation_distribution_g.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "set_ground_truth_visitation_d", "(", "self", ",", "visitation_distribution_g", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "visitation_distribution_g", "=", "visitation_distribution_g", ".", "cuda", "(", ")", "\n", "", "self", ".", "visitation_ground_truth", "=", "visitation_distribution_g", "\n", "self", ".", "use_visitation_ground_truth", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.start_segment_rollout": [[340, 350], ["learning.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_segment_rollout", "(", "self", ")", ":", "\n", "        ", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "m_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", "\n", "w_size", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "\n", "self", ".", "gt_labels", "=", "get_top_down_ground_truth_static_global", "(", "\n", "md", ".", "ENV_ID", ",", "md", ".", "START_IDX", ",", "md", ".", "END_IDX", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "self", ".", "seg_idx", "=", "md", ".", "SEG_IDX", "\n", "self", ".", "gt_labels", "=", "self", ".", "maybe_cuda", "(", "self", ".", "gt_labels", ")", "\n", "if", "self", ".", "params", "[", "\"clear_history\"", "]", ":", "\n", "            ", "self", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.scale_images": [[351, 356], ["scipy.misc.imresize"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.imresize.imresize"], ["", "", "def", "scale_images", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "images", ".", "shape", "[", "0", "]", "==", "72", "and", "images", ".", "shape", "[", "1", "]", "==", "144", ":", "\n", "            ", "return", "images", "\n", "", "images", "=", "imresize", "(", "images", ",", "(", "72", ",", "144", ")", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_action": [[357, 453], ["utils.simple_profiler.SimpleProfiler", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.scale_images", "learning.inputs.vision.standardize_image", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "learning.inputs.common.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.squeeze().data.cpu().numpy", "learning.inputs.sequence.none_padded_seq_to_tensor", "learning.inputs.sequence.none_padded_seq_to_tensor", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cam_poses_from_states", "state.cuda.cuda.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_path_pos_encoding", "start_pose.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cam_poses_from_states", "learning.modules.map_transformer_base.MapTransformerBase", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "learning.modules.map_transformer_base.MapTransformerBase.set_maps", "learning.modules.map_transformer_base.MapTransformerBase.get_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.clear_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.clear_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.write_debug_data", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.save_viz", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img_in_t.cuda.cuda.cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.squeeze().data.cpu", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.squeeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.scale_images", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_path_pos_encoding", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.clear_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.clear_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.write_debug_data", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.save_viz", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        #TODO: Absorb corpus within model\n        :return:\n        \"\"\"", "\n", "prof", "=", "SimpleProfiler", "(", "print", "=", "True", ")", "\n", "prof", ".", "tick", "(", "\".\"", ")", "\n", "# TODO: Simplify this", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "images_np_pure", "=", "state", ".", "image", "\n", "state_np", "=", "state", ".", "state", "\n", "\n", "#print(\"Act: \" + debug_untokenize_instruction(instruction))", "\n", "\n", "# We might want to run the simulator at higher resultions in test time to get nice FPV videos.", "\n", "# If that's what we're doing, we need to scale the images back to the correct resolution", "\n", "images_np", "=", "self", ".", "scale_images", "(", "images_np_pure", ")", "\n", "images_np", "=", "standardize_image", "(", "images_np", ")", "\n", "image_fpv", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "images_np", "]", ")", ")", "\n", "state", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "state_np", "]", ")", ")", "\n", "# Add the batch dimension", "\n", "\n", "first_step", "=", "True", "\n", "if", "instruction", "==", "self", ".", "prev_instruction", ":", "\n", "                ", "first_step", "=", "False", "\n", "", "self", ".", "prev_instruction", "=", "instruction", "\n", "if", "first_step", ":", "\n", "                ", "self", ".", "get_act_start_pose", "=", "self", ".", "cam_poses_from_states", "(", "state", "[", "0", ":", "1", "]", ")", "\n", "\n", "", "img_in_t", "=", "image_fpv", "\n", "img_in_t", ".", "volatile", "=", "True", "\n", "\n", "instr_len", "=", "[", "len", "(", "instruction", ")", "]", "if", "instruction", "is", "not", "None", "else", "None", "\n", "instruction", "=", "torch", ".", "LongTensor", "(", "instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "instruction", "=", "cuda_var", "(", "instruction", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n", "state", ".", "volatile", "=", "True", "\n", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "if", "img_in_t", "is", "not", "None", ":", "\n", "                    ", "img_in_t", "=", "img_in_t", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "", "state", "=", "state", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "\n", "", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", ",", "MODEL_FPV_SAVE_MAPS_ONLY", ",", "PVN_STAGE1_ONLY", "]", ":", "\n", "                ", "step_enc", "=", "self", ".", "get_path_pos_encoding", "(", "[", "True", "]", ",", "None", ",", "self", ".", "seq_step", ")", "\n", "plan_now", "=", "[", "self", ".", "seq_step", "%", "self", ".", "params", "[", "\"plan_every_n_steps\"", "]", "==", "0", "or", "first_step", "]", "\n", "", "else", ":", "\n", "                ", "step_enc", "=", "None", "\n", "plan_now", "=", "None", "\n", "\n", "", "start_pose", "=", "self", ".", "get_act_start_pose", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "start_pose", "=", "start_pose", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "\n", "", "self", ".", "seq_step", "+=", "1", "\n", "\n", "# This is for training the policy to mimic the ground-truth state distribution with oracle actions", "\n", "if", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", "or", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "# b_traj_gt_w_select = b_traj_ground_truth[b_plan_mask_t[:, np.newaxis, np.newaxis, np.newaxis].expand_as(b_traj_ground_truth)].view([-1] + gtsize)", "\n", "                ", "traj_gt_w", "=", "Variable", "(", "self", ".", "gt_labels", ")", "\n", "b_poses", "=", "self", ".", "cam_poses_from_states", "(", "state", ")", "\n", "# TODO: These source and dest should go as arguments to get_maps (in forward pass not params)", "\n", "transformer", "=", "MapTransformerBase", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "maybe_cuda", "(", "transformer", ")", "\n", "transformer", ".", "set_maps", "(", "traj_gt_w", ",", "None", ")", "\n", "traj_gt_r", ",", "_", "=", "transformer", ".", "get_maps", "(", "b_poses", ")", "\n", "self", ".", "clear_inputs", "(", "\"traj_gt_r_select\"", ")", "\n", "self", ".", "clear_inputs", "(", "\"traj_gt_w_select\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_r_select\"", ",", "traj_gt_r", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_w_select\"", ",", "traj_gt_w", ")", "\n", "\n", "", "action", "=", "self", "(", "img_in_t", ",", "state", ",", "instruction", ",", "instr_len", ",", "plan", "=", "plan_now", ",", "pos_enc", "=", "step_enc", ",", "\n", "start_poses", "=", "start_pose", ",", "firstseg", "=", "[", "first_step", "]", ")", "\n", "\n", "if", "plan_now", "[", "0", "]", ":", "\n", "                ", "self", ".", "write_debug_data", "(", ")", "\n", "", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "                ", "self", ".", "save_viz", "(", "images_np_pure", ")", "\n", "\n", "", "output_action", "=", "action", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "stop_prob", "=", "output_action", "[", "3", "]", "\n", "output_stop", "=", "1", "if", "stop_prob", ">", "self", ".", "params", "[", "\"stop_threshold\"", "]", "else", "0", "\n", "output_action", "[", "3", "]", "=", "output_stop", "\n", "\n", "", "return", "output_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.deterministic_action": [[454, 460], ["action_mean.size", "torch.autograd.Variable", "torch.autograd.Variable", "learning.inputs.common.empty_float_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "deterministic_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "batch_size", "=", "action_mean", ".", "size", "(", "0", ")", "\n", "action", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "4", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "action", "[", ":", ",", "0", ":", "3", "]", "=", "action_mean", "[", ":", ",", "0", ":", "3", "]", "\n", "action", "[", ":", ",", "3", "]", "=", "stop_prob", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.sample_action": [[461, 465], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "action", "=", "torch", ".", "normal", "(", "action_mean", ",", "action_std", ")", "\n", "stop", "=", "torch", ".", "bernoulli", "(", "stop_prob", ")", "\n", "return", "action", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.start_sequence": [[467, 471], ["model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cam_poses_from_states": [[473, 478], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.save_viz": [[479, 513], ["scipy.misc.imsave", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax().squeeze", "learning.utils.save_tensor_as_img_during_rollout", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax().squeeze", "learning.utils.save_tensor_as_img_during_rollout", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax().squeeze", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "[].data.cpu().squeeze().numpy", "visualization.Presenter().save_action", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "str", "str", "str", "str", "str", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax", "str", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax", "str", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax", "str", "str", "str", "str", "[].data.cpu().squeeze", "str", "visualization.Presenter", "str", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.unsqueeze", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.unsqueeze", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.unsqueeze", "learning.utils.get_viz_dir_for_rollout", "learning.utils.get_viz_dir_for_rollout", "[].data.cpu", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch"], ["", "def", "save_viz", "(", "self", ",", "images_in", ")", ":", "\n", "        ", "imsave", "(", "get_viz_dir_for_rollout", "(", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "+", "\"fpv_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", ",", "images_in", ")", "\n", "features_cam", "=", "self", ".", "get_inputs_batch", "(", "\"fpv_features\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "features_cam", ",", "\"F_c\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "feature_map_torch", "=", "self", ".", "get_inputs_batch", "(", "\"F_w\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "feature_map_torch", ",", "\"F_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "coverage_map_torch", "=", "self", ".", "get_inputs_batch", "(", "\"M_w\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "coverage_map_torch", ",", "\"M_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "semantic_map_torch", "=", "self", ".", "get_inputs_batch", "(", "\"map_s_w_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "semantic_map_torch", ",", "\"S_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "relmap_torch", "=", "self", ".", "get_inputs_batch", "(", "\"map_a_w_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "relmap_torch", ",", "\"R_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "\n", "trajpred_posterior", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_w_posterior_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "trajpred_posterior", "=", "self", ".", "spatialsoftmax", "(", "trajpred_posterior", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "save_tensor_as_img_during_rollout", "(", "trajpred_posterior", ",", "\"D_u\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "trajpred_posterior_r", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_posterior_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "trajpred_posterior_r", "=", "self", ".", "spatialsoftmax", "(", "trajpred_posterior_r", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "save_tensor_as_img_during_rollout", "(", "trajpred_posterior_r", ",", "\"D_u_r\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "trajpred_prior", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_w_prior_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "trajpred_prior", "=", "self", ".", "spatialsoftmax", "(", "trajpred_prior", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "save_tensor_as_img_during_rollout", "(", "trajpred_prior", ",", "\"D_prior\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "\n", "dstar_w", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_w_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "dstar_w", ",", "\"dstar_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "dstar_r", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_r_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "dstar_r", ",", "\"dstar_r\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "\n", "drone_pos", "=", "self", ".", "get_inputs_batch", "(", "\"drone_poses\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "drone_pos", ",", "\"pos\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "\n", "action", "=", "self", ".", "get_inputs_batch", "(", "\"action\"", ")", "[", "-", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "action_fname", "=", "get_viz_dir_for_rollout", "(", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "+", "\"action_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", "\n", "Presenter", "(", ")", ".", "save_action", "(", "action", ",", "action_fname", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.write_debug_data": [[514, 535], ["learning.modules.dbg_writer.DebugWriter", "learning.modules.dbg_writer.DebugWriter.should_write", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch"], ["", "def", "write_debug_data", "(", "self", ")", ":", "\n", "        ", "writer", "=", "DebugWriter", "(", ")", "\n", "\n", "if", "writer", ".", "should_write", "(", ")", "and", "self", ".", "params", "[", "\"write_gifs\"", "]", ":", "\n", "            ", "softmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "\n", "path_map", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_w\"", ")", "[", "-", "1", ",", "0", "]", "\n", "writer", ".", "write_img", "(", "path_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"pathpred\"", "}", ")", "\n", "prior_map", "=", "softmax", "(", "self", ".", "get_inputs_batch", "(", "\"map_b_r_prior_select\"", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "writer", ".", "write_img", "(", "prior_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"prior\"", "}", ")", "\n", "posterior_map", "=", "softmax", "(", "self", ".", "get_inputs_batch", "(", "\"map_b_r_posterior_select\"", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "writer", ".", "write_img", "(", "posterior_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"posterior\"", "}", ")", "\n", "gnd_map", "=", "self", ".", "get_inputs_batch", "(", "\"map_a_w_select\"", ")", "[", "-", "1", ",", "0", "]", "\n", "writer", ".", "write_img", "(", "gnd_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"gnd\"", "}", ")", "\n", "fpv", "=", "self", ".", "get_inputs_batch", "(", "\"fpv\"", ")", "[", "-", "1", ",", "0", "]", "\n", "writer", ".", "write_img", "(", "fpv", ",", "\"gif\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"fpv\"", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.forward": [[536, 748], ["model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cam_poses_from_states", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.deterministic_action", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.sentence_embedding", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.sentence_embedding.get", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.img_to_features_w", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_accumulator_w", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.batch_select", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_b_r.get_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_w_to_s.set_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_w_to_s.get_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_to_action", "len", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_a_w2", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_w_to_s.set_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_w_to_s.get_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_processor_b_r", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_batch_fill_missing", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_latest_input", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.gt_fill_missing", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_to_action", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_to_action", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_perturb", "learning.inputs.pose.Pose", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_perturb", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_perturb", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_perturb", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_r_to_w.set_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_r_to_w.get_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_r_to_w.set_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.map_transform_r_to_w.get_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "visualization.Presenter().overlaid_image", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "torch.autograd.Variable", "torch.autograd.Variable", "map_poses_p_select.position.clone", "map_poses_p_select.orientation.clone", "learning.utils.draw_drone_poses", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.deterministic_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.draw_drone_poses"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "\n", "has_obs", "=", "None", ",", "plan", "=", "None", ",", "save_maps_only", "=", "False", ",", "pos_enc", "=", "None", ",", "noisy_poses", "=", "None", ",", "start_poses", "=", "None", ",", "firstseg", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param has_obs: list of booleans of length B indicating whether the given element in the sequence has an observation\n        :param yield_semantic_maps: If true, will not compute actions (full model), but return the semantic maps that\n            were built along the way in response to the images. This is ugly, but allows code reuse\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "g_poses", "=", "None", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "self", ".", "keep_inputs", "(", "\"fpv\"", ",", "images", ")", "\n", "\n", "#print(\"Trn: \" + debug_untokenize_instruction(instructions[0].data[:instr_lengths[0]]))", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", ",", "instr_lengths", ")", "\n", "self", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "if", "(", "not", "self", ".", "params", "[", "\"train_action_only\"", "]", "or", "not", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", "or", "not", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", ")", "and", "not", "self", ".", "use_visitation_ground_truth", ":", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "            ", "features_w", ",", "coverages_w", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"F_w\"", ",", "features_w", ")", "\n", "self", ".", "keep_inputs", "(", "\"M_w\"", ",", "coverages_w", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "\n", "# Accumulate the egocentric features in a global map", "\n", "reset_mask", "=", "firstseg", "if", "self", ".", "params", "[", "\"clear_history\"", "]", "else", "None", "\n", "maps_w", "=", "self", ".", "map_accumulator_w", "(", "features_w", ",", "coverages_w", ",", "add_mask", "=", "has_obs", ",", "reset_mask", "=", "reset_mask", ",", "show", "=", "\"acc\"", "if", "IMG_DBG", "else", "\"\"", ")", "\n", "map_poses_w", "=", "g_poses", "\n", "\n", "# TODO: Maybe keep maps_w if necessary", "\n", "#self.keep_inputs(\"map_sm_local\", maps_m)", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_accumulate\"", ")", "\n", "\n", "# Throw away those timesteps that don't correspond to planning timesteps", "\n", "maps_w_select", ",", "map_poses_w_select", ",", "cam_poses_select", ",", "noisy_poses_select", ",", "start_poses_select", ",", "sent_embeddings_select", ",", "pos_enc", "=", "self", ".", "batch_select", "(", "maps_w", ",", "map_poses_w", ",", "cam_poses", ",", "noisy_poses", ",", "start_poses", ",", "sent_embeddings", ",", "pos_enc", ",", "plan", ")", "\n", "\n", "maps_m_prior_select", ",", "maps_m_posterior_select", "=", "None", ",", "None", "\n", "\n", "# Only process the maps on planning timesteps", "\n", "if", "len", "(", "maps_w_select", ")", ">", "0", ":", "\n", "                ", "self", ".", "keep_inputs", "(", "\"map_s_w_select\"", ",", "maps_w_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"batch_select\"", ")", "\n", "\n", "# Create a figure where the drone is drawn on the map", "\n", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "                    ", "self", ".", "keep_inputs", "(", "\"drone_poses\"", ",", "Variable", "(", "draw_drone_poses", "(", "cam_poses_select", ")", ")", ")", "\n", "\n", "# Process the map via the two map_procesors", "\n", "# Do grounding of objects in the map chosen to do so", "\n", "", "maps_w_select", ",", "map_poses_w_select", "=", "self", ".", "map_processor_a_w", "(", "maps_w_select", ",", "sent_embeddings_select", ",", "map_poses_w_select", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_a_w_select\"", ",", "maps_w_select", ")", "\n", "\n", "maps_w_select", ",", "map_poses_w_select", "=", "self", ".", "map_processor_a_w2", "(", "\n", "maps_w_select", ",", "sent_embeddings_select", ",", "map_poses_w_select", ",", "cam_poses_select", ",", "show", "=", "\"draw_start\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_a2_w_select\"", ",", "maps_w_select", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_gnd\"", ")", "\n", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "s_poses_select", "=", "start_poses_select", "\n", "", "else", ":", "\n", "                    ", "s_poses_select", "=", "cam_poses_select", "\n", "\n", "", "self", ".", "map_transform_w_to_s", ".", "set_maps", "(", "maps_w_select", ",", "map_poses_w_select", ")", "\n", "maps_s_select", ",", "map_poses_s_select", "=", "self", ".", "map_transform_w_to_s", ".", "get_maps", "(", "s_poses_select", ")", "\n", "\n", "self", ".", "keep_inputs", "(", "\"map_a_s_select\"", ",", "maps_s_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"transform_w_to_s\"", ")", "\n", "\n", "# Data augmentation for trajectory prediction", "\n", "# TODO: Should go inside trajectory predictor", "\n", "map_poses_clean_select", "=", "None", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "                    ", "assert", "noisy_poses_select", "is", "not", "None", ",", "\"Noisy poses must be provided if we're perturbing maps\"", "\n", "#map_poses_s_clean_select = Pose(map_poses_s_select.position.clone(), map_poses_s_select.orientation.clone()) # Remember the clean poses", "\n", "maps_p_select", ",", "map_poses_p_select", "=", "self", ".", "map_perturb", "(", "maps_s_select", ",", "map_poses_s_select", ",", "noisy_poses_select", ")", "\n", "", "else", ":", "\n", "                    ", "maps_p_select", ",", "map_poses_p_select", "=", "maps_s_select", ",", "map_poses_s_select", "\n", "\n", "", "self", ".", "keep_inputs", "(", "\"map_a_s_perturbed_select\"", ",", "maps_s_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_perturb\"", ")", "\n", "\n", "# Include positional encoding for path prediction", "\n", "#if pos_enc is not None:", "\n", "#    sent_embeddings_pp = torch.cat([sent_embeddings_select, pos_enc.unsqueeze(1)], dim=1)", "\n", "#else:", "\n", "sent_embeddings_pp", "=", "sent_embeddings_select", "\n", "\n", "# Process the map via the two map_procesors (e.g. predict the trajectory that we'll be taking)", "\n", "maps_p_select", ",", "maps_p_prior_select", ",", "maps_p_posterior_select", ",", "map_poses_p_select", "=", "self", ".", "map_processor_b_r", "(", "maps_p_select", ",", "sent_embeddings_pp", ",", "map_poses_p_select", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_b\"", ")", "\n", "\n", "# Un-perturb the maps - transform them to robot reference frame", "\n", "if", "self", ".", "second_transform", ":", "\n", "#assert map_poses_clean_select is not None", "\n", "                    ", "map_poses_dirty_select", "=", "Pose", "(", "map_poses_p_select", ".", "position", ".", "clone", "(", ")", ",", "map_poses_p_select", ".", "orientation", ".", "clone", "(", ")", ")", "\n", "maps_m_select", ",", "map_poses_m_select", "=", "self", ".", "map_perturb", "(", "maps_p_select", ",", "map_poses_dirty_select", ",", "cam_poses_select", ")", "\n", "maps_m_prior_select", ",", "_", "=", "self", ".", "map_perturb", "(", "maps_p_prior_select", ",", "map_poses_dirty_select", ",", "cam_poses_select", ")", "\n", "maps_m_posterior_select", ",", "_", "=", "self", ".", "map_perturb", "(", "maps_p_posterior_select", ",", "map_poses_dirty_select", ",", "cam_poses_select", ")", "\n", "", "else", ":", "\n", "                    ", "maps_m_select", "=", "maps_p_select", "\n", "map_poses_m_select", "=", "map_poses_p_select", "\n", "\n", "", "self", ".", "keep_inputs", "(", "\"map_b_r_select\"", ",", "maps_m_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_r_prior_select\"", ",", "maps_m_prior_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_r_posterior_select\"", ",", "maps_m_posterior_select", ")", "\n", "\n", "if", "self", ".", "params", "[", "\"write_figures\"", "]", "or", "True", ":", "\n", "                    ", "self", ".", "map_transform_r_to_w", ".", "set_maps", "(", "maps_m_prior_select", ",", "map_poses_m_select", ")", "\n", "maps_prior_w", ",", "_", "=", "self", ".", "map_transform_r_to_w", ".", "get_maps", "(", "g_poses", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_w_prior_select\"", ",", "maps_prior_w", ")", "\n", "\n", "self", ".", "map_transform_r_to_w", ".", "set_maps", "(", "maps_m_posterior_select", ",", "map_poses_m_select", ")", "\n", "maps_posterior_w", ",", "_", "=", "self", ".", "map_transform_r_to_w", ".", "get_maps", "(", "g_poses", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_w_posterior_select\"", ",", "maps_posterior_w", ")", "\n", "\n", "", "", "else", ":", "\n", "#print(\"No predictions!\")", "\n", "                ", "maps_m_select", "=", "None", "\n", "maps_posterior_w", "=", "None", "\n", "\n", "# If we're predicting the trajectory only on some timesteps, then for each timestep k, use the map from", "\n", "# timestep k if predicting on timestep k. otherwise use the map from timestep j - the last timestep", "\n", "# that had a trajectory prediction, rotated in the frame of timestep k.", "\n", "#print(\"Planning: \", plan)", "\n", "# TODO: Be careful here with the map_poses vs cam_poses distinction", "\n", "", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", "]", ":", "\n", "# If we're just pre-training the trajectory prediction, don't waste time on generating the missing maps", "\n", "                ", "maps_m", "=", "maps_m_select", "\n", "map_poses_m", "=", "map_poses_m_select", "\n", "cam_poses", "=", "cam_poses_select", "\n", "sent_embeddings", "=", "sent_embeddings_select", "\n", "", "else", ":", "\n", "                ", "maps_m", ",", "map_poses_m", "=", "self", ".", "map_batch_fill_missing", "(", "maps_m_select", ",", "cam_poses", ",", "plan", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_r\"", ",", "maps_m", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_fill_missing\"", ")", "\n", "\n", "# Keep global maps for auxiliary objectives if necessary", "\n", "#if self.input_required(\"map_b_w\"):", "\n", "# TODO: Don't \"get maps\" since it's no longer a MapTransformerBase", "\n", "", "maps_b", ",", "_", "=", "self", ".", "map_processor_b_r", ".", "get_maps", "(", "g_poses", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_w\"", ",", "maps_b", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"keep_global_maps\"", ")", "\n", "\n", "#for i in range(len(maps_m)):", "\n", "# Bunch of stuff for visualization only", "\n", "if", "run_metadata", ".", "IS_ROLLOUT", ":", "\n", "#Presenter().show_image(maps_m.data[0, 0:3], \"plan_map_now\", torch=True, scale=4, waitkey=1)", "\n", "                ", "softmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "if", "maps_m_posterior_select", "is", "not", "None", ":", "\n", "                    ", "d", "=", "softmax", "(", "maps_m_posterior_select", ")", ".", "data", "[", "0", ",", "0", ":", "3", "]", "\n", "#Presenter().show_image(d, \"predicted_distributions\", torch=True, scale=4, waitkey=1)", "\n", "", "if", "maps_posterior_w", "is", "not", "None", ":", "\n", "# TODO: Plot drone's current pose (make a little script in Presenter that plots a pose on the image)", "\n", "                    ", "d_w", "=", "softmax", "(", "maps_posterior_w", ")", ".", "data", "[", "0", ",", "0", ":", "3", "]", "\n", "overlaid", "=", "Presenter", "(", ")", ".", "overlaid_image", "(", "self", ".", "env_img", ",", "d_w", ")", "\n", "#Presenter().show_image(overlaid, \"d_overlaid\", torch=True, scale=1, waitkey=1)", "\n", "#Presenter().show_image(images[0], \"fpv_image\", torch=True, scale=2, waitkey=1)", "\n", "", "semantic_map", "=", "self", ".", "get_latest_input", "(", "\"map_s_w_select\"", ")", "\n", "#Presenter().show_image(semantic_map, \"semantic_map\", torch=True, scale=4, waitkey=1)", "\n", "\n", "#if maps_m_prior_select is not None: Presenter().show_image(softmax(maps_m_prior_select).data[0, 0:3], \"prior_map\", torch=True, scale=4, waitkey=1)", "\n", "#Presenter().show_image(maps_w.data[0, 0:3], \"sm_map_now\", torch=True, scale=4, waitkey=1)", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"viz\"", ")", "\n", "\n", "# Output the final action given the processed map", "\n", "if", "self", ".", "detach_act_grad", ":", "\n", "                ", "maps_m", "=", "Variable", "(", "maps_m", ".", "data", ")", "\n", "sent_embeddings", "=", "Variable", "(", "sent_embeddings", ".", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# Predict action from ground-truth trajectory instead of the predicted trajectory", "\n", "# TODO: Perhaps random amount of gaussian blur?", "\n", "# WTF did I do here!", "\n", "# We are given ground truth visitation distributions to follow, just transform those in the current frame and follow", "\n", "", "if", "self", ".", "use_visitation_ground_truth", ":", "\n", "            ", "self", ".", "map_transform_w_to_s", ".", "set_maps", "(", "self", ".", "visitation_ground_truth", ",", "None", ")", "\n", "maps_dstart_prob", ",", "_", "=", "self", ".", "map_transform_w_to_s", ".", "get_maps", "(", "cam_poses", ")", "\n", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_dstart_prob", ",", "sent_embeddings", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "\n", "", "elif", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", "and", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", ":", "\n", "            ", "maps_dstar_select", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_r_select\"", ")", "[", ":", ",", "0", "]", "\n", "maps_dstart_prob", ",", "_", "=", "self", ".", "gt_fill_missing", "(", "maps_dstar_select", ",", "cam_poses", ",", "plan", ",", "show", "=", "\"\"", ")", "\n", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_dstart_prob", ",", "sent_embeddings", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "", "else", ":", "\n", "            ", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_m", ",", "sent_embeddings", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "\n", "", "out_action", "=", "self", ".", "deterministic_action", "(", "action_pred", "[", ":", ",", "0", ":", "3", "]", ",", "None", ",", "action_pred", "[", ":", ",", "3", "]", ")", "\n", "self", ".", "keep_inputs", "(", "\"action\"", ",", "out_action", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_to_action\"", ")", "\n", "\n", "return", "out_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda": [[749, 761], ["tensor.cuda", "type", "tensor.data.pin_memory", "type", "type", "tensor.pin_memory"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "if", "False", ":", "\n", "                ", "if", "type", "(", "tensor", ")", "is", "Variable", ":", "\n", "                    ", "tensor", ".", "data", ".", "pin_memory", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", "is", "Pose", ":", "\n", "                    ", "pass", "\n", "", "elif", "type", "(", "tensor", ")", "is", "torch", ".", "FloatTensor", ":", "\n", "                    ", "tensor", ".", "pin_memory", "(", ")", "\n", "", "", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var": [[762, 764], ["learning.inputs.common.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "cuda_var", "(", "tensor", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_path_pos_encoding": [[765, 790], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "torch.autograd.Variable", "torch.autograd.Variable", "float", "range", "parameters.parameter_server.get_current_parameters", "len", "step_numbers.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_path_pos_encoding", "(", "self", ",", "plan_mask", ",", "b_metadata", "=", "None", ",", "step_num", "=", "0", ")", ":", "\n", "        ", "trajectory_length", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"trajectory_length\"", "]", "\n", "step", "=", "1.0", "/", "float", "(", "trajectory_length", ")", "\n", "\n", "step_numbers", "=", "[", "]", "\n", "last_seg", "=", "-", "1", "\n", "curr_step", "=", "0", "\n", "if", "b_metadata", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "b_metadata", ")", ")", ":", "\n", "                ", "if", "b_metadata", "[", "i", "]", "[", "\"seg_idx\"", "]", "!=", "last_seg", ":", "\n", "                    ", "curr_step", "=", "0", "\n", "last_seg", "=", "b_metadata", "[", "i", "]", "[", "\"seg_idx\"", "]", "\n", "", "if", "plan_mask", "[", "i", "]", ":", "\n", "                    ", "step_numbers", ".", "append", "(", "curr_step", ")", "\n", "", "curr_step", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "step_numbers", "=", "[", "step_num", "]", "\n", "\n", "", "encoding", "=", "[", "s", "*", "step", "for", "s", "in", "step_numbers", "]", "\n", "#print(plan_mask)", "\n", "#print(encoding)", "\n", "encoding_t", "=", "torch", ".", "FloatTensor", "(", "encoding", ")", "\n", "encoding_t", "=", "self", ".", "maybe_cuda", "(", "encoding_t", ")", "\n", "encoding_t", "=", "Variable", "(", "encoding_t", ")", "\n", "return", "encoding_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.sup_loss_on_batch": [[792, 1049], ["model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "torch.autograd.Variable", "torch.autograd.Variable", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "range", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.writer.add_dict", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.writer.add_dict", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.writer.add_scalar", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.inc_iter", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.loop", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.print_stats", "learning.inputs.common.empty_float_tensor", "print", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "batch[].data.clone", "torch.autograd.Variable", "torch.autograd.Variable", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.reset", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "learning.inputs.sequence.len_until_nones", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.input_required", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.input_required", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.input_required", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.input_required", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.action_loss", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.action_loss.batch_reduce_loss", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.action_loss.reduce_loss", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.prof.tick", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.calculate_aux_loss", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.combine_aux_losses", "torch.autograd.Variable", "torch.autograd.Variable", "learning.meters_and_metrics.meter_server.get_current_meters", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_iter", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_iter", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.goal_acc_meter.get", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_iter", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.writer.add_scalar", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "parameters.parameter_server.get_current_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_path_pos_encoding", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cam_poses_from_states", "learning.modules.map_transformer_base.MapTransformerBase", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.maybe_cuda", "learning.modules.map_transformer_base.MapTransformerBase.set_maps", "learning.modules.map_transformer_base.MapTransformerBase.get_maps", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.keep_inputs", "b_actions[].view", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_inputs_batch", "range", "learning.inputs.common.empty_float_tensor", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_iter", "range", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.cuda_var", "list", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.spatialsoftmax", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_iter", "action_loss_avg.data.cpu", "s.long", "b_traj_ground_truth_select.size", "enumerate", "enumerate", "enumerate", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.goal_good_criterion", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.goal_acc_meter.put", "model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.all", "b_plan_mask_t[].expand_as", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.len_until_nones", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.batch_reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_path_pos_encoding", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.all"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "action_loss_total", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "return", "action_loss_total", "\n", "\n", "", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", ",", "PVN_STAGE1_ONLY", ",", "MODEL_FPV_SAVE_MAPS_ONLY", "]", ":", "\n", "            ", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "tdims", "=", "batch", "[", "\"top_down_images\"", "]", ".", "data", ".", "clone", "(", ")", "\n", "images", "=", "Variable", "(", "self", ".", "maybe_cuda", "(", "tdims", ")", ")", "\n", "\n", "", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", ")", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", ")", "\n", "actions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"actions\"", "]", ")", "\n", "\n", "# Auxiliary labels", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "# All object 2D coordinates in the first-person image", "\n", "lm_pos_map", "=", "batch", "[", "\"lm_pos_map\"", "]", "# All object 2D coordinates in the semantic map", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "# All object class indices", "\n", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "# 1/0 labels whether object was mentioned/not mentioned in template instruction", "\n", "goal_pos_map", "=", "batch", "[", "\"goal_loc\"", "]", "# Goal location in semantic map", "\n", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "# 1/0 labels whether object was mentioned/not mentioned in natural language instruction", "\n", "plan_mask", "=", "batch", "[", "\"plan_mask\"", "]", "# True for every timestep that we do visitation prediction", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "# True for every timestep that is a new instruction segment", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"templates\"", "]", "\n", "if", "templates", ":", "\n", "            ", "lm_mentioned_tplt", "=", "batch", "[", "\"lm_mentioned_tplt\"", "]", "\n", "side_mentioned_tplt", "=", "batch", "[", "\"side_mentioned_tplt\"", "]", "\n", "\n", "", "traj_ground_truth_select", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"traj_ground_truth\"", "]", ")", "\n", "noisy_poses", "=", "batch", "[", "\"noisy_poses\"", "]", "\n", "start_poses", "=", "batch", "[", "\"start_poses\"", "]", "\n", "\n", "# stops = self.maybe_cuda(batch[\"stops\"])", "\n", "masks", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"masks\"", "]", ")", "\n", "metadata", "=", "batch", "[", "\"md\"", "]", "\n", "\n", "seq_len", "=", "images", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "count", "=", "0", "\n", "correct_goal_count", "=", "0", "\n", "goal_count", "=", "0", "\n", "\n", "# Loop thru batch", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "seg_idx", "=", "-", "1", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "b_seq_len", "=", "len_until_nones", "(", "metadata", "[", "b", "]", ")", "\n", "\n", "# TODO: Generalize this", "\n", "# Slice the data according to the sequence length", "\n", "b_metadata", "=", "metadata", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_images", "=", "images", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instructions", "=", "instructions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instr_len", "=", "instr_lengths", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_states", "=", "states", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_actions", "=", "actions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_pos_fpv", "=", "lm_pos_fpv", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_pos_map", "=", "lm_pos_map", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_indices", "=", "lm_indices", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_mentioned", "=", "lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_goal_pos", "=", "goal_pos_map", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "#b_traj_ground_truth_select = traj_ground_truth_select[b][:b_seq_len]", "\n", "b_traj_ground_truth_select", "=", "traj_ground_truth_select", "[", "b", "]", "\n", "b_lang_lm_mentioned", "=", "lang_lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_noisy_poses", "=", "self", ".", "maybe_cuda", "(", "noisy_poses", "[", "b", "]", "[", ":", "b_seq_len", "]", ")", "\n", "b_start_poses", "=", "self", ".", "maybe_cuda", "(", "start_poses", "[", "b", "]", "[", ":", "b_seq_len", "]", ")", "\n", "\n", "b_plan_mask", "=", "plan_mask", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_obs_mask", "=", "[", "True", "for", "_", "in", "range", "(", "b_seq_len", ")", "]", "\n", "b_plan_mask_t_cpu", "=", "torch", ".", "Tensor", "(", "b_plan_mask", ")", "==", "True", "\n", "b_plan_mask_t", "=", "self", ".", "maybe_cuda", "(", "b_plan_mask_t_cpu", ")", "\n", "b_firstseg_mask", "=", "firstseg_mask", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "\n", "b_lm_pos_map", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_pos_map", "]", "\n", "b_lm_pos_fpv", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "RESNET_FACTOR", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_pos_fpv", "]", "\n", "b_lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_indices", "]", "\n", "b_lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_mentioned", "]", "\n", "b_goal_pos", "=", "self", ".", "cuda_var", "(", "b_goal_pos", ")", "\n", "b_lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "b_lang_lm_mentioned", ")", "\n", "\n", "# TODO: Figure out how to keep these properly. Perhaps as a whole batch is best", "\n", "# TODO: Introduce a key-value store (encapsulate instead of inherit)", "\n", "self", ".", "keep_inputs", "(", "\"lm_pos_fpv\"", ",", "b_lm_pos_fpv", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "b_lm_pos_map", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "b_lm_indices", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "b_lm_mentioned", ")", "\n", "self", ".", "keep_inputs", "(", "\"goal_pos_map\"", ",", "b_goal_pos", ")", "\n", "self", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "b_lang_lm_mentioned", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_global_select\"", ",", "b_traj_ground_truth_select", ")", "\n", "\n", "# TODO: Abstract all of these if-elses in a modular way once we know which ones are necessary", "\n", "if", "templates", ":", "\n", "                ", "b_lm_mentioned_tplt", "=", "lm_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "side_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_side_mentioned_tplt", ")", "\n", "b_lm_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned_tplt\"", ",", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "keep_inputs", "(", "\"side_mentioned_tplt\"", ",", "b_side_mentioned_tplt", ")", "\n", "\n", "", "b_pos_enc", "=", "None", "\n", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", ",", "PVN_STAGE1_ONLY", "]", ":", "\n", "                ", "b_pos_enc", "=", "self", ".", "get_path_pos_encoding", "(", "b_obs_mask", ",", "b_metadata", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "# Optional Auxiliary Inputs", "\n", "# ----------------------------------------------------------------------------", "\n", "", "if", "self", ".", "input_required", "(", "\"traj_gt_r_select\"", ")", ":", "\n", "                ", "gtsize", "=", "list", "(", "b_traj_ground_truth_select", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "#b_traj_gt_w_select = b_traj_ground_truth[b_plan_mask_t[:, np.newaxis, np.newaxis, np.newaxis].expand_as(b_traj_ground_truth)].view([-1] + gtsize)", "\n", "b_poses", "=", "self", ".", "cam_poses_from_states", "(", "b_states", ")", "\n", "b_poses_select", "=", "b_poses", "[", "b_plan_mask_t", "]", "\n", "# TODO: These source and dest should go as arguments to get_maps (in forward pass not params)", "\n", "transformer", "=", "MapTransformerBase", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "maybe_cuda", "(", "transformer", ")", "\n", "transformer", ".", "set_maps", "(", "b_traj_ground_truth_select", ",", "None", ")", "\n", "traj_gt_local_select", ",", "_", "=", "transformer", ".", "get_maps", "(", "b_poses_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_r_select\"", ",", "traj_gt_local_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_w_select\"", ",", "b_traj_ground_truth_select", ")", "\n", "\n", "", "if", "self", ".", "input_required", "(", "\"lm_pos_map_select\"", ")", ":", "\n", "                ", "b_lm_pos_map_select", "=", "[", "lm_pos", "for", "i", ",", "lm_pos", "in", "enumerate", "(", "b_lm_pos_map", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "keep_inputs", "(", "\"lm_pos_map_select\"", ",", "b_lm_pos_map_select", ")", "\n", "", "if", "self", ".", "input_required", "(", "\"lm_indices_select\"", ")", ":", "\n", "                ", "b_lm_indices_select", "=", "[", "lm_idx", "for", "i", ",", "lm_idx", "in", "enumerate", "(", "b_lm_indices", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "keep_inputs", "(", "\"lm_indices_select\"", ",", "b_lm_indices_select", ")", "\n", "", "if", "self", ".", "input_required", "(", "\"lm_mentioned_select\"", ")", ":", "\n", "                ", "b_lm_mentioned_select", "=", "[", "lm_m", "for", "i", ",", "lm_m", "in", "enumerate", "(", "b_lm_mentioned", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned_select\"", ",", "b_lm_mentioned_select", ")", "\n", "\n", "", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", "]", ":", "\n", "# If we're just pre-training path, the model will not output every action prediction, but only action", "\n", "# predictions on planning steps.", "\n", "                ", "b_actions", "=", "b_actions", "[", "b_plan_mask_t", "[", ":", ",", "np", ".", "newaxis", "]", ".", "expand_as", "(", "b_actions", ")", "]", ".", "view", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"inputs\"", ")", "\n", "\n", "actions", "=", "self", "(", "b_images", ",", "b_states", ",", "b_instructions", ",", "b_instr_len", ",", "\n", "has_obs", "=", "b_obs_mask", ",", "plan", "=", "b_plan_mask", ",", "pos_enc", "=", "b_pos_enc", ",", "firstseg", "=", "b_firstseg_mask", ",", "noisy_poses", "=", "b_noisy_poses", ",", "start_poses", "=", "b_start_poses", ")", "\n", "\n", "action_losses", ",", "_", "=", "self", ".", "action_loss", "(", "b_actions", ",", "actions", ",", "batchreduce", "=", "False", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "\n", "# Check if the goal-prediction is good enough. If it is not, don't use this example for learning actions", "\n", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", ",", "MODEL_FPV", "]", "and", "not", "(", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", "and", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", ")", ":", "#\\", "\n", "#and (params[\"action_upd_correct_only\"] or eval):", "\n", "                ", "maps_pp_in", "=", "self", ".", "get_inputs_batch", "(", "\"map_a_s_perturbed_select\"", ")", "\n", "pp_priors", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_prior_select\"", ")", "\n", "pp_posteriors", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_posterior_select\"", ")", "\n", "map_pathpreds", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_select\"", ")", "\n", "traj_gts", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_r_select\"", ")", "\n", "sm_globals", "=", "self", ".", "get_inputs_batch", "(", "\"map_s_w_select\"", ")", "\n", "good_goals", "=", "0", "\n", "\n", "#for i in range(len(smmaps)):", "\n", "#for i in range(len(maps_pp_in)):", "\n", "# TODO: Step only over those steps where we actually do path prediction", "\n", "# TODO: Zero out all the actions!", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "                    ", "ppinmap", "=", "maps_pp_in", "[", "i", "]", "\n", "pp_prior", "=", "self", ".", "spatialsoftmax", "(", "pp_priors", "[", "i", "]", ")", "\n", "pp_posterior", "=", "self", ".", "spatialsoftmax", "(", "pp_posteriors", "[", "i", "]", ")", "\n", "map_pathpred", "=", "map_pathpreds", "[", "i", "]", "\n", "traj_gt", "=", "traj_gts", "[", "i", "]", "\n", "sm_global", "=", "sm_globals", "[", "i", "]", "\n", "\n", "iter", "=", "self", ".", "get_iter", "(", ")", "\n", "showstuff", "=", "iter", "%", "60", "==", "0", "\n", "#showstuff = True", "\n", "if", "showstuff", ":", "\n", "                        ", "Presenter", "(", ")", ".", "show_image", "(", "ppinmap", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"map_a_r_gnd\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "ppinmap", ".", "data", "[", "0", ",", "3", ":", "6", "]", ",", "\"map_a_r_sm\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "sm_global", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"sm_global\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "pp_prior", ".", "data", "[", "0", "]", ",", "\"pp_prior\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "pp_posterior", ".", "data", "[", "0", "]", ",", "\"pp_posterior\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "\n", "# We can't report goal-prediction accuracy if we don't have a goal-state channel.", "\n", "", "if", "not", "self", ".", "params", "[", "\"action_in_path_only\"", "]", ":", "\n", "                        ", "ok_goal", "=", "self", ".", "goal_good_criterion", "(", "map_pathpred", ",", "traj_gt", ",", "show", "=", "\"goal_pred\"", "if", "showstuff", "else", "\"\"", ")", "\n", "correct_goal", "=", "0", "\n", "self", ".", "total_goals", "+=", "1", "\n", "if", "not", "ok_goal", ".", "all", "(", ")", ":", "\n", "#print(\"Path \" + str(i) + \" FAIL\")", "\n", "# TODO: This does not align, because action losses include ALL actions, but", "\n", "# predicitons only correspond to SELECT actions.", "\n", "# perhaps track prediction accuracy during forward pass and fill_missing should", "\n", "# produce an \"action plausible\" mask", "\n", "                            ", "if", "self", ".", "params", "[", "\"action_upd_correct_only\"", "]", ":", "\n", "                                ", "action_losses", "[", "i", "]", "=", "action_losses", "[", "i", "]", "*", "0", "\n", "", "", "else", ":", "\n", "                            ", "self", ".", "correct_goals", "+=", "1", "\n", "correct_goal", "=", "1", "\n", "good_goals", "+=", "1", "\n", "#print(\"Path \" + str(i) + \" GOOD\")", "\n", "", "self", ".", "goal_acc_meter", ".", "put", "(", "correct_goal", ")", "\n", "\n", "#print(\"   Goal running accuracy: \", self.goal_acc_meter.get())", "\n", "#print(\"Correct: \" + str(good_goals) + \" / \" + str(len(maps_pp_in)))", "\n", "\n", "", "", "", "action_losses", "=", "self", ".", "action_loss", ".", "batch_reduce_loss", "(", "action_losses", ")", "\n", "action_loss", "=", "self", ".", "action_loss", ".", "reduce_loss", "(", "action_losses", ")", "\n", "\n", "action_loss_total", "=", "action_loss", "\n", "count", "+=", "b_seq_len", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"loss\"", ")", "\n", "\n", "", "action_loss_avg", "=", "action_loss_total", "/", "(", "count", "+", "1e-9", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# Doing this in the end", "\n", "if", "self", ".", "params", "[", "\"run_auxiliaries\"", "]", ":", "\n", "            ", "aux_losses", "=", "self", ".", "calculate_aux_loss", "(", "reduce_average", "=", "True", ")", "\n", "aux_loss", "=", "self", ".", "combine_aux_losses", "(", "aux_losses", ",", "self", ".", "aux_weights", ")", "\n", "", "else", ":", "\n", "            ", "aux_loss", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "aux_losses", "=", "{", "}", "\n", "\n", "", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "aux_losses", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "# TODO: Log value here", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/goal_accuracy\"", ",", "self", ".", "goal_acc_meter", ".", "get", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"auxiliaries\"", ")", "\n", "\n", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", "]", ":", "\n", "            ", "total_loss", "=", "aux_loss", "\n", "", "else", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss_avg", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "total_loss", "=", "action_loss_avg", "*", "self", ".", "aux_weights", "[", "\"action\"", "]", "+", "aux_loss", "\n", "\n", "", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_bidomain.PVN_Stage1_Original_Bidomain.get_dataset": [[1050, 1086], ["data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "learning.datasets.segment_dataset_simple.SegmentDataset", "print", "data_sources.append", "print", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "        ", "data_sources", "=", "[", "]", "\n", "# If we're running auxiliary objectives, we need to include the data sources for the auxiliary labels", "\n", "#if self.use_aux_class_features or self.use_aux_class_on_map or self.use_aux_grounding_features or self.use_aux_grounding_on_map:", "\n", "#if self.use_aux_goal_on_map:", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_GOAL_POS", ")", "\n", "\n", "# Adding these in this order will compute poses with added noise and compute trajectory ground truth", "\n", "# in the reference frame of these noisy poses", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_START_POSES", ")", "\n", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "            ", "print", "(", "\"PERTURBING MAPS!\"", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "# TODO: Think this through. Perhaps we actually want dynamic ground truth given a noisy start position", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"NOT Perturbing Maps!\"", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ")", "\n", "\n", "", "", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANDMARKS_MENTIONED", ")", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"templates\"", "]", "\n", "if", "templates", ":", "\n", "            ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.__init__": [[40, 95], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "data_io.weights.enable_weight_saving", "learning.modules.action_loss.ActionLoss", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "learning.modules.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet", "learning.modules.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ")", ":", "\n", "\n", "        ", "super", "(", "ModelTrajectoryToAction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"lsvd_action\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "\"runs/\"", "+", "run_name", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "\n", "self", ".", "aux_weights", "=", "get_current_parameters", "(", ")", "[", "\"AuxWeights\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Common", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "self", ".", "map_transform_w_to_s", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_r_to_w", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Output an action given the global semantic map", "\n", "if", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"downsample2\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "EgoMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "other_features_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ")", "\n", "\n", "", "elif", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"cropped\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "CroppedMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "manual", "=", "self", ".", "params", "[", "\"manual_rule\"", "]", ",", "\n", "path_only", "=", "self", ".", "params", "[", "\"action_in_path_only\"", "]", ",", "\n", "recurrence", "=", "self", ".", "params", "[", "\"action_recurrence\"", "]", ")", "\n", "\n", "", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "gt_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "# Don't freeze the trajectory to action weights, because it will be pre-trained during path-prediction training", "\n", "# and finetuned on all timesteps end-to-end", "\n", "enable_weight_saving", "(", "self", ".", "map_to_action", ",", "\"map_to_action\"", ",", "alwaysfreeze", "=", "False", ",", "neverfreeze", "=", "True", ")", "\n", "\n", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "self", ".", "gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.cuda": [[97, 105], ["ModuleWithAuxiliaries.cuda", "model_sm_action_gt.ModelTrajectoryToAction.map_to_action.cuda", "model_sm_action_gt.ModelTrajectoryToAction.action_loss.cuda", "model_sm_action_gt.ModelTrajectoryToAction.map_transform_w_to_s.cuda", "model_sm_action_gt.ModelTrajectoryToAction.map_transform_r_to_w.cuda", "model_sm_action_gt.ModelTrajectoryToAction.gt_fill_missing.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "ModuleWithAuxiliaries", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "map_to_action", ".", "cuda", "(", "device", ")", "\n", "self", ".", "action_loss", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_w_to_s", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "gt_fill_missing", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.get_iter": [[106, 108], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.inc_iter": [[109, 111], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.init_weights": [[112, 114], ["model_sm_action_gt.ModelTrajectoryToAction.map_to_action.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "map_to_action", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.reset": [[115, 121], ["super().reset", "model_sm_action_gt.ModelTrajectoryToAction.map_transform_w_to_s.reset", "model_sm_action_gt.ModelTrajectoryToAction.map_transform_r_to_w.reset", "model_sm_action_gt.ModelTrajectoryToAction.gt_fill_missing.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# TODO: This is error prone. Create a class StatefulModule, iterate submodules and reset all stateful modules", "\n", "        ", "super", "(", "ModelTrajectoryToAction", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_w_to_s", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "reset", "(", ")", "\n", "self", ".", "gt_fill_missing", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.setEnvContext": [[122, 125], ["print", "str"], "methods", ["None"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.start_segment_rollout": [[126, 136], ["learning.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "model_sm_action_gt.ModelTrajectoryToAction.maybe_cuda", "model_sm_action_gt.ModelTrajectoryToAction.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_segment_rollout", "(", "self", ")", ":", "\n", "        ", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "m_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", "\n", "w_size", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "\n", "self", ".", "gt_labels", "=", "get_top_down_ground_truth_static_global", "(", "\n", "md", ".", "ENV_ID", ",", "md", ".", "START_IDX", ",", "md", ".", "END_IDX", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "self", ".", "seg_idx", "=", "md", ".", "SEG_IDX", "\n", "self", ".", "gt_labels", "=", "self", ".", "maybe_cuda", "(", "self", ".", "gt_labels", ")", "\n", "if", "self", ".", "params", "[", "\"clear_history\"", "]", ":", "\n", "            ", "self", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.get_action": [[137, 193], ["utils.simple_profiler.SimpleProfiler", "utils.simple_profiler.SimpleProfiler.tick", "model_sm_action_gt.ModelTrajectoryToAction.eval", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model_sm_action_gt.ModelTrajectoryToAction.cam_poses_from_states", "learning.modules.map_transformer_base.MapTransformerBase", "model_sm_action_gt.ModelTrajectoryToAction.maybe_cuda", "learning.modules.map_transformer_base.MapTransformerBase.set_maps", "learning.modules.map_transformer_base.MapTransformerBase.get_maps", "model_sm_action_gt.ModelTrajectoryToAction.clear_inputs", "model_sm_action_gt.ModelTrajectoryToAction.clear_inputs", "model_sm_action_gt.ModelTrajectoryToAction.keep_inputs", "model_sm_action_gt.ModelTrajectoryToAction.keep_inputs", "model_sm_action_gt.ModelTrajectoryToAction.", "model_sm_action_gt.ModelTrajectoryToAction.squeeze().data.cpu().numpy", "learning.inputs.sequence.none_padded_seq_to_tensor", "model_sm_action_gt.ModelTrajectoryToAction.cam_poses_from_states", "model_sm_action_gt.ModelTrajectoryToAction.squeeze().data.cpu", "model_sm_action_gt.ModelTrajectoryToAction.squeeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.clear_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.clear_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        #TODO: Absorb corpus within model\n        :return:\n        \"\"\"", "\n", "prof", "=", "SimpleProfiler", "(", "print", "=", "True", ")", "\n", "prof", ".", "tick", "(", "\".\"", ")", "\n", "# TODO: Simplify this", "\n", "self", ".", "eval", "(", ")", "\n", "images_np_pure", "=", "state", ".", "image", "\n", "state_np", "=", "state", ".", "state", "\n", "state", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "state_np", "]", ")", ")", "\n", "\n", "#print(\"Act: \" + debug_untokenize_instruction(instruction))", "\n", "\n", "# Add the batch dimension", "\n", "\n", "first_step", "=", "True", "\n", "if", "instruction", "==", "self", ".", "prev_instruction", ":", "\n", "            ", "first_step", "=", "False", "\n", "", "self", ".", "prev_instruction", "=", "instruction", "\n", "if", "first_step", ":", "\n", "            ", "self", ".", "get_act_start_pose", "=", "self", ".", "cam_poses_from_states", "(", "state", "[", "0", ":", "1", "]", ")", "\n", "\n", "", "self", ".", "seq_step", "+=", "1", "\n", "\n", "# This is for training the policy to mimic the ground-truth state distribution with oracle actions", "\n", "# b_traj_gt_w_select = b_traj_ground_truth[b_plan_mask_t[:, np.newaxis, np.newaxis, np.newaxis].expand_as(b_traj_ground_truth)].view([-1] + gtsize)", "\n", "traj_gt_w", "=", "Variable", "(", "self", ".", "gt_labels", ")", "\n", "b_poses", "=", "self", ".", "cam_poses_from_states", "(", "state", ")", "\n", "# TODO: These source and dest should go as arguments to get_maps (in forward pass not params)", "\n", "transformer", "=", "MapTransformerBase", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "maybe_cuda", "(", "transformer", ")", "\n", "transformer", ".", "set_maps", "(", "traj_gt_w", ",", "None", ")", "\n", "traj_gt_r", ",", "_", "=", "transformer", ".", "get_maps", "(", "b_poses", ")", "\n", "self", ".", "clear_inputs", "(", "\"traj_gt_r_select\"", ")", "\n", "self", ".", "clear_inputs", "(", "\"traj_gt_w_select\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_r_select\"", ",", "traj_gt_r", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_w_select\"", ",", "traj_gt_w", ")", "\n", "\n", "action", "=", "self", "(", "traj_gt_r", ",", "firstseg", "=", "[", "self", ".", "seq_step", "==", "1", "]", ")", "\n", "\n", "output_action", "=", "action", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "stop_prob", "=", "output_action", "[", "3", "]", "\n", "output_stop", "=", "1", "if", "stop_prob", ">", "self", ".", "params", "[", "\"stop_threshold\"", "]", "else", "0", "\n", "output_action", "[", "3", "]", "=", "output_stop", "\n", "\n", "return", "output_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.deterministic_action": [[194, 200], ["action_mean.size", "torch.autograd.Variable", "torch.autograd.Variable", "learning.inputs.common.empty_float_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "deterministic_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "batch_size", "=", "action_mean", ".", "size", "(", "0", ")", "\n", "action", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "4", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "action", "[", ":", ",", "0", ":", "3", "]", "=", "action_mean", "[", ":", ",", "0", ":", "3", "]", "\n", "action", "[", ":", ",", "3", "]", "=", "stop_prob", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.sample_action": [[201, 205], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "action", "=", "torch", ".", "normal", "(", "action_mean", ",", "action_std", ")", "\n", "stop", "=", "torch", ".", "bernoulli", "(", "stop_prob", ")", "\n", "return", "action", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.start_sequence": [[207, 212], ["model_sm_action_gt.ModelTrajectoryToAction.reset", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "print", "(", "\"RESETTED!\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.cam_poses_from_states": [[213, 218], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.save": [[219, 223], ["data_io.model_io.save_pytorch_model", "print", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.save_pytorch_model"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "filename", "=", "self", ".", "params", "[", "\"map_to_action_file\"", "]", "+", "\"_\"", "+", "self", ".", "run_name", "+", "\"_\"", "+", "str", "(", "epoch", ")", "\n", "save_pytorch_model", "(", "self", ".", "map_to_action", ",", "filename", ")", "\n", "print", "(", "\"Saved action model to \"", "+", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.forward": [[224, 241], ["model_sm_action_gt.ModelTrajectoryToAction.map_to_action", "model_sm_action_gt.ModelTrajectoryToAction.deterministic_action", "model_sm_action_gt.ModelTrajectoryToAction.keep_inputs", "model_sm_action_gt.ModelTrajectoryToAction.prof.tick"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.deterministic_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick"], ["", "def", "forward", "(", "self", ",", "traj_gt_r", ",", "firstseg", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param has_obs: list of booleans of length B indicating whether the given element in the sequence has an observation\n        :param yield_semantic_maps: If true, will not compute actions (full model), but return the semantic maps that\n            were built along the way in response to the images. This is ugly, but allows code reuse\n        :return:\n        \"\"\"", "\n", "action_pred", "=", "self", ".", "map_to_action", "(", "traj_gt_r", ",", "None", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "out_action", "=", "self", ".", "deterministic_action", "(", "action_pred", "[", ":", ",", "0", ":", "3", "]", ",", "None", ",", "action_pred", "[", ":", ",", "3", "]", ")", "\n", "self", ".", "keep_inputs", "(", "\"action\"", ",", "out_action", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_to_action\"", ")", "\n", "\n", "return", "out_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.maybe_cuda": [[242, 254], ["tensor.cuda", "type", "tensor.data.pin_memory", "type", "type", "tensor.pin_memory"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "if", "False", ":", "\n", "                ", "if", "type", "(", "tensor", ")", "is", "Variable", ":", "\n", "                    ", "tensor", ".", "data", ".", "pin_memory", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", "is", "Pose", ":", "\n", "                    ", "pass", "\n", "", "elif", "type", "(", "tensor", ")", "is", "torch", ".", "FloatTensor", ":", "\n", "                    ", "tensor", ".", "pin_memory", "(", ")", "\n", "", "", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.cuda_var": [[255, 257], ["learning.inputs.common.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "cuda_var", "(", "tensor", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.sup_loss_on_batch": [[259, 347], ["model_sm_action_gt.ModelTrajectoryToAction.prof.tick", "torch.autograd.Variable", "torch.autograd.Variable", "model_sm_action_gt.ModelTrajectoryToAction.maybe_cuda", "model_sm_action_gt.ModelTrajectoryToAction.maybe_cuda", "model_sm_action_gt.ModelTrajectoryToAction.maybe_cuda", "model_sm_action_gt.ModelTrajectoryToAction.size", "range", "model_sm_action_gt.ModelTrajectoryToAction.writer.add_scalar", "model_sm_action_gt.ModelTrajectoryToAction.prof.tick", "model_sm_action_gt.ModelTrajectoryToAction.writer.add_dict", "model_sm_action_gt.ModelTrajectoryToAction.inc_iter", "model_sm_action_gt.ModelTrajectoryToAction.prof.tick", "model_sm_action_gt.ModelTrajectoryToAction.prof.loop", "model_sm_action_gt.ModelTrajectoryToAction.prof.print_stats", "learning.inputs.common.empty_float_tensor", "print", "model_sm_action_gt.ModelTrajectoryToAction.reset", "model_sm_action_gt.ModelTrajectoryToAction.prof.tick", "learning.inputs.sequence.len_until_nones", "model_sm_action_gt.ModelTrajectoryToAction.keep_inputs", "model_sm_action_gt.ModelTrajectoryToAction.cam_poses_from_states", "learning.modules.map_transformer_base.MapTransformerBase", "model_sm_action_gt.ModelTrajectoryToAction.maybe_cuda", "learning.modules.map_transformer_base.MapTransformerBase.set_maps", "learning.modules.map_transformer_base.MapTransformerBase.get_maps", "model_sm_action_gt.ModelTrajectoryToAction.keep_inputs", "model_sm_action_gt.ModelTrajectoryToAction.keep_inputs", "model_sm_action_gt.ModelTrajectoryToAction.prof.tick", "model_sm_action_gt.ModelTrajectoryToAction.", "model_sm_action_gt.ModelTrajectoryToAction.action_loss", "model_sm_action_gt.ModelTrajectoryToAction.action_loss.batch_reduce_loss", "model_sm_action_gt.ModelTrajectoryToAction.action_loss.reduce_loss", "model_sm_action_gt.ModelTrajectoryToAction.prof.tick", "model_sm_action_gt.ModelTrajectoryToAction.get_iter", "learning.meters_and_metrics.meter_server.get_current_meters", "model_sm_action_gt.ModelTrajectoryToAction.get_iter", "list", "action_loss_avg.data.cpu", "b_traj_ground_truth_select.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.len_until_nones", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.batch_reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "action_loss_total", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "return", "action_loss_total", "\n", "\n", "", "actions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"actions\"", "]", ")", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", ")", "\n", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "\n", "\n", "# Auxiliary labels", "\n", "traj_ground_truth_select", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"traj_ground_truth\"", "]", ")", "\n", "# stops = self.maybe_cuda(batch[\"stops\"])", "\n", "metadata", "=", "batch", "[", "\"md\"", "]", "\n", "batch_size", "=", "actions", ".", "size", "(", "0", ")", "\n", "count", "=", "0", "\n", "\n", "# Loop thru batch", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "seg_idx", "=", "-", "1", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "b_seq_len", "=", "len_until_nones", "(", "metadata", "[", "b", "]", ")", "\n", "\n", "# TODO: Generalize this", "\n", "# Slice the data according to the sequence length", "\n", "b_metadata", "=", "metadata", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_actions", "=", "actions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_traj_ground_truth_select", "=", "traj_ground_truth_select", "[", "b", "]", "\n", "b_states", "=", "states", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_global_select\"", ",", "b_traj_ground_truth_select", ")", "\n", "\n", "#b_firstseg = get_obs_mask_segstart(b_metadata)", "\n", "b_firstseg", "=", "firstseg_mask", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "# Optional Auxiliary Inputs", "\n", "# ----------------------------------------------------------------------------", "\n", "gtsize", "=", "list", "(", "b_traj_ground_truth_select", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "b_poses", "=", "self", ".", "cam_poses_from_states", "(", "b_states", ")", "\n", "# TODO: These source and dest should go as arguments to get_maps (in forward pass not params)", "\n", "transformer", "=", "MapTransformerBase", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "maybe_cuda", "(", "transformer", ")", "\n", "transformer", ".", "set_maps", "(", "b_traj_ground_truth_select", ",", "None", ")", "\n", "traj_gt_local_select", ",", "_", "=", "transformer", ".", "get_maps", "(", "b_poses", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_r_select\"", ",", "traj_gt_local_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_w_select\"", ",", "b_traj_ground_truth_select", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"inputs\"", ")", "\n", "\n", "actions", "=", "self", "(", "traj_gt_local_select", ",", "firstseg", "=", "b_firstseg", ")", "\n", "action_losses", ",", "_", "=", "self", ".", "action_loss", "(", "b_actions", ",", "actions", ",", "batchreduce", "=", "False", ")", "\n", "action_losses", "=", "self", ".", "action_loss", ".", "batch_reduce_loss", "(", "action_losses", ")", "\n", "action_loss", "=", "self", ".", "action_loss", ".", "reduce_loss", "(", "action_losses", ")", "\n", "action_loss_total", "=", "action_loss", "\n", "count", "+=", "b_seq_len", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"loss\"", ")", "\n", "\n", "", "action_loss_avg", "=", "action_loss_total", "/", "(", "count", "+", "1e-9", ")", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss_avg", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "action_loss_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_action_gt.ModelTrajectoryToAction.get_dataset": [[348, 353], ["data_sources.append", "learning.datasets.segment_dataset_simple.SegmentDataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "        ", "data_sources", "=", "[", "]", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.__init__": [[5, 10], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WassersteinCriticBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wasserstein", "=", "True", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "clip_value", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.get_iter": [[11, 13], ["int", "wasserstein_critic_base.WassersteinCriticBase.iter.data.item"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.inc_iter": [[14, 16], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.clip_weights": [[17, 24], ["wasserstein_critic_base.WassersteinCriticBase.parameters", "p.data.clamp_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "clip_weights", "(", "self", ")", ":", "\n", "# Clip weights of discriminator", "\n", "        ", "if", "self", ".", "clip_value", ":", "\n", "            ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "p", "is", "self", ".", "iter", ":", "\n", "                    ", "continue", "\n", "", "p", ".", "data", ".", "clamp_", "(", "-", "self", ".", "clip_value", ",", "self", ".", "clip_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.calc_gradient_penalty": [[25, 50], ["len", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.cuda.cuda.expand().contiguous", "alpha.cuda.cuda.view", "alpha.cuda.cuda.cuda", "interpolates.requires_grad_", "wasserstein_critic_base.WassersteinCriticBase.", "gradients.view.view.view", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "gradients.view.view.size", "alpha.cuda.cuda.expand", "features_real.detach", "features_sim.detach", "int", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "gradients.view.view.norm", "features_real.nelement", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "wasserstein_critic_base.WassersteinCriticBase.size"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "", "", "def", "calc_gradient_penalty", "(", "self", ",", "features_real", ",", "features_sim", ")", ":", "\n", "\n", "# Interpolate real and simulated features. This idea is from improved Wassertein GAN training and add this", "\n", "# regularization loss to the total loss.", "\n", "# cf https://github.com/jalola/improved-wgan-pytorch/blob/master/gan_train.py", "\n", "        ", "BATCH_SIZE", "=", "len", "(", "features_real", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "BATCH_SIZE", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "BATCH_SIZE", ",", "int", "(", "features_real", ".", "nelement", "(", ")", "/", "BATCH_SIZE", ")", ")", ".", "contiguous", "(", ")", "\n", "alpha", "=", "alpha", ".", "view", "(", "features_real", ".", "shape", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "\n", "interpolates", "=", "alpha", "*", "features_real", ".", "detach", "(", ")", "+", "(", "(", "1", "-", "alpha", ")", "*", "features_sim", ".", "detach", "(", ")", ")", "\n", "\n", "interpolates", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "disc_interpolates", "=", "self", "(", "interpolates", ")", "\n", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "gradients", "=", "gradients", ".", "view", "(", "gradients", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gradient_loss", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gradient_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.calc_domain_loss": [[52, 54], ["None"], "methods", ["None"], ["", "def", "calc_domain_loss", "(", "self", ",", "real_activation_store", ",", "sim_activation_store", ")", ":", "\n", "        ", "...", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.__init__": [[28, 53], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.action_loss.ActionLoss", "utils.keyboard.KeyTeleop", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_instance_name", "=", "\"only\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage2_Keyboard", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage2\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "instance_name", "=", "model_instance_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.instance_name}\"", ")", "\n", "\n", "self", ".", "params_s1", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage2\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "teleoper", "=", "KeyTeleop", "(", ")", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "self", ".", "gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.get_iter": [[54, 56], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.inc_iter": [[57, 59], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.init_weights": [[60, 62], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.reset": [[63, 65], ["model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.teleoper.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "teleoper", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.setEnvContext": [[66, 69], ["print", "str"], "methods", ["None"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.start_segment_rollout": [[70, 80], ["learning.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.maybe_cuda", "model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_segment_rollout", "(", "self", ")", ":", "\n", "        ", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "m_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", "\n", "w_size", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "\n", "self", ".", "gt_labels", "=", "get_top_down_ground_truth_static_global", "(", "\n", "md", ".", "ENV_ID", ",", "md", ".", "START_IDX", ",", "md", ".", "END_IDX", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "self", ".", "seg_idx", "=", "md", ".", "SEG_IDX", "\n", "self", ".", "gt_labels", "=", "self", ".", "maybe_cuda", "(", "self", ".", "gt_labels", ")", "\n", "if", "self", ".", "params", "[", "\"clear_history\"", "]", ":", "\n", "            ", "self", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.cam_poses_from_states": [[81, 86], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.forward": [[87, 107], ["model_pvn_stage2_keyboard.PVN_Stage2_Keyboard.teleoper.get_command", "inner_goal_dist[].sum().detach().item", "numpy.zeros", "int", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "inner_goal_dist[].max", "inner_goal_dist[].max", "inner_goal_dist[].detach", "map_uncoverage[].detach", "inner_goal_dist[].sum().detach", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "inner_goal_dist[].sum"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.key_teleop_noinstr.KeyTeleop.get_command", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "forward", "(", "self", ",", "visit_dist_r", ",", "map_uncoverage", ",", "firstseg", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "action", "=", "self", ".", "teleoper", ".", "get_command", "(", ")", "\n", "\n", "inner_goal_dist", "=", "visit_dist_r", ".", "inner_distribution", "\n", "\n", "prob_goal_inside", "=", "inner_goal_dist", "[", "0", ",", "1", "]", ".", "sum", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "rectangle", "=", "np", ".", "zeros", "(", "[", "100", ",", "20", ",", "3", "]", ")", "\n", "fill_until", "=", "int", "(", "100", "*", "prob_goal_inside", ")", "\n", "rectangle", "[", "fill_until", ":", ",", ":", ",", "0", "]", "=", "1.0", "\n", "Presenter", "(", ")", ".", "show_image", "(", "rectangle", ",", "\"P(outside)\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "\n", "# Normalize channels for viewing", "\n", "inner_goal_dist", "[", "0", ",", "0", "]", "/=", "(", "inner_goal_dist", "[", "0", ",", "0", "]", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "inner_goal_dist", "[", "0", ",", "1", "]", "/=", "(", "inner_goal_dist", "[", "0", ",", "1", "]", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "inner_goal_dist", "[", "0", "]", ".", "detach", "(", ")", ",", "\"visit_dist\"", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "map_uncoverage", "[", "0", "]", ".", "detach", "(", ")", ",", "\"unobserved\"", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "\n", "action_t", "=", "torch", ".", "Tensor", "(", "action", ")", "\n", "return", "action_t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.__init__": [[22, 61], ["learning.models.wasserstein_critic_base.WassersteinCriticBase.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "torch.Sequential", "torch.Sequential", "LingUNetActivationEncoder", "torch.Linear", "torch.Linear", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "parameters.parameter_server.get_current_parameters", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "data_io.paths.get_logging_dir", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage1_Critic_Big", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage1_critic_big\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/pvn_stage1_critic\"", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelCritic\"", "]", "\n", "nc", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "\n", "ndf", "=", "self", ".", "params", "[", "\"critic_channels\"", "]", "\n", "self", ".", "grad_penalty_weight", "=", "self", ".", "params", "[", "\"grad_penalty_weight\"", "]", "\n", "self", ".", "clip_value", "=", "self", ".", "params", "[", "\"clip_value\"", "]", "\n", "\n", "# if True, remove batch normalization", "\n", "self", ".", "improved", "=", "True", "\n", "# TODO: try more sophisticated networks.", "\n", "# Indeed network cannot be too strong because of Wasserstein GAN property", "\n", "\n", "self", ".", "main_fpv", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 18 x 32", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "nc", ",", "out_channels", "=", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 9 x 16", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", ",", "out_channels", "=", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 4 x 8", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", "*", "2", ",", "out_channels", "=", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 2 x 4", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", "*", "2", ",", "out_channels", "=", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 1 x 2", "\n", ")", "\n", "\n", "self", ".", "main_lingunet", "=", "LingUNetActivationEncoder", "(", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "[", "\"lingunet\"", "]", ")", "\n", "\n", "self", ".", "regressor", "=", "nn", ".", "Linear", "(", "(", "ndf", "*", "4", ")", "*", "2", ",", "1", ")", "\n", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.init_weights": [[62, 64], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.forward": [[65, 76], ["model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.main_fpv", "fpv_features_f.view.view.view", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.main_lingunet", "unet_features_f.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.regressor", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.view().squeeze", "fpv_features.size", "unet_features.size", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fpv_features", ",", "unet_features", ")", ":", "\n", "        ", "fpv_features_f", "=", "self", ".", "main_fpv", "(", "fpv_features", ")", "\n", "fpv_features_f", "=", "fpv_features_f", ".", "view", "(", "fpv_features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "unet_features_f", "=", "self", ".", "main_lingunet", "(", "unet_features", ")", "\n", "unet_features_f", "=", "unet_features_f", ".", "view", "(", "unet_features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "comb_features", "=", "torch", ".", "cat", "(", "[", "fpv_features_f", ",", "unet_features_f", "]", ",", "1", ")", "\n", "\n", "output", "=", "self", ".", "regressor", "(", "comb_features", ")", "\n", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.cuda_var": [[77, 79], ["tensor.to", "next", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.calc_domain_loss": [[81, 119], ["learning.modules.key_tensor_store.KeyTensorStore", "real_activation_store.get_inputs_batch", "sim_activation_store.get_inputs_batch", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.writer.add_scalar", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.writer.add_scalar", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.inc_iter", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.clip_weights", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_wass.item", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.get_iter", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.calc_gradient_penalty", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "loss_wass.item", "model_pvn_stage1_critic_big.PVN_Stage1_Critic_Big.get_iter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.clip_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.calc_gradient_penalty", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter"], ["", "def", "calc_domain_loss", "(", "self", ",", "real_activation_store", ",", "sim_activation_store", ")", ":", "\n", "\n", "        ", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "\n", "features_real", "=", "real_activation_store", ".", "get_inputs_batch", "(", "\"fpv_features\"", ",", "cat_not_stack", "=", "True", ")", "\n", "features_sim", "=", "sim_activation_store", ".", "get_inputs_batch", "(", "\"fpv_features\"", ",", "cat_not_stack", "=", "True", ")", "\n", "\n", "# Real and simulated features might have different trajectory lengths. This could give away the source domain.", "\n", "# To deal with this, randomly sample a subset of the longest trajectory.", "\n", "\n", "# Use weight clipping instead of gradient penalty", "\n", "if", "self", ".", "grad_penalty_weight", "<=", "0", ":", "\n", "            ", "self", ".", "clip_weights", "(", ")", "\n", "\n", "# TODO: Handle different length sequences - choose number of feature maps to randomly sample", "\n", "", "pred_real", "=", "self", "(", "features_real", ")", "\n", "pred_sim", "=", "self", "(", "features_sim", ")", "\n", "\n", "# cf Wasserstein GAN paper. The critic tries to maximize this difference.", "\n", "loss_wass", "=", "torch", ".", "mean", "(", "pred_real", ")", "-", "torch", ".", "mean", "(", "pred_sim", ")", "\n", "\n", "tensor_store", ".", "keep_input", "(", "\"wass_loss\"", ",", "loss_wass", ")", "\n", "\n", "prefix", "=", "\"pvn_critic\"", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{prefix}/wass_loss\"", ",", "loss_wass", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "total_loss", "=", "loss_wass", "\n", "if", "self", ".", "grad_penalty_weight", ">", "0", ":", "\n", "            ", "gradient_loss", "=", "self", ".", "calc_gradient_penalty", "(", "features_real", ",", "features_sim", ")", "\n", "tensor_store", ".", "keep_input", "(", "\"gradient_loss\"", ",", "gradient_loss", ")", "\n", "total_loss", "+=", "self", ".", "grad_penalty_weight", "*", "gradient_loss", "\n", "\n", "", "tensor_store", ".", "keep_input", "(", "\"total_loss\"", ",", "total_loss", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{prefix}/wass_loss_with_penalty\"", ",", "loss_wass", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "return", "total_loss", ",", "tensor_store", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.__init__": [[66, 204], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.auxiliary_losses.AuxiliaryLosses", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "learning.modules.img_to_map.fpv_to_global_map.FPVToGlobalMap", "learning.modules.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_transformer_base.MapTransformerBase", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.print_auxiliary_info", "learning.modules.action_loss.ActionLoss", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "RvizInterface", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "learning.modules.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "learning.modules.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.goal_auxiliary.GoalAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.add_auxiliary", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_instance_name", "=", "\"\"", ")", ":", "\n", "\n", "        ", "super", "(", "ModelGSMNBiDomain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"gsmn_bidomain\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "name", "=", "model_instance_name", "\n", "if", "not", "self", ".", "name", ":", "\n", "            ", "self", ".", "name", "=", "\"\"", "\n", "", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"runs/{run_name}/{self.name}\"", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"Model\"", "]", "\n", "self", ".", "aux_weights", "=", "get_current_parameters", "(", ")", "[", "\"AuxWeights\"", "]", "\n", "self", ".", "use_aux", "=", "self", ".", "params", "[", "\"UseAuxiliaries\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "self", ".", "aux_losses", "=", "AuxiliaryLosses", "(", ")", "\n", "\n", "self", ".", "rviz", "=", "None", "\n", "if", "self", ".", "params", ".", "get", "(", "\"rviz\"", ")", ":", "\n", "            ", "self", ".", "rviz", "=", "RvizInterface", "(", "\n", "base_name", "=", "\"/gsmn/\"", ",", "\n", "map_topics", "=", "[", "\"semantic_map\"", ",", "\"grounding_map\"", ",", "\"goal_map\"", "]", ",", "\n", "markerarray_topics", "=", "[", "\"instruction\"", "]", ")", "\n", "\n", "\n", "# Path-pred FPV model definition", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "", "self", ".", "img_to_features_w", "=", "FPVToGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "res_channels", "=", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "map_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "img_w", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "img_h", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "cam_h_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "img_dbg", "=", "IMG_DBG", ")", "\n", "\n", "self", ".", "map_accumulator_w", "=", "LeakyIntegratorGlobalMap", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Pre-process the accumulated map to do language grounding if necessary - in the world reference frame", "\n", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", "and", "not", "self", ".", "use_aux", "[", "\"grounding_features\"", "]", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "LangFilterMapProcessor", "(", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "spatial", "=", "False", ",", "cat_out", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "IdentityMapProcessor", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "", "if", "self", ".", "use_aux", "[", "\"goal_map\"", "]", ":", "\n", "            ", "self", ".", "map_processor_b_r", "=", "LangFilterMapProcessor", "(", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"goal_channels\"", "]", ",", "\n", "spatial", "=", "self", ".", "params", "[", "\"spatial_goal_filter\"", "]", ",", "\n", "cat_out", "=", "self", ".", "params", "[", "\"cat_rel_and_goal\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_processor_b_r", "=", "IdentityMapProcessor", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Common", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# Sentence Embedding", "\n", "", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ",", "dropout", "=", "0.0", ")", "\n", "\n", "self", ".", "map_transform_w_to_r", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "map_transform_r_to_w", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Output an action given the global semantic map", "\n", "if", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"downsample2\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "EgoMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "other_features_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ")", "\n", "\n", "", "elif", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"cropped\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "CroppedMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", "\n", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# We add all auxiliaries that are necessary. The first argument is the auxiliary name, followed by parameters,", "\n", "# followed by variable number of names of inputs. ModuleWithAuxiliaries will automatically collect these inputs", "\n", "# that have been saved with keep_auxiliary_input() during execution", "\n", "", "if", "self", ".", "use_aux", "[", "\"class_features\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv_features\"", ",", "\"lm_indices\"", ",", "\"tensor_store\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_features\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_ground\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv_features\"", ",", "\"lm_mentioned\"", ",", "\"tensor_store\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"class_map\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class_map\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"map_S_W\"", ",", "\"lm_pos_map\"", ",", "\"lm_indices\"", ",", "\"tensor_store\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_grounding_map\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"dropout\"", "]", ",", "\n", "\"map_R_W\"", ",", "\"lm_pos_map\"", ",", "\"lm_mentioned\"", ",", "\"tensor_store\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"goal_map\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "GoalAuxiliary2D", "(", "\"aux_goal_map\"", ",", "self", ".", "params", "[", "\"goal_channels\"", "]", ",", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\"map_G_W\"", ",", "\"goal_pos_map\"", ")", ")", "\n", "# RSS model uses templated data for landmark and side prediction", "\n", "", "if", "self", ".", "use_aux", "[", "\"language\"", "]", "and", "self", ".", "params", "[", "\"templates\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "1", ",", "\n", "\"sentence_embed\"", ",", "\"lm_mentioned_tplt\"", ")", ")", "\n", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_side\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"num_sides\"", "]", ",", "1", ",", "\n", "\"sentence_embed\"", ",", "\"side_mentioned_tplt\"", ")", ")", "\n", "# CoRL model uses alignment-model groundings", "\n", "", "elif", "self", ".", "use_aux", "[", "\"language\"", "]", ":", "\n", "# one output for each landmark, 2 classes per output. This is for finetuning, so use the embedding that's gonna be fine tuned", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm_nl\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"l1_regularization\"", "]", ":", "\n", "            ", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"aux_regularize_features\"", ",", "\"l1\"", ",", "\"map_S_W\"", ")", ")", "\n", "self", ".", "aux_losses", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"aux_regularize_features\"", ",", "\"l1\"", ",", "\"map_R_W\"", ")", ")", "\n", "\n", "", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n", "self", ".", "aux_losses", ".", "print_auxiliary_info", "(", ")", "\n", "\n", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.cuda": [[205, 218], ["CudaModule.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.sentence_embedding.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.map_accumulator_w.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.map_processor_a_w.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.map_processor_b_r.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.img_to_features_w.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.map_to_action.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.action_loss.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_w_to_r.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_r_to_w.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "CudaModule", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "aux_losses", ".", "cuda", "(", "device", ")", "\n", "self", ".", "sentence_embedding", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_accumulator_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_a_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_b_r", ".", "cuda", "(", "device", ")", "\n", "self", ".", "img_to_features_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_to_action", ".", "cuda", "(", "device", ")", "\n", "self", ".", "action_loss", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_w_to_r", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.steal_cross_domain_modules": [[219, 230], ["None"], "methods", ["None"], ["", "def", "steal_cross_domain_modules", "(", "self", ",", "other_self", ")", ":", "\n", "# TODO: Consider whether to share auxiliary losses, and if so, all of them?", "\n", "        ", "self", ".", "aux_losses", "=", "other_self", ".", "aux_losses", "\n", "self", ".", "action_loss", "=", "other_self", ".", "action_loss", "\n", "\n", "# TODO: Make sure that none of these things are stateful, or that there are resets after every forward pass", "\n", "self", ".", "sentence_embedding", "=", "other_self", ".", "sentence_embedding", "\n", "self", ".", "map_accumulator_w", "=", "other_self", ".", "map_accumulator_w", "\n", "self", ".", "map_processor_a_w", "=", "other_self", ".", "map_processor_a_w", "\n", "self", ".", "map_processor_b_r", "=", "other_self", ".", "map_processor_b_r", "\n", "self", ".", "map_to_action", "=", "other_self", ".", "map_to_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.both_domain_parameters": [[239, 249], ["model_gsmn_bidomain.ModelGSMNBiDomain.parameters", "model_gsmn_bidomain.ModelGSMNBiDomain.img_to_features_w.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "both_domain_parameters", "(", "self", ",", "other_self", ")", ":", "\n", "# This function iterates and yields parameters from this module and the other module, but does not yield", "\n", "# shared parameters twice.", "\n", "# First yield all of the other module's parameters", "\n", "        ", "for", "p", "in", "other_self", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "# Then yield all the parameters from the this module that are not shared with the other one", "\n", "", "for", "p", "in", "self", ".", "img_to_features_w", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.get_iter": [[250, 252], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.inc_iter": [[253, 255], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.load_img_feature_weights": [[256, 266], ["model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "data_io.model_io.load_pytorch_model", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "model_gsmn_bidomain.ModelGSMNBiDomain.img_to_features_w.img_to_features.load_state_dict", "print", "data_io.model_io.find_state_subdict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.find_state_subdict"], ["", "def", "load_img_feature_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "get", "(", "\"load_feature_net\"", ")", ":", "\n", "            ", "filename", "=", "self", ".", "params", ".", "get", "(", "\"feature_net_filename\"", ")", "\n", "weights", "=", "load_pytorch_model", "(", "None", ",", "filename", ")", "\n", "prefix", "=", "self", ".", "params", ".", "get", "(", "\"feature_net_tensor_name\"", ")", "\n", "if", "prefix", ":", "\n", "                ", "weights", "=", "find_state_subdict", "(", "weights", ",", "prefix", ")", "\n", "# TODO: This breaks OOP conventions", "\n", "", "self", ".", "img_to_features_w", ".", "img_to_features", ".", "load_state_dict", "(", "weights", ")", "\n", "print", "(", "f\"Loaded pretrained weights from file {filename} with prefix {prefix}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.init_weights": [[267, 275], ["model_gsmn_bidomain.ModelGSMNBiDomain.img_to_features_w.init_weights", "model_gsmn_bidomain.ModelGSMNBiDomain.load_img_feature_weights", "model_gsmn_bidomain.ModelGSMNBiDomain.map_accumulator_w.init_weights", "model_gsmn_bidomain.ModelGSMNBiDomain.sentence_embedding.init_weights", "model_gsmn_bidomain.ModelGSMNBiDomain.map_to_action.init_weights", "model_gsmn_bidomain.ModelGSMNBiDomain.map_processor_a_w.init_weights", "model_gsmn_bidomain.ModelGSMNBiDomain.map_processor_b_r.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.load_img_feature_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "load_img_feature_weights", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "map_to_action", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_a_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_b_r", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.reset": [[276, 285], ["model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.reset", "model_gsmn_bidomain.ModelGSMNBiDomain.sentence_embedding.reset", "model_gsmn_bidomain.ModelGSMNBiDomain.img_to_features_w.reset", "model_gsmn_bidomain.ModelGSMNBiDomain.map_accumulator_w.reset", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_w_to_r.reset", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_r_to_w.reset", "model_gsmn_bidomain.ModelGSMNBiDomain.load_img_feature_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.load_img_feature_weights"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensor_store", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_w_to_r", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "reset", "(", ")", "\n", "self", ".", "load_img_feature_weights", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.set_env_context": [[286, 289], ["print", "str"], "methods", ["None"], ["", "def", "set_env_context", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.save_viz": [[290, 316], ["imageio.imsave", "learning.modules.key_tensor_store.save_tensors_as_images", "[].data.cpu().squeeze().numpy", "visualization.Presenter().save_action", "os.path.join", "str", "learning.utils.get_viz_dir_for_rollout", "open", "fp.write", "learning.utils.get_viz_dir_for_rollout", "[].data.cpu().squeeze", "str", "visualization.Presenter", "learning.utils.get_viz_dir_for_rollout", "str", "[].data.cpu", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get_inputs_batch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.save_tensors_as_images", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_action", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch"], ["", "def", "save_viz", "(", "self", ",", "images_in", ",", "instruction", ")", ":", "\n", "# Save incoming images", "\n", "        ", "imsave", "(", "os", ".", "path", ".", "join", "(", "get_viz_dir_for_rollout", "(", ")", ",", "\"fpv_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", ")", ",", "images_in", ")", "\n", "#self.tensor_store.keep_input(\"fpv_img\", images_in)", "\n", "# Save all of these tensors from the tensor store as images", "\n", "save_tensors_as_images", "(", "self", ".", "tensor_store", ",", "[", "\n", "\"images_w\"", ",", "\n", "\"fpv_img\"", ",", "\n", "\"fpv_features\"", ",", "\n", "\"map_F_W\"", ",", "\n", "\"map_M_W\"", ",", "\n", "\"map_S_W\"", ",", "\n", "\"map_R_W\"", ",", "\n", "\"map_R_R\"", ",", "\n", "\"map_G_R\"", ",", "\n", "\"map_G_W\"", "\n", "]", ",", "str", "(", "self", ".", "seq_step", ")", ")", "\n", "\n", "# Save action as image", "\n", "action", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"action\"", ")", "[", "-", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "action_fname", "=", "get_viz_dir_for_rollout", "(", ")", "+", "\"action_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", "\n", "Presenter", "(", ")", ".", "save_action", "(", "action", ",", "action_fname", ",", "\"\"", ")", "\n", "\n", "instruction_fname", "=", "get_viz_dir_for_rollout", "(", ")", "+", "\"instruction.txt\"", "\n", "with", "open", "(", "instruction_fname", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "instruction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.get_action": [[317, 390], ["model_gsmn_bidomain.ModelGSMNBiDomain.eval", "learning.inputs.vision.standardize_image", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "data_io.instructions.debug_untokenize_instruction", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "learning.inputs.common.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "model_gsmn_bidomain.ModelGSMNBiDomain.squeeze().data.cpu().numpy", "learning.inputs.sequence.none_padded_seq_to_tensor", "learning.inputs.sequence.none_padded_seq_to_tensor", "state.cuda.cuda.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.show_landmark_locations", "model_gsmn_bidomain.ModelGSMNBiDomain.reset", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.calculate_aux_loss", "model_gsmn_bidomain.ModelGSMNBiDomain.get_overlaid_classification_results", "model_gsmn_bidomain.ModelGSMNBiDomain.save_viz", "model_gsmn_bidomain.ModelGSMNBiDomain.rviz.publish_instruction_text", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img_in_t.cuda.cuda.cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.squeeze().data.cpu", "data_io.instructions.debug_untokenize_instruction", "model_gsmn_bidomain.ModelGSMNBiDomain.squeeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.show_landmark_locations", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.get_overlaid_classification_results", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.save_viz", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_instruction_text", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction"], ["", "", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        #TODO: Absorb corpus within model\n        :return:\n        \"\"\"", "\n", "# TODO: Simplify this", "\n", "self", ".", "eval", "(", ")", "\n", "images_np_pure", "=", "state", ".", "image", "\n", "state_np", "=", "state", ".", "state", "\n", "\n", "#print(\"Act: \" + debug_untokenize_instruction(instruction))", "\n", "\n", "images_np", "=", "standardize_image", "(", "images_np_pure", ")", "\n", "image_fpv", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "images_np", "]", ")", ")", "\n", "state", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "state_np", "]", ")", ")", "\n", "# Add the batch dimension", "\n", "\n", "first_step", "=", "True", "\n", "if", "instruction", "==", "self", ".", "prev_instruction", ":", "\n", "            ", "first_step", "=", "False", "\n", "", "self", ".", "prev_instruction", "=", "instruction", "\n", "instruction_str", "=", "debug_untokenize_instruction", "(", "instruction", ")", "\n", "\n", "# TODO: Move this to PomdpInterface (for now it's here because this is already visualizing the maps)", "\n", "if", "first_step", ":", "\n", "            ", "if", "self", ".", "rviz", "is", "not", "None", ":", "\n", "                ", "self", ".", "rviz", ".", "publish_instruction_text", "(", "\"instruction\"", ",", "debug_untokenize_instruction", "(", "instruction", ")", ")", "\n", "\n", "", "", "img_in_t", "=", "image_fpv", "\n", "img_in_t", ".", "volatile", "=", "True", "\n", "\n", "instr_len", "=", "[", "len", "(", "instruction", ")", "]", "if", "instruction", "is", "not", "None", "else", "None", "\n", "instruction", "=", "torch", ".", "LongTensor", "(", "instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "instruction", "=", "cuda_var", "(", "instruction", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n", "state", ".", "volatile", "=", "True", "\n", "\n", "if", "self", ".", "is_cuda", ":", "\n", "            ", "if", "img_in_t", "is", "not", "None", ":", "\n", "                ", "img_in_t", "=", "img_in_t", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "", "state", "=", "state", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "\n", "", "step_enc", "=", "None", "\n", "plan_now", "=", "None", "\n", "\n", "self", ".", "seq_step", "+=", "1", "\n", "\n", "action", "=", "self", "(", "img_in_t", ",", "state", ",", "instruction", ",", "instr_len", ",", "plan", "=", "plan_now", ",", "pos_enc", "=", "step_enc", ")", "\n", "\n", "passive_mode_debug_projections", "=", "True", "\n", "if", "passive_mode_debug_projections", ":", "\n", "            ", "self", ".", "show_landmark_locations", "(", "loop", "=", "False", ",", "states", "=", "state", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "# Run auxiliary objectives for debugging purposes (e.g. to compute classification predictions)", "\n", "", "if", "self", ".", "params", ".", "get", "(", "\"run_auxiliaries_at_test_time\"", ")", ":", "\n", "            ", "_", ",", "_", "=", "self", ".", "aux_losses", ".", "calculate_aux_loss", "(", "self", ".", "tensor_store", ",", "reduce_average", "=", "True", ")", "\n", "overlaid", "=", "self", ".", "get_overlaid_classification_results", "(", "whole_batch", "=", "False", ")", "\n", "\n", "# Save materials for analysis and presentation", "\n", "", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "            ", "self", ".", "save_viz", "(", "images_np_pure", ",", "instruction_str", ")", "\n", "\n", "\n", "", "output_action", "=", "action", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stop_prob", "=", "output_action", "[", "3", "]", "\n", "output_stop", "=", "1", "if", "stop_prob", ">", "self", ".", "params", "[", "\"stop_p\"", "]", "else", "0", "\n", "output_action", "[", "3", "]", "=", "output_stop", "\n", "\n", "return", "output_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.get_overlaid_classification_results": [[391, 405], ["model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get_latest_input", "predictions[].detach", "[].detach", "visualization.Presenter().overlaid_image", "visualization.Presenter", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get_latest_input"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input"], ["", "def", "get_overlaid_classification_results", "(", "self", ",", "map_not_features", "=", "False", ")", ":", "\n", "        ", "if", "map_not_features", ":", "\n", "            ", "predictions_name", "=", "\"aux_class_map_predictions\"", "\n", "", "else", ":", "\n", "            ", "predictions_name", "=", "\"aux_class_predictions\"", "\n", "", "predictions", "=", "self", ".", "tensor_store", ".", "get_latest_input", "(", "predictions_name", ")", "\n", "if", "predictions", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "predictions", "=", "predictions", "[", "0", "]", ".", "detach", "(", ")", "\n", "# Get the 3 channels corresponding to no landmark, banana and gorilla", "\n", "predictions", "=", "predictions", "[", "[", "0", ",", "3", ",", "24", "]", ",", ":", ",", ":", "]", "\n", "images", "=", "self", ".", "tensor_store", ".", "get_latest_input", "(", "\"images\"", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "overlaid", "=", "Presenter", "(", ")", ".", "overlaid_image", "(", "images", ",", "predictions", ",", "gray_bg", "=", "True", ")", "\n", "return", "overlaid", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.deterministic_action": [[406, 412], ["action_mean.size", "torch.autograd.Variable", "torch.autograd.Variable", "learning.inputs.common.empty_float_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "deterministic_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "batch_size", "=", "action_mean", ".", "size", "(", "0", ")", "\n", "action", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "4", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "action", "[", ":", ",", "0", ":", "3", "]", "=", "action_mean", "[", ":", ",", "0", ":", "3", "]", "\n", "action", "[", ":", ",", "3", "]", "=", "stop_prob", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.start_sequence": [[414, 419], ["model_gsmn_bidomain.ModelGSMNBiDomain.reset", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "print", "(", "\"RESETTED!\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.cam_poses_from_states": [[421, 436], ["model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "learning.inputs.pose.Pose", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "learning.inputs.pose.get_noisy_poses_torch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_torch"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "\n", "pos_variance", "=", "0", "\n", "rot_variance", "=", "0", "\n", "if", "self", ".", "params", ".", "get", "(", "\"use_pos_noise\"", ")", ":", "\n", "            ", "pos_variance", "=", "self", ".", "params", "[", "\"noisy_pos_variance\"", "]", "\n", "", "if", "self", ".", "params", ".", "get", "(", "\"use_rot_noise\"", ")", ":", "\n", "            ", "rot_variance", "=", "self", ".", "params", "[", "\"noisy_rot_variance\"", "]", "\n", "\n", "", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "if", "self", ".", "params", ".", "get", "(", "\"use_pos_noise\"", ")", "or", "self", ".", "params", ".", "get", "(", "\"use_rot_noise\"", ")", ":", "\n", "            ", "pose", "=", "get_noisy_poses_torch", "(", "pose", ",", "pos_variance", ",", "rot_variance", ",", "cuda", "=", "self", ".", "is_cuda", ",", "cuda_device", "=", "self", ".", "cuda_device", ")", "\n", "", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.forward": [[437, 526], ["model_gsmn_bidomain.ModelGSMNBiDomain.cam_poses_from_states", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.img_to_features_w", "model_gsmn_bidomain.ModelGSMNBiDomain.params.get", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.map_accumulator_w", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "visualization.Presenter().show_image", "model_gsmn_bidomain.ModelGSMNBiDomain.map_processor_a_w", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "visualization.Presenter().show_image", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_w_to_r.set_maps", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_w_to_r.get_maps", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.map_processor_b_r", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_r_to_w.set_maps", "model_gsmn_bidomain.ModelGSMNBiDomain.map_transform_r_to_w.get_maps", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "visualization.Presenter().show_image", "model_gsmn_bidomain.ModelGSMNBiDomain.map_to_action", "model_gsmn_bidomain.ModelGSMNBiDomain.deterministic_action", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.sentence_embedding", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.sentence_embedding.get", "features_w.detach.detach.detach", "visualization.Presenter().show_image", "model_gsmn_bidomain.ModelGSMNBiDomain.rviz.publish_map", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "maps_g_w[].data.cpu().numpy().transpose", "visualization.Presenter", "maps_g_w[].data.cpu().numpy", "maps_g_w[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.deterministic_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_map", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "has_obs", "=", "None", ",", "plan", "=", "None", ",", "save_maps_only", "=", "False", ",", "pos_enc", "=", "None", ",", "noisy_poses", "=", "None", ",", "halfway", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param has_obs: list of booleans of length B indicating whether the given element in the sequence has an observation\n        :param yield_semantic_maps: If true, will not compute actions (full model), but return the semantic maps that\n            were built along the way in response to the images. This is ugly, but allows code reuse\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "g_poses", "=", "None", "#[None for pose in cam_poses]", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "#str_instr = debug_untokenize_instruction(instructions[0].data[:instr_lengths[0]])", "\n", "#print(\"Trn: \" + str_instr)", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", ",", "instr_lengths", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "features_w", ",", "coverages_w", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ".", "tensor_store", ",", "show", "=", "\"\"", ")", "\n", "\n", "# If we're running the model halway, return now. This is to compute enough features for the wasserstein critic, but no more", "\n", "if", "halfway", ":", "\n", "            ", "return", "None", "\n", "\n", "# Don't back-prop into resnet if we're freezing these features (TODO: instead set requires grad to false)", "\n", "", "if", "self", ".", "params", ".", "get", "(", "\"freeze_feature_net\"", ")", ":", "\n", "            ", "features_w", "=", "features_w", ".", "detach", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"images\"", ",", "images", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_F_w\"", ",", "features_w", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_M_w\"", ",", "coverages_w", ")", "\n", "\n", "if", "run_metadata", ".", "IS_ROLLOUT", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "features_w", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"F\"", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "\n", "# Accumulate the egocentric features in a global map", "\n", "", "maps_s_w", "=", "self", ".", "map_accumulator_w", "(", "features_w", ",", "coverages_w", ",", "add_mask", "=", "has_obs", ",", "show", "=", "\"acc\"", "if", "IMG_DBG", "else", "\"\"", ")", "\n", "map_poses_w", "=", "g_poses", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_S_W\"", ",", "maps_s_w", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_accumulate\"", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_s_w", ".", "data", "[", "0", "]", ",", "f\"{self.name}_S_map_W\"", ",", "torch", "=", "True", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "\n", "# Do grounding of objects in the map chosen to do so", "\n", "maps_r_w", ",", "map_poses_r_w", "=", "self", ".", "map_processor_a_w", "(", "maps_s_w", ",", "sent_embeddings", ",", "map_poses_w", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_R_W\"", ",", "maps_r_w", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_r_w", ".", "data", "[", "0", "]", ",", "f\"{self.name}_R_map_W\"", ",", "torch", "=", "True", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_gnd\"", ")", "\n", "\n", "# Transform to drone's reference frame", "\n", "self", ".", "map_transform_w_to_r", ".", "set_maps", "(", "maps_r_w", ",", "map_poses_r_w", ")", "\n", "maps_r_r", ",", "map_poses_r_r", "=", "self", ".", "map_transform_w_to_r", ".", "get_maps", "(", "cam_poses", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_R_R\"", ",", "maps_r_r", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"transform_w_to_r\"", ")", "\n", "\n", "# Predict goal location", "\n", "maps_g_r", ",", "map_poses_g_r", "=", "self", ".", "map_processor_b_r", "(", "maps_r_r", ",", "sent_embeddings", ",", "map_poses_r_r", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_G_R\"", ",", "maps_g_r", ")", "\n", "\n", "# Transform back to map frame", "\n", "self", ".", "map_transform_r_to_w", ".", "set_maps", "(", "maps_g_r", ",", "map_poses_g_r", ")", "\n", "maps_g_w", ",", "_", "=", "self", ".", "map_transform_r_to_w", ".", "get_maps", "(", "None", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"map_G_W\"", ",", "maps_g_w", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_b\"", ")", "\n", "\n", "# Show and publish to RVIZ", "\n", "Presenter", "(", ")", ".", "show_image", "(", "maps_g_w", ".", "data", "[", "0", "]", ",", "f\"{self.name}_G_map_W\"", ",", "torch", "=", "True", ",", "scale", "=", "8", ",", "waitkey", "=", "1", ")", "\n", "if", "self", ".", "rviz", ":", "\n", "            ", "self", ".", "rviz", ".", "publish_map", "(", "\"goal_map\"", ",", "maps_g_w", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Output the final action given the processed map", "\n", "", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_g_r", ",", "sent_embeddings", ")", "\n", "out_action", "=", "self", ".", "deterministic_action", "(", "action_pred", "[", ":", ",", "0", ":", "3", "]", ",", "None", ",", "action_pred", "[", ":", ",", "3", "]", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"action\"", ",", "out_action", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_to_action\"", ")", "\n", "\n", "return", "out_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.maybe_cuda": [[528, 533], ["tensor.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var": [[534, 536], ["learning.inputs.common.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "cuda_var", "(", "tensor", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.unbatch": [[537, 621], ["model_gsmn_bidomain.ModelGSMNBiDomain.reset", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.maybe_cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.maybe_cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.maybe_cuda", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "transformations.pos_m_to_px", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.keep_inputs", "model_gsmn_bidomain.ModelGSMNBiDomain.maybe_cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_gsmn_bidomain.ModelGSMNBiDomain.numpy", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "model_gsmn_bidomain.ModelGSMNBiDomain.cuda_var", "range", "range", "transformations.pos_m_to_px", "s.long", "s.long", "p.numpy", "model_gsmn_bidomain.ModelGSMNBiDomain.img_to_features_w.img_to_features.get_downscale_factor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.get_downscale_factor"], ["", "def", "unbatch", "(", "self", ",", "batch", ")", ":", "\n", "# TODO: Carefully consider this line. This is necessary to reset state between batches (e.g. delete all tensors in the tensor store)", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "# Get rid of the batch dimension for everything", "\n", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", ")", "[", "0", "]", "\n", "seq_len", "=", "images", ".", "shape", "[", "0", "]", "\n", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", ")", "[", "0", "]", "[", ":", "seq_len", "]", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "[", "0", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", ")", "[", "0", "]", "\n", "actions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"actions\"", "]", ")", "[", "0", "]", "\n", "\n", "# Auxiliary labels", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "[", "0", "]", "\n", "lm_pos_map", "=", "batch", "[", "\"lm_pos_map\"", "]", "[", "0", "]", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "[", "0", "]", "\n", "goal_pos_map", "=", "batch", "[", "\"goal_loc\"", "]", "[", "0", "]", "\n", "\n", "# TODO: Get rid of this. We will have lm_mentioned booleans and lm_mentioned_idx integers and that's it.", "\n", "TEMPLATES", "=", "True", "\n", "if", "TEMPLATES", ":", "\n", "            ", "lm_mentioned_tplt", "=", "batch", "[", "\"lm_mentioned_tplt\"", "]", "[", "0", "]", "\n", "side_mentioned_tplt", "=", "batch", "[", "\"side_mentioned_tplt\"", "]", "[", "0", "]", "\n", "side_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "side_mentioned_tplt", ")", "\n", "lm_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "lm_mentioned_tplt", ")", "\n", "lang_lm_mentioned", "=", "None", "\n", "", "else", ":", "\n", "            ", "lm_mentioned_tplt", "=", "None", "\n", "side_mentioned_tplt", "=", "None", "\n", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "[", "0", "]", "\n", "", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "[", "0", "]", "\n", "# This is the first-timestep metadata", "\n", "metadata", "=", "batch", "[", "\"md\"", "]", "[", "0", "]", "\n", "\n", "lm_pos_map", "=", "[", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "p", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "lm_pos_map", "]", "\n", "\n", "goal_pos_map", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "goal_pos_map", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "\n", "lm_pos_map", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_map", "]", "\n", "lm_pos_fpv_features", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "self", ".", "img_to_features_w", ".", "img_to_features", ".", "get_downscale_factor", "(", ")", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_fpv", "]", "\n", "lm_pos_fpv_img", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_fpv", "]", "\n", "lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_indices", "]", "\n", "goal_pos_map", "=", "self", ".", "cuda_var", "(", "goal_pos_map", ")", "\n", "if", "not", "TEMPLATES", ":", "\n", "            ", "lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "lang_lm_mentioned", ")", "\n", "", "lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_mentioned", "]", "\n", "\n", "obs_mask", "=", "[", "True", "for", "_", "in", "range", "(", "seq_len", ")", "]", "\n", "plan_mask", "=", "[", "True", "for", "_", "in", "range", "(", "seq_len", ")", "]", "\n", "pos_enc", "=", "None", "\n", "\n", "# TODO: Figure out how to keep these properly. Perhaps as a whole batch is best", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_fpv_img\"", ",", "lm_pos_fpv_img", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_fpv_features\"", ",", "lm_pos_fpv_features", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "lm_pos_map", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "lm_indices", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map\"", ",", "goal_pos_map", ")", "\n", "if", "not", "TEMPLATES", ":", "\n", "            ", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "lang_lm_mentioned", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned_tplt\"", ",", "lm_mentioned_tplt", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"side_mentioned_tplt\"", ",", "side_mentioned_tplt", ")", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "lm_mentioned", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "# Optional Auxiliary Inputs", "\n", "# ----------------------------------------------------------------------------", "\n", "#if self.aux_losses.input_required(\"lm_pos_map\"):", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "lm_pos_map", ")", "\n", "#if self.aux_losses.input_required(\"lm_indices\"):", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "lm_indices", ")", "\n", "#if self.aux_losses.input_required(\"lm_mentioned\"):", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "lm_mentioned", ")", "\n", "\n", "return", "images", ",", "instructions", ",", "instr_lengths", ",", "states", ",", "actions", ",", "lm_pos_fpv_img", ",", "lm_pos_fpv_features", ",", "lm_pos_map", ",", "lm_indices", ",", "goal_pos_map", ",", "lm_mentioned", ",", "lm_mentioned_tplt", ",", "side_mentioned_tplt", ",", "lang_lm_mentioned", ",", "metadata", ",", "obs_mask", ",", "plan_mask", ",", "pos_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.show_landmark_locations": [[622, 680], ["model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get", "print", "range", "PinholeCameraProjection", "load_env_config", "get_landmark_locations_airsim", "model_gsmn_bidomain.ModelGSMNBiDomain.cam_poses_from_states", "enumerate", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get", "model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get", "len", "visualization.Presenter", "visualization.Presenter.overlay_pts_on_image", "visualization.Presenter.overlay_pts_on_image", "visualization.Presenter.show_image", "visualization.Presenter.show_image", "PinholeCameraProjection.world_point_to_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "transformations.pos_m_to_px"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_landmark_locations_airsim", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_pts_on_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_pts_on_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.semantic_map.pinhole_projection_map.PinholeProjector.world_point_to_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px"], ["", "def", "show_landmark_locations", "(", "self", ",", "loop", "=", "True", ",", "states", "=", "None", ")", ":", "\n", "# Show landmark locations in first-person images", "\n", "        ", "img_all", "=", "self", ".", "tensor_store", ".", "get", "(", "\"images\"", ")", "\n", "img_w_all", "=", "self", ".", "tensor_store", ".", "get", "(", "\"images_w\"", ")", "\n", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "if", "md", ".", "IS_ROLLOUT", ":", "\n", "# TODO: Discard this and move this to PomdpInterface or something", "\n", "# (it's got nothing to do with the model)", "\n", "# load landmark positions from configs", "\n", "            ", "from", "data_io", ".", "env", "import", "load_env_config", "\n", "from", "learning", ".", "datasets", ".", "aux_data_providers", "import", "get_landmark_locations_airsim", "\n", "from", "learning", ".", "models", ".", "semantic_map", ".", "pinhole_camera_inv", "import", "PinholeCameraProjection", "\n", "projector", "=", "PinholeCameraProjection", "(", "\n", "map_size_px", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "img_x", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "\n", "img_y", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "\n", "cam_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "\n", "#TODO: Handle correctly", "\n", "domain", "=", "\"sim\"", ",", "\n", "use_depth", "=", "False", "\n", ")", "\n", "conf_json", "=", "load_env_config", "(", "md", ".", "ENV_ID", ")", "\n", "landmark_names", ",", "landmark_indices", ",", "landmark_pos", "=", "get_landmark_locations_airsim", "(", "conf_json", ")", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "cam_pos", "=", "cam_poses", ".", "position", "[", "0", "]", "\n", "cam_rot", "=", "cam_poses", ".", "orientation", "[", "0", "]", "\n", "lm_pos_map_all", "=", "[", "]", "\n", "lm_pos_img_all", "=", "[", "]", "\n", "for", "i", ",", "landmark_in_world", "in", "enumerate", "(", "landmark_pos", ")", ":", "\n", "                ", "lm_pos_img", ",", "landmark_in_cam", ",", "status", "=", "projector", ".", "world_point_to_image", "(", "cam_pos", ",", "cam_rot", ",", "landmark_in_world", ")", "\n", "lm_pos_map", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "landmark_in_world", "[", "np", ".", "newaxis", ",", ":", "]", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "lm_pos_map_all", "+=", "[", "lm_pos_map", "[", "0", "]", "]", "\n", "if", "lm_pos_img", "is", "not", "None", ":", "\n", "                    ", "lm_pos_img_all", "+=", "[", "lm_pos_img", "]", "\n", "\n", "", "", "lm_pos_img_all", "=", "[", "lm_pos_img_all", "]", "\n", "lm_pos_map_all", "=", "[", "lm_pos_map_all", "]", "\n", "\n", "", "else", ":", "\n", "            ", "lm_pos_img_all", "=", "self", ".", "tensor_store", ".", "get", "(", "\"lm_pos_fpv_img\"", ")", "\n", "lm_pos_map_all", "=", "self", ".", "tensor_store", ".", "get", "(", "\"lm_pos_map\"", ")", "\n", "\n", "", "print", "(", "\"Plotting landmark points\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "img_all", ")", ")", ":", "\n", "            ", "p", "=", "Presenter", "(", ")", "\n", "overlay_fpv", "=", "p", ".", "overlay_pts_on_image", "(", "img_all", "[", "i", "]", "[", "0", "]", ",", "lm_pos_img_all", "[", "i", "]", ")", "\n", "overlay_map", "=", "p", ".", "overlay_pts_on_image", "(", "img_w_all", "[", "i", "]", "[", "0", "]", ",", "lm_pos_map_all", "[", "i", "]", ")", "\n", "p", ".", "show_image", "(", "overlay_fpv", ",", "\"landmarks_on_fpv_img\"", ",", "scale", "=", "8", ")", "\n", "p", ".", "show_image", "(", "overlay_map", ",", "\"landmarks_on_map\"", ",", "scale", "=", "20", ")", "\n", "\n", "if", "not", "loop", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.calc_tensor_statistics": [[681, 687], ["torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.std().item", "torch.std().item", "torch.std().item", "torch.std().item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["None"], ["", "", "", "def", "calc_tensor_statistics", "(", "self", ",", "prefix", ",", "tensor", ")", ":", "\n", "        ", "stats", "=", "{", "}", "\n", "stats", "[", "f\"{prefix}_mean\"", "]", "=", "torch", ".", "mean", "(", "tensor", ")", ".", "item", "(", ")", "\n", "stats", "[", "f\"{prefix}_l2\"", "]", "=", "torch", ".", "norm", "(", "tensor", ")", ".", "item", "(", ")", "\n", "stats", "[", "f\"{prefix}_stddev\"", "]", "=", "torch", ".", "std", "(", "tensor", ")", ".", "item", "(", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.get_activation_statistics": [[688, 696], ["model_gsmn_bidomain.ModelGSMNBiDomain.tensor_store.get_inputs_batch", "model_gsmn_bidomain.ModelGSMNBiDomain.calc_tensor_statistics", "dict_merge"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.calc_tensor_statistics", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge"], ["", "def", "get_activation_statistics", "(", "self", ",", "keys", ")", ":", "\n", "        ", "stats", "=", "{", "}", "\n", "from", "utils", ".", "dict_tools", "import", "dict_merge", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "t", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "key", ")", "\n", "t_stats", "=", "self", ".", "calc_tensor_statistics", "(", "key", ",", "t", ")", "\n", "stats", "=", "dict_merge", "(", "stats", ",", "t_stats", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.sup_loss_on_batch": [[698, 768], ["model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "torch.autograd.Variable", "torch.autograd.Variable", "model_gsmn_bidomain.ModelGSMNBiDomain.unbatch", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.", "model_gsmn_bidomain.ModelGSMNBiDomain.action_loss", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.action_loss.batch_reduce_loss", "model_gsmn_bidomain.ModelGSMNBiDomain.action_loss.reduce_loss", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.calculate_aux_loss", "model_gsmn_bidomain.ModelGSMNBiDomain.aux_losses.combine_losses", "model_gsmn_bidomain.ModelGSMNBiDomain.get_activation_statistics", "model_gsmn_bidomain.ModelGSMNBiDomain.writer.add_dict", "model_gsmn_bidomain.ModelGSMNBiDomain.writer.add_dict", "model_gsmn_bidomain.ModelGSMNBiDomain.writer.add_dict", "model_gsmn_bidomain.ModelGSMNBiDomain.writer.add_dict", "model_gsmn_bidomain.ModelGSMNBiDomain.writer.add_scalar", "model_gsmn_bidomain.ModelGSMNBiDomain.writer.add_scalar", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.inc_iter", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.tick", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.loop", "model_gsmn_bidomain.ModelGSMNBiDomain.prof.print_stats", "learning.inputs.common.empty_float_tensor", "print", "model_gsmn_bidomain.ModelGSMNBiDomain.show_landmark_locations", "model_gsmn_bidomain.ModelGSMNBiDomain.get_iter", "learning.meters_and_metrics.meter_server.get_current_meters", "model_gsmn_bidomain.ModelGSMNBiDomain.get_iter", "model_gsmn_bidomain.ModelGSMNBiDomain.get_iter", "model_gsmn_bidomain.ModelGSMNBiDomain.get_iter", "torch.autograd.Variable.data.cpu().item", "torch.autograd.Variable.data.cpu().item", "model_gsmn_bidomain.ModelGSMNBiDomain.get_iter", "model_gsmn_bidomain.ModelGSMNBiDomain.goal_acc_meter.get", "model_gsmn_bidomain.ModelGSMNBiDomain.get_iter", "torch.autograd.Variable.data.cpu", "torch.autograd.Variable.data.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.batch_reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.combine_losses", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.get_activation_statistics", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.show_landmark_locations", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ",", "halfway", "=", "False", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "action_loss_total", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "return", "action_loss_total", "\n", "\n", "", "images", ",", "instructions", ",", "instr_lengths", ",", "states", ",", "action_labels", ",", "lm_pos_fpv_img", ",", "lm_pos_fpv_features", ",", "lm_pos_map", ",", "lm_indices", ",", "goal_pos_map", ",", "lm_mentioned", ",", "lm_mentioned_tplt", ",", "side_mentioned_tplt", ",", "lang_lm_mentioned", ",", "metadata", ",", "obs_mask", ",", "plan_mask", ",", "pos_enc", "=", "self", ".", "unbatch", "(", "batch", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "self", ".", "prof", ".", "tick", "(", "\"inputs\"", ")", "\n", "\n", "pred_actions", "=", "self", "(", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "\n", "has_obs", "=", "obs_mask", ",", "plan", "=", "plan_mask", ",", "pos_enc", "=", "pos_enc", ",", "halfway", "=", "halfway", ")", "\n", "\n", "# Debugging landmark locations", "\n", "if", "False", ":", "\n", "            ", "self", ".", "show_landmark_locations", "(", ")", "\n", "\n", "# Don't compute any losses - those will not be used. All we care about are the intermediate activations", "\n", "", "if", "halfway", ":", "\n", "            ", "return", "None", ",", "self", ".", "tensor_store", "\n", "\n", "", "action_losses", ",", "_", "=", "self", ".", "action_loss", "(", "action_labels", ",", "pred_actions", ",", "batchreduce", "=", "False", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "\n", "action_losses", "=", "self", ".", "action_loss", ".", "batch_reduce_loss", "(", "action_losses", ")", "\n", "action_loss", "=", "self", ".", "action_loss", ".", "reduce_loss", "(", "action_losses", ")", "\n", "\n", "action_loss_total", "=", "action_loss", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"loss\"", ")", "\n", "\n", "aux_losses", ",", "aux_metrics", "=", "self", ".", "aux_losses", ".", "calculate_aux_loss", "(", "self", ".", "tensor_store", ",", "reduce_average", "=", "True", ")", "\n", "aux_loss", "=", "self", ".", "aux_losses", ".", "combine_losses", "(", "aux_losses", ",", "self", ".", "aux_weights", ")", "\n", "\n", "#overlaid = self.get_overlaid_classification_results()", "\n", "#Presenter().show_image(overlaid, \"classification\", scale=2)", "\n", "\n", "prefix", "=", "f\"{self.model_name}/{'eval' if eval else 'train'}\"", "\n", "act_prefix", "=", "f\"{self.model_name}_activations/{'eval' if eval else 'train'}\"", "\n", "\n", "# Mean, stddev, norm of maps", "\n", "act_stats", "=", "self", ".", "get_activation_statistics", "(", "[", "\"map_S_W\"", ",", "\"map_R_W\"", ",", "\"map_G_W\"", "]", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "act_prefix", ",", "act_stats", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "aux_losses", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "aux_metrics", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss_total", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "# TODO: Log value here", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/goal_accuracy\"", ",", "self", ".", "goal_acc_meter", ".", "get", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"auxiliaries\"", ")", "\n", "\n", "total_loss", "=", "action_loss_total", "+", "aux_loss", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "total_loss", ",", "self", ".", "tensor_store", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_bidomain.ModelGSMNBiDomain.get_dataset": [[769, 785], ["data_sources.append", "data_sources.append", "data_sources.append", "learning.datasets.segment_dataset_simple.SegmentDataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "#if self.fpv:", "\n", "        ", "data_sources", "=", "[", "]", "\n", "# If we're running auxiliary objectives, we need to include the data sources for the auxiliary labels", "\n", "#if self.use_aux_class_features or self.use_aux_class_on_map or self.use_aux_grounding_features or self.use_aux_grounding_on_map:", "\n", "#if self.use_aux_goal_on_map:", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_GOAL_POS", ")", "\n", "#data_sources.append(aup.PROVIDER_LANDMARKS_MENTIONED)", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "#if self.use_rot_noise or self.use_pos_noise:", "\n", "#    data_sources.append(aup.PROVIDER_POSE_NOISE)", "\n", "\n", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.__init__": [[72, 285], ["torch.Module.__init__", "print", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "print", "print", "print", "learning.modules.img_to_map.fpv_to_global_map.FPVToGlobalMap", "learning.modules.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap", "learning.modules.map_to_map.ratio_path_predictor.RatioPathPredictor", "print", "print", "data_io.weights.enable_weight_saving", "data_io.weights.enable_weight_saving", "data_io.weights.enable_weight_saving", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_transformer_base.MapTransformerBase", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "data_io.weights.enable_weight_saving", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.print_auxiliary_info", "learning.modules.action_loss.ActionLoss", "str", "str", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "learning.modules.map_to_map.draw_start_pos.DrawStartPosOnGlobalMap", "learning.modules.map_to_map.identity_map_to_map.IdentityMapProcessor", "data_io.weights.enable_weight_saving", "data_io.weights.enable_weight_saving", "learning.modules.map_to_map.random_perturb.MapPerturbation", "learning.modules.map_to_action.ego_map_to_action_triplet.EgoMapToActionTriplet", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "data_io.weights.enable_weight_saving", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "str", "str", "Exception", "learning.modules.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.goal_auxiliary.GoalAuxiliary2D", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.add_auxiliary", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_class", "=", "MODEL_FPV", ")", ":", "\n", "\n", "        ", "super", "(", "ModelTrajectoryTopDown", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"sm_trajectory\"", "+", "str", "(", "model_class", ")", "\n", "self", ".", "model_class", "=", "model_class", "\n", "print", "(", "\"Init model of type: \"", ",", "str", "(", "model_class", ")", ")", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "\"runs/\"", "+", "run_name", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "\n", "self", ".", "aux_weights", "=", "get_current_parameters", "(", ")", "[", "\"AuxWeights\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "self", ".", "use_aux_class_features", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"class_features\"", "]", "\n", "self", ".", "use_aux_grounding_features", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"grounding_features\"", "]", "\n", "self", ".", "use_aux_class_on_map", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"class_map\"", "]", "\n", "self", ".", "use_aux_grounding_on_map", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"grounding_map\"", "]", "\n", "self", ".", "use_aux_goal_on_map", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"goal_map\"", "]", "\n", "self", ".", "use_aux_lang", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"lang\"", "]", "\n", "self", ".", "use_aux_traj_on_map", "=", "False", "\n", "self", ".", "use_aux_traj_on_map_ratio", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"path\"", "]", "\n", "self", ".", "use_aux_reg_map", "=", "self", ".", "params", "[", "\"aux\"", "]", "[", "\"regularize_map\"", "]", "\n", "\n", "self", ".", "do_perturb_maps", "=", "self", ".", "params", "[", "\"perturb_maps\"", "]", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", ",", "MODEL_FPV", "]", "else", "False", "\n", "print", "(", "\"Perturbing maps: \"", ",", "self", ".", "do_perturb_maps", ")", "\n", "\n", "self", ".", "act_only", "=", "self", ".", "params", "[", "\"train_action_only\"", "]", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", "]", "else", "False", "\n", "print", "(", "\"Trining only action: \"", ",", "self", ".", "act_only", ")", "\n", "\n", "self", ".", "detach_act_grad", "=", "self", ".", "params", "[", "\"detach_action_grad\"", "]", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", "]", "else", "False", "\n", "print", "(", "\"Detaching action gradients: \"", ",", "self", ".", "detach_act_grad", ")", "\n", "\n", "# Path-pred FPV model definition", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "self", ".", "num_feature_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "# + params[\"relevance_channels\"]", "\n", "# TODO: Fix this for if we don't have grounding", "\n", "self", ".", "num_map_channels", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", "\n", "\n", "self", ".", "img_to_features_w", "=", "FPVToGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "res_channels", "=", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "\n", "map_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "img_w", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "img_h", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "cam_h_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "img_dbg", "=", "IMG_DBG", ")", "\n", "\n", "self", ".", "map_accumulator_w", "=", "LeakyIntegratorGlobalMap", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Pre-process the accumulated map to do language grounding if necessary - in the world reference frame", "\n", "if", "self", ".", "use_aux_grounding_on_map", "and", "not", "self", ".", "use_aux_grounding_features", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "LangFilterMapProcessor", "(", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "spatial", "=", "False", ",", "cat_out", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_processor_a_w", "=", "IdentityMapProcessor", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "", "if", "self", ".", "params", "[", "\"condition_on_start_pos\"", "]", ":", "\n", "            ", "self", ".", "map_processor_a_w2", "=", "DrawStartPosOnGlobalMap", "(", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "map_processor_a_w2", "=", "IdentityMapProcessor", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "", "ratio_prior_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "+", "(", "1", "if", "self", ".", "params", "[", "\"condition_on_start_pos\"", "]", "else", "0", ")", "\n", "\n", "# Process the global accumulated map", "\n", "self", ".", "map_processor_b_r", "=", "RatioPathPredictor", "(", "\n", "prior_channels_in", "=", "ratio_prior_channels", ",", "\n", "posterior_channels_in", "=", "self", ".", "num_map_channels", ",", "\n", "lingunet_params", "=", "self", ".", "params", "[", "\"lingunet\"", "]", ",", "\n", "compute_prior", "=", "self", ".", "params", "[", "\"compute_prior\"", "]", ",", "\n", "use_prior", "=", "self", ".", "params", "[", "\"use_prior_only\"", "]", ",", "\n", "l2", "=", "self", ".", "params", "[", "\"path_loss_function\"", "]", "==", "\"l2\"", ")", "\n", "\n", "print", "(", "\"UNet Channels: \"", "+", "str", "(", "self", ".", "num_map_channels", ")", ")", "\n", "print", "(", "\"Feature Channels: \"", "+", "str", "(", "self", ".", "num_feature_channels", ")", ")", "\n", "\n", "enable_weight_saving", "(", "self", ".", "map_processor_b_r", ".", "unet_prior", ",", "\"unet_prior\"", ",", "alwaysfreeze", "=", "self", ".", "act_only", ",", "neverfreeze", "=", "False", ")", "\n", "enable_weight_saving", "(", "self", ".", "map_processor_b_r", ".", "unet_posterior", ",", "\"unet_posterior\"", ",", "alwaysfreeze", "=", "self", ".", "act_only", ",", "neverfreeze", "=", "False", ")", "\n", "\n", "enable_weight_saving", "(", "self", ".", "img_to_features_w", ".", "img_to_features", ",", "\"img_to_features\"", ",", "alwaysfreeze", "=", "self", ".", "act_only", ")", "\n", "if", "self", ".", "use_aux_grounding_features", ":", "\n", "            ", "enable_weight_saving", "(", "self", ".", "img_to_features_w", ".", "lang_filter", ",", "\"lang_filter_grounding\"", ",", "alwaysfreeze", "=", "self", ".", "act_only", ")", "\n", "", "if", "self", ".", "use_aux_grounding_on_map", ":", "\n", "            ", "enable_weight_saving", "(", "self", ".", "map_processor_a_w", ".", "lang_filter", ",", "\"lang_filter_map_grounding\"", ",", "alwaysfreeze", "=", "self", ".", "act_only", ")", "\n", "\n", "\n", "", "self", ".", "second_transform", "=", "self", ".", "do_perturb_maps", "or", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "\n", "\n", "if", "self", ".", "second_transform", ":", "\n", "            ", "self", ".", "map_perturb", "=", "MapPerturbation", "(", "\n", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "if", "self", ".", "use_aux_goal_on_map", ":", "\n", "                ", "raise", "Exception", "(", "\"Perturbed maps not supported together with map goal auxiliary\"", ")", "\n", "\n", "# Sentence Embedding", "\n", "", "", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ")", "\n", "\n", "self", ".", "map_transform_w_to_s", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "self", ".", "map_transform_r_to_w", "=", "MapTransformerBase", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "# Batch select is used to drop and forget semantic maps at those timestaps that we're not planning in", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "# Since we only have path predictions for some timesteps (the ones not dropped above), we use this to fill", "\n", "# in the missing pieces by reorienting the past trajectory prediction into the frame of the current timestep", "\n", "self", ".", "map_batch_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "# Passing true to freeze will freeze these weights regardless of whether they've been explicitly reloaded or not", "\n", "enable_weight_saving", "(", "self", ".", "sentence_embedding", ",", "\"sentence_embedding\"", ",", "alwaysfreeze", "=", "self", ".", "act_only", ")", "\n", "\n", "# Output an action given the global semantic map", "\n", "if", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"downsample2\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "EgoMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "other_features_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ")", "\n", "\n", "", "elif", "self", ".", "params", "[", "\"map_to_action\"", "]", "==", "\"cropped\"", ":", "\n", "            ", "self", ".", "map_to_action", "=", "CroppedMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "manual", "=", "self", ".", "params", "[", "\"manual_rule\"", "]", ",", "\n", "path_only", "=", "self", ".", "params", "[", "\"action_in_path_only\"", "]", ",", "\n", "recurrence", "=", "self", ".", "params", "[", "\"action_recurrence\"", "]", ")", "\n", "\n", "", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "if", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", ":", "\n", "            ", "self", ".", "gt_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", "\n", "\n", "", "if", "self", ".", "params", "[", "\"load_action_policy\"", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "# Don't freeze the trajectory to action weights, because it will be pre-trained during path-prediction training", "\n", "# and finetuned on all timesteps end-to-end", "\n", "            ", "enable_weight_saving", "(", "self", ".", "map_to_action", ",", "\"map_to_action\"", ",", "alwaysfreeze", "=", "False", ",", "neverfreeze", "=", "True", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# We add all auxiliaries that are necessary. The first argument is the auxiliary name, followed by parameters,", "\n", "# followed by variable number of names of inputs. ModuleWithAuxiliaries will automatically collect these inputs", "\n", "# that have been saved with keep_auxiliary_input() during execution", "\n", "", "if", "self", ".", "use_aux_class_features", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class\"", ",", "None", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_indices\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_grounding_features", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_ground\"", ",", "None", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_mentioned\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_class_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class_map\"", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"map_s_w_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_indices_select\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_grounding_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_grounding_map\"", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"map_a_w_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_mentioned_select\"", ")", ")", "\n", "", "if", "self", ".", "use_aux_goal_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "GoalAuxiliary2D", "(", "\"aux_goal_map\"", ",", "self", ".", "params", "[", "\"goal_channels\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "\"map_b_w\"", ",", "\"goal_pos_map\"", ")", ")", "\n", "\n", "# CoRL model uses alignment-model groundings", "\n", "", "elif", "self", ".", "use_aux_lang", ":", "\n", "# one output for each landmark, 2 classes per output. This is for finetuning, so use the embedding that's gonna be fine tuned", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm_nl\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "", "lossfunc", "=", "self", ".", "params", "[", "\"path_loss_function\"", "]", "\n", "if", "self", ".", "use_aux_traj_on_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"aux_path\"", ",", "lossfunc", ",", "\"map_b_r_select\"", ",", "\"traj_gt_r_select\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux_traj_on_map_ratio", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"aux_path_prior\"", ",", "lossfunc", ",", "\"map_b_r_prior_select\"", ",", "\"traj_gt_r_select\"", ")", ")", "\n", "self", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"aux_path_posterior\"", ",", "lossfunc", ",", "\"map_b_r_posterior_select\"", ",", "\"traj_gt_r_select\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux_reg_map", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"aux_regularize_features\"", ",", "None", ",", "\"l1\"", ",", "\n", "\"map_s_w_select\"", ",", "\"lm_pos_map_select\"", ")", ")", "\n", "\n", "", "self", ".", "goal_good_criterion", "=", "GoalPredictionGoodCriterion", "(", "ok_distance", "=", "3.2", ")", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n", "self", ".", "print_auxiliary_info", "(", ")", "\n", "\n", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "total_goals", "=", "0", "\n", "self", ".", "correct_goals", "=", "0", "\n", "\n", "self", ".", "visitation_ground_truth", "=", "False", "\n", "self", ".", "use_visitation_ground_truth", "=", "False", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "env_img", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "self", ".", "gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda": [[287, 306], ["ModuleWithAuxiliaries.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.sentence_embedding.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_accumulator_w.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w2.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_b_r.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.img_to_features_w.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_to_action.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.action_loss.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_batch_fill_missing.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_w_to_s.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_r_to_w.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.batch_select.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_perturb.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.gt_fill_missing.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "ModuleWithAuxiliaries", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "sentence_embedding", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_accumulator_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_a_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_a_w2", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_processor_b_r", ".", "cuda", "(", "device", ")", "\n", "self", ".", "img_to_features_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_to_action", ".", "cuda", "(", "device", ")", "\n", "self", ".", "action_loss", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_w_to_s", ".", "cuda", "(", "device", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "batch_select", ".", "cuda", "(", "device", ")", "\n", "if", "self", ".", "second_transform", ":", "\n", "            ", "self", ".", "map_perturb", ".", "cuda", "(", "device", ")", "\n", "", "if", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", ":", "\n", "            ", "self", ".", "gt_fill_missing", ".", "cuda", "(", "device", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_iter": [[307, 309], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.inc_iter": [[310, 312], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.load_state_dict": [[313, 323], ["super().load_state_dict", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.params.get", "data_io.model_io.load_pytorch_model", "print", "data_io.model_io.load_pytorch_model", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModelTrajectoryTopDown", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "if", "self", ".", "params", ".", "get", "(", "\"load_image_feature\"", ")", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "img_to_features_w", ",", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "print", "(", "\"Loaded image-to-features weights from file: \"", "+", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "\n", "# Override loading of weights to use the pre-trained action module", "\n", "", "if", "self", ".", "params", "[", "\"load_action_policy\"", "]", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "map_to_action", ",", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "print", "(", "\"Loaded map-to-action weights from file: \"", "+", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.init_weights": [[324, 340], ["model_sm_trajectory_ratio.ModelTrajectoryTopDown.img_to_features_w.init_weights", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_accumulator_w.init_weights", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.sentence_embedding.init_weights", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_to_action.init_weights", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w.init_weights", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_b_r.init_weights", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w2.init_weights", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.params.get", "data_io.model_io.load_pytorch_model", "print", "data_io.model_io.load_pytorch_model", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "map_to_action", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_a_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_b_r", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_a_w2", ".", "init_weights", "(", ")", "\n", "\n", "if", "self", ".", "params", ".", "get", "(", "\"load_image_feature\"", ")", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "img_to_features_w", ",", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "print", "(", "\"Loaded image-to-features weights from file: \"", "+", "self", ".", "params", "[", "\"image_feature_file\"", "]", ")", "\n", "\n", "", "if", "self", ".", "params", "[", "\"load_action_policy\"", "]", ":", "\n", "            ", "load_pytorch_model", "(", "self", ".", "map_to_action", ",", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "print", "(", "\"Loaded map-to-action weights from file: \"", "+", "self", ".", "params", "[", "\"action_policy_file\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.reset": [[341, 359], ["super().reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.sentence_embedding.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.img_to_features_w.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_accumulator_w.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w2.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_b_r.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_w_to_s.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_r_to_w.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_batch_fill_missing.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_perturb.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.gt_fill_missing.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "# TODO: This is error prone. Create a class StatefulModule, iterate submodules and reset all stateful modules", "\n", "        ", "super", "(", "ModelTrajectoryTopDown", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_a_w", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_a_w2", ".", "reset", "(", ")", "\n", "self", ".", "map_processor_b_r", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_w_to_s", ".", "reset", "(", ")", "\n", "self", ".", "map_transform_r_to_w", ".", "reset", "(", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "reset", "(", ")", "\n", "if", "self", ".", "second_transform", ":", "\n", "            ", "self", ".", "map_perturb", ".", "reset", "(", ")", "\n", "", "if", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", ":", "\n", "            ", "self", ".", "gt_fill_missing", ".", "reset", "(", ")", "\n", "", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.setEnvContext": [[360, 365], ["print", "data_io.env.load_env_img", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "self", ".", "env_img", "=", "env", ".", "load_env_img", "(", "self", ".", "env_id", ",", "256", ",", "256", ")", "\n", "self", ".", "env_img", "=", "self", ".", "env_img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.set_ground_truth_visitation_d": [[367, 372], ["visitation_distribution_g.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "set_ground_truth_visitation_d", "(", "self", ",", "visitation_distribution_g", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "visitation_distribution_g", "=", "visitation_distribution_g", ".", "cuda", "(", ")", "\n", "", "self", ".", "visitation_ground_truth", "=", "visitation_distribution_g", "\n", "self", ".", "use_visitation_ground_truth", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.start_segment_rollout": [[373, 383], ["learning.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_segment_rollout", "(", "self", ")", ":", "\n", "        ", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "m_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", "\n", "w_size", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "\n", "self", ".", "gt_labels", "=", "get_top_down_ground_truth_static_global", "(", "\n", "md", ".", "ENV_ID", ",", "md", ".", "START_IDX", ",", "md", ".", "END_IDX", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "self", ".", "seg_idx", "=", "md", ".", "SEG_IDX", "\n", "self", ".", "gt_labels", "=", "self", ".", "maybe_cuda", "(", "self", ".", "gt_labels", ")", "\n", "if", "self", ".", "params", "[", "\"clear_history\"", "]", ":", "\n", "            ", "self", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.scale_images": [[384, 389], ["utils.imresize.imresize"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.imresize.imresize"], ["", "", "def", "scale_images", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "images", ".", "shape", "[", "0", "]", "==", "72", "and", "images", ".", "shape", "[", "1", "]", "==", "144", ":", "\n", "            ", "return", "images", "\n", "", "images", "=", "imresize", "(", "images", ",", "(", "72", ",", "144", ")", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_action": [[390, 486], ["utils.simple_profiler.SimpleProfiler", "utils.simple_profiler.SimpleProfiler.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.scale_images", "learning.inputs.vision.standardize_image", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "learning.inputs.common.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.squeeze().data.cpu().numpy", "learning.inputs.sequence.none_padded_seq_to_tensor", "learning.inputs.sequence.none_padded_seq_to_tensor", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cam_poses_from_states", "state.cuda.cuda.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_path_pos_encoding", "start_pose.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cam_poses_from_states", "learning.modules.map_transformer_base.MapTransformerBase", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "learning.modules.map_transformer_base.MapTransformerBase.set_maps", "learning.modules.map_transformer_base.MapTransformerBase.get_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.clear_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.clear_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.write_debug_data", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.save_viz", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "img_in_t.cuda.cuda.cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.squeeze().data.cpu", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.squeeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.scale_images", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_path_pos_encoding", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.clear_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.clear_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.write_debug_data", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.save_viz", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        #TODO: Absorb corpus within model\n        :return:\n        \"\"\"", "\n", "prof", "=", "SimpleProfiler", "(", "print", "=", "True", ")", "\n", "prof", ".", "tick", "(", "\".\"", ")", "\n", "# TODO: Simplify this", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "images_np_pure", "=", "state", ".", "image", "\n", "state_np", "=", "state", ".", "state", "\n", "\n", "#print(\"Act: \" + debug_untokenize_instruction(instruction))", "\n", "\n", "# We might want to run the simulator at higher resultions in test time to get nice FPV videos.", "\n", "# If that's what we're doing, we need to scale the images back to the correct resolution", "\n", "images_np", "=", "self", ".", "scale_images", "(", "images_np_pure", ")", "\n", "images_np", "=", "standardize_image", "(", "images_np", ")", "\n", "image_fpv", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "images_np", "]", ")", ")", "\n", "state", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "state_np", "]", ")", ")", "\n", "# Add the batch dimension", "\n", "\n", "first_step", "=", "True", "\n", "if", "instruction", "==", "self", ".", "prev_instruction", ":", "\n", "                ", "first_step", "=", "False", "\n", "", "self", ".", "prev_instruction", "=", "instruction", "\n", "if", "first_step", ":", "\n", "                ", "self", ".", "get_act_start_pose", "=", "self", ".", "cam_poses_from_states", "(", "state", "[", "0", ":", "1", "]", ")", "\n", "\n", "", "img_in_t", "=", "image_fpv", "\n", "img_in_t", ".", "volatile", "=", "True", "\n", "\n", "instr_len", "=", "[", "len", "(", "instruction", ")", "]", "if", "instruction", "is", "not", "None", "else", "None", "\n", "instruction", "=", "torch", ".", "LongTensor", "(", "instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "instruction", "=", "cuda_var", "(", "instruction", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n", "state", ".", "volatile", "=", "True", "\n", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "if", "img_in_t", "is", "not", "None", ":", "\n", "                    ", "img_in_t", "=", "img_in_t", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "", "state", "=", "state", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "\n", "", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", ",", "MODEL_FPV_SAVE_MAPS_ONLY", ",", "PVN_STAGE1_ONLY", "]", ":", "\n", "                ", "step_enc", "=", "self", ".", "get_path_pos_encoding", "(", "[", "True", "]", ",", "None", ",", "self", ".", "seq_step", ")", "\n", "plan_now", "=", "[", "self", ".", "seq_step", "%", "self", ".", "params", "[", "\"plan_every_n_steps\"", "]", "==", "0", "or", "first_step", "]", "\n", "", "else", ":", "\n", "                ", "step_enc", "=", "None", "\n", "plan_now", "=", "None", "\n", "\n", "", "start_pose", "=", "self", ".", "get_act_start_pose", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "start_pose", "=", "start_pose", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "\n", "", "self", ".", "seq_step", "+=", "1", "\n", "\n", "# This is for training the policy to mimic the ground-truth state distribution with oracle actions", "\n", "if", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", "or", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "# b_traj_gt_w_select = b_traj_ground_truth[b_plan_mask_t[:, np.newaxis, np.newaxis, np.newaxis].expand_as(b_traj_ground_truth)].view([-1] + gtsize)", "\n", "                ", "traj_gt_w", "=", "Variable", "(", "self", ".", "gt_labels", ")", "\n", "b_poses", "=", "self", ".", "cam_poses_from_states", "(", "state", ")", "\n", "# TODO: These source and dest should go as arguments to get_maps (in forward pass not params)", "\n", "transformer", "=", "MapTransformerBase", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "maybe_cuda", "(", "transformer", ")", "\n", "transformer", ".", "set_maps", "(", "traj_gt_w", ",", "None", ")", "\n", "traj_gt_r", ",", "_", "=", "transformer", ".", "get_maps", "(", "b_poses", ")", "\n", "self", ".", "clear_inputs", "(", "\"traj_gt_r_select\"", ")", "\n", "self", ".", "clear_inputs", "(", "\"traj_gt_w_select\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_r_select\"", ",", "traj_gt_r", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_w_select\"", ",", "traj_gt_w", ")", "\n", "\n", "", "action", "=", "self", "(", "img_in_t", ",", "state", ",", "instruction", ",", "instr_len", ",", "plan", "=", "plan_now", ",", "pos_enc", "=", "step_enc", ",", "\n", "start_poses", "=", "start_pose", ",", "firstseg", "=", "[", "first_step", "]", ")", "\n", "\n", "if", "plan_now", "[", "0", "]", ":", "\n", "                ", "self", ".", "write_debug_data", "(", ")", "\n", "", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "                ", "self", ".", "save_viz", "(", "images_np_pure", ")", "\n", "\n", "", "output_action", "=", "action", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "stop_prob", "=", "output_action", "[", "3", "]", "\n", "output_stop", "=", "1", "if", "stop_prob", ">", "self", ".", "params", "[", "\"stop_threshold\"", "]", "else", "0", "\n", "output_action", "[", "3", "]", "=", "output_stop", "\n", "\n", "", "return", "output_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.deterministic_action": [[487, 493], ["action_mean.size", "torch.autograd.Variable", "torch.autograd.Variable", "learning.inputs.common.empty_float_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "deterministic_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "batch_size", "=", "action_mean", ".", "size", "(", "0", ")", "\n", "action", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "4", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "action", "[", ":", ",", "0", ":", "3", "]", "=", "action_mean", "[", ":", ",", "0", ":", "3", "]", "\n", "action", "[", ":", ",", "3", "]", "=", "stop_prob", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.sample_action": [[494, 498], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "action", "=", "torch", ".", "normal", "(", "action_mean", ",", "action_std", ")", "\n", "stop", "=", "torch", ".", "bernoulli", "(", "stop_prob", ")", "\n", "return", "action", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.start_sequence": [[500, 504], ["model_sm_trajectory_ratio.ModelTrajectoryTopDown.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.cam_poses_from_states": [[506, 511], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.save_viz": [[512, 546], ["imageio.imsave", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax().squeeze", "learning.utils.save_tensor_as_img_during_rollout", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax().squeeze", "learning.utils.save_tensor_as_img_during_rollout", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax().squeeze", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "learning.utils.save_tensor_as_img_during_rollout", "[].data.cpu().squeeze().numpy", "visualization.Presenter().save_action", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "str", "str", "str", "str", "str", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax", "str", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax", "str", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax", "str", "str", "str", "str", "[].data.cpu().squeeze", "str", "visualization.Presenter", "str", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.unsqueeze", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.unsqueeze", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.unsqueeze", "learning.utils.get_viz_dir_for_rollout", "learning.utils.get_viz_dir_for_rollout", "[].data.cpu", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.save_tensor_as_img_during_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_viz_dir_for_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch"], ["", "def", "save_viz", "(", "self", ",", "images_in", ")", ":", "\n", "        ", "imsave", "(", "get_viz_dir_for_rollout", "(", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "+", "\"fpv_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", ",", "images_in", ")", "\n", "features_cam", "=", "self", ".", "get_inputs_batch", "(", "\"fpv_features\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "features_cam", ",", "\"F_c\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "feature_map_torch", "=", "self", ".", "get_inputs_batch", "(", "\"F_w\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "feature_map_torch", ",", "\"F_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "coverage_map_torch", "=", "self", ".", "get_inputs_batch", "(", "\"M_w\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "coverage_map_torch", ",", "\"M_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "semantic_map_torch", "=", "self", ".", "get_inputs_batch", "(", "\"map_s_w_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "semantic_map_torch", ",", "\"S_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "relmap_torch", "=", "self", ".", "get_inputs_batch", "(", "\"map_a_w_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "relmap_torch", ",", "\"R_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "\n", "trajpred_posterior", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_w_posterior_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "trajpred_posterior", "=", "self", ".", "spatialsoftmax", "(", "trajpred_posterior", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "save_tensor_as_img_during_rollout", "(", "trajpred_posterior", ",", "\"D_u\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "trajpred_posterior_r", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_posterior_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "trajpred_posterior_r", "=", "self", ".", "spatialsoftmax", "(", "trajpred_posterior_r", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "save_tensor_as_img_during_rollout", "(", "trajpred_posterior_r", ",", "\"D_u_r\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "trajpred_prior", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_w_prior_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "trajpred_prior", "=", "self", ".", "spatialsoftmax", "(", "trajpred_prior", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "save_tensor_as_img_during_rollout", "(", "trajpred_prior", ",", "\"D_prior\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "\n", "dstar_w", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_w_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "dstar_w", ",", "\"dstar_w\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "dstar_r", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_r_select\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "dstar_r", ",", "\"dstar_r\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ",", "renorm_each_channel", "=", "True", ")", "\n", "\n", "drone_pos", "=", "self", ".", "get_inputs_batch", "(", "\"drone_poses\"", ")", "[", "-", "1", ",", "0", ",", "0", ":", "3", "]", "\n", "save_tensor_as_img_during_rollout", "(", "drone_pos", ",", "\"pos\"", "+", "str", "(", "self", ".", "seq_step", ")", ",", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "\n", "\n", "action", "=", "self", ".", "get_inputs_batch", "(", "\"action\"", ")", "[", "-", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "action_fname", "=", "get_viz_dir_for_rollout", "(", "self", ".", "env_id", ",", "self", ".", "seg_idx", ")", "+", "\"action_\"", "+", "str", "(", "self", ".", "seq_step", ")", "+", "\".png\"", "\n", "Presenter", "(", ")", ".", "save_action", "(", "action", ",", "action_fname", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.write_debug_data": [[547, 568], ["learning.modules.dbg_writer.DebugWriter", "learning.modules.dbg_writer.DebugWriter.should_write", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "learning.modules.dbg_writer.DebugWriter.write_img", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.should_write", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.dbg_writer.DebugWriter.write_img", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch"], ["", "def", "write_debug_data", "(", "self", ")", ":", "\n", "        ", "writer", "=", "DebugWriter", "(", ")", "\n", "\n", "if", "writer", ".", "should_write", "(", ")", "and", "self", ".", "params", "[", "\"write_gifs\"", "]", ":", "\n", "            ", "softmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "\n", "path_map", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_w\"", ")", "[", "-", "1", ",", "0", "]", "\n", "writer", ".", "write_img", "(", "path_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"pathpred\"", "}", ")", "\n", "prior_map", "=", "softmax", "(", "self", ".", "get_inputs_batch", "(", "\"map_b_r_prior_select\"", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "writer", ".", "write_img", "(", "prior_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"prior\"", "}", ")", "\n", "posterior_map", "=", "softmax", "(", "self", ".", "get_inputs_batch", "(", "\"map_b_r_posterior_select\"", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "writer", ".", "write_img", "(", "posterior_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"posterior\"", "}", ")", "\n", "gnd_map", "=", "self", ".", "get_inputs_batch", "(", "\"map_a_w_select\"", ")", "[", "-", "1", ",", "0", "]", "\n", "writer", ".", "write_img", "(", "gnd_map", ",", "\"gif_overlaid\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"gnd\"", "}", ")", "\n", "fpv", "=", "self", ".", "get_inputs_batch", "(", "\"fpv\"", ")", "[", "-", "1", ",", "0", "]", "\n", "writer", ".", "write_img", "(", "fpv", ",", "\"gif\"", ",", "\n", "args", "=", "{", "\"world_size\"", ":", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\"name\"", ":", "\"fpv\"", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.forward": [[569, 781], ["model_sm_trajectory_ratio.ModelTrajectoryTopDown.cam_poses_from_states", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.deterministic_action", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.sentence_embedding", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.sentence_embedding.get", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.img_to_features_w", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_accumulator_w", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.batch_select", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_b_r.get_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_w_to_s.set_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_w_to_s.get_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_to_action", "len", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_a_w2", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_w_to_s.set_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_w_to_s.get_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_processor_b_r", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_batch_fill_missing", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_latest_input", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.gt_fill_missing", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_to_action", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_to_action", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_perturb", "learning.inputs.pose.Pose", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_perturb", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_perturb", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_perturb", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_r_to_w.set_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_r_to_w.get_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_r_to_w.set_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.map_transform_r_to_w.get_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "visualization.Presenter().overlaid_image", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "torch.autograd.Variable", "torch.autograd.Variable", "map_poses_p_select.position.clone", "map_poses_p_select.orientation.clone", "learning.utils.draw_drone_poses", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.deterministic_action", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.draw_drone_poses"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "\n", "has_obs", "=", "None", ",", "plan", "=", "None", ",", "save_maps_only", "=", "False", ",", "pos_enc", "=", "None", ",", "noisy_poses", "=", "None", ",", "start_poses", "=", "None", ",", "firstseg", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param has_obs: list of booleans of length B indicating whether the given element in the sequence has an observation\n        :param yield_semantic_maps: If true, will not compute actions (full model), but return the semantic maps that\n            were built along the way in response to the images. This is ugly, but allows code reuse\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "g_poses", "=", "None", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "self", ".", "keep_inputs", "(", "\"fpv\"", ",", "images", ")", "\n", "\n", "#print(\"Trn: \" + debug_untokenize_instruction(instructions[0].data[:instr_lengths[0]]))", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", ",", "instr_lengths", ")", "\n", "self", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "if", "(", "not", "self", ".", "params", "[", "\"train_action_only\"", "]", "or", "not", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", "or", "not", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", ")", "and", "not", "self", ".", "use_visitation_ground_truth", ":", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "            ", "features_w", ",", "coverages_w", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"F_w\"", ",", "features_w", ")", "\n", "self", ".", "keep_inputs", "(", "\"M_w\"", ",", "coverages_w", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "\n", "# Accumulate the egocentric features in a global map", "\n", "reset_mask", "=", "firstseg", "if", "self", ".", "params", "[", "\"clear_history\"", "]", "else", "None", "\n", "maps_w", "=", "self", ".", "map_accumulator_w", "(", "features_w", ",", "coverages_w", ",", "add_mask", "=", "has_obs", ",", "reset_mask", "=", "reset_mask", ",", "show", "=", "\"acc\"", "if", "IMG_DBG", "else", "\"\"", ")", "\n", "map_poses_w", "=", "g_poses", "\n", "\n", "# TODO: Maybe keep maps_w if necessary", "\n", "#self.keep_inputs(\"map_sm_local\", maps_m)", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_accumulate\"", ")", "\n", "\n", "# Throw away those timesteps that don't correspond to planning timesteps", "\n", "maps_w_select", ",", "map_poses_w_select", ",", "cam_poses_select", ",", "noisy_poses_select", ",", "start_poses_select", ",", "sent_embeddings_select", ",", "pos_enc", "=", "self", ".", "batch_select", "(", "maps_w", ",", "map_poses_w", ",", "cam_poses", ",", "noisy_poses", ",", "start_poses", ",", "sent_embeddings", ",", "pos_enc", ",", "plan", ")", "\n", "\n", "maps_m_prior_select", ",", "maps_m_posterior_select", "=", "None", ",", "None", "\n", "\n", "# Only process the maps on planning timesteps", "\n", "if", "len", "(", "maps_w_select", ")", ">", "0", ":", "\n", "                ", "self", ".", "keep_inputs", "(", "\"map_s_w_select\"", ",", "maps_w_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"batch_select\"", ")", "\n", "\n", "# Create a figure where the drone is drawn on the map", "\n", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "                    ", "self", ".", "keep_inputs", "(", "\"drone_poses\"", ",", "Variable", "(", "draw_drone_poses", "(", "cam_poses_select", ")", ")", ")", "\n", "\n", "# Process the map via the two map_procesors", "\n", "# Do grounding of objects in the map chosen to do so", "\n", "", "maps_w_select", ",", "map_poses_w_select", "=", "self", ".", "map_processor_a_w", "(", "maps_w_select", ",", "sent_embeddings_select", ",", "map_poses_w_select", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_a_w_select\"", ",", "maps_w_select", ")", "\n", "\n", "maps_w_select", ",", "map_poses_w_select", "=", "self", ".", "map_processor_a_w2", "(", "\n", "maps_w_select", ",", "sent_embeddings_select", ",", "map_poses_w_select", ",", "cam_poses_select", ",", "show", "=", "\"draw_start\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_a2_w_select\"", ",", "maps_w_select", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_gnd\"", ")", "\n", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "s_poses_select", "=", "start_poses_select", "\n", "", "else", ":", "\n", "                    ", "s_poses_select", "=", "cam_poses_select", "\n", "\n", "", "self", ".", "map_transform_w_to_s", ".", "set_maps", "(", "maps_w_select", ",", "map_poses_w_select", ")", "\n", "maps_s_select", ",", "map_poses_s_select", "=", "self", ".", "map_transform_w_to_s", ".", "get_maps", "(", "s_poses_select", ")", "\n", "\n", "self", ".", "keep_inputs", "(", "\"map_a_s_select\"", ",", "maps_s_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"transform_w_to_s\"", ")", "\n", "\n", "# Data augmentation for trajectory prediction", "\n", "# TODO: Should go inside trajectory predictor", "\n", "map_poses_clean_select", "=", "None", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "                    ", "assert", "noisy_poses_select", "is", "not", "None", ",", "\"Noisy poses must be provided if we're perturbing maps\"", "\n", "#map_poses_s_clean_select = Pose(map_poses_s_select.position.clone(), map_poses_s_select.orientation.clone()) # Remember the clean poses", "\n", "maps_p_select", ",", "map_poses_p_select", "=", "self", ".", "map_perturb", "(", "maps_s_select", ",", "map_poses_s_select", ",", "noisy_poses_select", ")", "\n", "", "else", ":", "\n", "                    ", "maps_p_select", ",", "map_poses_p_select", "=", "maps_s_select", ",", "map_poses_s_select", "\n", "\n", "", "self", ".", "keep_inputs", "(", "\"map_a_s_perturbed_select\"", ",", "maps_s_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_perturb\"", ")", "\n", "\n", "# Include positional encoding for path prediction", "\n", "#if pos_enc is not None:", "\n", "#    sent_embeddings_pp = torch.cat([sent_embeddings_select, pos_enc.unsqueeze(1)], dim=1)", "\n", "#else:", "\n", "sent_embeddings_pp", "=", "sent_embeddings_select", "\n", "\n", "# Process the map via the two map_procesors (e.g. predict the trajectory that we'll be taking)", "\n", "maps_p_select", ",", "maps_p_prior_select", ",", "maps_p_posterior_select", ",", "map_poses_p_select", "=", "self", ".", "map_processor_b_r", "(", "maps_p_select", ",", "sent_embeddings_pp", ",", "map_poses_p_select", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_b\"", ")", "\n", "\n", "# Un-perturb the maps - transform them to robot reference frame", "\n", "if", "self", ".", "second_transform", ":", "\n", "#assert map_poses_clean_select is not None", "\n", "                    ", "map_poses_dirty_select", "=", "Pose", "(", "map_poses_p_select", ".", "position", ".", "clone", "(", ")", ",", "map_poses_p_select", ".", "orientation", ".", "clone", "(", ")", ")", "\n", "maps_m_select", ",", "map_poses_m_select", "=", "self", ".", "map_perturb", "(", "maps_p_select", ",", "map_poses_dirty_select", ",", "cam_poses_select", ")", "\n", "maps_m_prior_select", ",", "_", "=", "self", ".", "map_perturb", "(", "maps_p_prior_select", ",", "map_poses_dirty_select", ",", "cam_poses_select", ")", "\n", "maps_m_posterior_select", ",", "_", "=", "self", ".", "map_perturb", "(", "maps_p_posterior_select", ",", "map_poses_dirty_select", ",", "cam_poses_select", ")", "\n", "", "else", ":", "\n", "                    ", "maps_m_select", "=", "maps_p_select", "\n", "map_poses_m_select", "=", "map_poses_p_select", "\n", "\n", "", "self", ".", "keep_inputs", "(", "\"map_b_r_select\"", ",", "maps_m_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_r_prior_select\"", ",", "maps_m_prior_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_r_posterior_select\"", ",", "maps_m_posterior_select", ")", "\n", "\n", "if", "self", ".", "params", "[", "\"write_figures\"", "]", "or", "True", ":", "\n", "                    ", "self", ".", "map_transform_r_to_w", ".", "set_maps", "(", "maps_m_prior_select", ",", "map_poses_m_select", ")", "\n", "maps_prior_w", ",", "_", "=", "self", ".", "map_transform_r_to_w", ".", "get_maps", "(", "g_poses", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_w_prior_select\"", ",", "maps_prior_w", ")", "\n", "\n", "self", ".", "map_transform_r_to_w", ".", "set_maps", "(", "maps_m_posterior_select", ",", "map_poses_m_select", ")", "\n", "maps_posterior_w", ",", "_", "=", "self", ".", "map_transform_r_to_w", ".", "get_maps", "(", "g_poses", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_w_posterior_select\"", ",", "maps_posterior_w", ")", "\n", "\n", "", "", "else", ":", "\n", "#print(\"No predictions!\")", "\n", "                ", "maps_m_select", "=", "None", "\n", "maps_posterior_w", "=", "None", "\n", "\n", "# If we're predicting the trajectory only on some timesteps, then for each timestep k, use the map from", "\n", "# timestep k if predicting on timestep k. otherwise use the map from timestep j - the last timestep", "\n", "# that had a trajectory prediction, rotated in the frame of timestep k.", "\n", "#print(\"Planning: \", plan)", "\n", "# TODO: Be careful here with the map_poses vs cam_poses distinction", "\n", "", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", "]", ":", "\n", "# If we're just pre-training the trajectory prediction, don't waste time on generating the missing maps", "\n", "                ", "maps_m", "=", "maps_m_select", "\n", "map_poses_m", "=", "map_poses_m_select", "\n", "cam_poses", "=", "cam_poses_select", "\n", "sent_embeddings", "=", "sent_embeddings_select", "\n", "", "else", ":", "\n", "                ", "maps_m", ",", "map_poses_m", "=", "self", ".", "map_batch_fill_missing", "(", "maps_m_select", ",", "cam_poses", ",", "plan", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_r\"", ",", "maps_m", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_fill_missing\"", ")", "\n", "\n", "# Keep global maps for auxiliary objectives if necessary", "\n", "#if self.input_required(\"map_b_w\"):", "\n", "# TODO: Don't \"get maps\" since it's no longer a MapTransformerBase", "\n", "", "maps_b", ",", "_", "=", "self", ".", "map_processor_b_r", ".", "get_maps", "(", "g_poses", ")", "\n", "self", ".", "keep_inputs", "(", "\"map_b_w\"", ",", "maps_b", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"keep_global_maps\"", ")", "\n", "\n", "#for i in range(len(maps_m)):", "\n", "# Bunch of stuff for visualization only", "\n", "if", "run_metadata", ".", "IS_ROLLOUT", ":", "\n", "#Presenter().show_image(maps_m.data[0, 0:3], \"plan_map_now\", torch=True, scale=4, waitkey=1)", "\n", "                ", "softmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "if", "maps_m_posterior_select", "is", "not", "None", ":", "\n", "                    ", "d", "=", "softmax", "(", "maps_m_posterior_select", ")", ".", "data", "[", "0", ",", "0", ":", "3", "]", "\n", "#Presenter().show_image(d, \"predicted_distributions\", torch=True, scale=4, waitkey=1)", "\n", "", "if", "maps_posterior_w", "is", "not", "None", ":", "\n", "# TODO: Plot drone's current pose (make a little script in Presenter that plots a pose on the image)", "\n", "                    ", "d_w", "=", "softmax", "(", "maps_posterior_w", ")", ".", "data", "[", "0", ",", "0", ":", "3", "]", "\n", "overlaid", "=", "Presenter", "(", ")", ".", "overlaid_image", "(", "self", ".", "env_img", ",", "d_w", ")", "\n", "#Presenter().show_image(overlaid, \"d_overlaid\", torch=True, scale=1, waitkey=1)", "\n", "#Presenter().show_image(images[0], \"fpv_image\", torch=True, scale=2, waitkey=1)", "\n", "", "semantic_map", "=", "self", ".", "get_latest_input", "(", "\"map_s_w_select\"", ")", "\n", "#Presenter().show_image(semantic_map, \"semantic_map\", torch=True, scale=4, waitkey=1)", "\n", "\n", "#if maps_m_prior_select is not None: Presenter().show_image(softmax(maps_m_prior_select).data[0, 0:3], \"prior_map\", torch=True, scale=4, waitkey=1)", "\n", "#Presenter().show_image(maps_w.data[0, 0:3], \"sm_map_now\", torch=True, scale=4, waitkey=1)", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"viz\"", ")", "\n", "\n", "# Output the final action given the processed map", "\n", "if", "self", ".", "detach_act_grad", ":", "\n", "                ", "maps_m", "=", "Variable", "(", "maps_m", ".", "data", ")", "\n", "sent_embeddings", "=", "Variable", "(", "sent_embeddings", ".", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# Predict action from ground-truth trajectory instead of the predicted trajectory", "\n", "# TODO: Perhaps random amount of gaussian blur?", "\n", "# WTF did I do here!", "\n", "# We are given ground truth visitation distributions to follow, just transform those in the current frame and follow", "\n", "", "if", "self", ".", "use_visitation_ground_truth", ":", "\n", "            ", "self", ".", "map_transform_w_to_s", ".", "set_maps", "(", "self", ".", "visitation_ground_truth", ",", "None", ")", "\n", "maps_dstart_prob", ",", "_", "=", "self", ".", "map_transform_w_to_s", ".", "get_maps", "(", "cam_poses", ")", "\n", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_dstart_prob", ",", "sent_embeddings", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "\n", "", "elif", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", "and", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", ":", "\n", "            ", "maps_dstar_select", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_r_select\"", ")", "[", ":", ",", "0", "]", "\n", "maps_dstart_prob", ",", "_", "=", "self", ".", "gt_fill_missing", "(", "maps_dstar_select", ",", "cam_poses", ",", "plan", ",", "show", "=", "\"\"", ")", "\n", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_dstart_prob", ",", "sent_embeddings", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "", "else", ":", "\n", "            ", "action_pred", "=", "self", ".", "map_to_action", "(", "maps_m", ",", "sent_embeddings", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "\n", "", "out_action", "=", "self", ".", "deterministic_action", "(", "action_pred", "[", ":", ",", "0", ":", "3", "]", ",", "None", ",", "action_pred", "[", ":", ",", "3", "]", ")", "\n", "self", ".", "keep_inputs", "(", "\"action\"", ",", "out_action", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_to_action\"", ")", "\n", "\n", "return", "out_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda": [[782, 794], ["tensor.cuda", "type", "tensor.data.pin_memory", "type", "type", "tensor.pin_memory"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "if", "False", ":", "\n", "                ", "if", "type", "(", "tensor", ")", "is", "Variable", ":", "\n", "                    ", "tensor", ".", "data", ".", "pin_memory", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", "is", "Pose", ":", "\n", "                    ", "pass", "\n", "", "elif", "type", "(", "tensor", ")", "is", "torch", ".", "FloatTensor", ":", "\n", "                    ", "tensor", ".", "pin_memory", "(", ")", "\n", "", "", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var": [[795, 797], ["learning.inputs.common.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "cuda_var", "(", "tensor", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_path_pos_encoding": [[798, 823], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "torch.autograd.Variable", "torch.autograd.Variable", "float", "range", "parameters.parameter_server.get_current_parameters", "len", "step_numbers.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_path_pos_encoding", "(", "self", ",", "plan_mask", ",", "b_metadata", "=", "None", ",", "step_num", "=", "0", ")", ":", "\n", "        ", "trajectory_length", "=", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"trajectory_length\"", "]", "\n", "step", "=", "1.0", "/", "float", "(", "trajectory_length", ")", "\n", "\n", "step_numbers", "=", "[", "]", "\n", "last_seg", "=", "-", "1", "\n", "curr_step", "=", "0", "\n", "if", "b_metadata", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "b_metadata", ")", ")", ":", "\n", "                ", "if", "b_metadata", "[", "i", "]", "[", "\"seg_idx\"", "]", "!=", "last_seg", ":", "\n", "                    ", "curr_step", "=", "0", "\n", "last_seg", "=", "b_metadata", "[", "i", "]", "[", "\"seg_idx\"", "]", "\n", "", "if", "plan_mask", "[", "i", "]", ":", "\n", "                    ", "step_numbers", ".", "append", "(", "curr_step", ")", "\n", "", "curr_step", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "step_numbers", "=", "[", "step_num", "]", "\n", "\n", "", "encoding", "=", "[", "s", "*", "step", "for", "s", "in", "step_numbers", "]", "\n", "#print(plan_mask)", "\n", "#print(encoding)", "\n", "encoding_t", "=", "torch", ".", "FloatTensor", "(", "encoding", ")", "\n", "encoding_t", "=", "self", ".", "maybe_cuda", "(", "encoding_t", ")", "\n", "encoding_t", "=", "Variable", "(", "encoding_t", ")", "\n", "return", "encoding_t", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.sup_loss_on_batch": [[825, 1082], ["model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "torch.autograd.Variable", "torch.autograd.Variable", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "range", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.writer.add_dict", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.writer.add_dict", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.writer.add_scalar", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.inc_iter", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.loop", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.print_stats", "learning.inputs.common.empty_float_tensor", "print", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "batch[].data.clone", "torch.autograd.Variable", "torch.autograd.Variable", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.reset", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "learning.inputs.sequence.len_until_nones", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.input_required", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.input_required", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.input_required", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.input_required", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.action_loss", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.action_loss.batch_reduce_loss", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.action_loss.reduce_loss", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.prof.tick", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.calculate_aux_loss", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.combine_aux_losses", "torch.autograd.Variable", "torch.autograd.Variable", "learning.meters_and_metrics.meter_server.get_current_meters", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_iter", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_iter", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.goal_acc_meter.get", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_iter", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.writer.add_scalar", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "parameters.parameter_server.get_current_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_path_pos_encoding", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cam_poses_from_states", "learning.modules.map_transformer_base.MapTransformerBase", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.maybe_cuda", "learning.modules.map_transformer_base.MapTransformerBase.set_maps", "learning.modules.map_transformer_base.MapTransformerBase.get_maps", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.keep_inputs", "b_actions[].view", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_inputs_batch", "range", "learning.inputs.common.empty_float_tensor", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_iter", "range", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.cuda_var", "list", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.spatialsoftmax", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_iter", "action_loss_avg.data.cpu", "s.long", "b_traj_ground_truth_select.size", "enumerate", "enumerate", "enumerate", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.goal_good_criterion", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.goal_acc_meter.put", "model_sm_trajectory_ratio.ModelTrajectoryTopDown.all", "b_plan_mask_t[].expand_as", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter", "visualization.Presenter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.clone", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.len_until_nones", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.input_required", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.batch_reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_path_pos_encoding", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.set_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.map_transformer_fast.MapTransformerBase.get_maps", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.all"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "action_loss_total", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "return", "action_loss_total", "\n", "\n", "", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", ",", "PVN_STAGE1_ONLY", ",", "MODEL_FPV_SAVE_MAPS_ONLY", "]", ":", "\n", "            ", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "tdims", "=", "batch", "[", "\"top_down_images\"", "]", ".", "data", ".", "clone", "(", ")", "\n", "images", "=", "Variable", "(", "self", ".", "maybe_cuda", "(", "tdims", ")", ")", "\n", "\n", "", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", ")", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", ")", "\n", "actions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"actions\"", "]", ")", "\n", "\n", "# Auxiliary labels", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "# All object 2D coordinates in the first-person image", "\n", "lm_pos_map", "=", "batch", "[", "\"lm_pos_map\"", "]", "# All object 2D coordinates in the semantic map", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "# All object class indices", "\n", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "# 1/0 labels whether object was mentioned/not mentioned in template instruction", "\n", "goal_pos_map", "=", "batch", "[", "\"goal_loc\"", "]", "# Goal location in semantic map", "\n", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "# 1/0 labels whether object was mentioned/not mentioned in natural language instruction", "\n", "plan_mask", "=", "batch", "[", "\"plan_mask\"", "]", "# True for every timestep that we do visitation prediction", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "# True for every timestep that is a new instruction segment", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"templates\"", "]", "\n", "if", "templates", ":", "\n", "            ", "lm_mentioned_tplt", "=", "batch", "[", "\"lm_mentioned_tplt\"", "]", "\n", "side_mentioned_tplt", "=", "batch", "[", "\"side_mentioned_tplt\"", "]", "\n", "\n", "", "traj_ground_truth_select", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"traj_ground_truth\"", "]", ")", "\n", "noisy_poses", "=", "batch", "[", "\"noisy_poses\"", "]", "\n", "start_poses", "=", "batch", "[", "\"start_poses\"", "]", "\n", "\n", "# stops = self.maybe_cuda(batch[\"stops\"])", "\n", "masks", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"masks\"", "]", ")", "\n", "metadata", "=", "batch", "[", "\"md\"", "]", "\n", "\n", "seq_len", "=", "images", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "count", "=", "0", "\n", "correct_goal_count", "=", "0", "\n", "goal_count", "=", "0", "\n", "\n", "# Loop thru batch", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "seg_idx", "=", "-", "1", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "b_seq_len", "=", "len_until_nones", "(", "metadata", "[", "b", "]", ")", "\n", "\n", "# TODO: Generalize this", "\n", "# Slice the data according to the sequence length", "\n", "b_metadata", "=", "metadata", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_images", "=", "images", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instructions", "=", "instructions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instr_len", "=", "instr_lengths", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_states", "=", "states", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_actions", "=", "actions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_pos_fpv", "=", "lm_pos_fpv", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_pos_map", "=", "lm_pos_map", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_indices", "=", "lm_indices", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_mentioned", "=", "lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_goal_pos", "=", "goal_pos_map", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "#b_traj_ground_truth_select = traj_ground_truth_select[b][:b_seq_len]", "\n", "b_traj_ground_truth_select", "=", "traj_ground_truth_select", "[", "b", "]", "\n", "b_lang_lm_mentioned", "=", "lang_lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_noisy_poses", "=", "self", ".", "maybe_cuda", "(", "noisy_poses", "[", "b", "]", "[", ":", "b_seq_len", "]", ")", "\n", "b_start_poses", "=", "self", ".", "maybe_cuda", "(", "start_poses", "[", "b", "]", "[", ":", "b_seq_len", "]", ")", "\n", "\n", "b_plan_mask", "=", "plan_mask", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_obs_mask", "=", "[", "True", "for", "_", "in", "range", "(", "b_seq_len", ")", "]", "\n", "b_plan_mask_t_cpu", "=", "torch", ".", "Tensor", "(", "b_plan_mask", ")", "==", "True", "\n", "b_plan_mask_t", "=", "self", ".", "maybe_cuda", "(", "b_plan_mask_t_cpu", ")", "\n", "b_firstseg_mask", "=", "firstseg_mask", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "\n", "b_lm_pos_map", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_pos_map", "]", "\n", "b_lm_pos_fpv", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "RESNET_FACTOR", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_pos_fpv", "]", "\n", "b_lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_indices", "]", "\n", "b_lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_mentioned", "]", "\n", "b_goal_pos", "=", "self", ".", "cuda_var", "(", "b_goal_pos", ")", "\n", "b_lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "b_lang_lm_mentioned", ")", "\n", "\n", "# TODO: Figure out how to keep these properly. Perhaps as a whole batch is best", "\n", "# TODO: Introduce a key-value store (encapsulate instead of inherit)", "\n", "self", ".", "keep_inputs", "(", "\"lm_pos_fpv\"", ",", "b_lm_pos_fpv", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "b_lm_pos_map", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "b_lm_indices", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "b_lm_mentioned", ")", "\n", "self", ".", "keep_inputs", "(", "\"goal_pos_map\"", ",", "b_goal_pos", ")", "\n", "self", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "b_lang_lm_mentioned", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_global_select\"", ",", "b_traj_ground_truth_select", ")", "\n", "\n", "# TODO: Abstract all of these if-elses in a modular way once we know which ones are necessary", "\n", "if", "templates", ":", "\n", "                ", "b_lm_mentioned_tplt", "=", "lm_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "side_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_side_mentioned_tplt", ")", "\n", "b_lm_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned_tplt\"", ",", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "keep_inputs", "(", "\"side_mentioned_tplt\"", ",", "b_side_mentioned_tplt", ")", "\n", "\n", "", "b_pos_enc", "=", "None", "\n", "if", "self", ".", "model_class", "in", "[", "MODEL_FPV", ",", "PVN_STAGE1_ONLY", "]", ":", "\n", "                ", "b_pos_enc", "=", "self", ".", "get_path_pos_encoding", "(", "b_obs_mask", ",", "b_metadata", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "# Optional Auxiliary Inputs", "\n", "# ----------------------------------------------------------------------------", "\n", "", "if", "self", ".", "input_required", "(", "\"traj_gt_r_select\"", ")", ":", "\n", "                ", "gtsize", "=", "list", "(", "b_traj_ground_truth_select", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "#b_traj_gt_w_select = b_traj_ground_truth[b_plan_mask_t[:, np.newaxis, np.newaxis, np.newaxis].expand_as(b_traj_ground_truth)].view([-1] + gtsize)", "\n", "b_poses", "=", "self", ".", "cam_poses_from_states", "(", "b_states", ")", "\n", "b_poses_select", "=", "b_poses", "[", "b_plan_mask_t", "]", "\n", "# TODO: These source and dest should go as arguments to get_maps (in forward pass not params)", "\n", "transformer", "=", "MapTransformerBase", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "maybe_cuda", "(", "transformer", ")", "\n", "transformer", ".", "set_maps", "(", "b_traj_ground_truth_select", ",", "None", ")", "\n", "traj_gt_local_select", ",", "_", "=", "transformer", ".", "get_maps", "(", "b_poses_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_r_select\"", ",", "traj_gt_local_select", ")", "\n", "self", ".", "keep_inputs", "(", "\"traj_gt_w_select\"", ",", "b_traj_ground_truth_select", ")", "\n", "\n", "", "if", "self", ".", "input_required", "(", "\"lm_pos_map_select\"", ")", ":", "\n", "                ", "b_lm_pos_map_select", "=", "[", "lm_pos", "for", "i", ",", "lm_pos", "in", "enumerate", "(", "b_lm_pos_map", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "keep_inputs", "(", "\"lm_pos_map_select\"", ",", "b_lm_pos_map_select", ")", "\n", "", "if", "self", ".", "input_required", "(", "\"lm_indices_select\"", ")", ":", "\n", "                ", "b_lm_indices_select", "=", "[", "lm_idx", "for", "i", ",", "lm_idx", "in", "enumerate", "(", "b_lm_indices", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "keep_inputs", "(", "\"lm_indices_select\"", ",", "b_lm_indices_select", ")", "\n", "", "if", "self", ".", "input_required", "(", "\"lm_mentioned_select\"", ")", ":", "\n", "                ", "b_lm_mentioned_select", "=", "[", "lm_m", "for", "i", ",", "lm_m", "in", "enumerate", "(", "b_lm_mentioned", ")", "if", "b_plan_mask", "[", "i", "]", "]", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned_select\"", ",", "b_lm_mentioned_select", ")", "\n", "\n", "", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", "]", ":", "\n", "# If we're just pre-training path, the model will not output every action prediction, but only action", "\n", "# predictions on planning steps.", "\n", "                ", "b_actions", "=", "b_actions", "[", "b_plan_mask_t", "[", ":", ",", "np", ".", "newaxis", "]", ".", "expand_as", "(", "b_actions", ")", "]", ".", "view", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"inputs\"", ")", "\n", "\n", "actions", "=", "self", "(", "b_images", ",", "b_states", ",", "b_instructions", ",", "b_instr_len", ",", "\n", "has_obs", "=", "b_obs_mask", ",", "plan", "=", "b_plan_mask", ",", "pos_enc", "=", "b_pos_enc", ",", "firstseg", "=", "b_firstseg_mask", ",", "noisy_poses", "=", "b_noisy_poses", ",", "start_poses", "=", "b_start_poses", ")", "\n", "\n", "action_losses", ",", "_", "=", "self", ".", "action_loss", "(", "b_actions", ",", "actions", ",", "batchreduce", "=", "False", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "\n", "# Check if the goal-prediction is good enough. If it is not, don't use this example for learning actions", "\n", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", ",", "MODEL_FPV", "]", "and", "not", "(", "self", ".", "params", "[", "\"train_action_from_dstar\"", "]", "and", "self", ".", "params", "[", "\"run_action_from_dstar\"", "]", ")", ":", "#\\", "\n", "#and (params[\"action_upd_correct_only\"] or eval):", "\n", "                ", "maps_pp_in", "=", "self", ".", "get_inputs_batch", "(", "\"map_a_s_perturbed_select\"", ")", "\n", "pp_priors", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_prior_select\"", ")", "\n", "pp_posteriors", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_posterior_select\"", ")", "\n", "map_pathpreds", "=", "self", ".", "get_inputs_batch", "(", "\"map_b_r_select\"", ")", "\n", "traj_gts", "=", "self", ".", "get_inputs_batch", "(", "\"traj_gt_r_select\"", ")", "\n", "sm_globals", "=", "self", ".", "get_inputs_batch", "(", "\"map_s_w_select\"", ")", "\n", "good_goals", "=", "0", "\n", "\n", "#for i in range(len(smmaps)):", "\n", "#for i in range(len(maps_pp_in)):", "\n", "# TODO: Step only over those steps where we actually do path prediction", "\n", "# TODO: Zero out all the actions!", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "                    ", "ppinmap", "=", "maps_pp_in", "[", "i", "]", "\n", "pp_prior", "=", "self", ".", "spatialsoftmax", "(", "pp_priors", "[", "i", "]", ")", "\n", "pp_posterior", "=", "self", ".", "spatialsoftmax", "(", "pp_posteriors", "[", "i", "]", ")", "\n", "map_pathpred", "=", "map_pathpreds", "[", "i", "]", "\n", "traj_gt", "=", "traj_gts", "[", "i", "]", "\n", "sm_global", "=", "sm_globals", "[", "i", "]", "\n", "\n", "iter", "=", "self", ".", "get_iter", "(", ")", "\n", "showstuff", "=", "iter", "%", "60", "==", "0", "\n", "#showstuff = True", "\n", "if", "showstuff", ":", "\n", "                        ", "Presenter", "(", ")", ".", "show_image", "(", "ppinmap", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"map_a_r_gnd\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "ppinmap", ".", "data", "[", "0", ",", "3", ":", "6", "]", ",", "\"map_a_r_sm\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "sm_global", ".", "data", "[", "0", ",", "0", ":", "3", "]", ",", "\"sm_global\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "8", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "pp_prior", ".", "data", "[", "0", "]", ",", "\"pp_prior\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "pp_posterior", ".", "data", "[", "0", "]", ",", "\"pp_posterior\"", ",", "torch", "=", "True", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "\n", "# We can't report goal-prediction accuracy if we don't have a goal-state channel.", "\n", "", "if", "not", "self", ".", "params", "[", "\"action_in_path_only\"", "]", ":", "\n", "                        ", "ok_goal", "=", "self", ".", "goal_good_criterion", "(", "map_pathpred", ",", "traj_gt", ",", "show", "=", "\"goal_pred\"", "if", "showstuff", "else", "\"\"", ")", "\n", "correct_goal", "=", "0", "\n", "self", ".", "total_goals", "+=", "1", "\n", "if", "not", "ok_goal", ".", "all", "(", ")", ":", "\n", "#print(\"Path \" + str(i) + \" FAIL\")", "\n", "# TODO: This does not align, because action losses include ALL actions, but", "\n", "# predicitons only correspond to SELECT actions.", "\n", "# perhaps track prediction accuracy during forward pass and fill_missing should", "\n", "# produce an \"action plausible\" mask", "\n", "                            ", "if", "self", ".", "params", "[", "\"action_upd_correct_only\"", "]", ":", "\n", "                                ", "action_losses", "[", "i", "]", "=", "action_losses", "[", "i", "]", "*", "0", "\n", "", "", "else", ":", "\n", "                            ", "self", ".", "correct_goals", "+=", "1", "\n", "correct_goal", "=", "1", "\n", "good_goals", "+=", "1", "\n", "#print(\"Path \" + str(i) + \" GOOD\")", "\n", "", "self", ".", "goal_acc_meter", ".", "put", "(", "correct_goal", ")", "\n", "\n", "#print(\"   Goal running accuracy: \", self.goal_acc_meter.get())", "\n", "#print(\"Correct: \" + str(good_goals) + \" / \" + str(len(maps_pp_in)))", "\n", "\n", "", "", "", "action_losses", "=", "self", ".", "action_loss", ".", "batch_reduce_loss", "(", "action_losses", ")", "\n", "action_loss", "=", "self", ".", "action_loss", ".", "reduce_loss", "(", "action_losses", ")", "\n", "\n", "action_loss_total", "=", "action_loss", "\n", "count", "+=", "b_seq_len", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"loss\"", ")", "\n", "\n", "", "action_loss_avg", "=", "action_loss_total", "/", "(", "count", "+", "1e-9", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# Doing this in the end", "\n", "if", "self", ".", "params", "[", "\"run_auxiliaries\"", "]", ":", "\n", "            ", "aux_losses", "=", "self", ".", "calculate_aux_loss", "(", "reduce_average", "=", "True", ")", "\n", "aux_loss", "=", "self", ".", "combine_aux_losses", "(", "aux_losses", ",", "self", ".", "aux_weights", ")", "\n", "", "else", ":", "\n", "            ", "aux_loss", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "aux_losses", "=", "{", "}", "\n", "\n", "", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "aux_losses", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "# TODO: Log value here", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/goal_accuracy\"", ",", "self", ".", "goal_acc_meter", ".", "get", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"auxiliaries\"", ")", "\n", "\n", "if", "self", ".", "model_class", "in", "[", "PVN_STAGE1_ONLY", "]", ":", "\n", "            ", "total_loss", "=", "aux_loss", "\n", "", "else", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss_avg", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "total_loss", "=", "action_loss_avg", "*", "self", ".", "aux_weights", "[", "\"action\"", "]", "+", "aux_loss", "\n", "\n", "", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_sm_trajectory_ratio.ModelTrajectoryTopDown.get_dataset": [[1083, 1119], ["data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "learning.datasets.segment_dataset_simple.SegmentDataset", "print", "data_sources.append", "print", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "        ", "data_sources", "=", "[", "]", "\n", "# If we're running auxiliary objectives, we need to include the data sources for the auxiliary labels", "\n", "#if self.use_aux_class_features or self.use_aux_class_on_map or self.use_aux_grounding_features or self.use_aux_grounding_on_map:", "\n", "#if self.use_aux_goal_on_map:", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_GOAL_POS", ")", "\n", "\n", "# Adding these in this order will compute poses with added noise and compute trajectory ground truth", "\n", "# in the reference frame of these noisy poses", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_START_POSES", ")", "\n", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "            ", "print", "(", "\"PERTURBING MAPS!\"", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "# TODO: Think this through. Perhaps we actually want dynamic ground truth given a noisy start position", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"NOT Perturbing Maps!\"", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ")", "\n", "\n", "", "", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANDMARKS_MENTIONED", ")", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"templates\"", "]", "\n", "if", "templates", ":", "\n", "            ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.__init__": [[40, 106], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.params_s1.get", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.params.get", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "torch.Parameter", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.map_transformer.MapTransformer", "learning.modules.pvn.pvn_stage2_rlbase.PVN_Stage2_RLBase", "learning.modules.pvn.pvn_stage2_rlbase.PVN_Stage2_RLBase", "learning.modules.pvn.pvn_stage2_actionhead.PVN_Stage2_ActionHead", "learning.modules.pvn.pvn_stage2_valuehead.PVN_Stage2_ValueHead", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_instance_name", "=", "\"only\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage2_ActorCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage2_ac\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "instance_name", "=", "model_instance_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.instance_name}\"", ")", "\n", "\n", "self", ".", "params_s1", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "\n", "self", ".", "params_s2", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage2\"", "]", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"ActorCritic\"", "]", "\n", "\n", "self", ".", "oob", "=", "self", ".", "params_s1", ".", "get", "(", "\"clip_observability\"", ")", "\n", "self", ".", "ignore_struct", "=", "self", ".", "params", ".", "get", "(", "\"ignore_structured_input\"", ",", "False", ")", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "\n", "# Common", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "# Wrap the Stage1 model so that it becomes invisible to PyTorch, get_parameters etc, and doesn't get optimized", "\n", "\n", "self", ".", "map_transform_w_to_r", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params_s1", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params_s1", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params_s1", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params_s1", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "action_base", "=", "PVN_Stage2_RLBase", "(", "map_channels", "=", "self", ".", "params_s2", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_struct_channels", "=", "self", ".", "params_s2", "[", "\"map_structure_channels\"", "]", ",", "\n", "crop_size", "=", "self", ".", "params_s2", "[", "\"crop_size\"", "]", ",", "\n", "map_size", "=", "self", ".", "params_s1", "[", "\"local_map_size\"", "]", ",", "\n", "h1", "=", "self", ".", "params", "[", "\"h1\"", "]", ",", "h2", "=", "self", ".", "params", "[", "\"h2\"", "]", ",", "\n", "structure_h1", "=", "self", ".", "params", "[", "\"structure_h1\"", "]", ",", "\n", "obs_dim", "=", "self", ".", "params", "[", "\"obs_dim\"", "]", ",", "\n", "name", "=", "\"action\"", ")", "\n", "\n", "self", ".", "value_base", "=", "PVN_Stage2_RLBase", "(", "map_channels", "=", "self", ".", "params_s2", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_struct_channels", "=", "self", ".", "params_s2", "[", "\"map_structure_channels\"", "]", ",", "\n", "crop_size", "=", "self", ".", "params_s2", "[", "\"crop_size\"", "]", ",", "\n", "map_size", "=", "self", ".", "params_s1", "[", "\"local_map_size\"", "]", ",", "\n", "h1", "=", "self", ".", "params", "[", "\"h1\"", "]", ",", "h2", "=", "self", ".", "params", "[", "\"h2\"", "]", ",", "\n", "structure_h1", "=", "self", ".", "params", "[", "\"structure_h1\"", "]", ",", "\n", "obs_dim", "=", "self", ".", "params", "[", "\"obs_dim\"", "]", ",", "\n", "name", "=", "\"value\"", ")", "\n", "\n", "self", ".", "action_head", "=", "PVN_Stage2_ActionHead", "(", "h2", "=", "self", ".", "params", "[", "\"h2\"", "]", ")", "\n", "self", ".", "value_head", "=", "PVN_Stage2_ValueHead", "(", "h2", "=", "self", ".", "params", "[", "\"h2\"", "]", ")", "\n", "\n", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "self", ".", "gt_fill_missing", "=", "MapBatchFillMissing", "(", "\n", "self", ".", "params_s1", "[", "\"local_map_size\"", "]", ",", "\n", "self", ".", "params_s1", "[", "\"world_size_px\"", "]", ",", "\n", "self", ".", "params_s1", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "self", ".", "gt_labels", "=", "None", "\n", "\n", "# PPO interface:", "\n", "self", ".", "is_recurrent", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.make_picklable": [[107, 109], ["utils.dummy_summary_writer.DummySummaryWriter"], "methods", ["None"], ["", "def", "make_picklable", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", "=", "DummySummaryWriter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.init_weights": [[110, 115], ["model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.action_base.init_weights", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.value_base.init_weights", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.action_head.init_weights", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.value_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_base", ".", "init_weights", "(", ")", "\n", "self", ".", "value_base", ".", "init_weights", "(", ")", "\n", "self", ".", "action_head", ".", "init_weights", "(", ")", "\n", "self", ".", "value_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.get_iter": [[116, 118], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.inc_iter": [[119, 121], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.reset": [[122, 125], ["model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.tensor_store.reset", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.gt_fill_missing.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensor_store", ".", "reset", "(", ")", "\n", "self", ".", "gt_fill_missing", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.setEnvContext": [[126, 129], ["print", "str"], "methods", ["None"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.cam_poses_from_states": [[130, 135], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.forward": [[136, 177], ["utils.simple_profiler.SimpleProfiler", "isinstance", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.action_base", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.value_base", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.action_head", "utils.simple_profiler.SimpleProfiler.tick", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.value_head", "utils.simple_profiler.SimpleProfiler.tick", "torch.softplus", "torch.softplus", "torch.softplus", "learning.training.fixed_distributions.FixedNormal", "torch.softplus", "torch.softplus", "torch.softplus", "learning.training.fixed_distributions.FixedNormal", "learning.training.fixed_distributions.FixedBernoulli", "utils.simple_profiler.SimpleProfiler.tick", "utils.simple_profiler.SimpleProfiler.loop", "utils.simple_profiler.SimpleProfiler.print_stats", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats"], ["", "def", "forward", "(", "self", ",", "v_dist_r", ",", "map_structure_r", ",", "eval", "=", "False", ",", "summarize", "=", "False", ")", ":", "\n", "\n", "        ", "ACPROF", "=", "False", "\n", "prof", "=", "SimpleProfiler", "(", "print", "=", "ACPROF", ",", "torch_sync", "=", "ACPROF", ")", "\n", "\n", "if", "isinstance", "(", "v_dist_r", ",", "list", ")", ":", "\n", "            ", "inners", "=", "torch", ".", "cat", "(", "[", "m", ".", "inner_distribution", "for", "m", "in", "v_dist_r", "]", ",", "dim", "=", "0", ")", "\n", "outers", "=", "torch", ".", "cat", "(", "[", "m", ".", "outer_prob_mass", "for", "m", "in", "v_dist_r", "]", ",", "dim", "=", "0", ")", "\n", "v_dist_r", "=", "Partial2DDistribution", "(", "inners", ",", "outers", ")", "\n", "map_structure_r", "=", "torch", ".", "stack", "(", "map_structure_r", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "ignore_struct", ":", "\n", "            ", "map_structure_r", "=", "torch", ".", "zeros_like", "(", "map_structure_r", ")", "\n", "\n", "", "prof", ".", "tick", "(", "\"ac:inputs\"", ")", "\n", "avec", "=", "self", ".", "action_base", "(", "v_dist_r", ",", "map_structure_r", ")", "\n", "prof", ".", "tick", "(", "\"ac:networks - action_base\"", ")", "\n", "vvec", "=", "self", ".", "value_base", "(", "v_dist_r", ",", "map_structure_r", ")", "\n", "prof", ".", "tick", "(", "\"ac:networks - value_base\"", ")", "\n", "action_scores", "=", "self", ".", "action_head", "(", "avec", ")", "\n", "prof", ".", "tick", "(", "\"ac:networks - action_head\"", ")", "\n", "value_pred", "=", "self", ".", "value_head", "(", "vvec", ")", "\n", "prof", ".", "tick", "(", "\"ac:networks - value head\"", ")", "\n", "\n", "xvel_mean", "=", "action_scores", "[", ":", ",", "0", "]", "\n", "xvel_std", "=", "F", ".", "softplus", "(", "action_scores", "[", ":", ",", "2", "]", ")", "\n", "xvel_dist", "=", "FixedNormal", "(", "xvel_mean", ",", "xvel_std", ")", "\n", "\n", "yawrate_mean", "=", "action_scores", "[", ":", ",", "3", "]", "\n", "yawrate_std", "=", "F", ".", "softplus", "(", "action_scores", "[", ":", ",", "5", "]", ")", "\n", "yawrate_dist", "=", "FixedNormal", "(", "yawrate_mean", ",", "yawrate_std", ")", "\n", "\n", "# Skew it towards not stopping in the beginning", "\n", "stop_logits", "=", "action_scores", "[", ":", ",", "6", "]", "\n", "stop_dist", "=", "FixedBernoulli", "(", "logits", "=", "stop_logits", ")", "\n", "\n", "prof", ".", "tick", "(", "\"ac:distributions\"", ")", "\n", "prof", ".", "loop", "(", ")", "\n", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "value_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.sample_action": [[178, 184], ["xvel_dist.sample", "yawrate_dist.sample", "stop_dist.sample"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "sample_action", "(", "self", ",", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", ":", "\n", "# Sample action from the predicted distributions", "\n", "        ", "xvel_sample", "=", "xvel_dist", ".", "sample", "(", ")", "\n", "yawrate_sample", "=", "yawrate_dist", ".", "sample", "(", ")", "\n", "stop", "=", "stop_dist", ".", "sample", "(", ")", "\n", "return", "xvel_sample", ",", "yawrate_sample", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.mode_action": [[185, 190], ["xvel_dist.mode", "yawrate_dist.mode"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.mode", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.mode"], ["", "def", "mode_action", "(", "self", ",", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", ":", "\n", "        ", "xvel_sample", "=", "xvel_dist", ".", "mode", "(", ")", "\n", "yawrate_sample", "=", "yawrate_dist", ".", "mode", "(", ")", "\n", "stop", "=", "stop_dist", ".", "mean", "\n", "return", "xvel_sample", ",", "yawrate_sample", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.action_logprob": [[191, 196], ["xvel_dist.log_prob", "yawrate_dist.log_prob", "stop_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob"], ["", "def", "action_logprob", "(", "self", ",", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "xvel", ",", "yawrate", ",", "stop", ")", ":", "\n", "        ", "xvel_logprob", "=", "xvel_dist", ".", "log_prob", "(", "xvel", ")", "\n", "yawrate_logprob", "=", "yawrate_dist", ".", "log_prob", "(", "yawrate", ")", "\n", "stop_logprob", "=", "stop_dist", ".", "log_prob", "(", "stop", ")", "\n", "return", "xvel_logprob", ",", "yawrate_logprob", ",", "stop_logprob", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.evaluate_actions": [[197, 244], ["model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.action_logprob", "xvel_dist.entropy().mean", "yawrate_dist.entropy().mean", "stop_dist.entropy().mean", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.get_iter", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.inc_iter", "stop_dist.probs.detach().cpu().mean", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "xvel_dist.entropy", "yawrate_dist.entropy", "stop_dist.entropy", "stop_dist.probs.detach().cpu().mean.item", "xvel_dist.mean.detach().cpu().mean", "xvel_dist.stddev.detach().cpu().mean", "yawrate_dist.mean.detach().cpu().mean", "yawrate_dist.stddev.detach().cpu().mean", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "stop_dist.probs.detach().cpu", "xvel_dist.mean.detach().cpu().mean.item", "xvel_dist.stddev.detach().cpu().mean.item", "yawrate_dist.mean.detach().cpu().mean.item", "yawrate_dist.stddev.detach().cpu().mean.item", "xvel_dist.concentration0.detach().cpu().mean", "xvel_dist.concentration1.detach().cpu().mean", "yawrate_dist.concentration0.detach().cpu().mean", "yawrate_dist.concentration1.detach().cpu().mean", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.writer.add_scalar", "xvel_dist.mean.detach().cpu", "xvel_dist.stddev.detach().cpu", "yawrate_dist.mean.detach().cpu", "yawrate_dist.stddev.detach().cpu", "xvel_dist.concentration0.detach().cpu().mean.item", "xvel_dist.concentration1.detach().cpu().mean.item", "yawrate_dist.concentration0.detach().cpu().mean.item", "yawrate_dist.concentration1.detach().cpu().mean.item", "stop_dist.probs.detach", "xvel_dist.concentration0.detach().cpu", "xvel_dist.concentration1.detach().cpu", "yawrate_dist.concentration0.detach().cpu", "yawrate_dist.concentration1.detach().cpu", "xvel_dist.mean.detach", "xvel_dist.stddev.detach", "yawrate_dist.mean.detach", "yawrate_dist.stddev.detach", "xvel_dist.concentration0.detach", "xvel_dist.concentration1.detach", "yawrate_dist.concentration0.detach", "yawrate_dist.concentration1.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.action_logprob", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.entropy", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.entropy", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.entropy", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "evaluate_actions", "(", "self", ",", "maps_r_batch", ",", "map_cov_r_batch", ",", "hidden_states_batch", ",", "masks_batch", ",", "actions_batch", ",", "global_step", ")", ":", "\n", "        ", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "value_pred", "=", "self", "(", "maps_r_batch", ",", "map_cov_r_batch", ",", "summarize", "=", "True", ")", "\n", "\n", "# X-vel and yaw rate. Drop sideways velocity", "\n", "x_vel", "=", "actions_batch", "[", ":", ",", "0", "]", "\n", "yawrate", "=", "actions_batch", "[", ":", ",", "2", "]", "\n", "stops", "=", "actions_batch", "[", ":", ",", "3", "]", "\n", "\n", "# Get action log-probabilities", "\n", "x_vel_log_probs", ",", "yawrate_log_probs", ",", "stop_log_probs", "=", "self", ".", "action_logprob", "(", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "x_vel", ",", "yawrate", ",", "stops", ")", "\n", "\n", "x_vel_entropy", "=", "xvel_dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "yawrate_entropy", "=", "yawrate_dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "stop_entropy", "=", "stop_dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "entropy", "=", "x_vel_entropy", "+", "yawrate_entropy", "+", "stop_entropy", "\n", "log_probs", "=", "x_vel_log_probs", "+", "yawrate_log_probs", "+", "stop_log_probs", "\n", "\n", "i", "=", "self", ".", "get_iter", "(", ")", "\n", "if", "i", "%", "17", "==", "0", ":", "\n", "            ", "stop_probs", "=", "stop_dist", ".", "probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/stopprob\"", ",", "stop_probs", ".", "item", "(", ")", ",", "i", ")", "\n", "\n", "if", "ACT_DIST", "==", "\"normal\"", ":", "\n", "                ", "x_vel_mean", "=", "xvel_dist", ".", "mean", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "x_vel_std", "=", "xvel_dist", ".", "stddev", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "yawrate_mean", "=", "yawrate_dist", ".", "mean", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "yawrate_std", "=", "yawrate_dist", ".", "stddev", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/x_vel_mean\"", ",", "x_vel_mean", ".", "item", "(", ")", ",", "i", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/x_vel_std\"", ",", "x_vel_std", ".", "item", "(", ")", ",", "i", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/yawrate_mean\"", ",", "yawrate_mean", ".", "item", "(", ")", ",", "i", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/yawrate_std\"", ",", "yawrate_std", ".", "item", "(", ")", ",", "i", ")", "\n", "\n", "", "elif", "ACT_DIST", "==", "\"beta\"", ":", "\n", "                ", "x_vel_alpha", "=", "xvel_dist", ".", "concentration0", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "x_vel_beta", "=", "xvel_dist", ".", "concentration1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "yawrate_alpha", "=", "yawrate_dist", ".", "concentration0", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "yawrate_beta", "=", "yawrate_dist", ".", "concentration1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/vel_x_alpha\"", ",", "x_vel_alpha", ".", "item", "(", ")", ",", "i", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/vel_x_beta\"", ",", "x_vel_beta", ".", "item", "(", ")", ",", "i", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/yaw_rate_alpha\"", ",", "yawrate_alpha", ".", "item", "(", ")", ",", "i", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{self.model_name}/yaw_rate_beta\"", ",", "yawrate_beta", ".", "item", "(", ")", ",", "i", ")", "\n", "\n", "", "", "self", ".", "inc_iter", "(", ")", "\n", "\n", "return", "value_pred", ",", "log_probs", ",", "entropy", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.cuda_var": [[245, 247], ["tensor.to", "next", "model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.__init__": [[43, 106], ["torch.Module.__init__", "learning.models.model_pvn_stage1_bidomain.PVN_Stage1_Bidomain", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wrapper_params.get", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.load_models_from_file", "learning.modules.visitation_softmax.VisitationSoftmax", "learning.modules.map_transformer.MapTransformer", "learning.intrinsic_reward.visitation_reward.VisitationReward", "learning.intrinsic_reward.visitation_and_exploration_reward.VisitationAndExplorationReward", "learning.intrinsic_reward.wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward", "learning.intrinsic_reward.map_coverage_reward.MapCoverageReward", "learning.intrinsic_reward.action_oob_reward.ActionOutOfBoundsReward", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.make_map_boundary", "visualization.Presenter", "utils.simple_profiler.SimpleProfiler", "parameters.get_current_parameters", "[].get", "RvizInterface", "learning.models.model_pvn_stage2_keyboard.PVN_Stage2_Keyboard", "learning.models.model_pvn_stage2_actor_critic.PVN_Stage2_ActorCritic", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.load_models_from_file", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.make_map_boundary", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_instance_name", "=", "\"only\"", ",", "oracle_stage1", "=", "False", ")", ":", "\n", "        ", "super", "(", "PVN_Wrapper_Bidomain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "instance_name", "=", "model_instance_name", "\n", "self", ".", "s1_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "\n", "self", ".", "s2_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage2\"", "]", "\n", "self", ".", "wrapper_params", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"PVNWrapper\"", "]", "\n", "self", ".", "oracle_stage1", "=", "oracle_stage1", "\n", "\n", "self", ".", "real_drone", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"real_drone\"", "]", "\n", "self", ".", "rviz", "=", "None", "\n", "if", "self", ".", "real_drone", "and", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", ".", "get", "(", "\"use_rviz\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "rviz", "=", "RvizInterface", "(", "\n", "base_name", "=", "\"/pvn/\"", ",", "\n", "map_topics", "=", "[", "\"semantic_map\"", ",", "\"visitation_dist\"", "]", ",", "\n", "markerarray_topics", "=", "[", "\"instruction\"", "]", ")", "\n", "\n", "", "self", ".", "stage1_visitation_prediction", "=", "PVN_Stage1_Bidomain", "(", "run_name", ",", "model_instance_name", ")", "\n", "\n", "self", ".", "keyboard", "=", "self", ".", "wrapper_params", ".", "get", "(", "\"keyboard\"", ")", "\n", "self", ".", "rl", "=", "self", ".", "wrapper_params", "[", "\"learning_mode\"", "]", "==", "\"reinforcement_learning\"", "\n", "\n", "if", "self", ".", "keyboard", ":", "\n", "            ", "self", ".", "stage2_action_generation", "=", "PVN_Stage2_Keyboard", "(", "run_name", ",", "model_instance_name", ")", "\n", "", "else", ":", "# self.wrapper_params[\"pvn_version\"] == \"v2\":", "\n", "# Wrap Stage 1 to hide it from PyTorch", "\n", "            ", "self", ".", "stage2_action_generation", "=", "PVN_Stage2_ActorCritic", "(", "run_name", ",", "model_instance_name", ")", "\n", "#else:", "\n", "#    self.stage2_action_generation = PVN_Stage2_Bidomain(run_name, model_instance_name)", "\n", "\n", "", "self", ".", "load_models_from_file", "(", ")", "\n", "\n", "#self.spatialsoftmax = SpatialSoftmax2d()", "\n", "self", ".", "visitation_softmax", "=", "VisitationSoftmax", "(", ")", "\n", "\n", "self", ".", "map_transformer_w_to_r", "=", "MapTransformer", "(", "\n", "source_map_size", "=", "self", ".", "s1_params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "s1_params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "s1_params", "[", "\"world_size_m\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "s1_params", "[", "\"world_size_px\"", "]", "\n", ")", "\n", "\n", "self", ".", "visitation_reward", "=", "VisitationReward", "(", "world_size_px", "=", "self", ".", "s1_params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "s1_params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "visitation_and_exploration_reward", "=", "VisitationAndExplorationReward", "(", "world_size_px", "=", "self", ".", "s1_params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "s1_params", "[", "\"world_size_m\"", "]", ")", "\n", "self", ".", "wd_visitation_and_exploration_reward", "=", "WDVisitationAndExplorationReward", "(", "world_size_px", "=", "self", ".", "s1_params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "s1_params", "[", "\"world_size_m\"", "]", ",", "params", "=", "self", ".", "wrapper_params", "[", "\"wd_reward\"", "]", ")", "\n", "\n", "self", ".", "map_coverage_reward", "=", "MapCoverageReward", "(", ")", "\n", "self", ".", "action_oob_reward", "=", "ActionOutOfBoundsReward", "(", ")", "\n", "\n", "self", ".", "map_boundary", "=", "self", ".", "make_map_boundary", "(", ")", "\n", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "start_cam_poses", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "log_v_dist_w", "=", "None", "\n", "self", ".", "v_dist_w", "=", "None", "\n", "self", ".", "map_uncoverage_w", "=", "None", "\n", "self", ".", "current_segment", "=", "None", "\n", "self", ".", "presenter", "=", "Presenter", "(", ")", "\n", "\n", "self", ".", "actprof", "=", "SimpleProfiler", "(", "print", "=", "ACTPROF", ",", "torch_sync", "=", "ACTPROF", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.make_picklable": [[107, 110], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.make_picklable", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.make_picklable"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.make_picklable", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.make_picklable"], ["", "def", "make_picklable", "(", "self", ")", ":", "\n", "        ", "self", ".", "stage1_visitation_prediction", ".", "make_picklable", "(", ")", "\n", "self", ".", "stage2_action_generation", ".", "make_picklable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.load_models_from_file": [[111, 131], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wrapper_params.get", "print", "print", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wrapper_params.get", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wrapper_params.get", "data_io.models.load_pytorch_model", "data_io.models.load_pytorch_model", "print", "data_io.models.load_pytorch_model", "print", "data_io.models.load_pytorch_model"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.model_io.load_pytorch_model"], ["", "def", "load_models_from_file", "(", "self", ",", "stage1_file", "=", "None", ",", "stage2_file", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "real_drone", ":", "\n", "            ", "stage1_file", "=", "stage1_file", "or", "self", ".", "wrapper_params", ".", "get", "(", "\"stage1_file_real\"", ")", "\n", "", "else", ":", "\n", "            ", "stage1_file", "=", "stage1_file", "or", "self", ".", "wrapper_params", ".", "get", "(", "\"stage1_file_sim\"", ")", "\n", "", "stage2_file", "=", "stage2_file", "or", "self", ".", "wrapper_params", ".", "get", "(", "\"stage2_file\"", ")", "\n", "if", "stage1_file", ":", "\n", "            ", "print", "(", "\"PVNWrapper: Loading Stage 1\"", ")", "\n", "try", ":", "\n", "                ", "load_pytorch_model", "(", "self", ".", "stage1_visitation_prediction", ",", "stage1_file", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "print", "(", "f\"Couldn't load Stage1 without namespace: {e}\"", ")", "\n", "load_pytorch_model", "(", "self", ".", "stage1_visitation_prediction", ",", "stage1_file", ",", "namespace", "=", "\"stage1_visitation_prediction\"", ")", "\n", "", "", "if", "stage2_file", ":", "\n", "            ", "print", "(", "\"PVNWrapper: Loading Stage 2\"", ")", "\n", "try", ":", "\n", "                ", "load_pytorch_model", "(", "self", ".", "stage2_action_generation", ",", "stage2_file", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "print", "(", "f\"Couldn't load Stage2 without namespace: {e}\"", ")", "\n", "load_pytorch_model", "(", "self", ".", "stage2_action_generation", ",", "stage2_file", ",", "namespace", "=", "\"stage2_action_generation\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters": [[132, 135], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "", "", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ")", ":", "\n", "#print(\"WARNING: RETURNING STAGE 2 PARAMS AS WRAPPER PARAMS\")", "\n", "        ", "return", "self", ".", "stage2_action_generation", ".", "parameters", "(", "recurse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.get_policy_state": [[138, 140], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.state_dict"], "methods", ["None"], ["", "def", "get_policy_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stage2_action_generation", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.set_policy_state": [[141, 143], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict"], ["", "def", "set_policy_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "stage2_action_generation", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.set_static_state": [[144, 146], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict"], ["", "def", "set_static_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "stage1_visitation_prediction", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.get_static_state": [[147, 149], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.state_dict"], "methods", ["None"], ["", "def", "get_static_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stage1_visitation_prediction", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.init_weights": [[150, 154], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.init_weights", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.init_weights", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.load_models_from_file"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.load_models_from_file"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "stage1_visitation_prediction", ".", "init_weights", "(", ")", "\n", "self", ".", "stage2_action_generation", ".", "init_weights", "(", ")", "\n", "self", ".", "load_models_from_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.reset": [[155, 166], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.reset", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.reset", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_coverage_reward.reset", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.visitation_reward.reset", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wd_visitation_and_exploration_reward.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "stage1_visitation_prediction", ".", "reset", "(", ")", "\n", "self", ".", "stage2_action_generation", ".", "reset", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "start_cam_poses", "=", "None", "\n", "self", ".", "log_v_dist_w", "=", "None", "\n", "self", ".", "v_dist_w", "=", "None", "\n", "self", ".", "map_uncoverage_w", "=", "None", "\n", "self", ".", "map_coverage_reward", ".", "reset", "(", ")", "\n", "self", ".", "visitation_reward", ".", "reset", "(", ")", "\n", "self", ".", "wd_visitation_and_exploration_reward", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.start_sequence": [[167, 170], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.start_segment_rollout": [[171, 174], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_segment_rollout", "(", "self", ",", "env_id", ",", "set_idx", ",", "seg_idx", ")", ":", "\n", "        ", "self", ".", "current_segment", "=", "[", "env_id", ",", "set_idx", ",", "seg_idx", "]", "\n", "self", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.cam_poses_from_states": [[175, 180], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.drone_poses_from_states": [[181, 188], ["states[].detach().cpu().numpy", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "learning.inputs.pose.Pose", "transforms3d.euler.euler2quat", "states[].detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "states[].detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "drone_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "drn_pos", "=", "states", "[", ":", ",", "0", ":", "3", "]", "\n", "drn_rot_euler", "=", "states", "[", ":", ",", "3", ":", "6", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "quats", "=", "[", "euler2quat", "(", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "a", "[", "2", "]", ")", "for", "a", "in", "drn_rot_euler", "]", "\n", "quats", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "quats", ")", ")", ".", "to", "(", "drn_pos", ".", "device", ")", "\n", "pose", "=", "Pose", "(", "drn_pos", ",", "quats", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.poses_from_states": [[189, 195], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.drone_poses_from_states", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.cam_poses_from_states"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.drone_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states"], ["", "def", "poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "USE_DRONE_POSES", "=", "True", "\n", "if", "USE_DRONE_POSES", ":", "\n", "            ", "return", "self", ".", "drone_poses_from_states", "(", "states", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.make_map_boundary": [[196, 204], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "make_map_boundary", "(", "self", ")", ":", "\n", "        ", "mapsize", "=", "self", ".", "s1_params", "[", "\"global_map_size\"", "]", "\n", "boundary", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "mapsize", ",", "mapsize", "]", ")", "\n", "boundary", "[", ":", ",", ":", ",", "0", ",", ":", "]", "=", "1.0", "\n", "boundary", "[", ":", ",", ":", ",", "mapsize", "-", "1", ",", ":", "]", "=", "1.0", "\n", "boundary", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "1.0", "\n", "boundary", "[", ":", ",", ":", ",", ":", ",", "mapsize", "-", "1", "]", "=", "1.0", "\n", "return", "boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.calc_intrinsic_rewards": [[205, 238], ["ValueError", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wrapper_params.get", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.action_oob_reward.get_reward", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.s1_params.get", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wrapper_params.get", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.wd_visitation_and_exploration_reward", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.s1_params.get", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.visitation_and_exploration_reward", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.visitation_reward"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.get_reward", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "calc_intrinsic_rewards", "(", "self", ",", "next_state", ",", "action", ",", "done", ",", "first", ")", ":", "\n", "        ", "if", "self", ".", "v_dist_w", "is", "None", "or", "self", ".", "map_uncoverage_w", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Computing intrinsic reward prior to any rollouts!\"", ")", "\n", "", "else", ":", "\n", "            ", "states_np", "=", "next_state", ".", "state", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "states", "=", "torch", ".", "from_numpy", "(", "states_np", ")", "\n", "cam_pos", "=", "states", "[", ":", ",", "0", ":", "12", "]", "\n", "\n", "if", "self", ".", "s1_params", ".", "get", "(", "\"clip_observability\"", ")", "and", "self", ".", "wrapper_params", ".", "get", "(", "\"wasserstein_reward\"", ")", ":", "\n", "                ", "visitation_reward", ",", "stop_reward", ",", "exploration_reward", ",", "stop_oob_reward", ",", "stop_p_reward", "=", "self", ".", "wd_visitation_and_exploration_reward", "(", "\n", "self", ".", "v_dist_w", ",", "cam_pos", ",", "action", ",", "done", ",", "first", ")", "\n", "\n", "", "elif", "self", ".", "s1_params", ".", "get", "(", "\"clip_observability\"", ")", ":", "\n", "                ", "visitation_reward", ",", "stop_reward", ",", "exploration_reward", "=", "self", ".", "visitation_and_exploration_reward", "(", "\n", "self", ".", "v_dist_w", ",", "self", ".", "goal_oob_prob_w", ",", "cam_pos", ",", "action", ",", "done", ")", "\n", "", "else", ":", "\n", "                ", "visitation_reward", ",", "stop_reward", "=", "self", ".", "visitation_reward", "(", "self", ".", "v_dist_w", ",", "cam_pos", ",", "action", ",", "done", ")", "\n", "exploration_reward", "=", "0.0", "\n", "\n", "", "if", "self", ".", "wrapper_params", ".", "get", "(", "\"explore_reward_only\"", ")", ":", "\n", "                ", "visitation_reward", "=", "0.0", "\n", "stop_reward", "=", "0.0", "\n", "\n", "", "negative_per_step_reward", "=", "-", "self", ".", "wrapper_params", "[", "\"wd_reward\"", "]", "[", "\"step_alpha\"", "]", "\n", "action_oob_reward", "=", "self", ".", "action_oob_reward", ".", "get_reward", "(", "action", ")", "\n", "\n", "return", "{", "\"visitation_reward\"", ":", "visitation_reward", ",", "\n", "\"stop_reward\"", ":", "stop_reward", ",", "\n", "\"exploration_reward\"", ":", "exploration_reward", ",", "\n", "\"negative_per_step_reward\"", ":", "negative_per_step_reward", ",", "\n", "\"action_oob_reward\"", ":", "action_oob_reward", ",", "\n", "\"stop_oob_reward\"", ":", "stop_oob_reward", ",", "\n", "\"stop_p_reward\"", ":", "stop_p_reward", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.states_to_torch": [[239, 246], ["learning.inputs.vision.standardize_images", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_images"], ["", "", "def", "states_to_torch", "(", "self", ",", "state", ")", ":", "\n", "        ", "states_np", "=", "state", ".", "state", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "images_np", "=", "state", ".", "image", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "images_np", "=", "standardize_images", "(", "images_np", ",", "out_np", "=", "True", ")", "\n", "images_fpv", "=", "torch", ".", "from_numpy", "(", "images_np", ")", ".", "float", "(", ")", "\n", "states", "=", "torch", ".", "from_numpy", "(", "states_np", ")", "\n", "return", "states", ",", "images_fpv", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.build_map_structured_input": [[247, 261], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_transformer_w_to_r", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_boundary.to", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_transformer_w_to_r", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_boundary.repeat", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_boundary.repeat"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat"], ["", "def", "build_map_structured_input", "(", "self", ",", "map_uncoverage_w", ",", "cam_poses", ")", ":", "\n", "        ", "map_uncoverage_r", ",", "_", "=", "self", ".", "map_transformer_w_to_r", "(", "map_uncoverage_w", ",", "None", ",", "cam_poses", ")", "\n", "if", "self", ".", "s2_params", "[", "\"use_map_boundary\"", "]", ":", "\n", "# Change device if necessary", "\n", "            ", "self", ".", "map_boundary", "=", "self", ".", "map_boundary", ".", "to", "(", "map_uncoverage_r", ".", "device", ")", "\n", "batch_size", "=", "map_uncoverage_w", ".", "shape", "[", "0", "]", "\n", "map_boundary_r", ",", "_", "=", "self", ".", "map_transformer_w_to_r", "(", "self", ".", "map_boundary", ".", "repeat", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", ",", "None", ",", "cam_poses", ")", "\n", "structured_map_info_r", "=", "torch", ".", "cat", "(", "[", "map_uncoverage_r", ",", "map_boundary_r", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "structured_map_info_r", "=", "map_uncoverage_r", "\n", "\n", "", "batch_size", "=", "map_uncoverage_w", ".", "shape", "[", "0", "]", "\n", "struct_info_w", "=", "torch", ".", "cat", "(", "[", "map_uncoverage_w", ",", "self", ".", "map_boundary", ".", "repeat", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "]", ")", "\n", "return", "structured_map_info_r", ",", "struct_info_w", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.make_viz_dict_from_stage1_internals": [[262, 276], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.tensor_store.get_latest_input", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.tensor_store.get_latest_input", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.tensor_store.get_latest_input", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.tensor_store.get_latest_input", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.tensor_store.get_latest_input", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.tensor_store.get_latest_input", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "make_viz_dict_from_stage1_internals", "(", "self", ")", ":", "\n", "        ", "F_C", "=", "self", ".", "stage1_visitation_prediction", ".", "tensor_store", ".", "get_latest_input", "(", "\"fpv_features\"", ")", "\n", "F_W", "=", "self", ".", "stage1_visitation_prediction", ".", "tensor_store", ".", "get_latest_input", "(", "\"F_w\"", ")", "\n", "M_W", "=", "self", ".", "stage1_visitation_prediction", ".", "tensor_store", ".", "get_latest_input", "(", "\"M_w\"", ")", "\n", "SM_W", "=", "self", ".", "stage1_visitation_prediction", ".", "tensor_store", ".", "get_latest_input", "(", "\"SM_w\"", ")", "\n", "S_W", "=", "self", ".", "stage1_visitation_prediction", ".", "tensor_store", ".", "get_latest_input", "(", "\"S_W_select\"", ")", "\n", "R_W", "=", "self", ".", "stage1_visitation_prediction", ".", "tensor_store", ".", "get_latest_input", "(", "\"R_W_select\"", ")", "\n", "return", "{", "\n", "\"F_C\"", ":", "F_C", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"F_W\"", ":", "F_W", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"M_W\"", ":", "M_W", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"S_W\"", ":", "S_W", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"R_W\"", ":", "R_W", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"SM_W\"", ":", "SM_W", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.get_action": [[278, 436], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.eval", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.states_to_torch", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.poses_from_states", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_transformer_w_to_r", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.build_map_structured_input", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.reset", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.cam_poses_from_states", "images_fpv.to.to.to", "states.to.to.to", "instructions.to.to.to", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.start_cam_poses.cuda", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.tick", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.tick", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.log_v_dist_w.softmax", "learning.resolve_and_get_ground_truth_static_global().to", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_transformer_w_to_r", "visualization.Presenter().show_image", "learning.inputs.partial_2d_distribution.Partial2DDistribution.show", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.tick", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.tick", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.tick", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.action_logprob", "xvel.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "yawrate.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "stop.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "xvel_logprob.detach.detach.detach", "yawrate_logprob.detach.detach.detach", "stop_logprob.detach.detach.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.s2_params.get", "numpy.concatenate", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.tick", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.loop", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.actprof.print_stats", "NotImplemented", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.rviz.publish_instruction_text", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "next", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.inner_distribution[].data.cpu().numpy().transpose", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.rviz.publish_map", "learning.inputs.partial_2d_distribution.Partial2DDistribution.from_distribution_and_mask", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.sample_action", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.mode_action", "value.detach.detach.detach", "stop_dist.probs.detach().item", "print", "learning.inputs.partial_2d_distribution.Partial2DDistribution.detach", "structured_map_info_r[].detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.inner_distribution[].detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.make_viz_dict_from_stage1_internals", "learning.inputs.partial_2d_distribution.Partial2DDistribution.inner_distribution[].detach().cpu().numpy", "learning.inputs.partial_2d_distribution.Partial2DDistribution.outer_prob_mass[].detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.inner_distribution[].detach().cpu().numpy", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.outer_prob_mass[].detach().cpu().numpy", "structured_map_info_r[].detach().cpu().numpy", "map_info_w[].detach().cpu().numpy", "visualization.Presenter().split_lines", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "numpy.max", "numpy.max", "learning.resolve_and_get_ground_truth_static_global", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "visualization.Presenter", "xvel.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "yawrate.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "stop.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "numpy.ones_like", "numpy.zeros", "data_io.instructions.debug_untokenize_instruction", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.inner_distribution[].data.cpu().numpy", "stop_dist.probs.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.s2_params.get", "learning.inputs.partial_2d_distribution.Partial2DDistribution.inner_distribution[].detach().cpu", "learning.inputs.partial_2d_distribution.Partial2DDistribution.outer_prob_mass[].detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.inner_distribution[].detach().cpu", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.outer_prob_mass[].detach().cpu", "structured_map_info_r[].detach().cpu", "map_info_w[].detach().cpu", "visualization.Presenter", "xvel.detach().cpu().numpy.detach().cpu().numpy.detach", "yawrate.detach().cpu().numpy.detach().cpu().numpy.detach", "stop.detach().cpu().numpy.detach().cpu().numpy.detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.inner_distribution[].data.cpu", "learning.inputs.partial_2d_distribution.Partial2DDistribution.inner_distribution[].detach", "learning.inputs.partial_2d_distribution.Partial2DDistribution.outer_prob_mass[].detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.inner_distribution[].detach", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.v_dist_w.outer_prob_mass[].detach", "structured_map_info_r[].detach", "map_info_w[].detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.states_to_torch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.build_map_structured_input", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.action_logprob", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_instruction_text", "home.repos.pwc.inspect_result.clic-lab_drif.aero_interface.rviz.RvizInterface.publish_map", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.from_distribution_and_mask", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.sample_action", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.mode_action", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.make_viz_dict_from_stage1_internals", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.split_lines", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.resolve_and_get_ground_truth_static_global", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ",", "sample", "=", "False", ",", "rl_rollout", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        :param sample: (Only applies if self.rl): If true, sample action from action distribution. If False, take most likely action.\n        :return:\n        \"\"\"", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "states", ",", "images_fpv", "=", "self", ".", "states_to_torch", "(", "state", ")", "\n", "\n", "first_step", "=", "True", "\n", "if", "instruction", "==", "self", ".", "prev_instruction", ":", "\n", "            ", "first_step", "=", "False", "\n", "", "if", "first_step", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "self", ".", "start_cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "if", "self", ".", "rviz", "is", "not", "None", ":", "\n", "                ", "dbg_instr", "=", "\"\\n\"", ".", "join", "(", "Presenter", "(", ")", ".", "split_lines", "(", "debug_untokenize_instruction", "(", "instruction", ")", ",", "maxchars", "=", "45", ")", ")", "\n", "self", ".", "rviz", ".", "publish_instruction_text", "(", "\"instruction\"", ",", "dbg_instr", ")", "\n", "\n", "", "", "self", ".", "prev_instruction", "=", "instruction", "\n", "self", ".", "seq_step", "+=", "1", "\n", "\n", "instr_len", "=", "[", "len", "(", "instruction", ")", "]", "if", "instruction", "is", "not", "None", "else", "None", "\n", "instructions", "=", "torch", ".", "LongTensor", "(", "instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "plan_now", "=", "self", ".", "seq_step", "%", "self", ".", "s1_params", "[", "\"plan_every_n_steps\"", "]", "==", "0", "or", "first_step", "\n", "\n", "# Run stage1 visitation prediction", "\n", "# TODO: There's a bug here where we ignore images between planning timesteps. That's why must plan every timestep", "\n", "if", "plan_now", "or", "True", ":", "\n", "            ", "device", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "images_fpv", "=", "images_fpv", ".", "to", "(", "device", ")", "\n", "states", "=", "states", ".", "to", "(", "device", ")", "\n", "instructions", "=", "instructions", ".", "to", "(", "device", ")", "\n", "self", ".", "start_cam_poses", "=", "self", ".", "start_cam_poses", ".", "cuda", "(", "device", ")", "\n", "\n", "self", ".", "actprof", ".", "tick", "(", "\"start\"", ")", "\n", "#print(\"Planning for: \" + debug_untokenize_instruction(list(instructions[0].detach().cpu().numpy())))", "\n", "self", ".", "log_v_dist_w", ",", "v_dist_w_poses", ",", "rl_outputs", "=", "self", ".", "stage1_visitation_prediction", "(", "\n", "images_fpv", ",", "states", ",", "instructions", ",", "instr_len", ",", "\n", "plan", "=", "[", "True", "]", ",", "firstseg", "=", "[", "first_step", "]", ",", "\n", "noisy_start_poses", "=", "self", ".", "start_cam_poses", ",", "\n", "start_poses", "=", "self", ".", "start_cam_poses", ",", "\n", "select_only", "=", "True", ",", "\n", "rl", "=", "True", ",", "\n", "noshow", "=", "True", "\n", ")", "\n", "self", ".", "actprof", ".", "tick", "(", "\"stage1\"", ")", "\n", "self", ".", "map_uncoverage_w", "=", "rl_outputs", "[", "\"map_uncoverage_w\"", "]", "\n", "self", ".", "v_dist_w", "=", "self", ".", "log_v_dist_w", ".", "softmax", "(", ")", "\n", "# TODO: Fix", "\n", "if", "self", ".", "rviz", ":", "#a.k.a False", "\n", "                ", "v_dist_w_np", "=", "self", ".", "v_dist_w", ".", "inner_distribution", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "# expand to 0-1 range", "\n", "v_dist_w_np", "[", ":", ",", ":", ",", "0", "]", "/=", "(", "np", ".", "max", "(", "v_dist_w_np", "[", ":", ",", ":", ",", "0", "]", ")", "+", "1e-10", ")", "\n", "v_dist_w_np", "[", ":", ",", ":", ",", "1", "]", "/=", "(", "np", ".", "max", "(", "v_dist_w_np", "[", ":", ",", ":", ",", "1", "]", ")", "+", "1e-10", ")", "\n", "self", ".", "rviz", ".", "publish_map", "(", "\"visitation_dist\"", ",", "v_dist_w_np", ",", "\n", "self", ".", "s1_params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "# Transform to robot reference frame", "\n", "", "", "drn_poses", "=", "self", ".", "poses_from_states", "(", "states", ")", "\n", "# Log-distributions CANNOT be transformed - the transformer fills empty space with zeroes, which makes sense for", "\n", "# probability distributions, but makes no sense for likelihood scores", "\n", "x", "=", "self", ".", "v_dist_w", ".", "inner_distribution", "\n", "xr", ",", "r_poses", "=", "self", ".", "map_transformer_w_to_r", "(", "x", ",", "None", ",", "drn_poses", ")", "\n", "v_dist_r", "=", "Partial2DDistribution", "(", "xr", ",", "self", ".", "v_dist_w", ".", "outer_prob_mass", ")", "\n", "\n", "structured_map_info_r", ",", "map_info_w", "=", "self", ".", "build_map_structured_input", "(", "self", ".", "map_uncoverage_w", ",", "drn_poses", ")", "\n", "\n", "if", "self", ".", "oracle_stage1", ":", "\n", "# Ground truth visitation distributions (in start and global frames)", "\n", "            ", "assert", "self", ".", "current_segment", "is", "not", "None", ",", "\"start_segment_rollout must be called before rolling out model that uses ground truth\"", "\n", "env_id", ",", "set_idx", ",", "seg_idx", "=", "self", ".", "current_segment", "\n", "v_dist_w_gt", "=", "aup", ".", "resolve_and_get_ground_truth_static_global", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "self", ".", "s1_params", "[", "\"global_map_size\"", "]", ",", "self", ".", "s1_params", "[", "\"world_size_px\"", "]", ")", ".", "to", "(", "images_fpv", ".", "device", ")", "\n", "v_dist_r_ground_truth_select", ",", "poses_r", "=", "self", ".", "map_transformer_w_to_r", "(", "v_dist_w_gt", ",", "None", ",", "drn_poses", ")", "\n", "map_uncoverage_r", "=", "structured_map_info_r", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "# PVNv2: Mask the visitation distributions according to observability thus far:", "\n", "if", "self", ".", "s1_params", "[", "\"clip_observability\"", "]", ":", "\n", "                ", "v_dist_r_gt_masked", "=", "Partial2DDistribution", ".", "from_distribution_and_mask", "(", "v_dist_r_ground_truth_select", ",", "1", "-", "map_uncoverage_r", ")", "\n", "# PVNv1: Have P(oob)=0, and use unmasked ground-truth visitation distributions", "\n", "", "else", ":", "\n", "                ", "v_dist_r_gt_masked", "=", "Partial2DDistribution", "(", "v_dist_r_ground_truth_select", ",", "torch", ".", "zeros_like", "(", "v_dist_r_ground_truth_select", "[", ":", ",", ":", ",", "0", ",", "0", "]", ")", ")", "\n", "", "v_dist_r", "=", "v_dist_r_gt_masked", "\n", "\n", "", "if", "False", ":", "\n", "            ", "Presenter", "(", ")", ".", "show_image", "(", "structured_map_info_r", ",", "\"map_struct\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "v_dist_r", ".", "show", "(", "\"v_dist_r\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "\n", "# Run stage2 action generation", "\n", "", "if", "self", ".", "rl", ":", "\n", "            ", "self", ".", "actprof", ".", "tick", "(", "\"pipes\"", ")", "\n", "# If RL, stage 2 outputs distributions over actions (following torch.distributions API)", "\n", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "value", "=", "self", ".", "stage2_action_generation", "(", "v_dist_r", ",", "structured_map_info_r", ",", "eval", "=", "True", ")", "\n", "\n", "self", ".", "actprof", ".", "tick", "(", "\"stage2\"", ")", "\n", "if", "sample", ":", "\n", "                ", "xvel", ",", "yawrate", ",", "stop", "=", "self", ".", "stage2_action_generation", ".", "sample_action", "(", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", "\n", "", "else", ":", "\n", "                ", "xvel", ",", "yawrate", ",", "stop", "=", "self", ".", "stage2_action_generation", ".", "mode_action", "(", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", "\n", "\n", "", "self", ".", "actprof", ".", "tick", "(", "\"sample\"", ")", "\n", "xvel_logprob", ",", "yawrate_logprob", ",", "stop_logprob", "=", "self", ".", "stage2_action_generation", ".", "action_logprob", "(", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "xvel", ",", "yawrate", ",", "stop", ")", "\n", "\n", "xvel", "=", "xvel", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "yawrate", "=", "yawrate", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stop", "=", "stop", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xvel_logprob", "=", "xvel_logprob", ".", "detach", "(", ")", "\n", "yawrate_logprob", "=", "yawrate_logprob", ".", "detach", "(", ")", "\n", "stop_logprob", "=", "stop_logprob", ".", "detach", "(", ")", "\n", "if", "value", "is", "not", "None", ":", "\n", "                ", "value", "=", "value", ".", "detach", "(", ")", "#.cpu().numpy()", "\n", "\n", "", "if", "self", ".", "s2_params", ".", "get", "(", "\"use_stop_threshold\"", ")", ":", "\n", "                ", "stop_prob", "=", "stop_dist", ".", "probs", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "stop", "=", "1", "if", "stop_prob", ">", "self", ".", "s2_params", ".", "get", "(", "\"stop_threshold\"", ")", "else", "0", "\n", "stop", "=", "np", ".", "ones_like", "(", "xvel", ")", "*", "stop", "\n", "print", "(", "\"stop prob: \"", ",", "stop_prob", ",", "\" -> \"", ",", "stop", ")", "\n", "\n", "\n", "# Add an empty column for sideways velocity", "\n", "", "act", "=", "np", ".", "concatenate", "(", "[", "xvel", ",", "np", ".", "zeros", "(", "xvel", ".", "shape", ")", ",", "yawrate", ",", "stop", "]", ")", "\n", "# This will be needed to compute rollout statistics later on", "\n", "#v_dist_w = self.visitation_softmax(self.log_v_dist_w, self.log_goal_oob_score)", "\n", "\n", "# Keep all the info we will need later for A2C / PPO training", "\n", "# TODO: We assume independence between velocity and stop distributions. Not true, but what ya gonna do?", "\n", "rl_data", "=", "{", "\n", "\"policy_input\"", ":", "v_dist_r", ".", "detach", "(", ")", ",", "\n", "\"policy_input_b\"", ":", "structured_map_info_r", "[", "0", "]", ".", "detach", "(", ")", ",", "\n", "\"v_dist_w\"", ":", "self", ".", "v_dist_w", ".", "inner_distribution", "[", "0", "]", ".", "detach", "(", ")", ",", "\n", "\"value_pred\"", ":", "value", "[", "0", "]", "if", "value", "else", "None", ",", "\n", "\"xvel\"", ":", "xvel", ",", "\n", "\"yawrate\"", ":", "yawrate", ",", "\n", "\"stop\"", ":", "stop", ",", "\n", "\"xvel_logprob\"", ":", "xvel_logprob", ",", "\n", "\"yawrate_logprob\"", ":", "yawrate_logprob", ",", "\n", "\"stop_logprob\"", ":", "stop_logprob", ",", "\n", "\"action_logprob\"", ":", "xvel_logprob", "+", "stop_logprob", "+", "yawrate_logprob", "\n", "}", "\n", "self", ".", "actprof", ".", "tick", "(", "\"end\"", ")", "\n", "self", ".", "actprof", ".", "loop", "(", ")", "\n", "self", ".", "actprof", ".", "print_stats", "(", "1", ")", "\n", "if", "rl_rollout", ":", "\n", "                ", "return", "act", ",", "rl_data", "\n", "", "else", ":", "\n", "                ", "viz_data", "=", "self", ".", "make_viz_dict_from_stage1_internals", "(", ")", "\n", "viz_data", "[", "\"v_dist_r_inner\"", "]", "=", "v_dist_r", ".", "inner_distribution", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "viz_data", "[", "\"v_dist_r_outer\"", "]", "=", "v_dist_r", ".", "outer_prob_mass", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "viz_data", "[", "\"v_dist_w_inner\"", "]", "=", "self", ".", "v_dist_w", ".", "inner_distribution", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "viz_data", "[", "\"v_dist_w_outer\"", "]", "=", "self", ".", "v_dist_w", ".", "outer_prob_mass", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "viz_data", "[", "\"map_struct\"", "]", "=", "structured_map_info_r", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "viz_data", "[", "\"BM_W\"", "]", "=", "map_info_w", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "act", ",", "viz_data", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "\"Non-RL learning mode no longer support it - just use RL learning mode as it is more general!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.unbatch": [[437, 457], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.cuda_var", "len", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.cuda_var", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.batch_select.one", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.cuda_var", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.poses_from_states", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.batch_select.one", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.map_transformer_w_to_r"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one"], ["", "", "def", "unbatch", "(", "self", ",", "batch", ")", ":", "\n", "# Inputs", "\n", "        ", "states", "=", "self", ".", "stage2_action_generation", ".", "cuda_var", "(", "batch", "[", "\"states\"", "]", "[", "0", "]", ")", "\n", "seq_len", "=", "len", "(", "states", ")", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "[", "0", "]", "# True for every timestep that is a new instruction segment", "\n", "plan_mask", "=", "batch", "[", "\"plan_mask\"", "]", "[", "0", "]", "# True for every timestep that we do visitation prediction", "\n", "actions", "=", "self", ".", "stage2_action_generation", ".", "cuda_var", "(", "batch", "[", "\"actions\"", "]", "[", "0", "]", ")", "\n", "\n", "actions_select", "=", "self", ".", "stage2_action_generation", ".", "batch_select", ".", "one", "(", "actions", ",", "plan_mask", ",", "actions", ".", "device", ")", "\n", "\n", "# Ground truth visitation distributions (in start and global frames)", "\n", "v_dist_w_ground_truth_select", "=", "self", ".", "stage2_action_generation", ".", "cuda_var", "(", "batch", "[", "\"traj_ground_truth\"", "]", "[", "0", "]", ")", "\n", "poses", "=", "self", ".", "poses_from_states", "(", "states", ")", "\n", "poses_select", "=", "self", ".", "stage2_action_generation", ".", "batch_select", ".", "one", "(", "poses", ",", "plan_mask", ",", "actions", ".", "device", ")", "\n", "v_dist_r_ground_truth_select", ",", "poses_r", "=", "self", ".", "map_transformer_w_to_r", "(", "v_dist_w_ground_truth_select", ",", "None", ",", "poses_select", ")", "\n", "\n", "#Presenter().show_image(v_dist_w_ground_truth_select.detach().cpu()[0,0], \"v_dist_w_ground_truth_select\", waitkey=1, scale=4)", "\n", "#Presenter().show_image(v_dist_r_ground_truth_select.detach().cpu()[0,0], \"v_dist_r_ground_truth_select\", waitkey=1, scale=4)", "\n", "\n", "return", "states", ",", "actions_select", ",", "v_dist_r_ground_truth_select", ",", "poses_select", ",", "plan_mask", ",", "firstseg_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.sup_loss_on_batch": [[460, 517], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.reset", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.unbatch", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.unbatch", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.poses_from_states", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.build_map_structured_input", "learning.inputs.partial_2d_distribution.Partial2DDistribution.from_distribution_and_mask", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation", "xvel_dist.log_probs", "yawrate_dist.log_probs", "stop_dist.log_probs().sum", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.writer.add_scalar", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.writer.add_scalar", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.writer.add_scalar", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.writer.add_scalar", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.writer.add_scalar", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.writer.add_scalar", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.writer.add_scalar", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.inc_iter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction", "range", "action_loss.data.cpu().item", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.get_iter", "avg_logprob.data.cpu().item", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.get_iter", "avg_xvel_logprob.data.cpu().item", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.get_iter", "avg_yawrate_logprob.data.cpu().item", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.get_iter", "avg_stop_logprob.data.cpu().item", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.get_iter", "squared_xvel_dst.data.cpu().item", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.get_iter", "squared_yawrate_dst.data.cpu().item", "model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage2_action_generation.get_iter", "learning.inputs.partial_2d_distribution.Partial2DDistribution.from_distribution_and_mask.show", "stop_dist.log_probs", "action_loss.data.cpu", "avg_logprob.data.cpu", "avg_xvel_logprob.data.cpu", "avg_yawrate_logprob.data.cpu", "avg_stop_logprob.data.cpu", "squared_xvel_dst.data.cpu", "squared_yawrate_dst.data.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.build_map_structured_input", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.from_distribution_and_mask", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.random_perturb.MapPerturbation.show", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ",", "halfway", "=", "False", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "states", ",", "actions_gt_select", ",", "v_dist_r_ground_truth_select", ",", "poses_select", ",", "plan_mask", ",", "firstseg_mask", "=", "self", ".", "unbatch", "(", "batch", ")", "\n", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "plan_mask", ",", "firstseg_mask", ",", "start_poses", ",", "noisy_start_poses", ",", "metadata", "=", "self", ".", "stage1_visitation_prediction", ".", "unbatch", "(", "batch", ",", "halfway", "=", "halfway", ")", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "map_uncoverage_w", "=", "self", ".", "stage1_visitation_prediction", "(", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "\n", "plan", "=", "plan_mask", ",", "firstseg", "=", "firstseg_mask", ",", "\n", "noisy_start_poses", "=", "start_poses", ",", "\n", "start_poses", "=", "start_poses", ",", "\n", "select_only", "=", "True", ",", "\n", "halfway", "=", "\"observability\"", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "", "poses", "=", "self", ".", "poses_from_states", "(", "states", ")", "\n", "structured_map_info_r", "=", "self", ".", "build_map_structured_input", "(", "map_uncoverage_w", ",", "poses", ")", "\n", "map_uncoverage_r", "=", "structured_map_info_r", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "v_dist_r_gt_masked", "=", "Partial2DDistribution", ".", "from_distribution_and_mask", "(", "v_dist_r_ground_truth_select", ",", "1", "-", "map_uncoverage_r", ")", "\n", "\n", "if", "False", ":", "\n", "            ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "v_dist_r_gt_masked", ".", "show", "(", "\"v_dist_r_masked\"", ",", "scale", "=", "4", ",", "waitkey", "=", "True", ",", "idx", "=", "i", ")", "\n", "\n", "", "", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "value_pred", "=", "self", ".", "stage2_action_generation", "(", "v_dist_r_gt_masked", ",", "structured_map_info_r", ",", "eval", "=", "False", ")", "\n", "xvel_logprob", "=", "xvel_dist", ".", "log_probs", "(", "actions_gt_select", "[", ":", ",", "0", "]", ")", "\n", "yawrate_logprob", "=", "yawrate_dist", ".", "log_probs", "(", "actions_gt_select", "[", ":", ",", "2", "]", ")", "\n", "# TODO: Figure out why this doesn't already sum", "\n", "stop_logprob", "=", "stop_dist", ".", "log_probs", "(", "actions_gt_select", "[", ":", ",", "3", "]", ")", ".", "sum", "(", ")", "\n", "total_logprob", "=", "xvel_logprob", "+", "yawrate_logprob", "+", "stop_logprob", "\n", "\n", "avg_logprob", "=", "total_logprob", "/", "batch_size", "\n", "avg_xvel_logprob", "=", "xvel_logprob", "/", "batch_size", "\n", "avg_yawrate_logprob", "=", "yawrate_logprob", "/", "batch_size", "\n", "avg_stop_logprob", "=", "stop_logprob", "/", "batch_size", "\n", "\n", "squared_xvel_dst", "=", "(", "(", "xvel_dist", ".", "mean", "-", "actions_gt_select", "[", ":", ",", "0", "]", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "squared_yawrate_dst", "=", "(", "(", "yawrate_dist", ".", "mean", "-", "actions_gt_select", "[", ":", ",", "2", "]", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "#action_loss = -avg_stop_logprob + squared_xvel_dst + squared_yawrate_dst", "\n", "action_loss", "=", "-", "avg_stop_logprob", "+", "squared_xvel_dst", "+", "squared_yawrate_dst", "\n", "\n", "prefix", "=", "self", ".", "stage2_action_generation", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "self", ".", "stage2_action_generation", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "stage2_action_generation", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "stage2_action_generation", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/avg_logprob\"", ",", "avg_logprob", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "stage2_action_generation", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "stage2_action_generation", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/avg_xvel_logprob\"", ",", "avg_xvel_logprob", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "stage2_action_generation", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "stage2_action_generation", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/avg_yawrate_logprob\"", ",", "avg_yawrate_logprob", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "stage2_action_generation", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "stage2_action_generation", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/avg_stop_logprob\"", ",", "avg_stop_logprob", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "stage2_action_generation", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "stage2_action_generation", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/squared_xvel_dst\"", ",", "squared_xvel_dst", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "stage2_action_generation", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "stage2_action_generation", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/squared_yawrate_dst\"", ",", "squared_yawrate_dst", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "stage2_action_generation", ".", "get_iter", "(", ")", ")", "\n", "\n", "#self.writer.add_dict(prefix, get_current_meters(), self.get_iter())", "\n", "self", ".", "stage2_action_generation", ".", "inc_iter", "(", ")", "\n", "return", "action_loss", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.get_dataset": [[518, 520], ["model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.stage1_visitation_prediction.get_dataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "domain", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "stage1_visitation_prediction", ".", "get_dataset", "(", "data", "=", "data", ",", "envs", "=", "envs", ",", "domain", "=", "domain", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "eval", "=", "eval", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.__init__": [[48, 110], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "torch.Parameter", "learning.modules.img_to_map.fpv_to_fpv.FPVToFPVMap", "learning.modules.rss.map_lang_semantic_filter.MapLangSemanticFilter", "learning.modules.rss.map_lang_spatial_filter.MapLangSpatialFilter", "learning.modules.downsample_map.downsample_res.DownsampleResidual", "learning.modules.gs_fpv.recurrent_embedding.RecurrentEmbedding", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.blocks.DenseMlpBlock2", "model_gs_fpv_mem.ModelGSFPV.add_auxiliary", "model_gs_fpv_mem.ModelGSFPV.add_auxiliary", "learning.modules.action_loss.ActionLoss", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "model_gs_fpv_mem.ModelGSFPV.add_auxiliary", "model_gs_fpv_mem.ModelGSFPV.add_auxiliary", "model_gs_fpv_mem.ModelGSFPV.add_auxiliary", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "\n", "aux_class_features", "=", "False", ",", "aux_grounding_features", "=", "False", ",", "aux_lang", "=", "False", ",", "recurrence", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "ModelGSFPV", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"gs_fpv\"", "+", "\"_mem\"", "if", "recurrence", "else", "\"\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "\"runs/\"", "+", "run_name", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"Model\"", "]", "\n", "self", ".", "aux_weights", "=", "get_current_parameters", "(", ")", "[", "\"AuxWeights\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "self", ".", "use_aux_class_features", "=", "aux_class_features", "\n", "self", ".", "use_aux_grounding_features", "=", "aux_grounding_features", "\n", "self", ".", "use_aux_lang", "=", "aux_lang", "\n", "self", ".", "use_recurrence", "=", "recurrence", "\n", "\n", "self", ".", "img_to_features_w", "=", "FPVToFPVMap", "(", "self", ".", "params", "[", "\"img_w\"", "]", ",", "self", ".", "params", "[", "\"img_h\"", "]", ",", "\n", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ")", "\n", "\n", "self", ".", "lang_filter_gnd", "=", "MapLangSemanticFilter", "(", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ")", "\n", "\n", "self", ".", "lang_filter_goal", "=", "MapLangSpatialFilter", "(", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "self", ".", "params", "[", "\"goal_channels\"", "]", ")", "\n", "\n", "self", ".", "map_downsample", "=", "DownsampleResidual", "(", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "2", ")", "\n", "\n", "self", ".", "recurrence", "=", "RecurrentEmbedding", "(", "self", ".", "params", "[", "\"gs_fpv_feature_map_size\"", "]", ",", "self", ".", "params", "[", "\"gs_fpv_recurrence_size\"", "]", ")", "\n", "\n", "# Sentence Embedding", "\n", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ")", "\n", "\n", "in_features_size", "=", "self", ".", "params", "[", "\"gs_fpv_feature_map_size\"", "]", "+", "self", ".", "params", "[", "\"emb_size\"", "]", "\n", "if", "self", ".", "use_recurrence", ":", "\n", "            ", "in_features_size", "+=", "self", ".", "params", "[", "\"gs_fpv_recurrence_size\"", "]", "\n", "\n", "", "self", ".", "features_to_action", "=", "DenseMlpBlock2", "(", "in_features_size", ",", "self", ".", "params", "[", "\"mlp_hidden\"", "]", ",", "4", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_class\"", ",", "None", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_indices\"", ")", ")", "\n", "self", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"aux_ground\"", ",", "None", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_mentioned\"", ")", ")", "\n", "if", "self", ".", "params", "[", "\"templates\"", "]", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "1", ",", "\n", "\"sentence_embed\"", ",", "\"lm_mentioned_tplt\"", ")", ")", "\n", "self", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_side\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"num_sides\"", "]", ",", "1", ",", "\n", "\"sentence_embed\"", ",", "\"side_mentioned_tplt\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"aux_lang_lm_nl\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "\n", "", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda": [[112, 121], ["ModuleWithAuxiliaries.cuda", "model_gs_fpv_mem.ModelGSFPV.sentence_embedding.cuda", "model_gs_fpv_mem.ModelGSFPV.img_to_features_w.cuda", "model_gs_fpv_mem.ModelGSFPV.lang_filter_gnd.cuda", "model_gs_fpv_mem.ModelGSFPV.lang_filter_goal.cuda", "model_gs_fpv_mem.ModelGSFPV.action_loss.cuda", "model_gs_fpv_mem.ModelGSFPV.recurrence.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "ModuleWithAuxiliaries", ".", "cuda", "(", "self", ",", "device", ")", "\n", "self", ".", "sentence_embedding", ".", "cuda", "(", "device", ")", "\n", "self", ".", "img_to_features_w", ".", "cuda", "(", "device", ")", "\n", "self", ".", "lang_filter_gnd", ".", "cuda", "(", "device", ")", "\n", "self", ".", "lang_filter_goal", ".", "cuda", "(", "device", ")", "\n", "self", ".", "action_loss", ".", "cuda", "(", "device", ")", "\n", "self", ".", "recurrence", ".", "cuda", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_iter": [[122, 124], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.inc_iter": [[125, 127], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.init_weights": [[128, 133], ["model_gs_fpv_mem.ModelGSFPV.img_to_features_w.init_weights", "model_gs_fpv_mem.ModelGSFPV.lang_filter_gnd.init_weights", "model_gs_fpv_mem.ModelGSFPV.lang_filter_goal.init_weights", "model_gs_fpv_mem.ModelGSFPV.sentence_embedding.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "lang_filter_gnd", ".", "init_weights", "(", ")", "\n", "self", ".", "lang_filter_goal", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.reset": [[134, 142], ["super().reset", "model_gs_fpv_mem.ModelGSFPV.sentence_embedding.reset", "model_gs_fpv_mem.ModelGSFPV.img_to_features_w.reset", "model_gs_fpv_mem.ModelGSFPV.recurrence.reset", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# TODO: This is error prone. Create a class StatefulModule, iterate submodules and reset all stateful modules", "\n", "        ", "super", "(", "ModelGSFPV", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "recurrence", ".", "reset", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "print", "(", "\"GS_FPV_MEM_RESET\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.setEnvContext": [[143, 146], ["print", "str"], "methods", ["None"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.start_segment_rollout": [[147, 149], ["model_gs_fpv_mem.ModelGSFPV.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_segment_rollout", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_action": [[150, 195], ["model_gs_fpv_mem.ModelGSFPV.eval", "learning.inputs.vision.standardize_image", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "learning.inputs.common.cuda_var", "model_gs_fpv_mem.ModelGSFPV.", "model_gs_fpv_mem.ModelGSFPV.squeeze().data.cpu().numpy", "print", "learning.inputs.sequence.none_padded_seq_to_tensor", "learning.inputs.sequence.none_padded_seq_to_tensor", "img_in_t.cuda.cuda.cuda", "state.cuda.cuda.cuda", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model_gs_fpv_mem.ModelGSFPV.squeeze().data.cpu", "model_gs_fpv_mem.ModelGSFPV.squeeze"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.vision.standardize_image", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.none_padded_seq_to_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "get_action", "(", "self", ",", "state", ",", "instruction", ")", ":", "\n", "        ", "\"\"\"\n        Given a DroneState (from PomdpInterface) and instruction, produce a numpy 4D action (x, y, theta, pstop)\n        :param state: DroneState object with the raw image from the simulator\n        :param instruction: Tokenized instruction given the corpus\n        #TODO: Absorb corpus within model\n        :return:\n        \"\"\"", "\n", "# TODO: Simplify this", "\n", "self", ".", "eval", "(", ")", "\n", "images_np_pure", "=", "state", ".", "image", "\n", "state_np", "=", "state", ".", "state", "\n", "\n", "#print(\"Act: \" + debug_untokenize_instruction(instruction))", "\n", "\n", "images_np", "=", "standardize_image", "(", "images_np_pure", ")", "\n", "image_fpv", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "images_np", "]", ")", ")", "\n", "state", "=", "Variable", "(", "none_padded_seq_to_tensor", "(", "[", "state_np", "]", ")", ")", "\n", "self", ".", "prev_instruction", "=", "instruction", "\n", "\n", "img_in_t", "=", "image_fpv", "\n", "img_in_t", ".", "volatile", "=", "True", "\n", "\n", "instr_len", "=", "[", "len", "(", "instruction", ")", "]", "if", "instruction", "is", "not", "None", "else", "None", "\n", "instruction", "=", "torch", ".", "LongTensor", "(", "instruction", ")", ".", "unsqueeze", "(", "0", ")", "\n", "instruction", "=", "cuda_var", "(", "instruction", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n", "state", ".", "volatile", "=", "True", "\n", "\n", "if", "self", ".", "is_cuda", ":", "\n", "            ", "img_in_t", "=", "img_in_t", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "state", "=", "state", ".", "cuda", "(", "self", ".", "cuda_device", ")", "\n", "\n", "", "self", ".", "seq_step", "+=", "1", "\n", "\n", "action", "=", "self", "(", "img_in_t", ",", "state", ",", "instruction", ",", "instr_len", ")", "\n", "\n", "output_action", "=", "action", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "\"action: \"", ",", "output_action", ")", "\n", "\n", "stop_prob", "=", "output_action", "[", "3", "]", "\n", "output_stop", "=", "1", "if", "stop_prob", ">", "self", ".", "params", "[", "\"stop_threshold\"", "]", "else", "0", "\n", "output_action", "[", "3", "]", "=", "output_stop", "\n", "\n", "return", "output_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.deterministic_action": [[196, 202], ["action_mean.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "learning.inputs.common.empty_float_tensor"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor"], ["", "def", "deterministic_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "batch_size", "=", "action_mean", ".", "size", "(", "0", ")", "\n", "action", "=", "Variable", "(", "empty_float_tensor", "(", "(", "batch_size", ",", "4", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "action", "[", ":", ",", "0", ":", "3", "]", "=", "action_mean", "[", ":", ",", "0", ":", "3", "]", "\n", "action", "[", ":", ",", "3", "]", "=", "stop_prob", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.sample_action": [[203, 207], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ",", "action_mean", ",", "action_std", ",", "stop_prob", ")", ":", "\n", "        ", "action", "=", "torch", ".", "normal", "(", "action_mean", ",", "action_std", ")", "\n", "stop", "=", "torch", ".", "bernoulli", "(", "stop_prob", ")", "\n", "return", "action", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.start_sequence": [[209, 214], ["model_gs_fpv_mem.ModelGSFPV.reset", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "print", "(", "\"RESETTED!\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cam_poses_from_states": [[216, 221], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.forward": [[222, 282], ["model_gs_fpv_mem.ModelGSFPV.cam_poses_from_states", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "len", "model_gs_fpv_mem.ModelGSFPV.img_to_features_w", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.lang_filter_gnd.precompute_conv_weights", "model_gs_fpv_mem.ModelGSFPV.lang_filter_goal.precompute_conv_weights", "model_gs_fpv_mem.ModelGSFPV.lang_filter_gnd", "model_gs_fpv_mem.ModelGSFPV.lang_filter_goal", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_gs_fpv_mem.ModelGSFPV.features_to_action", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model_gs_fpv_mem.ModelGSFPV.deterministic_action", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.sentence_embedding", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "model_gs_fpv_mem.ModelGSFPV.sentence_embedding.get", "torch.cat.view.view", "model_gs_fpv_mem.ModelGSFPV.recurrence", "catlist.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights", "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.deterministic_action", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param has_obs: list of booleans of length B indicating whether the given element in the sequence has an observation\n        :param yield_semantic_maps: If true, will not compute actions (full model), but return the semantic maps that\n            were built along the way in response to the images. This is ugly, but allows code reuse\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "#print(\"Trn: \" + debug_untokenize_instruction(instructions[0].data[:instr_lengths[0]]))", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", ",", "instr_lengths", ")", "\n", "self", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "seq_size", "=", "len", "(", "images", ")", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "fpv_features", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ",", "show", "=", "\"\"", ")", "\n", "\n", "self", ".", "keep_inputs", "(", "\"fpv_features\"", ",", "fpv_features", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "\n", "self", ".", "lang_filter_gnd", ".", "precompute_conv_weights", "(", "sent_embeddings", ")", "\n", "self", ".", "lang_filter_goal", ".", "precompute_conv_weights", "(", "sent_embeddings", ")", "\n", "\n", "gnd_features", "=", "self", ".", "lang_filter_gnd", "(", "fpv_features", ")", "\n", "goal_features", "=", "self", ".", "lang_filter_goal", "(", "gnd_features", ")", "\n", "\n", "self", ".", "keep_inputs", "(", "\"fpv_features_g\"", ",", "gnd_features", ")", "\n", "visual_features", "=", "torch", ".", "cat", "(", "[", "gnd_features", ",", "goal_features", "]", ",", "dim", "=", "1", ")", "\n", "\n", "lstm_in_features", "=", "visual_features", ".", "view", "(", "[", "seq_size", ",", "1", ",", "-", "1", "]", ")", "\n", "\n", "catlist", "=", "[", "lstm_in_features", ".", "view", "(", "[", "seq_size", ",", "-", "1", "]", ")", ",", "sent_embeddings", "]", "\n", "\n", "if", "self", ".", "use_recurrence", ":", "\n", "            ", "memory_features", "=", "self", ".", "recurrence", "(", "lstm_in_features", ")", "\n", "catlist", ".", "append", "(", "memory_features", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "", "action_features", "=", "torch", ".", "cat", "(", "catlist", ",", "dim", "=", "1", ")", "\n", "\n", "# Output the final action given the processed map", "\n", "action_pred", "=", "self", ".", "features_to_action", "(", "action_features", ")", "\n", "action_pred", "[", ":", ",", "3", "]", "=", "torch", ".", "sigmoid", "(", "action_pred", "[", ":", ",", "3", "]", ")", "\n", "out_action", "=", "self", ".", "deterministic_action", "(", "action_pred", "[", ":", ",", "0", ":", "3", "]", ",", "None", ",", "action_pred", "[", ":", ",", "3", "]", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_to_action\"", ")", "\n", "\n", "return", "out_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.maybe_cuda": [[283, 288], ["tensor.cuda"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "self", ".", "is_cuda", ":", "\n", "            ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.cuda_var": [[289, 291], ["learning.inputs.common.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "cuda_var", "(", "tensor", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.sup_loss_on_batch": [[293, 415], ["model_gs_fpv_mem.ModelGSFPV.prof.tick", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model_gs_fpv_mem.ModelGSFPV.maybe_cuda", "model_gs_fpv_mem.ModelGSFPV.maybe_cuda", "model_gs_fpv_mem.ModelGSFPV.maybe_cuda", "model_gs_fpv_mem.ModelGSFPV.maybe_cuda", "model_gs_fpv_mem.ModelGSFPV.maybe_cuda", "model_gs_fpv_mem.ModelGSFPV.size", "model_gs_fpv_mem.ModelGSFPV.size", "range", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.calculate_aux_loss", "model_gs_fpv_mem.ModelGSFPV.combine_aux_losses", "model_gs_fpv_mem.ModelGSFPV.writer.add_dict", "model_gs_fpv_mem.ModelGSFPV.writer.add_dict", "model_gs_fpv_mem.ModelGSFPV.writer.add_scalar", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.inc_iter", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.prof.loop", "model_gs_fpv_mem.ModelGSFPV.prof.print_stats", "learning.inputs.common.empty_float_tensor", "print", "model_gs_fpv_mem.ModelGSFPV.reset", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "learning.inputs.sequence.len_until_nones", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.", "model_gs_fpv_mem.ModelGSFPV.action_loss", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "model_gs_fpv_mem.ModelGSFPV.action_loss.batch_reduce_loss", "model_gs_fpv_mem.ModelGSFPV.action_loss.reduce_loss", "model_gs_fpv_mem.ModelGSFPV.prof.tick", "learning.meters_and_metrics.meter_server.get_current_meters", "model_gs_fpv_mem.ModelGSFPV.get_iter", "model_gs_fpv_mem.ModelGSFPV.get_iter", "model_gs_fpv_mem.ModelGSFPV.get_iter", "parameters.parameter_server.get_current_parameters", "model_gs_fpv_mem.ModelGSFPV.cuda_var", "model_gs_fpv_mem.ModelGSFPV.cuda_var", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "model_gs_fpv_mem.ModelGSFPV.cuda_var", "model_gs_fpv_mem.ModelGSFPV.keep_inputs", "action_loss_avg.data.cpu", "model_gs_fpv_mem.ModelGSFPV.cuda_var", "model_gs_fpv_mem.ModelGSFPV.cuda_var", "model_gs_fpv_mem.ModelGSFPV.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.sequence.len_until_nones", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.batch_reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.action_loss.ActionLoss.reduce_loss", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "action_loss_total", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "return", "action_loss_total", "\n", "\n", "", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", ")", "\n", "\n", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", ")", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", ")", "\n", "actions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"actions\"", "]", ")", "\n", "\n", "# Auxiliary labels", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "\n", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "\n", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"Templates\"", "]", "\n", "if", "templates", ":", "\n", "            ", "lm_mentioned_tplt", "=", "batch", "[", "\"lm_mentioned_tplt\"", "]", "\n", "side_mentioned_tplt", "=", "batch", "[", "\"side_mentioned_tplt\"", "]", "\n", "\n", "# stops = self.maybe_cuda(batch[\"stops\"])", "\n", "", "masks", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"masks\"", "]", ")", "\n", "metadata", "=", "batch", "[", "\"md\"", "]", "\n", "\n", "seq_len", "=", "images", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "count", "=", "0", "\n", "correct_goal_count", "=", "0", "\n", "goal_count", "=", "0", "\n", "\n", "# Loop thru batch", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "seg_idx", "=", "-", "1", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "b_seq_len", "=", "len_until_nones", "(", "metadata", "[", "b", "]", ")", "\n", "\n", "# TODO: Generalize this", "\n", "# Slice the data according to the sequence length", "\n", "b_metadata", "=", "metadata", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_images", "=", "images", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instructions", "=", "instructions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_instr_len", "=", "instr_lengths", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_states", "=", "states", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_actions", "=", "actions", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_pos_fpv", "=", "lm_pos_fpv", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_indices", "=", "lm_indices", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_lm_mentioned", "=", "lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "\n", "b_lm_pos_fpv", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "RESNET_FACTOR", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_pos_fpv", "]", "\n", "b_lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_indices", "]", "\n", "b_lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "b_lm_mentioned", "]", "\n", "\n", "# TODO: Figure out how to keep these properly. Perhaps as a whole batch is best", "\n", "# TODO: Introduce a key-value store (encapsulate instead of inherit)", "\n", "self", ".", "keep_inputs", "(", "\"lm_pos_fpv\"", ",", "b_lm_pos_fpv", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "b_lm_indices", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "b_lm_mentioned", ")", "\n", "\n", "# TODO: Abstract all of these if-elses in a modular way once we know which ones are necessary", "\n", "if", "templates", ":", "\n", "                ", "b_lm_mentioned_tplt", "=", "lm_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "side_mentioned_tplt", "[", "b", "]", "[", ":", "b_seq_len", "]", "\n", "b_side_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_side_mentioned_tplt", ")", "\n", "b_lm_mentioned_tplt", "=", "self", ".", "cuda_var", "(", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "keep_inputs", "(", "\"lm_mentioned_tplt\"", ",", "b_lm_mentioned_tplt", ")", "\n", "self", ".", "keep_inputs", "(", "\"side_mentioned_tplt\"", ",", "b_side_mentioned_tplt", ")", "\n", "", "else", ":", "\n", "                ", "b_lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "lang_lm_mentioned", "[", "b", "]", "[", ":", "b_seq_len", "]", ")", "\n", "self", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "b_lang_lm_mentioned", ")", "\n", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"inputs\"", ")", "\n", "\n", "actions", "=", "self", "(", "b_images", ",", "b_states", ",", "b_instructions", ",", "b_instr_len", ")", "\n", "\n", "action_losses", ",", "_", "=", "self", ".", "action_loss", "(", "b_actions", ",", "actions", ",", "batchreduce", "=", "False", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "action_losses", "=", "self", ".", "action_loss", ".", "batch_reduce_loss", "(", "action_losses", ")", "\n", "action_loss", "=", "self", ".", "action_loss", ".", "reduce_loss", "(", "action_losses", ")", "\n", "action_loss_total", "=", "action_loss", "\n", "count", "+=", "b_seq_len", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"loss\"", ")", "\n", "\n", "", "action_loss_avg", "=", "action_loss_total", "/", "(", "count", "+", "1e-9", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "# Doing this in the end (outside of se", "\n", "aux_losses", "=", "self", ".", "calculate_aux_loss", "(", "reduce_average", "=", "True", ")", "\n", "aux_loss", "=", "self", ".", "combine_aux_losses", "(", "aux_losses", ",", "self", ".", "aux_weights", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "aux_losses", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss_avg", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"auxiliaries\"", ")", "\n", "\n", "total_loss", "=", "action_loss_avg", "+", "aux_loss", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gs_fpv_mem.ModelGSFPV.get_dataset": [[416, 428], ["data_sources.append", "data_sources.append", "learning.datasets.segment_dataset_simple.SegmentDataset", "data_sources.append", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "#if self.fpv:", "\n", "        ", "data_sources", "=", "[", "]", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANDMARKS_MENTIONED", ")", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"Templates\"", "]", "\n", "if", "templates", ":", "\n", "            ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.__init__": [[33, 72], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "torch.Parameter", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_to_action.cropped_map_to_action_triplet.CroppedMapToActionTriplet", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.action_loss.ActionLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "parameters.parameter_server.get_current_parameters", "parameters.parameter_server.get_current_parameters", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "model_instance_name", "=", "\"only\"", ")", ":", "\n", "        ", "super", "(", "PVN_Stage2_Bidomain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage2\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "instance_name", "=", "model_instance_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.instance_name}\"", ")", "\n", "\n", "self", ".", "params_s1", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage2\"", "]", "\n", "\n", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "\n", "# Common", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "self", ".", "map_transform_w_to_r", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params_s1", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params_s1", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params_s1", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params_s1", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_to_action", "=", "CroppedMapToActionTriplet", "(", "\n", "map_channels", "=", "self", ".", "params", "[", "\"map_to_act_channels\"", "]", ",", "\n", "map_size", "=", "self", ".", "params_s1", "[", "\"local_map_size\"", "]", ",", "\n", "manual", "=", "False", ",", "\n", "path_only", "=", "self", ".", "params", "[", "\"action_in_path_only\"", "]", ",", "\n", "recurrence", "=", "self", ".", "params", "[", "\"action_recurrence\"", "]", ")", "\n", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "\n", "self", ".", "action_loss", "=", "ActionLoss", "(", ")", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "get_act_start_pose", "=", "None", "\n", "self", ".", "gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.steal_cross_domain_modules": [[73, 75], ["None"], "methods", ["None"], ["", "def", "steal_cross_domain_modules", "(", "self", ",", "other_self", ")", ":", "\n", "        ", "self", ".", "map_to_action", "=", "other_self", ".", "map_to_action", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.both_domain_parameters": [[76, 83], ["model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "both_domain_parameters", "(", "self", ",", "other_self", ")", ":", "\n", "# This function iterates and yields parameters from this module and the other module, but does not yield", "\n", "# shared parameters twice.", "\n", "# Since all the parameters are shared, it's fine to just iterate over this module's parameters", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.make_picklable": [[84, 86], ["utils.dummy_summary_writer.DummySummaryWriter"], "methods", ["None"], ["", "def", "make_picklable", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", "=", "DummySummaryWriter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.get_iter": [[87, 89], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.inc_iter": [[90, 92], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.init_weights": [[93, 95], ["model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.map_to_action.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "map_to_action", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.reset": [[96, 98], ["model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.tensor_store.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensor_store", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.setEnvContext": [[99, 102], ["print", "str"], "methods", ["None"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.start_segment_rollout": [[103, 113], ["learning.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.maybe_cuda", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.start_sequence"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.aux_data_providers.get_top_down_ground_truth_static_global", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence"], ["", "def", "start_segment_rollout", "(", "self", ")", ":", "\n", "        ", "import", "rollout", ".", "run_metadata", "as", "md", "\n", "m_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", "\n", "w_size", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "\n", "self", ".", "gt_labels", "=", "get_top_down_ground_truth_static_global", "(", "\n", "md", ".", "ENV_ID", ",", "md", ".", "START_IDX", ",", "md", ".", "END_IDX", ",", "m_size", ",", "m_size", ",", "w_size", ",", "w_size", ")", "\n", "self", ".", "seg_idx", "=", "md", ".", "SEG_IDX", "\n", "self", ".", "gt_labels", "=", "self", ".", "maybe_cuda", "(", "self", ".", "gt_labels", ")", "\n", "if", "self", ".", "params", "[", "\"clear_history\"", "]", ":", "\n", "            ", "self", ".", "start_sequence", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.cam_poses_from_states": [[114, 119], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.forward": [[120, 144], ["model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.map_to_action", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.prof.tick", "torch.softplus", "torch.softplus", "torch.softplus", "learning.training.fixed_distributions.FixedNormal", "torch.softplus", "torch.softplus", "torch.softplus", "learning.training.fixed_distributions.FixedNormal", "learning.training.fixed_distributions.FixedBernoulli", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.params.get"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get"], ["", "def", "forward", "(", "self", ",", "visit_dist_r", ",", "structured_map_info_r", ",", "firstseg", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "structured_map_info_r", "=", "None", "# not used in CoRL 2018 model", "\n", "\n", "action_scores", "=", "self", ".", "map_to_action", "(", "visit_dist_r", ",", "None", ",", "fistseg_mask", "=", "firstseg", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_to_action\"", ")", "\n", "xvel_mean", "=", "action_scores", "[", ":", ",", "0", "]", "\n", "xvel_std", "=", "F", ".", "softplus", "(", "action_scores", "[", ":", ",", "2", "]", ")", "\n", "xvel_dist", "=", "FixedNormal", "(", "xvel_mean", ",", "xvel_std", ")", "\n", "\n", "yawrate_mean", "=", "action_scores", "[", ":", ",", "3", "]", "\n", "if", "eval", "and", "self", ".", "params", ".", "get", "(", "\"test_time_amplifier\"", ")", ":", "\n", "            ", "yawrate_mean", "=", "yawrate_mean", "*", "self", ".", "params", "[", "\"test_time_amplifier\"", "]", "\n", "\n", "", "yawrate_std", "=", "F", ".", "softplus", "(", "action_scores", "[", ":", ",", "5", "]", ")", "\n", "yawrate_dist", "=", "FixedNormal", "(", "yawrate_mean", ",", "yawrate_std", ")", "\n", "\n", "# Skew it towards not stopping in the beginning", "\n", "stop_logits", "=", "action_scores", "[", ":", ",", "6", "]", "\n", "stop_dist", "=", "FixedBernoulli", "(", "logits", "=", "stop_logits", ")", "\n", "\n", "# TODO: This PVNv1 CoRL 2018 head is incompatible with Actor-critic  training for now", "\n", "value", "=", "None", "\n", "return", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.sample_action": [[145, 151], ["xvel_dist.sample", "yawrate_dist.sample", "stop_dist.sample"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample"], ["", "def", "sample_action", "(", "self", ",", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", ":", "\n", "# Sample action from the predicted distributions", "\n", "        ", "xvel_sample", "=", "xvel_dist", ".", "sample", "(", ")", "\n", "yawrate_sample", "=", "yawrate_dist", ".", "sample", "(", ")", "\n", "stop", "=", "stop_dist", ".", "sample", "(", ")", "\n", "return", "xvel_sample", ",", "yawrate_sample", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.mode_action": [[152, 157], ["xvel_dist.mode", "yawrate_dist.mode"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.mode", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.mode"], ["", "def", "mode_action", "(", "self", ",", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ")", ":", "\n", "        ", "xvel_sample", "=", "xvel_dist", ".", "mode", "(", ")", "\n", "yawrate_sample", "=", "yawrate_dist", ".", "mode", "(", ")", "\n", "stop", "=", "stop_dist", ".", "mean", "\n", "return", "xvel_sample", ",", "yawrate_sample", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.action_logprob": [[158, 163], ["xvel_dist.log_prob", "yawrate_dist.log_prob", "stop_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.log_prob"], ["", "def", "action_logprob", "(", "self", ",", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "xvel", ",", "yawrate", ",", "stop", ")", ":", "\n", "        ", "xvel_logprob", "=", "xvel_dist", ".", "log_prob", "(", "xvel", ")", "\n", "yawrate_logprob", "=", "yawrate_dist", ".", "log_prob", "(", "yawrate", ")", "\n", "stop_logprob", "=", "stop_dist", ".", "log_prob", "(", "stop", ")", "\n", "return", "xvel_logprob", ",", "yawrate_logprob", ",", "stop_logprob", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.cuda_var": [[164, 166], ["tensor.to", "next", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.unbatch": [[167, 189], ["model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.cuda_var", "len", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.cuda_var", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.batch_select.one", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.cuda_var", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.cam_poses_from_states", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.batch_select.one", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.map_transform_w_to_r", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.tensor_store.keep_inputs", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.tensor_store.keep_inputs", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.detach().cpu", "visualization.Presenter", "v_dist_r_ground_truth_select.detach().cpu", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.detach", "v_dist_r_ground_truth_select.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "unbatch", "(", "self", ",", "batch", ")", ":", "\n", "# Inputs", "\n", "        ", "states", "=", "self", ".", "cuda_var", "(", "batch", "[", "\"states\"", "]", "[", "0", "]", ")", "\n", "seq_len", "=", "len", "(", "states", ")", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "[", "0", "]", "# True for every timestep that is a new instruction segment", "\n", "plan_mask", "=", "batch", "[", "\"plan_mask\"", "]", "[", "0", "]", "# True for every timestep that we do visitation prediction", "\n", "actions", "=", "self", ".", "cuda_var", "(", "batch", "[", "\"actions\"", "]", "[", "0", "]", ")", "\n", "\n", "actions_select", "=", "self", ".", "batch_select", ".", "one", "(", "actions", ",", "plan_mask", ",", "actions", ".", "device", ")", "\n", "\n", "# Ground truth visitation distributions (in start and global frames)", "\n", "v_dist_w_ground_truth_select", "=", "self", ".", "cuda_var", "(", "batch", "[", "\"traj_ground_truth\"", "]", "[", "0", "]", ")", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "cam_poses_select", "=", "self", ".", "batch_select", ".", "one", "(", "cam_poses", ",", "plan_mask", ",", "actions", ".", "device", ")", "\n", "v_dist_r_ground_truth_select", ",", "poses_r", "=", "self", ".", "map_transform_w_to_r", "(", "v_dist_w_ground_truth_select", ",", "None", ",", "cam_poses_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"v_dist_w_ground_truth_select\"", ",", "v_dist_w_ground_truth_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"v_dist_r_ground_truth_select\"", ",", "v_dist_r_ground_truth_select", ")", "\n", "\n", "Presenter", "(", ")", ".", "show_image", "(", "v_dist_w_ground_truth_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "0", ",", "0", "]", ",", "\"v_dist_w_ground_truth_select\"", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "v_dist_r_ground_truth_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "0", ",", "0", "]", ",", "\"v_dist_r_ground_truth_select\"", ",", "waitkey", "=", "1", ",", "scale", "=", "4", ")", "\n", "\n", "return", "states", ",", "actions_select", ",", "v_dist_r_ground_truth_select", ",", "cam_poses_select", ",", "plan_mask", ",", "firstseg_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.sup_loss_on_batch": [[193, 233], ["ValueError", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.prof.tick", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.cuda_var", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.reset", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.unbatch", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.prof.tick", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.", "stop_dist.log_probs().sum", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.prof.tick", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.writer.add_scalar", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.writer.add_scalar", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.writer.add_scalar", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.writer.add_scalar", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.writer.add_dict", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.inc_iter", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.prof.tick", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.prof.loop", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.prof.print_stats", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "action_loss.data.cpu().item", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.get_iter", "squared_xvel_dst.data.cpu().item", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.get_iter", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.get_iter", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.get_iter", "learning.meters_and_metrics.meter_server.get_current_meters", "model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.get_iter", "stop_dist.log_probs", "action_loss.data.cpu", "squared_xvel_dst.data.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ",", "halfway", "=", "False", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"This code still works but is deprecated. Train Stage2 using PVNWrapper instead (it can compute observability of maps etc)\"", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "action_loss_total", "=", "self", ".", "cuda_var", "(", "torch", ".", "zeros", "(", "[", "1", "]", ")", ")", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "return", "action_loss_total", "\n", "\n", "", "self", ".", "reset", "(", ")", "\n", "states", ",", "actions_gt_select", ",", "v_dist_r_ground_truth_select", ",", "cam_poses_select", ",", "plan_mask", ",", "firstseg_mask", "=", "self", ".", "unbatch", "(", "batch", ")", "\n", "count", "=", "0", "\n", "self", ".", "prof", ".", "tick", "(", "\"inputs\"", ")", "\n", "\n", "batch_size", "=", "actions_gt_select", ".", "shape", "[", "0", "]", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "xvel_dist", ",", "yawrate_dist", ",", "stop_dist", ",", "_", "=", "self", "(", "v_dist_r_ground_truth_select", ",", "firstseg_mask", ")", "\n", "\n", "stop_logprob", "=", "stop_dist", ".", "log_probs", "(", "actions_gt_select", "[", ":", ",", "3", "]", ")", ".", "sum", "(", ")", "\n", "avg_stop_logprob", "=", "stop_logprob", "/", "batch_size", "\n", "squared_xvel_dst", "=", "(", "(", "xvel_dist", ".", "mean", "-", "actions_gt_select", "[", ":", ",", "0", "]", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "squared_yawrate_dst", "=", "(", "(", "yawrate_dist", ".", "mean", "-", "actions_gt_select", "[", ":", ",", "2", "]", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "action_loss", "=", "-", "stop_logprob", "+", "squared_xvel_dst", "+", "squared_yawrate_dst", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"loss\"", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/action_loss\"", ",", "action_loss", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/x_sqrdst\"", ",", "squared_xvel_dst", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/yaw_sqrdst\"", ",", "(", "squared_yawrate_dst", "/", "batch_size", ")", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/stop_logprob\"", ",", "(", "avg_stop_logprob", "/", "batch_size", ")", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "action_loss", ",", "self", ".", "tensor_store", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_stage2_bidomain.PVN_Stage2_Bidomain.get_dataset": [[234, 239], ["data_sources.append", "learning.datasets.segment_dataset_simple.SegmentDataset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "domain", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "        ", "data_sources", "=", "[", "]", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "domain", "=", "domain", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.__init__": [[20, 57], ["learning.models.wasserstein_critic_base.WassersteinCriticBase.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "parameters.parameter_server.get_current_parameters", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ")", ":", "\n", "\n", "        ", "super", "(", "ModelGsmnCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"gsmn_critic\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"runs/{run_name}/critic\"", ")", "\n", "\n", "self", ".", "params", "=", "get_current_parameters", "(", ")", "[", "\"ModelCritic\"", "]", "\n", "nc", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "\n", "ndf", "=", "self", ".", "params", "[", "\"critic_channels\"", "]", "\n", "self", ".", "grad_penalty_weight", "=", "self", ".", "params", "[", "\"grad_penalty_weight\"", "]", "\n", "self", ".", "clip_value", "=", "self", ".", "params", "[", "\"clip_value\"", "]", "\n", "\n", "# if True, remove batch normalization", "\n", "self", ".", "improved", "=", "True", "\n", "# TODO: try more sophisticated networks.", "\n", "# Indeed network cannot be too strong because of Wasserstein GAN property", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 18 x 32", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "nc", ",", "out_channels", "=", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 9 x 16", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", ",", "out_channels", "=", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 4 x 8", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", "*", "2", ",", "out_channels", "=", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 2 x 4", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "ndf", "*", "2", ",", "out_channels", "=", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 1 x 2", "\n", ")", "\n", "\n", "self", ".", "regressor", "=", "nn", ".", "Linear", "(", "(", "ndf", "*", "4", ")", "*", "2", ",", "1", ")", "\n", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.init_weights": [[58, 60], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.forward": [[61, 66], ["model_gsmn_critic.ModelGsmnCritic.main", "features.view.view.view", "model_gsmn_critic.ModelGsmnCritic.regressor", "model_gsmn_critic.ModelGsmnCritic.view().squeeze", "features.view.view.size", "model_gsmn_critic.ModelGsmnCritic.view"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.main"], ["", "def", "forward", "(", "self", ",", "fpv_features", ")", ":", "\n", "        ", "features", "=", "self", ".", "main", "(", "fpv_features", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "regressor", "(", "features", ")", "\n", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.cuda_var": [[67, 69], ["learning.inputs.common.cuda_var"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "cuda_var", "(", "tensor", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_gsmn_critic.ModelGsmnCritic.calc_domain_loss": [[71, 109], ["learning.modules.key_tensor_store.KeyTensorStore", "real_activation_store.get_inputs_batch", "sim_activation_store.get_inputs_batch", "model_gsmn_critic.ModelGsmnCritic.", "model_gsmn_critic.ModelGsmnCritic.", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "model_gsmn_critic.ModelGsmnCritic.writer.add_scalar", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "model_gsmn_critic.ModelGsmnCritic.writer.add_scalar", "model_gsmn_critic.ModelGsmnCritic.inc_iter", "model_gsmn_critic.ModelGsmnCritic.clip_weights", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_wass.item", "model_gsmn_critic.ModelGsmnCritic.get_iter", "model_gsmn_critic.ModelGsmnCritic.calc_gradient_penalty", "learning.modules.key_tensor_store.KeyTensorStore.keep_input", "loss_wass.item", "model_gsmn_critic.ModelGsmnCritic.get_iter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.clip_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.models.wasserstein_critic_base.WassersteinCriticBase.calc_gradient_penalty", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_input", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter"], ["", "def", "calc_domain_loss", "(", "self", ",", "real_activation_store", ",", "sim_activation_store", ")", ":", "\n", "\n", "        ", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "\n", "features_real", "=", "real_activation_store", ".", "get_inputs_batch", "(", "\"fpv_features\"", ",", "cat_not_stack", "=", "True", ")", "\n", "features_sim", "=", "sim_activation_store", ".", "get_inputs_batch", "(", "\"fpv_features\"", ",", "cat_not_stack", "=", "True", ")", "\n", "\n", "# Real and simulated features might have different trajectory lengths. This could give away the source domain.", "\n", "# To deal with this, randomly sample a subset of the longest trajectory.", "\n", "\n", "# Use weight clipping instead of gradient penalty", "\n", "if", "self", ".", "grad_penalty_weight", "<=", "0", ":", "\n", "            ", "self", ".", "clip_weights", "(", ")", "\n", "\n", "# TODO: Handle different length sequences - choose number of feature maps to randomly sample", "\n", "", "pred_real", "=", "self", "(", "features_real", ")", "\n", "pred_sim", "=", "self", "(", "features_sim", ")", "\n", "\n", "# cf Wasserstein GAN paper. The critic tries to maximize this difference.", "\n", "loss_wass", "=", "torch", ".", "mean", "(", "pred_real", ")", "-", "torch", ".", "mean", "(", "pred_sim", ")", "\n", "\n", "tensor_store", ".", "keep_input", "(", "\"wass_loss\"", ",", "loss_wass", ")", "\n", "\n", "prefix", "=", "\"gsmn_critic\"", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{prefix}/wass_loss\"", ",", "loss_wass", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "total_loss", "=", "loss_wass", "\n", "if", "self", ".", "grad_penalty_weight", ">", "0", ":", "\n", "            ", "gradient_loss", "=", "self", ".", "calc_gradient_penalty", "(", "features_real", ",", "features_sim", ")", "\n", "tensor_store", ".", "keep_input", "(", "\"gradient_loss\"", ",", "gradient_loss", ")", "\n", "total_loss", "+=", "self", ".", "grad_penalty_weight", "*", "gradient_loss", "\n", "\n", "", "tensor_store", ".", "keep_input", "(", "\"total_loss\"", ",", "total_loss", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f\"{prefix}/wass_loss_with_penalty\"", ",", "loss_wass", ".", "item", "(", ")", ",", "self", ".", "get_iter", "(", ")", ")", "\n", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "return", "total_loss", ",", "tensor_store", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.__init__": [[58, 228], ["torch.Module.__init__", "utils.logging_summary_writer.LoggingSummaryWriter", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.params.get", "utils.simple_profiler.SimpleProfiler", "torch.Parameter", "torch.Parameter", "learning.modules.key_tensor_store.KeyTensorStore", "learning.modules.auxiliary_losses.AuxiliaryLosses", "print", "learning.modules.img_to_map.fpv_to_global_map.FPVToGlobalMap", "learning.modules.map_to_map.leaky_integrator_w.LeakyIntegratorGlobalMap", "learning.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage", "learning.modules.map_to_map.lang_filter_map_to_map.LangFilterMapProcessor", "learning.modules.map_to_map.ratio_path_predictor.RatioPathPredictor", "print", "print", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_transformer.MapTransformer", "learning.modules.map_to_map.map_batch_select.MapBatchSelect", "learning.modules.map_to_map.map_batch_fill_missing.MapBatchFillMissing", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.visitation_softmax.VisitationSoftmax", "learning.modules.goal_pred_criterion.GoalPredictionGoodCriterion", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "learning.meters_and_metrics.moving_average.MovingAverageMeter", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.print_auxiliary_info", "parameters.parameter_server.get_current_parameters", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.root_params.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.add_auxiliary", "print", "utils.dict_tools.dict_merge", "str", "str", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary_2d.ClassAuxiliary2D", "learning.modules.auxiliaries.class_auxiliary.ClassAuxiliary", "learning.modules.auxiliaries.feature_reg_auxiliary.FeatureRegularizationAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "learning.modules.auxiliaries.path_auxiliary.PathAuxiliary2D", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.print_auxiliary_info", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.add_auxiliary", "home.repos.pwc.inspect_result.clic-lab_drif.utils.dict_tools.dict_merge", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "domain", "=", "\"sim\"", ")", ":", "\n", "\n", "        ", "super", "(", "PVN_Stage1_Bidomain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "\"pvn_stage1\"", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}/{self.domain}\"", ")", "\n", "#self.writer = DummySummaryWriter()", "\n", "\n", "self", ".", "root_params", "=", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "\n", "self", ".", "params", "=", "self", ".", "root_params", "[", "\"Stage1\"", "]", "\n", "self", ".", "use_aux", "=", "self", ".", "root_params", "[", "\"UseAux\"", "]", "\n", "self", ".", "aux_weights", "=", "self", ".", "root_params", "[", "\"AuxWeights\"", "]", "\n", "\n", "if", "self", ".", "params", ".", "get", "(", "\"weight_override\"", ")", ":", "\n", "            ", "aux_weights_override_name", "=", "\"AuxWeightsRealOverride\"", "if", "self", ".", "domain", "==", "\"real\"", "else", "\"AuxWeightsSimOverride\"", "\n", "aux_weights_override", "=", "self", ".", "root_params", ".", "get", "(", "aux_weights_override_name", ")", "\n", "if", "aux_weights_override", ":", "\n", "                ", "print", "(", "f\"Overriding auxiliary weights for domain: {self.domain}\"", ")", "\n", "self", ".", "aux_weights", "=", "dict_merge", "(", "self", ".", "aux_weights", ",", "aux_weights_override", ")", "\n", "\n", "", "", "self", ".", "prof", "=", "SimpleProfiler", "(", "torch_sync", "=", "PROFILE", ",", "print", "=", "PROFILE", ")", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "tensor_store", "=", "KeyTensorStore", "(", ")", "\n", "self", ".", "losses", "=", "AuxiliaryLosses", "(", ")", "\n", "\n", "# Auxiliary Objectives", "\n", "self", ".", "do_perturb_maps", "=", "self", ".", "params", "[", "\"perturb_maps\"", "]", "\n", "print", "(", "\"Perturbing maps: \"", ",", "self", ".", "do_perturb_maps", ")", "\n", "\n", "# Path-pred FPV model definition", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "self", ".", "num_feature_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "# + params[\"relevance_channels\"]", "\n", "# TODO: Fix this for if we don't have grounding", "\n", "self", ".", "num_map_channels", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", "\n", "\n", "self", ".", "img_to_features_w", "=", "FPVToGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "res_channels", "=", "self", ".", "params", "[", "\"resnet_channels\"", "]", ",", "map_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "img_w", "=", "self", ".", "params", "[", "\"img_w\"", "]", ",", "img_h", "=", "self", ".", "params", "[", "\"img_h\"", "]", ",", "cam_h_fov", "=", "self", ".", "params", "[", "\"cam_h_fov\"", "]", ",", "\n", "domain", "=", "domain", ",", "\n", "img_dbg", "=", "IMG_DBG", ")", "\n", "\n", "self", ".", "map_accumulator_w", "=", "LeakyIntegratorGlobalMap", "(", "\n", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "add_init_pos_to_coverage", "=", "AddDroneInitPosToCoverage", "(", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "map_size_px", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ")", "\n", "\n", "# Pre-process the accumulated map to do language grounding if necessary - in the world reference frame", "\n", "#if self.use_aux[\"grounding_map\"] and not self.use_aux[\"grounding_features\"]:", "\n", "self", ".", "map_processor_grounding", "=", "LangFilterMapProcessor", "(", "\n", "embed_size", "=", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "\n", "in_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "out_channels", "=", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "\n", "spatial", "=", "False", ",", "cat_out", "=", "False", ")", "\n", "\n", "ratio_prior_channels", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", "\n", "\n", "# Process the global accumulated map", "\n", "self", ".", "path_predictor_lingunet", "=", "RatioPathPredictor", "(", "\n", "self", ".", "params", "[", "\"lingunet\"", "]", ",", "\n", "prior_channels_in", "=", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "\n", "posterior_channels_in", "=", "self", ".", "params", "[", "\"pathpred_in_channels\"", "]", ",", "\n", "dual_head", "=", "self", ".", "params", "[", "\"predict_confidence\"", "]", ",", "\n", "compute_prior", "=", "self", ".", "params", "[", "\"compute_prior\"", "]", ",", "\n", "use_prior", "=", "self", ".", "params", "[", "\"use_prior_only\"", "]", ",", "\n", "oob", "=", "self", ".", "params", "[", "\"clip_observability\"", "]", ")", "\n", "\n", "print", "(", "\"UNet Channels: \"", "+", "str", "(", "self", ".", "num_map_channels", ")", ")", "\n", "print", "(", "\"Feature Channels: \"", "+", "str", "(", "self", ".", "num_feature_channels", ")", ")", "\n", "\n", "self", ".", "second_transform", "=", "self", ".", "do_perturb_maps", "or", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "\n", "\n", "# Sentence Embedding", "\n", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "\n", "self", ".", "params", "[", "\"word_emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "self", ".", "params", "[", "\"emb_layers\"", "]", ",", "self", ".", "params", "[", "\"emb_dropout\"", "]", ")", "\n", "\n", "self", ".", "map_transform_local_to_local", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_global_to_local", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_local_to_global", "=", "MapTransformer", "(", "source_map_size", "=", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "\n", "dest_map_size", "=", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "world_size_px", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "\n", "world_size_m", "=", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "map_transform_s_to_p", "=", "self", ".", "map_transform_local_to_local", "\n", "self", ".", "map_transform_w_to_s", "=", "self", ".", "map_transform_global_to_local", "\n", "self", ".", "map_transform_w_to_r", "=", "self", ".", "map_transform_global_to_local", "\n", "self", ".", "map_transform_r_to_s", "=", "self", ".", "map_transform_local_to_local", "\n", "self", ".", "map_transform_r_to_w", "=", "self", ".", "map_transform_local_to_global", "\n", "self", ".", "map_transform_p_to_w", "=", "self", ".", "map_transform_local_to_global", "\n", "self", ".", "map_transform_p_to_r", "=", "self", ".", "map_transform_local_to_local", "\n", "\n", "# Batch select is used to drop and forget semantic maps at those timestaps that we're not planning in", "\n", "self", ".", "batch_select", "=", "MapBatchSelect", "(", ")", "\n", "# Since we only have path predictions for some timesteps (the ones not dropped above), we use this to fill", "\n", "# in the missing pieces by reorienting the past trajectory prediction into the frame of the current timestep", "\n", "self", ".", "map_batch_fill_missing", "=", "MapBatchFillMissing", "(", "self", ".", "params", "[", "\"local_map_size\"", "]", ",", "self", ".", "params", "[", "\"world_size_px\"", "]", ",", "self", ".", "params", "[", "\"world_size_m\"", "]", ")", "\n", "\n", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "visitation_softmax", "=", "VisitationSoftmax", "(", ")", "\n", "\n", "\n", "# Auxiliary Objectives", "\n", "# --------------------------------------------------------------------------------------------------------------", "\n", "\n", "# We add all auxiliaries that are necessary. The first argument is the auxiliary name, followed by parameters,", "\n", "# followed by variable number of names of inputs. ModuleWithAuxiliaries will automatically collect these inputs", "\n", "# that have been saved with keep_auxiliary_input() during execution", "\n", "if", "self", ".", "use_aux", "[", "\"class_features\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"class_features\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"fpv_features\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_indices\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_features\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"grounding_features\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"fpv_features_g\"", ",", "\"lm_pos_fpv\"", ",", "\"lm_mentioned\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"class_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"class_map\"", ",", "self", ".", "params", "[", "\"feature_channels\"", "]", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "0", ",", "\n", "\"S_W_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_indices_select\"", ")", ")", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary2D", "(", "\"grounding_map\"", ",", "self", ".", "params", "[", "\"relevance_channels\"", "]", ",", "2", ",", "0", ",", "\n", "\"R_W_select\"", ",", "\"lm_pos_map_select\"", ",", "\"lm_mentioned_select\"", ")", ")", "\n", "# CoRL model uses alignment-model groundings", "\n", "", "if", "self", ".", "use_aux", "[", "\"lang\"", "]", ":", "\n", "# one output for each landmark, 2 classes per output. This is for finetuning, so use the embedding that's gonna be fine tuned", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "ClassAuxiliary", "(", "\"lang\"", ",", "self", ".", "params", "[", "\"emb_size\"", "]", ",", "2", ",", "self", ".", "params", "[", "\"num_landmarks\"", "]", ",", "\n", "\"sentence_embed\"", ",", "\"lang_lm_mentioned\"", ")", ")", "\n", "\n", "", "if", "self", ".", "use_aux", "[", "\"regularize_map\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "FeatureRegularizationAuxiliary2D", "(", "\"regularize_map\"", ",", "\"l1\"", ",", "\"S_W_select\"", ")", ")", "\n", "\n", "", "lossfunc", "=", "self", ".", "params", "[", "\"path_loss_function\"", "]", "\n", "if", "self", ".", "params", "[", "\"clip_observability\"", "]", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"visitation_dist\"", ",", "lossfunc", ",", "self", ".", "params", "[", "\"clip_observability\"", "]", ",", "\n", "\"log_v_dist_s_select\"", ",", "\"v_dist_s_ground_truth_select\"", ",", "\"SM_S_select\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "losses", ".", "add_auxiliary", "(", "PathAuxiliary2D", "(", "\"visitation_dist\"", ",", "lossfunc", ",", "self", ".", "params", "[", "\"clip_observability\"", "]", ",", "\n", "\"log_v_dist_s_select\"", ",", "\"v_dist_s_ground_truth_select\"", ",", "\"SM_S_select\"", ")", ")", "\n", "\n", "", "self", ".", "goal_good_criterion", "=", "GoalPredictionGoodCriterion", "(", "ok_distance", "=", "self", ".", "params", "[", "\"world_size_px\"", "]", "*", "0.1", ")", "\n", "self", ".", "goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "visible_goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "invisible_goal_acc_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "self", ".", "visible_goal_frac_meter", "=", "MovingAverageMeter", "(", "10", ")", "\n", "\n", "self", ".", "losses", ".", "print_auxiliary_info", "(", ")", "\n", "\n", "self", ".", "total_goals", "=", "0", "\n", "self", ".", "correct_goals", "=", "0", "\n", "\n", "self", ".", "env_id", "=", "None", "\n", "self", ".", "env_img", "=", "None", "\n", "self", ".", "seg_idx", "=", "None", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "self", ".", "seq_step", "=", "0", "\n", "\n", "self", ".", "should_save_path_overlays", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.make_picklable": [[229, 231], ["utils.dummy_summary_writer.DummySummaryWriter"], "methods", ["None"], ["", "def", "make_picklable", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", "=", "DummySummaryWriter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.steal_cross_domain_modules": [[232, 239], ["None"], "methods", ["None"], ["", "def", "steal_cross_domain_modules", "(", "self", ",", "other_self", ")", ":", "\n", "        ", "self", ".", "iter", "=", "other_self", ".", "iter", "\n", "self", ".", "losses", "=", "other_self", ".", "losses", "\n", "self", ".", "sentence_embedding", "=", "other_self", ".", "sentence_embedding", "\n", "self", ".", "map_accumulator_w", "=", "other_self", ".", "map_accumulator_w", "\n", "self", ".", "map_processor_grounding", "=", "other_self", ".", "map_processor_grounding", "\n", "self", ".", "path_predictor_lingunet", "=", "other_self", ".", "path_predictor_lingunet", "\n", "#self.img_to_features_w = other_self.img_to_features_w", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.both_domain_parameters": [[241, 251], ["model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.parameters", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "both_domain_parameters", "(", "self", ",", "other_self", ")", ":", "\n", "# This function iterates and yields parameters from this module and the other module, but does not yield", "\n", "# shared parameters twice.", "\n", "# First yield all of the other module's parameters", "\n", "        ", "for", "p", "in", "other_self", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "# Then yield all the parameters from the this module that are not shared with the other one", "\n", "", "for", "p", "in", "self", ".", "img_to_features_w", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.get_iter": [[252, 254], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.inc_iter": [[255, 257], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict": [[258, 260], ["super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "super", "(", "PVN_Stage1_Bidomain", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.init_weights": [[261, 267], ["model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.init_weights", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_accumulator_w.init_weights", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding.init_weights", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_processor_grounding.init_weights", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.path_predictor_lingunet.init_weights"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_to_features_w", ".", "init_weights", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "init_weights", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "map_processor_grounding", ".", "init_weights", "(", ")", "\n", "self", ".", "path_predictor_lingunet", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.reset": [[268, 276], ["model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.reset", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding.reset", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.reset", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_accumulator_w.reset", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_batch_fill_missing.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# TODO: This is error prone. Create a class StatefulModule, iterate submodules and reset all stateful modules", "\n", "        ", "self", ".", "tensor_store", ".", "reset", "(", ")", "\n", "self", ".", "sentence_embedding", ".", "reset", "(", ")", "\n", "self", ".", "img_to_features_w", ".", "reset", "(", ")", "\n", "self", ".", "map_accumulator_w", ".", "reset", "(", ")", "\n", "self", ".", "map_batch_fill_missing", ".", "reset", "(", ")", "\n", "self", ".", "prev_instruction", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.setEnvContext": [[277, 282], ["print", "data_io.env.load_env_img", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img"], ["", "def", "setEnvContext", "(", "self", ",", "context", ")", ":", "\n", "        ", "print", "(", "\"Set env context to: \"", "+", "str", "(", "context", ")", ")", "\n", "self", ".", "env_id", "=", "context", "[", "\"env_id\"", "]", "\n", "self", ".", "env_img", "=", "env", ".", "load_env_img", "(", "self", ".", "env_id", ",", "256", ",", "256", ")", "\n", "self", ".", "env_img", "=", "self", ".", "env_img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.set_save_path_overlays": [[283, 285], ["None"], "methods", ["None"], ["", "def", "set_save_path_overlays", "(", "self", ",", "save_path_overlays", ")", ":", "\n", "        ", "self", ".", "should_save_path_overlays", "=", "save_path_overlays", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.save_path_overlays": [[286, 308], ["load_env_img().astype", "cv2.cvtColor", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.visitation_softmax", "v_dist_w.contiguous.contiguous.contiguous", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "torch.max().detach().item", "visualization.Presenter().overlaid_image", "visualization.Presenter().overlay_text", "save_results_extra_image", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "load_env_img", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "visualization.Presenter", "visualization.Presenter", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "v_dist_w[].view", "v_dist_w[].view"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_text", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.results.save_results_extra_image", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "save_path_overlays", "(", "self", ",", "metadata", ")", ":", "\n", "        ", "from", "data_io", ".", "env", "import", "load_env_img", "\n", "from", "data_io", ".", "results", "import", "save_results_extra_image", "\n", "import", "cv2", "\n", "import", "numpy", "as", "np", "\n", "img", "=", "load_env_img", "(", "metadata", "[", "\"env_id\"", "]", ",", "width", "=", "256", ",", "height", "=", "256", ",", "real_drone", "=", "(", "self", ".", "domain", "==", "\"real\"", ")", ",", "flipdiag", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "log_v_dist", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"log_v_dist_w_select\"", ")", "[", "0", "]", "\n", "v_dist_w", ",", "goal_oob_prob", "=", "self", ".", "visitation_softmax", "(", "log_v_dist", ".", "inner_distribution", ",", "log_v_dist", ".", "outer_prob_mass", "[", ":", ",", "1", "]", ")", "\n", "v_dist_w", "=", "v_dist_w", ".", "contiguous", "(", ")", "\n", "# Squish distributions in 0-1 range", "\n", "#idx = int((v_dist_w.shape[0]) / 2)", "\n", "idx", "=", "-", "1", "\n", "mx1", "=", "torch", ".", "max", "(", "v_dist_w", "[", "idx", ",", "0", "]", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "mx2", "=", "torch", ".", "max", "(", "v_dist_w", "[", "idx", ",", "1", "]", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "v_dist_w", "[", "idx", ",", "0", "]", "/=", "(", "mx1", "+", "1e-10", ")", "\n", "v_dist_w", "[", "idx", ",", "1", "]", "/=", "(", "mx2", "+", "1e-10", ")", "\n", "overlaid_img", "=", "Presenter", "(", ")", ".", "overlaid_image", "(", "img", ",", "v_dist_w", "[", "idx", "]", ",", "gray_bg", "=", "False", ")", "\n", "overlaid_img", "=", "Presenter", "(", ")", ".", "overlay_text", "(", "overlaid_img", ",", "metadata", "[", "\"instruction\"", "]", ")", "\n", "name", "=", "f\"{self.domain}_pathpred_overlay\"", "\n", "name", "=", "\"\"", "\n", "save_results_extra_image", "(", "self", ".", "run_name", ",", "metadata", "[", "\"env_id\"", "]", ",", "metadata", "[", "\"set_idx\"", "]", ",", "metadata", "[", "\"seg_idx\"", "]", ",", "name", ",", "overlaid_img", ",", "extra", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.print_metrics": [[309, 312], ["print", "print", "float"], "methods", ["None"], ["", "def", "print_metrics", "(", "self", ")", ":", "\n", "        ", "print", "(", "f\"Model {self.model_name}:{self.domain} metrics:\"", ")", "\n", "print", "(", "f\"   Goal accuracy: {float(self.correct_goals) / self.total_goals}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_visible": [[313, 318], ["goal_pos[].long().detach", "bool", "masks.detach", "goal_pos[].long"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "goal_visible", "(", "self", ",", "masks", ",", "goal_pos", ")", ":", "\n", "        ", "goal_mask", "=", "masks", ".", "detach", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "goal_pos", "=", "goal_pos", "[", "0", "]", ".", "long", "(", ")", ".", "detach", "(", ")", "\n", "visible", "=", "bool", "(", "(", "goal_mask", "[", "goal_pos", "[", "0", "]", ",", "goal_pos", "[", "1", "]", "]", ">", "0.5", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "return", "visible", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.start_sequence": [[320, 324], ["model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.reset"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset"], ["", "def", "start_sequence", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_step", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states": [[325, 330], ["learning.inputs.pose.Pose"], "methods", ["None"], ["", "def", "cam_poses_from_states", "(", "self", ",", "states", ")", ":", "\n", "        ", "cam_pos", "=", "states", "[", ":", ",", "9", ":", "12", "]", "\n", "cam_rot", "=", "states", "[", ":", ",", "12", ":", "16", "]", "\n", "pose", "=", "Pose", "(", "cam_pos", ",", "cam_rot", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.forward": [[331, 502], ["model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.params.get", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_accumulator_w", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.batch_select", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_w_to_s", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_w_to_s", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.path_predictor_lingunet", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_p_to_w", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_p_to_r", "learning.inputs.partial_2d_distribution.Partial2DDistribution", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "tuple", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding.get", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.add_init_pos_to_coverage.get_init_pos_masks", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_r_to_w", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.add_init_pos_to_coverage", "len", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_processor_grounding", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_s_to_p", "range", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_batch_fill_missing", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "return_list.append", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.sentence_embedding", "torch.autograd.Variable", "torch.autograd.Variable", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.get_iter", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "visualization.Presenter().show_image", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "learning.utils.draw_drone_poses", "visualization.Presenter", "S_W_select.detach().cpu", "visualization.Presenter", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach().cpu", "visualization.Presenter", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach().cpu", "visualization.Presenter", "RS_P_select.detach().cpu", "S_W_select.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.detach", "RS_P_select.detach", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d.", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d."], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cam_poses_from_states", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.modules.add_drone_pos_to_coverage_mask.AddDroneInitPosToCoverage.get_init_pos_masks", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.draw_drone_poses", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "forward", "(", "self", ",", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "\n", "plan", "=", "None", ",", "noisy_start_poses", "=", "None", ",", "start_poses", "=", "None", ",", "firstseg", "=", "None", ",", "select_only", "=", "True", ",", "halfway", "=", "False", ",", "grad_noise", "=", "False", ",", "rl", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param images: BxCxHxW batch of images (observations)\n        :param states: BxK batch of drone states\n        :param instructions: BxM LongTensor where M is the maximum length of any instruction\n        :param instr_lengths: list of len B of integers, indicating length of each instruction\n        :param plan: list of B booleans indicating True for timesteps where we do planning and False otherwise\n        :param noisy_start_poses: list of noisy start poses (for data-augmentation). These define the path-prediction frame at training time\n        :param start_poses: list of drone start poses (these should be equal in practice)\n        :param firstseg: list of booleans indicating True if a new segment starts at that timestep\n        :param select_only: boolean indicating whether to only compute visitation distributions for planning timesteps (default True)\n        :param rl: boolean indicating if we're doing reinforcement learning. If yes, output more than the visitation distribution\n        :return:\n        \"\"\"", "\n", "cam_poses", "=", "self", ".", "cam_poses_from_states", "(", "states", ")", "\n", "g_poses", "=", "None", "# None pose is a placeholder for the canonical global pose.", "\n", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"fpv\"", ",", "images", ")", "\n", "\n", "# Calculate the instruction embedding", "\n", "if", "instructions", "is", "not", "None", ":", "\n", "# TODO: Take batch of instructions and their lengths, return batch of embeddings. Store the last one as internal state", "\n", "# TODO: handle this", "\n", "# ASSUMING IT'S THE SAME INSTRUCTION SEGMENT (PREDICT ONE SEGMENT AT A TIME).", "\n", "# UNCOMMENT THE BELOW LINE TO REVERT BACK TO GENERAL CASE OF SEPARATE INSTRUCTION PER STEP", "\n", "            ", "if", "self", ".", "params", "[", "\"ignore_instruction\"", "]", ":", "\n", "# If we're ignoring instructions, just feed in an instruction that consists of a single zero-token", "\n", "                ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "torch", ".", "zeros_like", "(", "instructions", "[", "0", ":", "1", ",", "0", ":", "1", "]", ")", ",", "torch", ".", "ones_like", "(", "instr_lengths", "[", "0", ":", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "sent_embeddings", "=", "self", ".", "sentence_embedding", "(", "instructions", "[", "0", ":", "1", "]", ",", "instr_lengths", "[", "0", ":", "1", "]", ")", "\n", "#sent_embeddings = self.sentence_embedding(instructions, instr_lengths)", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"sentence_embed\"", ",", "sent_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "sent_embeddings", "=", "self", ".", "sentence_embedding", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"embed\"", ")", "\n", "\n", "# Extract and project features onto the egocentric frame for each image", "\n", "F_W", ",", "M_W", "=", "self", ".", "img_to_features_w", "(", "images", ",", "cam_poses", ",", "sent_embeddings", ",", "self", ".", "tensor_store", ",", "show", "=", "\"\"", ",", "halfway", "=", "halfway", ")", "\n", "\n", "if", "halfway", "==", "True", "and", "not", "halfway", "==", "\"v2\"", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"F_w\"", ",", "F_W", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"M_w\"", ",", "M_W", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"img_to_map_frame\"", ")", "\n", "\n", "# Accumulate the egocentric features in a global map", "\n", "reset_mask", "=", "firstseg", "if", "self", ".", "params", "[", "\"clear_history\"", "]", "else", "None", "\n", "\n", "# Consider the space very near the drone as observable - it is too hard to explore to consider it unobservable.", "\n", "if", "self", ".", "params", ".", "get", "(", "\"cover_init_pos\"", ",", "False", ")", ":", "\n", "            ", "StartMasks_R", "=", "self", ".", "add_init_pos_to_coverage", ".", "get_init_pos_masks", "(", "M_W", ".", "shape", "[", "0", "]", ",", "M_W", ".", "device", ")", "\n", "StartMasks_W", ",", "_", "=", "self", ".", "map_transform_r_to_w", "(", "StartMasks_R", ",", "cam_poses", ",", "None", ")", "\n", "M_W", "=", "self", ".", "add_init_pos_to_coverage", "(", "M_W", ",", "StartMasks_W", ")", "\n", "\n", "", "S_W", ",", "SM_W", "=", "self", ".", "map_accumulator_w", "(", "F_W", ",", "M_W", ",", "reset_mask", "=", "reset_mask", ",", "show", "=", "\"acc\"", "if", "IMG_DBG", "else", "\"\"", ")", "\n", "S_W_poses", "=", "g_poses", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_accumulate\"", ")", "\n", "\n", "if", "halfway", "==", "\"observability\"", ":", "\n", "            ", "map_uncoverage_w", "=", "1", "-", "SM_W", "\n", "return", "map_uncoverage_w", "\n", "\n", "# Throw away those timesteps that don't correspond to planning timesteps", "\n", "", "S_W_select", ",", "SM_W_select", ",", "S_W_poses_select", ",", "cam_poses_select", ",", "noisy_start_poses_select", ",", "start_poses_select", ",", "sent_embeddings_select", "=", "self", ".", "batch_select", "(", "S_W", ",", "SM_W", ",", "S_W_poses", ",", "cam_poses", ",", "noisy_start_poses", ",", "start_poses", ",", "sent_embeddings", ",", "plan", ")", "\n", "\n", "#maps_m_prior_select, maps_m_posterior_select = None, None", "\n", "\n", "# Only process the maps on plannieng timesteps", "\n", "if", "len", "(", "S_W_select", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"S_W_select\"", ",", "S_W_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"batch_select\"", ")", "\n", "\n", "# Create a figure where the drone is drawn on the map", "\n", "if", "self", ".", "params", "[", "\"write_figures\"", "]", ":", "\n", "            ", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"drone_poses\"", ",", "Variable", "(", "draw_drone_poses", "(", "cam_poses_select", ")", ")", ")", "\n", "\n", "# Process the map via the two map_procesors", "\n", "# Do grounding of objects in the map chosen to do so", "\n", "", "if", "self", ".", "use_aux", "[", "\"grounding_map\"", "]", ":", "\n", "            ", "R_W_select", ",", "RS_W_poses_select", "=", "self", ".", "map_processor_grounding", "(", "S_W_select", ",", "sent_embeddings_select", ",", "S_W_poses_select", ",", "show", "=", "\"\"", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"R_W_select\"", ",", "R_W_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_proc_gnd\"", ")", "\n", "# Concatenate grounding map and semantic map along channel dimension", "\n", "RS_W_select", "=", "torch", ".", "cat", "(", "[", "S_W_select", ",", "R_W_select", "]", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "RS_W_select", "=", "S_W_select", "\n", "RS_W_poses_select", "=", "S_W_poses_select", "\n", "\n", "", "s_poses_select", "=", "start_poses_select", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", "else", "cam_poses_select", "\n", "RS_S_select", ",", "RS_S_poses_select", "=", "self", ".", "map_transform_w_to_s", "(", "RS_W_select", ",", "RS_W_poses_select", ",", "s_poses_select", ")", "\n", "SM_S_select", ",", "SM_S_poses_select", "=", "self", ".", "map_transform_w_to_s", "(", "SM_W_select", ",", "S_W_poses_select", ",", "s_poses_select", ")", "\n", "\n", "assert", "SM_S_poses_select", "==", "RS_S_poses_select", ",", "\"Masks and maps should have the same pose in start frame\"", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"RS_S_select\"", ",", "RS_S_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"SM_S_select\"", ",", "SM_S_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"transform_w_to_s\"", ")", "\n", "\n", "# Data augmentation for trajectory prediction", "\n", "map_poses_clean_select", "=", "None", "\n", "# TODO: Figure out if we can just swap out start poses for noisy poses and get rid of separate noisy poses", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "            ", "assert", "noisy_start_poses_select", "is", "not", "None", ",", "\"Noisy poses must be provided if we're perturbing maps\"", "\n", "RS_P_select", ",", "RS_P_poses_select", "=", "self", ".", "map_transform_s_to_p", "(", "RS_S_select", ",", "RS_S_poses_select", ",", "noisy_start_poses_select", ")", "\n", "", "else", ":", "\n", "            ", "RS_P_select", ",", "RS_P_poses_select", "=", "RS_S_select", ",", "RS_S_poses_select", "\n", "\n", "# TODO: Figure out why this is unused!", "\n", "", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"RS_perturbed_select\"", ",", "RS_P_select", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_perturb\"", ")", "\n", "\n", "sent_embeddings_pp", "=", "sent_embeddings_select", "\n", "\n", "# Process the map via the two map_procesors (e.g. predict the trajectory that we'll be taking)", "\n", "# ---------", "\n", "log_v_dist_p_select", ",", "v_dist_p_poses_select", "=", "self", ".", "path_predictor_lingunet", "(", "RS_P_select", ",", "sent_embeddings_pp", ",", "RS_P_poses_select", ",", "tensor_store", "=", "self", ".", "tensor_store", ")", "\n", "# ---------", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"pathpred\"", ")", "\n", "\n", "# Transform distributions back to world reference frame and keep them (these are the model outputs)", "\n", "both_inner_w", ",", "v_dist_w_poses_select", "=", "self", ".", "map_transform_p_to_w", "(", "log_v_dist_p_select", ".", "inner_distribution", ",", "v_dist_p_poses_select", ",", "None", ")", "\n", "log_v_dist_w_select", "=", "Partial2DDistribution", "(", "both_inner_w", ",", "log_v_dist_p_select", ".", "outer_prob_mass", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_v_dist_w_select\"", ",", "log_v_dist_w_select", ")", "\n", "\n", "# Transform distributions back to start reference frame and keep them (for auxiliary objective)", "\n", "both_inner_s", ",", "v_dist_s_poses_select", "=", "self", ".", "map_transform_p_to_r", "(", "log_v_dist_p_select", ".", "inner_distribution", ",", "v_dist_p_poses_select", ",", "start_poses_select", ")", "\n", "log_v_dist_s_select", "=", "Partial2DDistribution", "(", "both_inner_s", ",", "log_v_dist_p_select", ".", "outer_prob_mass", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_v_dist_s_select\"", ",", "log_v_dist_s_select", ")", "\n", "\n", "lsfm", "=", "SpatialSoftmax2d", "(", ")", "\n", "# prime number will mean that it will alternate between sim and real", "\n", "if", "self", ".", "get_iter", "(", ")", "%", "23", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "S_W_select", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Presenter", "(", ")", ".", "show_image", "(", "S_W_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", ",", "0", ":", "3", "]", ",", "f\"{self.domain}_s_w_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "lsfm", "(", "log_v_dist_s_select", ".", "inner_distribution", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", "]", ",", "f\"{self.domain}_v_dist_s_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "lsfm", "(", "log_v_dist_p_select", ".", "inner_distribution", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", "]", ",", "f\"{self.domain}_v_dist_p_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "Presenter", "(", ")", ".", "show_image", "(", "RS_P_select", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "i", ",", "0", ":", "3", "]", ",", "f\"{self.domain}_rs_p_select\"", ",", "scale", "=", "4", ",", "waitkey", "=", "1", ")", "\n", "break", "\n", "\n", "", "", "self", ".", "prof", ".", "tick", "(", "\"transform_back\"", ")", "\n", "\n", "# If we're predicting the trajectory only on some timesteps, then for each timestep k, use the map from", "\n", "# timestep k if predicting on timestep k. otherwise use the map from timestep j - the last timestep", "\n", "# that had a trajectory prediction, rotated in the frame of timestep k.", "\n", "if", "select_only", ":", "\n", "# If we're just pre-training the trajectory prediction, don't waste time on generating the missing maps", "\n", "            ", "log_v_dist_w", "=", "log_v_dist_w_select", "\n", "v_dist_w_poses", "=", "v_dist_w_poses_select", "\n", "cam_poses", "=", "cam_poses_select", "\n", "sent_embeddings", "=", "sent_embeddings_select", "\n", "", "else", ":", "\n", "            ", "log_v_dist_w", ",", "v_dist_w_poses", ",", "log_goal_oob_score", "=", "self", ".", "map_batch_fill_missing", "(", "log_v_dist_w_select", ",", "v_dist_w_poses_select", ",", "plan", ",", "show", "=", "\"\"", ")", "\n", "# TODO: Fix this", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"log_both_dists_w\"", ",", "log_both_dists_w", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"map_fill_missing\"", ")", "\n", "\n", "", "return_list", "=", "[", "log_v_dist_w", ",", "v_dist_w_poses", "]", "\n", "if", "rl", ":", "\n", "            ", "internals_for_rl", "=", "{", "\"map_coverage_w\"", ":", "SM_W", ",", "\"map_uncoverage_w\"", ":", "1", "-", "SM_W", "}", "\n", "return_list", ".", "append", "(", "internals_for_rl", ")", "\n", "\n", "", "return", "tuple", "(", "return_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda": [[503, 505], ["tensor.to", "next", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "maybe_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var": [[506, 508], ["tensor.to", "next", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "cuda_var", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch": [[509, 589], ["model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "len", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.set_flag", "learning.inputs.pose.get_noisy_poses_torch", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.batch_select.one", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.map_transform_w_to_s", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.img_to_features_w.img_to_features.get_downscale_factor", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.keep_inputs", "start_poses.numpy", "transformations.pos_m_to_px", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "goal_pos_map_m.numpy", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "enumerate", "enumerate", "enumerate", "enumerate", "transformations.pos_m_to_px", "s.long", "p.numpy"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.set_flag", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.get_noisy_poses_torch", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.maybe_cuda", "home.repos.pwc.inspect_result.clic-lab_drif.map_to_map.map_batch_select.MapBatchSelect.one", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.resnet.resnet_9_stride32.ResNet9Stride32.get_downscale_factor", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.keep_inputs", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy"], ["", "def", "unbatch", "(", "self", ",", "batch", ",", "halfway", "=", "False", ")", ":", "\n", "# Inputs", "\n", "        ", "images", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"images\"", "]", "[", "0", "]", ")", "\n", "seq_len", "=", "len", "(", "images", ")", "\n", "instructions", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"instr\"", "]", "[", "0", "]", "[", ":", "seq_len", "]", ")", "\n", "instr_lengths", "=", "batch", "[", "\"instr_len\"", "]", "[", "0", "]", "[", ":", "seq_len", "]", "\n", "states", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"states\"", "]", "[", "0", "]", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "\n", "            ", "plan_mask", "=", "batch", "[", "\"plan_mask\"", "]", "[", "0", "]", "# True for every timestep that we do visitation prediction", "\n", "firstseg_mask", "=", "batch", "[", "\"firstseg_mask\"", "]", "[", "0", "]", "# True for every timestep that is a new instruction segment", "\n", "\n", "# Labels (including for auxiliary losses)", "\n", "lm_pos_fpv", "=", "batch", "[", "\"lm_pos_fpv\"", "]", "[", "0", "]", "# All object 2D coordinates in the first-person image", "\n", "lm_pos_map_m", "=", "batch", "[", "\"lm_pos_map\"", "]", "[", "0", "]", "# All object 2D coordinates in the semantic map", "\n", "lm_indices", "=", "batch", "[", "\"lm_indices\"", "]", "[", "0", "]", "# All object class indices", "\n", "goal_pos_map_m", "=", "batch", "[", "\"goal_loc\"", "]", "[", "0", "]", "# Goal location in the world in meters_and_metrics", "\n", "lm_mentioned", "=", "batch", "[", "\"lm_mentioned\"", "]", "[", "0", "]", "# 1/0 labels whether object was mentioned/not mentioned in template instruction", "\n", "# TODO: We're taking the FIRST label here. SINGLE SEGMENT ASSUMPTION", "\n", "lang_lm_mentioned", "=", "batch", "[", "\"lang_lm_mentioned\"", "]", "[", "0", "]", "[", "0", "]", "# integer labes as to which object was mentioned", "\n", "start_poses", "=", "batch", "[", "\"start_poses\"", "]", "[", "0", "]", "\n", "noisy_start_poses", "=", "get_noisy_poses_torch", "(", "start_poses", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"pos_variance\"", "]", ",", "self", ".", "params", "[", "\"rot_variance\"", "]", ",", "\n", "cuda", "=", "False", ",", "cuda_device", "=", "None", ")", "\n", "\n", "# Ground truth visitation distributions (in start and global frames)", "\n", "v_dist_w_ground_truth_select", "=", "self", ".", "maybe_cuda", "(", "batch", "[", "\"traj_ground_truth\"", "]", "[", "0", "]", ")", "\n", "start_poses_select", "=", "self", ".", "batch_select", ".", "one", "(", "start_poses", ",", "plan_mask", ",", "v_dist_w_ground_truth_select", ".", "device", ")", "\n", "v_dist_s_ground_truth_select", ",", "poses_s", "=", "self", ".", "map_transform_w_to_s", "(", "v_dist_w_ground_truth_select", ",", "None", ",", "start_poses_select", ")", "\n", "#self.tensor_store.keep_inputs(\"v_dist_w_ground_truth_select\", v_dist_w_ground_truth_select)", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"v_dist_s_ground_truth_select\"", ",", "v_dist_s_ground_truth_select", ")", "\n", "#Presenter().show_image(v_dist_s_ground_truth_select.detach().cpu()[0,0], \"v_dist_s_ground_truth_select\", waitkey=1, scale=4)", "\n", "#Presenter().show_image(v_dist_w_ground_truth_select.detach().cpu()[0,0], \"v_dist_w_ground_truth_select\", waitkey=1, scale=4)", "\n", "\n", "lm_pos_map_px", "=", "[", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "p", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "lm_pos_map_m", "]", "\n", "goal_pos_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "goal_pos_map_m", ".", "numpy", "(", ")", ",", "\n", "self", ".", "params", "[", "\"global_map_size\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_m\"", "]", ",", "\n", "self", ".", "params", "[", "\"world_size_px\"", "]", ")", ")", "\n", "\n", "resnet_factor", "=", "self", ".", "img_to_features_w", ".", "img_to_features", ".", "get_downscale_factor", "(", ")", "\n", "lm_pos_fpv", "=", "[", "self", ".", "cuda_var", "(", "(", "s", "/", "resnet_factor", ")", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_fpv", "]", "\n", "lm_indices", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_indices", "]", "\n", "lm_mentioned", "=", "[", "self", ".", "cuda_var", "(", "s", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_mentioned", "]", "\n", "lang_lm_mentioned", "=", "self", ".", "cuda_var", "(", "lang_lm_mentioned", ")", "\n", "lm_pos_map_px", "=", "[", "self", ".", "cuda_var", "(", "s", ".", "long", "(", ")", ")", "if", "s", "is", "not", "None", "else", "None", "for", "s", "in", "lm_pos_map_px", "]", "\n", "goal_pos_map_px", "=", "self", ".", "cuda_var", "(", "goal_pos_map_px", ")", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_fpv\"", ",", "lm_pos_fpv", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map\"", ",", "lm_pos_map_px", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices\"", ",", "lm_indices", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned\"", ",", "lm_mentioned", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lang_lm_mentioned\"", ",", "lang_lm_mentioned", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map\"", ",", "goal_pos_map_px", ")", "\n", "\n", "lm_pos_map_select", "=", "[", "lm_pos", "for", "i", ",", "lm_pos", "in", "enumerate", "(", "lm_pos_map_px", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "lm_indices_select", "=", "[", "lm_idx", "for", "i", ",", "lm_idx", "in", "enumerate", "(", "lm_indices", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "lm_mentioned_select", "=", "[", "lm_m", "for", "i", ",", "lm_m", "in", "enumerate", "(", "lm_mentioned", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "goal_pos_map_select", "=", "[", "pos", "for", "i", ",", "pos", "in", "enumerate", "(", "goal_pos_map_px", ")", "if", "plan_mask", "[", "i", "]", "]", "\n", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_pos_map_select\"", ",", "lm_pos_map_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_indices_select\"", ",", "lm_indices_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"lm_mentioned_select\"", ",", "lm_mentioned_select", ")", "\n", "self", ".", "tensor_store", ".", "keep_inputs", "(", "\"goal_pos_map_select\"", ",", "goal_pos_map_select", ")", "\n", "\n", "# We won't need this extra information", "\n", "", "else", ":", "\n", "            ", "noisy_poses", ",", "start_poses", ",", "noisy_start_poses", "=", "None", ",", "None", ",", "None", "\n", "plan_mask", ",", "firstseg_mask", "=", "None", ",", "None", "\n", "\n", "", "metadata", "=", "batch", "[", "\"md\"", "]", "[", "0", "]", "[", "0", "]", "\n", "env_id", "=", "metadata", "[", "\"env_id\"", "]", "\n", "self", ".", "tensor_store", ".", "set_flag", "(", "\"env_id\"", ",", "env_id", ")", "\n", "\n", "return", "images", ",", "states", ",", "instructions", ",", "instr_lengths", ",", "plan_mask", ",", "firstseg_mask", ",", "start_poses", ",", "noisy_start_poses", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.sup_loss_on_batch": [[591, 673], ["model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.reset", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.calculate_aux_loss", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.losses.combine_losses", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.get_iter", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_dict", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_dict", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_dict", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.inc_iter", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.loop", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.print_stats", "print", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.save_path_overlays", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_good_criterion", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_acc_meter.put", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_visible", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_frac_meter.put", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.prof.tick", "learning.meters_and_metrics.meter_server.get_current_meters", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.writer.add_scalar", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.tensor_store.get_inputs_batch", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_acc_meter.put", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.invisible_goal_acc_meter.put", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_acc_meter.get", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_acc_meter.get", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.invisible_goal_acc_meter.get", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.visible_goal_frac_meter.get", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "next", "model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.unbatch", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.calculate_aux_loss", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.combine_losses", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_dict", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.loop", "home.repos.pwc.inspect_result.clic-lab_drif.utils.simple_profiler.SimpleProfilerReal.print_stats", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.modules.auxiliary_losses.AuxiliaryLosses.to", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.save_path_overlays", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.goal_visible", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.interactive.instruction_display.InstructionDisplay.tick", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.meter_server.get_current_meters", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_inputs_batch", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.meters_and_metrics.moving_average.MovingAverageMeter.put", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_wrapper_bidomain.PVN_Wrapper_Bidomain.parameters"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", ",", "halfway", "=", "False", ",", "grad_noise", "=", "False", ",", "disable_losses", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "prof", ".", "tick", "(", "\"out\"", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "print", "(", "\"Skipping None Batch\"", ")", "\n", "zero", "=", "torch", ".", "zeros", "(", "[", "1", "]", ")", ".", "float", "(", ")", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "return", "zero", ",", "self", ".", "tensor_store", "\n", "\n", "", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "plan_mask", ",", "firstseg_mask", ",", "start_poses", ",", "noisy_start_poses", ",", "metadata", "=", "self", ".", "unbatch", "(", "batch", ",", "halfway", "=", "halfway", ")", "\n", "self", ".", "prof", ".", "tick", "(", "\"unbatch_inputs\"", ")", "\n", "\n", "# ----------------------------------------------------------------------------", "\n", "_", "=", "self", "(", "images", ",", "states", ",", "instructions", ",", "instr_len", ",", "\n", "plan", "=", "plan_mask", ",", "firstseg", "=", "firstseg_mask", ",", "\n", "noisy_start_poses", "=", "start_poses", "if", "eval", "else", "noisy_start_poses", ",", "\n", "start_poses", "=", "start_poses", ",", "\n", "select_only", "=", "True", ",", "\n", "halfway", "=", "halfway", ",", "\n", "grad_noise", "=", "grad_noise", ")", "\n", "# ----------------------------------------------------------------------------", "\n", "\n", "if", "self", ".", "should_save_path_overlays", ":", "\n", "            ", "self", ".", "save_path_overlays", "(", "metadata", ")", "\n", "\n", "# If we run the model halfway, we only need to calculate features needed for the wasserstein loss", "\n", "# If we want to include more features in wasserstein critic, have to run the forward pass a bit further", "\n", "", "if", "halfway", "and", "not", "halfway", "==", "\"v2\"", ":", "\n", "            ", "return", "None", ",", "self", ".", "tensor_store", "\n", "\n", "# The returned values are not used here - they're kept in the tensor store which is used as an input to a loss", "\n", "", "self", ".", "prof", ".", "tick", "(", "\"call\"", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "# Calculate goal-prediction accuracy:", "\n", "            ", "goal_pos", "=", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"goal_pos_map\"", ",", "cat_not_stack", "=", "True", ")", "\n", "success_goal", "=", "self", ".", "goal_good_criterion", "(", "\n", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"log_v_dist_w_select\"", ",", "cat_not_stack", "=", "True", ")", ",", "\n", "goal_pos", "\n", ")", "\n", "acc", "=", "1.0", "if", "success_goal", "else", "0.0", "\n", "self", ".", "goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "goal_visible", "=", "self", ".", "goal_visible", "(", "self", ".", "tensor_store", ".", "get_inputs_batch", "(", "\"M_w\"", ",", "cat_not_stack", "=", "True", ")", ",", "goal_pos", ")", "\n", "if", "goal_visible", ":", "\n", "                ", "self", ".", "visible_goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "invisible_goal_acc_meter", ".", "put", "(", "acc", ")", "\n", "", "self", ".", "visible_goal_frac_meter", ".", "put", "(", "1.0", "if", "goal_visible", "else", "0.0", ")", "\n", "\n", "self", ".", "correct_goals", "+=", "acc", "\n", "self", ".", "total_goals", "+=", "1", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"goal_acc\"", ")", "\n", "\n", "", "if", "halfway", "==", "\"v2\"", ":", "\n", "            ", "disable_losses", "=", "[", "\"visitation_dist\"", ",", "\"lang\"", "]", "\n", "\n", "", "losses", ",", "metrics", "=", "self", ".", "losses", ".", "calculate_aux_loss", "(", "tensor_store", "=", "self", ".", "tensor_store", ",", "reduce_average", "=", "True", ",", "disable_losses", "=", "disable_losses", ")", "\n", "loss", "=", "self", ".", "losses", ".", "combine_losses", "(", "losses", ",", "self", ".", "aux_weights", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"calc_losses\"", ")", "\n", "\n", "prefix", "=", "self", ".", "model_name", "+", "(", "\"/eval\"", "if", "eval", "else", "\"/train\"", ")", "\n", "iteration", "=", "self", ".", "get_iter", "(", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "get_current_meters", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "losses", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_dict", "(", "prefix", ",", "metrics", ",", "iteration", ")", "\n", "\n", "if", "not", "halfway", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/goal_accuracy\"", ",", "self", ".", "goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/visible_goal_accuracy\"", ",", "self", ".", "visible_goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/invisible_goal_accuracy\"", ",", "self", ".", "invisible_goal_acc_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "prefix", "+", "\"/visible_goal_fraction\"", ",", "self", ".", "visible_goal_frac_meter", ".", "get", "(", ")", ",", "iteration", ")", "\n", "\n", "", "self", ".", "inc_iter", "(", ")", "\n", "\n", "self", ".", "prof", ".", "tick", "(", "\"summaries\"", ")", "\n", "self", ".", "prof", ".", "loop", "(", ")", "\n", "self", ".", "prof", ".", "print_stats", "(", "1", ")", "\n", "\n", "return", "loss", ",", "self", ".", "tensor_store", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.get_dataset": [[674, 713], ["learning.datasets.segment_dataset_simple.SegmentDataset", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "print", "data_sources.append", "print", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "data_sources.append", "parameters.parameter_server.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "domain", "=", "None", ",", "dataset_names", "=", "None", ",", "dataset_prefix", "=", "None", ",", "eval", "=", "False", ",", "halfway_only", "=", "False", ")", ":", "\n", "# TODO: Maybe use eval here", "\n", "        ", "data_sources", "=", "[", "]", "\n", "# If we're running auxiliary objectives, we need to include the data sources for the auxiliary labels", "\n", "#if self.use_aux_class_features or self.use_aux_class_on_map or self.use_aux_grounding_features or self.use_aux_grounding_on_map:", "\n", "#if self.use_aux_goal_on_map:", "\n", "if", "not", "halfway_only", ":", "\n", "            ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LM_POS_DATA", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_GOAL_POS", ")", "\n", "\n", "# Adding these in this order will compute poses with added noise and compute trajectory ground truth", "\n", "# in the reference frame of these noisy poses", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_START_POSES", ")", "\n", "\n", "if", "self", ".", "do_perturb_maps", ":", "\n", "                ", "print", "(", "\"PERTURBING MAPS!\"", ")", "\n", "# TODO: The noisy poses from the provider are not actually used!! Those should replace states instead!", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "# TODO: Think this through. Perhaps we actually want dynamic ground truth given a noisy start position", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC_NOISY", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"NOT Perturbing Maps!\"", ")", "\n", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_NOISY_POSES", ")", "\n", "if", "self", ".", "params", "[", "\"predict_in_start_frame\"", "]", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_STATIC", ")", "\n", "", "else", ":", "\n", "                    ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_TRAJECTORY_GROUND_TRUTH_DYNAMIC", ")", "\n", "\n", "", "", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANDMARKS_MENTIONED", ")", "\n", "\n", "templates", "=", "get_current_parameters", "(", ")", "[", "\"Environment\"", "]", "[", "\"templates\"", "]", "\n", "if", "templates", ":", "\n", "                ", "data_sources", ".", "append", "(", "aup", ".", "PROVIDER_LANG_TEMPLATE", ")", "\n", "\n", "\n", "", "", "return", "SegmentDataset", "(", "data", "=", "data", ",", "env_list", "=", "envs", ",", "domain", "=", "domain", ",", "dataset_names", "=", "dataset_names", ",", "dataset_prefix", "=", "dataset_prefix", ",", "aux_provider_names", "=", "data_sources", ",", "segment_level", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.__init__": [[58, 131], ["torch.nn.Module.__init__", "tensorboardX.SummaryWriter", "learning.modules.resnet.resnet_13_light.ResNet13Light", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "learning.modules.gather_2d.Gather2D", "print", "print", "print", "print", "data_io.weights.enable_weight_saving", "data_io.weights.enable_weight_saving", "data_io.weights.enable_weight_saving", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout3d", "torch.nn.Dropout3d", "learning.modules.rss.map_lang_semantic_filter.MapLangSemanticFilter", "torch.nn.Linear", "torch.nn.Linear", "data_io.weights.enable_weight_saving", "data_io.weights.enable_weight_saving", "learning.modules.resnet.resnet_conditional.ResNetConditional", "learning.modules.unet.unet_5_contextual_bneck3.Unet5ContextualBneck", "learning.modules.sentence_embeddings.sentence_embedding_self_attention.SentenceEmbeddingSelfAttention", "learning.modules.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple", "torch.nn.Linear", "torch.nn.Linear", "data_io.weights.enable_weight_saving", "learning.utils.get_n_params", "learning.utils.get_n_params", "torch.nn.NLLLoss2d", "torch.nn.NLLLoss2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "learning.modules.spatial_softmax_2d.SpatialSoftmax2d", "learning.modules.crossentropy2d.CrossEntropy2d", "torch.nn.MSELoss", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.weights.enable_weight_saving", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params", "home.repos.pwc.inspect_result.clic-lab_drif.learning.utils.get_n_params"], ["    ", "def", "__init__", "(", "self", ",", "run_name", ",", "ignore_lang", "=", "False", ",", "class_loss", "=", "True", ",", "ground_loss", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModelTopDownPathGoalPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "model_name", "=", "\"top_down_path_pred_pretrain\"", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "\"runs/\"", "+", "run_name", ")", "\n", "\n", "self", ".", "ignore_lang", "=", "ignore_lang", "\n", "self", ".", "class_loss", "=", "class_loss", "\n", "self", ".", "ground_loss", "=", "ground_loss", "\n", "\n", "# The feature net extracts the 2D feature map from the input image.", "\n", "# The label_pool down-sizes the ground-truth labels, which are input at the same size as the input image", "\n", "# The output predicted labels are the size of the feature map", "\n", "self", ".", "feature_net", "=", "ResNet13Light", "(", "32", ",", "down_pad", "=", "True", ")", "\n", "self", ".", "label_pool", "=", "nn", ".", "MaxPool2d", "(", "8", ")", "\n", "\n", "if", "self", ".", "ground_loss", ":", "\n", "            ", "self", ".", "lang_filter", "=", "MapLangSemanticFilter", "(", "sentence_embedding_size", ",", "32", ",", "3", ")", "\n", "self", ".", "aux_ground_linear", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "enable_weight_saving", "(", "self", ".", "lang_filter", ",", "\"ground_filter\"", ")", "\n", "enable_weight_saving", "(", "self", ".", "aux_ground_linear", ",", "\"ground_aux_linear\"", ")", "\n", "\n", "", "if", "RESNET", ":", "\n", "            ", "self", ".", "unet", "=", "ResNetConditional", "(", "sentence_embedding_size", ",", "35", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "unet_c_in", "=", "35", "if", "self", ".", "ground_loss", "else", "32", "\n", "unet_hc1", "=", "48", "if", "self", ".", "ground_loss", "else", "48", "\n", "unet_hb1", "=", "24", "if", "self", ".", "ground_loss", "else", "24", "\n", "self", ".", "unet", "=", "Unet5ContextualBneck", "(", "unet_c_in", ",", "2", ",", "sentence_embedding_size", ",", "hc1", "=", "unet_hc1", ",", "hb1", "=", "unet_hb1", ",", "hc2", "=", "128", ",", "split_embedding", "=", "splitemb", ")", "\n", "\n", "", "if", "attention", ":", "\n", "            ", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSelfAttention", "(", "\n", "word_embedding_size", ",", "lstm_size", ",", "sentence_embedding_layers", ",", "attention_heads", "=", "attention_heads", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sentence_embedding", "=", "SentenceEmbeddingSimple", "(", "word_embedding_size", ",", "sentence_embedding_size", ",", "sentence_embedding_layers", ")", "\n", "\n", "", "self", ".", "gather2d", "=", "Gather2D", "(", ")", "\n", "\n", "if", "self", ".", "class_loss", ":", "\n", "            ", "self", ".", "aux_class_linear", "=", "nn", ".", "Linear", "(", "32", ",", "64", ")", "\n", "enable_weight_saving", "(", "self", ".", "aux_class_linear", ",", "\"class_aux_linear\"", ")", "\n", "\n", "", "print", "(", "\"Sentence Embedding #Params: \"", ",", "get_n_params", "(", "self", ".", "sentence_embedding", ")", ")", "\n", "print", "(", "\"U-Net #Params: \"", ",", "get_n_params", "(", "self", ".", "unet", ")", ")", "\n", "print", "(", "\"Class auxiliary: \"", ",", "self", ".", "class_loss", ")", "\n", "print", "(", "\"Ground auxiliary: \"", ",", "self", ".", "ground_loss", ")", "\n", "\n", "# Enable saving of pre-trained weights", "\n", "enable_weight_saving", "(", "self", ".", "feature_net", ",", "\"feature_resnet_light\"", ")", "\n", "enable_weight_saving", "(", "self", ".", "unet", ",", "\"unet\"", ")", "\n", "enable_weight_saving", "(", "self", ".", "sentence_embedding", ",", "\"sentence_embedding\"", ")", "\n", "\n", "if", "NLL", ":", "\n", "#self.mask_loss = nn.BCELoss()", "\n", "            ", "self", ".", "mask_loss", "=", "nn", ".", "NLLLoss2d", "(", ")", "\n", "", "elif", "BCE", ":", "\n", "            ", "self", ".", "mask_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "CE", ":", "\n", "            ", "self", ".", "spatialsoftmax", "=", "SpatialSoftmax2d", "(", ")", "\n", "self", ".", "mask_loss", "=", "CrossEntropy2d", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "", "self", ".", "aux_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduce", "=", "True", ",", "size_average", "=", "True", ")", "\n", "self", ".", "epoch_numbers", "=", "{", "\"train\"", ":", "0", ",", "\"eval\"", ":", "0", "}", "\n", "self", ".", "iter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2d", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dropout3d", "=", "nn", ".", "Dropout3d", "(", "0.5", ")", "\n", "\n", "self", ".", "viz_images", "=", "[", "]", "\n", "self", ".", "instructions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter": [[133, 135], ["int"], "methods", ["None"], ["", "def", "get_iter", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "iter", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter": [[136, 138], ["None"], "methods", ["None"], ["", "def", "inc_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights": [[139, 148], ["top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sentence_embedding.init_weights", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.unet.init_weights", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_ground_linear.weight.data.normal_", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_ground_linear.bias.data.fill_", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_class_linear.weight.data.normal_", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_class_linear.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "sentence_embedding", ".", "init_weights", "(", ")", "\n", "self", ".", "unet", ".", "init_weights", "(", ")", "\n", "if", "self", ".", "ground_loss", ":", "\n", "            ", "self", ".", "aux_ground_linear", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "aux_ground_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "if", "self", ".", "class_loss", ":", "\n", "            ", "self", ".", "aux_class_linear", ".", "weight", ".", "data", ".", "normal_", "(", "0.001", ")", "\n", "self", ".", "aux_class_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.write_eoe_summaries": [[149, 151], ["None"], "methods", ["None"], ["", "", "def", "write_eoe_summaries", "(", "self", ",", "inference_type", ",", "epoch_num", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.write_summaires": [[152, 164], ["top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.writer.add_scalar", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.writer.add_scalar", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.writer.add_scalar", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.writer.add_scalar", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar"], ["", "def", "write_summaires", "(", "self", ",", "prefix", ",", "idx", ",", "total_loss", ",", "main_loss", ",", "emb_loss", ",", "class_loss", ",", "gnd_loss", ")", ":", "\n", "        ", "full_prefix", "=", "self", ".", "model_name", "+", "\"/\"", "+", "prefix", "+", "\"/\"", "\n", "if", "self", ".", "writer", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"total_loss\"", ",", "total_loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"main_loss\"", ",", "main_loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"class_loss\"", ",", "class_loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "if", "class_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"emb_loss\"", ",", "emb_loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "", "if", "gnd_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "full_prefix", "+", "\"gnd_loss\"", ",", "gnd_loss", ".", "data", "[", "0", "]", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_dataset": [[165, 177], ["learning.datasets.top_down_dataset.TopDownDataset"], "methods", ["None"], ["", "", "def", "get_dataset", "(", "self", ",", "data", "=", "None", ",", "envs", "=", "None", ",", "eval", "=", "False", ",", "dataset_name", "=", "None", ",", "seg_level", "=", "True", ")", ":", "\n", "        ", "return", "TopDownDataset", "(", "env_list", "=", "envs", ",", "\n", "instr_negatives", "=", "False", ",", "\n", "instr_negatives_similar_only", "=", "False", ",", "\n", "seg_level", "=", "seg_level", ",", "\n", "yaw_rand_range", "=", "0.0", "if", "eval", "else", "YAW_RANGE", ",", "\n", "img_w", "=", "512", ",", "\n", "img_h", "=", "512", ",", "\n", "map_w", "=", "256", ",", "\n", "map_h", "=", "256", ",", "\n", "incl_path", "=", "True", ",", "\n", "incl_endpoint", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_viz": [[178, 193], ["visualization.Presenter", "enumerate", "data_io.instructions.debug_untokenize_instruction", "visualization.Presenter.overlay_text", "out[].append", "len", "list", "list.view", "list.data.cpu().numpy().squeeze", "list.data.cpu().numpy", "list.data.cpu"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.debug_untokenize_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlay_text", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu"], ["", "def", "get_viz", "(", "self", ")", ":", "\n", "        ", "presenter", "=", "Presenter", "(", ")", "\n", "out", "=", "{", "\n", "\"viz_img\"", ":", "[", "]", "\n", "}", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "self", ".", "viz_images", ")", ":", "\n", "            ", "instruction", "=", "self", ".", "instructions", "[", "i", "]", "\n", "if", "len", "(", "instruction", ".", "view", "(", "[", "-", "1", "]", ")", ")", "<", "2", ":", "\n", "                ", "instruction", "=", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "instruction", "=", "list", "(", "instruction", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "", "instruction_str", "=", "debug_untokenize_instruction", "(", "instruction", ")", "\n", "viz_img", "=", "presenter", ".", "overlay_text", "(", "img", ",", "instruction_str", ")", "\n", "out", "[", "\"viz_img\"", "]", ".", "append", "(", "viz_img", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.forward": [[194, 222], ["top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sentence_embedding", "learning.inputs.common.cuda_var", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.feature_net", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.dropout2d", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.unet", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.lang_filter.precompute_conv_weights", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.lang_filter", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.rss.map_lang_semantic_filter.MapLangSemanticFilter.precompute_conv_weights"], ["", "def", "forward", "(", "self", ",", "images", ",", "instructions", ",", "instruction_masks", ")", ":", "\n", "        ", "emb", "=", "self", ".", "sentence_embedding", "(", "instructions", ",", "torch", ".", "sum", "(", "instruction_masks", ",", "1", ")", ")", "\n", "\n", "# If the embedding returns an internal auxiliary, loss, pass it along", "\n", "emb_loss", "=", "cuda_var", "(", "torch", ".", "zeros", "(", "[", "1", "]", ")", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "if", "type", "(", "emb", ")", "is", "tuple", ":", "\n", "            ", "emb", ",", "emb_loss", "=", "emb", "\n", "\n", "", "feature_map", "=", "self", ".", "feature_net", "(", "images", ")", "\n", "feature_map", "=", "self", ".", "dropout2d", "(", "feature_map", ")", "\n", "\n", "if", "self", ".", "ground_loss", ":", "\n", "            ", "self", ".", "lang_filter", ".", "precompute_conv_weights", "(", "emb", ")", "\n", "ground_map", "=", "self", ".", "lang_filter", "(", "feature_map", ")", "\n", "feature_map", "=", "torch", ".", "cat", "(", "[", "feature_map", ",", "ground_map", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# TODO: Testing breaking of gradients between ResNet and UNet", "\n", "", "if", "cut_gradients", ":", "\n", "            ", "feature_map_fwd", "=", "Variable", "(", "feature_map", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "feature_map_fwd", "=", "feature_map", "\n", "\n", "#if self.ground_loss:", "\n", "#    feature_map_fwd = feature_map_fwd[:, 0:3, :, :]", "\n", "\n", "", "pred_mask", "=", "self", ".", "unet", "(", "feature_map_fwd", ",", "emb", ")", "\n", "\n", "return", "pred_mask", ",", "feature_map", ",", "emb_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sup_loss_on_batch": [[223, 333], ["learning.inputs.common.cuda_var", "learning.inputs.common.cuda_var", "learning.inputs.common.cuda_var", "learning.inputs.common.cuda_var", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.label_pool", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.", "range", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.write_summaires", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.eval", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.train", "learning.inputs.common.empty_float_tensor", "learning.inputs.common.empty_float_tensor", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.view", "label_masks_flat.view().clamp.view().clamp.view().clamp", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.mask_loss", "type", "sum", "visualization.Presenter", "visualization.Presenter.overlaid_image", "visualization.Presenter.overlaid_image", "numpy.concatenate", "visualization.Presenter.show_image", "hasattr", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "torch.min", "torch.min", "torch.min", "torch.min", "torch.softmax", "torch.softmax", "mask_pred_1.unsqueeze.unsqueeze.unsqueeze", "mask_pred_2.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "label_masks.type.type.clamp", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.mask_loss", "learning.inputs.common.cuda_var", "learning.inputs.common.cuda_var", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.gather2d", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_class_linear", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_loss", "learning.inputs.common.cuda_var", "learning.inputs.common.cuda_var", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.gather2d", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_ground_linear", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.aux_loss", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.sentence_embedding.save_att_map", "torch.max", "torch.max", "torch.max", "torch.max", "label_masks_flat.view().clamp.view().clamp.view", "label_masks.type.type.type", "label_masks.type.type.type", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.mask_loss", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.spatialsoftmax", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.mask_loss", "len", "len", "top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.write_summaires", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.inc_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.common.empty_float_tensor", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.overlaid_image", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.softmax", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.models.model_pvn_original_stage1_bidomain.PVN_Stage1_Bidomain.cuda_var", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_self_attention.SentenceEmbeddingSelfAttention.save_att_map", "home.repos.pwc.inspect_result.clic-lab_drif.supervised.top_down_path_goal_predictor_pretrain_batched.ModelTopDownPathGoalPredictor.get_iter"], ["", "def", "sup_loss_on_batch", "(", "self", ",", "batch", ",", "eval", "=", "False", ",", "viz", "=", "False", ")", ":", "\n", "\n", "        ", "if", "eval", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "\n", "", "images", "=", "cuda_var", "(", "batch", "[", "\"images\"", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "instructions", "=", "cuda_var", "(", "batch", "[", "\"instr\"", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "instruction_masks", "=", "cuda_var", "(", "batch", "[", "\"instr_mask\"", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "label_masks", "=", "cuda_var", "(", "batch", "[", "\"traj_labels\"", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "\n", "# Each of the above is a list of lists of tensors, where the outer list is over the batch and the inner list", "\n", "# is over the segments. Loop through and accumulate loss for each batch sequentially, and for each segment.", "\n", "# Reset model state (embedding etc) between batches, but not between segments.", "\n", "# We don't process each batch in batch-mode, because it's complicated, with the varying number of segments and all.", "\n", "\n", "batch_size", "=", "len", "(", "images", ")", "\n", "total_class_loss", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ",", "requires_grad", "=", "True", ")", "\n", "total_ground_loss", "=", "Variable", "(", "empty_float_tensor", "(", "[", "1", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", ",", "requires_grad", "=", "True", ")", "\n", "count", "=", "0", "\n", "\n", "label_masks", "=", "self", ".", "label_pool", "(", "label_masks", ")", "\n", "mask_pred", ",", "features", ",", "emb_loss", "=", "self", "(", "images", ",", "instructions", ",", "instruction_masks", ")", "\n", "\n", "\n", "if", "BCE", ":", "\n", "            ", "mask_pred_flat", "=", "mask_pred", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "label_masks_flat", "=", "label_masks", "-", "torch", ".", "min", "(", "label_masks", ")", "\n", "label_masks_flat", "=", "label_masks_flat", "/", "(", "torch", ".", "max", "(", "label_masks_flat", ")", "+", "1e-9", ")", "\n", "label_masks_flat", "=", "label_masks_flat", ".", "view", "(", "-", "1", ",", "1", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "main_loss", "=", "self", ".", "mask_loss", "(", "mask_pred_flat", ",", "label_masks_flat", ")", "\n", "\n", "", "elif", "NLL", ":", "\n", "            ", "mask_pred_1", "=", "F", ".", "softmax", "(", "mask_pred", ",", "1", ",", "_stacklevel", "=", "5", ")", "\n", "mask_pred_2", "=", "1", "-", "mask_pred_1", "\n", "mask_pred_1", "=", "mask_pred_1", ".", "unsqueeze", "(", "1", ")", "\n", "mask_pred_2", "=", "mask_pred_2", ".", "unsqueeze", "(", "1", ")", "\n", "mask_pred", "=", "torch", ".", "cat", "(", "(", "mask_pred_1", ",", "mask_pred_2", ")", ",", "dim", "=", "1", ")", "\n", "label_masks", "=", "label_masks", ".", "clamp", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "label_masks", "=", "label_masks", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "", "else", ":", "\n", "                ", "label_masks", "=", "label_masks", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "", "main_loss", "=", "self", ".", "mask_loss", "(", "mask_pred", ",", "label_masks", ")", "\n", "\n", "", "elif", "CE", ":", "\n", "# Crossentropy2D internally applies logsoftmax to mask_pred,", "\n", "# but labels are already assumed to be a valid probability distribution, so no softmax is applied", "\n", "            ", "main_loss", "=", "self", ".", "mask_loss", "(", "mask_pred", ",", "label_masks", ")", "\n", "# So for nice plotting, we must manually do it", "\n", "mask_pred", "=", "self", ".", "spatialsoftmax", "(", "mask_pred", ")", "\n", "", "else", ":", "\n", "            ", "main_loss", "=", "self", ".", "mask_loss", "(", "mask_pred", ",", "label_masks", ")", "\n", "\n", "\n", "\n", "# sum emb loss if batch size > 1", "\n", "", "if", "type", "(", "emb_loss", ")", "==", "tuple", ":", "\n", "            ", "emb_loss", "=", "sum", "(", "emb_loss", ")", "\n", "\n", "# Extract the feature vectors corresponding to every landmark's location in the map", "\n", "# Apply a linear layer to classify which of the 64 landmarks it is", "\n", "# The landmark positions have to be divided by the same factor as the ResNet scaling factor", "\n", "", "lcount", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "self", ".", "class_loss", "and", "len", "(", "batch", "[", "\"lm_pos\"", "]", "[", "i", "]", ")", ">", "0", ":", "\n", "                ", "lcount", "+=", "1", "\n", "landmark_pos", "=", "cuda_var", "(", "batch", "[", "\"lm_pos\"", "]", "[", "i", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "landmark_indices", "=", "cuda_var", "(", "batch", "[", "\"lm_indices\"", "]", "[", "i", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "landmark_coords", "=", "(", "landmark_pos", "/", "8", ")", ".", "long", "(", ")", "\n", "lm_features", "=", "self", ".", "gather2d", "(", "features", "[", "i", ":", "i", "+", "1", ",", "0", ":", "32", "]", ",", "landmark_coords", ")", "\n", "lm_pred", "=", "self", ".", "aux_class_linear", "(", "lm_features", ")", "\n", "class_loss", "=", "self", ".", "aux_loss", "(", "lm_pred", ",", "landmark_indices", ")", "\n", "total_class_loss", "=", "total_class_loss", "+", "class_loss", "\n", "\n", "", "if", "self", ".", "ground_loss", "and", "len", "(", "batch", "[", "\"lm_pos\"", "]", "[", "i", "]", ")", ">", "0", ":", "\n", "                 ", "landmark_pos", "=", "cuda_var", "(", "batch", "[", "\"lm_pos\"", "]", "[", "i", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "landmark_mentioned", "=", "cuda_var", "(", "batch", "[", "\"lm_mentioned\"", "]", "[", "i", "]", ",", "self", ".", "is_cuda", ",", "self", ".", "cuda_device", ")", "\n", "landmark_coords", "=", "(", "landmark_pos", "/", "8", ")", ".", "long", "(", ")", "\n", "g_features", "=", "self", ".", "gather2d", "(", "features", "[", "i", ":", "i", "+", "1", ",", "32", ":", "35", "]", ",", "landmark_coords", ")", "\n", "lm_pred", "=", "self", ".", "aux_ground_linear", "(", "g_features", ")", "\n", "ground_loss", "=", "self", ".", "aux_loss", "(", "lm_pred", ",", "landmark_mentioned", ")", "\n", "total_ground_loss", "=", "total_ground_loss", "+", "ground_loss", "\n", "\n", "", "", "total_class_loss", "=", "total_class_loss", "/", "(", "lcount", "+", "1e-9", ")", "\n", "total_ground_loss", "=", "total_ground_loss", "/", "(", "lcount", "+", "1e-9", ")", "\n", "count", "+=", "1", "\n", "\n", "# Just visualization and debugging code", "\n", "if", "self", ".", "get_iter", "(", ")", "%", "50", "==", "0", ":", "\n", "            ", "presenter", "=", "Presenter", "(", ")", "\n", "pred_viz_np", "=", "presenter", ".", "overlaid_image", "(", "images", "[", "0", "]", ".", "data", ",", "mask_pred", "[", "0", "]", ".", "data", ")", "\n", "labl_viz_np", "=", "presenter", ".", "overlaid_image", "(", "images", "[", "0", "]", ".", "data", ",", "label_masks", "[", "0", "]", ".", "data", ")", "\n", "comp", "=", "np", ".", "concatenate", "(", "(", "pred_viz_np", ",", "labl_viz_np", ")", ",", "axis", "=", "1", ")", "\n", "presenter", ".", "show_image", "(", "comp", ",", "\"path_pred\"", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "sentence_embedding", ",", "\"save_att_map\"", ")", ":", "\n", "                ", "self", ".", "sentence_embedding", ".", "save_att_map", "(", "self", ".", "get_iter", "(", ")", ",", "i", ")", "\n", "\n", "", "", "total_loss", "=", "main_loss", "+", "0.1", "*", "total_class_loss", "+", "0.001", "*", "emb_loss", "+", "0.1", "*", "total_ground_loss", "\n", "total_loss", "=", "total_loss", "/", "(", "count", "+", "1e-9", ")", "\n", "\n", "self", ".", "write_summaires", "(", "\"eval\"", "if", "eval", "else", "\"train\"", ",", "self", ".", "get_iter", "(", ")", ",", "\n", "total_loss", ",", "main_loss", ",", "emb_loss", ",", "\n", "total_class_loss", ",", "\n", "total_ground_loss", ")", "\n", "self", ".", "inc_iter", "(", ")", "\n", "\n", "return", "total_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.map_coverage_reward.MapCoverageReward.__init__": [[6, 11], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MapCoverageReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.map_key = map_key", "\n", "#self.threshold = threshold", "\n", "self", ".", "prev_potential", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.map_coverage_reward.MapCoverageReward.reset": [[12, 14], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_potential", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.map_coverage_reward.MapCoverageReward.get_reward": [[15, 28], ["torch.ones_like", "coverage_w.sum", "torch.ones_like.sum"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "coverage_w", ")", ":", "\n", "#map = tensor_store.get_latest_input(self.map_key)", "\n", "#ones_mask = (map != -1000).long()", "\n", "#coverage_mask = (map.abs() > self.threshold).long()", "\n", "        ", "ones_mask", "=", "torch", ".", "ones_like", "(", "coverage_w", ")", "\n", "frac_coverage", "=", "coverage_w", ".", "sum", "(", ")", "/", "(", "ones_mask", ".", "sum", "(", ")", "+", "1e-20", ")", "\n", "\n", "if", "self", ".", "prev_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_potential", "=", "frac_coverage", "\n", "\n", "", "reward", "=", "(", "frac_coverage", "-", "self", ".", "prev_potential", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "prev_potential", "=", "frac_coverage", "\n", "return", "reward", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.correct_goal_prediction_reward.CorrectGoalPredictionReward.__init__": [[6, 10], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "distribution_key", ",", "channel", "=", "None", ")", ":", "\n", "        ", "super", "(", "CorrectGoalPredictionReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "distribution_key", "=", "distribution_key", "\n", "self", ".", "channel", "=", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.correct_goal_prediction_reward.CorrectGoalPredictionReward.get_reward": [[11, 20], ["tensor_store.get_latest_input"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input"], ["", "def", "get_reward", "(", "self", ",", "tensor_store", ")", ":", "\n", "        ", "v_dist", "=", "tensor_store", ".", "get_latest_input", "(", "self", ".", "distribution_key", ")", "\n", "if", "self", ".", "channel", ":", "\n", "            ", "goal_dist", "=", "v_dist", "[", ":", ",", "self", ".", "channel", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "goal_dist", "=", "v_dist", "\n", "\n", "# TODO: Complete this", "\n", "", "return", "entropy", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.distribution_entropy_reward.DistributionEntropyReward.__init__": [[6, 10], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "distribution_key", ",", "channel", "=", "None", ")", ":", "\n", "        ", "super", "(", "DistributionEntropyReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "distribution_key", "=", "distribution_key", "\n", "self", ".", "channel", "=", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.distribution_entropy_reward.DistributionEntropyReward.get_reward": [[11, 18], ["tensor_store.get_latest_input", "torch.sum", "torch.log"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.get_latest_input", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log"], ["", "def", "get_reward", "(", "self", ",", "tensor_store", ")", ":", "\n", "        ", "v_dist", "=", "tensor_store", ".", "get_latest_input", "(", "self", ".", "distribution_key", ")", "\n", "if", "self", ".", "channel", ":", "\n", "            ", "v_dist", "=", "v_dist", "[", ":", ",", "self", ".", "channel", ",", ":", ",", ":", "]", "\n", "\n", "", "entropy", "=", "-", "torch", ".", "sum", "(", "v_dist", "*", "torch", ".", "log", "(", "v_dist", ")", ")", "\n", "return", "entropy", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.__init__": [[12, 35], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution", "strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.compute_distance_matrix"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.compute_distance_matrix"], ["    ", "def", "__init__", "(", "self", ",", "world_size_m", ",", "world_size_px", ",", "params", ")", ":", "\n", "        ", "super", "(", "WDVisitationAndExplorationReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "start_best_stop_dist", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "self", ".", "prev_goal_observed_prob", "=", "None", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "visit_alpha", "=", "params", ".", "get", "(", "\"visit_alpha\"", ",", "0.3", ")", "\n", "self", ".", "stop_alpha", "=", "params", ".", "get", "(", "\"stop_alpha\"", ",", "0.5", ")", "\n", "self", ".", "stop_p_alpha", "=", "params", ".", "get", "(", "\"stop_p_alpha\"", ",", "0.5", ")", "\n", "self", ".", "exploration_alpha", "=", "params", ".", "get", "(", "\"exploration_alpha\"", ",", "3.0", ")", "\n", "self", ".", "stop_oob_alpha", "=", "params", ".", "get", "(", "\"stop_oob_alpha\"", ",", "1.0", ")", "\n", "self", ".", "strict", "=", "params", ".", "get", "(", "\"strict\"", ",", "False", ")", "\n", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "distance_matrix", "=", "self", ".", "compute_distance_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.compute_distance_matrix": [[36, 46], ["numpy.linspace", "numpy.asarray", "coords_grid.transpose.transpose.transpose", "numpy.reshape", "numpy.tile", "numpy.tile.transpose", "numpy.linalg.norm", "numpy.meshgrid"], "methods", ["None"], ["", "def", "compute_distance_matrix", "(", "self", ")", ":", "\n", "        ", "coords_vec", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "world_size_px", "-", "1", ",", "self", ".", "world_size_px", ")", "\n", "coords_grid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "coords_vec", ",", "coords_vec", ")", ")", "\n", "coords_grid", "=", "coords_grid", "[", "[", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "coords_grid", "=", "coords_grid", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "coords_grid_flat", "=", "np", ".", "reshape", "(", "coords_grid", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "pt_mat_a", "=", "np", ".", "tile", "(", "coords_grid_flat", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "coords_grid_flat", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "pt_mat_b", "=", "pt_mat_a", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "pt_mat_a", "-", "pt_mat_b", ",", "axis", "=", "2", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.reset": [[47, 53], ["strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.wasserstein_distance": [[54, 70], ["dist_a.reshape", "dist_b.reshape", "q_flat.astype.astype.astype", "p_flat.astype.astype.astype", "q_flat.astype.astype.sum", "p_flat.astype.astype.sum", "ot.emd"], "methods", ["None"], ["", "def", "wasserstein_distance", "(", "self", ",", "dist_a", ",", "dist_b", ")", ":", "\n", "#start = time.time()", "\n", "        ", "p_flat", "=", "dist_a", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "q_flat", "=", "dist_b", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "\n", "q_flat", "=", "q_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "p_flat", "=", "p_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "q_flat", "/=", "q_flat", ".", "sum", "(", ")", "\n", "p_flat", "/=", "p_flat", ".", "sum", "(", ")", "\n", "\n", "ot_plan", ",", "log", "=", "ot", ".", "emd", "(", "p_flat", ",", "q_flat", ",", "self", ".", "distance_matrix", ",", "log", "=", "True", ",", "numItermax", "=", "10000", ")", "\n", "wd", "=", "log", "[", "\"cost\"", "]", "\n", "#end=time.time()", "\n", "#print(f\"Time taken: {end - start}\")", "\n", "return", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution": [[71, 73], ["numpy.zeros"], "methods", ["None"], ["", "def", "empty_distribution", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "self", ".", "world_size_px", ",", "self", ".", "world_size_px", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.get_reward": [[74, 165], ["learning.plot_path_on_img", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "v_dist_w.outer_prob_mass[].item", "max", "max", "torch.from_numpy", "strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.wasserstein_distance", "v_dist_w.inner_distribution[].detach().cpu().numpy", "learning.plot_path_on_img", "strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.wasserstein_distance", "v_dist_w.inner_distribution[].detach().cpu().numpy", "learning.plot_path_on_img", "strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.wasserstein_distance", "torch.from_numpy", "int", "int", "min", "min", "partial_stop_dist[].item", "transformations.pos_m_to_px", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution", "strict_wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution", "transformations.pos_m_to_px", "max", "max", "pos_in_map_m.detach().cpu().numpy", "v_dist_w.inner_distribution[].detach().cpu", "v_dist_w.inner_distribution[].detach().cpu", "pos_in_map_m.detach().cpu().numpy", "pos_in_map_px[].item", "pos_in_map_px[].item", "v_dist_w.inner_distribution[].detach().cpu().numpy.max", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach", "pos_in_map_m.detach().cpu", "v_dist_w.inner_distribution[].detach", "v_dist_w.inner_distribution[].detach", "pos_in_map_m.detach().cpu", "pos_in_map_m.detach", "pos_in_map_m.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "get_reward", "(", "self", ",", "v_dist_w", ",", "cam_pos", ",", "action", ",", "done", ",", "first", ")", ":", "\n", "# Prepare things", "\n", "        ", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_pos", "is", "None", ":", "\n", "            ", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "", "self", ".", "visited_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "visited_dist", ",", "[", "self", ".", "last_pos", ",", "pos_in_map_px", "]", ")", "\n", "\n", "#Presenter().show_image(self.visited_dist, \"visited_dist\", scale=4, waitkey=1)", "\n", "\n", "visit_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "visit_dist", "=", "visit_dist", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "goal_unobserved_prob", "=", "v_dist_w", ".", "outer_prob_mass", "[", "0", ",", "1", "]", ".", "item", "(", ")", "\n", "goal_observed_prob", "=", "1", "-", "goal_unobserved_prob", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate exploration reward, using probability that goal is observed as a potential function", "\n", "\n", "# Don't ever reduce the potential - only increase it", "\n", "goal_unobserved_potential", "=", "-", "goal_unobserved_prob", "\n", "if", "self", ".", "prev_exploration_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_exploration_potential", "=", "goal_unobserved_potential", "\n", "", "goal_unobserved_potential", "=", "max", "(", "goal_unobserved_potential", ",", "self", ".", "prev_exploration_potential", ")", "\n", "exploration_reward", "=", "(", "goal_unobserved_potential", "-", "self", ".", "prev_exploration_potential", ")", "*", "self", ".", "exploration_alpha", "\n", "self", ".", "prev_exploration_potential", "=", "goal_unobserved_potential", "\n", "\n", "# Strict weight:", "\n", "if", "self", ".", "prev_goal_observed_prob", "is", "None", ":", "\n", "            ", "self", ".", "prev_goal_observed_prob", "=", "goal_observed_prob", "\n", "", "max_goal_observed_prob", "=", "max", "(", "self", ".", "prev_goal_observed_prob", ",", "goal_observed_prob", ")", "\n", "exploration_visit_reward_reweight", "=", "(", "max_goal_observed_prob", "if", "self", ".", "strict", "else", "1", ")", "\n", "self", ".", "prev_goal_observed_prob", "=", "max_goal_observed_prob", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate visitation reward (potential shaped by visitation probability)", "\n", "\n", "# Give reward for visiting the high-probability states at next timestep", "\n", "# TODO: Consider OOB pixel in wasserstein distance", "\n", "visit_potential", "=", "-", "self", ".", "wasserstein_distance", "(", "self", ".", "visited_dist", ",", "visit_dist", ")", "\n", "if", "self", ".", "prev_visit_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "", "visit_reward", "=", "(", "visit_potential", "-", "self", ".", "prev_visit_potential", ")", "*", "self", ".", "visit_alpha", "*", "exploration_visit_reward_reweight", "\n", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate stop reward consisting of EMD(stop,goal), P(stop=goal), and -P(stop_oob)", "\n", "if", "self", ".", "strict", "and", "first", ":", "\n", "            ", "partial_stop_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "1", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stop_dist_if_stopped_immediately", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "empty_distribution", "(", ")", ",", "[", "pos_in_map_px", ",", "pos_in_map_px", "]", ")", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "self", ".", "wasserstein_distance", "(", "partial_stop_dist", ",", "stop_dist_if_stopped_immediately", ")", "\n", "\n", "", "if", "action", "[", "3", "]", ">", "0.5", "or", "done", ":", "\n", "            ", "partial_stop_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "1", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stopped_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "empty_distribution", "(", ")", ",", "[", "pos_in_map_px", ",", "pos_in_map_px", "]", ")", "\n", "stop_wd", "=", "self", ".", "wasserstein_distance", "(", "partial_stop_dist", ",", "stopped_dist", ")", "\n", "if", "self", ".", "strict", ":", "\n", "# Reward given for how much better this stopping position is compared to stopping immediately", "\n", "                ", "stop_reward", "=", "(", "self", ".", "stop_wd_if_stopped_immediately", "-", "stop_wd", ")", "*", "self", ".", "stop_alpha", "*", "exploration_visit_reward_reweight", "\n", "", "else", ":", "\n", "                ", "stop_reward", "=", "-", "stop_wd", "*", "self", ".", "stop_alpha", "\n", "\n", "# Calculate reward proportional to P(p_g = p_stop)", "\n", "", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "\n", "pos_x", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "0", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_y", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "1", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_x", "=", "min", "(", "max", "(", "pos_x", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "pos_y", "=", "min", "(", "max", "(", "pos_y", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "stop_prob_at_pos", "=", "partial_stop_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "stop_prob_prop", "=", "stop_prob_at_pos", "/", "(", "partial_stop_dist", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "stop_p_reward", "=", "stop_prob_prop", "*", "self", ".", "stop_p_alpha", "\n", "\n", "# Add negative reward for stopping when P(goal oob) is high", "\n", "stop_oob_reward", "=", "-", "self", ".", "stop_oob_alpha", "*", "goal_unobserved_prob", "\n", "", "else", ":", "\n", "            ", "stop_reward", "=", "0.0", "\n", "stop_p_reward", "=", "0.0", "\n", "stop_oob_reward", "=", "0.0", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "return", "visit_reward", ",", "stop_reward", ",", "exploration_reward", ",", "stop_oob_reward", ",", "stop_p_reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.visitation_and_exploration_reward.VisitationAndExplorationReward.__init__": [[9, 21], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world_size_m", ",", "world_size_px", ")", ":", "\n", "        ", "super", "(", "VisitationAndExplorationReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "prev_potential", "=", "None", "\n", "self", ".", "start_best_stop_dist", "=", "None", "\n", "self", ".", "prev_goal_visible_prob", "=", "None", "\n", "\n", "self", ".", "visit_alpha", "=", "1.0", "\n", "self", ".", "stop_alpha", "=", "3.0", "\n", "self", ".", "exploration_alpha", "=", "3.0", "\n", "self", ".", "stop_offset", "=", "-", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.visitation_and_exploration_reward.VisitationAndExplorationReward.reset": [[22, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_potential", "=", "None", "\n", "self", ".", "start_best_stop_dist", "=", "None", "\n", "self", ".", "prev_goal_visible_prob", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.visitation_and_exploration_reward.VisitationAndExplorationReward.get_reward": [[27, 106], ["torch.from_numpy", "int", "int", "goal_oob_prob_w.item", "min", "min", "visit_dist.min", "visit_dist[].item", "partial_stop_dist.min", "partial_stop_dist[].item", "partial_stop_dist.view().max", "int", "int", "torch.Tensor", "torch.Tensor", "torch.norm", "transformations.pos_m_to_px", "max", "max", "visit_dist.max", "partial_stop_dist.max", "min", "pos_in_map_m.detach().cpu().numpy", "pos_in_map_px[].item", "pos_in_map_px[].item", "partial_stop_dist.view", "min", "pos_in_map_m.detach().cpu", "pos_in_map_m.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "get_reward", "(", "self", ",", "v_dist_w", ",", "goal_oob_prob_w", ",", "cam_pos", ",", "action", ")", ":", "\n", "# Prepare things", "\n", "        ", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "\n", "\n", "pos_x", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "0", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_y", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "1", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "\n", "visit_dist", "=", "v_dist_w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "partial_stop_dist", "=", "v_dist_w", "[", "0", ",", "1", ",", ":", ",", ":", "]", "\n", "outside_stop_prob", "=", "goal_oob_prob_w", ".", "item", "(", ")", "\n", "goal_visible_prob", "=", "1", "-", "outside_stop_prob", "\n", "\n", "pos_x", "=", "min", "(", "max", "(", "pos_x", ",", "0", ")", ",", "visit_dist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "pos_y", "=", "min", "(", "max", "(", "pos_y", ",", "0", ")", ",", "visit_dist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate visitation reward (potential shaped by visitation probability)", "\n", "\n", "#TODO: Consider this. This way the total reward that can be collected is 1", "\n", "visit_dist", "-=", "visit_dist", ".", "min", "(", ")", "\n", "visit_dist", "/=", "(", "visit_dist", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "visit_prob", "=", "visit_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "\n", "# Give reward for visiting the high-probability states at next timestep", "\n", "visit_potential", "=", "self", ".", "visit_alpha", "*", "visit_prob", "\n", "if", "self", ".", "prev_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_potential", "=", "visit_potential", "\n", "", "visit_reward", "=", "visit_potential", "-", "self", ".", "prev_potential", "\n", "self", ".", "prev_potential", "=", "visit_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate stop reward consisting of 2 terms:", "\n", "#  Term A: Reward proportional to the goal probability", "\n", "#  Term B: Reward proportional to the negative distance to most likely goal location, weighed by the probability that t", "\n", "\n", "# TODO: Consider this re-normalization approach and if it's any good", "\n", "partial_stop_dist", "-=", "partial_stop_dist", ".", "min", "(", ")", "\n", "partial_stop_dist", "/=", "(", "partial_stop_dist", ".", "max", "(", ")", "+", "0.01", ")", "\n", "#partial_stop_dist *= goal_visible_prob", "\n", "\n", "# No batch dimension here:", "\n", "stop_prob_at_pos", "=", "partial_stop_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "max_stop_prob", ",", "argmax_stop_prob", "=", "partial_stop_dist", ".", "view", "(", "-", "1", ")", ".", "max", "(", "0", ")", "\n", "best_stop_pos_x", "=", "int", "(", "argmax_stop_prob", "/", "partial_stop_dist", ".", "shape", "[", "0", "]", ")", "\n", "best_stop_pos_y", "=", "int", "(", "argmax_stop_prob", "%", "partial_stop_dist", ".", "shape", "[", "0", "]", ")", "\n", "\n", "best_stop_pos", "=", "torch", ".", "Tensor", "(", "[", "best_stop_pos_x", ",", "best_stop_pos_y", "]", ")", "\n", "pos", "=", "torch", ".", "Tensor", "(", "[", "pos_x", ",", "pos_y", "]", ")", "\n", "dst_to_best_stop", "=", "torch", ".", "norm", "(", "pos", "-", "best_stop_pos", ")", "\n", "\n", "if", "self", ".", "start_best_stop_dist", "is", "None", ":", "\n", "            ", "self", ".", "start_best_stop_dist", "=", "min", "(", "dst_to_best_stop", ",", "MIN_START_STOP_DIST_PX", ")", "\n", "\n", "", "if", "action", "[", "3", "]", ">", "0.5", ":", "\n", "# Term A", "\n", "            ", "stop_reward_a", "=", "(", "stop_prob_at_pos", "-", "self", ".", "stop_offset", ")", "*", "self", ".", "stop_alpha", "\n", "\n", "# Term B", "\n", "stop_reward_b_raw", "=", "0.2", "-", "min", "(", "dst_to_best_stop", "/", "(", "self", ".", "start_best_stop_dist", "+", "1e-9", ")", ",", "1", ")", "\n", "#stop_reward_b = stop_reward_b_raw * goal_visible_prob", "\n", "stop_reward_b", "=", "stop_reward_b_raw", "\n", "stop_reward", "=", "stop_reward_a", "+", "stop_reward_b", "\n", "", "else", ":", "\n", "            ", "stop_reward", "=", "0.0", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate exploration reward, using probability that goal is observed as a potential function", "\n", "\n", "", "if", "self", ".", "prev_goal_visible_prob", "is", "None", ":", "\n", "            ", "self", ".", "prev_goal_visible_prob", "=", "goal_visible_prob", "\n", "", "exploration_reward", "=", "(", "goal_visible_prob", "-", "self", ".", "prev_goal_visible_prob", ")", "*", "self", ".", "exploration_alpha", "\n", "self", ".", "prev_goal_visible_prob", "=", "goal_visible_prob", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "return", "visit_reward", ",", "stop_reward", ",", "exploration_reward", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.get_reward": [[6, 8], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__call__": [[9, 11], ["abstract_intrinsic_reward.AbstractIntrinsicReward.get_reward"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.get_reward"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "get_reward", "(", "*", "args", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.p_visitation_and_exploration_reward.PVisitationAndExplorationReward.__init__": [[12, 33], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__", "params.get", "params.get", "params.get", "params.get", "params.get", "p_visitation_and_exploration_reward.PVisitationAndExplorationReward.empty_distribution", "p_visitation_and_exploration_reward.PVisitationAndExplorationReward.compute_distance_matrix"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.compute_distance_matrix"], ["    ", "def", "__init__", "(", "self", ",", "world_size_m", ",", "world_size_px", ",", "params", ")", ":", "\n", "        ", "super", "(", "PVisitationAndExplorationReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "\n", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "visit_alpha", "=", "params", ".", "get", "(", "\"visit_alpha\"", ",", "0.3", ")", "\n", "self", ".", "stop_alpha", "=", "params", ".", "get", "(", "\"stop_alpha\"", ",", "0.5", ")", "\n", "self", ".", "stop_p_alpha", "=", "params", ".", "get", "(", "\"stop_p_alpha\"", ",", "0.5", ")", "\n", "self", ".", "exploration_alpha", "=", "params", ".", "get", "(", "\"exploration_alpha\"", ",", "3.0", ")", "\n", "self", ".", "stop_oob_alpha", "=", "params", ".", "get", "(", "\"stop_oob_alpha\"", ",", "1.0", ")", "\n", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "distance_matrix", "=", "self", ".", "compute_distance_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.p_visitation_and_exploration_reward.PVisitationAndExplorationReward.compute_distance_matrix": [[34, 44], ["numpy.linspace", "numpy.asarray", "coords_grid.transpose.transpose.transpose", "numpy.reshape", "numpy.tile", "numpy.tile.transpose", "numpy.linalg.norm", "numpy.meshgrid"], "methods", ["None"], ["", "def", "compute_distance_matrix", "(", "self", ")", ":", "\n", "        ", "coords_vec", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "world_size_px", "-", "1", ",", "self", ".", "world_size_px", ")", "\n", "coords_grid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "coords_vec", ",", "coords_vec", ")", ")", "\n", "coords_grid", "=", "coords_grid", "[", "[", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "coords_grid", "=", "coords_grid", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "coords_grid_flat", "=", "np", ".", "reshape", "(", "coords_grid", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "pt_mat_a", "=", "np", ".", "tile", "(", "coords_grid_flat", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "coords_grid_flat", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "pt_mat_b", "=", "pt_mat_a", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "pt_mat_a", "-", "pt_mat_b", ",", "axis", "=", "2", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.p_visitation_and_exploration_reward.PVisitationAndExplorationReward.reset": [[45, 51], ["p_visitation_and_exploration_reward.PVisitationAndExplorationReward.empty_distribution"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.p_visitation_and_exploration_reward.PVisitationAndExplorationReward.wasserstein_distance": [[52, 68], ["dist_a.reshape", "dist_b.reshape", "q_flat.astype.astype.astype", "p_flat.astype.astype.astype", "q_flat.astype.astype.sum", "p_flat.astype.astype.sum", "ot.emd"], "methods", ["None"], ["", "def", "wasserstein_distance", "(", "self", ",", "dist_a", ",", "dist_b", ")", ":", "\n", "#start = time.time()", "\n", "        ", "p_flat", "=", "dist_a", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "q_flat", "=", "dist_b", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "\n", "q_flat", "=", "q_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "p_flat", "=", "p_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "q_flat", "/=", "q_flat", ".", "sum", "(", ")", "\n", "p_flat", "/=", "p_flat", ".", "sum", "(", ")", "\n", "\n", "ot_plan", ",", "log", "=", "ot", ".", "emd", "(", "p_flat", ",", "q_flat", ",", "self", ".", "distance_matrix", ",", "log", "=", "True", ",", "numItermax", "=", "10000", ")", "\n", "wd", "=", "log", "[", "\"cost\"", "]", "\n", "#end=time.time()", "\n", "#print(f\"Time taken: {end - start}\")", "\n", "return", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.p_visitation_and_exploration_reward.PVisitationAndExplorationReward.empty_distribution": [[69, 71], ["numpy.zeros"], "methods", ["None"], ["", "def", "empty_distribution", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "self", ".", "world_size_px", ",", "self", ".", "world_size_px", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.p_visitation_and_exploration_reward.PVisitationAndExplorationReward.get_reward": [[72, 146], ["learning.plot_path_on_img", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "v_dist_w.outer_prob_mass[].item", "max", "torch.from_numpy", "p_visitation_and_exploration_reward.PVisitationAndExplorationReward.wasserstein_distance", "v_dist_w.inner_distribution[].detach().cpu().numpy", "learning.plot_path_on_img", "p_visitation_and_exploration_reward.PVisitationAndExplorationReward.wasserstein_distance", "torch.from_numpy", "int", "int", "min", "min", "partial_stop_dist[].item", "transformations.pos_m_to_px", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "p_visitation_and_exploration_reward.PVisitationAndExplorationReward.empty_distribution", "transformations.pos_m_to_px", "max", "max", "pos_in_map_m.detach().cpu().numpy", "v_dist_w.inner_distribution[].detach().cpu", "pos_in_map_m.detach().cpu().numpy", "pos_in_map_px[].item", "pos_in_map_px[].item", "v_dist_w.inner_distribution[].detach().cpu().numpy.max", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach", "pos_in_map_m.detach().cpu", "v_dist_w.inner_distribution[].detach", "pos_in_map_m.detach().cpu", "pos_in_map_m.detach", "pos_in_map_m.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "get_reward", "(", "self", ",", "v_dist_w", ",", "cam_pos", ",", "action", ",", "done", ",", "first", ")", ":", "\n", "# Prepare things", "\n", "        ", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_pos", "is", "None", ":", "\n", "            ", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "", "self", ".", "visited_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "visited_dist", ",", "[", "self", ".", "last_pos", ",", "pos_in_map_px", "]", ")", "\n", "\n", "#Presenter().show_image(self.visited_dist, \"visited_dist\", scale=4, waitkey=1)", "\n", "\n", "visit_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "visit_dist", "=", "visit_dist", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "goal_unobserved_prob", "=", "v_dist_w", ".", "outer_prob_mass", "[", "0", ",", "1", "]", ".", "item", "(", ")", "\n", "goal_observed_prob", "=", "1", "-", "goal_unobserved_prob", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate exploration reward, using probability that goal is observed as a potential function", "\n", "\n", "# Don't ever reduce the potential - only increase it", "\n", "goal_unobserved_potential", "=", "-", "goal_unobserved_prob", "\n", "if", "self", ".", "prev_exploration_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_exploration_potential", "=", "goal_unobserved_potential", "\n", "", "goal_unobserved_potential", "=", "max", "(", "goal_unobserved_potential", ",", "self", ".", "prev_exploration_potential", ")", "\n", "exploration_reward", "=", "(", "goal_unobserved_potential", "-", "self", ".", "prev_exploration_potential", ")", "*", "self", ".", "exploration_alpha", "\n", "self", ".", "prev_exploration_potential", "=", "goal_unobserved_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate visitation reward (potential shaped by visitation probability)", "\n", "# Give reward for visiting the high-probability states at next timestep", "\n", "visit_potential", "=", "-", "self", ".", "wasserstein_distance", "(", "self", ".", "visited_dist", ",", "visit_dist", ")", "\n", "if", "self", ".", "prev_visit_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "", "visit_reward", "=", "(", "visit_potential", "-", "self", ".", "prev_visit_potential", ")", "*", "self", ".", "visit_alpha", "\n", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate stop reward consisting of EMD(stop,goal), P(stop=goal), and -P(stop_oob)", "\n", "\n", "if", "action", "[", "3", "]", ">", "0.5", "or", "done", ":", "\n", "            ", "partial_stop_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "1", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stopped_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "empty_distribution", "(", ")", ",", "[", "pos_in_map_px", ",", "pos_in_map_px", "]", ")", "\n", "stop_wd", "=", "self", ".", "wasserstein_distance", "(", "partial_stop_dist", ",", "stopped_dist", ")", "\n", "stop_reward", "=", "-", "stop_wd", "*", "self", ".", "stop_alpha", "\n", "\n", "# Calculate reward proportional to P(p_g = p_stop)", "\n", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "\n", "pos_x", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "0", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_y", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "1", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_x", "=", "min", "(", "max", "(", "pos_x", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "pos_y", "=", "min", "(", "max", "(", "pos_y", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "stop_prob_at_pos", "=", "partial_stop_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "stop_prob_prop", "=", "stop_prob_at_pos", "/", "(", "partial_stop_dist", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "stop_p_reward", "=", "stop_prob_prop", "*", "self", ".", "stop_p_alpha", "\n", "\n", "# Add negative reward for stopping when P(goal oob) is high", "\n", "stop_oob_reward", "=", "-", "self", ".", "stop_oob_alpha", "*", "goal_unobserved_prob", "\n", "", "else", ":", "\n", "            ", "stop_reward", "=", "0.0", "\n", "stop_p_reward", "=", "0.0", "\n", "stop_oob_reward", "=", "0.0", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "return", "visit_reward", ",", "stop_reward", ",", "exploration_reward", ",", "stop_oob_reward", ",", "stop_p_reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.__init__": [[11, 32], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__", "params.get", "params.get", "params.get", "params.get", "params.get", "wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution", "wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.compute_distance_matrix"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.compute_distance_matrix"], ["    ", "def", "__init__", "(", "self", ",", "world_size_m", ",", "world_size_px", ",", "params", ")", ":", "\n", "        ", "super", "(", "WDVisitationAndExplorationReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "\n", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "visit_alpha", "=", "params", ".", "get", "(", "\"visit_alpha\"", ",", "0.3", ")", "\n", "self", ".", "stop_alpha", "=", "params", ".", "get", "(", "\"stop_alpha\"", ",", "0.5", ")", "\n", "self", ".", "stop_p_alpha", "=", "params", ".", "get", "(", "\"stop_p_alpha\"", ",", "0.5", ")", "\n", "self", ".", "exploration_alpha", "=", "params", ".", "get", "(", "\"exploration_alpha\"", ",", "3.0", ")", "\n", "self", ".", "stop_oob_alpha", "=", "params", ".", "get", "(", "\"stop_oob_alpha\"", ",", "1.0", ")", "\n", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "distance_matrix", "=", "self", ".", "compute_distance_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.compute_distance_matrix": [[33, 43], ["numpy.linspace", "numpy.asarray", "coords_grid.transpose.transpose.transpose", "numpy.reshape", "numpy.tile", "numpy.tile.transpose", "numpy.linalg.norm", "numpy.meshgrid"], "methods", ["None"], ["", "def", "compute_distance_matrix", "(", "self", ")", ":", "\n", "        ", "coords_vec", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "world_size_px", "-", "1", ",", "self", ".", "world_size_px", ")", "\n", "coords_grid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "coords_vec", ",", "coords_vec", ")", ")", "\n", "coords_grid", "=", "coords_grid", "[", "[", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "coords_grid", "=", "coords_grid", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "coords_grid_flat", "=", "np", ".", "reshape", "(", "coords_grid", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "pt_mat_a", "=", "np", ".", "tile", "(", "coords_grid_flat", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "coords_grid_flat", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "pt_mat_b", "=", "pt_mat_a", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "pt_mat_a", "-", "pt_mat_b", ",", "axis", "=", "2", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.reset": [[44, 50], ["wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.wasserstein_distance": [[51, 67], ["dist_a.reshape", "dist_b.reshape", "q_flat.astype.astype.astype", "p_flat.astype.astype.astype", "q_flat.astype.astype.sum", "p_flat.astype.astype.sum", "ot.emd"], "methods", ["None"], ["", "def", "wasserstein_distance", "(", "self", ",", "dist_a", ",", "dist_b", ")", ":", "\n", "#start = time.time()", "\n", "        ", "p_flat", "=", "dist_a", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "q_flat", "=", "dist_b", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "\n", "q_flat", "=", "q_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "p_flat", "=", "p_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "q_flat", "/=", "q_flat", ".", "sum", "(", ")", "\n", "p_flat", "/=", "p_flat", ".", "sum", "(", ")", "\n", "\n", "ot_plan", ",", "log", "=", "ot", ".", "emd", "(", "p_flat", ",", "q_flat", ",", "self", ".", "distance_matrix", ",", "log", "=", "True", ",", "numItermax", "=", "10000", ")", "\n", "wd", "=", "log", "[", "\"cost\"", "]", "\n", "#end=time.time()", "\n", "#print(f\"Time taken: {end - start}\")", "\n", "return", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution": [[68, 70], ["numpy.zeros"], "methods", ["None"], ["", "def", "empty_distribution", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "self", ".", "world_size_px", ",", "self", ".", "world_size_px", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.get_reward": [[71, 143], ["learning.plot_path_on_img", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "v_dist_w.outer_prob_mass[].item", "max", "torch.from_numpy", "wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.wasserstein_distance", "v_dist_w.inner_distribution[].detach().cpu().numpy", "learning.plot_path_on_img", "wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.wasserstein_distance", "torch.from_numpy", "int", "int", "min", "min", "partial_stop_dist[].item", "transformations.pos_m_to_px", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "wd_visitation_and_exploration_reward.WDVisitationAndExplorationReward.empty_distribution", "transformations.pos_m_to_px", "max", "max", "pos_in_map_m.detach().cpu().numpy", "v_dist_w.inner_distribution[].detach().cpu", "pos_in_map_m.detach().cpu().numpy", "pos_in_map_px[].item", "pos_in_map_px[].item", "v_dist_w.inner_distribution[].detach().cpu().numpy.max", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach", "pos_in_map_m.detach().cpu", "v_dist_w.inner_distribution[].detach", "pos_in_map_m.detach().cpu", "pos_in_map_m.detach", "pos_in_map_m.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "get_reward", "(", "self", ",", "v_dist_w", ",", "cam_pos", ",", "action", ",", "done", ",", "first", ")", ":", "\n", "# Prepare things", "\n", "        ", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_pos", "is", "None", ":", "\n", "            ", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "", "self", ".", "visited_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "visited_dist", ",", "[", "self", ".", "last_pos", ",", "pos_in_map_px", "]", ")", "\n", "\n", "visit_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "visit_dist", "=", "visit_dist", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "goal_unobserved_prob", "=", "v_dist_w", ".", "outer_prob_mass", "[", "0", ",", "1", "]", ".", "item", "(", ")", "\n", "goal_observed_prob", "=", "1", "-", "goal_unobserved_prob", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate exploration reward, using probability that goal is observed as a potential function", "\n", "\n", "# Don't ever reduce the potential - only increase it", "\n", "goal_observed_potential", "=", "goal_observed_prob", "\n", "if", "self", ".", "prev_exploration_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_exploration_potential", "=", "goal_observed_potential", "\n", "", "goal_observed_potential", "=", "max", "(", "goal_observed_potential", ",", "self", ".", "prev_exploration_potential", ")", "\n", "exploration_reward", "=", "(", "goal_observed_potential", "-", "self", ".", "prev_exploration_potential", ")", "*", "self", ".", "exploration_alpha", "\n", "self", ".", "prev_exploration_potential", "=", "goal_observed_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate visitation reward (potential shaped by visitation probability)", "\n", "# Give reward for visiting the high-probability states at next timestep", "\n", "visit_potential", "=", "-", "self", ".", "wasserstein_distance", "(", "self", ".", "visited_dist", ",", "visit_dist", ")", "\n", "if", "self", ".", "prev_visit_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "", "visit_reward", "=", "(", "visit_potential", "-", "self", ".", "prev_visit_potential", ")", "*", "self", ".", "visit_alpha", "\n", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate stop reward consisting of EMD(stop,goal), P(stop=goal), and -P(stop_oob)", "\n", "if", "action", "[", "3", "]", ">", "0.5", "or", "done", ":", "\n", "            ", "partial_stop_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "1", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stopped_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "empty_distribution", "(", ")", ",", "[", "pos_in_map_px", ",", "pos_in_map_px", "]", ")", "\n", "stop_wd", "=", "self", ".", "wasserstein_distance", "(", "partial_stop_dist", ",", "stopped_dist", ")", "\n", "stop_reward", "=", "-", "stop_wd", "*", "self", ".", "stop_alpha", "\n", "\n", "# Calculate reward proportional to P(p_g = p_stop)", "\n", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "\n", "pos_x", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "0", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_y", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "1", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_x", "=", "min", "(", "max", "(", "pos_x", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "pos_y", "=", "min", "(", "max", "(", "pos_y", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "stop_prob_at_pos", "=", "partial_stop_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "stop_prob_prop", "=", "stop_prob_at_pos", "*", "goal_observed_prob", "/", "(", "partial_stop_dist", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "#stop_prob_prop = stop_prob_at_pos", "\n", "stop_p_reward", "=", "stop_prob_prop", "*", "self", ".", "stop_p_alpha", "\n", "\n", "# Add negative reward for stopping when P(goal oob) is high", "\n", "stop_oob_reward", "=", "-", "self", ".", "stop_oob_alpha", "*", "goal_unobserved_prob", "\n", "", "else", ":", "\n", "            ", "stop_reward", "=", "0.0", "\n", "stop_p_reward", "=", "0.0", "\n", "stop_oob_reward", "=", "0.0", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "return", "visit_reward", ",", "stop_reward", ",", "exploration_reward", ",", "stop_oob_reward", ",", "stop_p_reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.visitation_reward.VisitationReward.__init__": [[9, 19], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world_size_m", ",", "world_size_px", ")", ":", "\n", "        ", "super", "(", "VisitationReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "self", ".", "prev_potential", "=", "None", "\n", "self", ".", "start_best_stop_dist", "=", "None", "\n", "\n", "self", ".", "visit_alpha", "=", "1.0", "\n", "self", ".", "stop_alpha", "=", "2.0", "\n", "self", ".", "stop_offset", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.visitation_reward.VisitationReward.reset": [[20, 23], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_potential", "=", "None", "\n", "self", ".", "start_best_stop_dist", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.visitation_reward.VisitationReward.get_reward": [[24, 84], ["torch.from_numpy", "int", "int", "visit_dist.min", "stop_dist.min", "min", "min", "visit_dist[].item", "stop_dist[].item", "stop_dist.view().max", "int", "int", "torch.Tensor", "torch.Tensor", "torch.norm", "transformations.pos_m_to_px", "visit_dist.max", "stop_dist.max", "max", "max", "min", "pos_in_map_m.detach().cpu().numpy", "pos_in_map_px[].item", "pos_in_map_px[].item", "stop_dist.view", "min", "pos_in_map_m.detach().cpu", "pos_in_map_m.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "get_reward", "(", "self", ",", "v_dist_w", ",", "cam_pos", ",", "action", ")", ":", "\n", "# If stopped:", "\n", "        ", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "\n", "\n", "pos_x", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "0", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_y", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "1", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "\n", "visit_dist", "=", "v_dist_w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "stop_dist", "=", "v_dist_w", "[", "0", ",", "1", ",", ":", ",", ":", "]", "\n", "\n", "#TODO: Consider this. This way the total reward that can be collected is 1", "\n", "visit_dist", "-=", "visit_dist", ".", "min", "(", ")", "\n", "visit_dist", "/=", "(", "visit_dist", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "stop_dist", "-=", "stop_dist", ".", "min", "(", ")", "\n", "stop_dist", "/=", "(", "stop_dist", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "\n", "pos_x", "=", "min", "(", "max", "(", "pos_x", ",", "0", ")", ",", "visit_dist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "pos_y", "=", "min", "(", "max", "(", "pos_y", ",", "0", ")", ",", "visit_dist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "\n", "visit_prob", "=", "visit_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "stop_prob", "=", "stop_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "\n", "# No batch dimension here:", "\n", "max_stop_prob", ",", "argmax_stop_prob", "=", "stop_dist", ".", "view", "(", "-", "1", ")", ".", "max", "(", "0", ")", "\n", "best_stop_pos_x", "=", "int", "(", "argmax_stop_prob", "/", "stop_dist", ".", "shape", "[", "0", "]", ")", "\n", "best_stop_pos_y", "=", "int", "(", "argmax_stop_prob", "%", "stop_dist", ".", "shape", "[", "0", "]", ")", "\n", "\n", "best_stop_pos", "=", "torch", ".", "Tensor", "(", "[", "best_stop_pos_x", ",", "best_stop_pos_y", "]", ")", "\n", "pos", "=", "torch", ".", "Tensor", "(", "[", "pos_x", ",", "pos_y", "]", ")", "\n", "dst_to_best_stop", "=", "torch", ".", "norm", "(", "pos", "-", "best_stop_pos", ")", "\n", "\n", "if", "self", ".", "start_best_stop_dist", "is", "None", ":", "\n", "            ", "self", ".", "start_best_stop_dist", "=", "min", "(", "dst_to_best_stop", ",", "MIN_START_STOP_DIST_PX", ")", "\n", "\n", "", "visit_potential", "=", "self", ".", "visit_alpha", "*", "visit_prob", "\n", "# THIS IS NOT POTENTIAL NOW", "\n", "# TODO: Change terminology", "\n", "if", "self", ".", "prev_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_potential", "=", "visit_potential", "\n", "# Don't give reward for the first step", "\n", "visit_reward", "=", "visit_potential", "*", "0", "\n", "# Give reward for visiting the high-probability states at next timestep", "\n", "", "else", ":", "\n", "            ", "visit_reward", "=", "visit_potential", "-", "self", ".", "prev_potential", "\n", "self", ".", "prev_potential", "=", "visit_potential", "\n", "\n", "", "if", "action", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "stop_reward_a", "=", "(", "stop_prob", "-", "self", ".", "stop_offset", ")", "*", "self", ".", "stop_alpha", "\n", "stop_reward_b", "=", "0.2", "-", "min", "(", "dst_to_best_stop", "/", "(", "self", ".", "start_best_stop_dist", "+", "1e-9", ")", ",", "1", ")", "\n", "stop_reward", "=", "stop_reward_a", "+", "stop_reward_b", "\n", "", "else", ":", "\n", "            ", "stop_reward", "=", "0.0", "\n", "\n", "#total_reward = visit_reward + stop_reward", "\n", "", "return", "visit_reward", ",", "stop_reward", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.action_oob_reward.ActionOutOfBoundsReward.__init__": [[7, 15], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ActionOutOfBoundsReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "min_vel_x", "=", "0.2", "\n", "self", ".", "max_vel_x", "=", "1.0", "\n", "self", ".", "min_yaw_rate", "=", "-", "1.3", "\n", "self", ".", "max_yaw_rate", "=", "1.3", "\n", "self", ".", "penalty_strength", "=", "1.0", "\n", "self", ".", "oob_allowance", "=", "0.7", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.action_oob_reward.ActionOutOfBoundsReward.reset": [[16, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.action_oob_reward.ActionOutOfBoundsReward.get_reward": [[19, 35], ["max", "max", "max", "max", "max", "max", "min"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "action", ")", ":", "\n", "        ", "x_vel", "=", "action", "[", "0", "]", "\n", "yawrate", "=", "action", "[", "2", "]", "\n", "\n", "x_vel_upper_margin", "=", "max", "(", "x_vel", "-", "(", "self", ".", "max_vel_x", "+", "self", ".", "oob_allowance", ")", ",", "0", ")", "\n", "x_vel_lower_margin", "=", "max", "(", "(", "self", ".", "min_vel_x", "-", "self", ".", "oob_allowance", ")", "-", "x_vel", ",", "0", ")", "\n", "yawrate_upper_margin", "=", "max", "(", "yawrate", "-", "(", "self", ".", "max_yaw_rate", "+", "self", ".", "oob_allowance", ")", ",", "0", ")", "\n", "yawrate_lower_margin", "=", "max", "(", "(", "self", ".", "min_yaw_rate", "-", "self", ".", "oob_allowance", ")", "-", "yawrate", ",", "0", ")", "\n", "\n", "x_vel_margin", "=", "max", "(", "x_vel_lower_margin", ",", "x_vel_upper_margin", ")", "\n", "yawrate_margin", "=", "max", "(", "yawrate_lower_margin", ",", "yawrate_upper_margin", ")", "\n", "\n", "penalty", "=", "(", "x_vel_margin", "+", "yawrate_margin", ")", "*", "self", ".", "penalty_strength", "\n", "penalty", "=", "min", "(", "penalty", ",", "2.0", ")", "\n", "reward", "=", "-", "penalty", "\n", "return", "reward", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.__init__": [[12, 33], ["learning.intrinsic_reward.abstract_intrinsic_reward.AbstractIntrinsicReward.__init__", "params.get", "params.get", "params.get", "params.get", "params.get", "wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.compute_distance_matrix"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.sentence_embeddings.sentence_embedding_simple.SentenceEmbeddingSimple.get", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.compute_distance_matrix"], ["    ", "def", "__init__", "(", "self", ",", "world_size_m", ",", "world_size_px", ",", "params", ")", ":", "\n", "        ", "super", "(", "WDVisitationAndExplorationReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "world_size_m", "=", "world_size_m", "\n", "self", ".", "world_size_px", "=", "world_size_px", "\n", "\n", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "visit_alpha", "=", "params", ".", "get", "(", "\"visit_alpha\"", ",", "0.3", ")", "\n", "self", ".", "stop_alpha", "=", "params", ".", "get", "(", "\"stop_alpha\"", ",", "0.5", ")", "\n", "self", ".", "stop_p_alpha", "=", "params", ".", "get", "(", "\"stop_p_alpha\"", ",", "0.5", ")", "\n", "self", ".", "exploration_alpha", "=", "params", ".", "get", "(", "\"exploration_alpha\"", ",", "3.0", ")", "\n", "self", ".", "stop_oob_alpha", "=", "params", ".", "get", "(", "\"stop_oob_alpha\"", ",", "1.0", ")", "\n", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "distance_matrix", "=", "self", ".", "compute_distance_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.compute_distance_matrix": [[34, 44], ["numpy.linspace", "numpy.asarray", "coords_grid.transpose.transpose.transpose", "numpy.reshape", "numpy.tile", "numpy.tile.transpose", "numpy.linalg.norm", "numpy.meshgrid"], "methods", ["None"], ["", "def", "compute_distance_matrix", "(", "self", ")", ":", "\n", "        ", "coords_vec", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "world_size_px", "-", "1", ",", "self", ".", "world_size_px", ")", "\n", "coords_grid", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "coords_vec", ",", "coords_vec", ")", ")", "\n", "coords_grid", "=", "coords_grid", "[", "[", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "coords_grid", "=", "coords_grid", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "coords_grid_flat", "=", "np", ".", "reshape", "(", "coords_grid", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "pt_mat_a", "=", "np", ".", "tile", "(", "coords_grid_flat", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "coords_grid_flat", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "pt_mat_b", "=", "pt_mat_a", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "pt_mat_a", "-", "pt_mat_b", ",", "axis", "=", "2", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.reset": [[45, 51], ["wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_visit_potential", "=", "None", "\n", "self", ".", "prev_exploration_potential", "=", "None", "\n", "self", ".", "last_pos", "=", "None", "\n", "self", ".", "visited_dist", "=", "self", ".", "empty_distribution", "(", ")", "\n", "self", ".", "stop_wd_if_stopped_immediately", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance": [[52, 68], ["dist_a.reshape", "dist_b.reshape", "q_flat.astype.astype.astype", "p_flat.astype.astype.astype", "q_flat.astype.astype.sum", "p_flat.astype.astype.sum", "ot.emd"], "methods", ["None"], ["", "def", "wasserstein_distance", "(", "self", ",", "dist_a", ",", "dist_b", ")", ":", "\n", "#start = time.time()", "\n", "        ", "p_flat", "=", "dist_a", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "q_flat", "=", "dist_b", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "\n", "q_flat", "=", "q_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "p_flat", "=", "p_flat", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "q_flat", "/=", "q_flat", ".", "sum", "(", ")", "\n", "p_flat", "/=", "p_flat", ".", "sum", "(", ")", "\n", "\n", "ot_plan", ",", "log", "=", "ot", ".", "emd", "(", "p_flat", ",", "q_flat", ",", "self", ".", "distance_matrix", ",", "log", "=", "True", ",", "numItermax", "=", "10000", ")", "\n", "wd", "=", "log", "[", "\"cost\"", "]", "\n", "#end=time.time()", "\n", "#print(f\"Time taken: {end - start}\")", "\n", "return", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution": [[69, 71], ["numpy.zeros"], "methods", ["None"], ["", "def", "empty_distribution", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "self", ".", "world_size_px", ",", "self", ".", "world_size_px", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.get_reward": [[72, 146], ["learning.plot_path_on_img", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "v_dist_w.outer_prob_mass[].item", "max", "torch.from_numpy", "wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "v_dist_w.inner_distribution[].detach().cpu().numpy", "learning.plot_path_on_img", "wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "torch.from_numpy", "int", "int", "min", "min", "partial_stop_dist[].item", "transformations.pos_m_to_px", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "transformations.pos_m_to_px", "max", "max", "pos_in_map_m.detach().cpu().numpy", "v_dist_w.inner_distribution[].detach().cpu", "pos_in_map_m.detach().cpu().numpy", "pos_in_map_px[].item", "pos_in_map_px[].item", "v_dist_w.inner_distribution[].detach().cpu().numpy.max", "visit_dist.detach().cpu().numpy.detach().cpu().numpy.detach", "pos_in_map_m.detach().cpu", "v_dist_w.inner_distribution[].detach", "pos_in_map_m.detach().cpu", "pos_in_map_m.detach", "pos_in_map_m.detach"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.datasets.top_down_dataset.plot_path_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.wasserstein_distance", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.intrinsic_reward.wd_visitation_and_exploration_reward_bak.WDVisitationAndExplorationReward.empty_distribution", "home.repos.pwc.inspect_result.clic-lab_drif.None.transformations.pos_m_to_px", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.numpy", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.pose.Pose.cpu", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach", "home.repos.pwc.inspect_result.clic-lab_drif.inputs.partial_2d_distribution.Partial2DDistribution.detach"], ["", "def", "get_reward", "(", "self", ",", "v_dist_w", ",", "cam_pos", ",", "action", ",", "done", ",", "first", ")", ":", "\n", "# Prepare things", "\n", "        ", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_pos", "is", "None", ":", "\n", "            ", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "", "self", ".", "visited_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "visited_dist", ",", "[", "self", ".", "last_pos", ",", "pos_in_map_px", "]", ")", "\n", "\n", "#Presenter().show_image(self.visited_dist, \"visited_dist\", scale=4, waitkey=1)", "\n", "\n", "visit_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "visit_dist", "=", "visit_dist", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "goal_unobserved_prob", "=", "v_dist_w", ".", "outer_prob_mass", "[", "0", ",", "1", "]", ".", "item", "(", ")", "\n", "goal_observed_prob", "=", "1", "-", "goal_unobserved_prob", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate exploration reward, using probability that goal is observed as a potential function", "\n", "\n", "# Don't ever reduce the potential - only increase it", "\n", "goal_unobserved_potential", "=", "-", "goal_unobserved_prob", "\n", "if", "self", ".", "prev_exploration_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_exploration_potential", "=", "goal_unobserved_potential", "\n", "", "goal_unobserved_potential", "=", "max", "(", "goal_unobserved_potential", ",", "self", ".", "prev_exploration_potential", ")", "\n", "exploration_reward", "=", "(", "goal_unobserved_potential", "-", "self", ".", "prev_exploration_potential", ")", "*", "self", ".", "exploration_alpha", "\n", "self", ".", "prev_exploration_potential", "=", "goal_unobserved_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate visitation reward (potential shaped by visitation probability)", "\n", "# Give reward for visiting the high-probability states at next timestep", "\n", "visit_potential", "=", "-", "self", ".", "wasserstein_distance", "(", "self", ".", "visited_dist", ",", "visit_dist", ")", "\n", "if", "self", ".", "prev_visit_potential", "is", "None", ":", "\n", "            ", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "", "visit_reward", "=", "(", "visit_potential", "-", "self", ".", "prev_visit_potential", ")", "*", "self", ".", "visit_alpha", "\n", "self", ".", "prev_visit_potential", "=", "visit_potential", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "# Calculate stop reward consisting of EMD(stop,goal), P(stop=goal), and -P(stop_oob)", "\n", "\n", "if", "action", "[", "3", "]", ">", "0.5", "or", "done", ":", "\n", "            ", "partial_stop_dist", "=", "v_dist_w", ".", "inner_distribution", "[", "0", ",", "1", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stopped_dist", "=", "tdd", ".", "plot_path_on_img", "(", "self", ".", "empty_distribution", "(", ")", ",", "[", "pos_in_map_px", ",", "pos_in_map_px", "]", ")", "\n", "stop_wd", "=", "self", ".", "wasserstein_distance", "(", "partial_stop_dist", ",", "stopped_dist", ")", "\n", "stop_reward", "=", "-", "stop_wd", "*", "self", ".", "stop_alpha", "\n", "\n", "# Calculate reward proportional to P(p_g = p_stop)", "\n", "pos_in_map_m", "=", "cam_pos", "[", "0", ":", "1", ",", "0", ":", "2", "]", "# * self.world_size_px / self.", "\n", "pos_in_map_px", "=", "torch", ".", "from_numpy", "(", "transformations", ".", "pos_m_to_px", "(", "pos_in_map_m", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "world_size_px", ",", "\n", "self", ".", "world_size_m", ",", "\n", "self", ".", "world_size_px", ")", ")", "\n", "pos_x", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "0", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_y", "=", "int", "(", "pos_in_map_px", "[", "0", ",", "1", "]", ".", "item", "(", ")", "+", "0.5", ")", "\n", "pos_x", "=", "min", "(", "max", "(", "pos_x", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "pos_y", "=", "min", "(", "max", "(", "pos_y", ",", "0", ")", ",", "partial_stop_dist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "stop_prob_at_pos", "=", "partial_stop_dist", "[", "pos_x", ",", "pos_y", "]", ".", "item", "(", ")", "\n", "stop_prob_prop", "=", "stop_prob_at_pos", "/", "(", "partial_stop_dist", ".", "max", "(", ")", "+", "1e-10", ")", "\n", "stop_p_reward", "=", "stop_prob_prop", "*", "self", ".", "stop_p_alpha", "\n", "\n", "# Add negative reward for stopping when P(goal oob) is high", "\n", "stop_oob_reward", "=", "-", "self", ".", "stop_oob_alpha", "*", "goal_unobserved_prob", "\n", "", "else", ":", "\n", "            ", "stop_reward", "=", "0.0", "\n", "stop_p_reward", "=", "0.0", "\n", "stop_oob_reward", "=", "0.0", "\n", "\n", "# -----------------------------------------------------------------------", "\n", "", "self", ".", "last_pos", "=", "pos_in_map_px", "\n", "\n", "return", "visit_reward", ",", "stop_reward", ",", "exploration_reward", ",", "stop_oob_reward", ",", "stop_p_reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.main": [[92, 134], ["parameters.initialize_experiment", "range", "int", "print", "os.makedirs", "os.path.join", "random.uniform", "len", "sys.stdout.write", "data_io.get_env_config_dir", "data_io.get_env_config_path", "open", "json.dump", "generate_curriculum_config.try_make_config_random", "print", "generate_curriculum_config.pick_drone_start_pos", "env_config.generation.terrain_generation.add_lake_to_config", "generate_curriculum_config.try_make_config_circle_of_landmarks", "str", "generate_curriculum_config.try_make_config_circle_permutations", "print", "quit", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_dir", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_path", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.try_make_config_random", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.pick_drone_start_pos", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.add_lake_to_config", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.try_make_config_circle_of_landmarks", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.try_make_config_circle_permutations"], ["def", "main", "(", "start_i", ",", "end_i", ",", "config_type", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "for", "config_num", "in", "range", "(", "start_i", ",", "end_i", ")", ":", "\n", "# attempt to space landmarks", "\n", "        ", "config", "=", "None", "\n", "attempts", "=", "0", "\n", "# It's easier to generate a config with less objects, so to have a truly uniform distribution, we must sample it here.", "\n", "num_objects", "=", "int", "(", "random", ".", "uniform", "(", "MIN_NUM_OBJECTS", ",", "MAX_NUM_OBJECTS", ")", ")", "\n", "if", "FORCE_LANDMARK_SELECTION", ":", "\n", "            ", "num_objects", "=", "len", "(", "FORCE_LANDMARK_SELECTION", ")", "\n", "\n", "", "print", "(", "\"making config %d with %d objects\"", "%", "(", "config_num", ",", "num_objects", ")", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "if", "config_type", "==", "ConfigType", ".", "RANDOM", "or", "config_type", "==", "ConfigType", ".", "RANDOM_CORNER", ":", "\n", "                ", "start_pos", ",", "start_heading", "=", "None", ",", "None", "\n", "if", "config_type", "==", "ConfigType", ".", "RANDOM_CORNER", ":", "\n", "                    ", "start_pos", ",", "start_heading", "=", "pick_drone_start_pos", "(", ")", "\n", "\n", "", "config", "=", "try_make_config_random", "(", "num_objects", ",", "start_pos", ",", "start_heading", ")", "\n", "if", "config", "is", "not", "None", "and", "MAKE_LAKES", ":", "\n", "                    ", "config", "=", "add_lake_to_config", "(", "config", ",", "X_RANGE", ",", "Y_RANGE", ")", "\n", "\n", "", "", "elif", "config_type", "==", "ConfigType", ".", "CIRCLE_OF_LANDMARKS", ":", "\n", "                ", "config", "=", "try_make_config_circle_of_landmarks", "(", "num_objects", ")", "\n", "", "elif", "config_type", "==", "ConfigType", ".", "CIRCLE_PERMUTATIONS", ":", "\n", "                ", "config", "=", "try_make_config_circle_permutations", "(", "num_objects", ",", "config_num", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Invalid config type!\"", "+", "str", "(", "config_type", ")", ")", "\n", "quit", "(", "-", "1", ")", "\n", "\n", "", "attempts", "+=", "1", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\r Attemtps: \"", "+", "str", "(", "attempts", ")", ")", "\n", "if", "config", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"\"", ")", "\n", "break", "\n", "\n", "", "", "os", ".", "makedirs", "(", "paths", ".", "get_env_config_dir", "(", ")", ",", "exist_ok", "=", "True", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "get_env_config_path", "(", "config_num", ")", ")", "\n", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "config", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.is_pos_proposal_valid": [[136, 159], ["numpy.asarray", "range", "len", "numpy.asarray", "numpy.linalg.norm", "numpy.asarray", "numpy.linalg.norm"], "function", ["None"], ["", "", "", "def", "is_pos_proposal_valid", "(", "config", ",", "pos_x", ",", "pos_z", ",", "radius", ",", "drone_start_pos", "=", "None", ")", ":", "\n", "\n", "# check if the proposal is too close to any existing landmarks", "\n", "    ", "pos", "=", "np", ".", "asarray", "(", "[", "pos_x", ",", "pos_z", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "\"xPos\"", "]", ")", ")", ":", "\n", "        ", "other_x", "=", "config", "[", "\"xPos\"", "]", "[", "i", "]", "\n", "other_z", "=", "config", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "other_radius", "=", "config", "[", "\"radius\"", "]", "[", "i", "]", "\n", "other_pos", "=", "np", ".", "asarray", "(", "[", "other_x", ",", "other_z", "]", ")", "\n", "min_dist", "=", "other_radius", "+", "radius", "+", "MIN_LANDMARK_BUFFER", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "pos", "-", "other_pos", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "            ", "return", "False", "\n", "\n", "# Check if it's too close to the drone's starting position (i.e. will likely block view of other objects)", "\n", "", "", "if", "drone_start_pos", "is", "not", "None", ":", "\n", "        ", "drone_start_pos", "=", "np", ".", "asarray", "(", "drone_start_pos", ")", "\n", "min_dist", "=", "radius", "+", "150", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "drone_start_pos", "-", "pos", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.empty_config": [[161, 169], ["None"], "function", ["None"], ["", "def", "empty_config", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"landmarkName\"", ":", "[", "]", ",", "\n", "\"radius\"", ":", "[", "]", ",", "\n", "\"xPos\"", ":", "[", "]", ",", "\n", "\"zPos\"", ":", "[", "]", ",", "\n", "\"isEnabled\"", ":", "[", "]", ",", "\n", "\"lakeCoords\"", ":", "[", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.pick_drone_start_pos": [[172, 185], ["random.choice"], "function", ["None"], ["", "def", "pick_drone_start_pos", "(", ")", ":", "\n", "    ", "\"\"\"\n    :return: Drone's starting position and starting heading, where the heading is a point towards which the drone will face\n    \"\"\"", "\n", "pick", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "if", "pick", "==", "0", ":", "\n", "        ", "return", "[", "0.0", ",", "0.0", "]", ",", "[", "100.0", ",", "100.0", "]", "\n", "", "elif", "pick", "==", "1", ":", "\n", "        ", "return", "[", "1000.0", ",", "0.0", "]", ",", "[", "900.0", ",", "100.0", "]", "\n", "", "elif", "pick", "==", "2", ":", "\n", "        ", "return", "[", "0.0", ",", "1000.0", "]", ",", "[", "100.0", ",", "900.0", "]", "\n", "", "elif", "pick", "==", "3", ":", "\n", "        ", "return", "[", "1000.0", ",", "1000.0", "]", ",", "[", "900.0", ",", "900.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.place_landmarks_on_circle_config": [[187, 225], ["generate_curriculum_config.empty_config", "len", "numpy.asarray", "list", "list", "enumerate", "numpy.asarray", "config[].append", "config[].append", "config[].append", "config[].append", "config[].append", "math.sin", "math.cos", "numpy.asarray", "math.sin", "math.cos"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.empty_config", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "place_landmarks_on_circle_config", "(", "landmark_names", ",", "landmark_radii", ")", ":", "\n", "    ", "config", "=", "empty_config", "(", ")", "\n", "\n", "num_objects", "=", "len", "(", "landmark_radii", ")", "\n", "x_width", "=", "X_RANGE", "[", "1", "]", "-", "X_RANGE", "[", "0", "]", "\n", "y_width", "=", "Y_RANGE", "[", "1", "]", "-", "Y_RANGE", "[", "0", "]", "\n", "centroid", "=", "np", ".", "asarray", "(", "[", "X_RANGE", "[", "0", "]", "+", "x_width", "/", "2", ",", "\n", "Y_RANGE", "[", "0", "]", "+", "y_width", "/", "2", "]", ")", "\n", "circle_radius", "=", "x_width", "/", "2.5", "\n", "\n", "fov", "=", "DRONE_FOV", "*", "3.14159", "/", "180", "\n", "theta_min", "=", "-", "fov", "\n", "theta_step", "=", "2", "*", "fov", "/", "(", "num_objects", "-", "1", ")", "\n", "\n", "theta_drone", "=", "-", "3.14159", "\n", "offset_drone", "=", "[", "circle_radius", "*", "math", ".", "sin", "(", "theta_drone", ")", ",", "\n", "circle_radius", "*", "math", ".", "cos", "(", "theta_drone", ")", "]", "\n", "drone_pos", "=", "centroid", "+", "np", ".", "asarray", "(", "offset_drone", ")", "\n", "\n", "# Add extra variables in the config for curve generator", "\n", "config", "[", "\"startPos\"", "]", "=", "list", "(", "drone_pos", ")", "\n", "config", "[", "\"startHeading\"", "]", "=", "list", "(", "centroid", ")", "\n", "\n", "# Add landmarks to config", "\n", "for", "l", ",", "landmark_name", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "        ", "config", "[", "\"landmarkName\"", "]", ".", "append", "(", "landmark_name", ")", "\n", "\n", "theta", "=", "theta_min", "+", "theta_step", "*", "l", "\n", "offset", "=", "[", "circle_radius", "*", "math", ".", "sin", "(", "theta", ")", ",", "\n", "circle_radius", "*", "math", ".", "cos", "(", "theta", ")", "]", "\n", "pos", "=", "centroid", "+", "np", ".", "asarray", "(", "offset", ")", "\n", "\n", "config", "[", "\"xPos\"", "]", ".", "append", "(", "pos", "[", "0", "]", ")", "\n", "config", "[", "\"zPos\"", "]", ".", "append", "(", "pos", "[", "1", "]", ")", "\n", "config", "[", "\"isEnabled\"", "]", ".", "append", "(", "True", ")", "\n", "config", "[", "\"radius\"", "]", ".", "append", "(", "landmark_radii", "[", "landmark_name", "]", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.get_permutation_side_selection": [[226, 241], ["list", "list", "int", "int", "range", "sympy.utilities.iterables.multiset_permutations", "print", "len"], "function", ["None"], ["", "def", "get_permutation_side_selection", "(", "config_num", ",", "num_objects", ")", ":", "\n", "    ", "indices", "=", "list", "(", "range", "(", "num_objects", ")", ")", "\n", "permutations", "=", "list", "(", "multiset_permutations", "(", "indices", ")", ")", "\n", "remainder", "=", "config_num", "\n", "\n", "side_idx", "=", "remainder", "%", "2", "\n", "remainder", "=", "int", "(", "remainder", "/", "2", ")", "\n", "\n", "landmark_idx", "=", "remainder", "%", "num_objects", "\n", "remainder", "=", "int", "(", "remainder", "/", "num_objects", ")", "\n", "\n", "perm_idx", "=", "remainder", "\n", "if", "perm_idx", ">", "len", "(", "permutations", ")", "-", "1", ":", "\n", "        ", "print", "(", "\"pomdp number too large!\"", ")", "\n", "", "return", "permutations", "[", "perm_idx", "]", ",", "landmark_idx", ",", "side_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.try_make_config_circle_permutations": [[243, 252], ["generate_curriculum_config.get_permutation_side_selection", "generate_curriculum_config.place_landmarks_on_circle_config"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.get_permutation_side_selection", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.place_landmarks_on_circle_config"], ["", "def", "try_make_config_circle_permutations", "(", "num_objects", ",", "config_num", ")", ":", "\n", "    ", "permutation", ",", "landmark_idx", ",", "side_idx", "=", "get_permutation_side_selection", "(", "config_num", ",", "num_objects", ")", "\n", "landmark_names", "=", "[", "PERM_LANDMARK_NAMES", "[", "i", "]", "for", "i", "in", "permutation", "]", "\n", "landmark_radii", "=", "{", "}", "\n", "for", "name", "in", "landmark_names", ":", "\n", "        ", "landmark_radii", "[", "name", "]", "=", "all_landmark_radii", "[", "name", "]", "\n", "\n", "", "config", "=", "place_landmarks_on_circle_config", "(", "landmark_names", ",", "landmark_radii", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.try_make_config_circle_of_landmarks": [[254, 264], ["random.sample", "generate_curriculum_config.place_landmarks_on_circle_config", "list", "all_landmark_radii.keys"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.place_landmarks_on_circle_config"], ["", "def", "try_make_config_circle_of_landmarks", "(", "num_objects", ")", ":", "\n", "\n", "    ", "global", "all_landmark_radii", "\n", "landmark_names", "=", "random", ".", "sample", "(", "list", "(", "all_landmark_radii", ".", "keys", "(", ")", ")", ",", "num_objects", ")", "\n", "landmark_radii", "=", "{", "}", "\n", "for", "name", "in", "landmark_names", ":", "\n", "        ", "landmark_radii", "[", "name", "]", "=", "all_landmark_radii", "[", "name", "]", "\n", "\n", "", "config", "=", "place_landmarks_on_circle_config", "(", "landmark_names", ",", "landmark_radii", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.try_make_config_random": [[266, 328], ["generate_curriculum_config.empty_config", "random.sample", "enumerate", "len", "list", "config[].append", "config[].append", "config[].append", "config[].append", "config[].append", "enumerate", "all_landmark_radii.keys", "random.uniform", "random.randint", "random.randint", "generate_curriculum_config.is_pos_proposal_valid", "numpy.array", "numpy.array", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.empty_config", "home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.is_pos_proposal_valid"], ["", "def", "try_make_config_random", "(", "num_objects", ",", "drone_start_pos", "=", "None", ",", "drone_start_heading", "=", "None", ")", ":", "\n", "    ", "config", "=", "empty_config", "(", ")", "\n", "# landmark_names = sorted(LANDMARK_RADII)", "\n", "global", "all_landmark_radii", "\n", "landmark_radii", "=", "{", "}", "\n", "# Scale up each landmark radius by a random factor in the provided interval", "\n", "if", "FORCE_LANDMARK_SELECTION", ":", "\n", "        ", "num_objects", "=", "len", "(", "FORCE_LANDMARK_SELECTION", ")", "\n", "all_landmark_names", "=", "FORCE_LANDMARK_SELECTION", "\n", "", "else", ":", "\n", "        ", "all_landmark_names", "=", "list", "(", "all_landmark_radii", ".", "keys", "(", ")", ")", "\n", "", "landmark_names", "=", "random", ".", "sample", "(", "all_landmark_names", ",", "num_objects", ")", "\n", "for", "name", "in", "landmark_names", ":", "\n", "        ", "landmark_radii", "[", "name", "]", "=", "all_landmark_radii", "[", "name", "]", "*", "random", ".", "uniform", "(", "LANDMARK_MIN_SCALE", ",", "LANDMARK_MAX_SCALE", ")", "\n", "\n", "", "for", "landmark_name", "in", "landmark_names", ":", "\n", "        ", "config", "[", "\"landmarkName\"", "]", ".", "append", "(", "landmark_name", ")", "\n", "x_sample_range", "=", "(", "X_RANGE", "[", "0", "]", "+", "EDGE_WIDTH", ",", "\n", "X_RANGE", "[", "1", "]", "-", "EDGE_WIDTH", ")", "\n", "y_sample_range", "=", "(", "Y_RANGE", "[", "0", "]", "+", "EDGE_WIDTH", ",", "\n", "Y_RANGE", "[", "1", "]", "-", "EDGE_WIDTH", ")", "\n", "\n", "radius", "=", "landmark_radii", "[", "landmark_name", "]", "\n", "proposed_x", "=", "None", ";", "proposed_y", "=", "None", "\n", "attempts", "=", "0", "\n", "while", "True", ":", "\n", "            ", "proposed_x", "=", "random", ".", "randint", "(", "*", "x_sample_range", ")", "\n", "proposed_y", "=", "random", ".", "randint", "(", "*", "y_sample_range", ")", "\n", "attempts", "+=", "1", "\n", "if", "is_pos_proposal_valid", "(", "config", ",", "proposed_x", ",", "proposed_y", ",", "radius", ",", "drone_start_pos", ")", ":", "\n", "#print (\"Added: \", proposed_x, proposed_y, landmark_name)", "\n", "                ", "break", "\n", "", "if", "attempts", ">", "1000", ":", "\n", "                ", "return", "None", "\n", "#else:", "\n", "#    print (\"Rejected: \", proposed_x, proposed_y)", "\n", "\n", "", "", "config", "[", "\"xPos\"", "]", ".", "append", "(", "proposed_x", ")", "\n", "config", "[", "\"zPos\"", "]", ".", "append", "(", "proposed_y", ")", "\n", "config", "[", "\"isEnabled\"", "]", ".", "append", "(", "True", ")", "\n", "config", "[", "\"radius\"", "]", ".", "append", "(", "radius", ")", "\n", "\n", "if", "drone_start_pos", "is", "not", "None", "and", "drone_start_heading", "is", "not", "None", ":", "\n", "            ", "config", "[", "\"startPos\"", "]", "=", "drone_start_pos", "\n", "config", "[", "\"startHeading\"", "]", "=", "drone_start_heading", "\n", "\n", "# check if any landmarks too close to others", "\n", "", "", "for", "i", ",", "landmark_i", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "        ", "radius_i", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "for", "j", ",", "landmark_j", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "            ", "if", "j", "<=", "i", ":", "\n", "                ", "continue", "\n", "", "radius_j", "=", "landmark_radii", "[", "landmark_j", "]", "\n", "pos_i", "=", "np", ".", "array", "(", "[", "float", "(", "config", "[", "\"xPos\"", "]", "[", "i", "]", ")", ",", "\n", "float", "(", "config", "[", "\"zPos\"", "]", "[", "i", "]", ")", "]", ")", "\n", "pos_j", "=", "np", ".", "array", "(", "[", "float", "(", "config", "[", "\"xPos\"", "]", "[", "j", "]", ")", ",", "\n", "float", "(", "config", "[", "\"zPos\"", "]", "[", "j", "]", ")", "]", ")", "\n", "dist", "=", "(", "(", "pos_i", "-", "pos_j", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "min_dist", "=", "radius_i", "+", "radius_j", "+", "MIN_LANDMARK_BUFFER", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                ", "return", "None", "\n", "", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.make_curves_for_unique_config": [[49, 56], ["range", "data_io.env.load_env_config", "data_io.paths.get_curve_path", "data_io.paths.get_curve_plot_path", "generate_nl_curves.make_new_curve"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_curve_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_curve_plot_path", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.make_new_curve"], ["def", "make_curves_for_unique_config", "(", "config_id", ")", ":", "\n", "    ", "start_pos", ",", "start_lm", "=", "None", ",", "None", "\n", "for", "env_id", "in", "range", "(", "config_id", ",", "config_id", "+", "NEW_CONFIG_EVERY_N", ",", "1", ")", ":", "\n", "        ", "config", "=", "load_env_config", "(", "env_id", ")", "\n", "curve_path", "=", "get_curve_path", "(", "env_id", ")", "\n", "plot_path", "=", "get_curve_plot_path", "(", "env_id", ")", "\n", "start_pos", ",", "start_lm", "=", "make_new_curve", "(", "config", ",", "curve_path", ",", "plot_path", ",", "start_pos", ",", "start_lm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.main": [[57, 66], ["parameters.initialize_experiment", "multiprocessing.Pool", "range", "multiprocessing.Pool.map", "multiprocessing.Pool.join", "multiprocessing.Pool.close"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "global", "last_end_pos", "\n", "last_end_pos", "=", "None", "\n", "pool", "=", "Pool", "(", "16", ")", "\n", "every_nth_env", "=", "range", "(", "START_I", ",", "END_I", ",", "NEW_CONFIG_EVERY_N", ")", "\n", "pool", ".", "map", "(", "make_curves_for_unique_config", ",", "every_nth_env", ")", "\n", "pool", ".", "join", "(", ")", "\n", "pool", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.debug": [[68, 76], ["os.path.join", "range", "open", "json.load", "generate_nl_curves.make_new_curve"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.make_new_curve"], ["", "def", "debug", "(", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "SUPPORT_REAL_DRONE", ",", "\"random_config.json\"", ")", "\n", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "curve_path", "=", "\"debug_curve.%d.json\"", "%", "i", "\n", "plot_path", "=", "\"debug_plot.%d.png\"", "%", "i", "\n", "make_new_curve", "(", "config", ",", "curve_path", ",", "plot_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.try_make_curve": [[78, 177], ["numpy.array", "numpy.array", "range", "generate_nl_curves.is_path_boring", "numpy.array", "len", "landmarks_visited.append", "generate_nl_curves.sample_random_landmark_point", "generate_nl_curves.sample_random_landmark_point", "generate_nl_curves.is_any_point_oob", "float", "float", "len", "len", "generate_nl_curves.get_interval_num", "generate_nl_curves.calc_movement", "generate_nl_curves.get_repulsion", "generate_nl_curves.get_lake_repulsion", "math.sqrt", "generate_nl_curves.get_interval_num", "generate_nl_curves.does_path_overlap", "random.randint", "random.randint", "float", "float", "zip", "sum", "pos_array.append", "generate_nl_curves.is_oob", "generate_nl_curves.is_oob", "print", "float", "float", "range", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.is_path_boring", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.sample_random_landmark_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.sample_random_landmark_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.is_any_point_oob", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_interval_num", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.calc_movement", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_repulsion", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_lake_repulsion", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_interval_num", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.does_path_overlap", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.is_oob", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.is_oob"], ["", "", "def", "try_make_curve", "(", "config", ",", "start_pos", "=", "None", ",", "start_landmark", "=", "None", ")", ":", "\n", "# initialise physics state", "\n", "    ", "start_pos_x_range", "=", "(", "X_RANGE", "[", "0", "]", "+", "START_EDGE_WIDTH", ",", "\n", "X_RANGE", "[", "1", "]", "-", "START_EDGE_WIDTH", ")", "\n", "start_pos_y_range", "=", "(", "Y_RANGE", "[", "0", "]", "+", "START_EDGE_WIDTH", ",", "\n", "Y_RANGE", "[", "1", "]", "-", "START_EDGE_WIDTH", ")", "\n", "pos", "=", "np", ".", "array", "(", "[", "float", "(", "random", ".", "randint", "(", "*", "start_pos_x_range", ")", ")", ",", "\n", "float", "(", "random", ".", "randint", "(", "*", "start_pos_y_range", ")", ")", "]", ")", "\n", "landmark_pos", "=", "np", ".", "array", "(", "[", "[", "float", "(", "x", ")", ",", "float", "(", "y", ")", "]", "\n", "for", "x", ",", "y", "in", "zip", "(", "config", "[", "\"xPos\"", "]", ",", "config", "[", "\"zPos\"", "]", ")", "]", ")", "\n", "landmark_radii", "=", "config", "[", "\"radius\"", "]", "\n", "\n", "# Get the coordinates of every SAMPLE_RATE lake vertex in unity units (vs mesh indices)", "\n", "if", "\"lakeCoords\"", "in", "config", ":", "\n", "        ", "lake_pos", "=", "np", ".", "array", "(", "[", "[", "float", "(", "c", "[", "\"x\"", "]", ")", ",", "float", "(", "c", "[", "\"y\"", "]", ")", "]", "for", "c", "in", "\n", "[", "config", "[", "\"lakeCoords\"", "]", "[", "i", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "config", "[", "\"lakeCoords\"", "]", ")", ",", "SAMPLE_RATE", ")", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "lake_pos", "=", "[", "]", "\n", "\n", "", "if", "len", "(", "lake_pos", ")", ">", "0", ":", "\n", "        ", "lake_pos", "[", ":", ",", "0", "]", "=", "(", "lake_pos", "[", ":", ",", "0", "]", "*", "(", "X_RANGE", "[", "1", "]", "-", "X_RANGE", "[", "0", "]", ")", "/", "MESH_RES", ")", "+", "X_RANGE", "[", "0", "]", "\n", "lake_pos", "[", ":", ",", "1", "]", "=", "(", "lake_pos", "[", ":", ",", "1", "]", "*", "(", "Y_RANGE", "[", "1", "]", "-", "Y_RANGE", "[", "0", "]", ")", "/", "MESH_RES", ")", "+", "Y_RANGE", "[", "0", "]", "\n", "#print (\"Lake Pos: \", len(lake_pos))", "\n", "\n", "# get starting point and landmark visited", "\n", "", "landmarks_visited", "=", "[", "]", "\n", "if", "start_pos", "is", "not", "None", ":", "\n", "        ", "pos", "=", "start_pos", "\n", "landmarks_visited", ".", "append", "(", "start_landmark", ")", "\n", "", "else", ":", "\n", "        ", "pos", "=", "sample_random_landmark_point", "(", "pos", ",", "landmark_pos", ",", "landmarks_visited", ",", "\n", "landmark_radii", ")", "\n", "", "if", "pos", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "num_landmarks_visited", "=", "NUM_LANDMARKS_VISISTED", "if", "NUM_LANDMARKS_VISISTED", "<", "len", "(", "landmark_pos", ")", "else", "len", "(", "landmark_pos", ")", "-", "1", "\n", "\n", "# simulate path", "\n", "pos_array", "=", "[", "pos", "]", "\n", "total_distance", "=", "0.0", "\n", "for", "_", "in", "range", "(", "num_landmarks_visited", "-", "1", ")", ":", "\n", "        ", "next_target", "=", "sample_random_landmark_point", "(", "pos", ",", "landmark_pos", ",", "\n", "landmarks_visited", ",", "\n", "landmark_radii", ")", "\n", "if", "next_target", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "sim_steps", "=", "0", "\n", "while", "True", ":", "\n", "            ", "sim_steps", "+=", "1", "\n", "old_interval_num", "=", "get_interval_num", "(", "total_distance", ")", "\n", "\n", "# calculate movement by simulating physics", "\n", "movement", "=", "calc_movement", "(", "pos", ",", "next_target", ")", "\n", "repulsion", "=", "get_repulsion", "(", "pos", "+", "movement", ",", "landmark_pos", ",", "\n", "landmark_radii", ")", "\n", "if", "repulsion", "is", "not", "None", ":", "\n", "                ", "movement", "+=", "repulsion", "\n", "", "lake_repulsion", "=", "get_lake_repulsion", "(", "pos", "+", "movement", ",", "lake_pos", ")", "\n", "movement", "+=", "lake_repulsion", "\n", "\n", "# update state", "\n", "pos", "=", "pos", "+", "movement", "\n", "distance", "=", "math", ".", "sqrt", "(", "sum", "(", "movement", "**", "2", ")", ")", "\n", "total_distance", "+=", "distance", "\n", "\n", "# check if we have passed into new interval", "\n", "new_interval_num", "=", "get_interval_num", "(", "total_distance", ")", "\n", "if", "new_interval_num", ">", "old_interval_num", ":", "\n", "                ", "pos_array", ".", "append", "(", "pos", ")", "\n", "\n", "# check to see if we are out of bounds or path overlaps (failure)", "\n", "", "x", ",", "y", "=", "pos", "\n", "if", "is_oob", "(", "x", ",", "X_RANGE", ")", "or", "is_oob", "(", "y", ",", "Y_RANGE", ")", ":", "\n", "#print (\"OOB\")", "\n", "                ", "return", "None", "\n", "", "if", "does_path_overlap", "(", "pos_array", ")", ":", "\n", "#print (\"Overlap\")", "\n", "                ", "return", "None", "\n", "\n", "# check to see if we are near target", "\n", "", "dist_to_target", "=", "(", "(", "pos", "-", "next_target", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "if", "dist_to_target", "<", "INTERVAL_LEN", "/", "2", ":", "\n", "                ", "break", "\n", "\n", "", "if", "sim_steps", ">", "MAX_SIM_STEPS", ":", "\n", "                ", "print", "(", "\"Exceeded sim steps!\"", ")", "\n", "return", "None", "\n", "\n", "# check if path is \"boring\"", "\n", "", "", "", "if", "is_path_boring", "(", "pos_array", ",", "landmark_pos", ",", "landmarks_visited", ",", "\n", "landmark_radii", ")", ":", "\n", "#print (\"Boring\")", "\n", "        ", "return", "None", "\n", "", "elif", "is_any_point_oob", "(", "pos_array", ")", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "pos_array", ",", "pos_array", "[", "-", "1", "]", ",", "landmarks_visited", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.make_new_curve": [[179, 223], ["print", "isinstance", "matplotlib.figure", "matplotlib.axes", "plt.axes.plot", "plt.axes.plot", "plt.axes.plot", "plt.axes.set_xlim", "plt.axes.set_ylim", "matplotlib.savefig", "generate_nl_curves.try_make_curve", "open", "json.dump", "list", "list", "float", "float", "zip"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.try_make_curve"], ["", "", "def", "make_new_curve", "(", "config", ",", "curve_path", ",", "plot_path", ",", "start_pos", "=", "None", ",", "start_landmark", "=", "None", ")", ":", "\n", "# try making curve until it succeeds (doesn't go out of bounds)", "\n", "    ", "pos_array", "=", "[", "]", "\n", "print", "(", "\"making curve for path=%s\"", "%", "curve_path", ")", "\n", "# min_num_landmarks = 2", "\n", "while", "True", ":", "\n", "        ", "ret", "=", "try_make_curve", "(", "config", ",", "start_pos", ",", "start_landmark", ")", "\n", "if", "ret", "is", "not", "None", ":", "\n", "            ", "break", "\n", "", "", "pos_array", ",", "last_pos", ",", "last_landmark_visited", "=", "ret", "\n", "assert", "isinstance", "(", "pos_array", ",", "list", ")", "\n", "\n", "# write pos array to file", "\n", "pos_lists", "=", "{", "\"x_array\"", ":", "[", "x", "for", "x", ",", "_", "in", "pos_array", "]", ",", "\n", "\"z_array\"", ":", "[", "y", "for", "_", ",", "y", "in", "pos_array", "]", "}", "\n", "with", "open", "(", "curve_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "pos_lists", ",", "fp", ")", "\n", "\n", "", "landmark_pos", "=", "[", "[", "float", "(", "x", ")", ",", "float", "(", "y", ")", "]", "\n", "for", "x", ",", "y", "in", "zip", "(", "config", "[", "\"xPos\"", "]", ",", "config", "[", "\"zPos\"", "]", ")", "]", "\n", "plt", ".", "figure", "(", ")", "\n", "axes", "=", "plt", ".", "axes", "(", ")", "\n", "# plot landmarks", "\n", "axes", ".", "plot", "(", "[", "x", "for", "x", ",", "_", "in", "landmark_pos", "]", ",", "\n", "[", "y", "for", "_", ",", "y", "in", "landmark_pos", "]", ",", "\"bo\"", ")", "\n", "# plot route starting point", "\n", "x_start", ",", "y_start", "=", "pos_array", "[", "0", "]", "\n", "axes", ".", "plot", "(", "[", "x_start", "]", ",", "[", "y_start", "]", ",", "\"ro\"", ",", "ms", "=", "10.0", ")", "\n", "# plot arrows", "\n", "\"\"\"\n    for i, (x, y) in enumerate(pos_array):\n        if i == len(pos_array) - 1:\n            continue\n        x_new, y_new = pos_array[i + 1]\n        x_d, y_d = x_new - x, y_new - y\n        axes.arrow(x, y, x_d, y_d, head_width=50.0, head_length=80.0,\n                   fc=\"r\", ec=\"r\")\n    \"\"\"", "\n", "axes", ".", "plot", "(", "[", "x", "for", "x", ",", "_", "in", "pos_array", "[", "1", ":", "]", "]", ",", "\n", "[", "y", "for", "_", ",", "y", "in", "pos_array", "[", "1", ":", "]", "]", ",", "\"r.\"", ")", "\n", "axes", ".", "set_xlim", "(", "list", "(", "X_RANGE", ")", ")", "\n", "axes", ".", "set_ylim", "(", "list", "(", "Y_RANGE", ")", ")", "\n", "plt", ".", "savefig", "(", "plot_path", ")", "\n", "return", "last_pos", ",", "last_landmark_visited", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.sample_random_landmark_point": [[225, 249], ["random.choice", "landmarks_already_chosen.append", "numpy.array", "generate_nl_curves.is_any_point_oob", "len", "enumerate", "sorted", "len", "len", "random.random", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.is_any_point_oob"], ["", "def", "sample_random_landmark_point", "(", "current_pos", ",", "landmark_pos", ",", "\n", "landmarks_already_chosen", ",", "landmark_radii", ")", ":", "\n", "    ", "landmark_dist", "=", "(", "(", "landmark_pos", "-", "current_pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "landmark_sort_index", "=", "[", "(", "dist", ",", "i", ")", "for", "i", ",", "dist", "in", "enumerate", "(", "landmark_dist", ")", "\n", "if", "dist", ">=", "MIN_DIST_TO_NEXT", "]", "\n", "landmarks_sorted", "=", "[", "i", "for", "_", ",", "i", "in", "sorted", "(", "landmark_sort_index", ")", "]", "\n", "landmarks_sorted_filtered", "=", "[", "i", "for", "i", "in", "landmarks_sorted", "\n", "if", "i", "not", "in", "landmarks_already_chosen", "]", "\n", "close_landmark_num", "=", "CLOSE_LANDMARK_NUM", "if", "CLOSE_LANDMARK_NUM", ">=", "len", "(", "landmarks_sorted", ")", "else", "len", "(", "landmarks_sorted", ")", "-", "1", "\n", "landmark_choices", "=", "landmarks_sorted_filtered", "[", ":", "close_landmark_num", "]", "\n", "if", "len", "(", "landmark_choices", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "next_landmark", "=", "random", ".", "choice", "(", "landmark_choices", ")", "\n", "landmarks_already_chosen", ".", "append", "(", "next_landmark", ")", "\n", "theta", "=", "random", ".", "random", "(", ")", "*", "2", "*", "math", ".", "pi", "\n", "x", ",", "z", "=", "landmark_pos", "[", "next_landmark", "]", "\n", "landmark_radius", "=", "landmark_radii", "[", "next_landmark", "]", "\n", "sample_point", "=", "np", ".", "array", "(", "[", "x", "+", "math", ".", "cos", "(", "theta", ")", "*", "landmark_radius", ",", "\n", "z", "+", "math", ".", "sin", "(", "theta", ")", "*", "landmark_radius", "]", ")", "\n", "\n", "if", "is_any_point_oob", "(", "[", "sample_point", "]", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "sample_point", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.calc_movement": [[251, 260], ["numpy.array", "random.random", "random.random", "math.cos", "math.sin"], "function", ["None"], ["", "def", "calc_movement", "(", "pos", ",", "next_target", ")", ":", "\n", "    ", "movement_vector", "=", "(", "next_target", "-", "pos", ")", "\n", "movement_vector_len", "=", "(", "(", "next_target", "-", "pos", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "movement_signal", "=", "movement_vector", "/", "movement_vector_len", "*", "MOVE_DIST", "\n", "noise_angle", "=", "random", ".", "random", "(", ")", "*", "math", ".", "pi", "*", "2", "\n", "noise_val", "=", "random", ".", "random", "(", ")", "*", "MOVE_DIST", "*", "NOISE_VAL", "\n", "noise", "=", "np", ".", "array", "(", "[", "math", ".", "cos", "(", "noise_angle", ")", "*", "noise_val", ",", "\n", "math", ".", "sin", "(", "noise_angle", ")", "*", "noise_val", "]", ")", "\n", "return", "movement_signal", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.get_repulsion": [[262, 274], ["min", "enumerate", "enumerate"], "function", ["None"], ["", "def", "get_repulsion", "(", "pos", ",", "landmark_pos", ",", "landmark_radii", ")", ":", "\n", "    ", "landmark_dist", "=", "(", "(", "landmark_pos", "-", "pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "min_dist", ",", "landmark_i", "=", "min", "(", "(", "d", ",", "i", ")", "for", "i", ",", "d", "in", "enumerate", "(", "landmark_dist", ")", ")", "\n", "for", "landmark_i", ",", "dist", "in", "enumerate", "(", "landmark_dist", ")", ":", "\n", "        ", "landmark_radius", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "if", "dist", "<", "landmark_radius", ":", "\n", "            ", "repulsion_dir", "=", "pos", "-", "landmark_pos", "[", "landmark_i", "]", "\n", "repulsion_dir_len", "=", "(", "repulsion_dir", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "repulsion_dist", "=", "landmark_radius", "-", "min_dist", "\n", "repulsion", "=", "repulsion_dir", "*", "repulsion_dist", "/", "repulsion_dir_len", "\n", "return", "repulsion", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.get_lake_repulsion": [[276, 301], ["numpy.zeros", "len", "numpy.zeros", "numpy.linalg.norm", "numpy.argsort", "numpy.linalg.norm", "float"], "function", ["None"], ["", "def", "get_lake_repulsion", "(", "pos", ",", "lake_pos", ")", ":", "\n", "    ", "if", "len", "(", "lake_pos", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "", "lake_dist", "=", "[", "np", ".", "linalg", ".", "norm", "(", "lake_cell", "-", "pos", ")", "for", "lake_cell", "in", "lake_pos", "]", "\n", "NUM_POINTS", "=", "20", "\n", "closest_n", "=", "np", ".", "argsort", "(", "lake_dist", ")", "[", ":", "NUM_POINTS", "]", "\n", "close_points", "=", "[", "lake_pos", "[", "i", "]", "for", "i", "in", "closest_n", "]", "\n", "\n", "points_added", "=", "0", "\n", "repulsion", "=", "np", ".", "zeros", "(", "2", ")", "\n", "for", "point", "in", "close_points", ":", "\n", "        ", "repulsion_dir", "=", "pos", "-", "point", "\n", "repulsion_norm", "=", "np", ".", "linalg", ".", "norm", "(", "repulsion_dir", ")", "\n", "if", "repulsion_norm", ">", "LAKE_REPULSION_DIST", ":", "\n", "            ", "break", "\n", "", "repulsion", "+=", "(", "repulsion_dir", "/", "repulsion_norm", ")", "\n", "points_added", "+=", "1", "\n", "\n", "", "if", "points_added", "==", "0", ":", "\n", "        ", "return", "repulsion", "\n", "\n", "", "repulsion_dist", "=", "float", "(", "LAKE_REPULSION", ")", "/", "points_added", "\n", "output_repulsion", "=", "repulsion", "*", "repulsion_dist", "\n", "return", "output_repulsion", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.get_interval_num": [[303, 305], ["int"], "function", ["None"], ["", "def", "get_interval_num", "(", "total_distance", ")", ":", "\n", "    ", "return", "int", "(", "total_distance", "/", "INTERVAL_LEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.is_oob": [[307, 312], ["env_config.generation.generate_random_config.X_RANGE", "env_config.generation.generate_random_config.Y_RANGE"], "function", ["None"], ["", "def", "is_oob", "(", "val", ",", "val_range", ")", ":", "\n", "    ", "if", "val", "<", "val_range", "[", "0", "]", "or", "val", ">", "val_range", "[", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.does_path_overlap": [[314, 326], ["numpy.array", "min", "len"], "function", ["None"], ["", "", "def", "does_path_overlap", "(", "pos_array", ")", ":", "\n", "    ", "NUM_SKIP", "=", "3", "\n", "if", "len", "(", "pos_array", ")", "<=", "NUM_SKIP", ":", "\n", "        ", "return", "False", "\n", "", "current_pos", "=", "pos_array", "[", "-", "1", "]", "\n", "prev_pos_array", "=", "np", ".", "array", "(", "pos_array", "[", ":", "-", "NUM_SKIP", "]", ")", "\n", "distances", "=", "(", "(", "prev_pos_array", "-", "current_pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "min_distance", "=", "min", "(", "distances", ")", "\n", "if", "min_distance", "<=", "INTERVAL_LEN", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.is_any_point_oob": [[327, 335], ["None"], "function", ["None"], ["", "", "def", "is_any_point_oob", "(", "list_or_array_of_points", ")", ":", "\n", "    ", "for", "pt", "in", "list_or_array_of_points", ":", "\n", "        ", "if", "pt", "[", "0", "]", "<", "DRONE_EDGE_CLEARANCE", "or", "pt", "[", "0", "]", ">", "1000", "-", "DRONE_EDGE_CLEARANCE", "or", "pt", "[", "1", "]", "<", "DRONE_EDGE_CLEARANCE", "or", "pt", "[", "1", "]", ">", "1000", "-", "DRONE_EDGE_CLEARANCE", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.is_path_boring": [[336, 345], ["None"], "function", ["None"], ["", "def", "is_path_boring", "(", "pos_array", ",", "landmark_pos", ",", "landmarks_visited", ",", "landmark_radii", ")", ":", "\n", "# make sure we spend a reasonable amount of time circling each landmark", "\n", "    ", "for", "landmark_i", "in", "landmarks_visited", "[", "1", ":", "]", ":", "\n", "        ", "target_pos", "=", "landmark_pos", "[", "landmark_i", "]", "\n", "pos_dist", "=", "(", "(", "pos_array", "-", "target_pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "landmark_radius", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "if", "(", "pos_dist", "<", "landmark_radius", "+", "INTERVAL_LEN", ")", ".", "sum", "(", ")", "<", "4", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_nl_curves.generate_random_wrong_path": [[346, 372], ["data_io.env.load_env_config", "numpy.asarray", "numpy.asarray", "numpy.argmin", "data_io.env.convert_path", "data_io.env.load_path", "list", "print", "generate_nl_curves.try_make_curve", "zip", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.try_make_curve"], ["", "def", "generate_random_wrong_path", "(", "env_id", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "    ", "env_config", "=", "load_env_config", "(", "env_id", ")", "\n", "current_path", "=", "load_path", "(", "env_id", ")", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "start_pos", "=", "current_path", "[", "0", "]", "\n", "landmark_locations", "=", "np", ".", "asarray", "(", "list", "(", "zip", "(", "env_config", "[", "\"xPos\"", "]", ",", "env_config", "[", "\"zPos\"", "]", ")", ")", ")", "\n", "distances", "=", "np", ".", "asarray", "(", "[", "np", ".", "linalg", ".", "norm", "(", "start_pos", "-", "p", ")", "for", "p", "in", "landmark_locations", "]", ")", "\n", "closest_lm_idx", "=", "np", ".", "argmin", "(", "distances", ")", "\n", "start_landmark", "=", "env_config", "[", "\"landmarkName\"", "]", "[", "closest_lm_idx", "]", "\n", "\n", "# For segment-level, we're never (if ever) gonna need more than 3 landmarks", "\n", "global", "NUM_LANDMARKS_VISISTED", ",", "DRONE_EDGE_CLEARANCE", "\n", "NUM_LANDMARKS_VISISTED", "=", "3", "\n", "DRONE_EDGE_CLEARANCE", "=", "0", "\n", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "        ", "print", "(", "f\"Attempt: {i}\"", ")", "\n", "i", "+=", "1", "\n", "ret", "=", "try_make_curve", "(", "env_config", ",", "start_pos", ",", "start_landmark", ")", "\n", "if", "ret", "is", "not", "None", ":", "\n", "            ", "break", "\n", "", "", "pos_array", ",", "last_pos", ",", "last_landmark_visited", "=", "ret", "\n", "\n", "# Return a trajectory of the same length as the one which is being replaced", "\n", "return", "convert_path", "(", "pos_array", "[", ":", "(", "end_idx", "-", "start_idx", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.levenshtein": [[26, 45], ["range", "enumerate", "len", "len", "generate_landmark_alignments.levenshtein", "len", "len", "enumerate", "len", "current_row.append", "min"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.levenshtein", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "levenshtein", "(", "s1", ",", "s2", ")", ":", "\n", "    ", "if", "len", "(", "s1", ")", "<", "len", "(", "s2", ")", ":", "\n", "        ", "return", "levenshtein", "(", "s2", ",", "s1", ")", "\n", "\n", "# len(s1) >= len(s2)", "\n", "", "if", "len", "(", "s2", ")", "==", "0", ":", "\n", "        ", "return", "len", "(", "s1", ")", "\n", "\n", "", "previous_row", "=", "range", "(", "len", "(", "s2", ")", "+", "1", ")", "\n", "for", "i", ",", "c1", "in", "enumerate", "(", "s1", ")", ":", "\n", "        ", "current_row", "=", "[", "i", "+", "1", "]", "\n", "for", "j", ",", "c2", "in", "enumerate", "(", "s2", ")", ":", "\n", "            ", "insertions", "=", "previous_row", "[", "j", "+", "1", "]", "+", "1", "# j+1 instead of j since previous_row and current_row are one character longer", "\n", "deletions", "=", "current_row", "[", "j", "]", "+", "1", "# than s2", "\n", "substitutions", "=", "previous_row", "[", "j", "]", "+", "(", "c1", "!=", "c2", ")", "\n", "current_row", ".", "append", "(", "min", "(", "insertions", ",", "deletions", ",", "substitutions", ")", ")", "\n", "", "previous_row", "=", "current_row", "\n", "\n", "", "return", "previous_row", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.get_adjacency_mat": [[47, 54], ["len", "numpy.zeros", "enumerate", "enumerate", "generate_landmark_alignments.levenshtein"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.levenshtein"], ["", "def", "get_adjacency_mat", "(", "corpus", ")", ":", "\n", "    ", "vocab_size", "=", "len", "(", "corpus", ")", "\n", "adjacency_mat", "=", "np", ".", "zeros", "(", "(", "vocab_size", ",", "vocab_size", ")", ")", "\n", "for", "i", ",", "word1", "in", "enumerate", "(", "corpus", ")", ":", "\n", "        ", "for", "j", ",", "word2", "in", "enumerate", "(", "corpus", ")", ":", "\n", "            ", "adjacency_mat", "[", "i", "]", "[", "j", "]", "=", "levenshtein", "(", "word1", ",", "word2", ")", "\n", "", "", "return", "adjacency_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.cluster_corpus": [[56, 127], ["data_io.instructions.load_english_vocabulary", "train_instructions.items", "numpy.zeros", "sorted", "enumerate", "print", "print", "print", "len", "list", "any", "enumerate", "int", "terms[].append", "data_io.instructions.split_instruction", "potential_misspellings.append", "terms.keys", "unresolved_words.append", "generate_landmark_alignments.levenshtein", "numpy.argmin", "terms[].append", "unresolved_words.append", "rejected_words.append", "data_io.instructions.clean_instruction", "char.isdigit", "str", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.load_english_vocabulary", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.split_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.levenshtein", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction"], ["", "def", "cluster_corpus", "(", "corpus", ",", "train_instructions", ",", "max_edit_distance", "=", "3", ")", ":", "\n", "    ", "english", "=", "load_english_vocabulary", "(", ")", "\n", "terms", "=", "{", "}", "\n", "potential_misspellings", "=", "[", "]", "\n", "\n", "# Count the number of times each word occurs in the corpus", "\n", "word_counts", "=", "{", "}", "\n", "for", "word", "in", "corpus", ":", "\n", "        ", "word_counts", "[", "word", "]", "=", "0", "\n", "", "for", "env_id", ",", "instruction_sets", "in", "train_instructions", ".", "items", "(", ")", ":", "\n", "        ", "for", "instruction_set", "in", "instruction_sets", "[", "0", "]", "[", "\"instructions\"", "]", ":", "\n", "            ", "instruction_str", "=", "instruction_set", "[", "\"instruction\"", "]", "\n", "instr_split", "=", "split_instruction", "(", "clean_instruction", "(", "instruction_str", ")", ")", "\n", "\n", "for", "word", "in", "instr_split", ":", "\n", "                ", "word_counts", "[", "word", "]", "+=", "1", "\n", "\n", "", "", "", "for", "word", "in", "corpus", ":", "\n", "        ", "if", "word", "in", "english", ":", "\n", "            ", "terms", "[", "word", "]", "=", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "potential_misspellings", ".", "append", "(", "word", ")", "\n", "\n", "", "", "terms", "[", "UNK_TERM", "]", "=", "[", "]", "\n", "\n", "# Find the closest english word by edit distance", "\n", "edit_dists", "=", "np", ".", "zeros", "(", "(", "len", "(", "terms", ")", ")", ")", "\n", "term_list", "=", "sorted", "(", "list", "(", "terms", ".", "keys", "(", ")", ")", ")", "\n", "\n", "unresolved_words", "=", "[", "]", "\n", "\n", "for", "i", ",", "misspelled_word", "in", "enumerate", "(", "potential_misspellings", ")", ":", "\n", "\n", "# Words that contain a numbers should be assumed not to be misspellings", "\n", "        ", "if", "any", "(", "char", ".", "isdigit", "(", ")", "for", "char", "in", "misspelled_word", ")", ":", "\n", "            ", "unresolved_words", ".", "append", "(", "misspelled_word", ")", "\n", "continue", "\n", "\n", "# For other words, see if they might be misspellings of one of the terms", "\n", "", "for", "j", ",", "term", "in", "enumerate", "(", "term_list", ")", ":", "\n", "            ", "edit_dists", "[", "j", "]", "=", "levenshtein", "(", "misspelled_word", ",", "term", ")", "\n", "", "closest", "=", "int", "(", "np", ".", "argmin", "(", "edit_dists", ")", ")", "\n", "min_dist", "=", "edit_dists", "[", "closest", "]", "\n", "\n", "# If the misspelled word is likely a misspelling of the closest term, add it in, except to the \"NA\" term", "\n", "if", "min_dist", "<=", "max_edit_distance", "and", "term_list", "[", "closest", "]", "!=", "UNK_TERM", ":", "\n", "            ", "terms", "[", "term_list", "[", "closest", "]", "]", ".", "append", "(", "misspelled_word", ")", "\n", "# Otherwise add it to the list of unresolved words that are too different from every term", "\n", "", "else", ":", "\n", "            ", "unresolved_words", ".", "append", "(", "misspelled_word", ")", "\n", "\n", "", "", "rejected_words", "=", "[", "]", "\n", "\n", "# Handle words that are not misspellings", "\n", "for", "unresolved_word", "in", "unresolved_words", ":", "\n", "# If the word is not a misspelling and is also very infrequent, reject it", "\n", "        ", "if", "word_counts", "[", "unresolved_word", "]", "<", "MIN_TERM_OCCURENCES", ":", "\n", "            ", "rejected_words", ".", "append", "(", "unresolved_word", ")", "\n", "# Otherwise create a term for this word", "\n", "", "else", ":", "\n", "            ", "terms", "[", "unresolved_word", "]", "=", "[", "unresolved_word", "]", "\n", "\n", "# For each rejected word, add it to the unknown term", "\n", "", "", "for", "rejected_word", "in", "rejected_words", ":", "\n", "        ", "terms", "[", "UNK_TERM", "]", ".", "append", "(", "rejected_word", ")", "\n", "\n", "", "print", "(", "\"After clustering words, found \"", "+", "str", "(", "len", "(", "rejected_words", ")", ")", "+", "\" rare ones that have been rejected:\"", ")", "\n", "print", "(", "rejected_words", ")", "\n", "print", "(", "\"...\"", ")", "\n", "\n", "return", "terms", ",", "rejected_words", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.close_landmark_names": [[129, 140], ["enumerate", "numpy.asarray", "numpy.linalg.norm", "close_landmarks.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "close_landmark_names", "(", "env_config", ",", "path", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "    ", "close_landmarks", "=", "[", "]", "\n", "for", "step", "in", "path", "[", "start_idx", ":", "end_idx", "]", ":", "\n", "        ", "for", "i", ",", "lm_name", "in", "enumerate", "(", "env_config", "[", "\"landmarkName\"", "]", ")", ":", "\n", "            ", "lm_x", "=", "env_config", "[", "\"xPos\"", "]", "[", "i", "]", "\n", "lm_y", "=", "env_config", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "lm_pos", "=", "np", ".", "asarray", "(", "[", "lm_x", ",", "lm_y", "]", ")", "\n", "dst", "=", "np", ".", "linalg", ".", "norm", "(", "lm_pos", "-", "step", ")", "\n", "if", "dst", "<", "CLOSE_LM_THRES", "and", "lm_name", "not", "in", "close_landmarks", ":", "\n", "                ", "close_landmarks", ".", "append", "(", "lm_name", ")", "\n", "", "", "", "return", "close_landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.ground_terms": [[142, 256], ["len", "len", "len", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "env_config.definitions.landmarks.get_landmark_name_to_index", "clustered_corpus.items", "train_instructions.items", "numpy.expand_dims().repeat", "numpy.expand_dims().repeat", "range", "term_meanings.keys", "print", "sorted", "data_io.env.load_path", "data_io.env.load_env_config", "numpy.log", "numpy.asarray", "list", "list", "list", "clustered_corpus.keys", "generate_landmark_alignments.close_landmark_names", "data_io.instructions.split_instruction", "data_io.instructions.words_to_terms", "numpy.expand_dims", "numpy.expand_dims", "numpy.argsort", "reversed", "reversed", "common_words.append", "len", "print", "str", "data_io.instructions.clean_instruction", "range"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.utils.text2speech.repeat", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.eval.evaluate_saved_rollouts.log", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.close_landmark_names", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.split_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.words_to_terms", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction"], ["", "def", "ground_terms", "(", "word2id", ",", "clustered_corpus", ",", "landmark_names", ",", "train_instructions", ")", ":", "\n", "# the clustered corpus is a dictionary of lists, where the keys are valid english words and the values are", "\n", "# lists of words found in the corpus that are assumed to be misspellings of the key valid words", "\n", "\n", "# We make the distinction that a word is any word in an instruction", "\n", "# Terms are words in the english vocabulary. Multiple words (misspellings) can map to a single term.", "\n", "\n", "    ", "num_terms", "=", "len", "(", "clustered_corpus", ")", "\n", "vocab_size", "=", "len", "(", "word2id", ")", "\n", "num_landmarks", "=", "len", "(", "landmark_names", ")", "\n", "\n", "# This is gonna be the new word2id, once we start using the thesaurus", "\n", "term2id", "=", "{", "}", "\n", "id2term", "=", "{", "}", "\n", "for", "i", ",", "term", "in", "enumerate", "(", "sorted", "(", "clustered_corpus", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "term2id", "[", "term", "]", "=", "i", "\n", "id2term", "[", "i", "]", "=", "term", "\n", "\n", "# Calculate the mutual information between each cluster and each landmark", "\n", "# Number of times each term appears in an instruction", "\n", "", "term_occurences", "=", "np", ".", "zeros", "(", "num_terms", ")", "\n", "# Number of times each landmark appears near a segment path", "\n", "landmark_occurences", "=", "np", ".", "zeros", "(", "num_landmarks", ")", "\n", "# The number of times each term and landmark combination appears in the instruction and near the path", "\n", "term_landmark_cooccurences", "=", "np", ".", "zeros", "(", "(", "num_terms", ",", "num_landmarks", ")", ")", "\n", "# The number of total segments that were considered", "\n", "total_occurences", "=", "0", "\n", "\n", "landmark_indices", "=", "get_landmark_name_to_index", "(", ")", "\n", "\n", "# Inverse the clusters so that we can efficiently map each word in each instruction to it's cluster core", "\n", "word2term", "=", "{", "}", "\n", "for", "real_word", ",", "misspellings", "in", "clustered_corpus", ".", "items", "(", ")", ":", "\n", "        ", "for", "misspelling", "in", "misspellings", ":", "\n", "            ", "word2term", "[", "misspelling", "]", "=", "real_word", "\n", "\n", "# Count landmark and word occurences and co-occurences", "\n", "", "", "for", "env_id", ",", "instruction_sets", "in", "train_instructions", ".", "items", "(", ")", ":", "\n", "        ", "path", "=", "load_path", "(", "env_id", ")", "\n", "env_config", "=", "load_env_config", "(", "env_id", ")", "\n", "for", "instruction_set", "in", "instruction_sets", "[", "0", "]", "[", "\"instructions\"", "]", ":", "\n", "            ", "instruction_str", "=", "instruction_set", "[", "\"instruction\"", "]", "\n", "start_idx", "=", "instruction_set", "[", "\"start_idx\"", "]", "\n", "end_idx", "=", "instruction_set", "[", "\"end_idx\"", "]", "\n", "\n", "present_landmarks", "=", "close_landmark_names", "(", "env_config", ",", "path", ",", "start_idx", ",", "end_idx", ")", "\n", "present_lm_indices", "=", "[", "landmark_indices", "[", "lm", "]", "for", "lm", "in", "present_landmarks", "]", "\n", "\n", "mentioned_words", "=", "split_instruction", "(", "clean_instruction", "(", "instruction_str", ")", ")", "\n", "mentioned_terms", "=", "words_to_terms", "(", "mentioned_words", ",", "word2term", ")", "\n", "\n", "for", "term", "in", "mentioned_terms", ":", "\n", "                ", "term_id", "=", "term2id", "[", "term", "]", "\n", "term_occurences", "[", "term_id", "]", "+=", "1", "\n", "\n", "", "for", "lm_idx", "in", "present_lm_indices", ":", "\n", "                ", "landmark_occurences", "[", "lm_idx", "]", "+=", "1", "\n", "for", "term", "in", "mentioned_terms", ":", "\n", "                    ", "term_id", "=", "term2id", "[", "term", "]", "\n", "term_landmark_cooccurences", "[", "term_id", "]", "[", "lm_idx", "]", "+=", "1", "\n", "\n", "", "", "total_occurences", "+=", "1", "\n", "\n", "", "", "term_prob", "=", "np", ".", "expand_dims", "(", "term_occurences", "/", "total_occurences", ",", "1", ")", ".", "repeat", "(", "num_landmarks", ",", "1", ")", "\n", "landmark_prob", "=", "np", ".", "expand_dims", "(", "landmark_occurences", "/", "total_occurences", ",", "0", ")", ".", "repeat", "(", "num_terms", ",", "0", ")", "\n", "term_and_landmark_prob", "=", "term_landmark_cooccurences", "/", "total_occurences", "\n", "\n", "# term_and_landmark_prob has dimensions 0: terms, 1: landmarks", "\n", "mutual_info_factor", "=", "term_and_landmark_prob", "/", "(", "landmark_prob", "*", "term_prob", "+", "1e-27", ")", "\n", "#mutual_info_factor = term_and_landmark_prob / ((1 / num_landmarks) * term_prob + 1e-9)", "\n", "mutual_info", "=", "term_and_landmark_prob", "*", "np", ".", "log", "(", "mutual_info_factor", "+", "1e-27", ")", "\n", "\n", "# The above line is the correct formula for mutual information. For our case, below formula might be better?", "\n", "# The mutual information is higher for common words than uncommon ones. We might prefer the opposite effect.", "\n", "# On the other hand, uncommon words are more likely to spuriously correlate with landmarks, which will cause a", "\n", "# less reliable corpus.", "\n", "#mutual_info = np.log(mutual_info_factor + 1e-27)", "\n", "\n", "# Ground each term and produce the thesaurus", "\n", "term_meanings", "=", "{", "}", "\n", "\n", "common_words", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_terms", ")", ":", "\n", "        ", "grounded_lm_indices", "=", "[", "idx", "for", "idx", "in", "range", "(", "num_landmarks", ")", "if", "mutual_info", "[", "i", "]", "[", "idx", "]", ">", "MUTUAL_INFO_THRESHOLD", "]", "\n", "\n", "grounded_lm_names", "=", "[", "landmark_names", "[", "idx", "]", "for", "idx", "in", "grounded_lm_indices", "]", "\n", "mutual_infos", "=", "np", ".", "asarray", "(", "[", "mutual_info", "[", "i", "]", "[", "idx", "]", "for", "idx", "in", "grounded_lm_indices", "]", ")", "\n", "\n", "args", "=", "list", "(", "np", ".", "argsort", "(", "mutual_infos", ")", ")", "\n", "grounded_lm_names", "=", "list", "(", "reversed", "(", "[", "grounded_lm_names", "[", "idx", "]", "for", "idx", "in", "args", "]", ")", ")", "\n", "mutual_infos", "=", "list", "(", "reversed", "(", "[", "mutual_infos", "[", "idx", "]", "for", "idx", "in", "args", "]", ")", ")", "\n", "\n", "# If the word is too common to be referring to a landmark, ignore ita", "\n", "this_term_prob", "=", "term_prob", "[", "i", "]", "[", "0", "]", "\n", "if", "this_term_prob", ">", "MAX_TERM_PROB", ":", "\n", "            ", "common_words", ".", "append", "(", "id2term", "[", "i", "]", ")", "\n", "grounded_lm_names", "=", "[", "]", "\n", "mutual_infos", "=", "[", "]", "\n", "\n", "", "term_meanings", "[", "id2term", "[", "i", "]", "]", "=", "{", "\n", "\"landmarks\"", ":", "grounded_lm_names", ",", "\n", "\"mutual_info\"", ":", "mutual_infos", ",", "\n", "\"term_prob\"", ":", "this_term_prob", "\n", "}", "\n", "\n", "", "for", "k", "in", "term_meanings", ".", "keys", "(", ")", ":", "\n", "        ", "if", "len", "(", "term_meanings", "[", "k", "]", "[", "\"landmarks\"", "]", ")", ">", "0", ":", "\n", "            ", "print", "(", "k", ",", "term_meanings", "[", "k", "]", ")", "\n", "\n", "", "", "print", "(", "\"Ignored groundings for these common words: \"", "+", "str", "(", "common_words", ")", ")", "\n", "\n", "return", "term_meanings", ",", "word2term", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.findword": [[260, 266], ["dataset.items"], "function", ["None"], ["", "def", "findword", "(", "word", ",", "dataset", ")", ":", "\n", "    ", "for", "env", ",", "sets", "in", "dataset", ".", "items", "(", ")", ":", "\n", "        ", "for", "set", "in", "sets", "[", "0", "]", "[", "\"instructions\"", "]", ":", "\n", "            ", "if", "word", "in", "set", "[", "\"instruction\"", "]", ":", "\n", "                ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.generate_thesaurus": [[268, 287], ["parameters.initialize_experiment", "data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "generate_landmark_alignments.cluster_corpus", "env_config.definitions.landmarks.get_landmark_names", "generate_landmark_alignments.ground_terms", "data_io.instructions.save_landmark_alignments"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.cluster_corpus", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_names", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_landmark_alignments.ground_terms", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.save_landmark_alignments"], ["", "def", "generate_thesaurus", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "train_instr", ",", "dev_instr", ",", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "_", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ",", "use_thesaurus", "=", "False", ")", "\n", "\n", "terms", ",", "rejected_words", "=", "cluster_corpus", "(", "corpus", ",", "train_instr", ")", "\n", "\n", "landmark_names", "=", "get_landmark_names", "(", ")", "\n", "\n", "term_groundings", ",", "word2term", "=", "ground_terms", "(", "word2token", ",", "terms", ",", "landmark_names", ",", "train_instr", ")", "\n", "\n", "thesaurus", "=", "{", "\n", "\"term2word\"", ":", "terms", ",", "\n", "\"word2term\"", ":", "word2term", ",", "\n", "\"term_groundings\"", ":", "term_groundings", ",", "\n", "\"rejected_words\"", ":", "rejected_words", "\n", "}", "\n", "\n", "save_landmark_alignments", "(", "thesaurus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_images_of_landmarks.save_landmark_img": [[29, 34], ["data_io.paths.get_landmark_images_dir", "os.makedirs", "os.path.join", "scipy.misc.imsave", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_landmark_images_dir"], ["def", "save_landmark_img", "(", "state", ",", "landmark_name", ",", "i", ",", "eval", ")", ":", "\n", "    ", "data_dir", "=", "get_landmark_images_dir", "(", "landmark_name", ",", "eval", ")", "\n", "os", ".", "makedirs", "(", "data_dir", ",", "exist_ok", "=", "True", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "landmark_name", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".jpg\"", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "full_path", ",", "state", ".", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config.generate_config_files": [[55, 93], ["parameters.initialize_experiment", "os.makedirs", "range", "list", "os.path.dirname", "open", "json.dump", "data_io.paths.get_env_config_path", "os.makedirs", "env_config.definitions.landmarks.PORTABLE_LANDMARK_RADII.keys", "data_io.paths.get_config_metadata_path", "data_io.paths.get_config_metadata_path", "len", "int", "print", "os.path.dirname", "open", "json.dump", "random.uniform", "generate_random_config.try_make_config", "sys.stdout.write", "env_config.generation.terrain_generation.add_lake_to_config", "print", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_metadata_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_config_metadata_path", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.try_make_config", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.add_lake_to_config"], ["def", "generate_config_files", "(", "start_i", ",", "end_i", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "\n", "config_metadata", "=", "{", "\n", "\"all_landmark_names\"", ":", "list", "(", "PORTABLE_LANDMARK_RADII", ".", "keys", "(", ")", ")", ",", "\n", "\"all_landmark_radii\"", ":", "PORTABLE_LANDMARK_RADII", ",", "\n", "\"new_config_every_n\"", ":", "NEW_CONFIG_EVERY_N", "\n", "}", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "paths", ".", "get_config_metadata_path", "(", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "paths", ".", "get_config_metadata_path", "(", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config_metadata", ",", "fp", ")", "\n", "\n", "", "config", "=", "None", "\n", "for", "config_num", "in", "range", "(", "start_i", ",", "end_i", ")", ":", "\n", "# attempt to space landmarks", "\n", "        ", "attempts", "=", "0", "\n", "# It's easier to generate a config with less objects, so to have a truly uniform distribution, we must sample it here.", "\n", "if", "FORCE_LANDMARK_SELECTION", ":", "\n", "            ", "num_objects", "=", "len", "(", "FORCE_LANDMARK_SELECTION", ")", "\n", "", "else", ":", "\n", "            ", "num_objects", "=", "int", "(", "random", ".", "uniform", "(", "MIN_NUM_OBJECTS", ",", "MAX_NUM_OBJECTS", ")", ")", "\n", "\n", "", "if", "config_num", "%", "NEW_CONFIG_EVERY_N", "==", "0", "or", "config", "is", "None", ":", "\n", "            ", "print", "(", "\"making config %d with %d objects\"", "%", "(", "config_num", ",", "num_objects", ")", ")", "\n", "while", "True", ":", "\n", "                ", "config", "=", "try_make_config", "(", "num_objects", ")", "\n", "attempts", "+=", "1", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\r Attempts: \"", "+", "str", "(", "attempts", ")", ")", "\n", "if", "config", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"\"", ")", "\n", "break", "\n", "", "", "if", "MAKE_LAKES", ":", "\n", "                ", "config", "=", "add_lake_to_config", "(", "config", ",", "X_RANGE", ",", "Y_RANGE", ")", "\n", "\n", "", "", "path", "=", "paths", ".", "get_env_config_path", "(", "config_num", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "config", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config.is_pos_proposal_valid": [[95, 108], ["range", "len", "numpy.asarray", "numpy.asarray", "numpy.linalg.norm"], "function", ["None"], ["", "", "", "def", "is_pos_proposal_valid", "(", "config", ",", "pos_x", ",", "pos_z", ",", "radius", ")", ":", "\n", "# check if any landmarks too close to others", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "config", "[", "\"xPos\"", "]", ")", ")", ":", "\n", "        ", "other_x", "=", "config", "[", "\"xPos\"", "]", "[", "i", "]", "\n", "other_z", "=", "config", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "other_radius", "=", "config", "[", "\"radius\"", "]", "[", "i", "]", "if", "not", "UNIFORM_LANDMARK_RADIUS", "else", "UNIFORM_LANDMARK_RADIUS", "\n", "other_pos", "=", "np", ".", "asarray", "(", "[", "other_x", ",", "other_z", "]", ")", "\n", "pos", "=", "np", ".", "asarray", "(", "[", "pos_x", ",", "pos_z", "]", ")", "\n", "min_dist", "=", "other_radius", "+", "radius", "+", "MIN_LANDMARK_BUFFER", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "pos", "-", "other_pos", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config.try_make_config": [[110, 179], ["list", "random.sample", "enumerate", "all_landmark_radii.keys", "config[].append", "config[].append", "config[].append", "config[].append", "config[].append", "enumerate", "random.uniform", "random.randint", "random.randint", "generate_random_config.is_pos_proposal_valid", "numpy.array", "numpy.array", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.is_pos_proposal_valid"], ["", "def", "try_make_config", "(", "num_objects", ",", "include_landmark", "=", "None", ")", ":", "\n", "    ", "config", "=", "{", "\n", "\"landmarkName\"", ":", "[", "]", ",", "\n", "\"radius\"", ":", "[", "]", ",", "\n", "\"xPos\"", ":", "[", "]", ",", "\n", "\"zPos\"", ":", "[", "]", ",", "\n", "\"isEnabled\"", ":", "[", "]", ",", "\n", "\"lakeCoords\"", ":", "[", "]", "\n", "}", "\n", "# landmark_names = sorted(LANDMARK_RADII)", "\n", "global", "all_landmark_radii", "\n", "landmark_radii", "=", "{", "}", "\n", "# Scale up each landmark radius by a random factor in the provided interval", "\n", "all_landmark_names", "=", "list", "(", "all_landmark_radii", ".", "keys", "(", ")", ")", "\n", "if", "FORCE_LANDMARK_SELECTION", ":", "\n", "        ", "all_landmark_names", "=", "FORCE_LANDMARK_SELECTION", "\n", "", "landmark_names", "=", "random", ".", "sample", "(", "all_landmark_names", ",", "num_objects", ")", "\n", "\n", "# If we have to enclude a specific landmark, make sure that we include it.", "\n", "# WARNING: The added landmark is the first element. Later this assumption is made.", "\n", "if", "include_landmark", "is", "not", "None", ":", "\n", "        ", "landmark_names", "[", "0", "]", "=", "include_landmark", "\n", "\n", "", "for", "name", "in", "landmark_names", ":", "\n", "        ", "landmark_radii", "[", "name", "]", "=", "all_landmark_radii", "[", "name", "]", "*", "random", ".", "uniform", "(", "LANDMARK_MIN_SCALE", ",", "LANDMARK_MAX_SCALE", ")", "\n", "\n", "", "for", "landmark_name", "in", "landmark_names", ":", "\n", "        ", "config", "[", "\"landmarkName\"", "]", ".", "append", "(", "landmark_name", ")", "\n", "x_sample_range", "=", "(", "X_RANGE", "[", "0", "]", "+", "LANDMARK_EDGE_CLEARANCE", ",", "\n", "X_RANGE", "[", "1", "]", "-", "LANDMARK_EDGE_CLEARANCE", ")", "\n", "y_sample_range", "=", "(", "Y_RANGE", "[", "0", "]", "+", "LANDMARK_EDGE_CLEARANCE", ",", "\n", "Y_RANGE", "[", "1", "]", "-", "LANDMARK_EDGE_CLEARANCE", ")", "\n", "\n", "radius", "=", "landmark_radii", "[", "landmark_name", "]", "if", "not", "UNIFORM_LANDMARK_RADIUS", "else", "UNIFORM_LANDMARK_RADIUS", "\n", "proposed_x", "=", "None", ";", "proposed_y", "=", "None", "\n", "attempts", "=", "0", "\n", "while", "True", ":", "\n", "            ", "proposed_x", "=", "random", ".", "randint", "(", "*", "x_sample_range", ")", "\n", "proposed_y", "=", "random", ".", "randint", "(", "*", "y_sample_range", ")", "\n", "attempts", "+=", "1", "\n", "if", "is_pos_proposal_valid", "(", "config", ",", "proposed_x", ",", "proposed_y", ",", "radius", ")", ":", "\n", "#print (\"Added: \", proposed_x, proposed_y, landmark_name)", "\n", "                ", "break", "\n", "", "if", "attempts", ">", "100", ":", "\n", "                ", "return", "None", "\n", "#else:", "\n", "#    print (\"Rejected: \", proposed_x, proposed_y)", "\n", "\n", "", "", "config", "[", "\"xPos\"", "]", ".", "append", "(", "proposed_x", ")", "\n", "config", "[", "\"zPos\"", "]", ".", "append", "(", "proposed_y", ")", "\n", "config", "[", "\"isEnabled\"", "]", ".", "append", "(", "True", ")", "\n", "config", "[", "\"radius\"", "]", ".", "append", "(", "radius", ")", "\n", "\n", "# check if any landmarks too close to others", "\n", "", "for", "i", ",", "landmark_i", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "        ", "radius_i", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "for", "j", ",", "landmark_j", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "            ", "if", "j", "<=", "i", ":", "\n", "                ", "continue", "\n", "", "radius_j", "=", "landmark_radii", "[", "landmark_j", "]", "\n", "pos_i", "=", "np", ".", "array", "(", "[", "float", "(", "config", "[", "\"xPos\"", "]", "[", "i", "]", ")", ",", "\n", "float", "(", "config", "[", "\"zPos\"", "]", "[", "i", "]", ")", "]", ")", "\n", "pos_j", "=", "np", ".", "array", "(", "[", "float", "(", "config", "[", "\"xPos\"", "]", "[", "j", "]", ")", ",", "\n", "float", "(", "config", "[", "\"zPos\"", "]", "[", "j", "]", ")", "]", ")", "\n", "dist", "=", "(", "(", "pos_i", "-", "pos_j", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "min_dist", "=", "radius_i", "+", "radius_j", "+", "MIN_LANDMARK_BUFFER", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                ", "return", "None", "\n", "", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config.make_config_with_landmark": [[181, 193], ["env_config.generation.terrain_generation.add_lake_to_config", "generate_random_config.try_make_config"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.add_lake_to_config", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.try_make_config"], ["", "def", "make_config_with_landmark", "(", "landmark_name", "=", "None", ",", "num_objects", "=", "10", ")", ":", "\n", "    ", "config", "=", "None", "\n", "\n", "while", "config", "is", "None", ":", "\n", "        ", "while", "config", "is", "None", ":", "\n", "            ", "config", "=", "try_make_config", "(", "num_objects", ",", "landmark_name", ")", "\n", "", "config", "=", "add_lake_to_config", "(", "config", ",", "X_RANGE", ",", "Y_RANGE", ")", "\n", "\n", "", "pos_x", "=", "config", "[", "\"xPos\"", "]", "[", "0", "]", "\n", "pos_z", "=", "config", "[", "\"zPos\"", "]", "[", "0", "]", "\n", "\n", "return", "config", ",", "pos_x", ",", "pos_z", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.findword": [[16, 22], ["dataset.items"], "function", ["None"], ["def", "findword", "(", "word", ",", "dataset", ")", ":", "\n", "    ", "for", "env", ",", "sets", "in", "dataset", ".", "items", "(", ")", ":", "\n", "        ", "for", "set", "in", "sets", "[", "0", "]", "[", "\"instructions\"", "]", ":", "\n", "            ", "if", "word", "in", "set", "[", "\"instruction\"", "]", ":", "\n", "                ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.get_identity_term_mapping": [[24, 31], ["None"], "function", ["None"], ["", "def", "get_identity_term_mapping", "(", "corpus", ")", ":", "\n", "    ", "term2word", "=", "{", "}", "\n", "word2term", "=", "{", "}", "\n", "for", "word", "in", "corpus", ":", "\n", "        ", "term2word", "[", "word", "]", "=", "word", "\n", "word2term", "[", "word", "]", "=", "word", "\n", "", "return", "term2word", ",", "word2term", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.referent_list_to_word_list": [[33, 40], ["ref.split", "all_words.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "referent_list_to_word_list", "(", "ref_list", ")", ":", "\n", "    ", "all_words", "=", "[", "]", "\n", "for", "ref", "in", "ref_list", ":", "\n", "        ", "ref_split", "=", "ref", ".", "split", "(", "\" \"", ")", "\n", "for", "word", "in", "ref_split", ":", "\n", "            ", "all_words", ".", "append", "(", "word", ")", "\n", "", "", "return", "all_words", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.get_template_term_groundings": [[42, 68], ["data_io.env.load_config_metadata", "generate_template_alignments.referent_list_to_word_list", "[].append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_config_metadata", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.referent_list_to_word_list", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_template_term_groundings", "(", "corpus", ",", "word2term", ")", ":", "\n", "    ", "term2lm", "=", "{", "}", "\n", "\n", "lm_names", "=", "load_config_metadata", "(", ")", "[", "\"all_landmark_names\"", "]", "\n", "\n", "for", "lmname", "in", "lm_names", ":", "\n", "        ", "referents", "=", "N_LANDMARKS", "[", "lmname", "]", "\n", "if", "SAMPLING_MODE", "==", "\"consistent\"", ":", "\n", "            ", "referents", "=", "[", "referents", "[", "0", "]", "]", "\n", "", "wordlist", "=", "referent_list_to_word_list", "(", "referents", ")", "\n", "for", "word", "in", "wordlist", ":", "\n", "# This can happen if we generate with a subset of landmarks", "\n", "            ", "if", "word", "not", "in", "word2term", ":", "\n", "                ", "continue", "\n", "", "term", "=", "word2term", "[", "word", "]", "\n", "if", "term", "not", "in", "term2lm", ":", "\n", "                ", "term2lm", "[", "term", "]", "=", "{", "\"landmarks\"", ":", "[", "]", "}", "\n", "", "if", "lmname", "not", "in", "term2lm", "[", "term", "]", ":", "\n", "                ", "term2lm", "[", "term", "]", "[", "\"landmarks\"", "]", ".", "append", "(", "lmname", ")", "\n", "\n", "", "", "", "for", "word", "in", "corpus", ":", "\n", "        ", "term", "=", "word2term", "[", "word", "]", "\n", "if", "term", "not", "in", "term2lm", ":", "\n", "            ", "term2lm", "[", "term", "]", "=", "{", "\"landmarks\"", ":", "[", "]", "}", "\n", "\n", "", "", "return", "term2lm", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.generate_thesaurus": [[70, 88], ["parameters.initialize_experiment", "data_io.instructions.get_all_instructions", "data_io.instructions.get_word_to_token_map", "generate_template_alignments.get_identity_term_mapping", "generate_template_alignments.get_template_term_groundings", "data_io.instructions.save_landmark_alignments"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_word_to_token_map", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.get_identity_term_mapping", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_alignments.get_template_term_groundings", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.save_landmark_alignments"], ["", "def", "generate_thesaurus", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "\n", "train_instr", ",", "dev_instr", ",", "test_instr", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "_", ",", "word2token", "=", "get_word_to_token_map", "(", "corpus", ",", "use_thesaurus", "=", "False", ")", "\n", "\n", "term2word", ",", "word2term", "=", "get_identity_term_mapping", "(", "corpus", ")", "\n", "\n", "term2landmark", "=", "get_template_term_groundings", "(", "corpus", ",", "word2term", ")", "\n", "\n", "thesaurus", "=", "{", "\n", "\"term2word\"", ":", "term2word", ",", "\n", "\"word2term\"", ":", "word2term", ",", "\n", "\"term_groundings\"", ":", "term2landmark", ",", "\n", "\"rejected_words\"", ":", "[", "]", "\n", "}", "\n", "\n", "save_landmark_alignments", "(", "thesaurus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.main": [[38, 61], ["range", "int", "print", "terrain_generation.add_lake_to_config", "os.path.join", "random.uniform", "generate_random_config_unity.try_make_config", "sys.stdout.write", "open", "json.dump", "print", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.add_lake_to_config", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.try_make_config"], ["", "def", "main", "(", ")", ":", "\n", "    ", "for", "config_num", "in", "range", "(", "START_I", ",", "END_I", ")", ":", "\n", "# attempt to space landmarks", "\n", "        ", "config", "=", "None", "\n", "attempts", "=", "0", "\n", "# It's easier to generate a config with less objects, so to have a truly uniform distribution, we must sample it here.", "\n", "num_objects", "=", "int", "(", "random", ".", "uniform", "(", "MIN_NUM_OBJECTS", ",", "MAX_NUM_OBJECTS", ")", ")", "\n", "\n", "print", "(", "\"making config %d with %d objects\"", "%", "(", "config_num", ",", "num_objects", ")", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "config", "=", "try_make_config", "(", "num_objects", ")", "\n", "attempts", "+=", "1", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\r Attemtps: \"", "+", "str", "(", "attempts", ")", ")", "\n", "if", "config", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"\"", ")", "\n", "break", "\n", "", "", "config", "=", "add_lake_to_config", "(", "config", ",", "X_RANGE", ",", "Y_RANGE", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "CONFIG_BASE_DIR", ",", "\n", "\"random_config_%d.json\"", "%", "config_num", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "config", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.is_pos_proposal_valid": [[62, 75], ["range", "len", "numpy.asarray", "numpy.asarray", "numpy.linalg.norm"], "function", ["None"], ["", "", "", "def", "is_pos_proposal_valid", "(", "config", ",", "pos_x", ",", "pos_z", ",", "radius", ")", ":", "\n", "# check if any landmarks too close to others", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "config", "[", "\"xPos\"", "]", ")", ")", ":", "\n", "        ", "other_x", "=", "config", "[", "\"xPos\"", "]", "[", "i", "]", "\n", "other_z", "=", "config", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "other_radius", "=", "config", "[", "\"radius\"", "]", "[", "i", "]", "\n", "other_pos", "=", "np", ".", "asarray", "(", "[", "other_x", ",", "other_z", "]", ")", "\n", "pos", "=", "np", ".", "asarray", "(", "[", "pos_x", ",", "pos_z", "]", ")", "\n", "min_dist", "=", "other_radius", "+", "radius", "+", "MIN_LANDMARK_BUFFER", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "pos", "-", "other_pos", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.try_make_config": [[76, 136], ["random.sample", "enumerate", "config[].append", "config[].append", "config[].append", "config[].append", "config[].append", "enumerate", "random.uniform", "random.randint", "random.randint", "generate_random_config_unity.is_pos_proposal_valid", "numpy.array", "numpy.array", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.training.fixed_distributions.BoundedNormal.sample", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_random_config_unity.is_pos_proposal_valid"], ["", "def", "try_make_config", "(", "num_objects", ")", ":", "\n", "    ", "config", "=", "{", "\n", "\"landmarkName\"", ":", "[", "]", ",", "\n", "\"radius\"", ":", "[", "]", ",", "\n", "\"xPos\"", ":", "[", "]", ",", "\n", "\"zPos\"", ":", "[", "]", ",", "\n", "\"isEnabled\"", ":", "[", "]", ",", "\n", "\"lakeCoords\"", ":", "[", "]", "\n", "}", "\n", "# landmark_names = sorted(LANDMARK_RADII)", "\n", "global", "all_landmark_radii", "\n", "landmark_radii", "=", "{", "}", "\n", "# Scale up each landmark radius by a random factor in the provided interval", "\n", "landmark_names", "=", "random", ".", "sample", "(", "all_landmark_radii", ",", "num_objects", ")", "\n", "for", "name", "in", "landmark_names", ":", "\n", "        ", "landmark_radii", "[", "name", "]", "=", "all_landmark_radii", "[", "name", "]", "*", "random", ".", "uniform", "(", "LANDMARK_MIN_SCALE", ",", "LANDMARK_MAX_SCALE", ")", "\n", "\n", "", "for", "landmark_name", "in", "landmark_names", ":", "\n", "        ", "config", "[", "\"landmarkName\"", "]", ".", "append", "(", "landmark_name", ")", "\n", "x_sample_range", "=", "(", "X_RANGE", "[", "0", "]", "+", "EDGE_WIDTH", ",", "\n", "X_RANGE", "[", "1", "]", "-", "EDGE_WIDTH", ")", "\n", "y_sample_range", "=", "(", "Y_RANGE", "[", "0", "]", "+", "EDGE_WIDTH", ",", "\n", "Y_RANGE", "[", "1", "]", "-", "EDGE_WIDTH", ")", "\n", "\n", "radius", "=", "landmark_radii", "[", "landmark_name", "]", "\n", "proposed_x", "=", "None", ";", "proposed_y", "=", "None", "\n", "attempts", "=", "0", "\n", "while", "True", ":", "\n", "            ", "proposed_x", "=", "random", ".", "randint", "(", "*", "x_sample_range", ")", "\n", "proposed_y", "=", "random", ".", "randint", "(", "*", "y_sample_range", ")", "\n", "attempts", "+=", "1", "\n", "if", "is_pos_proposal_valid", "(", "config", ",", "proposed_x", ",", "proposed_y", ",", "radius", ")", ":", "\n", "#print (\"Added: \", proposed_x, proposed_y, landmark_name)", "\n", "                ", "break", "\n", "", "if", "attempts", ">", "1000", ":", "\n", "                ", "return", "None", "\n", "#else:", "\n", "#    print (\"Rejected: \", proposed_x, proposed_y)", "\n", "\n", "", "", "config", "[", "\"xPos\"", "]", ".", "append", "(", "proposed_x", ")", "\n", "config", "[", "\"zPos\"", "]", ".", "append", "(", "proposed_y", ")", "\n", "config", "[", "\"isEnabled\"", "]", ".", "append", "(", "True", ")", "\n", "config", "[", "\"radius\"", "]", ".", "append", "(", "radius", ")", "\n", "\n", "# check if any landmarks too close to others", "\n", "", "for", "i", ",", "landmark_i", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "        ", "radius_i", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "for", "j", ",", "landmark_j", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "            ", "if", "j", "<=", "i", ":", "\n", "                ", "continue", "\n", "", "radius_j", "=", "landmark_radii", "[", "landmark_j", "]", "\n", "pos_i", "=", "np", ".", "array", "(", "[", "float", "(", "config", "[", "\"xPos\"", "]", "[", "i", "]", ")", ",", "\n", "float", "(", "config", "[", "\"zPos\"", "]", "[", "i", "]", ")", "]", ")", "\n", "pos_j", "=", "np", ".", "array", "(", "[", "float", "(", "config", "[", "\"xPos\"", "]", "[", "j", "]", ")", ",", "\n", "float", "(", "config", "[", "\"zPos\"", "]", "[", "j", "]", ")", "]", ")", "\n", "dist", "=", "(", "(", "pos_i", "-", "pos_j", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "min_dist", "=", "radius_i", "+", "radius_j", "+", "MIN_LANDMARK_BUFFER", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                ", "return", "None", "\n", "", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.main": [[42, 53], ["range", "os.path.join", "print", "os.path.join", "generate_curve_json_v2.make_new_curve", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.make_new_curve"], ["", "def", "main", "(", ")", ":", "\n", "    ", "for", "config_id", "in", "range", "(", "START_I", ",", "END_I", ")", ":", "\n", "        ", "fname", "=", "\"random_config_%d.json\"", "%", "config_id", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "CONFIG_BASE_DIR", ",", "fname", ")", "\n", "print", "(", "path", ")", "\n", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "curve_fname", "=", "\"random_curve_%d.json\"", "%", "config_id", "\n", "curve_path", "=", "os", ".", "path", ".", "join", "(", "CURVE_BASE_DIR", ",", "curve_fname", ")", "\n", "plot_path", "=", "\"plots/random_curve_%d.png\"", "%", "config_id", "\n", "make_new_curve", "(", "config", ",", "curve_path", ",", "plot_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.debug": [[55, 63], ["os.path.join", "range", "open", "json.load", "generate_curve_json_v2.make_new_curve"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.make_new_curve"], ["", "", "def", "debug", "(", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "CONFIG_BASE_DIR", ",", "\"random_config.json\"", ")", "\n", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "curve_path", "=", "\"debug_curve.%d.json\"", "%", "i", "\n", "plot_path", "=", "\"debug_plot.%d.png\"", "%", "i", "\n", "make_new_curve", "(", "config", ",", "curve_path", ",", "plot_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.try_make_curve": [[65, 152], ["numpy.array", "numpy.array", "numpy.array", "generate_curve_json_v2.sample_random_landmark_point", "range", "generate_curve_json_v2.is_path_boring", "len", "generate_curve_json_v2.sample_random_landmark_point", "float", "float", "len", "len", "generate_curve_json_v2.get_interval_num", "generate_curve_json_v2.calc_movement", "generate_curve_json_v2.get_repulsion", "generate_curve_json_v2.get_lake_repulsion", "math.sqrt", "generate_curve_json_v2.get_interval_num", "generate_curve_json_v2.does_path_overlap", "random.randint", "random.randint", "float", "float", "zip", "float", "float", "sum", "pos_array.append", "generate_curve_json_v2.is_oob", "generate_curve_json_v2.is_oob", "print", "range", "len"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.sample_random_landmark_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.is_path_boring", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.sample_random_landmark_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_interval_num", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.calc_movement", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_repulsion", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_lake_repulsion", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_interval_num", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.does_path_overlap", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.is_oob", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.is_oob"], ["", "", "def", "try_make_curve", "(", "config", ")", ":", "\n", "# initialise physics state", "\n", "    ", "start_pos_x_range", "=", "(", "X_RANGE", "[", "0", "]", "+", "START_EDGE_WIDTH", ",", "\n", "X_RANGE", "[", "1", "]", "-", "START_EDGE_WIDTH", ")", "\n", "start_pos_y_range", "=", "(", "Y_RANGE", "[", "0", "]", "+", "START_EDGE_WIDTH", ",", "\n", "Y_RANGE", "[", "1", "]", "-", "START_EDGE_WIDTH", ")", "\n", "pos", "=", "np", ".", "array", "(", "[", "float", "(", "random", ".", "randint", "(", "*", "start_pos_x_range", ")", ")", ",", "\n", "float", "(", "random", ".", "randint", "(", "*", "start_pos_y_range", ")", ")", "]", ")", "\n", "landmark_pos", "=", "np", ".", "array", "(", "[", "[", "float", "(", "x", ")", ",", "float", "(", "y", ")", "]", "\n", "for", "x", ",", "y", "in", "zip", "(", "config", "[", "\"xPos\"", "]", ",", "config", "[", "\"zPos\"", "]", ")", "]", ")", "\n", "landmark_radii", "=", "config", "[", "\"radius\"", "]", "\n", "\n", "# Get the coordinates of every SAMPLE_RATE lake vertex in unity units (vs mesh indices)", "\n", "lake_pos", "=", "np", ".", "array", "(", "[", "[", "float", "(", "c", "[", "\"x\"", "]", ")", ",", "float", "(", "c", "[", "\"y\"", "]", ")", "]", "for", "c", "in", "\n", "[", "config", "[", "\"lakeCoords\"", "]", "[", "i", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "config", "[", "\"lakeCoords\"", "]", ")", ",", "SAMPLE_RATE", ")", "]", "]", ")", "\n", "if", "len", "(", "lake_pos", ")", ">", "0", ":", "\n", "        ", "lake_pos", "[", ":", ",", "0", "]", "=", "(", "lake_pos", "[", ":", ",", "0", "]", "*", "(", "X_RANGE", "[", "1", "]", "-", "X_RANGE", "[", "0", "]", ")", "/", "MESH_RES", ")", "+", "X_RANGE", "[", "0", "]", "\n", "lake_pos", "[", ":", ",", "1", "]", "=", "(", "lake_pos", "[", ":", ",", "1", "]", "*", "(", "Y_RANGE", "[", "1", "]", "-", "Y_RANGE", "[", "0", "]", ")", "/", "MESH_RES", ")", "+", "Y_RANGE", "[", "0", "]", "\n", "#print (\"Lake Pos: \", len(lake_pos))", "\n", "\n", "# get starting point and landmark visited", "\n", "", "landmarks_visited", "=", "[", "]", "\n", "pos", "=", "sample_random_landmark_point", "(", "pos", ",", "landmark_pos", ",", "landmarks_visited", ",", "\n", "landmark_radii", ")", "\n", "\n", "num_landmarks_visited", "=", "NUM_LANDMARKS_VISISTED", "if", "NUM_LANDMARKS_VISISTED", "<", "len", "(", "landmark_pos", ")", "else", "len", "(", "landmark_pos", ")", "-", "1", "\n", "\n", "# simulate path", "\n", "pos_array", "=", "[", "pos", "]", "\n", "total_distance", "=", "0.0", "\n", "for", "_", "in", "range", "(", "num_landmarks_visited", "-", "1", ")", ":", "\n", "        ", "next_target", "=", "sample_random_landmark_point", "(", "pos", ",", "landmark_pos", ",", "\n", "landmarks_visited", ",", "\n", "landmark_radii", ")", "\n", "if", "next_target", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "sim_steps", "=", "0", "\n", "while", "True", ":", "\n", "            ", "sim_steps", "+=", "1", "\n", "old_interval_num", "=", "get_interval_num", "(", "total_distance", ")", "\n", "\n", "# calculate movement by simulating physics", "\n", "movement", "=", "calc_movement", "(", "pos", ",", "next_target", ")", "\n", "repulsion", "=", "get_repulsion", "(", "pos", "+", "movement", ",", "landmark_pos", ",", "\n", "landmark_radii", ")", "\n", "if", "repulsion", "is", "not", "None", ":", "\n", "                ", "movement", "+=", "repulsion", "\n", "", "lake_repulsion", "=", "get_lake_repulsion", "(", "pos", "+", "movement", ",", "lake_pos", ")", "\n", "movement", "+=", "lake_repulsion", "\n", "\n", "# update state", "\n", "pos", "=", "pos", "+", "movement", "\n", "distance", "=", "math", ".", "sqrt", "(", "sum", "(", "movement", "**", "2", ")", ")", "\n", "total_distance", "+=", "distance", "\n", "\n", "# check if we have passed into new interval", "\n", "new_interval_num", "=", "get_interval_num", "(", "total_distance", ")", "\n", "if", "new_interval_num", ">", "old_interval_num", ":", "\n", "                ", "pos_array", ".", "append", "(", "pos", ")", "\n", "\n", "# check to see if we are out of bounds or path overlaps (failure)", "\n", "", "x", ",", "y", "=", "pos", "\n", "if", "is_oob", "(", "x", ",", "X_RANGE", ")", "or", "is_oob", "(", "y", ",", "Y_RANGE", ")", ":", "\n", "#print (\"OOB\")", "\n", "                ", "return", "None", "\n", "", "if", "does_path_overlap", "(", "pos_array", ")", ":", "\n", "#print (\"Overlap\")", "\n", "                ", "return", "None", "\n", "\n", "# check to see if we are near target", "\n", "", "dist_to_target", "=", "(", "(", "pos", "-", "next_target", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "if", "dist_to_target", "<", "INTERVAL_LEN", "/", "2", ":", "\n", "                ", "break", "\n", "\n", "", "if", "sim_steps", ">", "MAX_SIM_STEPS", ":", "\n", "                ", "print", "(", "\"Exceeded sim steps!\"", ")", "\n", "return", "None", "\n", "\n", "# check if path is \"boring\"", "\n", "", "", "", "if", "is_path_boring", "(", "pos_array", ",", "landmark_pos", ",", "landmarks_visited", ",", "\n", "landmark_radii", ")", ":", "\n", "#print (\"Boring\")", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "pos_array", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.make_new_curve": [[154, 196], ["print", "isinstance", "matplotlib.figure", "matplotlib.axes", "plt.axes.plot", "plt.axes.plot", "plt.axes.plot", "plt.axes.set_xlim", "plt.axes.set_ylim", "matplotlib.savefig", "generate_curve_json_v2.try_make_curve", "open", "json.dump", "list", "list", "float", "float", "zip"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.try_make_curve"], ["", "", "def", "make_new_curve", "(", "config", ",", "curve_path", ",", "plot_path", ")", ":", "\n", "# try making curve until it succeeds (doesn't go out of bounds)", "\n", "    ", "pos_array", "=", "[", "]", "\n", "print", "(", "\"making curve for path=%s\"", "%", "curve_path", ")", "\n", "# min_num_landmarks = 2", "\n", "while", "True", ":", "\n", "        ", "pos_array", "=", "try_make_curve", "(", "config", ")", "\n", "if", "pos_array", "is", "not", "None", ":", "\n", "            ", "break", "\n", "", "", "assert", "isinstance", "(", "pos_array", ",", "list", ")", "\n", "\n", "# write pos array to file", "\n", "pos_lists", "=", "{", "\"x_array\"", ":", "[", "x", "for", "x", ",", "_", "in", "pos_array", "]", ",", "\n", "\"z_array\"", ":", "[", "y", "for", "_", ",", "y", "in", "pos_array", "]", "}", "\n", "with", "open", "(", "curve_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "pos_lists", ",", "fp", ")", "\n", "\n", "", "landmark_pos", "=", "[", "[", "float", "(", "x", ")", ",", "float", "(", "y", ")", "]", "\n", "for", "x", ",", "y", "in", "zip", "(", "config", "[", "\"xPos\"", "]", ",", "config", "[", "\"zPos\"", "]", ")", "]", "\n", "plt", ".", "figure", "(", ")", "\n", "axes", "=", "plt", ".", "axes", "(", ")", "\n", "# plot landmarks", "\n", "axes", ".", "plot", "(", "[", "x", "for", "x", ",", "_", "in", "landmark_pos", "]", ",", "\n", "[", "y", "for", "_", ",", "y", "in", "landmark_pos", "]", ",", "\"bo\"", ")", "\n", "# plot route starting point", "\n", "x_start", ",", "y_start", "=", "pos_array", "[", "0", "]", "\n", "axes", ".", "plot", "(", "[", "x_start", "]", ",", "[", "y_start", "]", ",", "\"ro\"", ",", "ms", "=", "10.0", ")", "\n", "# plot arrows", "\n", "\"\"\"\n    for i, (x, y) in enumerate(pos_array):\n        if i == len(pos_array) - 1:\n            continue\n        x_new, y_new = pos_array[i + 1]\n        x_d, y_d = x_new - x, y_new - y\n        axes.arrow(x, y, x_d, y_d, head_width=50.0, head_length=80.0,\n                   fc=\"r\", ec=\"r\")\n    \"\"\"", "\n", "axes", ".", "plot", "(", "[", "x", "for", "x", ",", "_", "in", "pos_array", "[", "1", ":", "]", "]", ",", "\n", "[", "y", "for", "_", ",", "y", "in", "pos_array", "[", "1", ":", "]", "]", ",", "\"r.\"", ")", "\n", "axes", ".", "set_xlim", "(", "list", "(", "X_RANGE", ")", ")", "\n", "axes", ".", "set_ylim", "(", "list", "(", "Y_RANGE", ")", ")", "\n", "plt", ".", "savefig", "(", "plot_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.sample_random_landmark_point": [[198, 218], ["random.choice", "landmarks_already_chosen.append", "numpy.array", "len", "enumerate", "sorted", "len", "len", "random.random", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "sample_random_landmark_point", "(", "current_pos", ",", "landmark_pos", ",", "\n", "landmarks_already_chosen", ",", "landmark_radii", ")", ":", "\n", "    ", "landmark_dist", "=", "(", "(", "landmark_pos", "-", "current_pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "landmark_sort_index", "=", "[", "(", "dist", ",", "i", ")", "for", "i", ",", "dist", "in", "enumerate", "(", "landmark_dist", ")", "\n", "if", "dist", ">=", "MIN_DIST_TO_NEXT", "]", "\n", "landmarks_sorted", "=", "[", "i", "for", "_", ",", "i", "in", "sorted", "(", "landmark_sort_index", ")", "]", "\n", "landmarks_sorted_filtered", "=", "[", "i", "for", "i", "in", "landmarks_sorted", "\n", "if", "i", "not", "in", "landmarks_already_chosen", "]", "\n", "close_landmark_num", "=", "CLOSE_LANDMARK_NUM", "if", "CLOSE_LANDMARK_NUM", ">=", "len", "(", "landmarks_sorted", ")", "else", "len", "(", "landmarks_sorted", ")", "-", "1", "\n", "landmark_choices", "=", "landmarks_sorted_filtered", "[", ":", "close_landmark_num", "]", "\n", "if", "len", "(", "landmark_choices", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "next_landmark", "=", "random", ".", "choice", "(", "landmark_choices", ")", "\n", "landmarks_already_chosen", ".", "append", "(", "next_landmark", ")", "\n", "theta", "=", "random", ".", "random", "(", ")", "*", "2", "*", "math", ".", "pi", "\n", "x", ",", "z", "=", "landmark_pos", "[", "next_landmark", "]", "\n", "landmark_radius", "=", "landmark_radii", "[", "next_landmark", "]", "\n", "sample_point", "=", "np", ".", "array", "(", "[", "x", "+", "math", ".", "cos", "(", "theta", ")", "*", "landmark_radius", ",", "\n", "z", "+", "math", ".", "sin", "(", "theta", ")", "*", "landmark_radius", "]", ")", "\n", "return", "sample_point", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.calc_movement": [[220, 229], ["numpy.array", "random.random", "random.random", "math.cos", "math.sin"], "function", ["None"], ["", "def", "calc_movement", "(", "pos", ",", "next_target", ")", ":", "\n", "    ", "movement_vector", "=", "(", "next_target", "-", "pos", ")", "\n", "movement_vector_len", "=", "(", "(", "next_target", "-", "pos", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "movement_signal", "=", "movement_vector", "/", "movement_vector_len", "*", "MOVE_DIST", "\n", "noise_angle", "=", "random", ".", "random", "(", ")", "*", "math", ".", "pi", "*", "2", "\n", "noise_val", "=", "random", ".", "random", "(", ")", "*", "MOVE_DIST", "*", "NOISE_VAL", "\n", "noise", "=", "np", ".", "array", "(", "[", "math", ".", "cos", "(", "noise_angle", ")", "*", "noise_val", ",", "\n", "math", ".", "sin", "(", "noise_angle", ")", "*", "noise_val", "]", ")", "\n", "return", "movement_signal", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.get_repulsion": [[231, 243], ["min", "enumerate", "enumerate"], "function", ["None"], ["", "def", "get_repulsion", "(", "pos", ",", "landmark_pos", ",", "landmark_radii", ")", ":", "\n", "    ", "landmark_dist", "=", "(", "(", "landmark_pos", "-", "pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "min_dist", ",", "landmark_i", "=", "min", "(", "(", "d", ",", "i", ")", "for", "i", ",", "d", "in", "enumerate", "(", "landmark_dist", ")", ")", "\n", "for", "landmark_i", ",", "dist", "in", "enumerate", "(", "landmark_dist", ")", ":", "\n", "        ", "landmark_radius", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "if", "dist", "<", "landmark_radius", ":", "\n", "            ", "repulsion_dir", "=", "pos", "-", "landmark_pos", "[", "landmark_i", "]", "\n", "repulsion_dir_len", "=", "(", "repulsion_dir", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "repulsion_dist", "=", "landmark_radius", "-", "min_dist", "\n", "repulsion", "=", "repulsion_dir", "*", "repulsion_dist", "/", "repulsion_dir_len", "\n", "return", "repulsion", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.get_lake_repulsion": [[245, 270], ["numpy.zeros", "len", "numpy.zeros", "numpy.linalg.norm", "numpy.argsort", "numpy.linalg.norm", "float"], "function", ["None"], ["", "def", "get_lake_repulsion", "(", "pos", ",", "lake_pos", ")", ":", "\n", "    ", "if", "len", "(", "lake_pos", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "", "lake_dist", "=", "[", "np", ".", "linalg", ".", "norm", "(", "lake_cell", "-", "pos", ")", "for", "lake_cell", "in", "lake_pos", "]", "\n", "NUM_POINTS", "=", "20", "\n", "closest_n", "=", "np", ".", "argsort", "(", "lake_dist", ")", "[", ":", "NUM_POINTS", "]", "\n", "close_points", "=", "[", "lake_pos", "[", "i", "]", "for", "i", "in", "closest_n", "]", "\n", "\n", "points_added", "=", "0", "\n", "repulsion", "=", "np", ".", "zeros", "(", "2", ")", "\n", "for", "point", "in", "close_points", ":", "\n", "        ", "repulsion_dir", "=", "pos", "-", "point", "\n", "repulsion_norm", "=", "np", ".", "linalg", ".", "norm", "(", "repulsion_dir", ")", "\n", "if", "repulsion_norm", ">", "LAKE_REPULSION_DIST", ":", "\n", "            ", "break", "\n", "", "repulsion", "+=", "(", "repulsion_dir", "/", "repulsion_norm", ")", "\n", "points_added", "+=", "1", "\n", "\n", "", "if", "points_added", "==", "0", ":", "\n", "        ", "return", "repulsion", "\n", "\n", "", "repulsion_dist", "=", "float", "(", "LAKE_REPULSION", ")", "/", "points_added", "\n", "output_repulsion", "=", "repulsion", "*", "repulsion_dist", "\n", "return", "output_repulsion", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.get_interval_num": [[272, 274], ["int"], "function", ["None"], ["", "def", "get_interval_num", "(", "total_distance", ")", ":", "\n", "    ", "return", "int", "(", "total_distance", "/", "INTERVAL_LEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.is_oob": [[276, 281], ["make_random_config.X_RANGE", "make_random_config.Y_RANGE"], "function", ["None"], ["", "def", "is_oob", "(", "val", ",", "val_range", ")", ":", "\n", "    ", "if", "val", "<", "val_range", "[", "0", "]", "or", "val", ">", "val_range", "[", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.does_path_overlap": [[283, 295], ["numpy.array", "min", "len"], "function", ["None"], ["", "", "def", "does_path_overlap", "(", "pos_array", ")", ":", "\n", "    ", "NUM_SKIP", "=", "3", "\n", "if", "len", "(", "pos_array", ")", "<=", "NUM_SKIP", ":", "\n", "        ", "return", "False", "\n", "", "current_pos", "=", "pos_array", "[", "-", "1", "]", "\n", "prev_pos_array", "=", "np", ".", "array", "(", "pos_array", "[", ":", "-", "NUM_SKIP", "]", ")", "\n", "distances", "=", "(", "(", "prev_pos_array", "-", "current_pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "min_distance", "=", "min", "(", "distances", ")", "\n", "if", "min_distance", "<=", "INTERVAL_LEN", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curve_json_v2.is_path_boring": [[297, 306], ["None"], "function", ["None"], ["", "", "def", "is_path_boring", "(", "pos_array", ",", "landmark_pos", ",", "landmarks_visited", ",", "landmark_radii", ")", ":", "\n", "# make sure we spend a reasonable amount of time circling each landmark", "\n", "    ", "for", "landmark_i", "in", "landmarks_visited", "[", "1", ":", "]", ":", "\n", "        ", "target_pos", "=", "landmark_pos", "[", "landmark_i", "]", "\n", "pos_dist", "=", "(", "(", "pos_array", "-", "target_pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "landmark_radius", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "if", "(", "pos_dist", "<", "landmark_radius", "+", "INTERVAL_LEN", ")", ".", "sum", "(", ")", "<", "4", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.take_env_pics.take_pics": [[22, 76], ["parameters.initialize_experiment", "data_io.instructions.get_all_instructions", "data_io.paths.get_env_image_path", "os.makedirs", "list", "enumerate", "time.sleep", "range", "os.path.dirname", "all_instructions.keys", "pomdp.pomdp_interface.PomdpInterface", "env_id_splits[].append", "len", "range", "range", "range", "range", "data_io.paths.get_env_image_path", "os.path.isfile", "envs[].set_environment", "print", "time.sleep", "data_io.paths.get_env_image_path", "os.path.isfile", "envs[].snap_birdseye", "envs[].snap_birdseye", "numpy.flip", "scipy.misc.imsave", "print", "len", "print", "len", "print", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_image_path", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_image_path", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.set_environment", "home.repos.pwc.inspect_result.clic-lab_drif.airsim_interface.rate.Rate.sleep", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_image_path", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.snap_birdseye", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.pomdp_interface.PomdpInterface.snap_birdseye"], ["def", "take_pics", "(", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "train_i", ",", "dev_i", ",", "test_i", ",", "_", "=", "get_all_instructions", "(", ")", "\n", "all_instructions", "=", "{", "**", "train_i", ",", "**", "dev_i", ",", "**", "test_i", "}", "\n", "\n", "save_dir", "=", "paths", ".", "get_env_image_path", "(", "0", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "keylist", "=", "list", "(", "all_instructions", ".", "keys", "(", ")", ")", "\n", "\n", "envs", "=", "[", "PomdpInterface", "(", "instance_id", "=", "i", ")", "for", "i", "in", "range", "(", "0", ",", "NUM_WORKERS", ")", "]", "\n", "env_id_splits", "=", "[", "[", "]", "for", "_", "in", "range", "(", "NUM_WORKERS", ")", "]", "\n", "keylist", "=", "[", "6825", "]", "\n", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "keylist", ")", ":", "\n", "        ", "env_id_splits", "[", "i", "%", "NUM_WORKERS", "]", ".", "append", "(", "key", ")", "\n", "\n", "\n", "", "time", ".", "sleep", "(", "1.0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "keylist", ")", ")", ":", "\n", "\n", "        ", "d", "=", "False", "\n", "# For each worker, start the correct env", "\n", "for", "w", "in", "range", "(", "NUM_WORKERS", ")", ":", "\n", "            ", "if", "i", ">=", "len", "(", "env_id_splits", "[", "w", "]", ")", ":", "\n", "                ", "continue", "\n", "", "env_id", "=", "env_id_splits", "[", "w", "]", "[", "i", "]", "\n", "# FIXME: :This assumes that there is only 1 instruction set per env!", "\n", "fname", "=", "paths", ".", "get_env_image_path", "(", "env_id", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "                ", "print", "(", "\"Img exists: \"", "+", "fname", ")", "\n", "continue", "\n", "\n", "", "d", "=", "True", "\n", "instruction_set", "=", "all_instructions", "[", "env_id", "]", "[", "0", "]", "\n", "envs", "[", "w", "]", ".", "set_environment", "(", "env_id", ",", "instruction_set", "[", "\"instructions\"", "]", ",", "fast", "=", "True", ")", "\n", "print", "(", "\"setting env on worker \"", "+", "str", "(", "w", ")", "+", "\" iter \"", "+", "str", "(", "i", ")", "+", "\" env_id: \"", "+", "str", "(", "env_id", ")", ")", "\n", "\n", "# Then for each worker, take a picture and save it", "\n", "", "if", "d", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "for", "w", "in", "range", "(", "NUM_WORKERS", ")", ":", "\n", "            ", "if", "i", ">=", "len", "(", "env_id_splits", "[", "w", "]", ")", ":", "\n", "                ", "continue", "\n", "", "env_id", "=", "env_id_splits", "[", "w", "]", "[", "i", "]", "\n", "fname", "=", "paths", ".", "get_env_image_path", "(", "env_id", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "                ", "print", "(", "\"Img exists: \"", "+", "fname", ")", "\n", "continue", "\n", "", "envs", "[", "w", "]", ".", "snap_birdseye", "(", "fast", "=", "True", ",", "small_env", "=", "SMALL_ENV", ")", "\n", "image", "=", "envs", "[", "w", "]", ".", "snap_birdseye", "(", "fast", "=", "True", ",", "small_env", "=", "SMALL_ENV", ")", "\n", "image", "=", "np", ".", "flip", "(", "image", ",", "0", ")", "\n", "imsave", "(", "fname", ",", "image", ")", "\n", "print", "(", "\"saving pic on worker \"", "+", "str", "(", "w", ")", "+", "\" iter \"", "+", "str", "(", "i", ")", "+", "\" env_id: \"", "+", "str", "(", "env_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_human_envs_sample.sample_human_envs": [[9, 15], ["data_io.instructions.get_restricted_env_id_lists", "random.shuffle", "sorted", "data_io.helpers.save_json", "data_io.paths.get_human_eval_envs_path"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_restricted_env_id_lists", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.helpers.save_json", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_human_eval_envs_path"], ["def", "sample_human_envs", "(", ")", ":", "\n", "    ", "train_envs", ",", "dev_envs", ",", "test_envs", "=", "get_restricted_env_id_lists", "(", ")", "\n", "random", ".", "shuffle", "(", "test_envs", ")", "\n", "human_envs", "=", "test_envs", "[", ":", "NUM_ENVS", "]", "\n", "human_envs", "=", "sorted", "(", "human_envs", ")", "\n", "save_json", "(", "human_envs", ",", "get_human_eval_envs_path", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.generate_template_curves": [[59, 65], ["parameters.initialize_experiment", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "range"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment"], ["def", "generate_template_curves", "(", "start_i", ",", "end_i", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "pool", "=", "Pool", "(", "18", ")", "\n", "pool", ".", "map", "(", "generate_template_curve", ",", "range", "(", "start_i", ",", "end_i", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.generate_template_curve": [[67, 72], ["data_io.env.load_env_config", "generate_template_curves.make_template_curve"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_env_config", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.make_template_curve"], ["", "def", "generate_template_curve", "(", "config_id", ")", ":", "\n", "\n", "    ", "config", "=", "load_env_config", "(", "config_id", ")", "\n", "# Make a curve that follows the given template", "\n", "make_template_curve", "(", "config", ",", "config_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.make_template_curve": [[74, 150], ["print", "isinstance", "data_io.paths.get_curve_path", "os.makedirs", "data_io.paths.get_template_path", "os.makedirs", "data_io.paths.get_instructions_path", "os.makedirs", "generate_template_curves.get_landmark_pos", "generate_template_curves.get_lake_pos", "matplotlib.figure", "matplotlib.axes", "plt.axes.plot", "plt.axes.plot", "plt.axes.plot", "plt.axes.plot", "plt.axes.set_xlim", "plt.axes.set_ylim", "os.path.join", "os.makedirs", "matplotlib.savefig", "generate_template_curves.try_make_template_curve", "os.path.dirname", "open", "json.dump", "str", "str", "str", "str", "str", "str", "os.path.dirname", "open", "json.dump", "os.path.dirname", "open", "fp.write", "list", "list", "data_io.paths.get_plots_dir", "os.path.dirname", "str", "len", "env_config.generation.generate_curriculum_config.get_permutation_side_selection", "env_config.definitions.nlp_templates.generate_template", "env_config.definitions.nlp_templates.generate_template", "print", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_curve_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_template_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instructions_path", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_lake_pos", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_template_curve", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_plots_dir", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_curriculum_config.get_permutation_side_selection", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.generate_template", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.generate_template"], ["", "def", "make_template_curve", "(", "config", ",", "config_id", ")", ":", "\n", "# try making curve until it succeeds (doesn't go out of bounds)", "\n", "    ", "print", "(", "\"making curve for config id \"", "+", "str", "(", "config_id", ")", ")", "\n", "\n", "cnt", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "PERMUTATION_TEST", ":", "\n", "            ", "num_objects", "=", "len", "(", "config", "[", "\"landmarkName\"", "]", ")", "\n", "permutation", ",", "landmark_idx", ",", "side_idx", "=", "get_permutation_side_selection", "(", "config_id", ",", "num_objects", ")", "\n", "landmark_choices", "=", "[", "config", "[", "\"landmarkName\"", "]", "[", "landmark_idx", "]", "]", "\n", "side_choices", "=", "[", "\"left\"", "]", "if", "side_idx", "==", "0", "else", "[", "\"right\"", "]", "\n", "template", "=", "generate_template", "(", "template_types", ",", "landmark_choices", ",", "sampling", "=", "\"consistent\"", ",", "side_choices", "=", "side_choices", ")", "\n", "", "else", ":", "\n", "# Create a template for one of the template types that we can choose from", "\n", "            ", "template", "=", "generate_template", "(", "template_types", ",", "config", "[", "\"landmarkName\"", "]", ",", "sampling", "=", "SAMPLING_MODE", ")", "\n", "\n", "", "pos_array", "=", "try_make_template_curve", "(", "config", ",", "template", ")", "\n", "cnt", "+=", "1", "\n", "if", "pos_array", "is", "not", "None", ":", "\n", "            ", "break", "\n", "", "elif", "cnt", ">", "500", ":", "\n", "            ", "print", "(", "f\"FAILED GENERATING CURVES FOR ENV: {config_id}\"", ")", "\n", "\n", "", "", "assert", "isinstance", "(", "pos_array", ",", "list", ")", "\n", "\n", "# write pos array to file", "\n", "pos_lists", "=", "{", "\"x_array\"", ":", "[", "x", "for", "x", ",", "_", "in", "pos_array", "]", ",", "\n", "\"z_array\"", ":", "[", "y", "for", "_", ",", "y", "in", "pos_array", "]", "}", "\n", "curve_path", "=", "paths", ".", "get_curve_path", "(", "config_id", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "curve_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "curve_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "pos_lists", ",", "fp", ")", "\n", "\n", "# Write the template to file", "\n", "", "template_data", "=", "{", "\n", "\"type\"", ":", "str", "(", "template", ".", "type", ")", ",", "\n", "\"landmark1\"", ":", "str", "(", "template", ".", "landmark1", ")", ",", "\n", "\"landmark2\"", ":", "str", "(", "template", ".", "landmark2", ")", ",", "\n", "\"side\"", ":", "str", "(", "template", ".", "side", ")", ",", "\n", "\"dir\"", ":", "str", "(", "template", ".", "dir", ")", ",", "\n", "\"instruction\"", ":", "str", "(", "template", ".", "instruction", ")", "\n", "}", "\n", "\n", "template_path", "=", "paths", ".", "get_template_path", "(", "config_id", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "template_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "template_path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "template_data", ",", "fp", ")", "\n", "\n", "", "instruction_path", "=", "paths", ".", "get_instructions_path", "(", "config_id", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "instruction_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "instruction_path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "template", ".", "instruction", ")", "\n", "\n", "", "landmark_pos", "=", "get_landmark_pos", "(", "config", ")", "\n", "lake_pos", "=", "get_lake_pos", "(", "config", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "axes", "=", "plt", ".", "axes", "(", ")", "\n", "# plot landmarks", "\n", "axes", ".", "plot", "(", "[", "x", "for", "x", ",", "_", "in", "landmark_pos", "]", ",", "\n", "[", "y", "for", "_", ",", "y", "in", "landmark_pos", "]", ",", "\"bo\"", ")", "\n", "# plot route starting point", "\n", "x_start", ",", "y_start", "=", "pos_array", "[", "0", "]", "\n", "axes", ".", "plot", "(", "[", "x_start", "]", ",", "[", "y_start", "]", ",", "\"ro\"", ",", "ms", "=", "10.0", ")", "\n", "axes", ".", "plot", "(", "[", "x", "for", "x", ",", "_", "in", "pos_array", "[", "1", ":", "]", "]", ",", "\n", "[", "y", "for", "_", ",", "y", "in", "pos_array", "[", "1", ":", "]", "]", ",", "\"r.\"", ")", "\n", "# plot lake", "\n", "axes", ".", "plot", "(", "[", "x", "for", "x", ",", "_", "in", "lake_pos", "]", ",", "\n", "[", "y", "for", "_", ",", "y", "in", "lake_pos", "]", ",", "\"b.\"", ")", "\n", "\n", "axes", ".", "set_xlim", "(", "list", "(", "X_RANGE", ")", ")", "\n", "axes", ".", "set_ylim", "(", "list", "(", "Y_RANGE", ")", ")", "\n", "#plt.show()", "\n", "plot_path", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "get_plots_dir", "(", ")", ",", "\"generated_path_\"", "+", "str", "(", "config_id", ")", "+", "\".png\"", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "plot_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "plot_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_template_curve": [[152, 163], ["print", "generate_template_curves.try_make_curve_landmark", "generate_template_curves.try_make_curve_landmark_side", "generate_template_curves.try_make_curve_2_landmarks", "generate_template_curves.try_make_curve_goaround_landmark"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_landmark", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_landmark_side", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_2_landmarks", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_goaround_landmark"], ["", "def", "try_make_template_curve", "(", "config", ",", "template", ")", ":", "\n", "    ", "if", "template", ".", "type", "==", "TemplateType", ".", "GOTO__LANDMARK", ":", "\n", "        ", "return", "try_make_curve_landmark", "(", "config", ",", "template", ".", "landmark1", ")", "\n", "", "elif", "template", ".", "type", "==", "TemplateType", ".", "GOTO__LANDMARK_SIDE", ":", "\n", "        ", "return", "try_make_curve_landmark_side", "(", "config", ",", "template", ".", "landmark1", ",", "template", ".", "side", ")", "\n", "", "elif", "template", ".", "type", "==", "TemplateType", ".", "GOTO__LANDMARK_LANDMARK", ":", "\n", "        ", "return", "try_make_curve_2_landmarks", "(", "config", ",", "template", ".", "landmark1", ",", "template", ".", "landmark2", ")", "\n", "", "elif", "template", ".", "type", "==", "TemplateType", ".", "GOAROUND__LANDMARK_DIR", ":", "\n", "        ", "return", "try_make_curve_goaround_landmark", "(", "config", ",", "template", ".", "landmark1", ",", "template", ".", "dir", ")", "\n", "", "print", "(", "\"Unrecognized template type\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_landmark": [[165, 167], ["None"], "function", ["None"], ["", "def", "try_make_curve_landmark", "(", "config", ",", "landmark", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.center_point": [[168, 170], ["numpy.asarray"], "function", ["None"], ["", "def", "center_point", "(", ")", ":", "\n", "    ", "return", "np", ".", "asarray", "(", "[", "500.0", ",", "500.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_landmark_side": [[171, 208], ["generate_template_curves.get_landmark_index", "generate_template_curves.sample_landmark_point", "numpy.linalg.norm", "points_to_visit.append", "points_to_visit.append", "numpy.linalg.norm", "generate_template_curves.valid_point_dst", "generate_template_curves.try_visit_points", "numpy.asarray", "numpy.asarray", "generate_template_curves.sample_start_pos", "generate_template_curves.center_point"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_landmark_index", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.sample_landmark_point", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.valid_point_dst", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_visit_points", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.sample_start_pos", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.center_point"], ["", "def", "try_make_curve_landmark_side", "(", "config", ",", "landmark", ",", "side", ")", ":", "\n", "\n", "# Don't use landmark radii - just use a constant distance for the real drone", "\n", "    ", "if", "UNIFORM_LANDMARK_RADIUS", ":", "\n", "        ", "landmark_radii", "=", "[", "UNIFORM_LANDMARK_RADIUS", "for", "_", "in", "config", "[", "\"radius\"", "]", "]", "\n", "", "else", ":", "\n", "        ", "landmark_radii", "=", "config", "[", "\"radius\"", "]", "\n", "\n", "", "landmark1_idx", "=", "get_landmark_index", "(", "config", ",", "landmark", ")", "\n", "\n", "if", "\"startPos\"", "in", "config", ":", "\n", "        ", "start_pos", "=", "np", ".", "asarray", "(", "config", "[", "\"startPos\"", "]", ")", "\n", "start_heading", "=", "np", ".", "asarray", "(", "config", "[", "\"startHeading\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "start_pos", "=", "sample_start_pos", "(", "config", ")", "\n", "start_heading", "=", "center_point", "(", ")", "\n", "\n", "", "points_to_visit", "=", "[", "]", "\n", "landmark_side_point", "=", "sample_landmark_point", "(", "config", ",", "start_pos", ",", "landmark1_idx", ",", "landmark_radii", ",", "method", "=", "side", ")", "\n", "\n", "dir", "=", "start_heading", "-", "start_pos", "\n", "dst", "=", "np", ".", "linalg", ".", "norm", "(", "dir", ")", "\n", "dir", "/=", "dst", "\n", "takeoff_pos", "=", "start_pos", "+", "dir", "*", "STRAIGHT_STEPS", "*", "INTERVAL_LEN", "\n", "\n", "points_to_visit", ".", "append", "(", "takeoff_pos", ")", "\n", "points_to_visit", ".", "append", "(", "landmark_side_point", ")", "\n", "\n", "landmark_dist", "=", "np", ".", "linalg", ".", "norm", "(", "landmark_side_point", "-", "start_pos", ")", "\n", "\n", "# We want reasonable distances between start pos and first landmark and between landmarks", "\n", "# otherwise the drone often spawns on top of the solution, or picks the same landmark twice", "\n", "valid", "=", "valid_point_dst", "(", "landmark_dist", ")", "\n", "if", "not", "valid", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "try_visit_points", "(", "config", ",", "start_pos", ",", "points_to_visit", ",", "landmark_radii", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_2_landmarks": [[209, 232], ["generate_template_curves.sample_start_pos", "generate_template_curves.get_landmark_index", "generate_template_curves.get_landmark_index", "points_to_visit.append", "points_to_visit.append", "numpy.linalg.norm", "numpy.linalg.norm", "generate_template_curves.try_visit_points", "generate_template_curves.sample_landmark_point", "generate_template_curves.sample_landmark_point", "generate_template_curves.valid_point_dst", "generate_template_curves.valid_point_dst"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.sample_start_pos", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_landmark_index", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_landmark_index", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_visit_points", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.sample_landmark_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.sample_landmark_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.valid_point_dst", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.valid_point_dst"], ["", "def", "try_make_curve_2_landmarks", "(", "config", ",", "landmark1", ",", "landmark2", ")", ":", "\n", "\n", "    ", "landmark_radii", "=", "config", "[", "\"radius\"", "]", "\n", "\n", "start_pos", "=", "sample_start_pos", "(", "config", ")", "\n", "\n", "landmark1_idx", "=", "get_landmark_index", "(", "config", ",", "landmark1", ")", "\n", "landmark2_idx", "=", "get_landmark_index", "(", "config", ",", "landmark2", ")", "\n", "\n", "points_to_visit", "=", "[", "]", "\n", "points_to_visit", ".", "append", "(", "sample_landmark_point", "(", "config", ",", "start_pos", ",", "landmark1_idx", ",", "landmark_radii", ",", "method", "=", "\"infront\"", ")", ")", "\n", "points_to_visit", ".", "append", "(", "sample_landmark_point", "(", "config", ",", "points_to_visit", "[", "0", "]", ",", "landmark2_idx", ",", "landmark_radii", ",", "method", "=", "\"infront\"", ")", ")", "\n", "\n", "dst1", "=", "np", ".", "linalg", ".", "norm", "(", "points_to_visit", "[", "0", "]", "-", "start_pos", ")", "\n", "dst2", "=", "np", ".", "linalg", ".", "norm", "(", "points_to_visit", "[", "1", "]", "-", "points_to_visit", "[", "0", "]", ")", "\n", "\n", "# We want reasonable distances between start pos and first landmark and between landmarks", "\n", "# otherwise the drone often spawns on top of the solution, or picks the same landmark twice", "\n", "valid", "=", "valid_point_dst", "(", "dst1", ")", "and", "valid_point_dst", "(", "dst2", ")", "\n", "if", "not", "valid", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "try_visit_points", "(", "config", ",", "start_pos", ",", "points_to_visit", ",", "landmark_radii", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.valid_point_dst": [[234, 236], ["None"], "function", ["None"], ["", "def", "valid_point_dst", "(", "dst", ")", ":", "\n", "    ", "return", "POINT_DST_RANGE", "[", "0", "]", "<", "dst", "<", "POINT_DST_RANGE", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.sample_landmark_point": [[237, 261], ["generate_template_curves.get_landmark_pos", "numpy.array", "math.atan2", "random.random", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos"], ["", "def", "sample_landmark_point", "(", "config", ",", "pos", ",", "landmark_index", ",", "landmark_radii", ",", "method", "=", "\"infront\"", ")", ":", "\n", "\n", "    ", "all_landmark_pos", "=", "get_landmark_pos", "(", "config", ")", "\n", "landmark_pos", "=", "all_landmark_pos", "[", "landmark_index", "]", "\n", "\n", "landmark_dir", "=", "landmark_pos", "-", "pos", "\n", "\n", "theta", "=", "math", ".", "atan2", "(", "landmark_dir", "[", "1", "]", ",", "landmark_dir", "[", "0", "]", ")", "+", "math", ".", "pi", "\n", "if", "method", "==", "\"front\"", ":", "\n", "        ", "theta", "=", "theta", "\n", "", "elif", "method", "==", "\"random\"", ":", "\n", "        ", "theta", "=", "random", ".", "random", "(", ")", "*", "2", "*", "math", ".", "pi", "\n", "", "elif", "method", "==", "\"back\"", ":", "\n", "        ", "theta", "=", "theta", "+", "math", ".", "pi", "\n", "", "elif", "method", "==", "\"left\"", ":", "\n", "        ", "theta", "=", "theta", "-", "math", ".", "pi", "/", "2", "\n", "", "elif", "method", "==", "\"right\"", ":", "\n", "        ", "theta", "=", "theta", "+", "math", ".", "pi", "/", "2", "\n", "\n", "", "x", ",", "z", "=", "landmark_pos", "[", "0", "]", ",", "landmark_pos", "[", "1", "]", "\n", "landmark_radius", "=", "landmark_radii", "[", "landmark_index", "]", "\n", "sample_point", "=", "np", ".", "array", "(", "[", "x", "+", "math", ".", "cos", "(", "theta", ")", "*", "landmark_radius", ",", "\n", "z", "+", "math", ".", "sin", "(", "theta", ")", "*", "landmark_radius", "]", ")", "\n", "return", "sample_point", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_make_curve_goaround_landmark": [[263, 265], ["None"], "function", ["None"], ["", "def", "try_make_curve_goaround_landmark", "(", "config", ",", "landmark1", ",", "dir", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.sample_start_pos": [[267, 283], ["numpy.array", "numpy.asarray", "NotImplementedError", "float", "float", "random.randint", "random.randint", "float", "float", "random.randint", "random.randint"], "function", ["None"], ["", "def", "sample_start_pos", "(", "config", ")", ":", "\n", "# initialise physics state", "\n", "    ", "start_pos_x_range", "=", "(", "X_RANGE", "[", "0", "]", "+", "START_EDGE_WIDTH", ",", "\n", "X_RANGE", "[", "1", "]", "-", "START_EDGE_WIDTH", ")", "\n", "start_pos_y_range", "=", "(", "Y_RANGE", "[", "0", "]", "+", "START_EDGE_WIDTH", ",", "\n", "Y_RANGE", "[", "1", "]", "-", "START_EDGE_WIDTH", ")", "\n", "\n", "if", "START_POS_SAMPLING", "==", "\"random\"", ":", "\n", "        ", "pos", "=", "np", ".", "array", "(", "[", "float", "(", "random", ".", "randint", "(", "*", "start_pos_x_range", ")", ")", ",", "\n", "float", "(", "random", ".", "randint", "(", "*", "start_pos_y_range", ")", ")", "]", ")", "\n", "", "elif", "START_POS_SAMPLING", "==", "\"corner\"", ":", "\n", "        ", "pos", "=", "np", ".", "asarray", "(", "[", "float", "(", "start_pos_x_range", "[", "random", ".", "randint", "(", "0", ",", "1", ")", "]", ")", ",", "\n", "float", "(", "start_pos_y_range", "[", "random", ".", "randint", "(", "0", ",", "1", ")", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unknown start pos sampling mode\"", ")", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_landmark_index": [[285, 287], ["config[].index"], "function", ["None"], ["", "def", "get_landmark_index", "(", "config", ",", "landmark_name", ")", ":", "\n", "    ", "return", "config", "[", "\"landmarkName\"", "]", ".", "index", "(", "landmark_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_lake_pos": [[289, 305], ["numpy.array", "numpy.array", "len", "numpy.random.choice", "len", "numpy.array", "int", "float", "float", "range", "len", "len", "range", "len"], "function", ["None"], ["", "def", "get_lake_pos", "(", "config", ")", ":", "\n", "    ", "if", "\"lakeCoords\"", "in", "config", ":", "\n", "        ", "lake_pos", "=", "np", ".", "array", "(", "[", "[", "float", "(", "c", "[", "\"x\"", "]", ")", ",", "float", "(", "c", "[", "\"y\"", "]", ")", "]", "for", "c", "in", "\n", "[", "config", "[", "\"lakeCoords\"", "]", "[", "i", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "config", "[", "\"lakeCoords\"", "]", ")", ",", "1", ")", "]", "]", ")", "\n", "\n", "if", "len", "(", "lake_pos", ")", ">", "100", ":", "\n", "            ", "lake_pos_choices", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "range", "(", "len", "(", "lake_pos", ")", ")", ")", ",", "int", "(", "len", "(", "lake_pos", ")", "/", "SAMPLE_RATE", ")", ")", "\n", "lake_pos", "=", "lake_pos", "[", "lake_pos_choices", "]", "\n", "\n", "", "if", "len", "(", "lake_pos", ")", ">", "0", ":", "\n", "            ", "lake_pos", "[", ":", ",", "0", "]", "=", "(", "lake_pos", "[", ":", ",", "0", "]", "*", "(", "X_RANGE", "[", "1", "]", "-", "X_RANGE", "[", "0", "]", ")", "/", "MESH_RES", ")", "+", "X_RANGE", "[", "0", "]", "\n", "lake_pos", "[", ":", ",", "1", "]", "=", "(", "lake_pos", "[", ":", ",", "1", "]", "*", "(", "Y_RANGE", "[", "1", "]", "-", "Y_RANGE", "[", "0", "]", ")", "/", "MESH_RES", ")", "+", "Y_RANGE", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "lake_pos", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "", "return", "lake_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_landmark_pos": [[307, 309], ["numpy.array", "float", "float", "zip"], "function", ["None"], ["", "def", "get_landmark_pos", "(", "config", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "float", "(", "x", ")", ",", "float", "(", "y", ")", "]", "for", "x", ",", "y", "in", "zip", "(", "config", "[", "\"xPos\"", "]", ",", "config", "[", "\"zPos\"", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.try_visit_points": [[311, 361], ["generate_template_curves.get_landmark_pos", "generate_template_curves.get_lake_pos", "generate_template_curves.get_interval_num", "generate_template_curves.calc_movement", "generate_template_curves.get_repulsion", "generate_template_curves.get_lake_repulsion", "math.sqrt", "generate_template_curves.get_interval_num", "generate_template_curves.does_path_overlap", "sum", "pos_array.append", "generate_template_curves.is_oob", "generate_template_curves.is_oob", "print"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_lake_pos", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_interval_num", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.calc_movement", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_repulsion", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_lake_repulsion", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_interval_num", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.does_path_overlap", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.is_oob", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.is_oob"], ["", "def", "try_visit_points", "(", "config", ",", "pos", ",", "points", ",", "landmark_radii", ")", ":", "\n", "# Make a curve that sequentially visits the provided points", "\n", "    ", "landmark_pos", "=", "get_landmark_pos", "(", "config", ")", "\n", "lake_pos", "=", "get_lake_pos", "(", "config", ")", "\n", "pos_array", "=", "[", "pos", "]", "\n", "total_distance", "=", "0.0", "\n", "for", "next_target", "in", "points", ":", "\n", "        ", "sim_steps", "=", "0", "\n", "while", "True", ":", "\n", "            ", "sim_steps", "+=", "1", "\n", "old_interval_num", "=", "get_interval_num", "(", "total_distance", ")", "\n", "\n", "# calculate movement by simulating physics", "\n", "movement", "=", "calc_movement", "(", "pos", ",", "next_target", ")", "\n", "repulsion", "=", "get_repulsion", "(", "pos", "+", "movement", ",", "landmark_pos", ",", "\n", "landmark_radii", ")", "\n", "if", "repulsion", "is", "not", "None", ":", "\n", "                ", "movement", "+=", "repulsion", "\n", "", "lake_repulsion", "=", "get_lake_repulsion", "(", "pos", "+", "movement", ",", "lake_pos", ")", "\n", "movement", "+=", "lake_repulsion", "\n", "\n", "# update state", "\n", "pos", "=", "pos", "+", "movement", "\n", "distance", "=", "math", ".", "sqrt", "(", "sum", "(", "movement", "**", "2", ")", ")", "\n", "total_distance", "+=", "distance", "\n", "\n", "# check if we have passed into new interval", "\n", "new_interval_num", "=", "get_interval_num", "(", "total_distance", ")", "\n", "if", "new_interval_num", ">", "old_interval_num", ":", "\n", "                ", "pos_array", ".", "append", "(", "pos", ")", "\n", "\n", "# check to see if we are out of bounds or path overlaps (failure)", "\n", "", "x", ",", "y", "=", "pos", "\n", "if", "is_oob", "(", "x", ",", "X_RANGE", ")", "or", "is_oob", "(", "y", ",", "Y_RANGE", ")", ":", "\n", "# print (\"OOB\")", "\n", "                ", "return", "None", "\n", "", "if", "does_path_overlap", "(", "pos_array", ")", ":", "\n", "# print (\"Overlap\")", "\n", "                ", "return", "None", "\n", "\n", "# check to see if we are near target", "\n", "", "dist_to_target", "=", "(", "(", "pos", "-", "next_target", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "if", "dist_to_target", "<", "INTERVAL_LEN", "/", "2", ":", "\n", "                ", "break", "\n", "\n", "", "if", "sim_steps", ">", "MAX_SIM_STEPS", ":", "\n", "                ", "print", "(", "\"Exceeded sim steps!\"", ")", "\n", "return", "None", "\n", "\n", "", "", "", "return", "pos_array", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.calc_movement": [[363, 372], ["numpy.array", "random.random", "random.random", "math.cos", "math.sin"], "function", ["None"], ["", "def", "calc_movement", "(", "pos", ",", "next_target", ")", ":", "\n", "    ", "movement_vector", "=", "(", "next_target", "-", "pos", ")", "\n", "movement_vector_len", "=", "(", "(", "next_target", "-", "pos", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "movement_signal", "=", "movement_vector", "/", "movement_vector_len", "*", "MOVE_DIST", "\n", "noise_angle", "=", "random", ".", "random", "(", ")", "*", "math", ".", "pi", "*", "2", "\n", "noise_val", "=", "random", ".", "random", "(", ")", "*", "MOVE_DIST", "*", "NOISE_VAL", "\n", "noise", "=", "np", ".", "array", "(", "[", "math", ".", "cos", "(", "noise_angle", ")", "*", "noise_val", ",", "\n", "math", ".", "sin", "(", "noise_angle", ")", "*", "noise_val", "]", ")", "\n", "return", "movement_signal", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_repulsion": [[374, 386], ["min", "enumerate", "enumerate"], "function", ["None"], ["", "def", "get_repulsion", "(", "pos", ",", "landmark_pos", ",", "landmark_radii", ")", ":", "\n", "    ", "landmark_dist", "=", "(", "(", "landmark_pos", "-", "pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "min_dist", ",", "landmark_i", "=", "min", "(", "(", "d", ",", "i", ")", "for", "i", ",", "d", "in", "enumerate", "(", "landmark_dist", ")", ")", "\n", "for", "landmark_i", ",", "dist", "in", "enumerate", "(", "landmark_dist", ")", ":", "\n", "        ", "landmark_radius", "=", "landmark_radii", "[", "landmark_i", "]", "\n", "if", "dist", "<", "landmark_radius", ":", "\n", "            ", "repulsion_dir", "=", "pos", "-", "landmark_pos", "[", "landmark_i", "]", "\n", "repulsion_dir_len", "=", "(", "repulsion_dir", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", "\n", "repulsion_dist", "=", "landmark_radius", "-", "min_dist", "\n", "repulsion", "=", "repulsion_dir", "*", "repulsion_dist", "/", "repulsion_dir_len", "\n", "return", "repulsion", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_lake_repulsion": [[388, 413], ["numpy.zeros", "len", "numpy.zeros", "numpy.linalg.norm", "numpy.argsort", "numpy.linalg.norm", "float"], "function", ["None"], ["", "def", "get_lake_repulsion", "(", "pos", ",", "lake_pos", ")", ":", "\n", "    ", "if", "len", "(", "lake_pos", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "", "lake_dist", "=", "[", "np", ".", "linalg", ".", "norm", "(", "lake_cell", "-", "pos", ")", "for", "lake_cell", "in", "lake_pos", "]", "\n", "NUM_POINTS", "=", "20", "\n", "closest_n", "=", "np", ".", "argsort", "(", "lake_dist", ")", "[", ":", "NUM_POINTS", "]", "\n", "close_points", "=", "[", "lake_pos", "[", "i", "]", "for", "i", "in", "closest_n", "]", "\n", "\n", "points_added", "=", "0", "\n", "repulsion", "=", "np", ".", "zeros", "(", "2", ")", "\n", "for", "point", "in", "close_points", ":", "\n", "        ", "repulsion_dir", "=", "pos", "-", "point", "\n", "repulsion_norm", "=", "np", ".", "linalg", ".", "norm", "(", "repulsion_dir", ")", "\n", "if", "repulsion_norm", ">", "LAKE_REPULSION_DIST", ":", "\n", "            ", "break", "\n", "", "repulsion", "+=", "(", "repulsion_dir", "/", "repulsion_norm", ")", "\n", "points_added", "+=", "1", "\n", "\n", "", "if", "points_added", "==", "0", ":", "\n", "        ", "return", "repulsion", "\n", "\n", "", "repulsion_dist", "=", "float", "(", "LAKE_REPULSION", ")", "/", "points_added", "\n", "output_repulsion", "=", "repulsion", "*", "repulsion_dist", "\n", "return", "output_repulsion", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.get_interval_num": [[415, 417], ["int"], "function", ["None"], ["", "def", "get_interval_num", "(", "total_distance", ")", ":", "\n", "    ", "return", "int", "(", "total_distance", "/", "INTERVAL_LEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.is_oob": [[419, 424], ["None"], "function", ["None"], ["", "def", "is_oob", "(", "val", ",", "val_range", ")", ":", "\n", "    ", "if", "val", "<", "val_range", "[", "0", "]", "or", "val", ">", "val_range", "[", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_curves.does_path_overlap": [[426, 438], ["numpy.array", "min", "len"], "function", ["None"], ["", "", "def", "does_path_overlap", "(", "pos_array", ")", ":", "\n", "    ", "NUM_SKIP", "=", "3", "\n", "if", "len", "(", "pos_array", ")", "<=", "NUM_SKIP", ":", "\n", "        ", "return", "False", "\n", "", "current_pos", "=", "pos_array", "[", "-", "1", "]", "\n", "prev_pos_array", "=", "np", ".", "array", "(", "pos_array", "[", ":", "-", "NUM_SKIP", "]", ")", "\n", "distances", "=", "(", "(", "prev_pos_array", "-", "current_pos", ")", "**", "2", ")", ".", "sum", "(", "1", ")", "**", "0.5", "\n", "min_distance", "=", "min", "(", "distances", ")", "\n", "if", "min_distance", "<=", "INTERVAL_LEN", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.add_lake_to_config": [[20, 51], ["range", "int", "range", "print", "len", "int", "int", "landmarks.append", "random.uniform", "terrain_generation.__make_lake", "config[].append", "numpy.argwhere", "print", "list", "str", "int", "int", "all_lake_coords.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__make_lake", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["def", "add_lake_to_config", "(", "config", ",", "x_range", ",", "z_range", ")", ":", "\n", "# First extract a list of landmarks and discretize their length", "\n", "    ", "landmarks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "\"xPos\"", "]", ")", ")", ":", "\n", "        ", "pos_x", ",", "pos_z", "=", "config", "[", "\"xPos\"", "]", "[", "i", "]", ",", "config", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "idx_x", "=", "int", "(", "(", "float", "(", "pos_x", ")", "-", "x_range", "[", "0", "]", ")", "/", "(", "x_range", "[", "1", "]", "-", "x_range", "[", "0", "]", ")", "*", "LAKE_RES", ")", "\n", "idx_z", "=", "int", "(", "(", "float", "(", "pos_z", ")", "-", "z_range", "[", "0", "]", ")", "/", "(", "z_range", "[", "1", "]", "-", "z_range", "[", "0", "]", ")", "*", "LAKE_RES", ")", "\n", "landmarks", ".", "append", "(", "[", "idx_x", ",", "idx_z", "]", ")", "\n", "\n", "", "num_lakes", "=", "int", "(", "random", ".", "uniform", "(", "MIN_NUM_LAKES", ",", "MAX_NUM_LAKES", "+", "0.99", ")", ")", "\n", "\n", "all_lake_coords", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_lakes", ")", ":", "\n", "        ", "lake_img", "=", "__make_lake", "(", "landmarks", ")", "\n", "if", "lake_img", "is", "not", "None", ":", "\n", "            ", "lake_coords_np", "=", "np", ".", "argwhere", "(", "lake_img", ">", "0.5", ")", "\n", "for", "coord", "in", "lake_coords_np", ":", "\n", "                ", "coord", "=", "list", "(", "coord", ")", "\n", "if", "coord", "not", "in", "all_lake_coords", ":", "\n", "                    ", "all_lake_coords", ".", "append", "(", "coord", ")", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "\"FAILED TO MAKE LAKE!\"", ")", "\n", "", "", "print", "(", "\"Made \"", "+", "str", "(", "num_lakes", ")", "+", "\" lakes\"", ")", "\n", "for", "lake_coord", "in", "all_lake_coords", ":", "\n", "        ", "config", "[", "\"lakeCoords\"", "]", ".", "append", "(", "{", "\"x\"", ":", "int", "(", "lake_coord", "[", "0", "]", ")", ",", "\"y\"", ":", "int", "(", "lake_coord", "[", "1", "]", ")", "}", ")", "\n", "\n", "# Debugging:", "\n", "#paint_landmarks(lake_img, landmarks, scale=10)", "\n", "#plt.imshow(lake_img)", "\n", "#plt.show()", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__random_point": [[53, 55], ["int", "int", "random.uniform", "random.uniform"], "function", ["None"], ["", "def", "__random_point", "(", "res", ")", ":", "\n", "    ", "return", "[", "int", "(", "random", ".", "uniform", "(", "2", ",", "res", "-", "2", ")", ")", ",", "int", "(", "random", ".", "uniform", "(", "2", ",", "res", "-", "2", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__upsample": [[57, 60], ["scipy.imresize"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.imresize.imresize"], ["", "def", "__upsample", "(", "land_img", ",", "res", ")", ":", "\n", "    ", "big_img", "=", "misc", ".", "imresize", "(", "land_img", ",", "(", "res", ",", "res", ")", ",", "interp", "=", "\"nearest\"", ")", "\n", "return", "big_img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__gaussian_filter": [[62, 66], ["random.uniform", "scipy.gaussian_filter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter"], ["", "def", "__gaussian_filter", "(", "lake_img", ")", ":", "\n", "    ", "filter_size", "=", "random", ".", "uniform", "(", "4", ",", "10", ")", "\n", "#print (\"Filter size: \", filter_size)", "\n", "return", "filters", ".", "gaussian_filter", "(", "lake_img", ",", "filter_size", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__collides_with_landmark": [[68, 72], ["min", "numpy.linalg.norm", "numpy.asarray"], "function", ["None"], ["", "def", "__collides_with_landmark", "(", "cell", ",", "landmarks", ")", ":", "\n", "    ", "dists", "=", "[", "np", ".", "linalg", ".", "norm", "(", "np", ".", "asarray", "(", "landmark", ")", "-", "cell", ")", "for", "landmark", "in", "landmarks", "]", "\n", "min_dist", "=", "min", "(", "dists", ")", "\n", "return", "min_dist", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__sample_initial_cell": [[74, 82], ["range", "numpy.asarray", "terrain_generation.__random_point", "terrain_generation.__collides_with_landmark"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__random_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__collides_with_landmark"], ["", "def", "__sample_initial_cell", "(", "landmarks", ",", "res", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "SAMPLING_ATTEMPTS", ")", ":", "\n", "        ", "proposal", "=", "np", ".", "asarray", "(", "__random_point", "(", "LAKE_RES", ")", ")", "\n", "if", "not", "__collides_with_landmark", "(", "proposal", ",", "landmarks", ")", ":", "\n", "            ", "return", "proposal", "\n", "#else:", "\n", "#    print (\"Reject initial cell: \", proposal)", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__is_cell_valid": [[84, 87], ["None"], "function", ["None"], ["", "def", "__is_cell_valid", "(", "cell", ",", "res", ")", ":", "\n", "    ", "valid", "=", "cell", "[", "0", "]", ">=", "0", "and", "cell", "[", "1", "]", ">=", "0", "and", "cell", "[", "0", "]", "<", "res", "and", "cell", "[", "1", "]", "<", "res", "\n", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__contains_cell": [[89, 95], ["None"], "function", ["None"], ["", "def", "__contains_cell", "(", "lake", ",", "cell", ")", ":", "\n", "    ", "for", "lake_cell", "in", "lake", ":", "\n", "        ", "if", "lake_cell", "[", "0", "]", "==", "cell", "[", "0", "]", "and", "lake_cell", "[", "1", "]", "==", "cell", "[", "1", "]", ":", "\n", "# print (\"Lake contains: \", cell)", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__generate_new_cell": [[97, 110], ["int", "random.uniform", "random.uniform", "random.uniform", "numpy.asarray", "numpy.asarray", "terrain_generation.__is_cell_valid", "len", "terrain_generation.__contains_cell"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__is_cell_valid", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__contains_cell"], ["", "def", "__generate_new_cell", "(", "lake", ",", "res", ")", ":", "\n", "    ", "proposed_cell", "=", "None", "\n", "while", "True", ":", "\n", "        ", "index", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "lake", ")", ")", ")", "\n", "lake_cell", "=", "lake", "[", "index", "]", "\n", "rand_x", "=", "random", ".", "uniform", "(", "0", ",", "4", ")", "\n", "x_offset", "=", "-", "1", "if", "rand_x", "<", "1", "else", "1", "if", "rand_x", ">", "3", "else", "0", "\n", "rand_y", "=", "random", ".", "uniform", "(", "0", ",", "3", ")", "\n", "y_offset", "=", "(", "-", "1", "if", "rand_y", "<", "1", "else", "1", "if", "rand_x", ">", "2", "else", "0", ")", "if", "x_offset", "==", "0", "else", "0", "\n", "proposed_cell", "=", "np", ".", "asarray", "(", "lake_cell", ")", "+", "np", ".", "asarray", "(", "[", "x_offset", ",", "y_offset", "]", ")", "\n", "if", "__is_cell_valid", "(", "proposed_cell", ",", "LAKE_RES", ")", "and", "not", "__contains_cell", "(", "lake", ",", "proposed_cell", ")", ":", "\n", "            ", "break", "\n", "", "", "return", "proposed_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__paint_lake_on_img": [[112, 115], ["None"], "function", ["None"], ["", "def", "__paint_lake_on_img", "(", "land_img", ",", "lake", ")", ":", "\n", "    ", "for", "cell", "in", "lake", ":", "\n", "        ", "land_img", "[", "cell", "[", "0", "]", "]", "[", "cell", "[", "1", "]", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__paing_landmarks_on_img": [[117, 120], ["None"], "function", ["None"], ["", "", "def", "__paing_landmarks_on_img", "(", "land_img", ",", "landmarks", ",", "scale", "=", "1", ")", ":", "\n", "    ", "for", "landmark", "in", "landmarks", ":", "\n", "        ", "land_img", "[", "landmark", "[", "0", "]", "*", "scale", "]", "[", "landmark", "[", "1", "]", "*", "scale", "]", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__generate_lake": [[122, 134], ["terrain_generation.__sample_initial_cell", "int", "range", "numpy.asarray", "random.uniform", "terrain_generation.__generate_new_cell", "terrain_generation.__collides_with_landmark", "lake.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__sample_initial_cell", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__generate_new_cell", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__collides_with_landmark", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "__generate_lake", "(", "landmarks", ")", ":", "\n", "    ", "initial_cell", "=", "__sample_initial_cell", "(", "landmarks", ",", "LAKE_RES", ")", "\n", "if", "initial_cell", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "lake", "=", "[", "initial_cell", "]", "\n", "lake_size", "=", "int", "(", "random", ".", "uniform", "(", "5", ",", "50", ")", ")", "\n", "for", "i", "in", "range", "(", "lake_size", ")", ":", "\n", "        ", "neighbour_cell", "=", "__generate_new_cell", "(", "lake", ",", "LAKE_RES", ")", "\n", "if", "not", "__collides_with_landmark", "(", "neighbour_cell", ",", "landmarks", ")", ":", "\n", "            ", "lake", ".", "append", "(", "neighbour_cell", ")", "\n", "#print (\"Lake size: \", lake_size, len(lake))", "\n", "", "", "return", "np", ".", "asarray", "(", "lake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__make_lake": [[136, 151], ["terrain_generation.__generate_lake", "numpy.zeros", "terrain_generation.__paint_lake_on_img", "terrain_generation.__upsample", "terrain_generation.__gaussian_filter", "numpy.where", "numpy.max"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__generate_lake", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__paint_lake_on_img", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__upsample", "home.repos.pwc.inspect_result.clic-lab_drif.generation.terrain_generation.__gaussian_filter"], ["", "def", "__make_lake", "(", "landmarks", ")", ":", "\n", "    ", "lake", "=", "__generate_lake", "(", "landmarks", ")", "\n", "if", "lake", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "lake_proc", "=", "np", ".", "zeros", "(", "(", "LAKE_RES", ",", "LAKE_RES", ")", ")", "\n", "__paint_lake_on_img", "(", "lake_proc", ",", "lake", ")", "\n", "# paint_landmarks (lake_proc, landmarks)", "\n", "\n", "upsampled", "=", "__upsample", "(", "lake_proc", ",", "MESH_RES", ")", "\n", "filtered", "=", "__gaussian_filter", "(", "upsampled", ")", "\n", "T", "=", "0.5", "\n", "threshold", "=", "np", ".", "max", "(", "filtered", ")", "*", "T", "\n", "thesholded", "=", "np", ".", "where", "(", "filtered", ">", "threshold", ",", "1", ",", "0", ")", "\n", "return", "thesholded", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_annotations.get_split_ranges": [[63, 68], ["int", "int", "int"], "function", ["None"], ["def", "get_split_ranges", "(", "num_envs", ")", ":", "\n", "    ", "train_range", "=", "[", "int", "(", "x", "*", "num_envs", ")", "for", "x", "in", "TRAIN_SPLIT", "]", "\n", "dev_range", "=", "[", "int", "(", "x", "*", "num_envs", ")", "for", "x", "in", "DEV_SPLIT", "]", "\n", "test_range", "=", "[", "int", "(", "x", "*", "num_envs", ")", "for", "x", "in", "TEST_SPLIT", "]", "\n", "return", "train_range", ",", "dev_range", ",", "test_range", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_annotations.make_annotations": [[69, 127], ["parameters.initialize_experiment", "generate_template_annotations.get_split_ranges", "range", "data_io.get_env_config_path", "data_io.get_curve_path", "data_io.get_instructions_path", "data_io.instructions.clean_instruction", "numpy.asarray", "geometry.vec_to_yaw", "numpy.rad2deg", "annotations[].append", "print", "open", "json.dump", "open", "json.load", "open", "json.load", "open", "fp.readline", "list", "str", "data_io.get_instruction_annotations_path", "zip", "len", "str"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.initialize_experiment", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_template_annotations.get_split_ranges", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_env_config_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_curve_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instructions_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.clean_instruction", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_instruction_annotations_path"], ["", "def", "make_annotations", "(", "end_i", ")", ":", "\n", "    ", "P", ".", "initialize_experiment", "(", ")", "\n", "\n", "annotations", "=", "{", "\n", "\"train\"", ":", "[", "]", ",", "\n", "\"test\"", ":", "[", "]", ",", "\n", "\"dev\"", ":", "[", "]", "\n", "}", "\n", "\n", "train_range", ",", "dev_range", ",", "test_range", "=", "get_split_ranges", "(", "end_i", ")", "\n", "assert", "(", "train_range", "[", "1", "]", "-", "train_range", "[", "0", "]", ")", "%", "NEW_CONFIG_EVERY_N", "==", "0", ",", "\"training set size must be a multiple of NEW_CONFIG_EVERY_N\"", "\n", "\n", "for", "config_id", "in", "range", "(", "end_i", ")", ":", "\n", "        ", "config_path", "=", "paths", ".", "get_env_config_path", "(", "config_id", ")", "\n", "path_path", "=", "paths", ".", "get_curve_path", "(", "config_id", ")", "\n", "instruction_path", "=", "paths", ".", "get_instructions_path", "(", "config_id", ")", "\n", "\n", "with", "open", "(", "config_path", ")", "as", "fp", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "with", "open", "(", "path_path", ")", "as", "fp", ":", "\n", "            ", "curve", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "with", "open", "(", "instruction_path", ")", "as", "fp", ":", "\n", "            ", "instruction", "=", "fp", ".", "readline", "(", ")", "\n", "", "token_list", "=", "clean_instruction", "(", "instruction", ")", "\n", "\n", "curve_np", "=", "np", ".", "asarray", "(", "list", "(", "zip", "(", "curve", "[", "\"x_array\"", "]", ",", "curve", "[", "\"z_array\"", "]", ")", ")", ")", "\n", "\n", "split", "=", "\"train\"", "if", "train_range", "[", "0", "]", "<=", "config_id", "<", "train_range", "[", "1", "]", "else", "\"dev\"", "if", "dev_range", "[", "0", "]", "<=", "config_id", "<", "dev_range", "[", "1", "]", "else", "\"test\"", "if", "test_range", "[", "0", "]", "<=", "config_id", "<", "test_range", "[", "1", "]", "else", "None", "\n", "\n", "#start_dir = np.asarray(config[\"startHeading\"]) - np.asarray(config[\"startPos\"])", "\n", "start_dir", "=", "curve_np", "[", "1", "]", "-", "curve_np", "[", "0", "]", "\n", "start_yaw", "=", "vec_to_yaw", "(", "start_dir", ")", "\n", "start_yaw_cfg", "=", "np", ".", "rad2deg", "(", "-", "start_yaw", "+", "np", ".", "pi", "/", "2", ")", "\n", "\n", "dataset", "=", "{", "\n", "\"id\"", ":", "str", "(", "config_id", ")", ",", "\n", "\"start_z\"", ":", "[", "curve", "[", "\"z_array\"", "]", "[", "0", "]", "]", ",", "\n", "\"start_x\"", ":", "[", "curve", "[", "\"x_array\"", "]", "[", "0", "]", "]", ",", "\n", "\"end_z\"", ":", "[", "curve", "[", "\"z_array\"", "]", "[", "-", "1", "]", "]", ",", "\n", "\"end_x\"", ":", "[", "curve", "[", "\"x_array\"", "]", "[", "-", "1", "]", "]", ",", "\n", "\"start_rot\"", ":", "[", "start_yaw_cfg", "]", ",", "\n", "\"config_file\"", ":", "\"configs/random_config_%d.json\"", "%", "config_id", ",", "\n", "\"instructions_file\"", ":", "\"instructions/instructions_%d.txt\"", "%", "config_id", ",", "\n", "\"path_file\"", ":", "\"paths/random_curve_%d.json\"", "%", "config_id", ",", "\n", "\"moves\"", ":", "[", "]", ",", "\n", "\"valid\"", ":", "True", ",", "\n", "\"num_tokens\"", ":", "[", "len", "(", "token_list", ")", "]", ",", "\n", "\"instructions\"", ":", "[", "instruction", "]", "\n", "}", "\n", "annotations", "[", "split", "]", ".", "append", "(", "dataset", ")", "\n", "print", "(", "\"Added annotations for env: \"", "+", "str", "(", "config_id", ")", ")", "\n", "\n", "", "with", "open", "(", "paths", ".", "get_instruction_annotations_path", "(", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "annotations", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.random_point": [[18, 20], ["int", "int", "random.uniform", "random.uniform"], "function", ["None"], ["def", "random_point", "(", "res", ")", ":", "\n", "    ", "return", "[", "int", "(", "random", ".", "uniform", "(", "2", ",", "res", "-", "2", ")", ")", ",", "int", "(", "random", ".", "uniform", "(", "2", ",", "res", "-", "2", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.collides_with_landmark": [[22, 26], ["min", "numpy.linalg.norm", "numpy.asarray"], "function", ["None"], ["", "def", "collides_with_landmark", "(", "cell", ",", "landmarks", ")", ":", "\n", "    ", "dists", "=", "[", "np", ".", "linalg", ".", "norm", "(", "np", ".", "asarray", "(", "landmark", ")", "-", "cell", ")", "for", "landmark", "in", "landmarks", "]", "\n", "min_dist", "=", "min", "(", "dists", ")", "\n", "return", "min_dist", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.sample_initial_cell": [[28, 36], ["range", "numpy.asarray", "generate_terrain.random_point", "generate_terrain.collides_with_landmark"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.random_point", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.collides_with_landmark"], ["", "def", "sample_initial_cell", "(", "landmarks", ",", "res", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "SAMPLING_ATTEMPTS", ")", ":", "\n", "        ", "proposal", "=", "np", ".", "asarray", "(", "random_point", "(", "LAKE_RES", ")", ")", "\n", "if", "not", "collides_with_landmark", "(", "proposal", ",", "landmarks", ")", ":", "\n", "            ", "return", "proposal", "\n", "#else:", "\n", "#    print (\"Reject initial cell: \", proposal)", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.valid_cell": [[38, 41], ["None"], "function", ["None"], ["", "def", "valid_cell", "(", "cell", ",", "res", ")", ":", "\n", "    ", "valid", "=", "cell", "[", "0", "]", ">=", "0", "and", "cell", "[", "1", "]", ">=", "0", "and", "cell", "[", "0", "]", "<", "res", "and", "cell", "[", "1", "]", "<", "res", "\n", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.contains_cell": [[43, 49], ["None"], "function", ["None"], ["", "def", "contains_cell", "(", "lake", ",", "cell", ")", ":", "\n", "    ", "for", "lake_cell", "in", "lake", ":", "\n", "        ", "if", "lake_cell", "[", "0", "]", "==", "cell", "[", "0", "]", "and", "lake_cell", "[", "1", "]", "==", "cell", "[", "1", "]", ":", "\n", "# print (\"Lake contains: \", cell)", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.generate_new_cell": [[51, 64], ["int", "random.uniform", "random.uniform", "random.uniform", "numpy.asarray", "numpy.asarray", "generate_terrain.valid_cell", "len", "generate_terrain.contains_cell"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.valid_cell", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.contains_cell"], ["", "def", "generate_new_cell", "(", "lake", ",", "res", ")", ":", "\n", "    ", "proposed_cell", "=", "None", "\n", "while", "True", ":", "\n", "        ", "index", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "lake", ")", ")", ")", "\n", "lake_cell", "=", "lake", "[", "index", "]", "\n", "rand_x", "=", "random", ".", "uniform", "(", "0", ",", "4", ")", "\n", "x_offset", "=", "-", "1", "if", "rand_x", "<", "1", "else", "1", "if", "rand_x", ">", "3", "else", "0", "\n", "rand_y", "=", "random", ".", "uniform", "(", "0", ",", "3", ")", "\n", "y_offset", "=", "(", "-", "1", "if", "rand_y", "<", "1", "else", "1", "if", "rand_x", ">", "2", "else", "0", ")", "if", "x_offset", "==", "0", "else", "0", "\n", "proposed_cell", "=", "np", ".", "asarray", "(", "lake_cell", ")", "+", "np", ".", "asarray", "(", "[", "x_offset", ",", "y_offset", "]", ")", "\n", "if", "valid_cell", "(", "proposed_cell", ",", "LAKE_RES", ")", "and", "not", "contains_cell", "(", "lake", ",", "proposed_cell", ")", ":", "\n", "            ", "break", "\n", "", "", "return", "proposed_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.paint_lake": [[66, 69], ["None"], "function", ["None"], ["", "def", "paint_lake", "(", "land_img", ",", "lake", ")", ":", "\n", "    ", "for", "cell", "in", "lake", ":", "\n", "        ", "land_img", "[", "cell", "[", "0", "]", "]", "[", "cell", "[", "1", "]", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.paint_landmarks": [[71, 74], ["None"], "function", ["None"], ["", "", "def", "paint_landmarks", "(", "land_img", ",", "landmarks", ",", "scale", "=", "1", ")", ":", "\n", "    ", "for", "landmark", "in", "landmarks", ":", "\n", "        ", "land_img", "[", "landmark", "[", "0", "]", "*", "scale", "]", "[", "landmark", "[", "1", "]", "*", "scale", "]", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.generate_lake": [[76, 88], ["generate_terrain.sample_initial_cell", "int", "range", "numpy.asarray", "random.uniform", "generate_terrain.generate_new_cell", "generate_terrain.collides_with_landmark", "lake.append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.sample_initial_cell", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.generate_new_cell", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.collides_with_landmark", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "", "def", "generate_lake", "(", "landmarks", ")", ":", "\n", "    ", "initial_cell", "=", "sample_initial_cell", "(", "landmarks", ",", "LAKE_RES", ")", "\n", "if", "initial_cell", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "lake", "=", "[", "initial_cell", "]", "\n", "lake_size", "=", "int", "(", "random", ".", "uniform", "(", "5", ",", "50", ")", ")", "\n", "for", "i", "in", "range", "(", "lake_size", ")", ":", "\n", "        ", "neighbour_cell", "=", "generate_new_cell", "(", "lake", ",", "LAKE_RES", ")", "\n", "if", "not", "collides_with_landmark", "(", "neighbour_cell", ",", "landmarks", ")", ":", "\n", "            ", "lake", ".", "append", "(", "neighbour_cell", ")", "\n", "#print (\"Lake size: \", lake_size, len(lake))", "\n", "", "", "return", "np", ".", "asarray", "(", "lake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.upsample": [[90, 93], ["scipy.imresize"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.utils.imresize.imresize"], ["", "def", "upsample", "(", "land_img", ",", "res", ")", ":", "\n", "    ", "big_img", "=", "misc", ".", "imresize", "(", "land_img", ",", "(", "res", ",", "res", ")", ",", "interp", "=", "\"nearest\"", ")", "\n", "return", "big_img", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter": [[95, 99], ["random.uniform", "scipy.gaussian_filter"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter"], ["", "def", "gaussian_filter", "(", "lake_img", ")", ":", "\n", "    ", "filter_size", "=", "random", ".", "uniform", "(", "4", ",", "10", ")", "\n", "#print (\"Filter size: \", filter_size)", "\n", "return", "filters", ".", "gaussian_filter", "(", "lake_img", ",", "filter_size", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.make_lake": [[101, 116], ["generate_terrain.generate_lake", "numpy.zeros", "generate_terrain.paint_lake", "generate_terrain.upsample", "generate_terrain.gaussian_filter", "numpy.where", "numpy.max"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.generate_lake", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.paint_lake", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.upsample", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.gaussian_filter"], ["", "def", "make_lake", "(", "landmarks", ")", ":", "\n", "    ", "lake", "=", "generate_lake", "(", "landmarks", ")", "\n", "if", "lake", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "lake_proc", "=", "np", ".", "zeros", "(", "(", "LAKE_RES", ",", "LAKE_RES", ")", ")", "\n", "paint_lake", "(", "lake_proc", ",", "lake", ")", "\n", "# paint_landmarks (lake_proc, landmarks)", "\n", "\n", "upsampled", "=", "upsample", "(", "lake_proc", ",", "MESH_RES", ")", "\n", "filtered", "=", "gaussian_filter", "(", "upsampled", ")", "\n", "T", "=", "0.5", "\n", "threshold", "=", "np", ".", "max", "(", "filtered", ")", "*", "T", "\n", "thesholded", "=", "np", ".", "where", "(", "filtered", ">", "threshold", ",", "1", ",", "0", ")", "\n", "return", "thesholded", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.add_lake_to_config": [[117, 148], ["range", "int", "range", "print", "len", "int", "int", "landmarks.append", "random.uniform", "generate_terrain.make_lake", "config[].append", "numpy.argwhere", "print", "list", "str", "int", "int", "all_lake_coords.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.generation.generate_terrain.make_lake", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "add_lake_to_config", "(", "config", ",", "x_range", ",", "z_range", ")", ":", "\n", "# First extract a list of landmarks and discretize their length", "\n", "    ", "landmarks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "\"xPos\"", "]", ")", ")", ":", "\n", "        ", "pos_x", ",", "pos_z", "=", "config", "[", "\"xPos\"", "]", "[", "i", "]", ",", "config", "[", "\"zPos\"", "]", "[", "i", "]", "\n", "idx_x", "=", "int", "(", "(", "float", "(", "pos_x", ")", "-", "x_range", "[", "0", "]", ")", "/", "(", "x_range", "[", "1", "]", "-", "x_range", "[", "0", "]", ")", "*", "LAKE_RES", ")", "\n", "idx_z", "=", "int", "(", "(", "float", "(", "pos_z", ")", "-", "z_range", "[", "0", "]", ")", "/", "(", "z_range", "[", "1", "]", "-", "z_range", "[", "0", "]", ")", "*", "LAKE_RES", ")", "\n", "landmarks", ".", "append", "(", "[", "idx_x", ",", "idx_z", "]", ")", "\n", "\n", "", "num_lakes", "=", "int", "(", "random", ".", "uniform", "(", "MIN_NUM_LAKES", ",", "MAX_NUM_LAKES", "+", "0.99", ")", ")", "\n", "\n", "all_lake_coords", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_lakes", ")", ":", "\n", "        ", "lake_img", "=", "make_lake", "(", "landmarks", ")", "\n", "if", "lake_img", "is", "not", "None", ":", "\n", "            ", "lake_coords_np", "=", "np", ".", "argwhere", "(", "lake_img", ">", "0.5", ")", "\n", "for", "coord", "in", "lake_coords_np", ":", "\n", "                ", "coord", "=", "list", "(", "coord", ")", "\n", "if", "coord", "not", "in", "all_lake_coords", ":", "\n", "                    ", "all_lake_coords", ".", "append", "(", "coord", ")", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "\"FAILED TO MAKE LAKE!\"", ")", "\n", "", "", "print", "(", "\"Made \"", "+", "str", "(", "num_lakes", ")", "+", "\" lakes\"", ")", "\n", "for", "lake_coord", "in", "all_lake_coords", ":", "\n", "        ", "config", "[", "\"lakeCoords\"", "]", ".", "append", "(", "{", "\"x\"", ":", "int", "(", "lake_coord", "[", "0", "]", ")", ",", "\"y\"", ":", "int", "(", "lake_coord", "[", "1", "]", ")", "}", ")", "\n", "\n", "# Debugging:", "\n", "#paint_landmarks(lake_img, landmarks, scale=10)", "\n", "#plt.imshow(lake_img)", "\n", "#plt.show()", "\n", "", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_names": [[171, 177], ["list", "sorted", "LANDMARK_RADII.keys", "landmarks.get_null_landmark_name"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_null_landmark_name"], ["def", "get_landmark_names", "(", "add_empty", "=", "False", ")", ":", "\n", "    ", "if", "add_empty", ":", "\n", "        ", "LANDMARK_RADII", "[", "get_null_landmark_name", "(", ")", "]", "=", "75", "\n", "", "names", "=", "list", "(", "sorted", "(", "LANDMARK_RADII", ".", "keys", "(", ")", ")", ")", "\n", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_null_landmark_name": [[178, 180], ["None"], "function", ["None"], ["", "def", "get_null_landmark_name", "(", ")", ":", "\n", "    ", "return", "\"0Null\"", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index": [[181, 196], ["landmarks.get_landmark_names", "enumerate", "indices[].append"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_names", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "get_landmark_name_to_index", "(", "single_index", "=", "True", ",", "add_empty", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param single_index: If true, return only one index for each landmark name. Otherwise return a list of indices\n    :return:\n    \"\"\"", "\n", "indices", "=", "{", "}", "\n", "landmark_names", "=", "get_landmark_names", "(", "add_empty", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "landmark_names", ")", ":", "\n", "        ", "if", "single_index", ":", "\n", "            ", "indices", "[", "name", "]", "=", "i", "\n", "", "else", ":", "\n", "            ", "if", "name", "not", "in", "indices", ":", "\n", "                ", "indices", "[", "name", "]", "=", "[", "]", "\n", "", "indices", "[", "name", "]", ".", "append", "(", "i", ")", "\n", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_index_to_name": [[198, 203], ["landmarks.get_landmark_name_to_index", "get_landmark_name_to_index.keys", "get_landmark_name_to_index.values", "dict", "zip"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_name_to_index"], ["", "def", "get_landmark_index_to_name", "(", ")", ":", "\n", "    ", "name2index", "=", "get_landmark_name_to_index", "(", ")", "\n", "names", "=", "name2index", ".", "keys", "(", ")", "\n", "indices", "=", "name2index", ".", "values", "(", ")", "\n", "return", "dict", "(", "zip", "(", "indices", ",", "names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.landmarks.get_landmark_stage_name": [[205, 210], ["None"], "function", ["None"], ["", "def", "get_landmark_stage_name", "(", "name", ")", ":", "\n", "    ", "if", "name", "in", "PORTABLE_LANDMARK_STAGE_NAMES", ":", "\n", "        ", "return", "PORTABLE_LANDMARK_STAGE_NAMES", "[", "name", "]", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.get_args": [[117, 126], ["None"], "methods", ["None"], ["def", "get_args", "(", "self", ",", "landmark1", ",", "landmark2", ",", "side", ",", "dir", ")", ":", "\n", "        ", "if", "self", "==", "TemplateType", ".", "GOTO__LANDMARK", ":", "\n", "            ", "return", "(", "landmark1", ",", ")", "\n", "", "elif", "self", "==", "TemplateType", ".", "GOTO__LANDMARK_SIDE", ":", "\n", "            ", "return", "(", "landmark1", ",", "side", ")", "\n", "", "elif", "self", "==", "TemplateType", ".", "GOAROUND__LANDMARK_DIR", ":", "\n", "            ", "return", "(", "landmark1", ",", "dir", ")", "\n", "", "elif", "self", "==", "TemplateType", ".", "GOTO__LANDMARK_LANDMARK", ":", "\n", "            ", "return", "(", "landmark1", ",", "landmark2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.all": [[127, 133], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "all", "(", ")", ":", "\n", "        ", "return", "[", "TemplateType", ".", "GOTO__LANDMARK", ",", "\n", "TemplateType", ".", "GOTO__LANDMARK_SIDE", ",", "\n", "TemplateType", ".", "GOAROUND__LANDMARK_DIR", ",", "\n", "TemplateType", ".", "GOTO__LANDMARK_LANDMARK", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.Template.__init__": [[183, 190], ["nlp_templates.gen_instruction"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.gen_instruction"], ["    ", "def", "__init__", "(", "self", ",", "template_type", ",", "landmark1", ",", "landmark2", "=", "None", ",", "side", "=", "None", ",", "dir", "=", "None", ",", "sampling", "=", "\"random\"", ")", ":", "\n", "        ", "self", ".", "type", "=", "template_type", "\n", "self", ".", "landmark1", "=", "landmark1", "\n", "self", ".", "landmark2", "=", "landmark2", "\n", "self", ".", "side", "=", "side", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "instruction", "=", "gen_instruction", "(", "template_type", ",", "landmark1", ",", "landmark2", ",", "side", ",", "dir", ",", "sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.Template.__str__": [[191, 197], ["str", "str", "nlp_templates.Template.type.get_args"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.get_args"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "res", "=", "\"Template: \"", "\n", "res", "+=", "str", "(", "self", ".", "type", ")", "+", "\" \"", "\n", "res", "+=", "str", "(", "self", ".", "type", ".", "get_args", "(", "self", ".", "landmark1", ",", "self", ".", "landmark2", ",", "self", ".", "side", ",", "self", ".", "dir", ")", ")", "+", "\" \"", "\n", "res", "+=", "self", ".", "instruction", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.pick_template": [[135, 152], ["len", "random.randrange"], "function", ["None"], ["", "", "def", "pick_template", "(", "template_type", ",", "sampling", ")", ":", "\n", "    ", "l", "=", "None", "\n", "if", "template_type", "==", "TemplateType", ".", "GOTO__LANDMARK", ":", "\n", "        ", "l", "=", "T_GOTO__LANDMARK", "\n", "", "elif", "template_type", "==", "TemplateType", ".", "GOAROUND__LANDMARK_DIR", ":", "\n", "        ", "l", "=", "T_GOAROUND__LANDMARK_DIR", "\n", "", "elif", "template_type", "==", "TemplateType", ".", "GOTO__LANDMARK_SIDE", ":", "\n", "        ", "l", "=", "T_GOTO__LANDMARK_SIDE", "\n", "", "elif", "template_type", "==", "TemplateType", ".", "GOTO__LANDMARK_LANDMARK", ":", "\n", "        ", "l", "=", "T_GOTO__LANDMARK_LANDMARK", "\n", "\n", "", "opts", "=", "len", "(", "l", ")", "\n", "if", "sampling", "==", "\"random\"", ":", "\n", "        ", "pick", "=", "random", ".", "randrange", "(", "0", ",", "opts", ")", "\n", "", "else", ":", "\n", "        ", "pick", "=", "0", "\n", "", "return", "l", "[", "pick", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.pick_option": [[154, 168], ["random.randrange", "len", "print", "quit"], "function", ["None"], ["", "def", "pick_option", "(", "name", ",", "dict", ",", "sampling", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "l", "=", "dict", "[", "name", "]", "\n", "if", "sampling", "==", "\"random\"", ":", "\n", "        ", "pick", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "l", ")", ")", "\n", "", "elif", "sampling", "==", "\"consistent\"", ":", "\n", "        ", "pick", "=", "0", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unrecognized sampling method\"", ")", "\n", "quit", "(", "-", "1", ")", "\n", "return", "None", "\n", "", "opt", "=", "l", "[", "pick", "]", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.gen_instruction": [[170, 179], ["nlp_templates.pick_template", "nlp_templates.pick_option", "nlp_templates.pick_option", "nlp_templates.pick_option", "nlp_templates.pick_option", "template_type.get_args", "pick_template.format"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.pick_template", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.pick_option", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.pick_option", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.pick_option", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.pick_option", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.get_args"], ["", "def", "gen_instruction", "(", "template_type", ",", "landmark1", ",", "landmark2", ",", "side", ",", "dir", ",", "sampling", "=", "\"random\"", ")", ":", "\n", "    ", "template", "=", "pick_template", "(", "template_type", ",", "sampling", ")", "\n", "arg_landmark1", "=", "pick_option", "(", "landmark1", ",", "N_LANDMARKS", ",", "sampling", ")", "\n", "arg_landmark2", "=", "pick_option", "(", "landmark2", ",", "N_LANDMARKS", ",", "sampling", ")", "\n", "arg_side", "=", "pick_option", "(", "side", ",", "N_SIDES", ",", "sampling", ")", "\n", "arg_dir", "=", "pick_option", "(", "dir", ",", "N_SIDES", ",", "sampling", ")", "\n", "args", "=", "template_type", ".", "get_args", "(", "arg_landmark1", ",", "arg_landmark2", ",", "arg_side", ",", "arg_dir", ")", "\n", "instruction", "=", "template", ".", "format", "(", "*", "args", ")", "\n", "return", "instruction", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.generate_template": [[199, 206], ["list", "list", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "nlp_templates.Template", "N_LANDMARKS.keys", "N_SIDES.keys"], "function", ["None"], ["", "", "def", "generate_template", "(", "types", ",", "landmark_choices", "=", "list", "(", "N_LANDMARKS", ".", "keys", "(", ")", ")", ",", "sampling", "=", "\"random\"", ",", "side_choices", "=", "list", "(", "N_SIDES", ".", "keys", "(", ")", ")", ")", ":", "\n", "    ", "t", "=", "random", ".", "choice", "(", "types", ")", "\n", "landmark1", "=", "random", ".", "choice", "(", "landmark_choices", ")", "\n", "landmark2", "=", "random", ".", "choice", "(", "landmark_choices", ")", "\n", "side", "=", "random", ".", "choice", "(", "side_choices", ")", "\n", "dir", "=", "random", ".", "choice", "(", "side_choices", ")", "\n", "return", "Template", "(", "t", ",", "landmark1", ",", "landmark2", ",", "side", ",", "dir", ",", "sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.generate_templates": [[208, 213], ["nlp_templates.TemplateType.all", "range", "out.append", "nlp_templates.generate_template"], "function", ["home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.TemplateType.all", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.generate_template"], ["", "def", "generate_templates", "(", "count", ",", "types", "=", "TemplateType", ".", "all", "(", ")", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "        ", "out", ".", "append", "(", "generate_template", "(", "types", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.has_ambiguous_noun_phrase": [[215, 220], ["None"], "function", ["None"], ["", "def", "has_ambiguous_noun_phrase", "(", "landmark1", ",", "landmark2", ")", ":", "\n", "# TODO: This only considers the non-random sampling. Consider random sampling too.", "\n", "    ", "exp1", "=", "N_LANDMARKS", "[", "landmark1", "]", "[", "0", "]", "\n", "exp2", "=", "N_LANDMARKS", "[", "landmark2", "]", "[", "0", "]", "\n", "return", "exp1", "==", "exp2", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.definitions.nlp_templates.get_side_name2idx": [[222, 228], ["list", "enumerate", "sorted", "list", "N_SIDES.keys"], "function", ["None"], ["", "def", "get_side_name2idx", "(", ")", ":", "\n", "    ", "keys", "=", "list", "(", "sorted", "(", "list", "(", "N_SIDES", ".", "keys", "(", ")", ")", ")", ")", "\n", "name2idx", "=", "{", "}", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "name2idx", "[", "key", "]", "=", "i", "\n", "", "return", "name2idx", "\n", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.__init__": [[21, 37], ["evaluation.evaluate_base.EvaluateBase.__init__", "data_io.instructions.get_all_instructions", "evaluation.results_t_landmark_side.ResultsLandmarkSide", "visualization.Presenter", "parameters.get_current_parameters", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "save_images", "=", "True", ",", "entire_trajectory", "=", "True", ",", "custom_instr", "=", "None", ",", "aug_len", "=", "None", ")", ":", "\n", "        ", "super", "(", "EvaluateBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_i", ",", "self", ".", "test_i", ",", "self", ".", "dev_i", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "all_i", "=", "{", "**", "self", ".", "train_i", ",", "**", "self", ".", "test_i", ",", "**", "self", ".", "dev_i", "}", "\n", "self", ".", "passing_distance", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"passing_distance\"", "]", "\n", "self", ".", "results", "=", "ResultsLandmarkSide", "(", ")", "\n", "self", ".", "presenter", "=", "Presenter", "(", ")", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "save_images", "=", "save_images", "\n", "self", ".", "entire_trajectory", "=", "entire_trajectory", "\n", "self", ".", "custom_instr", "=", "custom_instr", "\n", "self", ".", "aug_len", "=", "aug_len", "\n", "\n", "self", ".", "visible_map", "=", "{", "}", "\n", "\n", "self", ".", "hfov", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"ModelPVN\"", "]", "[", "\"Stage1\"", "]", "[", "\"cam_h_fov\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._has_multiple_segments": [[38, 46], ["None"], "methods", ["None"], ["", "def", "_has_multiple_segments", "(", "self", ",", "rollout", ")", ":", "\n", "        ", "prev_idx", "=", "rollout", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "if", "\"metadata\"", "in", "rollout", "[", "0", "]", "else", "rollout", "[", "0", "]", "[", "\"seg_idx\"", "]", "\n", "for", "sample", "in", "rollout", ":", "\n", "            ", "if", "\"metadata\"", "not", "in", "sample", ":", "\n", "                ", "sample", "[", "\"metadata\"", "]", "=", "sample", "\n", "", "if", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "!=", "prev_idx", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._split_rollout_in_segments": [[47, 60], ["segments.append", "segments.append", "current_segment.append"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append"], ["", "def", "_split_rollout_in_segments", "(", "self", ",", "rollout", ")", ":", "\n", "        ", "segments", "=", "[", "]", "\n", "current_segment", "=", "[", "rollout", "[", "0", "]", "]", "\n", "for", "sample", "in", "rollout", "[", "1", ":", "]", ":", "\n", "            ", "if", "\"metadata\"", "not", "in", "sample", ":", "\n", "                ", "sample", "[", "\"metadata\"", "]", "=", "sample", "\n", "", "if", "sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "!=", "current_segment", "[", "0", "]", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", ":", "\n", "                ", "segments", ".", "append", "(", "current_segment", ")", "\n", "current_segment", "=", "[", "sample", "]", "\n", "", "else", ":", "\n", "                ", "current_segment", ".", "append", "(", "sample", ")", "\n", "", "", "segments", ".", "append", "(", "current_segment", ")", "\n", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._segment_matches_auglen": [[61, 69], ["data_io.instructions.get_instruction_segment"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_instruction_segment"], ["", "def", "_segment_matches_auglen", "(", "self", ",", "segment", ")", ":", "\n", "        ", "if", "not", "self", ".", "aug_len", ":", "\n", "            ", "return", "True", "\n", "", "env_id", "=", "segment", "[", "0", "]", "[", "\"env_id\"", "]", "\n", "seg_idx", "=", "segment", "[", "0", "]", "[", "\"seg_idx\"", "]", "\n", "set_idx", "=", "segment", "[", "0", "]", "[", "\"set_idx\"", "]", "\n", "instr_seg", "=", "get_instruction_segment", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "all_instr", "=", "self", ".", "all_i", ")", "\n", "return", "instr_seg", "[", "\"merge_len\"", "]", "==", "self", ".", "aug_len", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.evaluate_dataset": [[70, 87], ["evaluate_nl.DataEvalNL.save_results", "evaluate_nl.DataEvalNL._has_multiple_segments", "len", "evaluate_nl.DataEvalNL._split_rollout_in_segments", "evaluate_nl.DataEvalNL._segment_matches_auglen", "evaluate_nl.DataEvalNL._segment_matches_auglen", "evaluate_nl.DataEvalNL.evaluate_rollout", "evaluate_nl.DataEvalNL.evaluate_rollout"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.save_results", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._has_multiple_segments", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._split_rollout_in_segments", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._segment_matches_auglen", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._segment_matches_auglen", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_rollout", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_rollout"], ["", "def", "evaluate_dataset", "(", "self", ",", "list_of_rollouts", ")", ":", "\n", "        ", "for", "rollout", "in", "list_of_rollouts", ":", "\n", "            ", "if", "len", "(", "rollout", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "_has_multiple_segments", "(", "rollout", ")", ":", "\n", "                ", "segments", "=", "self", ".", "_split_rollout_in_segments", "(", "rollout", ")", "\n", "for", "segment", "in", "segments", ":", "\n", "                    ", "if", "self", ".", "_segment_matches_auglen", "(", "segment", ")", ":", "\n", "                        ", "seg_results", "=", "self", ".", "evaluate_rollout", "(", "segment", ")", "\n", "if", "seg_results", "is", "not", "None", ":", "\n", "                            ", "self", ".", "results", "+=", "seg_results", "\n", "", "", "", "", "else", ":", "\n", "                ", "if", "self", ".", "_segment_matches_auglen", "(", "rollout", ")", ":", "\n", "                    ", "seg_results", "=", "self", ".", "evaluate_rollout", "(", "rollout", ")", "\n", "if", "seg_results", "is", "not", "None", ":", "\n", "                        ", "self", ".", "results", "+=", "seg_results", "\n", "", "", "", "", "self", ".", "save_results", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.rollout_success": [[88, 99], ["data_io.env.load_and_convert_path", "data_io.instructions.seg_idx_to_ordinal", "numpy.asarray", "numpy.asarray", "numpy.linalg.norm", "[].get_pos_2d", "len", "len"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.seg_idx_to_ordinal", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d"], ["", "def", "rollout_success", "(", "self", ",", "env_id", ",", "set_idx", ",", "seg_idx", ",", "rollout", ")", ":", "\n", "        ", "path", "=", "load_and_convert_path", "(", "env_id", ")", "\n", "seg_ordinal", "=", "seg_idx_to_ordinal", "(", "self", ".", "all_i", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", ",", "seg_idx", ")", "\n", "path_end_idx", "=", "self", ".", "all_i", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_ordinal", "]", "[", "\"end_idx\"", "]", "\n", "if", "path_end_idx", ">", "len", "(", "path", ")", "-", "1", ":", "\n", "            ", "path_end_idx", "=", "len", "(", "path", ")", "-", "1", "\n", "", "end_pos", "=", "np", ".", "asarray", "(", "rollout", "[", "-", "1", "]", "[", "\"state\"", "]", ".", "get_pos_2d", "(", ")", ")", "\n", "target_end_pos", "=", "np", ".", "asarray", "(", "path", "[", "path_end_idx", "]", ")", "\n", "end_dist", "=", "np", ".", "linalg", ".", "norm", "(", "end_pos", "-", "target_end_pos", ")", "\n", "success", "=", "end_dist", "<", "self", ".", "passing_distance", "\n", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.is_goal_visible": [[100, 110], ["numpy.asarray", "numpy.asarray", "geometry.vec_to_yaw", "math.fabs", "geometry.clip_angle", "math.radians"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.vec_to_yaw", "home.repos.pwc.inspect_result.clic-lab_drif.None.geometry.clip_angle"], ["", "def", "is_goal_visible", "(", "self", ",", "instr_seg", ")", ":", "\n", "        ", "end", "=", "np", ".", "asarray", "(", "instr_seg", "[", "\"end_pos\"", "]", ")", "\n", "start", "=", "np", ".", "asarray", "(", "instr_seg", "[", "\"start_pos\"", "]", ")", "\n", "vec_start_to_end", "=", "end", "-", "start", "\n", "endp_yaw", "=", "vec_to_yaw", "(", "vec_start_to_end", ")", "\n", "start_yaw", "=", "instr_seg", "[", "\"start_yaw\"", "]", "\n", "yaw_diff", "=", "endp_yaw", "-", "start_yaw", "\n", "yaw_diff_abs", "=", "math", ".", "fabs", "(", "clip_angle", "(", "yaw_diff", ")", ")", "\n", "goal_visible", "=", "2", "*", "yaw_diff_abs", "<", "math", ".", "radians", "(", "self", ".", "hfov", ")", "\n", "return", "goal_visible", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._filter_path": [[111, 153], ["zip", "traj_out.append", "numpy.asarray", "numpy.linalg.norm", "cumdists.append", "traj_out.append", "numpy.zeros", "visualization.Presenter().show_image", "len", "len", "visualization.Presenter", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.modules.key_tensor_store.KeyTensorStore.append", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.show_image"], ["", "def", "_filter_path", "(", "self", ",", "posseq", ",", "dst", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Replace original points in the path with equally spaced points\"\"\"", "\n", "cumdist", "=", "0", "\n", "cumdists", "=", "[", "cumdist", "]", "\n", "for", "prev_pos", ",", "pos", "in", "zip", "(", "posseq", "[", ":", "-", "1", "]", ",", "posseq", "[", "1", ":", "]", ")", ":", "\n", "            ", "gap", "=", "np", ".", "linalg", ".", "norm", "(", "pos", "-", "prev_pos", ")", "\n", "cumdist", "+=", "gap", "\n", "cumdists", ".", "append", "(", "cumdist", ")", "\n", "\n", "", "total_path_length", "=", "cumdists", "[", "-", "1", "]", "\n", "p", "=", "0", "\n", "ptr", "=", "0", "\n", "traj_out", "=", "[", "]", "\n", "# Add the starting point, and move to the next point", "\n", "pt", "=", "posseq", "[", "ptr", "]", "\n", "traj_out", ".", "append", "(", "pt", ")", "\n", "p", "+=", "dst", "\n", "# Reconstruct the trajectory with equidistant points of fixed precision.", "\n", "while", "p", "<", "total_path_length", "and", "ptr", "<", "len", "(", "posseq", ")", ":", "\n", "# Get how far along until the next point this is", "\n", "            ", "frac", "=", "(", "p", "-", "cumdists", "[", "ptr", "-", "1", "]", ")", "/", "(", "cumdists", "[", "ptr", "]", "-", "cumdists", "[", "ptr", "-", "1", "]", "+", "1e-10", ")", "\n", "# Grab interpolated intermediate point", "\n", "pt", "=", "posseq", "[", "ptr", "-", "1", "]", "+", "(", "posseq", "[", "ptr", "]", "-", "posseq", "[", "ptr", "-", "1", "]", ")", "*", "frac", "\n", "traj_out", ".", "append", "(", "pt", ")", "\n", "p", "+=", "dst", "\n", "# Advance past the correct starting point", "\n", "while", "ptr", "<", "len", "(", "cumdists", ")", "and", "p", ">", "cumdists", "[", "ptr", "]", ":", "\n", "                ", "ptr", "+=", "1", "\n", "\n", "", "", "out", "=", "np", ".", "asarray", "(", "traj_out", ")", "\n", "\n", "if", "False", ":", "\n", "            ", "plt", "=", "np", ".", "zeros", "(", "(", "470", ",", "470", ",", "3", ")", ")", "\n", "for", "pt", "in", "posseq", ":", "\n", "                ", "pt", "*=", "100", "\n", "plt", "[", "int", "(", "pt", "[", "0", "]", ")", ":", "int", "(", "pt", "[", "0", "]", ")", "+", "2", ",", "int", "(", "pt", "[", "1", "]", ")", ":", "int", "(", "pt", "[", "1", "]", ")", "+", "2", ",", "0", "]", "=", "1.0", "\n", "", "for", "pt", "in", "out", ":", "\n", "                ", "pt", "*=", "100", "\n", "plt", "[", "int", "(", "pt", "[", "0", "]", ")", ":", "int", "(", "pt", "[", "0", "]", ")", "+", "2", ",", "int", "(", "pt", "[", "1", "]", ")", ":", "int", "(", "pt", "[", "1", "]", ")", "+", "2", ",", "2", "]", "=", "1.0", "\n", "", "Presenter", "(", ")", ".", "show_image", "(", "plt", ",", "\"filter_paths\"", ",", "scale", "=", "4", ",", "waitkey", "=", "True", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._calculate_emd": [[154, 173], ["len", "len", "numpy.linalg.norm", "numpy.asarray", "numpy.asarray", "numpy.isclose", "numpy.isclose", "ot.emd", "numpy.asarray.sum", "numpy.asarray.sum", "float", "float"], "methods", ["None"], ["", "def", "_calculate_emd", "(", "self", ",", "exec_path", ",", "gt_path", ")", ":", "\n", "        ", "exec_len", "=", "len", "(", "exec_path", ")", "\n", "gt_len", "=", "len", "(", "gt_path", ")", "\n", "if", "gt_len", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "p2p_differences", "=", "exec_path", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "-", "gt_path", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "p2p_distances", "=", "np", ".", "linalg", ".", "norm", "(", "p2p_differences", ",", "axis", "=", "2", ")", "\n", "# rows index over ground truth path, columns index over executed path", "\n", "# Distribute probability mass of 1 evenly over executed and ground-truth trajectories", "\n", "prob_masses_exec", "=", "np", ".", "asarray", "(", "[", "1", "/", "float", "(", "exec_len", "+", "1e-10", ")", "]", "*", "exec_len", ")", "\n", "prob_masses_gt", "=", "np", ".", "asarray", "(", "[", "1", "/", "float", "(", "gt_len", "+", "1e-10", ")", "]", "*", "gt_len", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "prob_masses_exec", ".", "sum", "(", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "prob_masses_gt", ".", "sum", "(", ")", ",", "1.0", ")", "\n", "#print(\"ding\")", "\n", "ot_plan", ",", "log", "=", "ot", ".", "emd", "(", "prob_masses_gt", ",", "prob_masses_exec", ",", "p2p_distances", ",", "log", "=", "True", ",", "numItermax", "=", "10000", ")", "\n", "emd", "=", "log", "[", "\"cost\"", "]", "\n", "assert", "emd", ">", "0", ",", "\"There is no way that a drone will perfectly follow a trajectory! Something is wrong. EMD error?\"", "\n", "return", "emd", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.evaluate_rollout": [[174, 256], ["data_io.env.load_and_convert_path", "data_io.instructions.seg_idx_to_ordinal", "evaluate_nl.DataEvalNL.is_goal_visible", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.linalg.norm", "evaluate_nl.DataEvalNL._filter_path", "evaluate_nl.DataEvalNL._filter_path", "evaluate_nl.DataEvalNL._calculate_emd", "evaluate_nl.DataEvalNL._calculate_emd", "max", "print", "evaluation.results_t_landmark_side.ResultsLandmarkSide", "data_io.paths.get_results_dir", "print", "evaluate_nl.DataEvalNL.presenter.plot_paths", "os.path.join", "evaluate_nl.DataEvalNL.presenter.save_plot", "len", "r[].get_pos_2d", "len", "len", "str", "parameters.get_current_parameters", "parameters.get_current_parameters", "str", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.seg_idx_to_ordinal", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.is_goal_visible", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._filter_path", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._filter_path", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._calculate_emd", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL._calculate_emd", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_dir", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_paths", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_plot", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["", "def", "evaluate_rollout", "(", "self", ",", "rollout", ")", ":", "\n", "        ", "last_sample", "=", "rollout", "[", "-", "1", "]", "\n", "if", "\"metadata\"", "not", "in", "last_sample", ":", "\n", "            ", "last_sample", "[", "\"metadata\"", "]", "=", "last_sample", "\n", "", "env_id", "=", "last_sample", "[", "\"metadata\"", "]", "[", "\"env_id\"", "]", "\n", "# TEMPORARY FOR APPENDIX TABLE! REMOVE IT!", "\n", "# if env_id >= 6000:", "\n", "#    return None", "\n", "seg_idx", "=", "last_sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "set_idx", "=", "last_sample", "[", "\"metadata\"", "]", "[", "\"set_idx\"", "]", "\n", "\n", "path", "=", "load_and_convert_path", "(", "env_id", ")", "\n", "\n", "seg_ordinal", "=", "seg_idx_to_ordinal", "(", "self", ".", "all_i", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", ",", "seg_idx", ")", "\n", "instr_seg", "=", "self", ".", "all_i", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_ordinal", "]", "\n", "\n", "if", "self", ".", "entire_trajectory", ":", "\n", "            ", "path_end_idx", "=", "len", "(", "path", ")", "-", "1", "\n", "path_start_idx", "=", "0", "\n", "", "else", ":", "\n", "# Find the segment end index", "\n", "            ", "path_end_idx", "=", "self", ".", "all_i", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_ordinal", "]", "[", "\"end_idx\"", "]", "+", "1", "\n", "path_start_idx", "=", "self", ".", "all_i", "[", "env_id", "]", "[", "set_idx", "]", "[", "\"instructions\"", "]", "[", "seg_ordinal", "]", "[", "\"start_idx\"", "]", "\n", "if", "path_end_idx", ">", "len", "(", "path", ")", "-", "1", ":", "\n", "                ", "path_end_idx", "=", "len", "(", "path", ")", "-", "1", "\n", "", "if", "path_end_idx", "<", "path_start_idx", ":", "\n", "                ", "path_start_idx", "=", "path_end_idx", "\n", "\n", "", "", "seg_path", "=", "path", "[", "path_start_idx", ":", "path_end_idx", "]", "\n", "goal_visible", "=", "self", ".", "is_goal_visible", "(", "instr_seg", ")", "\n", "self", ".", "visible_map", "[", "f\"{env_id}_{seg_idx}\"", "]", "=", "(", "1", "if", "goal_visible", "else", "0", ")", "\n", "exec_path", "=", "np", ".", "asarray", "(", "[", "r", "[", "\"state\"", "]", ".", "get_pos_2d", "(", ")", "for", "r", "in", "rollout", "]", ")", "\n", "\n", "end_pos", "=", "np", ".", "asarray", "(", "exec_path", "[", "-", "1", "]", ")", "#[\"state\"].get_pos_2d())", "\n", "target_end_pos", "=", "np", ".", "asarray", "(", "seg_path", "[", "-", "1", "]", ")", "\n", "end_dist", "=", "np", ".", "linalg", ".", "norm", "(", "end_pos", "-", "target_end_pos", ")", "\n", "success", "=", "end_dist", "<", "self", ".", "passing_distance", "\n", "\n", "# EMD between trajectories, and EMD between start position and trajectory.", "\n", "exec_path", "=", "self", ".", "_filter_path", "(", "exec_path", ")", "\n", "gt_path", "=", "self", ".", "_filter_path", "(", "seg_path", ")", "\n", "emd", "=", "self", ".", "_calculate_emd", "(", "exec_path", ",", "gt_path", ")", "\n", "stop_emd", "=", "self", ".", "_calculate_emd", "(", "exec_path", "[", "0", ":", "1", "]", ",", "gt_path", ")", "\n", "\n", "# Success weighted by earth-mover's distance", "\n", "nemd", "=", "emd", "/", "stop_emd", "\n", "semd", "=", "max", "(", "(", "1", "if", "success", "else", "0", ")", "*", "(", "1", "-", "nemd", ")", ",", "0", ")", "\n", "\n", "if", "last_sample", "[", "\"metadata\"", "]", "[", "\"pol_action\"", "]", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "who_stopped", "=", "\"Policy Stopped\"", "\n", "", "elif", "last_sample", "[", "\"metadata\"", "]", "[", "\"ref_action\"", "]", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "who_stopped", "=", "\"Oracle Stopped\"", "\n", "", "else", ":", "\n", "            ", "who_stopped", "=", "\"Veered Off\"", "\n", "\n", "", "result", "=", "\"Success\"", "if", "success", "else", "\"Fail\"", "\n", "print", "(", "env_id", ",", "set_idx", ",", "seg_idx", ",", "result", ")", "\n", "\n", "texts", "=", "[", "who_stopped", ",", "result", ",", "\"run:\"", "+", "self", ".", "run_name", "]", "\n", "\n", "#print(seg_idx, result, semd)", "\n", "\n", "if", "self", ".", "save_images", "and", "emd", ":", "\n", "            ", "dir", "=", "get_results_dir", "(", "self", ".", "run_name", ",", "makedir", "=", "True", ")", "\n", "print", "(", "\"Results dir: \"", ",", "dir", ")", "\n", "# TODO: Refactor this to not pull path from rollout, but provide it explicitly", "\n", "self", ".", "presenter", ".", "plot_paths", "(", "rollout", ",", "\n", "segment_path", "=", "gt_path", ",", "\n", "interactive", "=", "False", ",", "\n", "texts", "=", "texts", ",", "\n", "entire_trajectory", "=", "self", ".", "entire_trajectory", ",", "\n", "world_size", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"world_size_m\"", "]", ",", "\n", "real_drone", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"real_drone\"", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "str", "(", "env_id", ")", "+", "\"_\"", "+", "str", "(", "set_idx", ")", "+", "\"_\"", "+", "str", "(", "seg_idx", ")", ")", "\n", "if", "self", ".", "custom_instr", "is", "not", "None", ":", "\n", "                ", "filename", "+=", "\"_\"", "+", "last_sample", "[", "\"metadata\"", "]", "[", "\"instruction\"", "]", "[", ":", "24", "]", "+", "\"_\"", "+", "last_sample", "[", "\"metadata\"", "]", "[", "\"instruction\"", "]", "[", "-", "16", ":", "]", "\n", "", "self", ".", "presenter", ".", "save_plot", "(", "filename", ")", "\n", "\n", "#if emd:", "\n", "#    self.save_results()", "\n", "\n", "", "return", "ResultsLandmarkSide", "(", "success", "=", "success", ",", "end_dist", "=", "end_dist", ",", "goal_visible", "=", "goal_visible", ",", "emd", "=", "emd", ",", "semd", "=", "semd", ",", "nemd", "=", "nemd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.write_summaries": [[257, 265], ["evaluate_nl.DataEvalNL.get_results", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "print", "data_io.paths.get_logging_dir"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_logging_dir"], ["", "def", "write_summaries", "(", "self", ",", "run_name", ",", "name", ",", "iteration", ")", ":", "\n", "        ", "results_dict", "=", "self", ".", "get_results", "(", ")", "\n", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "f\"{get_logging_dir()}/runs/{run_name}\"", ",", "restore", "=", "True", ")", "\n", "if", "not", "K_AVG_DIST", "in", "results_dict", ":", "\n", "            ", "print", "(", "\"nothing to write\"", ")", "\n", "return", "\n", "", "writer", ".", "add_scalar", "(", "name", "+", "\"/avg_dist_to_goal\"", ",", "results_dict", "[", "K_AVG_DIST", "]", ",", "iteration", ")", "\n", "writer", ".", "add_scalar", "(", "name", "+", "\"/success_rate\"", ",", "results_dict", "[", "K_RATE", "]", ",", "iteration", ")", "\n", "#writer.save_spied_values()", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.get_results": [[267, 269], ["evaluate_nl.DataEvalNL.results.get_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.get_dict"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "results", ".", "get_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_nl.DataEvalNL.save_results": [[270, 275], ["data_io.paths.get_results_path", "open", "json.dump", "evaluate_nl.DataEvalNL.get_results"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_path", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results"], ["", "def", "save_results", "(", "self", ")", ":", "\n", "# Write results dict", "\n", "        ", "path", "=", "get_results_path", "(", "self", ".", "run_name", ",", "makedir", "=", "True", ")", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "get_results", "(", ")", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.__init__": [[20, 30], ["evaluation.evaluate_base.EvaluateBase.__init__", "data_io.instructions.get_all_instructions", "evaluation.results_t_landmark_side.ResultsLandmarkSide", "visualization.Presenter", "parameters.get_current_parameters", "parameters.get_current_parameters"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.instructions.get_all_instructions", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters", "home.repos.pwc.inspect_result.clic-lab_drif.parameters.parameter_server.get_current_parameters"], ["    ", "def", "__init__", "(", "self", ",", "run_name", "=", "\"\"", ",", "save_images", "=", "True", ",", "world_size", "=", "None", ")", ":", "\n", "        ", "super", "(", "EvaluateBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_i", ",", "self", ".", "test_i", ",", "self", ".", "dev_i", ",", "corpus", "=", "get_all_instructions", "(", ")", "\n", "self", ".", "landmark_region_distance", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Units\"", "]", "[", "\"landmark_region_distance\"", "]", "\n", "self", ".", "results", "=", "ResultsLandmarkSide", "(", ")", "\n", "self", ".", "presenter", "=", "Presenter", "(", ")", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "save_images", "=", "save_images", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "real_drone", "=", "P", ".", "get_current_parameters", "(", ")", "[", "\"Setup\"", "]", "[", "\"real_drone\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_dataset": [[31, 34], ["evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_rollout"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_rollout"], ["", "def", "evaluate_dataset", "(", "self", ",", "list_of_rollouts", ")", ":", "\n", "        ", "for", "rollout", "in", "list_of_rollouts", ":", "\n", "            ", "self", ".", "results", "+=", "self", ".", "evaluate_rollout", "(", "rollout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos": [[35, 43], ["data_io.env.load_template", "data_io.env.load_and_convert_env_config", "config[].index", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_env_config"], ["", "", "def", "get_landmark_pos", "(", "self", ",", "env_id", ")", ":", "\n", "        ", "template", "=", "load_template", "(", "env_id", ")", "\n", "config", "=", "load_and_convert_env_config", "(", "env_id", ")", "\n", "landmark_idx", "=", "config", "[", "\"landmarkName\"", "]", ".", "index", "(", "template", "[", "\"landmark1\"", "]", ")", "\n", "pos_x", "=", "config", "[", "\"x_pos_as\"", "]", "[", "landmark_idx", "]", "\n", "pos_y", "=", "config", "[", "\"y_pos_as\"", "]", "[", "landmark_idx", "]", "\n", "landmark_pos", "=", "np", ".", "asarray", "(", "[", "pos_x", ",", "pos_y", "]", ")", "\n", "return", "landmark_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.correct_side": [[44, 83], ["data_io.env.load_template", "evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos", "[].get_pos_2d", "[].get_pos_2d", "len", "numpy.asarray", "numpy.dot", "numpy.dot", "math.atan2", "print", "numpy.cross", "numpy.linalg.norm", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_template", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d"], ["", "def", "correct_side", "(", "self", ",", "rollout", ",", "env_id", ")", ":", "\n", "        ", "template", "=", "load_template", "(", "env_id", ")", "\n", "landmark_pos", "=", "self", ".", "get_landmark_pos", "(", "env_id", ")", "\n", "\n", "last_pos", "=", "rollout", "[", "-", "1", "]", "[", "\"state\"", "]", ".", "get_pos_2d", "(", ")", "\n", "first_pos", "=", "rollout", "[", "0", "]", "[", "\"state\"", "]", ".", "get_pos_2d", "(", ")", "\n", "dir_landmark", "=", "landmark_pos", "-", "first_pos", "\n", "\n", "if", "len", "(", "N_SIDES", ")", "==", "4", ":", "\n", "            ", "dir_lm_to_last", "=", "last_pos", "-", "landmark_pos", "\n", "dir_landmark_norm", "=", "dir_landmark", "/", "(", "np", ".", "linalg", ".", "norm", "(", "dir_landmark", ")", "+", "1e-18", ")", "\n", "dir_ortho_norm", "=", "np", ".", "asarray", "(", "[", "dir_landmark_norm", "[", "1", "]", ",", "-", "dir_landmark_norm", "[", "0", "]", "]", ")", "\n", "\n", "proj", "=", "np", ".", "dot", "(", "dir_lm_to_last", ",", "dir_landmark_norm", ")", "\n", "opp_proj", "=", "np", ".", "dot", "(", "dir_lm_to_last", ",", "dir_ortho_norm", ")", "\n", "\n", "angle", "=", "math", ".", "atan2", "(", "proj", ",", "opp_proj", ")", "\n", "\n", "DEG45", "=", "0.785398", "\n", "if", "template", "[", "\"side\"", "]", "==", "\"left\"", ":", "\n", "                ", "return", "-", "DEG45", "<", "angle", "<", "DEG45", "\n", "", "elif", "template", "[", "\"side\"", "]", "==", "\"back\"", ":", "\n", "                ", "return", "DEG45", "<", "angle", "<", "3", "*", "DEG45", "\n", "", "elif", "template", "[", "\"side\"", "]", "==", "\"right\"", ":", "\n", "                ", "return", "3", "*", "DEG45", "<", "angle", "<", "math", ".", "pi", "or", "-", "math", ".", "pi", "<", "angle", "<", "-", "3", "*", "DEG45", "\n", "", "elif", "template", "[", "\"side\"", "]", "==", "\"front\"", ":", "\n", "                ", "return", "-", "3", "*", "DEG45", "<", "angle", "<", "-", "DEG45", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Unknown side: \"", ",", "template", "[", "\"side\"", "]", ")", "\n", "\n", "", "print", "(", "\"Angle: \"", ",", "angle", ")", "\n", "", "else", ":", "# len(N_SIDES) = 2", "\n", "            ", "dir_end", "=", "last_pos", "-", "first_pos", "\n", "z", "=", "np", ".", "cross", "(", "dir_landmark", ",", "dir_end", ")", "\n", "\n", "if", "template", "[", "\"side\"", "]", "==", "\"left\"", ":", "\n", "                ", "return", "z", ">", "0", "\n", "", "else", ":", "\n", "                ", "return", "z", "<", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.evaluate_rollout": [[84, 126], ["data_io.env.load_and_convert_path", "numpy.asarray", "evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos", "numpy.asarray", "numpy.linalg.norm", "numpy.linalg.norm", "evaluate_t_landmark_side.DataEvalLandmarkSide.correct_side", "evaluation.results_t_landmark_side.ResultsLandmarkSide", "last_sample[].get_pos_2d", "data_io.paths.get_results_dir", "evaluate_t_landmark_side.DataEvalLandmarkSide.presenter.plot_paths", "os.path.join", "evaluate_t_landmark_side.DataEvalLandmarkSide.presenter.save_plot", "evaluate_t_landmark_side.DataEvalLandmarkSide.save_results", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.env.load_and_convert_path", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_landmark_pos", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.correct_side", "home.repos.pwc.inspect_result.clic-lab_drif.pomdp.state.DroneState.get_pos_2d", "home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_dir", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.plot_paths", "home.repos.pwc.inspect_result.clic-lab_drif.None.visualization.Presenter.save_plot", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.save_results"], ["", "", "", "def", "evaluate_rollout", "(", "self", ",", "rollout", ")", ":", "\n", "        ", "last_sample", "=", "rollout", "[", "-", "1", "]", "\n", "env_id", "=", "last_sample", "[", "\"metadata\"", "]", "[", "\"env_id\"", "]", "\n", "seg_idx", "=", "last_sample", "[", "\"metadata\"", "]", "[", "\"seg_idx\"", "]", "\n", "set_idx", "=", "last_sample", "[", "\"metadata\"", "]", "[", "\"set_idx\"", "]", "\n", "# TODO: Allow multiple templates / instructions per env", "\n", "path", "=", "load_and_convert_path", "(", "env_id", ")", "\n", "\n", "end_pos", "=", "np", ".", "asarray", "(", "last_sample", "[", "\"state\"", "]", ".", "get_pos_2d", "(", ")", ")", "\n", "landmark_pos", "=", "self", ".", "get_landmark_pos", "(", "env_id", ")", "\n", "\n", "target_end_pos", "=", "np", ".", "asarray", "(", "path", "[", "-", "1", "]", ")", "\n", "end_goal_dist", "=", "np", ".", "linalg", ".", "norm", "(", "end_pos", "-", "target_end_pos", ")", "\n", "end_lm_dist", "=", "np", ".", "linalg", ".", "norm", "(", "end_pos", "-", "landmark_pos", ")", "\n", "correct_landmark_region", "=", "end_lm_dist", "<", "self", ".", "landmark_region_distance", "\n", "correct_quadrant", "=", "self", ".", "correct_side", "(", "rollout", ",", "env_id", ")", "\n", "\n", "if", "last_sample", "[", "\"metadata\"", "]", "[", "\"pol_action\"", "]", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "who_stopped", "=", "\"Policy Stopped\"", "\n", "", "elif", "last_sample", "[", "\"metadata\"", "]", "[", "\"ref_action\"", "]", "[", "3", "]", ">", "0.5", ":", "\n", "            ", "who_stopped", "=", "\"Oracle Stopped\"", "\n", "", "else", ":", "\n", "            ", "who_stopped", "=", "\"Veered Off\"", "\n", "\n", "", "success", "=", "correct_landmark_region", "and", "correct_quadrant", "\n", "\n", "side_txt", "=", "\"Correct landmark\"", "if", "correct_landmark_region", "else", "\"Wrong landmark\"", "\n", "result", "=", "\"Success\"", "if", "success", "else", "\"Fail\"", "\n", "texts", "=", "[", "who_stopped", ",", "result", ",", "side_txt", ",", "\"run:\"", "+", "self", ".", "run_name", "]", "\n", "\n", "if", "self", ".", "save_images", ":", "\n", "            ", "dir", "=", "get_results_dir", "(", "self", ".", "run_name", ",", "makedir", "=", "True", ")", "\n", "self", ".", "presenter", ".", "plot_paths", "(", "rollout", ",", "\n", "interactive", "=", "False", ",", "\n", "texts", "=", "texts", ",", "\n", "real_drone", "=", "self", ".", "real_drone", ",", "\n", "world_size", "=", "self", ".", "world_size", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "str", "(", "env_id", ")", "+", "\"_\"", "+", "str", "(", "set_idx", ")", "+", "\"_\"", "+", "str", "(", "seg_idx", ")", ")", "\n", "self", ".", "presenter", ".", "save_plot", "(", "filename", ")", "\n", "self", ".", "save_results", "(", ")", "\n", "\n", "", "return", "ResultsLandmarkSide", "(", "success", ",", "end_goal_dist", ",", "correct_landmark_region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.write_summaries": [[127, 136], ["evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "utils.logging_summary_writer.LoggingSummaryWriter", "utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "utils.logging_summary_writer.LoggingSummaryWriter.save_spied_values", "print"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.add_scalar", "home.repos.pwc.inspect_result.clic-lab_drif.utils.logging_summary_writer.LoggingSummaryWriter.save_spied_values"], ["", "def", "write_summaries", "(", "self", ",", "run_name", ",", "name", ",", "iteration", ")", ":", "\n", "        ", "results_dict", "=", "self", ".", "get_results", "(", ")", "\n", "writer", "=", "LoggingSummaryWriter", "(", "log_dir", "=", "\"runs/\"", "+", "run_name", ",", "restore", "=", "True", ")", "\n", "if", "not", "K_AVG_DIST", "in", "results_dict", ":", "\n", "            ", "print", "(", "\"nothing to write\"", ")", "\n", "return", "\n", "", "writer", ".", "add_scalar", "(", "name", "+", "\"/avg_dist_to_goal\"", ",", "results_dict", "[", "K_AVG_DIST", "]", ",", "iteration", ")", "\n", "writer", ".", "add_scalar", "(", "name", "+", "\"/success_rate\"", ",", "results_dict", "[", "K_RATE", "]", ",", "iteration", ")", "\n", "writer", ".", "save_spied_values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results": [[137, 139], ["evaluate_t_landmark_side.DataEvalLandmarkSide.results.get_dict"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.get_dict"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "results", ".", "get_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.save_results": [[140, 145], ["data_io.paths.get_results_path", "open", "json.dump", "evaluate_t_landmark_side.DataEvalLandmarkSide.get_results"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.data_io.paths.get_results_path", "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_t_landmark_side.DataEvalLandmarkSide.get_results"], ["", "def", "save_results", "(", "self", ")", ":", "\n", "# Write results dict", "\n", "        ", "path", "=", "get_results_path", "(", "self", ".", "run_name", ",", "makedir", "=", "True", ")", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "get_results", "(", ")", ",", "fp", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.evaluate_base.EvaluateBase.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_base.EvaluationResults.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_base.EvaluationResults.__add__": [[7, 9], ["None"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "past_results", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_base.EvaluationResults.get_dict": [[10, 12], ["None"], "methods", ["None"], ["", "def", "get_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_base.EvaluationResults.set_dict": [[13, 15], ["None"], "methods", ["None"], ["", "def", "set_dict", "(", "self", ",", "dict", ")", ":", "\n", "        ", "self", ".", "state", "=", "dict", "", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_nl.ResultsNL.__init__": [[20, 31], ["evaluation.results_base.EvaluationResults.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "success", "=", "None", ",", "end_dist", "=", "0", ")", ":", "\n", "        ", "super", "(", "EvaluationResults", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "state", "=", "{", "\n", "K_N_SUCCESS", ":", "1", "if", "success", "else", "0", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_N_FAIL", ":", "0", "if", "success", "else", "1", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_N_SEG", ":", "1", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_RATE", ":", "1.0", "if", "success", "else", "0.0", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_DIST", ":", "end_dist", ",", "\n", "K_LAST_DIST", ":", "end_dist", "\n", "}", "\n", "self", ".", "metastate_distances", "=", "[", "end_dist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_nl.ResultsNL.__add__": [[32, 44], ["None"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "past_results", ")", ":", "\n", "        ", "self", ".", "state", "[", "K_N_SUCCESS", "]", "+=", "past_results", ".", "state", "[", "K_N_SUCCESS", "]", "\n", "self", ".", "state", "[", "K_N_FAIL", "]", "+=", "past_results", ".", "state", "[", "K_N_FAIL", "]", "\n", "self", ".", "state", "[", "K_N_SEG", "]", "+=", "past_results", ".", "state", "[", "K_N_SEG", "]", "\n", "self", ".", "state", "[", "K_RATE", "]", "=", "self", ".", "state", "[", "K_N_SUCCESS", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-9", ")", "\n", "\n", "self", ".", "state", "[", "K_DIST", "]", "+=", "past_results", ".", "state", "[", "K_DIST", "]", "\n", "self", ".", "state", "[", "K_AVG_DIST", "]", "=", "self", ".", "state", "[", "K_DIST", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-9", ")", "\n", "\n", "self", ".", "metastate_distances", "+=", "past_results", ".", "metastate_distances", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_nl.ResultsNL.get_dict": [[45, 49], ["numpy.median", "numpy.asarray"], "methods", ["None"], ["", "def", "get_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "[", "K_MEDIAN_DIST", "]", "=", "np", ".", "median", "(", "np", ".", "asarray", "(", "self", ".", "metastate_distances", "[", "1", ":", "]", ")", ")", "\n", "self", ".", "state", "[", "K_ALL_DIST", "]", "=", "self", ".", "metastate_distances", "\n", "return", "self", ".", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__": [[52, 77], ["evaluation.results_base.EvaluationResults.__init__"], "methods", ["home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__init__"], ["    ", "def", "__init__", "(", "self", ",", "success", "=", "None", ",", "end_dist", "=", "0", ",", "goal_visible", "=", "False", ",", "correct_landmark", "=", "False", ",", "emd", "=", "0", ",", "semd", "=", "0", ",", "nemd", "=", "0", ")", ":", "\n", "        ", "super", "(", "EvaluationResults", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "state", "=", "{", "\n", "K_N_SUCCESS", ":", "1", "if", "success", "else", "0", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_N_FAIL", ":", "0", "if", "success", "else", "1", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_N_SEG", ":", "1", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_RATE", ":", "1.0", "if", "success", "else", "0.0", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_N_LM", ":", "1", "if", "correct_landmark", "else", "0", ",", "\n", "K_N_VIS", ":", "1", "if", "goal_visible", "else", "0", ",", "\n", "K_N_INVIS", ":", "0", "if", "goal_visible", "else", "1", "if", "success", "is", "not", "None", "else", "0", ",", "\n", "K_N_VIS_SUCCESS", ":", "1", "if", "(", "goal_visible", "and", "success", ")", "else", "0", ",", "\n", "K_N_INVIS_SUCCESS", ":", "1", "if", "(", "(", "not", "goal_visible", ")", "and", "success", ")", "else", "0", ",", "\n", "K_EMD", ":", "emd", ",", "\n", "K_VIS_EMD", ":", "emd", "if", "goal_visible", "else", "0", ",", "\n", "K_INVIS_EMD", ":", "emd", "if", "(", "not", "goal_visible", ")", "else", "0", ",", "\n", "K_DIST", ":", "end_dist", ",", "\n", "K_LAST_DIST", ":", "end_dist", ",", "\n", "K_SEMD", ":", "semd", ",", "\n", "K_VIS_SEMD", ":", "semd", "if", "goal_visible", "else", "0", ",", "\n", "K_INVIS_SEMD", ":", "semd", "if", "(", "not", "goal_visible", ")", "else", "0", ",", "\n", "K_NEMD", ":", "nemd", ",", "\n", "K_VIS_NEMD", ":", "nemd", "if", "goal_visible", "else", "0", ",", "\n", "K_INVIS_NEMD", ":", "nemd", "if", "(", "not", "goal_visible", ")", "else", "0", ",", "\n", "}", "\n", "self", ".", "metastate_distances", "=", "[", "end_dist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.__add__": [[78, 127], ["print"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "past_results", ")", ":", "\n", "# Ignore results if EMD is None - it means ground truth path length is zero and there is no example", "\n", "        ", "if", "past_results", ".", "state", "[", "K_EMD", "]", "is", "None", ":", "\n", "            ", "print", "(", "\"Warning! ignoring results due to None emd\"", ")", "\n", "return", "self", "\n", "\n", "", "self", ".", "state", "[", "K_N_SUCCESS", "]", "+=", "past_results", ".", "state", "[", "K_N_SUCCESS", "]", "\n", "self", ".", "state", "[", "K_N_FAIL", "]", "+=", "past_results", ".", "state", "[", "K_N_FAIL", "]", "\n", "self", ".", "state", "[", "K_N_SEG", "]", "+=", "past_results", ".", "state", "[", "K_N_SEG", "]", "\n", "self", ".", "state", "[", "K_RATE", "]", "=", "self", ".", "state", "[", "K_N_SUCCESS", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-28", ")", "\n", "\n", "self", ".", "state", "[", "K_DIST", "]", "+=", "past_results", ".", "state", "[", "K_DIST", "]", "\n", "self", ".", "state", "[", "K_AVG_DIST", "]", "=", "self", ".", "state", "[", "K_DIST", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_N_LM", "]", "=", "self", ".", "state", "[", "K_N_LM", "]", "+", "past_results", ".", "state", "[", "K_N_LM", "]", "\n", "self", ".", "state", "[", "K_RATE_LM", "]", "=", "self", ".", "state", "[", "K_N_LM", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-28", ")", "\n", "\n", "self", ".", "state", "[", "K_N_VIS", "]", "=", "self", ".", "state", "[", "K_N_VIS", "]", "+", "past_results", ".", "state", "[", "K_N_VIS", "]", "\n", "self", ".", "state", "[", "K_N_INVIS", "]", "=", "self", ".", "state", "[", "K_N_INVIS", "]", "+", "past_results", ".", "state", "[", "K_N_INVIS", "]", "\n", "self", ".", "state", "[", "K_N_VIS_SUCCESS", "]", "=", "self", ".", "state", "[", "K_N_VIS_SUCCESS", "]", "+", "past_results", ".", "state", "[", "K_N_VIS_SUCCESS", "]", "\n", "self", ".", "state", "[", "K_N_INVIS_SUCCESS", "]", "=", "self", ".", "state", "[", "K_N_INVIS_SUCCESS", "]", "+", "past_results", ".", "state", "[", "K_N_INVIS_SUCCESS", "]", "\n", "\n", "self", ".", "state", "[", "K_RATE_VIS_SUCCESS", "]", "=", "self", ".", "state", "[", "K_N_VIS_SUCCESS", "]", "/", "(", "self", ".", "state", "[", "K_N_VIS", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_RATE_INVIS_SUCCESS", "]", "=", "self", ".", "state", "[", "K_N_INVIS_SUCCESS", "]", "/", "(", "self", ".", "state", "[", "K_N_INVIS", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_RATE_VIS", "]", "=", "self", ".", "state", "[", "K_N_VIS", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-28", ")", "\n", "\n", "self", ".", "state", "[", "K_EMD", "]", "=", "self", ".", "state", "[", "K_EMD", "]", "+", "past_results", ".", "state", "[", "K_EMD", "]", "\n", "self", ".", "state", "[", "K_VIS_EMD", "]", "=", "self", ".", "state", "[", "K_VIS_EMD", "]", "+", "past_results", ".", "state", "[", "K_VIS_EMD", "]", "\n", "self", ".", "state", "[", "K_INVIS_EMD", "]", "=", "self", ".", "state", "[", "K_INVIS_EMD", "]", "+", "past_results", ".", "state", "[", "K_INVIS_EMD", "]", "\n", "self", ".", "state", "[", "K_AVG_EMD", "]", "=", "self", ".", "state", "[", "K_EMD", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_VIS_AVG_EMD", "]", "=", "self", ".", "state", "[", "K_VIS_EMD", "]", "/", "(", "self", ".", "state", "[", "K_N_VIS", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_INVIS_AVG_EMD", "]", "=", "self", ".", "state", "[", "K_INVIS_EMD", "]", "/", "(", "self", ".", "state", "[", "K_N_INVIS", "]", "+", "1e-28", ")", "\n", "\n", "self", ".", "state", "[", "K_SEMD", "]", "=", "self", ".", "state", "[", "K_SEMD", "]", "+", "past_results", ".", "state", "[", "K_SEMD", "]", "\n", "self", ".", "state", "[", "K_VIS_SEMD", "]", "=", "self", ".", "state", "[", "K_VIS_SEMD", "]", "+", "past_results", ".", "state", "[", "K_VIS_SEMD", "]", "\n", "self", ".", "state", "[", "K_INVIS_SEMD", "]", "=", "self", ".", "state", "[", "K_INVIS_SEMD", "]", "+", "past_results", ".", "state", "[", "K_INVIS_SEMD", "]", "\n", "self", ".", "state", "[", "K_AVG_SEMD", "]", "=", "self", ".", "state", "[", "K_SEMD", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_VIS_AVG_SEMD", "]", "=", "self", ".", "state", "[", "K_VIS_SEMD", "]", "/", "(", "self", ".", "state", "[", "K_N_VIS", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_INVIS_AVG_SEMD", "]", "=", "self", ".", "state", "[", "K_INVIS_SEMD", "]", "/", "(", "self", ".", "state", "[", "K_N_INVIS", "]", "+", "1e-28", ")", "\n", "\n", "self", ".", "state", "[", "K_NEMD", "]", "=", "self", ".", "state", "[", "K_NEMD", "]", "+", "past_results", ".", "state", "[", "K_NEMD", "]", "\n", "self", ".", "state", "[", "K_VIS_NEMD", "]", "=", "self", ".", "state", "[", "K_VIS_NEMD", "]", "+", "past_results", ".", "state", "[", "K_VIS_NEMD", "]", "\n", "self", ".", "state", "[", "K_INVIS_NEMD", "]", "=", "self", ".", "state", "[", "K_INVIS_NEMD", "]", "+", "past_results", ".", "state", "[", "K_INVIS_NEMD", "]", "\n", "self", ".", "state", "[", "K_AVG_NEMD", "]", "=", "self", ".", "state", "[", "K_NEMD", "]", "/", "(", "self", ".", "state", "[", "K_N_SEG", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_VIS_AVG_NEMD", "]", "=", "self", ".", "state", "[", "K_VIS_NEMD", "]", "/", "(", "self", ".", "state", "[", "K_N_VIS", "]", "+", "1e-28", ")", "\n", "self", ".", "state", "[", "K_INVIS_AVG_NEMD", "]", "=", "self", ".", "state", "[", "K_INVIS_NEMD", "]", "/", "(", "self", ".", "state", "[", "K_N_INVIS", "]", "+", "1e-28", ")", "\n", "\n", "self", ".", "metastate_distances", "+=", "past_results", ".", "metastate_distances", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.clic-lab_drif.evaluation.results_t_landmark_side.ResultsLandmarkSide.get_dict": [[128, 132], ["numpy.median", "len", "numpy.asarray"], "methods", ["None"], ["", "def", "get_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "[", "K_MEDIAN_DIST", "]", "=", "np", ".", "median", "(", "np", ".", "asarray", "(", "self", ".", "metastate_distances", "[", "1", ":", "]", ")", ")", "if", "len", "(", "self", ".", "metastate_distances", ")", ">", "1", "else", "0.0", "\n", "#self.state[K_ALL_DIST] = self.metastate_distances", "\n", "return", "self", ".", "state", "\n", "", "", ""]]}