{"home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.__init__": [[137, 193], ["isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Constructs BertConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `BertModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `BertModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.from_dict": [[195, 202], ["modeling.BertConfig", "json_object.items"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "BertConfig", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.from_json_file": [[203, 209], ["cls.from_dict", "io.open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.__repr__": [[210, 212], ["str", "modeling.BertConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.to_dict": [[213, 217], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.to_json_string": [[218, 221], ["json.dumps", "modeling.BertConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.to_json_file": [[222, 226], ["io.open", "writer.write", "modeling.BertConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "\"\"\" Save this instance to a json file.\"\"\"", "\n", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertEmbeddings.__init__": [[249, 259], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertEmbeddings.forward": [[260, 275], ["input_ids.size", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling.BertEmbeddings.word_embeddings", "modeling.BertEmbeddings.position_embeddings", "modeling.BertEmbeddings.token_type_embeddings", "modeling.BertEmbeddings.LayerNorm", "modeling.BertEmbeddings.dropout", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfAttention.__init__": [[278, 293], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfAttention.transpose_for_scores": [[294, 298], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfAttention.forward": [[299, 326], ["modeling.BertSelfAttention.query", "modeling.BertSelfAttention.key", "modeling.BertSelfAttention.value", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "torch.matmul", "modeling.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfOutput.__init__": [[329, 334], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertSelfOutput.forward": [[335, 340], ["modeling.BertSelfOutput.dense", "modeling.BertSelfOutput.dropout", "modeling.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertAttention.__init__": [[343, 347], ["torch.nn.Module.__init__", "modeling.BertSelfAttention", "modeling.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertAttention.forward": [[348, 352], ["modeling.BertAttention.self", "modeling.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertIntermediate.__init__": [[355, 362], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertIntermediate.forward": [[363, 367], ["modeling.BertIntermediate.dense", "modeling.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertOutput.__init__": [[370, 375], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertOutput.forward": [[376, 381], ["modeling.BertOutput.dense", "modeling.BertOutput.dropout", "modeling.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertLayer.__init__": [[384, 389], ["torch.nn.Module.__init__", "modeling.BertAttention", "modeling.BertIntermediate", "modeling.BertOutput"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertLayer.forward": [[390, 395], ["modeling.BertLayer.attention", "modeling.BertLayer.intermediate", "modeling.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertEncoder.__init__": [[398, 402], ["torch.nn.Module.__init__", "modeling.BertLayer", "torch.nn.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "BertLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertEncoder.forward": [[403, 412], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPooler.__init__": [[415, 419], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPooler.forward": [[420, 427], ["modeling.BertPooler.dense", "modeling.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPredictionHeadTransform.__init__": [[430, 438], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPredictionHeadTransform.forward": [[439, 444], ["modeling.BertPredictionHeadTransform.dense", "modeling.BertPredictionHeadTransform.transform_act_fn", "modeling.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertLMPredictionHead.__init__": [[447, 458], ["torch.nn.Module.__init__", "modeling.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Parameter", "bert_model_embedding_weights.size", "bert_model_embedding_weights.size", "torch.zeros", "bert_model_embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "bert_model_embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "bert_model_embedding_weights", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertLMPredictionHead.forward": [[459, 463], ["modeling.BertLMPredictionHead.transform", "modeling.BertLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertOnlyMLMHead.__init__": [[466, 469], ["torch.nn.Module.__init__", "modeling.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ",", "bert_model_embedding_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertOnlyMLMHead.forward": [[470, 473], ["modeling.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertOnlyNSPHead.__init__": [[476, 479], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertOnlyNSPHead.forward": [[480, 483], ["modeling.BertOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPreTrainingHeads.__init__": [[486, 490], ["torch.nn.Module.__init__", "modeling.BertLMPredictionHead", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ",", "bert_model_embedding_weights", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPreTrainingHeads.forward": [[491, 495], ["modeling.BertPreTrainingHeads.predictions", "modeling.BertPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPreTrainedModel.__init__": [[501, 511], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BertPreTrainedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "BertConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `BertConfig`. \"", "\n", "\"To create a model from a Google pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPreTrainedModel.init_bert_weights": [[512, 524], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "init_bert_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertPreTrainedModel.from_pretrained": [[525, 656], ["kwargs.get", "kwargs.pop", "kwargs.get", "kwargs.pop", "kwargs.get", "kwargs.pop", "os.path.join", "modeling.BertConfig.from_json_file", "logger.info", "cls", "torch.load.keys", "zip", "getattr", "torch.load.copy", "modeling.BertPreTrainedModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertConfig.from_json_file"], ["", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a BertPreTrainedModel from a pre-trained model file or a pytorch state dict.\n        Download and cache the pre-trained model file if needed.\n\n        Params:\n            pretrained_model_name_or_path: either:\n                - a str with the name of a pre-trained model to load selected in the list of:\n                    . `bert-base-uncased`\n                    . `bert-large-uncased`\n                    . `bert-base-cased`\n                    . `bert-large-cased`\n                    . `bert-base-multilingual-uncased`\n                    . `bert-base-multilingual-cased`\n                    . `bert-base-chinese`\n                - a path or url to a pretrained model archive containing:\n                    . `bert_config.json` a configuration file for the model\n                    . `pytorch_model.bin` a PyTorch dump of a BertForPreTraining instance\n                - a path or url to a pretrained model archive containing:\n                    . `bert_config.json` a configuration file for the model\n                    . `model.chkpt` a TensorFlow checkpoint\n            from_tf: should we load the weights from a locally saved TensorFlow checkpoint\n            cache_dir: an optional path to a folder in which the pre-trained models will be cached.\n            state_dict: an optional state dictionnary (collections.OrderedDict object) to use instead of Google pre-trained models\n            *inputs, **kwargs: additional input for the specific Bert class\n                (ex: num_labels for BertForSequenceClassification)\n        \"\"\"", "\n", "state_dict", "=", "kwargs", ".", "get", "(", "'state_dict'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'state_dict'", ",", "None", ")", "\n", "cache_dir", "=", "kwargs", ".", "get", "(", "'cache_dir'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "from_tf", "=", "kwargs", ".", "get", "(", "'from_tf'", ",", "False", ")", "\n", "kwargs", ".", "pop", "(", "'from_tf'", ",", "None", ")", "\n", "\n", "if", "pretrained_model_name_or_path", "in", "PRETRAINED_MODEL_ARCHIVE_MAP", ":", "\n", "            ", "archive_file", "=", "PRETRAINED_MODEL_ARCHIVE_MAP", "[", "pretrained_model_name_or_path", "]", "\n", "", "else", ":", "\n", "            ", "archive_file", "=", "pretrained_model_name_or_path", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading archive file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading archive file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "tempdir", "=", "None", "\n", "if", "os", ".", "path", ".", "isdir", "(", "resolved_archive_file", ")", "or", "from_tf", ":", "\n", "            ", "serialization_dir", "=", "resolved_archive_file", "\n", "", "else", ":", "\n", "# Extract archive to temp dir", "\n", "            ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "logger", ".", "info", "(", "\"extracting archive file {} to temp dir {}\"", ".", "format", "(", "\n", "resolved_archive_file", ",", "tempdir", ")", ")", "\n", "with", "tarfile", ".", "open", "(", "resolved_archive_file", ",", "'r:gz'", ")", "as", "archive", ":", "\n", "                ", "archive", ".", "extractall", "(", "tempdir", ")", "\n", "", "serialization_dir", "=", "tempdir", "\n", "# Load config", "\n", "", "config_file", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "CONFIG_NAME", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_file", ")", ":", "\n", "# Backward compatibility with old naming format", "\n", "            ", "config_file", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "BERT_CONFIG_NAME", ")", "\n", "", "config", "=", "BertConfig", ".", "from_json_file", "(", "config_file", ")", "\n", "logger", ".", "info", "(", "\"Model config {}\"", ".", "format", "(", "config", ")", ")", "\n", "# Instantiate model.", "\n", "model", "=", "cls", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "state_dict", "is", "None", "and", "not", "from_tf", ":", "\n", "            ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "WEIGHTS_NAME", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights_path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "if", "tempdir", ":", "\n", "# Clean up temp dir", "\n", "            ", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "", "if", "from_tf", ":", "\n", "# Directly load from a TensorFlow checkpoint", "\n", "            ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "TF_WEIGHTS_NAME", ")", "\n", "return", "load_tf_weights_in_bert", "(", "model", ",", "weights_path", ")", "\n", "# Load from a PyTorch state_dict", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "", "", "", "start_prefix", "=", "''", "\n", "if", "not", "hasattr", "(", "model", ",", "'bert'", ")", "and", "any", "(", "s", ".", "startswith", "(", "'bert.'", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "start_prefix", "=", "'bert.'", "\n", "", "load", "(", "model", ",", "prefix", "=", "start_prefix", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertModel.__init__": [[702, 708], ["modeling.BertPreTrainedModel.__init__", "modeling.BertEmbeddings", "modeling.BertEncoder", "modeling.BertPooler", "modeling.BertModel.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertModel.forward": [[709, 739], ["torch.ones_like.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "modeling.BertModel.embeddings", "modeling.BertModel.encoder", "modeling.BertModel.pooler", "torch.ones_like", "torch.zeros_like", "torch.ones_like.unsqueeze", "next", "modeling.BertModel.parameters"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "token_type_ids", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "return", "encoded_layers", ",", "pooled_output", ",", "extended_attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForPreTraining.__init__": [[791, 796], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "modeling.BertPreTrainingHeads", "modeling.BertForPreTraining.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertPreTrainingHeads", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ".", "weight", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForPreTraining.forward": [[797, 810], ["modeling.BertForPreTraining.bert", "modeling.BertForPreTraining.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "prediction_scores.view", "masked_lm_labels.view", "seq_relationship_score.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ",", "next_sentence_label", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "pooled_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "prediction_scores", ",", "seq_relationship_score", "=", "self", ".", "cls", "(", "sequence_output", ",", "pooled_output", ")", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", "and", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "return", "total_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForMaskedLM.__init__": [[854, 859], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "modeling.BertOnlyMLMHead", "modeling.BertForMaskedLM.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ".", "weight", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForMaskedLM.forward": [[860, 871], ["modeling.BertForMaskedLM.bert", "modeling.BertForMaskedLM.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling.BertForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "prediction_scores", "=", "self", ".", "cls", "(", "sequence_output", ")", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "masked_lm_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForNextSentencePrediction.__init__": [[916, 921], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "modeling.BertOnlyNSPHead", "modeling.BertForNextSentencePrediction.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyNSPHead", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForNextSentencePrediction.forward": [[922, 933], ["modeling.BertForNextSentencePrediction.bert", "modeling.BertForNextSentencePrediction.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling.BertForNextSentencePrediction.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "next_sentence_label", "=", "None", ")", ":", "\n", "        ", "_", ",", "pooled_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "seq_relationship_score", "=", "self", ".", "cls", "(", "pooled_output", ")", "\n", "\n", "if", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "next_sentence_loss", "\n", "", "else", ":", "\n", "            ", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForSequenceClassification.__init__": [[980, 987], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling.BertForSequenceClassification.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_labels", ")", ":", "\n", "        ", "super", "(", "BertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_labels", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForSequenceClassification.forward": [[988, 999], ["modeling.BertForSequenceClassification.bert", "modeling.BertForSequenceClassification.dropout", "modeling.BertForSequenceClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling.BertForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "_", ",", "pooled_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForMultipleChoice.__init__": [[1045, 1052], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling.BertForMultipleChoice.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_choices", ")", ":", "\n", "        ", "super", "(", "BertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_choices", "=", "num_choices", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForMultipleChoice.forward": [[1053, 1068], ["input_ids.view", "modeling.BertForMultipleChoice.bert", "modeling.BertForMultipleChoice.dropout", "modeling.BertForMultipleChoice.classifier", "modeling.BertForMultipleChoice.view", "input_ids.size", "token_type_ids.view", "attention_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "token_type_ids.size", "attention_mask.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "_", ",", "pooled_output", "=", "self", ".", "bert", "(", "flat_input_ids", ",", "flat_token_type_ids", ",", "flat_attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_choices", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "reshaped_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForTokenClassification.__init__": [[1115, 1122], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling.BertForTokenClassification.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_labels", ")", ":", "\n", "        ", "super", "(", "BertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_labels", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForTokenClassification.forward": [[1123, 1141], ["modeling.BertForTokenClassification.bert", "modeling.BertForTokenClassification.dropout", "modeling.BertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling.BertForTokenClassification.view", "labels.view", "modeling.BertForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForQuestionAnswering.__init__": [[1190, 1197], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "torch.nn.Linear", "modeling.BertForQuestionAnswering.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "# TODO check with Google if it's normal there is no dropout on the token classifier of SQuAD in the TF version", "\n", "# self.dropout = nn.Dropout(config.hidden_dropout_prob)", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.BertForQuestionAnswering.forward": [[1198, 1223], ["modeling.BertForQuestionAnswering.bert", "modeling.BertForQuestionAnswering.qa_outputs", "modeling.BertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "return", "total_loss", "\n", "", "else", ":", "\n", "            ", "return", "start_logits", ",", "end_logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.load_tf_weights_in_bert": [[51, 116], ["os.path.abspath", "print", "tf.train.list_variables", "zip", "print", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "any", "print", "torch.from_numpy", "print", "print", "re.fullmatch", "getattr", "re.split", "getattr", "len", "int", "np.transpose", "getattr", "getattr", "getattr", "getattr", "print"], "function", ["None"], ["def", "load_tf_weights_in_bert", "(", "model", ",", "tf_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "print", "(", "\"Loading a TensorFlow models in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "print", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "print", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "any", "(", "n", "in", "[", "\"adam_v\"", ",", "\"adam_m\"", ",", "\"global_step\"", "]", "for", "n", "in", "name", ")", ":", "\n", "            ", "print", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'kernel'", "or", "l", "[", "0", "]", "==", "'gamma'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_bias'", "or", "l", "[", "0", "]", "==", "'beta'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_weights'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'squad'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'classifier'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "print", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "if", "m_name", "[", "-", "11", ":", "]", "==", "'_embeddings'", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "m_name", "==", "'kernel'", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "print", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.gelu": [[118, 125], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.modeling.swish": [[127, 129], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization._LRSchedule.__init__": [[38, 52], ["ABC.__init__", "max", "logger.warning", "ValueError", "float", "float"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "warmup", "=", "0.002", ",", "t_total", "=", "-", "1", ",", "**", "kw", ")", ":", "\n", "        ", "\"\"\"\n        :param warmup:  what fraction of t_total steps will be used for linear warmup\n        :param t_total: how many training steps (updates) are planned\n        :param kw:\n        \"\"\"", "\n", "super", "(", "_LRSchedule", ",", "self", ")", ".", "__init__", "(", "**", "kw", ")", "\n", "if", "t_total", "<", "0", ":", "\n", "            ", "logger", ".", "warning", "(", "\"t_total value of {} results in schedule not being applied\"", ".", "format", "(", "t_total", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "warmup", "=", "max", "(", "warmup", ",", "0.", ")", "\n", "self", ".", "warmup", ",", "self", ".", "t_total", "=", "float", "(", "warmup", ")", ",", "float", "(", "t_total", ")", "\n", "self", ".", "warned_for_t_total_at_progress", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization._LRSchedule.get_lr": [[53, 71], ["optimization._LRSchedule.get_lr_", "float", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupLinearSchedule.get_lr_"], ["", "def", "get_lr", "(", "self", ",", "step", ",", "nowarn", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param step:    which of t_total steps we're on\n        :param nowarn:  set to True to suppress warning regarding training beyond specified 't_total' steps\n        :return:        learning rate multiplier for current update\n        \"\"\"", "\n", "if", "self", ".", "t_total", "<", "0", ":", "\n", "            ", "return", "1.", "\n", "", "progress", "=", "float", "(", "step", ")", "/", "self", ".", "t_total", "\n", "ret", "=", "self", ".", "get_lr_", "(", "progress", ")", "\n", "# warning for exceeding t_total (only active with warmup_linear", "\n", "if", "not", "nowarn", "and", "self", ".", "warn_t_total", "and", "progress", ">", "1.", "and", "progress", ">", "self", ".", "warned_for_t_total_at_progress", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Training beyond specified 't_total'. Learning rate multiplier set to {}. Please set 't_total' of {} correctly.\"", "\n", ".", "format", "(", "ret", ",", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "self", ".", "warned_for_t_total_at_progress", "=", "progress", "\n", "# end warning", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization._LRSchedule.get_lr_": [[72, 79], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "get_lr_", "(", "self", ",", "progress", ")", ":", "\n", "        ", "\"\"\"\n        :param progress:    value between 0 and 1 (unless going beyond t_total steps) specifying training progress\n        :return:            learning rate multiplier for current update\n        \"\"\"", "\n", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.ConstantLR.get_lr_": [[82, 84], ["None"], "methods", ["None"], ["    ", "def", "get_lr_", "(", "self", ",", "progress", ")", ":", "\n", "        ", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupCosineSchedule.__init__": [[93, 102], ["optimization._LRSchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "warmup", "=", "0.002", ",", "t_total", "=", "-", "1", ",", "cycles", "=", ".5", ",", "**", "kw", ")", ":", "\n", "        ", "\"\"\"\n        :param warmup:      see LRSchedule\n        :param t_total:     see LRSchedule\n        :param cycles:      number of cycles. Default: 0.5, corresponding to cosine decay from 1. at progress==warmup and 0 at progress==1.\n        :param kw:\n        \"\"\"", "\n", "super", "(", "WarmupCosineSchedule", ",", "self", ")", ".", "__init__", "(", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "**", "kw", ")", "\n", "self", ".", "cycles", "=", "cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupCosineSchedule.get_lr_": [[103, 109], ["math.cos"], "methods", ["None"], ["", "def", "get_lr_", "(", "self", ",", "progress", ")", ":", "\n", "        ", "if", "progress", "<", "self", ".", "warmup", ":", "\n", "            ", "return", "progress", "/", "self", ".", "warmup", "\n", "", "else", ":", "\n", "            ", "progress", "=", "(", "progress", "-", "self", ".", "warmup", ")", "/", "(", "1", "-", "self", ".", "warmup", ")", "# progress after warmup", "\n", "return", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "cycles", "*", "2", "*", "progress", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupCosineWithHardRestartsSchedule.__init__": [[117, 120], ["optimization.WarmupCosineSchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "warmup", "=", "0.002", ",", "t_total", "=", "-", "1", ",", "cycles", "=", "1.", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", "WarmupCosineWithHardRestartsSchedule", ",", "self", ")", ".", "__init__", "(", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "cycles", "=", "cycles", ",", "**", "kw", ")", "\n", "assert", "(", "cycles", ">=", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupCosineWithHardRestartsSchedule.get_lr_": [[121, 128], ["math.cos"], "methods", ["None"], ["", "def", "get_lr_", "(", "self", ",", "progress", ")", ":", "\n", "        ", "if", "progress", "<", "self", ".", "warmup", ":", "\n", "            ", "return", "progress", "/", "self", ".", "warmup", "\n", "", "else", ":", "\n", "            ", "progress", "=", "(", "progress", "-", "self", ".", "warmup", ")", "/", "(", "1", "-", "self", ".", "warmup", ")", "# progress after warmup", "\n", "ret", "=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "self", ".", "cycles", "*", "progress", ")", "%", "1", ")", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupCosineWithWarmupRestartsSchedule.__init__": [[136, 140], ["optimization.WarmupCosineWithHardRestartsSchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "warmup", "=", "0.002", ",", "t_total", "=", "-", "1", ",", "cycles", "=", "1.", ",", "**", "kw", ")", ":", "\n", "        ", "assert", "(", "warmup", "*", "cycles", "<", "1.", ")", "\n", "warmup", "=", "warmup", "*", "cycles", "if", "warmup", ">=", "0", "else", "warmup", "\n", "super", "(", "WarmupCosineWithWarmupRestartsSchedule", ",", "self", ")", ".", "__init__", "(", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "cycles", "=", "cycles", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupCosineWithWarmupRestartsSchedule.get_lr_": [[141, 149], ["math.cos"], "methods", ["None"], ["", "def", "get_lr_", "(", "self", ",", "progress", ")", ":", "\n", "        ", "progress", "=", "progress", "*", "self", ".", "cycles", "%", "1.", "\n", "if", "progress", "<", "self", ".", "warmup", ":", "\n", "            ", "return", "progress", "/", "self", ".", "warmup", "\n", "", "else", ":", "\n", "            ", "progress", "=", "(", "progress", "-", "self", ".", "warmup", ")", "/", "(", "1", "-", "self", ".", "warmup", ")", "# progress after warmup", "\n", "ret", "=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "progress", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupConstantSchedule.get_lr_": [[156, 160], ["None"], "methods", ["None"], ["def", "get_lr_", "(", "self", ",", "progress", ")", ":", "\n", "        ", "if", "progress", "<", "self", ".", "warmup", ":", "\n", "            ", "return", "progress", "/", "self", ".", "warmup", "\n", "", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.WarmupLinearSchedule.get_lr_": [[168, 172], ["max"], "methods", ["None"], ["def", "get_lr_", "(", "self", ",", "progress", ")", ":", "\n", "        ", "if", "progress", "<", "self", ".", "warmup", ":", "\n", "            ", "return", "progress", "/", "self", ".", "warmup", "\n", "", "return", "max", "(", "(", "progress", "-", "1.", ")", "/", "(", "self", ".", "warmup", "-", "1.", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.BertAdam.__init__": [[200, 224], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "isinstance", "schedule_type", "isinstance", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "warmup", "=", "-", "1", ",", "t_total", "=", "-", "1", ",", "schedule", "=", "'warmup_linear'", ",", "\n", "b1", "=", "0.9", ",", "b2", "=", "0.999", ",", "e", "=", "1e-6", ",", "weight_decay", "=", "0.01", ",", "max_grad_norm", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "isinstance", "(", "schedule", ",", "_LRSchedule", ")", "and", "schedule", "not", "in", "SCHEDULES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid schedule parameter: {}\"", ".", "format", "(", "schedule", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b1", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b1 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b1", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b2", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b2 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b2", ")", ")", "\n", "", "if", "not", "e", ">=", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "e", ")", ")", "\n", "# initialize schedule object", "\n", "", "if", "not", "isinstance", "(", "schedule", ",", "_LRSchedule", ")", ":", "\n", "            ", "schedule_type", "=", "SCHEDULES", "[", "schedule", "]", "\n", "schedule", "=", "schedule_type", "(", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ")", "\n", "", "else", ":", "\n", "            ", "if", "warmup", "!=", "-", "1", "or", "t_total", "!=", "-", "1", ":", "\n", "                ", "logger", ".", "warning", "(", "\"warmup and t_total on the optimizer are ineffective when _LRSchedule object is provided as schedule. \"", "\n", "\"Please specify custom warmup and t_total in _LRSchedule object.\"", ")", "\n", "", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "\n", "b1", "=", "b1", ",", "b2", "=", "b2", ",", "e", "=", "e", ",", "weight_decay", "=", "weight_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "BertAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.BertAdam.get_lr": [[225, 236], ["group[].get_lr", "lr.append", "len"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.BertAdam.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "lr_scheduled", "*=", "group", "[", "'schedule'", "]", ".", "get_lr", "(", "state", "[", "'step'", "]", ")", "\n", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.BertAdam.step": [[237, 303], ["closure", "next_m.mul_().add_", "next_v.mul_().addcmul_", "group[].get_lr", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "next_m.mul_", "next_v.mul_", "next_v.sqrt"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.BertAdam.get_lr"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'next_m'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'next_v'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "next_m", ",", "next_v", "=", "state", "[", "'next_m'", "]", ",", "state", "[", "'next_v'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'b1'", "]", ",", "group", "[", "'b2'", "]", "\n", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "", "next_m", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "next_v", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "update", "=", "next_m", "/", "(", "next_v", ".", "sqrt", "(", ")", "+", "group", "[", "'e'", "]", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "update", "+=", "group", "[", "'weight_decay'", "]", "*", "p", ".", "data", "\n", "\n", "", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "lr_scheduled", "*=", "group", "[", "'schedule'", "]", ".", "get_lr", "(", "state", "[", "'step'", "]", ")", "\n", "\n", "update_with_lr", "=", "lr_scheduled", "*", "update", "\n", "p", ".", "data", ".", "add_", "(", "-", "update_with_lr", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# step_size = lr_scheduled * math.sqrt(bias_correction2) / bias_correction1", "\n", "# No bias correction", "\n", "# bias_correction1 = 1 - beta1 ** state['step']", "\n", "# bias_correction2 = 1 - beta2 ** state['step']", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.url_to_filename": [[44, 60], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["None"], ["def", "url_to_filename", "(", "url", ",", "etag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.filename_to_url": [[62, 86], ["os.path.join", "isinstance", "str", "os.path.exists", "EnvironmentError", "os.path.exists", "EnvironmentError", "io.open", "json.load"], "function", ["None"], ["", "def", "filename_to_url", "(", "filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``EnvironmentError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.cached_path": [[88, 116], ["urlparse", "isinstance", "str", "isinstance", "str", "file_utils.get_from_cache", "os.path.exists", "EnvironmentError", "ValueError"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.split_s3_path": [[118, 129], ["urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ")", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.s3_request": [[131, 148], ["functools.wraps", "func", "int", "EnvironmentError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.s3_etag": [[150, 157], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ")", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.s3_get": [[159, 165], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ",", "temp_file", ")", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.http_get": [[167, 177], ["requests.get", "requests.get.headers.get", "tqdm.tqdm", "requests.get.iter_content", "tqdm.tqdm.close", "int", "tqdm.tqdm.update", "temp_file.write", "len"], "function", ["None"], ["", "def", "http_get", "(", "url", ",", "temp_file", ")", ":", "\n", "    ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.get_from_cache": [[179, 253], ["url.startswith", "file_utils.url_to_filename", "os.path.join", "isinstance", "str", "os.path.exists", "os.makedirs", "file_utils.s3_etag", "response.headers.get.decode", "fnmatch.filter", "list", "os.path.exists", "requests.head", "os.path.exists", "os.listdir", "filter", "os.path.join", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "requests.head.headers.get", "file_utils.s3_get", "file_utils.http_get", "io.open", "shutil.copyfileobj", "io.open", "json.dumps", "meta_file.write", "isinstance", "unicode", "s.endswith"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.url_to_filename", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.s3_etag", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.s3_get", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.http_get"], ["", "def", "get_from_cache", "(", "url", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "                ", "etag", "=", "None", "\n", "", "else", ":", "\n", "                ", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "", "", "except", "EnvironmentError", ":", "\n", "            ", "etag", "=", "None", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "etag", "is", "not", "None", ":", "\n", "        ", "etag", "=", "etag", ".", "decode", "(", "'utf-8'", ")", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "# If we don't have a connection (etag is None) and can't identify the file", "\n", "# try to get the last downloaded one", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "etag", "is", "None", ":", "\n", "        ", "matching_files", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "cache_dir", ")", ",", "filename", "+", "'.*'", ")", "\n", "matching_files", "=", "list", "(", "filter", "(", "lambda", "s", ":", "not", "s", ".", "endswith", "(", "'.json'", ")", ",", "matching_files", ")", ")", "\n", "if", "matching_files", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "matching_files", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "output_string", "=", "json", ".", "dumps", "(", "meta", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "output_string", ",", "str", ")", ":", "\n", "                    ", "output_string", "=", "unicode", "(", "output_string", ",", "'utf-8'", ")", "# The beauty of python 2", "\n", "", "meta_file", ".", "write", "(", "output_string", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.read_set_from_file": [[255, 265], ["set", "io.open", "set.add", "line.rstrip"], "function", ["None"], ["", "def", "read_set_from_file", "(", "filename", ")", ":", "\n", "    ", "'''\n    Extract a de-duped collection (set) of text from a file.\n    Expected file format is one item per line.\n    '''", "\n", "collection", "=", "set", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file_", ":", "\n", "        ", "for", "line", "in", "file_", ":", "\n", "            ", "collection", ".", "add", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "", "", "return", "collection", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.get_file_extension": [[267, 271], ["os.path.splitext", "ext.lower"], "function", ["None"], ["", "def", "get_file_extension", "(", "path", ",", "dot", "=", "True", ",", "lower", "=", "True", ")", ":", "\n", "    ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "[", "1", "]", "\n", "ext", "=", "ext", "if", "dot", "else", "ext", "[", "1", ":", "]", "\n", "return", "ext", ".", "lower", "(", ")", "if", "lower", "else", "ext", "\n", "", ""]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.__init__": [[77, 106], ["tokenization.load_vocab", "collections.OrderedDict", "tokenization.WordpieceTokenizer", "os.path.isfile", "ValueError", "tokenization.BasicTokenizer", "int", "tokenization.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "max_len", "=", "None", ",", "do_basic_tokenize", "=", "True", ",", "\n", "never_split", "=", "(", "\"[UNK]\"", ",", "\"[SEP]\"", ",", "\"[PAD]\"", ",", "\"[CLS]\"", ",", "\"[MASK]\"", ")", ")", ":", "\n", "        ", "\"\"\"Constructs a BertTokenizer.\n\n        Args:\n          vocab_file: Path to a one-wordpiece-per-line vocabulary file\n          do_lower_case: Whether to lower case the input\n                         Only has an effect when do_wordpiece_only=False\n          do_basic_tokenize: Whether to do basic tokenization before wordpiece.\n          max_len: An artificial maximum length to truncate tokenized sequences to;\n                         Effective maximum length is always the minimum of this\n                         value (if specified) and the underlying BERT model's\n                         sequence length.\n          never_split: List of tokens which will never be split during tokenization.\n                         Only has an effect when do_wordpiece_only=False\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "do_basic_tokenize", "=", "do_basic_tokenize", "\n", "if", "do_basic_tokenize", ":", "\n", "          ", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "\n", "never_split", "=", "never_split", ")", "\n", "", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "self", ".", "max_len", "=", "max_len", "if", "max_len", "is", "not", "None", "else", "int", "(", "1e12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.tokenize": [[107, 116], ["tokenization.BertTokenizer.basic_tokenizer.tokenize", "tokenization.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization.BertTokenizer.append"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "do_basic_tokenize", ":", "\n", "            ", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "                ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                    ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "", "else", ":", "\n", "            ", "split_tokens", "=", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "text", ")", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.convert_tokens_to_ids": [[117, 129], ["ids.append", "len", "logger.warning", "len"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens into ids using the vocab.\"\"\"", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "ids", ".", "append", "(", "self", ".", "vocab", "[", "token", "]", ")", "\n", "", "if", "len", "(", "ids", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Token indices sequence length is longer than the specified maximum \"", "\n", "\" sequence length for this BERT model ({} > {}). Running this\"", "\n", "\" sequence through BERT will result in indexing errors\"", ".", "format", "(", "len", "(", "ids", ")", ",", "self", ".", "max_len", ")", "\n", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.convert_ids_to_tokens": [[130, 136], ["tokens.append"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of ids in wordpiece tokens using the vocab.\"\"\"", "\n", "tokens", "=", "[", "]", "\n", "for", "i", "in", "ids", ":", "\n", "            ", "tokens", ".", "append", "(", "self", ".", "ids_to_tokens", "[", "i", "]", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.save_vocabulary": [[137, 151], ["os.path.isdir", "os.path.join", "io.open", "sorted", "tokenization.BertTokenizer.vocab.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "index", "=", "0", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_NAME", ")", "\n", "", "with", "open", "(", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "token", ",", "token_index", "in", "sorted", "(", "self", ".", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: vocabulary indices are not consecutive.\"", "\n", "\" Please check that the vocabulary is not corrupted!\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "token", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab_file", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.from_pretrained": [[152, 199], ["os.path.isdir", "cls", "os.path.join", "file_utils.cached_path", "logger.info", "logger.info", "min", "kwargs.get", "logger.warning", "logger.error", "kwargs.get", "logger.warning", "int", "kwargs.get", "PRETRAINED_VOCAB_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.file_utils.cached_path"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "cache_dir", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a PreTrainedBertModel from a pre-trained model file.\n        Download and cache the pre-trained model file if needed.\n        \"\"\"", "\n", "if", "pretrained_model_name_or_path", "in", "PRETRAINED_VOCAB_ARCHIVE_MAP", ":", "\n", "            ", "vocab_file", "=", "PRETRAINED_VOCAB_ARCHIVE_MAP", "[", "pretrained_model_name_or_path", "]", "\n", "if", "'-cased'", "in", "pretrained_model_name_or_path", "and", "kwargs", ".", "get", "(", "'do_lower_case'", ",", "True", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"The pre-trained model you are loading is a cased model but you have not set \"", "\n", "\"`do_lower_case` to False. We are setting `do_lower_case=False` for you but \"", "\n", "\"you may want to check this behavior.\"", ")", "\n", "kwargs", "[", "'do_lower_case'", "]", "=", "False", "\n", "", "elif", "'-cased'", "not", "in", "pretrained_model_name_or_path", "and", "not", "kwargs", ".", "get", "(", "'do_lower_case'", ",", "True", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"The pre-trained model you are loading is an uncased model but you have set \"", "\n", "\"`do_lower_case` to False. We are setting `do_lower_case=True` for you \"", "\n", "\"but you may want to check this behavior.\"", ")", "\n", "kwargs", "[", "'do_lower_case'", "]", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "vocab_file", "=", "pretrained_model_name_or_path", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "vocab_file", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_file", ",", "VOCAB_NAME", ")", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_vocab_file", "=", "cached_path", "(", "vocab_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "PRETRAINED_VOCAB_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "vocab_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_vocab_file", "==", "vocab_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading vocabulary file {}\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading vocabulary file {} from cache at {}\"", ".", "format", "(", "\n", "vocab_file", ",", "resolved_vocab_file", ")", ")", "\n", "", "if", "pretrained_model_name_or_path", "in", "PRETRAINED_VOCAB_POSITIONAL_EMBEDDINGS_SIZE_MAP", ":", "\n", "# if we're using a pretrained model, ensure the tokenizer wont index sequences longer", "\n", "# than the number of positional embeddings", "\n", "            ", "max_len", "=", "PRETRAINED_VOCAB_POSITIONAL_EMBEDDINGS_SIZE_MAP", "[", "pretrained_model_name_or_path", "]", "\n", "kwargs", "[", "'max_len'", "]", "=", "min", "(", "kwargs", ".", "get", "(", "'max_len'", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "# Instantiate tokenizer.", "\n", "", "tokenizer", "=", "cls", "(", "resolved_vocab_file", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer.__init__": [[204, 214], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "do_lower_case", "=", "True", ",", "\n", "never_split", "=", "(", "\"[UNK]\"", ",", "\"[SEP]\"", ",", "\"[PAD]\"", ",", "\"[CLS]\"", ",", "\"[MASK]\"", ")", ")", ":", "\n", "        ", "\"\"\"Constructs a BasicTokenizer.\n\n        Args:\n          do_lower_case: Whether to lower case the input.\n        \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "never_split", "=", "never_split", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer.tokenize": [[215, 235], ["tokenization.BasicTokenizer._clean_text", "tokenization.BasicTokenizer._tokenize_chinese_chars", "tokenization.whitespace_tokenize", "tokenization.whitespace_tokenize", "split_tokens.extend", "tokenization.BasicTokenizer.lower", "tokenization.BasicTokenizer._run_strip_accents", "tokenization.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", "and", "token", "not", "in", "self", ".", "never_split", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._run_strip_accents": [[236, 246], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._run_split_on_punc": [[247, 268], ["list", "len", "tokenization._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "if", "text", "in", "self", ".", "never_split", ":", "\n", "            ", "return", "[", "text", "]", "\n", "", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._tokenize_chinese_chars": [[269, 281], ["ord", "tokenization.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._is_chinese_char": [[282, 303], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BasicTokenizer._clean_text": [[304, 316], ["ord", "tokenization._is_whitespace", "tokenization._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization._is_whitespace", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.__init__": [[321, 325], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.tokenize": [[326, 376], ["tokenization.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer`.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.load_vocab": [[50, 63], ["collections.OrderedDict", "io.open", "reader.readline", "token.strip.strip"], "function", ["None"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "index", "=", "0", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "reader", ".", "readline", "(", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.whitespace_tokenize": [[65, 72], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization._is_whitespace": [[378, 388], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization._is_control": [[390, 400], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization._is_punctuation": [[402, 416], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.GRoIE.__init__": [[48, 59], ["torch.Module.__init__", "modeling.BertPooler", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range", "run_asc.GRoIE.pre_layers.append", "run_asc.GRoIE.loss_fct.append", "modeling.BertLayer", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "count", ",", "config", ",", "num_labels", ")", ":", "\n", "        ", "super", "(", "GRoIE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "count", "=", "count", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "self", ".", "pre_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "loss_fct", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_labels", ")", "\n", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "            ", "self", ".", "pre_layers", ".", "append", "(", "BertLayer", "(", "config", ")", ")", "\n", "self", ".", "loss_fct", ".", "append", "(", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.GRoIE.forward": [[60, 77], ["range", "run_asc.GRoIE.pooler", "run_asc.GRoIE.classifier", "logitses.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "run_asc.GRoIE.view", "labels.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "layers", ",", "attention_mask", ",", "labels", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "logitses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "count", ")", ":", "\n", "            ", "layer", "=", "self", ".", "pre_layers", "[", "i", "]", "(", "layers", "[", "-", "i", "-", "1", "]", ",", "attention_mask", ")", "\n", "layer", "=", "self", ".", "pooler", "(", "layer", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "layer", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                ", "loss", "=", "self", ".", "loss_fct", "[", "i", "]", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "", "logitses", ".", "append", "(", "logits", ")", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "            ", "total_loss", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "losses", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "total_loss", "=", "torch", ".", "Tensor", "(", "0", ")", "\n", "", "avg_logits", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "logitses", ")", ",", "dim", "=", "0", ")", "/", "self", ".", "count", "\n", "return", "total_loss", ",", "avg_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.BertForABSA.__init__": [[80, 86], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "run_asc.GRoIE", "run_asc.BertForABSA.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "num_labels", "=", "3", ")", ":", "\n", "        ", "super", "(", "BertForABSA", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "groie", "=", "GRoIE", "(", "4", ",", "config", ",", "num_labels", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.BertForABSA.forward": [[87, 96], ["run_asc.BertForABSA.bert", "run_asc.BertForABSA.groie"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "layers", ",", "_", ",", "mask", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "True", ")", "\n", "loss", ",", "logits", "=", "self", ".", "groie", "(", "layers", ",", "mask", ",", "labels", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.warmup_linear": [[42, 46], ["None"], "function", ["None"], ["def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "-", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.train": [[97, 209], ["absa_data_utils.AscProcessor", "data_utils.AscProcessor.get_labels", "absa_data_utils.ABSATokenizer.from_pretrained", "data_utils.AscProcessor.get_train_examples", "absa_data_utils.convert_examples_to_features", "logger.info", "logger.info", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "BertForABSA.from_pretrained", "BertForABSA.from_pretrained.cuda", "optimization.BertAdam", "BertForABSA.from_pretrained.train", "range", "int", "len", "data_utils.AscProcessor.get_dev_examples", "absa_data_utils.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "logger.info", "logger.info", "logger.info", "logger.info", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "float", "enumerate", "print", "os.path.join", "os.mkdir", "torch.save", "torch.save", "len", "len", "len", "BertForABSA.from_pretrained.named_parameters", "tuple", "optimization.BertAdam.zero_grad", "BertForABSA.from_pretrained.", "model.backward", "optimization.BertAdam.step", "model.item", "str", "BertForABSA.from_pretrained.eval", "BertForABSA.from_pretrained.train", "open", "json.dump", "os.path.join", "len", "run_asc.warmup_linear", "torch.no_grad", "torch.no_grad", "enumerate", "logger.info", "valid_losses.append", "torch.save", "torch.save", "run_asc.test", "os.remove", "os.path.join", "any", "t.cuda", "tuple", "BertForABSA.from_pretrained.", "losses.append", "input_ids.size", "sum", "os.path.join", "torch.save", "torch.save", "run_asc.test", "os.path.join", "any", "os.path.join", "t.cuda", "model.data.item", "input_ids.size"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_labels", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_train_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.convert_examples_to_features", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.train", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_dev_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.convert_examples_to_features", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.BertAdam.step", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.train", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.warmup_linear", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.test", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.test"], ["", "", "", "def", "train", "(", "args", ")", ":", "\n", "\n", "    ", "processor", "=", "data_utils", ".", "AscProcessor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "ABSATokenizer", ".", "from_pretrained", "(", "modelconfig", ".", "MODEL_ARCHIVE_MAP", "[", "args", ".", "bert_model", "]", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "args", ".", "data_dir", ")", "\n", "num_train_steps", "=", "int", "(", "len", "(", "train_examples", ")", "/", "args", ".", "train_batch_size", ")", "*", "args", ".", "num_train_epochs", "\n", "\n", "train_features", "=", "data_utils", ".", "convert_examples_to_features", "(", "\n", "train_examples", ",", "label_list", ",", "args", ".", "max_seq_length", ",", "tokenizer", ",", "\"asc\"", ")", "\n", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "train_batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_steps", ")", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_segment_ids", ",", "all_input_mask", ",", "all_label_ids", ")", "\n", "\n", "train_sampler", "=", "RandomSampler", "(", "train_data", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "args", ".", "train_batch_size", ")", "\n", "\n", "#>>>>> validation", "\n", "if", "args", ".", "do_valid", ":", "\n", "        ", "valid_examples", "=", "processor", ".", "get_dev_examples", "(", "args", ".", "data_dir", ")", "\n", "valid_features", "=", "data_utils", ".", "convert_examples_to_features", "(", "\n", "valid_examples", ",", "label_list", ",", "args", ".", "max_seq_length", ",", "tokenizer", ",", "\"asc\"", ")", "\n", "valid_all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_data", "=", "TensorDataset", "(", "valid_all_input_ids", ",", "valid_all_segment_ids", ",", "valid_all_input_mask", ",", "valid_all_label_ids", ")", "\n", "\n", "logger", ".", "info", "(", "\"***** Running validations *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num orig examples = %d\"", ",", "len", "(", "valid_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num split examples = %d\"", ",", "len", "(", "valid_features", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "train_batch_size", ")", "\n", "\n", "valid_sampler", "=", "SequentialSampler", "(", "valid_data", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "valid_data", ",", "sampler", "=", "valid_sampler", ",", "batch_size", "=", "args", ".", "train_batch_size", ")", "\n", "\n", "best_valid_loss", "=", "float", "(", "'inf'", ")", "\n", "valid_losses", "=", "[", "]", "\n", "#<<<<< end of validation declaration", "\n", "\n", "", "model", "=", "BertForABSA", ".", "from_pretrained", "(", "modelconfig", ".", "MODEL_ARCHIVE_MAP", "[", "args", ".", "bert_model", "]", ",", "num_labels", "=", "len", "(", "label_list", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "# Prepare optimizer", "\n", "param_optimizer", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "v", ".", "requires_grad", "==", "True", "]", "\n", "param_optimizer", "=", "[", "n", "for", "n", "in", "param_optimizer", "if", "'pooler'", "not", "in", "n", "[", "0", "]", "]", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.01", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "t_total", "=", "num_train_steps", "\n", "optimizer", "=", "BertAdam", "(", "optimizer_grouped_parameters", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "warmup", "=", "args", ".", "warmup_proportion", ",", "\n", "t_total", "=", "t_total", ")", "\n", "\n", "global_step", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "num_train_epochs", ")", ":", "\n", "        ", "for", "step", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "            ", "batch", "=", "tuple", "(", "t", ".", "cuda", "(", ")", "for", "t", "in", "batch", ")", "\n", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", "=", "batch", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lr_this_step", "=", "args", ".", "learning_rate", "*", "warmup_linear", "(", "global_step", "/", "t_total", ",", "args", ".", "warmup_proportion", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "global_step", "+=", "1", "\n", "", "print", "(", "\"training loss: \"", ",", "loss", ".", "item", "(", ")", ",", "epoch", "+", "1", ")", "\n", "#>>>> perform validation at the end of each epoch.", "\n", "new_dirs", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "str", "(", "epoch", "+", "1", ")", ")", "\n", "os", ".", "mkdir", "(", "new_dirs", ")", "\n", "if", "args", ".", "do_valid", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "losses", "=", "[", "]", "\n", "valid_size", "=", "0", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "valid_dataloader", ")", ":", "\n", "                    ", "batch", "=", "tuple", "(", "t", ".", "cuda", "(", ")", "for", "t", "in", "batch", ")", "# multi-gpu does scattering it-self", "\n", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", "=", "batch", "\n", "loss", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "losses", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", "*", "input_ids", ".", "size", "(", "0", ")", ")", "\n", "valid_size", "+=", "input_ids", ".", "size", "(", "0", ")", "\n", "", "valid_loss", "=", "sum", "(", "losses", ")", "/", "valid_size", "\n", "logger", ".", "info", "(", "\"validation loss: %f, epoch: %d\"", ",", "valid_loss", ",", "epoch", "+", "1", ")", "\n", "valid_losses", ".", "append", "(", "valid_loss", ")", "\n", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"model.pt\"", ")", ")", "\n", "test", "(", "args", ",", "new_dirs", ",", "dev_as_test", "=", "True", ")", "\n", "if", "epoch", "==", "args", ".", "num_train_epochs", "-", "1", ":", "\n", "                    ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"model.pt\"", ")", ")", "\n", "test", "(", "args", ",", "args", ".", "output_dir", ",", "dev_as_test", "=", "False", ")", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"model.pt\"", ")", ")", "\n", "", "if", "valid_loss", "<", "best_valid_loss", ":", "\n", "                ", "best_valid_loss", "=", "valid_loss", "\n", "", "model", ".", "train", "(", ")", "\n", "", "", "if", "args", ".", "do_valid", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"valid.json\"", ")", ",", "\"w\"", ")", "as", "fw", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\"valid_losses\"", ":", "valid_losses", "}", ",", "fw", ")", "\n", "", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"model.pt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.test": [[211, 256], ["absa_data_utils.AscProcessor", "data_utils.AscProcessor.get_labels", "tokenization.BertTokenizer.from_pretrained", "data_utils.AscProcessor.get_test_examples", "absa_data_utils.convert_examples_to_features", "logger.info", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load.cuda", "torch.load.eval", "enumerate", "os.path.join", "os.path.join", "len", "os.path.join", "tuple", "model.detach().cpu().numpy", "label_ids.cpu().numpy.cpu().numpy", "full_logits.extend", "full_label_ids.extend", "open", "json.dump", "torch.no_grad", "torch.no_grad", "torch.load.", "model.tolist", "label_ids.cpu().numpy.tolist", "t.cuda", "model.detach().cpu", "label_ids.cpu().numpy.cpu", "model.detach"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_labels", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_test_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.convert_examples_to_features"], ["", "", "def", "test", "(", "args", ",", "new_dirs", "=", "None", ",", "dev_as_test", "=", "None", ")", ":", "# Load a trained model that you have fine-tuned (we assume evaluate on cpu)    ", "\n", "    ", "processor", "=", "data_utils", ".", "AscProcessor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "modelconfig", ".", "MODEL_ARCHIVE_MAP", "[", "args", ".", "bert_model", "]", ")", "\n", "if", "dev_as_test", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'dev_as_test'", ")", "\n", "", "else", ":", "\n", "        ", "data_dir", "=", "args", ".", "data_dir", "\n", "", "eval_examples", "=", "processor", ".", "get_test_examples", "(", "data_dir", ")", "\n", "eval_features", "=", "data_utils", ".", "convert_examples_to_features", "(", "eval_examples", ",", "label_list", ",", "args", ".", "max_seq_length", ",", "tokenizer", ",", "\"asc\"", ")", "\n", "\n", "logger", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "eval_batch_size", ")", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "eval_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_segment_ids", ",", "all_input_mask", ",", "all_label_ids", ")", "\n", "# Run prediction for full data", "\n", "eval_sampler", "=", "SequentialSampler", "(", "eval_data", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_data", ",", "sampler", "=", "eval_sampler", ",", "batch_size", "=", "args", ".", "eval_batch_size", ")", "\n", "\n", "model", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"model.pt\"", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "full_logits", "=", "[", "]", "\n", "full_label_ids", "=", "[", "]", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "eval_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "cuda", "(", ")", "for", "t", "in", "batch", ")", "\n", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ")", "\n", "\n", "", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_ids", "=", "label_ids", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "full_logits", ".", "extend", "(", "logits", ".", "tolist", "(", ")", ")", "\n", "full_label_ids", ".", "extend", "(", "label_ids", ".", "tolist", "(", ")", ")", "\n", "\n", "", "output_eval_json", "=", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"predictions.json\"", ")", "\n", "with", "open", "(", "output_eval_json", ",", "\"w\"", ")", "as", "fw", ":", "\n", "        ", "json", ".", "dump", "(", "{", "\"logits\"", ":", "full_logits", ",", "\"label_ids\"", ":", "full_label_ids", "}", ",", "fw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_asc.main": [[261, 336], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "os.makedirs", "run_asc.train", "run_asc.test"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.train", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.test"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--bert_model\"", ",", "default", "=", "'bert-base'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"The input data dir containing json files.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model predictions and checkpoints will be written.\"", ")", "\n", "\n", "## Other parameters", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "\n", "default", "=", "128", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The maximum total input sequence length after WordPiece tokenization. \\n\"", "\n", "\"Sequences longer than this will be truncated, and sequences shorter \\n\"", "\n", "\"than this will be padded.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_valid\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_eval\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run eval on the dev set.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "\n", "default", "=", "32", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_batch_size\"", ",", "\n", "default", "=", "8", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for eval.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "\n", "default", "=", "3e-5", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--num_train_epochs\"", ",", "\n", "default", "=", "6", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_proportion\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Proportion of training to perform linear learning rate warmup for. \"", "\n", "\"E.g., 0.1 = 10%% of training.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"random seed for initialization\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "args", ".", "do_train", ":", "\n", "        ", "train", "(", "args", ")", "\n", "", "if", "args", ".", "do_eval", ":", "\n", "        ", "test", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.GRoIE.__init__": [[50, 61], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "range", "run_ae.GRoIE.pre_layers.append", "run_ae.GRoIE.crf_layers.append", "modeling.BertLayer", "torchcrf.CRF"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "count", ",", "config", ",", "num_labels", ")", ":", "\n", "        ", "super", "(", "GRoIE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "count", "=", "count", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "pre_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "crf_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_labels", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "            ", "self", ".", "pre_layers", ".", "append", "(", "BertLayer", "(", "config", ")", ")", "\n", "self", ".", "crf_layers", ".", "append", "(", "CRF", "(", "num_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.GRoIE.forward": [[62, 79], ["range", "run_ae.GRoIE.dropout", "run_ae.GRoIE.classifier", "logitses.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "run_ae.GRoIE.view", "labels.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "layers", ",", "attention_mask", ",", "labels", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "logitses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "count", ")", ":", "\n", "            ", "layer", "=", "self", ".", "pre_layers", "[", "i", "]", "(", "layers", "[", "-", "i", "-", "1", "]", ",", "attention_mask", ")", "\n", "layer", "=", "self", ".", "dropout", "(", "layer", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "layer", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                ", "loss", "=", "self", ".", "crf_layers", "[", "i", "]", "(", "logits", ".", "view", "(", "100", ",", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "100", ",", "-", "1", ")", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "", "logitses", ".", "append", "(", "logits", ")", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "            ", "total_loss", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "losses", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "total_loss", "=", "torch", ".", "Tensor", "(", "0", ")", "\n", "", "avg_logits", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "logitses", ")", ",", "dim", "=", "0", ")", "/", "self", ".", "count", "\n", "return", "-", "total_loss", ",", "avg_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.BertForABSA.__init__": [[82, 88], ["modeling.BertPreTrainedModel.__init__", "modeling.BertModel", "run_ae.GRoIE", "run_ae.BertForABSA.apply"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "num_labels", "=", "3", ")", ":", "\n", "        ", "super", "(", "BertForABSA", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "groie", "=", "GRoIE", "(", "4", ",", "config", ",", "num_labels", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.BertForABSA.forward": [[89, 98], ["run_ae.BertForABSA.bert", "run_ae.BertForABSA.groie"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "layers", ",", "_", ",", "mask", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "True", ")", "\n", "loss", ",", "logits", "=", "self", ".", "groie", "(", "layers", ",", "mask", ",", "labels", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.warmup_linear": [[41, 45], ["None"], "function", ["None"], ["def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "-", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.train": [[100, 212], ["absa_data_utils.AeProcessor", "data_utils.AeProcessor.get_labels", "absa_data_utils.ABSATokenizer.from_pretrained", "data_utils.AeProcessor.get_train_examples", "absa_data_utils.convert_examples_to_features", "logger.info", "logger.info", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "BertForABSA.from_pretrained", "BertForABSA.from_pretrained.to", "optimization.BertAdam", "BertForABSA.from_pretrained.train", "range", "int", "len", "data_utils.AeProcessor.get_dev_examples", "absa_data_utils.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "logger.info", "logger.info", "logger.info", "logger.info", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "float", "enumerate", "print", "os.path.join", "os.mkdir", "torch.save", "torch.save", "len", "len", "len", "BertForABSA.from_pretrained.named_parameters", "tuple", "BertForABSA.from_pretrained.", "model.backward", "optimization.BertAdam.step", "optimization.BertAdam.zero_grad", "model.item", "str", "BertForABSA.from_pretrained.eval", "BertForABSA.from_pretrained.train", "open", "json.dump", "os.path.join", "len", "run_ae.warmup_linear", "torch.no_grad", "torch.no_grad", "enumerate", "logger.info", "valid_losses.append", "torch.save", "torch.save", "run_ae.test", "os.remove", "os.path.join", "any", "t.to", "tuple", "BertForABSA.from_pretrained.", "losses.append", "input_ids.size", "sum", "os.path.join", "torch.save", "torch.save", "run_ae.test", "os.path.join", "any", "os.path.join", "t.to", "model.data.item", "input_ids.size"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_labels", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_train_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.convert_examples_to_features", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.train", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_dev_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.convert_examples_to_features", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.optimization.BertAdam.step", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.train", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.warmup_linear", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.test", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.test"], ["", "", "", "def", "train", "(", "args", ")", ":", "\n", "\n", "    ", "processor", "=", "data_utils", ".", "AeProcessor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "ABSATokenizer", ".", "from_pretrained", "(", "modelconfig", ".", "MODEL_ARCHIVE_MAP", "[", "args", ".", "bert_model", "]", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "args", ".", "data_dir", ")", "\n", "num_train_steps", "=", "int", "(", "len", "(", "train_examples", ")", "/", "args", ".", "train_batch_size", ")", "*", "args", ".", "num_train_epochs", "\n", "\n", "train_features", "=", "data_utils", ".", "convert_examples_to_features", "(", "\n", "train_examples", ",", "label_list", ",", "args", ".", "max_seq_length", ",", "tokenizer", ",", "\"ae\"", ")", "\n", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "train_batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_steps", ")", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_segment_ids", ",", "all_input_mask", ",", "all_label_ids", ")", "\n", "\n", "train_sampler", "=", "RandomSampler", "(", "train_data", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "args", ".", "train_batch_size", ")", "\n", "\n", "#>>>>> validation", "\n", "if", "args", ".", "do_valid", ":", "\n", "        ", "valid_examples", "=", "processor", ".", "get_dev_examples", "(", "args", ".", "data_dir", ")", "\n", "valid_features", "=", "data_utils", ".", "convert_examples_to_features", "(", "\n", "valid_examples", ",", "label_list", ",", "args", ".", "max_seq_length", ",", "tokenizer", ",", "\"ae\"", ")", "\n", "valid_all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "valid_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_data", "=", "TensorDataset", "(", "valid_all_input_ids", ",", "valid_all_segment_ids", ",", "valid_all_input_mask", ",", "valid_all_label_ids", ")", "\n", "\n", "logger", ".", "info", "(", "\"***** Running validations *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num orig examples = %d\"", ",", "len", "(", "valid_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num split examples = %d\"", ",", "len", "(", "valid_features", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "train_batch_size", ")", "\n", "\n", "valid_sampler", "=", "SequentialSampler", "(", "valid_data", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "valid_data", ",", "sampler", "=", "valid_sampler", ",", "batch_size", "=", "args", ".", "train_batch_size", ")", "\n", "\n", "best_valid_loss", "=", "float", "(", "'inf'", ")", "\n", "valid_losses", "=", "[", "]", "\n", "#<<<<< end of validation declaration", "\n", "\n", "", "model", "=", "BertForABSA", ".", "from_pretrained", "(", "modelconfig", ".", "MODEL_ARCHIVE_MAP", "[", "args", ".", "bert_model", "]", ",", "num_labels", "=", "len", "(", "label_list", ")", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "# Prepare optimizer", "\n", "param_optimizer", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "v", ".", "requires_grad", "==", "True", "]", "\n", "param_optimizer", "=", "[", "n", "for", "n", "in", "param_optimizer", "if", "'pooler'", "not", "in", "n", "[", "0", "]", "]", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.01", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "t_total", "=", "num_train_steps", "\n", "optimizer", "=", "BertAdam", "(", "optimizer_grouped_parameters", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "warmup", "=", "args", ".", "warmup_proportion", ",", "\n", "t_total", "=", "t_total", ")", "\n", "\n", "global_step", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "num_train_epochs", ")", ":", "\n", "        ", "for", "step", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "            ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", ")", "for", "t", "in", "batch", ")", "\n", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", "=", "batch", "\n", "\n", "loss", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lr_this_step", "=", "args", ".", "learning_rate", "*", "warmup_linear", "(", "global_step", "/", "t_total", ",", "args", ".", "warmup_proportion", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "#>>>> perform validation at the end of each epoch .", "\n", "", "print", "(", "\"training loss: \"", ",", "loss", ".", "item", "(", ")", ",", "epoch", "+", "1", ")", "\n", "new_dirs", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "str", "(", "epoch", "+", "1", ")", ")", "\n", "os", ".", "mkdir", "(", "new_dirs", ")", "\n", "if", "args", ".", "do_valid", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "losses", "=", "[", "]", "\n", "valid_size", "=", "0", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "valid_dataloader", ")", ":", "\n", "                    ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", ")", "for", "t", "in", "batch", ")", "# multi-gpu does scattering it-self", "\n", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", "=", "batch", "\n", "loss", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "losses", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", "*", "input_ids", ".", "size", "(", "0", ")", ")", "\n", "valid_size", "+=", "input_ids", ".", "size", "(", "0", ")", "\n", "", "valid_loss", "=", "sum", "(", "losses", ")", "/", "valid_size", "\n", "logger", ".", "info", "(", "\"validation loss: %f, epoch: %d\"", ",", "valid_loss", ",", "epoch", "+", "1", ")", "\n", "valid_losses", ".", "append", "(", "valid_loss", ")", "\n", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"model.pt\"", ")", ")", "\n", "test", "(", "args", ",", "new_dirs", ",", "dev_as_test", "=", "True", ")", "\n", "if", "epoch", "==", "args", ".", "num_train_epochs", "-", "1", ":", "\n", "                    ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"model.pt\"", ")", ")", "\n", "test", "(", "args", ",", "args", ".", "output_dir", ",", "dev_as_test", "=", "False", ")", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"model.pt\"", ")", ")", "\n", "", "if", "valid_loss", "<", "best_valid_loss", ":", "\n", "                ", "best_valid_loss", "=", "valid_loss", "\n", "", "model", ".", "train", "(", ")", "\n", "", "", "if", "args", ".", "do_valid", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"valid.json\"", ")", ",", "\"w\"", ")", "as", "fw", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\"valid_losses\"", ":", "valid_losses", "}", ",", "fw", ")", "\n", "", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"model.pt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.test": [[214, 267], ["absa_data_utils.AeProcessor", "data_utils.AeProcessor.get_labels", "absa_data_utils.ABSATokenizer.from_pretrained", "data_utils.AeProcessor.get_test_examples", "absa_data_utils.convert_examples_to_features", "logger.info", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load.to", "torch.load.eval", "enumerate", "os.path.join", "os.path.join", "len", "os.path.join", "tuple", "model.detach().cpu().numpy", "label_ids.cpu().numpy.cpu().numpy", "full_logits.extend", "full_label_ids.extend", "open", "enumerate", "json.dump", "torch.no_grad", "torch.no_grad", "torch.load.", "model.tolist", "label_ids.cpu().numpy.tolist", "len", "len", "t.to", "model.detach().cpu", "label_ids.cpu().numpy.cpu", "range", "range", "range", "int", "len", "len", "len", "model.detach", "ex.guid.split"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_labels", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_test_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.convert_examples_to_features"], ["", "", "def", "test", "(", "args", ",", "new_dirs", "=", "None", ",", "dev_as_test", "=", "None", ")", ":", "# Load a trained model that you have fine-tuned (we assume evaluate on cpu)    ", "\n", "    ", "processor", "=", "data_utils", ".", "AeProcessor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "ABSATokenizer", ".", "from_pretrained", "(", "modelconfig", ".", "MODEL_ARCHIVE_MAP", "[", "args", ".", "bert_model", "]", ")", "\n", "if", "dev_as_test", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'dev_as_test'", ")", "\n", "", "else", ":", "\n", "        ", "data_dir", "=", "args", ".", "data_dir", "\n", "", "eval_examples", "=", "processor", ".", "get_test_examples", "(", "data_dir", ")", "\n", "eval_features", "=", "data_utils", ".", "convert_examples_to_features", "(", "eval_examples", ",", "label_list", ",", "args", ".", "max_seq_length", ",", "tokenizer", ",", "\"ae\"", ")", "\n", "\n", "logger", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "eval_batch_size", ")", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "eval_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_segment_ids", ",", "all_input_mask", ",", "all_label_ids", ")", "\n", "# Run prediction for full data", "\n", "eval_sampler", "=", "SequentialSampler", "(", "eval_data", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_data", ",", "sampler", "=", "eval_sampler", ",", "batch_size", "=", "args", ".", "eval_batch_size", ")", "\n", "\n", "model", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"model.pt\"", ")", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "full_logits", "=", "[", "]", "\n", "full_label_ids", "=", "[", "]", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "eval_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", ")", "for", "t", "in", "batch", ")", "\n", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ")", "\n", "\n", "", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_ids", "=", "label_ids", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "full_logits", ".", "extend", "(", "logits", ".", "tolist", "(", ")", ")", "\n", "full_label_ids", ".", "extend", "(", "label_ids", ".", "tolist", "(", ")", ")", "\n", "\n", "", "output_eval_json", "=", "os", ".", "path", ".", "join", "(", "new_dirs", ",", "\"predictions.json\"", ")", "\n", "with", "open", "(", "output_eval_json", ",", "\"w\"", ")", "as", "fw", ":", "\n", "        ", "assert", "len", "(", "full_logits", ")", "==", "len", "(", "eval_examples", ")", "\n", "#sort by original order for evaluation", "\n", "recs", "=", "{", "}", "\n", "for", "qx", ",", "ex", "in", "enumerate", "(", "eval_examples", ")", ":", "\n", "            ", "recs", "[", "int", "(", "ex", ".", "guid", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "]", "=", "{", "\"sentence\"", ":", "ex", ".", "text_a", ",", "\"idx_map\"", ":", "ex", ".", "idx_map", ",", "\"logit\"", ":", "full_logits", "[", "qx", "]", "[", "1", ":", "]", "}", "#skip the [CLS] tag.", "\n", "", "full_logits", "=", "[", "recs", "[", "qx", "]", "[", "\"logit\"", "]", "for", "qx", "in", "range", "(", "len", "(", "full_logits", ")", ")", "]", "\n", "raw_X", "=", "[", "recs", "[", "qx", "]", "[", "\"sentence\"", "]", "for", "qx", "in", "range", "(", "len", "(", "eval_examples", ")", ")", "]", "\n", "idx_map", "=", "[", "recs", "[", "qx", "]", "[", "\"idx_map\"", "]", "for", "qx", "in", "range", "(", "len", "(", "eval_examples", ")", ")", "]", "\n", "json", ".", "dump", "(", "{", "\"logits\"", ":", "full_logits", ",", "\"raw_X\"", ":", "raw_X", ",", "\"idx_map\"", ":", "idx_map", "}", ",", "fw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.main": [[268, 343], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "os.makedirs", "run_ae.train", "run_ae.test"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.train", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.run_ae.test"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--bert_model\"", ",", "default", "=", "'bert-base'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"The input data dir containing json files.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model predictions and checkpoints will be written.\"", ")", "\n", "\n", "## Other parameters", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "\n", "default", "=", "128", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The maximum total input sequence length after WordPiece tokenization. \\n\"", "\n", "\"Sequences longer than this will be truncated, and sequences shorter \\n\"", "\n", "\"than this will be padded.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_valid\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_eval\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run eval on the dev set.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "\n", "default", "=", "32", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_batch_size\"", ",", "\n", "default", "=", "8", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for eval.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "\n", "default", "=", "3e-5", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--num_train_epochs\"", ",", "\n", "default", "=", "6", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_proportion\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Proportion of training to perform linear learning rate warmup for. \"", "\n", "\"E.g., 0.1 = 10%% of training.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"random seed for initialization\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "args", ".", "do_train", ":", "\n", "        ", "train", "(", "args", ")", "\n", "", "if", "args", ".", "do_eval", ":", "\n", "        ", "test", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.ABSATokenizer.subword_tokenize": [[25, 38], ["enumerate", "absa_data_utils.ABSATokenizer.wordpiece_tokenizer.tokenize", "enumerate", "split_tokens.append", "idx_map.append", "split_labels.append", "split_labels.append"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.tokenize"], ["    ", "def", "subword_tokenize", "(", "self", ",", "tokens", ",", "labels", ")", ":", "# for AE", "\n", "        ", "split_tokens", ",", "split_labels", "=", "[", "]", ",", "[", "]", "\n", "idx_map", "=", "[", "]", "\n", "for", "ix", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "sub_tokens", "=", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", "\n", "for", "jx", ",", "sub_token", "in", "enumerate", "(", "sub_tokens", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "if", "labels", "[", "ix", "]", "==", "\"B\"", "and", "jx", ">", "0", ":", "\n", "                    ", "split_labels", ".", "append", "(", "\"I\"", ")", "\n", "", "else", ":", "\n", "                    ", "split_labels", ".", "append", "(", "labels", "[", "ix", "]", ")", "\n", "", "idx_map", ".", "append", "(", "ix", ")", "\n", "", "", "return", "split_tokens", ",", "split_labels", ",", "idx_map", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputExample.__init__": [[42, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructs a InputExample.\n\n        Args:\n            guid: Unique id for the example.\n            text_a: string. The untokenized text of the first sequence. For single\n            sequence tasks, only this sequence must be specified.\n            text_b: (Optional) string. The untokenized text of the second sequence.\n            Only must be specified for sequence pair tasks.\n            label: (Optional) string. The label of the example. This should be\n            specified for train and dev examples, but not for test examples.\n        \"\"\"", "\n", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.InputFeatures.__init__": [[63, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_id", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label_id", "=", "label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor.get_train_examples": [[73, 76], ["NotImplementedError"], "methods", ["None"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor.get_dev_examples": [[77, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor.get_test_examples": [[81, 84], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"Gets a collection of `InputExample`s for the test set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor.get_labels": [[85, 88], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the list of labels for this data set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor._read_json": [[89, 94], ["open", "json.load"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_json", "(", "cls", ",", "input_file", ")", ":", "\n", "        ", "\"\"\"Reads a json file for tasks in sentiment analysis.\"\"\"", "\n", "with", "open", "(", "input_file", ")", "as", "f", ":", "\n", "            ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AeProcessor.get_train_examples": [[99, 103], ["absa_data_utils.AeProcessor._create_examples", "absa_data_utils.AeProcessor._read_json", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor._create_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor._read_json"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ",", "fn", "=", "\"train.json\"", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_json", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fn", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AeProcessor.get_dev_examples": [[104, 108], ["absa_data_utils.AeProcessor._create_examples", "absa_data_utils.AeProcessor._read_json", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor._create_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor._read_json"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ",", "fn", "=", "\"dev.json\"", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_json", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fn", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AeProcessor.get_test_examples": [[109, 113], ["absa_data_utils.AeProcessor._create_examples", "absa_data_utils.AeProcessor._read_json", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor._create_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor._read_json"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ",", "fn", "=", "\"test.json\"", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_json", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fn", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AeProcessor.get_labels": [[114, 117], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"O\"", ",", "\"B\"", ",", "\"I\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AeProcessor._create_examples": [[118, 128], ["enumerate", "examples.append", "absa_data_utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "ids", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "ids", ")", "\n", "text_a", "=", "lines", "[", "ids", "]", "[", "'sentence'", "]", "\n", "label", "=", "lines", "[", "ids", "]", "[", "'label'", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_train_examples": [[133, 137], ["absa_data_utils.AscProcessor._create_examples", "absa_data_utils.AscProcessor._read_json", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor._create_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor._read_json"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ",", "fn", "=", "\"train.json\"", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_json", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fn", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_dev_examples": [[138, 142], ["absa_data_utils.AscProcessor._create_examples", "absa_data_utils.AscProcessor._read_json", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor._create_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor._read_json"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ",", "fn", "=", "\"dev.json\"", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_json", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fn", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_test_examples": [[143, 147], ["absa_data_utils.AscProcessor._create_examples", "absa_data_utils.AscProcessor._read_json", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor._create_examples", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.DataProcessor._read_json"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ",", "fn", "=", "\"test.json\"", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_json", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fn", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor.get_labels": [[148, 151], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"positive\"", ",", "\"negative\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.AscProcessor._create_examples": [[152, 163], ["enumerate", "examples.append", "absa_data_utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "ids", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "ids", ")", "\n", "text_a", "=", "lines", "[", "ids", "]", "[", "'term'", "]", "\n", "text_b", "=", "lines", "[", "ids", "]", "[", "'sentence'", "]", "\n", "label", "=", "lines", "[", "ids", "]", "[", "'polarity'", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.convert_examples_to_features": [[164, 241], ["enumerate", "enumerate", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "features.append", "tokenizer.tokenize", "tokenizer.subword_tokenize", "tokenizer.tokenize", "absa_data_utils._truncate_seq_pair", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "segment_ids.append", "len", "len", "len", "absa_data_utils.InputFeatures", "len", "tokens.append", "segment_ids.append", "len", "len", "token.lower", "len"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils.ABSATokenizer.subword_tokenize", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils._truncate_seq_pair"], ["", "", "def", "convert_examples_to_features", "(", "examples", ",", "label_list", ",", "max_seq_length", ",", "tokenizer", ",", "mode", ")", ":", "\n", "    ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "#check later if we can merge this function with the SQuAD preprocessing ", "\n", "label_map", "=", "{", "}", "\n", "for", "(", "i", ",", "label", ")", "in", "enumerate", "(", "label_list", ")", ":", "\n", "        ", "label_map", "[", "label", "]", "=", "i", "\n", "\n", "", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "        ", "if", "mode", "!=", "\"ae\"", ":", "\n", "            ", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "", "else", ":", "#only do subword tokenization.", "\n", "            ", "tokens_a", ",", "labels_a", ",", "example", ".", "idx_map", "=", "tokenizer", ".", "subword_tokenize", "(", "[", "token", ".", "lower", "(", ")", "for", "token", "in", "example", ".", "text_a", "]", ",", "example", ".", "label", ")", "\n", "\n", "", "tokens_b", "=", "None", "\n", "if", "example", ".", "text_b", ":", "\n", "            ", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_b", ")", "\n", "\n", "", "if", "tokens_b", ":", "\n", "# Modifies `tokens_a` and `tokens_b` in place so that the total", "\n", "# length is less than the specified length.", "\n", "# Account for [CLS], [SEP], [SEP] with \"- 3\"", "\n", "            ", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_seq_length", "-", "3", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "            ", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "                ", "tokens_a", "=", "tokens_a", "[", "0", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "", "", "tokens", "=", "[", "]", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "tokens_a", ":", "\n", "            ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "if", "tokens_b", ":", "\n", "            ", "for", "token", "in", "tokens_b", ":", "\n", "                ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "while", "len", "(", "input_ids", ")", "<", "max_seq_length", ":", "\n", "            ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "if", "mode", "!=", "\"ae\"", ":", "\n", "            ", "label_id", "=", "label_map", "[", "example", ".", "label", "]", "\n", "", "else", ":", "\n", "            ", "label_id", "=", "[", "-", "1", "]", "*", "len", "(", "input_ids", ")", "#-1 is the index to ignore", "\n", "#truncate the label length if it exceeds the limit.", "\n", "lb", "=", "[", "label_map", "[", "label", "]", "for", "label", "in", "labels_a", "]", "\n", "if", "len", "(", "lb", ")", ">", "max_seq_length", "-", "2", ":", "\n", "                ", "lb", "=", "lb", "[", "0", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "", "label_id", "[", "1", ":", "len", "(", "lb", ")", "+", "1", "]", "=", "lb", "\n", "\n", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "label_id", "=", "label_id", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.src.absa_data_utils._truncate_seq_pair": [[243, 258], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["None"], ["", "def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "tokens_b", ".", "pop", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.eval.evaluate_ae.label_rest_xml": [[11, 72], ["xml.parse", "ET.parse.getroot", "enumerate", "ET.parse.write", "dom.getroot.iter", "xml.Element", "enumerate", "sent.append", "len", "xml.Element", "str", "str", "ET.Element.append", "sent.find", "len", "len", "len", "xml.Element", "str", "str", "ET.Element.append", "sent.find", "sent.find", "len", "xml.Element", "str", "str", "ET.Element.append", "sent.find", "len", "xml.Element", "str", "str", "ET.Element.append", "sent.find", "len", "sent.find"], "function", ["None"], ["def", "label_rest_xml", "(", "fn", ",", "output_fn", ",", "corpus", ",", "label", ")", ":", "\n", "    ", "dom", "=", "ET", ".", "parse", "(", "fn", ")", "\n", "root", "=", "dom", ".", "getroot", "(", ")", "\n", "pred_y", "=", "[", "]", "\n", "for", "zx", ",", "sent", "in", "enumerate", "(", "root", ".", "iter", "(", "\"sentence\"", ")", ")", ":", "\n", "        ", "tokens", "=", "corpus", "[", "zx", "]", "\n", "lb", "=", "label", "[", "zx", "]", "\n", "opins", "=", "ET", ".", "Element", "(", "\"Opinions\"", ")", "\n", "token_idx", ",", "pt", ",", "tag_on", "=", "0", ",", "0", ",", "False", "\n", "start", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "for", "ix", ",", "c", "in", "enumerate", "(", "sent", ".", "find", "(", "'text'", ")", ".", "text", ")", ":", "\n", "            ", "if", "token_idx", "<", "len", "(", "tokens", ")", "and", "pt", ">=", "len", "(", "tokens", "[", "token_idx", "]", ")", ":", "\n", "                ", "pt", "=", "0", "\n", "token_idx", "+=", "1", "\n", "\n", "", "if", "token_idx", "<", "len", "(", "tokens", ")", "and", "lb", "[", "token_idx", "]", "==", "1", "and", "pt", "==", "0", "and", "c", "!=", "' '", ":", "\n", "                ", "if", "tag_on", ":", "\n", "                    ", "end", "=", "ix", "\n", "tag_on", "=", "False", "\n", "opin", "=", "ET", ".", "Element", "(", "\"Opinion\"", ")", "\n", "opin", ".", "attrib", "[", "'target'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "start", "=", "ix", "\n", "tag_on", "=", "True", "\n", "", "elif", "token_idx", "<", "len", "(", "tokens", ")", "and", "lb", "[", "token_idx", "]", "==", "2", "and", "pt", "==", "0", "and", "c", "!=", "' '", "and", "not", "tag_on", ":", "\n", "                ", "start", "=", "ix", "\n", "tag_on", "=", "True", "\n", "", "elif", "token_idx", "<", "len", "(", "tokens", ")", "and", "(", "lb", "[", "token_idx", "]", "==", "0", "or", "lb", "[", "token_idx", "]", "==", "1", ")", "and", "tag_on", "and", "pt", "==", "0", ":", "\n", "                ", "end", "=", "ix", "\n", "tag_on", "=", "False", "\n", "opin", "=", "ET", ".", "Element", "(", "\"Opinion\"", ")", "\n", "opin", ".", "attrib", "[", "'target'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "elif", "token_idx", ">=", "len", "(", "tokens", ")", "and", "tag_on", ":", "\n", "                ", "end", "=", "ix", "\n", "tag_on", "=", "False", "\n", "opin", "=", "ET", ".", "Element", "(", "\"Opinion\"", ")", "\n", "opin", ".", "attrib", "[", "'target'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "if", "c", "==", "' '", ":", "\n", "                ", "pass", "\n", "", "elif", "tokens", "[", "token_idx", "]", "[", "pt", ":", "pt", "+", "2", "]", "==", "'``'", "or", "tokens", "[", "token_idx", "]", "[", "pt", ":", "pt", "+", "2", "]", "==", "\"''\"", ":", "\n", "                ", "pt", "+=", "2", "\n", "", "else", ":", "\n", "                ", "pt", "+=", "1", "\n", "", "", "if", "tag_on", ":", "\n", "            ", "tag_on", "=", "False", "\n", "end", "=", "len", "(", "sent", ".", "find", "(", "'text'", ")", ".", "text", ")", "\n", "opin", "=", "ET", ".", "Element", "(", "\"Opinion\"", ")", "\n", "opin", ".", "attrib", "[", "'target'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "sent", ".", "append", "(", "opins", ")", "\n", "", "dom", ".", "write", "(", "output_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.eval.evaluate_ae.label_laptop_xml": [[73, 134], ["xml.parse", "ET.parse.getroot", "enumerate", "ET.parse.write", "dom.getroot.iter", "xml.Element", "enumerate", "sent.append", "len", "xml.Element", "str", "str", "ET.Element.append", "sent.find", "len", "len", "len", "xml.Element", "str", "str", "ET.Element.append", "ord", "sent.find", "sent.find", "len", "xml.Element", "str", "str", "ET.Element.append", "sent.find", "len", "xml.Element", "str", "str", "ET.Element.append", "sent.find", "len", "sent.find"], "function", ["None"], ["", "def", "label_laptop_xml", "(", "fn", ",", "output_fn", ",", "corpus", ",", "label", ")", ":", "\n", "    ", "dom", "=", "ET", ".", "parse", "(", "fn", ")", "\n", "root", "=", "dom", ".", "getroot", "(", ")", "\n", "pred_y", "=", "[", "]", "\n", "for", "zx", ",", "sent", "in", "enumerate", "(", "root", ".", "iter", "(", "\"sentence\"", ")", ")", ":", "\n", "        ", "tokens", "=", "corpus", "[", "zx", "]", "\n", "lb", "=", "label", "[", "zx", "]", "\n", "opins", "=", "ET", ".", "Element", "(", "\"aspectTerms\"", ")", "\n", "token_idx", ",", "pt", ",", "tag_on", "=", "0", ",", "0", ",", "False", "\n", "start", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "for", "ix", ",", "c", "in", "enumerate", "(", "sent", ".", "find", "(", "'text'", ")", ".", "text", ")", ":", "\n", "            ", "if", "token_idx", "<", "len", "(", "tokens", ")", "and", "pt", ">=", "len", "(", "tokens", "[", "token_idx", "]", ")", ":", "\n", "                ", "pt", "=", "0", "\n", "token_idx", "+=", "1", "\n", "\n", "", "if", "token_idx", "<", "len", "(", "tokens", ")", "and", "lb", "[", "token_idx", "]", "==", "1", "and", "pt", "==", "0", "and", "c", "!=", "' '", ":", "\n", "                ", "if", "tag_on", ":", "\n", "                    ", "end", "=", "ix", "\n", "tag_on", "=", "False", "\n", "opin", "=", "ET", ".", "Element", "(", "\"aspectTerm\"", ")", "\n", "opin", ".", "attrib", "[", "'term'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "start", "=", "ix", "\n", "tag_on", "=", "True", "\n", "", "elif", "token_idx", "<", "len", "(", "tokens", ")", "and", "lb", "[", "token_idx", "]", "==", "2", "and", "pt", "==", "0", "and", "c", "!=", "' '", "and", "not", "tag_on", ":", "\n", "                ", "start", "=", "ix", "\n", "tag_on", "=", "True", "\n", "", "elif", "token_idx", "<", "len", "(", "tokens", ")", "and", "(", "lb", "[", "token_idx", "]", "==", "0", "or", "lb", "[", "token_idx", "]", "==", "1", ")", "and", "tag_on", "and", "pt", "==", "0", ":", "\n", "                ", "end", "=", "ix", "\n", "tag_on", "=", "False", "\n", "opin", "=", "ET", ".", "Element", "(", "\"aspectTerm\"", ")", "\n", "opin", ".", "attrib", "[", "'term'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "elif", "token_idx", ">=", "len", "(", "tokens", ")", "and", "tag_on", ":", "\n", "                ", "end", "=", "ix", "\n", "tag_on", "=", "False", "\n", "opin", "=", "ET", ".", "Element", "(", "\"aspectTerm\"", ")", "\n", "opin", ".", "attrib", "[", "'term'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "if", "c", "==", "' '", "or", "ord", "(", "c", ")", "==", "160", ":", "\n", "                ", "pass", "\n", "", "elif", "tokens", "[", "token_idx", "]", "[", "pt", ":", "pt", "+", "2", "]", "==", "'``'", "or", "tokens", "[", "token_idx", "]", "[", "pt", ":", "pt", "+", "2", "]", "==", "\"''\"", ":", "\n", "                ", "pt", "+=", "2", "\n", "", "else", ":", "\n", "                ", "pt", "+=", "1", "\n", "", "", "if", "tag_on", ":", "\n", "            ", "tag_on", "=", "False", "\n", "end", "=", "len", "(", "sent", ".", "find", "(", "'text'", ")", ".", "text", ")", "\n", "opin", "=", "ET", ".", "Element", "(", "\"aspectTerm\"", ")", "\n", "opin", ".", "attrib", "[", "'term'", "]", "=", "sent", ".", "find", "(", "'text'", ")", ".", "text", "[", "start", ":", "end", "]", "\n", "opin", ".", "attrib", "[", "'from'", "]", "=", "str", "(", "start", ")", "\n", "opin", ".", "attrib", "[", "'to'", "]", "=", "str", "(", "end", ")", "\n", "opins", ".", "append", "(", "opin", ")", "\n", "", "sent", ".", "append", "(", "opins", ")", "\n", "", "dom", ".", "write", "(", "output_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.eval.evaluate_ae.evaluate": [[135, 160], ["enumerate", "open", "json.load", "enumerate", "y_pred.append", "command.split.split", "evaluate_ae.label_rest_xml", "subprocess.check_output().split", "float", "len", "numpy.argmax", "command.split.split", "evaluate_ae.label_laptop_xml", "subprocess.check_output().split", "float", "subprocess.check_output", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.eval.evaluate_ae.label_rest_xml", "home.repos.pwc.inspect_result.IMPLabUniPr_Adversarial-Training-for-ABSA.eval.evaluate_ae.label_laptop_xml"], ["", "def", "evaluate", "(", "pred_fn", ",", "command", ",", "template", ")", ":", "\n", "    ", "with", "open", "(", "pred_fn", ")", "as", "f", ":", "\n", "        ", "pred_json", "=", "json", ".", "load", "(", "f", ")", "\n", "", "y_pred", "=", "[", "]", "\n", "for", "ix", ",", "logit", "in", "enumerate", "(", "pred_json", "[", "\"logits\"", "]", ")", ":", "\n", "        ", "pred", "=", "[", "0", "]", "*", "len", "(", "pred_json", "[", "\"raw_X\"", "]", "[", "ix", "]", ")", "\n", "for", "jx", ",", "idx", "in", "enumerate", "(", "pred_json", "[", "\"idx_map\"", "]", "[", "ix", "]", ")", ":", "\n", "            ", "lb", "=", "np", ".", "argmax", "(", "logit", "[", "jx", "]", ")", "\n", "if", "lb", "==", "1", ":", "#B", "\n", "                ", "pred", "[", "idx", "]", "=", "1", "\n", "", "elif", "lb", "==", "2", ":", "#I", "\n", "                ", "if", "pred", "[", "idx", "]", "==", "0", ":", "#only when O->I (I->I and B->I ignored)", "\n", "                    ", "pred", "[", "idx", "]", "=", "2", "\n", "", "", "", "y_pred", ".", "append", "(", "pred", ")", "\n", "\n", "", "if", "'REST'", "in", "command", ":", "\n", "        ", "command", "=", "command", ".", "split", "(", ")", "\n", "label_rest_xml", "(", "template", ",", "command", "[", "6", "]", ",", "pred_json", "[", "\"raw_X\"", "]", ",", "y_pred", ")", "\n", "acc", "=", "check_output", "(", "command", ")", ".", "split", "(", ")", "\n", "return", "float", "(", "acc", "[", "9", "]", "[", "10", ":", "]", ")", "\n", "", "elif", "'Laptops'", "in", "command", ":", "\n", "        ", "command", "=", "command", ".", "split", "(", ")", "\n", "label_laptop_xml", "(", "template", ",", "command", "[", "4", "]", ",", "pred_json", "[", "\"raw_X\"", "]", ",", "y_pred", ")", "\n", "acc", "=", "check_output", "(", "command", ")", ".", "split", "(", ")", "\n", "return", "float", "(", "acc", "[", "15", "]", ")", "\n", "\n"]]}