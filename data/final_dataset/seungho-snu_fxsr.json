{"home.repos.pwc.inspect_result.seungho-snu_fxsr.codes.test.fxsr": [[12, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "options.parse", "options.dict_to_nonedict", "utils.mkdirs", "utils.setup_logger", "logging.getLogger", "logging.getLogger.info", "sorted", "models.SR_model.SRModel", "options.dict2str", "opt[].items", "data.create_dataset", "data.create_dataloader", "logging.getLogger.info", "test_loaders.append", "logging.getLogger.info", "os.join", "utils.mkdir", "argparse.ArgumentParser.parse_args", "models.SR_model.SRModel.feed_data", "models.SR_model.SRModel.test", "models.SR_model.SRModel.get_current_visuals", "utils.tensor2img", "utils.save_img", "logging.getLogger.info", "opt[].items", "len", "os.splitext", "os.join", "os.join", "os.basename"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.parse", "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.mkdirs", "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.setup_logger", "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.dict2str", "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.__init__.create_dataset", "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.__init__.create_dataloader", "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.mkdir", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.SR_model.SRModel.test", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.tensor2img", "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.save_img"], ["def", "fxsr", "(", ")", ":", "\n", "#### options", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--T_ctrl'", ",", "type", "=", "float", ",", "default", "=", "0.8", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-opt'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'Path to options YMAL file.'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "T_ctrl_temp", "=", "opt", ".", "T_ctrl", "\n", "opt", "=", "option", ".", "parse", "(", "parser", ".", "parse_args", "(", ")", ".", "opt", ",", "is_train", "=", "False", ")", "\n", "opt", "=", "option", ".", "dict_to_nonedict", "(", "opt", ")", "\n", "opt", ".", "T_ctrl", "=", "T_ctrl_temp", "\n", "T_ctrl_str", "=", "'%03d'", "%", "(", "opt", ".", "T_ctrl", "*", "100", ")", "\n", "opt", "[", "'name'", "]", "=", "opt", "[", "'name'", "]", "+", "'_t'", "+", "T_ctrl_str", "\n", "opt", "[", "'path'", "]", "[", "'results_root'", "]", "=", "opt", "[", "'path'", "]", "[", "'results_root'", "]", "+", "'_t'", "+", "T_ctrl_str", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "opt", "[", "'path'", "]", "[", "'log'", "]", "+", "'_t'", "+", "T_ctrl_str", "\n", "\n", "util", ".", "mkdirs", "(", "\n", "(", "path", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", "\n", "if", "not", "key", "==", "'experiments_root'", "and", "'pretrain_model'", "not", "in", "key", "and", "'resume'", "not", "in", "key", ")", ")", "\n", "util", ".", "setup_logger", "(", "'base'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'test_'", "+", "opt", "[", "'name'", "]", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "option", ".", "dict2str", "(", "opt", ")", ")", "\n", "\n", "#### Create test dataset and dataloader", "\n", "test_loaders", "=", "[", "]", "\n", "for", "phase", ",", "dataset_opt", "in", "sorted", "(", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ")", ":", "\n", "        ", "test_set", "=", "create_dataset", "(", "dataset_opt", ")", "\n", "test_loader", "=", "create_dataloader", "(", "test_set", ")", "\n", "logger", ".", "info", "(", "'Number of test images in [{:s}]: {:d}'", ".", "format", "(", "dataset_opt", "[", "'name'", "]", ",", "len", "(", "test_set", ")", ")", ")", "\n", "test_loaders", ".", "append", "(", "test_loader", ")", "\n", "\n", "", "model", "=", "SRModel", "(", "opt", ")", "\n", "\n", "for", "test_loader", "in", "test_loaders", ":", "\n", "        ", "test_set_name", "=", "test_loader", ".", "dataset", ".", "opt", "[", "'name'", "]", "\n", "logger", ".", "info", "(", "'\\nTesting [{:s}]...'", ".", "format", "(", "test_set_name", ")", ")", "\n", "dataset_dir", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'results_root'", "]", ",", "test_set_name", ")", "\n", "util", ".", "mkdir", "(", "dataset_dir", ")", "\n", "\n", "for", "data", "in", "test_loader", ":", "\n", "            ", "need_GT", "=", "False", "if", "test_loader", ".", "dataset", ".", "opt", "[", "'dataroot_GT'", "]", "is", "None", "else", "True", "\n", "model", ".", "feed_data", "(", "data", ",", "need_GT", "=", "need_GT", ")", "\n", "img_path", "=", "data", "[", "'GT_path'", "]", "[", "0", "]", "if", "need_GT", "else", "data", "[", "'LQ_path'", "]", "[", "0", "]", "\n", "img_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "model", ".", "test", "(", "opt", ",", "logger", ",", "img_name", ")", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", "need_GT", "=", "need_GT", ")", "\n", "\n", "sr_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'SR'", "]", ")", "# uint8", "\n", "\n", "# save images", "\n", "suffix", "=", "opt", "[", "'suffix'", "]", "\n", "if", "suffix", ":", "\n", "                ", "save_img_path", "=", "osp", ".", "join", "(", "dataset_dir", ",", "img_name", "+", "suffix", "+", "'.png'", ")", "\n", "", "else", ":", "\n", "                ", "save_img_path", "=", "osp", ".", "join", "(", "dataset_dir", ",", "img_name", "+", "'.png'", ")", "\n", "", "util", ".", "save_img", "(", "sr_img", ",", "save_img_path", ")", "\n", "\n", "logger", ".", "info", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.OrderedYaml": [[17, 30], ["Dumper.add_representer", "Loader.add_constructor", "dumper.represent_dict", "collections.OrderedDict", "data.items", "loader.construct_pairs"], "function", ["None"], ["", "def", "OrderedYaml", "(", ")", ":", "\n", "    ", "'''yaml orderedDict support'''", "\n", "_mapping_tag", "=", "yaml", ".", "resolver", ".", "BaseResolver", ".", "DEFAULT_MAPPING_TAG", "\n", "\n", "def", "dict_representer", "(", "dumper", ",", "data", ")", ":", "\n", "        ", "return", "dumper", ".", "represent_dict", "(", "data", ".", "items", "(", ")", ")", "\n", "\n", "", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n", "", "Dumper", ".", "add_representer", "(", "OrderedDict", ",", "dict_representer", ")", "\n", "Loader", ".", "add_constructor", "(", "_mapping_tag", ",", "dict_constructor", ")", "\n", "return", "Loader", ",", "Dumper", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.get_timestamp": [[31, 33], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.mkdir": [[35, 38], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.mkdirs": [[40, 46], ["isinstance", "util.mkdir", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.mkdir", "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.setup_logger": [[47, 62], ["logging.getLogger", "logging.Formatter", "logging.getLogger.setLevel", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.get_timestamp"], ["", "", "", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ",", "tofile", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n", "lg", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d - %(levelname)s: %(message)s'", ",", "\n", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "lg", ".", "setLevel", "(", "level", ")", "\n", "if", "tofile", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "phase", "+", "'_{}.log'", ".", "format", "(", "get_timestamp", "(", ")", ")", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "fh", ")", "\n", "", "if", "screen", ":", "\n", "        ", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "sh", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.tensor2img": [[69, 94], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.utils.util.save_img": [[96, 98], ["cv2.imwrite"], "function", ["None"], ["", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.SR_model.SRModel.__init__": [[12, 22], ["base_model.BaseModel.__init__", "models.RRDBNet", "SR_model.SRModel.netG.to", "SR_model.SRModel.print_network", "SR_model.SRModel.load"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__init__", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.print_network", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SRModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "self", ".", "rank", "=", "-", "1", "# non dist training", "\n", "opt_net", "=", "opt", "[", "'network_G'", "]", "\n", "self", ".", "netG", "=", "RRDBNet_arch", ".", "RRDBNet", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "nb", "=", "opt_net", "[", "'nb'", "]", ",", "upscale", "=", "opt_net", "[", "'scale'", "]", ")", "\n", "self", ".", "netG", "=", "self", ".", "netG", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "print_network", "(", ")", "\n", "self", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.SR_model.SRModel.feed_data": [[23, 28], ["data[].to", "data[].to"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LQ'", "]", ".", "to", "(", "self", ".", "device", ")", "# LQ", "\n", "\n", "if", "need_GT", ":", "\n", "            ", "self", ".", "real_H", "=", "data", "[", "'GT'", "]", ".", "to", "(", "self", ".", "device", ")", "# GT", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.SR_model.SRModel.test": [[29, 44], ["SR_model.SRModel.netG.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "SR_model.SRModel.netG", "torch.ones.to", "torch.ones.to"], "methods", ["None"], ["", "", "def", "test", "(", "self", ",", "opt", ",", "logger", ",", "img_name", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "texture_gain", "=", "opt", ".", "T_ctrl", "\n", "image_size", "=", "self", ".", "var_L", ".", "shape", "\n", "w", "=", "image_size", "[", "2", "]", "\n", "h", "=", "image_size", "[", "3", "]", "\n", "gain_channel", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", ",", "w", ",", "h", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "1", ")", ":", "\n", "                ", "t", "=", "gain_channel", "[", "i", ",", "0", ",", ":", ",", ":", "]", "*", "self", ".", "texture_gain", "\n", "gain_channel", "[", "i", ",", "0", ",", ":", ",", ":", "]", "=", "t", "\n", "\n", "", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "(", "self", ".", "var_L", ",", "gain_channel", ".", "to", "(", "self", ".", "device", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.SR_model.SRModel.get_current_visuals": [[45, 52], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "SR_model.SRModel.var_L.detach", "SR_model.SRModel.fake_H.detach", "SR_model.SRModel.real_H.detach"], "methods", ["None"], ["", "", "def", "get_current_visuals", "(", "self", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LQ'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'SR'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_GT", ":", "\n", "            ", "out_dict", "[", "'GT'", "]", "=", "self", ".", "real_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.SR_model.SRModel.print_network": [[53, 63], ["SR_model.SRModel.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "", "if", "self", ".", "rank", "<=", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.SR_model.SRModel.load": [[64, 69], ["logger.info", "SR_model.SRModel.load_network"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load_network"], ["", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ",", "self", ".", "opt", "[", "'path'", "]", "[", "'strict_load'", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.__init__": [[8, 14], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", "[", "'gpu_ids'", "]", "is", "not", "None", "else", "'cpu'", ")", "\n", "self", ".", "is_train", "=", "opt", "[", "'is_train'", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.feed_data": [[15, 17], ["None"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.optimize_parameters": [[18, 20], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.get_current_visuals": [[21, 23], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.get_current_losses": [[24, 26], ["None"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.print_network": [[27, 29], ["None"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.save": [[30, 32], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load": [[33, 35], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.get_network_description": [[36, 43], ["str", "sum", "isinstance", "isinstance", "map", "network.parameters", "x.numel"], "methods", ["None"], ["", "def", "get_network_description", "(", "self", ",", "network", ")", ":", "\n", "        ", "'''Get the string and total parameters of the network'''", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "network", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "s", "=", "str", "(", "network", ")", "\n", "n", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ")", "\n", "return", "s", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load_network": [[44, 55], ["torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.items", "network.load_state_dict", "isinstance", "isinstance", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load"], ["", "def", "load_network", "(", "self", ",", "load_path", ",", "network", ",", "strict", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "network", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "load_net", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "load_net_clean", "=", "OrderedDict", "(", ")", "# remove unnecessary 'module.'", "\n", "for", "k", ",", "v", "in", "load_net", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "load_net_clean", "[", "k", "[", "7", ":", "]", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "load_net_clean", "[", "k", "]", "=", "v", "\n", "", "", "network", ".", "load_state_dict", "(", "load_net_clean", ",", "strict", "=", "strict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.SFTLayer.__init__": [[8, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "32", ")", ":", "\n", "        ", "super", "(", "SFTLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "SFT_scale_conv0", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "1", ")", "\n", "self", ".", "SFT_scale_conv1", "=", "nn", ".", "Conv2d", "(", "32", ",", "nf", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv0", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv1", "=", "nn", ".", "Conv2d", "(", "32", ",", "nf", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.SFTLayer.forward": [[15, 20], ["RRDBNet_arch.SFTLayer.SFT_scale_conv1", "RRDBNet_arch.SFTLayer.SFT_shift_conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "RRDBNet_arch.SFTLayer.SFT_scale_conv0", "RRDBNet_arch.SFTLayer.SFT_shift_conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x[0]: fea; x[1]: cond", "\n", "        ", "scale", "=", "self", ".", "SFT_scale_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_scale_conv0", "(", "x", "[", "1", "]", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "shift", "=", "self", ".", "SFT_shift_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_shift_conv0", "(", "x", "[", "1", "]", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "return", "x", "[", "0", "]", "*", "(", "scale", "+", "1", ")", "+", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.ResidualDenseBlock_5C.__init__": [[22, 39], ["torch.Module.__init__", "RRDBNet_arch.SFTLayer", "RRDBNet_arch.SFTLayer", "RRDBNet_arch.SFTLayer", "RRDBNet_arch.SFTLayer", "RRDBNet_arch.SFTLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__init__", "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.module_util.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "sft0", "=", "SFTLayer", "(", "64", ")", "\n", "self", ".", "sft1", "=", "SFTLayer", "(", "32", ")", "\n", "self", ".", "sft2", "=", "SFTLayer", "(", "32", ")", "\n", "self", ".", "sft3", "=", "SFTLayer", "(", "32", ")", "\n", "self", ".", "sft4", "=", "SFTLayer", "(", "32", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "# initialization", "\n", "mutil", ".", "initialize_weights", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "conv4", ",", "self", ".", "conv5", "]", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.ResidualDenseBlock_5C.forward": [[40, 52], ["RRDBNet_arch.ResidualDenseBlock_5C.sft0", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.sft1", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.sft2", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.sft3", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.sft4", "RRDBNet_arch.ResidualDenseBlock_5C.conv5", "RRDBNet_arch.ResidualDenseBlock_5C.conv1", "RRDBNet_arch.ResidualDenseBlock_5C.conv2", "RRDBNet_arch.ResidualDenseBlock_5C.conv3", "RRDBNet_arch.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0_sft", "=", "self", ".", "sft0", "(", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x0_sft", ")", ")", "\n", "x1_sft", "=", "self", ".", "sft1", "(", "(", "x1", ",", "x", "[", "1", "]", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", "[", "0", "]", ",", "x1_sft", ")", ",", "1", ")", ")", ")", "\n", "x2_sft", "=", "self", ".", "sft2", "(", "(", "x2", ",", "x", "[", "1", "]", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", "[", "0", "]", ",", "x1_sft", ",", "x2_sft", ")", ",", "1", ")", ")", ")", "\n", "x3_sft", "=", "self", ".", "sft3", "(", "(", "x3", ",", "x", "[", "1", "]", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", "[", "0", "]", ",", "x1_sft", ",", "x2_sft", ",", "x3_sft", ")", ",", "1", ")", ")", ")", "\n", "x4_sft", "=", "self", ".", "sft4", "(", "(", "x4", ",", "x", "[", "1", "]", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", "[", "0", "]", ",", "x1_sft", ",", "x2_sft", ",", "x3_sft", ",", "x4_sft", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.RRDB.__init__": [[56, 61], ["torch.Module.__init__", "RRDBNet_arch.ResidualDenseBlock_5C", "RRDBNet_arch.ResidualDenseBlock_5C", "RRDBNet_arch.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.RRDB.forward": [[62, 67], ["RRDBNet_arch.RRDB.RDB1", "RRDBNet_arch.RRDB.RDB2", "RRDBNet_arch.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "(", "out", ",", "x", "[", "1", "]", ")", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "(", "out", ",", "x", "[", "1", "]", ")", ")", "\n", "return", "(", "out", "*", "0.2", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.RRDBNet.__init__": [[70, 92], ["torch.Module.__init__", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__init__", "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.module_util.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "nb", ",", "upscale", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "mutil", ".", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upscale", "=", "upscale", "\n", "\n", "#### upsampling", "\n", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "upscale", "==", "8", ":", "\n", "            ", "self", ".", "upconv3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "CondNet", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.RRDBNet_arch.RRDBNet.forward": [[93, 108], ["RRDBNet_arch.RRDBNet.CondNet", "RRDBNet_arch.RRDBNet.conv_first", "RRDBNet_arch.RRDBNet.RRDB_trunk", "RRDBNet_arch.RRDBNet.trunk_conv", "RRDBNet_arch.RRDBNet.lrelu", "RRDBNet_arch.RRDBNet.lrelu", "RRDBNet_arch.RRDBNet.conv_last", "RRDBNet_arch.RRDBNet.upconv1", "RRDBNet_arch.RRDBNet.upconv2", "RRDBNet_arch.RRDBNet.lrelu", "RRDBNet_arch.RRDBNet.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "RRDBNet_arch.RRDBNet.upconv3", "RRDBNet_arch.RRDBNet.HRconv", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "cond", "=", "self", ".", "CondNet", "(", "x", "[", "1", "]", ")", "\n", "fea", "=", "self", ".", "conv_first", "(", "x", "[", "0", "]", ")", "\n", "fea2", "=", "(", "fea", ",", "cond", ")", "\n", "fea3", "=", "self", ".", "RRDB_trunk", "(", "fea2", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "fea3", "[", "0", "]", ")", "\n", "fea", "=", "fea", "+", "trunk", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv1", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv2", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "if", "self", ".", "upscale", "==", "8", ":", "\n", "            ", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv3", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "fea", ")", ")", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.module_util.initialize_weights": [[4, 22], ["isinstance", "net.modules", "isinstance", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.constant_", "torch.constant_"], "function", ["None"], ["def", "initialize_weights", "(", "net_l", ",", "scale", "=", "1", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "net_l", ",", "list", ")", ":", "\n", "        ", "net_l", "=", "[", "net_l", "]", "\n", "", "for", "net", "in", "net_l", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "# for residual block", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.modules.module_util.make_layer": [[24, 29], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["", "", "", "", "def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__init__": [[10, 20], ["torch.Dataset.__init__", "torch.get_image_paths"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__init__", "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util.get_image_paths"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LQDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "paths_LQ", "=", "None", "\n", "self", ".", "LQ_env", "=", "None", "# environment for lmdb", "\n", "\n", "# read image list from lmdb or image files", "\n", "# self.LQ_env, self.paths_LQ = util.get_image_paths(opt['data_type'], opt['dataroot_LQ'])", "\n", "self", ".", "paths_LQ", ",", "self", ".", "sizes_LQ", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'data_type'", "]", ",", "opt", "[", "'dataroot_LQ'", "]", ")", "\n", "assert", "self", ".", "paths_LQ", ",", "'Error: LQ paths are empty.'", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__getitem__": [[21, 39], ["torch.read_img", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.channel_convert", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util.read_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "LQ_path", "=", "None", "\n", "\n", "# get LQ image", "\n", "LQ_path", "=", "self", ".", "paths_LQ", "[", "index", "]", "\n", "img_LQ", "=", "util", ".", "read_img", "(", "self", ".", "LQ_env", ",", "LQ_path", ")", "\n", "H", ",", "W", ",", "C", "=", "img_LQ", ".", "shape", "\n", "\n", "# change color space if necessary", "\n", "if", "self", ".", "opt", "[", "'color'", "]", ":", "\n", "            ", "img_LQ", "=", "util", ".", "channel_convert", "(", "C", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_LQ", "]", ")", "[", "0", "]", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "if", "img_LQ", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img_LQ", "=", "img_LQ", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img_LQ", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LQ", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "'LQ'", ":", "img_LQ", ",", "'LQ_path'", ":", "LQ_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.LQ_dataset.LQDataset.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_LQ", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.__init__.create_dataloader": [[7, 10], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "create_dataloader", "(", "dataset", ")", ":", "\n", "    ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.__init__.create_dataset": [[12, 21], ["D", "logging.getLogger", "logging.getLogger.info"], "function", ["None"], ["", "def", "create_dataset", "(", "dataset_opt", ")", ":", "\n", "    ", "from", "data", ".", "LQ_dataset", "import", "LQDataset", "as", "D", "\n", "\n", "dataset", "=", "D", "(", "dataset_opt", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "'Dataset [{:s} - {:s}] is created.'", ".", "format", "(", "dataset", ".", "__class__", ".", "__name__", ",", "\n", "dataset_opt", "[", "'name'", "]", ")", ")", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util.is_image_file": [[13, 15], ["any", "filename.endswith"], "function", ["None"], ["", "except", "ImportError", ":", "\n", "    ", "from", "yaml", "import", "Loader", ",", "Dumper", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util._get_paths_from_images": [[17, 28], ["os.path.isdir", "sorted", "os.walk", "sorted", "util.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util.is_image_file"], ["", "def", "OrderedYaml", "(", ")", ":", "\n", "    ", "'''yaml orderedDict support'''", "\n", "_mapping_tag", "=", "yaml", ".", "resolver", ".", "BaseResolver", ".", "DEFAULT_MAPPING_TAG", "\n", "\n", "def", "dict_representer", "(", "dumper", ",", "data", ")", ":", "\n", "        ", "return", "dumper", ".", "represent_dict", "(", "data", ".", "items", "(", ")", ")", "\n", "\n", "", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n", "", "Dumper", ".", "add_representer", "(", "OrderedDict", ",", "dict_representer", ")", "\n", "Loader", ".", "add_constructor", "(", "_mapping_tag", ",", "dict_constructor", ")", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util.get_image_paths": [[29, 36], ["sorted", "util._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util._get_paths_from_images"], ["return", "Loader", ",", "Dumper", "\n", "\n", "", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n", "\n", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.data.util.read_img": [[37, 48], ["cv2.imread", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["None"], ["        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n", "", "", "", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ",", "tofile", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.NoneDict.__missing__": [[87, 89], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.parse": [[9, 71], ["print", "opt[].items", "opt[].items", "os.abspath", "open", "yaml.load", "dataset[].endswith", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "str", "phase.split", "dataset.get", "os.expanduser", "dataset[].endswith", "dataset.get", "os.expanduser", "dataset[].endswith", "dataset[].replace", "os.expanduser"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.models.base_model.BaseModel.load"], ["def", "parse", "(", "opt_path", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "with", "open", "(", "opt_path", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "        ", "opt", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "Loader", ")", "\n", "# export CUDA_VISIBLE_DEVICES", "\n", "", "gpu_list", "=", "','", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "opt", "[", "'gpu_ids'", "]", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu_list", "\n", "print", "(", "'export CUDA_VISIBLE_DEVICES='", "+", "gpu_list", ")", "\n", "\n", "opt", "[", "'is_train'", "]", "=", "is_train", "\n", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "        ", "scale", "=", "opt", "[", "'scale'", "]", "\n", "\n", "# datasets", "\n", "", "for", "phase", ",", "dataset", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "phase", "=", "phase", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dataset", "[", "'phase'", "]", "=", "phase", "\n", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "            ", "dataset", "[", "'scale'", "]", "=", "scale", "\n", "", "is_lmdb", "=", "False", "\n", "if", "dataset", ".", "get", "(", "'dataroot_GT'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_GT'", "]", "=", "osp", ".", "expanduser", "(", "dataset", "[", "'dataroot_GT'", "]", ")", "\n", "if", "dataset", "[", "'dataroot_GT'", "]", ".", "endswith", "(", "'lmdb'", ")", ":", "\n", "                ", "is_lmdb", "=", "True", "\n", "# if dataset.get('dataroot_GT_bg', None) is not None:", "\n", "#     dataset['dataroot_GT_bg'] = osp.expanduser(dataset['dataroot_GT_bg'])", "\n", "", "", "if", "dataset", ".", "get", "(", "'dataroot_LQ'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_LQ'", "]", "=", "osp", ".", "expanduser", "(", "dataset", "[", "'dataroot_LQ'", "]", ")", "\n", "if", "dataset", "[", "'dataroot_LQ'", "]", ".", "endswith", "(", "'lmdb'", ")", ":", "\n", "                ", "is_lmdb", "=", "True", "\n", "", "", "dataset", "[", "'data_type'", "]", "=", "'lmdb'", "if", "is_lmdb", "else", "'img'", "\n", "if", "dataset", "[", "'mode'", "]", ".", "endswith", "(", "'mc'", ")", ":", "# for memcached", "\n", "            ", "dataset", "[", "'data_type'", "]", "=", "'mc'", "\n", "dataset", "[", "'mode'", "]", "=", "dataset", "[", "'mode'", "]", ".", "replace", "(", "'_mc'", ",", "''", ")", "\n", "\n", "# path", "\n", "", "", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "path", "and", "key", "in", "opt", "[", "'path'", "]", "and", "key", "!=", "'strict_load'", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "key", "]", "=", "osp", ".", "expanduser", "(", "path", ")", "\n", "", "", "opt", "[", "'path'", "]", "[", "'root'", "]", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__file__", ",", "osp", ".", "pardir", ",", "osp", ".", "pardir", ",", "osp", ".", "pardir", ")", ")", "\n", "if", "is_train", ":", "\n", "        ", "experiments_root", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "'experiments'", ",", "opt", "[", "'name'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'experiments_root'", "]", "=", "experiments_root", "\n", "opt", "[", "'path'", "]", "[", "'models'", "]", "=", "osp", ".", "join", "(", "experiments_root", ",", "'models'", ")", "\n", "opt", "[", "'path'", "]", "[", "'training_state'", "]", "=", "osp", ".", "join", "(", "experiments_root", ",", "'training_state'", ")", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "experiments_root", "\n", "opt", "[", "'path'", "]", "[", "'val_images'", "]", "=", "osp", ".", "join", "(", "experiments_root", ",", "'val_images'", ")", "\n", "\n", "# change some options for debug mode", "\n", "if", "'debug'", "in", "opt", "[", "'name'", "]", ":", "\n", "            ", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "=", "8", "\n", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "=", "1", "\n", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "=", "8", "\n", "", "", "else", ":", "# test", "\n", "        ", "results_root", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "'results'", ",", "opt", "[", "'name'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'results_root'", "]", "=", "results_root", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "results_root", "\n", "\n", "# network", "\n", "", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "        ", "opt", "[", "'network_G'", "]", "[", "'scale'", "]", "=", "scale", "\n", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.dict2str": [[73, 84], ["opt.items", "isinstance", "options.dict2str", "str"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.dict2str"], ["", "def", "dict2str", "(", "opt", ",", "indent_l", "=", "1", ")", ":", "\n", "    ", "'''dict to string for logger'''", "\n", "msg", "=", "''", "\n", "for", "k", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "':[\\n'", "\n", "msg", "+=", "dict2str", "(", "v", ",", "indent_l", "+", "1", ")", "\n", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "']\\n'", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "': '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.dict_to_nonedict": [[92, 102], ["isinstance", "dict", "opt.items", "options.NoneDict", "isinstance", "options.dict_to_nonedict", "options.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.dict_to_nonedict"], ["", "", "def", "dict_to_nonedict", "(", "opt", ")", ":", "\n", "    ", "if", "isinstance", "(", "opt", ",", "dict", ")", ":", "\n", "        ", "new_opt", "=", "dict", "(", ")", "\n", "for", "key", ",", "sub_opt", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "new_opt", "[", "key", "]", "=", "dict_to_nonedict", "(", "sub_opt", ")", "\n", "", "return", "NoneDict", "(", "**", "new_opt", ")", "\n", "", "elif", "isinstance", "(", "opt", ",", "list", ")", ":", "\n", "        ", "return", "[", "dict_to_nonedict", "(", "sub_opt", ")", "for", "sub_opt", "in", "opt", "]", "\n", "", "else", ":", "\n", "        ", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.seungho-snu_fxsr.options.options.check_resume": [[104, 119], ["logging.getLogger", "os.join", "logging.getLogger.info", "logging.getLogger.warning", "os.join", "logging.getLogger.info", "opt[].get", "opt[].get"], "function", ["None"], ["", "", "def", "check_resume", "(", "opt", ",", "resume_iter", ")", ":", "\n", "    ", "'''Check resume states and pretrain_model paths'''", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "if", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ":", "\n", "        ", "if", "opt", "[", "'path'", "]", ".", "get", "(", "'pretrain_model_G'", ",", "None", ")", "is", "not", "None", "or", "opt", "[", "'path'", "]", ".", "get", "(", "\n", "'pretrain_model_D'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "'pretrain_model path will be ignored when resuming training.'", ")", "\n", "\n", "", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "\n", "'{}_G.pth'", ".", "format", "(", "resume_iter", ")", ")", "\n", "logger", ".", "info", "(", "'Set [pretrain_model_G] to '", "+", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", ")", "\n", "if", "'gan'", "in", "opt", "[", "'model'", "]", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "\n", "'{}_D.pth'", ".", "format", "(", "resume_iter", ")", ")", "\n", "logger", ".", "info", "(", "'Set [pretrain_model_D] to '", "+", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", ")", "\n", "", "", "", ""]]}