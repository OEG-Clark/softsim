{"home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.MPNN_LSTM.__init__": [[90, 112], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nout", ",", "n_nodes", ",", "window", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "MPNN_LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "#self.batch_size = batch_size", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "nfeat", "=", "nfeat", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "nhid", ",", "nhid", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "nhid", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "nhid", ")", "\n", "\n", "self", ".", "rnn1", "=", "nn", ".", "LSTM", "(", "2", "*", "nhid", ",", "nhid", ",", "1", ")", "\n", "self", ".", "rnn2", "=", "nn", ".", "LSTM", "(", "nhid", ",", "nhid", ",", "1", ")", "\n", "\n", "#self.fc1 = nn.Linear(2*nhid+window*nfeat, nhid)", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2", "*", "nhid", "+", "window", "*", "nfeat", ",", "nhid", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "nhid", ",", "nout", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.MPNN_LSTM.forward": [[114, 170], ["list", "adj.coalesce().indices.coalesce().indices.coalesce().values", "adj.coalesce().indices.coalesce().indices.coalesce().indices", "x.view.view.view", "torch.transpose().reshape", "torch.transpose().reshape", "torch.transpose().reshape", "torch.transpose().reshape", "torch.transpose().reshape", "torch.transpose().reshape", "torch.transpose().reshape", "torch.transpose().reshape", "torch.transpose().reshape", "models.MPNN_LSTM.relu", "models.MPNN_LSTM.bn1", "models.MPNN_LSTM.dropout", "list.append", "models.MPNN_LSTM.relu", "models.MPNN_LSTM.bn2", "models.MPNN_LSTM.dropout", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view.view.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x.view.view.contiguous().view", "models.MPNN_LSTM.rnn1", "models.MPNN_LSTM.rnn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "skip.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MPNN_LSTM.relu", "models.MPNN_LSTM.dropout", "models.MPNN_LSTM.relu().squeeze", "x.view.view.view", "models.MPNN_LSTM.conv1", "models.MPNN_LSTM.conv2", "x.view.view.size", "x.view.view.size", "skip.reshape.reshape.size", "models.MPNN_LSTM.fc1", "adj.coalesce().indices.coalesce().indices.coalesce", "adj.coalesce().indices.coalesce().indices.coalesce", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x.view.view.contiguous", "models.MPNN_LSTM.relu", "models.MPNN_LSTM.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "adj", ",", "x", ")", ":", "\n", "        ", "lst", "=", "list", "(", ")", "\n", "# print(\"--------------------\")", "\n", "weight", "=", "adj", ".", "coalesce", "(", ")", ".", "values", "(", ")", "\n", "adj", "=", "adj", ".", "coalesce", "(", ")", ".", "indices", "(", ")", "\n", "# print(x.shape)", "\n", "skip", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window", ",", "self", ".", "n_nodes", ",", "self", ".", "nfeat", ")", "#self.batch_size", "\n", "# print(skip.shape)", "\n", "skip", "=", "torch", ".", "transpose", "(", "skip", ",", "1", ",", "2", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "window", ",", "self", ".", "nfeat", ")", "#self.batch_size*self.n_nodes", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "adj", ",", "edge_weight", "=", "weight", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "lst", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ",", "adj", ",", "edge_weight", "=", "weight", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "lst", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "lst", ",", "dim", "=", "1", ")", "\n", "\n", "#--------------------------------------", "\n", "#print(x.shape)", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window", ",", "self", ".", "n_nodes", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "#print(x.shape)", "\n", "#print(x.shape)", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "0", ",", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "window", ",", "-", "1", ",", "x", ".", "size", "(", "3", ")", ")", "#self.batch_size*self.n_nodes", "\n", "\n", "#print(x.shape)", "\n", "#print(\"------\")", "\n", "x", ",", "(", "hn1", ",", "cn1", ")", "=", "self", ".", "rnn1", "(", "x", ")", "\n", "\n", "\n", "out2", ",", "(", "hn2", ",", "cn2", ")", "=", "self", ".", "rnn2", "(", "x", ")", "\n", "\n", "#print(self.rnn2._all_weights)", "\n", "x", "=", "torch", ".", "cat", "(", "[", "hn1", "[", "0", ",", ":", ",", ":", "]", ",", "hn2", "[", "0", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "#print(skip.shape)", "\n", "#print(x.shape)", "\n", "#skip = skip.view(skip.size(0),-1)", "\n", "skip", "=", "skip", ".", "reshape", "(", "skip", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#print(x.shape)", "\n", "#print(skip.shape)", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "skip", "]", ",", "dim", "=", "1", ")", "\n", "#--------------------------------------", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", ".", "squeeze", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ")", "\n", "# print(\"--------------------\")", "\n", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.MPNN.__init__": [[175, 195], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nout", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "MPNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.n_nodes = n_nodes", "\n", "\n", "#self.batch_size = batch_size", "\n", "self", ".", "nhid", "=", "nhid", "\n", "\n", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "nhid", ",", "nhid", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "nhid", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "nhid", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "nfeat", "+", "2", "*", "nhid", ",", "nhid", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "nhid", ",", "nout", ")", "\n", "#self.bn3 = nn.BatchNorm1d(nhid)", "\n", "#self.bn4 = nn.BatchNorm1d(nhid)", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.MPNN.forward": [[202, 241], ["list", "adj.coalesce().indices.coalesce().indices.coalesce().values", "adj.coalesce().indices.coalesce().indices.coalesce().indices", "list.append", "models.MPNN.relu", "models.MPNN.bn1", "models.MPNN.dropout", "list.append", "models.MPNN.relu", "models.MPNN.bn2", "models.MPNN.dropout", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MPNN.relu", "models.MPNN.dropout", "models.MPNN.relu().squeeze", "x.view.view.view", "models.MPNN.conv1", "models.MPNN.conv2", "models.MPNN.fc1", "adj.coalesce().indices.coalesce().indices.coalesce", "adj.coalesce().indices.coalesce().indices.coalesce", "models.MPNN.relu", "models.MPNN.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "adj", ",", "x", ")", ":", "\n", "        ", "lst", "=", "list", "(", ")", "\n", "#print(x.shape)", "\n", "#print(adj.shape)", "\n", "weight", "=", "adj", ".", "coalesce", "(", ")", ".", "values", "(", ")", "\n", "adj", "=", "adj", ".", "coalesce", "(", ")", ".", "indices", "(", ")", "\n", "\n", "#lst.append(ident)", "\n", "\n", "#x = x[:,mob_feats]", "\n", "#x = xt.index_select(1, mob_feats)", "\n", "lst", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "adj", ",", "edge_weight", "=", "weight", ")", ")", "\n", "#print(x)", "\n", "#print(x.shape)", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "lst", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ",", "adj", ",", "edge_weight", "=", "weight", ")", ")", "\n", "#print(x.shape)", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "lst", ".", "append", "(", "x", ")", "\n", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "lst", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "#x = self.bn3(x)", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", ".", "squeeze", "(", ")", "# ", "\n", "#x = self.bn4(x)", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.LSTM.__init__": [[246, 261], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform", "torch.init.xavier_uniform", "torch.init.xavier_uniform", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type().cuda", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "n_nodes", ",", "window", ",", "dropout", ",", "batch_size", ",", "recur", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nhid", "=", "nhid", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "self", ".", "nout", "=", "n_nodes", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "nb_layers", "=", "2", "\n", "\n", "self", ".", "nfeat", "=", "nfeat", "\n", "self", ".", "recur", "=", "recur", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "nfeat", ",", "self", ".", "nhid", ",", "num_layers", "=", "self", ".", "nb_layers", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nhid", ",", "self", ".", "nout", ")", "\n", "self", ".", "cell", "=", "(", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform", "(", "torch", ".", "Tensor", "(", "self", ".", "nb_layers", ",", "self", ".", "batch_size", ",", "self", ".", "nhid", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.LSTM.forward": [[266, 293], ["features.view.view.view", "models.LSTM.linear", "predictions[].view", "models.LSTM.lstm", "models.LSTM.lstm", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "models.LSTM.cell[].contiguous().view", "models.LSTM.lstm", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.LSTM.cell[].contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "adj", ",", "features", ")", ":", "\n", "#adj is 0 here", "\n", "#print(features.shape)", "\n", "        ", "features", "=", "features", ".", "view", "(", "self", ".", "window", ",", "-", "1", ",", "self", ".", "n_nodes", ")", "#.view(-1, self.window, self.n_nodes, self.nfeat)", "\n", "#print(features.shape)", "\n", "#print(\"----\")", "\n", "\n", "\n", "#------------------", "\n", "if", "(", "self", ".", "recur", ")", ":", "\n", "#print(features.shape)", "\n", "#self.hidden_cell = ", "\n", "            ", "try", ":", "\n", "                ", "lstm_out", ",", "(", "hc", ",", "self", ".", "cell", ")", "=", "self", ".", "lstm", "(", "features", ",", "(", "torch", ".", "zeros", "(", "self", ".", "nb_layers", ",", "self", ".", "batch_size", ",", "self", ".", "nhid", ")", ".", "cuda", "(", ")", ",", "self", ".", "cell", ")", ")", "\n", "# = (hc,cn)", "\n", "", "except", ":", "\n", "#hc = self.hidden_cell[0][:,0:features.shape[1],:].contiguous().view(2,features.shape[1],self.nhid)", "\n", "                ", "hc", "=", "torch", ".", "zeros", "(", "self", ".", "nb_layers", ",", "features", ".", "shape", "[", "1", "]", ",", "self", ".", "nhid", ")", ".", "cuda", "(", ")", "\n", "cn", "=", "self", ".", "cell", "[", ":", ",", "0", ":", "features", ".", "shape", "[", "1", "]", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "2", ",", "features", ".", "shape", "[", "1", "]", ",", "self", ".", "nhid", ")", "\n", "lstm_out", ",", "(", "hc", ",", "cn", ")", "=", "self", ".", "lstm", "(", "features", ",", "(", "hc", ",", "cn", ")", ")", "\n", "", "", "else", ":", "\n", "#------------------", "\n", "            ", "lstm_out", ",", "(", "hc", ",", "cn", ")", "=", "self", ".", "lstm", "(", "features", ")", "#, self.hidden_cell)#self.hidden_cell ", "\n", "\n", "", "predictions", "=", "self", ".", "linear", "(", "lstm_out", ")", "#.view(self.window,-1,self.n_nodes)#.view(self.batch_size,self.nhid))#)", "\n", "#print(predictions.shape)", "\n", "return", "predictions", "[", "-", "1", "]", ".", "view", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.arima": [[24, 55], ["range", "numpy.zeros", "range", "var.append", "print", "range", "range", "labels.iloc[].reset_index", "abs", "var[].append", "sum", "abs", "statsmodels.tsa.arima_model.ARIMA().fit", "ARIMA().fit.predict", "statsmodels.tsa.arima_model.ARIMA().fit", "statsmodels.tsa.arima_model.ARIMA", "statsmodels.tsa.arima_model.ARIMA"], "function", ["None"], ["def", "arima", "(", "ahead", ",", "start_exp", ",", "n_samples", ",", "labels", ")", ":", "\n", "    ", "var", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "ahead", ")", ":", "\n", "        ", "var", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "error", "=", "np", ".", "zeros", "(", "ahead", ")", "\n", "count", "=", "0", "\n", "for", "test_sample", "in", "range", "(", "start_exp", ",", "n_samples", "-", "ahead", ")", ":", "#", "\n", "        ", "print", "(", "test_sample", ")", "\n", "count", "+=", "1", "\n", "err", "=", "0", "\n", "for", "j", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ds", "=", "labels", ".", "iloc", "[", "j", ",", ":", "test_sample", "-", "1", "]", ".", "reset_index", "(", ")", "\n", "\n", "if", "(", "sum", "(", "ds", ".", "iloc", "[", ":", ",", "1", "]", ")", "==", "0", ")", ":", "\n", "                ", "yhat", "=", "[", "0", "]", "*", "(", "ahead", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "fit2", "=", "ARIMA", "(", "ds", ".", "iloc", "[", ":", ",", "1", "]", ".", "values", ",", "(", "2", ",", "0", ",", "2", ")", ")", ".", "fit", "(", ")", "\n", "", "except", ":", "\n", "                    ", "fit2", "=", "ARIMA", "(", "ds", ".", "iloc", "[", ":", ",", "1", "]", ".", "values", ",", "(", "1", ",", "0", ",", "0", ")", ")", ".", "fit", "(", ")", "\n", "#yhat = abs(fit2.predict(start = test_sample , end = (test_sample+ahead-1) ))", "\n", "", "yhat", "=", "abs", "(", "fit2", ".", "predict", "(", "start", "=", "test_sample", ",", "end", "=", "(", "test_sample", "+", "ahead", "-", "2", ")", ")", ")", "\n", "", "y_me", "=", "labels", ".", "iloc", "[", "j", ",", "test_sample", ":", "test_sample", "+", "ahead", "]", "\n", "e", "=", "abs", "(", "yhat", "-", "y_me", ".", "values", ")", "\n", "err", "+=", "e", "\n", "error", "+=", "e", "\n", "\n", "", "for", "idx", "in", "range", "(", "ahead", ")", ":", "\n", "            ", "var", "[", "idx", "]", ".", "append", "(", "err", "[", "idx", "]", ")", "\n", "", "", "return", "error", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.models.prophet": [[58, 85], ["range", "numpy.zeros", "range", "var.append", "print", "range", "range", "labels.iloc[].reset_index", "fbprophet.Prophet", "fbprophet.Prophet.fit", "fbprophet.Prophet.predict", "future[].tail", "var[].append", "fbprophet.Prophet.make_future_dataframe", "abs"], "function", ["None"], ["", "def", "prophet", "(", "ahead", ",", "start_exp", ",", "n_samples", ",", "labels", ")", ":", "\n", "    ", "var", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "ahead", ")", ":", "\n", "        ", "var", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "error", "=", "np", ".", "zeros", "(", "ahead", ")", "\n", "count", "=", "0", "\n", "for", "test_sample", "in", "range", "(", "start_exp", ",", "n_samples", "-", "ahead", ")", ":", "#", "\n", "        ", "print", "(", "test_sample", ")", "\n", "count", "+=", "1", "\n", "err", "=", "0", "\n", "for", "j", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ds", "=", "labels", ".", "iloc", "[", "j", ",", ":", "test_sample", "]", ".", "reset_index", "(", ")", "\n", "ds", ".", "columns", "=", "[", "\"ds\"", ",", "\"y\"", "]", "\n", "#with suppress_stdout_stderr():", "\n", "m", "=", "Prophet", "(", "interval_width", "=", "0.95", ")", "\n", "m", ".", "fit", "(", "ds", ")", "\n", "future", "=", "m", ".", "predict", "(", "m", ".", "make_future_dataframe", "(", "periods", "=", "ahead", ")", ")", "\n", "yhat", "=", "future", "[", "\"yhat\"", "]", ".", "tail", "(", "ahead", ")", "\n", "y_me", "=", "labels", ".", "iloc", "[", "j", ",", "test_sample", ":", "test_sample", "+", "ahead", "]", "\n", "e", "=", "abs", "(", "yhat", "-", "y_me", ".", "values", ")", ".", "values", "\n", "err", "+=", "e", "\n", "error", "+=", "e", "\n", "", "for", "idx", "in", "range", "(", "ahead", ")", ":", "\n", "            ", "var", "[", "idx", "]", ".", "append", "(", "err", "[", "idx", "]", ")", "\n", "\n", "", "", "return", "error", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.tl_base.train": [[31, 38], ["optimizer.zero_grad", "model", "torch.mse_loss", "F.mse_loss.backward", "optimizer.step"], "function", ["None"], ["def", "train", "(", "adj", ",", "features", ",", "y", ")", ":", "\n", "    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "adj", ",", "features", ")", "\n", "loss_train", "=", "F", ".", "mse_loss", "(", "output", ",", "y", ")", "\n", "loss_train", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "output", ",", "loss_train", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.tl_base.test": [[40, 45], ["model", "torch.mse_loss"], "function", ["None"], ["", "def", "test", "(", "adj", ",", "features", ",", "y", ")", ":", "\n", "#output = model(adj, mob, ident)", "\n", "    ", "output", "=", "model", "(", "adj", ",", "features", ")", "\n", "loss_test", "=", "F", ".", "mse_loss", "(", "output", ",", "y", ")", "\n", "return", "output", ",", "loss_test", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.metalearn.train": [[31, 38], ["optimizer.zero_grad", "model", "torch.mse_loss", "F.mse_loss.backward", "optimizer.step"], "function", ["None"], ["def", "train", "(", "adj", ",", "features", ",", "y", ")", ":", "\n", "    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "adj", ",", "features", ")", "\n", "loss_train", "=", "F", ".", "mse_loss", "(", "output", ",", "y", ")", "\n", "loss_train", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "output", ",", "loss_train", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.metalearn.test": [[40, 45], ["model", "torch.mse_loss"], "function", ["None"], ["", "def", "test", "(", "adj", ",", "features", ",", "y", ")", ":", "\n", "#output = model(adj, mob, ident)", "\n", "    ", "output", "=", "model", "(", "adj", ",", "features", ")", "\n", "loss_test", "=", "F", ".", "mse_loss", "(", "output", ",", "y", ")", "\n", "return", "output", ",", "loss_test", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.AverageMeter.__init__": [[380, 382], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.AverageMeter.reset": [[383, 388], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.AverageMeter.update": [[389, 394], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.read_meta_datasets": [[17, 181], ["os.chdir", "os.chdir", "pandas.read_csv", "labels.set_index.set_index", "datetime.date", "datetime.date", "utils.generate_graphs_tmp", "meta_labs.append", "meta_graphs.append", "utils.generate_new_features", "meta_features.append", "list", "enumerate", "meta_y.append", "os.chdir", "pandas.read_csv", "labels.set_index.set_index", "datetime.date", "datetime.date", "utils.generate_graphs_tmp", "meta_labs.append", "meta_graphs.append", "utils.generate_new_features", "meta_features.append", "list", "enumerate", "meta_y.append", "os.chdir", "pandas.read_csv", "labels.set_index.set_index", "datetime.date", "datetime.date", "utils.generate_graphs_tmp", "meta_labs.append", "meta_graphs.append", "utils.generate_new_features", "meta_features.append", "list", "set", "enumerate", "meta_y.append", "os.chdir", "pandas.read_csv", "labels.set_index.set_index", "datetime.date", "datetime.date", "utils.generate_graphs_tmp", "meta_labs.append", "meta_graphs.append", "utils.generate_new_features", "meta_features.append", "list", "enumerate", "meta_y.append", "os.chdir", "str", "list.append", "G.nodes", "str", "list.append", "G.nodes", "str", "list.append", "G.nodes", "str", "list.append", "G.nodes", "datetime.timedelta", "range", "networkx.adjacency_matrix().toarray", "list", "y[].append", "datetime.timedelta", "range", "networkx.adjacency_matrix().toarray", "list", "y[].append", "datetime.timedelta", "range", "networkx.adjacency_matrix().toarray", "list", "y[].append", "datetime.timedelta", "range", "networkx.adjacency_matrix().toarray", "list", "y[].append", "list", "list", "list", "list", "Gs[].nodes", "networkx.adjacency_matrix", "Gs[].nodes", "networkx.adjacency_matrix", "Gs[].nodes", "networkx.adjacency_matrix", "networkx.adjacency_matrix", "Gs[].nodes"], "function", ["home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_graphs_tmp", "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_new_features", "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_graphs_tmp", "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_new_features", "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_graphs_tmp", "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_new_features", "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_graphs_tmp", "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_new_features"], ["def", "read_meta_datasets", "(", "window", ")", ":", "\n", "    ", "os", ".", "chdir", "(", "\"../data\"", ")", "\n", "meta_labs", "=", "[", "]", "\n", "meta_graphs", "=", "[", "]", "\n", "meta_features", "=", "[", "]", "\n", "meta_y", "=", "[", "]", "\n", "\n", "#------------------ Italy", "\n", "os", ".", "chdir", "(", "\"Italy\"", ")", "\n", "labels", "=", "pd", ".", "read_csv", "(", "\"italy_labels.csv\"", ")", "\n", "del", "labels", "[", "\"id\"", "]", "\n", "labels", "=", "labels", ".", "set_index", "(", "\"name\"", ")", "\n", "\n", "sdate", "=", "date", "(", "2020", ",", "2", ",", "24", ")", "\n", "edate", "=", "date", "(", "2020", ",", "5", ",", "12", ")", "\n", "delta", "=", "edate", "-", "sdate", "\n", "dates", "=", "[", "sdate", "+", "timedelta", "(", "days", "=", "i", ")", "for", "i", "in", "range", "(", "delta", ".", "days", "+", "1", ")", "]", "\n", "dates", "=", "[", "str", "(", "date", ")", "for", "date", "in", "dates", "]", "\n", "\n", "\n", "Gs", "=", "generate_graphs_tmp", "(", "dates", ",", "\"IT\"", ")", "\n", "#labels = labels[,:]", "\n", "labels", "=", "labels", ".", "loc", "[", "list", "(", "Gs", "[", "0", "]", ".", "nodes", "(", ")", ")", ",", ":", "]", "\n", "labels", "=", "labels", ".", "loc", "[", ":", ",", "dates", "]", "\n", "\n", "meta_labs", ".", "append", "(", "labels", ")", "\n", "gs_adj", "=", "[", "nx", ".", "adjacency_matrix", "(", "kgs", ")", ".", "toarray", "(", ")", ".", "T", "for", "kgs", "in", "Gs", "]", "\n", "\n", "meta_graphs", ".", "append", "(", "gs_adj", ")", "\n", "\n", "features", "=", "generate_new_features", "(", "Gs", ",", "labels", ",", "dates", ",", "window", ")", "\n", "\n", "meta_features", ".", "append", "(", "features", ")", "\n", "\n", "y", "=", "list", "(", ")", "\n", "for", "i", ",", "G", "in", "enumerate", "(", "Gs", ")", ":", "\n", "        ", "y", ".", "append", "(", "list", "(", ")", ")", "\n", "for", "node", "in", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "y", "[", "i", "]", ".", "append", "(", "labels", ".", "loc", "[", "node", ",", "dates", "[", "i", "]", "]", ")", "\n", "\n", "", "", "meta_y", ".", "append", "(", "y", ")", "\n", "\n", "\n", "\n", "#------------------------- Spain", "\n", "os", ".", "chdir", "(", "\"../Spain\"", ")", "\n", "labels", "=", "pd", ".", "read_csv", "(", "\"spain_labels.csv\"", ")", "\n", "\n", "labels", "=", "labels", ".", "set_index", "(", "\"name\"", ")", "\n", "\n", "sdate", "=", "date", "(", "2020", ",", "3", ",", "12", ")", "\n", "edate", "=", "date", "(", "2020", ",", "5", ",", "12", ")", "\n", "#--- series of graphs and their respective dates", "\n", "delta", "=", "edate", "-", "sdate", "\n", "dates", "=", "[", "sdate", "+", "timedelta", "(", "days", "=", "i", ")", "for", "i", "in", "range", "(", "delta", ".", "days", "+", "1", ")", "]", "\n", "dates", "=", "[", "str", "(", "date", ")", "for", "date", "in", "dates", "]", "\n", "\n", "\n", "\n", "Gs", "=", "generate_graphs_tmp", "(", "dates", ",", "\"ES\"", ")", "# ", "\n", "labels", "=", "labels", ".", "loc", "[", "list", "(", "Gs", "[", "0", "]", ".", "nodes", "(", ")", ")", ",", ":", "]", "\n", "labels", "=", "labels", ".", "loc", "[", ":", ",", "dates", "]", "#labels.sum(1).values>10", "\n", "\n", "meta_labs", ".", "append", "(", "labels", ")", "\n", "\n", "gs_adj", "=", "[", "nx", ".", "adjacency_matrix", "(", "kgs", ")", ".", "toarray", "(", ")", ".", "T", "for", "kgs", "in", "Gs", "]", "\n", "\n", "meta_graphs", ".", "append", "(", "gs_adj", ")", "\n", "\n", "features", "=", "generate_new_features", "(", "Gs", ",", "labels", ",", "dates", ",", "window", ")", "\n", "\n", "meta_features", ".", "append", "(", "features", ")", "\n", "\n", "y", "=", "list", "(", ")", "\n", "for", "i", ",", "G", "in", "enumerate", "(", "Gs", ")", ":", "\n", "        ", "y", ".", "append", "(", "list", "(", ")", ")", "\n", "for", "node", "in", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "y", "[", "i", "]", ".", "append", "(", "labels", ".", "loc", "[", "node", ",", "dates", "[", "i", "]", "]", ")", "\n", "\n", "", "", "meta_y", ".", "append", "(", "y", ")", "\n", "\n", "\n", "\n", "#---------------- Britain", "\n", "os", ".", "chdir", "(", "\"../England\"", ")", "\n", "labels", "=", "pd", ".", "read_csv", "(", "\"england_labels.csv\"", ")", "\n", "#del labels[\"id\"]", "\n", "labels", "=", "labels", ".", "set_index", "(", "\"name\"", ")", "\n", "\n", "sdate", "=", "date", "(", "2020", ",", "3", ",", "13", ")", "\n", "edate", "=", "date", "(", "2020", ",", "5", ",", "12", ")", "\n", "#Gs = generate_graphs(dates)", "\n", "delta", "=", "edate", "-", "sdate", "\n", "dates", "=", "[", "sdate", "+", "timedelta", "(", "days", "=", "i", ")", "for", "i", "in", "range", "(", "delta", ".", "days", "+", "1", ")", "]", "\n", "dates", "=", "[", "str", "(", "date", ")", "for", "date", "in", "dates", "]", "\n", "\n", "\n", "Gs", "=", "generate_graphs_tmp", "(", "dates", ",", "\"EN\"", ")", "\n", "\n", "labels", "=", "labels", ".", "loc", "[", "list", "(", "Gs", "[", "0", "]", ".", "nodes", "(", ")", ")", ",", ":", "]", "\n", "#print(labels.shape)", "\n", "labels", "=", "labels", ".", "loc", "[", ":", ",", "dates", "]", "\n", "\n", "meta_labs", ".", "append", "(", "labels", ")", "\n", "\n", "gs_adj", "=", "[", "nx", ".", "adjacency_matrix", "(", "kgs", ")", ".", "toarray", "(", ")", ".", "T", "for", "kgs", "in", "Gs", "]", "\n", "meta_graphs", ".", "append", "(", "gs_adj", ")", "\n", "\n", "features", "=", "generate_new_features", "(", "Gs", ",", "labels", ",", "dates", ",", "window", ")", "\n", "meta_features", ".", "append", "(", "features", ")", "\n", "\n", "y", "=", "list", "(", ")", "\n", "nodes_without_labels", "=", "set", "(", ")", "\n", "for", "i", ",", "G", "in", "enumerate", "(", "Gs", ")", ":", "\n", "        ", "y", ".", "append", "(", "list", "(", ")", ")", "\n", "for", "node", "in", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "y", "[", "i", "]", ".", "append", "(", "labels", ".", "loc", "[", "node", ",", "dates", "[", "i", "]", "]", ")", "\n", "", "", "meta_y", ".", "append", "(", "y", ")", "\n", "\n", "#--- series of graphs and their respective dates", "\n", "#targets = produce_targets(dates, 'cases')", "\n", "\n", "\n", "#---------------- France", "\n", "os", ".", "chdir", "(", "\"../France\"", ")", "\n", "labels", "=", "pd", ".", "read_csv", "(", "\"france_labels.csv\"", ")", "\n", "#del labels[\"id\"]", "\n", "labels", "=", "labels", ".", "set_index", "(", "\"name\"", ")", "\n", "\n", "sdate", "=", "date", "(", "2020", ",", "3", ",", "10", ")", "\n", "edate", "=", "date", "(", "2020", ",", "5", ",", "12", ")", "\n", "\n", "#--- series of graphs and their respective dates", "\n", "delta", "=", "edate", "-", "sdate", "\n", "dates", "=", "[", "sdate", "+", "timedelta", "(", "days", "=", "i", ")", "for", "i", "in", "range", "(", "delta", ".", "days", "+", "1", ")", "]", "\n", "dates", "=", "[", "str", "(", "date", ")", "for", "date", "in", "dates", "]", "\n", "labels", "=", "labels", ".", "loc", "[", ":", ",", "dates", "]", "#labels.sum(1).values>10", "\n", "\n", "\n", "\n", "Gs", "=", "generate_graphs_tmp", "(", "dates", ",", "\"FR\"", ")", "\n", "gs_adj", "=", "[", "nx", ".", "adjacency_matrix", "(", "kgs", ")", ".", "toarray", "(", ")", ".", "T", "for", "kgs", "in", "Gs", "]", "\n", "\n", "labels", "=", "labels", ".", "loc", "[", "list", "(", "Gs", "[", "0", "]", ".", "nodes", "(", ")", ")", ",", ":", "]", "\n", "\n", "meta_labs", ".", "append", "(", "labels", ")", "\n", "\n", "meta_graphs", ".", "append", "(", "gs_adj", ")", "\n", "\n", "features", "=", "generate_new_features", "(", "Gs", ",", "labels", ",", "dates", ",", "window", ")", "\n", "\n", "meta_features", ".", "append", "(", "features", ")", "\n", "\n", "y", "=", "list", "(", ")", "\n", "for", "i", ",", "G", "in", "enumerate", "(", "Gs", ")", ":", "\n", "        ", "y", ".", "append", "(", "list", "(", ")", ")", "\n", "for", "node", "in", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "y", "[", "i", "]", ".", "append", "(", "labels", ".", "loc", "[", "node", ",", "dates", "[", "i", "]", "]", ")", "\n", "\n", "", "", "meta_y", ".", "append", "(", "y", ")", "\n", "\n", "os", ".", "chdir", "(", "\"../../code\"", ")", "\n", "\n", "return", "meta_labs", ",", "meta_graphs", ",", "meta_features", ",", "meta_y", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_graphs_tmp": [[184, 197], ["pandas.read_csv", "networkx.DiGraph", "set().union", "nx.DiGraph.add_nodes_from", "pd.read_csv.iterrows", "Gs.append", "set", "nx.DiGraph.add_edge", "set", "d[].unique", "d[].unique"], "function", ["None"], ["", "def", "generate_graphs_tmp", "(", "dates", ",", "country", ")", ":", "\n", "    ", "Gs", "=", "[", "]", "\n", "for", "date", "in", "dates", ":", "\n", "        ", "d", "=", "pd", ".", "read_csv", "(", "\"graphs/\"", "+", "country", "+", "\"_\"", "+", "date", "+", "\".csv\"", ",", "header", "=", "None", ")", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "nodes", "=", "set", "(", "d", "[", "0", "]", ".", "unique", "(", ")", ")", ".", "union", "(", "set", "(", "d", "[", "1", "]", ".", "unique", "(", ")", ")", ")", "\n", "G", ".", "add_nodes_from", "(", "nodes", ")", "\n", "\n", "for", "row", "in", "d", ".", "iterrows", "(", ")", ":", "\n", "            ", "G", ".", "add_edge", "(", "row", "[", "1", "]", "[", "0", "]", ",", "row", "[", "1", "]", "[", "1", "]", ",", "weight", "=", "row", "[", "1", "]", "[", "2", "]", ")", "\n", "", "Gs", ".", "append", "(", "G", ")", "\n", "\n", "", "return", "Gs", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_new_features": [[203, 251], ["list", "labels.copy", "Gs[].nodes", "enumerate", "numpy.zeros", "labels.copy.loc[].mean", "enumerate", "list.append", "labels.copy.loc[].std", "G.nodes", "G.number_of_nodes"], "function", ["None"], ["", "def", "generate_new_features", "(", "Gs", ",", "labels", ",", "dates", ",", "window", "=", "7", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Generate node features\n    Features[1] contains the features corresponding to y[1]\n    e.g. if window = 7, features[7]= day0:day6, y[7] = day7\n    if the window reaches before 0, everything is 0, so features[3] = [0,0,0,0,day0,day1,day2], y[3] = day3\n    \"\"\"", "\n", "features", "=", "list", "(", ")", "\n", "\n", "labs", "=", "labels", ".", "copy", "(", ")", "\n", "nodes", "=", "Gs", "[", "0", "]", ".", "nodes", "(", ")", "\n", "\n", "\n", "#--- one hot encoded the region", "\n", "#departments_name_to_id = dict()", "\n", "#for node in nodes:", "\n", "#    departments_name_to_id[node] = len(departments_name_to_id)", "\n", "\n", "#n_departments = len(departments_name_to_id)", "\n", "\n", "#print(n_departments)", "\n", "for", "idx", ",", "G", "in", "enumerate", "(", "Gs", ")", ":", "\n", "#  Features = population, coordinates, d past cases, one hot region", "\n", "\n", "        ", "H", "=", "np", ".", "zeros", "(", "[", "G", ".", "number_of_nodes", "(", ")", ",", "window", "]", ")", "#+3+n_departments])#])#])", "\n", "me", "=", "labs", ".", "loc", "[", ":", ",", "dates", "[", ":", "(", "idx", ")", "]", "]", ".", "mean", "(", "1", ")", "\n", "sd", "=", "labs", ".", "loc", "[", ":", ",", "dates", "[", ":", "(", "idx", ")", "]", "]", ".", "std", "(", "1", ")", "+", "1", "\n", "\n", "### enumarate because H[i] and labs[node] are not aligned", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "#---- Past cases      ", "\n", "            ", "if", "(", "idx", "<", "window", ")", ":", "# idx-1 goes before the start of the labels", "\n", "                ", "if", "(", "scaled", ")", ":", "\n", "#me = np.mean(labs.loc[node, dates[0:(idx)]]", "\n", "                    ", "H", "[", "i", ",", "(", "window", "-", "idx", ")", ":", "(", "window", ")", "]", "=", "(", "labs", ".", "loc", "[", "node", ",", "dates", "[", "0", ":", "(", "idx", ")", "]", "]", "-", "me", "[", "node", "]", ")", "/", "sd", "[", "node", "]", "\n", "", "else", ":", "\n", "                    ", "H", "[", "i", ",", "(", "window", "-", "idx", ")", ":", "(", "window", ")", "]", "=", "labs", ".", "loc", "[", "node", ",", "dates", "[", "0", ":", "(", "idx", ")", "]", "]", "\n", "\n", "", "", "elif", "idx", ">=", "window", ":", "\n", "                ", "if", "(", "scaled", ")", ":", "\n", "                    ", "H", "[", "i", ",", "0", ":", "(", "window", ")", "]", "=", "(", "labs", ".", "loc", "[", "node", ",", "dates", "[", "(", "idx", "-", "window", ")", ":", "(", "idx", ")", "]", "]", "-", "me", "[", "node", "]", ")", "/", "sd", "[", "node", "]", "\n", "", "else", ":", "\n", "                    ", "H", "[", "i", ",", "0", ":", "(", "window", ")", "]", "=", "labs", ".", "loc", "[", "node", ",", "dates", "[", "(", "idx", "-", "window", ")", ":", "(", "idx", ")", "]", "]", "\n", "\n", "\n", "", "", "", "features", ".", "append", "(", "H", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_new_batches": [[257, 309], ["len", "list", "list", "list", "range", "list", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.block_diag", "list.append", "list.append", "list.append", "range", "enumerate", "sparse_mx_to_torch_sparse_tensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "min", "range", "sp.block_diag.append", "min", "min", "utils.sparse_mx_to_torch_sparse_tensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "generate_new_batches", "(", "Gs", ",", "features", ",", "y", ",", "idx", ",", "graph_window", ",", "shift", ",", "batch_size", ",", "device", ",", "test_sample", ")", ":", "\n", "    ", "\"\"\"\n    Generate batches for graphs for MPNN\n    \"\"\"", "\n", "\n", "N", "=", "len", "(", "idx", ")", "\n", "n_nodes", "=", "Gs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "#n_nodes = Gs[0].number_of_nodes()", "\n", "\n", "adj_lst", "=", "list", "(", ")", "\n", "features_lst", "=", "list", "(", ")", "\n", "y_lst", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "N", ",", "batch_size", ")", ":", "\n", "        ", "n_nodes_batch", "=", "(", "min", "(", "i", "+", "batch_size", ",", "N", ")", "-", "i", ")", "*", "graph_window", "*", "n_nodes", "\n", "step", "=", "n_nodes", "*", "graph_window", "\n", "\n", "adj_tmp", "=", "list", "(", ")", "\n", "features_tmp", "=", "np", ".", "zeros", "(", "(", "n_nodes_batch", ",", "features", "[", "0", "]", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "y_tmp", "=", "np", ".", "zeros", "(", "(", "min", "(", "i", "+", "batch_size", ",", "N", ")", "-", "i", ")", "*", "n_nodes", ")", "\n", "\n", "#fill the input for each batch", "\n", "for", "e1", ",", "j", "in", "enumerate", "(", "range", "(", "i", ",", "min", "(", "i", "+", "batch_size", ",", "N", ")", ")", ")", ":", "\n", "            ", "val", "=", "idx", "[", "j", "]", "\n", "\n", "# Feature[10] containes the previous 7 cases of y[10]", "\n", "for", "e2", ",", "k", "in", "enumerate", "(", "range", "(", "val", "-", "graph_window", "+", "1", ",", "val", "+", "1", ")", ")", ":", "\n", "\n", "                ", "adj_tmp", ".", "append", "(", "Gs", "[", "k", "-", "1", "]", ".", "T", ")", "\n", "# each feature has a size of n_nodes", "\n", "features_tmp", "[", "(", "e1", "*", "step", "+", "e2", "*", "n_nodes", ")", ":", "(", "e1", "*", "step", "+", "(", "e2", "+", "1", ")", "*", "n_nodes", ")", ",", ":", "]", "=", "features", "[", "k", "]", "#-features[val-graph_window-1]", "\n", "\n", "\n", "", "if", "(", "test_sample", ">", "0", ")", ":", "\n", "#--- val is by construction less than test sample", "\n", "                ", "if", "(", "val", "+", "shift", "<", "test_sample", ")", ":", "\n", "                    ", "y_tmp", "[", "(", "n_nodes", "*", "e1", ")", ":", "(", "n_nodes", "*", "(", "e1", "+", "1", ")", ")", "]", "=", "y", "[", "val", "+", "shift", "]", "\n", "\n", "", "else", ":", "\n", "                    ", "y_tmp", "[", "(", "n_nodes", "*", "e1", ")", ":", "(", "n_nodes", "*", "(", "e1", "+", "1", ")", ")", "]", "=", "y", "[", "val", "]", "\n", "\n", "\n", "", "", "else", ":", "\n", "                ", "y_tmp", "[", "(", "n_nodes", "*", "e1", ")", ":", "(", "n_nodes", "*", "(", "e1", "+", "1", ")", ")", "]", "=", "y", "[", "val", "+", "shift", "]", "\n", "\n", "", "", "adj_tmp", "=", "sp", ".", "block_diag", "(", "adj_tmp", ")", "\n", "adj_lst", ".", "append", "(", "sparse_mx_to_torch_sparse_tensor", "(", "adj_tmp", ")", ".", "to", "(", "device", ")", ")", "\n", "features_lst", ".", "append", "(", "torch", ".", "FloatTensor", "(", "features_tmp", ")", ".", "to", "(", "device", ")", ")", "\n", "y_lst", ".", "append", "(", "torch", ".", "FloatTensor", "(", "y_tmp", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "return", "adj_lst", ",", "features_lst", ",", "y_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.generate_batches_lstm": [[315, 362], ["len", "list", "list", "list", "range", "list", "numpy.zeros", "numpy.zeros", "enumerate", "list.append", "list.append", "list.append", "range", "enumerate", "torch.FloatTensor().to", "torch.FloatTensor().to", "min", "range", "min", "min", "numpy.zeros", "numpy.array", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "generate_batches_lstm", "(", "n_nodes", ",", "y", ",", "idx", ",", "window", ",", "shift", ",", "batch_size", ",", "device", ",", "test_sample", ")", ":", "\n", "    ", "\"\"\"\n    Generate batches for graphs for the LSTM\n    \"\"\"", "\n", "N", "=", "len", "(", "idx", ")", "\n", "features_lst", "=", "list", "(", ")", "\n", "y_lst", "=", "list", "(", ")", "\n", "adj_fake", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "N", ",", "batch_size", ")", ":", "\n", "        ", "n_nodes_batch", "=", "(", "min", "(", "i", "+", "batch_size", ",", "N", ")", "-", "i", ")", "*", "n_nodes", "*", "1", "\n", "#step = n_nodes#*window", "\n", "step", "=", "n_nodes", "*", "1", "\n", "\n", "adj_tmp", "=", "list", "(", ")", "\n", "features_tmp", "=", "np", ".", "zeros", "(", "(", "window", ",", "n_nodes_batch", ")", ")", "#features.shape[1]))", "\n", "\n", "y_tmp", "=", "np", ".", "zeros", "(", "(", "min", "(", "i", "+", "batch_size", ",", "N", ")", "-", "i", ")", "*", "n_nodes", ")", "\n", "\n", "for", "e1", ",", "j", "in", "enumerate", "(", "range", "(", "i", ",", "min", "(", "i", "+", "batch_size", ",", "N", ")", ")", ")", ":", "\n", "            ", "val", "=", "idx", "[", "j", "]", "\n", "\n", "# keep the past information from val-window until val-1", "\n", "for", "e2", ",", "k", "in", "enumerate", "(", "range", "(", "val", "-", "window", ",", "val", ")", ")", ":", "\n", "\n", "                ", "if", "(", "k", "==", "0", ")", ":", "\n", "                    ", "features_tmp", "[", "e2", ",", "(", "e1", "*", "step", ")", ":", "(", "e1", "*", "step", "+", "n_nodes", ")", "]", "=", "np", ".", "zeros", "(", "[", "n_nodes", "]", ")", "#features#[k]", "\n", "", "else", ":", "\n", "                    ", "features_tmp", "[", "e2", ",", "(", "e1", "*", "step", ")", ":", "(", "e1", "*", "step", "+", "n_nodes", ")", "]", "=", "np", ".", "array", "(", "y", "[", "k", "]", ")", "#.reshape([n_nodes,1])#", "\n", "\n", "", "", "if", "(", "test_sample", ">", "0", ")", ":", "\n", "# val is by construction less than test sample", "\n", "                ", "if", "(", "val", "+", "shift", "<", "test_sample", ")", ":", "\n", "                    ", "y_tmp", "[", "(", "n_nodes", "*", "e1", ")", ":", "(", "n_nodes", "*", "(", "e1", "+", "1", ")", ")", "]", "=", "y", "[", "val", "+", "shift", "]", "\n", "", "else", ":", "\n", "                    ", "y_tmp", "[", "(", "n_nodes", "*", "e1", ")", ":", "(", "n_nodes", "*", "(", "e1", "+", "1", ")", ")", "]", "=", "y", "[", "val", "]", "\n", "\n", "", "", "else", ":", "\n", "\n", "                ", "y_tmp", "[", "(", "n_nodes", "*", "e1", ")", ":", "(", "n_nodes", "*", "(", "e1", "+", "1", ")", ")", "]", "=", "y", "[", "val", "+", "shift", "]", "\n", "\n", "", "", "adj_fake", ".", "append", "(", "0", ")", "\n", "\n", "features_lst", ".", "append", "(", "torch", ".", "FloatTensor", "(", "features_tmp", ")", ".", "to", "(", "device", ")", ")", "\n", "y_lst", ".", "append", "(", "torch", ".", "FloatTensor", "(", "y_tmp", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "return", "adj_fake", ",", "features_lst", ",", "y_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.GiorgosPanagopoulos_pandemic_tgnn.code.utils.sparse_mx_to_torch_sparse_tensor": [[366, 374], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]]}