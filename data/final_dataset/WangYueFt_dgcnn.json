{"home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.main._init_": [[27, 38], ["os.system", "os.system", "os.system", "os.system", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "_init_", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", "\n", "", "os", ".", "system", "(", "'cp main.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'main.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp model.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'model.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp util.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'util.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp data.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'data.py.backup'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.main.train": [[39, 136], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.DataParallel", "print", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "data.ModelNet40", "data.ModelNet40", "model.PointNet().to", "str", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.SGD", "print", "torch.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "DGCNN().to.train", "numpy.concatenate", "numpy.concatenate", "io.cprint", "DGCNN().to.eval", "numpy.concatenate", "numpy.concatenate", "sklearn.accuracy_score", "sklearn.balanced_accuracy_score", "io.cprint", "model.DGCNN().to", "Exception", "DGCNN().to.parameters", "DGCNN().to.parameters", "data.permute.permute", "optim.Adam.zero_grad", "DGCNN().to.", "criterion", "criterion.backward", "optim.Adam.step", "np.concatenate.append", "np.concatenate.append", "data.permute.permute", "DGCNN().to.", "criterion", "np.concatenate.append", "np.concatenate.append", "torch.save", "torch.save", "torch.save", "torch.save", "model.PointNet", "data.permute.to", "label.to().squeeze", "data.permute.size", "model.max", "criterion.item", "label.cpu().numpy", "preds.detach().cpu().numpy", "sklearn.accuracy_score", "sklearn.balanced_accuracy_score", "data.permute.to", "label.to().squeeze", "data.permute.size", "model.max", "criterion.item", "label.cpu().numpy", "preds.detach().cpu().numpy", "DGCNN().to.state_dict", "model.DGCNN", "label.to", "label.cpu", "preds.detach().cpu", "label.to", "label.cpu", "preds.detach().cpu", "preds.detach", "preds.detach"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.train", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.cprint", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.cprint"], ["", "def", "train", "(", "args", ",", "io", ")", ":", "\n", "    ", "train_loader", "=", "DataLoader", "(", "ModelNet40", "(", "partition", "=", "'train'", ",", "num_points", "=", "args", ".", "num_points", ")", ",", "num_workers", "=", "8", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "ModelNet40", "(", "partition", "=", "'test'", ",", "num_points", "=", "args", ".", "num_points", ")", ",", "num_workers", "=", "8", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "#Try to load models", "\n", "if", "args", ".", "model", "==", "'pointnet'", ":", "\n", "        ", "model", "=", "PointNet", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'dgcnn'", ":", "\n", "        ", "model", "=", "DGCNN", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Not implemented\"", ")", "\n", "", "print", "(", "str", "(", "model", ")", ")", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "\n", "if", "args", ".", "use_sgd", ":", "\n", "        ", "print", "(", "\"Use SGD\"", ")", "\n", "opt", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", "*", "100", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Use Adam\"", ")", "\n", "opt", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "scheduler", "=", "CosineAnnealingLR", "(", "opt", ",", "args", ".", "epochs", ",", "eta_min", "=", "args", ".", "lr", ")", "\n", "\n", "criterion", "=", "cal_loss", "\n", "\n", "best_test_acc", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "####################", "\n", "# Train", "\n", "####################", "\n", "train_loss", "=", "0.0", "\n", "count", "=", "0.0", "\n", "model", ".", "train", "(", ")", "\n", "train_pred", "=", "[", "]", "\n", "train_true", "=", "[", "]", "\n", "for", "data", ",", "label", "in", "train_loader", ":", "\n", "            ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "batch_size", "=", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "logits", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "label", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "preds", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "count", "+=", "batch_size", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "train_true", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "train_pred", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "train_true", "=", "np", ".", "concatenate", "(", "train_true", ")", "\n", "train_pred", "=", "np", ".", "concatenate", "(", "train_pred", ")", "\n", "outstr", "=", "'Train %d, loss: %.6f, train acc: %.6f, train avg acc: %.6f'", "%", "(", "epoch", ",", "\n", "train_loss", "*", "1.0", "/", "count", ",", "\n", "metrics", ".", "accuracy_score", "(", "\n", "train_true", ",", "train_pred", ")", ",", "\n", "metrics", ".", "balanced_accuracy_score", "(", "\n", "train_true", ",", "train_pred", ")", ")", "\n", "io", ".", "cprint", "(", "outstr", ")", "\n", "\n", "####################", "\n", "# Test", "\n", "####################", "\n", "test_loss", "=", "0.0", "\n", "count", "=", "0.0", "\n", "model", ".", "eval", "(", ")", "\n", "test_pred", "=", "[", "]", "\n", "test_true", "=", "[", "]", "\n", "for", "data", ",", "label", "in", "test_loader", ":", "\n", "            ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "batch_size", "=", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "logits", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "label", ")", "\n", "preds", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "count", "+=", "batch_size", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "test_true", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "test_pred", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "test_true", "=", "np", ".", "concatenate", "(", "test_true", ")", "\n", "test_pred", "=", "np", ".", "concatenate", "(", "test_pred", ")", "\n", "test_acc", "=", "metrics", ".", "accuracy_score", "(", "test_true", ",", "test_pred", ")", "\n", "avg_per_class_acc", "=", "metrics", ".", "balanced_accuracy_score", "(", "test_true", ",", "test_pred", ")", "\n", "outstr", "=", "'Test %d, loss: %.6f, test acc: %.6f, test avg acc: %.6f'", "%", "(", "epoch", ",", "\n", "test_loss", "*", "1.0", "/", "count", ",", "\n", "test_acc", ",", "\n", "avg_per_class_acc", ")", "\n", "io", ".", "cprint", "(", "outstr", ")", "\n", "if", "test_acc", ">=", "best_test_acc", ":", "\n", "            ", "best_test_acc", "=", "test_acc", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.main.test": [[138, 168], ["torch.utils.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "model.DGCNN().to", "torch.DataParallel", "model.eval.load_state_dict", "model.eval.eval", "numpy.concatenate", "numpy.concatenate", "sklearn.accuracy_score", "sklearn.balanced_accuracy_score", "io.cprint", "data.ModelNet40", "torch.load", "torch.load", "torch.load", "torch.load", "data.permute.permute", "model.eval.", "np.concatenate.append", "np.concatenate.append", "model.DGCNN", "data.permute.to", "label.to().squeeze", "data.permute.size", "model.max", "label.cpu().numpy", "preds.detach().cpu().numpy", "label.to", "label.cpu", "preds.detach().cpu", "preds.detach"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.cprint"], ["", "", "", "def", "test", "(", "args", ",", "io", ")", ":", "\n", "    ", "test_loader", "=", "DataLoader", "(", "ModelNet40", "(", "partition", "=", "'test'", ",", "num_points", "=", "args", ".", "num_points", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "#Try to load models", "\n", "model", "=", "DGCNN", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "test_acc", "=", "0.0", "\n", "count", "=", "0.0", "\n", "test_true", "=", "[", "]", "\n", "test_pred", "=", "[", "]", "\n", "for", "data", ",", "label", "in", "test_loader", ":", "\n", "\n", "        ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "batch_size", "=", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "logits", "=", "model", "(", "data", ")", "\n", "preds", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "test_true", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "test_pred", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "test_true", "=", "np", ".", "concatenate", "(", "test_true", ")", "\n", "test_pred", "=", "np", ".", "concatenate", "(", "test_pred", ")", "\n", "test_acc", "=", "metrics", ".", "accuracy_score", "(", "test_true", ",", "test_pred", ")", "\n", "avg_per_class_acc", "=", "metrics", ".", "balanced_accuracy_score", "(", "test_true", ",", "test_pred", ")", "\n", "outstr", "=", "'Test :: test acc: %.6f, test avg acc: %.6f'", "%", "(", "test_acc", ",", "avg_per_class_acc", ")", "\n", "io", ".", "cprint", "(", "outstr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.ModelNet40.__init__": [[65, 69], ["data.load_data"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.load_data"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ",", "partition", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "label", "=", "load_data", "(", "partition", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "partition", "=", "partition", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.ModelNet40.__getitem__": [[70, 77], ["data.translate_pointcloud", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.translate_pointcloud"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "pointcloud", "=", "self", ".", "data", "[", "item", "]", "[", ":", "self", ".", "num_points", "]", "\n", "label", "=", "self", ".", "label", "[", "item", "]", "\n", "if", "self", ".", "partition", "==", "'train'", ":", "\n", "            ", "pointcloud", "=", "translate_pointcloud", "(", "pointcloud", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "pointcloud", ")", "\n", "", "return", "pointcloud", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.ModelNet40.__len__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.download": [[19, 30], ["os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.mkdir", "os.path.exists", "os.path.basename", "os.system", "os.system", "os.system", "os.path.join"], "function", ["None"], ["def", "download", "(", ")", ":", "\n", "    ", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'data'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "DATA_DIR", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "DATA_DIR", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ")", ")", ":", "\n", "        ", "www", "=", "'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'", "\n", "zipfile", "=", "os", ".", "path", ".", "basename", "(", "www", ")", "\n", "os", ".", "system", "(", "'wget %s; unzip %s'", "%", "(", "www", ",", "zipfile", ")", ")", "\n", "os", ".", "system", "(", "'mv %s %s'", "%", "(", "zipfile", "[", ":", "-", "4", "]", ",", "DATA_DIR", ")", ")", "\n", "os", ".", "system", "(", "'rm %s'", "%", "(", "zipfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.load_data": [[32, 48], ["data.download", "os.path.dirname", "os.path.join", "glob.glob", "numpy.concatenate", "numpy.concatenate", "os.path.abspath", "os.path.join", "h5py.File", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.download", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close"], ["", "", "def", "load_data", "(", "partition", ")", ":", "\n", "    ", "download", "(", ")", "\n", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'data'", ")", "\n", "all_data", "=", "[", "]", "\n", "all_label", "=", "[", "]", "\n", "for", "h5_name", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ",", "'ply_data_%s*.h5'", "%", "partition", ")", ")", ":", "\n", "        ", "f", "=", "h5py", ".", "File", "(", "h5_name", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_label", ".", "append", "(", "label", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_label", "=", "np", ".", "concatenate", "(", "all_label", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_label", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.translate_pointcloud": [[50, 56], ["numpy.random.uniform", "numpy.random.uniform", "numpy.add().astype", "numpy.add", "numpy.multiply"], "function", ["None"], ["", "def", "translate_pointcloud", "(", "pointcloud", ")", ":", "\n", "    ", "xyz1", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "2.", "/", "3.", ",", "high", "=", "3.", "/", "2.", ",", "size", "=", "[", "3", "]", ")", "\n", "xyz2", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "0.2", ",", "high", "=", "0.2", ",", "size", "=", "[", "3", "]", ")", "\n", "\n", "translated_pointcloud", "=", "np", ".", "add", "(", "np", ".", "multiply", "(", "pointcloud", ",", "xyz1", ")", ",", "xyz2", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "translated_pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.data.jitter_pointcloud": [[58, 62], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_pointcloud", "(", "pointcloud", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.02", ")", ":", "\n", "    ", "N", ",", "C", "=", "pointcloud", ".", "shape", "\n", "pointcloud", "+=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.PointNet.__init__": [[57, 74], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "output_channels", "=", "40", ")", ":", "\n", "        ", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "128", ",", "args", ".", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "args", ".", "emb_dims", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "args", ".", "emb_dims", ",", "512", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "dp1", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "output_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.PointNet.forward": [[75, 86], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.relu", "torch.relu", "torch.relu", "model.PointNet.dp1", "model.PointNet.linear2", "model.PointNet.bn1", "model.PointNet.bn2", "model.PointNet.bn3", "model.PointNet.bn4", "model.PointNet.bn5", "model.PointNet.bn6", "model.PointNet.conv1", "model.PointNet.conv2", "model.PointNet.conv3", "model.PointNet.conv4", "model.PointNet.conv5", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "model.PointNet.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "adaptive_max_pool1d", "(", "x", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn6", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dp1", "(", "x", ")", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.DGCNN.__init__": [[89, 122], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "output_channels", "=", "40", ")", ":", "\n", "        ", "super", "(", "DGCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "k", "=", "args", ".", "k", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "args", ".", "emb_dims", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "6", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn1", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", "*", "2", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn2", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", "*", "2", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn3", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", "*", "2", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn4", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "512", ",", "args", ".", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn5", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "args", ".", "emb_dims", "*", "2", ",", "512", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "dp1", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "dp2", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "256", ",", "output_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.DGCNN.forward": [[123, 154], ["model.DGCNN.size", "model.get_graph_feature", "model.DGCNN.conv1", "model.get_graph_feature", "model.DGCNN.conv2", "model.get_graph_feature", "model.DGCNN.conv3", "model.get_graph_feature", "model.DGCNN.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DGCNN.conv5", "torch.adaptive_max_pool1d().view", "torch.adaptive_max_pool1d().view", "torch.adaptive_max_pool1d().view", "torch.adaptive_avg_pool1d().view", "torch.adaptive_avg_pool1d().view", "torch.adaptive_avg_pool1d().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model.DGCNN.dp1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model.DGCNN.dp2", "model.DGCNN.linear3", "model.DGCNN.max", "model.DGCNN.max", "model.DGCNN.max", "model.DGCNN.max", "model.DGCNN.bn6", "model.DGCNN.bn7", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "torch.adaptive_avg_pool1d", "torch.adaptive_avg_pool1d", "torch.adaptive_avg_pool1d", "model.DGCNN.linear1", "model.DGCNN.linear2"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.get_graph_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.get_graph_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.get_graph_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.get_graph_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "get_graph_feature", "(", "x", ",", "k", "=", "self", ".", "k", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x1", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "\n", "x", "=", "get_graph_feature", "(", "x1", ",", "k", "=", "self", ".", "k", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x2", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "\n", "x", "=", "get_graph_feature", "(", "x2", ",", "k", "=", "self", ".", "k", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x3", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "\n", "x", "=", "get_graph_feature", "(", "x3", ",", "k", "=", "self", ".", "k", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x4", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x1", "=", "F", ".", "adaptive_max_pool1d", "(", "x", ",", "1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "x2", "=", "F", ".", "adaptive_avg_pool1d", "(", "x", ",", "1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "1", ")", "\n", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn6", "(", "self", ".", "linear1", "(", "x", ")", ")", ",", "negative_slope", "=", "0.2", ")", "\n", "x", "=", "self", ".", "dp1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn7", "(", "self", ".", "linear2", "(", "x", ")", ")", ",", "negative_slope", "=", "0.2", ")", "\n", "x", "=", "self", ".", "dp2", "(", "x", ")", "\n", "x", "=", "self", ".", "linear3", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.knn": [[21, 28], ["torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum.transpose", "pairwise_distance.topk", "x.transpose"], "function", ["None"], ["def", "knn", "(", "x", ",", "k", ")", ":", "\n", "    ", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ",", "x", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "-", "xx", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# (batch_size, num_points, k)", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.model.get_graph_feature": [[30, 54], ["x.view().repeat.size", "x.view().repeat.size", "x.view().repeat.view", "torch.device", "torch.device", "torch.device", "knn.view", "x.view().repeat.size", "x.view().repeat.transpose().contiguous", "torch.cat().permute().contiguous.view", "x.view().repeat.view().repeat", "torch.cat().permute().contiguous", "torch.cat().permute().contiguous", "torch.cat().permute().contiguous", "model.knn", "torch.arange().view", "torch.arange().view", "torch.arange().view", "x.view().repeat.view", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn"], ["", "def", "get_graph_feature", "(", "x", ",", "k", "=", "20", ",", "idx", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "num_points", "=", "x", ".", "size", "(", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "if", "idx", "is", "None", ":", "\n", "        ", "idx", "=", "knn", "(", "x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "\n", "idx", "=", "idx", "+", "idx_base", "\n", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "\n", "_", ",", "num_dims", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, num_dims)  -> (batch_size*num_points, num_dims) #   batch_size * num_points * k + range(0, batch_size*num_points)", "\n", "feature", "=", "x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "num_dims", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "num_dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "\n", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "feature", "-", "x", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.__init__": [[37, 39], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "f", "=", "open", "(", "path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.cprint": [[40, 44], ["print", "util.IOStream.f.write", "util.IOStream.f.flush"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "cprint", "(", "self", ",", "text", ")", ":", "\n", "        ", "print", "(", "text", ")", "\n", "self", ".", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close": [[45, 47], ["util.IOStream.f.close"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "f", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.cal_loss": [[16, 34], ["gold.contiguous().view.contiguous().view", "pred.size", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.log_softmax", "torch.cross_entropy", "gold.contiguous().view.contiguous", "gold.contiguous().view.view", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["def", "cal_loss", "(", "pred", ",", "gold", ",", "smoothing", "=", "True", ")", ":", "\n", "    ", "''' Calculate cross entropy loss, apply label smoothing if needed. '''", "\n", "\n", "gold", "=", "gold", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "smoothing", ":", "\n", "        ", "eps", "=", "0.2", "\n", "n_class", "=", "pred", ".", "size", "(", "1", ")", "\n", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "pred", ")", ".", "scatter", "(", "1", ",", "gold", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "one_hot", "=", "one_hot", "*", "(", "1", "-", "eps", ")", "+", "(", "1", "-", "one_hot", ")", "*", "eps", "/", "(", "n_class", "-", "1", ")", "\n", "log_prb", "=", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "-", "(", "one_hot", "*", "log_prb", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "gold", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.shuffle_data": [[20, 31], ["numpy.arange", "numpy.random.shuffle", "len"], "function", ["None"], ["", "def", "shuffle_data", "(", "data", ",", "labels", ")", ":", "\n", "  ", "\"\"\" Shuffle data and labels.\n    Input:\n      data: B,N,... numpy array\n      label: B,... numpy array\n    Return:\n      shuffled data, label and shuffle indices\n  \"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "data", "[", "idx", ",", "...", "]", ",", "labels", "[", "idx", "]", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.rotate_point_cloud": [[33, 52], ["numpy.zeros", "xrange", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud", "(", "batch_data", ")", ":", "\n", "  ", "\"\"\" Randomly rotate the point clouds to augument the dataset\n    rotation is per shape based along up direction\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, rotated batch of point clouds\n  \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.rotate_point_cloud_by_angle": [[54, 72], ["numpy.zeros", "xrange", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "  ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, rotated batch of point clouds\n  \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "    ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.rotate_perturbation_point_cloud": [[74, 97], ["numpy.zeros", "xrange", "numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "shape_pc.reshape", "numpy.random.randn", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_perturbation_point_cloud", "(", "batch_data", ",", "angle_sigma", "=", "0.06", ",", "angle_clip", "=", "0.18", ")", ":", "\n", "  ", "\"\"\" Randomly perturb the point clouds by small rotations\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, rotated batch of point clouds\n  \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "angles", "=", "np", ".", "clip", "(", "angle_sigma", "*", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "-", "angle_clip", ",", "angle_clip", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.jitter_point_cloud": [[99, 111], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud", "(", "batch_data", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "  ", "\"\"\" Randomly jitter points. jittering is per point.\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, jittered batch of point clouds\n  \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "B", ",", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "batch_data", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.shift_point_cloud": [[112, 124], ["numpy.random.uniform", "range"], "function", ["None"], ["", "def", "shift_point_cloud", "(", "batch_data", ",", "shift_range", "=", "0.1", ")", ":", "\n", "  ", "\"\"\" Randomly shift point cloud. Shift is per point cloud.\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, shifted batch of point clouds\n  \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "shifts", "=", "np", ".", "random", ".", "uniform", "(", "-", "shift_range", ",", "shift_range", ",", "(", "B", ",", "3", ")", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "    ", "batch_data", "[", "batch_index", ",", ":", ",", ":", "]", "+=", "shifts", "[", "batch_index", ",", ":", "]", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.random_scale_point_cloud": [[126, 138], ["numpy.random.uniform", "range"], "function", ["None"], ["", "def", "random_scale_point_cloud", "(", "batch_data", ",", "scale_low", "=", "0.8", ",", "scale_high", "=", "1.25", ")", ":", "\n", "  ", "\"\"\" Randomly scale the point cloud. Scale is per point cloud.\n    Input:\n      BxNx3 array, original batch of point clouds\n    Return:\n      BxNx3 array, scaled batch of point clouds\n  \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "scale_low", ",", "scale_high", ",", "B", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "    ", "batch_data", "[", "batch_index", ",", ":", ",", ":", "]", "*=", "scales", "[", "batch_index", "]", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.getDataFiles": [[139, 141], ["line.rstrip", "open"], "function", ["None"], ["", "def", "getDataFiles", "(", "list_filename", ")", ":", "\n", "  ", "return", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "list_filename", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.load_h5": [[142, 147], ["h5py.File"], "function", ["None"], ["", "def", "load_h5", "(", "h5_filename", ")", ":", "\n", "  ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.loadDataFile": [[148, 150], ["provider.load_h5"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.load_h5"], ["", "def", "loadDataFile", "(", "filename", ")", ":", "\n", "  ", "return", "load_h5", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.load_h5_data_label_seg": [[152, 158], ["h5py.File"], "function", ["None"], ["", "def", "load_h5_data_label_seg", "(", "h5_filename", ")", ":", "\n", "  ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "# (2048, 2048, 3)", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "# (2048, 1)", "\n", "seg", "=", "f", "[", "'pid'", "]", "[", ":", "]", "# (2048, 2048)", "\n", "return", "(", "data", ",", "label", ",", "seg", ")", "", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.evaluate.log_string": [[51, 55], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.evaluate.evaluate": [[56, 88], ["tensorflow.ConfigProto", "tensorflow.Session", "tf.train.Saver.restore", "evaluate.log_string", "evaluate.eval_one_epoch", "tensorflow.device", "MODEL.placeholder_inputs", "tensorflow.placeholder", "MODEL.get_model", "MODEL.get_loss", "tensorflow.train.Saver", "str"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.eval_one_epoch", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.placeholder_inputs", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_model", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_loss"], ["", "def", "evaluate", "(", "num_votes", ")", ":", "\n", "    ", "is_training", "=", "False", "\n", "\n", "with", "tf", ".", "device", "(", "'/gpu:'", "+", "str", "(", "GPU_INDEX", ")", ")", ":", "\n", "        ", "pointclouds_pl", ",", "labels_pl", "=", "MODEL", ".", "placeholder_inputs", "(", "BATCH_SIZE", ",", "NUM_POINT", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "# simple model", "\n", "pred", ",", "end_points", "=", "MODEL", ".", "get_model", "(", "pointclouds_pl", ",", "is_training_pl", ")", "\n", "loss", "=", "MODEL", ".", "get_loss", "(", "pred", ",", "labels_pl", ",", "end_points", ")", "\n", "\n", "# Add ops to save and restore all the variables.", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Create a session", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Restore variables from disk.", "\n", "saver", ".", "restore", "(", "sess", ",", "MODEL_PATH", ")", "\n", "log_string", "(", "\"Model restored.\"", ")", "\n", "\n", "ops", "=", "{", "'pointclouds_pl'", ":", "pointclouds_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", ",", "\n", "'loss'", ":", "loss", "}", "\n", "\n", "eval_one_epoch", "(", "sess", ",", "ops", ",", "num_votes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.evaluate.eval_one_epoch": [[90, 164], ["open", "range", "evaluate.log_string", "evaluate.log_string", "evaluate.log_string", "enumerate", "os.path.join", "len", "evaluate.log_string", "provider.loadDataFile", "numpy.squeeze", "print", "print", "range", "numpy.array", "numpy.array", "evaluate.log_string", "range", "range", "numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "numpy.sum", "range", "numpy.mean", "provider.rotate_point_cloud_by_angle", "sess.run", "numpy.argmax", "range", "open.write", "float", "float", "str", "float", "os.path.join", "pc_util.point_cloud_three_views", "scipy.misc.imsave", "numpy.array", "numpy.array", "numpy.squeeze", "float"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.loadDataFile", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.rotate_point_cloud_by_angle", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.point_cloud_three_views"], ["", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "num_votes", "=", "1", ",", "topk", "=", "1", ")", ":", "\n", "    ", "error_cnt", "=", "0", "\n", "is_training", "=", "False", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "total_seen_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "total_correct_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "'pred_label.txt'", ")", ",", "'w'", ")", "\n", "for", "fn", "in", "range", "(", "len", "(", "TEST_FILES", ")", ")", ":", "\n", "        ", "log_string", "(", "'----'", "+", "str", "(", "fn", ")", "+", "'----'", ")", "\n", "current_data", ",", "current_label", "=", "provider", ".", "loadDataFile", "(", "TEST_FILES", "[", "fn", "]", ")", "\n", "current_data", "=", "current_data", "[", ":", ",", "0", ":", "NUM_POINT", ",", ":", "]", "\n", "current_label", "=", "np", ".", "squeeze", "(", "current_label", ")", "\n", "print", "(", "current_data", ".", "shape", ")", "\n", "\n", "file_size", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "file_size", "//", "BATCH_SIZE", "\n", "print", "(", "file_size", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "start_idx", "=", "batch_idx", "*", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "BATCH_SIZE", "\n", "cur_batch_size", "=", "end_idx", "-", "start_idx", "\n", "\n", "# Aggregating BEG", "\n", "batch_loss_sum", "=", "0", "# sum of losses for the batch", "\n", "batch_pred_sum", "=", "np", ".", "zeros", "(", "(", "cur_batch_size", ",", "NUM_CLASSES", ")", ")", "# score for classes", "\n", "batch_pred_classes", "=", "np", ".", "zeros", "(", "(", "cur_batch_size", ",", "NUM_CLASSES", ")", ")", "# 0/1 for classes", "\n", "for", "vote_idx", "in", "range", "(", "num_votes", ")", ":", "\n", "                ", "rotated_data", "=", "provider", ".", "rotate_point_cloud_by_angle", "(", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", ",", "\n", "vote_idx", "/", "float", "(", "num_votes", ")", "*", "np", ".", "pi", "*", "2", ")", "\n", "feed_dict", "=", "{", "ops", "[", "'pointclouds_pl'", "]", ":", "rotated_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "current_label", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "batch_pred_sum", "+=", "pred_val", "\n", "batch_pred_val", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "for", "el_idx", "in", "range", "(", "cur_batch_size", ")", ":", "\n", "                    ", "batch_pred_classes", "[", "el_idx", ",", "batch_pred_val", "[", "el_idx", "]", "]", "+=", "1", "\n", "", "batch_loss_sum", "+=", "(", "loss_val", "*", "cur_batch_size", "/", "float", "(", "num_votes", ")", ")", "\n", "# pred_val_topk = np.argsort(batch_pred_sum, axis=-1)[:,-1*np.array(range(topk))-1]", "\n", "# pred_val = np.argmax(batch_pred_classes, 1)", "\n", "", "pred_val", "=", "np", ".", "argmax", "(", "batch_pred_sum", ",", "1", ")", "\n", "# Aggregating END", "\n", "\n", "correct", "=", "np", ".", "sum", "(", "pred_val", "==", "current_label", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "# correct = np.sum(pred_val_topk[:,0:topk] == label_val)", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "cur_batch_size", "\n", "loss_sum", "+=", "batch_loss_sum", "\n", "\n", "for", "i", "in", "range", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "                ", "l", "=", "current_label", "[", "i", "]", "\n", "total_seen_class", "[", "l", "]", "+=", "1", "\n", "total_correct_class", "[", "l", "]", "+=", "(", "pred_val", "[", "i", "-", "start_idx", "]", "==", "l", ")", "\n", "fout", ".", "write", "(", "'%d, %d\\n'", "%", "(", "pred_val", "[", "i", "-", "start_idx", "]", ",", "l", ")", ")", "\n", "\n", "if", "pred_val", "[", "i", "-", "start_idx", "]", "!=", "l", "and", "FLAGS", ".", "visu", ":", "# ERROR CASE, DUMP!", "\n", "                    ", "img_filename", "=", "'%d_label_%s_pred_%s.jpg'", "%", "(", "error_cnt", ",", "SHAPE_NAMES", "[", "l", "]", ",", "\n", "SHAPE_NAMES", "[", "pred_val", "[", "i", "-", "start_idx", "]", "]", ")", "\n", "img_filename", "=", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "img_filename", ")", "\n", "output_img", "=", "pc_util", ".", "point_cloud_three_views", "(", "np", ".", "squeeze", "(", "current_data", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "img_filename", ",", "output_img", ")", "\n", "error_cnt", "+=", "1", "\n", "\n", "", "", "", "", "log_string", "(", "'eval mean loss: %f'", "%", "(", "loss_sum", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'eval accuracy: %f'", "%", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'eval avg class acc: %f'", "%", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "total_correct_class", ")", "/", "np", ".", "array", "(", "total_seen_class", ",", "dtype", "=", "np", ".", "float", ")", ")", ")", ")", "\n", "\n", "class_accuracies", "=", "np", ".", "array", "(", "total_correct_class", ")", "/", "np", ".", "array", "(", "total_seen_class", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "SHAPE_NAMES", ")", ":", "\n", "        ", "log_string", "(", "'%10s:\\t%0.3f'", "%", "(", "name", ",", "class_accuracies", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.log_string": [[67, 71], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.get_learning_rate": [[73, 82], ["tensorflow.train.exponential_decay", "tensorflow.maximum"], "function", ["None"], ["", "def", "get_learning_rate", "(", "batch", ")", ":", "\n", "    ", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BASE_LEARNING_RATE", ",", "# Base learning rate.", "\n", "batch", "*", "BATCH_SIZE", ",", "# Current index into the dataset.", "\n", "DECAY_STEP", ",", "# Decay step.", "\n", "DECAY_RATE", ",", "# Decay rate.", "\n", "staircase", "=", "True", ")", "\n", "learning_rate", "=", "tf", ".", "maximum", "(", "learning_rate", ",", "0.00001", ")", "# CLIP THE LEARNING RATE!", "\n", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.get_bn_decay": [[83, 92], ["tensorflow.train.exponential_decay", "tensorflow.minimum"], "function", ["None"], ["", "def", "get_bn_decay", "(", "batch", ")", ":", "\n", "    ", "bn_momentum", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BN_INIT_DECAY", ",", "\n", "batch", "*", "BATCH_SIZE", ",", "\n", "BN_DECAY_DECAY_STEP", ",", "\n", "BN_DECAY_DECAY_RATE", ",", "\n", "staircase", "=", "True", ")", "\n", "bn_decay", "=", "tf", ".", "minimum", "(", "BN_DECAY_CLIP", ",", "1", "-", "bn_momentum", ")", "\n", "return", "bn_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.train": [[93, 168], ["tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "tensorflow.global_variables_initializer", "tf.Session.run", "range", "tensorflow.device", "MODEL.placeholder_inputs", "tensorflow.placeholder", "print", "tensorflow.Variable", "train.get_bn_decay", "tensorflow.summary.scalar", "MODEL.get_model", "MODEL.get_loss", "tensorflow.summary.scalar", "tensorflow.equal", "tensorflow.summary.scalar", "train.get_learning_rate", "tensorflow.summary.scalar", "tf.train.AdamOptimizer.minimize", "tensorflow.train.Saver", "os.path.join", "os.path.join", "train.log_string", "sys.stdout.flush", "train.train_one_epoch", "train.eval_one_epoch", "tensorflow.Graph", "tensorflow.argmax", "tensorflow.to_int64", "tensorflow.reduce_sum", "float", "tensorflow.train.MomentumOptimizer", "tf.train.Saver.save", "train.log_string", "str", "tensorflow.cast", "tensorflow.train.AdamOptimizer", "os.path.join"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.placeholder_inputs", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.get_bn_decay", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_model", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_loss", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.get_learning_rate", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.train_one_epoch", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.eval_one_epoch", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string"], ["", "def", "train", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/gpu:'", "+", "str", "(", "GPU_INDEX", ")", ")", ":", "\n", "            ", "pointclouds_pl", ",", "labels_pl", "=", "MODEL", ".", "placeholder_inputs", "(", "BATCH_SIZE", ",", "NUM_POINT", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "print", "(", "is_training_pl", ")", "\n", "\n", "# Note the global_step=batch parameter to minimize. ", "\n", "# That tells the optimizer to helpfully increment the 'batch' parameter for you every time it trains.", "\n", "batch", "=", "tf", ".", "Variable", "(", "0", ")", "\n", "bn_decay", "=", "get_bn_decay", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'bn_decay'", ",", "bn_decay", ")", "\n", "\n", "# Get model and loss ", "\n", "pred", ",", "end_points", "=", "MODEL", ".", "get_model", "(", "pointclouds_pl", ",", "is_training_pl", ",", "bn_decay", "=", "bn_decay", ")", "\n", "loss", "=", "MODEL", ".", "get_loss", "(", "pred", ",", "labels_pl", ",", "end_points", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "loss", ")", "\n", "\n", "correct", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "pred", ",", "1", ")", ",", "tf", ".", "to_int64", "(", "labels_pl", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "correct", ",", "tf", ".", "float32", ")", ")", "/", "float", "(", "BATCH_SIZE", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'accuracy'", ",", "accuracy", ")", "\n", "\n", "# Get training operator", "\n", "learning_rate", "=", "get_learning_rate", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "if", "OPTIMIZER", "==", "'momentum'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", ",", "momentum", "=", "MOMENTUM", ")", "\n", "", "elif", "OPTIMIZER", "==", "'adam'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "", "train_op", "=", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "batch", ")", "\n", "\n", "# Add ops to save and restore all the variables.", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Create a session", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Add summary writers", "\n", "#merged = tf.merge_all_summaries()", "\n", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'train'", ")", ",", "\n", "sess", ".", "graph", ")", "\n", "test_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'test'", ")", ")", "\n", "\n", "# Init variables", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "# To fix the bug introduced in TF 0.12.1 as in", "\n", "# http://stackoverflow.com/questions/41543774/invalidargumenterror-for-tensor-bool-tensorflow-0-12-1", "\n", "#sess.run(init)", "\n", "sess", ".", "run", "(", "init", ",", "{", "is_training_pl", ":", "True", "}", ")", "\n", "\n", "ops", "=", "{", "'pointclouds_pl'", ":", "pointclouds_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'train_op'", ":", "train_op", ",", "\n", "'merged'", ":", "merged", ",", "\n", "'step'", ":", "batch", "}", "\n", "\n", "for", "epoch", "in", "range", "(", "MAX_EPOCH", ")", ":", "\n", "            ", "log_string", "(", "'**** EPOCH %03d ****'", "%", "(", "epoch", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ")", "\n", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ")", "\n", "\n", "# Save the variables to disk.", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "                ", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "\"model.ckpt\"", ")", ")", "\n", "log_string", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.train_one_epoch": [[171, 218], ["numpy.arange", "numpy.random.shuffle", "range", "len", "len", "train.log_string", "provider.loadDataFile", "provider.shuffle_data", "numpy.squeeze", "range", "train.log_string", "train.log_string", "numpy.squeeze", "provider.rotate_point_cloud", "provider.jitter_point_cloud", "provider.random_scale_point_cloud", "provider.rotate_perturbation_point_cloud", "provider.shift_point_cloud", "sess.run", "train_writer.add_summary", "numpy.argmax", "numpy.sum", "str", "float", "float"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.loadDataFile", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.shuffle_data", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.rotate_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.jitter_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.random_scale_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.rotate_perturbation_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.shift_point_cloud"], ["", "", "", "", "def", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ")", ":", "\n", "    ", "\"\"\" ops: dict mapping from string to tf ops \"\"\"", "\n", "is_training", "=", "True", "\n", "\n", "# Shuffle train files", "\n", "train_file_idxs", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "TRAIN_FILES", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_file_idxs", ")", "\n", "\n", "for", "fn", "in", "range", "(", "len", "(", "TRAIN_FILES", ")", ")", ":", "\n", "        ", "log_string", "(", "'----'", "+", "str", "(", "fn", ")", "+", "'-----'", ")", "\n", "current_data", ",", "current_label", "=", "provider", ".", "loadDataFile", "(", "TRAIN_FILES", "[", "train_file_idxs", "[", "fn", "]", "]", ")", "\n", "current_data", "=", "current_data", "[", ":", ",", "0", ":", "NUM_POINT", ",", ":", "]", "\n", "current_data", ",", "current_label", ",", "_", "=", "provider", ".", "shuffle_data", "(", "current_data", ",", "np", ".", "squeeze", "(", "current_label", ")", ")", "\n", "current_label", "=", "np", ".", "squeeze", "(", "current_label", ")", "\n", "\n", "file_size", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "file_size", "//", "BATCH_SIZE", "\n", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "start_idx", "=", "batch_idx", "*", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "BATCH_SIZE", "\n", "\n", "# Augment batched point clouds by rotation and jittering", "\n", "rotated_data", "=", "provider", ".", "rotate_point_cloud", "(", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", ")", "\n", "jittered_data", "=", "provider", ".", "jitter_point_cloud", "(", "rotated_data", ")", "\n", "jittered_data", "=", "provider", ".", "random_scale_point_cloud", "(", "jittered_data", ")", "\n", "jittered_data", "=", "provider", ".", "rotate_perturbation_point_cloud", "(", "jittered_data", ")", "\n", "jittered_data", "=", "provider", ".", "shift_point_cloud", "(", "jittered_data", ")", "\n", "\n", "feed_dict", "=", "{", "ops", "[", "'pointclouds_pl'", "]", ":", "jittered_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "current_label", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", ",", "}", "\n", "summary", ",", "step", ",", "_", ",", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'merged'", "]", ",", "ops", "[", "'step'", "]", ",", "\n", "ops", "[", "'train_op'", "]", ",", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "pred_val", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "correct", "=", "np", ".", "sum", "(", "pred_val", "==", "current_label", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "BATCH_SIZE", "\n", "loss_sum", "+=", "loss_val", "\n", "\n", "", "log_string", "(", "'mean loss: %f'", "%", "(", "loss_sum", "/", "float", "(", "num_batches", ")", ")", ")", "\n", "log_string", "(", "'accuracy: %f'", "%", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.train.eval_one_epoch": [[220, 260], ["range", "train.log_string", "train.log_string", "train.log_string", "len", "train.log_string", "provider.loadDataFile", "numpy.squeeze", "range", "range", "range", "sess.run", "numpy.argmax", "numpy.sum", "range", "numpy.mean", "float", "float", "str", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.loadDataFile"], ["", "", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ")", ":", "\n", "    ", "\"\"\" ops: dict mapping from string to tf ops \"\"\"", "\n", "is_training", "=", "False", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "total_seen_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "total_correct_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "\n", "for", "fn", "in", "range", "(", "len", "(", "TEST_FILES", ")", ")", ":", "\n", "        ", "log_string", "(", "'----'", "+", "str", "(", "fn", ")", "+", "'-----'", ")", "\n", "current_data", ",", "current_label", "=", "provider", ".", "loadDataFile", "(", "TEST_FILES", "[", "fn", "]", ")", "\n", "current_data", "=", "current_data", "[", ":", ",", "0", ":", "NUM_POINT", ",", ":", "]", "\n", "current_label", "=", "np", ".", "squeeze", "(", "current_label", ")", "\n", "\n", "file_size", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "file_size", "//", "BATCH_SIZE", "\n", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "start_idx", "=", "batch_idx", "*", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "BATCH_SIZE", "\n", "\n", "feed_dict", "=", "{", "ops", "[", "'pointclouds_pl'", "]", ":", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "current_label", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "summary", ",", "step", ",", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'merged'", "]", ",", "ops", "[", "'step'", "]", ",", "\n", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "pred_val", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "correct", "=", "np", ".", "sum", "(", "pred_val", "==", "current_label", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "BATCH_SIZE", "\n", "loss_sum", "+=", "(", "loss_val", "*", "BATCH_SIZE", ")", "\n", "for", "i", "in", "range", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "                ", "l", "=", "current_label", "[", "i", "]", "\n", "total_seen_class", "[", "l", "]", "+=", "1", "\n", "total_correct_class", "[", "l", "]", "+=", "(", "pred_val", "[", "i", "-", "start_idx", "]", "==", "l", ")", "\n", "\n", "", "", "", "log_string", "(", "'eval mean loss: %f'", "%", "(", "loss_sum", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'eval accuracy: %f'", "%", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'eval avg class acc: %f'", "%", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "total_correct_class", ")", "/", "np", ".", "array", "(", "total_seen_class", ",", "dtype", "=", "np", ".", "float", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.point_cloud_to_volume_batch": [[24, 39], ["range", "pc_util.point_cloud_to_volume", "numpy.vstack", "numpy.concatenate", "numpy.squeeze", "vol_list.append", "vol_list.append", "point_cloud_to_volume.flatten", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.point_cloud_to_volume"], ["def", "point_cloud_to_volume_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "flatten", "=", "True", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 batch of point cloud\n        Output is Bx(vsize^3)\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume", "(", "np", ".", "squeeze", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ")", ",", "vsize", ",", "radius", ")", "\n", "if", "flatten", ":", "\n", "            ", "vol_list", ".", "append", "(", "vol", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "vol", ",", "-", "1", ")", ",", "0", ")", ")", "\n", "", "", "if", "flatten", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "vol_list", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.point_cloud_to_volume": [[41, 52], ["numpy.zeros", "locations.astype.astype", "float"], "function", ["None"], ["", "", "def", "point_cloud_to_volume", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points.\n        output is vsize*vsize*vsize\n        assumes points are in range [-radius, radius]\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ")", ")", "\n", "voxel", "=", "2", "*", "radius", "/", "float", "(", "vsize", ")", "\n", "locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "vol", "[", "locations", "[", ":", ",", "0", "]", ",", "locations", "[", ":", ",", "1", "]", ",", "locations", "[", ":", ",", "2", "]", "]", "=", "1.0", "\n", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.volume_to_point_cloud": [[56, 72], ["range", "numpy.vstack", "range", "len", "numpy.zeros", "range", "np.vstack.append", "numpy.array"], "function", ["None"], ["", "def", "volume_to_point_cloud", "(", "vol", ")", ":", "\n", "    ", "\"\"\" vol is occupancy grid (value = 0 or 1) of size vsize*vsize*vsize\n        return Nx3 numpy array.\n    \"\"\"", "\n", "vsize", "=", "vol", ".", "shape", "[", "0", "]", "\n", "assert", "(", "vol", ".", "shape", "[", "1", "]", "==", "vsize", "and", "vol", ".", "shape", "[", "1", "]", "==", "vsize", ")", "\n", "points", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "vol", "[", "a", ",", "b", ",", "c", "]", "==", "1", ":", "\n", "                    ", "points", ".", "append", "(", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", ")", "\n", "", "", "", "", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "", "points", "=", "np", ".", "vstack", "(", "points", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.read_ply": [[77, 83], ["plyfile.PlyData.read", "numpy.array"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.read"], ["", "def", "read_ply", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ point cloud from filename PLY file \"\"\"", "\n", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.write_ply": [[85, 91], ["numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "range", "plyfile.PlyData"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.describe", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "write_ply", "(", "points", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "\"\"\" input: Nx3, write points to filename as PLY format. \"\"\"", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.draw_point_cloud": [[97, 155], ["numpy.zeros", "eulerangles.euler2mat", "numpy.dot().transpose", "numpy.zeros", "range", "numpy.argwhere", "numpy.argsort", "numpy.max", "range", "numpy.mean", "numpy.max", "range", "numpy.max", "int", "int", "numpy.max", "numpy.dot", "numpy.sqrt", "numpy.min", "numpy.round", "numpy.round", "np.dot().transpose.transpose", "numpy.sum", "numpy.exp", "numpy.min", "abs"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.euler2mat"], ["", "def", "draw_point_cloud", "(", "input_points", ",", "canvasSize", "=", "500", ",", "space", "=", "200", ",", "diameter", "=", "25", ",", "\n", "xrot", "=", "0", ",", "yrot", "=", "0", ",", "zrot", "=", "0", ",", "switch_xyz", "=", "[", "0", ",", "1", ",", "2", "]", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\" Render point cloud to image with alpha channel.\n        Input:\n            points: Nx3 numpy array (+y is up direction)\n        Output:\n            gray image as numpy array of size canvasSizexcanvasSize\n    \"\"\"", "\n", "image", "=", "np", ".", "zeros", "(", "(", "canvasSize", ",", "canvasSize", ")", ")", "\n", "if", "input_points", "is", "None", "or", "input_points", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "image", "\n", "\n", "", "points", "=", "input_points", "[", ":", ",", "switch_xyz", "]", "\n", "M", "=", "euler2mat", "(", "zrot", ",", "yrot", ",", "xrot", ")", "\n", "points", "=", "(", "np", ".", "dot", "(", "M", ",", "points", ".", "transpose", "(", ")", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# Normalize the point cloud", "\n", "# We normalize scale to fit points in a unit sphere", "\n", "if", "normalize", ":", "\n", "        ", "centroid", "=", "np", ".", "mean", "(", "points", ",", "axis", "=", "0", ")", "\n", "points", "-=", "centroid", "\n", "furthest_distance", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "abs", "(", "points", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "points", "/=", "furthest_distance", "\n", "\n", "# Pre-compute the Gaussian disk", "\n", "", "radius", "=", "(", "diameter", "-", "1", ")", "/", "2.0", "\n", "disk", "=", "np", ".", "zeros", "(", "(", "diameter", ",", "diameter", ")", ")", "\n", "for", "i", "in", "range", "(", "diameter", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "diameter", ")", ":", "\n", "            ", "if", "(", "i", "-", "radius", ")", "*", "(", "i", "-", "radius", ")", "+", "(", "j", "-", "radius", ")", "*", "(", "j", "-", "radius", ")", "<=", "radius", "*", "radius", ":", "\n", "                ", "disk", "[", "i", ",", "j", "]", "=", "np", ".", "exp", "(", "(", "-", "(", "i", "-", "radius", ")", "**", "2", "-", "(", "j", "-", "radius", ")", "**", "2", ")", "/", "(", "radius", "**", "2", ")", ")", "\n", "", "", "", "mask", "=", "np", ".", "argwhere", "(", "disk", ">", "0", ")", "\n", "dx", "=", "mask", "[", ":", ",", "0", "]", "\n", "dy", "=", "mask", "[", ":", ",", "1", "]", "\n", "dv", "=", "disk", "[", "disk", ">", "0", "]", "\n", "\n", "# Order points by z-buffer", "\n", "zorder", "=", "np", ".", "argsort", "(", "points", "[", ":", ",", "2", "]", ")", "\n", "points", "=", "points", "[", "zorder", ",", ":", "]", "\n", "points", "[", ":", ",", "2", "]", "=", "(", "points", "[", ":", ",", "2", "]", "-", "np", ".", "min", "(", "points", "[", ":", ",", "2", "]", ")", ")", "/", "(", "np", ".", "max", "(", "points", "[", ":", ",", "2", "]", "-", "np", ".", "min", "(", "points", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "max_depth", "=", "np", ".", "max", "(", "points", "[", ":", ",", "2", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "j", "=", "points", ".", "shape", "[", "0", "]", "-", "i", "-", "1", "\n", "x", "=", "points", "[", "j", ",", "0", "]", "\n", "y", "=", "points", "[", "j", ",", "1", "]", "\n", "xc", "=", "canvasSize", "/", "2", "+", "(", "x", "*", "space", ")", "\n", "yc", "=", "canvasSize", "/", "2", "+", "(", "y", "*", "space", ")", "\n", "xc", "=", "int", "(", "np", ".", "round", "(", "xc", ")", ")", "\n", "yc", "=", "int", "(", "np", ".", "round", "(", "yc", ")", ")", "\n", "\n", "px", "=", "dx", "+", "xc", "\n", "py", "=", "dy", "+", "yc", "\n", "\n", "image", "[", "px", ",", "py", "]", "=", "image", "[", "px", ",", "py", "]", "*", "0.7", "+", "dv", "*", "(", "max_depth", "-", "points", "[", "j", ",", "2", "]", ")", "*", "0.3", "\n", "\n", "", "image", "=", "image", "/", "np", ".", "max", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.point_cloud_three_views": [[156, 168], ["pc_util.draw_point_cloud", "pc_util.draw_point_cloud", "pc_util.draw_point_cloud", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.draw_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.draw_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.draw_point_cloud"], ["", "def", "point_cloud_three_views", "(", "points", ")", ":", "\n", "    ", "\"\"\" input points Nx3 numpy array (+y is up direction).\n        return an numpy array gray image of size 500x1500. \"\"\"", "\n", "# +y is up direction", "\n", "# xrot is azimuth", "\n", "# yrot is in-plane", "\n", "# zrot is elevation", "\n", "img1", "=", "draw_point_cloud", "(", "points", ",", "zrot", "=", "110", "/", "180.0", "*", "np", ".", "pi", ",", "xrot", "=", "45", "/", "180.0", "*", "np", ".", "pi", ",", "yrot", "=", "0", "/", "180.0", "*", "np", ".", "pi", ")", "\n", "img2", "=", "draw_point_cloud", "(", "points", ",", "zrot", "=", "70", "/", "180.0", "*", "np", ".", "pi", ",", "xrot", "=", "135", "/", "180.0", "*", "np", ".", "pi", ",", "yrot", "=", "0", "/", "180.0", "*", "np", ".", "pi", ")", "\n", "img3", "=", "draw_point_cloud", "(", "points", ",", "zrot", "=", "180.0", "/", "180.0", "*", "np", ".", "pi", ",", "xrot", "=", "90", "/", "180.0", "*", "np", ".", "pi", ",", "yrot", "=", "0", "/", "180.0", "*", "np", ".", "pi", ")", "\n", "image_large", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", ",", "img3", "]", ",", "1", ")", "\n", "return", "image_large", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.point_cloud_three_views_demo": [[171, 177], ["pc_util.read_ply", "pc_util.point_cloud_three_views", "PIL.Image.fromarray", "Image.fromarray.save", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.read_ply", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.point_cloud_three_views"], ["def", "point_cloud_three_views_demo", "(", ")", ":", "\n", "    ", "\"\"\" Demo for draw_point_cloud function \"\"\"", "\n", "points", "=", "read_ply", "(", "'../third_party/mesh_sampling/piano.ply'", ")", "\n", "im_array", "=", "point_cloud_three_views", "(", "points", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "im_array", "*", "255.0", ")", ")", "\n", "img", ".", "save", "(", "'piano.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.pyplot_draw_point_cloud": [[183, 191], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel"], "function", ["None"], ["def", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" points is a Nx3 numpy array \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_zlabel", "(", "'z'", ")", "\n", "#savefig(output_filename)", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.pyplot_draw_volume": [[193, 199], ["pc_util.volume_to_point_cloud", "pc_util.pyplot_draw_point_cloud"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.volume_to_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.pc_util.pyplot_draw_point_cloud"], ["", "def", "pyplot_draw_volume", "(", "vol", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" vol is of size vsize*vsize*vsize\n        output an image to output_filename\n    \"\"\"", "\n", "points", "=", "volume_to_point_cloud", "(", "vol", ")", "\n", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu": [[12, 25], ["tensorflow.device", "tensorflow.get_variable"], "function", ["None"], ["def", "_variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ",", "use_fp16", "=", "False", ",", "trainable", "=", "True", ")", ":", "\n", "  ", "\"\"\"Helper to create a Variable stored on CPU memory.\n  Args:\n    name: name of the variable\n    shape: list of ints\n    initializer: initializer for Variable\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "    ", "dtype", "=", "tf", ".", "float16", "if", "use_fp16", "else", "tf", ".", "float32", "\n", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "initializer", "=", "initializer", ",", "dtype", "=", "dtype", ",", "trainable", "=", "trainable", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_with_weight_decay": [[26, 52], ["tf_util._variable_on_cpu", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu"], ["", "def", "_variable_with_weight_decay", "(", "name", ",", "shape", ",", "stddev", ",", "wd", ",", "use_xavier", "=", "True", ")", ":", "\n", "  ", "\"\"\"Helper to create an initialized Variable with weight decay.\n\n  Note that the Variable is initialized with a truncated normal distribution.\n  A weight decay is added only if one is specified.\n\n  Args:\n    name: name of the variable\n    shape: list of ints\n    stddev: standard deviation of a truncated Gaussian\n    wd: add L2Loss weight decay multiplied by this float. If None, weight\n        decay is not added for this Variable.\n    use_xavier: bool, whether to use xavier initializer\n\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "if", "use_xavier", ":", "\n", "    ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "", "else", ":", "\n", "    ", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "var", "=", "_variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ")", "\n", "if", "wd", "is", "not", "None", ":", "\n", "    ", "weight_decay", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ",", "wd", ",", "name", "=", "'weight_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv1d": [[54, 111], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv1d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv1d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_conv1d"], ["", "def", "conv1d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" 1D convolution with non-linear operation.\n\n  Args:\n    inputs: 3-D tensor variable BxLxC\n    num_output_channels: int\n    kernel_size: int\n    scope: string\n    stride: int\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_size", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv1d", "(", "inputs", ",", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv1d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "is_dist", "=", "is_dist", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d": [[115, 174], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv2d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv2d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_conv2d"], ["", "", "def", "conv2d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" 2D convolution with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "is_dist", "=", "is_dist", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d_transpose": [[176, 254], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tf_util.conv2d_transpose.get_deconv_dim"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_with_weight_decay"], ["", "", "def", "conv2d_transpose", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" 2D convolution transpose with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n\n  Note: conv2d(conv2d_transpose(a, num_out, ksize, stride), a.shape[-1], ksize, stride) == a\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_output_channels", ",", "num_in_channels", "]", "# reversed to conv2d", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "\n", "# from slim.convolution2d_transpose", "\n", "def", "get_deconv_dim", "(", "dim_size", ",", "stride_size", ",", "kernel_size", ",", "padding", ")", ":", "\n", "          ", "dim_size", "*=", "stride_size", "\n", "\n", "if", "padding", "==", "'VALID'", "and", "dim_size", "is", "not", "None", ":", "\n", "            ", "dim_size", "+=", "max", "(", "kernel_size", "-", "stride_size", ",", "0", ")", "\n", "", "return", "dim_size", "\n", "\n", "# caculate output shape", "\n", "", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "height", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "width", "=", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "out_height", "=", "get_deconv_dim", "(", "height", ",", "stride_h", ",", "kernel_h", ",", "padding", ")", "\n", "out_width", "=", "get_deconv_dim", "(", "width", ",", "stride_w", ",", "kernel_w", ",", "padding", ")", "\n", "output_shape", "=", "[", "batch_size", ",", "out_height", ",", "out_width", ",", "num_output_channels", "]", "\n", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "kernel", ",", "output_shape", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "is_dist", "=", "is_dist", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv3d": [[257, 316], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv3d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv3d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv3d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_conv3d"], ["", "", "def", "conv3d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" 3D convolution with non-linear operation.\n\n  Args:\n    inputs: 5-D tensor variable BxDxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 3 ints\n    scope: string\n    stride: a list of 3 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv3d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv3d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "is_dist", "=", "is_dist", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.fully_connected": [[317, 355], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.matmul", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_fc", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_fc"], ["", "", "def", "fully_connected", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "scope", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" Fully connected layer with non-linear operation.\n  \n  Args:\n    inputs: 2-D tensor BxN\n    num_outputs: int\n  \n  Returns:\n    Variable tensor of size B x num_outputs.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_input_units", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "weights", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "[", "num_input_units", ",", "num_outputs", "]", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "weights", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_outputs", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_fc", "(", "outputs", ",", "is_training", ",", "bn_decay", ",", "'bn'", ",", "is_dist", "=", "is_dist", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.max_pool2d": [[357, 381], ["tensorflow.variable_scope", "tensorflow.nn.max_pool"], "function", ["None"], ["", "", "def", "max_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D max pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.avg_pool2d": [[382, 406], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool"], "function", ["None"], ["", "", "def", "avg_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D avg pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.max_pool3d": [[408, 432], ["tensorflow.variable_scope", "tensorflow.nn.max_pool3d"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.max_pool3d"], ["", "", "def", "max_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D max pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.avg_pool3d": [[433, 457], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool3d"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.avg_pool3d"], ["", "", "def", "avg_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D avg pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_template": [[462, 500], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.moments", "tensorflow.train.ExponentialMovingAverage", "tensorflow.cond", "tensorflow.cond", "tensorflow.nn.batch_normalization", "tensorflow.constant", "tensorflow.constant", "inputs.get_shape", "tf.train.ExponentialMovingAverage.apply", "tensorflow.no_op", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.identity", "tf.train.ExponentialMovingAverage.average", "tf.train.ExponentialMovingAverage.average"], "function", ["None"], ["", "", "def", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims", ",", "bn_decay", ")", ":", "\n", "  ", "\"\"\" Batch normalization on convolutional maps and beyond...\n  Ref.: http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow\n  \n  Args:\n      inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n      is_training:   boolean tf.Varialbe, true indicates training phase\n      scope:         string, variable scope\n      moments_dims:  a list of ints, indicating dimensions for moments calculation\n      bn_decay:      float or float tensor variable, controling moving average weight\n  Return:\n      normed:        batch-normalized maps\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "beta", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "num_channels", "]", ")", ",", "\n", "name", "=", "'beta'", ",", "trainable", "=", "True", ")", "\n", "gamma", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "[", "num_channels", "]", ")", ",", "\n", "name", "=", "'gamma'", ",", "trainable", "=", "True", ")", "\n", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "moments_dims", ",", "name", "=", "'moments'", ")", "\n", "decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", "=", "decay", ")", "\n", "# Operator that maintains moving averages of variables.", "\n", "ema_apply_op", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "ema", ".", "apply", "(", "[", "batch_mean", ",", "batch_var", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "no_op", "(", ")", ")", "\n", "\n", "# Update moving average and return current batch's avg and var.", "\n", "def", "mean_var_with_update", "(", ")", ":", "\n", "      ", "with", "tf", ".", "control_dependencies", "(", "[", "ema_apply_op", "]", ")", ":", "\n", "        ", "return", "tf", ".", "identity", "(", "batch_mean", ")", ",", "tf", ".", "identity", "(", "batch_var", ")", "\n", "\n", "# ema.average returns the Variable holding the average of var.", "\n", "", "", "mean", ",", "var", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "mean_var_with_update", ",", "\n", "lambda", ":", "(", "ema", ".", "average", "(", "batch_mean", ")", ",", "ema", ".", "average", "(", "batch_var", ")", ")", ")", "\n", "normed", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "", "return", "normed", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_dist_template": [[502, 536], ["tensorflow.variable_scope", "tf_util._variable_on_cpu", "tf_util._variable_on_cpu", "tf_util._variable_on_cpu", "tf_util._variable_on_cpu", "tensorflow.cond", "tensorflow.nn.moments", "tensorflow.assign", "tensorflow.assign", "tensorflow.nn.batch_normalization", "inputs.get_shape", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.control_dependencies", "tensorflow.nn.batch_normalization"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util._variable_on_cpu"], ["", "def", "batch_norm_dist_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims", ",", "bn_decay", ")", ":", "\n", "  ", "\"\"\" The batch normalization for distributed training.\n  Args:\n      inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n      is_training:   boolean tf.Varialbe, true indicates training phase\n      scope:         string, variable scope\n      moments_dims:  a list of ints, indicating dimensions for moments calculation\n      bn_decay:      float or float tensor variable, controling moving average weight\n  Return:\n      normed:        batch-normalized maps\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "beta", "=", "_variable_on_cpu", "(", "'beta'", ",", "[", "num_channels", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "gamma", "=", "_variable_on_cpu", "(", "'gamma'", ",", "[", "num_channels", "]", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "\n", "pop_mean", "=", "_variable_on_cpu", "(", "'pop_mean'", ",", "[", "num_channels", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "pop_var", "=", "_variable_on_cpu", "(", "'pop_var'", ",", "[", "num_channels", "]", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "def", "train_bn_op", "(", ")", ":", "\n", "      ", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "moments_dims", ",", "name", "=", "'moments'", ")", "\n", "decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "train_mean", "=", "tf", ".", "assign", "(", "pop_mean", ",", "pop_mean", "*", "decay", "+", "batch_mean", "*", "(", "1", "-", "decay", ")", ")", "\n", "train_var", "=", "tf", ".", "assign", "(", "pop_var", ",", "pop_var", "*", "decay", "+", "batch_var", "*", "(", "1", "-", "decay", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "train_mean", ",", "train_var", "]", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "batch_mean", ",", "batch_var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "\n", "", "", "def", "test_bn_op", "(", ")", ":", "\n", "      ", "return", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "pop_mean", ",", "pop_var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "\n", "", "normed", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "train_bn_op", ",", "\n", "test_bn_op", ")", "\n", "return", "normed", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_fc": [[539, 555], ["tf_util.batch_norm_dist_template", "tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_dist_template", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_template"], ["", "", "def", "batch_norm_for_fc", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on FC data.\n  \n  Args:\n      inputs:      Tensor, 2D BxC input\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      is_dist:     true indicating distributed training scheme\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "if", "is_dist", ":", "\n", "    ", "return", "batch_norm_dist_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "]", ",", "bn_decay", ")", "\n", "", "else", ":", "\n", "    ", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_conv1d": [[557, 573], ["tf_util.batch_norm_dist_template", "tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_dist_template", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_template"], ["", "", "def", "batch_norm_for_conv1d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 1D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 3D BLC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      is_dist:     true indicating distributed training scheme\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "if", "is_dist", ":", "\n", "    ", "return", "batch_norm_dist_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", "]", ",", "bn_decay", ")", "\n", "", "else", ":", "\n", "    ", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_conv2d": [[577, 593], ["tf_util.batch_norm_dist_template", "tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_dist_template", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_template"], ["", "", "def", "batch_norm_for_conv2d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 2D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 4D BHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      is_dist:     true indicating distributed training scheme\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "if", "is_dist", ":", "\n", "    ", "return", "batch_norm_dist_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", "]", ",", "bn_decay", ")", "\n", "", "else", ":", "\n", "    ", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_for_conv3d": [[596, 612], ["tf_util.batch_norm_dist_template", "tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_dist_template", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.batch_norm_template"], ["", "", "def", "batch_norm_for_conv3d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 3D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 5D BDHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      is_dist:     true indicating distributed training scheme\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "if", "is_dist", ":", "\n", "    ", "return", "batch_norm_dist_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "bn_decay", ")", "\n", "", "else", ":", "\n", "    ", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.dropout": [[614, 636], ["tensorflow.variable_scope", "tensorflow.cond", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.dropout"], ["", "", "def", "dropout", "(", "inputs", ",", "\n", "is_training", ",", "\n", "scope", ",", "\n", "keep_prob", "=", "0.5", ",", "\n", "noise_shape", "=", "None", ")", ":", "\n", "  ", "\"\"\" Dropout layer.\n\n  Args:\n    inputs: tensor\n    is_training: boolean tf.Variable\n    scope: string\n    keep_prob: float in [0,1]\n    noise_shape: list of ints\n\n  Returns:\n    tensor variable\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "outputs", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "keep_prob", ",", "noise_shape", ")", ",", "\n", "lambda", ":", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance": [[638, 658], ["tensorflow.squeeze", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.transpose", "tf.expand_dims.get_shape().as_list", "tensorflow.expand_dims", "tensorflow.square", "tf.expand_dims.get_shape"], "function", ["None"], ["", "", "def", "pairwise_distance", "(", "point_cloud", ")", ":", "\n", "  ", "\"\"\"Compute pairwise distance of a point cloud.\n\n  Args:\n    point_cloud: tensor (batch_size, num_points, num_dims)\n\n  Returns:\n    pairwise distance: (batch_size, num_points, num_points)\n  \"\"\"", "\n", "og_batch_size", "=", "point_cloud", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "point_cloud", "=", "tf", ".", "squeeze", "(", "point_cloud", ")", "\n", "if", "og_batch_size", "==", "1", ":", "\n", "    ", "point_cloud", "=", "tf", ".", "expand_dims", "(", "point_cloud", ",", "0", ")", "\n", "\n", "", "point_cloud_transpose", "=", "tf", ".", "transpose", "(", "point_cloud", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "point_cloud_inner", "=", "tf", ".", "matmul", "(", "point_cloud", ",", "point_cloud_transpose", ")", "\n", "point_cloud_inner", "=", "-", "2", "*", "point_cloud_inner", "\n", "point_cloud_square", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "point_cloud", ")", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "point_cloud_square_tranpose", "=", "tf", ".", "transpose", "(", "point_cloud_square", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "return", "point_cloud_square", "+", "point_cloud_inner", "+", "point_cloud_square_tranpose", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn": [[660, 672], ["tensorflow.nn.top_k"], "function", ["None"], ["", "def", "knn", "(", "adj_matrix", ",", "k", "=", "20", ")", ":", "\n", "  ", "\"\"\"Get KNN based on the pairwise distance.\n  Args:\n    pairwise distance: (batch_size, num_points, num_points)\n    k: int\n\n  Returns:\n    nearest neighbors: (batch_size, num_points, k)\n  \"\"\"", "\n", "neg_adj", "=", "-", "adj_matrix", "\n", "_", ",", "nn_idx", "=", "tf", ".", "nn", ".", "top_k", "(", "neg_adj", ",", "k", "=", "k", ")", "\n", "return", "nn_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature": [[674, 707], ["tensorflow.squeeze", "tf.expand_dims.get_shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.gather", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.concat", "tf.expand_dims.get_shape().as_list", "tensorflow.expand_dims", "tensorflow.range", "tf.expand_dims.get_shape"], "function", ["None"], ["", "def", "get_edge_feature", "(", "point_cloud", ",", "nn_idx", ",", "k", "=", "20", ")", ":", "\n", "  ", "\"\"\"Construct edge feature for each point\n  Args:\n    point_cloud: (batch_size, num_points, 1, num_dims)\n    nn_idx: (batch_size, num_points, k)\n    k: int\n\n  Returns:\n    edge features: (batch_size, num_points, k, num_dims)\n  \"\"\"", "\n", "og_batch_size", "=", "point_cloud", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "point_cloud", "=", "tf", ".", "squeeze", "(", "point_cloud", ")", "\n", "if", "og_batch_size", "==", "1", ":", "\n", "    ", "point_cloud", "=", "tf", ".", "expand_dims", "(", "point_cloud", ",", "0", ")", "\n", "\n", "", "point_cloud_central", "=", "point_cloud", "\n", "\n", "point_cloud_shape", "=", "point_cloud", ".", "get_shape", "(", ")", "\n", "batch_size", "=", "point_cloud_shape", "[", "0", "]", ".", "value", "\n", "num_points", "=", "point_cloud_shape", "[", "1", "]", ".", "value", "\n", "num_dims", "=", "point_cloud_shape", "[", "2", "]", ".", "value", "\n", "\n", "idx_", "=", "tf", ".", "range", "(", "batch_size", ")", "*", "num_points", "\n", "idx_", "=", "tf", ".", "reshape", "(", "idx_", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "point_cloud_flat", "=", "tf", ".", "reshape", "(", "point_cloud", ",", "[", "-", "1", ",", "num_dims", "]", ")", "\n", "point_cloud_neighbors", "=", "tf", ".", "gather", "(", "point_cloud_flat", ",", "nn_idx", "+", "idx_", ")", "\n", "point_cloud_central", "=", "tf", ".", "expand_dims", "(", "point_cloud_central", ",", "axis", "=", "-", "2", ")", "\n", "\n", "point_cloud_central", "=", "tf", ".", "tile", "(", "point_cloud_central", ",", "[", "1", ",", "1", ",", "k", ",", "1", "]", ")", "\n", "\n", "edge_feature", "=", "tf", ".", "concat", "(", "[", "point_cloud_central", ",", "point_cloud_neighbors", "-", "point_cloud_central", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "edge_feature", "\n", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.export_ply": [[15, 21], ["numpy.zeros", "range", "plyfile.PlyData", "plyfile.PlyData.write", "plyfile.PlyElement.describe"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.describe"], ["def", "export_ply", "(", "pc", ",", "filename", ")", ":", "\n", "\t", "vertex", "=", "np", ".", "zeros", "(", "pc", ".", "shape", "[", "0", "]", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "pc", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "vertex", "[", "i", "]", "=", "(", "pc", "[", "i", "]", "[", "0", "]", ",", "pc", "[", "i", "]", "[", "1", "]", ",", "pc", "[", "i", "]", "[", "2", "]", ")", "\n", "", "ply_out", "=", "PlyData", "(", "[", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "]", ")", "\n", "ply_out", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.get_sampling_command": [[23, 29], ["None"], "function", ["None"], ["", "def", "get_sampling_command", "(", "obj_filename", ",", "ply_filename", ")", ":", "\n", "    ", "cmd", "=", "SAMPLING_BIN", "+", "' '", "+", "obj_filename", "\n", "cmd", "+=", "' '", "+", "ply_filename", "\n", "cmd", "+=", "' -n_samples %d '", "%", "SAMPLING_POINT_NUM", "\n", "cmd", "+=", "' -leaf_size %f '", "%", "SAMPLING_LEAF_SIZE", "\n", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.get_category_names": [[35, 39], ["os.path.join", "line.rstrip", "open"], "function", ["None"], ["", "def", "get_category_names", "(", ")", ":", "\n", "    ", "shape_names_file", "=", "os", ".", "path", ".", "join", "(", "MODELNET40_PATH", ",", "'shape_names.txt'", ")", "\n", "shape_names", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "shape_names_file", ")", "]", "\n", "return", "shape_names", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.get_obj_filenames": [[41, 46], ["os.path.join", "print", "os.path.join", "line.rstrip", "open", "len"], "function", ["None"], ["", "def", "get_obj_filenames", "(", ")", ":", "\n", "    ", "obj_filelist_file", "=", "os", ".", "path", ".", "join", "(", "MODELNET40_PATH", ",", "'filelist.txt'", ")", "\n", "obj_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "MODELNET40_PATH", ",", "line", ".", "rstrip", "(", ")", ")", "for", "line", "in", "open", "(", "obj_filelist_file", ")", "]", "\n", "print", "(", "'Got %d obj files in modelnet40.'", "%", "len", "(", "obj_filenames", ")", ")", "\n", "return", "obj_filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.batch_mkdir": [[48, 54], ["os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "batch_mkdir", "(", "output_folder", ",", "subdir_list", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_folder", ")", "\n", "", "for", "subdir", "in", "subdir_list", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "subdir", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "subdir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.save_h5_data_label_normal": [[60, 76], ["h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close"], ["", "", "", "def", "save_h5_data_label_normal", "(", "h5_filename", ",", "data", ",", "label", ",", "normal", ",", "\n", "data_dtype", "=", "'float32'", ",", "label_dtype", "=", "'uint8'", ",", "noral_dtype", "=", "'float32'", ")", ":", "\n", "    ", "h5_fout", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'data'", ",", "data", "=", "data", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "4", ",", "\n", "dtype", "=", "data_dtype", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'normal'", ",", "data", "=", "normal", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "4", ",", "\n", "dtype", "=", "normal_dtype", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'label'", ",", "data", "=", "label", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "1", ",", "\n", "dtype", "=", "label_dtype", ")", "\n", "h5_fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.save_h5": [[79, 90], ["h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close"], ["", "def", "save_h5", "(", "h5_filename", ",", "data", ",", "label", ",", "data_dtype", "=", "'uint8'", ",", "label_dtype", "=", "'uint8'", ")", ":", "\n", "    ", "h5_fout", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'data'", ",", "data", "=", "data", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "4", ",", "\n", "dtype", "=", "data_dtype", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'label'", ",", "data", "=", "label", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "1", ",", "\n", "dtype", "=", "label_dtype", ")", "\n", "h5_fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.load_h5_data_label_normal": [[92, 98], ["h5py.File"], "function", ["None"], ["", "def", "load_h5_data_label_normal", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "normal", "=", "f", "[", "'normal'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ",", "normal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.load_h5_data_label_seg": [[100, 106], ["h5py.File"], "function", ["None"], ["", "def", "load_h5_data_label_seg", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "seg", "=", "f", "[", "'pid'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ",", "seg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.load_h5": [[108, 113], ["h5py.File"], "function", ["None"], ["", "def", "load_h5", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.load_ply_data": [[119, 124], ["plyfile.PlyData.read", "numpy.array"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.read"], ["", "def", "load_ply_data", "(", "filename", ",", "point_num", ")", ":", "\n", "    ", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", ":", "point_num", "]", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.load_ply_normal": [[126, 131], ["plyfile.PlyData.read", "numpy.array"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.read"], ["", "def", "load_ply_normal", "(", "filename", ",", "point_num", ")", ":", "\n", "    ", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'normal'", "]", ".", "data", "[", ":", "point_num", "]", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.data_prep_util.pad_arr_rows": [[134, 144], ["len", "numpy.lib.pad", "numpy.lib.pad"], "function", ["None"], ["", "def", "pad_arr_rows", "(", "arr", ",", "row", ",", "pad", "=", "'edge'", ")", ":", "\n", "    ", "assert", "(", "len", "(", "arr", ".", "shape", ")", "==", "2", ")", "\n", "assert", "(", "arr", ".", "shape", "[", "0", "]", "<=", "row", ")", "\n", "assert", "(", "pad", "==", "'edge'", "or", "pad", "==", "'constant'", ")", "\n", "if", "arr", ".", "shape", "[", "0", "]", "==", "row", ":", "\n", "        ", "return", "arr", "\n", "", "if", "pad", "==", "'edge'", ":", "\n", "        ", "return", "np", ".", "lib", ".", "pad", "(", "arr", ",", "(", "(", "0", ",", "row", "-", "arr", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "if", "pad", "==", "'constant'", ":", "\n", "        ", "return", "np", ".", "lib", ".", "pad", "(", "arr", ",", "(", "(", "0", ",", "row", "-", "arr", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "(", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.euler2mat": [[98, 196], ["numpy.eye", "math.cos", "math.sin", "Ms.append", "math.cos", "math.sin", "Ms.append", "math.cos", "math.sin", "Ms.append", "reduce", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "euler2mat", "(", "z", "=", "0", ",", "y", "=", "0", ",", "x", "=", "0", ")", ":", "\n", "    ", "''' Return matrix for rotations around z, y and x axes\n\n    Uses the z, then y, then x convention above\n\n    Parameters\n    ----------\n    z : scalar\n       Rotation angle in radians around z-axis (performed first)\n    y : scalar\n       Rotation angle in radians around y-axis\n    x : scalar\n       Rotation angle in radians around x-axis (performed last)\n\n    Returns\n    -------\n    M : array shape (3,3)\n       Rotation matrix giving same rotation as for given angles\n\n    Examples\n    --------\n    >>> zrot = 1.3 # radians\n    >>> yrot = -0.1\n    >>> xrot = 0.2\n    >>> M = euler2mat(zrot, yrot, xrot)\n    >>> M.shape == (3, 3)\n    True\n\n    The output rotation matrix is equal to the composition of the\n    individual rotations\n\n    >>> M1 = euler2mat(zrot)\n    >>> M2 = euler2mat(0, yrot)\n    >>> M3 = euler2mat(0, 0, xrot)\n    >>> composed_M = np.dot(M3, np.dot(M2, M1))\n    >>> np.allclose(M, composed_M)\n    True\n\n    You can specify rotations by named arguments\n\n    >>> np.all(M3 == euler2mat(x=xrot))\n    True\n\n    When applying M to a vector, the vector should column vector to the\n    right of M.  If the right hand side is a 2D array rather than a\n    vector, then each column of the 2D array represents a vector.\n\n    >>> vec = np.array([1, 0, 0]).reshape((3,1))\n    >>> v2 = np.dot(M, vec)\n    >>> vecs = np.array([[1, 0, 0],[0, 1, 0]]).T # giving 3x2 array\n    >>> vecs2 = np.dot(M, vecs)\n\n    Rotations are counter-clockwise.\n\n    >>> zred = np.dot(euler2mat(z=np.pi/2), np.eye(3))\n    >>> np.allclose(zred, [[0, -1, 0],[1, 0, 0], [0, 0, 1]])\n    True\n    >>> yred = np.dot(euler2mat(y=np.pi/2), np.eye(3))\n    >>> np.allclose(yred, [[0, 0, 1],[0, 1, 0], [-1, 0, 0]])\n    True\n    >>> xred = np.dot(euler2mat(x=np.pi/2), np.eye(3))\n    >>> np.allclose(xred, [[1, 0, 0],[0, 0, -1], [0, 1, 0]])\n    True\n\n    Notes\n    -----\n    The direction of rotation is given by the right-hand rule (orient\n    the thumb of the right hand along the axis around which the rotation\n    occurs, with the end of the thumb at the positive end of the axis;\n    curl your fingers; the direction your fingers curl is the direction\n    of rotation).  Therefore, the rotations are counterclockwise if\n    looking along the axis of rotation from positive to negative.\n    '''", "\n", "Ms", "=", "[", "]", "\n", "if", "z", ":", "\n", "        ", "cosz", "=", "math", ".", "cos", "(", "z", ")", "\n", "sinz", "=", "math", ".", "sin", "(", "z", ")", "\n", "Ms", ".", "append", "(", "np", ".", "array", "(", "\n", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", ")", "\n", "", "if", "y", ":", "\n", "        ", "cosy", "=", "math", ".", "cos", "(", "y", ")", "\n", "siny", "=", "math", ".", "sin", "(", "y", ")", "\n", "Ms", ".", "append", "(", "np", ".", "array", "(", "\n", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", ")", "\n", "", "if", "x", ":", "\n", "        ", "cosx", "=", "math", ".", "cos", "(", "x", ")", "\n", "sinx", "=", "math", ".", "sin", "(", "x", ")", "\n", "Ms", ".", "append", "(", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", ")", "\n", "", "if", "Ms", ":", "\n", "        ", "return", "reduce", "(", "np", ".", "dot", ",", "Ms", "[", ":", ":", "-", "1", "]", ")", "\n", "", "return", "np", ".", "eye", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.mat2euler": [[198, 269], ["numpy.asarray", "math.sqrt", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "numpy.finfo"], "function", ["None"], ["", "def", "mat2euler", "(", "M", ",", "cy_thresh", "=", "None", ")", ":", "\n", "    ", "''' Discover Euler angle vector from 3x3 matrix\n\n    Uses the conventions above.\n\n    Parameters\n    ----------\n    M : array-like, shape (3,3)\n    cy_thresh : None or scalar, optional\n       threshold below which to give up on straightforward arctan for\n       estimating x rotation.  If None (default), estimate from\n       precision of input.\n\n    Returns\n    -------\n    z : scalar\n    y : scalar\n    x : scalar\n       Rotations in radians around z, y, x axes, respectively\n\n    Notes\n    -----\n    If there was no numerical error, the routine could be derived using\n    Sympy expression for z then y then x rotation matrix, which is::\n\n      [                       cos(y)*cos(z),                       -cos(y)*sin(z),         sin(y)],\n      [cos(x)*sin(z) + cos(z)*sin(x)*sin(y), cos(x)*cos(z) - sin(x)*sin(y)*sin(z), -cos(y)*sin(x)],\n      [sin(x)*sin(z) - cos(x)*cos(z)*sin(y), cos(z)*sin(x) + cos(x)*sin(y)*sin(z),  cos(x)*cos(y)]\n\n    with the obvious derivations for z, y, and x\n\n       z = atan2(-r12, r11)\n       y = asin(r13)\n       x = atan2(-r23, r33)\n\n    Problems arise when cos(y) is close to zero, because both of::\n\n       z = atan2(cos(y)*sin(z), cos(y)*cos(z))\n       x = atan2(cos(y)*sin(x), cos(x)*cos(y))\n\n    will be close to atan2(0, 0), and highly unstable.\n\n    The ``cy`` fix for numerical instability below is from: *Graphics\n    Gems IV*, Paul Heckbert (editor), Academic Press, 1994, ISBN:\n    0123361559.  Specifically it comes from EulerAngles.c by Ken\n    Shoemake, and deals with the case where cos(y) is close to zero:\n\n    See: http://www.graphicsgems.org/\n\n    The code appears to be licensed (from the website) as \"can be used\n    without restrictions\".\n    '''", "\n", "M", "=", "np", ".", "asarray", "(", "M", ")", "\n", "if", "cy_thresh", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "cy_thresh", "=", "np", ".", "finfo", "(", "M", ".", "dtype", ")", ".", "eps", "*", "4", "\n", "", "except", "ValueError", ":", "\n", "            ", "cy_thresh", "=", "_FLOAT_EPS_4", "\n", "", "", "r11", ",", "r12", ",", "r13", ",", "r21", ",", "r22", ",", "r23", ",", "r31", ",", "r32", ",", "r33", "=", "M", ".", "flat", "\n", "# cy: sqrt((cos(y)*cos(z))**2 + (cos(x)*cos(y))**2)", "\n", "cy", "=", "math", ".", "sqrt", "(", "r33", "*", "r33", "+", "r23", "*", "r23", ")", "\n", "if", "cy", ">", "cy_thresh", ":", "# cos(y) not close to zero, standard form", "\n", "        ", "z", "=", "math", ".", "atan2", "(", "-", "r12", ",", "r11", ")", "# atan2(cos(y)*sin(z), cos(y)*cos(z))", "\n", "y", "=", "math", ".", "atan2", "(", "r13", ",", "cy", ")", "# atan2(sin(y), cy)", "\n", "x", "=", "math", ".", "atan2", "(", "-", "r23", ",", "r33", ")", "# atan2(cos(y)*sin(x), cos(x)*cos(y))", "\n", "", "else", ":", "# cos(y) (close to) zero, so x -> 0.0 (see above)", "\n", "# so r21 -> sin(z), r22 -> cos(z) and", "\n", "        ", "z", "=", "math", ".", "atan2", "(", "r21", ",", "r22", ")", "\n", "y", "=", "math", ".", "atan2", "(", "r13", ",", "cy", ")", "# atan2(sin(y), cy)", "\n", "x", "=", "0.0", "\n", "", "return", "z", ",", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.euler2quat": [[271, 317], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.array"], "function", ["None"], ["", "def", "euler2quat", "(", "z", "=", "0", ",", "y", "=", "0", ",", "x", "=", "0", ")", ":", "\n", "    ", "''' Return quaternion corresponding to these Euler angles\n\n    Uses the z, then y, then x convention above\n\n    Parameters\n    ----------\n    z : scalar\n       Rotation angle in radians around z-axis (performed first)\n    y : scalar\n       Rotation angle in radians around y-axis\n    x : scalar\n       Rotation angle in radians around x-axis (performed last)\n\n    Returns\n    -------\n    quat : array shape (4,)\n       Quaternion in w, x, y z (real, then vector) format\n\n    Notes\n    -----\n    We can derive this formula in Sympy using:\n\n    1. Formula giving quaternion corresponding to rotation of theta radians\n       about arbitrary axis:\n       http://mathworld.wolfram.com/EulerParameters.html\n    2. Generated formulae from 1.) for quaternions corresponding to\n       theta radians rotations about ``x, y, z`` axes\n    3. Apply quaternion multiplication formula -\n       http://en.wikipedia.org/wiki/Quaternions#Hamilton_product - to\n       formulae from 2.) to give formula for combined rotations.\n    '''", "\n", "z", "=", "z", "/", "2.0", "\n", "y", "=", "y", "/", "2.0", "\n", "x", "=", "x", "/", "2.0", "\n", "cz", "=", "math", ".", "cos", "(", "z", ")", "\n", "sz", "=", "math", ".", "sin", "(", "z", ")", "\n", "cy", "=", "math", ".", "cos", "(", "y", ")", "\n", "sy", "=", "math", ".", "sin", "(", "y", ")", "\n", "cx", "=", "math", ".", "cos", "(", "x", ")", "\n", "sx", "=", "math", ".", "sin", "(", "x", ")", "\n", "return", "np", ".", "array", "(", "[", "\n", "cx", "*", "cy", "*", "cz", "-", "sx", "*", "sy", "*", "sz", ",", "\n", "cx", "*", "sy", "*", "sz", "+", "cy", "*", "cz", "*", "sx", ",", "\n", "cx", "*", "cz", "*", "sy", "-", "sx", "*", "cy", "*", "sz", ",", "\n", "cx", "*", "cy", "*", "sz", "+", "sx", "*", "cz", "*", "sy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.quat2euler": [[319, 346], ["eulerangles.mat2euler", "nq.quat2mat"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.mat2euler"], ["", "def", "quat2euler", "(", "q", ")", ":", "\n", "    ", "''' Return Euler angles corresponding to quaternion `q`\n\n    Parameters\n    ----------\n    q : 4 element sequence\n       w, x, y, z of quaternion\n\n    Returns\n    -------\n    z : scalar\n       Rotation angle in radians around z-axis (performed first)\n    y : scalar\n       Rotation angle in radians around y-axis\n    x : scalar\n       Rotation angle in radians around x-axis (performed last)\n\n    Notes\n    -----\n    It's possible to reduce the amount of calculation a little, by\n    combining parts of the ``quat2mat`` and ``mat2euler`` functions, but\n    the reduction in computation is small, and the code repetition is\n    large.\n    '''", "\n", "# delayed import to avoid cyclic dependencies", "\n", "import", "nibabel", ".", "quaternions", "as", "nq", "\n", "return", "mat2euler", "(", "nq", ".", "quat2mat", "(", "q", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.euler2angle_axis": [[348, 380], ["nq.quat2angle_axis", "eulerangles.euler2quat"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.euler2quat"], ["", "def", "euler2angle_axis", "(", "z", "=", "0", ",", "y", "=", "0", ",", "x", "=", "0", ")", ":", "\n", "    ", "''' Return angle, axis corresponding to these Euler angles\n\n    Uses the z, then y, then x convention above\n\n    Parameters\n    ----------\n    z : scalar\n       Rotation angle in radians around z-axis (performed first)\n    y : scalar\n       Rotation angle in radians around y-axis\n    x : scalar\n       Rotation angle in radians around x-axis (performed last)\n\n    Returns\n    -------\n    theta : scalar\n       angle of rotation\n    vector : array shape (3,)\n       axis around which rotation occurs\n\n    Examples\n    --------\n    >>> theta, vec = euler2angle_axis(0, 1.5, 0)\n    >>> print(theta)\n    1.5\n    >>> np.allclose(vec, [0, 1, 0])\n    True\n    '''", "\n", "# delayed import to avoid cyclic dependencies", "\n", "import", "nibabel", ".", "quaternions", "as", "nq", "\n", "return", "nq", ".", "quat2angle_axis", "(", "euler2quat", "(", "z", ",", "y", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.angle_axis2euler": [[382, 419], ["nq.angle_axis2mat", "eulerangles.mat2euler"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.eulerangles.mat2euler"], ["", "def", "angle_axis2euler", "(", "theta", ",", "vector", ",", "is_normalized", "=", "False", ")", ":", "\n", "    ", "''' Convert angle, axis pair to Euler angles\n\n    Parameters\n    ----------\n    theta : scalar\n       angle of rotation\n    vector : 3 element sequence\n       vector specifying axis for rotation.\n    is_normalized : bool, optional\n       True if vector is already normalized (has norm of 1).  Default\n       False\n\n    Returns\n    -------\n    z : scalar\n    y : scalar\n    x : scalar\n       Rotations in radians around z, y, x axes, respectively\n\n    Examples\n    --------\n    >>> z, y, x = angle_axis2euler(0, [1, 0, 0])\n    >>> np.allclose((z, y, x), 0)\n    True\n\n    Notes\n    -----\n    It's possible to reduce the amount of calculation a little, by\n    combining parts of the ``angle_axis2mat`` and ``mat2euler``\n    functions, but the reduction in computation is small, and the code\n    repetition is large.\n    '''", "\n", "# delayed import to avoid cyclic dependencies", "\n", "import", "nibabel", ".", "quaternions", "as", "nq", "\n", "M", "=", "nq", ".", "angle_axis2mat", "(", "theta", ",", "vector", ",", "is_normalized", ")", "\n", "return", "mat2euler", "(", "M", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyParseError.__init__": [[131, 147], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.__init__"], ["def", "__init__", "(", "self", ",", "message", ",", "element", "=", "None", ",", "row", "=", "None", ",", "prop", "=", "None", ")", ":", "\n", "        ", "self", ".", "message", "=", "message", "\n", "self", ".", "element", "=", "element", "\n", "self", ".", "row", "=", "row", "\n", "self", ".", "prop", "=", "prop", "\n", "\n", "s", "=", "''", "\n", "if", "self", ".", "element", ":", "\n", "            ", "s", "+=", "'element %r: '", "%", "self", ".", "element", ".", "name", "\n", "", "if", "self", ".", "row", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'row %d: '", "%", "self", ".", "row", "\n", "", "if", "self", ".", "prop", ":", "\n", "            ", "s", "+=", "'property %r: '", "%", "self", ".", "prop", ".", "name", "\n", "", "s", "+=", "self", ".", "message", "\n", "\n", "Exception", ".", "__init__", "(", "self", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyParseError.__repr__": [[148, 151], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyParseError(%r, element=%r, row=%r, prop=%r)'", "%", "\n", "self", ".", "message", ",", "self", ".", "element", ",", "self", ".", "row", ",", "self", ".", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.__init__": [[165, 192], ["list", "list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "elements", "=", "[", "]", ",", "text", "=", "False", ",", "byte_order", "=", "'='", ",", "\n", "comments", "=", "[", "]", ",", "obj_info", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        elements: sequence of PlyElement instances.\n\n        text: whether the resulting PLY file will be text (True) or\n            binary (False).\n\n        byte_order: '<' for little-endian, '>' for big-endian, or '='\n            for native.  This is only relevant if `text' is False.\n\n        comments: sequence of strings that will be placed in the header\n            between the 'ply' and 'format ...' lines.\n\n        obj_info: like comments, but will be placed in the header with\n            \"obj_info ...\" instead of \"comment ...\".\n\n        '''", "\n", "if", "byte_order", "==", "'='", "and", "not", "text", ":", "\n", "            ", "byte_order", "=", "_native_byte_order", "\n", "\n", "", "self", ".", "byte_order", "=", "byte_order", "\n", "self", ".", "text", "=", "text", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "self", ".", "obj_info", "=", "list", "(", "obj_info", ")", "\n", "self", ".", "elements", "=", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData._get_elements": [[193, 195], ["None"], "methods", ["None"], ["", "def", "_get_elements", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_elements", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData._set_elements": [[196, 199], ["tuple", "plyfile.PlyData._index"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._index"], ["", "def", "_set_elements", "(", "self", ",", "elements", ")", ":", "\n", "        ", "self", ".", "_elements", "=", "tuple", "(", "elements", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData._get_byte_order": [[202, 204], ["None"], "methods", ["None"], ["def", "_get_byte_order", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData._set_byte_order": [[205, 210], ["ValueError"], "methods", ["None"], ["", "def", "_set_byte_order", "(", "self", ",", "byte_order", ")", ":", "\n", "        ", "if", "byte_order", "not", "in", "[", "'<'", ",", "'>'", ",", "'='", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"byte order must be '<', '>', or '='\"", ")", "\n", "\n", "", "self", ".", "_byte_order", "=", "byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData._index": [[213, 218], ["dict", "len", "len", "ValueError"], "methods", ["None"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_element_lookup", "=", "dict", "(", "(", "elt", ".", "name", ",", "elt", ")", "for", "elt", "in", "\n", "self", ".", "_elements", ")", "\n", "if", "len", "(", "self", ".", "_element_lookup", ")", "!=", "len", "(", "self", ".", "_elements", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two elements with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData._parse_header": [[219, 273], ["plyfile.PlyData", "stream.readline().decode().strip", "plyfile._split_line", "plyfile.PlyParseError", "comments.keys", "comments[].append", "plyfile.PlyParseError", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "plyfile.PlyParseError", "comments[].append", "plyfile.PlyElement._parse_multi", "len", "comments.keys", "stream.readline().decode", "comments.keys", "lines.append", "lines.append", "stream.readline().decode().strip.split", "stream.readline"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._split_line", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._parse_multi"], ["", "", "@", "staticmethod", "\n", "def", "_parse_header", "(", "stream", ")", ":", "\n", "        ", "'''\n        Parse a PLY header from a readable file-like stream.\n\n        '''", "\n", "lines", "=", "[", "]", "\n", "comments", "=", "{", "'comment'", ":", "[", "]", ",", "'obj_info'", ":", "[", "]", "}", "\n", "while", "True", ":", "\n", "            ", "line", "=", "stream", ".", "readline", "(", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "fields", "=", "_split_line", "(", "line", ",", "1", ")", "\n", "\n", "if", "fields", "[", "0", "]", "==", "'end_header'", ":", "\n", "                ", "break", "\n", "\n", "", "elif", "fields", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "                ", "lines", ".", "append", "(", "fields", ")", "\n", "", "else", ":", "\n", "                ", "lines", ".", "append", "(", "line", ".", "split", "(", ")", ")", "\n", "\n", "", "", "a", "=", "0", "\n", "if", "lines", "[", "a", "]", "!=", "[", "'ply'", "]", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'ply'\"", ")", "\n", "\n", "", "a", "+=", "1", "\n", "while", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "!=", "'format'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'format'\"", ")", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "2", "]", "!=", "'1.0'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected version '1.0'\"", ")", "\n", "\n", "", "if", "len", "(", "lines", "[", "a", "]", ")", "!=", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'format'\"", ")", "\n", "\n", "", "fmt", "=", "lines", "[", "a", "]", "[", "1", "]", "\n", "\n", "if", "fmt", "not", "in", "_byte_order_map", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"don't understand format %r\"", "%", "fmt", ")", "\n", "\n", "", "byte_order", "=", "_byte_order_map", "[", "fmt", "]", "\n", "text", "=", "fmt", "==", "'ascii'", "\n", "\n", "a", "+=", "1", "\n", "while", "a", "<", "len", "(", "lines", ")", "and", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "return", "PlyData", "(", "PlyElement", ".", "_parse_multi", "(", "lines", "[", "a", ":", "]", ")", ",", "\n", "text", ",", "byte_order", ",", "\n", "comments", "[", "'comment'", "]", ",", "comments", "[", "'obj_info'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.read": [[274, 290], ["plyfile._open_stream", "plyfile.PlyData._parse_header", "elt._read", "stream.close"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._open_stream", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData._parse_header", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._read", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close"], ["", "@", "staticmethod", "\n", "def", "read", "(", "stream", ")", ":", "\n", "        ", "'''\n        Read PLY data from a readable file-like object or filename.\n\n        '''", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'read'", ")", "\n", "try", ":", "\n", "            ", "data", "=", "PlyData", ".", "_parse_header", "(", "stream", ")", "\n", "for", "elt", "in", "data", ":", "\n", "                ", "elt", ".", "_read", "(", "stream", ",", "data", ".", "text", ",", "data", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write": [[291, 305], ["plyfile._open_stream", "stream.write", "stream.write", "plyfile.PlyData.header.encode", "elt._write", "stream.close"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._open_stream", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close"], ["", "def", "write", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Write PLY data to a writeable file-like object or filename.\n\n        '''", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'write'", ")", "\n", "try", ":", "\n", "            ", "stream", ".", "write", "(", "self", ".", "header", ".", "encode", "(", "'ascii'", ")", ")", "\n", "stream", ".", "write", "(", "b'\\r\\n'", ")", "\n", "for", "elt", "in", "self", ":", "\n", "                ", "elt", ".", "_write", "(", "stream", ",", "self", ".", "text", ",", "self", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.header": [[306, 332], ["lines.extend", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "'''\n        Provide PLY-formatted metadata for the instance.\n\n        '''", "\n", "lines", "=", "[", "'ply'", "]", "\n", "\n", "if", "self", ".", "text", ":", "\n", "            ", "lines", ".", "append", "(", "'format ascii 1.0'", ")", "\n", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "'format '", "+", "\n", "_byte_order_reverse", "[", "self", ".", "byte_order", "]", "+", "\n", "' 1.0'", ")", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'format' line and the first element.", "\n", "", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "for", "c", "in", "self", ".", "obj_info", ":", "\n", "            ", "lines", ".", "append", "(", "'obj_info '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "elt", ".", "header", "for", "elt", "in", "self", ".", "elements", ")", "\n", "lines", ".", "append", "(", "'end_header'", ")", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.__iter__": [[333, 335], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.__len__": [[336, 338], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.__contains__": [[339, 341], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "name", "in", "self", ".", "_element_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.__getitem__": [[342, 344], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_element_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.__str__": [[345, 347], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.__repr__": [[348, 353], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyData(%r, text=%r, byte_order=%r, '", "\n", "'comments=%r, obj_info=%r)'", "%", "\n", "(", "self", ".", "elements", ",", "self", ".", "text", ",", "self", ".", "byte_order", ",", "\n", "self", ".", "comments", ",", "self", ".", "obj_info", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.__init__": [[379, 398], ["str", "plyfile.PlyElement._check_name", "tuple", "plyfile.PlyElement._index", "list", "any", "isinstance"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._check_name", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._index"], ["def", "__init__", "(", "self", ",", "name", ",", "properties", ",", "count", ",", "comments", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        This is not part of the public interface.  The preferred methods\n        of obtaining PlyElement instances are PlyData.read (to read from\n        a file) and PlyElement.describe (to construct from a numpy\n        array).\n\n        '''", "\n", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "_count", "=", "count", "\n", "\n", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "\n", "self", ".", "_have_list", "=", "any", "(", "isinstance", "(", "p", ",", "PlyListProperty", ")", "\n", "for", "p", "in", "self", ".", "properties", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.count": [[399, 402], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._get_data": [[403, 405], ["None"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._set_data": [[406, 410], ["len", "plyfile.PlyElement._check_sanity"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._check_sanity"], ["", "def", "_set_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_count", "=", "len", "(", "data", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._check_sanity": [[413, 417], ["ValueError"], "methods", ["None"], ["def", "_check_sanity", "(", "self", ")", ":", "\n", "        ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "            ", "if", "prop", ".", "name", "not", "in", "self", ".", "_data", ".", "dtype", ".", "fields", ":", "\n", "                ", "raise", "ValueError", "(", "\"dangling property %r\"", "%", "prop", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._get_properties": [[418, 420], ["None"], "methods", ["None"], ["", "", "", "def", "_get_properties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._set_properties": [[421, 425], ["tuple", "plyfile.PlyElement._check_sanity", "plyfile.PlyElement._index"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._index"], ["", "def", "_set_properties", "(", "self", ",", "properties", ")", ":", "\n", "        ", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._index": [[428, 433], ["dict", "len", "len", "ValueError"], "methods", ["None"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_property_lookup", "=", "dict", "(", "(", "prop", ".", "name", ",", "prop", ")", "\n", "for", "prop", "in", "self", ".", "_properties", ")", "\n", "if", "len", "(", "self", ".", "_property_lookup", ")", "!=", "len", "(", "self", ".", "_properties", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two properties with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.ply_property": [[434, 436], ["None"], "methods", ["None"], ["", "", "def", "ply_property", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_property_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.name": [[437, 440], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._check_name": [[441, 445], ["any", "ValueError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"element name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.dtype": [[446, 456], ["prop.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the numpy dtype of the in-memory representation of the\n        data.  (If there are no list properties, and the PLY format is\n        binary, then this also accurately describes the on-disk\n        representation of the element.)\n\n        '''", "\n", "return", "[", "(", "prop", ".", "name", ",", "prop", ".", "dtype", "(", "byte_order", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._parse_multi": [[457, 469], ["plyfile.PlyElement._parse_one", "elements.append"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_multi", "(", "header_lines", ")", ":", "\n", "        ", "'''\n        Parse a list of PLY element definitions.\n\n        '''", "\n", "elements", "=", "[", "]", "\n", "while", "header_lines", ":", "\n", "            ", "(", "elt", ",", "header_lines", ")", "=", "PlyElement", ".", "_parse_one", "(", "header_lines", ")", "\n", "elements", ".", "append", "(", "elt", ")", "\n", "\n", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._parse_one": [[470, 505], ["plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "int", "plyfile.PlyElement", "len", "comments.append", "properties.append", "plyfile.PlyProperty._parse_one"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_one", "(", "lines", ")", ":", "\n", "        ", "'''\n        Consume one element definition.  The unconsumed input is\n        returned along with a PlyElement instance.\n\n        '''", "\n", "a", "=", "0", "\n", "line", "=", "lines", "[", "a", "]", "\n", "\n", "if", "line", "[", "0", "]", "!=", "'element'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too few fields after 'element'\"", ")", "\n", "\n", "", "(", "name", ",", "count", ")", "=", "(", "line", "[", "1", "]", ",", "int", "(", "line", "[", "2", "]", ")", ")", "\n", "\n", "comments", "=", "[", "]", "\n", "properties", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "a", "+=", "1", "\n", "if", "a", ">=", "len", "(", "lines", ")", ":", "\n", "                ", "break", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "==", "'comment'", ":", "\n", "                ", "comments", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "", "elif", "lines", "[", "a", "]", "[", "0", "]", "==", "'property'", ":", "\n", "                ", "properties", ".", "append", "(", "PlyProperty", ".", "_parse_one", "(", "lines", "[", "a", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "(", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", ",", "\n", "lines", "[", "a", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.describe": [[506, 566], ["len", "plyfile.PlyElement", "isinstance", "TypeError", "len", "ValueError", "properties.append", "isinstance", "ValueError", "ValueError", "plyfile.PlyListProperty", "plyfile._lookup_type", "plyfile.PlyProperty", "len", "val_types.get", "plyfile._lookup_type", "plyfile._lookup_type", "len", "ValueError", "len_types.get"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type"], ["", "@", "staticmethod", "\n", "def", "describe", "(", "data", ",", "name", ",", "len_types", "=", "{", "}", ",", "val_types", "=", "{", "}", ",", "\n", "comments", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Construct a PlyElement from an array's metadata.\n\n        len_types and val_types can be given as mappings from list\n        property names to type strings (like 'u1', 'f4', etc., or\n        'int8', 'float32', etc.). These can be used to define the length\n        and value types of list properties.  List property lengths\n        always default to type 'u1' (8-bit unsigned integer), and value\n        types default to 'i4' (32-bit integer).\n\n        '''", "\n", "if", "not", "isinstance", "(", "data", ",", "_np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"only numpy arrays are supported\"", ")", "\n", "\n", "", "if", "len", "(", "data", ".", "shape", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one-dimensional arrays are \"", "\n", "\"supported\"", ")", "\n", "\n", "", "count", "=", "len", "(", "data", ")", "\n", "\n", "properties", "=", "[", "]", "\n", "descr", "=", "data", ".", "dtype", ".", "descr", "\n", "\n", "for", "t", "in", "descr", ":", "\n", "            ", "if", "not", "isinstance", "(", "t", "[", "1", "]", ",", "str", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"nested records not supported\"", ")", "\n", "\n", "", "if", "not", "t", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"field with empty name\"", ")", "\n", "\n", "", "if", "len", "(", "t", ")", "!=", "2", "or", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "# non-scalar field, which corresponds to a list", "\n", "# property in PLY.", "\n", "\n", "                ", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "if", "len", "(", "t", ")", "!=", "2", ":", "\n", "                        ", "raise", "ValueError", "(", "\"non-scalar object fields not \"", "\n", "\"supported\"", ")", "\n", "\n", "", "", "len_str", "=", "_data_type_reverse", "[", "len_types", ".", "get", "(", "t", "[", "0", "]", ",", "'u1'", ")", "]", "\n", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "val_type", "=", "val_types", ".", "get", "(", "t", "[", "0", "]", ",", "'i4'", ")", "\n", "val_str", "=", "_lookup_type", "(", "val_type", ")", "\n", "", "else", ":", "\n", "                    ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "\n", "", "prop", "=", "PlyListProperty", "(", "t", "[", "0", "]", ",", "len_str", ",", "val_str", ")", "\n", "", "else", ":", "\n", "                ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "prop", "=", "PlyProperty", "(", "t", "[", "0", "]", ",", "val_str", ")", "\n", "\n", "", "properties", ".", "append", "(", "prop", ")", "\n", "\n", "", "elt", "=", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", "\n", "elt", ".", "data", "=", "data", "\n", "\n", "return", "elt", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._read": [[567, 592], ["plyfile.PlyElement._check_sanity", "plyfile.PlyElement._read_txt", "len", "len", "plyfile.PlyParseError", "plyfile.PlyElement._read_bin", "numpy.fromfile", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._read_txt", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._read_bin", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_read", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Read the actual data from a PLY file.\n\n        '''", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_read_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so a simple load is", "\n", "# impossible.", "\n", "                ", "self", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# There are no list properties, so loading the data is", "\n", "# much more straightforward.", "\n", "                ", "self", ".", "_data", "=", "_np", ".", "fromfile", "(", "stream", ",", "\n", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "self", ".", "count", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "_data", ")", "<", "self", ".", "count", ":", "\n", "            ", "k", "=", "len", "(", "self", ".", "_data", ")", "\n", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n", "", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._write": [[593, 610], ["plyfile.PlyElement._write_txt", "plyfile.PlyElement._write_bin", "plyfile.PlyElement.data.astype().tofile", "plyfile.PlyElement.data.astype", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._write_txt", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._write_bin", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_write", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write the data to a PLY file.\n\n        '''", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_write_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so serialization is", "\n", "# slightly complicated.", "\n", "                ", "self", ".", "_write_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# no list properties, so serialization is", "\n", "# straightforward.", "\n", "                ", "self", ".", "data", ".", "astype", "(", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "copy", "=", "False", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._read_txt": [[611, 642], ["numpy.empty", "itertools.islice", "iter", "iter", "plyfile.PlyParseError", "plyfile.PlyElement.dtype", "line.strip().split", "next", "plyfile.PlyParseError", "prop._from_fields", "line.strip", "plyfile.PlyParseError", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._from_fields"], ["", "", "", "def", "_read_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Load a PLY element from an ASCII-format PLY file.  The element\n        may contain list properties.\n\n        '''", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", ")", ")", "\n", "\n", "k", "=", "0", "\n", "for", "line", "in", "_islice", "(", "iter", "(", "stream", ".", "readline", ",", "b''", ")", ",", "self", ".", "count", ")", ":", "\n", "            ", "fields", "=", "iter", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_from_fields", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-line\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"malformed input\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "", "try", ":", "\n", "                ", "next", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"expected end-of-line\"", ",", "self", ",", "k", ")", "\n", "", "k", "+=", "1", "\n", "\n", "", "if", "k", "<", "self", ".", "count", ":", "\n", "            ", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._write_txt": [[643, 655], ["numpy.savetxt", "fields.extend", "prop._to_fields"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._to_fields"], ["", "", "def", "_write_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Save a PLY element to an ASCII-format PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "fields", "=", "[", "]", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "fields", ".", "extend", "(", "prop", ".", "_to_fields", "(", "rec", "[", "prop", ".", "name", "]", ")", ")", "\n", "\n", "", "_np", ".", "savetxt", "(", "stream", ",", "[", "fields", "]", ",", "'%.18g'", ",", "newline", "=", "'\\r\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._read_bin": [[656, 672], ["numpy.empty", "_range", "plyfile.PlyElement.dtype", "prop._read_bin", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._read_bin"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Load a PLY element from a binary PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", "byte_order", ")", ")", "\n", "\n", "for", "k", "in", "_range", "(", "self", ".", "count", ")", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement._write_bin": [[673, 682], ["prop._write_bin"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._write_bin"], ["", "", "", "", "def", "_write_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Save a PLY element to a binary PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "prop", ".", "_write_bin", "(", "rec", "[", "prop", ".", "name", "]", ",", "stream", ",", "byte_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.header": [[683, 700], ["lines.extend", "lines.append", "list", "map"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "'''\n        Format this element's metadata as it would appear in a PLY\n        header.\n\n        '''", "\n", "lines", "=", "[", "'element %s %d'", "%", "(", "self", ".", "name", ",", "self", ".", "count", ")", "]", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'element' line and the first property definition.", "\n", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "list", "(", "map", "(", "str", ",", "self", ".", "properties", ")", ")", ")", "\n", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.__getitem__": [[701, 703], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.__setitem__": [[704, 706], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "data", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.__str__": [[707, 709], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyElement.__repr__": [[710, 714], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyElement(%r, %r, count=%d, comments=%r)'", "%", "\n", "(", "self", ".", "name", ",", "self", ".", "properties", ",", "self", ".", "count", ",", "\n", "self", ".", "comments", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty.__init__": [[724, 728], ["str", "plyfile.PlyProperty._check_name"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._check_name"], ["def", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "val_dtype", "=", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._get_val_dtype": [[729, 731], ["None"], "methods", ["None"], ["", "def", "_get_val_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._set_val_dtype": [[732, 734], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type"], ["", "def", "_set_val_dtype", "(", "self", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_val_dtype", "=", "_data_types", "[", "_lookup_type", "(", "val_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty.name": [[737, 740], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._check_name": [[741, 745], ["any", "RuntimeError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"Error: property name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._parse_one": [[746, 769], ["plyfile.PlyListProperty", "plyfile.PlyProperty", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_parse_one", "(", "line", ")", ":", "\n", "        ", "assert", "line", "[", "0", "]", "==", "'property'", "\n", "\n", "if", "line", "[", "1", "]", "==", "'list'", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property list'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property list'\"", ")", "\n", "\n", "", "return", "PlyListProperty", "(", "line", "[", "4", "]", ",", "line", "[", "2", "]", ",", "line", "[", "3", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property'\"", ")", "\n", "\n", "", "return", "PlyProperty", "(", "line", "[", "2", "]", ",", "line", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty.dtype": [[770, 777], ["None"], "methods", ["None"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the numpy dtype description for this property (as a tuple\n        of strings).\n\n        '''", "\n", "return", "byte_order", "+", "self", ".", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._from_fields": [[778, 785], ["numpy.dtype().type", "next", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "'''\n        Parse from generator.  Raise StopIteration if the property could\n        not be read.\n\n        '''", "\n", "return", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "next", "(", "fields", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._to_fields": [[786, 792], ["numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        Return generator over one item.\n\n        '''", "\n", "yield", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._read_bin": [[793, 803], ["numpy.fromfile", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Read data from a binary stream.  Raise StopIteration if the\n        property could not be read.\n\n        '''", "\n", "try", ":", "\n", "            ", "return", "_np", ".", "fromfile", "(", "stream", ",", "self", ".", "dtype", "(", "byte_order", ")", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty._write_bin": [[804, 810], ["numpy.dtype().type().tofile", "numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write data to a binary stream.\n\n        '''", "\n", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", "byte_order", ")", ")", ".", "type", "(", "data", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty.__str__": [[811, 814], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property %s %s'", "%", "(", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyProperty.__repr__": [[815, 818], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'PlyProperty(%r, %r)'", "%", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.__init__": [[827, 831], ["plyfile.PlyProperty.__init__"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "len_dtype", ",", "val_dtype", ")", ":", "\n", "        ", "PlyProperty", ".", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", "\n", "\n", "self", ".", "len_dtype", "=", "len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._get_len_dtype": [[832, 834], ["None"], "methods", ["None"], ["", "def", "_get_len_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._set_len_dtype": [[835, 837], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type"], ["", "def", "_set_len_dtype", "(", "self", ",", "len_dtype", ")", ":", "\n", "        ", "self", ".", "_len_dtype", "=", "_data_types", "[", "_lookup_type", "(", "len_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype": [[840, 846], ["None"], "methods", ["None"], ["def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        List properties always have a numpy dtype of \"object\".\n\n        '''", "\n", "return", "'|O'", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.list_dtype": [[847, 855], ["None"], "methods", ["None"], ["", "def", "list_dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the pair (len_dtype, val_dtype) (both numpy-friendly\n        strings).\n\n        '''", "\n", "return", "(", "byte_order", "+", "self", ".", "len_dtype", ",", "\n", "byte_order", "+", "self", ".", "val_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._from_fields": [[856, 866], ["plyfile.PlyListProperty.list_dtype", "int", "numpy.loadtxt", "numpy.dtype().type", "list", "len", "next", "itertools.islice", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "n", "=", "int", "(", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "next", "(", "fields", ")", ")", ")", "\n", "\n", "data", "=", "_np", ".", "loadtxt", "(", "list", "(", "_islice", "(", "fields", ",", "n", ")", ")", ",", "val_t", ",", "ndmin", "=", "1", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._to_fields": [[867, 880], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.dtype().type", "numpy.asarray", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        Return generator over the (numerical) PLY representation of the\n        list data (length followed by actual data).\n\n        '''", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "yield", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "data", ".", "size", ")", "\n", "for", "x", "in", "data", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._read_bin": [[881, 894], ["plyfile.PlyListProperty.list_dtype", "numpy.fromfile", "len", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.list_dtype"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "try", ":", "\n", "            ", "n", "=", "_np", ".", "fromfile", "(", "stream", ",", "len_t", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "data", "=", "_np", ".", "fromfile", "(", "stream", ",", "val_t", ",", "n", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty._write_bin": [[895, 906], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.array().tofile", "numpy.asarray().ravel.tofile", "numpy.asarray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.list_dtype"], ["", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write data to a binary stream.\n\n        '''", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "_np", ".", "array", "(", "data", ".", "size", ",", "dtype", "=", "len_t", ")", ".", "tofile", "(", "stream", ")", "\n", "data", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.__str__": [[907, 911], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "len_str", "=", "_data_type_reverse", "[", "self", ".", "len_dtype", "]", "\n", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property list %s %s %s'", "%", "(", "len_str", ",", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyListProperty.__repr__": [[912, 917], ["plyfile._lookup_type", "plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyListProperty(%r, %r, %r)'", "%", "\n", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "len_dtype", ")", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._lookup_type": [[80, 89], ["ValueError"], "function", ["None"], ["def", "_lookup_type", "(", "type_str", ")", ":", "\n", "    ", "if", "type_str", "not", "in", "_data_type_reverse", ":", "\n", "        ", "try", ":", "\n", "            ", "type_str", "=", "_data_types", "[", "type_str", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "ValueError", "(", "\"field type %r not in %r\"", "%", "\n", "(", "type_str", ",", "_types_list", ")", ")", "\n", "\n", "", "", "return", "_data_type_reverse", "[", "type_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._split_line": [[91, 99], ["line.split", "len", "line.split.append", "len"], "function", ["None"], ["", "def", "_split_line", "(", "line", ",", "n", ")", ":", "\n", "    ", "fields", "=", "line", ".", "split", "(", "None", ",", "n", ")", "\n", "if", "len", "(", "fields", ")", "==", "n", ":", "\n", "        ", "fields", ".", "append", "(", "''", ")", "\n", "\n", "", "assert", "len", "(", "fields", ")", "==", "n", "+", "1", "\n", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.make2d": [[101, 119], ["RuntimeError", "len", "numpy.fromiter", "len", "len"], "function", ["None"], ["", "def", "make2d", "(", "array", ",", "cols", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "'''\n    Make a 2D array from an array of arrays.  The `cols' and `dtype'\n    arguments can be omitted if the array is not empty.\n\n    '''", "\n", "if", "(", "cols", "is", "None", "or", "dtype", "is", "None", ")", "and", "not", "len", "(", "array", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"cols and dtype must be specified for empty \"", "\n", "\"array\"", ")", "\n", "\n", "", "if", "cols", "is", "None", ":", "\n", "        ", "cols", "=", "len", "(", "array", "[", "0", "]", ")", "\n", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "array", "[", "0", "]", ".", "dtype", "\n", "\n", "", "return", "_np", ".", "fromiter", "(", "array", ",", "[", "(", "'_'", ",", "dtype", ",", "(", "cols", ",", ")", ")", "]", ",", "\n", "count", "=", "len", "(", "array", ")", ")", "[", "'_'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile._open_stream": [[355, 362], ["hasattr", "open", "RuntimeError"], "function", ["None"], ["", "", "def", "_open_stream", "(", "stream", ",", "read_or_write", ")", ":", "\n", "    ", "if", "hasattr", "(", "stream", ",", "read_or_write", ")", ":", "\n", "        ", "return", "(", "False", ",", "stream", ")", "\n", "", "try", ":", "\n", "        ", "return", "(", "True", ",", "open", "(", "stream", ",", "read_or_write", "[", "0", "]", "+", "'b'", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"expected open file or filename\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string": [[34, 38], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "  ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.evaluate": [[39, 84], ["tf.ConfigProto", "tf.Session", "tf.train.Saver.restore", "batch_inference.log_string", "open", "open.close", "batch_inference.log_string", "tf.device", "model.placeholder_inputs", "tf.placeholder", "model.get_model", "model.get_loss", "tf.nn.softmax", "tf.train.Saver", "os.path.join", "os.path.join", "print", "batch_inference.eval_one_epoch", "open.write", "str", "os.path.basename", "os.path.basename", "float"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.placeholder_inputs", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_model", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_loss", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.eval_one_epoch", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "evaluate", "(", ")", ":", "\n", "  ", "is_training", "=", "False", "\n", "\n", "with", "tf", ".", "device", "(", "'/gpu:'", "+", "str", "(", "GPU_INDEX", ")", ")", ":", "\n", "    ", "pointclouds_pl", ",", "labels_pl", "=", "placeholder_inputs", "(", "BATCH_SIZE", ",", "NUM_POINT", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "pred", "=", "get_model", "(", "pointclouds_pl", ",", "is_training_pl", ")", "\n", "loss", "=", "get_loss", "(", "pred", ",", "labels_pl", ")", "\n", "pred_softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "pred", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "saver", ".", "restore", "(", "sess", ",", "MODEL_PATH", ")", "\n", "log_string", "(", "\"Model restored.\"", ")", "\n", "\n", "ops", "=", "{", "'pointclouds_pl'", ":", "pointclouds_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", ",", "\n", "'pred_softmax'", ":", "pred_softmax", ",", "\n", "'loss'", ":", "loss", "}", "\n", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "fout_out_filelist", "=", "open", "(", "FLAGS", ".", "output_filelist", ",", "'w'", ")", "\n", "for", "room_path", "in", "ROOM_PATH_LIST", ":", "\n", "    ", "out_data_label_filename", "=", "os", ".", "path", ".", "basename", "(", "room_path", ")", "[", ":", "-", "4", "]", "+", "'_pred.txt'", "\n", "out_data_label_filename", "=", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "out_data_label_filename", ")", "\n", "out_gt_label_filename", "=", "os", ".", "path", ".", "basename", "(", "room_path", ")", "[", ":", "-", "4", "]", "+", "'_gt.txt'", "\n", "out_gt_label_filename", "=", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "out_gt_label_filename", ")", "\n", "\n", "print", "(", "room_path", ",", "out_data_label_filename", ")", "\n", "# Evaluate room one by one.", "\n", "a", ",", "b", "=", "eval_one_epoch", "(", "sess", ",", "ops", ",", "room_path", ",", "out_data_label_filename", ",", "out_gt_label_filename", ")", "\n", "total_correct", "+=", "a", "\n", "total_seen", "+=", "b", "\n", "fout_out_filelist", ".", "write", "(", "out_data_label_filename", "+", "'\\n'", ")", "\n", "", "fout_out_filelist", ".", "close", "(", ")", "\n", "log_string", "(", "'all room eval accuracy: %f'", "%", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.eval_one_epoch": [[85, 168], ["open", "open", "indoor3d_util.room2blocks_wrapper_normalized", "np.squeeze", "np.load", "max", "max", "max", "print", "range", "batch_inference.log_string", "batch_inference.log_string", "open.close", "open.close", "open", "open", "open", "sess.run", "range", "np.sum", "range", "open.close", "open.close", "range", "range", "os.path.join", "os.path.join", "os.path.join", "np.argmax", "np.argmax", "range", "range", "open.write", "open.write", "float", "float", "open.write", "open.write", "os.path.basename", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks_wrapper_normalized", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.log_string", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "room_path", ",", "out_data_label_filename", ",", "out_gt_label_filename", ")", ":", "\n", "  ", "error_cnt", "=", "0", "\n", "is_training", "=", "False", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "total_seen_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "total_correct_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "\n", "if", "FLAGS", ".", "visu", ":", "\n", "    ", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "os", ".", "path", ".", "basename", "(", "room_path", ")", "[", ":", "-", "4", "]", "+", "'_pred.obj'", ")", ",", "'w'", ")", "\n", "fout_gt", "=", "open", "(", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "os", ".", "path", ".", "basename", "(", "room_path", ")", "[", ":", "-", "4", "]", "+", "'_gt.obj'", ")", ",", "'w'", ")", "\n", "fout_real_color", "=", "open", "(", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "os", ".", "path", ".", "basename", "(", "room_path", ")", "[", ":", "-", "4", "]", "+", "'_real_color.obj'", ")", ",", "'w'", ")", "\n", "", "fout_data_label", "=", "open", "(", "out_data_label_filename", ",", "'w'", ")", "\n", "fout_gt_label", "=", "open", "(", "out_gt_label_filename", ",", "'w'", ")", "\n", "\n", "current_data", ",", "current_label", "=", "indoor3d_util", ".", "room2blocks_wrapper_normalized", "(", "room_path", ",", "NUM_POINT", ")", "\n", "current_data", "=", "current_data", "[", ":", ",", "0", ":", "NUM_POINT", ",", ":", "]", "\n", "current_label", "=", "np", ".", "squeeze", "(", "current_label", ")", "\n", "# Get room dimension..", "\n", "data_label", "=", "np", ".", "load", "(", "room_path", ")", "\n", "data", "=", "data_label", "[", ":", ",", "0", ":", "6", "]", "\n", "max_room_x", "=", "max", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "max_room_y", "=", "max", "(", "data", "[", ":", ",", "1", "]", ")", "\n", "max_room_z", "=", "max", "(", "data", "[", ":", ",", "2", "]", ")", "\n", "\n", "file_size", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "file_size", "//", "BATCH_SIZE", "\n", "print", "(", "file_size", ")", "\n", "\n", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "    ", "start_idx", "=", "batch_idx", "*", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "BATCH_SIZE", "\n", "cur_batch_size", "=", "end_idx", "-", "start_idx", "\n", "\n", "feed_dict", "=", "{", "ops", "[", "'pointclouds_pl'", "]", ":", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "current_label", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred_softmax'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "if", "FLAGS", ".", "no_clutter", ":", "\n", "      ", "pred_label", "=", "np", ".", "argmax", "(", "pred_val", "[", ":", ",", ":", ",", "0", ":", "12", "]", ",", "2", ")", "# BxN", "\n", "", "else", ":", "\n", "      ", "pred_label", "=", "np", ".", "argmax", "(", "pred_val", ",", "2", ")", "# BxN", "\n", "\n", "# Save prediction labels to OBJ file", "\n", "", "for", "b", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "      ", "pts", "=", "current_data", "[", "start_idx", "+", "b", ",", ":", ",", ":", "]", "\n", "l", "=", "current_label", "[", "start_idx", "+", "b", ",", ":", "]", "\n", "pts", "[", ":", ",", "6", "]", "*=", "max_room_x", "\n", "pts", "[", ":", ",", "7", "]", "*=", "max_room_y", "\n", "pts", "[", ":", ",", "8", "]", "*=", "max_room_z", "\n", "pts", "[", ":", ",", "3", ":", "6", "]", "*=", "255.0", "\n", "pred", "=", "pred_label", "[", "b", ",", ":", "]", "\n", "for", "i", "in", "range", "(", "NUM_POINT", ")", ":", "\n", "        ", "color", "=", "indoor3d_util", ".", "g_label2color", "[", "pred", "[", "i", "]", "]", "\n", "color_gt", "=", "indoor3d_util", ".", "g_label2color", "[", "current_label", "[", "start_idx", "+", "b", ",", "i", "]", "]", "\n", "if", "FLAGS", ".", "visu", ":", "\n", "          ", "fout", ".", "write", "(", "'v %f %f %f %d %d %d\\n'", "%", "(", "pts", "[", "i", ",", "6", "]", ",", "pts", "[", "i", ",", "7", "]", ",", "pts", "[", "i", ",", "8", "]", ",", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ")", ")", "\n", "fout_gt", ".", "write", "(", "'v %f %f %f %d %d %d\\n'", "%", "(", "pts", "[", "i", ",", "6", "]", ",", "pts", "[", "i", ",", "7", "]", ",", "pts", "[", "i", ",", "8", "]", ",", "color_gt", "[", "0", "]", ",", "color_gt", "[", "1", "]", ",", "color_gt", "[", "2", "]", ")", ")", "\n", "", "fout_data_label", ".", "write", "(", "'%f %f %f %d %d %d %f %d\\n'", "%", "(", "pts", "[", "i", ",", "6", "]", ",", "pts", "[", "i", ",", "7", "]", ",", "pts", "[", "i", ",", "8", "]", ",", "pts", "[", "i", ",", "3", "]", ",", "pts", "[", "i", ",", "4", "]", ",", "pts", "[", "i", ",", "5", "]", ",", "pred_val", "[", "b", ",", "i", ",", "pred", "[", "i", "]", "]", ",", "pred", "[", "i", "]", ")", ")", "\n", "fout_gt_label", ".", "write", "(", "'%d\\n'", "%", "(", "l", "[", "i", "]", ")", ")", "\n", "\n", "", "", "correct", "=", "np", ".", "sum", "(", "pred_label", "==", "current_label", "[", "start_idx", ":", "end_idx", ",", ":", "]", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "(", "cur_batch_size", "*", "NUM_POINT", ")", "\n", "loss_sum", "+=", "(", "loss_val", "*", "BATCH_SIZE", ")", "\n", "for", "i", "in", "range", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "NUM_POINT", ")", ":", "\n", "        ", "l", "=", "current_label", "[", "i", ",", "j", "]", "\n", "total_seen_class", "[", "l", "]", "+=", "1", "\n", "total_correct_class", "[", "l", "]", "+=", "(", "pred_label", "[", "i", "-", "start_idx", ",", "j", "]", "==", "l", ")", "\n", "\n", "", "", "", "log_string", "(", "'eval mean loss: %f'", "%", "(", "loss_sum", "/", "float", "(", "total_seen", "/", "NUM_POINT", ")", ")", ")", "\n", "log_string", "(", "'eval accuracy: %f'", "%", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "fout_data_label", ".", "close", "(", ")", "\n", "fout_gt_label", ".", "close", "(", ")", "\n", "if", "FLAGS", ".", "visu", ":", "\n", "    ", "fout", ".", "close", "(", ")", "\n", "fout_gt", ".", "close", "(", ")", "\n", "", "return", "total_correct", ",", "total_seen", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.collect_point_label": [[37, 79], ["glob.glob", "numpy.concatenate", "os.path.join", "numpy.loadtxt", "points_list.append", "numpy.amin", "open", "range", "open.close", "os.path.basename().split", "numpy.ones", "numpy.concatenate", "open.write", "numpy.save", "print", "exit", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["def", "collect_point_label", "(", "anno_path", ",", "out_filename", ",", "file_format", "=", "'txt'", ")", ":", "\n", "  ", "\"\"\" Convert original dataset files to data_label file (each line is XYZRGBL).\n    We aggregated all the points from each instance in the room.\n\n  Args:\n    anno_path: path to annotations. e.g. Area_1/office_2/Annotations/\n    out_filename: path to save collected points and labels (each line is XYZRGBL)\n    file_format: txt or numpy, determines what file format to save.\n  Returns:\n    None\n  Note:\n    the points are shifted before save, the most negative point is now at origin.\n  \"\"\"", "\n", "points_list", "=", "[", "]", "\n", "\n", "for", "f", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "anno_path", ",", "'*.txt'", ")", ")", ":", "\n", "    ", "cls", "=", "os", ".", "path", ".", "basename", "(", "f", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "if", "cls", "not", "in", "g_classes", ":", "# note: in some room there is 'staris' class..", "\n", "      ", "cls", "=", "'clutter'", "\n", "", "points", "=", "np", ".", "loadtxt", "(", "f", ")", "\n", "labels", "=", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "*", "g_class2label", "[", "cls", "]", "\n", "points_list", ".", "append", "(", "np", ".", "concatenate", "(", "[", "points", ",", "labels", "]", ",", "1", ")", ")", "# Nx7", "\n", "\n", "\n", "", "data_label", "=", "np", ".", "concatenate", "(", "points_list", ",", "0", ")", "\n", "xyz_min", "=", "np", ".", "amin", "(", "data_label", ",", "axis", "=", "0", ")", "[", "0", ":", "3", "]", "\n", "data_label", "[", ":", ",", "0", ":", "3", "]", "-=", "xyz_min", "\n", "\n", "if", "file_format", "==", "'txt'", ":", "\n", "    ", "fout", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "data_label", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "fout", ".", "write", "(", "'%f %f %f %d %d %d %d\\n'", "%", "(", "data_label", "[", "i", ",", "0", "]", ",", "data_label", "[", "i", ",", "1", "]", ",", "data_label", "[", "i", ",", "2", "]", ",", "\n", "data_label", "[", "i", ",", "3", "]", ",", "data_label", "[", "i", ",", "4", "]", ",", "data_label", "[", "i", ",", "5", "]", ",", "\n", "data_label", "[", "i", ",", "6", "]", ")", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "", "elif", "file_format", "==", "'numpy'", ":", "\n", "    ", "np", ".", "save", "(", "out_filename", ",", "data_label", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "'ERROR!! Unknown file format: %s, please use txt or numpy.'", "%", "(", "file_format", ")", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.point_label_to_obj": [[80, 104], ["numpy.loadtxt", "data_label[].astype", "open", "range", "open.close", "open.write", "open.write"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "", "def", "point_label_to_obj", "(", "input_filename", ",", "out_filename", ",", "label_color", "=", "True", ",", "easy_view", "=", "False", ",", "no_wall", "=", "False", ")", ":", "\n", "  ", "\"\"\" For visualization of a room from data_label file,\n  input_filename: each line is X Y Z R G B L\n  out_filename: OBJ filename,\n      visualize input file by coloring point with label color\n    easy_view: only visualize furnitures and floor\n  \"\"\"", "\n", "data_label", "=", "np", ".", "loadtxt", "(", "input_filename", ")", "\n", "data", "=", "data_label", "[", ":", ",", "0", ":", "6", "]", "\n", "label", "=", "data_label", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "int", ")", "\n", "fout", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "color", "=", "g_label2color", "[", "label", "[", "i", "]", "]", "\n", "if", "easy_view", "and", "(", "label", "[", "i", "]", "not", "in", "g_easy_view_labels", ")", ":", "\n", "      ", "continue", "\n", "", "if", "no_wall", "and", "(", "(", "label", "[", "i", "]", "==", "2", ")", "or", "(", "label", "[", "i", "]", "==", "0", ")", ")", ":", "\n", "      ", "continue", "\n", "", "if", "label_color", ":", "\n", "      ", "fout", ".", "write", "(", "'v %f %f %f %d %d %d\\n'", "%", "(", "data", "[", "i", ",", "0", "]", ",", "data", "[", "i", ",", "1", "]", ",", "data", "[", "i", ",", "2", "]", ",", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "fout", ".", "write", "(", "'v %f %f %f %d %d %d\\n'", "%", "(", "data", "[", "i", ",", "0", "]", ",", "data", "[", "i", ",", "1", "]", ",", "data", "[", "i", ",", "2", "]", ",", "data", "[", "i", ",", "3", "]", ",", "data", "[", "i", ",", "4", "]", ",", "data", "[", "i", ",", "5", "]", ")", ")", "\n", "", "", "fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.sample_data": [[111, 127], ["range", "numpy.random.choice", "numpy.random.choice", "numpy.concatenate", "range", "list"], "function", ["None"], ["", "def", "sample_data", "(", "data", ",", "num_sample", ")", ":", "\n", "  ", "\"\"\" data is in N x ...\n    we want to keep num_samplexC of them.\n    if N > num_sample, we will randomly keep num_sample of them.\n    if N < num_sample, we will randomly duplicate samples.\n  \"\"\"", "\n", "N", "=", "data", ".", "shape", "[", "0", "]", "\n", "if", "(", "N", "==", "num_sample", ")", ":", "\n", "    ", "return", "data", ",", "range", "(", "N", ")", "\n", "", "elif", "(", "N", ">", "num_sample", ")", ":", "\n", "    ", "sample", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "num_sample", ")", "\n", "return", "data", "[", "sample", ",", "...", "]", ",", "sample", "\n", "", "else", ":", "\n", "    ", "sample", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "num_sample", "-", "N", ")", "\n", "dup_data", "=", "data", "[", "sample", ",", "...", "]", "\n", "return", "np", ".", "concatenate", "(", "[", "data", ",", "dup_data", "]", ",", "0", ")", ",", "range", "(", "N", ")", "+", "list", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.sample_data_label": [[128, 132], ["indoor3d_util.sample_data"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.sample_data"], ["", "", "def", "sample_data_label", "(", "data", ",", "label", ",", "num_sample", ")", ":", "\n", "  ", "new_data", ",", "sample_indices", "=", "sample_data", "(", "data", ",", "num_sample", ")", "\n", "new_label", "=", "label", "[", "sample_indices", "]", "\n", "return", "new_data", ",", "new_label", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks": [[133, 203], ["range", "numpy.amax", "range", "int", "int", "range", "len", "indoor3d_util.sample_data_label", "block_data_list.append", "block_label_list.append", "numpy.concatenate", "numpy.concatenate", "int", "int", "range", "numpy.ceil", "numpy.ceil", "numpy.random.uniform", "numpy.random.uniform", "xbeg_list.append", "ybeg_list.append", "numpy.sum", "numpy.expand_dims", "numpy.expand_dims", "numpy.ceil", "numpy.ceil", "xbeg_list.append", "ybeg_list.append"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.sample_data_label"], ["", "def", "room2blocks", "(", "data", ",", "label", ",", "num_point", ",", "block_size", "=", "1.0", ",", "stride", "=", "1.0", ",", "\n", "random_sample", "=", "False", ",", "sample_num", "=", "None", ",", "sample_aug", "=", "1", ")", ":", "\n", "  ", "\"\"\" Prepare block training data.\n  Args:\n    data: N x 6 numpy array, 012 are XYZ in meters, 345 are RGB in [0,1]\n      assumes the data is shifted (min point is origin) and aligned\n      (aligned with XYZ axis)\n    label: N size uint8 numpy array from 0-12\n    num_point: int, how many points to sample in each block\n    block_size: float, physical size of the block in meters\n    stride: float, stride for block sweeping\n    random_sample: bool, if True, we will randomly sample blocks in the room\n    sample_num: int, if random sample, how many blocks to sample\n      [default: room area]\n    sample_aug: if random sample, how much aug\n  Returns:\n    block_datas: K x num_point x 6 np array of XYZRGB, RGB is in [0,1]\n    block_labels: K x num_point x 1 np array of uint8 labels\n    \n  TODO: for this version, blocking is in fixed, non-overlapping pattern.\n  \"\"\"", "\n", "assert", "(", "stride", "<=", "block_size", ")", "\n", "\n", "limit", "=", "np", ".", "amax", "(", "data", ",", "0", ")", "[", "0", ":", "3", "]", "\n", "\n", "# Get the corner location for our sampling blocks    ", "\n", "xbeg_list", "=", "[", "]", "\n", "ybeg_list", "=", "[", "]", "\n", "if", "not", "random_sample", ":", "\n", "    ", "num_block_x", "=", "int", "(", "np", ".", "ceil", "(", "(", "limit", "[", "0", "]", "-", "block_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "num_block_y", "=", "int", "(", "np", ".", "ceil", "(", "(", "limit", "[", "1", "]", "-", "block_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "for", "i", "in", "range", "(", "num_block_x", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "num_block_y", ")", ":", "\n", "        ", "xbeg_list", ".", "append", "(", "i", "*", "stride", ")", "\n", "ybeg_list", ".", "append", "(", "j", "*", "stride", ")", "\n", "", "", "", "else", ":", "\n", "    ", "num_block_x", "=", "int", "(", "np", ".", "ceil", "(", "limit", "[", "0", "]", "/", "block_size", ")", ")", "\n", "num_block_y", "=", "int", "(", "np", ".", "ceil", "(", "limit", "[", "1", "]", "/", "block_size", ")", ")", "\n", "if", "sample_num", "is", "None", ":", "\n", "      ", "sample_num", "=", "num_block_x", "*", "num_block_y", "*", "sample_aug", "\n", "", "for", "_", "in", "range", "(", "sample_num", ")", ":", "\n", "      ", "xbeg", "=", "np", ".", "random", ".", "uniform", "(", "-", "block_size", ",", "limit", "[", "0", "]", ")", "\n", "ybeg", "=", "np", ".", "random", ".", "uniform", "(", "-", "block_size", ",", "limit", "[", "1", "]", ")", "\n", "xbeg_list", ".", "append", "(", "xbeg", ")", "\n", "ybeg_list", ".", "append", "(", "ybeg", ")", "\n", "\n", "# Collect blocks", "\n", "", "", "block_data_list", "=", "[", "]", "\n", "block_label_list", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "xbeg_list", ")", ")", ":", "\n", "     ", "xbeg", "=", "xbeg_list", "[", "idx", "]", "\n", "ybeg", "=", "ybeg_list", "[", "idx", "]", "\n", "xcond", "=", "(", "data", "[", ":", ",", "0", "]", "<=", "xbeg", "+", "block_size", ")", "&", "(", "data", "[", ":", ",", "0", "]", ">=", "xbeg", ")", "\n", "ycond", "=", "(", "data", "[", ":", ",", "1", "]", "<=", "ybeg", "+", "block_size", ")", "&", "(", "data", "[", ":", ",", "1", "]", ">=", "ybeg", ")", "\n", "cond", "=", "xcond", "&", "ycond", "\n", "if", "np", ".", "sum", "(", "cond", ")", "<", "100", ":", "# discard block if there are less than 100 pts.", "\n", "       ", "continue", "\n", "\n", "", "block_data", "=", "data", "[", "cond", ",", ":", "]", "\n", "block_label", "=", "label", "[", "cond", "]", "\n", "\n", "# randomly subsample data", "\n", "block_data_sampled", ",", "block_label_sampled", "=", "sample_data_label", "(", "block_data", ",", "block_label", ",", "num_point", ")", "\n", "block_data_list", ".", "append", "(", "np", ".", "expand_dims", "(", "block_data_sampled", ",", "0", ")", ")", "\n", "block_label_list", ".", "append", "(", "np", ".", "expand_dims", "(", "block_label_sampled", ",", "0", ")", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "block_data_list", ",", "0", ")", ",", "np", ".", "concatenate", "(", "block_label_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks_plus": [[205, 215], ["data_label[].astype", "indoor3d_util.room2blocks"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks"], ["", "def", "room2blocks_plus", "(", "data_label", ",", "num_point", ",", "block_size", ",", "stride", ",", "\n", "random_sample", ",", "sample_num", ",", "sample_aug", ")", ":", "\n", "  ", "\"\"\" room2block with input filename and RGB preprocessing.\n  \"\"\"", "\n", "data", "=", "data_label", "[", ":", ",", "0", ":", "6", "]", "\n", "data", "[", ":", ",", "3", ":", "6", "]", "/=", "255.0", "\n", "label", "=", "data_label", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "room2blocks", "(", "data", ",", "label", ",", "num_point", ",", "block_size", ",", "stride", ",", "\n", "random_sample", ",", "sample_num", ",", "sample_aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks_wrapper": [[216, 227], ["indoor3d_util.room2blocks_plus", "numpy.loadtxt", "numpy.load", "print", "exit"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks_plus"], ["", "def", "room2blocks_wrapper", "(", "data_label_filename", ",", "num_point", ",", "block_size", "=", "1.0", ",", "stride", "=", "1.0", ",", "\n", "random_sample", "=", "False", ",", "sample_num", "=", "None", ",", "sample_aug", "=", "1", ")", ":", "\n", "  ", "if", "data_label_filename", "[", "-", "3", ":", "]", "==", "'txt'", ":", "\n", "    ", "data_label", "=", "np", ".", "loadtxt", "(", "data_label_filename", ")", "\n", "", "elif", "data_label_filename", "[", "-", "3", ":", "]", "==", "'npy'", ":", "\n", "    ", "data_label", "=", "np", ".", "load", "(", "data_label_filename", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "'Unknown file type! exiting.'", ")", "\n", "exit", "(", ")", "\n", "", "return", "room2blocks_plus", "(", "data_label", ",", "num_point", ",", "block_size", ",", "stride", ",", "\n", "random_sample", ",", "sample_num", ",", "sample_aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks_plus_normalized": [[228, 253], ["data_label[].astype", "max", "max", "max", "indoor3d_util.room2blocks", "numpy.zeros", "range", "min", "min"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks"], ["", "def", "room2blocks_plus_normalized", "(", "data_label", ",", "num_point", ",", "block_size", ",", "stride", ",", "\n", "random_sample", ",", "sample_num", ",", "sample_aug", ")", ":", "\n", "  ", "\"\"\" room2block, with input filename and RGB preprocessing.\n    for each block centralize XYZ, add normalized XYZ as 678 channels\n  \"\"\"", "\n", "data", "=", "data_label", "[", ":", ",", "0", ":", "6", "]", "\n", "data", "[", ":", ",", "3", ":", "6", "]", "/=", "255.0", "\n", "label", "=", "data_label", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "max_room_x", "=", "max", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "max_room_y", "=", "max", "(", "data", "[", ":", ",", "1", "]", ")", "\n", "max_room_z", "=", "max", "(", "data", "[", ":", ",", "2", "]", ")", "\n", "\n", "data_batch", ",", "label_batch", "=", "room2blocks", "(", "data", ",", "label", ",", "num_point", ",", "block_size", ",", "stride", ",", "\n", "random_sample", ",", "sample_num", ",", "sample_aug", ")", "\n", "new_data_batch", "=", "np", ".", "zeros", "(", "(", "data_batch", ".", "shape", "[", "0", "]", ",", "num_point", ",", "9", ")", ")", "\n", "for", "b", "in", "range", "(", "data_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "new_data_batch", "[", "b", ",", ":", ",", "6", "]", "=", "data_batch", "[", "b", ",", ":", ",", "0", "]", "/", "max_room_x", "\n", "new_data_batch", "[", "b", ",", ":", ",", "7", "]", "=", "data_batch", "[", "b", ",", ":", ",", "1", "]", "/", "max_room_y", "\n", "new_data_batch", "[", "b", ",", ":", ",", "8", "]", "=", "data_batch", "[", "b", ",", ":", ",", "2", "]", "/", "max_room_z", "\n", "minx", "=", "min", "(", "data_batch", "[", "b", ",", ":", ",", "0", "]", ")", "\n", "miny", "=", "min", "(", "data_batch", "[", "b", ",", ":", ",", "1", "]", ")", "\n", "data_batch", "[", "b", ",", ":", ",", "0", "]", "-=", "(", "minx", "+", "block_size", "/", "2", ")", "\n", "data_batch", "[", "b", ",", ":", ",", "1", "]", "-=", "(", "miny", "+", "block_size", "/", "2", ")", "\n", "", "new_data_batch", "[", ":", ",", ":", ",", "0", ":", "6", "]", "=", "data_batch", "\n", "return", "new_data_batch", ",", "label_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks_wrapper_normalized": [[255, 266], ["indoor3d_util.room2blocks_plus_normalized", "numpy.loadtxt", "numpy.load", "print", "exit"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2blocks_plus_normalized"], ["", "def", "room2blocks_wrapper_normalized", "(", "data_label_filename", ",", "num_point", ",", "block_size", "=", "1.0", ",", "stride", "=", "1.0", ",", "\n", "random_sample", "=", "False", ",", "sample_num", "=", "None", ",", "sample_aug", "=", "1", ")", ":", "\n", "  ", "if", "data_label_filename", "[", "-", "3", ":", "]", "==", "'txt'", ":", "\n", "    ", "data_label", "=", "np", ".", "loadtxt", "(", "data_label_filename", ")", "\n", "", "elif", "data_label_filename", "[", "-", "3", ":", "]", "==", "'npy'", ":", "\n", "    ", "data_label", "=", "np", ".", "load", "(", "data_label_filename", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "'Unknown file type! exiting.'", ")", "\n", "exit", "(", ")", "\n", "", "return", "room2blocks_plus_normalized", "(", "data_label", ",", "num_point", ",", "block_size", ",", "stride", ",", "\n", "random_sample", ",", "sample_num", ",", "sample_aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2samples": [[267, 302], ["numpy.arange", "numpy.random.shuffle", "int", "numpy.zeros", "numpy.zeros", "range", "numpy.ceil", "min", "numpy.random.choice", "float"], "function", ["None"], ["", "def", "room2samples", "(", "data", ",", "label", ",", "sample_num_point", ")", ":", "\n", "  ", "\"\"\" Prepare whole room samples.\n\n  Args:\n    data: N x 6 numpy array, 012 are XYZ in meters, 345 are RGB in [0,1]\n      assumes the data is shifted (min point is origin) and\n      aligned (aligned with XYZ axis)\n    label: N size uint8 numpy array from 0-12\n    sample_num_point: int, how many points to sample in each sample\n  Returns:\n    sample_datas: K x sample_num_point x 9\n           numpy array of XYZRGBX'Y'Z', RGB is in [0,1]\n    sample_labels: K x sample_num_point x 1 np array of uint8 labels\n  \"\"\"", "\n", "N", "=", "data", ".", "shape", "[", "0", "]", "\n", "order", "=", "np", ".", "arange", "(", "N", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "order", ")", "\n", "data", "=", "data", "[", "order", ",", ":", "]", "\n", "label", "=", "label", "[", "order", "]", "\n", "\n", "batch_num", "=", "int", "(", "np", ".", "ceil", "(", "N", "/", "float", "(", "sample_num_point", ")", ")", ")", "\n", "sample_datas", "=", "np", ".", "zeros", "(", "(", "batch_num", ",", "sample_num_point", ",", "6", ")", ")", "\n", "sample_labels", "=", "np", ".", "zeros", "(", "(", "batch_num", ",", "sample_num_point", ",", "1", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "    ", "beg_idx", "=", "i", "*", "sample_num_point", "\n", "end_idx", "=", "min", "(", "(", "i", "+", "1", ")", "*", "sample_num_point", ",", "N", ")", "\n", "num", "=", "end_idx", "-", "beg_idx", "\n", "sample_datas", "[", "i", ",", "0", ":", "num", ",", ":", "]", "=", "data", "[", "beg_idx", ":", "end_idx", ",", ":", "]", "\n", "sample_labels", "[", "i", ",", "0", ":", "num", ",", "0", "]", "=", "label", "[", "beg_idx", ":", "end_idx", "]", "\n", "if", "num", "<", "sample_num_point", ":", "\n", "      ", "makeup_indices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "sample_num_point", "-", "num", ")", "\n", "sample_datas", "[", "i", ",", "num", ":", ",", ":", "]", "=", "data", "[", "makeup_indices", ",", ":", "]", "\n", "sample_labels", "[", "i", ",", "num", ":", ",", "0", "]", "=", "label", "[", "makeup_indices", "]", "\n", "", "", "return", "sample_datas", ",", "sample_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2samples_plus_normalized": [[303, 327], ["data_label[].astype", "max", "max", "max", "indoor3d_util.room2samples", "numpy.zeros", "range"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2samples"], ["", "def", "room2samples_plus_normalized", "(", "data_label", ",", "num_point", ")", ":", "\n", "  ", "\"\"\" room2sample, with input filename and RGB preprocessing.\n    for each block centralize XYZ, add normalized XYZ as 678 channels\n  \"\"\"", "\n", "data", "=", "data_label", "[", ":", ",", "0", ":", "6", "]", "\n", "data", "[", ":", ",", "3", ":", "6", "]", "/=", "255.0", "\n", "label", "=", "data_label", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "max_room_x", "=", "max", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "max_room_y", "=", "max", "(", "data", "[", ":", ",", "1", "]", ")", "\n", "max_room_z", "=", "max", "(", "data", "[", ":", ",", "2", "]", ")", "\n", "#print(max_room_x, max_room_y, max_room_z)", "\n", "\n", "data_batch", ",", "label_batch", "=", "room2samples", "(", "data", ",", "label", ",", "num_point", ")", "\n", "new_data_batch", "=", "np", ".", "zeros", "(", "(", "data_batch", ".", "shape", "[", "0", "]", ",", "num_point", ",", "9", ")", ")", "\n", "for", "b", "in", "range", "(", "data_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "new_data_batch", "[", "b", ",", ":", ",", "6", "]", "=", "data_batch", "[", "b", ",", ":", ",", "0", "]", "/", "max_room_x", "\n", "new_data_batch", "[", "b", ",", ":", ",", "7", "]", "=", "data_batch", "[", "b", ",", ":", ",", "1", "]", "/", "max_room_y", "\n", "new_data_batch", "[", "b", ",", ":", ",", "8", "]", "=", "data_batch", "[", "b", ",", ":", ",", "2", "]", "/", "max_room_z", "\n", "#minx = min(data_batch[b, :, 0])", "\n", "#miny = min(data_batch[b, :, 1])", "\n", "#data_batch[b, :, 0] -= (minx+block_size/2)", "\n", "#data_batch[b, :, 1] -= (miny+block_size/2)", "\n", "", "new_data_batch", "[", ":", ",", ":", ",", "0", ":", "6", "]", "=", "data_batch", "\n", "return", "new_data_batch", ",", "label_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2samples_wrapper_normalized": [[329, 338], ["indoor3d_util.room2samples_plus_normalized", "numpy.loadtxt", "numpy.load", "print", "exit"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.room2samples_plus_normalized"], ["", "def", "room2samples_wrapper_normalized", "(", "data_label_filename", ",", "num_point", ")", ":", "\n", "  ", "if", "data_label_filename", "[", "-", "3", ":", "]", "==", "'txt'", ":", "\n", "    ", "data_label", "=", "np", ".", "loadtxt", "(", "data_label_filename", ")", "\n", "", "elif", "data_label_filename", "[", "-", "3", ":", "]", "==", "'npy'", ":", "\n", "    ", "data_label", "=", "np", ".", "load", "(", "data_label_filename", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "'Unknown file type! exiting.'", ")", "\n", "exit", "(", ")", "\n", "", "return", "room2samples_plus_normalized", "(", "data_label", ",", "num_point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.collect_bounding_box": [[344, 385], ["glob.glob", "numpy.concatenate", "numpy.amin", "open", "range", "open.close", "os.path.join", "numpy.loadtxt", "numpy.amin", "numpy.amax", "numpy.expand_dims", "bbox_label_list.append", "open.write", "os.path.basename().split", "numpy.concatenate", "os.path.basename", "numpy.array"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "collect_bounding_box", "(", "anno_path", ",", "out_filename", ")", ":", "\n", "  ", "\"\"\" Compute bounding boxes from each instance in original dataset files on\n    one room. **We assume the bbox is aligned with XYZ coordinate.**\n  \n  Args:\n    anno_path: path to annotations. e.g. Area_1/office_2/Annotations/\n    out_filename: path to save instance bounding boxes for that room.\n      each line is x1 y1 z1 x2 y2 z2 label,\n      where (x1,y1,z1) is the point on the diagonal closer to origin\n  Returns:\n    None\n  Note:\n    room points are shifted, the most negative point is now at origin.\n  \"\"\"", "\n", "bbox_label_list", "=", "[", "]", "\n", "\n", "for", "f", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "anno_path", ",", "'*.txt'", ")", ")", ":", "\n", "    ", "cls", "=", "os", ".", "path", ".", "basename", "(", "f", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "if", "cls", "not", "in", "g_classes", ":", "# note: in some room there is 'staris' class..", "\n", "      ", "cls", "=", "'clutter'", "\n", "", "points", "=", "np", ".", "loadtxt", "(", "f", ")", "\n", "label", "=", "g_class2label", "[", "cls", "]", "\n", "# Compute tightest axis aligned bounding box", "\n", "xyz_min", "=", "np", ".", "amin", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "xyz_max", "=", "np", ".", "amax", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "ins_bbox_label", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "concatenate", "(", "[", "xyz_min", ",", "xyz_max", ",", "np", ".", "array", "(", "[", "label", "]", ")", "]", ",", "0", ")", ",", "0", ")", "\n", "bbox_label_list", ".", "append", "(", "ins_bbox_label", ")", "\n", "\n", "", "bbox_label", "=", "np", ".", "concatenate", "(", "bbox_label_list", ",", "0", ")", "\n", "room_xyz_min", "=", "np", ".", "amin", "(", "bbox_label", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "bbox_label", "[", ":", ",", "0", ":", "3", "]", "-=", "room_xyz_min", "\n", "bbox_label", "[", ":", ",", "3", ":", "6", "]", "-=", "room_xyz_min", "\n", "\n", "fout", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "bbox_label", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "fout", ".", "write", "(", "'%f %f %f %f %f %f %d\\n'", "%", "(", "bbox_label", "[", "i", ",", "0", "]", ",", "bbox_label", "[", "i", ",", "1", "]", ",", "bbox_label", "[", "i", ",", "2", "]", ",", "\n", "bbox_label", "[", "i", ",", "3", "]", ",", "bbox_label", "[", "i", ",", "4", "]", ",", "bbox_label", "[", "i", ",", "5", "]", ",", "\n", "bbox_label", "[", "i", ",", "6", "]", ")", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.bbox_label_to_obj": [[386, 448], ["numpy.loadtxt", "bbox_label[].astype", "range", "open", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "open.close", "numpy.array", "str", "str", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close"], ["", "def", "bbox_label_to_obj", "(", "input_filename", ",", "out_filename_prefix", ",", "easy_view", "=", "False", ")", ":", "\n", "  ", "\"\"\" Visualization of bounding boxes.\n  \n  Args:\n    input_filename: each line is x1 y1 z1 x2 y2 z2 label\n    out_filename_prefix: OBJ filename prefix,\n      visualize object by g_label2color\n    easy_view: if True, only visualize furniture and floor\n  Returns:\n    output a list of OBJ file and MTL files with the same prefix\n  \"\"\"", "\n", "bbox_label", "=", "np", ".", "loadtxt", "(", "input_filename", ")", "\n", "bbox", "=", "bbox_label", "[", ":", ",", "0", ":", "6", "]", "\n", "label", "=", "bbox_label", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "int", ")", "\n", "v_cnt", "=", "0", "# count vertex", "\n", "ins_cnt", "=", "0", "# count instance", "\n", "for", "i", "in", "range", "(", "bbox", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "if", "easy_view", "and", "(", "label", "[", "i", "]", "not", "in", "g_easy_view_labels", ")", ":", "\n", "      ", "continue", "\n", "", "obj_filename", "=", "out_filename_prefix", "+", "'_'", "+", "g_classes", "[", "label", "[", "i", "]", "]", "+", "'_'", "+", "str", "(", "ins_cnt", ")", "+", "'.obj'", "\n", "mtl_filename", "=", "out_filename_prefix", "+", "'_'", "+", "g_classes", "[", "label", "[", "i", "]", "]", "+", "'_'", "+", "str", "(", "ins_cnt", ")", "+", "'.mtl'", "\n", "fout_obj", "=", "open", "(", "obj_filename", ",", "'w'", ")", "\n", "fout_mtl", "=", "open", "(", "mtl_filename", ",", "'w'", ")", "\n", "fout_obj", ".", "write", "(", "'mtllib %s\\n'", "%", "(", "os", ".", "path", ".", "basename", "(", "mtl_filename", ")", ")", ")", "\n", "\n", "length", "=", "bbox", "[", "i", ",", "3", ":", "6", "]", "-", "bbox", "[", "i", ",", "0", ":", "3", "]", "\n", "a", "=", "length", "[", "0", "]", "\n", "b", "=", "length", "[", "1", "]", "\n", "c", "=", "length", "[", "2", "]", "\n", "x", "=", "bbox", "[", "i", ",", "0", "]", "\n", "y", "=", "bbox", "[", "i", ",", "1", "]", "\n", "z", "=", "bbox", "[", "i", ",", "2", "]", "\n", "color", "=", "np", ".", "array", "(", "g_label2color", "[", "label", "[", "i", "]", "]", ",", "dtype", "=", "float", ")", "/", "255.0", "\n", "\n", "material", "=", "'material%d'", "%", "(", "ins_cnt", ")", "\n", "fout_obj", ".", "write", "(", "'usemtl %s\\n'", "%", "(", "material", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", "+", "b", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", "+", "b", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", "+", "b", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", "+", "b", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'g default\\n'", ")", "\n", "v_cnt", "=", "0", "# for individual box", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "4", "+", "v_cnt", ",", "3", "+", "v_cnt", ",", "2", "+", "v_cnt", ",", "1", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "1", "+", "v_cnt", ",", "2", "+", "v_cnt", ",", "6", "+", "v_cnt", ",", "5", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "7", "+", "v_cnt", ",", "6", "+", "v_cnt", ",", "2", "+", "v_cnt", ",", "3", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "4", "+", "v_cnt", ",", "8", "+", "v_cnt", ",", "7", "+", "v_cnt", ",", "3", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "5", "+", "v_cnt", ",", "8", "+", "v_cnt", ",", "4", "+", "v_cnt", ",", "1", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "5", "+", "v_cnt", ",", "6", "+", "v_cnt", ",", "7", "+", "v_cnt", ",", "8", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'\\n'", ")", "\n", "\n", "fout_mtl", ".", "write", "(", "'newmtl %s\\n'", "%", "(", "material", ")", ")", "\n", "fout_mtl", ".", "write", "(", "'Kd %f %f %f\\n'", "%", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ")", ")", "\n", "fout_mtl", ".", "write", "(", "'\\n'", ")", "\n", "fout_obj", ".", "close", "(", ")", "\n", "fout_mtl", ".", "close", "(", ")", "\n", "\n", "v_cnt", "+=", "8", "\n", "ins_cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.bbox_label_to_obj_room": [[449, 526], ["numpy.loadtxt", "bbox_label[].astype", "open", "open", "open.write", "range", "open.close", "open.close", "numpy.array", "numpy.amax", "numpy.max", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "len", "os.path.basename", "numpy.array", "g_classes.index"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "", "def", "bbox_label_to_obj_room", "(", "input_filename", ",", "out_filename_prefix", ",", "easy_view", "=", "False", ",", "permute", "=", "None", ",", "center", "=", "False", ",", "exclude_table", "=", "False", ")", ":", "\n", "  ", "\"\"\" Visualization of bounding boxes.\n  \n  Args:\n    input_filename: each line is x1 y1 z1 x2 y2 z2 label\n    out_filename_prefix: OBJ filename prefix,\n      visualize object by g_label2color\n    easy_view: if True, only visualize furniture and floor\n    permute: if not None, permute XYZ for rendering, e.g. [0 2 1]\n    center: if True, move obj to have zero origin\n  Returns:\n    output a list of OBJ file and MTL files with the same prefix\n  \"\"\"", "\n", "bbox_label", "=", "np", ".", "loadtxt", "(", "input_filename", ")", "\n", "bbox", "=", "bbox_label", "[", ":", ",", "0", ":", "6", "]", "\n", "if", "permute", "is", "not", "None", ":", "\n", "    ", "assert", "(", "len", "(", "permute", ")", "==", "3", ")", "\n", "permute", "=", "np", ".", "array", "(", "permute", ")", "\n", "bbox", "[", ":", ",", "0", ":", "3", "]", "=", "bbox", "[", ":", ",", "permute", "]", "\n", "bbox", "[", ":", ",", "3", ":", "6", "]", "=", "bbox", "[", ":", ",", "permute", "+", "3", "]", "\n", "", "if", "center", ":", "\n", "    ", "xyz_max", "=", "np", ".", "amax", "(", "bbox", "[", ":", ",", "3", ":", "6", "]", ",", "0", ")", "\n", "bbox", "[", ":", ",", "0", ":", "3", "]", "-=", "(", "xyz_max", "/", "2.0", ")", "\n", "bbox", "[", ":", ",", "3", ":", "6", "]", "-=", "(", "xyz_max", "/", "2.0", ")", "\n", "bbox", "/=", "np", ".", "max", "(", "xyz_max", "/", "2.0", ")", "\n", "", "label", "=", "bbox_label", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "int", ")", "\n", "obj_filename", "=", "out_filename_prefix", "+", "'.obj'", "\n", "mtl_filename", "=", "out_filename_prefix", "+", "'.mtl'", "\n", "\n", "fout_obj", "=", "open", "(", "obj_filename", ",", "'w'", ")", "\n", "fout_mtl", "=", "open", "(", "mtl_filename", ",", "'w'", ")", "\n", "fout_obj", ".", "write", "(", "'mtllib %s\\n'", "%", "(", "os", ".", "path", ".", "basename", "(", "mtl_filename", ")", ")", ")", "\n", "v_cnt", "=", "0", "# count vertex", "\n", "ins_cnt", "=", "0", "# count instance", "\n", "for", "i", "in", "range", "(", "bbox", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "if", "easy_view", "and", "(", "label", "[", "i", "]", "not", "in", "g_easy_view_labels", ")", ":", "\n", "      ", "continue", "\n", "", "if", "exclude_table", "and", "label", "[", "i", "]", "==", "g_classes", ".", "index", "(", "'table'", ")", ":", "\n", "      ", "continue", "\n", "\n", "", "length", "=", "bbox", "[", "i", ",", "3", ":", "6", "]", "-", "bbox", "[", "i", ",", "0", ":", "3", "]", "\n", "a", "=", "length", "[", "0", "]", "\n", "b", "=", "length", "[", "1", "]", "\n", "c", "=", "length", "[", "2", "]", "\n", "x", "=", "bbox", "[", "i", ",", "0", "]", "\n", "y", "=", "bbox", "[", "i", ",", "1", "]", "\n", "z", "=", "bbox", "[", "i", ",", "2", "]", "\n", "color", "=", "np", ".", "array", "(", "g_label2color", "[", "label", "[", "i", "]", "]", ",", "dtype", "=", "float", ")", "/", "255.0", "\n", "\n", "material", "=", "'material%d'", "%", "(", "ins_cnt", ")", "\n", "fout_obj", ".", "write", "(", "'usemtl %s\\n'", "%", "(", "material", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", "+", "b", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", "+", "b", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", ",", "z", "+", "c", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", ",", "y", "+", "b", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", "+", "b", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "x", "+", "a", ",", "y", ",", "z", ")", ")", "\n", "fout_obj", ".", "write", "(", "'g default\\n'", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "4", "+", "v_cnt", ",", "3", "+", "v_cnt", ",", "2", "+", "v_cnt", ",", "1", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "1", "+", "v_cnt", ",", "2", "+", "v_cnt", ",", "6", "+", "v_cnt", ",", "5", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "7", "+", "v_cnt", ",", "6", "+", "v_cnt", ",", "2", "+", "v_cnt", ",", "3", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "4", "+", "v_cnt", ",", "8", "+", "v_cnt", ",", "7", "+", "v_cnt", ",", "3", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "5", "+", "v_cnt", ",", "8", "+", "v_cnt", ",", "4", "+", "v_cnt", ",", "1", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'f %d %d %d %d\\n'", "%", "(", "5", "+", "v_cnt", ",", "6", "+", "v_cnt", ",", "7", "+", "v_cnt", ",", "8", "+", "v_cnt", ")", ")", "\n", "fout_obj", ".", "write", "(", "'\\n'", ")", "\n", "\n", "fout_mtl", ".", "write", "(", "'newmtl %s\\n'", "%", "(", "material", ")", ")", "\n", "fout_mtl", ".", "write", "(", "'Kd %f %f %f\\n'", "%", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ")", ")", "\n", "fout_mtl", ".", "write", "(", "'\\n'", ")", "\n", "\n", "v_cnt", "+=", "8", "\n", "ins_cnt", "+=", "1", "\n", "\n", "", "fout_obj", ".", "close", "(", ")", "\n", "fout_mtl", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.indoor3d_util.collect_point_bounding_box": [[528, 590], ["glob.glob", "numpy.concatenate", "numpy.amin", "os.path.join", "numpy.loadtxt", "numpy.amin", "numpy.amax", "point_bbox_list.append", "open", "range", "open.close", "os.path.basename().split", "numpy.ones", "numpy.ones", "numpy.concatenate", "open.write", "numpy.save", "print", "exit", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "collect_point_bounding_box", "(", "anno_path", ",", "out_filename", ",", "file_format", ")", ":", "\n", "  ", "\"\"\" Compute bounding boxes from each instance in original dataset files on\n    one room. **We assume the bbox is aligned with XYZ coordinate.**\n    Save both the point XYZRGB and the bounding box for the point's\n    parent element.\n \n  Args:\n    anno_path: path to annotations. e.g. Area_1/office_2/Annotations/\n    out_filename: path to save instance bounding boxes for each point,\n      plus the point's XYZRGBL\n      each line is XYZRGBL offsetX offsetY offsetZ a b c,\n      where cx = X+offsetX, cy=X+offsetY, cz=Z+offsetZ\n      where (cx,cy,cz) is center of the box, a,b,c are distances from center\n      to the surfaces of the box, i.e. x1 = cx-a, x2 = cx+a, y1=cy-b etc.\n    file_format: output file format, txt or numpy\n  Returns:\n    None\n\n  Note:\n    room points are shifted, the most negative point is now at origin.\n  \"\"\"", "\n", "point_bbox_list", "=", "[", "]", "\n", "\n", "for", "f", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "anno_path", ",", "'*.txt'", ")", ")", ":", "\n", "    ", "cls", "=", "os", ".", "path", ".", "basename", "(", "f", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "if", "cls", "not", "in", "g_classes", ":", "# note: in some room there is 'staris' class..", "\n", "      ", "cls", "=", "'clutter'", "\n", "", "points", "=", "np", ".", "loadtxt", "(", "f", ")", "# Nx6", "\n", "label", "=", "g_class2label", "[", "cls", "]", "# N,", "\n", "# Compute tightest axis aligned bounding box", "\n", "xyz_min", "=", "np", ".", "amin", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "# 3,", "\n", "xyz_max", "=", "np", ".", "amax", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "# 3,", "\n", "xyz_center", "=", "(", "xyz_min", "+", "xyz_max", ")", "/", "2", "\n", "dimension", "=", "(", "xyz_max", "-", "xyz_min", ")", "/", "2", "\n", "\n", "xyz_offsets", "=", "xyz_center", "-", "points", "[", ":", ",", "0", ":", "3", "]", "# Nx3", "\n", "dimensions", "=", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "*", "dimension", "# Nx3", "\n", "labels", "=", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "*", "label", "# N", "\n", "point_bbox_list", ".", "append", "(", "np", ".", "concatenate", "(", "[", "points", ",", "labels", ",", "\n", "xyz_offsets", ",", "dimensions", "]", ",", "1", ")", ")", "# Nx13", "\n", "\n", "", "point_bbox", "=", "np", ".", "concatenate", "(", "point_bbox_list", ",", "0", ")", "# KxNx13", "\n", "room_xyz_min", "=", "np", ".", "amin", "(", "point_bbox", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "point_bbox", "[", ":", ",", "0", ":", "3", "]", "-=", "room_xyz_min", "\n", "\n", "if", "file_format", "==", "'txt'", ":", "\n", "    ", "fout", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "point_bbox", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "fout", ".", "write", "(", "'%f %f %f %d %d %d %d %f %f %f %f %f %f\\n'", "%", "(", "point_bbox", "[", "i", ",", "0", "]", ",", "point_bbox", "[", "i", ",", "1", "]", ",", "point_bbox", "[", "i", ",", "2", "]", ",", "\n", "point_bbox", "[", "i", ",", "3", "]", ",", "point_bbox", "[", "i", ",", "4", "]", ",", "point_bbox", "[", "i", ",", "5", "]", ",", "\n", "point_bbox", "[", "i", ",", "6", "]", ",", "\n", "point_bbox", "[", "i", ",", "7", "]", ",", "point_bbox", "[", "i", ",", "8", "]", ",", "point_bbox", "[", "i", ",", "9", "]", ",", "\n", "point_bbox", "[", "i", ",", "10", "]", ",", "point_bbox", "[", "i", ",", "11", "]", ",", "point_bbox", "[", "i", ",", "12", "]", ")", ")", "\n", "\n", "", "fout", ".", "close", "(", ")", "\n", "", "elif", "file_format", "==", "'numpy'", ":", "\n", "    ", "np", ".", "save", "(", "out_filename", ",", "point_bbox", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "'ERROR!! Unknown file format: %s, please use txt or numpy.'", "%", "(", "file_format", ")", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.model.placeholder_inputs": [[13, 19], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["import", "copy", "\n", "import", "math", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.model.get_model": [[20, 108], ["tensorflow.expand_dims", "tf_util.pairwise_distance", "tf_util.knn", "tf_util.get_edge_feature", "tf_util.conv2d", "tf_util.conv2d", "tensorflow.reduce_max", "tf_util.pairwise_distance", "tf_util.knn", "tf_util.get_edge_feature", "tf_util.conv2d", "tf_util.conv2d", "tensorflow.reduce_max", "tf_util.pairwise_distance", "tf_util.knn", "tf_util.get_edge_feature", "tf_util.conv2d", "tensorflow.reduce_max", "tf_util.conv2d", "tf_util.max_pool2d", "tensorflow.tile", "tensorflow.concat", "tf_util.conv2d", "tf_util.conv2d", "tf_util.dropout", "tf_util.conv2d", "tensorflow.squeeze", "tensorflow.concat", "point_cloud.get_shape", "point_cloud.get_shape"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.max_pool2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.dropout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d"], ["\n", "def", "knn", "(", "x", ",", "k", ")", ":", "\n", "    ", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ",", "x", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "-", "xx", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# (batch_size, num_points, k)", "\n", "return", "idx", "\n", "\n", "\n", "", "def", "get_graph_feature", "(", "x", ",", "k", "=", "20", ",", "idx", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "num_points", "=", "x", ".", "size", "(", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "if", "idx", "is", "None", ":", "\n", "        ", "idx", "=", "knn", "(", "x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "\n", "idx", "=", "idx", "+", "idx_base", "\n", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "\n", "_", ",", "num_dims", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, num_dims)  -> (batch_size*num_points, num_dims) #   batch_size * num_points * k + range(0, batch_size*num_points)", "\n", "feature", "=", "x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "num_dims", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "num_dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "\n", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "feature", "-", "x", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "feature", "\n", "\n", "\n", "", "class", "PointNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "output_channels", "=", "40", ")", ":", "\n", "        ", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "128", ",", "args", ".", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "args", ".", "emb_dims", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "args", ".", "emb_dims", ",", "512", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "dp1", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "output_channels", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "adaptive_max_pool1d", "(", "x", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn6", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dp1", "(", "x", ")", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "DGCNN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "output_channels", "=", "40", ")", ":", "\n", "        ", "super", "(", "DGCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "k", "=", "args", ".", "k", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "args", ".", "emb_dims", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "6", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn1", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", "*", "2", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn2", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", "*", "2", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn3", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.model.get_loss": [[109, 113], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean"], "function", ["None"], ["self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", "*", "2", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn4", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "512", ",", "args", ".", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "bn5", ",", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.models.transform_nets.input_transform_net": [[10, 57], ["tf_util.conv2d", "tf_util.conv2d", "tensorflow.reduce_max", "tf_util.conv2d", "tf_util.max_pool2d", "tensorflow.reshape", "tf_util.fully_connected", "tf_util.fully_connected", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.constant", "tensorflow.matmul", "tensorflow.nn.bias_add", "edge_feature.get_shape", "edge_feature.get_shape", "tensorflow.device", "tensorflow.get_variable", "tensorflow.get_variable", "numpy.eye().flatten", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.max_pool2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.fully_connected"], ["def", "input_transform_net", "(", "edge_feature", ",", "is_training", ",", "bn_decay", "=", "None", ",", "K", "=", "3", ",", "is_dist", "=", "False", ")", ":", "\n", "  ", "\"\"\" Input (XYZ) Transform Net, input is BxNx3 gray image\n    Return:\n      Transformation matrix of size 3xK \"\"\"", "\n", "batch_size", "=", "edge_feature", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_point", "=", "edge_feature", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "\n", "# input_image = tf.expand_dims(point_cloud, -1)", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "edge_feature", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv1'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "is_dist", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "128", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv2'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "is_dist", ")", "\n", "\n", "net", "=", "tf", ".", "reduce_max", "(", "net", ",", "axis", "=", "-", "2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv3'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "is_dist", ")", "\n", "net", "=", "tf_util", ".", "max_pool2d", "(", "net", ",", "[", "num_point", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'tmaxpool'", ")", "\n", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "512", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tfc1'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "is_dist", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "256", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tfc2'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "is_dist", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'transform_XYZ'", ")", "as", "sc", ":", "\n", "# assert(K==3)", "\n", "    ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "      ", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "[", "256", ",", "K", "*", "K", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "K", "*", "K", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "biases", "+=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "K", ")", ".", "flatten", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "transform", "=", "tf", ".", "matmul", "(", "net", ",", "weights", ")", "\n", "transform", "=", "tf", ".", "nn", ".", "bias_add", "(", "transform", ",", "biases", ")", "\n", "\n", "", "transform", "=", "tf", ".", "reshape", "(", "transform", ",", "[", "batch_size", ",", "K", ",", "K", "]", ")", "\n", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_model": [[14, 121], ["tensorflow.expand_dims", "tf_util.pairwise_distance", "tf_util.knn", "tf_util.get_edge_feature", "tensorflow.matmul", "tensorflow.expand_dims", "tf_util.pairwise_distance", "tf_util.knn", "tf_util.get_edge_feature", "tf_util.conv2d", "tf_util.conv2d", "tensorflow.reduce_max", "tf_util.pairwise_distance", "tf_util.knn", "tf_util.get_edge_feature", "tf_util.conv2d", "tf_util.conv2d", "tensorflow.reduce_max", "tf_util.pairwise_distance", "tf_util.knn", "tf_util.get_edge_feature", "tf_util.conv2d", "tensorflow.reduce_max", "tf_util.conv2d", "tf_util.max_pool2d", "tensorflow.reshape", "tf_util.conv2d", "tensorflow.concat", "tensorflow.tile", "tensorflow.concat", "tf_util.conv2d", "tf_util.dropout", "tf_util.conv2d", "tf_util.dropout", "tf_util.conv2d", "tf_util.conv2d", "tensorflow.reshape", "tensorflow.variable_scope", "transform_nets.input_transform_net", "tensorflow.concat", "point_cloud.get_shape", "point_cloud.get_shape"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.pairwise_distance", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.knn", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.get_edge_feature", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.max_pool2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.dropout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.dropout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.models.transform_nets.input_transform_net"], ["def", "get_model", "(", "point_cloud", ",", "input_label", ",", "is_training", ",", "cat_num", ",", "part_num", ",", "batch_size", ",", "num_point", ",", "weight_decay", ",", "bn_decay", "=", "None", ")", ":", "\n", "\n", "  ", "batch_size", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_point", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "input_image", "=", "tf", ".", "expand_dims", "(", "point_cloud", ",", "-", "1", ")", "\n", "\n", "k", "=", "20", "\n", "\n", "adj", "=", "tf_util", ".", "pairwise_distance", "(", "point_cloud", ")", "\n", "nn_idx", "=", "tf_util", ".", "knn", "(", "adj", ",", "k", "=", "k", ")", "\n", "edge_feature", "=", "tf_util", ".", "get_edge_feature", "(", "input_image", ",", "nn_idx", "=", "nn_idx", ",", "k", "=", "k", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'transform_net1'", ")", "as", "sc", ":", "\n", "    ", "transform", "=", "input_transform_net", "(", "edge_feature", ",", "is_training", ",", "bn_decay", ",", "K", "=", "3", ",", "is_dist", "=", "True", ")", "\n", "", "point_cloud_transformed", "=", "tf", ".", "matmul", "(", "point_cloud", ",", "transform", ")", "\n", "\n", "input_image", "=", "tf", ".", "expand_dims", "(", "point_cloud_transformed", ",", "-", "1", ")", "\n", "adj", "=", "tf_util", ".", "pairwise_distance", "(", "point_cloud_transformed", ")", "\n", "nn_idx", "=", "tf_util", ".", "knn", "(", "adj", ",", "k", "=", "k", ")", "\n", "edge_feature", "=", "tf_util", ".", "get_edge_feature", "(", "input_image", ",", "nn_idx", "=", "nn_idx", ",", "k", "=", "k", ")", "\n", "\n", "out1", "=", "tf_util", ".", "conv2d", "(", "edge_feature", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "\n", "scope", "=", "'adj_conv1'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "True", ")", "\n", "\n", "out2", "=", "tf_util", ".", "conv2d", "(", "out1", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "\n", "scope", "=", "'adj_conv2'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "True", ")", "\n", "\n", "net_1", "=", "tf", ".", "reduce_max", "(", "out2", ",", "axis", "=", "-", "2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "\n", "\n", "adj", "=", "tf_util", ".", "pairwise_distance", "(", "net_1", ")", "\n", "nn_idx", "=", "tf_util", ".", "knn", "(", "adj", ",", "k", "=", "k", ")", "\n", "edge_feature", "=", "tf_util", ".", "get_edge_feature", "(", "net_1", ",", "nn_idx", "=", "nn_idx", ",", "k", "=", "k", ")", "\n", "\n", "out3", "=", "tf_util", ".", "conv2d", "(", "edge_feature", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "\n", "scope", "=", "'adj_conv3'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "True", ")", "\n", "\n", "out4", "=", "tf_util", ".", "conv2d", "(", "out3", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "\n", "scope", "=", "'adj_conv4'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "True", ")", "\n", "\n", "net_2", "=", "tf", ".", "reduce_max", "(", "out4", ",", "axis", "=", "-", "2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "\n", "\n", "adj", "=", "tf_util", ".", "pairwise_distance", "(", "net_2", ")", "\n", "nn_idx", "=", "tf_util", ".", "knn", "(", "adj", ",", "k", "=", "k", ")", "\n", "edge_feature", "=", "tf_util", ".", "get_edge_feature", "(", "net_2", ",", "nn_idx", "=", "nn_idx", ",", "k", "=", "k", ")", "\n", "\n", "out5", "=", "tf_util", ".", "conv2d", "(", "edge_feature", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "\n", "scope", "=", "'adj_conv5'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "True", ")", "\n", "\n", "# out6 = tf_util.conv2d(out5, 64, [1,1],", "\n", "#                      padding='VALID', stride=[1,1],", "\n", "#                      bn=True, is_training=is_training, weight_decay=weight_decay,", "\n", "#                      scope='adj_conv6', bn_decay=bn_decay, is_dist=True)", "\n", "\n", "net_3", "=", "tf", ".", "reduce_max", "(", "out5", ",", "axis", "=", "-", "2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "\n", "\n", "out7", "=", "tf_util", ".", "conv2d", "(", "tf", ".", "concat", "(", "[", "net_1", ",", "net_2", ",", "net_3", "]", ",", "axis", "=", "-", "1", ")", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'adj_conv7'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "True", ")", "\n", "\n", "out_max", "=", "tf_util", ".", "max_pool2d", "(", "out7", ",", "[", "num_point", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'maxpool'", ")", "\n", "\n", "\n", "one_hot_label_expand", "=", "tf", ".", "reshape", "(", "input_label", ",", "[", "batch_size", ",", "1", ",", "1", ",", "cat_num", "]", ")", "\n", "one_hot_label_expand", "=", "tf_util", ".", "conv2d", "(", "one_hot_label_expand", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'one_hot_label_expand'", ",", "bn_decay", "=", "bn_decay", ",", "is_dist", "=", "True", ")", "\n", "out_max", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "out_max", ",", "one_hot_label_expand", "]", ")", "\n", "expand", "=", "tf", ".", "tile", "(", "out_max", ",", "[", "1", ",", "num_point", ",", "1", ",", "1", "]", ")", "\n", "\n", "concat", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "expand", ",", "\n", "net_1", ",", "\n", "net_2", ",", "\n", "net_3", "]", ")", "\n", "\n", "net2", "=", "tf_util", ".", "conv2d", "(", "concat", ",", "256", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "bn_decay", "=", "bn_decay", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'seg/conv1'", ",", "weight_decay", "=", "weight_decay", ",", "is_dist", "=", "True", ")", "\n", "net2", "=", "tf_util", ".", "dropout", "(", "net2", ",", "keep_prob", "=", "0.6", ",", "is_training", "=", "is_training", ",", "scope", "=", "'seg/dp1'", ")", "\n", "net2", "=", "tf_util", ".", "conv2d", "(", "net2", ",", "256", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "bn_decay", "=", "bn_decay", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'seg/conv2'", ",", "weight_decay", "=", "weight_decay", ",", "is_dist", "=", "True", ")", "\n", "net2", "=", "tf_util", ".", "dropout", "(", "net2", ",", "keep_prob", "=", "0.6", ",", "is_training", "=", "is_training", ",", "scope", "=", "'seg/dp2'", ")", "\n", "net2", "=", "tf_util", ".", "conv2d", "(", "net2", ",", "128", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "bn_decay", "=", "bn_decay", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'seg/conv3'", ",", "weight_decay", "=", "weight_decay", ",", "is_dist", "=", "True", ")", "\n", "net2", "=", "tf_util", ".", "conv2d", "(", "net2", ",", "part_num", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "activation_fn", "=", "None", ",", "\n", "bn", "=", "False", ",", "scope", "=", "'seg/conv4'", ",", "weight_decay", "=", "weight_decay", ",", "is_dist", "=", "True", ")", "\n", "\n", "net2", "=", "tf", ".", "reshape", "(", "net2", ",", "[", "batch_size", ",", "num_point", ",", "part_num", "]", ")", "\n", "\n", "return", "net2", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_loss": [[123, 129], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits"], "function", ["None"], ["", "def", "get_loss", "(", "seg_pred", ",", "seg", ")", ":", "\n", "  ", "per_instance_seg_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "seg_pred", ",", "labels", "=", "seg", ")", ",", "axis", "=", "1", ")", "\n", "seg_loss", "=", "tf", ".", "reduce_mean", "(", "per_instance_seg_loss", ")", "\n", "per_instance_seg_pred_res", "=", "tf", ".", "argmax", "(", "seg_pred", ",", "2", ")", "\n", "\n", "return", "seg_loss", ",", "per_instance_seg_loss", ",", "per_instance_seg_pred_res", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.printout": [[56, 59], ["print", "flog.write"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["def", "printout", "(", "flog", ",", "data", ")", ":", "\n", "  ", "print", "(", "data", ")", "\n", "flog", ".", "write", "(", "data", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.output_color_point_cloud": [[94, 100], ["open", "len", "range", "f.write"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "output_color_point_cloud", "(", "data", ",", "seg", ",", "out_file", ")", ":", "\n", "  ", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "l", "=", "len", "(", "seg", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "      ", "color", "=", "color_map", "[", "seg", "[", "i", "]", "]", "\n", "f", ".", "write", "(", "'v %f %f %f %f %f %f\\n'", "%", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ",", "data", "[", "i", "]", "[", "2", "]", ",", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.output_color_point_cloud_red_blue": [[67, 79], ["open", "len", "range", "f.write"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "", "", "def", "output_color_point_cloud_red_blue", "(", "data", ",", "seg", ",", "out_file", ")", ":", "\n", "  ", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "l", "=", "len", "(", "seg", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "      ", "if", "seg", "[", "i", "]", "==", "1", ":", "\n", "        ", "color", "=", "[", "0", ",", "0", ",", "1", "]", "\n", "", "elif", "seg", "[", "i", "]", "==", "0", ":", "\n", "        ", "color", "=", "[", "1", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "color", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "", "f", ".", "write", "(", "'v %f %f %f %f %f %f\\n'", "%", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ",", "data", "[", "i", "]", "[", "2", "]", ",", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.pc_normalize": [[81, 88], ["numpy.mean", "numpy.max", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "", "", "def", "pc_normalize", "(", "pc", ")", ":", "\n", "  ", "l", "=", "pc", ".", "shape", "[", "0", "]", "\n", "centroid", "=", "np", ".", "mean", "(", "pc", ",", "axis", "=", "0", ")", "\n", "pc", "=", "pc", "-", "centroid", "\n", "m", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pc", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "pc", "=", "pc", "/", "m", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.placeholder_inputs": [[89, 93], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["", "def", "placeholder_inputs", "(", ")", ":", "\n", "  ", "pointclouds_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "point_num", ",", "3", ")", ")", "\n", "input_label_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "NUM_OBJ_CATS", ")", ")", "\n", "return", "pointclouds_ph", ",", "input_label_ph", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.load_pts_seg_files": [[101, 109], ["open", "numpy.array", "open", "numpy.array", "numpy.array", "item.rstrip", "f.readlines", "numpy.float32", "int", "s.split", "item.rstrip", "f.readlines", "str"], "function", ["None"], ["", "", "", "def", "load_pts_seg_files", "(", "pts_file", ",", "seg_file", ",", "catid", ")", ":", "\n", "  ", "with", "open", "(", "pts_file", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "pts_str", "=", "[", "item", ".", "rstrip", "(", ")", "for", "item", "in", "f", ".", "readlines", "(", ")", "]", "\n", "pts", "=", "np", ".", "array", "(", "[", "np", ".", "float32", "(", "s", ".", "split", "(", ")", ")", "for", "s", "in", "pts_str", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "with", "open", "(", "seg_file", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "part_ids", "=", "np", ".", "array", "(", "[", "int", "(", "item", ".", "rstrip", "(", ")", ")", "for", "item", "in", "f", ".", "readlines", "(", ")", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "seg", "=", "np", ".", "array", "(", "[", "cpid2oid", "[", "catid", "+", "'_'", "+", "str", "(", "x", ")", "]", "for", "x", "in", "part_ids", "]", ")", "\n", "", "return", "pts", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.pc_augment_to_point_num": [[110, 118], ["numpy.array", "numpy.concatenate"], "function", ["None"], ["", "def", "pc_augment_to_point_num", "(", "pts", ",", "pn", ")", ":", "\n", "  ", "assert", "(", "pts", ".", "shape", "[", "0", "]", "<=", "pn", ")", "\n", "cur_len", "=", "pts", ".", "shape", "[", "0", "]", "\n", "res", "=", "np", ".", "array", "(", "pts", ")", "\n", "while", "cur_len", "<", "pn", ":", "\n", "    ", "res", "=", "np", ".", "concatenate", "(", "(", "res", ",", "pts", ")", ")", "\n", "cur_len", "+=", "pts", ".", "shape", "[", "0", "]", "\n", "", "return", "res", "[", ":", "pn", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.convert_label_to_one_hot": [[119, 124], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "convert_label_to_one_hot", "(", "labels", ")", ":", "\n", "  ", "label_one_hot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "NUM_OBJ_CATS", ")", ")", "\n", "for", "idx", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "label_one_hot", "[", "idx", ",", "labels", "[", "idx", "]", "]", "=", "1", "\n", "", "return", "label_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.predict": [[125, 254], ["tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.device", "test.placeholder_inputs", "tensorflow.placeholder", "part_seg_model.get_model", "tensorflow.Session", "open", "test.printout", "tf.train.Saver.restore", "test.printout", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "open", "open.close", "len", "range", "test.printout", "test.printout", "range", "os.path.exists", "os.mkdir", "os.path.join", "line.rstrip", "numpy.zeros", "os.path.join", "os.path.join", "test.load_pts_seg_files", "len", "test.pc_augment_to_point_num", "sess.run", "list", "numpy.min", "numpy.mean", "numpy.int32", "test.printout", "str", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "open.readlines", "line.split", "line.split", "line.split", "test.printout", "test.pc_normalize", "set().difference", "numpy.argmax", "numpy.sum", "numpy.sum", "numpy.sum", "len", "test.output_color_point_cloud", "test.output_color_point_cloud", "test.output_color_point_cloud_red_blue", "test.printout", "test.printout", "set", "os.path.join", "os.path.join", "numpy.int32", "os.path.join", "open", "fout.write", "fout.write", "fout.write", "fout.write", "fout.write", "str", "set", "numpy.int32", "str", "os.path.join", "str", "str", "numpy.arange", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.placeholder_inputs", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.part_seg_model.get_model", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.load_pts_seg_files", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.pc_augment_to_point_num", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.pc_normalize", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.output_color_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.output_color_point_cloud", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.test.output_color_point_cloud_red_blue", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "predict", "(", ")", ":", "\n", "  ", "is_training", "=", "False", "\n", "\n", "with", "tf", ".", "device", "(", "'/gpu:'", "+", "str", "(", "gpu_to_use", ")", ")", ":", "\n", "    ", "pointclouds_ph", ",", "input_label_ph", "=", "placeholder_inputs", "(", ")", "\n", "is_training_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "seg_pred", "=", "model", ".", "get_model", "(", "pointclouds_ph", ",", "input_label_ph", ",", "cat_num", "=", "NUM_OBJ_CATS", ",", "part_num", "=", "NUM_PART_CATS", ",", "is_training", "=", "is_training_ph", ",", "batch_size", "=", "batch_size", ",", "num_point", "=", "point_num", ",", "weight_decay", "=", "0.0", ",", "bn_decay", "=", "None", ")", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "      ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "flog", "=", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "\n", "printout", "(", "flog", ",", "'Loading model %s'", "%", "pretrained_model_path", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "pretrained_model_path", ")", "\n", "printout", "(", "flog", ",", "'Model restored.'", ")", "\n", "\n", "batch_data", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "point_num", ",", "3", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "total_acc", "=", "0.0", "\n", "total_seen", "=", "0", "\n", "total_acc_iou", "=", "0.0", "\n", "\n", "total_per_cat_acc", "=", "np", ".", "zeros", "(", "(", "NUM_OBJ_CATS", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total_per_cat_iou", "=", "np", ".", "zeros", "(", "(", "NUM_OBJ_CATS", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total_per_cat_seen", "=", "np", ".", "zeros", "(", "(", "NUM_OBJ_CATS", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "ffiles", "=", "open", "(", "test_file_list", ",", "'r'", ")", "\n", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "ffiles", ".", "readlines", "(", ")", "]", "\n", "pts_files", "=", "[", "line", ".", "split", "(", ")", "[", "0", "]", "for", "line", "in", "lines", "]", "\n", "seg_files", "=", "[", "line", ".", "split", "(", ")", "[", "1", "]", "for", "line", "in", "lines", "]", "\n", "labels", "=", "[", "line", ".", "split", "(", ")", "[", "2", "]", "for", "line", "in", "lines", "]", "\n", "ffiles", ".", "close", "(", ")", "\n", "\n", "len_pts_files", "=", "len", "(", "pts_files", ")", "\n", "for", "shape_idx", "in", "range", "(", "len_pts_files", ")", ":", "\n", "      ", "if", "shape_idx", "%", "100", "==", "0", ":", "\n", "        ", "printout", "(", "flog", ",", "'%d/%d ...'", "%", "(", "shape_idx", ",", "len_pts_files", ")", ")", "\n", "\n", "", "cur_gt_label", "=", "on2oid", "[", "labels", "[", "shape_idx", "]", "]", "# 0/1/.../15", "\n", "\n", "cur_label_one_hot", "=", "np", ".", "zeros", "(", "(", "1", ",", "NUM_OBJ_CATS", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cur_label_one_hot", "[", "0", ",", "cur_gt_label", "]", "=", "1", "\n", "\n", "pts_file_to_load", "=", "os", ".", "path", ".", "join", "(", "ply_data_dir", ",", "pts_files", "[", "shape_idx", "]", ")", "\n", "seg_file_to_load", "=", "os", ".", "path", ".", "join", "(", "ply_data_dir", ",", "seg_files", "[", "shape_idx", "]", ")", "\n", "\n", "pts", ",", "seg", "=", "load_pts_seg_files", "(", "pts_file_to_load", ",", "seg_file_to_load", ",", "objcats", "[", "cur_gt_label", "]", ")", "\n", "ori_point_num", "=", "len", "(", "seg", ")", "\n", "\n", "batch_data", "[", "0", ",", "...", "]", "=", "pc_augment_to_point_num", "(", "pc_normalize", "(", "pts", ")", ",", "point_num", ")", "\n", "\n", "seg_pred_res", "=", "sess", ".", "run", "(", "seg_pred", ",", "feed_dict", "=", "{", "\n", "pointclouds_ph", ":", "batch_data", ",", "\n", "input_label_ph", ":", "cur_label_one_hot", ",", "\n", "is_training_ph", ":", "is_training", "}", ")", "\n", "\n", "seg_pred_res", "=", "seg_pred_res", "[", "0", ",", "...", "]", "\n", "\n", "iou_oids", "=", "object2setofoid", "[", "objcats", "[", "cur_gt_label", "]", "]", "\n", "non_cat_labels", "=", "list", "(", "set", "(", "np", ".", "arange", "(", "NUM_PART_CATS", ")", ")", ".", "difference", "(", "set", "(", "iou_oids", ")", ")", ")", "\n", "\n", "mini", "=", "np", ".", "min", "(", "seg_pred_res", ")", "\n", "seg_pred_res", "[", ":", ",", "non_cat_labels", "]", "=", "mini", "-", "1000", "\n", "\n", "seg_pred_val", "=", "np", ".", "argmax", "(", "seg_pred_res", ",", "axis", "=", "1", ")", "[", ":", "ori_point_num", "]", "\n", "\n", "seg_acc", "=", "np", ".", "mean", "(", "seg_pred_val", "==", "seg", ")", "\n", "\n", "total_acc", "+=", "seg_acc", "\n", "total_seen", "+=", "1", "\n", "\n", "total_per_cat_seen", "[", "cur_gt_label", "]", "+=", "1", "\n", "total_per_cat_acc", "[", "cur_gt_label", "]", "+=", "seg_acc", "\n", "\n", "mask", "=", "np", ".", "int32", "(", "seg_pred_val", "==", "seg", ")", "\n", "\n", "total_iou", "=", "0.0", "\n", "iou_log", "=", "''", "\n", "for", "oid", "in", "iou_oids", ":", "\n", "        ", "n_pred", "=", "np", ".", "sum", "(", "seg_pred_val", "==", "oid", ")", "\n", "n_gt", "=", "np", ".", "sum", "(", "seg", "==", "oid", ")", "\n", "n_intersect", "=", "np", ".", "sum", "(", "np", ".", "int32", "(", "seg", "==", "oid", ")", "*", "mask", ")", "\n", "n_union", "=", "n_pred", "+", "n_gt", "-", "n_intersect", "\n", "iou_log", "+=", "'_'", "+", "str", "(", "n_pred", ")", "+", "'_'", "+", "str", "(", "n_gt", ")", "+", "'_'", "+", "str", "(", "n_intersect", ")", "+", "'_'", "+", "str", "(", "n_union", ")", "+", "'_'", "\n", "if", "n_union", "==", "0", ":", "\n", "          ", "total_iou", "+=", "1", "\n", "iou_log", "+=", "'_1\\n'", "\n", "", "else", ":", "\n", "          ", "total_iou", "+=", "n_intersect", "*", "1.0", "/", "n_union", "\n", "iou_log", "+=", "'_'", "+", "str", "(", "n_intersect", "*", "1.0", "/", "n_union", ")", "+", "'\\n'", "\n", "\n", "", "", "avg_iou", "=", "total_iou", "/", "len", "(", "iou_oids", ")", "\n", "total_acc_iou", "+=", "avg_iou", "\n", "total_per_cat_iou", "[", "cur_gt_label", "]", "+=", "avg_iou", "\n", "\n", "if", "output_verbose", ":", "\n", "        ", "output_color_point_cloud", "(", "pts", ",", "seg", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "shape_idx", ")", "+", "'_gt.obj'", ")", ")", "\n", "output_color_point_cloud", "(", "pts", ",", "seg_pred_val", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "shape_idx", ")", "+", "'_pred.obj'", ")", ")", "\n", "output_color_point_cloud_red_blue", "(", "pts", ",", "np", ".", "int32", "(", "seg", "==", "seg_pred_val", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "shape_idx", ")", "+", "'_diff.obj'", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "shape_idx", ")", "+", "'.log'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "          ", "fout", ".", "write", "(", "'Total Point: %d\\n\\n'", "%", "ori_point_num", ")", "\n", "fout", ".", "write", "(", "'Ground Truth: %s\\n'", "%", "objnames", "[", "cur_gt_label", "]", ")", "\n", "fout", ".", "write", "(", "'Accuracy: %f\\n'", "%", "seg_acc", ")", "\n", "fout", ".", "write", "(", "'IoU: %f\\n\\n'", "%", "avg_iou", ")", "\n", "fout", ".", "write", "(", "'IoU details: %s\\n'", "%", "iou_log", ")", "\n", "\n", "", "", "", "printout", "(", "flog", ",", "'Accuracy: %f'", "%", "(", "total_acc", "/", "total_seen", ")", ")", "\n", "printout", "(", "flog", ",", "'IoU: %f'", "%", "(", "total_acc_iou", "/", "total_seen", ")", ")", "\n", "\n", "for", "cat_idx", "in", "range", "(", "NUM_OBJ_CATS", ")", ":", "\n", "      ", "printout", "(", "flog", ",", "'\\t '", "+", "objcats", "[", "cat_idx", "]", "+", "' Total Number: '", "+", "str", "(", "total_per_cat_seen", "[", "cat_idx", "]", ")", ")", "\n", "if", "total_per_cat_seen", "[", "cat_idx", "]", ">", "0", ":", "\n", "        ", "printout", "(", "flog", ",", "'\\t '", "+", "objcats", "[", "cat_idx", "]", "+", "' Accuracy: '", "+", "str", "(", "total_per_cat_acc", "[", "cat_idx", "]", "/", "total_per_cat_seen", "[", "cat_idx", "]", ")", ")", "\n", "printout", "(", "flog", ",", "'\\t '", "+", "objcats", "[", "cat_idx", "]", "+", "' IoU: '", "+", "str", "(", "total_per_cat_iou", "[", "cat_idx", "]", "/", "total_per_cat_seen", "[", "cat_idx", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout": [[84, 87], ["print", "flog.write"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write"], ["", "def", "printout", "(", "flog", ",", "data", ")", ":", "\n", "  ", "print", "(", "data", ")", "\n", "flog", ".", "write", "(", "data", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.convert_label_to_one_hot": [[88, 93], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "convert_label_to_one_hot", "(", "labels", ")", ":", "\n", "  ", "label_one_hot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "NUM_CATEGORIES", ")", ")", "\n", "for", "idx", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "label_one_hot", "[", "idx", ",", "labels", "[", "idx", "]", "]", "=", "1", "\n", "", "return", "label_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.average_gradients": [[94, 129], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["None"], ["", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "  ", "\"\"\"Calculate average gradient for each shared variable across all towers.\n\n  Note that this function provides a synchronization point across all towers.\n\n  Args:\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\n    is over individual gradients. The inner list is over the gradient\n    calculation for each tower.\n  Returns:\n     List of pairs of (gradient, variable) where the gradient has been \n     averaged across all towers.\n  \"\"\"", "\n", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "    ", "grads", "=", "[", "]", "\n", "for", "g", ",", "_", "in", "grad_and_vars", ":", "\n", "      ", "if", "g", "is", "None", ":", "\n", "        ", "continue", "\n", "", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n", "# Average over the 'tower' dimension.", "\n", "", "grad", "=", "tf", ".", "concat", "(", "grads", ",", "0", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.train": [[131, 388], ["tensorflow.Graph().as_default", "tensorflow.device", "tensorflow.Variable", "tensorflow.train.exponential_decay", "tensorflow.maximum", "tensorflow.train.exponential_decay", "tensorflow.minimum", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.train.AdamOptimizer", "train_multi_gpu.average_gradients", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.group", "tf.Session.run", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "provider.getDataFiles", "len", "provider.getDataFiles", "len", "open", "open.write", "open.close", "open", "range", "open.close", "tensorflow.variable_scope", "xrange", "tensorflow.global_variables", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "os.path.join", "str", "os.path.join", "range", "numpy.zeros().astype", "numpy.zeros().astype", "range", "tf.Session.run", "tf.summary.FileWriter.add_summary", "tf.summary.FileWriter.add_summary", "train_multi_gpu.printout", "train_multi_gpu.printout", "range", "os.path.exists", "os.mkdir", "train_multi_gpu.printout", "train_multi_gpu.train.eval_one_epoch"], "function", ["home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.average_gradients", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.getDataFiles", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.tensorflow.provider.getDataFiles", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.pytorch.util.IOStream.close", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.part_seg.train_multi_gpu.printout", "home.repos.pwc.inspect_result.WangYueFt_dgcnn.sem_seg.batch_inference.eval_one_epoch"], ["", "def", "train", "(", ")", ":", "\n", "  ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "\n", "    ", "batch", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ")", "\n", "\n", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BASE_LEARNING_RATE", ",", "# base learning rate", "\n", "batch", "*", "batch_size", ",", "# global_var indicating the number of steps", "\n", "DECAY_STEP", ",", "# step size", "\n", "DECAY_RATE", ",", "# decay rate", "\n", "staircase", "=", "True", "# Stair-case or continuous decreasing", "\n", ")", "\n", "learning_rate", "=", "tf", ".", "maximum", "(", "learning_rate", ",", "LEARNING_RATE_CLIP", ")", "\n", "\n", "bn_momentum", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BN_INIT_DECAY", ",", "\n", "batch", "*", "batch_size", ",", "\n", "BN_DECAY_DECAY_STEP", ",", "\n", "BN_DECAY_DECAY_RATE", ",", "\n", "staircase", "=", "True", ")", "\n", "bn_decay", "=", "tf", ".", "minimum", "(", "BN_DECAY_CLIP", ",", "1", "-", "bn_momentum", ")", "\n", "\n", "lr_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "batch_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'batch_number'", ",", "batch", ")", "\n", "bn_decay_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'bn_decay'", ",", "bn_decay", ")", "\n", "\n", "trainer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "\n", "# store tensors for different gpus", "\n", "tower_grads", "=", "[", "]", "\n", "pointclouds_phs", "=", "[", "]", "\n", "input_label_phs", "=", "[", "]", "\n", "seg_phs", "=", "[", "]", "\n", "is_training_phs", "=", "[", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ")", ":", "\n", "      ", "for", "i", "in", "xrange", "(", "FLAGS", ".", "num_gpu", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "i", ")", ":", "\n", "          ", "with", "tf", ".", "name_scope", "(", "'%s_%d'", "%", "(", "TOWER_NAME", ",", "i", ")", ")", "as", "scope", ":", "\n", "            ", "pointclouds_phs", ".", "append", "(", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "point_num", ",", "3", ")", ")", ")", "# for points", "\n", "input_label_phs", ".", "append", "(", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "NUM_CATEGORIES", ")", ")", ")", "# for one-hot category label", "\n", "seg_phs", ".", "append", "(", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ",", "point_num", ")", ")", ")", "# for part labels", "\n", "is_training_phs", ".", "append", "(", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", ")", "\n", "\n", "seg_pred", "=", "model", ".", "get_model", "(", "pointclouds_phs", "[", "-", "1", "]", ",", "input_label_phs", "[", "-", "1", "]", ",", "is_training", "=", "is_training_phs", "[", "-", "1", "]", ",", "bn_decay", "=", "bn_decay", ",", "cat_num", "=", "NUM_CATEGORIES", ",", "part_num", "=", "NUM_PART_CATS", ",", "batch_size", "=", "batch_size", ",", "num_point", "=", "point_num", ",", "weight_decay", "=", "FLAGS", ".", "wd", ")", "\n", "\n", "\n", "loss", ",", "per_instance_seg_loss", ",", "per_instance_seg_pred_res", "=", "model", ".", "get_loss", "(", "seg_pred", ",", "seg_phs", "[", "-", "1", "]", ")", "\n", "\n", "total_training_loss_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ")", "\n", "total_testing_loss_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ")", "\n", "\n", "seg_training_acc_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ")", "\n", "seg_testing_acc_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ")", "\n", "seg_testing_acc_avg_cat_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ")", "\n", "\n", "total_train_loss_sum_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'total_training_loss'", ",", "total_training_loss_ph", ")", "\n", "total_test_loss_sum_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'total_testing_loss'", ",", "total_testing_loss_ph", ")", "\n", "\n", "\n", "seg_train_acc_sum_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'seg_training_acc'", ",", "seg_training_acc_ph", ")", "\n", "seg_test_acc_sum_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'seg_testing_acc'", ",", "seg_testing_acc_ph", ")", "\n", "seg_test_acc_avg_cat_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'seg_testing_acc_avg_cat'", ",", "seg_testing_acc_avg_cat_ph", ")", "\n", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n", "grads", "=", "trainer", ".", "compute_gradients", "(", "loss", ")", "\n", "\n", "tower_grads", ".", "append", "(", "grads", ")", "\n", "\n", "", "", "", "", "grads", "=", "average_gradients", "(", "tower_grads", ")", "\n", "\n", "train_op", "=", "trainer", ".", "apply_gradients", "(", "grads", ",", "global_step", "=", "batch", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "sharded", "=", "True", ",", "max_to_keep", "=", "20", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "init", "=", "tf", ".", "group", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "\n", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "SUMMARIES_FOLDER", "+", "'/train'", ",", "sess", ".", "graph", ")", "\n", "test_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "SUMMARIES_FOLDER", "+", "'/test'", ")", "\n", "\n", "train_file_list", "=", "provider", ".", "getDataFiles", "(", "TRAINING_FILE_LIST", ")", "\n", "num_train_file", "=", "len", "(", "train_file_list", ")", "\n", "test_file_list", "=", "provider", ".", "getDataFiles", "(", "TESTING_FILE_LIST", ")", "\n", "num_test_file", "=", "len", "(", "test_file_list", ")", "\n", "\n", "fcmd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "LOG_STORAGE_PATH", ",", "'cmd.txt'", ")", ",", "'w'", ")", "\n", "fcmd", ".", "write", "(", "str", "(", "FLAGS", ")", ")", "\n", "fcmd", ".", "close", "(", ")", "\n", "\n", "# write logs to the disk", "\n", "flog", "=", "open", "(", "os", ".", "path", ".", "join", "(", "LOG_STORAGE_PATH", ",", "'log.txt'", ")", ",", "'w'", ")", "\n", "\n", "def", "train_one_epoch", "(", "train_file_idx", ",", "epoch_num", ")", ":", "\n", "      ", "is_training", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "num_train_file", ")", ":", "\n", "        ", "cur_train_filename", "=", "os", ".", "path", ".", "join", "(", "hdf5_data_dir", ",", "train_file_list", "[", "train_file_idx", "[", "i", "]", "]", ")", "\n", "printout", "(", "flog", ",", "'Loading train file '", "+", "cur_train_filename", ")", "\n", "\n", "cur_data", ",", "cur_labels", ",", "cur_seg", "=", "provider", ".", "load_h5_data_label_seg", "(", "cur_train_filename", ")", "\n", "cur_data", ",", "cur_labels", ",", "order", "=", "provider", ".", "shuffle_data", "(", "cur_data", ",", "np", ".", "squeeze", "(", "cur_labels", ")", ")", "\n", "cur_seg", "=", "cur_seg", "[", "order", ",", "...", "]", "\n", "\n", "cur_labels_one_hot", "=", "convert_label_to_one_hot", "(", "cur_labels", ")", "\n", "\n", "num_data", "=", "len", "(", "cur_labels", ")", "\n", "num_batch", "=", "num_data", "//", "(", "FLAGS", ".", "num_gpu", "*", "batch_size", ")", "# For all working gpus", "\n", "\n", "total_loss", "=", "0.0", "\n", "total_seg_acc", "=", "0.0", "\n", "\n", "for", "j", "in", "range", "(", "num_batch", ")", ":", "\n", "          ", "begidx_0", "=", "j", "*", "batch_size", "\n", "endidx_0", "=", "(", "j", "+", "1", ")", "*", "batch_size", "\n", "begidx_1", "=", "(", "j", "+", "1", ")", "*", "batch_size", "\n", "endidx_1", "=", "(", "j", "+", "2", ")", "*", "batch_size", "\n", "\n", "feed_dict", "=", "{", "\n", "# For the first gpu", "\n", "pointclouds_phs", "[", "0", "]", ":", "cur_data", "[", "begidx_0", ":", "endidx_0", ",", "...", "]", ",", "\n", "input_label_phs", "[", "0", "]", ":", "cur_labels_one_hot", "[", "begidx_0", ":", "endidx_0", ",", "...", "]", ",", "\n", "seg_phs", "[", "0", "]", ":", "cur_seg", "[", "begidx_0", ":", "endidx_0", ",", "...", "]", ",", "\n", "is_training_phs", "[", "0", "]", ":", "is_training", ",", "\n", "# For the second gpu", "\n", "pointclouds_phs", "[", "1", "]", ":", "cur_data", "[", "begidx_1", ":", "endidx_1", ",", "...", "]", ",", "\n", "input_label_phs", "[", "1", "]", ":", "cur_labels_one_hot", "[", "begidx_1", ":", "endidx_1", ",", "...", "]", ",", "\n", "seg_phs", "[", "1", "]", ":", "cur_seg", "[", "begidx_1", ":", "endidx_1", ",", "...", "]", ",", "\n", "is_training_phs", "[", "1", "]", ":", "is_training", ",", "\n", "}", "\n", "\n", "\n", "# train_op is for both gpus, and the others are for gpu_1", "\n", "_", ",", "loss_val", ",", "per_instance_seg_loss_val", ",", "seg_pred_val", ",", "pred_seg_res", "=", "sess", ".", "run", "(", "[", "train_op", ",", "loss", ",", "per_instance_seg_loss", ",", "seg_pred", ",", "per_instance_seg_pred_res", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "per_instance_part_acc", "=", "np", ".", "mean", "(", "pred_seg_res", "==", "cur_seg", "[", "begidx_1", ":", "endidx_1", ",", "...", "]", ",", "axis", "=", "1", ")", "\n", "average_part_acc", "=", "np", ".", "mean", "(", "per_instance_part_acc", ")", "\n", "\n", "total_loss", "+=", "loss_val", "\n", "total_seg_acc", "+=", "average_part_acc", "\n", "\n", "", "total_loss", "=", "total_loss", "*", "1.0", "/", "num_batch", "\n", "total_seg_acc", "=", "total_seg_acc", "*", "1.0", "/", "num_batch", "\n", "\n", "lr_sum", ",", "bn_decay_sum", ",", "batch_sum", ",", "train_loss_sum", ",", "train_seg_acc_sum", "=", "sess", ".", "run", "(", "[", "lr_op", ",", "bn_decay_op", ",", "batch_op", ",", "total_train_loss_sum_op", ",", "seg_train_acc_sum_op", "]", ",", "feed_dict", "=", "{", "total_training_loss_ph", ":", "total_loss", ",", "seg_training_acc_ph", ":", "total_seg_acc", "}", ")", "\n", "\n", "train_writer", ".", "add_summary", "(", "train_loss_sum", ",", "i", "+", "epoch_num", "*", "num_train_file", ")", "\n", "train_writer", ".", "add_summary", "(", "lr_sum", ",", "i", "+", "epoch_num", "*", "num_train_file", ")", "\n", "train_writer", ".", "add_summary", "(", "bn_decay_sum", ",", "i", "+", "epoch_num", "*", "num_train_file", ")", "\n", "train_writer", ".", "add_summary", "(", "train_seg_acc_sum", ",", "i", "+", "epoch_num", "*", "num_train_file", ")", "\n", "train_writer", ".", "add_summary", "(", "batch_sum", ",", "i", "+", "epoch_num", "*", "num_train_file", ")", "\n", "\n", "printout", "(", "flog", ",", "'\\tTraining Total Mean_loss: %f'", "%", "total_loss", ")", "\n", "printout", "(", "flog", ",", "'\\t\\tTraining Seg Accuracy: %f'", "%", "total_seg_acc", ")", "\n", "\n", "", "", "def", "eval_one_epoch", "(", "epoch_num", ")", ":", "\n", "      ", "is_training", "=", "False", "\n", "\n", "total_loss", "=", "0.0", "\n", "total_seg_acc", "=", "0.0", "\n", "total_seen", "=", "0", "\n", "\n", "total_seg_acc_per_cat", "=", "np", ".", "zeros", "(", "(", "NUM_CATEGORIES", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total_seen_per_cat", "=", "np", ".", "zeros", "(", "(", "NUM_CATEGORIES", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_test_file", ")", ":", "\n", "        ", "cur_test_filename", "=", "os", ".", "path", ".", "join", "(", "hdf5_data_dir", ",", "test_file_list", "[", "i", "]", ")", "\n", "printout", "(", "flog", ",", "'Loading test file '", "+", "cur_test_filename", ")", "\n", "\n", "cur_data", ",", "cur_labels", ",", "cur_seg", "=", "provider", ".", "load_h5_data_label_seg", "(", "cur_test_filename", ")", "\n", "cur_labels", "=", "np", ".", "squeeze", "(", "cur_labels", ")", "\n", "\n", "cur_labels_one_hot", "=", "convert_label_to_one_hot", "(", "cur_labels", ")", "\n", "\n", "num_data", "=", "len", "(", "cur_labels", ")", "\n", "num_batch", "=", "num_data", "//", "batch_size", "\n", "\n", "# Run on gpu_1, since the tensors used for evaluation are defined on gpu_1", "\n", "for", "j", "in", "range", "(", "num_batch", ")", ":", "\n", "          ", "begidx", "=", "j", "*", "batch_size", "\n", "endidx", "=", "(", "j", "+", "1", ")", "*", "batch_size", "\n", "feed_dict", "=", "{", "\n", "pointclouds_phs", "[", "1", "]", ":", "cur_data", "[", "begidx", ":", "endidx", ",", "...", "]", ",", "\n", "input_label_phs", "[", "1", "]", ":", "cur_labels_one_hot", "[", "begidx", ":", "endidx", ",", "...", "]", ",", "\n", "seg_phs", "[", "1", "]", ":", "cur_seg", "[", "begidx", ":", "endidx", ",", "...", "]", ",", "\n", "is_training_phs", "[", "1", "]", ":", "is_training", "}", "\n", "\n", "loss_val", ",", "per_instance_seg_loss_val", ",", "seg_pred_val", ",", "pred_seg_res", "=", "sess", ".", "run", "(", "[", "loss", ",", "per_instance_seg_loss", ",", "seg_pred", ",", "per_instance_seg_pred_res", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "per_instance_part_acc", "=", "np", ".", "mean", "(", "pred_seg_res", "==", "cur_seg", "[", "begidx", ":", "endidx", ",", "...", "]", ",", "axis", "=", "1", ")", "\n", "average_part_acc", "=", "np", ".", "mean", "(", "per_instance_part_acc", ")", "\n", "\n", "total_seen", "+=", "1", "\n", "total_loss", "+=", "loss_val", "\n", "\n", "total_seg_acc", "+=", "average_part_acc", "\n", "\n", "for", "shape_idx", "in", "range", "(", "begidx", ",", "endidx", ")", ":", "\n", "            ", "total_seen_per_cat", "[", "cur_labels", "[", "shape_idx", "]", "]", "+=", "1", "\n", "total_seg_acc_per_cat", "[", "cur_labels", "[", "shape_idx", "]", "]", "+=", "per_instance_part_acc", "[", "shape_idx", "-", "begidx", "]", "\n", "\n", "", "", "", "total_loss", "=", "total_loss", "*", "1.0", "/", "total_seen", "\n", "total_seg_acc", "=", "total_seg_acc", "*", "1.0", "/", "total_seen", "\n", "\n", "test_loss_sum", ",", "test_seg_acc_sum", "=", "sess", ".", "run", "(", "[", "total_test_loss_sum_op", ",", "seg_test_acc_sum_op", "]", ",", "feed_dict", "=", "{", "total_testing_loss_ph", ":", "total_loss", ",", "seg_testing_acc_ph", ":", "total_seg_acc", "}", ")", "\n", "\n", "test_writer", ".", "add_summary", "(", "test_loss_sum", ",", "(", "epoch_num", "+", "1", ")", "*", "num_train_file", "-", "1", ")", "\n", "test_writer", ".", "add_summary", "(", "test_seg_acc_sum", ",", "(", "epoch_num", "+", "1", ")", "*", "num_train_file", "-", "1", ")", "\n", "\n", "printout", "(", "flog", ",", "'\\tTesting Total Mean_loss: %f'", "%", "total_loss", ")", "\n", "printout", "(", "flog", ",", "'\\t\\tTesting Seg Accuracy: %f'", "%", "total_seg_acc", ")", "\n", "\n", "for", "cat_idx", "in", "range", "(", "NUM_CATEGORIES", ")", ":", "\n", "        ", "if", "total_seen_per_cat", "[", "cat_idx", "]", ">", "0", ":", "\n", "          ", "printout", "(", "flog", ",", "'\\n\\t\\tCategory %s Object Number: %d'", "%", "(", "all_obj_cats", "[", "cat_idx", "]", "[", "0", "]", ",", "total_seen_per_cat", "[", "cat_idx", "]", ")", ")", "\n", "printout", "(", "flog", ",", "'\\t\\tCategory %s Seg Accuracy: %f'", "%", "(", "all_obj_cats", "[", "cat_idx", "]", "[", "0", "]", ",", "total_seg_acc_per_cat", "[", "cat_idx", "]", "/", "total_seen_per_cat", "[", "cat_idx", "]", ")", ")", "\n", "\n", "", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_STORAGE_PATH", ")", ":", "\n", "      ", "os", ".", "mkdir", "(", "MODEL_STORAGE_PATH", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "TRAINING_EPOCHES", ")", ":", "\n", "      ", "printout", "(", "flog", ",", "'\\n<<< Testing on the test dataset ...'", ")", "\n", "eval_one_epoch", "(", "epoch", ")", "\n", "\n", "printout", "(", "flog", ",", "'\\n>>> Training for the epoch %d/%d ...'", "%", "(", "epoch", ",", "TRAINING_EPOCHES", ")", ")", "\n", "\n", "train_file_idx", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "train_file_list", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_file_idx", ")", "\n", "\n", "train_one_epoch", "(", "train_file_idx", ",", "epoch", ")", "\n", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "        ", "cp_filename", "=", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "MODEL_STORAGE_PATH", ",", "'epoch_'", "+", "str", "(", "epoch", ")", "+", "'.ckpt'", ")", ")", "\n", "printout", "(", "flog", ",", "'Successfully store the checkpoint model into '", "+", "cp_filename", ")", "\n", "\n", "", "flog", ".", "flush", "(", ")", "\n", "\n", "", "flog", ".", "close", "(", ")", "\n", "\n"]]}