{"home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.ReLUConvBN.__init__": [[26, 32], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.ReLUConvBN.forward": [[34, 36], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.DilConv.__init__": [[42, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.DilConv.forward": [[51, 53], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.SepConv.__init__": [[57, 68], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.SepConv.forward": [[70, 72], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.Identity.__init__": [[75, 77], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.Identity.forward": [[78, 80], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.Zero.__init__": [[83, 86], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.Zero.forward": [[87, 91], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "1", ":", "\n", "      ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "# N * C * W * H", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.FactorizedReduce.__init__": [[100, 107], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.operations.FactorizedReduce.forward": [[108, 113], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.NoiseIdentity.__init__": [[32, 42], ["torch.Module.__init__", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "noise_type", "=", "None", ",", "scheduler", "=", "'cosine_anne'", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "NoiseIdentity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "if", "self", ".", "noise_type", "is", "not", "None", ":", "\n", "      ", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "base_lr", "=", "kwargs", "[", "'base_lr'", "]", "\n", "self", ".", "last_iter", "=", "0", "\n", "self", ".", "T_max", "=", "kwargs", "[", "'T_max'", "]", "\n", "self", ".", "gamma_groups", "=", "np", ".", "linspace", "(", "1", ",", "0", ",", "self", ".", "T_max", ")", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.NoiseIdentity.forward": [[43, 74], ["NotImplementedError", "print", "print", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.zeros_like().data.random_", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "math.cos", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "step", "=", "None", ")", ":", "\n", "    ", "if", "step", "is", "None", ":", "\n", "      ", "self", ".", "last_iter", "+=", "1", "\n", "", "else", ":", "\n", "      ", "self", ".", "last_iter", "=", "step", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "noise_type", "is", "not", "None", ":", "\n", "      ", "if", "self", ".", "scheduler", "==", "'cosine_anne'", ":", "\n", "        ", "decay", "=", "self", ".", "base_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_iter", "/", "self", ".", "T_max", ")", ")", "/", "2.0", "if", "self", ".", "last_iter", "<=", "self", ".", "T_max", "else", "0", "\n", "", "elif", "self", ".", "scheduler", "==", "'step'", ":", "\n", "        ", "decay", "=", "self", ".", "gamma_groups", "[", "self", ".", "last_iter", "]", "if", "self", ".", "last_iter", "<", "len", "(", "self", ".", "gamma_groups", ")", "and", "self", ".", "last_iter", "<=", "self", ".", "T_max", "else", "0", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'not support scheduler {}'", ".", "format", "(", "self", ".", "scheduler", ")", ")", "\n", "\n", "# add external noise (guassian noise is prefer)", "\n", "", "if", "self", ".", "noise_type", "==", "'N'", ":", "\n", "        ", "x", "=", "x", "+", "decay", "*", "torch", ".", "randn_like", "(", "x", ",", "requires_grad", "=", "False", ")", "\n", "global", "DEBUG_CNT", "\n", "if", "DEBUG_CNT", "%", "1000", "==", "0", ":", "\n", "          ", "DEBUG_CNT", "=", "0", "\n", "print", "(", "'===== step: {}'", ".", "format", "(", "step", ")", ")", "\n", "print", "(", "'===== decay: {}'", ".", "format", "(", "decay", ")", ")", "\n", "", "DEBUG_CNT", "+=", "1", "\n", "", "elif", "self", ".", "noise_type", "==", "'U'", ":", "\n", "        ", "aux", "=", "torch", ".", "zeros_like", "(", "x", ")", ".", "data", ".", "random_", "(", "-", "3", ",", "3", ")", "\n", "aux", ".", "requires_grad", "=", "False", "\n", "x", "=", "x", "+", "decay", "*", "aux", "\n", "# rand_like only generate 0-1, no much effect.", "\n", "# x = x + decay * torch.rand_like(x, requires_grad=False)", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.MixedOp.__init__": [[76, 94], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.NoiseIdentity", "model_search.MixedOp._ops.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "stride", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "use_noise_identity", "=", "True", "if", "SearchControllerConf", "[", "'noise_darts'", "]", "and", "stride", "==", "1", "else", "False", "\n", "\n", "if", "self", ".", "use_noise_identity", ":", "\n", "      ", "self", ".", "noise_identity", "=", "NoiseIdentity", "(", "noise_type", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'noise_type'", "]", ",", "\n", "noise_scheduler", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'noise_scheduler'", "]", ",", "\n", "T_max", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'T_max'", "]", ",", "\n", "base_lr", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'base_lr'", "]", ")", "\n", "\n", "", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "False", ")", "\n", "if", "'pool'", "in", "primitive", ":", "\n", "        ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", ")", "\n", "", "if", "'skip'", "in", "primitive", "and", "self", ".", "use_noise_identity", ":", "\n", "        ", "op", "=", "self", ".", "noise_identity", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.MixedOp.forward": [[95, 97], ["sum", "zip", "isinstance", "model_search.MixedOp.noise_identity", "op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "self", ".", "noise_identity", "(", "x", ",", "epoch", ")", "if", "isinstance", "(", "op", ",", "NoiseIdentity", ")", "and", "self", ".", "training", "else", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Cell.__init__": [[101, 120], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.FactorizedReduce", "operations.ReLUConvBN", "range", "model_search.MixedOp", "model_search.Cell._ops.append"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "C", ",", "stride", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Cell.forward": [[121, 134], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "states.append", "enumerate"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "s", "=", "sum", "(", "self", ".", "_ops", "[", "offset", "+", "j", "]", "(", "h", ",", "weights", "[", "offset", "+", "j", "]", ",", "epoch", ")", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.__init__": [[136, 171], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Network._initialize_alphas", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search.Cell"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._initialize_alphas"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "_reweight", "=", "SearchControllerConf", "[", "'reweight'", "]", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.new": [[172, 177], ["Network().cuda", "zip", "Network().cuda.arch_parameters", "model_search.Network.arch_parameters", "x.data.copy_", "model_search.Network"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters"], ["", "def", "new", "(", "self", ")", ":", "\n", "    ", "model_new", "=", "Network", "(", "self", ".", "_C", ",", "self", ".", "_num_classes", ",", "self", ".", "_layers", ",", "self", ".", "_criterion", ")", ".", "cuda", "(", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "model_new", ".", "arch_parameters", "(", ")", ",", "self", ".", "arch_parameters", "(", ")", ")", ":", "\n", "        ", "x", ".", "data", ".", "copy_", "(", "y", ".", "data", ")", "\n", "", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.forward": [[178, 189], ["model_search.Network.stem", "enumerate", "model_search.Network.global_pooling", "model_search.Network.classifier", "model_search.Network.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "cell", "model_search.Network.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ",", "epoch", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network._loss": [[190, 193], ["model_search.Network.", "model_search.Network._criterion"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "input", ",", "target", ",", "epoch", ")", ":", "\n", "    ", "logits", "=", "self", "(", "input", ",", "epoch", ")", "\n", "return", "self", ".", "_criterion", "(", "logits", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network._initialize_alphas": [[194, 225], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "range", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "range", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initialize the architecture parameter: alpha\n    \"\"\"", "\n", "# k = 2 + 3 + 4 + 5 = 14", "\n", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "# alphas_normal: size = 14 * 8; alphas_reduce = 14 * 8", "\n", "self", ".", "alphas_normal", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alphas_reduce", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# init the history", "\n", "self", ".", "alphas_normal_history", "=", "{", "}", "\n", "self", ".", "alphas_reduce_history", "=", "{", "}", "\n", "mm", "=", "0", "\n", "last_id", "=", "1", "\n", "node_id", "=", "0", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "num_ops", ")", ":", "\n", "        ", "self", ".", "alphas_normal_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", "=", "[", "]", "\n", "self", ".", "alphas_reduce_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", "=", "[", "]", "\n", "", "if", "mm", "==", "last_id", ":", "\n", "        ", "mm", "=", "0", "\n", "last_id", "+=", "1", "\n", "node_id", "+=", "1", "\n", "", "else", ":", "\n", "        ", "mm", "+=", "1", "\n", "\n", "", "", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_normal", ",", "\n", "self", ".", "alphas_reduce", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.arch_parameters": [[227, 229], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.genotype": [[230, 264], ["model_search.Network.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "\n", "    ", "def", "_parse", "(", "weights", ",", "reweight", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "n", "=", "2", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "\n", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", ")", ")", "[", ":", "2", "]", "\n", "\n", "for", "j", "in", "edges", ":", "\n", "          ", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "              ", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "                ", "k_best", "=", "k", "\n", "", "", "if", "reweight", ":", "\n", "            ", "gene", ".", "append", "(", "(", "PRIMITIVES", "[", "k_best", "]", ",", "j", ",", "W", "[", "j", "]", "[", "k_best", "]", ")", ")", "# geno item: (operation, node idx, weight)", "\n", "", "else", ":", "\n", "            ", "gene", ".", "append", "(", "(", "PRIMITIVES", "[", "k_best", "]", ",", "j", ")", ")", "# geno item: (operation, node idx)", "\n", "", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "return", "gene", "\n", "\n", "", "gene_normal", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "_reweight", ")", "\n", "gene_reduce", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "_reweight", ")", "\n", "\n", "concat", "=", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", "genotype", "=", "Genotype", "(", "\n", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "\n", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", "\n", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.update_history": [[265, 283], ["torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "range", "range", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "model_search.Network.alphas_normal_history[].append", "model_search.Network.alphas_reduce_history[].append", "float", "float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "update_history", "(", "self", ")", ":", "\n", "    ", "mm", "=", "0", "\n", "last_id", "=", "1", "\n", "node_id", "=", "0", "\n", "weights1", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "weights2", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "k", ",", "num_ops", "=", "weights1", ".", "shape", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "num_ops", ")", ":", "\n", "        ", "self", ".", "alphas_normal_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", ".", "append", "(", "float", "(", "weights1", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "self", ".", "alphas_reduce_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", ".", "append", "(", "float", "(", "weights2", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "", "if", "mm", "==", "last_id", ":", "\n", "        ", "mm", "=", "0", "\n", "last_id", "+=", "1", "\n", "node_id", "+=", "1", "\n", "", "else", ":", "\n", "        ", "mm", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.random_generate": [[284, 320], ["sum", "len", "range", "random.randint", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model_search.Network.genotype", "zip", "zip", "range", "range", "model.NetworkCIFAR.NetworkCIFAR", "thop.profile", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "str"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.genotype"], ["", "", "", "def", "random_generate", "(", "self", ")", ":", "\n", "\n", "    ", "num_skip_connect", "=", "SearchControllerConf", "[", "'random_search'", "]", "[", "'num_identity'", "]", "\n", "num_arch", "=", "SearchControllerConf", "[", "'random_search'", "]", "[", "'num_arch'", "]", "\n", "flops_threshold", "=", "SearchControllerConf", "[", "'random_search'", "]", "[", "'flops_threshold'", "]", "\n", "\n", "\"\"\"Random generate the architecture\"\"\"", "\n", "# k = 2 + 3 + 4 + 5 = 14", "\n", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "self", ".", "random_arch_list", "=", "[", "]", "\n", "for", "ai", "in", "range", "(", "num_arch", ")", ":", "\n", "      ", "seed", "=", "random", ".", "randint", "(", "0", ",", "1000", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "while", "True", ":", "\n", "        ", "self", ".", "alphas_normal", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "alphas_reduce", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "arch", "=", "self", ".", "genotype", "(", ")", "\n", "# if the skip connect meet num_skip_connect", "\n", "op_names", ",", "indices", "=", "zip", "(", "*", "arch", ".", "normal", ")", "\n", "cnt", "=", "0", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "          ", "if", "name", "==", "'skip_connect'", ":", "\n", "            ", "cnt", "+=", "1", "\n", "", "", "if", "cnt", "==", "num_skip_connect", ":", "\n", "# the flops threshold", "\n", "          ", "model", "=", "NetworkCIFAR", "(", "36", ",", "10", ",", "20", ",", "True", ",", "arch", ",", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ",", ")", ",", "verbose", "=", "False", ")", "\n", "if", "flops", "/", "1e6", ">=", "flops_threshold", ":", "\n", "            ", "self", ".", "random_arch_list", "+=", "[", "(", "'arch_'", "+", "str", "(", "ai", ")", ",", "arch", ")", "]", "\n", "break", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "\n", "", "", "", "", "return", "self", ".", "random_arch_list", "", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork.__init__": [[53, 61], ["object.__init__", "train.TrainNetwork._init_log", "train.TrainNetwork._init_device", "train.TrainNetwork._init_data_queue", "train.TrainNetwork._init_model"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_log", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_device", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_data_queue", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_model"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "TrainNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "dur_time", "=", "0", "\n", "self", ".", "_init_log", "(", ")", "\n", "self", ".", "_init_device", "(", ")", "\n", "self", ".", "_init_data_queue", "(", ")", "\n", "self", ".", "_init_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork._init_log": [[62, 73], ["utils.create_exp_dir", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger", "train.TrainNetwork.logger.addHandler", "os.path.join", "logging.Formatter", "time.strftime"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.create_exp_dir"], ["", "def", "_init_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "save", "=", "'./logs/eval/'", "+", "self", ".", "args", ".", "arch", "+", "'/'", "+", "'cifar10'", "+", "'/eval-{}-{}'", ".", "format", "(", "self", ".", "args", ".", "save", ",", "time", ".", "strftime", "(", "'%Y%m%d-%H%M'", ")", ")", "\n", "dutils", ".", "create_exp_dir", "(", "self", ".", "args", ".", "save", ",", "scripts_to_save", "=", "None", ")", "\n", "\n", "log_format", "=", "'%(asctime)s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save", ",", "'log.txt'", ")", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'Architecture Training'", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork._init_device": [[74, 87], ["numpy.random.seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train.TrainNetwork.logger.info", "sys.exit"], "methods", ["None"], ["", "def", "_init_device", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "self", ".", "device_id", "=", "self", ".", "args", ".", "gpu", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "0", "if", "self", ".", "args", ".", "multi_gpus", "else", "self", ".", "device_id", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "self", ".", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork._init_data_queue": [[88, 98], ["utils._data_transforms_cifar10", "torchvision.CIFAR10", "torchvision.CIFAR10", "torchvision.CIFAR10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils._data_transforms_cifar10"], ["", "def", "_init_data_queue", "(", "self", ")", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "dutils", ".", "_data_transforms_cifar10", "(", "self", ".", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "self", ".", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork._init_model": [[99, 153], ["eval", "nn.DataParallel.NetworkCIFAR", "thop.profile", "train.TrainNetwork.logger.info", "train.TrainNetwork.logger.info", "torch.DataParallel.to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.to", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "train.TrainNetwork.logger.info", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "train.TrainNetwork.logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "os.path.isfile", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.TrainNetwork.scheduler.load_state_dict", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel.parameters", "torch.DataParallel.parameters", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.TrainNetwork.model.load_state_dict", "train.TrainNetwork.optimizer.load_state_dict", "print", "print", "float", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load"], ["", "def", "_init_model", "(", "self", ")", ":", "\n", "        ", "genotype", "=", "eval", "(", "'genotypes.%s'", "%", "self", ".", "args", ".", "arch", ")", "\n", "model", "=", "Network", "(", "self", ".", "args", ".", "init_channels", ",", "self", ".", "num_classes", ",", "self", ".", "args", ".", "layers", ",", "self", ".", "args", ".", "auxiliary", ",", "genotype", ",", "self", ".", "args", ".", "reweight", ")", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ",", ")", ",", "verbose", "=", "False", ")", "\n", "self", ".", "logger", ".", "info", "(", "'flops = %fM'", ",", "flops", "/", "1e6", ")", "\n", "self", ".", "logger", ".", "info", "(", "'param size = %fM'", ",", "params", "/", "1e6", ")", "\n", "\n", "# Try move model to multi gpus", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "and", "self", ".", "args", ".", "multi_gpus", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'use: %d gpus'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'gpu device = %d'", "%", "self", ".", "device_id", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "device_id", ")", "\n", "", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "opt", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "learning_rate", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "", "self", ".", "best_acc_top1", "=", "0", "\n", "# optionally resume from a checkpoint", "\n", "if", "self", ".", "args", ".", "resume", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "resume", ")", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint {}\"", ".", "format", "(", "self", ".", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "resume", ",", "map_location", "=", "self", ".", "device", ")", "\n", "self", ".", "dur_time", "=", "checkpoint", "[", "'dur_time'", "]", "\n", "self", ".", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "best_acc_top1", "=", "checkpoint", "[", "'best_acc_top1'", "]", "\n", "self", ".", "args", ".", "drop_path_prob", "=", "checkpoint", "[", "'drop_path_prob'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "self", ".", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "self", ".", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "float", "(", "self", ".", "args", ".", "epochs", ")", "if", "self", ".", "args", ".", "anneal_max", "==", "0", "else", "self", ".", "args", ".", "anneal_max", ",", "\n", "eta_min", "=", "self", ".", "args", ".", "learning_rate_min", ",", "last_epoch", "=", "-", "1", "if", "self", ".", "args", ".", "start_epoch", "==", "0", "else", "self", ".", "args", ".", "start_epoch", ")", "\n", "# reload the scheduler if possible", "\n", "if", "self", ".", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "resume", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "resume", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork.run": [[154, 187], ["train.TrainNetwork.logger.info", "time.time", "range", "train.TrainNetwork.logger.info", "train.TrainNetwork.scheduler.step", "train.TrainNetwork.logger.info", "train.TrainNetwork.train", "train.TrainNetwork.logger.info", "train.TrainNetwork.infer", "train.TrainNetwork.logger.info", "train.TrainNetwork.logger.info", "utils.save_checkpoint", "utils.calc_time", "train.TrainNetwork.scheduler.get_lr", "train.TrainNetwork.model.state_dict", "train.TrainNetwork.optimizer.state_dict", "train.TrainNetwork.scheduler.state_dict", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.infer", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_checkpoint", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.calc_time"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'args = %s'", ",", "self", ".", "args", ")", "\n", "run_start", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "start_epoch", ",", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'epoch % d / %d  lr %e'", ",", "epoch", ",", "self", ".", "args", ".", "epochs", ",", "self", ".", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ")", "\n", "\n", "self", ".", "model", ".", "drop_path_prob", "=", "self", ".", "args", ".", "drop_path_prob", "*", "epoch", "/", "self", ".", "args", ".", "epochs", "\n", "\n", "train_acc", ",", "train_obj", "=", "self", ".", "train", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'train loss %e, train acc %f'", ",", "train_obj", ",", "train_acc", ")", "\n", "\n", "valid_acc_top1", ",", "valid_acc_top5", ",", "valid_obj", "=", "self", ".", "infer", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'valid loss %e, top1 valid acc %f top5 valid acc %f'", ",", "\n", "valid_obj", ",", "valid_acc_top1", ",", "valid_acc_top5", ")", "\n", "self", ".", "logger", ".", "info", "(", "'best valid acc %f'", ",", "self", ".", "best_acc_top1", ")", "\n", "\n", "is_best", "=", "False", "\n", "if", "valid_acc_top1", ">", "self", ".", "best_acc_top1", ":", "\n", "                ", "self", ".", "best_acc_top1", "=", "valid_acc_top1", "\n", "is_best", "=", "True", "\n", "\n", "", "dutils", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'dur_time'", ":", "self", ".", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'drop_path_prob'", ":", "self", ".", "args", ".", "drop_path_prob", ",", "\n", "'best_acc_top1'", ":", "self", ".", "best_acc_top1", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "}", ",", "is_best", ",", "self", ".", "args", ".", "save", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'train epoches %d, best_acc_top1 %f, dur_time %s'", ",", "\n", "self", ".", "args", ".", "epochs", ",", "self", ".", "best_acc_top1", ",", "dutils", ".", "calc_time", "(", "self", ".", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork.train": [[188, 220], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "train.TrainNetwork.model.train", "enumerate", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "train.TrainNetwork.optimizer.zero_grad", "train.TrainNetwork.model", "train.TrainNetwork.criterion", "train.TrainNetwork.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "train.TrainNetwork.optimizer.step", "utils.accuracy", "input.cuda.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "train.TrainNetwork.criterion", "train.TrainNetwork.model.parameters", "train.TrainNetwork.item", "prec1.item", "prec5.item", "train.TrainNetwork.logger.info"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "objs", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_queue", ")", ":", "\n", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "self", ".", "model", "(", "input", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "self", ".", "args", ".", "auxiliary", ":", "\n", "                ", "loss_aux", "=", "self", ".", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "self", ".", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "dutils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train.TrainNetwork.infer": [[221, 243], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "train.TrainNetwork.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "train.TrainNetwork.model", "train.TrainNetwork.criterion", "utils.accuracy", "input.cuda.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "train.TrainNetwork.item", "prec1.item", "prec5.item", "train.TrainNetwork.logger.info"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["", "def", "infer", "(", "self", ")", ":", "\n", "        ", "objs", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "self", ".", "valid_queue", ")", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "input", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "dutils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train_search.main": [[66, 165], ["numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.CrossEntropyLoss", "model_search.Network", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils._data_transforms_cifar10", "torchvision.CIFAR10", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "architect.Architect", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "utils.count_parameters_in_MB", "model.cuda.random_generate", "logging.info", "logging.info", "sys.exit", "model.cuda.parameters", "model.cuda.arch_parameters", "range", "numpy.floor", "float", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logging.info", "model.cuda.genotype", "logging.info", "logging.info", "logging.info", "model.cuda.update_history", "train_search.train", "logging.info", "train_search.infer", "logging.info", "utils.save", "utils.save_file", "utils.save_file", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "torch.softmax", "torch.softmax", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils._data_transforms_cifar10", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model_search.Network.random_generate", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.genotype", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.update_history", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.infer", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_file", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_file"], ["def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "0", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "\"\"\"Noise Darts\"\"\"", "\n", "if", "args", ".", "noise_darts", ":", "\n", "    ", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'noise_type'", "]", "=", "args", ".", "noise_type", "\n", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'T_max'", "]", "=", "args", ".", "max_step", "\n", "", "else", ":", "\n", "    ", "SearchControllerConf", "[", "'noise_darts'", "]", "=", "None", "\n", "\n", "", "\"\"\"Random Darts\"\"\"", "\n", "if", "args", ".", "random_search", ":", "\n", "    ", "SearchControllerConf", "[", "'random_search'", "]", "[", "'num_identity'", "]", "=", "args", ".", "num_identity", "\n", "SearchControllerConf", "[", "'random_search'", "]", "[", "'num_arch'", "]", "=", "args", ".", "num_arch", "\n", "SearchControllerConf", "[", "'random_search'", "]", "[", "'flops_threshold'", "]", "=", "args", ".", "flops_threshold", "\n", "", "else", ":", "\n", "    ", "SearchControllerConf", "[", "'random_search'", "]", "=", "None", "\n", "\n", "", "\"\"\"Reweight Darts\"\"\"", "\n", "SearchControllerConf", "[", "'reweight'", "]", "=", "args", ".", "reweight", "\n", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "if", "args", ".", "random_search", ":", "\n", "    ", "genotype_list", "=", "model", ".", "random_generate", "(", ")", "\n", "logging", ".", "info", "(", "'genotype list = %s'", ",", "genotype_list", ")", "\n", "logging", ".", "info", "(", "'generate done!'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "model_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "## single level", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "model_optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "    ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "logging", ".", "info", "(", "'epoch %d lr %e'", ",", "epoch", ",", "lr", ")", "\n", "\n", "genotype", "=", "model", ".", "genotype", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'genotype = %s'", ",", "genotype", ")", "\n", "\n", "logging", ".", "info", "(", "F", ".", "softmax", "(", "model", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ")", "\n", "logging", ".", "info", "(", "F", ".", "softmax", "(", "model", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ")", "\n", "model", ".", "update_history", "(", ")", "\n", "\n", "# training and search the model", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "model_optimizer", ",", "lr", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "\n", "# validation the model", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "utils", ".", "save_file", "(", "recoder", "=", "model", ".", "alphas_normal_history", ",", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'normal'", ")", ")", "\n", "utils", ".", "save_file", "(", "recoder", "=", "model", ".", "alphas_reduce_history", ",", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'reduce'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train_search.train": [[167, 211], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "enumerate", "model.train", "Variable().cuda.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "next", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "architect.step", "model_optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm", "model_optimizer.step", "utils.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "iter", "model.parameters", "criterion.item", "prec1.item", "prec5.item", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["", "", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "model_optimizer", ",", "lr", ",", "epoch", "=", "None", ")", ":", "\n", "  ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Get a random minibatch from the search queue(validation set) with replacement", "\n", "input_search", ",", "target_search", "=", "next", "(", "iter", "(", "valid_queue", ")", ")", "\n", "input_search", "=", "Variable", "(", "input_search", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target_search", "=", "Variable", "(", "target_search", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# bi-level", "\n", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "model_optimizer", ",", "unrolled", "=", "args", ".", "unrolled", ",", "epoch", "=", "epoch", ")", "\n", "\n", "# single-level", "\n", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "## single-level", "\n", "# arch_optimizer.zero_grad()", "\n", "\n", "logits", "=", "model", "(", "input", ",", "epoch", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "\n", "# Update the network parameters", "\n", "model_optimizer", ".", "step", "(", ")", "\n", "## single level", "\n", "# arch_optimizer.step()", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "'train %03d loss: %e top1: %f top5: %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.train_search.infer": [[213, 237], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "criterion", "utils.accuracy", "Variable().cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion.item", "prec1.item", "prec5.item", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "      ", "input", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect.__init__": [[12, 19], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "architect.Architect.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "\n", "    ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "args", ".", "arch_lr_gamma", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._compute_unrolled_model": [[20, 36], ["architect.Architect.model._loss", "architect.Architect._construct_model_from_theta", "architect._concat", "_concat().mul_", "theta.sub", "architect.Architect.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "architect._concat", "architect._concat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "architect.Architect.model.parameters", "architect.Architect.model.parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect._concat", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect._concat", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect._concat"], ["", "def", "_compute_unrolled_model", "(", "self", ",", "input", ",", "target", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "    ", "\"\"\"\n    One step unrolled weights serve as the surrogate for w(\\alpha)\n    \"\"\"", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "theta", "=", "_concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "try", ":", "\n", "      ", "moment", "=", "_concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "v", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul_", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "      ", "moment", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "\n", "", "dtheta", "=", "_concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", ".", "data", "+", "self", ".", "network_weight_decay", "*", "theta", "\n", "\n", "# theta.sub(eta, moment+dtheta): w - eta*(moment+dw)", "\n", "unrolled_model", "=", "self", ".", "_construct_model_from_theta", "(", "theta", ".", "sub", "(", "eta", ",", "moment", "+", "dtheta", ")", ")", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect.step": [[37, 46], ["architect.Architect.optimizer.zero_grad", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._backward_step"], ["", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ",", "unrolled", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "unrolled", ":", "\n", "        ", "self", ".", "_backward_step_unrolled", "(", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._backward_step": [[47, 50], ["architect.Architect.model._loss", "architect.Architect.backward"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ",", "epoch", ")", ":", "\n", "    ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._backward_step_unrolled": [[51, 69], ["architect.Architect._compute_unrolled_model", "architect.Architect._loss", "architect.Architect._loss.backward", "architect.Architect._hessian_vector_product", "zip", "zip", "g.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.arch_parameters", "architect.Architect.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "# one-step unrolled weights", "\n", "    ", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "input_train", ",", "target_train", ",", "eta", ",", "network_optimizer", ")", "\n", "unrolled_loss", "=", "unrolled_model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "\n", "unrolled_loss", ".", "backward", "(", ")", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "arch_parameters", "(", ")", "]", "#", "\n", "vector", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_product", "(", "vector", ",", "input_train", ",", "target_train", ")", "\n", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "      ", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "", "for", "v", ",", "g", "in", "zip", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "      ", "if", "v", ".", "grad", "is", "None", ":", "\n", "        ", "v", ".", "grad", "=", "Variable", "(", "g", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "v", ".", "grad", ".", "data", ".", "copy_", "(", "g", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._construct_model_from_theta": [[70, 85], ["architect.Architect.model.new", "architect.Architect.model.state_dict", "architect.Architect.model.named_parameters", "architect.Architect.update", "architect.Architect.load_state_dict", "architect.Architect.cuda", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.new", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["", "", "", "def", "_construct_model_from_theta", "(", "self", ",", "theta", ")", ":", "\n", "    ", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "#", "\n", "      ", "v_length", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "params", "[", "k", "]", "=", "theta", "[", "offset", ":", "offset", "+", "v_length", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "v_length", "\n", "\n", "", "assert", "offset", "==", "len", "(", "theta", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "return", "model_new", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect.Architect._hessian_vector_product": [[86, 102], ["zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "_concat().norm", "architect.Architect.model.parameters", "p.data.add_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.add_", "zip", "architect._concat"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect._concat"], ["", "def", "_hessian_vector_product", "(", "self", ",", "vector", ",", "input", ",", "target", ",", "r", "=", "1e-2", ")", ":", "\n", "    ", "R", "=", "r", "/", "_concat", "(", "vector", ")", ".", "norm", "(", ")", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "      ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_p", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "      ", "p", ".", "data", ".", "sub_", "(", "2", "*", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_n", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "      ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "R", ")", "for", "x", ",", "y", "in", "zip", "(", "grads_p", ",", "grads_n", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.architect._concat": [[8, 10], ["torch.cat", "torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.Cell.__init__": [[8, 31], ["torch.Module.__init__", "operations.ReLUConvBN", "model.Cell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.DCOCell._compile"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "reweight", "=", "False", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "weight", "=", "None", "\n", "if", "reduction", ":", "\n", "      ", "if", "not", "reweight", ":", "\n", "        ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "", "else", ":", "\n", "        ", "op_names", ",", "indices", ",", "weight", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "      ", "if", "not", "reweight", ":", "\n", "        ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "", "else", ":", "\n", "        ", "op_names", ",", "indices", ",", "weight", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.Cell._compile": [[32, 45], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ",", "weight", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "      ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "self", ".", "_weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.Cell.forward": [[46, 71], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "utils.drop_path", "isinstance", "utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.drop_path", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "        ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "          ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "          ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "if", "self", ".", "_weight", "==", "None", ":", "\n", "        ", "s", "=", "h1", "+", "h2", "\n", "", "else", ":", "\n", "        ", "s", "=", "self", ".", "_weight", "[", "2", "*", "i", "]", "*", "h1", "+", "self", ".", "_weight", "[", "2", "*", "i", "+", "1", "]", "*", "h2", "\n", "", "states", "+=", "[", "s", "]", "\n", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "# N\uff0cC\uff0cH, W", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.AuxiliaryHeadCIFAR.__init__": [[75, 89], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.AuxiliaryHeadCIFAR.forward": [[90, 94], ["model.AuxiliaryHeadCIFAR.features", "model.AuxiliaryHeadCIFAR.classifier", "model.AuxiliaryHeadCIFAR.view", "model.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.AuxiliaryHeadImageNet.__init__": [[98, 114], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.AuxiliaryHeadImageNet.forward": [[115, 119], ["model.AuxiliaryHeadImageNet.features", "model.AuxiliaryHeadImageNet.classifier", "model.AuxiliaryHeadImageNet.view", "model.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.NetworkCIFAR.__init__": [[123, 156], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "reweight", "=", "False", ")", ":", "\n", "    ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "drop_path_prob", "=", "0", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "# cell located at the 1/3 and 2/3 of total depth of the network are reduction cells", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "reweight", "=", "reweight", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.NetworkCIFAR.forward": [[157, 168], ["model.NetworkCIFAR.stem", "enumerate", "model.NetworkCIFAR.global_pooling", "model.NetworkCIFAR.classifier", "model.NetworkCIFAR.view", "cell", "model.NetworkCIFAR.size", "model.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.NetworkImageNet.__init__": [[172, 212], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "xrange", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "    ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "xrange", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.model.NetworkImageNet.forward": [[213, 225], ["model.NetworkImageNet.stem0", "model.NetworkImageNet.stem1", "enumerate", "model.NetworkImageNet.global_pooling", "model.NetworkImageNet.classifier", "model.NetworkImageNet.view", "cell", "model.NetworkImageNet.size", "model.NetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.visualize.plot1": [[6, 42], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "plot1", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "assert", "len", "(", "genotype", ")", "%", "2", "==", "0", "\n", "steps", "=", "len", "(", "genotype", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "for", "k", "in", "[", "2", "*", "i", ",", "2", "*", "i", "+", "1", "]", ":", "\n", "      ", "try", ":", "\n", "        ", "op", ",", "j", "=", "genotype", "[", "k", "]", "\n", "", "except", ":", "\n", "        ", "op", ",", "j", ",", "_", "=", "genotype", "[", "k", "]", "\n", "", "if", "j", "==", "0", ":", "\n", "        ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "        ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "        ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.AvgrageMeter.__init__": [[11, 13], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.AvgrageMeter.reset": [[14, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.AvgrageMeter.update": [[19, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.Cutout.__init__": [[47, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.Cutout.__call__": [[50, 66], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.accuracy": [[25, 44], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Compute the top1 and top5 accuracy\n\n  \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "# Return the k largest elements of the given input tensor", "\n", "# along a given dimension -> N * k", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils._data_transforms_cifar10": [[68, 86], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "_data_transforms_cifar10", "(", "args", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.count_parameters_in_MB": [[88, 90], ["numpy.sum", "numpy.prod", "v.size", "model.parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.save_checkpoint": [[92, 98], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "  ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "    ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.save": [[100, 102], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save"], ["", "", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.load": [[104, 106], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.drop_path": [[108, 115], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.calc_time": [[116, 121], ["divmod", "divmod", "divmod", "int"], "function", ["None"], ["", "def", "calc_time", "(", "seconds", ")", ":", "\n", "    ", "m", ",", "s", "=", "divmod", "(", "seconds", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "t", ",", "h", "=", "divmod", "(", "h", ",", "24", ")", "\n", "return", "{", "'day'", ":", "t", ",", "'hour'", ":", "h", ",", "'minute'", ":", "m", ",", "'second'", ":", "int", "(", "s", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.create_exp_dir": [[122, 132], ["print", "os.path.exists", "os.makedirs", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "    ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "      ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.darts.utils.save_file": [[136, 157], ["matplotlib.subplots", "recoder.items", "fig.savefig", "matplotlib.tight_layout", "print", "axs[].set_title", "axs[].plot", "os.path.exists", "os.makedirs", "os.path.join", "open", "json.dump", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "save_file", "(", "recoder", ",", "size", "=", "(", "14", ",", "7", ")", ",", "path", "=", "'./'", ")", ":", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "*", "size", ",", "figsize", "=", "(", "36", ",", "98", ")", ")", "\n", "num_ops", "=", "size", "[", "1", "]", "\n", "row", "=", "0", "\n", "col", "=", "0", "\n", "for", "(", "k", ",", "v", ")", "in", "recoder", ".", "items", "(", ")", ":", "\n", "        ", "axs", "[", "row", ",", "col", "]", ".", "set_title", "(", "k", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "v", ",", "'r+'", ")", "\n", "if", "col", "==", "num_ops", "-", "1", ":", "\n", "            ", "col", "=", "0", "\n", "row", "+=", "1", "\n", "", "else", ":", "\n", "            ", "col", "+=", "1", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ",", "'w'", ")", "as", "outf", ":", "\n", "        ", "json", ".", "dump", "(", "recoder", ",", "outf", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.separate_loss.ConvSeparateLoss.__init__": [[8, 13], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "0.1", ",", "size_average", "=", "None", ",", "ignore_index", "=", "-", "100", ",", "\n", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "ConvSeparateLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.separate_loss.ConvSeparateLoss.forward": [[14, 18], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.cross_entropy.item", "loss2.item", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "target1", ",", "input2", ")", ":", "\n", "        ", "loss1", "=", "F", ".", "cross_entropy", "(", "input1", ",", "target1", ")", "\n", "loss2", "=", "-", "F", ".", "mse_loss", "(", "input2", ",", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ")", "\n", "return", "loss1", "+", "self", ".", "weight", "*", "loss2", ",", "loss1", ".", "item", "(", ")", ",", "loss2", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.separate_loss.TriSeparateLoss.__init__": [[22, 27], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "0.1", ",", "size_average", "=", "None", ",", "ignore_index", "=", "-", "100", ",", "\n", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "TriSeparateLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.separate_loss.TriSeparateLoss.forward": [[28, 32], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.cross_entropy.item", "loss2.item", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "target1", ",", "input2", ")", ":", "\n", "        ", "loss1", "=", "F", ".", "cross_entropy", "(", "input1", ",", "target1", ")", "\n", "loss2", "=", "-", "F", ".", "l1_loss", "(", "input2", ",", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ")", "\n", "return", "loss1", "+", "self", ".", "weight", "*", "loss2", ",", "loss1", ".", "item", "(", ")", ",", "loss2", ".", "item", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.ReLUConvBN.__init__": [[25, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["\n", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.ReLUConvBN.forward": [[33, 35], ["operations.ReLUConvBN.op"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.DilConv.__init__": [[40, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.DilConv.forward": [[49, 51], ["operations.DilConv.op"], "methods", ["None"], [")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.SepConv.__init__": [[55, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["", "", "class", "SepConv", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.SepConv.forward": [[68, 70], ["operations.SepConv.op"], "methods", ["None"], [")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.Identity.__init__": [[74, 76], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["\n", "  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.Identity.forward": [[77, 79], ["None"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.Zero.__init__": [[83, 86], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.Zero.forward": [[87, 91], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "1", ":", "\n", "      ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "# N * C * W * H", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.FactorizedReduce.__init__": [[95, 102], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.operations.FactorizedReduce.forward": [[103, 108], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.ImageNetPolicy.__init__": [[28, 59], ["auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.ImageNetPolicy.__call__": [[60, 63], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.ImageNetPolicy.__repr__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.CIFAR10Policy.__init__": [[82, 113], ["auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.8", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.CIFAR10Policy.__call__": [[114, 117], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.CIFAR10Policy.__repr__": [[118, 120], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.SVHNPolicy.__init__": [[136, 167], ["auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.SVHNPolicy.__call__": [[168, 171], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.SVHNPolicy.__repr__": [[172, 174], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.SubPolicy.__init__": [[178, 268], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "auto_augment.SubPolicy.__init__.rotate_with_fill"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "p1", ",", "\n", "operation1", ",", "\n", "magnitude_idx1", ",", "\n", "p2", ",", "\n", "operation2", ",", "\n", "magnitude_idx2", ",", "\n", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", "}", "\n", "\n", "# from https://stackoverflow.com/questions/5252170/specify-image", "\n", "# -filling-color-when-rotating-in-python-with-pil-and-setting-expand", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "\n", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "# \"rotate\": lambda img, magnitude: \\", "\n", "#     img.rotate(magnitude * random.choice([-1, 1])),", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "\n", "# self.name = \"{}_{:.2f}_and_{}_{:.2f}\".format(", "\n", "#     operation1, ranges[operation1][magnitude_idx1],", "\n", "#     operation2, ranges[operation2][magnitude_idx2])", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.auto_augment.SubPolicy.__call__": [[269, 275], ["random.random", "auto_augment.SubPolicy.operation1", "random.random", "auto_augment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "\n", "            ", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "\n", "            ", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.MixedOp.__init__": [[11, 19], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.MixedOp._ops.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["\n", "from", "model", "import", "NetworkCIFAR", "\n", "from", "thop", "import", "profile", "\n", "\n", "SearchControllerConf", "=", "{", "\n", "'noise_darts'", ":", "{", "\n", "'noise_type'", ":", "'N'", ",", "\n", "'noise_scheduler'", ":", "'cosine_anne'", ",", "\n", "'base_lr'", ":", "1.0", ",", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.MixedOp.forward": [[20, 22], ["sum", "op", "zip"], "methods", ["None"], ["'T_max'", ":", "50", "\n", "}", ",", "\n", "'reweight'", ":", "False", ",", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Cell.__init__": [[25, 44], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.FactorizedReduce", "operations.ReLUConvBN", "range", "model_search.MixedOp", "model_search.Cell._ops.append"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["'num_arch'", ":", "8", ",", "\n", "'flops_threshold'", ":", "None", "\n", "}", "\n", "}", "\n", "\n", "DEBUG_CNT", "=", "0", "\n", "class", "NoiseIdentity", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "noise_type", "=", "None", ",", "scheduler", "=", "'cosine_anne'", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "NoiseIdentity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "if", "self", ".", "noise_type", "is", "not", "None", ":", "\n", "      ", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "base_lr", "=", "kwargs", "[", "'base_lr'", "]", "\n", "self", ".", "last_iter", "=", "0", "\n", "self", ".", "T_max", "=", "kwargs", "[", "'T_max'", "]", "\n", "self", ".", "gamma_groups", "=", "np", ".", "linspace", "(", "1", ",", "0", ",", "self", ".", "T_max", ")", "\n", "self", ".", "cnt", "=", "0", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "step", "=", "None", ")", ":", "\n", "    ", "if", "step", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Cell.forward": [[45, 58], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "states.append", "enumerate"], "methods", ["None"], ["      ", "self", ".", "last_iter", "+=", "1", "\n", "", "else", ":", "\n", "      ", "self", ".", "last_iter", "=", "step", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "noise_type", "is", "not", "None", ":", "\n", "      ", "if", "self", ".", "scheduler", "==", "'cosine_anne'", ":", "\n", "        ", "decay", "=", "self", ".", "base_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_iter", "/", "self", ".", "T_max", ")", ")", "/", "2.0", "if", "self", ".", "last_iter", "<=", "self", ".", "T_max", "else", "0", "\n", "", "elif", "self", ".", "scheduler", "==", "'step'", ":", "\n", "        ", "decay", "=", "self", ".", "gamma_groups", "[", "self", ".", "last_iter", "]", "if", "self", ".", "last_iter", "<", "len", "(", "self", ".", "gamma_groups", ")", "and", "self", ".", "last_iter", "<=", "self", ".", "T_max", "else", "0", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'not support scheduler {}'", ".", "format", "(", "self", ".", "scheduler", ")", ")", "\n", "\n", "# add external noise (guassian noise is prefer)", "\n", "", "if", "self", ".", "noise_type", "==", "'N'", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.__init__": [[61, 97], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Network._initialize_alphas", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search.Cell"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._initialize_alphas"], ["if", "DEBUG_CNT", "%", "1000", "==", "0", ":", "\n", "          ", "DEBUG_CNT", "=", "0", "\n", "print", "(", "'===== step: {}'", ".", "format", "(", "step", ")", ")", "\n", "print", "(", "'===== decay: {}'", ".", "format", "(", "decay", ")", ")", "\n", "", "DEBUG_CNT", "+=", "1", "\n", "", "elif", "self", ".", "noise_type", "==", "'U'", ":", "\n", "        ", "aux", "=", "torch", ".", "zeros_like", "(", "x", ")", ".", "data", ".", "random_", "(", "-", "3", ",", "3", ")", "\n", "aux", ".", "requires_grad", "=", "False", "\n", "x", "=", "x", "+", "decay", "*", "aux", "\n", "# rand_like only generate 0-1, no much effect.", "\n", "# x = x + decay * torch.rand_like(x, requires_grad=False)", "\n", "\n", "", "", "return", "x", "\n", "\n", "", "", "class", "MixedOp", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "C", ",", "stride", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "use_noise_identity", "=", "True", "if", "SearchControllerConf", "[", "'noise_darts'", "]", "and", "stride", "==", "1", "else", "False", "\n", "\n", "if", "self", ".", "use_noise_identity", ":", "\n", "      ", "self", ".", "noise_identity", "=", "NoiseIdentity", "(", "noise_type", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'noise_type'", "]", ",", "\n", "noise_scheduler", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'noise_scheduler'", "]", ",", "\n", "T_max", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'T_max'", "]", ",", "\n", "base_lr", "=", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'base_lr'", "]", ")", "\n", "\n", "", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "False", ")", "\n", "if", "'pool'", "in", "primitive", ":", "\n", "        ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", ")", "\n", "", "if", "'skip'", "in", "primitive", "and", "self", ".", "use_noise_identity", ":", "\n", "        ", "op", "=", "self", ".", "noise_identity", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "self", ".", "noise_identity", "(", "x", ",", "epoch", ")", "if", "isinstance", "(", "op", ",", "NoiseIdentity", ")", "and", "self", ".", "training", "else", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.new": [[98, 103], ["Network().cuda", "zip", "Network().cuda.arch_parameters", "model_search.Network.arch_parameters", "x.data.copy_", "model_search.Network"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters"], ["\n", "", "", "class", "Cell", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.forward": [[104, 115], ["model_search.Network.stem", "enumerate", "model_search.Network.global_pooling", "model_search.Network.classifier", "model_search.Network.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "cell", "model_search.Network.size"], "methods", ["None"], ["\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss": [[116, 119], ["model_search.Network.", "model_search.Network._criterion"], "methods", ["None"], ["      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "C", ",", "stride", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._initialize_alphas": [[120, 144], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "range", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["\n", "", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "s", "=", "sum", "(", "self", ".", "_ops", "[", "offset", "+", "j", "]", "(", "h", ",", "weights", "[", "offset", "+", "j", "]", ",", "epoch", ")", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "class", "Network", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "_reweight", "=", "SearchControllerConf", "[", "'reweight'", "]", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters": [[145, 147], ["None"], "methods", ["None"], ["\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.genotype": [[148, 160], ["utils.parse", "utils.parse", "range", "genotypes.Genotype", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.parse", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.parse"], ["nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.states": [[161, 168], ["None"], "methods", ["None"], ["", "cell", "=", "Cell", "(", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.restore": [[170, 175], ["None"], "methods", ["None"], ["self", ".", "_initialize_alphas", "(", ")", "\n", "\n", "", "def", "new", "(", "self", ")", ":", "\n", "    ", "model_new", "=", "Network", "(", "self", ".", "_C", ",", "self", ".", "_num_classes", ",", "self", ".", "_layers", ",", "self", ".", "_criterion", ")", ".", "cuda", "(", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "model_new", ".", "arch_parameters", "(", ")", ",", "self", ".", "arch_parameters", "(", ")", ")", ":", "\n", "        ", "x", ".", "data", ".", "copy_", "(", "y", ".", "data", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.update_history": [[177, 196], ["torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "range", "range", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "model_search.Network.alphas_normal_history[].append", "model_search.Network.alphas_reduce_history[].append", "float", "float", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "input", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ",", "epoch", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n", "", "def", "_loss", "(", "self", ",", "input", ",", "target", ",", "epoch", ")", ":", "\n", "    ", "logits", "=", "self", "(", "input", ",", "epoch", ")", "\n", "return", "self", ".", "_criterion", "(", "logits", ",", "target", ")", "\n", "\n", "", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initialize the architecture parameter: alpha\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork.__init__": [[50, 58], ["object.__init__", "train.TrainNetwork._init_log", "train.TrainNetwork._init_device", "train.TrainNetwork._init_data_queue", "train.TrainNetwork._init_model"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_log", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_device", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_data_queue", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_model"], ["class", "TrainNetwork", "(", "object", ")", ":", "\n", "    ", "\"\"\"The main train network\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "TrainNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "dur_time", "=", "0", "\n", "self", ".", "_init_log", "(", ")", "\n", "self", ".", "_init_device", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_log": [[59, 70], ["utils.create_exp_dir", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger", "train.TrainNetwork.logger.addHandler", "os.path.join", "logging.Formatter", "time.strftime"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.create_exp_dir"], ["self", ".", "_init_data_queue", "(", ")", "\n", "self", ".", "_init_model", "(", ")", "\n", "\n", "", "def", "_init_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "save", "=", "'./logs/eval/'", "+", "self", ".", "args", ".", "arch", "+", "'/'", "+", "'cifar10'", "+", "'/eval-{}-{}'", ".", "format", "(", "self", ".", "args", ".", "save", ",", "time", ".", "strftime", "(", "'%Y%m%d-%H%M'", ")", ")", "\n", "dutils", ".", "create_exp_dir", "(", "self", ".", "args", ".", "save", ",", "scripts_to_save", "=", "None", ")", "\n", "\n", "log_format", "=", "'%(asctime)s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save", ",", "'log.txt'", ")", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_device": [[71, 84], ["numpy.random.seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train.TrainNetwork.logger.info", "sys.exit"], "methods", ["None"], ["self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'Architecture Training'", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "def", "_init_device", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "self", ".", "device_id", "=", "self", ".", "args", ".", "gpu", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "0", "if", "self", ".", "args", ".", "multi_gpus", "else", "self", ".", "device_id", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "args", ".", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_data_queue": [[85, 100], ["utils._data_transforms_cifar", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.CIFAR10", "torchvision.CIFAR10", "torchvision.CIFAR100", "torchvision.CIFAR100"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils._data_transforms_cifar"], ["logging", ".", "info", "(", "'gpu device = %d'", "%", "self", ".", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "self", ".", "args", ")", "\n", "\n", "", "def", "_init_data_queue", "(", "self", ")", ":", "\n", "        ", "train_transform", ",", "valid_transform", "=", "dutils", ".", "_data_transforms_cifar10", "(", "self", ".", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "self", ".", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "", "def", "_init_model", "(", "self", ")", ":", "\n", "        ", "genotype", "=", "eval", "(", "'genotypes.%s'", "%", "self", ".", "args", ".", "arch", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork._init_model": [[101, 147], ["eval", "nn.DataParallel.NetworkCIFAR", "thop.profile", "train.TrainNetwork.logger.info", "train.TrainNetwork.logger.info", "torch.DataParallel.to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "train.TrainNetwork.logger.info", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "train.TrainNetwork.logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.DataParallel.parameters", "os.path.isfile", "float", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.TrainNetwork.scheduler.load_state_dict", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.TrainNetwork.model.load_state_dict", "train.TrainNetwork.optimizer.load_state_dict", "print", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load"], ["model", "=", "Network", "(", "self", ".", "args", ".", "init_channels", ",", "self", ".", "num_classes", ",", "self", ".", "args", ".", "layers", ",", "self", ".", "args", ".", "auxiliary", ",", "genotype", ",", "self", ".", "args", ".", "reweight", ")", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ",", ")", ",", "verbose", "=", "False", ")", "\n", "self", ".", "logger", ".", "info", "(", "'flops = %fM'", ",", "flops", "/", "1e6", ")", "\n", "self", ".", "logger", ".", "info", "(", "'param size = %fM'", ",", "params", "/", "1e6", ")", "\n", "\n", "# Try move model to multi gpus", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "and", "self", ".", "args", ".", "multi_gpus", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'use: %d gpus'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'gpu device = %d'", "%", "self", ".", "device_id", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "device_id", ")", "\n", "", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "opt", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "learning_rate", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "", "self", ".", "best_acc_top1", "=", "0", "\n", "# optionally resume from a checkpoint", "\n", "if", "self", ".", "args", ".", "resume", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "resume", ")", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint {}\"", ".", "format", "(", "self", ".", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "resume", ",", "map_location", "=", "self", ".", "device", ")", "\n", "self", ".", "dur_time", "=", "checkpoint", "[", "'dur_time'", "]", "\n", "self", ".", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "best_acc_top1", "=", "checkpoint", "[", "'best_acc_top1'", "]", "\n", "self", ".", "args", ".", "drop_path_prob", "=", "checkpoint", "[", "'drop_path_prob'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "self", ".", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "self", ".", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "float", "(", "self", ".", "args", ".", "epochs", ")", "if", "self", ".", "args", ".", "anneal_max", "==", "0", "else", "self", ".", "args", ".", "anneal_max", ",", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork.run": [[148, 181], ["train.TrainNetwork.logger.info", "time.time", "range", "train.TrainNetwork.logger.info", "train.TrainNetwork.scheduler.step", "train.TrainNetwork.logger.info", "train.TrainNetwork.train", "train.TrainNetwork.logger.info", "train.TrainNetwork.infer", "train.TrainNetwork.logger.info", "train.TrainNetwork.logger.info", "utils.save_checkpoint", "utils.calc_time", "train.TrainNetwork.scheduler.get_lr", "train.TrainNetwork.model.state_dict", "train.TrainNetwork.optimizer.state_dict", "train.TrainNetwork.scheduler.state_dict", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.infer", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_checkpoint", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.calc_time"], ["eta_min", "=", "self", ".", "args", ".", "learning_rate_min", ",", "last_epoch", "=", "-", "1", "if", "self", ".", "args", ".", "start_epoch", "==", "0", "else", "self", ".", "args", ".", "start_epoch", ")", "\n", "# reload the scheduler if possible", "\n", "if", "self", ".", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "resume", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "resume", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "\n", "", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'args = %s'", ",", "self", ".", "args", ")", "\n", "run_start", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "start_epoch", ",", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'epoch % d / %d  lr %e'", ",", "epoch", ",", "self", ".", "args", ".", "epochs", ",", "self", ".", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ")", "\n", "\n", "self", ".", "model", ".", "drop_path_prob", "=", "self", ".", "args", ".", "drop_path_prob", "*", "epoch", "/", "self", ".", "args", ".", "epochs", "\n", "\n", "train_acc", ",", "train_obj", "=", "self", ".", "train", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'train loss %e, train acc %f'", ",", "train_obj", ",", "train_acc", ")", "\n", "\n", "valid_acc_top1", ",", "valid_acc_top5", ",", "valid_obj", "=", "self", ".", "infer", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'valid loss %e, top1 valid acc %f top5 valid acc %f'", ",", "\n", "valid_obj", ",", "valid_acc_top1", ",", "valid_acc_top5", ")", "\n", "self", ".", "logger", ".", "info", "(", "'best valid acc %f'", ",", "self", ".", "best_acc_top1", ")", "\n", "\n", "is_best", "=", "False", "\n", "if", "valid_acc_top1", ">", "self", ".", "best_acc_top1", ":", "\n", "                ", "self", ".", "best_acc_top1", "=", "valid_acc_top1", "\n", "is_best", "=", "True", "\n", "\n", "", "dutils", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'dur_time'", ":", "self", ".", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'drop_path_prob'", ":", "self", ".", "args", ".", "drop_path_prob", ",", "\n", "'best_acc_top1'", ":", "self", ".", "best_acc_top1", ",", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork.train": [[182, 214], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "train.TrainNetwork.model.train", "enumerate", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "train.TrainNetwork.optimizer.zero_grad", "train.TrainNetwork.model", "train.TrainNetwork.criterion", "train.TrainNetwork.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "train.TrainNetwork.optimizer.step", "utils.accuracy", "input.cuda.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "train.TrainNetwork.criterion", "train.TrainNetwork.model.parameters", "train.TrainNetwork.item", "prec1.item", "prec5.item", "train.TrainNetwork.logger.info"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "}", ",", "is_best", ",", "self", ".", "args", ".", "save", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'train epoches %d, best_acc_top1 %f, dur_time %s'", ",", "\n", "self", ".", "args", ".", "epochs", ",", "self", ".", "best_acc_top1", ",", "dutils", ".", "calc_time", "(", "self", ".", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ")", ")", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "objs", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_queue", ")", ":", "\n", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "self", ".", "model", "(", "input", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "self", ".", "args", ".", "auxiliary", ":", "\n", "                ", "loss_aux", "=", "self", ".", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "self", ".", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "dutils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train.TrainNetwork.infer": [[215, 237], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "train.TrainNetwork.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "train.TrainNetwork.model", "train.TrainNetwork.criterion", "utils.accuracy", "input.cuda.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "train.TrainNetwork.item", "prec1.item", "prec5.item", "train.TrainNetwork.logger.info"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n", "", "def", "infer", "(", "self", ")", ":", "\n", "        ", "objs", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "self", ".", "valid_queue", ")", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "input", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "dutils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.main": [[64, 176], ["numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "time.time", "torch.CrossEntropyLoss", "model_search.Network", "model.cuda.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils._data_transforms_cifar", "torchvision.CIFAR10", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "architect.Architect", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "numpy.save", "numpy.save", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "separate_loss.ConvSeparateLoss", "separate_loss.TriSeparateLoss", "utils.count_parameters_in_MB", "model.cuda.parameters", "model.cuda.arch_parameters", "range", "numpy.floor", "os.path.isfile", "float", "os.path.isfile", "torch.optim.lr_scheduler.CosineAnnealingLR.load_state_dict", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logging.info", "model.cuda.genotype", "logging.info", "logging.info", "logging.info", "model.cuda.update_history", "train_search.train", "logging.info", "train_search.infer", "logging.info", "utils.save_checkpoint", "logging.info", "utils.save_file", "utils.save_file", "os.path.join", "torch.sigmoid().data.cpu().numpy", "os.path.join", "torch.sigmoid().data.cpu().numpy", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.optim.SGD.load_state_dict", "architect.Architect.arch_optimizer.load_state_dict", "model.cuda.restore", "logging.info", "logging.info", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "torch.sigmoid", "torch.sigmoid", "utils.calc_time", "os.path.join", "os.path.join", "torch.optim.lr_scheduler.CosineAnnealingLR.state_dict", "torch.optim.SGD.state_dict", "architect.Architect.optimizer.state_dict", "model.cuda.states", "os.path.join", "os.path.join", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "time.time", "time.time", "torch.sigmoid", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils._data_transforms_cifar", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.genotype", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.update_history", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.infer", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_checkpoint", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_file", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_file", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.restore", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.calc_time", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.states"], ["CIFAR_CLASSES", "=", "10", "\n", "\n", "def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "0", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "\"\"\"Noise Darts\"\"\"", "\n", "if", "args", ".", "noise_darts", ":", "\n", "    ", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'noise_type'", "]", "=", "args", ".", "noise_type", "\n", "SearchControllerConf", "[", "'noise_darts'", "]", "[", "'T_max'", "]", "=", "args", ".", "max_step", "\n", "", "else", ":", "\n", "    ", "SearchControllerConf", "[", "'noise_darts'", "]", "=", "None", "\n", "\n", "", "\"\"\"Random Darts\"\"\"", "\n", "if", "args", ".", "random_search", ":", "\n", "    ", "SearchControllerConf", "[", "'random_search'", "]", "[", "'num_identity'", "]", "=", "args", ".", "num_identity", "\n", "SearchControllerConf", "[", "'random_search'", "]", "[", "'num_arch'", "]", "=", "args", ".", "num_arch", "\n", "SearchControllerConf", "[", "'random_search'", "]", "[", "'flops_threshold'", "]", "=", "args", ".", "flops_threshold", "\n", "", "else", ":", "\n", "    ", "SearchControllerConf", "[", "'random_search'", "]", "=", "None", "\n", "\n", "", "\"\"\"Reweight Darts\"\"\"", "\n", "SearchControllerConf", "[", "'reweight'", "]", "=", "args", ".", "reweight", "\n", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "criterion", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "if", "args", ".", "random_search", ":", "\n", "    ", "genotype_list", "=", "model", ".", "random_generate", "(", ")", "\n", "logging", ".", "info", "(", "'genotype list = %s'", ",", "genotype_list", ")", "\n", "logging", ".", "info", "(", "'generate done!'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "model_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "## single level", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "model_optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "    ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "logging", ".", "info", "(", "'epoch %d lr %e'", ",", "epoch", ",", "lr", ")", "\n", "\n", "genotype", "=", "model", ".", "genotype", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'genotype = %s'", ",", "genotype", ")", "\n", "\n", "logging", ".", "info", "(", "F", ".", "softmax", "(", "model", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ")", "\n", "logging", ".", "info", "(", "F", ".", "softmax", "(", "model", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ")", "\n", "model", ".", "update_history", "(", ")", "\n", "\n", "# training and search the model", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "model_optimizer", ",", "lr", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "\n", "# validation the model", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "\n", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "utils", ".", "save_file", "(", "recoder", "=", "model", ".", "alphas_normal_history", ",", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'normal'", ")", ")", "\n", "utils", ".", "save_file", "(", "recoder", "=", "model", ".", "alphas_reduce_history", ",", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'reduce'", ")", ")", "\n", "\n", "\n", "", "", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "model_optimizer", ",", "lr", ",", "epoch", "=", "None", ")", ":", "\n", "  ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train": [[178, 238], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "enumerate", "model.train", "Variable().cuda.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model_optimizer.zero_grad", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.backward", "torch.utils.clip_grad_norm", "model_optimizer.step", "utils.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "next", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "architect.step", "arch_optimizer.zero_grad", "criterion", "criterion", "model.parameters", "arch_optimizer.step", "loss.item", "prec1.item", "prec5.item", "logging.info", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable", "iter", "torch.sigmoid", "torch.sigmoid", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.train", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step"], ["# Get a random minibatch from the search queue(validation set) with replacement", "\n", "input_search", ",", "target_search", "=", "next", "(", "iter", "(", "valid_queue", ")", ")", "\n", "input_search", "=", "Variable", "(", "input_search", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target_search", "=", "Variable", "(", "target_search", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# bi-level", "\n", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ",", "lr", ",", "model_optimizer", ",", "unrolled", "=", "args", ".", "unrolled", ",", "epoch", "=", "epoch", ")", "\n", "\n", "# single-level", "\n", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "## single-level", "\n", "# arch_optimizer.zero_grad()", "\n", "\n", "logits", "=", "model", "(", "input", ",", "epoch", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "\n", "# Update the network parameters", "\n", "model_optimizer", ".", "step", "(", ")", "\n", "## single level", "\n", "# arch_optimizer.step()", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "'train %03d loss: %e top1: %f top5: %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n", "\n", "", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "      ", "input", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.train_search.infer": [[240, 264], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "criterion", "utils.accuracy", "Variable().cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "criterion.item", "prec1.item", "prec5.item", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update"], ["  ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.__init__": [[10, 19], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "architect.Architect.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters"], ["\n", "", "class", "Architect", "(", "object", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "\n", "    ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "args", ".", "arch_lr_gamma", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step": [[20, 27], ["architect.Architect.optimizer.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architect.Architect.model._loss", "loss.backward", "architect.Architect.optimizer.step", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.step"], ["", "def", "_compute_unrolled_model", "(", "self", ",", "input", ",", "target", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "    ", "\"\"\"\n    One step unrolled weights serve as the surrogate for w(\\alpha)\n    \"\"\"", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "theta", "=", "_concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "try", ":", "\n", "      ", "moment", "=", "_concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "v", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul_", "(", "self", ".", "network_momentum", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.compute_Hw": [[28, 35], ["architect.Architect.zero_grads", "architect.Architect.zero_grads", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "architect.Architect.model._loss", "architect.Architect._hessian", "architect.Architect.model.parameters", "architect.Architect.model.arch_parameters", "architect.Architect.model.arch_parameters", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.zero_grads", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.zero_grads", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect._hessian", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model_search.Network.arch_parameters"], ["", "except", ":", "\n", "      ", "moment", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "\n", "", "dtheta", "=", "_concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", ".", "data", "+", "self", ".", "network_weight_decay", "*", "theta", "\n", "\n", "# theta.sub(eta, moment+dtheta): w - eta*(moment+dw)", "\n", "unrolled_model", "=", "self", ".", "_construct_model_from_theta", "(", "theta", ".", "sub", "(", "eta", ",", "moment", "+", "dtheta", ")", ")", "\n", "return", "unrolled_model", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.zero_grads": [[36, 41], ["p.grad.detach_", "p.grad.zero_"], "methods", ["None"], ["\n", "", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ",", "unrolled", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "unrolled", ":", "\n", "        ", "self", ".", "_backward_step_unrolled", "(", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.compute_eigenvalues": [[42, 45], ["architect.Architect.compute_Hw", "numpy.linalg.eigvals", "architect.Architect.hessian.cpu().data.numpy", "architect.Architect.hessian.cpu"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect.compute_Hw"], ["", "else", ":", "\n", "        ", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect.Architect._hessian": [[46, 75], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "range", "p.numel", "grad.contiguous().view", "inp.numel", "torch.tensor().type_as.data[].add_", "torch.tensor().type_as.data[].add_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inp.view", "torch.autograd.Variable().type_as", "torch.autograd.Variable().type_as", "torch.tensor().type_as.data[].add_", "torch.tensor().type_as.data[].add_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grad.contiguous", "architect.Architect.gradient", "sum", "torch.autograd.Variable().type_as.clone().type_as", "torch.autograd.Variable", "torch.autograd.Variable", "x.numel", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable().type_as.clone", "torch.autograd.Variable().type_as.clone().type_as", "torch.autograd.Variable().type_as.clone"], "methods", ["None"], ["\n", "", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ",", "epoch", ")", ":", "\n", "    ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "", "def", "_backward_step_unrolled", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "# one-step unrolled weights", "\n", "    ", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "input_train", ",", "target_train", ",", "eta", ",", "network_optimizer", ")", "\n", "unrolled_loss", "=", "unrolled_model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "\n", "unrolled_loss", ".", "backward", "(", ")", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "arch_parameters", "(", ")", "]", "#", "\n", "vector", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_product", "(", "vector", ",", "input_train", ",", "target_train", ")", "\n", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "      ", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "", "for", "v", ",", "g", "in", "zip", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "      ", "if", "v", ".", "grad", "is", "None", ":", "\n", "        ", "v", ".", "grad", "=", "Variable", "(", "g", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "v", ".", "grad", ".", "data", ".", "copy_", "(", "g", ".", "data", ")", "\n", "\n", "", "", "", "def", "_construct_model_from_theta", "(", "self", ",", "theta", ")", ":", "\n", "    ", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "#", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.architect._concat": [[6, 8], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "def", "_concat", "(", "xs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.parse_architecture.generate_weight": [[6, 277], ["numpy.array", "numpy.array"], "function", ["None"], ["def", "generate_weight", "(", ")", ":", "\n", "# loss weight: 10;   learning rate: 00025   1", "\n", "# normal_weight = np.array([[0.9271, 0.0565, 0.0720, 0.9485, 0.0640, 0.0624, 0.9498],", "\n", "#     [0.7997, 0.0456, 0.0569, 0.8913, 0.9074, 0.0643, 0.0803],", "\n", "#     [0.1584, 0.0567, 0.1089, 0.0777, 0.0888, 0.0445, 0.0727],", "\n", "#     [0.0512, 0.0450, 0.0721, 0.0824, 0.0478, 0.0575, 0.0583],", "\n", "#     [0.0323, 0.0343, 0.0350, 0.0481, 0.0663, 0.0632, 0.0601],", "\n", "#     [0.9427, 0.0737, 0.0922, 0.0669, 0.0640, 0.9387, 0.0660],", "\n", "#     [0.0587, 0.0596, 0.0670, 0.0612, 0.0602, 0.0554, 0.0552],", "\n", "#     [0.0495, 0.0532, 0.0557, 0.0615, 0.8427, 0.0608, 0.8926],", "\n", "#     [0.0526, 0.0577, 0.0674, 0.0648, 0.0591, 0.0596, 0.0601],", "\n", "#     [0.0622, 0.0575, 0.0667, 0.9278, 0.0636, 0.0669, 0.0696],", "\n", "#     [0.0561, 0.0537, 0.0607, 0.0734, 0.9054, 0.0648, 0.0667],", "\n", "#     [0.0445, 0.0452, 0.0399, 0.7752, 0.8680, 0.8941, 0.8895],", "\n", "#     [0.0456, 0.0470, 0.9285, 0.0642, 0.0602, 0.8850, 0.8618],", "\n", "#     [0.0462, 0.0487, 0.0479, 0.0560, 0.0657, 0.8895, 0.0679]])", "\n", "# reduce_weight = np.array([[0.9321, 0.0652, 0.9390, 0.0691, 0.0639, 0.9389, 0.9414],", "\n", "#     [0.9388, 0.9388, 0.9319, 0.9273, 0.0670, 0.0639, 0.0622],", "\n", "#     [0.9333, 0.0648, 0.9343, 0.9352, 0.9352, 0.9354, 0.9336],", "\n", "#     [0.0682, 0.0671, 0.0617, 0.9357, 0.9328, 0.9380, 0.9354],", "\n", "#     [0.0625, 0.0648, 0.9392, 0.9331, 0.0635, 0.0637, 0.0612],", "\n", "#     [0.9349, 0.9373, 0.0635, 0.0643, 0.9380, 0.9359, 0.0631],", "\n", "#     [0.0661, 0.0655, 0.0625, 0.9362, 0.9356, 0.0653, 0.9338],", "\n", "#     [0.0640, 0.0646, 0.9375, 0.0650, 0.9342, 0.9378, 0.0647],", "\n", "#     [0.0618, 0.0626, 0.9268, 0.0650, 0.9344, 0.0619, 0.9347],", "\n", "#     [0.9339, 0.9353, 0.9362, 0.0620, 0.9358, 0.0641, 0.9368],", "\n", "#     [0.0661, 0.0660, 0.9369, 0.0632, 0.0639, 0.9361, 0.9365],", "\n", "#     [0.0626, 0.0635, 0.9367, 0.9365, 0.0629, 0.9345, 0.0646],", "\n", "#     [0.0619, 0.0626, 0.9352, 0.0639, 0.9374, 0.0639, 0.9349],", "\n", "#     [0.0617, 0.0628, 0.0637, 0.9359, 0.0638, 0.9351, 0.9336]])", "\n", "\n", "## loss weight: 10;   learning rate: 00025", "\n", "# normal_weight = np.array([[0.9349, 0.0654, 0.0888, 0.0846, 0.0955, 0.0758, 0.9275],", "\n", "#  [0.7077, 0.0456, 0.0566, 0.8634, 0.5202, 0.0623, 0.0791],", "\n", "#  [0.0756, 0.0567, 0.0740, 0.0553, 0.0716, 0.0712, 0.0658],", "\n", "#  [0.0494, 0.0512, 0.0653, 0.0516, 0.0646, 0.0689, 0.0743],", "\n", "#  [0.0371, 0.0417, 0.0438, 0.0654, 0.0501, 0.0674, 0.0564],", "\n", "#  [0.9266, 0.0580, 0.0714, 0.9356, 0.0633, 0.9428, 0.0587],", "\n", "#  [0.0550, 0.0559, 0.0643, 0.0689, 0.0648, 0.0614, 0.0567],", "\n", "#  [0.0450, 0.0496, 0.0512, 0.0681, 0.7530, 0.0672, 0.8575],", "\n", "#  [0.0448, 0.0474, 0.0597, 0.0644, 0.0710, 0.0697, 0.0603],", "\n", "#  [0.0647, 0.0605, 0.0663, 0.9192, 0.0637, 0.9278, 0.0690],", "\n", "#  [0.0517, 0.0540, 0.0611, 0.0665, 0.9023, 0.0593, 0.0627],", "\n", "#  [0.0438, 0.0467, 0.0457, 0.8502, 0.7561, 0.0677, 0.0565],", "\n", "#  [0.0464, 0.0478, 0.9301, 0.0605, 0.0555, 0.0516, 0.0589],", "\n", "#  [0.0466, 0.0483, 0.0463, 0.0603, 0.0648, 0.8834, 0.0702]])", "\n", "#", "\n", "# reduce_weight = np.array(", "\n", "#     [[0.9402, 0.0742, 0.9364, 0.9296, 0.0683, 0.9372, 0.9334],", "\n", "#      [0.9368, 0.9382, 0.9325, 0.9317, 0.0624, 0.0679, 0.0684],", "\n", "#      [0.9387, 0.0695, 0.9347, 0.9364, 0.0661, 0.9376, 0.9316],", "\n", "#      [0.0657, 0.0671, 0.0634, 0.9356, 0.9332, 0.9375, 0.9358],", "\n", "#      [0.0607, 0.0629, 0.9357, 0.9309, 0.0620, 0.0620, 0.0670],", "\n", "#      [0.9374, 0.9384, 0.9343, 0.9325, 0.9394, 0.9374, 0.9366],", "\n", "#      [0.0651, 0.0655, 0.0625, 0.0680, 0.9352, 0.0656, 0.9334],", "\n", "#      [0.0644, 0.0659, 0.9359, 0.0655, 0.0626, 0.9353, 0.0662],", "\n", "#      [0.0633, 0.0657, 0.9377, 0.0665, 0.9377, 0.0621, 0.9366],", "\n", "#      [0.9374, 0.0662, 0.9369, 0.0628, 0.9371, 0.0642, 0.9335],", "\n", "#      [0.0637, 0.0650, 0.9364, 0.0634, 0.0625, 0.9345, 0.9342],", "\n", "#      [0.0615, 0.0618, 0.9327, 0.0648, 0.0647, 0.0628, 0.0642],", "\n", "#      [0.0605, 0.0609, 0.9289, 0.0647, 0.9363, 0.9339, 0.9361],", "\n", "#      [0.0618, 0.0625, 0.0573, 0.9362, 0.0645, 0.9334, 0.9366]]", "\n", "# )", "\n", "\n", "# normal_weight = np.array(", "\n", "#     [[0.9243, 0.0566, 0.0705, 0.9338, 0.0711, 0.0723, 0.9424],", "\n", "#      [0.8500, 0.0466, 0.0569, 0.8545, 0.9263, 0.0677, 0.0665],", "\n", "#      [0.7379, 0.0498, 0.0705, 0.0581, 0.0750, 0.0617, 0.0695],", "\n", "#      [0.0813, 0.0605, 0.0912, 0.0827, 0.0602, 0.0655, 0.0623],", "\n", "#      [0.0342, 0.0367, 0.0338, 0.0612, 0.0790, 0.0739, 0.0489],", "\n", "#      [0.9302, 0.0662, 0.0775, 0.0680, 0.0590, 0.9451, 0.0634],", "\n", "#      [0.0601, 0.0652, 0.0739, 0.0609, 0.0687, 0.0643, 0.0551],", "\n", "#      [0.0469, 0.0515, 0.0521, 0.0623, 0.8476, 0.0667, 0.9127],", "\n", "#      [0.0457, 0.0529, 0.0590, 0.0666, 0.0558, 0.0667, 0.0730],", "\n", "#      [0.0527, 0.0526, 0.0601, 0.9342, 0.0668, 0.9351, 0.0700],", "\n", "#      [0.0529, 0.0539, 0.0630, 0.0735, 0.9167, 0.0745, 0.0651],", "\n", "#      [0.0411, 0.0426, 0.0373, 0.8314, 0.8501, 0.0713, 0.8858],", "\n", "#      [0.0411, 0.0452, 0.9011, 0.0686, 0.0697, 0.8395, 0.8989],", "\n", "#      [0.0442, 0.0472, 0.0440, 0.0578, 0.0625, 0.9018, 0.0731]]", "\n", "# )", "\n", "#", "\n", "# reduce_weight = np.array(", "\n", "#     [[0.9315, 0.0632, 0.9403, 0.9298, 0.0683, 0.9372, 0.9342],", "\n", "#      [0.9348, 0.9333, 0.9371, 0.9362, 0.0668, 0.9372, 0.0666],", "\n", "#      [0.9353, 0.9365, 0.9364, 0.9334, 0.9334, 0.9384, 0.9371],", "\n", "#      [0.0640, 0.0625, 0.0631, 0.9349, 0.9363, 0.9383, 0.9381],", "\n", "#      [0.0594, 0.0618, 0.9354, 0.9306, 0.0636, 0.0657, 0.0666],", "\n", "#      [0.9353, 0.9359, 0.0638, 0.0641, 0.9374, 0.9353, 0.9346],", "\n", "#      [0.0638, 0.0633, 0.9344, 0.0664, 0.9364, 0.0640, 0.9345],", "\n", "#      [0.0621, 0.0632, 0.9331, 0.0658, 0.9346, 0.9342, 0.0645],", "\n", "#      [0.0625, 0.0629, 0.9300, 0.0664, 0.9373, 0.0647, 0.9359],", "\n", "#      [0.0628, 0.0634, 0.9374, 0.0626, 0.9364, 0.0634, 0.9344],", "\n", "#      [0.0651, 0.0650, 0.9364, 0.0616, 0.0633, 0.0650, 0.9367],", "\n", "#      [0.0611, 0.0633, 0.9347, 0.9360, 0.0622, 0.9346, 0.0634],", "\n", "#      [0.0609, 0.0619, 0.9299, 0.0662, 0.9355, 0.0655, 0.9344],", "\n", "#      [0.0595, 0.0613, 0.0561, 0.9358, 0.0652, 0.9354, 0.9355]]", "\n", "# )", "\n", "#", "\n", "\n", "# normal_weight = np.array(", "\n", "#     [[0.9270, 0.0547, 0.0669, 0.9432, 0.0739, 0.0773, 0.9268],", "\n", "#      [0.8769, 0.0486, 0.0597, 0.8739, 0.9010, 0.0692, 0.0769],", "\n", "#      [0.1161, 0.0648, 0.1094, 0.0659, 0.0570, 0.0596, 0.0590],", "\n", "#      [0.0443, 0.0437, 0.0640, 0.0805, 0.0630, 0.0650, 0.0667],", "\n", "#      [0.0321, 0.0345, 0.0369, 0.0588, 0.0803, 0.0853, 0.0661],", "\n", "#      [0.9402, 0.0585, 0.0691, 0.9353, 0.0621, 0.9368, 0.0674],", "\n", "#      [0.0634, 0.0630, 0.0718, 0.0600, 0.0722, 0.0642, 0.0577],", "\n", "#      [0.0482, 0.0533, 0.0601, 0.0672, 0.8269, 0.0708, 0.0655],", "\n", "#      [0.0525, 0.0540, 0.0657, 0.0602, 0.0672, 0.0654, 0.0801],", "\n", "#      [0.0653, 0.0593, 0.0667, 0.9255, 0.0679, 0.0693, 0.0680],", "\n", "#      [0.0475, 0.0480, 0.0563, 0.0668, 0.9011, 0.0633, 0.0692],", "\n", "#      [0.0409, 0.0434, 0.0409, 0.6960, 0.8011, 0.0637, 0.8440],", "\n", "#      [0.0443, 0.0469, 0.9284, 0.0615, 0.0625, 0.8495, 0.0631],", "\n", "#      [0.0465, 0.0471, 0.0472, 0.0596, 0.0666, 0.8923, 0.0715]]", "\n", "# )", "\n", "#", "\n", "# reduce_weight = np.array(", "\n", "#     [[0.9408, 0.0725, 0.9339, 0.9339, 0.0632, 0.9340, 0.9296],", "\n", "#      [0.9357, 0.9363, 0.0676, 0.9341, 0.0680, 0.0659, 0.0707],", "\n", "#      [0.9395, 0.9411, 0.9351, 0.9329, 0.0614, 0.9350, 0.9338],", "\n", "#      [0.0639, 0.0641, 0.0657, 0.9350, 0.9366, 0.9360, 0.9380],", "\n", "#      [0.0584, 0.0604, 0.9332, 0.9356, 0.0625, 0.0618, 0.0623],", "\n", "#      [0.9379, 0.9391, 0.9367, 0.0625, 0.9365, 0.9354, 0.9350],", "\n", "#      [0.0638, 0.0636, 0.9324, 0.9356, 0.9376, 0.0639, 0.9340],", "\n", "#      [0.0629, 0.0632, 0.9350, 0.9352, 0.9353, 0.9350, 0.0648],", "\n", "#      [0.0621, 0.0633, 0.9356, 0.0651, 0.9366, 0.0634, 0.9368],", "\n", "#      [0.0673, 0.0684, 0.9379, 0.0635, 0.9366, 0.0657, 0.9362],", "\n", "#      [0.0629, 0.0635, 0.9372, 0.0629, 0.0625, 0.9338, 0.9361],", "\n", "#      [0.0610, 0.0627, 0.9322, 0.0624, 0.0629, 0.9349, 0.0649],", "\n", "#      [0.0611, 0.0633, 0.9343, 0.0638, 0.9355, 0.0645, 0.9332],", "\n", "#      [0.0614, 0.0635, 0.0581, 0.0638, 0.0668, 0.9354, 0.9331]]", "\n", "# )", "\n", "\n", "# loss weight: 15;   learning rate: 0025   1", "\n", "# normal_weight = np.array(", "\n", "#     [[0.8874, 0.0314, 0.0379, 0.9482, 0.9063, 0.9414, 0.9383],", "\n", "#      [0.0341, 0.0348, 0.0401, 0.0478, 0.5464, 0.6835, 0.0444],", "\n", "#      [0.0395, 0.0360, 0.0582, 0.0580, 0.0596, 0.0522, 0.0460],", "\n", "#      [0.0356, 0.0320, 0.0426, 0.0844, 0.0359, 0.0535, 0.0503],", "\n", "#      [0.0259, 0.0269, 0.0239, 0.0396, 0.0304, 0.0469, 0.0459],", "\n", "#      [0.0336, 0.0361, 0.0463, 0.0446, 0.0443, 0.0452, 0.0445],", "\n", "#      [0.0331, 0.0307, 0.0383, 0.0481, 0.0451, 0.0432, 0.0426],", "\n", "#      [0.0245, 0.0256, 0.0202, 0.0454, 0.0437, 0.1048, 0.0459],", "\n", "#      [0.0246, 0.0254, 0.0394, 0.0414, 0.0340, 0.0408, 0.0334],", "\n", "#      [0.0316, 0.0315, 0.0396, 0.0484, 0.0427, 0.0429, 0.0474],", "\n", "#      [0.0333, 0.0317, 0.0408, 0.0477, 0.0425, 0.0388, 0.0497],", "\n", "#      [0.0255, 0.0262, 0.0202, 0.0636, 0.0433, 0.0393, 0.0395],", "\n", "#      [0.0253, 0.0261, 0.0396, 0.0421, 0.0432, 0.0432, 0.0356],", "\n", "#      [0.0233, 0.0250, 0.0376, 0.0370, 0.0386, 0.0377, 0.0475]]", "\n", "# )", "\n", "#", "\n", "# reduce_weight = np.array(", "\n", "#     [[0.9545, 0.9575, 0.9530, 0.9581, 0.9552, 0.9532, 0.9543],", "\n", "#      [0.0471, 0.0469, 0.9496, 0.0484, 0.0458, 0.0459, 0.0467],", "\n", "#      [0.9548, 0.0481, 0.9551, 0.9540, 0.9552, 0.9535, 0.0456],", "\n", "#      [0.0465, 0.0464, 0.0460, 0.9520, 0.9524, 0.9530, 0.0462],", "\n", "#      [0.0444, 0.0445, 0.9557, 0.0459, 0.0456, 0.0453, 0.9550],", "\n", "#      [0.9554, 0.9560, 0.9556, 0.0456, 0.9544, 0.9548, 0.0470],", "\n", "#      [0.9540, 0.0456, 0.0448, 0.9533, 0.9524, 0.9543, 0.0454],", "\n", "#      [0.0456, 0.0456, 0.9563, 0.0471, 0.9537, 0.9546, 0.0459],", "\n", "#      [0.0446, 0.0444, 0.9534, 0.9531, 0.9525, 0.0452, 0.0474],", "\n", "#      [0.9545, 0.9552, 0.9550, 0.9542, 0.9536, 0.0469, 0.9549],", "\n", "#      [0.0458, 0.0459, 0.0471, 0.9547, 0.9532, 0.9533, 0.9533],", "\n", "#      [0.0437, 0.0438, 0.9528, 0.9554, 0.0465, 0.9548, 0.0460],", "\n", "#      [0.0432, 0.0430, 0.0423, 0.9537, 0.9547, 0.0453, 0.9545],", "\n", "#      [0.0431, 0.0432, 0.0403, 0.0466, 0.0452, 0.9548, 0.9542]]", "\n", "# )", "\n", "#", "\n", "# normal_weight = np.array(", "\n", "#     [[0.9012, 0.0306, 0.0379, 0.9492, 0.9345, 0.9478, 0.9440],", "\n", "#     [0.0353, 0.0292, 0.0362, 0.0518, 0.8991, 0.9322, 0.0451],", "\n", "#     [0.0346, 0.0341, 0.0413, 0.0491, 0.0415, 0.0421, 0.0412],", "\n", "#     [0.0344, 0.0322, 0.0387, 0.9434, 0.0485, 0.0453, 0.0560],", "\n", "#     [0.0267, 0.0270, 0.0208, 0.0396, 0.0446, 0.0420, 0.0441],", "\n", "#     [0.0311, 0.0319, 0.0398, 0.0411, 0.0401, 0.0474, 0.0445],", "\n", "#     [0.0332, 0.0325, 0.0419, 0.0425, 0.0437, 0.0446, 0.0479],", "\n", "#     [0.0246, 0.0263, 0.0215, 0.0558, 0.0438, 0.0419, 0.0468],", "\n", "#     [0.0292, 0.0290, 0.0350, 0.0408, 0.0448, 0.0393, 0.0440],", "\n", "#     [0.0320, 0.0332, 0.0409, 0.0444, 0.0412, 0.0445, 0.0451],", "\n", "#     [0.0314, 0.0302, 0.0386, 0.0392, 0.8492, 0.8863, 0.8434],", "\n", "#     [0.0250, 0.0264, 0.0215, 0.0316, 0.0435, 0.0398, 0.0467],", "\n", "#     [0.0283, 0.0285, 0.0342, 0.0532, 0.0466, 0.1305, 0.0414],", "\n", "#     [0.0222, 0.0229, 0.0372, 0.0393, 0.0403, 0.0417, 0.0395]]", "\n", "# )", "\n", "#", "\n", "# reduce_weight = np.array(", "\n", "#     [[0.9550, 0.0497, 0.9595, 0.9546, 0.9552, 0.9605, 0.0467],", "\n", "#      [0.9486, 0.0427, 0.0453, 0.0471, 0.0470, 0.9545, 0.9553],", "\n", "#      [0.9559, 0.0483, 0.9558, 0.0453, 0.9542, 0.9551, 0.0451],", "\n", "#      [0.0452, 0.0453, 0.0462, 0.9545, 0.0463, 0.9539, 0.9544],", "\n", "#      [0.0453, 0.0457, 0.9574, 0.0443, 0.0448, 0.9547, 0.9519],", "\n", "#      [0.9533, 0.0464, 0.9561, 0.0435, 0.9526, 0.9537, 0.9536],", "\n", "#      [0.0431, 0.0439, 0.0454, 0.9533, 0.9542, 0.9534, 0.9543],", "\n", "#      [0.0418, 0.0439, 0.9573, 0.0442, 0.9520, 0.9562, 0.0449],", "\n", "#      [0.0416, 0.0437, 0.0481, 0.9517, 0.9529, 0.0441, 0.9532],", "\n", "#      [0.9532, 0.9546, 0.9532, 0.9539, 0.9540, 0.9544, 0.9541],", "\n", "#      [0.0445, 0.0451, 0.0463, 0.0458, 0.9530, 0.9547, 0.9541],", "\n", "#      [0.0433, 0.0450, 0.9574, 0.9534, 0.0460, 0.9543, 0.0454],", "\n", "#      [0.0428, 0.0445, 0.0473, 0.0458, 0.9538, 0.0453, 0.9540],", "\n", "#      [0.0415, 0.0427, 0.9501, 0.0450, 0.0460, 0.9538, 0.9526]]", "\n", "# )", "\n", "#", "\n", "# normal_weight = np.array(", "\n", "#     [[0.8124, 0.0305, 0.0347, 0.9306, 0.8672, 0.9373, 0.9321],", "\n", "#      [0.0385, 0.0356, 0.0409, 0.0621, 0.2386, 0.0491, 0.0490],", "\n", "#      [0.0362, 0.0352, 0.0410, 0.0481, 0.0536, 0.0428, 0.0415],", "\n", "#      [0.0457, 0.0381, 0.0467, 0.0523, 0.0367, 0.0513, 0.0450],", "\n", "#      [0.0302, 0.0307, 0.0272, 0.0454, 0.0484, 0.0440, 0.0493],", "\n", "#      [0.0355, 0.0349, 0.0403, 0.0426, 0.0405, 0.0457, 0.0428],", "\n", "#      [0.0363, 0.0336, 0.0385, 0.0464, 0.0483, 0.0393, 0.0445],", "\n", "#      [0.0315, 0.0310, 0.0267, 0.0989, 0.0491, 0.0398, 0.0406],", "\n", "#      [0.0271, 0.0273, 0.0394, 0.0361, 0.0384, 0.0376, 0.0435],", "\n", "#      [0.0322, 0.0312, 0.0358, 0.0413, 0.2389, 0.0434, 0.0426],", "\n", "#      [0.0338, 0.0308, 0.0361, 0.0518, 0.0378, 0.0457, 0.0665],", "\n", "#      [0.0291, 0.0284, 0.0234, 0.0412, 0.0406, 0.0433, 0.0426],", "\n", "#      [0.0260, 0.0255, 0.0390, 0.0410, 0.0405, 0.0339, 0.0468],", "\n", "#      [0.0252, 0.0248, 0.0367, 0.0409, 0.0422, 0.0386, 0.0419]]", "\n", "# )", "\n", "#", "\n", "# reduce_weight = np.array(", "\n", "#     [[0.9554, 0.0514, 0.9571, 0.9525, 0.9536, 0.9579, 0.9548],", "\n", "#      [0.9526, 0.0459, 0.9561, 0.0476, 0.0461, 0.0490, 0.0474],", "\n", "#      [0.9544, 0.0477, 0.9570, 0.9535, 0.0460, 0.9535, 0.0468],", "\n", "#      [0.9546, 0.0471, 0.0453, 0.9538, 0.0451, 0.9548, 0.0473],", "\n", "#      [0.0454, 0.0458, 0.9587, 0.9507, 0.0470, 0.0465, 0.9535],", "\n", "#      [0.9550, 0.0470, 0.9546, 0.0457, 0.9547, 0.9543, 0.0461],", "\n", "#      [0.0454, 0.0452, 0.0464, 0.9545, 0.9541, 0.9534, 0.9545],", "\n", "#      [0.0447, 0.0445, 0.9539, 0.9539, 0.9526, 0.9527, 0.0446],", "\n", "#      [0.0450, 0.0448, 0.0453, 0.9535, 0.9544, 0.0466, 0.0456],", "\n", "#      [0.9541, 0.9550, 0.0464, 0.0457, 0.9534, 0.0454, 0.9531],", "\n", "#      [0.0456, 0.0460, 0.0463, 0.9543, 0.9549, 0.9548, 0.9539],", "\n", "#      [0.0447, 0.0450, 0.9562, 0.9539, 0.0465, 0.9541, 0.0455],", "\n", "#      [0.0435, 0.0440, 0.9544, 0.9530, 0.9531, 0.9544, 0.9539],", "\n", "#      [0.0438, 0.0441, 0.0423, 0.0458, 0.0463, 0.9543, 0.9530]]", "\n", "# )", "\n", "#", "\n", "    ", "normal_weight", "=", "np", ".", "array", "(", "\n", "[", "[", "0.9031", ",", "0.0328", ",", "0.0403", ",", "0.0428", ",", "0.8593", ",", "0.9326", ",", "0.9377", "]", ",", "\n", "[", "0.0329", ",", "0.0333", ",", "0.0384", ",", "0.9197", ",", "0.8230", ",", "0.0499", ",", "0.0449", "]", ",", "\n", "[", "0.0321", ",", "0.0333", ",", "0.0466", ",", "0.0517", ",", "0.0612", ",", "0.0460", ",", "0.0505", "]", ",", "\n", "[", "0.0291", ",", "0.0285", ",", "0.0363", ",", "0.0508", ",", "0.0346", ",", "0.0493", ",", "0.0538", "]", ",", "\n", "[", "0.0224", ",", "0.0235", ",", "0.0198", ",", "0.0532", ",", "0.0640", ",", "0.0562", ",", "0.0377", "]", ",", "\n", "[", "0.0292", ",", "0.0294", ",", "0.0367", ",", "0.0419", ",", "0.0454", ",", "0.0606", ",", "0.0422", "]", ",", "\n", "[", "0.0284", ",", "0.0278", ",", "0.0337", ",", "0.0469", ",", "0.0603", ",", "0.0400", ",", "0.0403", "]", ",", "\n", "[", "0.0229", ",", "0.0227", ",", "0.0171", ",", "0.0641", ",", "0.0388", ",", "0.0401", ",", "0.0458", "]", ",", "\n", "[", "0.0217", ",", "0.0223", ",", "0.0378", ",", "0.0255", ",", "0.0388", ",", "0.0499", ",", "0.0424", "]", ",", "\n", "[", "0.0279", ",", "0.0301", ",", "0.0377", ",", "0.0424", ",", "0.4117", ",", "0.0363", ",", "0.0459", "]", ",", "\n", "[", "0.0261", ",", "0.0266", ",", "0.0321", ",", "0.0455", ",", "0.0400", ",", "0.0416", ",", "0.1249", "]", ",", "\n", "[", "0.0219", ",", "0.0229", ",", "0.0175", ",", "0.0384", ",", "0.0398", ",", "0.0396", ",", "0.0446", "]", ",", "\n", "[", "0.0204", ",", "0.0209", ",", "0.0362", ",", "0.0373", ",", "0.0395", ",", "0.0275", ",", "0.0405", "]", ",", "\n", "[", "0.0195", ",", "0.0201", ",", "0.0346", ",", "0.0426", ",", "0.0326", ",", "0.0521", ",", "0.0409", "]", "]", "\n", ")", "\n", "\n", "reduce_weight", "=", "np", ".", "array", "(", "\n", "[", "[", "0.9555", ",", "0.0510", ",", "0.9578", ",", "0.9526", ",", "0.9537", ",", "0.9530", ",", "0.0469", "]", ",", "\n", "[", "0.0453", ",", "0.0455", ",", "0.0451", ",", "0.9518", ",", "0.9528", ",", "0.0431", ",", "0.9542", "]", ",", "\n", "[", "0.9544", ",", "0.9565", ",", "0.9548", ",", "0.9535", ",", "0.9547", ",", "0.9559", ",", "0.0453", "]", ",", "\n", "[", "0.0448", ",", "0.0453", ",", "0.0447", ",", "0.9534", ",", "0.9527", ",", "0.9577", ",", "0.0464", "]", ",", "\n", "[", "0.0409", ",", "0.0421", ",", "0.9513", ",", "0.0462", ",", "0.0471", ",", "0.9547", ",", "0.9541", "]", ",", "\n", "[", "0.9547", ",", "0.9559", ",", "0.9554", ",", "0.0472", ",", "0.9548", ",", "0.9535", ",", "0.9540", "]", ",", "\n", "[", "0.0454", ",", "0.0456", ",", "0.0460", ",", "0.9533", ",", "0.9548", ",", "0.9540", ",", "0.9535", "]", ",", "\n", "[", "0.0428", ",", "0.0437", ",", "0.9534", ",", "0.0458", ",", "0.9529", ",", "0.9540", ",", "0.0454", "]", ",", "\n", "[", "0.0432", ",", "0.0445", ",", "0.9563", ",", "0.9550", ",", "0.9539", ",", "0.0448", ",", "0.0459", "]", ",", "\n", "[", "0.9547", ",", "0.9557", ",", "0.9559", ",", "0.9546", ",", "0.9547", ",", "0.0457", ",", "0.9557", "]", ",", "\n", "[", "0.0458", ",", "0.0464", ",", "0.0465", ",", "0.9530", ",", "0.9539", ",", "0.9536", ",", "0.9526", "]", ",", "\n", "[", "0.0440", ",", "0.0453", ",", "0.0479", ",", "0.9541", ",", "0.0453", ",", "0.9543", ",", "0.0461", "]", ",", "\n", "[", "0.0439", ",", "0.0449", ",", "0.0478", ",", "0.9524", ",", "0.9530", ",", "0.9521", ",", "0.9529", "]", ",", "\n", "[", "0.0435", ",", "0.0450", ",", "0.0531", ",", "0.0462", ",", "0.0463", ",", "0.9543", ",", "0.9543", "]", "]", "\n", ")", "\n", "\n", "return", "(", "normal_weight", ",", "reduce_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.Cell.__init__": [[8, 24], ["torch.Module.__init__", "operations.ReLUConvBN", "model.Cell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.DCOCell._compile"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "reweight", "=", "False", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "weight", "=", "None", "\n", "if", "reduction", ":", "\n", "      ", "if", "not", "reweight", ":", "\n", "        ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "", "else", ":", "\n", "        ", "op_names", ",", "indices", ",", "weight", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.Cell._compile": [[25, 37], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["      ", "if", "not", "reweight", ":", "\n", "        ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "", "else", ":", "\n", "        ", "op_names", ",", "indices", ",", "weight", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ",", "weight", ")", "\n", "\n", "", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ",", "weight", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.Cell.forward": [[38, 58], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "utils.drop_path", "isinstance", "utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.drop_path", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.drop_path"], ["self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "      ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "self", ".", "_weight", "=", "weight", "\n", "\n", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.DCOCell.__init__": [[61, 75], ["torch.Module.__init__", "operations.ReLUConvBN", "model.DCOCell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.DCOCell._compile"], ["", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "          ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "if", "self", ".", "_weight", "==", "None", ":", "\n", "        ", "s", "=", "h1", "+", "h2", "\n", "", "else", ":", "\n", "        ", "s", "=", "self", ".", "_weight", "[", "2", "*", "i", "]", "*", "h1", "+", "self", ".", "_weight", "[", "2", "*", "i", "+", "1", "]", "*", "h2", "\n", "", "states", "+=", "[", "s", "]", "\n", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "# N\uff0cC\uff0cH, W", "\n", "\n", "\n", "", "", "class", "AuxiliaryHeadCIFAR", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.DCOCell._compile": [[76, 94], ["torch.ModuleDict", "torch.ModuleDict", "zip", "len", "str", "model.DCOCell._ops.keys", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleList", "torch.ModuleList", "str", "torch.ModuleList", "torch.ModuleList", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["    ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.DCOCell.forward": [[95, 118], ["model.DCOCell.preprocess0", "model.DCOCell.preprocess1", "model.DCOCell._ops.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ops.items", "sum", "utils.drop_path", "sum", "states.values", "op"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.drop_path"], ["\n", "", "", "class", "AuxiliaryHeadImageNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.AuxiliaryHeadCIFAR.__init__": [[120, 134], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["\n", "", "", "class", "NetworkCIFAR", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "reweight", "=", "False", ")", ":", "\n", "    ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "drop_path_prob", "=", "0", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.AuxiliaryHeadCIFAR.forward": [[135, 139], ["model.AuxiliaryHeadCIFAR.features", "model.AuxiliaryHeadCIFAR.classifier", "model.AuxiliaryHeadCIFAR.view", "model.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.AuxiliaryHeadImageNet.__init__": [[143, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "reweight", "=", "reweight", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.AuxiliaryHeadImageNet.forward": [[160, 164], ["model.AuxiliaryHeadImageNet.features", "model.AuxiliaryHeadImageNet.classifier", "model.AuxiliaryHeadImageNet.view", "model.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.NetworkCIFAR.__init__": [[167, 203], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.AuxiliaryHeadCIFAR", "model.Cell", "model.DCOCell"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["return", "logits", ",", "logits_aux", "\n", "\n", "\n", "", "", "class", "NetworkImageNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "    ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "xrange", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.NetworkCIFAR.forward": [[204, 215], ["model.NetworkCIFAR.stem", "enumerate", "model.NetworkCIFAR.global_pooling", "model.NetworkCIFAR.classifier", "model.NetworkCIFAR.view", "cell", "model.NetworkCIFAR.size", "model.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.NetworkImageNet.__init__": [[219, 260], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "xrange", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__"], ["if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.model.NetworkImageNet.forward": [[261, 273], ["model.NetworkImageNet.stem0", "model.NetworkImageNet.stem1", "enumerate", "model.NetworkImageNet.global_pooling", "model.NetworkImageNet.classifier", "model.NetworkImageNet.view", "cell", "model.NetworkImageNet.size", "model.NetworkImageNet.auxiliary_head"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.visualize.plot1": [[6, 39], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "plot1", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "assert", "len", "(", "genotype", ")", "%", "2", "==", "0", "\n", "steps", "=", "len", "(", "genotype", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "for", "k", "in", "[", "2", "*", "i", ",", "2", "*", "i", "+", "1", "]", ":", "\n", "      ", "try", ":", "\n", "        ", "op", ",", "j", "=", "genotype", "[", "k", "]", "\n", "", "except", ":", "\n", "        ", "op", ",", "j", ",", "_", "=", "genotype", "[", "k", "]", "\n", "", "if", "j", "==", "0", ":", "\n", "        ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "        ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "        ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.visualize.parse": [[40, 55], ["zip", "zip", "str", "ops.keys", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n", "", "import", "os", "\n", "from", "utils", "import", "create_exp_dir", "\n", "if", "__name__", "==", "'__main__'", ":", "\n", "  ", "if", "len", "(", "sys", ".", "argv", ")", "<", "2", ":", "\n", "    ", "print", "(", "\"usage:\\n python {} ARCH_NAME\"", ".", "format", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "genotype_name", "=", "sys", ".", "argv", "[", "1", "]", "\n", "file_path", "=", "'./vis/'", "+", "genotype_name", "\n", "create_exp_dir", "(", "file_path", ")", "\n", "try", ":", "\n", "    ", "genotype", "=", "eval", "(", "'genotypes.{}'", ".", "format", "(", "genotype_name", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "    ", "print", "(", "\"{} is not specified in genotypes.py\"", ".", "format", "(", "genotype_name", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.visualize.plot2": [[56, 88], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "visualize.parse", "parse.items", "parse.items", "graphviz.Digraph.node", "parse.items", "graphviz.Digraph.render", "graphviz.Digraph.node", "v.items", "graphviz.Digraph.edge", "dict", "dict", "str", "str", "graphviz.Digraph.edge", "int", "str", "str", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.parse"], ["sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "plot1", "(", "genotype", ".", "normal", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "\"normal\"", ")", ")", "\n", "plot1", "(", "genotype", ".", "reduce", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "\"reduction\"", ")", ")", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.__init__": [[11, 13], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.reset": [[14, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.AvgrageMeter.update": [[19, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__init__": [[46, 48], ["None"], "methods", ["None"], ["", "class", "Cutout", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.Cutout.__call__": [[49, 65], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.accuracy": [[25, 43], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Compute the top1 and top5 accuracy\n\n  \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "# Return the k largest elements of the given input tensor", "\n", "# along a given dimension -> N * k", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils._data_transforms_cifar": [[66, 95], ["torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "auto_augment.CIFAR10Policy", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["\n", "\n", "", "", "def", "_data_transforms_cifar10", "(", "args", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n", "\n", "", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "\n", "\n", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "  ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.count_parameters_in_MB": [[97, 99], ["numpy.sum", "numpy.prod", "v.size", "model.parameters"], "function", ["None"], ["shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_checkpoint": [[101, 107], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save"], ["  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n", "\n", "", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save": [[109, 111], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save"], ["  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load": [[113, 115], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.load"], ["x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.drop_path": [[117, 124], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["    ", "m", ",", "s", "=", "divmod", "(", "seconds", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "t", ",", "h", "=", "divmod", "(", "h", ",", "24", ")", "\n", "return", "{", "'day'", ":", "t", ",", "'hour'", ":", "h", ",", "'minute'", ":", "m", ",", "'second'", ":", "int", "(", "s", ")", "}", "\n", "\n", "", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.create_exp_dir": [[126, 136], ["print", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "    ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "      ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n", "\n", "", "", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "json", "\n", "def", "save_file", "(", "recoder", ",", "size", "=", "(", "14", ",", "7", ")", ",", "path", "=", "'./'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.calc_time": [[137, 142], ["divmod", "divmod", "divmod", "int"], "function", ["None"], ["    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "*", "size", ",", "figsize", "=", "(", "36", ",", "98", ")", ")", "\n", "num_ops", "=", "size", "[", "1", "]", "\n", "row", "=", "0", "\n", "col", "=", "0", "\n", "for", "(", "k", ",", "v", ")", "in", "recoder", ".", "items", "(", ")", ":", "\n", "        ", "axs", "[", "row", ",", "col", "]", ".", "set_title", "(", "k", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.parse": [[143, 190], ["range", "weights[].copy", "range", "sorted", "range", "gene.append", "weights[].copy", "range", "len", "list", "range", "sorted", "range", "sorted", "range", "NotImplementedError", "max", "enumerate", "gene.append", "len", "gene.append", "max", "range", "len", "range", "len", "genotypes.PRIMITIVES", "genotypes.PRIMITIVES"], "function", ["None"], ["axs", "[", "row", ",", "col", "]", ".", "plot", "(", "v", ",", "'r+'", ")", "\n", "if", "col", "==", "num_ops", "-", "1", ":", "\n", "            ", "col", "=", "0", "\n", "row", "+=", "1", "\n", "", "else", ":", "\n", "            ", "col", "+=", "1", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ",", "'w'", ")", "as", "outf", ":", "\n", "        ", "json", ".", "dump", "(", "recoder", ",", "outf", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.parse_genotype": [[193, 212], ["utils.parse", "utils.parse", "range", "genotypes.Genotype", "print", "os.path.join", "os.path.exists", "os.makedirs", "open", "f.write", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.parse", "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.parse"], []], "home.repos.pwc.inspect_result.xiaomi-automl_fairdarts.fairdarts.utils.save_file": [[215, 236], ["matplotlib.subplots", "recoder.items", "fig.savefig", "matplotlib.tight_layout", "print", "axs[].set_title", "axs[].plot", "os.path.exists", "os.makedirs", "os.path.join", "open", "json.dump", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], []]}