{"home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.DeepMindControl.__init__": [[13, 27], ["name.split", "isinstance", "suite.load", "domain", "dict().get", "dict"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.load", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "size", "=", "(", "64", ",", "64", ")", ",", "camera", "=", "None", ")", ":", "\n", "        ", "domain", ",", "task", "=", "name", ".", "split", "(", "'_'", ",", "1", ")", "\n", "if", "domain", "==", "'cup'", ":", "# Only domain with multiple words.", "\n", "            ", "domain", "=", "'ball_in_cup'", "\n", "", "if", "isinstance", "(", "domain", ",", "str", ")", ":", "\n", "            ", "from", "dm_control", "import", "suite", "\n", "self", ".", "_env", "=", "suite", ".", "load", "(", "domain", ",", "task", ")", "\n", "", "else", ":", "\n", "            ", "assert", "task", "is", "None", "\n", "self", ".", "_env", "=", "domain", "(", ")", "\n", "", "self", ".", "_size", "=", "size", "\n", "if", "camera", "is", "None", ":", "\n", "            ", "camera", "=", "dict", "(", "quadruped", "=", "2", ")", ".", "get", "(", "domain", ",", "0", ")", "\n", "", "self", ".", "_camera", "=", "camera", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.DeepMindControl.observation_space": [[28, 37], ["wrappers.DeepMindControl._env.observation_spec().items", "gym.spaces.Box", "gym.spaces.Dict", "gym.spaces.Box", "wrappers.DeepMindControl._env.observation_spec"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "spaces", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "self", ".", "_env", ".", "observation_spec", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "spaces", "[", "key", "]", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "value", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "spaces", "[", "'image'", "]", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "0", ",", "255", ",", "self", ".", "_size", "+", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "gym", ".", "spaces", ".", "Dict", "(", "spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.DeepMindControl.action_space": [[38, 42], ["wrappers.DeepMindControl._env.action_spec", "gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "spec", "=", "self", ".", "_env", ".", "action_spec", "(", ")", "\n", "return", "gym", ".", "spaces", ".", "Box", "(", "spec", ".", "minimum", ",", "spec", ".", "maximum", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.DeepMindControl.step": [[43, 51], ["wrappers.DeepMindControl._env.step", "dict", "wrappers.DeepMindControl.render", "wrappers.DeepMindControl.last", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.render"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "time_step", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "obs", "=", "dict", "(", "time_step", ".", "observation", ")", "\n", "obs", "[", "'image'", "]", "=", "self", ".", "render", "(", ")", "\n", "reward", "=", "time_step", ".", "reward", "or", "0", "\n", "done", "=", "time_step", ".", "last", "(", ")", "\n", "info", "=", "{", "'discount'", ":", "np", ".", "array", "(", "time_step", ".", "discount", ",", "np", ".", "float32", ")", "}", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.DeepMindControl.reset": [[52, 57], ["wrappers.DeepMindControl._env.reset", "dict", "wrappers.DeepMindControl.render"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.render"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "time_step", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "obs", "=", "dict", "(", "time_step", ".", "observation", ")", "\n", "obs", "[", "'image'", "]", "=", "self", ".", "render", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.DeepMindControl.render": [[58, 62], ["wrappers.DeepMindControl._env.physics.render", "kwargs.get", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.render", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "kwargs", ".", "get", "(", "'mode'", ",", "'rgb_array'", ")", "!=", "'rgb_array'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only render mode 'rgb_array' is supported.\"", ")", "\n", "", "return", "self", ".", "_env", ".", "physics", ".", "render", "(", "*", "self", ".", "_size", ",", "camera_id", "=", "self", ".", "_camera", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.__init__": [[68, 86], ["numpy.random.RandomState", "gym.make", "numpy.empty", "word.title", "range", "name.split"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "name", ",", "action_repeat", "=", "4", ",", "size", "=", "(", "84", ",", "84", ")", ",", "grayscale", "=", "True", ",", "noops", "=", "30", ",", "\n", "life_done", "=", "False", ",", "sticky_actions", "=", "True", ")", ":", "\n", "        ", "import", "gym", "\n", "version", "=", "0", "if", "sticky_actions", "else", "4", "\n", "name", "=", "''", ".", "join", "(", "word", ".", "title", "(", ")", "for", "word", "in", "name", ".", "split", "(", "'_'", ")", ")", "\n", "with", "self", ".", "LOCK", ":", "\n", "            ", "self", ".", "_env", "=", "gym", ".", "make", "(", "'{}NoFrameskip-v{}'", ".", "format", "(", "name", ",", "version", ")", ")", "\n", "", "self", ".", "_action_repeat", "=", "action_repeat", "\n", "self", ".", "_size", "=", "size", "\n", "self", ".", "_grayscale", "=", "grayscale", "\n", "self", ".", "_noops", "=", "noops", "\n", "self", ".", "_life_done", "=", "life_done", "\n", "self", ".", "_lives", "=", "None", "\n", "shape", "=", "self", ".", "_env", ".", "observation_space", ".", "shape", "[", ":", "2", "]", "+", "(", "(", ")", "if", "grayscale", "else", "(", "3", ",", ")", ")", "\n", "self", ".", "_buffers", "=", "[", "np", ".", "empty", "(", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "self", ".", "_random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.observation_space": [[87, 92], ["gym.spaces.Box", "gym.spaces.Dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "shape", "=", "self", ".", "_size", "+", "(", "1", "if", "self", ".", "_grayscale", "else", "3", ",", ")", "\n", "space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "gym", ".", "spaces", ".", "Dict", "(", "{", "'image'", ":", "space", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.action_space": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.close": [[97, 99], ["wrappers.Atari._env.close"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.reset": [[100, 116], ["wrappers.Atari._random.randint", "range", "wrappers.Atari._env.ale.lives", "wrappers.Atari._buffers[].fill", "wrappers.Atari._get_obs", "wrappers.Atari._env.reset", "wrappers.Atari._env.ale.getScreenGrayscale", "wrappers.Atari._env.ale.getScreenRGB2", "wrappers.Atari._env.step", "wrappers.Atari._env.reset"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari._get_obs", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "LOCK", ":", "\n", "            ", "self", ".", "_env", ".", "reset", "(", ")", "\n", "", "noops", "=", "self", ".", "_random", ".", "randint", "(", "1", ",", "self", ".", "_noops", "+", "1", ")", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "done", "=", "self", ".", "_env", ".", "step", "(", "0", ")", "[", "2", "]", "\n", "if", "done", ":", "\n", "                ", "with", "self", ".", "LOCK", ":", "\n", "                    ", "self", ".", "_env", ".", "reset", "(", ")", "\n", "", "", "", "self", ".", "_lives", "=", "self", ".", "_env", ".", "ale", ".", "lives", "(", ")", "\n", "if", "self", ".", "_grayscale", ":", "\n", "            ", "self", ".", "_env", ".", "ale", ".", "getScreenGrayscale", "(", "self", ".", "_buffers", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_env", ".", "ale", ".", "getScreenRGB2", "(", "self", ".", "_buffers", "[", "0", "]", ")", "\n", "", "self", ".", "_buffers", "[", "1", "]", ".", "fill", "(", "0", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.step": [[117, 136], ["range", "wrappers.Atari._get_obs", "wrappers.Atari._env.step", "wrappers.Atari._env.ale.lives", "wrappers.Atari._env.ale.getScreenGrayscale", "wrappers.Atari._env.ale.getScreenRGB2"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari._get_obs", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "total_reward", "=", "0.0", "\n", "for", "step", "in", "range", "(", "self", ".", "_action_repeat", ")", ":", "\n", "            ", "_", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "total_reward", "+=", "reward", "\n", "if", "self", ".", "_life_done", ":", "\n", "                ", "lives", "=", "self", ".", "_env", ".", "ale", ".", "lives", "(", ")", "\n", "done", "=", "done", "or", "lives", "<", "self", ".", "_lives", "\n", "self", ".", "_lives", "=", "lives", "\n", "", "if", "done", ":", "\n", "                ", "break", "\n", "", "elif", "step", ">=", "self", ".", "_action_repeat", "-", "2", ":", "\n", "                ", "index", "=", "step", "-", "(", "self", ".", "_action_repeat", "-", "2", ")", "\n", "if", "self", ".", "_grayscale", ":", "\n", "                    ", "self", ".", "_env", ".", "ale", ".", "getScreenGrayscale", "(", "self", ".", "_buffers", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_env", ".", "ale", ".", "getScreenRGB2", "(", "self", ".", "_buffers", "[", "index", "]", ")", "\n", "", "", "", "obs", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "obs", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.render": [[137, 139], ["wrappers.Atari._env.render"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari.render"], ["", "def", "render", "(", "self", ",", "mode", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "render", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Atari._get_obs": [[140, 149], ["numpy.array", "numpy.clip().astype", "numpy.maximum", "PIL.Image.fromarray().resize", "numpy.clip", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_action_repeat", ">", "1", ":", "\n", "            ", "np", ".", "maximum", "(", "self", ".", "_buffers", "[", "0", "]", ",", "\n", "self", ".", "_buffers", "[", "1", "]", ",", "out", "=", "self", ".", "_buffers", "[", "0", "]", ")", "\n", "", "image", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "self", ".", "_buffers", "[", "0", "]", ")", ".", "resize", "(", "\n", "self", ".", "_size", ",", "Image", ".", "BILINEAR", ")", ")", "\n", "image", "=", "np", ".", "clip", "(", "image", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", "None", "]", "if", "self", ".", "_grayscale", "else", "image", "\n", "return", "{", "'image'", ":", "image", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Collect.__init__": [[153, 158], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "callbacks", "=", "None", ",", "precision", "=", "32", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "self", ".", "_callbacks", "=", "callbacks", "or", "(", ")", "\n", "self", ".", "_precision", "=", "precision", "\n", "self", ".", "_episode", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Collect.__getattr__": [[159, 161], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Collect.step": [[162, 179], ["wrappers.Collect._env.step", "obs.copy", "info.get", "wrappers.Collect._episode.append", "wrappers.Collect._convert", "numpy.array", "obs.items", "wrappers.Collect._convert", "callback", "float", "episode.items"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Collect._convert", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Collect._convert"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "obs", "=", "{", "k", ":", "self", ".", "_convert", "(", "v", ")", "for", "k", ",", "v", "in", "obs", ".", "items", "(", ")", "}", "\n", "transition", "=", "obs", ".", "copy", "(", ")", "\n", "transition", "[", "'action'", "]", "=", "action", "\n", "transition", "[", "'reward'", "]", "=", "reward", "\n", "transition", "[", "'discount'", "]", "=", "info", ".", "get", "(", "\n", "'discount'", ",", "np", ".", "array", "(", "1", "-", "float", "(", "done", ")", ")", ")", "\n", "self", ".", "_episode", ".", "append", "(", "transition", ")", "\n", "if", "done", ":", "\n", "            ", "episode", "=", "{", "k", ":", "[", "t", "[", "k", "]", "for", "t", "in", "self", ".", "_episode", "]", "\n", "for", "k", "in", "self", ".", "_episode", "[", "0", "]", "}", "\n", "episode", "=", "{", "k", ":", "self", ".", "_convert", "(", "v", ")", "for", "k", ",", "v", "in", "episode", ".", "items", "(", ")", "}", "\n", "info", "[", "'episode'", "]", "=", "episode", "\n", "for", "callback", "in", "self", ".", "_callbacks", ":", "\n", "                ", "callback", "(", "episode", ")", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Collect.reset": [[180, 188], ["wrappers.Collect._env.reset", "wrappers.Collect.copy", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "transition", "=", "obs", ".", "copy", "(", ")", "\n", "transition", "[", "'action'", "]", "=", "np", ".", "zeros", "(", "self", ".", "_env", ".", "action_space", ".", "shape", ")", "\n", "transition", "[", "'reward'", "]", "=", "0.0", "\n", "transition", "[", "'discount'", "]", "=", "1.0", "\n", "self", ".", "_episode", "=", "[", "transition", "]", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Collect._convert": [[189, 201], ["numpy.array", "numpy.issubdtype", "numpy.array.astype", "numpy.issubdtype", "numpy.issubdtype", "NotImplementedError"], "methods", ["None"], ["", "def", "_convert", "(", "self", ",", "value", ")", ":", "\n", "        ", "value", "=", "np", ".", "array", "(", "value", ")", "\n", "if", "np", ".", "issubdtype", "(", "value", ".", "dtype", ",", "np", ".", "floating", ")", ":", "\n", "            ", "dtype", "=", "{", "16", ":", "np", ".", "float16", ",", "32", ":", "np", ".", "float32", ",", "\n", "64", ":", "np", ".", "float64", "}", "[", "self", ".", "_precision", "]", "\n", "", "elif", "np", ".", "issubdtype", "(", "value", ".", "dtype", ",", "np", ".", "signedinteger", ")", ":", "\n", "            ", "dtype", "=", "{", "16", ":", "np", ".", "int16", ",", "32", ":", "np", ".", "int32", ",", "64", ":", "np", ".", "int64", "}", "[", "self", ".", "_precision", "]", "\n", "", "elif", "np", ".", "issubdtype", "(", "value", ".", "dtype", ",", "np", ".", "uint8", ")", ":", "\n", "            ", "dtype", "=", "np", ".", "uint8", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "value", ".", "dtype", ")", "\n", "", "return", "value", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.TimeLimit.__init__": [[205, 209], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "duration", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "self", ".", "_duration", "=", "duration", "\n", "self", ".", "_step", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.TimeLimit.__getattr__": [[210, 212], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.TimeLimit.step": [[213, 223], ["wrappers.TimeLimit._env.step", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "_step", "is", "not", "None", ",", "'Must reset environment.'", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "self", ".", "_step", "+=", "1", "\n", "if", "self", ".", "_step", ">=", "self", ".", "_duration", ":", "\n", "            ", "done", "=", "True", "\n", "if", "'discount'", "not", "in", "info", ":", "\n", "                ", "info", "[", "'discount'", "]", "=", "np", ".", "array", "(", "1.0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "self", ".", "_step", "=", "None", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.TimeLimit.reset": [[224, 227], ["wrappers.TimeLimit._env.reset"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_step", "=", "0", "\n", "return", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NaturalMujoco.__init__": [[230, 234], ["numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "_pointer", "=", "(", "np", ".", "random", ".", "randint", "(", "self", ".", "dataset", ".", "shape", "[", "0", "]", ")", ",", "0", ")", "\n", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NaturalMujoco.__getattr__": [[235, 237], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NaturalMujoco.step": [[238, 242], ["wrappers.NaturalMujoco._env.step", "wrappers.NaturalMujoco._noisify_obs"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NaturalMujoco._noisify_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "obs", "=", "self", ".", "_noisify_obs", "(", "obs", ",", "done", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NaturalMujoco._noisify_obs": [[243, 270], ["obs.copy.copy.copy", "[].repeat", "numpy.random.randint"], "methods", ["None"], ["", "def", "_noisify_obs", "(", "self", ",", "obs", ",", "done", ")", ":", "\n", "        ", "obs", "=", "obs", ".", "copy", "(", ")", "\n", "img", "=", "obs", "[", "'image'", "]", "\n", "video_id", ",", "img_id", "=", "self", ".", "_pointer", "\n", "# fgbg = cv2.createBackgroundSubtractorKNN()", "\n", "# fgbg = cv2.createBackgroundSubtractorMOG2(detectShadows=True)", "\n", "# temp = fgbg.apply(img) != 255", "\n", "# fgmask = temp[:, :, None].repeat(3, axis=2)", "\n", "# fgmask = ~(fgbg.apply(img) == 255)[:, :, None].repeat(3, axis=2)", "\n", "\n", "# ugly hack to extract only yellow pixels", "\n", "fgmask", "=", "(", "img", "[", ":", ",", ":", ",", "0", "]", ">", "100", ")", "[", ":", ",", ":", ",", "None", "]", ".", "repeat", "(", "3", ",", "axis", "=", "2", ")", "\n", "\n", "if", "done", ":", "\n", "            ", "video_id", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "dataset", ".", "shape", "[", "0", "]", ")", "\n", "img_id", "=", "0", "\n", "", "else", ":", "\n", "            ", "img_id", "=", "(", "img_id", "+", "1", ")", "%", "self", ".", "dataset", ".", "shape", "[", "1", "]", "\n", "\n", "", "background", "=", "self", ".", "dataset", "[", "video_id", ",", "img_id", "]", "\n", "img", "=", "img", "*", "fgmask", "+", "background", "*", "(", "~", "fgmask", ")", "\n", "\n", "self", ".", "_pointer", "=", "(", "video_id", ",", "img_id", ")", "\n", "\n", "obs", "[", "'image'", "]", "=", "img", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NaturalMujoco.reset": [[271, 275], ["wrappers.NaturalMujoco._env.reset", "wrappers.NaturalMujoco._noisify_obs"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NaturalMujoco._noisify_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "_noisify_obs", "(", "obs", ",", "False", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ActionRepeat.__init__": [[280, 283], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "amount", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "self", ".", "_amount", "=", "amount", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ActionRepeat.__getattr__": [[284, 286], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ActionRepeat.step": [[287, 296], ["wrappers.ActionRepeat._env.step"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "done", "=", "False", "\n", "total_reward", "=", "0", "\n", "current_step", "=", "0", "\n", "while", "current_step", "<", "self", ".", "_amount", "and", "not", "done", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "total_reward", "+=", "reward", "\n", "current_step", "+=", "1", "\n", "", "return", "obs", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NormalizeActions.__init__": [[300, 307], ["numpy.logical_and", "numpy.where", "numpy.where", "numpy.isfinite", "numpy.isfinite"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "self", ".", "_mask", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "isfinite", "(", "env", ".", "action_space", ".", "low", ")", ",", "\n", "np", ".", "isfinite", "(", "env", ".", "action_space", ".", "high", ")", ")", "\n", "self", ".", "_low", "=", "np", ".", "where", "(", "self", ".", "_mask", ",", "env", ".", "action_space", ".", "low", ",", "-", "1", ")", "\n", "self", ".", "_high", "=", "np", ".", "where", "(", "self", ".", "_mask", ",", "env", ".", "action_space", ".", "high", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NormalizeActions.__getattr__": [[308, 310], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NormalizeActions.action_space": [[311, 316], ["numpy.where", "numpy.where", "gym.spaces.Box", "numpy.ones_like", "numpy.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "low", "=", "np", ".", "where", "(", "self", ".", "_mask", ",", "-", "np", ".", "ones_like", "(", "self", ".", "_low", ")", ",", "self", ".", "_low", ")", "\n", "high", "=", "np", ".", "where", "(", "self", ".", "_mask", ",", "np", ".", "ones_like", "(", "self", ".", "_low", ")", ",", "self", ".", "_high", ")", "\n", "return", "gym", ".", "spaces", ".", "Box", "(", "low", ",", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.NormalizeActions.step": [[317, 321], ["numpy.where", "wrappers.NormalizeActions._env.step"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "original", "=", "(", "action", "+", "1", ")", "/", "2", "*", "(", "self", ".", "_high", "-", "self", ".", "_low", ")", "+", "self", ".", "_low", "\n", "original", "=", "np", ".", "where", "(", "self", ".", "_mask", ",", "original", ",", "action", ")", "\n", "return", "self", ".", "_env", ".", "step", "(", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ObsDict.__init__": [[325, 328], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "key", "=", "'obs'", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "self", ".", "_key", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ObsDict.__getattr__": [[329, 331], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ObsDict.observation_space": [[332, 336], ["gym.spaces.Dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "spaces", "=", "{", "self", ".", "_key", ":", "self", ".", "_env", ".", "observation_space", "}", "\n", "return", "gym", ".", "spaces", ".", "Dict", "(", "spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ObsDict.action_space": [[337, 340], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ObsDict.step": [[341, 345], ["wrappers.ObsDict._env.step", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "obs", "=", "{", "self", ".", "_key", ":", "np", ".", "array", "(", "obs", ")", "}", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.ObsDict.reset": [[346, 350], ["wrappers.ObsDict._env.reset", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "obs", "=", "{", "self", ".", "_key", ":", "np", ".", "array", "(", "obs", ")", "}", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.OneHotAction.__init__": [[354, 357], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "assert", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "Discrete", ")", "\n", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.OneHotAction.__getattr__": [[358, 360], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.OneHotAction.action_space": [[361, 367], ["gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "shape", "=", "(", "self", ".", "_env", ".", "action_space", ".", "n", ",", ")", "\n", "space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "space", ".", "sample", "=", "self", ".", "_sample_action", "\n", "return", "space", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.OneHotAction.step": [[368, 375], ["numpy.argmax().astype", "numpy.zeros_like", "wrappers.OneHotAction._env.step", "numpy.allclose", "ValueError", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "index", "=", "np", ".", "argmax", "(", "action", ")", ".", "astype", "(", "int", ")", "\n", "reference", "=", "np", ".", "zeros_like", "(", "action", ")", "\n", "reference", "[", "index", "]", "=", "1", "\n", "if", "not", "np", ".", "allclose", "(", "reference", ",", "action", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid one-hot action:\\n{action}'", ")", "\n", "", "return", "self", ".", "_env", ".", "step", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.OneHotAction.reset": [[376, 378], ["wrappers.OneHotAction._env.reset"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.OneHotAction._sample_action": [[379, 385], ["wrappers.OneHotAction._random.randint", "numpy.zeros"], "methods", ["None"], ["", "def", "_sample_action", "(", "self", ")", ":", "\n", "        ", "actions", "=", "self", ".", "_env", ".", "action_space", ".", "n", "\n", "index", "=", "self", ".", "_random", ".", "randint", "(", "0", ",", "actions", ")", "\n", "reference", "=", "np", ".", "zeros", "(", "actions", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "reference", "[", "index", "]", "=", "1.0", "\n", "return", "reference", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.RewardObs.__init__": [[389, 391], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.RewardObs.__getattr__": [[392, 394], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.RewardObs.observation_space": [[395, 401], ["gym.spaces.Box", "gym.spaces.Dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "spaces", "=", "self", ".", "_env", ".", "observation_space", ".", "spaces", "\n", "assert", "'reward'", "not", "in", "spaces", "\n", "spaces", "[", "'reward'", "]", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "gym", ".", "spaces", ".", "Dict", "(", "spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.RewardObs.step": [[402, 406], ["wrappers.RewardObs._env.step"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "obs", "[", "'reward'", "]", "=", "reward", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.RewardObs.reset": [[407, 411], ["wrappers.RewardObs._env.reset"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "obs", "[", "'reward'", "]", "=", "0.0", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.__init__": [[421, 438], ["ctor", "mp.Pipe", "mp.Process", "atexit.register", "wrappers.Async._process.start", "NotImplementedError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ctor", ",", "strategy", "=", "'process'", ")", ":", "\n", "        ", "self", ".", "_strategy", "=", "strategy", "\n", "if", "strategy", "==", "'none'", ":", "\n", "            ", "self", ".", "_env", "=", "ctor", "(", ")", "\n", "", "elif", "strategy", "==", "'thread'", ":", "\n", "            ", "import", "multiprocessing", ".", "dummy", "as", "mp", "\n", "", "elif", "strategy", "==", "'process'", ":", "\n", "            ", "import", "multiprocessing", "as", "mp", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "strategy", ")", "\n", "", "if", "strategy", "!=", "'none'", ":", "\n", "            ", "self", ".", "_conn", ",", "conn", "=", "mp", ".", "Pipe", "(", ")", "\n", "self", ".", "_process", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "_worker", ",", "args", "=", "(", "ctor", ",", "conn", ")", ")", "\n", "atexit", ".", "register", "(", "self", ".", "close", ")", "\n", "self", ".", "_process", ".", "start", "(", ")", "\n", "", "self", ".", "_obs_space", "=", "None", "\n", "self", ".", "_action_space", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.observation_space": [[439, 444], ["wrappers.Async.__getattr__"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.__getattr__"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_obs_space", ":", "\n", "            ", "self", ".", "_obs_space", "=", "self", ".", "__getattr__", "(", "'observation_space'", ")", "\n", "", "return", "self", ".", "_obs_space", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.action_space": [[445, 450], ["wrappers.Async.__getattr__"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.__getattr__"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_action_space", ":", "\n", "            ", "self", ".", "_action_space", "=", "self", ".", "__getattr__", "(", "'action_space'", ")", "\n", "", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.__getattr__": [[451, 456], ["wrappers.Async._conn.send", "wrappers.Async._receive", "getattr"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async._receive"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "_strategy", "==", "'none'", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "", "self", ".", "_conn", ".", "send", "(", "(", "self", ".", "_ACCESS", ",", "name", ")", ")", "\n", "return", "self", ".", "_receive", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.call": [[457, 465], ["kwargs.pop", "wrappers.Async._conn.send", "functools.partial", "promise", "getattr"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "blocking", "=", "kwargs", ".", "pop", "(", "'blocking'", ",", "True", ")", "\n", "if", "self", ".", "_strategy", "==", "'none'", ":", "\n", "            ", "return", "functools", ".", "partial", "(", "getattr", "(", "self", ".", "_env", ",", "name", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "payload", "=", "name", ",", "args", ",", "kwargs", "\n", "self", ".", "_conn", ".", "send", "(", "(", "self", ".", "_CALL", ",", "payload", ")", ")", "\n", "promise", "=", "self", ".", "_receive", "\n", "return", "promise", "(", ")", "if", "blocking", "else", "promise", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.close": [[466, 480], ["wrappers.Async._process.join", "wrappers.Async._conn.send", "wrappers.Async._conn.close", "wrappers.Async._env.close"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.close", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_strategy", "==", "'none'", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_env", ".", "close", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "pass", "\n", "", "return", "\n", "", "try", ":", "\n", "            ", "self", ".", "_conn", ".", "send", "(", "(", "self", ".", "_CLOSE", ",", "None", ")", ")", "\n", "self", ".", "_conn", ".", "close", "(", ")", "\n", "", "except", "IOError", ":", "\n", "# The connection was already closed.", "\n", "            ", "pass", "\n", "", "self", ".", "_process", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.step": [[481, 483], ["wrappers.Async.call"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.call"], ["", "def", "step", "(", "self", ",", "action", ",", "blocking", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "call", "(", "'step'", ",", "action", ",", "blocking", "=", "blocking", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.reset": [[484, 486], ["wrappers.Async.call"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.call"], ["", "def", "reset", "(", "self", ",", "blocking", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "call", "(", "'reset'", ",", "blocking", "=", "blocking", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async._receive": [[487, 499], ["KeyError", "wrappers.Async._conn.recv", "Exception", "RuntimeError"], "methods", ["None"], ["", "def", "_receive", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "message", ",", "payload", "=", "self", ".", "_conn", ".", "recv", "(", ")", "\n", "", "except", "ConnectionResetError", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Environment worker crashed.'", ")", "\n", "# Re-raise exceptions in the main process.", "\n", "", "if", "message", "==", "self", ".", "_EXCEPTION", ":", "\n", "            ", "stacktrace", "=", "payload", "\n", "raise", "Exception", "(", "stacktrace", ")", "\n", "", "if", "message", "==", "self", ".", "_RESULT", ":", "\n", "            ", "return", "payload", "\n", "", "raise", "KeyError", "(", "f'Received message of unexpected type {message}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async._worker": [[500, 530], ["conn.close", "ctor", "KeyError", "print", "conn.send", "conn.recv", "getattr", "conn.send", "conn.send", "traceback.format_exception", "conn.poll", "getattr", "sys.exc_info"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.close"], ["", "def", "_worker", "(", "self", ",", "ctor", ",", "conn", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "env", "=", "ctor", "(", ")", "\n", "while", "True", ":", "\n", "                ", "try", ":", "\n", "# Only block for short times to have keyboard exceptions be raised.", "\n", "                    ", "if", "not", "conn", ".", "poll", "(", "0.1", ")", ":", "\n", "                        ", "continue", "\n", "", "message", ",", "payload", "=", "conn", ".", "recv", "(", ")", "\n", "", "except", "(", "EOFError", ",", "KeyboardInterrupt", ")", ":", "\n", "                    ", "break", "\n", "", "if", "message", "==", "self", ".", "_ACCESS", ":", "\n", "                    ", "name", "=", "payload", "\n", "result", "=", "getattr", "(", "env", ",", "name", ")", "\n", "conn", ".", "send", "(", "(", "self", ".", "_RESULT", ",", "result", ")", ")", "\n", "continue", "\n", "", "if", "message", "==", "self", ".", "_CALL", ":", "\n", "                    ", "name", ",", "args", ",", "kwargs", "=", "payload", "\n", "result", "=", "getattr", "(", "env", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "conn", ".", "send", "(", "(", "self", ".", "_RESULT", ",", "result", ")", ")", "\n", "continue", "\n", "", "if", "message", "==", "self", ".", "_CLOSE", ":", "\n", "                    ", "assert", "payload", "is", "None", "\n", "break", "\n", "", "raise", "KeyError", "(", "f'Received message of unknown type {message}'", ")", "\n", "", "", "except", "Exception", ":", "\n", "            ", "stacktrace", "=", "''", ".", "join", "(", "traceback", ".", "format_exception", "(", "*", "sys", ".", "exc_info", "(", ")", ")", ")", "\n", "print", "(", "f'Error in environment process: {stacktrace}'", ")", "\n", "conn", ".", "send", "(", "(", "self", ".", "_EXCEPTION", ",", "stacktrace", ")", ")", "\n", "", "conn", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.__init__": [[11, 18], ["tools.Module.__init__", "tensorflow.keras.layers.GRUCell"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stoch", "=", "30", ",", "deter", "=", "200", ",", "hidden", "=", "200", ",", "act", "=", "tf", ".", "nn", ".", "elu", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_activation", "=", "act", "\n", "self", ".", "_stoch_size", "=", "stoch", "\n", "self", ".", "_deter_size", "=", "deter", "\n", "self", ".", "_hidden_size", "=", "hidden", "\n", "self", ".", "_cell", "=", "tfkl", ".", "GRUCell", "(", "self", ".", "_deter_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.initial": [[19, 26], ["dict", "tensorflow.keras.mixed_precision.experimental.global_policy", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "models.RSSM._cell.get_initial_state"], "methods", ["None"], ["", "def", "initial", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "dtype", "=", "prec", ".", "global_policy", "(", ")", ".", "compute_dtype", "\n", "return", "dict", "(", "\n", "mean", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_stoch_size", "]", ",", "dtype", ")", ",", "\n", "std", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_stoch_size", "]", ",", "dtype", ")", ",", "\n", "stoch", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "_stoch_size", "]", ",", "dtype", ")", ",", "\n", "deter", "=", "self", ".", "_cell", ".", "get_initial_state", "(", "None", ",", "batch_size", ",", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.observe": [[27, 39], ["tensorflow.transpose", "tensorflow.transpose", "tools.static_scan", "models.RSSM.initial", "tensorflow.transpose", "tensorflow.transpose", "models.RSSM.obs_step", "post.items", "prior.items", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.static_scan", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.initial", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.obs_step"], ["", "@", "tf", ".", "function", "\n", "def", "observe", "(", "self", ",", "embed", ",", "action", ",", "state", "=", "None", ")", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "state", "=", "self", ".", "initial", "(", "tf", ".", "shape", "(", "action", ")", "[", "0", "]", ")", "\n", "", "embed", "=", "tf", ".", "transpose", "(", "embed", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "action", "=", "tf", ".", "transpose", "(", "action", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "post", ",", "prior", "=", "tools", ".", "static_scan", "(", "\n", "lambda", "prev", ",", "inputs", ":", "self", ".", "obs_step", "(", "prev", "[", "0", "]", ",", "*", "inputs", ")", ",", "\n", "(", "action", ",", "embed", ")", ",", "(", "state", ",", "state", ")", ")", "\n", "post", "=", "{", "k", ":", "tf", ".", "transpose", "(", "v", ",", "[", "1", ",", "0", ",", "2", "]", ")", "for", "k", ",", "v", "in", "post", ".", "items", "(", ")", "}", "\n", "prior", "=", "{", "k", ":", "tf", ".", "transpose", "(", "v", ",", "[", "1", ",", "0", ",", "2", "]", ")", "for", "k", ",", "v", "in", "prior", ".", "items", "(", ")", "}", "\n", "return", "post", ",", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.imagine": [[40, 49], ["isinstance", "tensorflow.transpose", "tools.static_scan", "models.RSSM.initial", "tensorflow.transpose", "tools.static_scan.items", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.static_scan", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.initial"], ["", "@", "tf", ".", "function", "\n", "def", "imagine", "(", "self", ",", "action", ",", "state", "=", "None", ")", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "state", "=", "self", ".", "initial", "(", "tf", ".", "shape", "(", "action", ")", "[", "0", "]", ")", "\n", "", "assert", "isinstance", "(", "state", ",", "dict", ")", ",", "state", "\n", "action", "=", "tf", ".", "transpose", "(", "action", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "prior", "=", "tools", ".", "static_scan", "(", "self", ".", "img_step", ",", "action", ",", "state", ")", "\n", "prior", "=", "{", "k", ":", "tf", ".", "transpose", "(", "v", ",", "[", "1", ",", "0", ",", "2", "]", ")", "for", "k", ",", "v", "in", "prior", ".", "items", "(", ")", "}", "\n", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_feat": [[50, 52], ["tensorflow.concat"], "methods", ["None"], ["", "def", "get_feat", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "tf", ".", "concat", "(", "[", "state", "[", "'stoch'", "]", ",", "state", "[", "'deter'", "]", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_dist": [[53, 55], ["tensorflow_probability.distributions.MultivariateNormalDiag"], "methods", ["None"], ["", "def", "get_dist", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "tfd", ".", "MultivariateNormalDiag", "(", "state", "[", "'mean'", "]", ",", "state", "[", "'std'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.obs_step": [[56, 69], ["models.RSSM.img_step", "tensorflow.concat", "tensorflow.split", "models.RSSM.get_dist().sample", "models.RSSM.get", "models.RSSM.get", "tensorflow.nn.softplus", "models.RSSM.get_dist"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.img_step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_dist"], ["", "@", "tf", ".", "function", "\n", "def", "obs_step", "(", "self", ",", "prev_state", ",", "prev_action", ",", "embed", ")", ":", "\n", "        ", "prior", "=", "self", ".", "img_step", "(", "prev_state", ",", "prev_action", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "prior", "[", "'deter'", "]", ",", "embed", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "get", "(", "'obs1'", ",", "tfkl", ".", "Dense", ",", "self", ".", "_hidden_size", ",", "\n", "self", ".", "_activation", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'obs2'", ",", "tfkl", ".", "Dense", ",", "2", "*", "self", ".", "_stoch_size", ",", "None", ")", "(", "x", ")", "\n", "mean", ",", "std", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "-", "1", ")", "\n", "std", "=", "tf", ".", "nn", ".", "softplus", "(", "std", ")", "+", "0.1", "\n", "stoch", "=", "self", ".", "get_dist", "(", "{", "'mean'", ":", "mean", ",", "'std'", ":", "std", "}", ")", ".", "sample", "(", ")", "\n", "post", "=", "{", "'mean'", ":", "mean", ",", "'std'", ":", "std", ",", "\n", "'stoch'", ":", "stoch", ",", "'deter'", ":", "prior", "[", "'deter'", "]", "}", "\n", "return", "post", ",", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.img_step": [[70, 85], ["tensorflow.concat", "models.RSSM._cell", "tensorflow.split", "models.RSSM.get_dist().sample", "models.RSSM.get", "models.RSSM.get", "models.RSSM.get", "tensorflow.nn.softplus", "models.RSSM.get_dist"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_dist"], ["", "@", "tf", ".", "function", "\n", "def", "img_step", "(", "self", ",", "prev_state", ",", "prev_action", ")", ":", "\n", "        ", "x", "=", "tf", ".", "concat", "(", "[", "prev_state", "[", "'stoch'", "]", ",", "prev_action", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "get", "(", "'img1'", ",", "tfkl", ".", "Dense", ",", "self", ".", "_hidden_size", ",", "\n", "self", ".", "_activation", ")", "(", "x", ")", "\n", "x", ",", "deter", "=", "self", ".", "_cell", "(", "x", ",", "[", "prev_state", "[", "'deter'", "]", "]", ")", "\n", "deter", "=", "deter", "[", "0", "]", "# Keras wraps the state in a list.", "\n", "x", "=", "self", ".", "get", "(", "'img2'", ",", "tfkl", ".", "Dense", ",", "self", ".", "_hidden_size", ",", "\n", "self", ".", "_activation", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'img3'", ",", "tfkl", ".", "Dense", ",", "2", "*", "self", ".", "_stoch_size", ",", "None", ")", "(", "x", ")", "\n", "mean", ",", "std", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "-", "1", ")", "\n", "std", "=", "tf", ".", "nn", ".", "softplus", "(", "std", ")", "+", "0.1", "\n", "stoch", "=", "self", ".", "get_dist", "(", "{", "'mean'", ":", "mean", ",", "'std'", ":", "std", "}", ")", ".", "sample", "(", ")", "\n", "prior", "=", "{", "'mean'", ":", "mean", ",", "'std'", ":", "std", ",", "'stoch'", ":", "stoch", ",", "'deter'", ":", "deter", "}", "\n", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ConvEncoder.__init__": [[89, 92], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "32", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "        ", "self", ".", "_act", "=", "act", "\n", "self", ".", "_depth", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ConvEncoder.__call__": [[93, 102], ["dict", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "models.ConvEncoder.get", "models.ConvEncoder.get", "models.ConvEncoder.get", "models.ConvEncoder.get", "tuple", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["", "def", "__call__", "(", "self", ",", "obs", ")", ":", "\n", "        ", "kwargs", "=", "dict", "(", "strides", "=", "2", ",", "activation", "=", "self", ".", "_act", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "obs", "[", "'image'", "]", ",", "(", "-", "1", ",", ")", "+", "tuple", "(", "obs", "[", "'image'", "]", ".", "shape", "[", "-", "3", ":", "]", ")", ")", "\n", "x", "=", "self", ".", "get", "(", "'h1'", ",", "tfkl", ".", "Conv2D", ",", "1", "*", "self", ".", "_depth", ",", "4", ",", "**", "kwargs", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'h2'", ",", "tfkl", ".", "Conv2D", ",", "2", "*", "self", ".", "_depth", ",", "4", ",", "**", "kwargs", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'h3'", ",", "tfkl", ".", "Conv2D", ",", "4", "*", "self", ".", "_depth", ",", "4", ",", "**", "kwargs", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'h4'", ",", "tfkl", ".", "Conv2D", ",", "8", "*", "self", ".", "_depth", ",", "4", ",", "**", "kwargs", ")", "(", "x", ")", "\n", "shape", "=", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "obs", "[", "'image'", "]", ")", "[", ":", "-", "3", "]", ",", "[", "32", "*", "self", ".", "_depth", "]", "]", ",", "0", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ConvDecoder.__init__": [[106, 110], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "32", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "shape", "=", "(", "64", ",", "64", ",", "3", ")", ")", ":", "\n", "        ", "self", ".", "_act", "=", "act", "\n", "self", ".", "_depth", "=", "depth", "\n", "self", ".", "_shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ConvDecoder.__call__": [[111, 126], ["dict", "tensorflow.reshape", "tensorflow.reshape", "tensorflow_probability.distributions.Independent", "models.ConvDecoder.get", "models.ConvDecoder.get", "models.ConvDecoder.get", "models.ConvDecoder.get", "models.ConvDecoder.get", "tensorflow.concat", "tensorflow_probability.distributions.Normal", "len", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["", "def", "__call__", "(", "self", ",", "features", ")", ":", "\n", "        ", "kwargs", "=", "dict", "(", "strides", "=", "2", ",", "activation", "=", "self", ".", "_act", ")", "\n", "x", "=", "self", ".", "get", "(", "'h1'", ",", "tfkl", ".", "Dense", ",", "32", "*", "self", ".", "_depth", ",", "None", ")", "(", "features", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "1", ",", "32", "*", "self", ".", "_depth", "]", ")", "\n", "x", "=", "self", ".", "get", "(", "'h2'", ",", "tfkl", ".", "Conv2DTranspose", ",", "\n", "4", "*", "self", ".", "_depth", ",", "5", ",", "**", "kwargs", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'h3'", ",", "tfkl", ".", "Conv2DTranspose", ",", "\n", "2", "*", "self", ".", "_depth", ",", "5", ",", "**", "kwargs", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'h4'", ",", "tfkl", ".", "Conv2DTranspose", ",", "\n", "1", "*", "self", ".", "_depth", ",", "6", ",", "**", "kwargs", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'h5'", ",", "tfkl", ".", "Conv2DTranspose", ",", "\n", "self", ".", "_shape", "[", "-", "1", "]", ",", "6", ",", "strides", "=", "2", ")", "(", "x", ")", "\n", "mean", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "shape", "(", "features", ")", "[", ":", "-", "1", "]", ",", "self", ".", "_shape", "]", ",", "0", ")", ")", "\n", "return", "tfd", ".", "Independent", "(", "tfd", ".", "Normal", "(", "mean", ",", "1", ")", ",", "len", "(", "self", ".", "_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ContrastiveObsModel.__init__": [[131, 135], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hz", ",", "hx", ",", "act", "=", "tf", ".", "nn", ".", "elu", ")", ":", "\n", "        ", "self", ".", "act", "=", "act", "\n", "self", ".", "hz", "=", "hz", "\n", "self", ".", "hx", "=", "hx", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ContrastiveObsModel.__call__": [[136, 164], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.linalg.tensor_diag_part", "tensorflow.reduce_logsumexp", "tensorflow.cast", "models.ContrastiveObsModel.get", "models.ContrastiveObsModel.get", "models.ContrastiveObsModel.get", "models.ContrastiveObsModel.get"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["", "def", "__call__", "(", "self", ",", "z", ",", "x", ")", ":", "\n", "        ", "\"\"\"Both inputs have the shape of [batch_sz, length, dim]. For each positive sample, we use the rest of batch_sz * length - 1 samples as negative samples\n\n        Args:\n            z (tensor): latent state\n            x (tensor): encoded observation\n        \"\"\"", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "z", "=", "tf", ".", "reshape", "(", "z", ",", "(", "-", "1", ",", "z", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "# use mixed precision of float32 to avoid overflow", "\n", "x", "=", "self", ".", "get", "(", "'obs_enc1'", ",", "tfkl", ".", "Dense", ",", "self", ".", "hx", ",", "self", ".", "act", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "get", "(", "'obs_enc2'", ",", "tfkl", ".", "Dense", ",", "self", ".", "hz", ",", "self", ".", "act", ",", "dtype", "=", "'float32'", ")", "(", "x", ")", "\n", "\n", "z", "=", "self", ".", "get", "(", "'state_merge1'", ",", "tfkl", ".", "Dense", ",", "self", ".", "hz", ",", "self", ".", "act", ")", "(", "z", ")", "\n", "z", "=", "self", ".", "get", "(", "'state_merge2'", ",", "tfkl", ".", "Dense", ",", "self", ".", "hz", ",", "self", ".", "act", ",", "\n", "dtype", "=", "'float32'", ")", "(", "z", ")", "\n", "\n", "weight_mat", "=", "tf", ".", "matmul", "(", "z", ",", "x", ",", "transpose_b", "=", "True", ")", "\n", "\n", "positive", "=", "tf", ".", "linalg", ".", "tensor_diag_part", "(", "weight_mat", ")", "\n", "norm", "=", "tf", ".", "reduce_logsumexp", "(", "weight_mat", ",", "axis", "=", "1", ")", "\n", "\n", "# compute the infonce loss and change the predicion back to float16", "\n", "info_nce", "=", "tf", ".", "cast", "(", "positive", "-", "norm", ",", "'float16'", ")", "\n", "\n", "return", "info_nce", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.DenseDecoder.__init__": [[168, 174], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "layers", ",", "units", ",", "dist", "=", "'normal'", ",", "act", "=", "tf", ".", "nn", ".", "elu", ")", ":", "\n", "        ", "self", ".", "_shape", "=", "shape", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_units", "=", "units", "\n", "self", ".", "_dist", "=", "dist", "\n", "self", ".", "_act", "=", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.DenseDecoder.__call__": [[175, 186], ["range", "tensorflow.reshape", "NotImplementedError", "models.DenseDecoder.get", "tensorflow.concat", "tensorflow_probability.distributions.Independent", "tensorflow_probability.distributions.Independent", "models.DenseDecoder.get", "numpy.prod", "tensorflow_probability.distributions.Normal", "len", "tensorflow_probability.distributions.Bernoulli", "len", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["", "def", "__call__", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "features", "\n", "for", "index", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "get", "(", "f'h{index}'", ",", "tfkl", ".", "Dense", ",", "self", ".", "_units", ",", "self", ".", "_act", ")", "(", "x", ")", "\n", "", "x", "=", "self", ".", "get", "(", "f'hout'", ",", "tfkl", ".", "Dense", ",", "np", ".", "prod", "(", "self", ".", "_shape", ")", ")", "(", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "features", ")", "[", ":", "-", "1", "]", ",", "self", ".", "_shape", "]", ",", "0", ")", ")", "\n", "if", "self", ".", "_dist", "==", "'normal'", ":", "\n", "            ", "return", "tfd", ".", "Independent", "(", "tfd", ".", "Normal", "(", "x", ",", "1", ")", ",", "len", "(", "self", ".", "_shape", ")", ")", "\n", "", "if", "self", ".", "_dist", "==", "'binary'", ":", "\n", "            ", "return", "tfd", ".", "Independent", "(", "tfd", ".", "Bernoulli", "(", "x", ")", ",", "len", "(", "self", ".", "_shape", ")", ")", "\n", "", "raise", "NotImplementedError", "(", "self", ".", "_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.QNetwork.__init__": [[189, 195], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "layers", ",", "units", ",", "dist", "=", "'normal'", ",", "act", "=", "tf", ".", "nn", ".", "elu", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "_shape", "=", "shape", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_units", "=", "units", "\n", "self", ".", "_dist", "=", "dist", "\n", "self", ".", "_act", "=", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.QNetwork.__call__": [[196, 204], ["range", "tensorflow.reshape", "models.QNetwork.get", "tensorflow.concat", "models.QNetwork.get", "numpy.prod", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["", "def", "__call__", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "features", "\n", "for", "index", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "get", "(", "f'h{index}'", ",", "tfkl", ".", "Dense", ",", "self", ".", "_units", ",", "self", ".", "_act", ")", "(", "x", ")", "\n", "", "x", "=", "self", ".", "get", "(", "f'hout'", ",", "tfkl", ".", "Dense", ",", "np", ".", "prod", "(", "self", ".", "_shape", ")", ")", "(", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "features", ")", "[", ":", "-", "1", "]", ",", "self", ".", "_shape", "]", ",", "0", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ActionDecoder.__init__": [[207, 218], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "size", ",", "layers", ",", "units", ",", "dist", "=", "'tanh_normal'", ",", "act", "=", "tf", ".", "nn", ".", "elu", ",", "\n", "min_std", "=", "1e-4", ",", "init_std", "=", "5", ",", "mean_scale", "=", "5", ")", ":", "\n", "        ", "self", ".", "_size", "=", "size", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_units", "=", "units", "\n", "self", ".", "_dist", "=", "dist", "\n", "self", ".", "_act", "=", "act", "\n", "self", ".", "_min_std", "=", "min_std", "\n", "self", ".", "_init_std", "=", "init_std", "\n", "self", ".", "_mean_scale", "=", "mean_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ActionDecoder.__call__": [[219, 240], ["numpy.log", "range", "tensorflow.split", "tensorflow_probability.distributions.Normal", "tensorflow_probability.distributions.TransformedDistribution", "tensorflow_probability.distributions.Independent", "tools.SampleDist", "numpy.exp", "models.ActionDecoder.get", "models.ActionDecoder.get", "tensorflow.tanh", "tensorflow.nn.softplus", "tools.TanhBijector", "tools.OneHotDist", "NotImplementedError", "models.ActionDecoder.get"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get"], ["", "def", "__call__", "(", "self", ",", "features", ")", ":", "\n", "        ", "raw_init_std", "=", "np", ".", "log", "(", "np", ".", "exp", "(", "self", ".", "_init_std", ")", "-", "1", ")", "\n", "x", "=", "features", "\n", "for", "index", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "get", "(", "f'h{index}'", ",", "tfkl", ".", "Dense", ",", "self", ".", "_units", ",", "self", ".", "_act", ")", "(", "x", ")", "\n", "", "if", "self", ".", "_dist", "==", "'tanh_normal'", ":", "\n", "# https://www.desmos.com/calculator/rcmcf5jwe7", "\n", "            ", "x", "=", "self", ".", "get", "(", "f'hout'", ",", "tfkl", ".", "Dense", ",", "2", "*", "self", ".", "_size", ")", "(", "x", ")", "\n", "mean", ",", "std", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "-", "1", ")", "\n", "mean", "=", "self", ".", "_mean_scale", "*", "tf", ".", "tanh", "(", "mean", "/", "self", ".", "_mean_scale", ")", "\n", "std", "=", "tf", ".", "nn", ".", "softplus", "(", "std", "+", "raw_init_std", ")", "+", "self", ".", "_min_std", "\n", "dist", "=", "tfd", ".", "Normal", "(", "mean", ",", "std", ")", "\n", "dist", "=", "tfd", ".", "TransformedDistribution", "(", "dist", ",", "tools", ".", "TanhBijector", "(", ")", ")", "\n", "dist", "=", "tfd", ".", "Independent", "(", "dist", ",", "1", ")", "\n", "dist", "=", "tools", ".", "SampleDist", "(", "dist", ")", "\n", "", "elif", "self", ".", "_dist", "==", "'onehot'", ":", "\n", "            ", "x", "=", "self", ".", "get", "(", "f'hout'", ",", "tfkl", ".", "Dense", ",", "self", ".", "_size", ")", "(", "x", ")", "\n", "dist", "=", "tools", ".", "OneHotDist", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "dist", ")", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ActionDecoder.actions_and_log_probs": [[241, 247], ["models.ActionDecoder.", "models.ActionDecoder.sample", "models.ActionDecoder.log_prob"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob"], ["", "def", "actions_and_log_probs", "(", "self", ",", "features", ")", ":", "\n", "        ", "dist", "=", "self", "(", "features", ")", "\n", "action", "=", "dist", ".", "sample", "(", ")", "\n", "log_prob", "=", "dist", ".", "log_prob", "(", "action", ")", "\n", "\n", "return", "action", ",", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.save": [[27, 31], ["tensorflow.nest.map_structure", "tensorflow.nest.map_structure", "pathlib.Path().open", "pickle.dump", "x.numpy", "pathlib.Path"], "methods", ["None"], ["    ", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "values", "=", "tf", ".", "nest", ".", "map_structure", "(", "lambda", "x", ":", "x", ".", "numpy", "(", ")", ",", "self", ".", "variables", ")", "\n", "with", "pathlib", ".", "Path", "(", "filename", ")", ".", "open", "(", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "values", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.load": [[32, 36], ["tensorflow.nest.map_structure", "tensorflow.nest.map_structure", "pathlib.Path().open", "pickle.load", "x.assign", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.load"], ["", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "pathlib", ".", "Path", "(", "filename", ")", ".", "open", "(", "'rb'", ")", "as", "f", ":", "\n", "            ", "values", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "tf", ".", "nest", ".", "map_structure", "(", "lambda", "x", ",", "y", ":", "x", ".", "assign", "(", "y", ")", ",", "self", ".", "variables", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.get": [[37, 44], ["hasattr", "ctor"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "name", ",", "ctor", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# Create or get layer by name to avoid mentioning it in the constructor.", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'_modules'", ")", ":", "\n", "            ", "self", ".", "_modules", "=", "{", "}", "\n", "", "if", "name", "not", "in", "self", ".", "_modules", ":", "\n", "            ", "self", ".", "_modules", "[", "name", "]", "=", "ctor", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "self", ".", "_modules", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.__init__": [[195, 198], ["numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "0", ")", "\n", "self", ".", "_step", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.observation_space": [[199, 205], ["numpy.zeros", "gym.spaces.Dict", "numpy.ones", "gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "low", "=", "np", ".", "zeros", "(", "[", "64", ",", "64", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "high", "=", "255", "*", "np", ".", "ones", "(", "[", "64", ",", "64", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "spaces", "=", "{", "'image'", ":", "gym", ".", "spaces", ".", "Box", "(", "low", ",", "high", ")", "}", "\n", "return", "gym", ".", "spaces", ".", "Dict", "(", "spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.action_space": [[206, 211], ["numpy.ones", "gym.spaces.Box", "numpy.ones"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "low", "=", "-", "np", ".", "ones", "(", "[", "5", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "high", "=", "np", ".", "ones", "(", "[", "5", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "gym", ".", "spaces", ".", "Box", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset": [[212, 216], ["tools.DummyEnv.observation_space.sample"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_step", "=", "0", "\n", "obs", "=", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step": [[217, 224], ["tools.DummyEnv.observation_space.sample", "tools.DummyEnv._random.uniform"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", "=", "self", ".", "observation_space", ".", "sample", "(", ")", "\n", "reward", "=", "self", ".", "_random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "self", ".", "_step", "+=", "1", "\n", "done", "=", "self", ".", "_step", ">=", "1000", "\n", "info", "=", "{", "}", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.__init__": [[228, 231], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dist", ",", "samples", "=", "100", ")", ":", "\n", "        ", "self", ".", "_dist", "=", "dist", "\n", "self", ".", "_samples", "=", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.name": [[232, 235], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SampleDist'", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.__getattr__": [[236, 238], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_dist", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.mean": [[239, 242], ["tools.SampleDist._dist.sample", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample"], ["", "def", "mean", "(", "self", ")", ":", "\n", "        ", "samples", "=", "self", ".", "_dist", ".", "sample", "(", "self", ".", "_samples", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "samples", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.mode": [[243, 247], ["tools.SampleDist._dist.sample", "tools.SampleDist._dist.log_prob", "tensorflow.gather", "tensorflow.gather", "tensorflow.argmax", "tensorflow.argmax"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "sample", "=", "self", ".", "_dist", ".", "sample", "(", "self", ".", "_samples", ")", "\n", "logprob", "=", "self", ".", "_dist", ".", "log_prob", "(", "sample", ")", "\n", "return", "tf", ".", "gather", "(", "sample", ",", "tf", ".", "argmax", "(", "logprob", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.entropy": [[248, 252], ["tools.SampleDist._dist.sample", "tools.SampleDist.log_prob", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "sample", "=", "self", ".", "_dist", ".", "sample", "(", "self", ".", "_samples", ")", "\n", "logprob", "=", "self", ".", "log_prob", "(", "sample", ")", "\n", "return", "-", "tf", ".", "reduce_mean", "(", "logprob", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.__init__": [[256, 260], ["tensorflow_probability.distributions.Categorical", "tensorflow.keras.mixed_precision.experimental.global_policy", "tensorflow.keras.mixed_precision.experimental.global_policy", "tools.OneHotDist.mean"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mean"], ["    ", "def", "__init__", "(", "self", ",", "logits", "=", "None", ",", "probs", "=", "None", ")", ":", "\n", "        ", "self", ".", "_dist", "=", "tfd", ".", "Categorical", "(", "logits", "=", "logits", ",", "probs", "=", "probs", ")", "\n", "self", ".", "_num_classes", "=", "self", ".", "mean", "(", ")", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "_dtype", "=", "prec", ".", "global_policy", "(", ")", ".", "compute_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.name": [[261, 264], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'OneHotDist'", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.__getattr__": [[265, 267], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_dist", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.prob": [[268, 271], ["tensorflow.argmax", "tensorflow.argmax", "tools.OneHotDist._dist.prob"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.prob"], ["", "def", "prob", "(", "self", ",", "events", ")", ":", "\n", "        ", "indices", "=", "tf", ".", "argmax", "(", "events", ",", "axis", "=", "-", "1", ")", "\n", "return", "self", ".", "_dist", ".", "prob", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob": [[272, 275], ["tensorflow.argmax", "tensorflow.argmax", "tools.OneHotDist._dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob"], ["", "def", "log_prob", "(", "self", ",", "events", ")", ":", "\n", "        ", "indices", "=", "tf", ".", "argmax", "(", "events", ",", "axis", "=", "-", "1", ")", "\n", "return", "self", ".", "_dist", ".", "log_prob", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mean": [[276, 278], ["tools.OneHotDist._dist.probs_parameter"], "methods", ["None"], ["", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dist", ".", "probs_parameter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode": [[279, 281], ["tools.OneHotDist._one_hot", "tools.OneHotDist._dist.mode"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist._one_hot", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_one_hot", "(", "self", ".", "_dist", ".", "mode", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample": [[282, 289], ["tools.OneHotDist._dist.sample", "tools.OneHotDist._one_hot", "tools.OneHotDist._dist.probs_parameter", "tensorflow.cast", "tensorflow.cast", "tensorflow.stop_gradient", "tensorflow.stop_gradient"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist._one_hot"], ["", "def", "sample", "(", "self", ",", "amount", "=", "None", ")", ":", "\n", "        ", "amount", "=", "[", "amount", "]", "if", "amount", "else", "[", "]", "\n", "indices", "=", "self", ".", "_dist", ".", "sample", "(", "*", "amount", ")", "\n", "sample", "=", "self", ".", "_one_hot", "(", "indices", ")", "\n", "probs", "=", "self", ".", "_dist", ".", "probs_parameter", "(", ")", "\n", "sample", "+=", "tf", ".", "cast", "(", "probs", "-", "tf", ".", "stop_gradient", "(", "probs", ")", ",", "self", ".", "_dtype", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist._one_hot": [[290, 292], ["tensorflow.one_hot", "tensorflow.one_hot"], "methods", ["None"], ["", "def", "_one_hot", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "tf", ".", "one_hot", "(", "indices", ",", "self", ".", "_num_classes", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.TanhBijector.__init__": [[296, 301], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "validate_args", "=", "False", ",", "name", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "forward_min_event_ndims", "=", "0", ",", "\n", "validate_args", "=", "validate_args", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.TanhBijector._forward": [[302, 304], ["tensorflow.nn.tanh", "tensorflow.nn.tanh"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.TanhBijector._inverse": [[305, 314], ["tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.where", "tensorflow.atanh", "tensorflow.atanh", "tensorflow.cast", "tensorflow.cast", "tensorflow.less_equal", "tensorflow.less_equal", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.abs", "tensorflow.abs"], "methods", ["None"], ["", "def", "_inverse", "(", "self", ",", "y", ")", ":", "\n", "        ", "dtype", "=", "y", ".", "dtype", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "\n", "y", "=", "tf", ".", "where", "(", "\n", "tf", ".", "less_equal", "(", "tf", ".", "abs", "(", "y", ")", ",", "1.", ")", ",", "\n", "tf", ".", "clip_by_value", "(", "y", ",", "-", "0.99999997", ",", "0.99999997", ")", ",", "y", ")", "\n", "y", "=", "tf", ".", "atanh", "(", "y", ")", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "dtype", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.TanhBijector._forward_log_det_jacobian": [[315, 318], ["tensorflow.math.log", "tensorflow.math.log", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.softplus", "tensorflow.nn.softplus"], "methods", ["None"], ["", "def", "_forward_log_det_jacobian", "(", "self", ",", "x", ")", ":", "\n", "        ", "log2", "=", "tf", ".", "math", ".", "log", "(", "tf", ".", "constant", "(", "2.0", ",", "dtype", "=", "x", ".", "dtype", ")", ")", "\n", "return", "2.0", "*", "(", "log2", "-", "x", "-", "tf", ".", "nn", ".", "softplus", "(", "-", "2.0", "*", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Adam.__init__": [[347, 356], ["tensorflow.optimizers.Adam", "tensorflow.optimizers.Adam", "tensorflow.keras.mixed_precision.experimental.LossScaleOptimizer", "tensorflow.keras.mixed_precision.experimental.LossScaleOptimizer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "modules", ",", "lr", ",", "clip", "=", "None", ",", "wd", "=", "None", ",", "wdpattern", "=", "r'.*'", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_modules", "=", "modules", "\n", "self", ".", "_clip", "=", "clip", "\n", "self", ".", "_wd", "=", "wd", "\n", "self", ".", "_wdpattern", "=", "wdpattern", "\n", "self", ".", "_opt", "=", "tf", ".", "optimizers", ".", "Adam", "(", "lr", ")", "\n", "self", ".", "_opt", "=", "prec", ".", "LossScaleOptimizer", "(", "self", ".", "_opt", ",", "'dynamic'", ")", "\n", "self", ".", "_variables", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Adam.variables": [[357, 360], ["tools.Adam._opt.variables"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Adam.variables"], ["", "@", "property", "\n", "def", "variables", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_opt", ".", "variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Adam.__call__": [[361, 380], ["tape.gradient", "tools.Adam._opt.get_unscaled_gradients", "tensorflow.linalg.global_norm", "tensorflow.linalg.global_norm", "tools.Adam._opt.apply_gradients", "tensorflow.nest.flatten", "tensorflow.nest.flatten", "sum", "print", "len", "tools.Adam._opt.get_scaled_loss", "tensorflow.clip_by_global_norm", "tensorflow.clip_by_global_norm", "tensorflow.distribute.get_replica_context", "tensorflow.distribute.get_replica_context", "tensorflow.distribute.get_replica_context.merge_call", "zip", "numpy.prod"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tape", ",", "loss", ")", ":", "\n", "        ", "if", "self", ".", "_variables", "is", "None", ":", "\n", "            ", "variables", "=", "[", "module", ".", "variables", "for", "module", "in", "self", ".", "_modules", "]", "\n", "self", ".", "_variables", "=", "tf", ".", "nest", ".", "flatten", "(", "variables", ")", "\n", "count", "=", "sum", "(", "np", ".", "prod", "(", "x", ".", "shape", ")", "for", "x", "in", "self", ".", "_variables", ")", "\n", "print", "(", "f'Found {count} {self._name} parameters.'", ")", "\n", "", "assert", "len", "(", "loss", ".", "shape", ")", "==", "0", ",", "loss", ".", "shape", "\n", "with", "tape", ":", "\n", "            ", "loss", "=", "self", ".", "_opt", ".", "get_scaled_loss", "(", "loss", ")", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "self", ".", "_variables", ")", "\n", "grads", "=", "self", ".", "_opt", ".", "get_unscaled_gradients", "(", "grads", ")", "\n", "norm", "=", "tf", ".", "linalg", ".", "global_norm", "(", "grads", ")", "\n", "if", "self", ".", "_clip", ":", "\n", "            ", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "self", ".", "_clip", ",", "norm", ")", "\n", "", "if", "self", ".", "_wd", ":", "\n", "            ", "context", "=", "tf", ".", "distribute", ".", "get_replica_context", "(", ")", "\n", "context", ".", "merge_call", "(", "self", ".", "_apply_weight_decay", ")", "\n", "", "self", ".", "_opt", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "self", ".", "_variables", ")", ")", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Adam._apply_weight_decay": [[381, 387], ["print", "re.search", "print", "strategy.extended.update"], "methods", ["None"], ["", "def", "_apply_weight_decay", "(", "self", ",", "strategy", ")", ":", "\n", "        ", "print", "(", "'Applied weight decay to variables:'", ")", "\n", "for", "var", "in", "self", ".", "_variables", ":", "\n", "            ", "if", "re", ".", "search", "(", "self", ".", "_wdpattern", ",", "self", ".", "_name", "+", "'/'", "+", "var", ".", "name", ")", ":", "\n", "                ", "print", "(", "'- '", "+", "self", ".", "_name", "+", "'/'", "+", "var", ".", "name", ")", "\n", "strategy", ".", "extended", ".", "update", "(", "var", ",", "lambda", "var", ":", "self", ".", "_wd", "*", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Every.__init__": [[459, 462], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "every", ")", ":", "\n", "        ", "self", ".", "_every", "=", "every", "\n", "self", ".", "_last", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Every.__call__": [[463, 471], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "_last", "is", "None", ":", "\n", "            ", "self", ".", "_last", "=", "step", "\n", "return", "True", "\n", "", "if", "step", ">=", "self", ".", "_last", "+", "self", ".", "_every", ":", "\n", "            ", "self", ".", "_last", "+=", "self", ".", "_every", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Once.__init__": [[475, 477], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_once", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Once.__call__": [[478, 483], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_once", ":", "\n", "            ", "self", ".", "_once", "=", "False", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.nest_summary": [[46, 54], ["isinstance", "isinstance", "hasattr", "str().replace().strip", "tools.nest_summary", "tools.nest_summary", "structure.items", "str().replace", "str"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.nest_summary", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.nest_summary"], ["", "", "def", "nest_summary", "(", "structure", ")", ":", "\n", "    ", "if", "isinstance", "(", "structure", ",", "dict", ")", ":", "\n", "        ", "return", "{", "k", ":", "nest_summary", "(", "v", ")", "for", "k", ",", "v", "in", "structure", ".", "items", "(", ")", "}", "\n", "", "if", "isinstance", "(", "structure", ",", "list", ")", ":", "\n", "        ", "return", "[", "nest_summary", "(", "v", ")", "for", "v", "in", "structure", "]", "\n", "", "if", "hasattr", "(", "structure", ",", "'shape'", ")", ":", "\n", "        ", "return", "str", "(", "structure", ".", "shape", ")", ".", "replace", "(", "', '", ",", "'x'", ")", ".", "strip", "(", "'(), '", ")", "\n", "", "return", "'?'", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.graph_summary": [[56, 64], ["tensorflow.summary.experimental.get_step", "tensorflow.numpy_function", "tensorflow.summary.experimental.set_step", "writer.as_default", "fn"], "function", ["None"], ["", "def", "graph_summary", "(", "writer", ",", "fn", ",", "*", "args", ")", ":", "\n", "    ", "step", "=", "tf", ".", "summary", ".", "experimental", ".", "get_step", "(", ")", "\n", "\n", "def", "inner", "(", "*", "args", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "experimental", ".", "set_step", "(", "step", ")", "\n", "with", "writer", ".", "as_default", "(", ")", ":", "\n", "            ", "fn", "(", "*", "args", ")", "\n", "", "", "return", "tf", ".", "numpy_function", "(", "inner", ",", "args", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.video_summary": [[66, 82], ["numpy.issubdtype", "isinstance", "str", "numpy.clip().astype", "np.clip().astype.transpose().reshape", "tensorflow.Summary", "tensorflow.Summary.Image", "tools.encode_gif", "tf1.Summary.value.add", "tensorflow.summary.experimental.write_raw_pb", "tf1.Summary.SerializeToString", "print", "np.clip().astype.transpose().reshape", "tensorflow.summary.image", "numpy.clip", "np.clip().astype.transpose", "np.clip().astype.transpose"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.encode_gif"], ["", "def", "video_summary", "(", "name", ",", "video", ",", "step", "=", "None", ",", "fps", "=", "20", ")", ":", "\n", "    ", "name", "=", "name", "if", "isinstance", "(", "name", ",", "str", ")", "else", "str", "(", "name", ")", "\n", "if", "np", ".", "issubdtype", "(", "video", ".", "dtype", ",", "np", ".", "floating", ")", ":", "\n", "        ", "video", "=", "np", ".", "clip", "(", "255", "*", "video", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "B", ",", "T", ",", "H", ",", "W", ",", "C", "=", "video", ".", "shape", "\n", "try", ":", "\n", "        ", "frames", "=", "video", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ",", "3", ",", "4", ")", ")", ".", "reshape", "(", "(", "T", ",", "H", ",", "B", "*", "W", ",", "C", ")", ")", "\n", "summary", "=", "tf1", ".", "Summary", "(", ")", "\n", "image", "=", "tf1", ".", "Summary", ".", "Image", "(", "height", "=", "B", "*", "H", ",", "width", "=", "T", "*", "W", ",", "colorspace", "=", "C", ")", "\n", "image", ".", "encoded_image_string", "=", "encode_gif", "(", "frames", ",", "fps", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "name", "+", "'/gif'", ",", "image", "=", "image", ")", "\n", "tf", ".", "summary", ".", "experimental", ".", "write_raw_pb", "(", "summary", ".", "SerializeToString", "(", ")", ",", "step", ")", "\n", "", "except", "(", "IOError", ",", "OSError", ")", "as", "e", ":", "\n", "        ", "print", "(", "'GIF summaries require ffmpeg in $PATH.'", ",", "e", ")", "\n", "frames", "=", "video", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ")", ".", "reshape", "(", "(", "1", ",", "B", "*", "H", ",", "T", "*", "W", ",", "C", ")", ")", "\n", "tf", ".", "summary", ".", "image", "(", "name", "+", "'/grid'", ",", "frames", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.encode_gif": [[84, 101], ["Popen", "Popen.communicate", "cmd.split", "Popen.stdin.write", "IOError", "image.tostring", "err.decode"], "function", ["None"], ["", "", "def", "encode_gif", "(", "frames", ",", "fps", ")", ":", "\n", "    ", "from", "subprocess", "import", "Popen", ",", "PIPE", "\n", "h", ",", "w", ",", "c", "=", "frames", "[", "0", "]", ".", "shape", "\n", "pxfmt", "=", "{", "1", ":", "'gray'", ",", "3", ":", "'rgb24'", "}", "[", "c", "]", "\n", "cmd", "=", "' '", ".", "join", "(", "[", "\n", "f'ffmpeg -y -f rawvideo -vcodec rawvideo'", ",", "\n", "f'-r {fps:.02f} -s {w}x{h} -pix_fmt {pxfmt} -i - -filter_complex'", ",", "\n", "f'[0:v]split[x][z];[z]palettegen[y];[x]fifo[x];[x][y]paletteuse'", ",", "\n", "f'-r {fps:.02f} -f gif -'", "]", ")", "\n", "proc", "=", "Popen", "(", "cmd", ".", "split", "(", "' '", ")", ",", "stdin", "=", "PIPE", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "for", "image", "in", "frames", ":", "\n", "        ", "proc", ".", "stdin", ".", "write", "(", "image", ".", "tostring", "(", ")", ")", "\n", "", "out", ",", "err", "=", "proc", ".", "communicate", "(", ")", "\n", "if", "proc", ".", "returncode", ":", "\n", "        ", "raise", "IOError", "(", "'\\n'", ".", "join", "(", "[", "' '", ".", "join", "(", "cmd", ")", ",", "err", ".", "decode", "(", "'utf8'", ")", "]", ")", ")", "\n", "", "del", "proc", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.simulate": [[103, 136], ["numpy.ones", "numpy.zeros", "np.stack.any", "agent", "numpy.array", "zip", "list", "numpy.stack", "int", "len", "len", "len", "zip", "numpy.stack", "len", "len", "e.step", "np.stack.sum", "envs[].reset", "promise", "zip", "enumerate", "p"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.DummyEnv.reset"], ["", "def", "simulate", "(", "agent", ",", "envs", ",", "steps", "=", "0", ",", "episodes", "=", "0", ",", "state", "=", "None", ")", ":", "\n", "# Initialize or unpack simulation state.", "\n", "    ", "if", "state", "is", "None", ":", "\n", "        ", "step", ",", "episode", "=", "0", ",", "0", "\n", "done", "=", "np", ".", "ones", "(", "len", "(", "envs", ")", ",", "np", ".", "bool", ")", "\n", "length", "=", "np", ".", "zeros", "(", "len", "(", "envs", ")", ",", "np", ".", "int32", ")", "\n", "obs", "=", "[", "None", "]", "*", "len", "(", "envs", ")", "\n", "agent_state", "=", "None", "\n", "", "else", ":", "\n", "        ", "step", ",", "episode", ",", "done", ",", "length", ",", "obs", ",", "agent_state", "=", "state", "\n", "", "while", "(", "steps", "and", "step", "<", "steps", ")", "or", "(", "episodes", "and", "episode", "<", "episodes", ")", ":", "\n", "# Reset envs if necessary.", "\n", "        ", "if", "done", ".", "any", "(", ")", ":", "\n", "            ", "indices", "=", "[", "index", "for", "index", ",", "d", "in", "enumerate", "(", "done", ")", "if", "d", "]", "\n", "promises", "=", "[", "envs", "[", "i", "]", ".", "reset", "(", "blocking", "=", "False", ")", "for", "i", "in", "indices", "]", "\n", "for", "index", ",", "promise", "in", "zip", "(", "indices", ",", "promises", ")", ":", "\n", "                ", "obs", "[", "index", "]", "=", "promise", "(", ")", "\n", "# Step agents.", "\n", "", "", "obs", "=", "{", "k", ":", "np", ".", "stack", "(", "[", "o", "[", "k", "]", "for", "o", "in", "obs", "]", ")", "for", "k", "in", "obs", "[", "0", "]", "}", "\n", "action", ",", "agent_state", "=", "agent", "(", "obs", ",", "done", ",", "agent_state", ")", "\n", "action", "=", "np", ".", "array", "(", "action", ")", "\n", "assert", "len", "(", "action", ")", "==", "len", "(", "envs", ")", "\n", "# Step envs.", "\n", "promises", "=", "[", "e", ".", "step", "(", "a", ",", "blocking", "=", "False", ")", "for", "e", ",", "a", "in", "zip", "(", "envs", ",", "action", ")", "]", "\n", "obs", ",", "_", ",", "done", "=", "zip", "(", "*", "[", "p", "(", ")", "[", ":", "3", "]", "for", "p", "in", "promises", "]", ")", "\n", "obs", "=", "list", "(", "obs", ")", "\n", "done", "=", "np", ".", "stack", "(", "done", ")", "\n", "episode", "+=", "int", "(", "done", ".", "sum", "(", ")", ")", "\n", "length", "+=", "1", "\n", "step", "+=", "(", "done", "*", "length", ")", ".", "sum", "(", ")", "\n", "length", "*=", "(", "1", "-", "done", ")", "\n", "# Return new state to allow resuming the simulation.", "\n", "", "return", "(", "step", "-", "steps", ",", "episode", "-", "episodes", ",", "done", ",", "length", ",", "obs", ",", "agent_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.count_episodes": [[138, 143], ["directory.glob", "len", "sum", "int", "n.stem.rsplit"], "function", ["None"], ["", "def", "count_episodes", "(", "directory", ")", ":", "\n", "    ", "filenames", "=", "directory", ".", "glob", "(", "'*.npz'", ")", "\n", "lengths", "=", "[", "int", "(", "n", ".", "stem", ".", "rsplit", "(", "'-'", ",", "1", ")", "[", "-", "1", "]", ")", "-", "1", "for", "n", "in", "filenames", "]", "\n", "episodes", ",", "steps", "=", "len", "(", "lengths", ")", ",", "sum", "(", "lengths", ")", "\n", "return", "episodes", ",", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.save_episodes": [[145, 158], ["pathlib.Path().expanduser", "pathlib.Path().expanduser.mkdir", "datetime.datetime.now().strftime", "str", "len", "pathlib.Path", "datetime.datetime.now", "io.BytesIO", "numpy.savez_compressed", "f1.seek", "uuid.uuid4", "filename.open", "f2.write", "f1.read"], "function", ["None"], ["", "def", "save_episodes", "(", "directory", ",", "episodes", ")", ":", "\n", "    ", "directory", "=", "pathlib", ".", "Path", "(", "directory", ")", ".", "expanduser", "(", ")", "\n", "directory", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%dT%H%M%S'", ")", "\n", "for", "episode", "in", "episodes", ":", "\n", "        ", "identifier", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ".", "hex", ")", "\n", "length", "=", "len", "(", "episode", "[", "'reward'", "]", ")", "\n", "filename", "=", "directory", "/", "f'{timestamp}-{identifier}-{length}.npz'", "\n", "with", "io", ".", "BytesIO", "(", ")", "as", "f1", ":", "\n", "            ", "np", ".", "savez_compressed", "(", "f1", ",", "**", "episode", ")", "\n", "f1", ".", "seek", "(", "0", ")", "\n", "with", "filename", ".", "open", "(", "'wb'", ")", "as", "f2", ":", "\n", "                ", "f2", ".", "write", "(", "f1", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.load_episodes": [[160, 191], ["pathlib.Path().expanduser", "numpy.random.RandomState", "pathlib.Path().expanduser.glob", "list", "np.random.RandomState.choice", "pathlib.Path", "cache.keys", "len", "len", "next", "print", "min", "int", "filename.open", "numpy.load", "print", "iter", "np.random.RandomState.randint", "np.random.RandomState.randint", "np.load.items", "np.load.values", "np.load.keys"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.load"], ["", "", "", "", "def", "load_episodes", "(", "directory", ",", "rescan", ",", "length", "=", "None", ",", "balance", "=", "False", ",", "seed", "=", "0", ")", ":", "\n", "    ", "directory", "=", "pathlib", ".", "Path", "(", "directory", ")", ".", "expanduser", "(", ")", "\n", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "cache", "=", "{", "}", "\n", "while", "True", ":", "\n", "        ", "for", "filename", "in", "directory", ".", "glob", "(", "'*.npz'", ")", ":", "\n", "            ", "if", "filename", "not", "in", "cache", ":", "\n", "                ", "try", ":", "\n", "                    ", "with", "filename", ".", "open", "(", "'rb'", ")", "as", "f", ":", "\n", "                        ", "episode", "=", "np", ".", "load", "(", "f", ")", "\n", "episode", "=", "{", "k", ":", "episode", "[", "k", "]", "for", "k", "in", "episode", ".", "keys", "(", ")", "}", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "f'Could not load episode: {e}'", ")", "\n", "continue", "\n", "", "cache", "[", "filename", "]", "=", "episode", "\n", "", "", "keys", "=", "list", "(", "cache", ".", "keys", "(", ")", ")", "\n", "for", "index", "in", "random", ".", "choice", "(", "len", "(", "keys", ")", ",", "rescan", ")", ":", "\n", "            ", "episode", "=", "cache", "[", "keys", "[", "index", "]", "]", "\n", "if", "length", ":", "\n", "                ", "total", "=", "len", "(", "next", "(", "iter", "(", "episode", ".", "values", "(", ")", ")", ")", ")", "\n", "available", "=", "total", "-", "length", "\n", "if", "available", "<", "1", ":", "\n", "                    ", "print", "(", "f'Skipped short episode of length {available}.'", ")", "\n", "continue", "\n", "", "if", "balance", ":", "\n", "                    ", "index", "=", "min", "(", "random", ".", "randint", "(", "0", ",", "total", ")", ",", "available", ")", "\n", "", "else", ":", "\n", "                    ", "index", "=", "int", "(", "random", ".", "randint", "(", "0", ",", "available", ")", ")", "\n", "", "episode", "=", "{", "k", ":", "v", "[", "index", ":", "index", "+", "length", "]", "\n", "for", "k", ",", "v", "in", "episode", ".", "items", "(", ")", "}", "\n", "", "yield", "episode", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.lambda_return": [[320, 343], ["isinstance", "list", "tensorflow.concat", "tools.static_scan", "range", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.zeros_like", "tensorflow.transpose", "tensorflow.ones_like"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.static_scan"], ["", "", "def", "lambda_return", "(", "\n", "reward", ",", "value", ",", "pcont", ",", "bootstrap", ",", "lambda_", ",", "axis", ")", ":", "\n", "# Setting lambda=1 gives a discounted Monte Carlo return.", "\n", "# Setting lambda=0 gives a fixed 1-step return.", "\n", "    ", "assert", "reward", ".", "shape", ".", "ndims", "==", "value", ".", "shape", ".", "ndims", ",", "(", "reward", ".", "shape", ",", "value", ".", "shape", ")", "\n", "if", "isinstance", "(", "pcont", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "pcont", "=", "pcont", "*", "tf", ".", "ones_like", "(", "reward", ")", "\n", "", "dims", "=", "list", "(", "range", "(", "reward", ".", "shape", ".", "ndims", ")", ")", "\n", "dims", "=", "[", "axis", "]", "+", "dims", "[", "1", ":", "axis", "]", "+", "[", "0", "]", "+", "dims", "[", "axis", "+", "1", ":", "]", "\n", "if", "axis", "!=", "0", ":", "\n", "        ", "reward", "=", "tf", ".", "transpose", "(", "reward", ",", "dims", ")", "\n", "value", "=", "tf", ".", "transpose", "(", "value", ",", "dims", ")", "\n", "pcont", "=", "tf", ".", "transpose", "(", "pcont", ",", "dims", ")", "\n", "", "if", "bootstrap", "is", "None", ":", "\n", "        ", "bootstrap", "=", "tf", ".", "zeros_like", "(", "value", "[", "-", "1", "]", ")", "\n", "", "next_values", "=", "tf", ".", "concat", "(", "[", "value", "[", "1", ":", "]", ",", "bootstrap", "[", "None", "]", "]", ",", "0", ")", "\n", "inputs", "=", "reward", "+", "pcont", "*", "next_values", "*", "(", "1", "-", "lambda_", ")", "\n", "returns", "=", "static_scan", "(", "\n", "lambda", "agg", ",", "cur", ":", "cur", "[", "0", "]", "+", "cur", "[", "1", "]", "*", "lambda_", "*", "agg", ",", "\n", "(", "inputs", ",", "pcont", ")", ",", "bootstrap", ",", "reverse", "=", "True", ")", "\n", "if", "axis", "!=", "0", ":", "\n", "        ", "returns", "=", "tf", ".", "transpose", "(", "returns", ",", "dims", ")", "\n", "", "return", "returns", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.args_type": [[389, 397], ["isinstance", "isinstance", "isinstance", "type", "bool", "pathlib.Path().expanduser", "float", "int", "pathlib.Path"], "function", ["None"], ["", "", "", "", "def", "args_type", "(", "default", ")", ":", "\n", "    ", "if", "isinstance", "(", "default", ",", "bool", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "bool", "(", "[", "'False'", ",", "'True'", "]", ".", "index", "(", "x", ")", ")", "\n", "", "if", "isinstance", "(", "default", ",", "int", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "float", "(", "x", ")", "if", "(", "'e'", "in", "x", "or", "'.'", "in", "x", ")", "else", "int", "(", "x", ")", "\n", "", "if", "isinstance", "(", "default", ",", "pathlib", ".", "Path", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "pathlib", ".", "Path", "(", "x", ")", ".", "expanduser", "(", ")", "\n", "", "return", "type", "(", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.static_scan": [[399, 413], ["range", "tensorflow.nest.pack_sequence_as", "len", "reversed", "tensorflow.nest.map_structure", "fn", "tensorflow.stack", "tensorflow.nest.flatten", "o.append", "list", "tensorflow.nest.flatten", "zip", "reversed", "tensorflow.nest.flatten"], "function", ["None"], ["", "def", "static_scan", "(", "fn", ",", "inputs", ",", "start", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "last", "=", "start", "\n", "outputs", "=", "[", "[", "]", "for", "_", "in", "tf", ".", "nest", ".", "flatten", "(", "start", ")", "]", "\n", "indices", "=", "range", "(", "len", "(", "tf", ".", "nest", ".", "flatten", "(", "inputs", ")", "[", "0", "]", ")", ")", "\n", "if", "reverse", ":", "\n", "        ", "indices", "=", "reversed", "(", "indices", ")", "\n", "", "for", "index", "in", "indices", ":", "\n", "        ", "inp", "=", "tf", ".", "nest", ".", "map_structure", "(", "lambda", "x", ":", "x", "[", "index", "]", ",", "inputs", ")", "\n", "last", "=", "fn", "(", "last", ",", "inp", ")", "\n", "[", "o", ".", "append", "(", "l", ")", "for", "o", ",", "l", "in", "zip", "(", "outputs", ",", "tf", ".", "nest", ".", "flatten", "(", "last", ")", ")", "]", "\n", "", "if", "reverse", ":", "\n", "        ", "outputs", "=", "[", "list", "(", "reversed", "(", "x", ")", ")", "for", "x", "in", "outputs", "]", "\n", "", "outputs", "=", "[", "tf", ".", "stack", "(", "x", ",", "0", ")", "for", "x", "in", "outputs", "]", "\n", "return", "tf", ".", "nest", ".", "pack_sequence_as", "(", "start", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.static_scan_action": [[414, 431], ["range", "len", "reversed", "tensorflow.nest.map_structure", "fn2", "fn1", "actions.append", "tensorflow.stack", "tensorflow.nest.pack_sequence_as", "tensorflow.nest.flatten", "o.append", "list", "tensorflow.nest.flatten", "zip", "reversed", "tensorflow.nest.flatten"], "function", ["None"], ["", "def", "static_scan_action", "(", "fn1", ",", "fn2", ",", "inputs", ",", "start", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "last", "=", "start", "\n", "outputs", "=", "[", "[", "]", "for", "_", "in", "tf", ".", "nest", ".", "flatten", "(", "start", ")", "]", "\n", "indices", "=", "range", "(", "len", "(", "tf", ".", "nest", ".", "flatten", "(", "inputs", ")", "[", "0", "]", ")", ")", "\n", "actions", "=", "[", "]", "\n", "if", "reverse", ":", "\n", "        ", "indices", "=", "reversed", "(", "indices", ")", "\n", "", "for", "index", "in", "indices", ":", "\n", "        ", "inp", "=", "tf", ".", "nest", ".", "map_structure", "(", "lambda", "x", ":", "x", "[", "index", "]", ",", "inputs", ")", "\n", "action", "=", "fn2", "(", "last", ")", "\n", "last", "=", "fn1", "(", "last", ",", "action", ",", "inp", ")", "\n", "[", "o", ".", "append", "(", "l", ")", "for", "o", ",", "l", "in", "zip", "(", "outputs", ",", "tf", ".", "nest", ".", "flatten", "(", "last", ")", ")", "]", "\n", "actions", ".", "append", "(", "action", ")", "\n", "", "if", "reverse", ":", "\n", "        ", "outputs", "=", "[", "list", "(", "reversed", "(", "x", ")", ")", "for", "x", "in", "outputs", "]", "\n", "", "outputs", "=", "[", "tf", ".", "stack", "(", "x", ",", "0", ")", "for", "x", "in", "outputs", "]", "\n", "return", "tf", ".", "nest", ".", "pack_sequence_as", "(", "start", ",", "outputs", ")", ",", "actions", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools._mnd_sample": [[434, 438], ["tensorflow.random.normal", "tools..mean", "tools..stddev", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mean"], ["", "def", "_mnd_sample", "(", "self", ",", "sample_shape", "=", "(", ")", ",", "seed", "=", "None", ",", "name", "=", "'sample'", ")", ":", "\n", "    ", "return", "tf", ".", "random", ".", "normal", "(", "\n", "tuple", "(", "sample_shape", ")", "+", "tuple", "(", "self", ".", "event_shape", ")", ",", "\n", "self", ".", "mean", "(", ")", ",", "self", ".", "stddev", "(", ")", ",", "self", ".", "dtype", ",", "seed", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools._cat_sample": [[443, 452], ["tensorflow.random.categorical", "len", "len", "tools..logits_parameter", "tools..logits_parameter"], "function", ["None"], ["def", "_cat_sample", "(", "self", ",", "sample_shape", "=", "(", ")", ",", "seed", "=", "None", ",", "name", "=", "'sample'", ")", ":", "\n", "    ", "assert", "len", "(", "sample_shape", ")", "in", "(", "0", ",", "1", ")", ",", "sample_shape", "\n", "assert", "len", "(", "self", ".", "logits_parameter", "(", ")", ".", "shape", ")", "==", "2", "\n", "indices", "=", "tf", ".", "random", ".", "categorical", "(", "\n", "self", ".", "logits_parameter", "(", ")", ",", "sample_shape", "[", "0", "]", "if", "sample_shape", "else", "1", ",", "\n", "self", ".", "dtype", ",", "seed", ",", "name", ")", "\n", "if", "not", "sample_shape", ":", "\n", "        ", "indices", "=", "indices", "[", "...", ",", "0", "]", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.load_imgnet": [[485, 495], ["numpy.transpose", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.load"], ["", "", "def", "load_imgnet", "(", "train", ")", ":", "\n", "    ", "import", "pickle", "\n", "name", "=", "'train'", "if", "train", "else", "'valid'", "\n", "\n", "with", "open", "(", "'./natural_{}.pkl'", ".", "format", "(", "name", ")", ",", "'rb'", ")", "as", "fin", ":", "\n", "        ", "imgnet", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "\n", "", "imgnet", "=", "np", ".", "transpose", "(", "imgnet", ",", "axes", "=", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ")", "\n", "\n", "return", "imgnet", "\n", "", ""]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.__init__": [[110, 130], ["numpy.random.RandomState", "tools.Once", "tools.Every", "tools.Every", "time.time", "collections.defaultdict", "iter", "cvrl.CVRL._build_model", "hasattr", "tensorflow.device", "tensorflow.Variable", "tensorflow.keras.mixed_precision.experimental.global_policy", "cvrl.load_dataset", "cvrl.count_steps"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._build_model", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.load_dataset", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.count_steps"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "datadir", ",", "actspace", ",", "writer", ")", ":", "\n", "        ", "self", ".", "_c", "=", "config", "\n", "self", ".", "_actspace", "=", "actspace", "\n", "self", ".", "_actdim", "=", "actspace", ".", "n", "if", "hasattr", "(", "\n", "actspace", ",", "'n'", ")", "else", "actspace", ".", "shape", "[", "0", "]", "\n", "self", ".", "_writer", "=", "writer", "\n", "self", ".", "_random", "=", "np", ".", "random", ".", "RandomState", "(", "config", ".", "seed", ")", "\n", "with", "tf", ".", "device", "(", "'cpu:0'", ")", ":", "\n", "            ", "self", ".", "_step", "=", "tf", ".", "Variable", "(", "count_steps", "(", "\n", "datadir", ",", "config", ")", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "", "self", ".", "_should_pretrain", "=", "tools", ".", "Once", "(", ")", "\n", "self", ".", "_should_train", "=", "tools", ".", "Every", "(", "config", ".", "train_every", ")", "\n", "self", ".", "_should_log", "=", "tools", ".", "Every", "(", "config", ".", "log_every", ")", "\n", "self", ".", "_last_log", "=", "None", "\n", "self", ".", "_last_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_metrics", "=", "collections", ".", "defaultdict", "(", "tf", ".", "metrics", ".", "Mean", ")", "\n", "self", ".", "_metrics", "[", "'expl_amount'", "]", "# Create variable for checkpoint.", "\n", "self", ".", "_float", "=", "prec", ".", "global_policy", "(", ")", ".", "compute_dtype", "\n", "self", ".", "_dataset", "=", "iter", "(", "load_dataset", "(", "datadir", ",", "self", ".", "_c", ")", ")", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.__call__": [[131, 151], ["cvrl.CVRL._step.numpy().item", "tensorflow.summary.experimental.set_step", "cvrl.CVRL._should_train", "cvrl.CVRL.policy", "reset.any", "tensorflow.nest.map_structure", "cvrl.CVRL._should_log", "print", "range", "cvrl.CVRL._step.assign_add", "cvrl.CVRL._step.numpy", "tensorflow.cast", "cvrl.CVRL._should_pretrain", "cvrl.CVRL.train", "cvrl.CVRL._write_summaries", "next", "len"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.policy", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.train", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._write_summaries"], ["", "def", "__call__", "(", "self", ",", "obs", ",", "reset", ",", "state", "=", "None", ",", "training", "=", "True", ")", ":", "\n", "        ", "step", "=", "self", ".", "_step", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "tf", ".", "summary", ".", "experimental", ".", "set_step", "(", "step", ")", "\n", "if", "state", "is", "not", "None", "and", "reset", ".", "any", "(", ")", ":", "\n", "            ", "mask", "=", "tf", ".", "cast", "(", "1", "-", "reset", ",", "self", ".", "_float", ")", "[", ":", ",", "None", "]", "\n", "state", "=", "tf", ".", "nest", ".", "map_structure", "(", "lambda", "x", ":", "x", "*", "mask", ",", "state", ")", "\n", "", "if", "self", ".", "_should_train", "(", "step", ")", ":", "\n", "            ", "log", "=", "self", ".", "_should_log", "(", "step", ")", "\n", "n", "=", "self", ".", "_c", ".", "pretrain", "if", "self", ".", "_should_pretrain", "(", ")", "else", "self", ".", "_c", ".", "train_steps", "\n", "print", "(", "f'Training for {n} steps.'", ")", "\n", "# with self._strategy.scope():", "\n", "for", "train_step", "in", "range", "(", "n", ")", ":", "\n", "                ", "log_images", "=", "self", ".", "_c", ".", "log_images", "and", "log", "and", "train_step", "==", "0", "\n", "self", ".", "train", "(", "next", "(", "self", ".", "_dataset", ")", ",", "log_images", ")", "\n", "", "if", "log", ":", "\n", "                ", "self", ".", "_write_summaries", "(", ")", "\n", "", "", "action", ",", "state", "=", "self", ".", "policy", "(", "obs", ",", "state", ",", "training", ")", "\n", "if", "training", ":", "\n", "            ", "self", ".", "_step", ".", "assign_add", "(", "len", "(", "reset", ")", "*", "self", ".", "_c", ".", "action_repeat", ")", "\n", "", "return", "action", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.policy": [[152, 174], ["cvrl.CVRL._encode", "cvrl.CVRL._dynamics.obs_step", "cvrl.CVRL._dynamics.get_feat", "cvrl.CVRL._exploration", "cvrl.CVRL._dynamics.initial", "tensorflow.zeros", "cvrl.preprocess", "cvrl.CVRL._trajectory_optimization", "len", "cvrl.CVRL._actor().sample", "cvrl.CVRL._actor().mode", "len", "cvrl.CVRL._actor", "cvrl.CVRL._actor"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.obs_step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_feat", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._exploration", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.initial", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.preprocess", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._trajectory_optimization", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode"], ["", "@", "tf", ".", "function", "\n", "def", "policy", "(", "self", ",", "obs", ",", "state", ",", "training", ")", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "latent", "=", "self", ".", "_dynamics", ".", "initial", "(", "len", "(", "obs", "[", "'image'", "]", ")", ")", "\n", "action", "=", "tf", ".", "zeros", "(", "(", "len", "(", "obs", "[", "'image'", "]", ")", ",", "self", ".", "_actdim", ")", ",", "self", ".", "_float", ")", "\n", "", "else", ":", "\n", "            ", "latent", ",", "action", "=", "state", "\n", "", "embed", "=", "self", ".", "_encode", "(", "preprocess", "(", "obs", ",", "self", ".", "_c", ")", ")", "\n", "latent", ",", "_", "=", "self", ".", "_dynamics", ".", "obs_step", "(", "latent", ",", "action", ",", "embed", ")", "\n", "feat", "=", "self", ".", "_dynamics", ".", "get_feat", "(", "latent", ")", "\n", "\n", "if", "self", ".", "_c", ".", "trajectory_opt", ":", "\n", "            ", "action", "=", "self", ".", "_trajectory_optimization", "(", "latent", ")", "\n", "", "else", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "action", "=", "self", ".", "_actor", "(", "feat", ")", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "self", ".", "_actor", "(", "feat", ")", ".", "mode", "(", ")", "\n", "\n", "", "", "action", "=", "self", ".", "_exploration", "(", "action", ",", "training", ")", "\n", "state", "=", "(", "latent", ",", "action", ")", "\n", "return", "action", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.load": [[175, 178], ["super().load", "cvrl.CVRL._should_pretrain"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.load"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "super", "(", ")", ".", "load", "(", "filename", ")", "\n", "self", ".", "_should_pretrain", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.train": [[179, 182], ["tensorflow.function", "cvrl.CVRL._train"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._train"], ["", "@", "tf", ".", "function", "(", ")", "\n", "def", "train", "(", "self", ",", "data", ",", "log_images", "=", "False", ")", ":", "\n", "        ", "self", ".", "_train", "(", "data", ",", "log_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._train": [[183, 263], ["cvrl.CVRL._model_opt", "tensorflow.concat", "tensorflow.zeros_like", "tensorflow.GradientTape", "cvrl.CVRL._encode", "cvrl.CVRL._dynamics.observe", "cvrl.CVRL._dynamics.get_feat", "cvrl.CVRL._reward", "tools.AttrDict", "tensorflow.reduce_mean", "cvrl.CVRL._decode", "cvrl.CVRL._contrastive", "cvrl.CVRL._dynamics.get_dist", "cvrl.CVRL._dynamics.get_dist", "tensorflow.reduce_mean", "tensorflow.maximum", "cvrl.CVRL._actor_opt", "cvrl.CVRL._value_opt", "cvrl.CVRL._sac._do_training", "cvrl.CVRL.log_prob", "tensorflow.reduce_mean", "cvrl.CVRL._pcont", "tensorflow.reduce_mean", "tensorflow_probability.distributions.kl_divergence", "sum", "tensorflow.GradientTape", "cvrl.CVRL._imagine_ahead", "cvrl.CVRL._reward().mode", "cvrl.CVRL._value().mode", "tools.lambda_return", "tensorflow.stop_gradient", "tensorflow.GradientTape", "tensorflow.stop_gradient", "tensorflow.distribute.get_replica_context", "cvrl.CVRL._scalar_summaries", "tensorflow.equal", "cvrl.CVRL._image_summaries", "cvrl.CVRL.log_prob", "tensorflow.reduce_mean", "cvrl.CVRL.log_prob", "tools.AttrDict.values", "cvrl.CVRL._pcont().mean", "tensorflow.math.cumprod", "tensorflow.reduce_mean", "cvrl.CVRL._value", "tensorflow.reduce_mean", "cvrl.CVRL._reward", "tensorflow.ones_like", "cvrl.CVRL._value", "tensorflow.concat", "cvrl.CVRL._pcont", "value_pred.log_prob", "tensorflow.ones_like"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.observe", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_feat", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_dist", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_dist", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._do_training", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._imagine_ahead", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.lambda_return", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._scalar_summaries", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._image_summaries", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mean", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.log_prob"], ["", "def", "_train", "(", "self", ",", "data", ",", "log_images", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", ")", "as", "model_tape", ":", "\n", "            ", "embed", "=", "self", ".", "_encode", "(", "data", ")", "\n", "post", ",", "prior", "=", "self", ".", "_dynamics", ".", "observe", "(", "embed", ",", "data", "[", "'action'", "]", ")", "\n", "feat", "=", "self", ".", "_dynamics", ".", "get_feat", "(", "post", ")", "\n", "reward_pred", "=", "self", ".", "_reward", "(", "feat", ")", "\n", "likes", "=", "tools", ".", "AttrDict", "(", ")", "\n", "likes", ".", "reward", "=", "tf", ".", "reduce_mean", "(", "reward_pred", ".", "log_prob", "(", "data", "[", "'reward'", "]", ")", ")", "\n", "\n", "# if we use the generative observation model, we need to perform observation reconstruction", "\n", "image_pred", "=", "self", ".", "_decode", "(", "feat", ")", "\n", "# compute the contrative loss directly in CVRL", "\n", "cont_loss", "=", "self", ".", "_contrastive", "(", "feat", ",", "embed", ")", "\n", "\n", "# the contrastive / generative implementation of the observation model p(o|s)", "\n", "if", "self", ".", "_c", ".", "obs_model", "==", "'generative'", ":", "\n", "                ", "likes", ".", "image", "=", "tf", ".", "reduce_mean", "(", "image_pred", ".", "log_prob", "(", "data", "[", "'image'", "]", ")", ")", "\n", "", "elif", "self", ".", "_c", ".", "obs_model", "==", "'contrastive'", ":", "\n", "                ", "likes", ".", "image", "=", "tf", ".", "reduce_mean", "(", "cont_loss", ")", "\n", "\n", "", "if", "self", ".", "_c", ".", "pcont", ":", "\n", "                ", "pcont_pred", "=", "self", ".", "_pcont", "(", "feat", ")", "\n", "pcont_target", "=", "self", ".", "_c", ".", "discount", "*", "data", "[", "'discount'", "]", "\n", "likes", ".", "pcont", "=", "tf", ".", "reduce_mean", "(", "pcont_pred", ".", "log_prob", "(", "pcont_target", ")", ")", "\n", "likes", ".", "pcont", "*=", "self", ".", "_c", ".", "pcont_scale", "\n", "\n", "", "prior_dist", "=", "self", ".", "_dynamics", ".", "get_dist", "(", "prior", ")", "\n", "post_dist", "=", "self", ".", "_dynamics", ".", "get_dist", "(", "post", ")", "\n", "div", "=", "tf", ".", "reduce_mean", "(", "tfd", ".", "kl_divergence", "(", "post_dist", ",", "prior_dist", ")", ")", "\n", "div", "=", "tf", ".", "maximum", "(", "div", ",", "self", ".", "_c", ".", "free_nats", ")", "\n", "model_loss", "=", "self", ".", "_c", ".", "kl_scale", "*", "div", "-", "sum", "(", "likes", ".", "values", "(", ")", ")", "\n", "\n", "", "assert", "self", ".", "_c", ".", "use_dreamer", "or", "self", ".", "_c", ".", "use_sac", "\n", "\n", "if", "self", ".", "_c", ".", "use_dreamer", ":", "\n", "            ", "with", "tf", ".", "GradientTape", "(", ")", "as", "actor_tape", ":", "\n", "                ", "imag_feat", "=", "self", ".", "_imagine_ahead", "(", "post", ")", "\n", "reward", "=", "self", ".", "_reward", "(", "imag_feat", ")", ".", "mode", "(", ")", "\n", "if", "self", ".", "_c", ".", "pcont", ":", "\n", "                    ", "pcont", "=", "self", ".", "_pcont", "(", "imag_feat", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "pcont", "=", "self", ".", "_c", ".", "discount", "*", "tf", ".", "ones_like", "(", "reward", ")", "\n", "", "value", "=", "self", ".", "_value", "(", "imag_feat", ")", ".", "mode", "(", ")", "\n", "returns", "=", "tools", ".", "lambda_return", "(", "\n", "reward", "[", ":", "-", "1", "]", ",", "value", "[", ":", "-", "1", "]", ",", "pcont", "[", ":", "-", "1", "]", ",", "\n", "bootstrap", "=", "value", "[", "-", "1", "]", ",", "lambda_", "=", "self", ".", "_c", ".", "disclam", ",", "axis", "=", "0", ")", "\n", "discount", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "math", ".", "cumprod", "(", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "ones_like", "(", "pcont", "[", ":", "1", "]", ")", ",", "pcont", "[", ":", "-", "2", "]", "]", ",", "0", ")", ",", "0", ")", ")", "\n", "actor_loss", "=", "-", "tf", ".", "reduce_mean", "(", "discount", "*", "returns", ")", "\n", "\n", "", "with", "tf", ".", "GradientTape", "(", ")", "as", "value_tape", ":", "\n", "                ", "value_pred", "=", "self", ".", "_value", "(", "imag_feat", ")", "[", ":", "-", "1", "]", "\n", "target", "=", "tf", ".", "stop_gradient", "(", "returns", ")", "\n", "value_loss", "=", "-", "tf", ".", "reduce_mean", "(", "discount", "*", "value_pred", ".", "log_prob", "(", "target", ")", ")", "\n", "\n", "", "actor_norm", "=", "self", ".", "_actor_opt", "(", "actor_tape", ",", "actor_loss", ")", "\n", "value_norm", "=", "self", ".", "_value_opt", "(", "value_tape", ",", "value_loss", ")", "\n", "", "else", ":", "\n", "            ", "actor_norm", "=", "actor_loss", "=", "0", "\n", "value_norm", "=", "value_loss", "=", "0", "\n", "\n", "", "model_norm", "=", "self", ".", "_model_opt", "(", "model_tape", ",", "model_loss", ")", "\n", "states", "=", "tf", ".", "concat", "(", "[", "post", "[", "'stoch'", "]", ",", "post", "[", "'deter'", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "rewards", "=", "data", "[", "'reward'", "]", "\n", "dones", "=", "tf", ".", "zeros_like", "(", "rewards", ")", "\n", "actions", "=", "data", "[", "'action'", "]", "\n", "\n", "# if we use SAC, add the SAC training", "\n", "if", "self", ".", "_c", ".", "use_sac", ":", "\n", "            ", "self", ".", "_sac", ".", "_do_training", "(", "self", ".", "_step", ",", "states", ",", "actions", ",", "rewards", ",", "dones", ")", "\n", "\n", "", "if", "tf", ".", "distribute", ".", "get_replica_context", "(", ")", ".", "replica_id_in_sync_group", "==", "0", ":", "\n", "            ", "if", "self", ".", "_c", ".", "log_scalars", ":", "\n", "                ", "self", ".", "_scalar_summaries", "(", "\n", "data", ",", "feat", ",", "prior_dist", ",", "post_dist", ",", "likes", ",", "div", ",", "\n", "model_loss", ",", "value_loss", ",", "actor_loss", ",", "model_norm", ",", "value_norm", ",", "\n", "actor_norm", ")", "\n", "", "if", "tf", ".", "equal", "(", "log_images", ",", "True", ")", "and", "self", ".", "_c", ".", "log_imgs", ":", "\n", "                ", "self", ".", "_image_summaries", "(", "data", ",", "embed", ",", "image_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._build_model": [[264, 301], ["dict", "models.ConvEncoder", "models.RSSM", "models.ConvDecoder", "models.ContrastiveObsModel", "models.DenseDecoder", "models.DenseDecoder", "models.ActionDecoder", "functools.partial", "functools.partial.", "functools.partial.", "functools.partial.", "cvrl.CVRL.train", "models.DenseDecoder", "models.QNetwork", "model_modules.append", "functools.partial.", "soft_actor_critic.SAC", "next", "range"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.train"], ["", "", "", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "acts", "=", "dict", "(", "\n", "elu", "=", "tf", ".", "nn", ".", "elu", ",", "relu", "=", "tf", ".", "nn", ".", "relu", ",", "swish", "=", "tf", ".", "nn", ".", "swish", ",", "\n", "leaky_relu", "=", "tf", ".", "nn", ".", "leaky_relu", ")", "\n", "cnn_act", "=", "acts", "[", "self", ".", "_c", ".", "cnn_act", "]", "\n", "act", "=", "acts", "[", "self", ".", "_c", ".", "dense_act", "]", "\n", "self", ".", "_encode", "=", "models", ".", "ConvEncoder", "(", "self", ".", "_c", ".", "cnn_depth", ",", "cnn_act", ")", "\n", "self", ".", "_dynamics", "=", "models", ".", "RSSM", "(", "\n", "self", ".", "_c", ".", "stoch_size", ",", "self", ".", "_c", ".", "deter_size", ",", "self", ".", "_c", ".", "deter_size", ")", "\n", "self", ".", "_decode", "=", "models", ".", "ConvDecoder", "(", "self", ".", "_c", ".", "cnn_depth", ",", "cnn_act", ")", "\n", "self", ".", "_contrastive", "=", "models", ".", "ContrastiveObsModel", "(", "self", ".", "_c", ".", "deter_size", ",", "\n", "self", ".", "_c", ".", "deter_size", "*", "2", ")", "\n", "self", ".", "_reward", "=", "models", ".", "DenseDecoder", "(", "(", ")", ",", "2", ",", "self", ".", "_c", ".", "num_units", ",", "act", "=", "act", ")", "\n", "if", "self", ".", "_c", ".", "pcont", ":", "\n", "            ", "self", ".", "_pcont", "=", "models", ".", "DenseDecoder", "(", "\n", "(", ")", ",", "3", ",", "self", ".", "_c", ".", "num_units", ",", "'binary'", ",", "act", "=", "act", ")", "\n", "", "self", ".", "_value", "=", "models", ".", "DenseDecoder", "(", "(", ")", ",", "3", ",", "self", ".", "_c", ".", "num_units", ",", "act", "=", "act", ")", "\n", "self", ".", "_Qs", "=", "[", "models", ".", "QNetwork", "(", "3", ",", "self", ".", "_c", ".", "num_units", ",", "act", "=", "act", ")", "for", "_", "in", "range", "(", "self", ".", "_c", ".", "num_Qs", ")", "]", "\n", "self", ".", "_actor", "=", "models", ".", "ActionDecoder", "(", "\n", "self", ".", "_actdim", ",", "4", ",", "self", ".", "_c", ".", "num_units", ",", "self", ".", "_c", ".", "action_dist", ",", "\n", "init_std", "=", "self", ".", "_c", ".", "action_init_std", ",", "act", "=", "act", ")", "\n", "model_modules", "=", "[", "self", ".", "_encode", ",", "self", ".", "_dynamics", ",", "\n", "self", ".", "_contrastive", ",", "self", ".", "_reward", ",", "self", ".", "_decode", "]", "\n", "if", "self", ".", "_c", ".", "pcont", ":", "\n", "            ", "model_modules", ".", "append", "(", "self", ".", "_pcont", ")", "\n", "", "Optimizer", "=", "functools", ".", "partial", "(", "\n", "tools", ".", "Adam", ",", "wd", "=", "self", ".", "_c", ".", "weight_decay", ",", "clip", "=", "self", ".", "_c", ".", "grad_clip", ",", "\n", "wdpattern", "=", "self", ".", "_c", ".", "weight_decay_pattern", ")", "\n", "self", ".", "_model_opt", "=", "Optimizer", "(", "'model'", ",", "model_modules", ",", "self", ".", "_c", ".", "model_lr", ")", "\n", "self", ".", "_value_opt", "=", "Optimizer", "(", "'value'", ",", "[", "self", ".", "_value", "]", ",", "self", ".", "_c", ".", "value_lr", ")", "\n", "self", ".", "_actor_opt", "=", "Optimizer", "(", "'actor'", ",", "[", "self", ".", "_actor", "]", ",", "self", ".", "_c", ".", "actor_lr", ")", "\n", "self", ".", "_q_opts", "=", "[", "Optimizer", "(", "'qs'", ",", "[", "qnet", "]", ",", "self", ".", "_c", ".", "value_lr", ")", "for", "qnet", "in", "self", ".", "_Qs", "]", "\n", "\n", "if", "self", ".", "_c", ".", "use_sac", ":", "\n", "            ", "self", ".", "_sac", "=", "soft_actor_critic", ".", "SAC", "(", "self", ".", "_actor", ",", "self", ".", "_Qs", ",", "self", ".", "_actor_opt", ",", "self", ".", "_q_opts", ",", "self", ".", "_actspace", ")", "\n", "\n", "", "self", ".", "train", "(", "next", "(", "self", ".", "_dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._exploration": [[302, 326], ["NotImplementedError", "cvrl.CVRL._metrics[].update_state", "tensorflow.clip_by_value", "tensorflow.random.uniform", "tensorflow_probability.distributions.Categorical().sample", "tensorflow.where", "tensorflow.maximum", "tensorflow_probability.distributions.Normal().sample", "tensorflow.one_hot", "tensorflow_probability.distributions.Categorical", "tensorflow.random.uniform", "tensorflow.cast", "tensorflow_probability.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample"], ["", "def", "_exploration", "(", "self", ",", "action", ",", "training", ")", ":", "\n", "        ", "if", "training", ":", "\n", "            ", "amount", "=", "self", ".", "_c", ".", "expl_amount", "\n", "if", "self", ".", "_c", ".", "expl_decay", ":", "\n", "                ", "amount", "*=", "0.5", "**", "(", "tf", ".", "cast", "(", "self", ".", "_step", ",", "\n", "tf", ".", "float32", ")", "/", "self", ".", "_c", ".", "expl_decay", ")", "\n", "", "if", "self", ".", "_c", ".", "expl_min", ":", "\n", "                ", "amount", "=", "tf", ".", "maximum", "(", "self", ".", "_c", ".", "expl_min", ",", "amount", ")", "\n", "", "self", ".", "_metrics", "[", "'expl_amount'", "]", ".", "update_state", "(", "amount", ")", "\n", "", "elif", "self", ".", "_c", ".", "eval_noise", ":", "\n", "            ", "amount", "=", "self", ".", "_c", ".", "eval_noise", "\n", "", "else", ":", "\n", "            ", "return", "action", "\n", "", "if", "self", ".", "_c", ".", "expl", "==", "'additive_gaussian'", ":", "\n", "            ", "return", "tf", ".", "clip_by_value", "(", "tfd", ".", "Normal", "(", "action", ",", "amount", ")", ".", "sample", "(", ")", ",", "-", "1", ",", "1", ")", "\n", "", "if", "self", ".", "_c", ".", "expl", "==", "'completely_random'", ":", "\n", "            ", "return", "tf", ".", "random", ".", "uniform", "(", "action", ".", "shape", ",", "-", "1", ",", "1", ")", "\n", "", "if", "self", ".", "_c", ".", "expl", "==", "'epsilon_greedy'", ":", "\n", "            ", "indices", "=", "tfd", ".", "Categorical", "(", "0", "*", "action", ")", ".", "sample", "(", ")", "\n", "return", "tf", ".", "where", "(", "\n", "tf", ".", "random", ".", "uniform", "(", "action", ".", "shape", "[", ":", "1", "]", ",", "0", ",", "1", ")", "<", "amount", ",", "\n", "tf", ".", "one_hot", "(", "indices", ",", "action", ".", "shape", "[", "-", "1", "]", ",", "dtype", "=", "self", ".", "_float", ")", ",", "\n", "action", ")", "\n", "", "raise", "NotImplementedError", "(", "self", ".", "_c", ".", "expl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._imagine_ahead": [[327, 341], ["tools.static_scan", "cvrl.CVRL._dynamics.get_feat", "tensorflow.reshape", "cvrl.CVRL._imagine_ahead.flatten"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.static_scan", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_feat"], ["", "def", "_imagine_ahead", "(", "self", ",", "post", ")", ":", "\n", "        ", "if", "self", ".", "_c", ".", "pcont", ":", "# Last step could be terminal.", "\n", "            ", "post", "=", "{", "k", ":", "v", "[", ":", ",", ":", "-", "1", "]", "for", "k", ",", "v", "in", "post", ".", "items", "(", ")", "}", "\n", "\n", "", "def", "flatten", "(", "x", ")", ":", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", "+", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", "start", "=", "{", "k", ":", "flatten", "(", "v", ")", "for", "k", ",", "v", "in", "post", ".", "items", "(", ")", "}", "\n", "\n", "def", "policy", "(", "state", ")", ":", "return", "self", ".", "_actor", "(", "\n", "tf", ".", "stop_gradient", "(", "self", ".", "_dynamics", ".", "get_feat", "(", "state", ")", ")", ")", ".", "sample", "(", ")", "\n", "states", "=", "tools", ".", "static_scan", "(", "\n", "lambda", "prev", ",", "_", ":", "self", ".", "_dynamics", ".", "img_step", "(", "prev", ",", "policy", "(", "prev", ")", ")", ",", "\n", "tf", ".", "range", "(", "self", ".", "_c", ".", "horizon", ")", ",", "start", ")", "\n", "imag_feat", "=", "self", ".", "_dynamics", ".", "get_feat", "(", "states", ")", "\n", "return", "imag_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._trajectory_optimization": [[342, 375], ["tools.static_scan_action", "cvrl.CVRL._dynamics.get_feat", "cvrl.CVRL._reward().mode", "cvrl.CVRL._value().mode", "tools.lambda_return", "cvrl.CVRL._actor().sample", "tensorflow.repeat", "tensorflow.range", "cvrl.CVRL._pcont().mean", "tensorflow.gradients", "cvrl.CVRL._dynamics.img_step", "cvrl.CVRL.policy"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.static_scan_action", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_feat", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.lambda_return", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mean", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.img_step", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.policy"], ["", "def", "_trajectory_optimization", "(", "self", ",", "post", ")", ":", "\n", "        ", "def", "policy", "(", "state", ")", ":", "return", "self", ".", "_actor", "(", "\n", "tf", ".", "stop_gradient", "(", "self", ".", "_dynamics", ".", "get_feat", "(", "state", ")", ")", ")", ".", "sample", "(", ")", "\n", "\n", "def", "repeat", "(", "x", ")", ":", "\n", "            ", "return", "tf", ".", "repeat", "(", "x", ",", "self", ".", "_c", ".", "num_samples", ",", "axis", "=", "0", ")", "\n", "\n", "", "states", ",", "actions", "=", "tools", ".", "static_scan_action", "(", "\n", "lambda", "prev", ",", "action", ",", "_", ":", "self", ".", "_dynamics", ".", "img_step", "(", "prev", ",", "action", ")", ",", "\n", "lambda", "prev", ":", "policy", "(", "prev", ")", ",", "\n", "tf", ".", "range", "(", "self", ".", "_c", ".", "horizon", ")", ",", "post", ")", "\n", "\n", "feat", "=", "self", ".", "_dynamics", ".", "get_feat", "(", "states", ")", "\n", "reward", "=", "self", ".", "_reward", "(", "feat", ")", ".", "mode", "(", ")", "\n", "\n", "if", "self", ".", "_c", ".", "pcont", ":", "\n", "            ", "pcont", "=", "self", ".", "_pcont", "(", "feat", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "pcont", "=", "self", ".", "_c", ".", "discount", "*", "tf", ".", "ones_like", "(", "reward", ")", "\n", "", "value", "=", "self", ".", "_value", "(", "feat", ")", ".", "mode", "(", ")", "\n", "\n", "# compute the accumulated reward", "\n", "returns", "=", "tools", ".", "lambda_return", "(", "\n", "reward", "[", ":", "-", "1", "]", ",", "value", "[", ":", "-", "1", "]", ",", "pcont", "[", ":", "-", "1", "]", ",", "\n", "bootstrap", "=", "value", "[", "-", "1", "]", ",", "lambda_", "=", "self", ".", "_c", ".", "disclam", ",", "axis", "=", "0", ")", "\n", "\n", "accumulated_reward", "=", "returns", "[", "0", ",", "0", "]", "\n", "\n", "# since the reward and latent dynamics are fully differentiable, we can backprop the gradients to update the actions", "\n", "grad", "=", "tf", ".", "gradients", "(", "accumulated_reward", ",", "actions", ")", "[", "0", "]", "\n", "act", "=", "actions", "+", "grad", "*", "self", ".", "_c", ".", "traj_opt_lr", "\n", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._scalar_summaries": [[377, 393], ["cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "likes.items", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._metrics[].update_state", "prior_dist.entropy", "post_dist.entropy", "cvrl.CVRL._metrics[].update_state", "cvrl.CVRL._actor().entropy", "cvrl.CVRL._actor"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.entropy", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.entropy", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.SampleDist.entropy"], ["", "def", "_scalar_summaries", "(", "\n", "self", ",", "data", ",", "feat", ",", "prior_dist", ",", "post_dist", ",", "likes", ",", "div", ",", "\n", "model_loss", ",", "value_loss", ",", "actor_loss", ",", "model_norm", ",", "value_norm", ",", "\n", "actor_norm", ")", ":", "\n", "        ", "self", ".", "_metrics", "[", "'model_grad_norm'", "]", ".", "update_state", "(", "model_norm", ")", "\n", "self", ".", "_metrics", "[", "'value_grad_norm'", "]", ".", "update_state", "(", "value_norm", ")", "\n", "self", ".", "_metrics", "[", "'actor_grad_norm'", "]", ".", "update_state", "(", "actor_norm", ")", "\n", "self", ".", "_metrics", "[", "'prior_ent'", "]", ".", "update_state", "(", "prior_dist", ".", "entropy", "(", ")", ")", "\n", "self", ".", "_metrics", "[", "'post_ent'", "]", ".", "update_state", "(", "post_dist", ".", "entropy", "(", ")", ")", "\n", "for", "name", ",", "logprob", "in", "likes", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_metrics", "[", "name", "+", "'_loss'", "]", ".", "update_state", "(", "-", "logprob", ")", "\n", "", "self", ".", "_metrics", "[", "'div'", "]", ".", "update_state", "(", "div", ")", "\n", "self", ".", "_metrics", "[", "'model_loss'", "]", ".", "update_state", "(", "model_loss", ")", "\n", "self", ".", "_metrics", "[", "'value_loss'", "]", ".", "update_state", "(", "value_loss", ")", "\n", "self", ".", "_metrics", "[", "'actor_loss'", "]", ".", "update_state", "(", "actor_loss", ")", "\n", "self", ".", "_metrics", "[", "'action_ent'", "]", ".", "update_state", "(", "self", ".", "_actor", "(", "feat", ")", ".", "entropy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._image_summaries": [[394, 406], ["cvrl.CVRL._dynamics.observe", "cvrl.CVRL._dynamics.imagine", "cvrl.CVRL._decode().mode", "tensorflow.concat", "tensorflow.concat", "tools.graph_summary", "image_pred.mode", "init.items", "cvrl.CVRL._decode", "cvrl.CVRL._dynamics.get_feat"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.observe", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.imagine", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.graph_summary", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.mode", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.RSSM.get_feat"], ["", "def", "_image_summaries", "(", "self", ",", "data", ",", "embed", ",", "image_pred", ")", ":", "\n", "        ", "truth", "=", "data", "[", "'image'", "]", "[", ":", "6", "]", "+", "0.5", "\n", "recon", "=", "image_pred", ".", "mode", "(", ")", "[", ":", "6", "]", "\n", "init", ",", "_", "=", "self", ".", "_dynamics", ".", "observe", "(", "embed", "[", ":", "6", ",", ":", "5", "]", ",", "data", "[", "'action'", "]", "[", ":", "6", ",", ":", "5", "]", ")", "\n", "init", "=", "{", "k", ":", "v", "[", ":", ",", "-", "1", "]", "for", "k", ",", "v", "in", "init", ".", "items", "(", ")", "}", "\n", "prior", "=", "self", ".", "_dynamics", ".", "imagine", "(", "data", "[", "'action'", "]", "[", ":", "6", ",", "5", ":", "]", ",", "init", ")", "\n", "openl", "=", "self", ".", "_decode", "(", "self", ".", "_dynamics", ".", "get_feat", "(", "prior", ")", ")", ".", "mode", "(", ")", "\n", "model", "=", "tf", ".", "concat", "(", "[", "recon", "[", ":", ",", ":", "5", "]", "+", "0.5", ",", "openl", "+", "0.5", "]", ",", "1", ")", "\n", "error", "=", "(", "model", "-", "truth", "+", "1", ")", "/", "2", "\n", "openl", "=", "tf", ".", "concat", "(", "[", "truth", ",", "model", ",", "error", "]", ",", "2", ")", "\n", "tools", ".", "graph_summary", "(", "\n", "self", ".", "_writer", ",", "tools", ".", "video_summary", ",", "'agent/openl'", ",", "openl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL._write_summaries": [[407, 421], ["int", "print", "cvrl.CVRL._writer.flush", "cvrl.CVRL._step.numpy", "metrics.append", "m.reset_states", "f.write", "tensorflow.summary.scalar", "float", "cvrl.CVRL._metrics.items", "time.time", "cvrl.CVRL._metrics.values", "v.result", "json.dumps", "dict"], "methods", ["None"], ["", "def", "_write_summaries", "(", "self", ")", ":", "\n", "        ", "step", "=", "int", "(", "self", ".", "_step", ".", "numpy", "(", ")", ")", "\n", "metrics", "=", "[", "(", "k", ",", "float", "(", "v", ".", "result", "(", ")", ")", ")", "for", "k", ",", "v", "in", "self", ".", "_metrics", ".", "items", "(", ")", "]", "\n", "if", "self", ".", "_last_log", "is", "not", "None", ":", "\n", "            ", "duration", "=", "time", ".", "time", "(", ")", "-", "self", ".", "_last_time", "\n", "self", ".", "_last_time", "+=", "duration", "\n", "metrics", ".", "append", "(", "(", "'fps'", ",", "(", "step", "-", "self", ".", "_last_log", ")", "/", "duration", ")", ")", "\n", "", "self", ".", "_last_log", "=", "step", "\n", "[", "m", ".", "reset_states", "(", ")", "for", "m", "in", "self", ".", "_metrics", ".", "values", "(", ")", "]", "\n", "with", "(", "self", ".", "_c", ".", "logdir", "/", "'metrics.jsonl'", ")", ".", "open", "(", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "{", "'step'", ":", "step", ",", "**", "dict", "(", "metrics", ")", "}", ")", "+", "'\\n'", ")", "\n", "", "[", "tf", ".", "summary", ".", "scalar", "(", "'agent/'", "+", "k", ",", "m", ")", "for", "k", ",", "m", "in", "metrics", "]", "\n", "print", "(", "f'[{step}]'", ",", "' / '", ".", "join", "(", "f'{k} {v:.1f}'", "for", "k", ",", "v", "in", "metrics", ")", ")", "\n", "self", ".", "_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.define_config": [[31, 106], ["tools.AttrDict", "pathlib.Path"], "function", ["None"], ["def", "define_config", "(", ")", ":", "\n", "    ", "config", "=", "tools", ".", "AttrDict", "(", ")", "\n", "# General.", "\n", "config", ".", "logdir", "=", "pathlib", ".", "Path", "(", "'.'", ")", "\n", "config", ".", "seed", "=", "0", "\n", "config", ".", "steps", "=", "5e6", "\n", "config", ".", "eval_every", "=", "1e4", "\n", "config", ".", "log_every", "=", "1e3", "\n", "config", ".", "log_scalars", "=", "True", "\n", "config", ".", "log_images", "=", "True", "\n", "config", ".", "gpu_growth", "=", "True", "\n", "config", ".", "precision", "=", "16", "\n", "# Environment.", "\n", "config", ".", "task", "=", "'dmc_walker_walk'", "\n", "config", ".", "envs", "=", "1", "\n", "config", ".", "parallel", "=", "'none'", "\n", "config", ".", "action_repeat", "=", "2", "\n", "config", ".", "time_limit", "=", "1000", "\n", "config", ".", "prefill", "=", "5000", "\n", "config", ".", "eval_noise", "=", "0.0", "\n", "config", ".", "clip_rewards", "=", "'none'", "\n", "# Model.", "\n", "config", ".", "deter_size", "=", "200", "\n", "config", ".", "stoch_size", "=", "30", "\n", "config", ".", "num_units", "=", "400", "\n", "config", ".", "dense_act", "=", "'elu'", "\n", "config", ".", "cnn_act", "=", "'relu'", "\n", "config", ".", "cnn_depth", "=", "32", "\n", "config", ".", "pcont", "=", "False", "\n", "config", ".", "free_nats", "=", "3.0", "\n", "config", ".", "kl_scale", "=", "1.0", "\n", "config", ".", "pcont_scale", "=", "10.0", "\n", "config", ".", "weight_decay", "=", "0.0", "\n", "config", ".", "weight_decay_pattern", "=", "r'.*'", "\n", "# Training.", "\n", "config", ".", "batch_size", "=", "50", "\n", "config", ".", "batch_length", "=", "50", "\n", "config", ".", "train_every", "=", "1000", "\n", "config", ".", "train_steps", "=", "100", "\n", "config", ".", "pretrain", "=", "100", "\n", "config", ".", "model_lr", "=", "6e-4", "\n", "config", ".", "value_lr", "=", "8e-5", "\n", "config", ".", "actor_lr", "=", "8e-5", "\n", "config", ".", "grad_clip", "=", "100.0", "\n", "config", ".", "dataset_balance", "=", "False", "\n", "# Behavior.", "\n", "config", ".", "discount", "=", "0.99", "\n", "config", ".", "disclam", "=", "0.95", "\n", "config", ".", "horizon", "=", "15", "\n", "config", ".", "action_dist", "=", "'tanh_normal'", "\n", "config", ".", "action_init_std", "=", "5.0", "\n", "config", ".", "expl", "=", "'additive_gaussian'", "\n", "config", ".", "expl_amount", "=", "0.3", "\n", "config", ".", "expl_decay", "=", "0.0", "\n", "config", ".", "expl_min", "=", "0.0", "\n", "config", ".", "log_imgs", "=", "False", "\n", "\n", "# natural or not", "\n", "config", ".", "natural", "=", "False", "\n", "\n", "# obs model", "\n", "config", ".", "obs_model", "=", "'contrastive'", "\n", "\n", "# SAC settings", "\n", "config", ".", "num_Qs", "=", "2", "\n", "\n", "# use dreamer and SAC for hybrid actor-critic training", "\n", "config", ".", "use_sac", "=", "True", "\n", "config", ".", "use_dreamer", "=", "True", "\n", "\n", "# use trajectory optimization", "\n", "config", ".", "trajectory_opt", "=", "True", "\n", "config", ".", "traj_opt_lr", "=", "0.003", "\n", "config", ".", "num_samples", "=", "20", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.preprocess": [[423, 432], ["obs.copy.copy", "tensorflow.keras.mixed_precision.experimental.global_policy", "tensorflow.device", "clip_rewards", "dict", "tensorflow.cast"], "function", ["None"], ["", "", "def", "preprocess", "(", "obs", ",", "config", ")", ":", "\n", "    ", "dtype", "=", "prec", ".", "global_policy", "(", ")", ".", "compute_dtype", "\n", "obs", "=", "obs", ".", "copy", "(", ")", "\n", "with", "tf", ".", "device", "(", "'cpu:0'", ")", ":", "\n", "        ", "obs", "[", "'image'", "]", "=", "tf", ".", "cast", "(", "obs", "[", "'image'", "]", ",", "dtype", ")", "/", "255.0", "-", "0.5", "\n", "clip_rewards", "=", "dict", "(", "none", "=", "lambda", "x", ":", "x", ",", "tanh", "=", "tf", ".", "tanh", ")", "[", "\n", "config", ".", "clip_rewards", "]", "\n", "obs", "[", "'reward'", "]", "=", "clip_rewards", "(", "obs", "[", "'reward'", "]", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.count_steps": [[434, 436], ["tools.count_episodes"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.count_episodes"], ["", "def", "count_steps", "(", "datadir", ",", "config", ")", ":", "\n", "    ", "return", "tools", ".", "count_episodes", "(", "datadir", ")", "[", "1", "]", "*", "config", ".", "action_repeat", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.load_dataset": [[438, 451], ["next", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.batch", "dataset.prefetch.map", "dataset.prefetch.prefetch", "tools.load_episodes", "tools.load_episodes", "functools.partial", "next.items", "next.items"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.load_episodes", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.load_episodes"], ["", "def", "load_dataset", "(", "directory", ",", "config", ")", ":", "\n", "    ", "episode", "=", "next", "(", "tools", ".", "load_episodes", "(", "directory", ",", "1", ")", ")", "\n", "types", "=", "{", "k", ":", "v", ".", "dtype", "for", "k", ",", "v", "in", "episode", ".", "items", "(", ")", "}", "\n", "shapes", "=", "{", "k", ":", "(", "None", ",", ")", "+", "v", ".", "shape", "[", "1", ":", "]", "for", "k", ",", "v", "in", "episode", ".", "items", "(", ")", "}", "\n", "\n", "def", "generator", "(", ")", ":", "return", "tools", ".", "load_episodes", "(", "\n", "directory", ",", "config", ".", "train_steps", ",", "config", ".", "batch_length", ",", "\n", "config", ".", "dataset_balance", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator", ",", "types", ",", "shapes", ")", "\n", "dataset", "=", "dataset", ".", "batch", "(", "config", ".", "batch_size", ",", "drop_remainder", "=", "True", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "functools", ".", "partial", "(", "preprocess", ",", "config", "=", "config", ")", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "10", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.summarize_episode": [[453, 470], ["tools.count_episodes", "episode[].sum", "print", "cvrl.count_steps", "f.write", "writer.as_default", "tensorflow.summary.experimental.set_step", "len", "float", "tensorflow.summary.scalar", "tools.video_summary", "prefix.title", "episode[].sum", "len", "json.dumps", "dict"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.count_episodes", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.count_steps", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.video_summary"], ["", "def", "summarize_episode", "(", "episode", ",", "config", ",", "datadir", ",", "writer", ",", "prefix", ")", ":", "\n", "    ", "episodes", ",", "steps", "=", "tools", ".", "count_episodes", "(", "datadir", ")", "\n", "length", "=", "(", "len", "(", "episode", "[", "'reward'", "]", ")", "-", "1", ")", "*", "config", ".", "action_repeat", "\n", "ret", "=", "episode", "[", "'reward'", "]", ".", "sum", "(", ")", "\n", "print", "(", "f'{prefix.title()} episode of length {length} with return {ret:.1f}.'", ")", "\n", "metrics", "=", "[", "\n", "(", "f'{prefix}/return'", ",", "float", "(", "episode", "[", "'reward'", "]", ".", "sum", "(", ")", ")", ")", ",", "\n", "(", "f'{prefix}/length'", ",", "len", "(", "episode", "[", "'reward'", "]", ")", "-", "1", ")", ",", "\n", "(", "f'episodes'", ",", "episodes", ")", "]", "\n", "step", "=", "count_steps", "(", "datadir", ",", "config", ")", "\n", "with", "(", "config", ".", "logdir", "/", "'metrics.jsonl'", ")", ".", "open", "(", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "dict", "(", "[", "(", "'step'", ",", "step", ")", "]", "+", "metrics", ")", ")", "+", "'\\n'", ")", "\n", "", "with", "writer", ".", "as_default", "(", ")", ":", "# Env might run in a different thread.", "\n", "        ", "tf", ".", "summary", ".", "experimental", ".", "set_step", "(", "step", ")", "\n", "[", "tf", ".", "summary", ".", "scalar", "(", "'sim/'", "+", "k", ",", "v", ")", "for", "k", ",", "v", "in", "metrics", "]", "\n", "if", "prefix", "==", "'test'", ":", "\n", "            ", "tools", ".", "video_summary", "(", "f'sim/{prefix}/video'", ",", "episode", "[", "'image'", "]", "[", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.make_env": [[472, 497], ["config.task.split", "wrappers.TimeLimit", "callbacks.append", "wrappers.Collect", "wrappers.RewardObs", "wrappers.DeepMindControl", "wrappers.ActionRepeat", "wrappers.NormalizeActions", "callbacks.append", "tools.load_imgnet", "wrappers.NaturalMujoco", "wrappers.Atari", "wrappers.OneHotAction", "NotImplementedError", "cvrl.summarize_episode", "tools.save_episodes"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.load_imgnet", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.summarize_episode", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.save_episodes"], ["", "", "", "def", "make_env", "(", "config", ",", "writer", ",", "prefix", ",", "datadir", ",", "train", ")", ":", "\n", "    ", "suite", ",", "task", "=", "config", ".", "task", ".", "split", "(", "'_'", ",", "1", ")", "\n", "if", "suite", "==", "'dmc'", ":", "\n", "        ", "env", "=", "wrappers", ".", "DeepMindControl", "(", "task", ")", "\n", "env", "=", "wrappers", ".", "ActionRepeat", "(", "env", ",", "config", ".", "action_repeat", ")", "\n", "env", "=", "wrappers", ".", "NormalizeActions", "(", "env", ")", "\n", "if", "config", ".", "natural", ":", "\n", "            ", "data", "=", "tools", ".", "load_imgnet", "(", "train", ")", "\n", "env", "=", "wrappers", ".", "NaturalMujoco", "(", "env", ",", "data", ")", "\n", "", "", "elif", "suite", "==", "'atari'", ":", "\n", "        ", "env", "=", "wrappers", ".", "Atari", "(", "\n", "task", ",", "config", ".", "action_repeat", ",", "(", "64", ",", "64", ")", ",", "grayscale", "=", "False", ",", "\n", "life_done", "=", "True", ",", "sticky_actions", "=", "True", ")", "\n", "env", "=", "wrappers", ".", "OneHotAction", "(", "env", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "suite", ")", "\n", "", "env", "=", "wrappers", ".", "TimeLimit", "(", "env", ",", "config", ".", "time_limit", "/", "config", ".", "action_repeat", ")", "\n", "callbacks", "=", "[", "]", "\n", "if", "train", ":", "\n", "        ", "callbacks", ".", "append", "(", "lambda", "ep", ":", "tools", ".", "save_episodes", "(", "datadir", ",", "[", "ep", "]", ")", ")", "\n", "", "callbacks", ".", "append", "(", "\n", "lambda", "ep", ":", "summarize_episode", "(", "ep", ",", "config", ",", "datadir", ",", "writer", ",", "prefix", ")", ")", "\n", "env", "=", "wrappers", ".", "Collect", "(", "env", ",", "callbacks", ",", "config", ".", "precision", ")", "\n", "env", "=", "wrappers", ".", "RewardObs", "(", "env", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.main": [[499, 558], ["int", "config.logdir.mkdir", "print", "vars().copy", "tensorflow.summary.create_file_writer", "tf.summary.create_file_writer.set_as_default", "cvrl.count_steps", "max", "print", "tools.simulate", "tf.summary.create_file_writer.flush", "cvrl.count_steps", "print", "cvrl.CVRL", "tensorflow.config.experimental.list_physical_devices", "tensorflow.keras.mixed_precision.experimental.set_policy", "open", "json.dump", "str", "wrappers.Async", "wrappers.Async", "print", "cvrl.CVRL.load", "print", "tools.simulate", "tf.summary.create_file_writer.flush", "print", "tools.simulate", "cvrl.count_steps", "CVRL.save", "env.close", "tensorflow.config.experimental.set_memory_growth", "tensorflow.keras.mixed_precision.experimental.Policy", "vars", "os.path.join", "range", "range", "functools.partial", "cvrl.make_env", "cvrl.make_env", "actspace.sample"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.count_steps", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.simulate", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.count_steps", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.CVRL.load", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.simulate", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.simulate", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.count_steps", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.Module.save", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.wrappers.Async.close", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.make_env", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.cvrl.make_env", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.tools.OneHotDist.sample"], ["", "def", "main", "(", "config", ")", ":", "\n", "    ", "if", "config", ".", "gpu_growth", ":", "\n", "        ", "for", "gpu", "in", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "'GPU'", ")", ":", "\n", "            ", "tf", ".", "config", ".", "experimental", ".", "set_memory_growth", "(", "gpu", ",", "True", ")", "\n", "", "", "assert", "config", ".", "precision", "in", "(", "16", ",", "32", ")", ",", "config", ".", "precision", "\n", "if", "config", ".", "precision", "==", "16", ":", "\n", "        ", "prec", ".", "set_policy", "(", "prec", ".", "Policy", "(", "'mixed_float16'", ")", ")", "\n", "", "config", ".", "steps", "=", "int", "(", "config", ".", "steps", ")", "\n", "config", ".", "logdir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "'Logdir'", ",", "config", ".", "logdir", ")", "\n", "\n", "arg_dict", "=", "vars", "(", "config", ")", ".", "copy", "(", ")", "\n", "del", "arg_dict", "[", "'logdir'", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "logdir", ",", "'args.json'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "import", "json", "\n", "json", ".", "dump", "(", "arg_dict", ",", "fout", ")", "\n", "\n", "# Create environments.", "\n", "", "datadir", "=", "config", ".", "logdir", "/", "'episodes'", "\n", "writer", "=", "tf", ".", "summary", ".", "create_file_writer", "(", "\n", "str", "(", "config", ".", "logdir", ")", ",", "max_queue", "=", "1000", ",", "flush_millis", "=", "20000", ")", "\n", "writer", ".", "set_as_default", "(", ")", "\n", "train_envs", "=", "[", "wrappers", ".", "Async", "(", "lambda", ":", "make_env", "(", "\n", "config", ",", "writer", ",", "'train'", ",", "datadir", ",", "train", "=", "True", ")", ",", "config", ".", "parallel", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "envs", ")", "]", "\n", "test_envs", "=", "[", "wrappers", ".", "Async", "(", "lambda", ":", "make_env", "(", "\n", "config", ",", "writer", ",", "'test'", ",", "datadir", ",", "train", "=", "False", ")", ",", "config", ".", "parallel", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "envs", ")", "]", "\n", "actspace", "=", "train_envs", "[", "0", "]", ".", "action_space", "\n", "\n", "# Prefill dataset with random episodes.", "\n", "step", "=", "count_steps", "(", "datadir", ",", "config", ")", "\n", "prefill", "=", "max", "(", "0", ",", "config", ".", "prefill", "-", "step", ")", "\n", "print", "(", "f'Prefill dataset with {prefill} steps.'", ")", "\n", "def", "random_agent", "(", "o", ",", "d", ",", "_", ")", ":", "return", "(", "[", "actspace", ".", "sample", "(", ")", "for", "_", "in", "d", "]", ",", "None", ")", "\n", "tools", ".", "simulate", "(", "random_agent", ",", "train_envs", ",", "prefill", "/", "config", ".", "action_repeat", ")", "\n", "writer", ".", "flush", "(", ")", "\n", "\n", "# Train and regularly evaluate the agent.", "\n", "step", "=", "count_steps", "(", "datadir", ",", "config", ")", "\n", "print", "(", "f'Simulating agent for {config.steps-step} steps.'", ")", "\n", "agent", "=", "CVRL", "(", "config", ",", "datadir", ",", "actspace", ",", "writer", ")", "\n", "if", "(", "config", ".", "logdir", "/", "'variables.pkl'", ")", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'Load checkpoint.'", ")", "\n", "agent", ".", "load", "(", "config", ".", "logdir", "/", "'variables.pkl'", ")", "\n", "", "state", "=", "None", "\n", "while", "step", "<", "config", ".", "steps", ":", "\n", "        ", "print", "(", "'Start evaluation.'", ")", "\n", "tools", ".", "simulate", "(", "\n", "functools", ".", "partial", "(", "agent", ",", "training", "=", "False", ")", ",", "test_envs", ",", "episodes", "=", "1", ")", "\n", "writer", ".", "flush", "(", ")", "\n", "print", "(", "'Start collection.'", ")", "\n", "steps", "=", "config", ".", "eval_every", "//", "config", ".", "action_repeat", "\n", "state", "=", "tools", ".", "simulate", "(", "agent", ",", "train_envs", ",", "steps", ",", "state", "=", "state", ")", "\n", "step", "=", "count_steps", "(", "datadir", ",", "config", ")", "\n", "agent", ".", "save", "(", "config", ".", "logdir", "/", "'variables.pkl'", ")", "\n", "", "for", "env", "in", "train_envs", "+", "test_envs", ":", "\n", "        ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC.__init__": [[49, 120], ["tensorflow.Variable", "tensorflow_probability.util.DeferredTensor", "tensorflow.optimizers.Adam", "tuple", "soft_actor_critic.SAC._update_target", "soft_actor_critic.heuristic_target_entropy", "copy.deepcopy", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_target", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.heuristic_target_entropy"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "Qs", ",", "\n", "policy_optimizer", ",", "\n", "q_optimizers", ",", "\n", "action_space", ",", "\n", "plotter", "=", "None", ",", "\n", "policy_lr", "=", "3e-4", ",", "\n", "Q_lr", "=", "3e-4", ",", "\n", "alpha_lr", "=", "3e-4", ",", "\n", "reward_scale", "=", "1.0", ",", "\n", "target_entropy", "=", "'auto'", ",", "\n", "discount", "=", "0.99", ",", "\n", "tau", "=", "5e-3", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "save_full_state", "=", "False", ",", "\n", "Q_targets", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            env (`SoftlearningEnv`): Environment used for training.\n            policy: A policy function approximator.\n            Qs: Q-function approximators. The min of these\n                approximators will be used. Usage of at least two Q-functions\n                improves performance by reducing overestimation bias.\n            plotter (`QFPolicyPlotter`): Plotter instance to be used for\n                visualizing Q-function during training.\n            lr (`float`): Learning rate used for the function approximators.\n            discount (`float`): Discount factor for Q-function updates.\n            tau (`float`): Soft value function target update weight.\n            target_update_interval ('int'): Frequency at which target network\n                updates occur in iterations.\n        \"\"\"", "\n", "\n", "self", ".", "_policy", "=", "policy", "\n", "\n", "self", ".", "_Qs", "=", "Qs", "\n", "\n", "if", "Q_targets", "is", "not", "None", ":", "\n", "            ", "self", ".", "_Q_targets", "=", "Q_targets", "\n", "", "else", ":", "\n", "            ", "self", ".", "_Q_targets", "=", "tuple", "(", "deepcopy", "(", "Q", ")", "for", "Q", "in", "Qs", ")", "\n", "self", ".", "_update_target", "(", "tau", "=", "tf", ".", "constant", "(", "1.0", ")", ")", "\n", "\n", "", "self", ".", "_plotter", "=", "plotter", "\n", "\n", "self", ".", "_policy_lr", "=", "policy_lr", "\n", "self", ".", "_Q_lr", "=", "Q_lr", "\n", "self", ".", "_alpha_lr", "=", "alpha_lr", "\n", "\n", "self", ".", "_reward_scale", "=", "reward_scale", "\n", "self", ".", "_target_entropy", "=", "(", "\n", "heuristic_target_entropy", "(", "action_space", ")", "\n", "if", "target_entropy", "==", "'auto'", "\n", "else", "target_entropy", ")", "\n", "\n", "self", ".", "_discount", "=", "discount", "\n", "self", ".", "_tau", "=", "tau", "\n", "self", ".", "_target_update_interval", "=", "target_update_interval", "\n", "\n", "self", ".", "_save_full_state", "=", "save_full_state", "\n", "\n", "self", ".", "_Q_optimizers", "=", "q_optimizers", "\n", "self", ".", "_policy_optimizer", "=", "policy_optimizer", "\n", "\n", "self", ".", "_log_alpha", "=", "tf", ".", "Variable", "(", "0.0", ",", "dtype", "=", "tf", ".", "float16", ")", "\n", "self", ".", "_alpha", "=", "tfp", ".", "util", ".", "DeferredTensor", "(", "self", ".", "_log_alpha", ",", "tf", ".", "exp", ")", "\n", "\n", "self", ".", "_alpha_optimizer", "=", "tf", ".", "optimizers", ".", "Adam", "(", "\n", "self", ".", "_alpha_lr", ",", "name", "=", "'alpha_optimizer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._compute_Q_targets": [[121, 147], ["soft_actor_critic.SAC._policy.actions_and_log_probs", "tuple", "tensorflow.reduce_min", "soft_actor_critic.compute_Q_targets", "tensorflow.stop_gradient", "Q", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ActionDecoder.actions_and_log_probs", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.compute_Q_targets"], ["", "def", "_compute_Q_targets", "(", "self", ",", "batch", ")", ":", "\n", "        ", "next_observations", "=", "batch", "[", "'next_observations'", "]", "\n", "rewards", "=", "batch", "[", "'rewards'", "]", "\n", "terminals", "=", "batch", "[", "'terminals'", "]", "\n", "\n", "entropy_scale", "=", "self", ".", "_alpha", "\n", "reward_scale", "=", "self", ".", "_reward_scale", "\n", "discount", "=", "self", ".", "_discount", "\n", "\n", "next_actions", ",", "next_log_pis", "=", "self", ".", "_policy", ".", "actions_and_log_probs", "(", "\n", "next_observations", ")", "\n", "next_Qs_values", "=", "tuple", "(", "\n", "# Q.values(next_observations, next_actions) for Q in self._Q_targets)", "\n", "Q", "(", "tf", ".", "concat", "(", "(", "next_observations", ",", "next_actions", ")", ",", "axis", "=", "-", "1", ")", ")", "for", "Q", "in", "self", ".", "_Q_targets", ")", "\n", "next_Q_values", "=", "tf", ".", "reduce_min", "(", "next_Qs_values", ",", "axis", "=", "0", ")", "\n", "\n", "Q_targets", "=", "compute_Q_targets", "(", "\n", "next_Q_values", ",", "\n", "next_log_pis", ",", "\n", "rewards", ",", "\n", "terminals", ",", "\n", "discount", ",", "\n", "entropy_scale", ",", "\n", "reward_scale", ")", "\n", "\n", "return", "tf", ".", "stop_gradient", "(", "Q_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_critic": [[148, 183], ["soft_actor_critic.SAC._compute_Q_targets", "tensorflow.expand_dims", "tensorflow.expand_dims", "zip", "optimizer", "Qs_losses.append", "Qs_values.append", "tensorflow.GradientTape", "Q", "tensorflow.nn.compute_average_loss", "tensorflow.concat", "tensorflow.losses.MSE", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._compute_Q_targets"], ["", "def", "_update_critic", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Update the Q-function.\n\n        Creates a `tf.optimizer.minimize` operation for updating\n        critic Q-function with gradient descent, and appends it to\n        `self._training_ops` attribute.\n\n        See Equations (5, 6) in [1], for further information of the\n        Q-function update rule.\n        \"\"\"", "\n", "Q_targets", "=", "self", ".", "_compute_Q_targets", "(", "batch", ")", "\n", "Q_targets", "=", "tf", ".", "expand_dims", "(", "Q_targets", ",", "axis", "=", "-", "1", ")", "\n", "\n", "observations", "=", "batch", "[", "'observations'", "]", "\n", "actions", "=", "batch", "[", "'actions'", "]", "\n", "rewards", "=", "batch", "[", "'rewards'", "]", "\n", "rewards", "=", "tf", ".", "expand_dims", "(", "rewards", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# tf.debugging.assert_shapes((", "\n", "#     (Q_targets, ('B', 1)), (rewards, ('B', 1))))", "\n", "\n", "Qs_values", "=", "[", "]", "\n", "Qs_losses", "=", "[", "]", "\n", "for", "Q", ",", "optimizer", "in", "zip", "(", "self", ".", "_Qs", ",", "self", ".", "_Q_optimizers", ")", ":", "\n", "            ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "                ", "Q_values", "=", "Q", "(", "tf", ".", "concat", "(", "(", "observations", ",", "actions", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "Q_losses", "=", "0.5", "*", "(", "\n", "tf", ".", "losses", ".", "MSE", "(", "y_true", "=", "Q_targets", ",", "y_pred", "=", "tf", ".", "expand_dims", "(", "Q_values", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "Q_loss", "=", "tf", ".", "nn", ".", "compute_average_loss", "(", "Q_losses", ")", "\n", "\n", "", "optimizer", "(", "tape", ",", "Q_loss", ")", "\n", "Qs_losses", ".", "append", "(", "Q_losses", ")", "\n", "Qs_values", ".", "append", "(", "Q_values", ")", "\n", "\n", "", "return", "Qs_values", ",", "Qs_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_actor": [[184, 207], ["tensorflow.GradientTape", "soft_actor_critic.SAC._policy.actions_and_log_probs", "tuple", "tensorflow.reduce_min", "tensorflow.nn.compute_average_loss", "Q", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ActionDecoder.actions_and_log_probs"], ["", "def", "_update_actor", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Update the policy.\n\n        Creates a `tf.optimizer.minimize` operations for updating\n        policy and entropy with gradient descent, and adds them to\n        `self._training_ops` attribute.\n\n        See Section 4.2 in [1], for further information of the policy update,\n        and Section 5 in [1] for further information of the entropy update.\n        \"\"\"", "\n", "observations", "=", "batch", "[", "'observations'", "]", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "actions", ",", "log_pis", "=", "self", ".", "_policy", ".", "actions_and_log_probs", "(", "observations", ")", "\n", "\n", "Qs_log_targets", "=", "tuple", "(", "\n", "# Q.values(observations, actions) for Q in self._Qs)", "\n", "Q", "(", "tf", ".", "concat", "(", "(", "observations", ",", "actions", ")", ",", "axis", "=", "-", "1", ")", ")", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "Q_log_targets", "=", "tf", ".", "reduce_min", "(", "Qs_log_targets", ",", "axis", "=", "0", ")", "\n", "policy_losses", "=", "self", ".", "_alpha", "*", "log_pis", "-", "Q_log_targets", "\n", "policy_loss", "=", "tf", ".", "nn", ".", "compute_average_loss", "(", "policy_losses", ")", "\n", "\n", "", "return", "policy_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_alpha": [[209, 226], ["soft_actor_critic.SAC._policy.actions_and_log_probs", "tape.gradient", "isinstance", "tensorflow.GradientTape", "tensorflow.nn.compute_average_loss", "tensorflow.stop_gradient"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.models.ActionDecoder.actions_and_log_probs"], ["", "def", "_update_alpha", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_target_entropy", ",", "Number", ")", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "observations", "=", "batch", "[", "'observations'", "]", "\n", "\n", "actions", ",", "log_pis", "=", "self", ".", "_policy", ".", "actions_and_log_probs", "(", "observations", ")", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "alpha_losses", "=", "-", "1.0", "*", "(", "\n", "self", ".", "_alpha", "*", "tf", ".", "stop_gradient", "(", "log_pis", "+", "self", ".", "_target_entropy", ")", ")", "\n", "\n", "alpha_loss", "=", "tf", ".", "nn", ".", "compute_average_loss", "(", "alpha_losses", ")", "\n", "\n", "", "alpha_gradients", "=", "tape", ".", "gradient", "(", "alpha_loss", ",", "[", "self", ".", "_log_alpha", "]", ")", "\n", "\n", "return", "alpha_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_target": [[227, 233], ["zip", "zip", "target_weight.assign"], "methods", ["None"], ["", "def", "_update_target", "(", "self", ",", "tau", ")", ":", "\n", "        ", "for", "Q", ",", "Q_target", "in", "zip", "(", "self", ".", "_Qs", ",", "self", ".", "_Q_targets", ")", ":", "\n", "            ", "for", "source_weight", ",", "target_weight", "in", "zip", "(", "\n", "Q", ".", "trainable_variables", ",", "Q_target", ".", "trainable_variables", ")", ":", "\n", "                ", "target_weight", ".", "assign", "(", "\n", "tau", "*", "source_weight", "+", "(", "1.0", "-", "tau", ")", "*", "target_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._do_updates": [[234, 255], ["collections.OrderedDict", "soft_actor_critic.SAC._update_critic", "soft_actor_critic.SAC._update_actor", "soft_actor_critic.SAC._update_alpha", "collections.OrderedDict", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.convert_to_tensor", "tensorflow.reduce_mean"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_critic", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_actor", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_alpha"], ["", "", "", "def", "_do_updates", "(", "self", ",", "states", ",", "actions", ",", "rewards", ",", "dones", ")", ":", "\n", "        ", "\"\"\"Runs the update operations for policy, Q, and alpha.\"\"\"", "\n", "batch", "=", "OrderedDict", "(", "(", "\n", "(", "'observations'", ",", "states", "[", ":", "-", "1", "]", ")", ",", "\n", "(", "'next_observations'", ",", "states", "[", "1", ":", "]", ")", ",", "\n", "(", "'rewards'", ",", "rewards", "[", ":", "-", "1", "]", ")", ",", "\n", "(", "'terminals'", ",", "dones", "[", ":", "-", "1", "]", ")", ",", "\n", "(", "'actions'", ",", "actions", "[", ":", "-", "1", "]", ")", "\n", ")", ")", "\n", "Qs_values", ",", "Qs_losses", "=", "self", ".", "_update_critic", "(", "batch", ")", "\n", "policy_losses", "=", "self", ".", "_update_actor", "(", "batch", ")", "\n", "alpha_losses", "=", "self", ".", "_update_alpha", "(", "batch", ")", "\n", "\n", "diagnostics", "=", "OrderedDict", "(", "(", "\n", "(", "'Q_value-mean'", ",", "tf", ".", "reduce_mean", "(", "Qs_values", ")", ")", ",", "\n", "(", "'Q_loss-mean'", ",", "tf", ".", "reduce_mean", "(", "Qs_losses", ")", ")", ",", "\n", "(", "'policy_loss-mean'", ",", "tf", ".", "reduce_mean", "(", "policy_losses", ")", ")", ",", "\n", "(", "'alpha'", ",", "tf", ".", "convert_to_tensor", "(", "self", ".", "_alpha", ")", ")", ",", "\n", "(", "'alpha_loss-mean'", ",", "tf", ".", "reduce_mean", "(", "alpha_losses", ")", ")", ",", "\n", ")", ")", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._do_training": [[256, 264], ["soft_actor_critic.SAC._do_updates", "soft_actor_critic.SAC._update_target", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._do_updates", "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC._update_target"], ["", "def", "_do_training", "(", "self", ",", "iteration", ",", "states", ",", "actions", ",", "rewards", ",", "dones", ")", ":", "\n", "        ", "training_diagnostics", "=", "self", ".", "_do_updates", "(", "states", ",", "actions", ",", "rewards", ",", "dones", ")", "\n", "\n", "if", "iteration", "%", "self", ".", "_target_update_interval", "==", "0", ":", "\n", "# Run target ops here.", "\n", "            ", "self", ".", "_update_target", "(", "tau", "=", "tf", ".", "constant", "(", "self", ".", "_tau", ")", ")", "\n", "\n", "", "return", "training_diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC.get_diagnostics": [[265, 283], ["collections.OrderedDict", "soft_actor_critic.SAC._plotter.draw", "soft_actor_critic.SAC._alpha.numpy", "soft_actor_critic.SAC._policy.get_diagnostics_np"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "training_paths", ",", "\n", "evaluation_paths", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information as an ordered dictionary.\n\n        Also calls the `draw` method of the plotter, if plotter defined.\n        \"\"\"", "\n", "diagnostics", "=", "OrderedDict", "(", "(", "\n", "(", "'alpha'", ",", "self", ".", "_alpha", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'policy'", ",", "self", ".", "_policy", ".", "get_diagnostics_np", "(", "batch", "[", "'observations'", "]", ")", ")", ",", "\n", ")", ")", "\n", "\n", "if", "self", ".", "_plotter", ":", "\n", "            ", "self", ".", "_plotter", ".", "draw", "(", ")", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.SAC.tf_saveables": [[284, 299], ["hasattr", "enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "tf_saveables", "(", "self", ")", ":", "\n", "        ", "saveables", "=", "{", "\n", "'_policy_optimizer'", ":", "self", ".", "_policy_optimizer", ",", "\n", "**", "{", "\n", "f'Q_optimizer_{i}'", ":", "optimizer", "\n", "for", "i", ",", "optimizer", "in", "enumerate", "(", "self", ".", "_Q_optimizers", ")", "\n", "}", ",", "\n", "'_alpha'", ":", "self", ".", "_alpha", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "self", ",", "'_alpha_optimizer'", ")", ":", "\n", "            ", "saveables", "[", "'_alpha_optimizer'", "]", "=", "self", ".", "_alpha_optimizer", "\n", "\n", "", "return", "saveables", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.td_targets": [[11, 13], ["None"], "function", ["None"], ["def", "td_targets", "(", "rewards", ",", "discounts", ",", "next_values", ")", ":", "\n", "    ", "return", "rewards", "+", "discounts", "*", "next_values", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.compute_Q_targets": [[14, 30], ["tensorflow.cast", "soft_actor_critic.td_targets"], "function", ["home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.td_targets"], ["", "def", "compute_Q_targets", "(", "next_Q_values", ",", "\n", "next_log_pis", ",", "\n", "rewards", ",", "\n", "terminals", ",", "\n", "discount", ",", "\n", "entropy_scale", ",", "\n", "reward_scale", ")", ":", "\n", "    ", "next_values", "=", "next_Q_values", "-", "entropy_scale", "*", "next_log_pis", "\n", "terminals", "=", "tf", ".", "cast", "(", "terminals", ",", "next_values", ".", "dtype", ")", "\n", "\n", "Q_targets", "=", "td_targets", "(", "\n", "rewards", "=", "reward_scale", "*", "rewards", ",", "\n", "discounts", "=", "discount", ",", "\n", "next_values", "=", "(", "1.0", "-", "terminals", ")", "*", "next_values", ")", "\n", "\n", "return", "Q_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Yusufma03_CVRL.None.soft_actor_critic.heuristic_target_entropy": [[32, 36], ["numpy.prod"], "function", ["None"], ["", "def", "heuristic_target_entropy", "(", "action_space", ")", ":", "\n", "    ", "heuristic_target_entropy", "=", "-", "np", ".", "prod", "(", "action_space", ".", "shape", ")", "\n", "\n", "return", "heuristic_target_entropy", "\n", "\n"]]}