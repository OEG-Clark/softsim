{"home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__init__": [[74, 86], ["unet3D.DataGenerator.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.on_epoch_end"], ["def", "__init__", "(", "self", ",", "list_IDs", ",", "batch_size", "=", "4", ",", "dim", "=", "(", "160", ",", "192", ",", "128", ")", ",", "n_channels", "=", "4", ",", "n_classes", "=", "4", ",", "shuffle", "=", "True", ",", "augmentation", "=", "False", ",", "patch_size", "=", "64", ",", "n_patches", "=", "8", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "list_IDs", "=", "list_IDs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "n_patches", "=", "n_patches", "\n", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__len__": [[87, 90], ["int", "numpy.ceil", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the number of batches per epoch'", "\n", "return", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "list_IDs", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__getitem__": [[91, 108], ["unet3D.DataGenerator.__data_generation", "unet3D.DataGenerator.__data_augmentation", "unet3D.DataGenerator.on_epoch_end", "unet3D.DataGenerator.__len__"], "methods", ["home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__data_generation", "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__data_augmentation", "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.on_epoch_end", "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generate one batch of data'", "\n", "# Generate indexes of the batch", "\n", "indexes", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "# Find list of IDs", "\n", "list_IDs_temp", "=", "[", "self", ".", "list_IDs", "[", "k", "]", "for", "k", "in", "indexes", "]", "\n", "\n", "# Generate data     ", "\n", "X", ",", "y", "=", "self", ".", "__data_generation", "(", "list_IDs_temp", ")", "\n", "if", "self", ".", "augmentation", "==", "True", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "__data_augmentation", "(", "X", ",", "y", ")", "\n", "\n", "", "if", "index", "==", "self", ".", "__len__", "(", ")", "-", "1", ":", "\n", "            ", "self", ".", "on_epoch_end", "(", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.on_epoch_end": [[109, 114], ["numpy.arange", "len", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "'Updates indexes after each epoch'", "\n", "self", ".", "indexes", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "list_IDs", ")", ")", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__data_generation": [[115, 130], ["numpy.empty", "numpy.empty", "enumerate", "unet3D.load_img", "numpy.empty.astype", "numpy.empty.astype", "tensorflow.keras.utils.to_categorical"], "methods", ["home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.load_img"], ["", "", "def", "__data_generation", "(", "self", ",", "list_IDs_temp", ")", ":", "\n", "        ", "'Generates data containing batch_size samples'", "# X : (n_samples, *dim, n_channels)", "\n", "# Initialization", "\n", "X", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", ",", "*", "self", ".", "dim", ",", "self", ".", "n_channels", ")", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", ",", "*", "self", ".", "dim", ")", ")", "\n", "\n", "# Generate data", "\n", "for", "i", ",", "IDs", "in", "enumerate", "(", "list_IDs_temp", ")", ":", "\n", "# Store sample", "\n", "            ", "X", "[", "i", "]", ",", "y", "[", "i", "]", "=", "load_img", "(", "IDs", ")", "\n", "\n", "", "if", "self", ".", "augmentation", "==", "True", ":", "\n", "            ", "return", "X", ".", "astype", "(", "'float32'", ")", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "X", ".", "astype", "(", "'float32'", ")", ",", "to_categorical", "(", "y", ",", "self", ".", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.DataGenerator.__data_augmentation": [[131, 137], ["augmentation.patch_extraction", "augmentation.aug_batch", "tensorflow.keras.utils.to_categorical"], "methods", ["home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.patch_extraction", "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.aug_batch"], ["", "", "def", "__data_augmentation", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "'Apply augmentation'", "\n", "X_aug", ",", "y_aug", "=", "patch_extraction", "(", "X", ",", "y", ",", "sizePatches", "=", "self", ".", "patch_size", ",", "Npatches", "=", "self", ".", "n_patches", ")", "\n", "X_aug", ",", "y_aug", "=", "aug_batch", "(", "X_aug", ",", "y_aug", ",", "decisions", ")", "\n", "\n", "return", "X_aug", ",", "to_categorical", "(", "y_aug", ",", "self", ".", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.unet.__init__": [[148, 232], ["tensorflow.keras.layers.Input", "range", "unet3D.unet.__init__.bottlenek"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_shape", ",", "seg_shape", ",", "class_weights", ",", "Nfilter_start", "=", "64", ",", "depth", "=", "4", ",", "batch_size", "=", "4", ")", ":", "\n", "        ", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "seg_shape", "=", "seg_shape", "\n", "self", ".", "class_weights", "=", "class_weights", "\n", "self", ".", "Nfilter_start", "=", "Nfilter_start", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "def", "dice", "(", "y_true", ",", "y_pred", ",", "w", "=", "self", ".", "class_weights", ")", ":", "\n", "            ", "y_true", "=", "tf", ".", "convert_to_tensor", "(", "y_true", ",", "'float32'", ")", "\n", "y_pred", "=", "tf", ".", "convert_to_tensor", "(", "y_pred", ",", "y_true", ".", "dtype", ")", "\n", "\n", "num", "=", "tf", ".", "math", ".", "reduce_sum", "(", "tf", ".", "math", ".", "multiply", "(", "w", ",", "tf", ".", "math", ".", "reduce_sum", "(", "tf", ".", "math", ".", "multiply", "(", "y_true", ",", "y_pred", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", ")", ")", "\n", "den", "=", "tf", ".", "math", ".", "reduce_sum", "(", "tf", ".", "math", ".", "multiply", "(", "w", ",", "tf", ".", "math", ".", "reduce_sum", "(", "tf", ".", "math", ".", "add", "(", "y_true", ",", "y_pred", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", ")", ")", "+", "1e-5", "\n", "\n", "return", "2", "*", "num", "/", "den", "\n", "\n", "", "def", "diceLoss", "(", "y_true", ",", "y_pred", ",", "w", "=", "self", ".", "class_weights", ")", ":", "\n", "            ", "dice_score", "=", "dice", "(", "y_true", ",", "y_pred", ",", "w", ")", "\n", "\n", "return", "1", "-", "dice_score", "\n", "\n", "\n", "", "inputs", "=", "Input", "(", "self", ".", "img_shape", ",", "name", "=", "'input_image'", ")", "\n", "\n", "def", "encoder_step", "(", "layer", ",", "Nf", ",", "norm", "=", "True", ")", ":", "\n", "            ", "x", "=", "Conv3D", "(", "Nf", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "kernel_initializer", "=", "'he_normal'", ",", "padding", "=", "'same'", ")", "(", "layer", ")", "\n", "if", "norm", ":", "\n", "                ", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "x", "=", "Conv3D", "(", "Nf", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "kernel_initializer", "=", "'he_normal'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "if", "norm", ":", "\n", "                ", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "", "def", "bottlenek", "(", "layer", ",", "Nf", ")", ":", "\n", "            ", "x", "=", "Conv3D", "(", "Nf", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "kernel_initializer", "=", "'he_normal'", ",", "padding", "=", "'same'", ")", "(", "layer", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "y", "=", "Conv3D", "(", "Nf", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "kernel_initializer", "=", "'he_normal'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "y", ")", "\n", "x", "=", "Dropout", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "x", "=", "Concatenate", "(", ")", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "", "return", "x", "\n", "\n", "", "def", "decoder_step", "(", "layer", ",", "layer_to_concatenate", ",", "Nf", ")", ":", "\n", "            ", "x", "=", "Conv3DTranspose", "(", "Nf", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "layer", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", ")", "(", "x", ")", "\n", "x", "=", "Concatenate", "(", ")", "(", "[", "x", ",", "layer_to_concatenate", "]", ")", "\n", "x", "=", "Conv3D", "(", "Nf", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "layers_to_concatenate", "=", "[", "]", "\n", "x", "=", "inputs", "\n", "\n", "# encoder", "\n", "for", "d", "in", "range", "(", "self", ".", "depth", "-", "1", ")", ":", "\n", "            ", "if", "d", "==", "0", ":", "\n", "                ", "x", "=", "encoder_step", "(", "x", ",", "self", ".", "Nfilter_start", "*", "np", ".", "power", "(", "2", ",", "d", ")", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "encoder_step", "(", "x", ",", "self", ".", "Nfilter_start", "*", "np", ".", "power", "(", "2", ",", "d", ")", ")", "\n", "", "layers_to_concatenate", ".", "append", "(", "x", ")", "\n", "\n", "# bottlenek", "\n", "", "x", "=", "bottlenek", "(", "x", ",", "self", ".", "Nfilter_start", "*", "np", ".", "power", "(", "2", ",", "self", ".", "depth", "-", "1", ")", ")", "\n", "\n", "# decoder", "\n", "for", "d", "in", "range", "(", "self", ".", "depth", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "x", "=", "decoder_step", "(", "x", ",", "layers_to_concatenate", ".", "pop", "(", ")", ",", "self", ".", "Nfilter_start", "*", "np", ".", "power", "(", "2", ",", "d", ")", ")", "\n", "\n", "# classifier", "\n", "", "last", "=", "Conv3DTranspose", "(", "self", ".", "seg_shape", "[", "-", "1", "]", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ",", "activation", "=", "'softmax'", ",", "name", "=", "'output_generator'", ")", "(", "x", ")", "\n", "\n", "# Create model", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "last", ")", "\n", "self", ".", "model", ".", "compile", "(", "loss", "=", "diceLoss", ",", "optimizer", "=", "Adam", "(", "lr", "=", "1e-4", ")", ",", "metrics", "=", "[", "'accuracy'", ",", "dice", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.unet.train": [[234, 241], ["print", "unet3D.unet.model.fit", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.EarlyStopping"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "train_gen", ",", "valid_gen", ",", "nEpochs", ",", "model_name", ")", ":", "\n", "\n", "        ", "print", "(", "'Training process:'", ")", "\n", "callbacks", "=", "[", "ModelCheckpoint", "(", "model_name", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "save_weights_only", "=", "True", ")", ",", "EarlyStopping", "(", "monitor", "=", "'val_loss'", ",", "patience", "=", "25", ")", "]", "\n", "history", "=", "self", ".", "model", ".", "fit", "(", "train_gen", ",", "validation_data", "=", "valid_gen", ",", "epochs", "=", "nEpochs", ",", "batch_size", "=", "self", ".", "batch_size", ",", "callbacks", "=", "callbacks", ")", "\n", "\n", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.unet3D.load_img": [[48, 70], ["len", "nibabel.load().get_fdata", "numpy.empty", "range", "nibabel.load().get_fdata", "numpy.zeros_like", "nibabel.load", "numpy.std", "nibabel.load", "numpy.mean"], "function", ["None"], ["def", "load_img", "(", "img_files", ")", ":", "\n", "    ", "''' Load one image and its target form file\n    '''", "\n", "N", "=", "len", "(", "img_files", ")", "\n", "# target", "\n", "y", "=", "nib", ".", "load", "(", "img_files", "[", "N", "-", "1", "]", ")", ".", "get_fdata", "(", "dtype", "=", "'float32'", ",", "caching", "=", "'unchanged'", ")", "\n", "y", "=", "y", "[", "40", ":", "200", ",", "34", ":", "226", ",", "8", ":", "136", "]", "\n", "y", "[", "y", "==", "4", "]", "=", "3", "\n", "\n", "X_norm", "=", "np", ".", "empty", "(", "(", "240", ",", "240", ",", "155", ",", "4", ")", ")", "\n", "for", "channel", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "        ", "X", "=", "nib", ".", "load", "(", "img_files", "[", "channel", "]", ")", ".", "get_fdata", "(", "dtype", "=", "'float32'", ",", "caching", "=", "'unchanged'", ")", "\n", "brain", "=", "X", "[", "X", "!=", "0", "]", "\n", "brain_norm", "=", "np", ".", "zeros_like", "(", "X", ")", "# background at -100", "\n", "norm", "=", "(", "brain", "-", "np", ".", "mean", "(", "brain", ")", ")", "/", "np", ".", "std", "(", "brain", ")", "\n", "brain_norm", "[", "X", "!=", "0", "]", "=", "norm", "\n", "X_norm", "[", ":", ",", ":", ",", ":", ",", "channel", "]", "=", "brain_norm", "\n", "\n", "", "X_norm", "=", "X_norm", "[", "40", ":", "200", ",", "34", ":", "226", ",", "8", ":", "136", ",", ":", "]", "\n", "del", "(", "X", ",", "brain", ",", "brain_norm", ")", "\n", "\n", "return", "X_norm", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.patch_extraction": [[6, 26], ["numpy.empty", "numpy.empty", "range", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "patch_extraction", "(", "Xb", ",", "yb", ",", "sizePatches", "=", "128", ",", "Npatches", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    3D patch extraction\n    \"\"\"", "\n", "\n", "batch_size", ",", "rows", ",", "columns", ",", "slices", ",", "channels", "=", "Xb", ".", "shape", "\n", "X_patches", "=", "np", ".", "empty", "(", "(", "batch_size", "*", "Npatches", ",", "sizePatches", ",", "sizePatches", ",", "sizePatches", ",", "channels", ")", ")", "\n", "y_patches", "=", "np", ".", "empty", "(", "(", "batch_size", "*", "Npatches", ",", "sizePatches", ",", "sizePatches", ",", "sizePatches", ")", ")", "\n", "i", "=", "0", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "p", "in", "range", "(", "Npatches", ")", ":", "\n", "            ", "x", "=", "np", ".", "random", ".", "randint", "(", "rows", "-", "sizePatches", "+", "1", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "columns", "-", "sizePatches", "+", "1", ")", "\n", "z", "=", "np", ".", "random", ".", "randint", "(", "slices", "-", "sizePatches", "+", "1", ")", "\n", "\n", "X_patches", "[", "i", "]", "=", "Xb", "[", "b", ",", "x", ":", "x", "+", "sizePatches", ",", "y", ":", "y", "+", "sizePatches", ",", "z", ":", "z", "+", "sizePatches", ",", ":", "]", "\n", "y_patches", "[", "i", "]", "=", "yb", "[", "b", ",", "x", ":", "x", "+", "sizePatches", ",", "y", ":", "y", "+", "sizePatches", ",", "z", ":", "z", "+", "sizePatches", "]", "\n", "i", "+=", "1", "\n", "\n", "", "", "return", "X_patches", ",", "y_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.flip3D": [[27, 40], ["numpy.random.randint"], "function", ["None"], ["", "def", "flip3D", "(", "X", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Flip the 3D image respect one of the 3 axis chosen randomly\n    \"\"\"", "\n", "choice", "=", "np", ".", "random", ".", "randint", "(", "3", ")", "\n", "if", "choice", "==", "0", ":", "# flip on x", "\n", "        ", "X_flip", ",", "y_flip", "=", "X", "[", ":", ":", "-", "1", ",", ":", ",", ":", ",", ":", "]", ",", "y", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "if", "choice", "==", "1", ":", "# flip on y", "\n", "        ", "X_flip", ",", "y_flip", "=", "X", "[", ":", ",", ":", ":", "-", "1", ",", ":", ",", ":", "]", ",", "y", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "if", "choice", "==", "2", ":", "# flip on z", "\n", "        ", "X_flip", ",", "y_flip", "=", "X", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "y", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "return", "X_flip", ",", "y_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.rotation_zoom3D": [[42, 75], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "numpy.empty_like", "range", "scipy.ndimage.interpolation.affine_transform", "numpy.dot", "scipy.ndimage.interpolation.affine_transform", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotation_zoom3D", "(", "X", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Rotate a 3D image with alfa, beta and gamma degree respect the axis x, y and z respectively.\n    The three angles are chosen randomly between 0-30 degrees\n    \"\"\"", "\n", "alpha", ",", "beta", ",", "gamma", "=", "np", ".", "random", ".", "random_sample", "(", "3", ")", "*", "np", ".", "pi", "/", "2", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "alpha", ")", ",", "-", "np", ".", "sin", "(", "alpha", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "alpha", ")", ",", "np", ".", "cos", "(", "alpha", ")", "]", "]", ")", "\n", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "beta", ")", ",", "0", ",", "np", ".", "sin", "(", "beta", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "beta", ")", ",", "0", ",", "np", ".", "cos", "(", "beta", ")", "]", "]", ")", "\n", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "gamma", ")", ",", "-", "np", ".", "sin", "(", "gamma", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "gamma", ")", ",", "np", ".", "cos", "(", "gamma", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "R_rot", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "Rx", ",", "Ry", ")", ",", "Rz", ")", "\n", "\n", "a", ",", "b", "=", "0.8", ",", "1.2", "\n", "alpha", ",", "beta", ",", "gamma", "=", "(", "b", "-", "a", ")", "*", "np", ".", "random", ".", "random_sample", "(", "3", ")", "+", "a", "\n", "R_scale", "=", "np", ".", "array", "(", "[", "[", "alpha", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "beta", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "gamma", "]", "]", ")", "\n", "\n", "R", "=", "np", ".", "dot", "(", "R_rot", ",", "R_scale", ")", "\n", "X_rot", "=", "np", ".", "empty_like", "(", "X", ")", "\n", "for", "channel", "in", "range", "(", "X", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "X_rot", "[", ":", ",", ":", ",", ":", ",", "channel", "]", "=", "affine_transform", "(", "X", "[", ":", ",", ":", ",", ":", ",", "channel", "]", ",", "R", ",", "offset", "=", "0", ",", "order", "=", "1", ",", "mode", "=", "'constant'", ")", "\n", "", "y_rot", "=", "affine_transform", "(", "y", ",", "R", ",", "offset", "=", "0", ",", "order", "=", "0", ",", "mode", "=", "'constant'", ")", "\n", "\n", "return", "X_rot", ",", "y_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.brightness": [[76, 95], ["numpy.zeros", "range", "numpy.random.random_sample", "numpy.sign", "numpy.abs"], "function", ["None"], ["", "def", "brightness", "(", "X", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Changing the brighness of a image using power-law gamma transformation.\n    Gain and gamma are chosen randomly for each image channel.\n    \n    Gain chosen between [0.8 - 1.2]\n    Gamma chosen between [0.8 - 1.2]\n    \n    new_im = gain * im^gamma\n    \"\"\"", "\n", "\n", "X_new", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "for", "c", "in", "range", "(", "X", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "im", "=", "X", "[", ":", ",", ":", ",", ":", ",", "c", "]", "\n", "gain", ",", "gamma", "=", "(", "1.2", "-", "0.8", ")", "*", "np", ".", "random", ".", "random_sample", "(", "2", ",", ")", "+", "0.8", "\n", "im_new", "=", "np", ".", "sign", "(", "im", ")", "*", "gain", "*", "(", "np", ".", "abs", "(", "im", ")", "**", "gamma", ")", "\n", "X_new", "[", ":", ",", ":", ",", ":", ",", "c", "]", "=", "im_new", "\n", "\n", "", "return", "X_new", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.elastic": [[96, 104], ["elasticdeform.deform_random_grid"], "function", ["None"], ["", "def", "elastic", "(", "X", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Elastic deformation on a image and its target\n    \"\"\"", "\n", "\n", "[", "Xel", ",", "yel", "]", "=", "elasticdeform", ".", "deform_random_grid", "(", "[", "X", ",", "y", "]", ",", "sigma", "=", "2", ",", "axis", "=", "[", "(", "0", ",", "1", ",", "2", ")", ",", "(", "0", ",", "1", ",", "2", ")", "]", ",", "order", "=", "[", "1", ",", "0", "]", ",", "mode", "=", "'constant'", ")", "\n", "\n", "return", "Xel", ",", "yel", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.random_decisions": [[105, 116], ["numpy.zeros", "range", "numpy.random.randint"], "function", ["None"], ["", "def", "random_decisions", "(", "N", ")", ":", "\n", "    ", "\"\"\"\n    Generate N random decisions for augmentation\n    N should be equal to the batch size\n    \"\"\"", "\n", "\n", "decisions", "=", "np", ".", "zeros", "(", "(", "N", ",", "4", ")", ")", "# 4 is number of aug techniques to combine (patch extraction excluded)", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "decisions", "[", "n", "]", "=", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "4", ")", "\n", "\n", "", "return", "decisions", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.combine_aug": [[117, 140], ["numpy.random.random_sample", "augmentation.flip3D", "augmentation.brightness", "augmentation.rotation_zoom3D", "augmentation.elastic"], "function", ["home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.flip3D", "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.brightness", "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.rotation_zoom3D", "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.elastic"], ["", "def", "combine_aug", "(", "X", ",", "y", ",", "do", ")", ":", "\n", "    ", "\"\"\"\n    Combine randomly the different augmentation techniques written above\n    \"\"\"", "\n", "Xnew", ",", "ynew", "=", "X", ",", "y", "\n", "\n", "# make sure to use at least 25% of original images", "\n", "if", "np", ".", "random", ".", "random_sample", "(", ")", ">", "0.75", ":", "\n", "        ", "return", "Xnew", ",", "ynew", "\n", "", "else", ":", "\n", "        ", "if", "do", "[", "0", "]", "==", "1", ":", "\n", "            ", "Xnew", ",", "ynew", "=", "flip3D", "(", "Xnew", ",", "ynew", ")", "\n", "\n", "", "if", "do", "[", "1", "]", "==", "1", ":", "\n", "            ", "Xnew", ",", "ynew", "=", "brightness", "(", "Xnew", ",", "ynew", ")", "\n", "\n", "", "if", "do", "[", "2", "]", "==", "1", ":", "\n", "            ", "Xnew", ",", "ynew", "=", "rotation_zoom3D", "(", "Xnew", ",", "ynew", ")", "\n", "\n", "", "if", "do", "[", "3", "]", "==", "1", ":", "\n", "            ", "Xnew", ",", "ynew", "=", "elastic", "(", "Xnew", ",", "ynew", ")", "\n", "\n", "", "return", "Xnew", ",", "ynew", "\n", "\n"]], "home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.aug_batch": [[141, 159], ["len", "augmentation.random_decisions", "multiprocessing.Pool", "mp.Pool.starmap", "mp.Pool.close", "range", "numpy.empty_like", "numpy.empty_like", "zip"], "function", ["home.repos.pwc.inspect_result.mdciri_augmentation.None.augmentation.random_decisions"], ["", "", "def", "aug_batch", "(", "Xb", ",", "Yb", ",", "decisions", ")", ":", "\n", "    ", "\"\"\"\n    Generate a augmented image batch \n    \"\"\"", "\n", "batch_size", "=", "len", "(", "Xb", ")", "\n", "newXb", ",", "newYb", "=", "np", ".", "empty_like", "(", "Xb", ")", ",", "np", ".", "empty_like", "(", "Yb", ")", "\n", "\n", "decisions", "=", "random_decisions", "(", "batch_size", ")", "\n", "\n", "inputs", "=", "[", "(", "X", ",", "y", ",", "do", ")", "for", "X", ",", "y", ",", "do", "in", "zip", "(", "Xb", ",", "Yb", ",", "decisions", ")", "]", "\n", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "8", ")", "\n", "multi_result", "=", "pool", ".", "starmap", "(", "combine_aug", ",", "inputs", ")", "\n", "pool", ".", "close", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "newXb", "[", "i", "]", ",", "newYb", "[", "i", "]", "=", "multi_result", "[", "i", "]", "[", "0", "]", ",", "multi_result", "[", "i", "]", "[", "1", "]", "\n", "\n", "", "return", "newXb", ",", "newYb", "\n", "", ""]]}