{"home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.resize_like": [[13, 19], ["tensorflow.image.resize_nearest_neighbor", "inputs.get_shape", "inputs.get_shape", "ref.get_shape", "ref.get_shape"], "function", ["None"], ["def", "resize_like", "(", "inputs", ",", "ref", ")", ":", "\n", "    ", "iH", ",", "iW", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ",", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", "\n", "rH", ",", "rW", "=", "ref", ".", "get_shape", "(", ")", "[", "1", "]", ",", "ref", ".", "get_shape", "(", ")", "[", "2", "]", "\n", "if", "iH", "==", "rH", "and", "iW", "==", "rW", ":", "\n", "        ", "return", "inputs", "\n", "", "return", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "inputs", ",", "[", "rH", ".", "value", ",", "rW", ".", "value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.pose_exp_net": [[20, 77], ["tensorflow.concat", "int", "tensorflow.variable_scope", "tf.concat.get_shape", "tf.concat.get_shape", "tensorflow.arg_scope", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict", "tensorflow.variable_scope", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tensorflow.reduce_mean", "src_image_stack.get_shape", "tensorflow.l2_regularizer", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tf_cylindrical.conv2d", "tensorflow.conv2d_transpose", "tf_cylindrical.conv2d", "tensorflow.conv2d_transpose", "tf_cylindrical.conv2d", "tensorflow.conv2d_transpose", "tf_cylindrical.conv2d"], "function", ["None"], ["", "def", "pose_exp_net", "(", "tgt_image", ",", "src_image_stack", ",", "do_exp", "=", "True", ",", "is_training", "=", "True", ",", "do_wrap", "=", "True", ")", ":", "\n", "    ", "pad", "=", "'CYLIN'", "if", "do_wrap", "else", "'SAME'", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "tgt_image", ",", "src_image_stack", "]", ",", "axis", "=", "3", ")", "\n", "H", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "W", "=", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "num_source", "=", "int", "(", "src_image_stack", ".", "get_shape", "(", ")", "[", "3", "]", ".", "value", "//", "3", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'pose_exp_net'", ")", "as", "sc", ":", "\n", "        ", "end_points_collection", "=", "sc", ".", "original_name_scope", "+", "'_end_points'", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "conv2d_transpose", "]", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "0.05", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "outputs_collections", "=", "end_points_collection", ",", "\n", "trainable", "=", "is_training", ")", ":", "\n", "# cnv1 to cnv5b are shared between pose and explainability prediction", "\n", "            ", "cnv1", "=", "cylin", ".", "conv2d", "(", "inputs", ",", "16", ",", "[", "7", ",", "7", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv1'", ")", "\n", "cnv2", "=", "cylin", ".", "conv2d", "(", "cnv1", ",", "32", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv2'", ")", "\n", "cnv3", "=", "cylin", ".", "conv2d", "(", "cnv2", ",", "64", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv3'", ")", "\n", "cnv4", "=", "cylin", ".", "conv2d", "(", "cnv3", ",", "128", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv4'", ")", "\n", "cnv5", "=", "cylin", ".", "conv2d", "(", "cnv4", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv5'", ")", "\n", "# Pose specific layers", "\n", "with", "tf", ".", "variable_scope", "(", "'pose'", ")", ":", "\n", "                ", "cnv6", "=", "cylin", ".", "conv2d", "(", "cnv5", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv6'", ")", "\n", "cnv7", "=", "cylin", ".", "conv2d", "(", "cnv6", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv7'", ")", "\n", "pose_pred", "=", "cylin", ".", "conv2d", "(", "cnv7", ",", "6", "*", "num_source", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "pad", ",", "scope", "=", "'pred'", ",", "\n", "stride", "=", "1", ",", "normalizer_fn", "=", "None", ",", "activation_fn", "=", "None", ")", "\n", "pose_avg", "=", "tf", ".", "reduce_mean", "(", "pose_pred", ",", "[", "1", ",", "2", "]", ")", "\n", "# Empirically we found that scaling by a small constant", "\n", "# facilitates training.", "\n", "pose_final", "=", "0.01", "*", "tf", ".", "reshape", "(", "pose_avg", ",", "[", "-", "1", ",", "num_source", ",", "6", "]", ")", "\n", "# Exp mask specific layers", "\n", "", "if", "do_exp", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'exp'", ")", ":", "\n", "                    ", "upcnv5", "=", "slim", ".", "conv2d_transpose", "(", "cnv5", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv5'", ")", "\n", "\n", "upcnv4", "=", "slim", ".", "conv2d_transpose", "(", "upcnv5", ",", "128", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv4'", ")", "\n", "mask4", "=", "cylin", ".", "conv2d", "(", "upcnv4", ",", "num_source", "*", "2", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "scope", "=", "'mask4'", ",", "\n", "normalizer_fn", "=", "None", ",", "activation_fn", "=", "None", ",", "padding", "=", "pad", ")", "\n", "\n", "upcnv3", "=", "slim", ".", "conv2d_transpose", "(", "upcnv4", ",", "64", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv3'", ")", "\n", "mask3", "=", "cylin", ".", "conv2d", "(", "upcnv3", ",", "num_source", "*", "2", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "scope", "=", "'mask3'", ",", "\n", "normalizer_fn", "=", "None", ",", "activation_fn", "=", "None", ",", "padding", "=", "pad", ")", "\n", "\n", "upcnv2", "=", "slim", ".", "conv2d_transpose", "(", "upcnv3", ",", "32", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv2'", ")", "\n", "mask2", "=", "cylin", ".", "conv2d", "(", "upcnv2", ",", "num_source", "*", "2", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "1", ",", "scope", "=", "'mask2'", ",", "\n", "normalizer_fn", "=", "None", ",", "activation_fn", "=", "None", ",", "padding", "=", "pad", ")", "\n", "\n", "upcnv1", "=", "slim", ".", "conv2d_transpose", "(", "upcnv2", ",", "16", ",", "[", "7", ",", "7", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv1'", ")", "\n", "mask1", "=", "cylin", ".", "conv2d", "(", "upcnv1", ",", "num_source", "*", "2", ",", "[", "7", ",", "7", "]", ",", "stride", "=", "1", ",", "scope", "=", "'mask1'", ",", "\n", "normalizer_fn", "=", "None", ",", "activation_fn", "=", "None", ",", "padding", "=", "pad", ")", "\n", "", "", "else", ":", "\n", "                ", "mask1", "=", "None", "\n", "mask2", "=", "None", "\n", "mask3", "=", "None", "\n", "mask4", "=", "None", "\n", "", "end_points", "=", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "return", "pose_final", ",", "[", "mask1", ",", "mask2", ",", "mask3", ",", "mask4", "]", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.disp_net": [[78, 151], ["tensorflow.variable_scope", "tgt_image.get_shape", "tgt_image.get_shape", "tensorflow.arg_scope", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d", "tensorflow.conv2d_transpose", "nets.resize_like", "tensorflow.concat", "tf_cylindrical.conv2d", "tensorflow.conv2d_transpose", "nets.resize_like", "tensorflow.concat", "tf_cylindrical.conv2d", "tensorflow.conv2d_transpose", "nets.resize_like", "tensorflow.concat", "tf_cylindrical.conv2d", "tensorflow.conv2d_transpose", "tensorflow.concat", "tf_cylindrical.conv2d", "tensorflow.image.resize_bilinear", "tensorflow.conv2d_transpose", "tensorflow.concat", "tf_cylindrical.conv2d", "tensorflow.image.resize_bilinear", "tensorflow.conv2d_transpose", "tensorflow.concat", "tf_cylindrical.conv2d", "tensorflow.image.resize_bilinear", "tensorflow.conv2d_transpose", "tensorflow.concat", "tf_cylindrical.conv2d", "tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict", "tensorflow.l2_regularizer", "tf_cylindrical.conv2d", "numpy.int", "numpy.int", "tf_cylindrical.conv2d", "numpy.int", "numpy.int", "tf_cylindrical.conv2d", "tf_cylindrical.conv2d"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.resize_like", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.resize_like", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.resize_like"], ["", "", "", "def", "disp_net", "(", "tgt_image", ",", "is_training", "=", "True", ",", "do_reuse", "=", "False", ",", "do_wrap", "=", "True", ")", ":", "\n", "    ", "pad", "=", "'CYLIN'", "if", "do_wrap", "else", "'SAME'", "\n", "H", "=", "tgt_image", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "W", "=", "tgt_image", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "with", "tf", ".", "variable_scope", "(", "'depth_net'", ")", "as", "sc", ":", "\n", "        ", "end_points_collection", "=", "sc", ".", "original_name_scope", "+", "'_end_points'", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "conv2d_transpose", "]", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "0.05", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "outputs_collections", "=", "end_points_collection", ",", "\n", "reuse", "=", "do_reuse", ",", "\n", "trainable", "=", "is_training", ")", ":", "\n", "            ", "cnv1", "=", "cylin", ".", "conv2d", "(", "tgt_image", ",", "32", ",", "[", "7", ",", "7", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv1'", ")", "\n", "cnv1b", "=", "cylin", ".", "conv2d", "(", "cnv1", ",", "32", ",", "[", "7", ",", "7", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv1b'", ")", "\n", "cnv2", "=", "cylin", ".", "conv2d", "(", "cnv1b", ",", "64", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv2'", ")", "\n", "cnv2b", "=", "cylin", ".", "conv2d", "(", "cnv2", ",", "64", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv2b'", ")", "\n", "cnv3", "=", "cylin", ".", "conv2d", "(", "cnv2b", ",", "128", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv3'", ")", "\n", "cnv3b", "=", "cylin", ".", "conv2d", "(", "cnv3", ",", "128", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv3b'", ")", "\n", "cnv4", "=", "cylin", ".", "conv2d", "(", "cnv3b", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv4'", ")", "\n", "cnv4b", "=", "cylin", ".", "conv2d", "(", "cnv4", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv4b'", ")", "\n", "cnv5", "=", "cylin", ".", "conv2d", "(", "cnv4b", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv5'", ")", "\n", "cnv5b", "=", "cylin", ".", "conv2d", "(", "cnv5", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv5b'", ")", "\n", "cnv6", "=", "cylin", ".", "conv2d", "(", "cnv5b", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv6'", ")", "\n", "cnv6b", "=", "cylin", ".", "conv2d", "(", "cnv6", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv6b'", ")", "\n", "cnv7", "=", "cylin", ".", "conv2d", "(", "cnv6b", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv7'", ")", "\n", "cnv7b", "=", "cylin", ".", "conv2d", "(", "cnv7", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'cnv7b'", ")", "\n", "\n", "upcnv7", "=", "slim", ".", "conv2d_transpose", "(", "cnv7b", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv7'", ")", "\n", "# There might be dimension mismatch due to uneven down/up-sampling", "\n", "upcnv7", "=", "resize_like", "(", "upcnv7", ",", "cnv6b", ")", "\n", "i7_in", "=", "tf", ".", "concat", "(", "[", "upcnv7", ",", "cnv6b", "]", ",", "axis", "=", "3", ")", "\n", "icnv7", "=", "cylin", ".", "conv2d", "(", "i7_in", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'icnv7'", ")", "\n", "\n", "upcnv6", "=", "slim", ".", "conv2d_transpose", "(", "icnv7", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv6'", ")", "\n", "upcnv6", "=", "resize_like", "(", "upcnv6", ",", "cnv5b", ")", "\n", "i6_in", "=", "tf", ".", "concat", "(", "[", "upcnv6", ",", "cnv5b", "]", ",", "axis", "=", "3", ")", "\n", "icnv6", "=", "cylin", ".", "conv2d", "(", "i6_in", ",", "512", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'icnv6'", ")", "\n", "\n", "upcnv5", "=", "slim", ".", "conv2d_transpose", "(", "icnv6", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv5'", ")", "\n", "upcnv5", "=", "resize_like", "(", "upcnv5", ",", "cnv4b", ")", "\n", "i5_in", "=", "tf", ".", "concat", "(", "[", "upcnv5", ",", "cnv4b", "]", ",", "axis", "=", "3", ")", "\n", "icnv5", "=", "cylin", ".", "conv2d", "(", "i5_in", ",", "256", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'icnv5'", ")", "\n", "\n", "upcnv4", "=", "slim", ".", "conv2d_transpose", "(", "icnv5", ",", "128", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv4'", ")", "\n", "i4_in", "=", "tf", ".", "concat", "(", "[", "upcnv4", ",", "cnv3b", "]", ",", "axis", "=", "3", ")", "\n", "icnv4", "=", "cylin", ".", "conv2d", "(", "i4_in", ",", "128", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'icnv4'", ")", "\n", "disp4", "=", "DISP_SCALING", "*", "cylin", ".", "conv2d", "(", "icnv4", ",", "1", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "\n", "activation_fn", "=", "tf", ".", "sigmoid", ",", "normalizer_fn", "=", "None", ",", "scope", "=", "'disp4'", ")", "+", "MIN_DISP", "\n", "disp4_up", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "disp4", ",", "[", "np", ".", "int", "(", "H", "/", "4", ")", ",", "np", ".", "int", "(", "W", "/", "4", ")", "]", ")", "\n", "\n", "upcnv3", "=", "slim", ".", "conv2d_transpose", "(", "icnv4", ",", "64", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv3'", ")", "\n", "i3_in", "=", "tf", ".", "concat", "(", "[", "upcnv3", ",", "cnv2b", ",", "disp4_up", "]", ",", "axis", "=", "3", ")", "\n", "icnv3", "=", "cylin", ".", "conv2d", "(", "i3_in", ",", "64", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'icnv3'", ")", "\n", "disp3", "=", "DISP_SCALING", "*", "cylin", ".", "conv2d", "(", "icnv3", ",", "1", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "\n", "activation_fn", "=", "tf", ".", "sigmoid", ",", "normalizer_fn", "=", "None", ",", "scope", "=", "'disp3'", ")", "+", "MIN_DISP", "\n", "disp3_up", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "disp3", ",", "[", "np", ".", "int", "(", "H", "/", "2", ")", ",", "np", ".", "int", "(", "W", "/", "2", ")", "]", ")", "\n", "\n", "upcnv2", "=", "slim", ".", "conv2d_transpose", "(", "icnv3", ",", "32", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv2'", ")", "\n", "i2_in", "=", "tf", ".", "concat", "(", "[", "upcnv2", ",", "cnv1b", ",", "disp3_up", "]", ",", "axis", "=", "3", ")", "\n", "icnv2", "=", "cylin", ".", "conv2d", "(", "i2_in", ",", "32", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'icnv2'", ")", "\n", "disp2", "=", "DISP_SCALING", "*", "cylin", ".", "conv2d", "(", "icnv2", ",", "1", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "\n", "activation_fn", "=", "tf", ".", "sigmoid", ",", "normalizer_fn", "=", "None", ",", "scope", "=", "'disp2'", ")", "+", "MIN_DISP", "\n", "disp2_up", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "disp2", ",", "[", "H", ",", "W", "]", ")", "\n", "\n", "upcnv1", "=", "slim", ".", "conv2d_transpose", "(", "icnv2", ",", "16", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'upcnv1'", ")", "\n", "i1_in", "=", "tf", ".", "concat", "(", "[", "upcnv1", ",", "disp2_up", "]", ",", "axis", "=", "3", ")", "\n", "icnv1", "=", "cylin", ".", "conv2d", "(", "i1_in", ",", "16", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "scope", "=", "'icnv1'", ")", "\n", "disp1", "=", "DISP_SCALING", "*", "cylin", ".", "conv2d", "(", "icnv1", ",", "1", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "\n", "activation_fn", "=", "tf", ".", "sigmoid", ",", "normalizer_fn", "=", "None", ",", "scope", "=", "'disp1'", ")", "+", "MIN_DISP", "\n", "\n", "end_points", "=", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "return", "[", "disp1", ",", "disp2", ",", "disp3", ",", "disp4", "]", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.build_train_graph": [[18, 169], ["data_loader.DataLoader", "tensorflow.name_scope", "tensorflow.name_scope", "data_loader.DataLoader.load_train_batch", "SfMLearner.SfMLearner.preprocess_image", "SfMLearner.SfMLearner.preprocess_image", "tensorflow.name_scope", "tensorflow.name_scope", "nets.disp_net", "tensorflow.name_scope", "tensorflow.name_scope", "nets.pose_exp_net", "tensorflow.name_scope", "tensorflow.name_scope", "range", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.learning.create_train_op", "tensorflow.learning.create_train_op", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "utils.normalize_by_mean", "utils.normalize_by_mean", "tensorflow.image.resize_area", "tensorflow.image.resize_area", "tensorflow.image.resize_area", "tensorflow.image.resize_area", "range", "tgt_image_all.append", "src_image_stack_all.append", "proj_image_stack_all.append", "proj_error_stack_all.append", "SfMLearner.SfMLearner.get_reference_explain_mask", "tensorflow.image.resize_area", "tensorflow.image.resize_area", "SfMLearner.SfMLearner.depth_smoothness", "utils.projective_inverse_warp", "tensorflow.abs", "tensorflow.abs", "mask_stack_all.append", "exp_mask_stack_all.append", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "int", "int", "int", "int", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.slice", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "int", "int", "SfMLearner.SfMLearner.compute_exp_reg_loss", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.load_train_batch", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.preprocess_image", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.preprocess_image", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.disp_net", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.pose_exp_net", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.normalize_by_mean", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.normalize_by_mean", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.get_reference_explain_mask", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.depth_smoothness", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.projective_inverse_warp", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.compute_exp_reg_loss"], ["", "def", "build_train_graph", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "loader", "=", "DataLoader", "(", "opt", ".", "dataset_dir", ",", "\n", "opt", ".", "batch_size", ",", "\n", "opt", ".", "img_height", ",", "\n", "opt", ".", "img_width", ",", "\n", "opt", ".", "num_source", ",", "\n", "opt", ".", "num_scales", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"data_loading\"", ")", ":", "\n", "            ", "tgt_image", ",", "src_image_stack", ",", "intrinsics", "=", "loader", ".", "load_train_batch", "(", ")", "\n", "tgt_image", "=", "self", ".", "preprocess_image", "(", "tgt_image", ")", "\n", "if", "opt", ".", "mask_path", "==", "''", ":", "\n", "                ", "opt", ".", "mask_path", "=", "None", "\n", "", "if", "opt", ".", "mask_path", ":", "\n", "                ", "mask_ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "shape", "=", "tgt_image", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "mask_image", "=", "tf", ".", "expand_dims", "(", "mask_ph", ",", "axis", "=", "0", ")", "\n", "mask_image", "=", "tf", ".", "expand_dims", "(", "mask_image", ",", "axis", "=", "-", "1", ")", "\n", "", "src_image_stack", "=", "self", ".", "preprocess_image", "(", "src_image_stack", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"depth_prediction\"", ")", ":", "\n", "            ", "pred_disp", ",", "depth_net_endpoints", "=", "disp_net", "(", "tgt_image", ",", "\n", "is_training", "=", "True", ",", "\n", "do_wrap", "=", "opt", ".", "do_wrap", ")", "\n", "pred_depth", "=", "[", "1.", "/", "d", "for", "d", "in", "pred_disp", "]", "\n", "pred_depth", "=", "[", "normalize_by_mean", "(", "d", ")", "for", "d", "in", "pred_depth", "]", "\n", "pred_disp", "=", "[", "normalize_by_mean", "(", "d", ")", "for", "d", "in", "pred_disp", "]", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"pose_and_explainability_prediction\"", ")", ":", "\n", "            ", "pred_poses", ",", "pred_exp_logits", ",", "pose_exp_net_endpoints", "=", "pose_exp_net", "(", "tgt_image", ",", "\n", "src_image_stack", ",", "\n", "do_exp", "=", "(", "opt", ".", "explain_reg_weight", ">", "0", ")", ",", "\n", "is_training", "=", "True", ",", "\n", "do_wrap", "=", "opt", ".", "do_wrap", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"compute_loss\"", ")", ":", "\n", "            ", "pixel_loss", "=", "0", "\n", "exp_loss", "=", "0", "\n", "smooth_loss", "=", "0", "\n", "tgt_image_all", "=", "[", "]", "\n", "src_image_stack_all", "=", "[", "]", "\n", "proj_image_stack_all", "=", "[", "]", "\n", "proj_error_stack_all", "=", "[", "]", "\n", "exp_mask_stack_all", "=", "[", "]", "\n", "mask_stack_all", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "opt", ".", "num_scales", ")", ":", "\n", "                ", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "# Construct a reference explainability mask (i.e. all", "\n", "# pixels are explainable)", "\n", "                    ", "ref_exp_mask", "=", "self", ".", "get_reference_explain_mask", "(", "s", ")", "\n", "# Scale the source and target images for computing loss at the", "\n", "# according scale.", "\n", "", "curr_tgt_image", "=", "tf", ".", "image", ".", "resize_area", "(", "tgt_image", ",", "\n", "[", "int", "(", "opt", ".", "img_height", "/", "(", "2", "**", "s", ")", ")", ",", "int", "(", "opt", ".", "img_width", "/", "(", "2", "**", "s", ")", ")", "]", ")", "\n", "curr_src_image_stack", "=", "tf", ".", "image", ".", "resize_area", "(", "src_image_stack", ",", "\n", "[", "int", "(", "opt", ".", "img_height", "/", "(", "2", "**", "s", ")", ")", ",", "int", "(", "opt", ".", "img_width", "/", "(", "2", "**", "s", ")", ")", "]", ")", "\n", "if", "opt", ".", "mask_path", ":", "\n", "                    ", "curr_mask", "=", "tf", ".", "image", ".", "resize_area", "(", "mask_image", ",", "\n", "[", "int", "(", "opt", ".", "img_height", "/", "(", "2", "**", "s", ")", ")", ",", "int", "(", "opt", ".", "img_width", "/", "(", "2", "**", "s", ")", ")", "]", ")", "\n", "\n", "#if opt.smooth_weight > 0:", "\n", "#smooth_loss += opt.smooth_weight/(2**s) * \\", "\n", "#self.compute_smooth_loss(pred_disp[s])", "\n", "", "smooth_loss", "+=", "opt", ".", "smooth_weight", "/", "(", "2", "**", "s", ")", "*", "self", ".", "depth_smoothness", "(", "\n", "pred_disp", "[", "s", "]", ",", "curr_tgt_image", ")", "\n", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_source", ")", ":", "\n", "# Inverse warp the source image to the target image frame", "\n", "                    ", "mask", "=", "opt", ".", "mask_path", "and", "curr_mask", "\n", "curr_proj_image", "=", "projective_inverse_warp", "(", "\n", "curr_src_image_stack", "[", ":", ",", ":", ",", ":", ",", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", ",", "\n", "tf", ".", "squeeze", "(", "pred_depth", "[", "s", "]", ",", "axis", "=", "3", ")", ",", "\n", "pred_poses", "[", ":", ",", "i", ",", ":", "]", ",", "\n", "intrinsics", "[", ":", ",", "s", ",", ":", ",", ":", "]", ",", "\n", "do_wrap", "=", "opt", ".", "do_wrap", ",", "\n", "is_cylin", "=", "opt", ".", "cylindrical", ",", "\n", "mask", "=", "mask", ")", "\n", "curr_proj_error", "=", "tf", ".", "abs", "(", "curr_proj_image", "-", "curr_tgt_image", ")", "\n", "if", "opt", ".", "mask_path", ":", "\n", "                        ", "curr_proj_error", "=", "curr_proj_error", "*", "curr_mask", "\n", "# Cross-entropy loss as regularization for the", "\n", "# explainability prediction", "\n", "", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "                        ", "curr_exp_logits", "=", "tf", ".", "slice", "(", "pred_exp_logits", "[", "s", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "i", "*", "2", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "2", "]", ")", "\n", "exp_loss", "+=", "opt", ".", "explain_reg_weight", "*", "self", ".", "compute_exp_reg_loss", "(", "curr_exp_logits", ",", "\n", "ref_exp_mask", ")", "\n", "curr_exp", "=", "tf", ".", "nn", ".", "softmax", "(", "curr_exp_logits", ")", "\n", "# Photo-consistency loss weighted by explainability", "\n", "", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "                        ", "pixel_loss", "+=", "tf", ".", "reduce_mean", "(", "curr_proj_error", "*", "tf", ".", "expand_dims", "(", "curr_exp", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                        ", "pixel_loss", "+=", "tf", ".", "reduce_mean", "(", "curr_proj_error", ")", "\n", "# Prepare images for tensorboard summaries", "\n", "", "if", "i", "==", "0", ":", "\n", "                        ", "proj_image_stack", "=", "curr_proj_image", "\n", "proj_error_stack", "=", "curr_proj_error", "\n", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "                            ", "exp_mask_stack", "=", "tf", ".", "expand_dims", "(", "curr_exp", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "-", "1", ")", "\n", "", "if", "opt", ".", "mask_path", ":", "\n", "                            ", "mask_stack", "=", "curr_mask", "\n", "", "", "else", ":", "\n", "                        ", "proj_image_stack", "=", "tf", ".", "concat", "(", "[", "proj_image_stack", ",", "\n", "curr_proj_image", "]", ",", "axis", "=", "3", ")", "\n", "proj_error_stack", "=", "tf", ".", "concat", "(", "[", "proj_error_stack", ",", "\n", "curr_proj_error", "]", ",", "axis", "=", "3", ")", "\n", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "                            ", "exp_mask_stack", "=", "tf", ".", "concat", "(", "[", "exp_mask_stack", ",", "\n", "tf", ".", "expand_dims", "(", "curr_exp", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "-", "1", ")", "]", ",", "axis", "=", "3", ")", "\n", "", "", "", "tgt_image_all", ".", "append", "(", "curr_tgt_image", ")", "\n", "src_image_stack_all", ".", "append", "(", "curr_src_image_stack", ")", "\n", "proj_image_stack_all", ".", "append", "(", "proj_image_stack", ")", "\n", "proj_error_stack_all", ".", "append", "(", "proj_error_stack", ")", "\n", "if", "opt", ".", "mask_path", ":", "\n", "                    ", "mask_stack_all", ".", "append", "(", "mask_stack", ")", "\n", "", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "                    ", "exp_mask_stack_all", ".", "append", "(", "exp_mask_stack", ")", "\n", "", "", "total_loss", "=", "pixel_loss", "+", "smooth_loss", "+", "exp_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"train_op\"", ")", ":", "\n", "            ", "train_vars", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "]", "\n", "optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "opt", ".", "learning_rate", ",", "opt", ".", "beta1", ")", "\n", "# self.grads_and_vars = optim.compute_gradients(total_loss,", "\n", "#                                               var_list=train_vars)", "\n", "# self.train_op = optim.apply_gradients(self.grads_and_vars)", "\n", "self", ".", "train_op", "=", "slim", ".", "learning", ".", "create_train_op", "(", "total_loss", ",", "optim", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "\n", "name", "=", "'global_step'", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "incr_global_step", "=", "tf", ".", "assign", "(", "self", ".", "global_step", ",", "\n", "self", ".", "global_step", "+", "1", ")", "\n", "\n", "# Collect tensors that are useful later (e.g. tf summary)", "\n", "", "if", "opt", ".", "mask_path", ":", "\n", "            ", "self", ".", "mask_ph", "=", "mask_ph", "\n", "", "self", ".", "pred_depth", "=", "pred_depth", "\n", "self", ".", "pred_poses", "=", "pred_poses", "\n", "self", ".", "steps_per_epoch", "=", "loader", ".", "steps_per_epoch", "\n", "self", ".", "total_loss", "=", "total_loss", "\n", "self", ".", "pixel_loss", "=", "pixel_loss", "\n", "self", ".", "exp_loss", "=", "exp_loss", "\n", "self", ".", "smooth_loss", "=", "smooth_loss", "\n", "self", ".", "tgt_image_all", "=", "tgt_image_all", "\n", "self", ".", "src_image_stack_all", "=", "src_image_stack_all", "\n", "self", ".", "proj_image_stack_all", "=", "proj_image_stack_all", "\n", "self", ".", "proj_error_stack_all", "=", "proj_error_stack_all", "\n", "self", ".", "exp_mask_stack_all", "=", "exp_mask_stack_all", "\n", "self", ".", "mask_stack_all", "=", "mask_stack_all", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.get_reference_explain_mask": [[170, 180], ["numpy.array", "numpy.tile", "tensorflow.constant", "tensorflow.constant", "int", "int"], "methods", ["None"], ["", "def", "get_reference_explain_mask", "(", "self", ",", "downscaling", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "tmp", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "ref_exp_mask", "=", "np", ".", "tile", "(", "tmp", ",", "\n", "(", "opt", ".", "batch_size", ",", "\n", "int", "(", "opt", ".", "img_height", "/", "(", "2", "**", "downscaling", ")", ")", ",", "\n", "int", "(", "opt", ".", "img_width", "/", "(", "2", "**", "downscaling", ")", ")", ",", "\n", "1", ")", ")", "\n", "ref_exp_mask", "=", "tf", ".", "constant", "(", "ref_exp_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "ref_exp_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.compute_exp_reg_loss": [[181, 186], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "compute_exp_reg_loss", "(", "self", ",", "pred", ",", "ref", ")", ":", "\n", "        ", "l", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "reshape", "(", "ref", ",", "[", "-", "1", ",", "2", "]", ")", ",", "\n", "logits", "=", "tf", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "2", "]", ")", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.compute_smooth_loss": [[187, 205], ["SfMLearner.SfMLearner.compute_smooth_loss.gradient"], "methods", ["None"], ["", "def", "compute_smooth_loss", "(", "self", ",", "pred_disp", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "def", "gradient", "(", "pred", ")", ":", "\n", "            ", "if", "opt", ".", "do_wrap", ":", "\n", "                ", "wrapped", "=", "cylin", ".", "wrap", "(", "pred", ",", "wrapping", "=", "2", ")", "# one column per side", "\n", "wrapped_D_dx", "=", "wrapped", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "wrapped", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "D_dx", "=", "cylin", ".", "unwrap", "(", "wrapped_D_dx", ",", "wrapping", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "D_dx", "=", "pred", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "pred", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "", "D_dy", "=", "pred", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "pred", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "D_dx", ",", "D_dy", "\n", "", "dx", ",", "dy", "=", "gradient", "(", "pred_disp", ")", "\n", "dx2", ",", "dxdy", "=", "gradient", "(", "dx", ")", "\n", "dydx", ",", "dy2", "=", "gradient", "(", "dy", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "dx2", ")", ")", "+", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "dxdy", ")", ")", "+", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "dydx", ")", ")", "+", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "dy2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.depth_smoothness": [[207, 226], ["SfMLearner.SfMLearner.compute_smooth_loss.gradient"], "methods", ["None"], ["", "def", "depth_smoothness", "(", "self", ",", "depth", ",", "img", ")", ":", "\n", "       ", "\"\"\"Computes image-aware depth smoothness loss.\"\"\"", "\n", "opt", "=", "self", ".", "opt", "\n", "def", "gradient", "(", "pred", ")", ":", "\n", "           ", "if", "opt", ".", "do_wrap", ":", "\n", "               ", "wrapped", "=", "cylin", ".", "wrap", "(", "pred", ",", "wrapping", "=", "2", ")", "# one column per side", "\n", "wrapped_D_dx", "=", "wrapped", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "wrapped", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "D_dx", "=", "cylin", ".", "unwrap", "(", "wrapped_D_dx", ",", "wrapping", "=", "2", ")", "\n", "", "else", ":", "\n", "               ", "D_dx", "=", "pred", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "pred", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "", "D_dy", "=", "pred", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "pred", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "D_dx", ",", "D_dy", "\n", "", "depth_dx", ",", "depth_dy", "=", "gradient", "(", "depth", ")", "\n", "image_dx", ",", "image_dy", "=", "gradient", "(", "img", ")", "\n", "weights_x", "=", "tf", ".", "exp", "(", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "image_dx", ")", ",", "3", ",", "keepdims", "=", "True", ")", ")", "\n", "weights_y", "=", "tf", ".", "exp", "(", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "image_dy", ")", ",", "3", ",", "keepdims", "=", "True", ")", ")", "\n", "smoothness_x", "=", "depth_dx", "*", "weights_x", "\n", "smoothness_y", "=", "depth_dy", "*", "weights_y", "\n", "return", "tf", ".", "reduce_mean", "(", "abs", "(", "smoothness_x", ")", ")", "+", "tf", ".", "reduce_mean", "(", "abs", "(", "smoothness_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.collect_summaries": [[227, 259], ["tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "range", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "range", "SfMLearner.SfMLearner.deprocess_image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "SfMLearner.SfMLearner.deprocess_image", "SfMLearner.SfMLearner.deprocess_image", "SfMLearner.SfMLearner.deprocess_image", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.deprocess_image", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.deprocess_image", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.deprocess_image", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.deprocess_image"], ["", "def", "collect_summaries", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"total_loss\"", ",", "self", ".", "total_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"pixel_loss\"", ",", "self", ".", "pixel_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"smooth_loss\"", ",", "self", ".", "smooth_loss", ")", "\n", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"exp_loss\"", ",", "self", ".", "exp_loss", ")", "\n", "", "for", "s", "in", "range", "(", "opt", ".", "num_scales", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "\"scale%d_depth\"", "%", "s", ",", "self", ".", "pred_depth", "[", "s", "]", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'scale%d_disparity_image'", "%", "s", ",", "1.", "/", "self", ".", "pred_depth", "[", "s", "]", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'scale%d_target_image'", "%", "s", ",", "self", ".", "deprocess_image", "(", "self", ".", "tgt_image_all", "[", "s", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_source", ")", ":", "\n", "                ", "if", "opt", ".", "explain_reg_weight", ">", "0", ":", "\n", "                    ", "tf", ".", "summary", ".", "image", "(", "\n", "'scale%d_exp_mask_%d'", "%", "(", "s", ",", "i", ")", ",", "\n", "tf", ".", "expand_dims", "(", "self", ".", "exp_mask_stack_all", "[", "s", "]", "[", ":", ",", ":", ",", ":", ",", "i", "]", ",", "-", "1", ")", ")", "\n", "", "tf", ".", "summary", ".", "image", "(", "\n", "'scale%d_source_image_%d'", "%", "(", "s", ",", "i", ")", ",", "\n", "self", ".", "deprocess_image", "(", "self", ".", "src_image_stack_all", "[", "s", "]", "[", ":", ",", ":", ",", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", "]", ")", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'scale%d_projected_image_%d'", "%", "(", "s", ",", "i", ")", ",", "\n", "self", ".", "deprocess_image", "(", "self", ".", "proj_image_stack_all", "[", "s", "]", "[", ":", ",", ":", ",", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", "]", ")", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'scale%d_proj_error_%d'", "%", "(", "s", ",", "i", ")", ",", "\n", "self", ".", "deprocess_image", "(", "tf", ".", "clip_by_value", "(", "self", ".", "proj_error_stack_all", "[", "s", "]", "[", ":", ",", ":", ",", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", "]", "-", "1", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "", "if", "opt", ".", "mask_path", ":", "\n", "              ", "tf", ".", "summary", ".", "image", "(", "'scale%d_mask'", "%", "s", ",", "self", ".", "mask_stack_all", "[", "s", "]", ")", "\n", "", "", "tf", ".", "summary", ".", "histogram", "(", "\"tx\"", ",", "self", ".", "pred_poses", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"ty\"", ",", "self", ".", "pred_poses", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"tz\"", ",", "self", ".", "pred_poses", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"rx\"", ",", "self", ".", "pred_poses", "[", ":", ",", ":", ",", "3", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"ry\"", ",", "self", ".", "pred_poses", "[", ":", ",", ":", ",", "4", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"rz\"", ",", "self", ".", "pred_poses", "[", ":", ",", ":", ",", "5", "]", ")", "\n", "# for var in tf.trainable_variables():", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.train": [[264, 329], ["SfMLearner.SfMLearner.build_train_graph", "SfMLearner.SfMLearner.collect_summaries", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.Supervisor", "tensorflow.train.Supervisor", "tensorflow.ConfigProto", "tensorflow.ConfigProto", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.train.Supervisor.managed_session", "print", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "print", "time.time", "range", "cv2.imread().astype", "print", "sess.run", "print", "SfMLearner.SfMLearner.saver.restore", "tensorflow.reduce_prod", "tensorflow.reduce_prod", "tensorflow.train.latest_checkpoint", "tensorflow.train.latest_checkpoint", "sess.run", "sess.run", "tensorflow.train.Supervisor.summary_writer.add_summary", "math.ceil", "print", "time.time", "SfMLearner.SfMLearner.save", "SfMLearner.SfMLearner.save", "cv2.imread", "tensorflow.shape", "tensorflow.shape", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.model_variables", "tensorflow.model_variables", "time.time"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.build_train_graph", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.collect_summaries", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.save", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.save"], ["", "def", "train", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "mask_path", ":", "\n", "            ", "mask", "=", "cv2", ".", "imread", "(", "opt", ".", "mask_path", ",", "flags", "=", "cv2", ".", "IMREAD_GRAYSCALE", ")", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "", "opt", ".", "num_source", "=", "opt", ".", "seq_length", "-", "1", "\n", "# TODO: currently fixed to 4", "\n", "#opt.num_scales = 4", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "build_train_graph", "(", ")", "\n", "self", ".", "collect_summaries", "(", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"parameter_count\"", ")", ":", "\n", "            ", "parameter_count", "=", "tf", ".", "reduce_sum", "(", "[", "tf", ".", "reduce_prod", "(", "tf", ".", "shape", "(", "v", ")", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "]", "+", "[", "self", ".", "global_step", "]", ",", "\n", "max_to_keep", "=", "10", ")", "\n", "sv", "=", "tf", ".", "train", ".", "Supervisor", "(", "logdir", "=", "opt", ".", "checkpoint_dir", ",", "\n", "save_summaries_secs", "=", "0", ",", "\n", "saver", "=", "None", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "sv", ".", "managed_session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "            ", "print", "(", "'Trainable variables: '", ")", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "                ", "print", "(", "var", ".", "name", ")", "\n", "", "print", "(", "\"parameter_count =\"", ",", "sess", ".", "run", "(", "parameter_count", ")", ")", "\n", "if", "opt", ".", "continue_train", ":", "\n", "                ", "if", "opt", ".", "init_checkpoint_file", "is", "None", ":", "\n", "                    ", "checkpoint", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "opt", ".", "checkpoint_dir", ")", "\n", "", "else", ":", "\n", "                    ", "checkpoint", "=", "opt", ".", "init_checkpoint_file", "\n", "", "print", "(", "\"Resume training from previous checkpoint: %s\"", "%", "checkpoint", ")", "\n", "self", ".", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "step", "in", "range", "(", "1", ",", "opt", ".", "max_steps", ")", ":", "\n", "                ", "fetches", "=", "{", "\n", "\"train\"", ":", "self", ".", "train_op", ",", "\n", "\"global_step\"", ":", "self", ".", "global_step", ",", "\n", "\"incr_global_step\"", ":", "self", ".", "incr_global_step", "\n", "}", "\n", "\n", "if", "step", "%", "opt", ".", "summary_freq", "==", "0", ":", "\n", "                    ", "fetches", "[", "\"loss\"", "]", "=", "self", ".", "total_loss", "\n", "fetches", "[", "\"summary\"", "]", "=", "sv", ".", "summary_op", "\n", "\n", "", "if", "opt", ".", "mask_path", ":", "\n", "                    ", "results", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", "=", "{", "self", ".", "mask_ph", ":", "mask", "}", ")", "\n", "", "else", ":", "\n", "                    ", "results", "=", "sess", ".", "run", "(", "fetches", ")", "\n", "", "gs", "=", "results", "[", "\"global_step\"", "]", "\n", "\n", "if", "step", "%", "opt", ".", "summary_freq", "==", "0", ":", "\n", "                    ", "sv", ".", "summary_writer", ".", "add_summary", "(", "results", "[", "\"summary\"", "]", ",", "gs", ")", "\n", "train_epoch", "=", "math", ".", "ceil", "(", "gs", "/", "self", ".", "steps_per_epoch", ")", "\n", "train_step", "=", "gs", "-", "(", "train_epoch", "-", "1", ")", "*", "self", ".", "steps_per_epoch", "\n", "print", "(", "\"Epoch: [%2d] [%5d/%5d] time: %4.4f/it loss: %.3f\"", "%", "(", "train_epoch", ",", "train_step", ",", "self", ".", "steps_per_epoch", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "opt", ".", "summary_freq", ",", "\n", "results", "[", "\"loss\"", "]", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "step", "%", "opt", ".", "save_latest_freq", "==", "0", ":", "\n", "                    ", "self", ".", "save", "(", "sess", ",", "opt", ".", "checkpoint_dir", ",", "'latest'", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "steps_per_epoch", "==", "0", ":", "\n", "                    ", "self", ".", "save", "(", "sess", ",", "opt", ".", "checkpoint_dir", ",", "gs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.build_depth_test_graph": [[330, 342], ["tensorflow.placeholder", "tensorflow.placeholder", "SfMLearner.SfMLearner.preprocess_image", "tensorflow.name_scope", "tensorflow.name_scope", "nets.disp_net"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.preprocess_image", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.disp_net"], ["", "", "", "", "def", "build_depth_test_graph", "(", "self", ")", ":", "\n", "        ", "input_uint8", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "self", ".", "batch_size", ",", "\n", "self", ".", "img_height", ",", "self", ".", "img_width", ",", "3", "]", ",", "name", "=", "'raw_input'", ")", "\n", "input_mc", "=", "self", ".", "preprocess_image", "(", "input_uint8", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"depth_prediction\"", ")", ":", "\n", "            ", "pred_disp", ",", "depth_net_endpoints", "=", "disp_net", "(", "\n", "input_mc", ",", "is_training", "=", "False", ")", "\n", "pred_depth", "=", "[", "1.", "/", "disp", "for", "disp", "in", "pred_disp", "]", "\n", "", "pred_depth", "=", "pred_depth", "[", "0", "]", "\n", "self", ".", "inputs", "=", "input_uint8", "\n", "self", ".", "pred_depth", "=", "pred_depth", "\n", "self", ".", "depth_epts", "=", "depth_net_endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.build_pose_test_graph": [[343, 357], ["tensorflow.placeholder", "tensorflow.placeholder", "SfMLearner.SfMLearner.preprocess_image", "data_loader.DataLoader", "data_loader.DataLoader.batch_unpack_image_sequence", "tensorflow.name_scope", "tensorflow.name_scope", "nets.pose_exp_net"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.preprocess_image", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.batch_unpack_image_sequence", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.nets.pose_exp_net"], ["", "def", "build_pose_test_graph", "(", "self", ",", "do_wrap", "=", "True", ")", ":", "\n", "        ", "input_uint8", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "self", ".", "batch_size", ",", "\n", "self", ".", "img_height", ",", "self", ".", "img_width", "*", "self", ".", "seq_length", ",", "3", "]", ",", "\n", "name", "=", "'raw_input'", ")", "\n", "input_mc", "=", "self", ".", "preprocess_image", "(", "input_uint8", ")", "\n", "loader", "=", "DataLoader", "(", ")", "\n", "tgt_image", ",", "src_image_stack", "=", "loader", ".", "batch_unpack_image_sequence", "(", "\n", "input_mc", ",", "self", ".", "img_height", ",", "self", ".", "img_width", ",", "self", ".", "num_source", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"pose_prediction\"", ")", ":", "\n", "            ", "pred_poses", ",", "_", ",", "_", "=", "pose_exp_net", "(", "\n", "tgt_image", ",", "src_image_stack", ",", "do_exp", "=", "False", ",", "is_training", "=", "False", ",", "do_wrap", "=", "do_wrap", ")", "\n", "self", ".", "inputs", "=", "input_uint8", "\n", "self", ".", "pred_poses", "=", "pred_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.preprocess_image": [[358, 362], ["tensorflow.image.convert_image_dtype", "tensorflow.image.convert_image_dtype"], "methods", ["None"], ["", "", "def", "preprocess_image", "(", "self", ",", "image", ")", ":", "\n", "# Assuming input image is uint8", "\n", "        ", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "image", "*", "2.", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.deprocess_image": [[363, 367], ["tensorflow.image.convert_image_dtype", "tensorflow.image.convert_image_dtype"], "methods", ["None"], ["", "def", "deprocess_image", "(", "self", ",", "image", ")", ":", "\n", "# Assuming input image is float32", "\n", "        ", "image", "=", "(", "image", "+", "1.", ")", "/", "2.", "\n", "return", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.setup_inference": [[368, 385], ["SfMLearner.SfMLearner.build_depth_test_graph", "SfMLearner.SfMLearner.build_pose_test_graph"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.build_depth_test_graph", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.build_pose_test_graph"], ["", "def", "setup_inference", "(", "self", ",", "\n", "img_height", ",", "\n", "img_width", ",", "\n", "mode", ",", "\n", "seq_length", "=", "3", ",", "\n", "batch_size", "=", "1", ",", "\n", "do_wrap", "=", "True", ")", ":", "\n", "        ", "self", ".", "img_height", "=", "img_height", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "if", "self", ".", "mode", "==", "'depth'", ":", "\n", "            ", "self", ".", "build_depth_test_graph", "(", ")", "\n", "", "if", "self", ".", "mode", "==", "'pose'", ":", "\n", "            ", "self", ".", "seq_length", "=", "seq_length", "\n", "self", ".", "num_source", "=", "seq_length", "-", "1", "\n", "self", ".", "build_pose_test_graph", "(", "do_wrap", "=", "do_wrap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.inference": [[386, 394], ["sess.run"], "methods", ["None"], ["", "", "def", "inference", "(", "self", ",", "inputs", ",", "sess", ",", "mode", "=", "'depth'", ")", ":", "\n", "        ", "fetches", "=", "{", "}", "\n", "if", "mode", "==", "'depth'", ":", "\n", "            ", "fetches", "[", "'depth'", "]", "=", "self", ".", "pred_depth", "\n", "", "if", "mode", "==", "'pose'", ":", "\n", "            ", "fetches", "[", "'pose'", "]", "=", "self", ".", "pred_poses", "\n", "", "results", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", "=", "{", "self", ".", "inputs", ":", "inputs", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.save": [[395, 405], ["print", "SfMLearner.SfMLearner.saver.save", "SfMLearner.SfMLearner.saver.save", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.save", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.save"], ["", "def", "save", "(", "self", ",", "sess", ",", "checkpoint_dir", ",", "step", ")", ":", "\n", "        ", "model_name", "=", "'model'", "\n", "print", "(", "\" [*] Saving checkpoint to %s...\"", "%", "checkpoint_dir", ")", "\n", "if", "step", "==", "'latest'", ":", "\n", "            ", "self", ".", "saver", ".", "save", "(", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", "+", "'.latest'", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "saver", ".", "save", "(", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", ")", ",", "\n", "global_step", "=", "step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.__init__": [[7, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset_dir", "=", "None", ",", "\n", "batch_size", "=", "None", ",", "\n", "img_height", "=", "None", ",", "\n", "img_width", "=", "None", ",", "\n", "num_source", "=", "None", ",", "\n", "num_scales", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "dataset_dir", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "img_height", "=", "img_height", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "num_source", "=", "num_source", "\n", "self", ".", "num_scales", "=", "num_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.load_train_batch": [[21, 66], ["random.randint", "data_loader.DataLoader.format_file_list", "tensorflow.train.string_input_producer", "tensorflow.train.string_input_producer", "int", "tensorflow.WholeFileReader", "tensorflow.WholeFileReader.read", "tensorflow.image.decode_jpeg", "data_loader.DataLoader.unpack_image_sequence", "tensorflow.TextLineReader", "tensorflow.TextLineReader.read", "range", "tensorflow.decode_csv", "tensorflow.stack", "tensorflow.reshape", "tensorflow.train.batch", "data_loader.DataLoader.get_multi_scale_intrinsics", "rec_def.append", "len"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.format_file_list", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.unpack_image_sequence", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.get_multi_scale_intrinsics"], ["", "def", "load_train_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load a batch of training instances.\n        \"\"\"", "\n", "seed", "=", "random", ".", "randint", "(", "0", ",", "2", "**", "31", "-", "1", ")", "\n", "# Load the list of training files into queues", "\n", "file_list", "=", "self", ".", "format_file_list", "(", "self", ".", "dataset_dir", ",", "'train'", ")", "\n", "image_paths_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "\n", "file_list", "[", "'image_file_list'", "]", ",", "\n", "seed", "=", "seed", ",", "\n", "shuffle", "=", "True", ")", "\n", "cam_paths_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "\n", "file_list", "[", "'cam_file_list'", "]", ",", "\n", "seed", "=", "seed", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "self", ".", "steps_per_epoch", "=", "int", "(", "\n", "len", "(", "file_list", "[", "'image_file_list'", "]", ")", "//", "self", ".", "batch_size", ")", "\n", "\n", "# Load images", "\n", "img_reader", "=", "tf", ".", "WholeFileReader", "(", ")", "\n", "_", ",", "image_contents", "=", "img_reader", ".", "read", "(", "image_paths_queue", ")", "\n", "image_seq", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "image_contents", ")", "\n", "tgt_image", ",", "src_image_stack", "=", "self", ".", "unpack_image_sequence", "(", "\n", "image_seq", ",", "self", ".", "img_height", ",", "self", ".", "img_width", ",", "self", ".", "num_source", ")", "\n", "\n", "# Load camera intrinsics", "\n", "cam_reader", "=", "tf", ".", "TextLineReader", "(", ")", "\n", "_", ",", "raw_cam_contents", "=", "cam_reader", ".", "read", "(", "cam_paths_queue", ")", "\n", "rec_def", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "rec_def", ".", "append", "(", "[", "1.", "]", ")", "\n", "", "raw_cam_vec", "=", "tf", ".", "decode_csv", "(", "raw_cam_contents", ",", "\n", "record_defaults", "=", "rec_def", ")", "\n", "raw_cam_vec", "=", "tf", ".", "stack", "(", "raw_cam_vec", ")", "\n", "intrinsics", "=", "tf", ".", "reshape", "(", "raw_cam_vec", ",", "[", "3", ",", "3", "]", ")", "\n", "\n", "# Form training batches", "\n", "src_image_stack", ",", "tgt_image", ",", "intrinsics", "=", "tf", ".", "train", ".", "batch", "(", "[", "src_image_stack", ",", "tgt_image", ",", "intrinsics", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n", "intrinsics", "=", "self", ".", "get_multi_scale_intrinsics", "(", "\n", "intrinsics", ",", "self", ".", "num_scales", ")", "\n", "return", "tgt_image", ",", "src_image_stack", ",", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.make_intrinsics_matrix": [[67, 77], ["tensorflow.zeros_like", "tensorflow.stack", "tensorflow.stack", "tensorflow.constant", "tensorflow.tile", "tensorflow.stack", "fx.get_shape().as_list", "fx.get_shape"], "methods", ["None"], ["", "def", "make_intrinsics_matrix", "(", "self", ",", "fx", ",", "fy", ",", "cx", ",", "cy", ")", ":", "\n", "# Assumes batch input", "\n", "        ", "batch_size", "=", "fx", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "zeros", "=", "tf", ".", "zeros_like", "(", "fx", ")", "\n", "r1", "=", "tf", ".", "stack", "(", "[", "fx", ",", "zeros", ",", "cx", "]", ",", "axis", "=", "1", ")", "\n", "r2", "=", "tf", ".", "stack", "(", "[", "zeros", ",", "fy", ",", "cy", "]", ",", "axis", "=", "1", ")", "\n", "r3", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "3", "]", ")", "\n", "r3", "=", "tf", ".", "tile", "(", "r3", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "intrinsics", "=", "tf", ".", "stack", "(", "[", "r1", ",", "r2", ",", "r3", "]", ",", "axis", "=", "1", ")", "\n", "return", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.format_file_list": [[78, 91], ["open", "f.readlines", "os.path.join", "os.path.join", "x.split", "range", "range", "x.split", "len", "len"], "methods", ["None"], ["", "def", "format_file_list", "(", "self", ",", "data_root", ",", "split", ")", ":", "\n", "        ", "with", "open", "(", "data_root", "+", "'/%s.txt'", "%", "split", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "frames", "=", "f", ".", "readlines", "(", ")", "\n", "", "subfolders", "=", "[", "x", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "x", "in", "frames", "]", "\n", "frame_ids", "=", "[", "x", ".", "split", "(", "' '", ")", "[", "1", "]", "[", ":", "-", "1", "]", "for", "x", "in", "frames", "]", "\n", "image_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "\n", "frame_ids", "[", "i", "]", "+", "'.jpg'", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "cam_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "\n", "frame_ids", "[", "i", "]", "+", "'_cam.txt'", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "all_list", "=", "{", "}", "\n", "all_list", "[", "'image_file_list'", "]", "=", "image_file_list", "\n", "all_list", "[", "'cam_file_list'", "]", "=", "cam_file_list", "\n", "return", "all_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.unpack_image_sequence": [[92, 117], ["int", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat.set_shape", "tensorflow.slice.set_shape", "int", "int", "int", "tensorflow.slice", "range"], "methods", ["None"], ["", "def", "unpack_image_sequence", "(", "self", ",", "image_seq", ",", "img_height", ",", "img_width", ",", "num_source", ")", ":", "\n", "# Assuming the center image is the target frame", "\n", "        ", "tgt_start_idx", "=", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", "\n", "tgt_image", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "tgt_start_idx", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "# Source frames before the target frame", "\n", "src_image_1", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "# Source frames after the target frame", "\n", "src_image_2", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "int", "(", "tgt_start_idx", "+", "img_width", ")", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "src_image_seq", "=", "tf", ".", "concat", "(", "[", "src_image_1", ",", "src_image_2", "]", ",", "axis", "=", "1", ")", "\n", "# Stack source frames along the color channels (i.e. [H, W, N*3])", "\n", "src_image_stack", "=", "tf", ".", "concat", "(", "[", "tf", ".", "slice", "(", "src_image_seq", ",", "\n", "[", "0", ",", "i", "*", "img_width", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "num_source", ")", "]", ",", "axis", "=", "2", ")", "\n", "src_image_stack", ".", "set_shape", "(", "[", "img_height", ",", "\n", "img_width", ",", "\n", "num_source", "*", "3", "]", ")", "\n", "tgt_image", ".", "set_shape", "(", "[", "img_height", ",", "img_width", ",", "3", "]", ")", "\n", "return", "tgt_image", ",", "src_image_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.batch_unpack_image_sequence": [[118, 139], ["int", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "int", "int", "int", "tensorflow.slice", "range"], "methods", ["None"], ["", "def", "batch_unpack_image_sequence", "(", "self", ",", "image_seq", ",", "img_height", ",", "img_width", ",", "num_source", ")", ":", "\n", "# Assuming the center image is the target frame", "\n", "        ", "tgt_start_idx", "=", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", "\n", "tgt_image", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "tgt_start_idx", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "# Source frames before the target frame", "\n", "src_image_1", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "# Source frames after the target frame", "\n", "src_image_2", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "int", "(", "tgt_start_idx", "+", "img_width", ")", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "src_image_seq", "=", "tf", ".", "concat", "(", "[", "src_image_1", ",", "src_image_2", "]", ",", "axis", "=", "2", ")", "\n", "# Stack source frames along the color channels (i.e. [B, H, W, N*3])", "\n", "src_image_stack", "=", "tf", ".", "concat", "(", "[", "tf", ".", "slice", "(", "src_image_seq", ",", "\n", "[", "0", ",", "0", ",", "i", "*", "img_width", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "num_source", ")", "]", ",", "axis", "=", "3", ")", "\n", "return", "tgt_image", ",", "src_image_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.get_multi_scale_intrinsics": [[140, 152], ["range", "tensorflow.stack", "tensorflow.stack.append", "data_loader.DataLoader.make_intrinsics_matrix"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.data_loader.DataLoader.make_intrinsics_matrix"], ["", "def", "get_multi_scale_intrinsics", "(", "self", ",", "intrinsics", ",", "num_scales", ")", ":", "\n", "        ", "intrinsics_mscale", "=", "[", "]", "\n", "# Scale the intrinsics accordingly for each scale", "\n", "for", "s", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "fx", "=", "intrinsics", "[", ":", ",", "0", ",", "0", "]", "/", "(", "2", "**", "s", ")", "\n", "fy", "=", "intrinsics", "[", ":", ",", "1", ",", "1", "]", "/", "(", "2", "**", "s", ")", "\n", "cx", "=", "intrinsics", "[", ":", ",", "0", ",", "2", "]", "/", "(", "2", "**", "s", ")", "\n", "cy", "=", "intrinsics", "[", ":", ",", "1", ",", "2", "]", "/", "(", "2", "**", "s", ")", "\n", "intrinsics_mscale", ".", "append", "(", "\n", "self", ".", "make_intrinsics_matrix", "(", "fx", ",", "fy", ",", "cx", ",", "cy", ")", ")", "\n", "", "intrinsics_mscale", "=", "tf", ".", "stack", "(", "intrinsics_mscale", ",", "axis", "=", "1", ")", "\n", "return", "intrinsics_mscale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.train.main": [[33, 47], ["tensorflow.set_random_seed", "numpy.random.seed", "random.seed", "pprint.PrettyPrinter", "pprint.PrettyPrinter.pprint", "SfMLearner.SfMLearner", "SfMLearner.SfMLearner.train", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.SfMLearner.SfMLearner.train"], ["def", "main", "(", "_", ")", ":", "\n", "    ", "seed", "=", "8964", "\n", "tf", ".", "set_random_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "pp", "=", "pprint", ".", "PrettyPrinter", "(", ")", "\n", "pp", ".", "pprint", "(", "flags", ".", "FLAGS", ".", "__flags", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "FLAGS", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "FLAGS", ".", "checkpoint_dir", ")", "\n", "\n", "", "sfm", "=", "SfMLearner", "(", ")", "\n", "sfm", ".", "train", "(", "FLAGS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.gray2rgb": [[5, 13], ["matplotlib.use", "plt.get_cmap", "plt.get_cmap.", "numpy.delete", "im.astype"], "function", ["None"], ["def", "gray2rgb", "(", "im", ",", "cmap", "=", "'gray'", ")", ":", "\n", "    ", "import", "matplotlib", "\n", "matplotlib", ".", "use", "(", "'agg'", ")", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "# doesn't work in docker", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "cmap", ")", "\n", "rgba_img", "=", "cmap", "(", "im", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "rgb_img", "=", "np", ".", "delete", "(", "rgba_img", ",", "3", ",", "2", ")", "\n", "return", "rgb_img", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.normalize_depth_for_display": [[14, 27], ["numpy.clip", "utils.gray2rgb", "int", "numpy.percentile"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.gray2rgb"], ["", "def", "normalize_depth_for_display", "(", "depth", ",", "pc", "=", "95", ",", "crop_percent", "=", "0", ",", "normalizer", "=", "None", ",", "cmap", "=", "'gray'", ")", ":", "\n", "# convert to disparity", "\n", "    ", "depth", "=", "1.", "/", "(", "depth", "+", "1e-6", ")", "\n", "if", "normalizer", "is", "not", "None", ":", "\n", "        ", "depth", "=", "depth", "/", "normalizer", "\n", "", "else", ":", "\n", "        ", "depth", "=", "depth", "/", "(", "np", ".", "percentile", "(", "depth", ",", "pc", ")", "+", "1e-6", ")", "\n", "", "depth", "=", "np", ".", "clip", "(", "depth", ",", "0", ",", "1", ")", "\n", "depth", "=", "gray2rgb", "(", "depth", ",", "cmap", "=", "cmap", ")", "\n", "keep_H", "=", "int", "(", "depth", ".", "shape", "[", "0", "]", "*", "(", "1", "-", "crop_percent", ")", ")", "\n", "depth", "=", "depth", "[", ":", "keep_H", "]", "\n", "depth", "=", "depth", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.euler2mat": [[28, 77], ["tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.zeros", "tensorflow.ones", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matmul"], "function", ["None"], ["", "def", "euler2mat", "(", "z", ",", "y", ",", "x", ")", ":", "\n", "  ", "\"\"\"Converts euler angles to rotation matrix\n   TODO: remove the dimension for 'N' (deprecated for converting all source\n         poses altogether)\n   Reference: https://github.com/pulkitag/pycaffe-utils/blob/master/rot_utils.py#L174\n  Args:\n      z: rotation angle along z axis (in radians) -- size = [B, N]\n      y: rotation angle along y axis (in radians) -- size = [B, N]\n      x: rotation angle along x axis (in radians) -- size = [B, N]\n  Returns:\n      Rotation matrix corresponding to the euler angles -- size = [B, N, 3, 3]\n  \"\"\"", "\n", "B", "=", "tf", ".", "shape", "(", "z", ")", "[", "0", "]", "\n", "N", "=", "1", "\n", "z", "=", "tf", ".", "clip_by_value", "(", "z", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "y", "=", "tf", ".", "clip_by_value", "(", "y", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "x", "=", "tf", ".", "clip_by_value", "(", "x", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "\n", "# Expand to B x N x 1 x 1", "\n", "z", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "z", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "y", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "y", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "x", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "\n", "zeros", "=", "tf", ".", "zeros", "(", "[", "B", ",", "N", ",", "1", ",", "1", "]", ")", "\n", "ones", "=", "tf", ".", "ones", "(", "[", "B", ",", "N", ",", "1", ",", "1", "]", ")", "\n", "\n", "cosz", "=", "tf", ".", "cos", "(", "z", ")", "\n", "sinz", "=", "tf", ".", "sin", "(", "z", ")", "\n", "rotz_1", "=", "tf", ".", "concat", "(", "[", "cosz", ",", "-", "sinz", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "rotz_2", "=", "tf", ".", "concat", "(", "[", "sinz", ",", "cosz", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "rotz_3", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "zeros", ",", "ones", "]", ",", "axis", "=", "3", ")", "\n", "zmat", "=", "tf", ".", "concat", "(", "[", "rotz_1", ",", "rotz_2", ",", "rotz_3", "]", ",", "axis", "=", "2", ")", "\n", "\n", "cosy", "=", "tf", ".", "cos", "(", "y", ")", "\n", "siny", "=", "tf", ".", "sin", "(", "y", ")", "\n", "roty_1", "=", "tf", ".", "concat", "(", "[", "cosy", ",", "zeros", ",", "siny", "]", ",", "axis", "=", "3", ")", "\n", "roty_2", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "roty_3", "=", "tf", ".", "concat", "(", "[", "-", "siny", ",", "zeros", ",", "cosy", "]", ",", "axis", "=", "3", ")", "\n", "ymat", "=", "tf", ".", "concat", "(", "[", "roty_1", ",", "roty_2", ",", "roty_3", "]", ",", "axis", "=", "2", ")", "\n", "\n", "cosx", "=", "tf", ".", "cos", "(", "x", ")", "\n", "sinx", "=", "tf", ".", "sin", "(", "x", ")", "\n", "rotx_1", "=", "tf", ".", "concat", "(", "[", "ones", ",", "zeros", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "rotx_2", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "cosx", ",", "-", "sinx", "]", ",", "axis", "=", "3", ")", "\n", "rotx_3", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "sinx", ",", "cosx", "]", ",", "axis", "=", "3", ")", "\n", "xmat", "=", "tf", ".", "concat", "(", "[", "rotx_1", ",", "rotx_2", ",", "rotx_3", "]", ",", "axis", "=", "2", ")", "\n", "\n", "rotMat", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "xmat", ",", "ymat", ")", ",", "zmat", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.pose_vec2mat": [[78, 95], ["vec.get_shape().as_list", "tensorflow.slice", "tensorflow.expand_dims", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "utils.euler2mat", "tensorflow.squeeze", "tensorflow.concat", "vec.get_shape"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.euler2mat"], ["", "def", "pose_vec2mat", "(", "vec", ")", ":", "\n", "  ", "\"\"\"Converts 6DoF parameters to transformation matrix\n  Args:\n      vec: 6DoF parameters in the order of tx, ty, tz, rx, ry, rz -- [B, 6]\n  Returns:\n      A transformation matrix -- [B, 3, 4]\n  \"\"\"", "\n", "batch_size", ",", "_", "=", "vec", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "translation", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "translation", "=", "tf", ".", "expand_dims", "(", "translation", ",", "-", "1", ")", "\n", "rx", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "ry", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "rz", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "5", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "rot_mat", "=", "euler2mat", "(", "rz", ",", "ry", ",", "rx", ")", "\n", "rot_mat", "=", "tf", ".", "squeeze", "(", "rot_mat", ",", "axis", "=", "[", "1", "]", ")", "\n", "transform_mat", "=", "tf", ".", "concat", "(", "[", "rot_mat", ",", "translation", "]", ",", "axis", "=", "2", ")", "\n", "return", "transform_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.pixel2cam": [[96, 128], ["tf.reshape.get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.sin", "tensorflow.cos", "tensorflow.ones", "tensorflow.concat", "tf.reshape.get_shape", "tensorflow.matrix_inverse", "tensorflow.concat", "tensorflow.matmul", "tensorflow.matrix_inverse"], "function", ["None"], ["", "def", "pixel2cam", "(", "depth", ",", "pixel_coords", ",", "intrinsics", ",", "is_homogeneous", "=", "True", ",", "is_cylin", "=", "True", ")", ":", "\n", "  ", "\"\"\"Transforms coordinates in the pixel frame to the camera frame.\n\n  Args:\n    depth: [batch, height, width]\n    pixel_coords: homogeneous pixel coordinates [batch, 3, height, width]\n    intrinsics: camera intrinsics [batch, 3, 3]\n    is_homogeneous: return in homogeneous coordinates\n  Returns:\n    Coords in the camera frame [batch, 3 (4 if homogeneous), height, width]\n  \"\"\"", "\n", "batch", ",", "height", ",", "width", "=", "depth", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "depth", "=", "tf", ".", "reshape", "(", "depth", ",", "[", "batch", ",", "1", ",", "-", "1", "]", ")", "\n", "pixel_coords", "=", "tf", ".", "reshape", "(", "pixel_coords", ",", "[", "batch", ",", "3", ",", "-", "1", "]", ")", "\n", "\n", "if", "is_cylin", ":", "\n", "# pixel_coords is [x,y,1]", "\n", "      ", "cylinder_coords", "=", "tf", ".", "matmul", "(", "tf", ".", "matrix_inverse", "(", "intrinsics", ")", ",", "pixel_coords", ")", "\n", "# cylinder_coords is [theta,Z,1]", "\n", "X", "=", "tf", ".", "sin", "(", "cylinder_coords", "[", ":", ",", "0", ":", "1", ",", ":", "]", ")", "\n", "Y", "=", "cylinder_coords", "[", ":", ",", "1", ":", "2", ",", ":", "]", "\n", "Z", "=", "tf", ".", "cos", "(", "cylinder_coords", "[", ":", ",", "0", ":", "1", ",", ":", "]", ")", "\n", "# cam_coords is [X,Y,Z] * depth", "\n", "cam_coords", "=", "tf", ".", "concat", "(", "[", "X", ",", "Y", ",", "Z", "]", ",", "axis", "=", "1", ")", "*", "depth", "\n", "", "else", ":", "\n", "      ", "cam_coords", "=", "tf", ".", "matmul", "(", "tf", ".", "matrix_inverse", "(", "intrinsics", ")", ",", "pixel_coords", ")", "*", "depth", "\n", "\n", "", "if", "is_homogeneous", ":", "\n", "    ", "ones", "=", "tf", ".", "ones", "(", "[", "batch", ",", "1", ",", "height", "*", "width", "]", ")", "\n", "cam_coords", "=", "tf", ".", "concat", "(", "[", "cam_coords", ",", "ones", "]", ",", "axis", "=", "1", ")", "\n", "", "cam_coords", "=", "tf", ".", "reshape", "(", "cam_coords", ",", "[", "batch", ",", "-", "1", ",", "height", ",", "width", "]", ")", "\n", "return", "cam_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.cam2pixel": [[129, 164], ["tf.reshape.get_shape().as_list", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.atan2", "tensorflow.ones", "tensorflow.concat", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.ones", "tensorflow.concat", "tf.reshape.get_shape", "tensorflow.sqrt"], "function", ["None"], ["", "def", "cam2pixel", "(", "cam_coords", ",", "proj", ",", "intrinsics", ",", "is_cylin", "=", "True", ")", ":", "\n", "  ", "\"\"\"Transforms coordinates in a camera frame to the pixel frame.\n\n  Args:\n    cam_coords: [batch, 4, height, width]\n    proj: [batch, 3, 4]\n    intrinsics: [batch, 3, 3]\n  Returns:\n    Pixel coordinates projected from the camera frame [batch, height, width, 2]\n  \"\"\"", "\n", "batch", ",", "_", ",", "height", ",", "width", "=", "cam_coords", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "cam_coords", "=", "tf", ".", "reshape", "(", "cam_coords", ",", "[", "batch", ",", "4", ",", "-", "1", "]", ")", "\n", "unnormalized_pixel_coords", "=", "tf", ".", "matmul", "(", "proj", ",", "cam_coords", ")", "\n", "\n", "if", "is_cylin", ":", "\n", "      ", "X", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "Y", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "Z", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "2", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "h", "=", "Y", "/", "(", "tf", ".", "sqrt", "(", "X", "*", "X", "+", "Z", "*", "Z", ")", "+", "1e-10", ")", "# scale for unit cylinder", "\n", "theta", "=", "tf", ".", "atan2", "(", "X", ",", "Z", ")", "\n", "filler", "=", "tf", ".", "ones", "(", "(", "batch", ",", "1", ",", "height", "*", "width", ")", ")", "\n", "pixel_coords", "=", "tf", ".", "concat", "(", "[", "theta", ",", "h", ",", "filler", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "x_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "y_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "z_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "2", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "x_n", "=", "x_u", "/", "(", "z_u", "+", "1e-10", ")", "\n", "y_n", "=", "y_u", "/", "(", "z_u", "+", "1e-10", ")", "\n", "filler", "=", "tf", ".", "ones", "(", "(", "batch", ",", "1", ",", "height", "*", "width", ")", ")", "\n", "pixel_coords", "=", "tf", ".", "concat", "(", "[", "x_n", ",", "y_n", ",", "filler", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "pixel_coords", "=", "tf", ".", "matmul", "(", "intrinsics", ",", "pixel_coords", ")", "\n", "pixel_coords", "=", "pixel_coords", "[", ":", ",", "0", ":", "2", ",", ":", "]", "\n", "pixel_coords", "=", "tf", ".", "reshape", "(", "pixel_coords", ",", "[", "batch", ",", "2", ",", "height", ",", "width", "]", ")", "\n", "return", "tf", ".", "transpose", "(", "pixel_coords", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.meshgrid": [[165, 190], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.tile", "tensorflow.ones", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.ones_like", "tensorflow.stack", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.linspace", "tensorflow.stack", "tensorflow.linspace", "tensorflow.stack"], "function", ["None"], ["", "def", "meshgrid", "(", "batch", ",", "height", ",", "width", ",", "is_homogeneous", "=", "True", ")", ":", "\n", "  ", "\"\"\"Construct a 2D meshgrid.\n\n  Args:\n    batch: batch size\n    height: height of the grid\n    width: width of the grid\n    is_homogeneous: whether to return in homogeneous coordinates\n  Returns:\n    x,y grid coordinates [batch, 2 (3 if homogeneous), height, width]\n  \"\"\"", "\n", "x_t", "=", "tf", ".", "matmul", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "height", ",", "1", "]", ")", ")", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "width", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", ")", "\n", "y_t", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "height", ")", ",", "1", ")", ",", "\n", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "1", ",", "width", "]", ")", ")", ")", "\n", "x_t", "=", "(", "x_t", "+", "1.0", ")", "*", "0.5", "*", "tf", ".", "cast", "(", "width", "-", "1", ",", "tf", ".", "float32", ")", "\n", "y_t", "=", "(", "y_t", "+", "1.0", ")", "*", "0.5", "*", "tf", ".", "cast", "(", "height", "-", "1", ",", "tf", ".", "float32", ")", "\n", "if", "is_homogeneous", ":", "\n", "    ", "ones", "=", "tf", ".", "ones_like", "(", "x_t", ")", "\n", "coords", "=", "tf", ".", "stack", "(", "[", "x_t", ",", "y_t", ",", "ones", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "    ", "coords", "=", "tf", ".", "stack", "(", "[", "x_t", ",", "y_t", "]", ",", "axis", "=", "0", ")", "\n", "", "coords", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "coords", ",", "0", ")", ",", "[", "batch", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.projective_inverse_warp": [[191, 214], ["img.get_shape().as_list", "utils.pose_vec2mat", "utils.meshgrid", "utils.pixel2cam", "utils.cam2pixel", "utils.bilinear_sampler", "img.get_shape"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.pose_vec2mat", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.meshgrid", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.pixel2cam", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.cam2pixel", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.bilinear_sampler"], ["", "def", "projective_inverse_warp", "(", "img", ",", "depth", ",", "pose", ",", "intrinsics", ",", "do_wrap", "=", "True", ",", "is_cylin", "=", "True", ",", "mask", "=", "None", ")", ":", "\n", "  ", "\"\"\"Inverse warp a source image to the target image plane based on projection.\n\n  Args:\n    img: the source image [batch, height_s, width_s, 3]\n    depth: depth map of the target image [batch, height_t, width_t]\n    pose: target to source camera transformation matrix [batch, 6], in the\n          order of tx, ty, tz, rx, ry, rz\n    intrinsics: camera intrinsics [batch, 3, 3]\n    mask: image mask indicating points to ignore\n  Returns:\n    Source image inverse warped to the target image plane [batch, height_t,\n    width_t, 3]\n  \"\"\"", "\n", "batch", ",", "height", ",", "width", ",", "_", "=", "img", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "pose", "=", "pose_vec2mat", "(", "pose", ")", "\n", "# Construct pixel grid coordinates", "\n", "pixel_coords", "=", "meshgrid", "(", "batch", ",", "height", ",", "width", ")", "\n", "# Convert pixel coordinates to the camera frame", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ",", "pixel_coords", ",", "intrinsics", ",", "is_cylin", "=", "is_cylin", ")", "\n", "src_pixel_coords", "=", "cam2pixel", "(", "cam_coords", ",", "pose", ",", "intrinsics", ",", "is_cylin", "=", "is_cylin", ")", "\n", "output_img", "=", "bilinear_sampler", "(", "img", ",", "src_pixel_coords", ",", "do_wrap", ",", "mask", ")", "\n", "return", "output_img", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.bilinear_sampler": [[215, 338], ["tensorflow.transpose", "tensorflow.cast", "tensorflow.matmul", "tensorflow.reshape", "numpy.float32", "tensorflow.where", "tensorflow.where", "tensorflow.name_scope", "tensorflow.split", "imgs.get_shape", "coords.get_shape", "coords.get_shape().as_list", "tensorflow.cast", "tensorflow.cast", "tensorflow.floor", "tensorflow.floor", "tensorflow.cast", "tensorflow.cast", "numpy.float32", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.add_n", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.less", "tensorflow.greater", "imgs.get_shape().as_list", "tensorflow.cast", "utils.bilinear_sampler._wrap_coords"], "function", ["None"], ["", "def", "bilinear_sampler", "(", "imgs", ",", "coords", ",", "do_wrap", "=", "True", ",", "mask", "=", "None", ")", ":", "\n", "  ", "\"\"\"Construct a new image by bilinear sampling from the input image.\n\n  Points falling outside the source image boundary have value 0.\n\n  Args:\n    imgs: source image to be sampled from [batch, height_s, width_s, channels]\n    coords: coordinates of source pixels to sample from [batch, height_t,\n      width_t, 2]. height_t/width_t correspond to the dimensions of the output\n      image (don't need to be the same as height_s/width_s). The two channels\n      correspond to x and y coordinates respectively.\n    mask: image mask indicating points to ignore\n  Returns:\n    A new sampled image [batch, height_t, width_t, channels]\n  \"\"\"", "\n", "# Returns x as a one-dimensional vector with each element", "\n", "# repeated n_repeats times.", "\n", "def", "_repeat", "(", "x", ",", "n_repeats", ")", ":", "\n", "    ", "rep", "=", "tf", ".", "transpose", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "\n", "n_repeats", ",", "\n", "]", ")", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "rep", "=", "tf", ".", "cast", "(", "rep", ",", "'float32'", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "1", ")", ")", ",", "rep", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n", "# Returns a \"wrapped\" version of the given coordinate.", "\n", "#", "\n", "# If the coord is out of bounds, it will be wrapped backwards or", "\n", "# forwards to the correct location.", "\n", "", "def", "_wrap_coords", "(", "dim", ",", "width", ",", "dim_max", ",", "dim_min", "=", "np", ".", "float32", "(", "0", ")", ")", ":", "\n", "# wrap forward (< min)", "\n", "      ", "dim_safe", "=", "tf", ".", "where", "(", "tf", ".", "less", "(", "dim", ",", "zero", ")", ",", "\n", "dim", "+", "width", ",", "\n", "dim", ")", "\n", "# wrap backwards (> max)", "\n", "dim_safe", "=", "tf", ".", "where", "(", "tf", ".", "greater", "(", "dim", ",", "dim_max", ")", ",", "\n", "dim", "-", "width", ",", "\n", "dim", ")", "\n", "return", "dim_safe", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'image_sampling'", ")", ":", "\n", "    ", "coords_x", ",", "coords_y", "=", "tf", ".", "split", "(", "coords", ",", "[", "1", ",", "1", "]", ",", "axis", "=", "3", ")", "\n", "inp_size", "=", "imgs", ".", "get_shape", "(", ")", "\n", "coord_size", "=", "coords", ".", "get_shape", "(", ")", "\n", "out_size", "=", "coords", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "out_size", "[", "3", "]", "=", "imgs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "\n", "coords_x", "=", "tf", ".", "cast", "(", "coords_x", ",", "'float32'", ")", "\n", "coords_y", "=", "tf", ".", "cast", "(", "coords_y", ",", "'float32'", ")", "\n", "\n", "x0", "=", "tf", ".", "floor", "(", "coords_x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "floor", "(", "coords_y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "y_max", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "imgs", ")", "[", "1", "]", "-", "1", ",", "'float32'", ")", "\n", "x_max", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "imgs", ")", "[", "2", "]", "-", "1", ",", "'float32'", ")", "\n", "zero", "=", "np", ".", "float32", "(", "0", ")", "\n", "\n", "## bilinear interp weights, with points outside the grid having weight 0", "\n", "\n", "if", "do_wrap", ":", "\n", "# wrap around in x-direction", "\n", "        ", "width", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "imgs", ")", "[", "2", "]", ",", "'float32'", ")", "\n", "x0_safe", "=", "_wrap_coords", "(", "x0", ",", "width", ",", "dim_max", "=", "x_max", ")", "\n", "x1_safe", "=", "_wrap_coords", "(", "x1", ",", "width", ",", "dim_max", "=", "x_max", ")", "\n", "\n", "wt_x0", "=", "x1", "-", "coords_x", "\n", "wt_x1", "=", "coords_x", "-", "x0", "\n", "", "else", ":", "\n", "        ", "x0_safe", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "zero", ",", "x_max", ")", "\n", "x1_safe", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "zero", ",", "x_max", ")", "\n", "\n", "wt_x0", "=", "x1_safe", "-", "coords_x", "\n", "wt_x1", "=", "coords_x", "-", "x0_safe", "\n", "\n", "# clip in y-direction (range: 0 - y_max)", "\n", "", "y0_safe", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "zero", ",", "y_max", ")", "\n", "y1_safe", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "zero", ",", "y_max", ")", "\n", "\n", "wt_y0", "=", "y1_safe", "-", "coords_y", "\n", "wt_y1", "=", "coords_y", "-", "y0_safe", "\n", "\n", "## indices in the flat image to sample from", "\n", "dim2", "=", "tf", ".", "cast", "(", "inp_size", "[", "2", "]", ",", "'float32'", ")", "\n", "dim1", "=", "tf", ".", "cast", "(", "inp_size", "[", "2", "]", "*", "inp_size", "[", "1", "]", ",", "'float32'", ")", "\n", "base", "=", "tf", ".", "reshape", "(", "\n", "_repeat", "(", "\n", "tf", ".", "cast", "(", "tf", ".", "range", "(", "coord_size", "[", "0", "]", ")", ",", "'float32'", ")", "*", "dim1", ",", "\n", "coord_size", "[", "1", "]", "*", "coord_size", "[", "2", "]", ")", ",", "\n", "[", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", ",", "out_size", "[", "2", "]", ",", "1", "]", ")", "\n", "\n", "base_y0", "=", "base", "+", "y0_safe", "*", "dim2", "\n", "base_y1", "=", "base", "+", "y1_safe", "*", "dim2", "\n", "idx00", "=", "tf", ".", "reshape", "(", "x0_safe", "+", "base_y0", ",", "[", "-", "1", "]", ")", "\n", "idx01", "=", "x0_safe", "+", "base_y1", "\n", "idx10", "=", "x1_safe", "+", "base_y0", "\n", "idx11", "=", "x1_safe", "+", "base_y1", "\n", "\n", "## ignore pixels under the mask (weight = 0)", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "imgs", "=", "imgs", "*", "mask", "\n", "\n", "## sample from imgs", "\n", "", "imgs_flat", "=", "tf", ".", "reshape", "(", "imgs", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "inp_size", "[", "3", "]", "]", ")", ")", "\n", "imgs_flat", "=", "tf", ".", "cast", "(", "imgs_flat", ",", "'float32'", ")", "\n", "im00", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx00", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "im01", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx01", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "im10", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx10", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "im11", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx11", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "\n", "w00", "=", "wt_x0", "*", "wt_y0", "\n", "w01", "=", "wt_x0", "*", "wt_y1", "\n", "w10", "=", "wt_x1", "*", "wt_y0", "\n", "w11", "=", "wt_x1", "*", "wt_y1", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "\n", "w00", "*", "im00", ",", "w01", "*", "im01", ",", "\n", "w10", "*", "im10", ",", "w11", "*", "im11", "\n", "]", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.normalize_by_mean": [[339, 347], ["tensorflow.divide", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "def", "normalize_by_mean", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Normalizes a tensor by dividing each element by the tensor mean.\n\n    This will help correct scale-invariant error as described in Wang et al.\n    (2017).\n    \"\"\"", "\n", "return", "tf", ".", "divide", "(", "tensor", ",", "tf", ".", "reduce_mean", "(", "tensor", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.unwarp.unwarp_panos.unwarp_panos": [[15, 64], ["numpy.load", "lut[].astype", "lut[].astype", "scipy.misc.imread", "tensorflow.placeholder", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "utils.bilinear_sampler", "tensorflow.ConfigProto", "tensorflow.Session", "tqdm.trange", "len", "os.path.split", "os.path.join", "scipy.misc.imread", "sess.run", "numpy.squeeze", "res.astype.astype", "scipy.misc.imsave", "print"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.None.utils.bilinear_sampler"], ["def", "unwarp_panos", "(", "infiles", ",", "outdir", ",", "lutfile", "=", "'data/lut.npy'", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Unwarps the given files from spherical to cylindrical projection.\n    \"\"\"", "\n", "lut", "=", "np", ".", "load", "(", "lutfile", ")", "\n", "lutx", "=", "lut", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "'float32'", ")", "\n", "luty", "=", "lut", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# get configuration", "\n", "\n", "im", "=", "imread", "(", "infiles", "[", "0", "]", ")", "\n", "\n", "im_ph", "=", "tf", ".", "placeholder", "(", "'uint8'", ",", "im", ".", "shape", ")", "\n", "imgs", "=", "tf", ".", "cast", "(", "im_ph", ",", "'float32'", ")", "\n", "imgs", "=", "tf", ".", "expand_dims", "(", "imgs", ",", "axis", "=", "0", ")", "\n", "\n", "lutx_ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "lutx", ".", "shape", ")", "\n", "luty_ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "luty", ".", "shape", ")", "\n", "\n", "lutx_re", "=", "tf", ".", "expand_dims", "(", "lutx_ph", ",", "axis", "=", "0", ")", "\n", "lutx_re", "=", "tf", ".", "expand_dims", "(", "lutx_re", ",", "axis", "=", "-", "1", ")", "\n", "luty_re", "=", "tf", ".", "expand_dims", "(", "luty_ph", ",", "axis", "=", "0", ")", "\n", "luty_re", "=", "tf", ".", "expand_dims", "(", "luty_re", ",", "axis", "=", "-", "1", ")", "\n", "\n", "coords", "=", "tf", ".", "concat", "(", "[", "lutx_re", ",", "luty_re", "]", ",", "axis", "=", "-", "1", ")", "\n", "pano", "=", "bilinear_sampler", "(", "imgs", ",", "coords", ")", "\n", "\n", "# unwarp all files", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "for", "i", "in", "trange", "(", "len", "(", "infiles", ")", ",", "desc", "=", "'Unwarping panorama'", ")", ":", "\n", "            ", "infile", "=", "infiles", "[", "i", "]", "\n", "\n", "# set the outfile", "\n", "_", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "infile", ")", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "filename", ")", "\n", "\n", "# run the unwarp", "\n", "im", "=", "imread", "(", "infile", ")", "\n", "res", "=", "sess", ".", "run", "(", "pano", ",", "{", "im_ph", ":", "im", ",", "lutx_ph", ":", "lutx", ",", "luty_ph", ":", "luty", "}", ")", "\n", "res", "=", "np", ".", "squeeze", "(", "res", ",", "axis", "=", "0", ")", "\n", "res", "=", "res", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "# save", "\n", "imsave", "(", "outfile", ",", "res", ")", "\n", "if", "debug", ":", "\n", "                ", "print", "(", "'Saved {}.'", ".", "format", "(", "outfile", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.tf_cylindrical.layers.convolution2d": [[17, 49], ["isinstance", "print", "tensorflow.conv2d", "inputs.get_shape", "tf_cylindrical.pad.wrap_pad", "tensorflow.conv2d"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.tf_cylindrical.pad.wrap_pad"], ["def", "convolution2d", "(", "inputs", ",", "num_outputs", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "'CYLIN'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# kernel size 1D -> 2D", "\n", "    ", "if", "isinstance", "(", "kernel_size", ",", "int", ")", ":", "\n", "        ", "kernel_size", "=", "[", "kernel_size", ",", "kernel_size", "]", "\n", "\n", "# maintain original behavior", "\n", "", "print", "(", "padding", ")", "\n", "if", "padding", "==", "'SAME'", "or", "padding", "==", "'VALID'", ":", "\n", "        ", "return", "slim", ".", "conv2d", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", "\n", "\n", "# W=(W\u2212F+2P)/S+1", "\n", "", "elif", "padding", "==", "'CYLIN'", ":", "\n", "        ", "size", "=", "inputs", ".", "get_shape", "(", ")", "\n", "height", "=", "size", "[", "1", "]", "\n", "width", "=", "size", "[", "2", "]", "\n", "wrap_padding", "=", "[", "k", "-", "1", "for", "k", "in", "kernel_size", "]", "\n", "wrapped_inputs", "=", "wrap_pad", "(", "inputs", ",", "wrap_padding", ")", "\n", "\n", "return", "slim", ".", "conv2d", "(", "wrapped_inputs", ",", "\n", "num_outputs", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "'VALID'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", "\n", "", "raise", "(", "'Not a valid padding: {}'", ".", "format", "(", "padding", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.tf_cylindrical.pad.wrap_pad": [[15, 40], ["tensorflow.pad", "ValueError", "isinstance", "isinstance", "isinstance", "math.floor", "math.ceil", "pad.wrap"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.tf_cylindrical.pad.wrap"], ["def", "wrap_pad", "(", "tensor", ",", "wrap_padding", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ":", "\n", "    ", "\"\"\"Apply cylindrical wrapping to one axis and zero padding to another.\n\n    By default, this wraps horizontally and pads vertically. The axes can be\n    set with the `axis` keyword, and the wrapping/padding amount can be set\n    with the `wrap_pad` keyword.\n    \"\"\"", "\n", "rank", "=", "tensor", ".", "shape", ".", "ndims", "\n", "if", "axis", "[", "0", "]", ">=", "rank", "or", "axis", "[", "1", "]", ">=", "rank", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Invalid axis for rank-{} tensor (axis={})\"", ".", "format", "(", "rank", ",", "axis", ")", "\n", ")", "\n", "\n", "# handle single-number wrap/pad input", "\n", "", "if", "isinstance", "(", "wrap_padding", ",", "list", ")", "or", "isinstance", "(", "wrap_padding", ",", "tuple", ")", ":", "\n", "        ", "wrapping", "=", "wrap_padding", "[", "1", "]", "\n", "padding", "=", "wrap_padding", "[", "0", "]", "\n", "", "elif", "isinstance", "(", "wrap_padding", ",", "int", ")", ":", "\n", "        ", "wrapping", "=", "padding", "=", "wrap_padding", "\n", "\n", "# set padding dimensions", "\n", "", "paddings", "=", "[", "[", "0", ",", "0", "]", "]", "*", "rank", "\n", "paddings", "[", "axis", "[", "0", "]", "]", "=", "[", "floor", "(", "padding", "/", "2", ")", ",", "ceil", "(", "padding", "/", "2", ")", "]", "\n", "\n", "return", "tf", ".", "pad", "(", "wrap", "(", "tensor", ",", "wrapping", ",", "axis", "=", "axis", "[", "1", "]", ")", ",", "paddings", ",", "'CONSTANT'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.tf_cylindrical.pad.wrap": [[42, 65], ["math.ceil", "tensorflow.slice", "math.floor", "tensorflow.slice", "tensorflow.concat", "ValueError", "math.floor", "tensor.shape.as_list"], "function", ["None"], ["", "def", "wrap", "(", "tensor", ",", "wrapping", ",", "axis", "=", "2", ")", ":", "\n", "    ", "\"\"\"Wrap cylindrically, appending evenly to both sides.\n\n    For odd wrapping amounts, the extra column is appended to the [-1] side.\n    \"\"\"", "\n", "rank", "=", "tensor", ".", "shape", ".", "ndims", "\n", "if", "axis", ">=", "rank", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Invalid axis for rank-{} tensor (axis={})\"", ".", "format", "(", "rank", ",", "axis", ")", "\n", ")", "\n", "\n", "", "sizes", "=", "[", "-", "1", "]", "*", "rank", "\n", "\n", "sizes", "[", "axis", "]", "=", "ceil", "(", "wrapping", "/", "2", ")", "\n", "rstarts", "=", "[", "0", "]", "*", "rank", "\n", "rpad", "=", "tf", ".", "slice", "(", "tensor", ",", "rstarts", ",", "sizes", ")", "\n", "\n", "sizes", "[", "axis", "]", "=", "floor", "(", "wrapping", "/", "2", ")", "\n", "lstarts", "=", "[", "0", "]", "*", "rank", "\n", "lstarts", "[", "axis", "]", "=", "tensor", ".", "shape", ".", "as_list", "(", ")", "[", "axis", "]", "-", "floor", "(", "wrapping", "/", "2", ")", "\n", "lpad", "=", "tf", ".", "slice", "(", "tensor", ",", "lstarts", ",", "sizes", ")", "\n", "\n", "return", "tf", ".", "concat", "(", "[", "lpad", ",", "tensor", ",", "rpad", "]", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.tf_cylindrical.pad.unwrap": [[66, 84], ["math.floor", "tensorflow.slice", "ValueError", "tensor.shape.as_list"], "function", ["None"], ["", "def", "unwrap", "(", "tensor", ",", "wrapping", ",", "axis", "=", "2", ")", ":", "\n", "    ", "\"\"\"Removes wrapping from an image.\n\n    For odd wrapping amounts, this assumes an extra column on the [-1] side.\n    \"\"\"", "\n", "rank", "=", "tensor", ".", "shape", ".", "ndims", "\n", "if", "axis", ">=", "rank", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Invalid axis for rank-{} tensor (axis={})\"", ".", "format", "(", "rank", ",", "axis", ")", "\n", ")", "\n", "\n", "", "sizes", "=", "[", "-", "1", "]", "*", "rank", "\n", "sizes", "[", "axis", "]", "=", "tensor", ".", "shape", ".", "as_list", "(", ")", "[", "axis", "]", "-", "wrapping", "\n", "\n", "starts", "=", "[", "0", "]", "*", "rank", "\n", "starts", "[", "axis", "]", "=", "floor", "(", "wrapping", "/", "2", ")", "\n", "\n", "return", "tf", ".", "slice", "(", "tensor", ",", "starts", ",", "sizes", ")", "\n", "#return tensor[:,:,1:-1,:]", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.data.prepare_train_data.concat_image_seq": [[32, 39], ["enumerate", "numpy.hstack", "numpy.np.uint8"], "function", ["None"], ["def", "concat_image_seq", "(", "seq", ")", ":", "\n", "    ", "for", "i", ",", "im", "in", "enumerate", "(", "seq", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "res", "=", "im", "\n", "", "else", ":", "\n", "            ", "res", "=", "np", ".", "hstack", "(", "(", "res", ",", "im", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.data.prepare_train_data.dump_example": [[40, 72], ["prepare_train_data.concat_image_seq", "os.path.join", "cv2.imwrite", "print", "data_loader.get_train_example_with_idx", "os.makedirs", "concat_image_seq.astype", "open", "f.write", "print", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.data.prepare_train_data.concat_image_seq", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.get_train_example_with_idx"], ["", "def", "dump_example", "(", "n", ",", "dump_root", ")", ":", "\n", "    ", "\"\"\"Dumps nth example (+intrinsics) to formatted files.\"\"\"", "\n", "if", "n", "%", "200", "==", "0", ":", "\n", "        ", "print", "(", "'Progress %d/%d....'", "%", "(", "n", ",", "data_loader", ".", "num_train", ")", ")", "\n", "\n", "", "try", ":", "\n", "        ", "example", "=", "data_loader", ".", "get_train_example_with_idx", "(", "n", ")", "\n", "if", "example", "==", "False", ":", "\n", "            ", "return", "\n", "", "", "except", ":", "\n", "        ", "print", "(", "'bad image'", ")", "\n", "return", "\n", "\n", "", "image_seq", "=", "concat_image_seq", "(", "example", "[", "'image_seq'", "]", ")", "\n", "intrinsics", "=", "example", "[", "'intrinsics'", "]", "\n", "f_theta", "=", "intrinsics", "[", "0", "]", "\n", "c_theta", "=", "intrinsics", "[", "1", "]", "\n", "f_Z", "=", "intrinsics", "[", "2", "]", "\n", "c_Z", "=", "intrinsics", "[", "3", "]", "\n", "\n", "dump_dir", "=", "os", ".", "path", ".", "join", "(", "dump_root", ",", "example", "[", "'folder_name'", "]", ")", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dump_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dump_dir", ")", ":", "\n", "            ", "raise", "\n", "\n", "", "", "dump_img_file", "=", "dump_dir", "+", "'/%s.jpg'", "%", "example", "[", "'file_name'", "]", "\n", "cv2", ".", "imwrite", "(", "dump_img_file", ",", "image_seq", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "dump_cam_file", "=", "dump_dir", "+", "'/%s_cam.txt'", "%", "example", "[", "'file_name'", "]", "\n", "with", "open", "(", "dump_cam_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'%f,0.,%f,0.,%f,%f,0.,0.,1.'", "%", "(", "f_theta", ",", "c_theta", ",", "f_Z", ",", "c_Z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.data.prepare_train_data.main": [[75, 107], ["numpy.random.seed", "os.listdir", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "headcam_loader", "joblib.Parallel", "open", "open", "joblib.delayed", "range", "glob.glob", "sorted", "os.path.isdir", "os.path.join", "os.path.basename().split", "numpy.random.random", "vf.write", "tf.write", "os.path.basename"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "dump_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "dump_root", ")", "\n", "\n", "", "global", "data_loader", "\n", "if", "args", ".", "dataset_name", "==", "'headcam'", ":", "\n", "        ", "from", "headcam", ".", "headcam_loader", "import", "headcam_loader", "\n", "data_loader", "=", "headcam_loader", "(", "args", ".", "dataset_dir", ",", "\n", "img_height", "=", "args", ".", "img_height", ",", "\n", "img_width", "=", "args", ".", "img_width", ",", "\n", "seq_length", "=", "args", ".", "seq_length", ")", "\n", "\n", "", "Parallel", "(", "n_jobs", "=", "args", ".", "num_threads", ")", "(", "delayed", "(", "dump_example", ")", "(", "n", ",", "args", ".", "dump_root", ")", "for", "n", "in", "range", "(", "data_loader", ".", "num_train", ")", ")", "\n", "\n", "# Split into train/val", "\n", "np", ".", "random", ".", "seed", "(", "8964", ")", "\n", "subfolders", "=", "os", ".", "listdir", "(", "args", ".", "dump_root", ")", "\n", "trainfile", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dump_root", ",", "'train.txt'", ")", "\n", "valfile", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dump_root", ",", "'val.txt'", ")", "\n", "with", "open", "(", "trainfile", ",", "'w'", ")", "as", "tf", ":", "\n", "        ", "with", "open", "(", "valfile", ",", "'w'", ")", "as", "vf", ":", "\n", "            ", "for", "s", "in", "subfolders", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "dump_root", "+", "'/%s'", "%", "s", ")", ":", "\n", "                    ", "continue", "\n", "", "imfiles", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dump_root", ",", "s", ",", "'*.jpg'", ")", ")", "\n", "frame_ids", "=", "[", "os", ".", "path", ".", "basename", "(", "fi", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "fi", "in", "imfiles", "]", "\n", "for", "frame", "in", "sorted", "(", "frame_ids", ")", ":", "\n", "                    ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "args", ".", "val_frac", ":", "\n", "                        ", "vf", ".", "write", "(", "'%s %s\\n'", "%", "(", "s", ",", "frame", ")", ")", "\n", "", "else", ":", "\n", "                        ", "tf", ".", "write", "(", "'%s %s\\n'", "%", "(", "s", ",", "frame", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.__init__": [[10, 29], ["os.path.dirname", "headcam_loader.headcam_loader.collect_excluded_frames", "headcam_loader.headcam_loader.collect_train_frames", "os.path.realpath"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.collect_excluded_frames", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.collect_train_frames"], ["def", "__init__", "(", "self", ",", "\n", "dataset_dir", ",", "\n", "img_height", "=", "128", ",", "\n", "img_width", "=", "512", ",", "\n", "seq_length", "=", "3", ")", ":", "\n", "        ", "\"\"\"Initialize a new headcam data loader.\"\"\"", "\n", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "excluded_frames_file", "=", "'data/headcam/excluded_frames_5fps.txt'", "\n", "self", ".", "dataset_dir", "=", "dataset_dir", "\n", "self", ".", "img_height", "=", "img_height", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "seq_length", "=", "seq_length", "\n", "self", ".", "date_list", "=", "[", "\n", "'2018-10-02'", ",", "\n", "#'2018-10-03',", "\n", "'2018-10-07'", ",", "\n", "]", "\n", "self", ".", "collect_excluded_frames", "(", "excluded_frames_file", ")", "\n", "self", ".", "collect_train_frames", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.collect_excluded_frames": [[30, 40], ["open", "f.readlines", "fr.split", "headcam_loader.headcam_loader.excluded_frames.append", "numpy.int"], "methods", ["None"], ["", "def", "collect_excluded_frames", "(", "self", ",", "excluded_frames_file", ")", ":", "\n", "        ", "with", "open", "(", "excluded_frames_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "frames", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "excluded_frames", "=", "[", "]", "\n", "for", "fr", "in", "frames", ":", "\n", "            ", "if", "fr", "==", "'\\n'", ":", "\n", "                ", "continue", "\n", "", "subset", ",", "frame_id", "=", "fr", ".", "split", "(", "' '", ")", "\n", "curr_fid", "=", "'%.5d'", "%", "(", "np", ".", "int", "(", "frame_id", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "excluded_frames", ".", "append", "(", "subset", "+", "' '", "+", "curr_fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.collect_train_frames": [[41, 61], ["len", "os.path.join", "os.path.isdir", "len", "range", "all_frames.remove", "print", "glob.glob.glob", "all_frames.append"], "methods", ["None"], ["", "", "def", "collect_train_frames", "(", "self", ")", ":", "\n", "        ", "\"\"\"Collect all training frame files in a list.\"\"\"", "\n", "all_frames", "=", "[", "]", "\n", "for", "date", "in", "self", ".", "date_list", ":", "\n", "            ", "date_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "date", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "date_dir", ")", ":", "\n", "                ", "N", "=", "len", "(", "glob", "(", "date_dir", "+", "'/*.png'", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "                    ", "frame_id", "=", "'%.05d'", "%", "n", "\n", "all_frames", ".", "append", "(", "'{} {}'", ".", "format", "(", "date_dir", ",", "frame_id", ")", ")", "\n", "\n", "", "", "", "for", "excluded", "in", "self", ".", "excluded_frames", ":", "\n", "            ", "try", ":", "\n", "                ", "all_frames", ".", "remove", "(", "excluded", ")", "\n", "print", "(", "'removed excluded frame from training: %s'", "%", "excluded", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "self", ".", "train_frames", "=", "all_frames", "\n", "self", ".", "num_train", "=", "len", "(", "self", ".", "train_frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.is_valid_sample": [[62, 84], ["len", "frames[].split", "int", "frames[].split", "frames[].split"], "methods", ["None"], ["", "def", "is_valid_sample", "(", "self", ",", "frames", ",", "tgt_idx", ")", ":", "\n", "        ", "\"\"\"Checks if a frame can create a valid sample.\n\n        This depends on the sequence length. For example, for a sequence\n        length of 5, a frame with index `n` is valid if the sequence\n        [n-2, n-1, n, n+1, n+2] exists.\n        \"\"\"", "\n", "N", "=", "len", "(", "frames", ")", "\n", "\n", "# drive location, picture id", "\n", "tgt_drive", ",", "_", "=", "frames", "[", "tgt_idx", "]", ".", "split", "(", "' '", ")", "\n", "\n", "half_offset", "=", "int", "(", "(", "self", ".", "seq_length", "-", "1", ")", "/", "2", ")", "\n", "min_src_idx", "=", "tgt_idx", "-", "half_offset", "\n", "max_src_idx", "=", "tgt_idx", "+", "half_offset", "\n", "if", "min_src_idx", "<", "0", "or", "max_src_idx", ">=", "N", ":", "\n", "            ", "return", "False", "\n", "\n", "", "min_src_drive", ",", "_", "=", "frames", "[", "min_src_idx", "]", ".", "split", "(", "' '", ")", "\n", "max_src_drive", ",", "_", "=", "frames", "[", "max_src_idx", "]", ".", "split", "(", "' '", ")", "\n", "\n", "return", "tgt_drive", "==", "min_src_drive", "and", "tgt_drive", "==", "max_src_drive", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.get_train_example_with_idx": [[85, 95], ["headcam_loader.headcam_loader.load_example", "headcam_loader.headcam_loader.is_valid_sample"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_example", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.is_valid_sample"], ["", "def", "get_train_example_with_idx", "(", "self", ",", "tgt_idx", ")", ":", "\n", "        ", "\"\"\"Loads the training example.\n\n        If the target is an invalid sample, returns False.\n        \"\"\"", "\n", "if", "not", "self", ".", "is_valid_sample", "(", "self", ".", "train_frames", ",", "tgt_idx", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "example", "=", "self", ".", "load_example", "(", "self", ".", "train_frames", ",", "tgt_idx", ")", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_image_sequence": [[96, 112], ["int", "range", "frames[].split", "headcam_loader.headcam_loader.load_image_raw", "cv2.resize", "image_seq.append"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_image_raw"], ["", "def", "load_image_sequence", "(", "self", ",", "frames", ",", "tgt_idx", ",", "seq_length", ")", ":", "\n", "        ", "\"\"\"Loads the frames of an image sequence.\"\"\"", "\n", "half_offset", "=", "int", "(", "(", "seq_length", "-", "1", ")", "/", "2", ")", "\n", "image_seq", "=", "[", "]", "\n", "for", "o", "in", "range", "(", "-", "half_offset", ",", "half_offset", "+", "1", ")", ":", "\n", "            ", "curr_idx", "=", "tgt_idx", "+", "o", "\n", "curr_drive", ",", "curr_frame_id", "=", "frames", "[", "curr_idx", "]", ".", "split", "(", "' '", ")", "\n", "curr_img", "=", "self", ".", "load_image_raw", "(", "curr_drive", ",", "curr_frame_id", ")", "\n", "# resize images", "\n", "if", "o", "==", "0", ":", "\n", "                ", "zoom_y", "=", "self", ".", "img_height", "/", "curr_img", ".", "shape", "[", "0", "]", "\n", "zoom_x", "=", "self", ".", "img_width", "/", "curr_img", ".", "shape", "[", "1", "]", "\n", "", "curr_img", "=", "cv2", ".", "resize", "(", "curr_img", ",", "\n", "(", "self", ".", "img_width", ",", "self", ".", "img_height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "image_seq", ".", "append", "(", "curr_img", ")", "\n", "", "return", "image_seq", ",", "zoom_x", ",", "zoom_y", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_example": [[113, 133], ["headcam_loader.headcam_loader.load_image_sequence", "frames[].split", "headcam_loader.headcam_loader.load_intrinsics_raw", "headcam_loader.headcam_loader.scale_intrinsics", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_image_sequence", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_intrinsics_raw", "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.scale_intrinsics"], ["", "def", "load_example", "(", "self", ",", "frames", ",", "tgt_idx", ")", ":", "\n", "        ", "\"\"\"Loads the frames of an image sequence.\"\"\"", "\n", "image_seq", ",", "zoom_x", ",", "zoom_y", "=", "self", ".", "load_image_sequence", "(", "frames", ",", "\n", "tgt_idx", ",", "\n", "self", ".", "seq_length", ")", "\n", "tgt_drive", ",", "tgt_frame_id", "=", "frames", "[", "tgt_idx", "]", ".", "split", "(", "' '", ")", "\n", "intrinsics", "=", "self", ".", "load_intrinsics_raw", "(", ")", "\n", "intrinsics", "=", "self", ".", "scale_intrinsics", "(", "intrinsics", ",", "zoom_x", ",", "zoom_y", ")", "\n", "\n", "# strip trailing slash (for basename)", "\n", "if", "tgt_drive", "[", "-", "1", "]", "==", "'/'", ":", "\n", "            ", "tgt_drive", "=", "tgt_drive", "[", ":", "-", "1", "]", "\n", "\n", "# build example", "\n", "", "example", "=", "{", "}", "\n", "example", "[", "'intrinsics'", "]", "=", "intrinsics", "\n", "example", "[", "'image_seq'", "]", "=", "image_seq", "\n", "example", "[", "'folder_name'", "]", "=", "os", ".", "path", ".", "basename", "(", "tgt_drive", ")", "\n", "example", "[", "'file_name'", "]", "=", "tgt_frame_id", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_image_raw": [[134, 143], ["os.path.join", "cv2.imread"], "methods", ["None"], ["", "def", "load_image_raw", "(", "self", ",", "drive", ",", "frame_id", ")", ":", "\n", "        ", "\"\"\"Returns a raw image given a drive and frame id.\"\"\"", "\n", "date", "=", "drive", "[", "-", "10", ":", "]", "\n", "img_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "\n", "date", ",", "\n", "drive", ",", "\n", "frame_id", "+", "'.png'", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_file", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.load_intrinsics_raw": [[144, 158], ["open", "f.readline().rstrip", "f.readline().rstrip.split", "numpy.array", "f.close", "f.readline", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "load_intrinsics_raw", "(", "self", ",", "intrinsics_path", "=", "'./data/headcam/intrinsics.txt'", ")", ":", "\n", "        ", "\"\"\"Loads and returns unscaled headcam intrinsics.\"\"\"", "\n", "with", "open", "(", "intrinsics_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "line", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "\n", "# load theta and Z intrinsics", "\n", "f_theta", ",", "c_theta", ",", "f_Z", ",", "c_Z", "=", "line", ".", "split", "(", "' '", ")", "\n", "\n", "intrinsics", "=", "np", ".", "array", "(", "[", "float", "(", "f_theta", ")", ",", "\n", "float", "(", "c_theta", ")", ",", "\n", "float", "(", "f_Z", ")", ",", "\n", "float", "(", "c_Z", ")", "]", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "return", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanventura_cylindricalsfmlearner.headcam.headcam_loader.headcam_loader.scale_intrinsics": [[159, 167], ["numpy.copy"], "methods", ["None"], ["", "def", "scale_intrinsics", "(", "self", ",", "mat", ",", "s_theta", ",", "s_Z", ")", ":", "\n", "        ", "\"\"\"Scale intrinsics for the given image scaling.\"\"\"", "\n", "out", "=", "np", ".", "copy", "(", "mat", ")", "\n", "out", "[", "0", "]", "*=", "s_theta", "# f_theta", "\n", "out", "[", "1", "]", "*=", "s_theta", "# c_theta", "\n", "out", "[", "2", "]", "*=", "s_Z", "# f_Z", "\n", "out", "[", "3", "]", "*=", "s_Z", "# c_Z", "\n", "return", "out", "\n", "", "", ""]]}