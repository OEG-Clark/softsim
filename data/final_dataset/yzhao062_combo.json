{"home.repos.pwc.inspect_result.yzhao062_combo.None.setup.readme": [[16, 19], ["io.open", "f.read", "os.path.join"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "path", ".", "join", "(", "this_directory", ",", "'README.rst'", ")", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.check_detector": [[27, 40], ["AttributeError", "hasattr", "hasattr"], "function", ["None"], ["def", "check_detector", "(", "detector", ")", ":", "\n", "    ", "\"\"\"Checks if fit and decision_function methods exist for given detector\n\n    Parameters\n    ----------\n    detector : combo.models\n        Detector instance for which the check is performed.\n\n    \"\"\"", "\n", "\n", "if", "not", "hasattr", "(", "detector", ",", "'fit'", ")", "or", "not", "hasattr", "(", "detector", ",", "\n", "'decision_function'", ")", ":", "\n", "        ", "raise", "AttributeError", "(", "\"%s is not a detector instance.\"", "%", "(", "detector", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.standardizer": [[42, 88], ["sklearn.utils.check_array", "sklearn.preprocessing.StandardScaler().fit", "sklearn.utils.check_array", "sklearn.preprocessing.StandardScaler", "StandardScaler().fit.transform", "ValueError", "StandardScaler().fit.transform", "StandardScaler().fit.transform", "StandardScaler().fit.transform", "StandardScaler().fit.transform", "StandardScaler().fit.transform"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "", "def", "standardizer", "(", "X", ",", "X_t", "=", "None", ",", "keep_scalar", "=", "False", ")", ":", "\n", "    ", "\"\"\"Conduct Z-normalization on data to turn input samples become zero-mean\n    and unit variance.\n\n    Parameters\n    ----------\n    X : numpy array of shape (n_samples, n_features)\n        The training samples\n\n    X_t : numpy array of shape (n_samples_new, n_features), optional (default=None)\n        The data to be converted\n\n    keep_scalar : bool, optional (default=False)\n        The flag to indicate whether to return the scalar\n\n    Returns\n    -------\n    X_norm : numpy array of shape (n_samples, n_features)\n        X after the Z-score normalization\n\n    X_t_norm : numpy array of shape (n_samples, n_features)\n        X_t after the Z-score normalization\n\n    scalar : sklearn scalar object\n        The scalar used in conversion\n\n    \"\"\"", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "X", ")", "\n", "\n", "if", "X_t", "is", "None", ":", "\n", "        ", "if", "keep_scalar", ":", "\n", "            ", "return", "scaler", ".", "transform", "(", "X", ")", ",", "scaler", "\n", "", "else", ":", "\n", "            ", "return", "scaler", ".", "transform", "(", "X", ")", "\n", "", "", "else", ":", "\n", "        ", "X_t", "=", "check_array", "(", "X_t", ")", "\n", "if", "X", ".", "shape", "[", "1", "]", "!=", "X_t", ".", "shape", "[", "1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The number of input data feature should be consistent\"", "\n", "\"X has {0} features and X_t has {1} features.\"", ".", "format", "(", "\n", "X", ".", "shape", "[", "1", "]", ",", "X_t", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "if", "keep_scalar", ":", "\n", "            ", "return", "scaler", ".", "transform", "(", "X", ")", ",", "scaler", ".", "transform", "(", "X_t", ")", ",", "scaler", "\n", "", "else", ":", "\n", "            ", "return", "scaler", ".", "transform", "(", "X", ")", ",", "scaler", ".", "transform", "(", "X_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.score_to_label": [[90, 116], ["sklearn.utils.column_or_1d", "pyod.utils.utility.check_parameter", "numpy.percentile"], "function", ["None"], ["", "", "", "def", "score_to_label", "(", "pred_scores", ",", "outliers_fraction", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Turn raw outlier outlier scores to binary labels (0 or 1).\n\n    Parameters\n    ----------\n    pred_scores : list or numpy array of shape (n_samples,)\n        Raw outlier scores. Outliers are assumed have larger values.\n\n    outliers_fraction : float in (0,1)\n        Percentage of outliers.\n\n    Returns\n    -------\n    outlier_labels : numpy array of shape (n_samples,)\n        For each observation, tells whether or not\n        it should be considered as an outlier according to the\n        fitted model. Return the outlier probability, ranging\n        in [0,1].\n    \"\"\"", "\n", "# check input values", "\n", "pred_scores", "=", "column_or_1d", "(", "pred_scores", ")", "\n", "check_parameter", "(", "outliers_fraction", ",", "0", ",", "1", ")", "\n", "\n", "threshold", "=", "percentile", "(", "pred_scores", ",", "100", "*", "(", "1", "-", "outliers_fraction", ")", ")", "\n", "pred_labels", "=", "(", "pred_scores", ">", "threshold", ")", ".", "astype", "(", "'int'", ")", "\n", "return", "pred_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.precision_n_scores": [[118, 147], ["utility.get_label_n", "sklearn.utils.column_or_1d", "sklearn.utils.column_or_1d", "sklearn.metrics.precision_score"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.get_label_n"], ["", "def", "precision_n_scores", "(", "y", ",", "y_pred", ",", "n", "=", "None", ")", ":", "\n", "    ", "\"\"\"Utility function to calculate precision @ rank n.\n\n    Parameters\n    ----------\n    y : list or numpy array of shape (n_samples,)\n        The ground truth. Binary (0: inliers, 1: outliers).\n\n    y_pred : list or numpy array of shape (n_samples,)\n        The raw outlier scores as returned by a fitted model.\n\n    n : int, optional (default=None)\n        The number of outliers. if not defined, infer using ground truth.\n\n    Returns\n    -------\n    precision_at_rank_n : float\n        Precision at rank n score.\n\n    \"\"\"", "\n", "\n", "# turn raw prediction decision scores into binary labels", "\n", "y_pred", "=", "get_label_n", "(", "y", ",", "y_pred", ",", "n", ")", "\n", "\n", "# enforce formats of y and labels_", "\n", "y", "=", "column_or_1d", "(", "y", ")", "\n", "y_pred", "=", "column_or_1d", "(", "y_pred", ")", "\n", "\n", "return", "precision_score", "(", "y", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.get_label_n": [[149, 196], ["sklearn.utils.column_or_1d", "sklearn.utils.column_or_1d", "sklearn.utils.check_consistent_length", "len", "numpy.percentile", "numpy.count_nonzero"], "function", ["None"], ["", "def", "get_label_n", "(", "y", ",", "y_pred", ",", "n", "=", "None", ")", ":", "\n", "    ", "\"\"\"Function to turn raw outlier scores into binary labels by assign 1\n    to top n outlier scores.\n\n    Parameters\n    ----------\n    y : list or numpy array of shape (n_samples,)\n        The ground truth. Binary (0: inliers, 1: outliers).\n\n    y_pred : list or numpy array of shape (n_samples,)\n        The raw outlier scores as returned by a fitted model.\n\n    n : int, optional (default=None)\n        The number of outliers. if not defined, infer using ground truth.\n\n    Returns\n    -------\n    labels : numpy array of shape (n_samples,)\n        binary labels 0: normal points and 1: outliers\n\n    Examples\n    --------\n    >>> from combo.utils.utility import get_label_n\n    >>> y = [0, 1, 1, 0, 0]\n    >>> y_pred = [0.1, 0.5, 0.3, 0.2, 0.7]\n    >>> get_label_n(y, y_pred)\n    array([0, 1, 0, 0, 1])\n\n    \"\"\"", "\n", "\n", "# enforce formats of inputs", "\n", "y", "=", "column_or_1d", "(", "y", ")", "\n", "y_pred", "=", "column_or_1d", "(", "y_pred", ")", "\n", "\n", "check_consistent_length", "(", "y", ",", "y_pred", ")", "\n", "y_len", "=", "len", "(", "y", ")", "# the length of targets", "\n", "\n", "# calculate the percentage of outliers", "\n", "if", "n", "is", "not", "None", ":", "\n", "        ", "outliers_fraction", "=", "n", "/", "y_len", "\n", "", "else", ":", "\n", "        ", "outliers_fraction", "=", "np", ".", "count_nonzero", "(", "y", ")", "/", "y_len", "\n", "\n", "", "threshold", "=", "percentile", "(", "y_pred", ",", "100", "*", "(", "1", "-", "outliers_fraction", ")", ")", "\n", "y_pred", "=", "(", "y_pred", ">", "threshold", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.argmaxn": [[198, 240], ["sklearn.utils.column_or_1d", "len", "pyod.utils.utility.check_parameter", "numpy.partition", "int", "numpy.where", "numpy.where", "numpy.greater_equal", "numpy.less"], "function", ["None"], ["", "def", "argmaxn", "(", "value_list", ",", "n", ",", "order", "=", "'desc'", ")", ":", "\n", "    ", "\"\"\"Return the index of top n elements in the list\n    if order is set to 'desc', otherwise return the index of n smallest ones.\n\n    Parameters\n    ----------\n    value_list : list, array, numpy array of shape (n_samples,)\n        A list containing all values.\n\n    n : int\n        The number of elements to select.\n\n    order : str, optional (default='desc')\n        The order to sort {'desc', 'asc'}:\n\n        - 'desc': descending\n        - 'asc': ascending\n\n    Returns\n    -------\n    index_list : numpy array of shape (n,)\n        The index of the top n elements.\n    \"\"\"", "\n", "\n", "value_list", "=", "column_or_1d", "(", "value_list", ")", "\n", "length", "=", "len", "(", "value_list", ")", "\n", "\n", "# validate the choice of n", "\n", "check_parameter", "(", "n", ",", "1", ",", "length", ",", "include_left", "=", "True", ",", "include_right", "=", "True", ",", "\n", "param_name", "=", "'n'", ")", "\n", "\n", "# for the smallest n, flip the value", "\n", "if", "order", "!=", "'desc'", ":", "\n", "        ", "n", "=", "length", "-", "n", "\n", "\n", "", "value_sorted", "=", "np", ".", "partition", "(", "value_list", ",", "length", "-", "n", ")", "\n", "threshold", "=", "value_sorted", "[", "int", "(", "length", "-", "n", ")", "]", "\n", "\n", "if", "order", "==", "'desc'", ":", "\n", "        ", "return", "np", ".", "where", "(", "np", ".", "greater_equal", "(", "value_list", ",", "threshold", ")", ")", "[", "0", "]", "\n", "", "else", ":", "# return the index of n smallest elements", "\n", "        ", "return", "np", ".", "where", "(", "np", ".", "less", "(", "value_list", ",", "threshold", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.invert_order": [[242, 279], ["sklearn.utils.column_or_1d", "sklearn.utils.column_or_1d.ravel", "sklearn.utils.column_or_1d.max"], "function", ["None"], ["", "", "def", "invert_order", "(", "scores", ",", "method", "=", "'multiplication'", ")", ":", "\n", "    ", "\"\"\" Invert the order of a list of values. The smallest value becomes\n    the largest in the inverted list. This is useful while combining\n    multiple detectors since their score order could be different.\n\n    Parameters\n    ----------\n    scores : list, array or numpy array with shape (n_samples,)\n        The list of values to be inverted\n\n    method : str, optional (default='multiplication')\n        Methods used for order inversion. Valid methods are:\n\n        - 'multiplication': multiply by -1\n        - 'subtraction': max(scores) - scores\n\n    Returns\n    -------\n    inverted_scores : numpy array of shape (n_samples,)\n        The inverted list\n\n    Examples\n    --------\n    >>> scores1 = [0.1, 0.3, 0.5, 0.7, 0.2, 0.1]\n    >>> invert_order(scores1)\n    array([-0.1, -0.3, -0.5, -0.7, -0.2, -0.1])\n    >>> invert_order(scores1, method='subtraction')\n    array([0.6, 0.4, 0.2, 0. , 0.5, 0.6])\n    \"\"\"", "\n", "\n", "scores", "=", "column_or_1d", "(", "scores", ")", "\n", "\n", "if", "method", "==", "'multiplication'", ":", "\n", "        ", "return", "scores", ".", "ravel", "(", ")", "*", "-", "1", "\n", "\n", "", "if", "method", "==", "'subtraction'", ":", "\n", "        ", "return", "(", "scores", ".", "max", "(", ")", "-", "scores", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.generate_bagging_indices": [[281, 323], ["sklearn.utils.check_random_state", "sklearn.utils.check_random_state.randint", "utility.generate_indices"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.generate_indices"], ["", "", "def", "generate_bagging_indices", "(", "random_state", ",", "bootstrap_features", ",", "n_features", ",", "\n", "min_features", ",", "max_features", ")", ":", "\n", "    ", "\"\"\" Randomly draw feature indices. Internal use only.\n\n    Modified from sklearn/ensemble/bagging.py\n\n    Parameters\n    ----------\n    random_state : RandomState\n        A random number generator instance to define the state of the random\n        permutations generator.\n\n    bootstrap_features : bool\n        Specifies whether to bootstrap indice generation\n\n    n_features : int\n        Specifies the population size when generating indices\n\n    min_features : int\n        Lower limit for number of features to randomly sample\n\n    max_features : int\n        Upper limit for number of features to randomly sample\n\n    Returns\n    -------\n    feature_indices : numpy array, shape (n_samples,)\n        Indices for features to bag\n\n    \"\"\"", "\n", "\n", "# Get valid random state", "\n", "random_state", "=", "check_random_state", "(", "random_state", ")", "\n", "\n", "# decide number of features to draw", "\n", "random_n_features", "=", "random_state", ".", "randint", "(", "min_features", ",", "max_features", ")", "\n", "\n", "# Draw indices", "\n", "feature_indices", "=", "generate_indices", "(", "random_state", ",", "bootstrap_features", ",", "\n", "n_features", ",", "random_n_features", ")", "\n", "\n", "return", "feature_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.generate_indices": [[325, 359], ["random_state.randint", "sklearn.utils.random.sample_without_replacement"], "function", ["None"], ["", "def", "generate_indices", "(", "random_state", ",", "bootstrap", ",", "n_population", ",", "n_samples", ")", ":", "\n", "    ", "\"\"\" Draw randomly sampled indices. Internal use only.\n\n    See sklearn/ensemble/bagging.py\n\n    Parameters\n    ----------\n    random_state : RandomState\n        A random number generator instance to define the state of the random\n        permutations generator.\n\n    bootstrap :  bool\n        Specifies whether to bootstrap indice generation\n\n    n_population : int\n        Specifies the population size when generating indices\n\n    n_samples : int\n        Specifies number of samples to draw\n\n    Returns\n    -------\n    indices : numpy array, shape (n_samples,)\n        randomly drawn indices\n    \"\"\"", "\n", "\n", "# Draw sample indices", "\n", "if", "bootstrap", ":", "\n", "        ", "indices", "=", "random_state", ".", "randint", "(", "0", ",", "n_population", ",", "n_samples", ")", "\n", "", "else", ":", "\n", "        ", "indices", "=", "sample_without_replacement", "(", "n_population", ",", "n_samples", ",", "\n", "random_state", "=", "random_state", ")", "\n", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.score_to_proba": [[361, 380], ["numpy.sum().reshape", "numpy.broadcast_to", "numpy.sum"], "function", ["None"], ["", "def", "score_to_proba", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Internal function to random score matrix into probability.\n\n    Parameters\n    ----------\n    scores : numpy array of shape (n_samples, n_classes)\n        Raw score matrix.\n\n    Returns\n    -------\n    proba : numpy array of shape (n_samples, n_classes)\n        Scaled probability matrix.\n    \"\"\"", "\n", "\n", "scores_sum", "=", "np", ".", "sum", "(", "scores", ",", "axis", "=", "1", ")", ".", "reshape", "(", "scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "scores_sum_broadcast", "=", "np", ".", "broadcast_to", "(", "scores_sum", ",", "\n", "(", "scores", ".", "shape", "[", "0", "]", ",", "scores", ".", "shape", "[", "1", "]", ")", ")", "\n", "proba", "=", "scores", "/", "scores_sum_broadcast", "\n", "return", "proba", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.list_diff": [[382, 400], ["set"], "function", ["None"], ["", "def", "list_diff", "(", "first_list", ",", "second_list", ")", ":", "\n", "    ", "\"\"\"Utility function to calculate list difference (first_list-second_list)\n\n    Parameters\n    ----------\n    first_list : list\n        First list.\n\n    second_list : list\n        Second list.\n\n    Returns\n    -------\n    diff : different elements.\n\n    \"\"\"", "\n", "second_list", "=", "set", "(", "second_list", ")", "\n", "return", "[", "item", "for", "item", "in", "first_list", "if", "item", "not", "in", "second_list", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.example.visualize_clusters": [[13, 51], ["numpy.array", "matplotlib.scatter", "matplotlib.title", "matplotlib.xticks", "matplotlib.yticks", "list", "matplotlib.savefig", "matplotlib.show", "itertools.islice", "itertools.cycle", "int", "max"], "function", ["None"], ["def", "visualize_clusters", "(", "model_name", ",", "X", ",", "predicted_labels", ",", "show_figure", "=", "True", ",", "\n", "save_figure", "=", "False", ")", ":", "# pragma: no cover", "\n", "    ", "\"\"\"Utility function for visualizing the results in examples.\n    Internal use only.\n\n    Parameters\n    ----------\n    model_name : str\n        The name of the clustering method.\n\n    X : numpy array of shape (n_samples, n_features)\n        The input samples.\n\n    predicted_labels : numpy array of shape (n_samples, n_features)\n        The predicted labels of the input samples.\n\n    show_figure : bool, optional (default=True)\n        If set to True, show the figure.\n\n    save_figure : bool, optional (default=False)\n        If set to True, save the figure to the local.\n\n    \"\"\"", "\n", "colors", "=", "np", ".", "array", "(", "list", "(", "islice", "(", "cycle", "(", "[", "'#377eb8'", ",", "'#ff7f00'", ",", "'#4daf4a'", ",", "\n", "'#f781bf'", ",", "'#a65628'", ",", "'#984ea3'", ",", "\n", "'#999999'", ",", "'#e41a1c'", ",", "'#dede00'", "]", ")", ",", "\n", "int", "(", "max", "(", "predicted_labels", ")", "+", "1", ")", ")", ")", ")", "\n", "\n", "plt", ".", "scatter", "(", "X", "[", ":", ",", "0", "]", ",", "X", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "color", "=", "colors", "[", "predicted_labels", "]", ")", "\n", "plt", ".", "title", "(", "model_name", ")", "\n", "plt", ".", "xticks", "(", "(", ")", ")", "\n", "plt", ".", "yticks", "(", "(", ")", ")", "\n", "\n", "if", "save_figure", ":", "\n", "        ", "plt", ".", "savefig", "(", "'{clf_name}.png'", ".", "format", "(", "clf_name", "=", "model_name", ")", ",", "dpi", "=", "300", ")", "\n", "\n", "", "if", "show_figure", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print": [[26, 52], ["sklearn.utils.column_or_1d", "sklearn.utils.column_or_1d", "sklearn.utils.check_consistent_length", "print", "numpy.round", "numpy.round", "numpy.round", "sklearn.metrics.accuracy_score", "sklearn.metrics.roc_auc_score", "sklearn.metrics.f1_score"], "function", ["None"], ["def", "evaluate_print", "(", "clf_name", ",", "y", ",", "y_pred", ")", ":", "\n", "    ", "\"\"\"Utility function for evaluating and printing the results for examples.\n    Default metrics include accuracy, roc, and F1 score\n\n    Parameters\n    ----------\n    clf_name : str\n        The name of the estimator.\n\n    y : list or numpy array of shape (n_samples,)\n        The ground truth.\n\n    y_pred : list or numpy array of shape (n_samples,)\n        The raw scores as returned by a fitted model.\n\n    \"\"\"", "\n", "\n", "y", "=", "column_or_1d", "(", "y", ")", "\n", "y_pred", "=", "column_or_1d", "(", "y_pred", ")", "\n", "check_consistent_length", "(", "y", ",", "y_pred", ")", "\n", "\n", "print", "(", "'{clf_name} Accuracy:{acc}, ROC:{roc}, F1:{f1}'", ".", "format", "(", "\n", "clf_name", "=", "clf_name", ",", "\n", "acc", "=", "np", ".", "round", "(", "accuracy_score", "(", "y", ",", "y_pred", ")", ",", "decimals", "=", "4", ")", ",", "\n", "roc", "=", "np", ".", "round", "(", "roc_auc_score", "(", "y", ",", "y_pred", ")", ",", "decimals", "=", "4", ")", ",", "\n", "f1", "=", "np", ".", "round", "(", "f1_score", "(", "y", ",", "y_pred", ")", ",", "decimals", "=", "4", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestAOM.setUp": [[29, 34], ["numpy.asarray"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "scores", "=", "np", ".", "asarray", "(", "[", "[", "0.5", ",", "0.8", ",", "0.6", ",", "0.9", ",", "0.7", ",", "0.6", "]", ",", "\n", "[", "0.8", ",", "0.75", ",", "0.25", ",", "0.6", ",", "0.45", ",", "0.8", "]", ",", "\n", "[", "0.8", ",", "0.3", ",", "0.28", ",", "0.99", ",", "0.28", ",", "0.3", "]", ",", "\n", "[", "0.74", ",", "0.85", ",", "0.38", ",", "0.47", ",", "0.27", ",", "0.69", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestAOM.test_aom_static_norepeat": [[35, 53], ["combo.models.score_comb.aom", "numpy.testing.assert_equal", "sklearn.utils.shuffle", "numpy.zeros", "numpy.max", "numpy.max", "numpy.max", "numpy.mean", "numpy.testing.assert_array_equal", "list", "range"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.aom"], ["", "def", "test_aom_static_norepeat", "(", "self", ")", ":", "\n", "        ", "score", "=", "aom", "(", "self", ".", "scores", ",", "3", ",", "method", "=", "'static'", ",", "\n", "bootstrap_estimators", "=", "False", ",", "\n", "random_state", "=", "42", ")", "\n", "\n", "assert_equal", "(", "score", ".", "shape", ",", "(", "4", ",", ")", ")", "\n", "\n", "shuffled_list", "=", "shuffle", "(", "list", "(", "range", "(", "0", ",", "6", ",", "1", ")", ")", ",", "random_state", "=", "42", ")", "\n", "manual_scores", "=", "np", ".", "zeros", "(", "[", "4", ",", "3", "]", ")", "\n", "manual_scores", "[", ":", ",", "0", "]", "=", "np", ".", "max", "(", "self", ".", "scores", "[", ":", ",", "shuffled_list", "[", "0", ":", "2", "]", "]", ",", "\n", "axis", "=", "1", ")", "\n", "manual_scores", "[", ":", ",", "1", "]", "=", "np", ".", "max", "(", "self", ".", "scores", "[", ":", ",", "shuffled_list", "[", "2", ":", "4", "]", "]", ",", "\n", "axis", "=", "1", ")", "\n", "manual_scores", "[", ":", ",", "2", "]", "=", "np", ".", "max", "(", "self", ".", "scores", "[", ":", ",", "shuffled_list", "[", "4", ":", "6", "]", "]", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "manual_score", "=", "np", ".", "mean", "(", "manual_scores", ",", "axis", "=", "1", ")", "\n", "assert_array_equal", "(", "score", ",", "manual_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestAOM.test_aom_static_repeat": [[54, 58], ["combo.models.score_comb.aom", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.aom"], ["", "def", "test_aom_static_repeat", "(", "self", ")", ":", "\n", "        ", "score", "=", "aom", "(", "self", ".", "scores", ",", "3", ",", "method", "=", "'static'", ",", "bootstrap_estimators", "=", "True", ",", "\n", "random_state", "=", "42", ")", "\n", "assert_equal", "(", "score", ".", "shape", ",", "(", "4", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestAOM.test_aom_static_n_buckets": [[59, 63], ["numpy.testing.assert_raises", "combo.models.score_comb.aom"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.aom"], ["", "def", "test_aom_static_n_buckets", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "aom", "(", "self", ".", "scores", ",", "5", ",", "method", "=", "'static'", ",", "bootstrap_estimators", "=", "False", ",", "\n", "random_state", "=", "42", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestAOM.test_aom_dynamic_repeat": [[66, 71], ["combo.models.score_comb.aom", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.aom"], ["", "", "def", "test_aom_dynamic_repeat", "(", "self", ")", ":", "\n", "        ", "score", "=", "aom", "(", "self", ".", "scores", ",", "3", ",", "method", "=", "'dynamic'", ",", "\n", "bootstrap_estimators", "=", "True", ",", "\n", "random_state", "=", "42", ")", "\n", "assert_equal", "(", "score", ".", "shape", ",", "(", "4", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestAOM.tearDown": [[74, 76], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMOA.setUp": [[79, 84], ["numpy.asarray"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "scores", "=", "np", ".", "asarray", "(", "[", "[", "0.5", ",", "0.8", ",", "0.6", ",", "0.9", ",", "0.7", ",", "0.6", "]", ",", "\n", "[", "0.8", ",", "0.75", ",", "0.25", ",", "0.6", ",", "0.45", ",", "0.8", "]", ",", "\n", "[", "0.8", ",", "0.3", ",", "0.28", ",", "0.99", ",", "0.28", ",", "0.3", "]", ",", "\n", "[", "0.74", ",", "0.85", ",", "0.38", ",", "0.47", ",", "0.27", ",", "0.69", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMOA.test_moa_static_norepeat": [[85, 102], ["combo.models.score_comb.moa", "numpy.testing.assert_equal", "sklearn.utils.shuffle", "numpy.zeros", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.max", "numpy.testing.assert_array_equal", "list", "range"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.moa"], ["", "def", "test_moa_static_norepeat", "(", "self", ")", ":", "\n", "        ", "score", "=", "moa", "(", "self", ".", "scores", ",", "3", ",", "method", "=", "'static'", ",", "\n", "bootstrap_estimators", "=", "False", ",", "random_state", "=", "42", ")", "\n", "\n", "assert_equal", "(", "score", ".", "shape", ",", "(", "4", ",", ")", ")", "\n", "\n", "shuffled_list", "=", "shuffle", "(", "list", "(", "range", "(", "0", ",", "6", ",", "1", ")", ")", ",", "random_state", "=", "42", ")", "\n", "manual_scores", "=", "np", ".", "zeros", "(", "[", "4", ",", "3", "]", ")", "\n", "manual_scores", "[", ":", ",", "0", "]", "=", "np", ".", "mean", "(", "self", ".", "scores", "[", ":", ",", "shuffled_list", "[", "0", ":", "2", "]", "]", ",", "\n", "axis", "=", "1", ")", "\n", "manual_scores", "[", ":", ",", "1", "]", "=", "np", ".", "mean", "(", "self", ".", "scores", "[", ":", ",", "shuffled_list", "[", "2", ":", "4", "]", "]", ",", "\n", "axis", "=", "1", ")", "\n", "manual_scores", "[", ":", ",", "2", "]", "=", "np", ".", "mean", "(", "self", ".", "scores", "[", ":", ",", "shuffled_list", "[", "4", ":", "6", "]", "]", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "manual_score", "=", "np", ".", "max", "(", "manual_scores", ",", "axis", "=", "1", ")", "\n", "assert_array_equal", "(", "score", ",", "manual_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMOA.test_moa_static_repeat": [[103, 107], ["combo.models.score_comb.moa", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.moa"], ["", "def", "test_moa_static_repeat", "(", "self", ")", ":", "\n", "        ", "score", "=", "moa", "(", "self", ".", "scores", ",", "3", ",", "method", "=", "'static'", ",", "bootstrap_estimators", "=", "True", ",", "\n", "random_state", "=", "42", ")", "\n", "assert_equal", "(", "score", ".", "shape", ",", "(", "4", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMOA.test_moa_static_n_buckets": [[108, 112], ["numpy.testing.assert_raises", "combo.models.score_comb.moa"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.moa"], ["", "def", "test_moa_static_n_buckets", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "moa", "(", "self", ".", "scores", ",", "5", ",", "method", "=", "'static'", ",", "bootstrap_estimators", "=", "False", ",", "\n", "random_state", "=", "42", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMOA.test_moa_dynamic_repeat": [[115, 119], ["combo.models.score_comb.moa", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.moa"], ["", "", "def", "test_moa_dynamic_repeat", "(", "self", ")", ":", "\n", "        ", "score", "=", "moa", "(", "self", ".", "scores", ",", "3", ",", "method", "=", "'dynamic'", ",", "\n", "bootstrap_estimators", "=", "True", ",", "random_state", "=", "42", ")", "\n", "assert_equal", "(", "score", ".", "shape", ",", "(", "4", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMOA.tearDown": [[122, 124], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestStatic.setUp": [[127, 130], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "scores", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "5", ",", "6", "]", "]", ")", "\n", "self", ".", "weights", "=", "np", ".", "array", "(", "[", "[", "0.2", ",", "0.6", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestStatic.test_average": [[131, 134], ["combo.models.score_comb.average", "numpy.testing.assert_allclose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.average"], ["", "def", "test_average", "(", "self", ")", ":", "\n", "        ", "score", "=", "average", "(", "self", ".", "scores", ")", "\n", "assert_allclose", "(", "score", ",", "np", ".", "array", "(", "[", "1.5", ",", "3.5", ",", "5.5", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestStatic.test_weighted_average": [[135, 138], ["combo.models.score_comb.average", "numpy.testing.assert_allclose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.average"], ["", "def", "test_weighted_average", "(", "self", ")", ":", "\n", "        ", "score", "=", "average", "(", "self", ".", "scores", ",", "self", ".", "weights", ")", "\n", "assert_allclose", "(", "score", ",", "np", ".", "array", "(", "[", "1.75", ",", "3.75", ",", "5.75", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestStatic.test_maximization": [[139, 142], ["combo.models.score_comb.maximization", "numpy.testing.assert_allclose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.maximization"], ["", "def", "test_maximization", "(", "self", ")", ":", "\n", "        ", "score", "=", "maximization", "(", "self", ".", "scores", ")", "\n", "assert_allclose", "(", "score", ",", "np", ".", "array", "(", "[", "2", ",", "4", ",", "6", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestStatic.test_median": [[143, 146], ["combo.models.score_comb.median", "numpy.testing.assert_allclose", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.median"], ["", "def", "test_median", "(", "self", ")", ":", "\n", "        ", "score", "=", "median", "(", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "2", ",", "3", ",", "4", "]", ",", "[", "5", ",", "6", ",", "7", "]", "]", ")", ")", "\n", "assert_allclose", "(", "score", ",", "np", ".", "array", "(", "[", "1", ",", "3", ",", "6", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMajorityVote.setUp": [[149, 152], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "scores", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "2", "]", ",", "[", "2", ",", "2", ",", "2", "]", ",", "[", "1", ",", "1", ",", "2", "]", "]", ")", "\n", "self", ".", "weights", "=", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.8", ",", "0.1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMajorityVote.test_majority_vote": [[153, 156], ["combo.models.score_comb.majority_vote", "numpy.testing.assert_allclose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.majority_vote"], ["", "def", "test_majority_vote", "(", "self", ")", ":", "\n", "        ", "score", "=", "majority_vote", "(", "self", ".", "scores", ",", "n_classes", "=", "3", ")", "\n", "assert_allclose", "(", "score", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_score_comb.TestMajorityVote.test_weighted_majority_vote": [[157, 160], ["combo.models.score_comb.majority_vote", "numpy.testing.assert_allclose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.majority_vote"], ["", "def", "test_weighted_majority_vote", "(", "self", ")", ":", "\n", "        ", "score", "=", "majority_vote", "(", "self", ".", "scores", ",", "n_classes", "=", "3", ",", "weights", "=", "self", ".", "weights", ")", "\n", "assert_allclose", "(", "score", ",", "np", ".", "array", "(", "[", "1", ",", "1", ",", "2", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_stacking.TestStacking.setUp": [[36, 54], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_stacking.Stacking", "test_classifier_stacking.TestStacking.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "Stacking", "(", "classifiers", ",", "n_folds", "=", "4", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_stacking.TestStacking.test_parameters": [[55, 58], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_stacking.TestStacking.test_train_scores": [[59, 66], ["test_classifier_stacking.TestStacking.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "y_train_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_stacking.TestStacking.test_prediction_scores": [[67, 77], ["test_classifier_stacking.TestStacking.clf.predict", "numpy.testing.assert_equal", "combo.utils.data.evaluate_print", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n", "# test utility function", "\n", "evaluate_print", "(", "'averaging'", ",", "self", ".", "y_test", ",", "y_test_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_stacking.TestStacking.test_prediction_proba": [[78, 95], ["test_classifier_stacking.TestStacking.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_stacking.TestStacking.min", "test_classifier_stacking.TestStacking.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "\n", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_stacking.TestStacking.tearDown": [[96, 98], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_eac.TestEAC.setUp": [[29, 41], ["sklearn.datasets.load_breast_cancer", "combo.models.cluster_eac.EAC", "test_cluster_eac.TestEAC.estimator.fit", "sklearn.cluster.KMeans", "sklearn.cluster.MiniBatchKMeans", "sklearn.cluster.AgglomerativeClustering"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "n_clusters", "=", "5", "\n", "\n", "# Initialize a set of estimators", "\n", "estimators", "=", "[", "KMeans", "(", "n_clusters", "=", "n_clusters", ")", ",", "\n", "MiniBatchKMeans", "(", "n_clusters", "=", "n_clusters", ")", ",", "\n", "AgglomerativeClustering", "(", "n_clusters", "=", "n_clusters", ")", "]", "\n", "\n", "self", ".", "estimator", "=", "EAC", "(", "estimators", ",", "n_clusters", "=", "n_clusters", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_eac.TestEAC.test_similarity_max": [[42, 50], ["numpy.array", "numpy.array", "combo.models.cluster_eac._generate_similarity_mat", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac._generate_similarity_mat"], ["", "def", "test_similarity_max", "(", "self", ")", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "1", "]", "]", ")", "\n", "expected_mat", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "sim_mat", "=", "_generate_similarity_mat", "(", "labels", ")", "\n", "assert_allclose", "(", "expected_mat", ",", "sim_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_eac.TestEAC.test_weights": [[51, 54], ["numpy.testing.assert_equal", "numpy.sum"], "methods", ["None"], ["", "def", "test_weights", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "np", ".", "sum", "(", "self", ".", "estimator", ".", "weights", ")", ",", "\n", "self", ".", "estimator", ".", "n_base_estimators_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_eac.TestEAC.test_parameters": [[55, 58], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "estimator", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "estimator", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_eac.TestEAC.test_scores": [[59, 62], ["numpy.testing.assert_equal"], "methods", ["None"], ["", "def", "test_scores", "(", "self", ")", ":", "\n", "        ", "predicted_labels", "=", "self", ".", "estimator", ".", "labels_", "\n", "assert_equal", "(", "predicted_labels", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_eac.TestEAC.test_fit_predict": [[63, 66], ["test_cluster_eac.TestEAC.estimator.fit_predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "predicted_labels", "=", "self", ".", "estimator", ".", "fit_predict", "(", "self", ".", "X", ")", "\n", "assert_equal", "(", "predicted_labels", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_eac.TestEAC.tearDown": [[68, 70], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_dcs.TestDCS_LA.setUp": [[35, 53], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_dcs.DCS_LA", "test_classifier_dcs.TestDCS_LA.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "DCS_LA", "(", "classifiers", ",", "local_region_size", "=", "30", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_dcs.TestDCS_LA.test_parameters": [[54, 57], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_dcs.TestDCS_LA.test_train_scores": [[58, 65], ["test_classifier_dcs.TestDCS_LA.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "y_train_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_dcs.TestDCS_LA.test_prediction_scores": [[66, 76], ["test_classifier_dcs.TestDCS_LA.clf.predict", "numpy.testing.assert_equal", "combo.utils.data.evaluate_print", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n", "# test utility function", "\n", "evaluate_print", "(", "'averaging'", ",", "self", ".", "y_test", ",", "y_test_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_dcs.TestDCS_LA.test_prediction_proba": [[77, 94], ["test_classifier_dcs.TestDCS_LA.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_dcs.TestDCS_LA.min", "test_classifier_dcs.TestDCS_LA.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "\n", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_dcs.TestDCS_LA.test_fit_predict": [[95, 99], ["numpy.testing.assert_raises", "test_classifier_dcs.TestDCS_LA.clf.fit_predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "NotImplementedError", ")", ":", "\n", "            ", "y_train_predicted", "=", "self", ".", "clf", ".", "fit_predict", "(", "self", ".", "X_train", ",", "\n", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_dcs.TestDCS_LA.tearDown": [[100, 102], ["None"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsemble.setUp": [[28, 40], ["sklearn.datasets.load_breast_cancer", "combo.models.cluster_comb.ClustererEnsemble", "test_cluster_comb.TestClustererEnsemble.estimator.fit", "sklearn.cluster.KMeans", "sklearn.cluster.MiniBatchKMeans", "sklearn.cluster.AgglomerativeClustering"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "n_clusters", "=", "5", "\n", "\n", "# Initialize a set of estimators", "\n", "estimators", "=", "[", "KMeans", "(", "n_clusters", "=", "n_clusters", ")", ",", "\n", "MiniBatchKMeans", "(", "n_clusters", "=", "n_clusters", ")", ",", "\n", "AgglomerativeClustering", "(", "n_clusters", "=", "n_clusters", ")", "]", "\n", "\n", "self", ".", "estimator", "=", "ClustererEnsemble", "(", "estimators", ",", "n_clusters", "=", "n_clusters", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsemble.test_weights": [[41, 44], ["numpy.testing.assert_equal", "numpy.sum"], "methods", ["None"], ["", "def", "test_weights", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "np", ".", "sum", "(", "self", ".", "estimator", ".", "weights", ")", ",", "\n", "self", ".", "estimator", ".", "n_base_estimators_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsemble.test_parameters": [[45, 48], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "estimator", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "estimator", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsemble.test_scores": [[49, 52], ["numpy.testing.assert_equal"], "methods", ["None"], ["", "def", "test_scores", "(", "self", ")", ":", "\n", "        ", "predicted_labels", "=", "self", ".", "estimator", ".", "labels_", "\n", "assert_equal", "(", "predicted_labels", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsemble.test_fit_predict": [[53, 56], ["test_cluster_comb.TestClustererEnsemble.estimator.fit_predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "predicted_labels", "=", "self", ".", "estimator", ".", "fit_predict", "(", "self", ".", "X", ")", "\n", "assert_equal", "(", "predicted_labels", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsemble.tearDown": [[58, 60], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsembleScores.setUp": [[63, 80], ["sklearn.datasets.load_breast_cancer", "numpy.zeros", "enumerate", "sklearn.cluster.KMeans", "sklearn.cluster.MiniBatchKMeans", "sklearn.cluster.AgglomerativeClustering", "estimator.fit"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "n_clusters", "=", "5", "\n", "self", ".", "n_estimators", "=", "3", "\n", "\n", "# Initialize a set of estimators", "\n", "estimators", "=", "[", "KMeans", "(", "n_clusters", "=", "self", ".", "n_clusters", ")", ",", "\n", "MiniBatchKMeans", "(", "n_clusters", "=", "self", ".", "n_clusters", ")", ",", "\n", "AgglomerativeClustering", "(", "n_clusters", "=", "self", ".", "n_clusters", ")", "]", "\n", "\n", "# Clusterer Ensemble without initializing a new Class", "\n", "self", ".", "original_labels", "=", "np", ".", "zeros", "(", "[", "self", ".", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_estimators", "]", ")", "\n", "\n", "for", "i", ",", "estimator", "in", "enumerate", "(", "estimators", ")", ":", "\n", "            ", "estimator", ".", "fit", "(", "self", ".", "X", ")", "\n", "self", ".", "original_labels", "[", ":", ",", "i", "]", "=", "estimator", ".", "labels_", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsembleScores.test_scores": [[81, 100], ["combo.models.cluster_comb.clusterer_ensemble_scores", "numpy.testing.assert_equal", "combo.models.cluster_comb.clusterer_ensemble_scores", "numpy.testing.assert_equal", "numpy.testing.assert_equal", "combo.models.cluster_comb.clusterer_ensemble_scores", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.clusterer_ensemble_scores", "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.clusterer_ensemble_scores", "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.clusterer_ensemble_scores"], ["", "", "def", "test_scores", "(", "self", ")", ":", "\n", "        ", "labels_by_vote1", "=", "clusterer_ensemble_scores", "(", "self", ".", "original_labels", ",", "\n", "self", ".", "n_estimators", ",", "\n", "self", ".", "n_clusters", ")", "\n", "assert_equal", "(", "labels_by_vote1", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# return aligned_labels as well", "\n", "labels_by_vote2", ",", "aligned_labels", "=", "clusterer_ensemble_scores", "(", "\n", "self", ".", "original_labels", ",", "self", ".", "n_estimators", ",", "self", ".", "n_clusters", ",", "\n", "return_results", "=", "True", ")", "\n", "assert_equal", "(", "labels_by_vote2", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "assert_equal", "(", "aligned_labels", ".", "shape", ",", "self", ".", "original_labels", ".", "shape", ")", "\n", "\n", "# select a different reference base estimator (default is 0)", "\n", "labels_by_vote3", "=", "clusterer_ensemble_scores", "(", "self", ".", "original_labels", ",", "\n", "self", ".", "n_estimators", ",", "\n", "self", ".", "n_clusters", ",", "\n", "reference_idx", "=", "1", ")", "\n", "assert_equal", "(", "labels_by_vote3", ".", "shape", "[", "0", "]", ",", "self", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_cluster_comb.TestClustererEnsembleScores.tearDown": [[101, 103], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_des.TestDEC_LA.setUp": [[35, 53], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_des.DES_LA", "test_classifier_des.TestDEC_LA.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "DES_LA", "(", "classifiers", ",", "local_region_size", "=", "30", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_des.TestDEC_LA.test_parameters": [[54, 57], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "\n", "and", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_des.TestDEC_LA.test_train_scores": [[58, 65], ["test_classifier_des.TestDEC_LA.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "y_train_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_des.TestDEC_LA.test_prediction_scores": [[66, 76], ["test_classifier_des.TestDEC_LA.clf.predict", "numpy.testing.assert_equal", "combo.utils.data.evaluate_print", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n", "# test utility function", "\n", "evaluate_print", "(", "'averaging'", ",", "self", ".", "y_test", ",", "y_test_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_des.TestDEC_LA.test_prediction_proba": [[77, 94], ["test_classifier_des.TestDEC_LA.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_des.TestDEC_LA.min", "test_classifier_des.TestDEC_LA.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "\n", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_des.TestDEC_LA.test_fit_predict": [[95, 99], ["numpy.testing.assert_raises", "test_classifier_des.TestDEC_LA.clf.fit_predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "NotImplementedError", ")", ":", "\n", "            ", "y_train_predicted", "=", "self", ".", "clf", ".", "fit_predict", "(", "self", ".", "X_train", ",", "\n", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_des.TestDEC_LA.tearDown": [[100, 102], ["None"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.MyEstimator.__init__": [[28, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l1", "=", "0", ",", "empty", "=", "None", ")", ":", "\n", "        ", "self", ".", "l1", "=", "l1", "\n", "self", ".", "empty", "=", "empty", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.MyEstimator.fit": [[32, 34], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.MyEstimator.fit_predict": [[35, 37], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.MyEstimator.predict": [[38, 40], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.MyEstimator.predict_proba": [[41, 43], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.K.__init__": [[47, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "None", ",", "d", "=", "None", ")", ":", "\n", "        ", "self", ".", "c", "=", "c", "\n", "self", ".", "d", "=", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.K.fit": [[51, 53], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.K.fit_predict": [[54, 56], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.K.predict": [[57, 59], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.K.predict_proba": [[60, 62], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.T.__init__": [[66, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "self", ".", "a", "=", "a", "\n", "self", ".", "b", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.T.fit": [[70, 72], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.T.fit_predict": [[73, 75], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.T.predict": [[76, 78], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.T.predict_proba": [[79, 81], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.ModifyInitParams.__init__": [[90, 92], ["numpy.array", "a.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "a", "=", "np", ".", "array", "(", "[", "0", "]", ")", ")", ":", "\n", "        ", "self", ".", "a", "=", "a", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.ModifyInitParams.fit": [[93, 95], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.ModifyInitParams.fit_predict": [[96, 98], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.ModifyInitParams.predict": [[99, 101], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.ModifyInitParams.predict_proba": [[102, 104], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.VargEstimator.__init__": [[110, 112], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "vargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.VargEstimator.fit": [[113, 115], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.VargEstimator.fit_predict": [[116, 118], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.VargEstimator.predict": [[119, 121], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.VargEstimator.predict_proba": [[122, 124], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy1.__init__": [[127, 130], ["combo.models.base.BaseAggregator.__init__", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_estimators", "=", "[", "DecisionTreeClassifier", "(", ")", ",", "\n", "LogisticRegression", "(", ")", "]", ")", ":", "\n", "        ", "super", "(", "Dummy1", ",", "self", ")", ".", "__init__", "(", "base_estimators", "=", "base_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy1.fit": [[131, 133], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy1.fit_predict": [[134, 136], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy1.predict": [[137, 139], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy1.predict_proba": [[140, 142], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy2.__init__": [[145, 148], ["combo.models.base.BaseAggregator.__init__", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_estimators", "=", "[", "DecisionTreeClassifier", "(", ")", ",", "\n", "LogisticRegression", "(", ")", "]", ")", ":", "\n", "        ", "super", "(", "Dummy2", ",", "self", ")", ".", "__init__", "(", "base_estimators", "=", "base_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy2.fit": [[149, 151], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy2.fit_predict": [[152, 154], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy2.predict": [[155, 157], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy2.predict_proba": [[158, 160], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy3.__init__": [[163, 166], ["combo.models.base.BaseAggregator.__init__", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_estimators", "=", "[", "DecisionTreeClassifier", "(", ")", ",", "\n", "LogisticRegression", "(", ")", "]", ")", ":", "\n", "        ", "super", "(", "Dummy3", ",", "self", ")", ".", "__init__", "(", "base_estimators", "=", "base_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy3.decision_function": [[167, 169], ["None"], "methods", ["None"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy3.fit": [[170, 172], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy3.fit_predict": [[173, 175], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy3.predict": [[176, 178], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy3.predict_proba": [[179, 181], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy4.__init__": [[184, 187], ["combo.models.base.BaseAggregator.__init__", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_estimators", "=", "[", "DecisionTreeClassifier", "(", ")", ",", "\n", "LogisticRegression", "(", ")", "]", ")", ":", "\n", "        ", "super", "(", "Dummy4", ",", "self", ")", ".", "__init__", "(", "base_estimators", "=", "base_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy4.decision_function": [[188, 190], ["None"], "methods", ["None"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy4.fit": [[191, 193], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy4.fit_predict": [[194, 196], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy4.predict": [[197, 199], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy4.predict_proba": [[200, 202], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy5.__init__": [[205, 208], ["combo.models.base.BaseAggregator.__init__", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_estimators", "=", "[", "DecisionTreeClassifier", "(", ")", ",", "\n", "LogisticRegression", "(", ")", "]", ")", ":", "\n", "        ", "super", "(", "Dummy5", ",", "self", ")", ".", "__init__", "(", "base_estimators", "=", "base_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy5.decision_function": [[209, 211], ["None"], "methods", ["None"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy5.fit": [[212, 214], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy5.fit_predict": [[215, 217], ["None"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy5.predict": [[218, 220], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.Dummy5.predict_proba": [[221, 223], ["None"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.setUp": [[226, 232], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_init": [[233, 242], ["test_base.Dummy1", "test_base.Dummy1", "sklearn.tree.DecisionTreeClassifier", "sklearn.tree.DecisionTreeClassifier"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Test base class initialization\n\n        :return:\n        \"\"\"", "\n", "self", ".", "dummy_clf", "=", "Dummy1", "(", ")", "\n", "self", ".", "dummy_clf", "=", "Dummy1", "(", "base_estimators", "=", "[", "DecisionTreeClassifier", "(", ")", ",", "\n", "DecisionTreeClassifier", "(", ")", "]", ")", "\n", "# assert_equal(self.dummy_clf.base_estimators,", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_fit": [[259, 262], ["test_base.Dummy2", "numpy.testing.assert_equal", "test_base.TestBASE.dummy_clf.fit"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "def", "test_fit", "(", "self", ")", ":", "\n", "        ", "self", ".", "dummy_clf", "=", "Dummy2", "(", ")", "\n", "assert_equal", "(", "self", ".", "dummy_clf", ".", "fit", "(", "0", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_fit_predict": [[263, 266], ["test_base.Dummy5", "numpy.testing.assert_equal", "test_base.TestBASE.dummy_clf.fit_predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "self", ".", "dummy_clf", "=", "Dummy5", "(", ")", "\n", "assert_equal", "(", "self", ".", "dummy_clf", ".", "fit_predict", "(", "0", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_predict": [[267, 272], ["test_base.Dummy3", "numpy.testing.assert_equal", "test_base.TestBASE.dummy_clf.predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_predict", "(", "self", ")", ":", "\n", "# TODO: add more testcases", "\n", "\n", "        ", "self", ".", "dummy_clf", "=", "Dummy3", "(", ")", "\n", "assert_equal", "(", "self", ".", "dummy_clf", ".", "predict", "(", "0", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_predict_proba": [[273, 277], ["test_base.Dummy4", "numpy.testing.assert_equal", "test_base.TestBASE.dummy_clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_predict_proba", "(", "self", ")", ":", "\n", "# TODO: create uniform testcases", "\n", "        ", "self", ".", "dummy_clf", "=", "Dummy4", "(", ")", "\n", "assert_equal", "(", "self", ".", "dummy_clf", ".", "predict_proba", "(", "0", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_rank": [[278, 281], ["None"], "methods", ["None"], ["", "def", "test_rank", "(", "self", ")", ":", "\n", "# TODO: create uniform testcases", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_repr": [[282, 294], ["test_base.MyEstimator", "repr", "test_base.T", "numpy.testing.assert_equal", "test_base.T", "numpy.testing.assert_equal", "test_base.K", "test_base.K", "repr", "len", "repr"], "methods", ["None"], ["", "def", "test_repr", "(", "self", ")", ":", "\n", "# Smoke test the repr of the base estimator.", "\n", "        ", "my_estimator", "=", "MyEstimator", "(", ")", "\n", "repr", "(", "my_estimator", ")", "\n", "test", "=", "T", "(", "K", "(", ")", ",", "K", "(", ")", ")", "\n", "assert_equal", "(", "\n", "repr", "(", "test", ")", ",", "\n", "\"T(a=K(c=None, d=None), b=K(c=None, d=None))\"", "\n", ")", "\n", "\n", "some_est", "=", "T", "(", "a", "=", "[", "\"long_params\"", "]", "*", "1000", ")", "\n", "assert_equal", "(", "len", "(", "repr", "(", "some_est", ")", ")", ",", "415", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_str": [[295, 299], ["test_base.MyEstimator", "str"], "methods", ["None"], ["", "def", "test_str", "(", "self", ")", ":", "\n", "# Smoke test the str of the base estimator", "\n", "        ", "my_estimator", "=", "MyEstimator", "(", ")", "\n", "str", "(", "my_estimator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.test_get_params": [[300, 309], ["test_base.T", "T.set_params", "numpy.testing.assert_raises", "test_base.K", "test_base.K", "T.get_params", "T.get_params"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.set_params", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.get_params", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.get_params"], ["", "def", "test_get_params", "(", "self", ")", ":", "\n", "        ", "test", "=", "T", "(", "K", "(", ")", ",", "K", "(", ")", ")", "\n", "\n", "assert", "(", "'a__d'", "in", "test", ".", "get_params", "(", "deep", "=", "True", ")", ")", "\n", "assert", "(", "'a__d'", "not", "in", "test", ".", "get_params", "(", "deep", "=", "False", ")", ")", "\n", "\n", "test", ".", "set_params", "(", "a__d", "=", "2", ")", "\n", "assert", "(", "test", ".", "a", ".", "d", "==", "2", ")", "\n", "assert_raises", "(", "ValueError", ",", "test", ".", "set_params", ",", "a__a", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_base.TestBASE.tearDown": [[310, 312], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestFitPredict.setUp": [[35, 52], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_comb.SimpleClassifierAggregator", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleClassifierAggregator", "(", "classifiers", ",", "method", "=", "'average'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestFitPredict.test_fit_predict": [[53, 57], ["numpy.testing.assert_raises", "test_classifier_comb.TestFitPredict.clf.fit_predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "NotImplementedError", ")", ":", "\n", "            ", "y_train_predicted", "=", "self", ".", "clf", ".", "fit_predict", "(", "self", ".", "X_train", ",", "\n", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestAverage.setUp": [[60, 78], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_comb.SimpleClassifierAggregator", "test_classifier_comb.TestAverage.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleClassifierAggregator", "(", "classifiers", ",", "method", "=", "'average'", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestAverage.test_parameters": [[79, 82], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestAverage.test_train_scores": [[83, 90], ["test_classifier_comb.TestAverage.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "\n", "y_train_predicted", ")", ">=", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestAverage.test_prediction_scores": [[91, 101], ["test_classifier_comb.TestAverage.clf.predict", "numpy.testing.assert_equal", "combo.utils.data.evaluate_print", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n", "# test utility function", "\n", "evaluate_print", "(", "'averaging'", ",", "self", ".", "y_test", ",", "y_test_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestAverage.test_prediction_proba": [[102, 119], ["test_classifier_comb.TestAverage.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_comb.TestAverage.min", "test_classifier_comb.TestAverage.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "\n", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestAverage.tearDown": [[120, 122], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestWeightedAverage.setUp": [[125, 147], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "numpy.array", "combo.models.classifier_comb.SimpleClassifierAggregator", "test_classifier_comb.TestWeightedAverage.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "clf_weights", "=", "np", ".", "array", "(", "[", "0.1", ",", "0.4", ",", "0.1", ",", "0.2", ",", "0.2", "]", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleClassifierAggregator", "(", "classifiers", ",", "method", "=", "'average'", ",", "\n", "weights", "=", "clf_weights", ")", "\n", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestWeightedAverage.test_weights": [[148, 150], ["numpy.testing.assert_equal", "numpy.sum"], "methods", ["None"], ["", "def", "test_weights", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "np", ".", "sum", "(", "self", ".", "clf", ".", "weights", ")", ",", "self", ".", "clf", ".", "n_base_estimators_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestWeightedAverage.test_parameters": [[151, 160], ["print", "test_classifier_comb.TestWeightedAverage.clf.set_params", "hasattr"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.set_params"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n", "# print clf details", "\n", "print", "(", "self", ".", "clf", ")", "\n", "\n", "# set parameters", "\n", "self", ".", "clf", ".", "set_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestWeightedAverage.test_train_scores": [[161, 168], ["test_classifier_comb.TestWeightedAverage.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "\n", "y_train_predicted", ")", ">=", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestWeightedAverage.test_prediction_scores": [[169, 176], ["test_classifier_comb.TestWeightedAverage.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestWeightedAverage.test_prediction_proba": [[177, 194], ["test_classifier_comb.TestWeightedAverage.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_comb.TestWeightedAverage.min", "test_classifier_comb.TestWeightedAverage.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "\n", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestWeightedAverage.tearDown": [[195, 197], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMax.setUp": [[200, 219], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_comb.SimpleClassifierAggregator", "test_classifier_comb.TestMax.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleClassifierAggregator", "(", "classifiers", ",", "\n", "method", "=", "'maximization'", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMax.test_parameters": [[220, 223], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMax.test_train_scores": [[224, 231], ["test_classifier_comb.TestMax.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "y_train_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMax.test_prediction_scores": [[232, 242], ["test_classifier_comb.TestMax.clf.predict", "numpy.testing.assert_equal", "combo.utils.data.evaluate_print", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n", "# test utility function", "\n", "evaluate_print", "(", "'maximization'", ",", "self", ".", "y_test", ",", "y_test_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMax.test_prediction_proba": [[243, 260], ["test_classifier_comb.TestMax.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_comb.TestMax.min", "test_classifier_comb.TestMax.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "\n", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMax.tearDown": [[261, 263], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMajorityVote.setUp": [[266, 285], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_comb.SimpleClassifierAggregator", "test_classifier_comb.TestMajorityVote.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleClassifierAggregator", "(", "classifiers", ",", "\n", "method", "=", "'majority_vote'", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMajorityVote.test_parameters": [[286, 289], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMajorityVote.test_train_scores": [[290, 297], ["test_classifier_comb.TestMajorityVote.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "y_train_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMajorityVote.test_prediction_scores": [[298, 308], ["test_classifier_comb.TestMajorityVote.clf.predict", "numpy.testing.assert_equal", "combo.utils.data.evaluate_print", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n", "# test utility function", "\n", "evaluate_print", "(", "'majority_vote'", ",", "self", ".", "y_test", ",", "y_test_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMajorityVote.test_prediction_proba": [[309, 326], ["test_classifier_comb.TestMajorityVote.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_comb.TestMajorityVote.min", "test_classifier_comb.TestMajorityVote.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "\n", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMajorityVote.tearDown": [[327, 329], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMedian.setUp": [[332, 351], ["sklearn.datasets.load_breast_cancer", "sklearn.model_selection.train_test_split", "combo.models.classifier_comb.SimpleClassifierAggregator", "test_classifier_comb.TestMedian.clf.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.linear_model.LogisticRegression", "sklearn.neighbors.KNeighborsClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.GradientBoostingClassifier"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "roc_floor", "=", "0.9", "\n", "self", ".", "accuracy_floor", "=", "0.9", "\n", "\n", "random_state", "=", "42", "\n", "X", ",", "y", "=", "load_breast_cancer", "(", "return_X_y", "=", "True", ")", "\n", "\n", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "random_state", ")", "\n", "\n", "classifiers", "=", "[", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "LogisticRegression", "(", "random_state", "=", "random_state", ")", ",", "\n", "KNeighborsClassifier", "(", ")", ",", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleClassifierAggregator", "(", "classifiers", ",", "\n", "method", "=", "'median'", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "y_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMedian.test_parameters": [[352, 355], ["hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'base_estimators'", ")", "and", "\n", "self", ".", "clf", ".", "base_estimators", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMedian.test_train_scores": [[356, 363], ["test_classifier_comb.TestMedian.clf.predict", "numpy.testing.assert_equal", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "y_train_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "len", "(", "y_train_predicted", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_train", ",", "y_train_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMedian.test_prediction_scores": [[364, 374], ["test_classifier_comb.TestMedian.clf.predict", "numpy.testing.assert_equal", "combo.utils.data.evaluate_print", "len", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.utils.data.evaluate_print"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "len", "(", "y_test_predicted", ")", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "accuracy_score", "(", "self", ".", "y_test", ",", "y_test_predicted", ")", ">=", "\n", "self", ".", "accuracy_floor", ")", "\n", "\n", "# test utility function", "\n", "evaluate_print", "(", "'median'", ",", "self", ".", "y_test", ",", "y_test_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_classifier_comb.TestMedian.test_prediction_proba": [[375, 392], ["test_classifier_comb.TestMedian.clf.predict_proba", "len", "numpy.testing.assert_equal", "numpy.sum", "numpy.testing.assert_allclose", "test_classifier_comb.TestMedian.min", "test_classifier_comb.TestMedian.max", "sklearn.metrics.roc_auc_score", "numpy.unique", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "y_test_predicted", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "y_test_predicted", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "y_test_predicted", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "y_test_predicted", "[", ":", ",", "1", "]", ")", ">=", "\n", "self", ".", "roc_floor", ")", "\n", "\n", "# check shape of integrity", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "y_train", ")", ")", "\n", "assert_equal", "(", "y_test_predicted", ".", "shape", ",", "(", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "\n", "# check probability sum is 1", "\n", "y_test_predicted_sum", "=", "np", ".", "sum", "(", "y_test_predicted", ",", "axis", "=", "1", ")", "\n", "assert_allclose", "(", "np", ".", "ones", "(", "[", "self", ".", "X_test", ".", "shape", "[", "0", "]", ",", "]", ")", ",", "\n", "y_test_predicted_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.setUp": [[28, 57], ["os.path.abspath", "sklearn.model_selection.train_test_split", "combo.models.detector_lscp.LSCP", "test_detector_lscp.TestLSCP.clf.fit", "os.path.dirname", "scipy.io.loadmat", "mat[].ravel", "sklearn.utils.validation.check_X_y", "pyod.models.lof.LOF", "pyod.models.lof.LOF", "os.path.join", "print", "pyod.utils.data.generate_data", "print", "pyod.utils.data.generate_data"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# Define data file and read X and y", "\n", "# Generate some data if the source data is missing", "\n", "        ", "this_directory", "=", "path", ".", "abspath", "(", "path", ".", "dirname", "(", "__file__", ")", ")", "\n", "mat_file", "=", "'cardio.mat'", "\n", "try", ":", "\n", "            ", "mat", "=", "loadmat", "(", "path", ".", "join", "(", "*", "[", "this_directory", ",", "'data'", ",", "mat_file", "]", ")", ")", "\n", "\n", "", "except", "TypeError", ":", "\n", "            ", "print", "(", "'{data_file} does not exist. Use generated data'", ".", "format", "(", "\n", "data_file", "=", "mat_file", ")", ")", "\n", "X", ",", "y", "=", "generate_data", "(", "train_only", "=", "True", ")", "# load data", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "'{data_file} does not exist. Use generated data'", ".", "format", "(", "\n", "data_file", "=", "mat_file", ")", ")", "\n", "X", ",", "y", "=", "generate_data", "(", "train_only", "=", "True", ")", "# load data", "\n", "", "else", ":", "\n", "            ", "X", "=", "mat", "[", "'X'", "]", "\n", "y", "=", "mat", "[", "'y'", "]", ".", "ravel", "(", ")", "\n", "X", ",", "y", "=", "check_X_y", "(", "X", ",", "y", ")", "\n", "\n", "", "self", ".", "X_train", ",", "self", ".", "X_test", ",", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "42", ")", "\n", "\n", "detectors", "=", "[", "LOF", "(", ")", ",", "LOF", "(", ")", "]", "\n", "\n", "self", ".", "clf", "=", "LSCP", "(", "base_estimators", "=", "detectors", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ")", "\n", "self", ".", "roc_floor", "=", "0.6", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_parameters": [[58, 69], ["hasattr", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'decision_scores_'", ")", "and", "\n", "self", ".", "clf", ".", "decision_scores_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'labels_'", ")", "and", "\n", "self", ".", "clf", ".", "labels_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'threshold_'", ")", "and", "\n", "self", ".", "clf", ".", "threshold_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_mu'", ")", "and", "\n", "self", ".", "clf", ".", "_mu", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_sigma'", ")", "and", "\n", "self", ".", "clf", ".", "_sigma", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_train_scores": [[70, 72], ["numpy.testing.assert_equal", "len"], "methods", ["None"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "len", "(", "self", ".", "clf", ".", "decision_scores_", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_prediction_scores": [[73, 81], ["test_detector_lscp.TestLSCP.clf.decision_function", "numpy.testing.assert_equal", "sklearn.metrics.roc_auc_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "pred_scores", "=", "self", ".", "clf", ".", "decision_function", "(", "self", ".", "X_test", ")", "\n", "\n", "# check score shapes", "\n", "assert_equal", "(", "pred_scores", ".", "shape", "[", "0", "]", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "pred_scores", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_prediction_labels": [[82, 85], ["test_detector_lscp.TestLSCP.clf.predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_prediction_labels", "(", "self", ")", ":", "\n", "        ", "pred_labels", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "pred_labels", ".", "shape", ",", "self", ".", "y_test", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_prediction_proba": [[86, 90], ["test_detector_lscp.TestLSCP.clf.predict_proba", "test_detector_lscp.TestLSCP.min", "test_detector_lscp.TestLSCP.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_prediction_proba_linear": [[91, 95], ["test_detector_lscp.TestLSCP.clf.predict_proba", "test_detector_lscp.TestLSCP.min", "test_detector_lscp.TestLSCP.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_linear", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'linear'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_prediction_proba_unify": [[96, 100], ["test_detector_lscp.TestLSCP.clf.predict_proba", "test_detector_lscp.TestLSCP.min", "test_detector_lscp.TestLSCP.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_unify", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'unify'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_prediction_proba_parameter": [[101, 104], ["numpy.testing.assert_raises", "test_detector_lscp.TestLSCP.clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_parameter", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'something'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.test_fit_predict": [[105, 108], ["test_detector_lscp.TestLSCP.clf.fit_predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "pred_labels", "=", "self", ".", "clf", ".", "fit_predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "pred_labels", ".", "shape", ",", "self", ".", "y_train", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_lscp.TestLSCP.tearDown": [[109, 111], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.setUp": [[28, 43], ["pyod.utils.data.generate_data", "combo.models.detector_comb.SimpleDetectorAggregator", "test_detector_comb.TestAverage.clf.fit", "pyod.models.knn.KNN", "pyod.models.lof.LOF", "pyod.models.ocsvm.OCSVM"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_train", "=", "200", "\n", "self", ".", "n_test", "=", "100", "\n", "self", ".", "contamination", "=", "0.1", "\n", "self", ".", "roc_floor", "=", "0.8", "\n", "self", ".", "X_train", ",", "self", ".", "y_train", ",", "self", ".", "X_test", ",", "self", ".", "y_test", "=", "generate_data", "(", "\n", "n_train", "=", "self", ".", "n_train", ",", "n_test", "=", "self", ".", "n_test", ",", "\n", "contamination", "=", "self", ".", "contamination", ",", "random_state", "=", "42", ")", "\n", "\n", "detectors", "=", "[", "KNN", "(", ")", ",", "LOF", "(", ")", ",", "OCSVM", "(", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleDetectorAggregator", "(", "base_estimators", "=", "detectors", ",", "\n", "method", "=", "'average'", ",", "\n", "contamination", "=", "self", ".", "contamination", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_parameters": [[44, 55], ["hasattr", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'decision_scores_'", ")", "and", "\n", "self", ".", "clf", ".", "decision_scores_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'labels_'", ")", "and", "\n", "self", ".", "clf", ".", "labels_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'threshold_'", ")", "and", "\n", "self", ".", "clf", ".", "threshold_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_mu'", ")", "and", "\n", "self", ".", "clf", ".", "_mu", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_sigma'", ")", "and", "\n", "self", ".", "clf", ".", "_sigma", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_train_scores": [[56, 58], ["numpy.testing.assert_equal", "len"], "methods", ["None"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "len", "(", "self", ".", "clf", ".", "decision_scores_", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_prediction_scores": [[59, 67], ["test_detector_comb.TestAverage.clf.decision_function", "numpy.testing.assert_equal", "sklearn.metrics.roc_auc_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "pred_scores", "=", "self", ".", "clf", ".", "decision_function", "(", "self", ".", "X_test", ")", "\n", "\n", "# check score shapes", "\n", "assert_equal", "(", "pred_scores", ".", "shape", "[", "0", "]", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "pred_scores", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_prediction_labels": [[68, 71], ["test_detector_comb.TestAverage.clf.predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_prediction_labels", "(", "self", ")", ":", "\n", "        ", "pred_labels", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "pred_labels", ".", "shape", ",", "self", ".", "y_test", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_prediction_proba": [[72, 76], ["test_detector_comb.TestAverage.clf.predict_proba", "test_detector_comb.TestAverage.min", "test_detector_comb.TestAverage.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_prediction_proba_linear": [[77, 81], ["test_detector_comb.TestAverage.clf.predict_proba", "test_detector_comb.TestAverage.min", "test_detector_comb.TestAverage.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_linear", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'linear'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_prediction_proba_unify": [[82, 86], ["test_detector_comb.TestAverage.clf.predict_proba", "test_detector_comb.TestAverage.min", "test_detector_comb.TestAverage.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_unify", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'unify'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.test_prediction_proba_parameter": [[87, 90], ["numpy.testing.assert_raises", "test_detector_comb.TestAverage.clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_parameter", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'something'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestAverage.tearDown": [[91, 93], ["None"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.setUp": [[96, 111], ["pyod.utils.data.generate_data", "combo.models.detector_comb.SimpleDetectorAggregator", "test_detector_comb.Maximization.clf.fit", "pyod.models.knn.KNN", "pyod.models.lof.LOF", "pyod.models.ocsvm.OCSVM"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_train", "=", "200", "\n", "self", ".", "n_test", "=", "100", "\n", "self", ".", "contamination", "=", "0.1", "\n", "self", ".", "roc_floor", "=", "0.8", "\n", "self", ".", "X_train", ",", "self", ".", "y_train", ",", "self", ".", "X_test", ",", "self", ".", "y_test", "=", "generate_data", "(", "\n", "n_train", "=", "self", ".", "n_train", ",", "n_test", "=", "self", ".", "n_test", ",", "\n", "contamination", "=", "self", ".", "contamination", ",", "random_state", "=", "42", ")", "\n", "\n", "detectors", "=", "[", "KNN", "(", ")", ",", "LOF", "(", ")", ",", "OCSVM", "(", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleDetectorAggregator", "(", "base_estimators", "=", "detectors", ",", "\n", "method", "=", "'maximization'", ",", "\n", "contamination", "=", "self", ".", "contamination", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_parameters": [[112, 123], ["hasattr", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'decision_scores_'", ")", "and", "\n", "self", ".", "clf", ".", "decision_scores_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'labels_'", ")", "and", "\n", "self", ".", "clf", ".", "labels_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'threshold_'", ")", "and", "\n", "self", ".", "clf", ".", "threshold_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_mu'", ")", "and", "\n", "self", ".", "clf", ".", "_mu", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_sigma'", ")", "and", "\n", "self", ".", "clf", ".", "_sigma", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_train_scores": [[124, 126], ["numpy.testing.assert_equal", "len"], "methods", ["None"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "len", "(", "self", ".", "clf", ".", "decision_scores_", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_prediction_scores": [[127, 135], ["test_detector_comb.Maximization.clf.decision_function", "numpy.testing.assert_equal", "sklearn.metrics.roc_auc_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "pred_scores", "=", "self", ".", "clf", ".", "decision_function", "(", "self", ".", "X_test", ")", "\n", "\n", "# check score shapes", "\n", "assert_equal", "(", "pred_scores", ".", "shape", "[", "0", "]", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "pred_scores", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_prediction_labels": [[136, 139], ["test_detector_comb.Maximization.clf.predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_prediction_labels", "(", "self", ")", ":", "\n", "        ", "pred_labels", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "pred_labels", ".", "shape", ",", "self", ".", "y_test", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_prediction_proba": [[140, 144], ["test_detector_comb.Maximization.clf.predict_proba", "test_detector_comb.Maximization.min", "test_detector_comb.Maximization.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_prediction_proba_linear": [[145, 149], ["test_detector_comb.Maximization.clf.predict_proba", "test_detector_comb.Maximization.min", "test_detector_comb.Maximization.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_linear", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'linear'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_prediction_proba_unify": [[150, 154], ["test_detector_comb.Maximization.clf.predict_proba", "test_detector_comb.Maximization.min", "test_detector_comb.Maximization.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_unify", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'unify'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.test_prediction_proba_parameter": [[155, 158], ["numpy.testing.assert_raises", "test_detector_comb.Maximization.clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_parameter", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'something'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.Maximization.tearDown": [[159, 161], ["None"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.setUp": [[164, 179], ["pyod.utils.data.generate_data", "combo.models.detector_comb.SimpleDetectorAggregator", "test_detector_comb.TestMedian.clf.fit", "pyod.models.knn.KNN", "pyod.models.lof.LOF", "pyod.models.ocsvm.OCSVM"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_train", "=", "200", "\n", "self", ".", "n_test", "=", "100", "\n", "self", ".", "contamination", "=", "0.1", "\n", "self", ".", "roc_floor", "=", "0.8", "\n", "self", ".", "X_train", ",", "self", ".", "y_train", ",", "self", ".", "X_test", ",", "self", ".", "y_test", "=", "generate_data", "(", "\n", "n_train", "=", "self", ".", "n_train", ",", "n_test", "=", "self", ".", "n_test", ",", "\n", "contamination", "=", "self", ".", "contamination", ",", "random_state", "=", "42", ")", "\n", "\n", "detectors", "=", "[", "KNN", "(", ")", ",", "LOF", "(", ")", ",", "OCSVM", "(", ")", "]", "\n", "\n", "self", ".", "clf", "=", "SimpleDetectorAggregator", "(", "base_estimators", "=", "detectors", ",", "\n", "method", "=", "'median'", ",", "\n", "contamination", "=", "self", ".", "contamination", ")", "\n", "self", ".", "clf", ".", "fit", "(", "self", ".", "X_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_parameters": [[180, 191], ["hasattr", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "test_parameters", "(", "self", ")", ":", "\n", "        ", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'decision_scores_'", ")", "and", "\n", "self", ".", "clf", ".", "decision_scores_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'labels_'", ")", "and", "\n", "self", ".", "clf", ".", "labels_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'threshold_'", ")", "and", "\n", "self", ".", "clf", ".", "threshold_", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_mu'", ")", "and", "\n", "self", ".", "clf", ".", "_mu", "is", "not", "None", ")", "\n", "assert", "(", "hasattr", "(", "self", ".", "clf", ",", "'_sigma'", ")", "and", "\n", "self", ".", "clf", ".", "_sigma", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_train_scores": [[192, 194], ["numpy.testing.assert_equal", "len"], "methods", ["None"], ["", "def", "test_train_scores", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "len", "(", "self", ".", "clf", ".", "decision_scores_", ")", ",", "self", ".", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_prediction_scores": [[195, 203], ["test_detector_comb.TestMedian.clf.decision_function", "numpy.testing.assert_equal", "sklearn.metrics.roc_auc_score"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function"], ["", "def", "test_prediction_scores", "(", "self", ")", ":", "\n", "        ", "pred_scores", "=", "self", ".", "clf", ".", "decision_function", "(", "self", ".", "X_test", ")", "\n", "\n", "# check score shapes", "\n", "assert_equal", "(", "pred_scores", ".", "shape", "[", "0", "]", ",", "self", ".", "X_test", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# check performance", "\n", "assert", "(", "roc_auc_score", "(", "self", ".", "y_test", ",", "pred_scores", ")", ">=", "self", ".", "roc_floor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_prediction_labels": [[204, 207], ["test_detector_comb.TestMedian.clf.predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "test_prediction_labels", "(", "self", ")", ":", "\n", "        ", "pred_labels", "=", "self", ".", "clf", ".", "predict", "(", "self", ".", "X_test", ")", "\n", "assert_equal", "(", "pred_labels", ".", "shape", ",", "self", ".", "y_test", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_prediction_proba": [[208, 212], ["test_detector_comb.TestMedian.clf.predict_proba", "test_detector_comb.TestMedian.min", "test_detector_comb.TestMedian.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_prediction_proba_linear": [[213, 217], ["test_detector_comb.TestMedian.clf.predict_proba", "test_detector_comb.TestMedian.min", "test_detector_comb.TestMedian.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_linear", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'linear'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_prediction_proba_unify": [[218, 222], ["test_detector_comb.TestMedian.clf.predict_proba", "test_detector_comb.TestMedian.min", "test_detector_comb.TestMedian.max"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_unify", "(", "self", ")", ":", "\n", "        ", "pred_proba", "=", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'unify'", ")", "\n", "assert", "(", "pred_proba", ".", "min", "(", ")", ">=", "0", ")", "\n", "assert", "(", "pred_proba", ".", "max", "(", ")", "<=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_prediction_proba_parameter": [[223, 226], ["numpy.testing.assert_raises", "test_detector_comb.TestMedian.clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "test_prediction_proba_parameter", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "clf", ".", "predict_proba", "(", "self", ".", "X_test", ",", "proba_method", "=", "'something'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.test_fit_predict": [[227, 230], ["test_detector_comb.TestMedian.clf.fit_predict", "numpy.testing.assert_equal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict"], ["", "", "def", "test_fit_predict", "(", "self", ")", ":", "\n", "        ", "pred_labels", "=", "self", ".", "clf", ".", "fit_predict", "(", "self", ".", "X_train", ")", "\n", "assert_equal", "(", "pred_labels", ".", "shape", ",", "self", ".", "y_train", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_detector_comb.TestMedian.tearDown": [[231, 233], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestScaler.setUp": [[34, 41], ["sklearn.utils.check_random_state", "sklearn.utils.check_random_state.rand", "sklearn.utils.check_random_state.rand", "sklearn.utils.check_random_state.rand", "numpy.array"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "random_state", "=", "check_random_state", "(", "42", ")", "\n", "self", ".", "X_train", "=", "random_state", ".", "rand", "(", "500", ",", "5", ")", "\n", "self", ".", "X_test", "=", "random_state", ".", "rand", "(", "100", ",", "5", ")", "\n", "self", ".", "X_test_diff", "=", "random_state", ".", "rand", "(", "100", ",", "10", ")", "\n", "self", ".", "scores1", "=", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.2", ",", "0.1", "]", "\n", "self", ".", "scores2", "=", "np", ".", "array", "(", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.2", ",", "0.1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestScaler.test_normalization": [[42, 83], ["utils.utility.standardizer", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "utils.utility.standardizer", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "utils.utility.standardizer", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "utils.utility.standardizer", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "utils.utility.standardizer.mean", "utils.utility.standardizer.std", "norm_X_test.mean", "norm_X_test.std", "utils.utility.standardizer.mean", "utils.utility.standardizer.std", "utils.utility.standardizer.mean", "utils.utility.standardizer.std", "norm_X_test.mean", "norm_X_test.std", "AttributeError", "utils.utility.standardizer.mean", "utils.utility.standardizer.std", "AttributeError", "numpy.testing.assert_raises", "utils.utility.standardizer", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.standardizer", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.standardizer", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.standardizer", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.standardizer", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.standardizer"], ["", "def", "test_normalization", "(", "self", ")", ":", "\n", "\n", "# test when X_t is presented and no scalar", "\n", "        ", "norm_X_train", ",", "norm_X_test", "=", "standardizer", "(", "self", ".", "X_train", ",", "self", ".", "X_test", ")", "\n", "assert_allclose", "(", "norm_X_train", ".", "mean", "(", ")", ",", "0", ",", "atol", "=", "0.05", ")", "\n", "assert_allclose", "(", "norm_X_train", ".", "std", "(", ")", ",", "1", ",", "atol", "=", "0.05", ")", "\n", "\n", "assert_allclose", "(", "norm_X_test", ".", "mean", "(", ")", ",", "0", ",", "atol", "=", "0.05", ")", "\n", "assert_allclose", "(", "norm_X_test", ".", "std", "(", ")", ",", "1", ",", "atol", "=", "0.05", ")", "\n", "\n", "# test when X_t is not presented and no scalar", "\n", "norm_X_train", "=", "standardizer", "(", "self", ".", "X_train", ")", "\n", "assert_allclose", "(", "norm_X_train", ".", "mean", "(", ")", ",", "0", ",", "atol", "=", "0.05", ")", "\n", "assert_allclose", "(", "norm_X_train", ".", "std", "(", ")", ",", "1", ",", "atol", "=", "0.05", ")", "\n", "\n", "# test when X_t is presented and the scalar is kept", "\n", "norm_X_train", ",", "norm_X_test", ",", "scalar", "=", "standardizer", "(", "self", ".", "X_train", ",", "\n", "self", ".", "X_test", ",", "\n", "keep_scalar", "=", "True", ")", "\n", "\n", "assert_allclose", "(", "norm_X_train", ".", "mean", "(", ")", ",", "0", ",", "atol", "=", "0.05", ")", "\n", "assert_allclose", "(", "norm_X_train", ".", "std", "(", ")", ",", "1", ",", "atol", "=", "0.05", ")", "\n", "\n", "assert_allclose", "(", "norm_X_test", ".", "mean", "(", ")", ",", "0", ",", "atol", "=", "0.05", ")", "\n", "assert_allclose", "(", "norm_X_test", ".", "std", "(", ")", ",", "1", ",", "atol", "=", "0.05", ")", "\n", "\n", "if", "not", "hasattr", "(", "scalar", ",", "'fit'", ")", "or", "not", "hasattr", "(", "scalar", ",", "'transform'", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"%s is not a detector instance.\"", "%", "(", "scalar", ")", ")", "\n", "\n", "# test when X_t is not presented and the scalar is kept", "\n", "", "norm_X_train", ",", "scalar", "=", "standardizer", "(", "self", ".", "X_train", ",", "keep_scalar", "=", "True", ")", "\n", "\n", "assert_allclose", "(", "norm_X_train", ".", "mean", "(", ")", ",", "0", ",", "atol", "=", "0.05", ")", "\n", "assert_allclose", "(", "norm_X_train", ".", "std", "(", ")", ",", "1", ",", "atol", "=", "0.05", ")", "\n", "\n", "if", "not", "hasattr", "(", "scalar", ",", "'fit'", ")", "or", "not", "hasattr", "(", "scalar", ",", "'transform'", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"%s is not a detector instance.\"", "%", "(", "scalar", ")", ")", "\n", "\n", "# test shape difference", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "standardizer", "(", "self", ".", "X_train", ",", "self", ".", "X_test_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestScaler.test_invert_order": [[84, 95], ["numpy.array().ravel", "utils.utility.invert_order", "numpy.testing.assert_allclose", "utils.utility.invert_order", "numpy.testing.assert_allclose", "numpy.array().ravel", "utils.utility.invert_order", "numpy.testing.assert_allclose", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.invert_order", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.invert_order", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.invert_order"], ["", "", "def", "test_invert_order", "(", "self", ")", ":", "\n", "        ", "target", "=", "np", ".", "array", "(", "[", "-", "0.1", ",", "-", "0.3", ",", "-", "0.5", ",", "-", "0.7", ",", "-", "0.2", ",", "-", "0.1", "]", ")", ".", "ravel", "(", ")", "\n", "scores1", "=", "invert_order", "(", "self", ".", "scores1", ")", "\n", "assert_allclose", "(", "scores1", ",", "target", ")", "\n", "\n", "scores2", "=", "invert_order", "(", "self", ".", "scores2", ")", "\n", "assert_allclose", "(", "scores2", ",", "target", ")", "\n", "\n", "target", "=", "np", ".", "array", "(", "[", "0.6", ",", "0.4", ",", "0.2", ",", "0", ",", "0.5", ",", "0.6", "]", ")", ".", "ravel", "(", ")", "\n", "scores2", "=", "invert_order", "(", "self", ".", "scores2", ",", "method", "=", "'subtraction'", ")", "\n", "assert_allclose", "(", "scores2", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestScaler.tearDown": [[96, 98], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.setUp": [[102, 109], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "y", "=", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", "\n", "self", ".", "labels_", "=", "[", "0.1", ",", "0.2", ",", "0.2", ",", "0.8", ",", "0.2", ",", "0.5", ",", "0.7", ",", "0.9", ",", "1", ",", "0.3", "]", "\n", "self", ".", "labels_short_", "=", "[", "0.1", ",", "0.2", ",", "0.2", ",", "0.8", ",", "0.2", ",", "0.5", ",", "0.7", ",", "0.9", ",", "1", "]", "\n", "self", ".", "manual_labels", "=", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "self", ".", "outliers_fraction", "=", "0.3", "\n", "self", ".", "value_lists", "=", "[", "0.1", ",", "0.3", ",", "0.2", ",", "-", "2", ",", "1.5", ",", "0", ",", "1", ",", "-", "1", ",", "-", "0.5", ",", "11", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_precision_n_scores": [[110, 113], ["numpy.testing.assert_equal", "sklearn.metrics.precision_score", "utils.utility.precision_n_scores"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.precision_n_scores"], ["", "def", "test_precision_n_scores", "(", "self", ")", ":", "\n", "        ", "assert_equal", "(", "precision_score", "(", "self", ".", "y", ",", "self", ".", "manual_labels", ")", ",", "\n", "precision_n_scores", "(", "self", ".", "y", ",", "self", ".", "labels_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_get_label_n": [[114, 117], ["numpy.testing.assert_allclose", "utils.utility.get_label_n"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.get_label_n"], ["", "def", "test_get_label_n", "(", "self", ")", ":", "\n", "        ", "assert_allclose", "(", "self", ".", "manual_labels", ",", "\n", "get_label_n", "(", "self", ".", "y", ",", "self", ".", "labels_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_get_label_n_equal_3": [[118, 122], ["numpy.testing.assert_allclose", "utils.utility.get_label_n"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.get_label_n"], ["", "def", "test_get_label_n_equal_3", "(", "self", ")", ":", "\n", "        ", "manual_labels", "=", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "assert_allclose", "(", "manual_labels", ",", "\n", "get_label_n", "(", "self", ".", "y", ",", "self", ".", "labels_", ",", "n", "=", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_inconsistent_length": [[123, 126], ["numpy.testing.assert_raises", "utils.utility.get_label_n"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.get_label_n"], ["", "def", "test_inconsistent_length", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "get_label_n", "(", "self", ".", "y", ",", "self", ".", "labels_short_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_score_to_label": [[127, 134], ["utils.utility.score_to_label", "numpy.testing.assert_allclose", "utils.utility.score_to_label", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.score_to_label", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.score_to_label"], ["", "", "def", "test_score_to_label", "(", "self", ")", ":", "\n", "        ", "manual_scores", "=", "[", "0.1", ",", "0.4", ",", "0.2", ",", "0.3", ",", "0.5", ",", "0.9", ",", "0.7", ",", "1", ",", "0.8", ",", "0.6", "]", "\n", "labels", "=", "score_to_label", "(", "manual_scores", ",", "outliers_fraction", "=", "0.1", ")", "\n", "assert_allclose", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ")", "\n", "\n", "labels", "=", "score_to_label", "(", "manual_scores", ",", "outliers_fraction", "=", "0.3", ")", "\n", "assert_allclose", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_score_to_proba": [[135, 139], ["numpy.array", "utils.utility.score_to_proba", "numpy.testing.assert_allclose", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.score_to_proba"], ["", "def", "test_score_to_proba", "(", "self", ")", ":", "\n", "        ", "manual_scores", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "1", ",", "8", ",", "1", "]", "]", ")", "\n", "proba", "=", "score_to_proba", "(", "manual_scores", ")", "\n", "assert_allclose", "(", "proba", ",", "np", ".", "array", "(", "[", "[", "0.25", ",", "0.5", ",", "0.25", "]", ",", "[", "0.1", ",", "0.8", ",", "0.1", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_list_diff": [[140, 145], ["utils.utility.list_diff", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.list_diff"], ["", "def", "test_list_diff", "(", "self", ")", ":", "\n", "        ", "list1", "=", "[", "1", ",", "2", ",", "5", ",", "6", ",", "7", "]", "\n", "list2", "=", "[", "2", ",", "3", ",", "4", "]", "\n", "diff", "=", "list_diff", "(", "list1", ",", "list2", ")", "\n", "assert_allclose", "(", "diff", ",", "[", "1", ",", "5", ",", "6", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.test_argmaxn": [[146, 160], ["utils.utility.argmaxn", "numpy.testing.assert_equal", "utils.utility.argmaxn", "numpy.testing.assert_equal", "utils.utility.argmaxn", "numpy.testing.assert_equal", "len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.testing.assert_raises", "utils.utility.argmaxn", "numpy.testing.assert_raises", "utils.utility.argmaxn"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.argmaxn", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.argmaxn", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.argmaxn", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.argmaxn", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.argmaxn"], ["", "def", "test_argmaxn", "(", "self", ")", ":", "\n", "        ", "ind", "=", "argmaxn", "(", "self", ".", "value_lists", ",", "3", ")", "\n", "assert_equal", "(", "len", "(", "ind", ")", ",", "3", ")", "\n", "\n", "ind", "=", "argmaxn", "(", "self", ".", "value_lists", ",", "3", ")", "\n", "assert_equal", "(", "np", ".", "sum", "(", "ind", ")", ",", "np", ".", "sum", "(", "[", "4", ",", "6", ",", "9", "]", ")", ")", "\n", "\n", "ind", "=", "argmaxn", "(", "self", ".", "value_lists", ",", "3", ",", "order", "=", "'asc'", ")", "\n", "assert_equal", "(", "np", ".", "sum", "(", "ind", ")", ",", "np", ".", "sum", "(", "[", "3", ",", "7", ",", "8", "]", ")", ")", "\n", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "argmaxn", "(", "self", ".", "value_lists", ",", "-", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "argmaxn", "(", "self", ".", "value_lists", ",", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestMetrics.tearDown": [[161, 163], ["None"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestCheckDetector.setUp": [[167, 184], ["DummyPostiveModel", "DummyNegativeModel"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "class", "DummyNegativeModel", "(", ")", ":", "\n", "            ", "def", "fit_negative", "(", "self", ")", ":", "\n", "                ", "return", "\n", "\n", "", "def", "decision_function_negative", "(", "self", ")", ":", "\n", "                ", "return", "\n", "\n", "", "", "class", "DummyPostiveModel", "(", ")", ":", "\n", "            ", "def", "fit", "(", "self", ")", ":", "\n", "                ", "return", "\n", "\n", "", "def", "decision_function", "(", "self", ")", ":", "\n", "                ", "return", "\n", "\n", "", "", "self", ".", "detector_positive", "=", "DummyPostiveModel", "(", ")", "\n", "self", ".", "detector_negative", "=", "DummyNegativeModel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestCheckDetector.test_check_detector_positive": [[185, 187], ["utils.utility.check_detector"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.check_detector"], ["", "def", "test_check_detector_positive", "(", "self", ")", ":", "\n", "        ", "check_detector", "(", "self", ".", "detector_positive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.test.test_utility.TestCheckDetector.test_check_detector_negative": [[188, 191], ["numpy.testing.assert_raises", "utils.utility.check_detector"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.check_detector"], ["", "def", "test_check_detector_negative", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "AttributeError", ")", ":", "\n", "            ", "check_detector", "(", "self", ".", "detector_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator.__init__": [[68, 97], ["base.BaseAggregator.__init__", "ValueError", "ValueError", "numpy.ones", "sklearn.utils.column_or_1d().reshape", "len", "numpy.sum", "sklearn.utils.column_or_1d"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "method", "=", "'average'", ",", "contamination", "=", "0.1", ",", "\n", "standardization", "=", "True", ",", "weights", "=", "None", ",", "pre_fitted", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SimpleDetectorAggregator", ",", "self", ")", ".", "__init__", "(", "\n", "base_estimators", "=", "base_estimators", ",", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "# validate input parameters", "\n", "if", "method", "not", "in", "[", "'average'", ",", "'maximization'", ",", "'median'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"{method} is not a valid parameter.\"", ".", "format", "(", "\n", "method", "=", "method", ")", ")", "\n", "", "self", ".", "method", "=", "method", "\n", "\n", "if", "not", "(", "0.", "<", "contamination", "<=", "0.5", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"contamination must be in (0, 0.5], \"", "\n", "\"got: %f\"", "%", "contamination", ")", "\n", "", "self", ".", "contamination", "=", "contamination", "\n", "\n", "self", ".", "standardization", "=", "standardization", "\n", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "np", ".", "ones", "(", "[", "1", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "weights", "=", "column_or_1d", "(", "weights", ")", ".", "reshape", "(", "1", ",", "len", "(", "weights", ")", ")", "\n", "assert", "(", "self", ".", "weights", ".", "shape", "[", "1", "]", "==", "self", ".", "n_base_estimators_", ")", "\n", "\n", "# adjust probability by a factor for integrity", "\n", "adjust_factor", "=", "self", ".", "weights", ".", "shape", "[", "1", "]", "/", "np", ".", "sum", "(", "weights", ")", "\n", "self", ".", "weights", "=", "self", ".", "weights", "*", "adjust_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator.fit": [[98, 131], ["sklearn.utils.check_array", "detector_comb.SimpleDetectorAggregator._set_n_classes", "detector_comb.SimpleDetectorAggregator._create_scores", "detector_comb.SimpleDetectorAggregator._process_decision_scores", "print", "clf.fit"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_n_classes", "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator._create_scores", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._process_decision_scores", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit detector. y is optional for unsupervised methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels_ : numpy array of shape (n_samples,)\n            Return the generated labels.\n\n        \"\"\"", "\n", "\n", "# Validate inputs X and y", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "self", ".", "_set_n_classes", "(", "y", ")", "\n", "\n", "if", "self", ".", "pre_fitted", ":", "\n", "            ", "print", "(", "\"Training skipped\"", ")", "\n", "", "else", ":", "\n", "            ", "for", "clf", "in", "self", ".", "base_estimators", ":", "\n", "                ", "clf", ".", "fit", "(", "X", ",", "y", ")", "\n", "clf", ".", "fitted_", "=", "True", "\n", "\n", "", "", "self", ".", "decision_scores_", "=", "self", ".", "_create_scores", "(", "X", ")", "\n", "self", ".", "_process_decision_scores", "(", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator._create_scores": [[132, 164], ["numpy.zeros", "enumerate", "hasattr", "pyod.utils.utility.standardizer", "score_comb.average", "score_comb.maximization", "score_comb.median", "clf.decision_function", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.standardizer", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.average", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.maximization", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.median", "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function"], ["", "def", "_create_scores", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Internal function to generate and combine scores.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        agg_score: numpy array of shape (n_samples,)\n            Aggregated scores.\n        \"\"\"", "\n", "all_scores", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "for", "i", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "if", "hasattr", "(", "clf", ",", "'decision_function'", ")", ":", "\n", "                ", "all_scores", "[", ":", ",", "i", "]", "=", "clf", ".", "decision_function", "(", "X", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"{clf} does not have decision_function.\"", ".", "format", "(", "clf", "=", "clf", ")", ")", "\n", "\n", "", "", "if", "self", ".", "standardization", ":", "\n", "            ", "all_scores", "=", "standardizer", "(", "all_scores", ")", "\n", "", "if", "self", ".", "method", "==", "'average'", ":", "\n", "            ", "agg_score", "=", "average", "(", "all_scores", ",", "estimator_weights", "=", "self", ".", "weights", ")", "\n", "", "if", "self", ".", "method", "==", "'maximization'", ":", "\n", "            ", "agg_score", "=", "maximization", "(", "all_scores", ")", "\n", "", "if", "self", ".", "method", "==", "'median'", ":", "\n", "            ", "agg_score", "=", "median", "(", "all_scores", ")", "\n", "\n", "", "return", "agg_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator.decision_function": [[165, 188], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "detector_comb.SimpleDetectorAggregator._create_scores"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator._create_scores"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict raw anomaly scores of X using the fitted detector.\n\n        The anomaly score of an input sample is computed based on the fitted\n        detector. For consistency, outliers are assigned with\n        higher anomaly scores.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples. Sparse matrices are accepted only\n            if they are supported by the base estimator.\n\n        Returns\n        -------\n        anomaly_scores : numpy array of shape (n_samples,)\n            The anomaly score of the input samples.\n        \"\"\"", "\n", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "\n", "return", "self", ".", "_create_scores", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator.predict": [[189, 207], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "detector_comb.SimpleDetectorAggregator._detector_predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._detector_predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict if a particular sample is an outlier or not.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        outlier_labels : numpy array of shape (n_samples,)\n            For each observation, tells whether or not\n            it should be considered as an outlier according to the\n            fitted model. 0 stands for inliers and 1 for outliers.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "return", "self", ".", "_detector_predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator.predict_proba": [[208, 238], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "detector_comb.SimpleDetectorAggregator._detector_predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._detector_predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ",", "proba_method", "=", "'linear'", ")", ":", "\n", "        ", "\"\"\"Predict the probability of a sample being outlier. Two approaches\n        are possible:\n\n        1. simply use Min-max conversion to linearly transform the outlier\n           scores into the range of [0,1]. The model must be\n           fitted first.\n        2. use unifying scores, see :cite:`kriegel2011interpreting`.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        proba_method : str, optional (default='linear')\n            Probability conversion method. It must be one of\n            'linear' or 'unify'.\n\n        Returns\n        -------\n        outlier_labels : numpy array of shape (n_samples,)\n            For each observation, tells whether or not\n            it should be considered as an outlier according to the\n            fitted model. Return the outlier probability, ranging\n            in [0,1].\n        \"\"\"", "\n", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "return", "self", ".", "_detector_predict_proba", "(", "X", ",", "proba_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_comb.SimpleDetectorAggregator.fit_predict": [[239, 258], ["detector_comb.SimpleDetectorAggregator.fit", "detector_comb.SimpleDetectorAggregator.predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X. y is optional for unsupervised\n        methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "predict", "(", "X", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.__init__": [[38, 46], ["isinstance", "len", "len", "ValueError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "base_estimators", ",", "pre_fitted", "=", "False", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "base_estimators", ",", "(", "list", ")", ")", ")", "\n", "if", "len", "(", "base_estimators", ")", "<", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'At least 2 estimators are required'", ")", "\n", "", "self", ".", "base_estimators", "=", "base_estimators", "\n", "self", ".", "n_base_estimators_", "=", "len", "(", "self", ".", "base_estimators", ")", "\n", "self", ".", "pre_fitted", "=", "pre_fitted", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.fit": [[47, 64], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit estimator. y is optional for unsupervised methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.fit_predict": [[66, 85], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X. y is optional for unsupervised\n        methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.predict": [[86, 101], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.predict_proba": [[102, 118], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Return probability estimates for the test data X.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        p : numpy array of shape (n_samples,)\n            The class probabilities of the input samples.\n            Classes are ordered by lexicographic order.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._process_decision_scores": [[119, 142], ["numpy.percentile", "numpy.mean", "numpy.std"], "methods", ["None"], ["", "def", "_process_decision_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"Internal function to calculate key attributes for outlier detection\n        combination tasks.\n\n        - threshold_: used to decide the binary label\n        - labels_: binary labels of training data\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "\n", "self", ".", "threshold_", "=", "percentile", "(", "self", ".", "decision_scores_", ",", "\n", "100", "*", "(", "1", "-", "self", ".", "contamination", ")", ")", "\n", "self", ".", "labels_", "=", "(", "self", ".", "decision_scores_", ">", "self", ".", "threshold_", ")", ".", "astype", "(", "\n", "'int'", ")", ".", "ravel", "(", ")", "\n", "\n", "# calculate for predict_proba()", "\n", "\n", "self", ".", "_mu", "=", "np", ".", "mean", "(", "self", ".", "decision_scores_", ")", "\n", "self", ".", "_sigma", "=", "np", ".", "std", "(", "self", ".", "decision_scores_", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._detector_predict": [[143, 164], ["sklearn.utils.validation.check_is_fitted", "base.BaseAggregator.decision_function"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function"], ["", "def", "_detector_predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Internal function to predict if a particular sample is an\n        outlier or not.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        outlier_labels : numpy array of shape (n_samples,)\n            For each observation, tells whether or not\n            it should be considered as an outlier according to the\n            fitted model. 0 stands for inliers and 1 for outliers.\n        \"\"\"", "\n", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "\n", "pred_score", "=", "self", ".", "decision_function", "(", "X", ")", "\n", "return", "(", "pred_score", ">", "self", ".", "threshold_", ")", ".", "astype", "(", "'int'", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._detector_predict_proba": [[165, 216], ["sklearn.utils.validation.check_is_fitted", "base.BaseAggregator.decision_function", "numpy.zeros", "sklearn.preprocessing.MinMaxScaler().fit", "sklearn.preprocessing.MinMaxScaler().fit.transform().ravel().clip", "int", "train_scores.reshape", "scipy.special.erf", "scipy.special.erf.clip().ravel", "ValueError", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.MinMaxScaler().fit.transform().ravel", "numpy.sqrt", "scipy.special.erf.clip", "sklearn.preprocessing.MinMaxScaler().fit.transform", "base.BaseAggregator.reshape"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "def", "_detector_predict_proba", "(", "self", ",", "X", ",", "proba_method", "=", "'linear'", ")", ":", "\n", "        ", "\"\"\"Predict the probability of a sample being outlier. Two approaches\n        are possible:\n\n        1. simply use Min-max conversion to linearly transform the outlier\n           scores into the range of [0,1]. The model must be\n           fitted first.\n        2. use unifying scores, see :cite:`kriegel2011interpreting`.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        proba_method : str, optional (default='linear')\n            Probability conversion method. It must be one of\n            'linear' or 'unify'.\n\n        Returns\n        -------\n        outlier_labels : numpy array of shape (n_samples,)\n            For each observation, tells whether or not\n            it should be considered as an outlier according to the\n            fitted model. Return the outlier probability, ranging\n            in [0,1].\n        \"\"\"", "\n", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "train_scores", "=", "self", ".", "decision_scores_", "\n", "\n", "test_scores", "=", "self", ".", "decision_function", "(", "X", ")", "\n", "\n", "probs", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "int", "(", "self", ".", "_classes", ")", "]", ")", "\n", "if", "proba_method", "==", "'linear'", ":", "\n", "            ", "scaler", "=", "MinMaxScaler", "(", ")", ".", "fit", "(", "train_scores", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "probs", "[", ":", ",", "1", "]", "=", "scaler", ".", "transform", "(", "\n", "test_scores", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "ravel", "(", ")", ".", "clip", "(", "0", ",", "1", ")", "\n", "probs", "[", ":", ",", "0", "]", "=", "1", "-", "probs", "[", ":", ",", "1", "]", "\n", "return", "probs", "\n", "\n", "", "elif", "proba_method", "==", "'unify'", ":", "\n", "# turn output into probability", "\n", "            ", "pre_erf_score", "=", "(", "test_scores", "-", "self", ".", "_mu", ")", "/", "(", "\n", "self", ".", "_sigma", "*", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "erf_score", "=", "erf", "(", "pre_erf_score", ")", "\n", "probs", "[", ":", ",", "1", "]", "=", "erf_score", ".", "clip", "(", "0", ",", "1", ")", ".", "ravel", "(", ")", "\n", "probs", "[", ":", ",", "0", "]", "=", "1", "-", "probs", "[", ":", ",", "1", "]", "\n", "return", "probs", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "proba_method", ",", "\n", "'is not a valid probability conversion method'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_n_classes": [[217, 236], ["sklearn.utils.multiclass.check_classification_targets", "len", "numpy.unique"], "methods", ["None"], ["", "", "def", "_set_n_classes", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"Set the number of classes if `y` is presented.\n\n        Parameters\n        ----------\n        y : numpy array of shape (n_samples,)\n            Ground truth.\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "\n", "self", ".", "_classes", "=", "2", "# default as binary classification", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "check_classification_targets", "(", "y", ")", "\n", "self", ".", "_classes", "=", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_weights": [[237, 263], ["numpy.ones", "sklearn.utils.column_or_1d().reshape", "print", "len", "numpy.sum", "sklearn.utils.column_or_1d"], "methods", ["None"], ["", "def", "_set_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "\"\"\"Internal function to set estimator weights.\n\n        Parameters\n        ----------\n        weights : numpy array of shape (n_estimators,)\n            Estimator weights. May be used after the alignment.\n\n        Returns\n        -------\n        self\n\n        \"\"\"", "\n", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "np", ".", "ones", "(", "[", "1", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weights", "=", "column_or_1d", "(", "weights", ")", ".", "reshape", "(", "1", ",", "len", "(", "weights", ")", ")", "\n", "assert", "(", "self", ".", "weights", ".", "shape", "[", "1", "]", "==", "self", ".", "n_base_estimators_", ")", "\n", "\n", "# adjust probability by a factor for integrity \uff08added to 1\uff09", "\n", "adjust_factor", "=", "self", ".", "weights", ".", "shape", "[", "1", "]", "/", "np", ".", "sum", "(", "weights", ")", "\n", "self", ".", "weights", "=", "self", ".", "weights", "*", "adjust_factor", "\n", "\n", "print", "(", "self", ".", "weights", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.__len__": [[264, 267], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of estimators in the ensemble.\"\"\"", "\n", "return", "len", "(", "self", ".", "base_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.__getitem__": [[268, 271], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns the index'th estimator in the ensemble.\"\"\"", "\n", "return", "self", ".", "base_estimators", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.__iter__": [[272, 275], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns iterator over estimators in the ensemble.\"\"\"", "\n", "return", "iter", "(", "self", ".", "base_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._get_param_names": [[277, 308], ["getattr", "inspect.signature", "sorted", "inspect.signature.parameters.values", "RuntimeError"], "methods", ["None"], ["", "def", "_get_param_names", "(", "cls", ")", ":", "\n", "# noinspection PyPep8", "\n", "        ", "\"\"\"Get parameter names for the estimator\n\n        See http://scikit-learn.org/stable/modules/generated/sklearn.base.BaseEstimator.html\n        and sklearn/base.py for more information.\n        \"\"\"", "\n", "\n", "# fetch the constructor or the original constructor before", "\n", "# deprecation wrapping if any", "\n", "init", "=", "getattr", "(", "cls", ".", "__init__", ",", "'deprecated_original'", ",", "cls", ".", "__init__", ")", "\n", "if", "init", "is", "object", ".", "__init__", ":", "\n", "# No explicit constructor to introspect", "\n", "            ", "return", "[", "]", "\n", "\n", "# introspect the constructor arguments to find the model parameters", "\n", "# to represent", "\n", "", "init_signature", "=", "signature", "(", "init", ")", "\n", "# Consider the constructor parameters excluding 'self'", "\n", "parameters", "=", "[", "p", "for", "p", "in", "init_signature", ".", "parameters", ".", "values", "(", ")", "\n", "if", "p", ".", "name", "!=", "'self'", "and", "p", ".", "kind", "!=", "p", ".", "VAR_KEYWORD", "]", "\n", "for", "p", "in", "parameters", ":", "\n", "            ", "if", "p", ".", "kind", "==", "p", ".", "VAR_POSITIONAL", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"scikit-learn estimators should always \"", "\n", "\"specify their parameters in the signature\"", "\n", "\" of their __init__ (no varargs).\"", "\n", "\" %s with constructor %s doesn't \"", "\n", "\" follow this convention.\"", "\n", "%", "(", "cls", ",", "init_signature", ")", ")", "\n", "# Extract and sort argument names excluding 'self'", "\n", "", "", "return", "sorted", "(", "[", "p", ".", "name", "for", "p", "in", "parameters", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.get_params": [[310, 350], ["dict", "base.BaseAggregator._get_param_names", "warnings.simplefilter", "warnings.filters.pop", "hasattr", "getattr.get_params().items", "dict.update", "warnings.catch_warnings", "getattr", "len", "getattr.get_params"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._get_param_names", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.get_params"], ["", "def", "get_params", "(", "self", ",", "deep", "=", "True", ")", ":", "\n", "        ", "\"\"\"Get parameters for this estimator.\n\n        See http://scikit-learn.org/stable/modules/generated/sklearn.base.BaseEstimator.html\n        and sklearn/base.py for more information.\n\n        Parameters\n        ----------\n        deep : boolean, optional\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.\n\n        Returns\n        -------\n        params : mapping of string to any\n            Parameter names mapped to their values.\n        \"\"\"", "\n", "\n", "out", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "_get_param_names", "(", ")", ":", "\n", "# We need deprecation warnings to always be on in order to", "\n", "# catch deprecated param values.", "\n", "# This is set in utils/__init__.py but it gets overwritten", "\n", "# when running under python3 somehow.", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"always\"", ",", "DeprecationWarning", ")", "\n", "try", ":", "\n", "                ", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "w", ":", "\n", "                    ", "value", "=", "getattr", "(", "self", ",", "key", ",", "None", ")", "\n", "", "if", "len", "(", "w", ")", "and", "w", "[", "0", "]", ".", "category", "==", "DeprecationWarning", ":", "\n", "# if the parameter is deprecated, don't show it", "\n", "                    ", "continue", "\n", "", "", "finally", ":", "\n", "                ", "warnings", ".", "filters", ".", "pop", "(", "0", ")", "\n", "\n", "# XXX: should we rather test if instance of estimator?", "\n", "", "if", "deep", "and", "hasattr", "(", "value", ",", "'get_params'", ")", ":", "\n", "                ", "deep_items", "=", "value", ".", "get_params", "(", ")", ".", "items", "(", ")", "\n", "out", ".", "update", "(", "(", "key", "+", "'__'", "+", "k", ",", "val", ")", "for", "k", ",", "val", "in", "deep_items", ")", "\n", "", "out", "[", "key", "]", "=", "value", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.set_params": [[351, 390], ["base.BaseAggregator.get_params", "collections.defaultdict", "params.items", "collections.defaultdict.items", "key.partition", "valid_params[].set_params", "ValueError", "setattr"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.get_params", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.set_params"], ["", "def", "set_params", "(", "self", ",", "**", "params", ")", ":", "\n", "# noinspection PyPep8", "\n", "        ", "\"\"\"Set the parameters of this estimator.\n        The method works on simple estimators as well as on nested objects\n        (such as pipelines). The latter have parameters of the form\n        ``<component>__<parameter>`` so that it's possible to update each\n        component of a nested object.\n\n        See http://scikit-learn.org/stable/modules/generated/sklearn.base.BaseEstimator.html\n        and sklearn/base.py for more information.\n\n        Returns\n        -------\n        self : object\n        \"\"\"", "\n", "\n", "if", "not", "params", ":", "\n", "# Simple optimization to gain speed (inspect is slow)", "\n", "            ", "return", "self", "\n", "", "valid_params", "=", "self", ".", "get_params", "(", "deep", "=", "True", ")", "\n", "\n", "nested_params", "=", "defaultdict", "(", "dict", ")", "# grouped by prefix", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "key", ",", "delim", ",", "sub_key", "=", "key", ".", "partition", "(", "'__'", ")", "\n", "if", "key", "not", "in", "valid_params", ":", "\n", "                ", "raise", "ValueError", "(", "'Invalid parameter %s for estimator %s. '", "\n", "'Check the list of available parameters '", "\n", "'with `estimator.get_params().keys()`.'", "%", "\n", "(", "key", ",", "self", ")", ")", "\n", "\n", "", "if", "delim", ":", "\n", "                ", "nested_params", "[", "key", "]", "[", "sub_key", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n", "", "", "for", "key", ",", "sub_params", "in", "nested_params", ".", "items", "(", ")", ":", "\n", "            ", "valid_params", "[", "key", "]", ".", "set_params", "(", "**", "sub_params", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.__repr__": [[391, 401], ["sklearn_base._pprint", "base.BaseAggregator.get_params", "len"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.sklearn_base._pprint", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator.get_params"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "# noinspection PyPep8", "\n", "        ", "\"\"\"\n        See http://scikit-learn.org/stable/modules/generated/sklearn.base.BaseEstimator.html\n        and sklearn/base.py for more information.\n        \"\"\"", "\n", "\n", "class_name", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "'%s(%s)'", "%", "(", "class_name", ",", "_pprint", "(", "self", ".", "get_params", "(", "deep", "=", "False", ")", ",", "\n", "offset", "=", "len", "(", "class_name", ")", ",", ")", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb._aom_moa_helper": [[22, 133], ["sklearn.utils.check_array", "pyod.utils.utility.check_parameter", "numpy.zeros", "NotImplementedError", "int", "numpy.mean", "numpy.max", "ValueError", "sklearn.utils.shuffle", "range", "range", "range", "NotImplementedError", "list", "int", "sklearn.utils.random.sample_without_replacement", "numpy.random.RandomState().randint", "sklearn.utils.random.sample_without_replacement", "range", "numpy.max", "numpy.mean", "numpy.max", "numpy.mean", "int", "numpy.max", "numpy.mean", "numpy.random.RandomState"], "function", ["None"], ["def", "_aom_moa_helper", "(", "mode", ",", "scores", ",", "n_buckets", ",", "method", ",", "bootstrap_estimators", ",", "\n", "random_state", ")", ":", "\n", "    ", "\"\"\"Internal helper function for Average of Maximum (AOM) and\n    Maximum of Average (MOA). See :cite:`aggarwal2015theoretical` for details.\n\n    First dividing estimators into subgroups, take the maximum/average score\n    as the subgroup score. Finally, take the average/maximum of all subgroup \n    scores.\n\n    Parameters\n    ----------\n    mode : str\n        Define the operation model, either \"AOM\" or \"MOA\".\n\n    scores : numpy array of shape (n_samples, n_estimators)\n        The score matrix outputted from various estimators.\n\n    n_buckets : int, optional (default=5)\n        The number of subgroups to build.\n\n    method : str, optional (default='static')\n        {'static', 'dynamic'}, if 'dynamic', build subgroups\n        randomly with dynamic bucket size.\n\n    bootstrap_estimators : bool, optional (default=False)\n        Whether estimators are drawn with replacement.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the\n        random number generator; If RandomState instance, random_state is\n        the random number generator; If None, the random number generator\n        is the RandomState instance used by `np.random`.\n\n    Returns\n    -------\n    combined_scores : Numpy array of shape (n_samples,)\n        The combined scores.\n\n    \"\"\"", "\n", "\n", "if", "mode", "!=", "'AOM'", "and", "mode", "!=", "'MOA'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'{mode} is not implemented'", ".", "format", "(", "mode", "=", "mode", ")", ")", "\n", "\n", "", "scores", "=", "check_array", "(", "scores", ")", "\n", "# TODO: add one more parameter for max number of estimators", "\n", "# use random_state instead", "\n", "# for now it is fixed at n_estimators/2", "\n", "n_estimators", "=", "scores", ".", "shape", "[", "1", "]", "\n", "check_parameter", "(", "n_buckets", ",", "2", ",", "n_estimators", ",", "include_left", "=", "True", ",", "\n", "include_right", "=", "True", ",", "param_name", "=", "'n_buckets'", ")", "\n", "\n", "scores_buckets", "=", "np", ".", "zeros", "(", "[", "scores", ".", "shape", "[", "0", "]", ",", "n_buckets", "]", ")", "\n", "\n", "if", "method", "==", "'static'", ":", "\n", "\n", "        ", "n_estimators_per_bucket", "=", "int", "(", "n_estimators", "/", "n_buckets", ")", "\n", "if", "n_estimators", "%", "n_buckets", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'n_estimators / n_buckets has a remainder. Not '", "\n", "'allowed in static mode.'", ")", "\n", "\n", "", "if", "not", "bootstrap_estimators", ":", "\n", "# shuffle the estimator order", "\n", "            ", "shuffled_list", "=", "shuffle", "(", "list", "(", "range", "(", "0", ",", "n_estimators", ",", "1", ")", ")", ",", "\n", "random_state", "=", "random_state", ")", "\n", "\n", "head", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "n_estimators", ",", "n_estimators_per_bucket", ")", ":", "\n", "                ", "tail", "=", "i", "+", "n_estimators_per_bucket", "\n", "batch_ind", "=", "int", "(", "i", "/", "n_estimators_per_bucket", ")", "\n", "if", "mode", "==", "'AOM'", ":", "\n", "                    ", "scores_buckets", "[", ":", ",", "batch_ind", "]", "=", "np", ".", "max", "(", "\n", "scores", "[", ":", ",", "shuffled_list", "[", "head", ":", "tail", "]", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "scores_buckets", "[", ":", ",", "batch_ind", "]", "=", "np", ".", "mean", "(", "\n", "scores", "[", ":", ",", "shuffled_list", "[", "head", ":", "tail", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# increment index", "\n", "", "head", "=", "head", "+", "n_estimators_per_bucket", "\n", "# noinspection PyUnusedLocal", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "n_buckets", ")", ":", "\n", "                ", "ind", "=", "sample_without_replacement", "(", "n_estimators", ",", "\n", "n_estimators_per_bucket", ",", "\n", "random_state", "=", "random_state", ")", "\n", "if", "mode", "==", "'AOM'", ":", "\n", "                    ", "scores_buckets", "[", ":", ",", "i", "]", "=", "np", ".", "max", "(", "scores", "[", ":", ",", "ind", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "scores_buckets", "[", ":", ",", "i", "]", "=", "np", ".", "mean", "(", "scores", "[", ":", ",", "ind", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "", "elif", "method", "==", "'dynamic'", ":", "# random bucket size", "\n", "        ", "for", "i", "in", "range", "(", "n_buckets", ")", ":", "\n", "# the number of estimators in a bucket should be 2 - n/2", "\n", "            ", "max_estimator_per_bucket", "=", "RandomState", "(", "seed", "=", "random_state", ")", ".", "randint", "(", "\n", "2", ",", "int", "(", "n_estimators", "/", "2", ")", ")", "\n", "ind", "=", "sample_without_replacement", "(", "n_estimators", ",", "\n", "max_estimator_per_bucket", ",", "\n", "random_state", "=", "random_state", ")", "\n", "if", "mode", "==", "'AOM'", ":", "\n", "                ", "scores_buckets", "[", ":", ",", "i", "]", "=", "np", ".", "max", "(", "scores", "[", ":", ",", "ind", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "scores_buckets", "[", ":", ",", "i", "]", "=", "np", ".", "mean", "(", "scores", "[", ":", ",", "ind", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'{method} is not implemented'", ".", "format", "(", "method", "=", "method", ")", ")", "\n", "\n", "", "if", "mode", "==", "'AOM'", ":", "\n", "        ", "return", "np", ".", "mean", "(", "scores_buckets", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "max", "(", "scores_buckets", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.aom": [[135, 172], ["score_comb._aom_moa_helper"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb._aom_moa_helper"], ["", "", "def", "aom", "(", "scores", ",", "n_buckets", "=", "5", ",", "method", "=", "'static'", ",", "bootstrap_estimators", "=", "False", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Average of Maximum - An ensemble method for combining multiple\n    estimators. See :cite:`aggarwal2015theoretical` for details.\n\n    First dividing estimators into subgroups, take the maximum score as the\n    subgroup score. Finally, take the average of all subgroup scores.\n\n    Parameters\n    ----------\n    scores : numpy array of shape (n_samples, n_estimators)\n        The score matrix outputted from various estimators\n\n    n_buckets : int, optional (default=5)\n        The number of subgroups to build\n\n    method : str, optional (default='static')\n        {'static', 'dynamic'}, if 'dynamic', build subgroups\n        randomly with dynamic bucket size.\n\n    bootstrap_estimators : bool, optional (default=False)\n        Whether estimators are drawn with replacement.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the\n        random number generator; If RandomState instance, random_state is\n        the random number generator; If None, the random number generator\n        is the RandomState instance used by `np.random`.\n\n    Returns\n    -------\n    combined_scores : Numpy array of shape (n_samples,)\n        The combined scores.\n\n    \"\"\"", "\n", "return", "_aom_moa_helper", "(", "'AOM'", ",", "scores", ",", "n_buckets", ",", "method", ",", "\n", "bootstrap_estimators", ",", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.moa": [[174, 212], ["score_comb._aom_moa_helper"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb._aom_moa_helper"], ["", "def", "moa", "(", "scores", ",", "n_buckets", "=", "5", ",", "method", "=", "'static'", ",", "bootstrap_estimators", "=", "False", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Maximization of Average - An ensemble method for combining multiple\n    estimators. See :cite:`aggarwal2015theoretical` for details.\n\n    First dividing estimators into subgroups, take the average score as the\n    subgroup score. Finally, take the maximization of all subgroup outlier\n    scores.\n\n    Parameters\n    ----------\n    scores : numpy array of shape (n_samples, n_estimators)\n        The score matrix outputted from various estimators\n\n    n_buckets : int, optional (default=5)\n        The number of subgroups to build\n\n    method : str, optional (default='static')\n        {'static', 'dynamic'}, if 'dynamic', build subgroups\n        randomly with dynamic bucket size.\n\n    bootstrap_estimators : bool, optional (default=False)\n        Whether estimators are drawn with replacement.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the\n        random number generator; If RandomState instance, random_state is\n        the random number generator; If None, the random number generator\n        is the RandomState instance used by `np.random`.\n\n    Returns\n    -------\n    combined_scores : Numpy array of shape (n_samples,)\n        The combined scores.\n\n    \"\"\"", "\n", "return", "_aom_moa_helper", "(", "'MOA'", ",", "scores", ",", "n_buckets", ",", "method", ",", "\n", "bootstrap_estimators", ",", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.average": [[214, 250], ["sklearn.utils.check_array", "sklearn.utils.check_array.ravel", "numpy.mean().ravel", "ValueError", "numpy.sum", "numpy.sum", "numpy.multiply", "numpy.mean"], "function", ["None"], ["", "def", "average", "(", "scores", ",", "estimator_weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Combination method to merge the scores from multiple estimators\n    by taking the average.\n\n    Parameters\n    ----------\n    scores : numpy array of shape (n_samples, n_estimators)\n        Score matrix from multiple estimators on the same samples.\n\n    estimator_weights : numpy array of shape (1, n_estimators)\n        If specified, using weighted average.\n\n    Returns\n    -------\n    combined_scores : numpy array of shape (n_samples, )\n        The combined scores.\n\n    \"\"\"", "\n", "scores", "=", "check_array", "(", "scores", ")", "\n", "\n", "if", "estimator_weights", "is", "not", "None", ":", "\n", "        ", "if", "estimator_weights", ".", "shape", "!=", "(", "1", ",", "scores", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Bad input shape of estimator_weight: (1, {score_shape}),'", "\n", "'and {estimator_weights} received'", ".", "format", "(", "\n", "score_shape", "=", "scores", ".", "shape", "[", "1", "]", ",", "\n", "estimator_weights", "=", "estimator_weights", ".", "shape", ")", ")", "\n", "\n", "# (d1*w1 + d2*w2 + ...+ dn*wn)/(w1+w2+...+wn)", "\n", "# generated weighted scores", "\n", "", "scores", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "scores", ",", "estimator_weights", ")", ",", "\n", "axis", "=", "1", ")", "/", "np", ".", "sum", "(", "estimator_weights", ")", "\n", "return", "scores", ".", "ravel", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "scores", ",", "axis", "=", "1", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.maximization": [[252, 270], ["sklearn.utils.check_array", "numpy.max().ravel", "numpy.max"], "function", ["None"], ["", "", "def", "maximization", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Combination method to merge the scores from multiple estimators\n    by taking the maximum.\n\n    Parameters\n    ----------\n    scores : numpy array of shape (n_samples, n_estimators)\n        Score matrix from multiple estimators on the same samples.\n\n    Returns\n    -------\n    combined_scores : numpy array of shape (n_samples, )\n        The combined scores.\n\n    \"\"\"", "\n", "\n", "scores", "=", "check_array", "(", "scores", ")", "\n", "return", "np", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.median": [[272, 290], ["sklearn.utils.check_array", "numpy.median().ravel", "numpy.median"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.median"], ["", "def", "median", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Combination method to merge the scores from multiple estimators\n    by taking the median.\n\n    Parameters\n    ----------\n    scores : numpy array of shape (n_samples, n_estimators)\n        Score matrix from multiple estimators on the same samples.\n\n    Returns\n    -------\n    combined_scores : numpy array of shape (n_samples, )\n        The combined scores.\n\n    \"\"\"", "\n", "\n", "scores", "=", "check_array", "(", "scores", ")", "\n", "return", "np", ".", "median", "(", "scores", ",", "axis", "=", "1", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.majority_vote": [[292, 334], ["sklearn.utils.check_array", "sklearn.utils.multiclass.check_classification_targets", "numpy.zeros", "range", "np.zeros.ravel", "numpy.testing.assert_equal", "numpy.ones", "sklearn.utils.extmath.weighted_mode"], "function", ["None"], ["", "def", "majority_vote", "(", "scores", ",", "n_classes", "=", "2", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Combination method to merge the scores from multiple estimators\n    by majority vote.\n\n    Parameters\n    ----------\n    scores : numpy array of shape (n_samples, n_estimators)\n        Score matrix from multiple estimators on the same samples.\n\n    n_classes : int, optional (default=2)\n        The number of classes in scores matrix\n\n    weights : numpy array of shape (1, n_estimators)\n        If specified, using weighted majority weight.\n\n    Returns\n    -------\n    combined_scores : numpy array of shape (n_samples, )\n        The combined scores.\n\n    \"\"\"", "\n", "\n", "scores", "=", "check_array", "(", "scores", ")", "\n", "\n", "# assert only discrete scores are combined with majority vote", "\n", "check_classification_targets", "(", "scores", ")", "\n", "\n", "n_samples", ",", "n_estimators", "=", "scores", ".", "shape", "[", "0", "]", ",", "scores", ".", "shape", "[", "1", "]", "\n", "\n", "vote_results", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "]", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "assert_equal", "(", "scores", ".", "shape", "[", "1", "]", ",", "weights", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# equal weights if not set", "\n", "", "else", ":", "\n", "        ", "weights", "=", "np", ".", "ones", "(", "[", "1", ",", "n_estimators", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "vote_results", "[", "i", "]", "=", "weighted_mode", "(", "scores", "[", "i", ",", ":", "]", ",", "weights", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "return", "vote_results", ".", "ravel", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_comb.SimpleClassifierAggregator.__init__": [[45, 64], ["base.BaseAggregator.__init__", "pyod.utils.utility.check_parameter", "classifier_comb.SimpleClassifierAggregator._set_weights", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_weights"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "method", "=", "'average'", ",", "threshold", "=", "0.5", ",", "\n", "weights", "=", "None", ",", "pre_fitted", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SimpleClassifierAggregator", ",", "self", ")", ".", "__init__", "(", "\n", "base_estimators", "=", "base_estimators", ",", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "# validate input parameters", "\n", "if", "method", "not", "in", "[", "'average'", ",", "'maximization'", ",", "'majority_vote'", ",", "\n", "'median'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"{method} is not a valid parameter.\"", ".", "format", "(", "\n", "method", "=", "method", ")", ")", "\n", "\n", "", "self", ".", "method", "=", "method", "\n", "check_parameter", "(", "threshold", ",", "0", ",", "1", ",", "include_left", "=", "False", ",", "\n", "include_right", "=", "False", ",", "param_name", "=", "'threshold'", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n", "# set estimator weights", "\n", "self", ".", "_set_weights", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_comb.SimpleClassifierAggregator.fit": [[65, 90], ["sklearn.utils.check_X_y", "sklearn.utils.check_array", "classifier_comb.SimpleClassifierAggregator._set_n_classes", "print", "clf.fit"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_n_classes", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit classifier.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n        \"\"\"", "\n", "\n", "# Validate inputs X and y", "\n", "X", ",", "y", "=", "check_X_y", "(", "X", ",", "y", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "self", ".", "_set_n_classes", "(", "y", ")", "\n", "\n", "if", "self", ".", "pre_fitted", ":", "\n", "            ", "print", "(", "\"Training skipped\"", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "for", "clf", "in", "self", ".", "base_estimators", ":", "\n", "                ", "clf", ".", "fit", "(", "X", ",", "y", ")", "\n", "clf", ".", "fitted_", "=", "True", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_comb.SimpleClassifierAggregator.predict": [[91, 128], ["sklearn.utils.check_array", "numpy.zeros", "enumerate", "score_comb.average", "score_comb.maximization", "score_comb.majority_vote", "score_comb.median", "ValueError", "hasattr", "clf.predict", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.average", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.maximization", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.majority_vote", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.median", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "\n", "all_scores", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "for", "i", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "if", "clf", ".", "fitted_", "is", "not", "True", "and", "self", ".", "pre_fitted", "==", "False", ":", "\n", "                ", "ValueError", "(", "'Classifier should be fitted first!'", ")", "\n", "", "else", ":", "\n", "                ", "if", "hasattr", "(", "clf", ",", "'predict'", ")", ":", "\n", "                    ", "all_scores", "[", ":", ",", "i", "]", "=", "clf", ".", "predict", "(", "X", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"{clf} does not have predict.\"", ".", "format", "(", "clf", "=", "clf", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "method", "==", "'average'", ":", "\n", "            ", "agg_score", "=", "average", "(", "all_scores", ",", "estimator_weights", "=", "self", ".", "weights", ")", "\n", "", "if", "self", ".", "method", "==", "'maximization'", ":", "\n", "            ", "agg_score", "=", "maximization", "(", "all_scores", ")", "\n", "", "if", "self", ".", "method", "==", "'majority_vote'", ":", "\n", "            ", "agg_score", "=", "majority_vote", "(", "all_scores", ",", "weights", "=", "self", ".", "weights", ")", "\n", "", "if", "self", ".", "method", "==", "'median'", ":", "\n", "            ", "agg_score", "=", "median", "(", "all_scores", ")", "\n", "\n", "", "return", "(", "agg_score", ">=", "self", ".", "threshold", ")", ".", "astype", "(", "'int'", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_comb.SimpleClassifierAggregator.predict_proba": [[129, 171], ["sklearn.utils.check_array", "numpy.zeros", "range", "numpy.mean", "numpy.max", "utils.utility.score_to_proba", "Warning", "numpy.mean", "Warning", "numpy.mean", "ValueError", "hasattr", "clf.predict_proba", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.score_to_proba", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Return probability estimates for the test data X.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        p : numpy array of shape (n_samples,)\n            The class probabilities of the input samples.\n            Classes are ordered by lexicographic order.\n        \"\"\"", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "all_scores", "=", "np", ".", "zeros", "(", "\n", "[", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "_classes", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_base_estimators_", ")", ":", "\n", "            ", "clf", "=", "self", ".", "base_estimators", "[", "i", "]", "\n", "if", "clf", ".", "fitted_", "is", "not", "True", "and", "self", ".", "pre_fitted", "==", "False", ":", "\n", "                ", "ValueError", "(", "'Classifier should be fitted first!'", ")", "\n", "", "else", ":", "\n", "                ", "if", "hasattr", "(", "clf", ",", "'predict_proba'", ")", ":", "\n", "                    ", "all_scores", "[", ":", ",", ":", ",", "i", "]", "=", "clf", ".", "predict_proba", "(", "X", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"{clf} does not have predict_proba.\"", ".", "format", "(", "clf", "=", "clf", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "method", "==", "'average'", ":", "\n", "            ", "return", "np", ".", "mean", "(", "all_scores", "*", "self", ".", "weights", ",", "axis", "=", "2", ")", "\n", "", "if", "self", ".", "method", "==", "'maximization'", ":", "\n", "            ", "scores", "=", "np", ".", "max", "(", "all_scores", "*", "self", ".", "weights", ",", "axis", "=", "2", ")", "\n", "return", "score_to_proba", "(", "scores", ")", "\n", "", "if", "self", ".", "method", "==", "'majority_vote'", ":", "\n", "            ", "Warning", "(", "'average method is invoked for predict_proba as'", "\n", "'probability is not continuous'", ")", "\n", "return", "np", ".", "mean", "(", "all_scores", "*", "self", ".", "weights", ",", "axis", "=", "2", ")", "\n", "", "if", "self", ".", "method", "==", "'median'", ":", "\n", "            ", "Warning", "(", "'average method is invoked for predict_proba as'", "\n", "'probability is not continuous'", ")", "\n", "return", "np", ".", "mean", "(", "all_scores", "*", "self", ".", "weights", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_comb.SimpleClassifierAggregator.fit_predict": [[172, 190], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "fit_predict", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "'fit_predict should not be used in supervised learning models.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_dcs.DCS_LA.__init__": [[55, 75], ["base.BaseAggregator.__init__", "pyod.utils.utility.check_parameter", "isinstance", "ValueError", "warnings.warn", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "local_region_size", "=", "30", ",", "threshold", "=", "None", ",", "\n", "pre_fitted", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "DCS_LA", ",", "self", ")", ".", "__init__", "(", "\n", "base_estimators", "=", "base_estimators", ",", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "# validate input parameters", "\n", "if", "not", "isinstance", "(", "local_region_size", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'local_region_size must be an integer variable'", ")", "\n", "", "check_parameter", "(", "local_region_size", ",", "low", "=", "2", ",", "include_left", "=", "True", ",", "\n", "param_name", "=", "'local_region_size'", ")", "\n", "self", ".", "local_region_size", "=", "local_region_size", "\n", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"DCS does not support threshold setting option. \"", "\n", "\"Please set the threshold in classifiers directly.\"", ")", "\n", "\n", "", "if", "pre_fitted", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"DCS does not support pre_fitted option.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_dcs.DCS_LA.fit": [[76, 114], ["sklearn.utils.check_X_y", "sklearn.utils.check_array", "sklearn.utils.multiclass.check_classification_targets", "len", "sklearn.neighbors.KDTree", "numpy.zeros", "enumerate", "numpy.unique", "clf.fit", "clf.predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit classifier.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n        \"\"\"", "\n", "\n", "# Validate inputs X and y", "\n", "X", ",", "y", "=", "check_X_y", "(", "X", ",", "y", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "check_classification_targets", "(", "y", ")", "\n", "self", ".", "_classes", "=", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# save the train ground truth for evaluation purpose", "\n", "self", ".", "y_train_", "=", "y", "\n", "\n", "# build KDTree out of training subspace", "\n", "self", ".", "tree_", "=", "KDTree", "(", "X", ")", "\n", "\n", "self", ".", "y_train_predicted_", "=", "np", ".", "zeros", "(", "\n", "[", "n_samples", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "# train all base classifiers on X, and get their local predicted scores", "\n", "# iterate over all base classifiers", "\n", "for", "i", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "clf", ".", "fit", "(", "X", ",", "y", ")", "\n", "self", ".", "y_train_predicted_", "[", ":", ",", "i", "]", "=", "clf", ".", "predict", "(", "X", ")", "\n", "clf", ".", "fitted_", "=", "True", "\n", "\n", "", "self", ".", "fitted_", "=", "True", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_dcs.DCS_LA.predict": [[115, 129], ["classifier_dcs.DCS_LA._predict_internal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA._predict_internal"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "return", "self", ".", "_predict_internal", "(", "X", ",", "predict_proba", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_dcs.DCS_LA.predict_proba": [[130, 145], ["classifier_dcs.DCS_LA._predict_internal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA._predict_internal"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Return probability estimates for the test data X.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        p : numpy array of shape (n_samples,)\n            The class probabilities of the input samples.\n            Classes are ordered by lexicographic order.\n        \"\"\"", "\n", "return", "self", ".", "_predict_internal", "(", "X", ",", "predict_proba", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_dcs.DCS_LA._predict_internal": [[146, 203], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "classifier_dcs.DCS_LA.tree_.query", "range", "numpy.zeros", "numpy.zeros", "X[].reshape", "numpy.zeros", "enumerate", "numpy.argwhere().ravel", "sklearn.metrics.accuracy_score", "classifier_dcs.DCS_LA.base_estimators[].predict_proba", "classifier_dcs.DCS_LA.base_estimators[].predict", "numpy.argwhere", "numpy.amax"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "_predict_internal", "(", "self", ",", "X", ",", "predict_proba", ")", ":", "\n", "        ", "\"\"\"Internal function for predict and predict_proba\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        predict_proba : bool\n            if True, return the result of predict_proba\n\n        Returns\n        -------\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "[", "'fitted_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# Find neighbors for all test instances", "\n", "_", ",", "ind_arr", "=", "self", ".", "tree_", ".", "query", "(", "X", ",", "k", "=", "self", ".", "local_region_size", ")", "\n", "\n", "if", "predict_proba", ":", "\n", "            ", "y_predicted", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "self", ".", "_classes", "]", ")", "\n", "", "else", ":", "\n", "            ", "y_predicted", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "]", ")", "\n", "\n", "# For each test sample", "\n", "", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "test_sample", "=", "X", "[", "i", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "train_inds", "=", "ind_arr", "[", "i", ",", ":", "]", "\n", "\n", "# ground truth", "\n", "y_train_sample", "=", "self", ".", "y_train_", "[", "train_inds", "]", "\n", "\n", "clf_performance", "=", "np", ".", "zeros", "(", "[", "self", ".", "n_base_estimators_", ",", "]", ")", "\n", "\n", "for", "j", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "                ", "y_train_clf", "=", "self", ".", "y_train_predicted_", "[", "train_inds", ",", "j", "]", "\n", "clf_performance", "[", "j", "]", "=", "accuracy_score", "(", "y_train_sample", ",", "\n", "y_train_clf", ")", "\n", "\n", "# select the best clf. may get multiple results", "\n", "", "select_clf_inds", "=", "np", ".", "argwhere", "(", "\n", "clf_performance", "==", "np", ".", "amax", "(", "clf_performance", ")", ")", ".", "ravel", "(", ")", "\n", "\n", "# select the first element from all candidates", "\n", "best_clf_ind", "=", "select_clf_inds", "[", "-", "1", "]", "\n", "\n", "# make prediction", "\n", "if", "predict_proba", ":", "\n", "                ", "y_predicted", "[", "i", "]", "=", "self", ".", "base_estimators", "[", "\n", "best_clf_ind", "]", ".", "predict_proba", "(", "test_sample", ")", "\n", "", "else", ":", "\n", "                ", "y_predicted", "[", "i", "]", "=", "self", ".", "base_estimators", "[", "best_clf_ind", "]", ".", "predict", "(", "\n", "test_sample", ")", "\n", "\n", "", "", "return", "y_predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_dcs.DCS_LA.fit_predict": [[204, 222], ["NotImplementedError"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "'fit_predict should not be used in supervised learning models.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac.EAC.__init__": [[79, 92], ["base.BaseAggregator.__init__", "pyod.utils.utility.check_parameter", "cluster_eac.EAC._set_weights"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_weights"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "n_clusters", ",", "linkage_method", "=", "'single'", ",", "\n", "weights", "=", "None", ",", "pre_fitted", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "EAC", ",", "self", ")", ".", "__init__", "(", "\n", "base_estimators", "=", "base_estimators", ",", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "check_parameter", "(", "n_clusters", ",", "low", "=", "2", ",", "param_name", "=", "'n_clusters'", ")", "\n", "self", ".", "n_clusters", "=", "n_clusters", "\n", "\n", "# set estimator weights", "\n", "self", ".", "_set_weights", "(", "weights", ")", "\n", "\n", "self", ".", "linkage_method", "=", "linkage_method", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac.EAC.fit": [[93, 147], ["sklearn.utils.check_array", "numpy.zeros", "enumerate", "numpy.divide", "numpy.abs", "scipy.cluster.hierarchy.linkage", "scipy.cluster.hierarchy.fcluster", "print", "sklearn.utils.validation.check_is_fitted", "estimator.labels_.reshape", "cluster_eac._generate_similarity_mat", "len", "warnings.warn", "clf.fit", "numpy.max", "numpy.unique", "len", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac._generate_similarity_mat", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fit estimators.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n        \"\"\"", "\n", "\n", "# Validate inputs X", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# initialize similarity matrix", "\n", "sim_mat_all", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "n_samples", "]", ")", "\n", "\n", "if", "self", ".", "pre_fitted", ":", "\n", "            ", "print", "(", "\"Training Skipped\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "clf", "in", "self", ".", "base_estimators", ":", "\n", "                ", "clf", ".", "fit", "(", "X", ")", "\n", "clf", ".", "fitted_", "=", "True", "\n", "\n", "", "", "for", "i", ",", "estimator", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "check_is_fitted", "(", "estimator", ",", "[", "'labels_'", "]", ")", "\n", "\n", "# get the labels from each base estimator", "\n", "labels", "=", "estimator", ".", "labels_", ".", "reshape", "(", "n_samples", ",", "1", ")", "\n", "\n", "# generate the similarity matrix for the current estimator", "\n", "sim_mat", "=", "_generate_similarity_mat", "(", "labels", ")", "\n", "\n", "# add to the main similarity mat", "\n", "sim_mat_all", "=", "sim_mat_all", "+", "sim_mat", "\n", "\n", "# get the average of the similarity mat", "\n", "", "sim_mat_avg", "=", "np", ".", "divide", "(", "sim_mat_all", ",", "self", ".", "n_base_estimators_", ")", "\n", "\n", "# flip the similarity. smaller value implies more similarity", "\n", "sim_mat_avg", "=", "np", ".", "abs", "(", "np", ".", "max", "(", "sim_mat_avg", ")", "-", "sim_mat_avg", ")", "\n", "\n", "# build clusters", "\n", "self", ".", "Z_", "=", "linkage", "(", "sim_mat_avg", ",", "method", "=", "self", ".", "linkage_method", ")", "\n", "self", ".", "labels_", "=", "fcluster", "(", "self", ".", "Z_", ",", "self", ".", "n_clusters", ",", "criterion", "=", "'maxclust'", ")", "\n", "\n", "# it may leads to different number of clusters as specified by the user", "\n", "if", "len", "(", "np", ".", "unique", "(", "self", ".", "labels_", ")", ")", "!=", "self", ".", "n_clusters", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'EAC generates {n} clusters instead of {n_clusters}'", ".", "format", "(", "\n", "n", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "labels_", ")", ")", ",", "\n", "n_clusters", "=", "self", ".", "n_clusters", ")", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac.EAC.predict": [[148, 163], ["NotImplemented"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "# TODO: decide whether enable predict function for clustering", "\n", "raise", "NotImplemented", "(", "\"predict function is currently disabled for\"", "\n", "\"clustering due to inconsistent behaviours.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac.EAC.predict_proba": [[165, 179], ["NotImplemented"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "raise", "NotImplemented", "(", "\"predict_proba function is currently disabled for\"", "\n", "\"clustering due to inconsistent behaviours.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac.EAC.fit_predict": [[181, 200], ["cluster_eac.EAC.fit"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X. y is optional for unsupervised\n        methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Cluster labels for each data sample.\n        \"\"\"", "\n", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "labels_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_eac._generate_similarity_mat": [[20, 38], ["numpy.repeat", "numpy.equal().astype", "len", "numpy.equal"], "function", ["None"], ["def", "_generate_similarity_mat", "(", "labels", ")", ":", "\n", "    ", "\"\"\"Internal function to generate similarity matrix.\n\n    Parameters\n    ----------\n    labels : numpy array of shape (n_samples, 1)\n\n    Returns\n    -------\n    sim_mat : numpy array of shape (n_samples, n_samples)\n        Similarity matrix. If label_i == label_j, sim_mat[i,j] = 1, else 0.\n\n    \"\"\"", "\n", "l_mat", "=", "np", ".", "repeat", "(", "labels", ",", "len", "(", "labels", ")", ",", "axis", "=", "1", ")", "\n", "l_mat_t", "=", "l_mat", ".", "T", "\n", "\n", "sim_mat", "=", "np", ".", "equal", "(", "l_mat", ",", "l_mat_t", ")", ".", "astype", "(", "int", ")", "\n", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.sklearn_base._get_n_jobs": [[13, 37], ["max", "ValueError", "joblib.parallel.cpu_count"], "function", ["None"], ["def", "_get_n_jobs", "(", "n_jobs", ")", ":", "\n", "    ", "\"\"\"Get number of jobs for the computation.\n    See sklearn/utils/__init__.py for more information.\n\n    This function reimplements the logic of joblib to determine the actual\n    number of jobs depending on the cpu count. If -1 all CPUs are used.\n    If 1 is given, no parallel computing code is used at all, which is useful\n    for debugging. For n_jobs below -1, (n_cpus + 1 + n_jobs) are used.\n    Thus for n_jobs = -2, all CPUs but one are used.\n    Parameters\n    ----------\n    n_jobs : int\n        Number of jobs stated in joblib convention.\n    Returns\n    -------\n    n_jobs : int\n        The actual number of jobs as positive integer.\n    \"\"\"", "\n", "if", "n_jobs", "<", "0", ":", "\n", "        ", "return", "max", "(", "cpu_count", "(", ")", "+", "1", "+", "n_jobs", ",", "1", ")", "\n", "", "elif", "n_jobs", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Parameter n_jobs == 0 has no meaning.'", ")", "\n", "", "else", ":", "\n", "        ", "return", "n_jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.sklearn_base._partition_estimators": [[39, 53], ["min", "numpy.cumsum", "sklearn_base._get_n_jobs", "numpy.ones", "n_estimators_per_job.tolist", "np.cumsum.tolist"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.models.sklearn_base._get_n_jobs"], ["", "", "def", "_partition_estimators", "(", "n_estimators", ",", "n_jobs", ")", ":", "\n", "    ", "\"\"\"Private function used to partition estimators between jobs.\n    See sklearn/ensemble/base.py for more information.\n    \"\"\"", "\n", "# Compute the number of jobs", "\n", "n_jobs", "=", "min", "(", "_get_n_jobs", "(", "n_jobs", ")", ",", "n_estimators", ")", "\n", "\n", "# Partition estimators between jobs", "\n", "n_estimators_per_job", "=", "(", "n_estimators", "//", "n_jobs", ")", "*", "np", ".", "ones", "(", "n_jobs", ",", "\n", "dtype", "=", "np", ".", "int", ")", "\n", "n_estimators_per_job", "[", ":", "n_estimators", "%", "n_jobs", "]", "+=", "1", "\n", "starts", "=", "np", ".", "cumsum", "(", "n_estimators_per_job", ")", "\n", "\n", "return", "n_jobs", ",", "n_estimators_per_job", ".", "tolist", "(", ")", ",", "[", "0", "]", "+", "starts", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.sklearn_base._pprint": [[55, 99], ["numpy.get_printoptions", "numpy.set_printoptions", "list", "enumerate", "numpy.set_printoptions", "sorted", "list.append", "len", "params.items", "type", "len", "l.rstrip", "list.append", "len", "list.append", "lines.split", "str", "printer", "len"], "function", ["None"], ["", "def", "_pprint", "(", "params", ",", "offset", "=", "0", ",", "printer", "=", "repr", ")", ":", "\n", "    ", "\"\"\"Pretty print the dictionary 'params'\n    Parameters\n    ----------\n    params : dict\n        The dictionary to pretty print\n    offset : int\n        The offset in characters to add at the begin of each line.\n    printer : callable\n        The function to convert entries to strings, typically\n        the builtin str or repr\n    \"\"\"", "\n", "# Do a multi-line justified repr:", "\n", "options", "=", "np", ".", "get_printoptions", "(", ")", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "5", ",", "threshold", "=", "64", ",", "edgeitems", "=", "2", ")", "\n", "params_list", "=", "list", "(", ")", "\n", "this_line_length", "=", "offset", "\n", "line_sep", "=", "',\\n'", "+", "(", "1", "+", "offset", "//", "2", ")", "*", "' '", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "sorted", "(", "params", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "is", "float", ":", "\n", "# use str for representing floating point numbers", "\n", "# this way we get consistent representation across", "\n", "# architectures and versions.", "\n", "            ", "this_repr", "=", "'%s=%s'", "%", "(", "k", ",", "str", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "# use repr of the rest", "\n", "            ", "this_repr", "=", "'%s=%s'", "%", "(", "k", ",", "printer", "(", "v", ")", ")", "\n", "", "if", "len", "(", "this_repr", ")", ">", "500", ":", "\n", "            ", "this_repr", "=", "this_repr", "[", ":", "300", "]", "+", "'...'", "+", "this_repr", "[", "-", "100", ":", "]", "\n", "", "if", "i", ">", "0", ":", "\n", "            ", "if", "(", "this_line_length", "+", "len", "(", "this_repr", ")", ">=", "75", "or", "'\\n'", "in", "this_repr", ")", ":", "\n", "                ", "params_list", ".", "append", "(", "line_sep", ")", "\n", "this_line_length", "=", "len", "(", "line_sep", ")", "\n", "", "else", ":", "\n", "                ", "params_list", ".", "append", "(", "', '", ")", "\n", "this_line_length", "+=", "2", "\n", "", "", "params_list", ".", "append", "(", "this_repr", ")", "\n", "this_line_length", "+=", "len", "(", "this_repr", ")", "\n", "\n", "", "np", ".", "set_printoptions", "(", "**", "options", ")", "\n", "lines", "=", "''", ".", "join", "(", "params_list", ")", "\n", "# Strip trailing space to avoid nightmare in doctests", "\n", "lines", "=", "'\\n'", ".", "join", "(", "l", ".", "rstrip", "(", "' '", ")", "for", "l", "in", "lines", ".", "split", "(", "'\\n'", ")", ")", "\n", "return", "lines", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking.__init__": [[124, 158], ["base.BaseAggregator.__init__", "pyod.utils.utility.check_parameter", "isinstance", "ValueError", "sklearn.linear_model.LogisticRegression", "warnings.warn", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "meta_clf", "=", "None", ",", "n_folds", "=", "2", ",", "\n", "keep_original", "=", "True", ",", "\n", "use_proba", "=", "False", ",", "shuffle_data", "=", "False", ",", "random_state", "=", "None", ",", "\n", "threshold", "=", "None", ",", "pre_fitted", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "Stacking", ",", "self", ")", ".", "__init__", "(", "\n", "base_estimators", "=", "base_estimators", ",", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "# validate input parameters", "\n", "if", "not", "isinstance", "(", "n_folds", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'n_folds must be an integer variable'", ")", "\n", "", "check_parameter", "(", "n_folds", ",", "low", "=", "2", ",", "include_left", "=", "True", ",", "\n", "param_name", "=", "'n_folds'", ")", "\n", "self", ".", "n_folds", "=", "n_folds", "\n", "\n", "if", "meta_clf", "is", "not", "None", ":", "\n", "            ", "self", ".", "meta_clf", "=", "meta_clf", "\n", "", "else", ":", "\n", "            ", "self", ".", "meta_clf", "=", "LogisticRegression", "(", ")", "\n", "\n", "# set flags", "\n", "", "self", ".", "keep_original", "=", "keep_original", "\n", "self", ".", "use_proba", "=", "use_proba", "\n", "self", ".", "shuffle_data", "=", "shuffle_data", "\n", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Stacking does not support threshold setting option. \"", "\n", "\"Please set the threshold in classifiers directly.\"", ")", "\n", "\n", "", "if", "pre_fitted", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Stacking does not support pre_fitted option.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking.fit": [[159, 224], ["sklearn.utils.check_X_y", "sklearn.utils.check_array", "classifier_stacking.Stacking._set_n_classes", "numpy.zeros", "classifier_stacking.split_datasets", "enumerate", "classifier_stacking.Stacking.meta_clf.fit", "enumerate", "range", "numpy.concatenate", "clf.fit", "list", "utils.utility.list_diff", "clf.fit", "range", "clf.predict", "clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_n_classes", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.split_datasets", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.list_diff", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit classifier.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n        \"\"\"", "\n", "\n", "# Validate inputs X and y", "\n", "X", ",", "y", "=", "check_X_y", "(", "X", ",", "y", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "self", ".", "_set_n_classes", "(", "y", ")", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# initialize matrix for storing newly generated features", "\n", "new_features", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "# build CV datasets", "\n", "X_new", ",", "y_new", ",", "index_lists", "=", "split_datasets", "(", "\n", "X", ",", "y", ",", "n_folds", "=", "self", ".", "n_folds", ",", "shuffle_data", "=", "self", ".", "shuffle_data", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "# iterate over all base classifiers", "\n", "for", "i", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "# iterate over all folds", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "n_folds", ")", ":", "\n", "# build train and test index", "\n", "                ", "full_idx", "=", "list", "(", "range", "(", "n_samples", ")", ")", "\n", "test_idx", "=", "index_lists", "[", "j", "]", "\n", "train_idx", "=", "list_diff", "(", "full_idx", ",", "test_idx", ")", "\n", "X_train", ",", "y_train", "=", "X_new", "[", "train_idx", ",", ":", "]", ",", "y_new", "[", "train_idx", "]", "\n", "X_test", ",", "y_test", "=", "X_new", "[", "test_idx", ",", ":", "]", ",", "y_new", "[", "test_idx", "]", "\n", "\n", "# train the classifier", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "# generate the new features on the pseudo test set", "\n", "if", "self", ".", "use_proba", ":", "\n", "                    ", "new_features", "[", "test_idx", ",", "i", "]", "=", "clf", ".", "predict_proba", "(", "\n", "X_test", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "                    ", "new_features", "[", "test_idx", ",", "i", "]", "=", "clf", ".", "predict", "(", "X_test", ")", "\n", "\n", "# build the new dataset for training", "\n", "", "", "", "if", "self", ".", "keep_original", ":", "\n", "            ", "X_new_comb", "=", "np", ".", "concatenate", "(", "[", "X_new", ",", "new_features", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "X_new_comb", "=", "new_features", "\n", "", "y_new_comb", "=", "y_new", "\n", "\n", "# train the meta classifier", "\n", "self", ".", "meta_clf", ".", "fit", "(", "X_new_comb", ",", "y_new_comb", ")", "\n", "self", ".", "fitted_", "=", "True", "\n", "\n", "# train all base classifiers on the full train dataset", "\n", "# iterate over all base classifiers", "\n", "for", "i", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "clf", ".", "fit", "(", "X_new", ",", "y_new", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking._process_data": [[225, 261], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "numpy.zeros", "enumerate", "numpy.concatenate", "clf.predict", "clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "_process_data", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Internal class for both `predict` and `predict_proba`\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        X_new_comb : Numpy array\n            The processed dataset of X.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "[", "'fitted_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# initialize matrix for storing newly generated features", "\n", "new_features", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "# build the new features for unknown samples", "\n", "# iterate over all base classifiers", "\n", "for", "i", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "# generate the new features on the test set", "\n", "            ", "if", "self", ".", "use_proba", ":", "\n", "                ", "new_features", "[", ":", ",", "i", "]", "=", "clf", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "                ", "new_features", "[", ":", ",", "i", "]", "=", "clf", ".", "predict", "(", "X", ")", "\n", "\n", "# build the new dataset for unknown samples", "\n", "", "", "if", "self", ".", "keep_original", ":", "\n", "            ", "X_new_comb", "=", "np", ".", "concatenate", "(", "[", "X", ",", "new_features", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "X_new_comb", "=", "new_features", "\n", "\n", "", "return", "X_new_comb", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking.predict": [[262, 277], ["classifier_stacking.Stacking._process_data", "classifier_stacking.Stacking.meta_clf.predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking._process_data", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "X_new_comb", "=", "self", ".", "_process_data", "(", "X", ")", "\n", "return", "self", ".", "meta_clf", ".", "predict", "(", "X_new_comb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking.predict_proba": [[278, 294], ["classifier_stacking.Stacking._process_data", "classifier_stacking.Stacking.meta_clf.predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking._process_data", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Return probability estimates for the test data X.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        p : numpy array of shape (n_samples,)\n            The class probabilities of the input samples.\n            Classes are ordered by lexicographic order.\n        \"\"\"", "\n", "X_new_comb", "=", "self", ".", "_process_data", "(", "X", ")", "\n", "return", "self", ".", "meta_clf", ".", "predict_proba", "(", "X_new_comb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.Stacking.fit_predict": [[295, 313], ["NotImplementedError"], "methods", ["None"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "'fit_predict should not be used in supervised learning models.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_stacking.split_datasets": [[24, 82], ["pyod.utils.utility.check_parameter", "sklearn.utils.check_random_state", "len", "list", "int", "range", "index_lists.append", "isinstance", "ValueError", "sklearn.utils.shuffle", "range", "index_lists.append"], "function", ["None"], ["def", "split_datasets", "(", "X", ",", "y", ",", "n_folds", "=", "3", ",", "shuffle_data", "=", "False", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Utility function to split the data for stacking. The data is split\n    into n_folds with roughly equal rough size.\n\n    Parameters\n    ----------\n    X : numpy array of shape (n_samples, n_features)\n        The input samples.\n\n    y : numpy array of shape (n_samples,)\n        The ground truth of the input samples (labels).\n\n    n_folds : int, optional (default=3)\n        The number of splits of the training sample.\n\n    shuffle_data : bool, optional (default=False)\n        If True, shuffle the input data.\n\n    random_state : RandomState, optional (default=None)\n        A random number generator instance to define the state of the random\n        permutations generator.\n\n    Returns\n    -------\n    X : numpy array of shape (n_samples, n_features)\n        The input samples. If shuffle_data, return the shuffled data.\n\n    y : numpy array of shape (n_samples,)\n        The ground truth of the input samples (labels). If shuffle_data,\n        return the shuffled data.\n\n    index_lists : list of list\n        The list of indexes of each fold regarding the returned X and y.\n        For instance, index_lists[0] contains the indexes of fold 0.\n\n    \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "n_folds", ",", "int", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'n_folds must be an integer variable'", ")", "\n", "", "check_parameter", "(", "n_folds", ",", "low", "=", "2", ",", "include_left", "=", "True", ",", "param_name", "=", "'n_folds'", ")", "\n", "\n", "random_state", "=", "check_random_state", "(", "random_state", ")", "\n", "\n", "if", "shuffle_data", ":", "\n", "        ", "X", ",", "y", "=", "shuffle", "(", "X", ",", "y", ",", "random_state", "=", "random_state", ")", "\n", "\n", "", "idx_length", "=", "len", "(", "y", ")", "\n", "idx_list", "=", "list", "(", "range", "(", "idx_length", ")", ")", "\n", "\n", "avg_length", "=", "int", "(", "idx_length", "/", "n_folds", ")", "\n", "\n", "index_lists", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_folds", "-", "1", ")", ":", "\n", "        ", "index_lists", ".", "append", "(", "idx_list", "[", "i", "*", "avg_length", ":", "(", "i", "+", "1", ")", "*", "avg_length", "]", ")", "\n", "\n", "", "index_lists", ".", "append", "(", "idx_list", "[", "(", "n_folds", "-", "1", ")", "*", "avg_length", ":", "]", ")", "\n", "\n", "return", "X", ",", "y", ",", "index_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.ClustererEnsemble.__init__": [[51, 67], ["base.BaseAggregator.__init__", "pyod.utils.utility.check_parameter", "pyod.utils.utility.check_parameter", "cluster_comb.ClustererEnsemble._set_weights"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_weights"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "n_clusters", ",", "weights", "=", "None", ",", "\n", "reference_idx", "=", "0", ",", "\n", "pre_fitted", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "ClustererEnsemble", ",", "self", ")", ".", "__init__", "(", "\n", "base_estimators", "=", "base_estimators", ",", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "check_parameter", "(", "n_clusters", ",", "low", "=", "2", ",", "param_name", "=", "'n_clusters'", ")", "\n", "self", ".", "n_clusters", "=", "n_clusters", "\n", "\n", "check_parameter", "(", "reference_idx", ",", "low", "=", "0", ",", "high", "=", "self", ".", "n_base_estimators_", "-", "1", ",", "\n", "include_left", "=", "True", ",", "include_right", "=", "True", ")", "\n", "self", ".", "reference_idx", "=", "reference_idx", "\n", "\n", "# set estimator weights", "\n", "self", ".", "_set_weights", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.ClustererEnsemble.fit": [[68, 104], ["sklearn.utils.check_array", "numpy.zeros", "enumerate", "cluster_comb.clusterer_ensemble_scores", "print", "sklearn.utils.validation.check_is_fitted", "clf.fit"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.clusterer_ensemble_scores", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fit estimators.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n        \"\"\"", "\n", "\n", "# Validate inputs X", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "\n", "# initialize the score matrix to store the results", "\n", "original_labels", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "if", "self", ".", "pre_fitted", ":", "\n", "            ", "print", "(", "\"Training Skipped\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "clf", "in", "self", ".", "base_estimators", ":", "\n", "                ", "clf", ".", "fit", "(", "X", ")", "\n", "clf", ".", "fitted_", "=", "True", "\n", "\n", "", "", "for", "i", ",", "estimator", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "check_is_fitted", "(", "estimator", ",", "[", "'labels_'", "]", ")", "\n", "original_labels", "[", ":", ",", "i", "]", "=", "estimator", ".", "labels_", "\n", "", "self", ".", "original_labels_", "=", "original_labels", "\n", "\n", "# get the aligned result", "\n", "self", ".", "labels_", ",", "self", ".", "aligned_labels_", "=", "clusterer_ensemble_scores", "(", "\n", "original_labels", ",", "\n", "self", ".", "n_base_estimators_", ",", "\n", "n_clusters", "=", "self", ".", "n_clusters", ",", "\n", "weights", "=", "self", ".", "weights", ",", "\n", "return_results", "=", "True", ",", "\n", "reference_idx", "=", "self", ".", "reference_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.ClustererEnsemble.predict": [[105, 142], ["NotImplemented", "sklearn.utils.check_array", "numpy.zeros", "enumerate", "cluster_comb.clusterer_ensemble_scores", "sklearn.utils.validation.check_is_fitted", "estimator.predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.clusterer_ensemble_scores", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "# TODO: decide whether enable predict function for clustering", "\n", "raise", "NotImplemented", "(", "\"predict function is currently disabled for\"", "\n", "\"clustering due to inconsistent behaviours.\"", ")", "\n", "\n", "# Validate inputs X", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "\n", "# initialize the score matrix to store the results", "\n", "original_labels", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "for", "i", ",", "estimator", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "check_is_fitted", "(", "estimator", ",", "[", "'labels_'", "]", ")", "\n", "original_labels", "[", ":", ",", "i", "]", "=", "estimator", ".", "predict", "(", "X", ")", "\n", "\n", "# get the aligned result", "\n", "", "predicted_labels", "=", "clusterer_ensemble_scores", "(", "\n", "original_labels", ",", "\n", "self", ".", "n_base_estimators_", ",", "\n", "n_clusters", "=", "self", ".", "n_clusters", ",", "\n", "weights", "=", "self", ".", "weights", ",", "\n", "return_results", "=", "False", ",", "\n", "reference_idx", "=", "self", ".", "reference_idx", ")", "\n", "\n", "return", "predicted_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.ClustererEnsemble.predict_proba": [[143, 157], ["NotImplemented"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "raise", "NotImplemented", "(", "\"predict_proba function is currently disabled for\"", "\n", "\"clustering due to inconsistent behaviours.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.ClustererEnsemble.fit_predict": [[159, 178], ["cluster_comb.ClustererEnsemble.fit"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X. y is optional for unsupervised\n        methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Cluster labels for each data sample.\n        \"\"\"", "\n", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "labels_", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb.clusterer_ensemble_scores": [[180, 241], ["cluster_comb._validate_cluster_number", "numpy.zeros", "numpy.copy", "range", "score_comb.majority_vote", "cluster_comb._intersection_mat", "cluster_comb._alignment", "numpy.testing.assert_equal", "numpy.ones", "score_comb.majority_vote.astype", "score_comb.majority_vote.astype", "np.copy.astype"], "function", ["home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb._validate_cluster_number", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.majority_vote", "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb._intersection_mat", "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb._alignment"], ["", "", "def", "clusterer_ensemble_scores", "(", "original_labels", ",", "n_estimators", ",", "n_clusters", ",", "\n", "weights", "=", "None", ",", "return_results", "=", "False", ",", "\n", "reference_idx", "=", "0", ")", ":", "\n", "    ", "\"\"\"Function to align the raw clustering results from base estimators.\n    Different from ClustererEnsemble class, this function takes in the output\n    from base estimators directly without training and prediction.\n\n    Parameters\n    ----------\n    original_labels : numpy array of shape (n_samples, n_estimators)\n        The raw output from base estimators\n\n    n_estimators : int\n        The number of base estimators.\n\n    n_clusters : int, optional (default=8)\n        The number of clusters.\n\n    weights : numpy array of shape (1, n_estimators)\n        Estimators weights.\n\n    return_results : bool, optional (default=False)\n        If True, also return the aligned label matrix.\n\n    reference_idx : int in range [0, n_estimators-1], optional (default=0)\n        The ith base estimator used as the reference for label alignment.\n\n    Returns\n    -------\n    aligned_labels : numpy array of shape (n_samples, n_estimators)\n        The aligned label results by using reference_idx estimator as the\n        reference.\n\n    \"\"\"", "\n", "\n", "original_labels", "=", "_validate_cluster_number", "(", "original_labels", ",", "n_clusters", ")", "\n", "alignment_mat", "=", "np", ".", "zeros", "(", "[", "n_clusters", ",", "n_estimators", "]", ")", "\n", "aligned_labels", "=", "np", ".", "copy", "(", "original_labels", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_estimators", ")", ":", "\n", "        ", "inter_mat", "=", "_intersection_mat", "(", "original_labels", ",", "reference_idx", ",", "i", ",", "\n", "n_clusters", ")", "\n", "index_mapping", "=", "_alignment", "(", "inter_mat", ",", "n_clusters", ",", "i", ",", "aligned_labels", ",", "\n", "OFFSET_FACTOR", ")", "\n", "alignment_mat", "[", ":", ",", "i", "]", "=", "index_mapping", "[", ":", ",", "1", "]", "\n", "\n", "", "aligned_labels", "=", "aligned_labels", "-", "OFFSET_FACTOR", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "assert_equal", "(", "original_labels", ".", "shape", "[", "1", "]", ",", "weights", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# equal weights if not set", "\n", "", "else", ":", "\n", "        ", "weights", "=", "np", ".", "ones", "(", "[", "1", ",", "n_estimators", "]", ")", "\n", "\n", "", "labels_by_vote", "=", "majority_vote", "(", "aligned_labels", ",", "n_classes", "=", "n_clusters", ",", "\n", "weights", "=", "weights", ")", "\n", "if", "return_results", ":", "\n", "        ", "return", "labels_by_vote", ".", "astype", "(", "int", ")", ",", "aligned_labels", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "        ", "return", "labels_by_vote", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb._intersection_mat": [[243, 271], ["numpy.zeros", "range", "range", "numpy.argwhere", "numpy.argwhere", "numpy.intersect1d", "len"], "function", ["None"], ["", "", "def", "_intersection_mat", "(", "result_mat", ",", "first_idx", ",", "second_idx", ",", "n_clusters", ")", ":", "\n", "    ", "\"\"\"Calculate the number of overlappings of second_idx based on first_idx.\n    alignment_mat[i,j] represents the number of labels == j in second_idx\n    when labels == i in the first idx.\n\n    In other words, we should do the alignment based on the max by first\n    assigning the most\n\n    Parameters\n    ----------\n    result_mat\n    first_idx\n    second_idx\n    n_clusters\n\n    Returns\n    -------\n\n    \"\"\"", "\n", "alignment_mat", "=", "np", ".", "zeros", "(", "[", "n_clusters", ",", "n_clusters", "]", ")", "\n", "for", "i", "in", "range", "(", "n_clusters", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_clusters", ")", ":", "\n", "            ", "i_index", "=", "np", ".", "argwhere", "(", "result_mat", "[", ":", ",", "first_idx", "]", "==", "i", ")", "\n", "j_index", "=", "np", ".", "argwhere", "(", "result_mat", "[", ":", ",", "second_idx", "]", "==", "j", ")", "\n", "inter_ij", "=", "np", ".", "intersect1d", "(", "i_index", ",", "j_index", ")", "\n", "alignment_mat", "[", "i", ",", "j", "]", "=", "len", "(", "inter_ij", ")", "\n", "\n", "", "", "return", "alignment_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb._alignment": [[273, 289], ["numpy.zeros", "list", "range", "numpy.sum", "numpy.unravel_index", "inter_mat.argmax", "numpy.where"], "function", ["None"], ["", "def", "_alignment", "(", "inter_mat", ",", "n_clusters", ",", "second_idx", ",", "result_mat_aligned", ",", "\n", "offset", "=", "OFFSET_FACTOR", ")", ":", "\n", "    ", "index_mapping", "=", "np", ".", "zeros", "(", "[", "n_clusters", ",", "2", "]", ")", "\n", "index_mapping", "[", ":", ",", "0", "]", "=", "list", "(", "range", "(", "0", ",", "n_clusters", ")", ")", "\n", "\n", "while", "np", ".", "sum", "(", "inter_mat", ")", ">", "(", "-", "1", "*", "n_clusters", "*", "n_clusters", ")", ":", "\n", "        ", "max_i", ",", "max_j", "=", "np", ".", "unravel_index", "(", "inter_mat", ".", "argmax", "(", ")", ",", "inter_mat", ".", "shape", ")", "\n", "index_mapping", "[", "max_i", ",", "1", "]", "=", "max_j", "\n", "inter_mat", "[", "max_i", ",", ":", "]", "=", "-", "1", "\n", "inter_mat", "[", ":", ",", "max_j", "]", "=", "-", "1", "\n", "\n", "# print('component 1 cluser', max_i, '==', 'component 2 cluser', max_j)", "\n", "result_mat_aligned", "[", "\n", "np", ".", "where", "(", "result_mat_aligned", "[", ":", ",", "second_idx", "]", "==", "max_j", ")", ",", "second_idx", "]", "=", "max_i", "+", "offset", "\n", "", "return", "index_mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.cluster_comb._validate_cluster_number": [[291, 314], ["sklearn.utils.check_array", "range", "numpy.unique", "len", "print", "RuntimeError", "len", "len"], "function", ["None"], ["", "def", "_validate_cluster_number", "(", "original_results", ",", "n_clusters", ")", ":", "\n", "    ", "\"\"\"validate all estimators form the same number of clusters as defined\n    in n_clusters.\n\n    Parameters\n    ----------\n    original_results :\n    n_clusters\n\n    Returns\n    -------\n\n    \"\"\"", "\n", "original_results", "=", "check_array", "(", "original_results", ")", "\n", "\n", "for", "i", "in", "range", "(", "original_results", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "        ", "values", ",", "counts", "=", "np", ".", "unique", "(", "original_results", "[", ":", ",", "i", "]", ",", "return_counts", "=", "True", ")", "\n", "if", "len", "(", "values", ")", "!=", "n_clusters", ":", "\n", "            ", "print", "(", "len", "(", "values", ")", ",", "len", "(", "counts", ")", ")", "\n", "RuntimeError", "(", "'cluster result does not equal to n_clusters'", ")", "\n", "\n", "", "", "return", "original_results", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.__init__": [[95, 110], ["base.BaseAggregator.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "local_region_size", "=", "30", ",", "\n", "local_max_features", "=", "1.0", ",", "n_bins", "=", "10", ",", "\n", "random_state", "=", "None", ",", "contamination", "=", "0.1", ",", "pre_fitted", "=", "False", ")", ":", "\n", "        ", "super", "(", "LSCP", ",", "self", ")", ".", "__init__", "(", "base_estimators", "=", "base_estimators", ",", "\n", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "if", "not", "(", "0.", "<", "contamination", "<=", "0.5", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"contamination must be in (0, 0.5], \"", "\n", "\"got: %f\"", "%", "contamination", ")", "\n", "", "self", ".", "contamination", "=", "contamination", "\n", "self", ".", "base_estimators", "=", "base_estimators", "\n", "self", ".", "local_region_size", "=", "local_region_size", "\n", "self", ".", "local_max_features", "=", "local_max_features", "\n", "self", ".", "n_bins", "=", "n_bins", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.fit": [[111, 137], ["sklearn.utils.check_array", "detector_lscp.LSCP._set_n_classes", "pyod.models.lscp.LSCP", "detector_lscp.LSCP.detector_.fit", "detector_lscp.LSCP._process_decision_scores"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._set_n_classes", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._process_decision_scores"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit detector. y is optional for unsupervised methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n        \"\"\"", "\n", "\n", "# Validate inputs X and y", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "self", ".", "_set_n_classes", "(", "y", ")", "\n", "self", ".", "detector_", "=", "PyOD_LSCP", "(", "detector_list", "=", "self", ".", "base_estimators", ",", "\n", "local_region_size", "=", "self", ".", "local_region_size", ",", "\n", "local_max_features", "=", "self", ".", "local_max_features", ",", "\n", "n_bins", "=", "self", ".", "n_bins", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "contamination", "=", "self", ".", "contamination", ")", "\n", "self", ".", "detector_", ".", "fit", "(", "X", ")", "\n", "self", ".", "decision_scores_", "=", "self", ".", "detector_", ".", "decision_scores_", "\n", "self", ".", "_process_decision_scores", "(", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function": [[138, 161], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "detector_lscp.LSCP.detector_.decision_function"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.decision_function"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict raw anomaly scores of X using the fitted detector.\n\n        The anomaly score of an input sample is computed based on the fitted\n        detector. For consistency, outliers are assigned with\n        higher anomaly scores.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples. Sparse matrices are accepted only\n            if they are supported by the base estimator.\n\n        Returns\n        -------\n        anomaly_scores : numpy array of shape (n_samples,)\n            The anomaly score of the input samples.\n        \"\"\"", "\n", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "\n", "return", "self", ".", "detector_", ".", "decision_function", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.predict": [[162, 180], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "detector_lscp.LSCP._detector_predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._detector_predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict if a particular sample is an outlier or not.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        outlier_labels : numpy array of shape (n_samples,)\n            For each observation, tells whether or not\n            it should be considered as an outlier according to the\n            fitted model. 0 stands for inliers and 1 for outliers.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "return", "self", ".", "_detector_predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.predict_proba": [[181, 211], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "detector_lscp.LSCP._detector_predict_proba"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.base.BaseAggregator._detector_predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ",", "proba_method", "=", "'linear'", ")", ":", "\n", "        ", "\"\"\"Predict the probability of a sample being outlier. Two approaches\n        are possible:\n\n        1. simply use Min-max conversion to linearly transform the outlier\n           scores into the range of [0,1]. The model must be\n           fitted first.\n        2. use unifying scores, see :cite:`kriegel2011interpreting`.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        proba_method : str, optional (default='linear')\n            Probability conversion method. It must be one of\n            'linear' or 'unify'.\n\n        Returns\n        -------\n        outlier_labels : numpy array of shape (n_samples,)\n            For each observation, tells whether or not\n            it should be considered as an outlier according to the\n            fitted model. Return the outlier probability, ranging\n            in [0,1].\n        \"\"\"", "\n", "\n", "check_is_fitted", "(", "self", ",", "[", "'decision_scores_'", ",", "'threshold_'", ",", "'labels_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "return", "self", ".", "_detector_predict_proba", "(", "X", ",", "proba_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.detector_lscp.LSCP.fit_predict": [[212, 231], ["detector_lscp.LSCP.fit", "detector_lscp.LSCP.predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X. y is optional for unsupervised\n        methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "predict", "(", "X", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__": [[71, 104], ["base.BaseAggregator.__init__", "pyod.utils.utility.check_parameter", "isinstance", "ValueError", "int", "pyod.utils.utility.check_parameter", "warnings.warn", "warnings.warn", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.__init__"], ["def", "__init__", "(", "self", ",", "base_estimators", ",", "local_region_size", "=", "30", ",", "\n", "n_selected_clfs", "=", "None", ",", "use_weights", "=", "False", ",", "threshold", "=", "None", ",", "\n", "pre_fitted", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "DES_LA", ",", "self", ")", ".", "__init__", "(", "\n", "base_estimators", "=", "base_estimators", ",", "pre_fitted", "=", "pre_fitted", ")", "\n", "\n", "# validate input parameters", "\n", "if", "not", "isinstance", "(", "local_region_size", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'local_region_size must be an integer variable'", ")", "\n", "", "check_parameter", "(", "local_region_size", ",", "low", "=", "2", ",", "include_left", "=", "True", ",", "\n", "param_name", "=", "'local_region_size'", ")", "\n", "self", ".", "local_region_size", "=", "local_region_size", "\n", "\n", "if", "n_selected_clfs", "is", "None", ":", "\n", "            ", "self", ".", "n_selected_clfs", "=", "int", "(", "self", ".", "n_base_estimators_", "*", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "n_selected_clfs", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'n_selected_clfs must be an integer variable'", ")", "\n", "", "check_parameter", "(", "n_selected_clfs", ",", "low", "=", "1", ",", "\n", "high", "=", "self", ".", "n_base_estimators_", ",", "include_left", "=", "True", ",", "\n", "include_right", "=", "True", ",", "param_name", "=", "'n_selected_clfs'", ")", "\n", "self", ".", "n_selected_clfs", "=", "n_selected_clfs", "\n", "\n", "", "self", ".", "use_weights", "=", "use_weights", "\n", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"DES does not support threshold setting option. \"", "\n", "\"Please set the threshold in classifiers directly.\"", ")", "\n", "\n", "", "if", "pre_fitted", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"DES does not support pre_fitted option.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit": [[105, 143], ["sklearn.utils.check_X_y", "sklearn.utils.check_array", "sklearn.utils.multiclass.check_classification_targets", "len", "sklearn.neighbors.KDTree", "numpy.zeros", "enumerate", "numpy.unique", "clf.fit", "clf.predict"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict"], ["", "", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit classifier.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n        \"\"\"", "\n", "\n", "# Validate inputs X and y", "\n", "X", ",", "y", "=", "check_X_y", "(", "X", ",", "y", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "check_classification_targets", "(", "y", ")", "\n", "self", ".", "_classes", "=", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# save the train ground truth for evaluation purpose", "\n", "self", ".", "y_train_", "=", "y", "\n", "\n", "# build KDTree out of training subspace", "\n", "self", ".", "tree_", "=", "KDTree", "(", "X", ")", "\n", "\n", "self", ".", "y_train_predicted_", "=", "np", ".", "zeros", "(", "\n", "[", "n_samples", ",", "self", ".", "n_base_estimators_", "]", ")", "\n", "\n", "# train all base classifiers on X, and get their local predicted scores", "\n", "# iterate over all base classifiers", "\n", "for", "i", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "            ", "clf", ".", "fit", "(", "X", ",", "y", ")", "\n", "self", ".", "y_train_predicted_", "[", ":", ",", "i", "]", "=", "clf", ".", "predict", "(", "X", ")", "\n", "clf", ".", "fitted_", "=", "True", "\n", "\n", "", "self", ".", "fitted_", "=", "True", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict": [[144, 158], ["classifier_des.DES_LA._predict_internal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA._predict_internal"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Predict the class labels for the provided data.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "return", "self", ".", "_predict_internal", "(", "X", ",", "predict_proba", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba": [[159, 174], ["classifier_des.DES_LA._predict_internal"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA._predict_internal"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Return probability estimates for the test data X.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        p : numpy array of shape (n_samples,)\n            The class probabilities of the input samples.\n            Classes are ordered by lexicographic order.\n        \"\"\"", "\n", "return", "self", ".", "_predict_internal", "(", "X", ",", "predict_proba", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA._predict_internal": [[175, 257], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.check_array", "classifier_des.DES_LA.tree_.query", "range", "numpy.zeros", "numpy.zeros", "X[].reshape", "numpy.zeros", "enumerate", "pyod.utils.utility.argmaxn", "clf_performance[].reshape", "numpy.zeros", "numpy.zeros", "enumerate", "utils.utility.score_to_proba", "sklearn.metrics.accuracy_score", "len", "len", "len", "clf.predict_proba", "clf.predict", "numpy.mean", "numpy.mean", "classifier_comb.majority_vote", "classifier_comb.majority_vote"], "methods", ["home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.argmaxn", "home.repos.pwc.inspect_result.yzhao062_combo.utils.utility.score_to_proba", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict_proba", "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.predict", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.majority_vote", "home.repos.pwc.inspect_result.yzhao062_combo.models.score_comb.majority_vote"], ["", "def", "_predict_internal", "(", "self", ",", "X", ",", "predict_proba", ")", ":", "\n", "        ", "\"\"\"Internal function for predict and predict_proba\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        predict_proba : bool\n            if True, return the result of predict_proba\n\n        Returns\n        -------\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "[", "'fitted_'", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# Find neighbors for all test instances", "\n", "_", ",", "ind_arr", "=", "self", ".", "tree_", ".", "query", "(", "X", ",", "k", "=", "self", ".", "local_region_size", ")", "\n", "\n", "if", "predict_proba", ":", "\n", "            ", "y_predicted", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "self", ".", "_classes", "]", ")", "\n", "", "else", ":", "\n", "            ", "y_predicted", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "]", ")", "\n", "\n", "# For each test sample", "\n", "", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "test_sample", "=", "X", "[", "i", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "train_inds", "=", "ind_arr", "[", "i", ",", ":", "]", "\n", "\n", "# ground truth", "\n", "y_train_sample", "=", "self", ".", "y_train_", "[", "train_inds", "]", "\n", "clf_performance", "=", "np", ".", "zeros", "(", "[", "self", ".", "n_base_estimators_", ",", "]", ")", "\n", "\n", "for", "j", ",", "clf", "in", "enumerate", "(", "self", ".", "base_estimators", ")", ":", "\n", "                ", "y_train_clf", "=", "self", ".", "y_train_predicted_", "[", "train_inds", ",", "j", "]", "\n", "clf_performance", "[", "j", "]", "=", "accuracy_score", "(", "y_train_sample", ",", "\n", "y_train_clf", ")", "\n", "\n", "# print(clf_performance)", "\n", "\n", "# get the indices of the best performing clfs", "\n", "", "select_clf_inds", "=", "argmaxn", "(", "clf_performance", ",", "n", "=", "self", ".", "n_selected_clfs", ")", "\n", "select_clf_weights", "=", "clf_performance", "[", "select_clf_inds", "]", ".", "reshape", "(", "1", ",", "len", "(", "select_clf_inds", ")", ")", "\n", "\n", "# print(select_clf_inds)", "\n", "\n", "all_scores", "=", "np", ".", "zeros", "(", "[", "1", ",", "len", "(", "select_clf_inds", ")", "]", ")", "\n", "all_proba", "=", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "_classes", ",", "len", "(", "select_clf_inds", ")", "]", ")", "\n", "\n", "for", "k", ",", "clf_ind", "in", "enumerate", "(", "select_clf_inds", ")", ":", "\n", "\n", "                ", "clf", "=", "self", ".", "base_estimators", "[", "clf_ind", "]", "\n", "# make prediction", "\n", "if", "predict_proba", ":", "\n", "                    ", "all_proba", "[", ":", ",", ":", ",", "k", "]", "=", "clf", ".", "predict_proba", "(", "test_sample", ")", "\n", "", "else", ":", "\n", "                    ", "all_scores", "[", ":", ",", "k", "]", "=", "clf", ".", "predict", "(", "test_sample", ")", "\n", "\n", "# print('score', len(select_clf_inds), all_scores)", "\n", "\n", "", "", "if", "predict_proba", ":", "\n", "                ", "if", "self", ".", "use_weights", ":", "\n", "                    ", "y_predicted", "[", "i", "]", "=", "np", ".", "mean", "(", "all_proba", "*", "select_clf_weights", ",", "\n", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "y_predicted", "[", "i", "]", "=", "np", ".", "mean", "(", "all_proba", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "use_weights", ":", "\n", "                    ", "y_predicted", "[", "i", "]", "=", "majority_vote", "(", "all_scores", ",", "\n", "n_classes", "=", "self", ".", "_classes", ",", "\n", "weights", "=", "select_clf_weights", ")", "\n", "", "else", ":", "\n", "                    ", "y_predicted", "[", "i", "]", "=", "majority_vote", "(", "all_scores", ",", "\n", "n_classes", "=", "self", ".", "_classes", ")", "\n", "", "", "", "if", "predict_proba", ":", "\n", "            ", "return", "score_to_proba", "(", "y_predicted", ")", "\n", "", "else", ":", "\n", "            ", "return", "y_predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhao062_combo.models.classifier_des.DES_LA.fit_predict": [[258, 276], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "fit_predict", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit estimator and predict on X\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : numpy array of shape (n_samples,), optional (default=None)\n            The ground truth of the input samples (labels).\n\n        Returns\n        -------\n        labels : numpy array of shape (n_samples,)\n            Class labels for each data sample.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "'fit_predict should not be used in supervised learning models.'", ")", "\n", "", "", ""]]}