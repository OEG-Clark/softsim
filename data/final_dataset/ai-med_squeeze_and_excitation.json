{"home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.ChannelSELayer3D.__init__": [[29, 42], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool3d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ",", "reduction_ratio", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        :param num_channels: No of input channels\n        :param reduction_ratio: By how much should the num_channels should be reduced\n        \"\"\"", "\n", "super", "(", "ChannelSELayer3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "num_channels_reduced", "=", "num_channels", "//", "reduction_ratio", "\n", "self", ".", "reduction_ratio", "=", "reduction_ratio", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "num_channels", ",", "num_channels_reduced", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "num_channels_reduced", ",", "num_channels", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.ChannelSELayer3D.forward": [[43, 59], ["input_tensor.size", "squeeze_and_excitation_3D.ChannelSELayer3D.avg_pool", "squeeze_and_excitation_3D.ChannelSELayer3D.relu", "squeeze_and_excitation_3D.ChannelSELayer3D.sigmoid", "torch.mul", "squeeze_and_excitation_3D.ChannelSELayer3D.fc1", "squeeze_and_excitation_3D.ChannelSELayer3D.fc2", "squeeze_and_excitation_3D.ChannelSELayer3D.view", "squeeze_and_excitation_3D.ChannelSELayer3D.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param input_tensor: X, shape = (batch_size, num_channels, D, H, W)\n        :return: output tensor\n        \"\"\"", "\n", "batch_size", ",", "num_channels", ",", "D", ",", "H", ",", "W", "=", "input_tensor", ".", "size", "(", ")", "\n", "# Average along each channel", "\n", "squeeze_tensor", "=", "self", ".", "avg_pool", "(", "input_tensor", ")", "\n", "\n", "# channel excitation", "\n", "fc_out_1", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "squeeze_tensor", ".", "view", "(", "batch_size", ",", "num_channels", ")", ")", ")", "\n", "fc_out_2", "=", "self", ".", "sigmoid", "(", "self", ".", "fc2", "(", "fc_out_1", ")", ")", "\n", "\n", "output_tensor", "=", "torch", ".", "mul", "(", "input_tensor", ",", "fc_out_2", ".", "view", "(", "batch_size", ",", "num_channels", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.SpatialSELayer3D.__init__": [[67, 75], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ")", ":", "\n", "        ", "\"\"\"\n        :param num_channels: No of input channels\n\n        \"\"\"", "\n", "super", "(", "SpatialSELayer3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "num_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.SpatialSELayer3D.forward": [[76, 97], ["input_tensor.size", "squeeze_and_excitation_3D.SpatialSELayer3D.sigmoid", "torch.mul", "weights.view.view.view", "torch.nn.functional.conv2d", "squeeze_and_excitation_3D.SpatialSELayer3D.conv", "squeeze_and_excitation_3D.SpatialSELayer3D.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "weights", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param weights: weights for few shot learning\n        :param input_tensor: X, shape = (batch_size, num_channels, D, H, W)\n        :return: output_tensor\n        \"\"\"", "\n", "# channel squeeze", "\n", "batch_size", ",", "channel", ",", "D", ",", "H", ",", "W", "=", "input_tensor", ".", "size", "(", ")", "\n", "\n", "if", "weights", ":", "\n", "            ", "weights", "=", "weights", ".", "view", "(", "1", ",", "channel", ",", "1", ",", "1", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input_tensor", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "input_tensor", ")", "\n", "\n", "", "squeeze_tensor", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n", "# spatial excitation", "\n", "output_tensor", "=", "torch", ".", "mul", "(", "input_tensor", ",", "squeeze_tensor", ".", "view", "(", "batch_size", ",", "1", ",", "D", ",", "H", ",", "W", ")", ")", "\n", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.ChannelSpatialSELayer3D.__init__": [[105, 113], ["torch.nn.Module.__init__", "squeeze_and_excitation_3D.ChannelSELayer3D", "squeeze_and_excitation_3D.SpatialSELayer3D"], "methods", ["home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ",", "reduction_ratio", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        :param num_channels: No of input channels\n        :param reduction_ratio: By how much should the num_channels should be reduced\n        \"\"\"", "\n", "super", "(", "ChannelSpatialSELayer3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cSE", "=", "ChannelSELayer3D", "(", "num_channels", ",", "reduction_ratio", ")", "\n", "self", ".", "sSE", "=", "SpatialSELayer3D", "(", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.ChannelSpatialSELayer3D.forward": [[114, 121], ["torch.max", "squeeze_and_excitation_3D.ChannelSpatialSELayer3D.cSE", "squeeze_and_excitation_3D.ChannelSpatialSELayer3D.sSE"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param input_tensor: X, shape = (batch_size, num_channels, D, H, W)\n        :return: output_tensor\n        \"\"\"", "\n", "output_tensor", "=", "torch", ".", "max", "(", "self", ".", "cSE", "(", "input_tensor", ")", ",", "self", ".", "sSE", "(", "input_tensor", ")", ")", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.ProjectExciteLayer.__init__": [[129, 141], ["torch.nn.Module.__init__", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ",", "reduction_ratio", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        :param num_channels: No of input channels\n        :param reduction_ratio: By how much should the num_channels should be reduced\n        \"\"\"", "\n", "super", "(", "ProjectExciteLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_channels_reduced", "=", "num_channels", "//", "reduction_ratio", "\n", "self", ".", "reduction_ratio", "=", "reduction_ratio", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv_c", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_channels_reduced", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv_cT", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "num_channels_reduced", ",", "out_channels", "=", "num_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation_3D.ProjectExciteLayer.forward": [[142, 167], ["input_tensor.size", "torch.nn.functional.adaptive_avg_pool3d", "torch.nn.functional.adaptive_avg_pool3d", "torch.nn.functional.adaptive_avg_pool3d", "sum", "squeeze_and_excitation_3D.ProjectExciteLayer.sigmoid", "torch.mul", "squeeze_and_excitation_3D.ProjectExciteLayer.conv_cT", "torch.nn.functional.adaptive_avg_pool3d.view", "torch.nn.functional.adaptive_avg_pool3d.view", "torch.nn.functional.adaptive_avg_pool3d.view", "squeeze_and_excitation_3D.ProjectExciteLayer.relu", "squeeze_and_excitation_3D.ProjectExciteLayer.conv_c"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param input_tensor: X, shape = (batch_size, num_channels, D, H, W)\n        :return: output tensor\n        \"\"\"", "\n", "batch_size", ",", "num_channels", ",", "D", ",", "H", ",", "W", "=", "input_tensor", ".", "size", "(", ")", "\n", "\n", "# Project:", "\n", "# Average along channels and different axes", "\n", "squeeze_tensor_w", "=", "F", ".", "adaptive_avg_pool3d", "(", "input_tensor", ",", "(", "1", ",", "1", ",", "W", ")", ")", "\n", "\n", "squeeze_tensor_h", "=", "F", ".", "adaptive_avg_pool3d", "(", "input_tensor", ",", "(", "1", ",", "H", ",", "1", ")", ")", "\n", "\n", "squeeze_tensor_d", "=", "F", ".", "adaptive_avg_pool3d", "(", "input_tensor", ",", "(", "D", ",", "1", ",", "1", ")", ")", "\n", "\n", "# tile tensors to original size and add:", "\n", "final_squeeze_tensor", "=", "sum", "(", "[", "squeeze_tensor_w", ".", "view", "(", "batch_size", ",", "num_channels", ",", "1", ",", "1", ",", "W", ")", ",", "\n", "squeeze_tensor_h", ".", "view", "(", "batch_size", ",", "num_channels", ",", "1", ",", "H", ",", "1", ")", ",", "\n", "squeeze_tensor_d", ".", "view", "(", "batch_size", ",", "num_channels", ",", "D", ",", "1", ",", "1", ")", "]", ")", "\n", "\n", "# Excitation:", "\n", "final_squeeze_tensor", "=", "self", ".", "sigmoid", "(", "self", ".", "conv_cT", "(", "self", ".", "relu", "(", "self", ".", "conv_c", "(", "final_squeeze_tensor", ")", ")", ")", ")", "\n", "output_tensor", "=", "torch", ".", "mul", "(", "input_tensor", ",", "final_squeeze_tensor", ")", "\n", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSELayer.__init__": [[27, 40], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ",", "reduction_ratio", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n\n        :param num_channels: No of input channels\n        :param reduction_ratio: By how much should the num_channels should be reduced\n        \"\"\"", "\n", "super", "(", "ChannelSELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_channels_reduced", "=", "num_channels", "//", "reduction_ratio", "\n", "self", ".", "reduction_ratio", "=", "reduction_ratio", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "num_channels", ",", "num_channels_reduced", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "num_channels_reduced", ",", "num_channels", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSELayer.forward": [[41, 58], ["input_tensor.size", "input_tensor.view().mean", "squeeze_and_excitation.ChannelSELayer.relu", "squeeze_and_excitation.ChannelSELayer.sigmoid", "input_tensor.view().mean.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "squeeze_and_excitation.ChannelSELayer.fc1", "squeeze_and_excitation.ChannelSELayer.fc2", "squeeze_and_excitation.ChannelSELayer.view", "input_tensor.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n\n        :param input_tensor: X, shape = (batch_size, num_channels, H, W)\n        :return: output tensor\n        \"\"\"", "\n", "batch_size", ",", "num_channels", ",", "H", ",", "W", "=", "input_tensor", ".", "size", "(", ")", "\n", "# Average along each channel", "\n", "squeeze_tensor", "=", "input_tensor", ".", "view", "(", "batch_size", ",", "num_channels", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "\n", "# channel excitation", "\n", "fc_out_1", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "squeeze_tensor", ")", ")", "\n", "fc_out_2", "=", "self", ".", "sigmoid", "(", "self", ".", "fc2", "(", "fc_out_1", ")", ")", "\n", "\n", "a", ",", "b", "=", "squeeze_tensor", ".", "size", "(", ")", "\n", "output_tensor", "=", "torch", ".", "mul", "(", "input_tensor", ",", "fc_out_2", ".", "view", "(", "a", ",", "b", ",", "1", ",", "1", ")", ")", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.SpatialSELayer.__init__": [[66, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ")", ":", "\n", "        ", "\"\"\"\n\n        :param num_channels: No of input channels\n        \"\"\"", "\n", "super", "(", "SpatialSELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "num_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.SpatialSELayer.forward": [[75, 96], ["input_tensor.size", "squeeze_and_excitation.SpatialSELayer.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "weights.view.view.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "squeeze_and_excitation.SpatialSELayer.conv", "squeeze_and_excitation.SpatialSELayer.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "weights", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param weights: weights for few shot learning\n        :param input_tensor: X, shape = (batch_size, num_channels, H, W)\n        :return: output_tensor\n        \"\"\"", "\n", "# spatial squeeze", "\n", "batch_size", ",", "channel", ",", "a", ",", "b", "=", "input_tensor", ".", "size", "(", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "weights", "=", "torch", ".", "mean", "(", "weights", ",", "dim", "=", "0", ")", "\n", "weights", "=", "weights", ".", "view", "(", "1", ",", "channel", ",", "1", ",", "1", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input_tensor", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "input_tensor", ")", "\n", "", "squeeze_tensor", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n", "# spatial excitation", "\n", "# print(input_tensor.size(), squeeze_tensor.size())", "\n", "squeeze_tensor", "=", "squeeze_tensor", ".", "view", "(", "batch_size", ",", "1", ",", "a", ",", "b", ")", "\n", "output_tensor", "=", "torch", ".", "mul", "(", "input_tensor", ",", "squeeze_tensor", ")", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__": [[104, 113], ["torch.Module.__init__", "squeeze_and_excitation.ChannelSELayer", "squeeze_and_excitation.SpatialSELayer"], "methods", ["home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "num_channels", ",", "reduction_ratio", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n\n        :param num_channels: No of input channels\n        :param reduction_ratio: By how much should the num_channels should be reduced\n        \"\"\"", "\n", "super", "(", "ChannelSpatialSELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ai-med_squeeze_and_excitation.squeeze_and_excitation.squeeze_and_excitation.ChannelSpatialSELayer.forward": [[114, 122], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "squeeze_and_excitation.ChannelSpatialSELayer.cSE", "squeeze_and_excitation.ChannelSpatialSELayer.sSE"], "methods", ["None"], ["self", ".", "cSE", "=", "ChannelSELayer", "(", "num_channels", ",", "reduction_ratio", ")", "\n", "self", ".", "sSE", "=", "SpatialSELayer", "(", "num_channels", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n\n        :param input_tensor: X, shape = (batch_size, num_channels, H, W)\n        :return: output_tensor\n        \"\"\"", "\n"]]}