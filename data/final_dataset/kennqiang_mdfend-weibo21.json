{"home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.None.run.Run.__init__": [[21, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", "\n", ")", ":", "\n", "        ", "self", ".", "configinfo", "=", "config", "\n", "\n", "self", ".", "use_cuda", "=", "config", "[", "'use_cuda'", "]", "\n", "self", ".", "model_name", "=", "config", "[", "'model_name'", "]", "\n", "self", ".", "lr", "=", "config", "[", "'lr'", "]", "\n", "self", ".", "batchsize", "=", "config", "[", "'batchsize'", "]", "\n", "self", ".", "emb_type", "=", "config", "[", "'emb_type'", "]", "\n", "self", ".", "emb_dim", "=", "config", "[", "'emb_dim'", "]", "\n", "self", ".", "max_len", "=", "config", "[", "'max_len'", "]", "\n", "self", ".", "num_workers", "=", "config", "[", "'num_workers'", "]", "\n", "self", ".", "vocab_file", "=", "config", "[", "'vocab_file'", "]", "\n", "self", ".", "early_stop", "=", "config", "[", "'early_stop'", "]", "\n", "self", ".", "bert", "=", "config", "[", "'bert'", "]", "\n", "self", ".", "root_path", "=", "config", "[", "'root_path'", "]", "\n", "self", ".", "mlp_dims", "=", "config", "[", "'model'", "]", "[", "'mlp'", "]", "[", "'dims'", "]", "\n", "self", ".", "dropout", "=", "config", "[", "'model'", "]", "[", "'mlp'", "]", "[", "'dropout'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "weight_decay", "=", "config", "[", "'weight_decay'", "]", "\n", "self", ".", "epoch", "=", "config", "[", "'epoch'", "]", "\n", "self", ".", "save_param_dir", "=", "config", "[", "'save_param_dir'", "]", "\n", "\n", "self", ".", "train_path", "=", "self", ".", "root_path", "+", "'train.pkl'", "\n", "self", ".", "val_path", "=", "self", ".", "root_path", "+", "'val.pkl'", "\n", "self", ".", "test_path", "=", "self", ".", "root_path", "+", "'test.pkl'", "\n", "\n", "self", ".", "category_dict", "=", "{", "\n", "\"\u79d1\u6280\"", ":", "0", ",", "\n", "\"\u519b\u4e8b\"", ":", "1", ",", "\n", "\"\u6559\u80b2\u8003\u8bd5\"", ":", "2", ",", "\n", "\"\u707e\u96be\u4e8b\u6545\"", ":", "3", ",", "\n", "\"\u653f\u6cbb\"", ":", "4", ",", "\n", "\"\u533b\u836f\u5065\u5eb7\"", ":", "5", ",", "\n", "\"\u8d22\u7ecf\u5546\u4e1a\"", ":", "6", ",", "\n", "\"\u6587\u4f53\u5a31\u4e50\"", ":", "7", ",", "\n", "\"\u793e\u4f1a\u751f\u6d3b\"", ":", "8", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.None.run.Run.get_dataloader": [[61, 72], ["utils.dataloader.w2v_data.load_data", "utils.dataloader.w2v_data.load_data", "utils.dataloader.w2v_data.load_data", "utils.dataloader.bert_data", "utils.dataloader.w2v_data"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.load_data", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.load_data", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.load_data"], ["", "def", "get_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "emb_type", "==", "'bert'", ":", "\n", "            ", "loader", "=", "bert_data", "(", "max_len", "=", "self", ".", "max_len", ",", "batch_size", "=", "self", ".", "batchsize", ",", "vocab_file", "=", "self", ".", "vocab_file", ",", "\n", "category_dict", "=", "self", ".", "category_dict", ",", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "", "elif", "self", ".", "emb_type", "==", "'w2v'", ":", "\n", "            ", "loader", "=", "w2v_data", "(", "max_len", "=", "self", ".", "max_len", ",", "vocab_file", "=", "self", ".", "vocab_file", ",", "emb_dim", "=", "self", ".", "emb_dim", ",", "\n", "batch_size", "=", "self", ".", "batchsize", ",", "category_dict", "=", "self", ".", "category_dict", ",", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "", "train_loader", "=", "loader", ".", "load_data", "(", "self", ".", "train_path", ",", "True", ")", "\n", "val_loader", "=", "loader", ".", "load_data", "(", "self", ".", "val_path", ",", "False", ")", "\n", "test_loader", "=", "loader", ".", "load_data", "(", "self", ".", "test_path", ",", "False", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.None.run.Run.config2dict": [[73, 78], ["run.Run.configinfo.items"], "methods", ["None"], ["", "def", "config2dict", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "configinfo", ".", "items", "(", ")", ":", "\n", "            ", "config_dict", "[", "k", "]", "=", "v", "\n", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.None.run.Run.main": [[79, 86], ["run.Run.get_dataloader", "models.mdfend.Trainer.train", "models.mdfend.Trainer", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.None.run.Run.get_dataloader", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.train"], ["", "def", "main", "(", "self", ")", ":", "\n", "        ", "train_loader", ",", "val_loader", ",", "test_loader", "=", "self", ".", "get_dataloader", "(", ")", "\n", "if", "self", ".", "model_name", "==", "'mdfend'", ":", "\n", "            ", "trainer", "=", "MDFENDTrainer", "(", "emb_dim", "=", "self", ".", "emb_dim", ",", "mlp_dims", "=", "self", ".", "mlp_dims", ",", "bert", "=", "self", ".", "bert", ",", "emb_type", "=", "self", ".", "emb_type", ",", "\n", "use_cuda", "=", "self", ".", "use_cuda", ",", "lr", "=", "self", ".", "lr", ",", "train_loader", "=", "train_loader", ",", "dropout", "=", "self", ".", "dropout", ",", "weight_decay", "=", "self", ".", "weight_decay", ",", "val_loader", "=", "val_loader", ",", "test_loader", "=", "test_loader", ",", "category_dict", "=", "self", ".", "category_dict", ",", "early_stop", "=", "self", ".", "early_stop", ",", "epoches", "=", "self", ".", "epoch", ",", "\n", "save_param_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_param_dir", ",", "self", ".", "model_name", ")", ")", "\n", "", "trainer", ".", "train", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.bert_data.__init__": [[40, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_len", ",", "batch_size", ",", "vocab_file", ",", "category_dict", ",", "num_workers", "=", "2", ")", ":", "\n", "        ", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "self", ".", "category_dict", "=", "category_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.bert_data.load_data": [[47, 67], ["dataloader.df_filter", "torch.utils.data.DataLoader.bert_data.data[].to_numpy", "torch.tensor", "torch.tensor", "dataloader.word2input", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "dataloader.read_pkl", "torch.utils.data.DataLoader.bert_data.data[].astype().to_numpy", "torch.utils.data.DataLoader.bert_data.data[].apply().to_numpy", "torch.utils.data.DataLoader.bert_data.data[].astype", "torch.utils.data.DataLoader.bert_data.data[].apply"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.df_filter", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.word2input", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.read_pkl"], ["", "def", "load_data", "(", "self", ",", "path", ",", "shuffle", ")", ":", "\n", "        ", "self", ".", "data", "=", "df_filter", "(", "read_pkl", "(", "path", ")", ")", "\n", "content", "=", "self", ".", "data", "[", "'content'", "]", ".", "to_numpy", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "self", ".", "data", "[", "'label'", "]", ".", "astype", "(", "int", ")", ".", "to_numpy", "(", ")", ")", "\n", "category", "=", "torch", ".", "tensor", "(", "self", ".", "data", "[", "'category'", "]", ".", "apply", "(", "lambda", "c", ":", "self", ".", "category_dict", "[", "c", "]", ")", ".", "to_numpy", "(", ")", ")", "\n", "content_token_ids", ",", "content_masks", "=", "word2input", "(", "content", ",", "self", ".", "vocab_file", ",", "self", ".", "max_len", ")", "\n", "dataset", "=", "TensorDataset", "(", "content_token_ids", ",", "\n", "content_masks", ",", "\n", "label", ",", "\n", "category", "\n", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "worker_init_fn", "=", "_init_fn", "\n", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.__init__": [[69, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_len", ",", "batch_size", ",", "emb_dim", ",", "vocab_file", ",", "category_dict", ",", "num_workers", "=", "2", ")", ":", "\n", "        ", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "self", ".", "category_dict", "=", "category_dict", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.tokenization": [[77, 87], ["re.sub", "jieba.cut", "tokens.append"], "methods", ["None"], ["", "def", "tokenization", "(", "self", ",", "content", ")", ":", "\n", "        ", "pattern", "=", "\"&nbsp;|\u5c55\u5f00\u5168\u6587|\u79d2\u62cd\u89c6\u9891|O\u7f51\u9875\u94fe\u63a5|\u7f51\u9875\u94fe\u63a5\"", "\n", "repl", "=", "\"\"", "\n", "tokens", "=", "[", "]", "\n", "for", "c", "in", "content", ":", "\n", "            ", "c", "=", "re", ".", "sub", "(", "pattern", ",", "repl", ",", "c", ",", "count", "=", "0", ")", "\n", "cut_c", "=", "jieba", ".", "cut", "(", "c", ",", "cut_all", "=", "False", ")", "\n", "words", "=", "[", "word", "for", "word", "in", "cut_c", "]", "\n", "tokens", ".", "append", "(", "words", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.get_mask": [[88, 97], ["torch.tensor", "len", "masks.append", "masks.append", "len", "len"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "(", "len", "(", "token", ")", "<", "self", ".", "max_len", ")", ":", "\n", "                ", "masks", ".", "append", "(", "[", "1", "]", "*", "len", "(", "token", ")", "+", "[", "0", "]", "*", "(", "self", ".", "max_len", "-", "len", "(", "token", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "masks", ".", "append", "(", "[", "1", "]", "*", "self", ".", "max_len", ")", "\n", "\n", "", "", "return", "torch", ".", "tensor", "(", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.encode": [[98, 110], ["gensim.models.keyedvectors.KeyedVectors.load", "torch.tensor", "range", "embedding.append", "numpy.array", "words_vec.append", "len", "words_vec.append", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "w2v_model", "=", "KeyedVectors", ".", "load", "(", "self", ".", "vocab_file", ")", "\n", "embedding", "=", "[", "]", "\n", "for", "token_id", "in", "token_ids", ":", "\n", "            ", "words", "=", "[", "w", "for", "w", "in", "token_id", "[", ":", "self", ".", "max_len", "]", "]", "\n", "words_vec", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "                ", "words_vec", ".", "append", "(", "w2v_model", "[", "word", "]", "if", "word", "in", "w2v_model", "else", "np", ".", "zeros", "(", "[", "self", ".", "emb_dim", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "words_vec", ")", ",", "self", ".", "max_len", ")", ":", "\n", "                ", "words_vec", ".", "append", "(", "np", ".", "zeros", "(", "[", "self", ".", "emb_dim", "]", ")", ")", "\n", "", "embedding", ".", "append", "(", "words_vec", ")", "\n", "", "return", "torch", ".", "tensor", "(", "np", ".", "array", "(", "embedding", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.load_data": [[111, 134], ["dataloader.df_filter", "torch.utils.data.DataLoader.w2v_data.data[].to_numpy", "torch.tensor", "torch.tensor", "torch.utils.data.DataLoader.w2v_data.tokenization", "torch.utils.data.DataLoader.w2v_data.get_mask", "torch.utils.data.DataLoader.w2v_data.encode", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "dataloader.read_pkl", "torch.utils.data.DataLoader.w2v_data.data[].astype().to_numpy", "torch.utils.data.DataLoader.w2v_data.data[].apply().to_numpy", "torch.utils.data.DataLoader.w2v_data.data[].astype", "torch.utils.data.DataLoader.w2v_data.data[].apply"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.df_filter", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.tokenization", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.get_mask", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.encode", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.read_pkl"], ["", "def", "load_data", "(", "self", ",", "path", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "data", "=", "df_filter", "(", "read_pkl", "(", "path", ")", ")", "\n", "content", "=", "self", ".", "data", "[", "'content'", "]", ".", "to_numpy", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "self", ".", "data", "[", "'label'", "]", ".", "astype", "(", "int", ")", ".", "to_numpy", "(", ")", ")", "\n", "category", "=", "torch", ".", "tensor", "(", "self", ".", "data", "[", "'category'", "]", ".", "apply", "(", "lambda", "c", ":", "self", ".", "category_dict", "[", "c", "]", ")", ".", "to_numpy", "(", ")", ")", "\n", "\n", "content_token_ids", "=", "self", ".", "tokenization", "(", "content", ")", "\n", "content_masks", "=", "self", ".", "get_mask", "(", "content_token_ids", ")", "\n", "emb_content", "=", "self", ".", "encode", "(", "content_token_ids", ")", "\n", "\n", "dataset", "=", "TensorDataset", "(", "emb_content", ",", "\n", "content_masks", ",", "\n", "label", ",", "\n", "category", "\n", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "shuffle", "\n", ")", "\n", "return", "dataloader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader._init_fn": [[13, 15], ["numpy.random.seed"], "function", ["None"], ["def", "_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "2021", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.read_pkl": [[16, 20], ["open", "pickle.load"], "function", ["None"], ["", "def", "read_pkl", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "t", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.df_filter": [[21, 24], ["None"], "function", ["None"], ["", "def", "df_filter", "(", "df_data", ")", ":", "\n", "    ", "df_data", "=", "df_data", "[", "df_data", "[", "'category'", "]", "!=", "'\u65e0\u6cd5\u786e\u5b9a'", "]", "\n", "return", "df_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.word2input": [[25, 38], ["transformers.BertTokenizer", "enumerate", "torch.tensor", "torch.zeros", "enumerate", "torch.tensor.append", "transformers.BertTokenizer.encode"], "function", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.dataloader.w2v_data.encode"], ["", "def", "word2input", "(", "texts", ",", "vocab_file", ",", "max_len", ")", ":", "\n", "    ", "tokenizer", "=", "BertTokenizer", "(", "vocab_file", "=", "vocab_file", ")", "\n", "token_ids", "=", "[", "]", "\n", "for", "i", ",", "text", "in", "enumerate", "(", "texts", ")", ":", "\n", "        ", "token_ids", ".", "append", "(", "\n", "tokenizer", ".", "encode", "(", "text", ",", "max_length", "=", "max_len", ",", "add_special_tokens", "=", "True", ",", "padding", "=", "'max_length'", ",", "\n", "truncation", "=", "True", ")", ")", "\n", "", "token_ids", "=", "torch", ".", "tensor", "(", "token_ids", ")", "\n", "masks", "=", "torch", ".", "zeros", "(", "token_ids", ".", "shape", ")", "\n", "mask_token_id", "=", "tokenizer", ".", "pad_token_id", "\n", "for", "i", ",", "tokens", "in", "enumerate", "(", "token_ids", ")", ":", "\n", "        ", "masks", "[", "i", "]", "=", "(", "tokens", "!=", "mask_token_id", ")", "\n", "", "return", "token_ids", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Recorder.__init__": [[6, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "early_step", ")", ":", "\n", "        ", "self", ".", "max", "=", "{", "'metric'", ":", "0", "}", "\n", "self", ".", "cur", "=", "{", "'metric'", ":", "0", "}", "\n", "self", ".", "maxindex", "=", "0", "\n", "self", ".", "curindex", "=", "0", "\n", "self", ".", "early_step", "=", "early_step", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Recorder.add": [[13, 18], ["print", "utils.Recorder.judge"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Recorder.judge"], ["", "def", "add", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "cur", "=", "x", "\n", "self", ".", "curindex", "+=", "1", "\n", "print", "(", "\"curent\"", ",", "self", ".", "cur", ")", "\n", "return", "self", ".", "judge", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Recorder.judge": [[19, 30], ["utils.Recorder.showfinal", "utils.Recorder.showfinal"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Recorder.showfinal", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Recorder.showfinal"], ["", "def", "judge", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cur", "[", "'metric'", "]", ">", "self", ".", "max", "[", "'metric'", "]", ":", "\n", "            ", "self", ".", "max", "=", "self", ".", "cur", "\n", "self", ".", "maxindex", "=", "self", ".", "curindex", "\n", "self", ".", "showfinal", "(", ")", "\n", "return", "'save'", "\n", "", "self", ".", "showfinal", "(", ")", "\n", "if", "self", ".", "curindex", "-", "self", ".", "maxindex", ">=", "self", ".", "early_step", ":", "\n", "            ", "return", "'esc'", "\n", "", "else", ":", "\n", "            ", "return", "'continue'", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Recorder.showfinal": [[31, 33], ["print"], "methods", ["None"], ["", "", "def", "showfinal", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Max\"", ",", "self", ".", "max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Averager.__init__": [[103, 106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "self", ".", "v", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Averager.add": [[107, 110], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "v", "=", "(", "self", ".", "v", "*", "self", ".", "n", "+", "x", ")", "/", "(", "self", ".", "n", "+", "1", ")", "\n", "self", ".", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Averager.item": [[111, 113], ["None"], "methods", ["None"], ["", "def", "item", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "v", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.metrics": [[34, 82], ["category_dict.items", "enumerate", "res_by_category.items", "sklearn.metrics.roc_auc_score", "numpy.around().astype", "sklearn.metrics.f1_score", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "sklearn.metrics.accuracy_score", "res_by_category.items", "[].append", "[].append", "numpy.around", "sklearn.metrics.roc_auc_score().round().tolist", "numpy.array", "sklearn.metrics.precision_score().round().tolist", "sklearn.metrics.recall_score().round().tolist", "sklearn.metrics.f1_score().round().tolist", "sklearn.metrics.accuracy_score().round", "sklearn.metrics.roc_auc_score().round", "sklearn.metrics.precision_score().round", "sklearn.metrics.recall_score().round", "sklearn.metrics.f1_score().round", "sklearn.metrics.accuracy_score", "numpy.around().astype", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "numpy.around().astype", "numpy.around().astype", "numpy.around().astype", "numpy.around", "numpy.array", "numpy.around", "numpy.around", "numpy.around", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "metrics", "(", "y_true", ",", "y_pred", ",", "category", ",", "category_dict", ")", ":", "\n", "    ", "res_by_category", "=", "{", "}", "\n", "metrics_by_category", "=", "{", "}", "\n", "reverse_category_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "category_dict", ".", "items", "(", ")", ":", "\n", "        ", "reverse_category_dict", "[", "v", "]", "=", "k", "\n", "res_by_category", "[", "k", "]", "=", "{", "\"y_true\"", ":", "[", "]", ",", "\"y_pred\"", ":", "[", "]", "}", "\n", "\n", "", "for", "i", ",", "c", "in", "enumerate", "(", "category", ")", ":", "\n", "        ", "c", "=", "reverse_category_dict", "[", "c", "]", "\n", "res_by_category", "[", "c", "]", "[", "'y_true'", "]", ".", "append", "(", "y_true", "[", "i", "]", ")", "\n", "res_by_category", "[", "c", "]", "[", "'y_pred'", "]", ".", "append", "(", "y_pred", "[", "i", "]", ")", "\n", "\n", "", "for", "c", ",", "res", "in", "res_by_category", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "metrics_by_category", "[", "c", "]", "=", "{", "\n", "'auc'", ":", "roc_auc_score", "(", "res", "[", "'y_true'", "]", ",", "res", "[", "'y_pred'", "]", ")", ".", "round", "(", "4", ")", ".", "tolist", "(", ")", "\n", "}", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "metrics_by_category", "[", "c", "]", "=", "{", "\n", "'auc'", ":", "0", "\n", "}", "\n", "\n", "", "", "metrics_by_category", "[", "'auc'", "]", "=", "roc_auc_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "y_pred", "=", "np", ".", "around", "(", "np", ".", "array", "(", "y_pred", ")", ")", ".", "astype", "(", "int", ")", "\n", "metrics_by_category", "[", "'metric'", "]", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "metrics_by_category", "[", "'recall'", "]", "=", "recall_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "metrics_by_category", "[", "'precision'", "]", "=", "precision_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "metrics_by_category", "[", "'acc'", "]", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "for", "c", ",", "res", "in", "res_by_category", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "metrics_by_category", "[", "c", "]", "=", "{", "\n", "'precision'", ":", "precision_score", "(", "res", "[", "'y_true'", "]", ",", "np", ".", "around", "(", "np", ".", "array", "(", "res", "[", "'y_pred'", "]", ")", ")", ".", "astype", "(", "int", ")", ",", "average", "=", "'macro'", ")", ".", "round", "(", "4", ")", ".", "tolist", "(", ")", ",", "\n", "'recall'", ":", "recall_score", "(", "res", "[", "'y_true'", "]", ",", "np", ".", "around", "(", "np", ".", "array", "(", "res", "[", "'y_pred'", "]", ")", ")", ".", "astype", "(", "int", ")", ",", "average", "=", "'macro'", ")", ".", "round", "(", "4", ")", ".", "tolist", "(", ")", ",", "\n", "'fscore'", ":", "f1_score", "(", "res", "[", "'y_true'", "]", ",", "np", ".", "around", "(", "np", ".", "array", "(", "res", "[", "'y_pred'", "]", ")", ")", ".", "astype", "(", "int", ")", ",", "average", "=", "'macro'", ")", ".", "round", "(", "4", ")", ".", "tolist", "(", ")", ",", "\n", "'auc'", ":", "metrics_by_category", "[", "c", "]", "[", "'auc'", "]", ",", "\n", "'acc'", ":", "accuracy_score", "(", "res", "[", "'y_true'", "]", ",", "np", ".", "around", "(", "np", ".", "array", "(", "res", "[", "'y_pred'", "]", ")", ")", ".", "astype", "(", "int", ")", ")", ".", "round", "(", "4", ")", "\n", "}", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "metrics_by_category", "[", "c", "]", "=", "{", "\n", "'precision'", ":", "0", ",", "\n", "'recall'", ":", "0", ",", "\n", "'fscore'", ":", "0", ",", "\n", "'auc'", ":", "0", ",", "\n", "'acc'", ":", "0", "\n", "}", "\n", "", "", "return", "metrics_by_category", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.data2gpu": [[84, 100], ["batch[].cuda", "batch[].cuda", "batch[].cuda", "batch[].cuda"], "function", ["None"], ["", "def", "data2gpu", "(", "batch", ",", "use_cuda", ")", ":", "\n", "    ", "if", "use_cuda", ":", "\n", "        ", "batch_data", "=", "{", "\n", "'content'", ":", "batch", "[", "0", "]", ".", "cuda", "(", ")", ",", "\n", "'content_masks'", ":", "batch", "[", "1", "]", ".", "cuda", "(", ")", ",", "\n", "'label'", ":", "batch", "[", "2", "]", ".", "cuda", "(", ")", ",", "\n", "'category'", ":", "batch", "[", "3", "]", ".", "cuda", "(", ")", "\n", "}", "\n", "", "else", ":", "\n", "        ", "batch_data", "=", "{", "\n", "'content'", ":", "batch", "[", "0", "]", ",", "\n", "'content_masks'", ":", "batch", "[", "1", "]", ",", "\n", "'label'", ":", "batch", "[", "2", "]", ",", "\n", "'category'", ":", "batch", "[", "3", "]", "\n", "}", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.MLP.__init__": [[10, 22], ["super().__init__", "list", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "embed_dims", ",", "dropout", ",", "output_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "list", "(", ")", "\n", "for", "embed_dim", "in", "embed_dims", ":", "\n", "            ", "layers", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "input_dim", ",", "embed_dim", ")", ")", "\n", "layers", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "embed_dim", ")", ")", "\n", "layers", ".", "append", "(", "torch", ".", "nn", ".", "ReLU", "(", ")", ")", "\n", "layers", ".", "append", "(", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "input_dim", "=", "embed_dim", "\n", "", "if", "output_layer", ":", "\n", "            ", "layers", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", ")", "\n", "", "self", ".", "mlp", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.MLP.forward": [[23, 28], ["layers.MLP.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: Float tensor of size ``(batch_size, embed_dim)``\n        \"\"\"", "\n", "return", "self", ".", "mlp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.cnn_extractor.__init__": [[30, 36], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "sum", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "feature_kernel.items"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_kernel", ",", "input_size", ")", ":", "\n", "        ", "super", "(", "cnn_extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "torch", ".", "nn", ".", "Conv1d", "(", "input_size", ",", "feature_num", ",", "kernel", ")", "\n", "for", "kernel", ",", "feature_num", "in", "feature_kernel", ".", "items", "(", ")", "]", ")", "\n", "input_shape", "=", "sum", "(", "[", "feature_kernel", "[", "kernel", "]", "for", "kernel", "in", "feature_kernel", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.cnn_extractor.forward": [[37, 44], ["input_data.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feature.view.view.view", "conv", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "share_input_data", "=", "input_data", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "feature", "=", "[", "conv", "(", "share_input_data", ")", "for", "conv", "in", "self", ".", "convs", "]", "\n", "feature", "=", "[", "torch", ".", "max_pool1d", "(", "f", ",", "f", ".", "shape", "[", "-", "1", "]", ")", "for", "f", "in", "feature", "]", "\n", "feature", "=", "torch", ".", "cat", "(", "feature", ",", "dim", "=", "1", ")", "\n", "feature", "=", "feature", ".", "view", "(", "[", "-", "1", ",", "feature", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.MaskAttention.__init__": [[49, 52], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "MaskAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "input_shape", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.MaskAttention.forward": [[53, 60], ["layers.MaskAttention.attention_layer().view", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "inputs.size", "scores.masked_fill.masked_fill.masked_fill", "layers.MaskAttention.attention_layer", "float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "scores", "=", "self", ".", "attention_layer", "(", "inputs", ")", ".", "view", "(", "-", "1", ",", "inputs", ".", "size", "(", "1", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "", "scores", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "outputs", "=", "torch", ".", "matmul", "(", "scores", ",", "inputs", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "outputs", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.Attention.forward": [[66, 79], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose", "query.size", "float"], "methods", ["None"], ["def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "query", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.MultiHeadedAttention.__init__": [[85, 98], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "layers.Attention", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.__init__"], ["def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "\n", "self", ".", "linear_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "torch", ".", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "for", "_", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "output_linear", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "attention", "=", "Attention", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.MultiHeadedAttention.forward": [[99, 114], ["query.size", "layers.MultiHeadedAttention.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.repeat.repeat.repeat", "l().view().transpose", "layers.MultiHeadedAttention.output_linear", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "query", ".", "size", "(", "0", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "self", ".", "h", ",", "1", ",", "1", ")", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linear_layers", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "x", ",", "attn", "=", "self", ".", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "\n", "return", "self", ".", "output_linear", "(", "x", ")", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.SelfAttentionFeatureExtract.__init__": [[116, 120], ["super().__init__", "layers.MultiHeadedAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "multi_head_num", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", "SelfAttentionFeatureExtract", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "MultiHeadedAttention", "(", "multi_head_num", ",", "input_size", ")", "\n", "self", ".", "out_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "input_size", ",", "output_size", ")", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "query", ",", "mask", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.layers.SelfAttentionFeatureExtract.forward": [[120, 131], ["mask.view.view.view", "layers.SelfAttentionFeatureExtract.attention", "feature.contiguous().view.contiguous().view.contiguous().view", "layers.SelfAttentionFeatureExtract.out_layer", "mask.view.view.size", "mask.view.view.size", "feature.contiguous().view.contiguous().view.contiguous", "feature.contiguous().view.contiguous().view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "query", ",", "mask", "=", "None", ")", ":", "\n", "        ", "mask", "=", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "mask", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "feature", ",", "attn", "=", "self", ".", "attention", "(", "query", "=", "query", ",", "\n", "value", "=", "inputs", ",", "\n", "key", "=", "inputs", ",", "\n", "mask", "=", "mask", "\n", ")", "\n", "feature", "=", "feature", ".", "contiguous", "(", ")", ".", "view", "(", "[", "-", "1", ",", "feature", ".", "size", "(", "-", "1", ")", "]", ")", "\n", "out", "=", "self", ".", "out_layer", "(", "feature", ")", "\n", "return", "out", ",", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.MultiDomainFENDModel.__init__": [[12, 38], ["super().__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "layers.MaskAttention", "torch.Embedding", "torch.Embedding", "layers.SelfAttentionFeatureExtract", "layers.MLP", "transformers.BertModel.from_pretrained().requires_grad_", "expert.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "layers.cnn_extractor", "transformers.BertModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "mlp_dims", ",", "bert", ",", "dropout", ",", "emb_type", ")", ":", "\n", "        ", "super", "(", "MultiDomainFENDModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "domain_num", "=", "9", "\n", "self", ".", "gamma", "=", "10", "\n", "self", ".", "num_expert", "=", "5", "\n", "self", ".", "fea_size", "=", "256", "\n", "self", ".", "emb_type", "=", "emb_type", "\n", "if", "(", "emb_type", "==", "'bert'", ")", ":", "\n", "            ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "bert", ")", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "feature_kernel", "=", "{", "1", ":", "64", ",", "2", ":", "64", ",", "3", ":", "64", ",", "5", ":", "64", ",", "10", ":", "64", "}", "\n", "expert", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_expert", ")", ":", "\n", "            ", "expert", ".", "append", "(", "cnn_extractor", "(", "feature_kernel", ",", "emb_dim", ")", ")", "\n", "", "self", ".", "expert", "=", "nn", ".", "ModuleList", "(", "expert", ")", "\n", "\n", "self", ".", "gate", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "mlp_dims", "[", "-", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "mlp_dims", "[", "-", "1", "]", ",", "self", ".", "num_expert", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ")", "\n", "\n", "self", ".", "attention", "=", "MaskAttention", "(", "emb_dim", ")", "\n", "\n", "self", ".", "domain_embedder", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "self", ".", "domain_num", ",", "embedding_dim", "=", "emb_dim", ")", "\n", "self", ".", "specific_extractor", "=", "SelfAttentionFeatureExtract", "(", "multi_head_num", "=", "1", ",", "input_size", "=", "emb_dim", ",", "output_size", "=", "self", ".", "fea_size", ")", "\n", "self", ".", "classifier", "=", "MLP", "(", "320", ",", "mlp_dims", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.MultiDomainFENDModel.forward": [[40, 65], ["mdfend.MultiDomainFENDModel.attention", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "mdfend.MultiDomainFENDModel.domain_embedder().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mdfend.MultiDomainFENDModel.gate", "range", "mdfend.MultiDomainFENDModel.classifier", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "mdfend.MultiDomainFENDModel.squeeze", "mdfend.MultiDomainFENDModel.bert", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "mdfend.MultiDomainFENDModel.domain_embedder", "gate_value[].unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "inputs", "=", "kwargs", "[", "'content'", "]", "\n", "masks", "=", "kwargs", "[", "'content_masks'", "]", "\n", "category", "=", "kwargs", "[", "'category'", "]", "\n", "if", "self", ".", "emb_type", "==", "\"bert\"", ":", "\n", "            ", "init_feature", "=", "self", ".", "bert", "(", "inputs", ",", "attention_mask", "=", "masks", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "emb_type", "==", "'w2v'", ":", "\n", "            ", "init_feature", "=", "inputs", "\n", "\n", "", "feature", ",", "_", "=", "self", ".", "attention", "(", "init_feature", ",", "masks", ")", "\n", "idxs", "=", "torch", ".", "tensor", "(", "[", "index", "for", "index", "in", "category", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "domain_embedding", "=", "self", ".", "domain_embedder", "(", "idxs", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "gate_input_feature", "=", "feature", "\n", "gate_input", "=", "torch", ".", "cat", "(", "[", "domain_embedding", ",", "gate_input_feature", "]", ",", "dim", "=", "-", "1", ")", "\n", "gate_value", "=", "self", ".", "gate", "(", "gate_input", ")", "\n", "\n", "shared_feature", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_expert", ")", ":", "\n", "            ", "tmp_feature", "=", "self", ".", "expert", "[", "i", "]", "(", "init_feature", ")", "\n", "shared_feature", "+=", "(", "tmp_feature", "*", "gate_value", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "", "label_pred", "=", "self", ".", "classifier", "(", "shared_feature", ")", "\n", "\n", "return", "torch", ".", "sigmoid", "(", "label_pred", ".", "squeeze", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.__init__": [[67, 106], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "emb_dim", ",", "\n", "mlp_dims", ",", "\n", "bert", ",", "\n", "use_cuda", ",", "\n", "lr", ",", "\n", "dropout", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "category_dict", ",", "\n", "weight_decay", ",", "\n", "save_param_dir", ",", "\n", "emb_type", "=", "'bert'", ",", "\n", "loss_weight", "=", "[", "1", ",", "0.006", ",", "0.009", ",", "5e-5", "]", ",", "\n", "early_stop", "=", "5", ",", "\n", "epoches", "=", "100", "\n", ")", ":", "\n", "        ", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "early_stop", "=", "early_stop", "\n", "self", ".", "epoches", "=", "epoches", "\n", "self", ".", "category_dict", "=", "category_dict", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "mlp_dims", "=", "mlp_dims", "\n", "self", ".", "bert", "=", "bert", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "emb_type", "=", "emb_type", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_param_dir", ")", ":", "\n", "            ", "self", ".", "save_param_dir", "=", "os", ".", "makedirs", "(", "save_param_dir", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_param_dir", "=", "save_param_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.train": [[108, 152], ["mdfend.MultiDomainFENDModel", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils.utils.Recorder", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "range", "mdfend.Trainer.model.load_state_dict", "mdfend.Trainer.test", "print", "logger.info", "mdfend.Trainer.model.cuda", "mdfend.Trainer.model.train", "tqdm.tqdm", "utils.utils.Averager", "enumerate", "print", "mdfend.Trainer.test", "utils.utils.Recorder.add", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "mdfend.Trainer.model.parameters", "utils.utils.data2gpu", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "mdfend.Trainer.model", "torch.nn.BCELoss.", "torch.nn.BCELoss.", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.nn.BCELoss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "utils.utils.Averager.add", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "label.float", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "torch.nn.BCELoss.item", "utils.utils.Averager.item", "mdfend.Trainer.model.state_dict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.test", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.train", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.test", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Averager.add", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.data2gpu", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Averager.add", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Averager.item", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.Averager.item"], ["", "", "def", "train", "(", "self", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "(", "logger", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'start training......'", ")", "\n", "", "self", ".", "model", "=", "MultiDomainFENDModel", "(", "self", ".", "emb_dim", ",", "self", ".", "mlp_dims", ",", "self", ".", "bert", ",", "self", ".", "dropout", ",", "self", ".", "emb_type", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "loss_fn", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "recorder", "=", "Recorder", "(", "self", ".", "early_stop", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "100", ",", "gamma", "=", "0.98", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoches", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "train_data_iter", "=", "tqdm", ".", "tqdm", "(", "self", ".", "train_loader", ")", "\n", "avg_loss", "=", "Averager", "(", ")", "\n", "\n", "for", "step_n", ",", "batch", "in", "enumerate", "(", "train_data_iter", ")", ":", "\n", "                ", "batch_data", "=", "data2gpu", "(", "batch", ",", "self", ".", "use_cuda", ")", "\n", "label", "=", "batch_data", "[", "'label'", "]", "\n", "category", "=", "batch_data", "[", "'category'", "]", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "label_pred", "=", "self", ".", "model", "(", "**", "batch_data", ")", "\n", "loss", "=", "loss_fn", "(", "label_pred", ",", "label", ".", "float", "(", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "(", "scheduler", "is", "not", "None", ")", ":", "\n", "                    ", "scheduler", ".", "step", "(", ")", "\n", "", "avg_loss", ".", "add", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "print", "(", "'Training Epoch {}; Loss {}; '", ".", "format", "(", "epoch", "+", "1", ",", "avg_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "results", "=", "self", ".", "test", "(", "self", ".", "val_loader", ")", "\n", "mark", "=", "recorder", ".", "add", "(", "results", ")", "\n", "if", "mark", "==", "'save'", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "save_param_dir", ",", "'parameter_mdfend.pkl'", ")", ")", "\n", "", "elif", "mark", "==", "'esc'", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_param_dir", ",", "'parameter_mdfend.pkl'", ")", ")", ")", "\n", "results", "=", "self", ".", "test", "(", "self", ".", "test_loader", ")", "\n", "print", "(", "results", ")", "\n", "return", "results", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_param_dir", ",", "'parameter_mdfend.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.models.mdfend.Trainer.test": [[153, 171], ["mdfend.Trainer.model.eval", "tqdm.tqdm", "enumerate", "utils.utils.metrics", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.utils.data2gpu", "mdfend.Trainer.model", "label.extend", "pred.extend", "category.extend", "batch_label.detach().cpu().numpy().tolist", "mdfend.Trainer.detach().cpu().numpy().tolist", "batch_category.detach().cpu().numpy().tolist", "batch_label.detach().cpu().numpy", "mdfend.Trainer.detach().cpu().numpy", "batch_category.detach().cpu().numpy", "batch_label.detach().cpu", "mdfend.Trainer.detach().cpu", "batch_category.detach().cpu", "batch_label.detach", "mdfend.Trainer.detach", "batch_category.detach"], "methods", ["home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.metrics", "home.repos.pwc.inspect_result.kennqiang_mdfend-weibo21.utils.utils.data2gpu"], ["", "def", "test", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "pred", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "category", "=", "[", "]", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "data_iter", "=", "tqdm", ".", "tqdm", "(", "dataloader", ")", "\n", "for", "step_n", ",", "batch", "in", "enumerate", "(", "data_iter", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_data", "=", "data2gpu", "(", "batch", ",", "self", ".", "use_cuda", ")", "\n", "batch_label", "=", "batch_data", "[", "'label'", "]", "\n", "batch_category", "=", "batch_data", "[", "'category'", "]", "\n", "batch_label_pred", "=", "self", ".", "model", "(", "**", "batch_data", ")", "\n", "\n", "label", ".", "extend", "(", "batch_label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "pred", ".", "extend", "(", "batch_label_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "category", ".", "extend", "(", "batch_category", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "return", "metrics", "(", "label", ",", "pred", ",", "category", ",", "self", ".", "category_dict", ")", "\n", "", "", ""]]}