{"home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.opt.OpenAIAdam.__init__": [[37, 56], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "schedule", ",", "warmup", ",", "t_total", ",", "\n", "b1", "=", "0.9", ",", "b2", "=", "0.999", ",", "e", "=", "1e-8", ",", "l2", "=", "0", ",", "\n", "vector_l2", "=", "False", ",", "max_grad_norm", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "schedule", "not", "in", "SCHEDULES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid schedule parameter: {}\"", ".", "format", "(", "schedule", ")", ")", "\n", "", "if", "not", "0", "<=", "warmup", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {}\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b1", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b1 parameter: {}\"", ".", "format", "(", "b1", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b2", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b2 parameter: {}\"", ".", "format", "(", "b2", ")", ")", "\n", "", "if", "not", "0.0", "<=", "e", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "e", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "\n", "b1", "=", "b1", ",", "b2", "=", "b2", ",", "e", "=", "e", ",", "l2", "=", "l2", ",", "vector_l2", "=", "vector_l2", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "OpenAIAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.opt.OpenAIAdam.step": [[57, 122], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "schedule_fct", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt", "len", "p.size"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "# print(group['t_total'])", "\n", "# print(group['warmup'])", "\n", "# if self.state[group['params'][0]]:", "\n", "#     print(self.state[group['params'][0]]['step'] / group['t_total'])", "\n", "# print()", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, \\\n                        please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'b1'", "]", ",", "group", "[", "'b2'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'e'", "]", ")", "\n", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "schedule_fct", "=", "SCHEDULES", "[", "group", "[", "'schedule'", "]", "]", "\n", "lr_scheduled", "=", "(", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "\n", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", ")", "\n", "step_size", "=", "(", "lr_scheduled", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "\n", "bias_correction1", ")", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "(", "len", "(", "p", ".", "size", "(", ")", ")", ">", "1", "or", "group", "[", "'vector_l2'", "]", ")", "and", "group", "[", "'l2'", "]", ">", "0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "lr_scheduled", "*", "group", "[", "'l2'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.opt.warmup_cosine": [[9, 12], ["torch.cos"], "function", ["None"], ["def", "warmup_cosine", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "s", "=", "1", "if", "x", "<=", "warmup", "else", "0", "\n", "return", "s", "*", "(", "x", "/", "warmup", ")", "+", "(", "1", "-", "s", ")", "*", "(", "0.5", "*", "(", "1", "+", "torch", ".", "cos", "(", "math", ".", "pi", "*", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.opt.warmup_constant": [[14, 17], ["None"], "function", ["None"], ["", "def", "warmup_constant", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "s", "=", "1", "if", "x", "<=", "warmup", "else", "0", "\n", "return", "s", "*", "(", "x", "/", "warmup", ")", "+", "(", "1", "-", "s", ")", "*", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.opt.warmup_linear": [[19, 25], ["None"], "function", ["None"], ["", "def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "s", "=", "1", "if", "x", "<=", "warmup", "else", "0", "\n", "\n", "# print(s)", "\n", "\n", "return", "(", "s", "*", "(", "x", "/", "warmup", ")", "+", "(", "1", "-", "s", ")", ")", "*", "(", "1", "-", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main.Recoder_multi.__init__": [[20, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "ce_loss_x", "=", "[", "]", "\n", "self", ".", "ce_loss_s", "=", "[", "]", "\n", "self", ".", "scl_loss", "=", "[", "]", "\n", "self", ".", "loss", "=", "[", "]", "\n", "self", ".", "acc", "=", "[", "]", "\n", "self", ".", "step", "=", "[", "]", "\n", "", "def", "log_train", "(", "self", ",", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", ",", "loss", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main.Recoder_multi.log_train": [[28, 33], ["main.Recoder_multi.ce_loss_x.append", "main.Recoder_multi.ce_loss_s.append", "main.Recoder_multi.scl_loss.append", "main.Recoder_multi.loss.append", "ce_loss_x.item", "ce_loss_s.item", "scl_loss.item", "loss.item"], "methods", ["None"], ["", "def", "log_train", "(", "self", ",", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", ",", "loss", ")", ":", "\n", "        ", "self", ".", "ce_loss_x", ".", "append", "(", "ce_loss_x", ".", "item", "(", ")", ")", "\n", "self", ".", "ce_loss_s", ".", "append", "(", "ce_loss_s", ".", "item", "(", ")", ")", "\n", "self", ".", "scl_loss", ".", "append", "(", "scl_loss", ".", "item", "(", ")", ")", "\n", "self", ".", "loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main.Recoder_multi.log_test": [[34, 37], ["main.Recoder_multi.acc.append", "main.Recoder_multi.step.append"], "methods", ["None"], ["", "def", "log_test", "(", "self", ",", "acc", ",", "step", ")", ":", "\n", "        ", "self", ".", "acc", ".", "append", "(", "acc", ")", "\n", "self", ".", "step", ".", "append", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main.Recoder_multi.meter": [[39, 47], ["print", "print", "print", "print", "print", "print", "sum", "sum", "sum", "sum"], "methods", ["None"], ["", "def", "meter", "(", "self", ",", "step", ")", ":", "\n", "        ", "st", ",", "ed", "=", "step", "-", "self", ".", "args", ".", "log_step", ",", "step", "\n", "print", "(", "\"===================================\"", ")", "\n", "print", "(", "\"step: \"", ",", "step", ")", "\n", "print", "(", "\"loss: \"", ",", "sum", "(", "self", ".", "loss", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "print", "(", "\"ce_loss_x: \"", ",", "sum", "(", "self", ".", "ce_loss_x", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "print", "(", "\"ce_loss_s: \"", ",", "sum", "(", "self", ".", "ce_loss_s", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "print", "(", "\"scl_loss: \"", ",", "sum", "(", "self", ".", "scl_loss", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main.evaluate_model": [[51, 76], ["print", "model.eval", "print", "recoder.log_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_ids.to", "y_a.to", "model.predict", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "tokenizer"], "function", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main_xlnet.Recoder_multi.log_test", "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.predict"], ["", "", "def", "evaluate_model", "(", "model", ",", "test_loader", ",", "recoder", ",", "step", ")", ":", "\n", "    ", "print", "(", "\"Evaluation Start======\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# bar = tqdm.tqdm(total=len(test_loader))", "\n", "# bar.update(0)", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "test_loader", ":", "\n", "            ", "x", ",", "x_perm", ",", "s", ",", "s_perm", ",", "y_a", ",", "y_b", "=", "batch", "\n", "x_ids", "=", "tokenizer", "(", "x", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "200", ",", "truncation", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "[", "\"input_ids\"", "]", "\n", "# s_ids = tokenizer(s, padding = 'max_length', max_length = 200, truncation = True, return_tensors=\"pt\")[\"input_ids\"]", "\n", "seq_ids", "=", "x_ids", ".", "to", "(", "device", ")", "\n", "labels", "=", "y_a", ".", "to", "(", "device", ")", "\n", "logits", "=", "model", ".", "predict", "(", "seq_ids", ")", "\n", "\n", "prediction", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "correct", "+=", "(", "prediction", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "prediction", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "acc", "=", "correct", "/", "total", "\n", "print", "(", "\"Acc: \"", ",", "acc", ")", "\n", "\n", "recoder", ".", "log_test", "(", "acc", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main_xlnet.Recoder_multi.__init__": [[19, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "ce_loss_x", "=", "[", "]", "\n", "self", ".", "ce_loss_s", "=", "[", "]", "\n", "self", ".", "scl_loss", "=", "[", "]", "\n", "self", ".", "loss", "=", "[", "]", "\n", "self", ".", "acc", "=", "[", "]", "\n", "self", ".", "step", "=", "[", "]", "\n", "", "def", "log_train", "(", "self", ",", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", ",", "loss", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main_xlnet.Recoder_multi.log_train": [[27, 32], ["main_xlnet.Recoder_multi.ce_loss_x.append", "main_xlnet.Recoder_multi.ce_loss_s.append", "main_xlnet.Recoder_multi.scl_loss.append", "main_xlnet.Recoder_multi.loss.append", "ce_loss_x.item", "ce_loss_s.item", "scl_loss.item", "loss.item"], "methods", ["None"], ["", "def", "log_train", "(", "self", ",", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", ",", "loss", ")", ":", "\n", "        ", "self", ".", "ce_loss_x", ".", "append", "(", "ce_loss_x", ".", "item", "(", ")", ")", "\n", "self", ".", "ce_loss_s", ".", "append", "(", "ce_loss_s", ".", "item", "(", ")", ")", "\n", "self", ".", "scl_loss", ".", "append", "(", "scl_loss", ".", "item", "(", ")", ")", "\n", "self", ".", "loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main_xlnet.Recoder_multi.log_test": [[33, 36], ["main_xlnet.Recoder_multi.acc.append", "main_xlnet.Recoder_multi.step.append"], "methods", ["None"], ["", "def", "log_test", "(", "self", ",", "acc", ",", "step", ")", ":", "\n", "        ", "self", ".", "acc", ".", "append", "(", "acc", ")", "\n", "self", ".", "step", ".", "append", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main_xlnet.Recoder_multi.meter": [[38, 46], ["print", "print", "print", "print", "print", "print", "sum", "sum", "sum", "sum"], "methods", ["None"], ["", "def", "meter", "(", "self", ",", "step", ")", ":", "\n", "        ", "st", ",", "ed", "=", "step", "-", "self", ".", "args", ".", "log_step", ",", "step", "\n", "print", "(", "\"===================================\"", ")", "\n", "print", "(", "\"step: \"", ",", "step", ")", "\n", "print", "(", "\"loss: \"", ",", "sum", "(", "self", ".", "loss", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "print", "(", "\"ce_loss_x: \"", ",", "sum", "(", "self", ".", "ce_loss_x", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "print", "(", "\"ce_loss_s: \"", ",", "sum", "(", "self", ".", "ce_loss_s", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "print", "(", "\"scl_loss: \"", ",", "sum", "(", "self", ".", "scl_loss", "[", "st", ":", "ed", "]", ")", "/", "self", ".", "args", ".", "log_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main_xlnet.evaluate_model": [[50, 73], ["print", "model.eval", "print", "recoder.log_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_ids.to", "y_a.to", "model.predict", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.main_xlnet.Recoder_multi.log_test", "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.predict"], ["", "", "def", "evaluate_model", "(", "model", ",", "test_loader", ",", "recoder", ",", "step", ")", ":", "\n", "    ", "print", "(", "\"Evaluation Start======\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# bar = tqdm.tqdm(total=len(test_loader))", "\n", "# bar.update(0)", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "test_loader", ":", "\n", "            ", "x_ids", ",", "s_mix_ids", ",", "y_a", ",", "y_b", "=", "batch", "\n", "seq_ids", "=", "x_ids", ".", "to", "(", "device", ")", "\n", "labels", "=", "y_a", ".", "to", "(", "device", ")", "\n", "logits", "=", "model", ".", "predict", "(", "seq_ids", ")", "\n", "\n", "prediction", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "correct", "+=", "(", "prediction", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "prediction", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "acc", "=", "correct", "/", "total", "\n", "print", "(", "\"Acc: \"", ",", "acc", ")", "\n", "\n", "recoder", ".", "log_test", "(", "acc", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.supConloss.SupConLoss.__init__": [[15, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.__init__"], ["def", "__init__", "(", "self", ",", "temperature", "=", "0.7", ",", "contrast_mode", "=", "'all'", ",", "\n", "base_temperature", "=", "0.7", ")", ":", "\n", "        ", "super", "(", "SupConLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "contrast_mode", "=", "contrast_mode", "\n", "self", ".", "base_temperature", "=", "base_temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.supConloss.SupConLoss.forward": [[22, 102], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "mask.float().to.float().to.repeat", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "len", "ValueError", "len", "features.view.view.view", "ValueError", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "mask.float().to.float().to.sum().clamp", "mask.float().to.float().to.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ValueError", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "exp_logits.sum", "labels.contiguous().view.contiguous().view.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "mask.float().to.float().to.float().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "mask.float().to.float().to.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ValueError", "labels.contiguous().view.contiguous().view.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "mask.float().to.float().to.float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "labels", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Compute loss for model. If both `labels` and `mask` are None,\n        it degenerates to SimCLR unsupervised loss:\n        https://arxiv.org/pdf/2002.05709.pdf\n        Args:\n            features: hidden vector of shape [bsz, n_views, ...].\n            labels: ground truth of shape [bsz].\n            mask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j\n                has the same class as sample i. Can be asymmetric.\n        Returns:\n            A loss scalar.\n        \"\"\"", "\n", "# device = (torch.device('cuda')", "\n", "#           if features.is_cuda", "\n", "#           else torch.device('cpu'))", "\n", "device", "=", "features", ".", "device", "\n", "\n", "if", "len", "(", "features", ".", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_views, ...],'", "\n", "'at least 3 dimensions are required'", ")", "\n", "", "if", "len", "(", "features", ".", "shape", ")", ">", "3", ":", "\n", "            ", "features", "=", "features", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "features", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "", "batch_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "if", "labels", "is", "not", "None", "and", "mask", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot define both `labels` and `mask`'", ")", "\n", "", "elif", "labels", "is", "None", "and", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "labels", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                ", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "", "mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "T", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "contrast_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "contrast_feature", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "features", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "contrast_mode", "==", "'one'", ":", "\n", "            ", "anchor_feature", "=", "features", "[", ":", ",", "0", "]", "\n", "anchor_count", "=", "1", "\n", "", "elif", "self", ".", "contrast_mode", "==", "'all'", ":", "\n", "            ", "anchor_feature", "=", "contrast_feature", "\n", "anchor_count", "=", "contrast_count", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode: {}'", ".", "format", "(", "self", ".", "contrast_mode", ")", ")", "\n", "\n", "# compute logits", "\n", "", "anchor_dot_contrast", "=", "torch", ".", "div", "(", "\n", "torch", ".", "matmul", "(", "anchor_feature", ",", "contrast_feature", ".", "T", ")", ",", "\n", "torch", ".", "matmul", "(", "torch", ".", "norm", "(", "anchor_feature", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "torch", ".", "norm", "(", "contrast_feature", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "T", ")", ")", "\n", "anchor_dot_contrast", "=", "torch", ".", "div", "(", "anchor_dot_contrast", ",", "self", ".", "temperature", ")", "\n", "\n", "logits", "=", "anchor_dot_contrast", "\n", "\n", "# tile mask", "\n", "mask", "=", "mask", ".", "repeat", "(", "anchor_count", ",", "contrast_count", ")", "\n", "# mask-out self-contrast cases", "\n", "logits_mask", "=", "torch", ".", "scatter", "(", "\n", "torch", ".", "ones_like", "(", "mask", ")", ",", "\n", "1", ",", "\n", "torch", ".", "arange", "(", "batch_size", "*", "anchor_count", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ",", "\n", "0", "\n", ")", "\n", "mask", "=", "mask", "*", "logits_mask", "\n", "\n", "exp_logits", "=", "torch", ".", "exp", "(", "logits", ")", "*", "logits_mask", "\n", "log_prob", "=", "logits", "-", "torch", ".", "log", "(", "exp_logits", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "# compute mean of log-likelihood over positive", "\n", "mean_log_prob_pos", "=", "(", "mask", "*", "log_prob", ")", ".", "sum", "(", "1", ")", "/", "mask", ".", "sum", "(", "1", ")", ".", "clamp", "(", "min", "=", "0.5", ")", "\n", "\n", "batch_mask", "=", "(", "mask", ".", "sum", "(", "1", ")", ">", "0", ")", "\n", "\n", "# loss", "\n", "loss", "=", "-", "(", "self", ".", "temperature", "/", "self", ".", "base_temperature", ")", "*", "(", "mean_log_prob_pos", "*", "batch_mask", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "torch", ".", "sum", "(", "batch_mask", ")", ".", "clamp", "(", "min", "=", "0.5", ")", "\n", "# loss = loss.view(anchor_count, batch_size).mean()", "\n", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.multiLabelDataset.__init__": [[44, 102], ["random.seed", "print", "int", "torch.load", "print", "print", "print", "range", "range", "random.shuffle", "print", "int", "open", "fin.readlines", "len", "len", "len", "len", "temp[].append", "random.shuffle", "range", "open", "fin.readlines", "open", "fin.readlines", "open", "fin.readlines", "text[].strip", "aug_data[].strip", "summarizer.summarize.replace", "summarizer.summarize", "data.get_clean_line", "data.get_clean_line", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.summarizer.summarize", "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.get_clean_line", "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.get_clean_line"], ["    ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "max_num", ",", "seed", "=", "41", ",", "split", "=", "\"train\"", ",", "aug_methods", "=", "\"summary\"", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "num_labels", "=", "5", "\n", "if", "dataset_name", "==", "\"imdb\"", ":", "\n", "          ", "num_labels", "=", "2", "\n", "", "if", "dataset_name", "==", "\"ag_news\"", ":", "\n", "          ", "num_labels", "=", "4", "\n", "", "print", "(", "dataset_name", ")", "\n", "if", "dataset_name", "==", "\"yahoo\"", ":", "\n", "          ", "print", "(", "\"here\"", ")", "\n", "num_labels", "=", "10", "\n", "\n", "", "num_per_class", "=", "int", "(", "max_num", "/", "num_labels", ")", "\n", "if", "dataset_name", "==", "\"yahoo\"", ":", "\n", "          ", "num_per_class", "=", "16", "\n", "", "if", "split", "==", "\"test\"", ":", "\n", "          ", "num_per_class", "=", "int", "(", "1000", "/", "num_labels", ")", "\n", "\n", "\n", "", "temp", "=", "{", "i", ":", "[", "]", "for", "i", "in", "range", "(", "num_labels", ")", "}", "\n", "with", "open", "(", "\"../processed_data/\"", "+", "dataset_name", "+", "\"/seed-{}/\"", ".", "format", "(", "int", "(", "seed", ")", ")", "+", "split", "+", "\"/data\"", ")", "as", "fin", ":", "\n", "          ", "text", "=", "fin", ".", "readlines", "(", ")", "\n", "\n", "", "labels", "=", "torch", ".", "load", "(", "\"../processed_data/\"", "+", "dataset_name", "+", "\"/seed-{}/\"", ".", "format", "(", "int", "(", "seed", ")", ")", "+", "split", "+", "\"/labels\"", ")", "\n", "\n", "\n", "\n", "if", "split", "==", "\"train\"", "and", "\"+\"", "in", "aug_methods", ":", "\n", "          ", "text", "+=", "text", "\n", "labels", "+=", "labels", "\n", "with", "open", "(", "\"../processed_data/\"", "+", "dataset_name", "+", "\"/seed-{}/\"", ".", "format", "(", "int", "(", "seed", ")", ")", "+", "\"train/\"", "+", "\"summary\"", ")", "as", "fin", ":", "\n", "            ", "aug_data", "=", "fin", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "\"../processed_data/\"", "+", "dataset_name", "+", "\"/seed-{}/\"", ".", "format", "(", "int", "(", "seed", ")", ")", "+", "\"train/\"", "+", "\"eda\"", ")", "as", "fin", ":", "\n", "            ", "aug_data", "+=", "fin", ".", "readlines", "(", ")", "\n", "", "", "if", "split", "==", "\"train\"", "and", "\"+\"", "not", "in", "aug_methods", ":", "\n", "          ", "with", "open", "(", "\"../processed_data/\"", "+", "dataset_name", "+", "\"/seed-{}/\"", ".", "format", "(", "int", "(", "seed", ")", ")", "+", "\"train/\"", "+", "aug_methods", ")", "as", "fin", ":", "\n", "            ", "aug_data", "=", "fin", ".", "readlines", "(", ")", "\n", "\n", "", "", "if", "split", "is", "\"test\"", ":", "\n", "          ", "aug_data", "=", "text", "\n", "\n", "", "print", "(", "len", "(", "text", ")", ")", "\n", "print", "(", "len", "(", "labels", ")", ")", "\n", "print", "(", "len", "(", "aug_data", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "          ", "x", ",", "y", ",", "s", "=", "text", "[", "i", "]", ".", "strip", "(", ")", ",", "labels", "[", "i", "]", ",", "aug_data", "[", "i", "]", ".", "strip", "(", ")", "\n", "if", "(", "split", "==", "\"train\"", ")", "and", "(", "aug_methods", "==", "\"summary\"", ")", ":", "\n", "            ", "s", "=", "s", ".", "replace", "(", "\"<q>\"", ",", "\". \"", ")", "\n", "if", "\".....\"", "in", "s", "or", "\"this this this\"", "in", "s", "or", "\"is is is\"", "in", "s", ":", "\n", "              ", "s", "=", "summarize", "(", "text", ")", "\n", "\n", "", "", "temp", "[", "y", "]", ".", "append", "(", "(", "y", ",", "get_clean_line", "(", "x", ")", ",", "get_clean_line", "(", "s", ")", ")", ")", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_labels", ")", ":", "\n", "          ", "random", ".", "shuffle", "(", "temp", "[", "i", "]", ")", "\n", "self", ".", "data", "+=", "temp", "[", "i", "]", "[", ":", "num_per_class", "]", "\n", "", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.multiLabelDataset.__getitem__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.multiLabelDataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.make_tokenizer": [[8, 17], ["transformers.XLNetTokenizer.from_pretrained", "transformers.BertTokenizer.from_pretrained", "transformers.RobertaTokenizer.from_pretrained"], "function", ["None"], ["def", "make_tokenizer", "(", "args", ")", ":", "\n", "  ", "if", "args", ".", "model", "==", "\"xlnet\"", ":", "\n", "    ", "return", "XLNetTokenizer", ".", "from_pretrained", "(", "\"xlnet-base-cased\"", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "\"bert\"", ":", "\n", "    ", "return", "BertTokenizer", ".", "from_pretrained", "(", "\"bert-base-uncased\"", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "\"roberta\"", ":", "\n", "    ", "return", "RobertaTokenizer", ".", "from_pretrained", "(", "\"roberta-base\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.get_clean_line": [[19, 42], ["line.lower.replace", "line.lower.replace", "line.lower.replace", "line.lower.replace", "line.lower.replace", "line.lower.lower", "re.sub"], "function", ["None"], ["", "", "def", "get_clean_line", "(", "line", ")", ":", "\n", "\n", "    ", "clean_line", "=", "\"\"", "\n", "\n", "line", "=", "line", ".", "replace", "(", "\"\u2019\"", ",", "\"\"", ")", "\n", "line", "=", "line", ".", "replace", "(", "\"'\"", ",", "\"\"", ")", "\n", "line", "=", "line", ".", "replace", "(", "\"-\"", ",", "\" \"", ")", "#replace hyphens with spaces", "\n", "line", "=", "line", ".", "replace", "(", "\"\\t\"", ",", "\" \"", ")", "\n", "line", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "line", "=", "line", ".", "lower", "(", ")", "\n", "\n", "for", "char", "in", "line", ":", "\n", "        ", "if", "char", "in", "'qwertyuiopasdfghjklzxcvbnm,.?!;'", ":", "\n", "            ", "clean_line", "+=", "char", "\n", "", "else", ":", "\n", "            ", "clean_line", "+=", "' '", "\n", "\n", "", "", "clean_line", "=", "re", ".", "sub", "(", "' +'", ",", "' '", ",", "clean_line", ")", "#delete extra spaces", "\n", "if", "clean_line", "[", "0", "]", "==", "' '", ":", "\n", "        ", "clean_line", "=", "clean_line", "[", "1", ":", "]", "\n", "", "if", "clean_line", "[", "-", "1", "]", "==", "\" \"", ":", "\n", "        ", "clean_line", "=", "clean_line", "[", ":", "-", "1", "]", "\n", "", "return", "clean_line", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.collate_fn_mix": [[111, 125], ["len", "torch.randperm", "torch.LongTensor", "range", "range"], "function", ["None"], ["", "", "def", "collate_fn_mix", "(", "batch", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "perm_index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "y_a", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ")", "\n", "y_b", "=", "y_a", "[", "perm_index", "]", "\n", "x", "=", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", "\n", "s", "=", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", "\n", "s_perm", "=", "[", "s", "[", "perm_index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "s_mix", "=", "[", "s", "[", "i", "]", "+", "\"\\n\"", "+", "s_perm", "[", "i", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "# x_ids = tokenizer(x, padding = 'max_length', max_length = 200, truncation = True, return_tensors=\"pt\")[\"input_ids\"]", "\n", "# s_mix_ids = tokenizer(s_mix, padding = 'max_length', max_length = 200, truncation = True, return_tensors=\"pt\")[\"input_ids\"]", "\n", "\n", "return", "x", ",", "s_mix", ",", "y_a", ",", "y_b", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.collate_fn_feature_mix": [[126, 138], ["len", "torch.randperm", "torch.LongTensor", "range", "range"], "function", ["None"], ["", "def", "collate_fn_feature_mix", "(", "batch", ")", ":", "\n", "  ", "batch_size", "=", "len", "(", "batch", ")", "\n", "perm_index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "y_a", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ")", "\n", "y_b", "=", "y_a", "[", "perm_index", "]", "\n", "x", "=", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", "\n", "s", "=", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", "\n", "s_perm", "=", "[", "s", "[", "perm_index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "x_perm", "=", "[", "x", "[", "perm_index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "\n", "return", "x", ",", "x_perm", ",", "s", ",", "s_perm", ",", "y_a", ",", "y_b", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data.collate_fn": [[139, 154], ["len", "torch.randperm", "torch.LongTensor"], "function", ["None"], ["", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "perm_index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "y_a", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ")", "\n", "# print(y_a)", "\n", "# print(batch)", "\n", "y_b", "=", "y_a", "[", "perm_index", "]", "\n", "x", "=", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", "\n", "\n", "s", "=", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", "\n", "\n", "# x_ids = tokenizer(x, padding = 'max_length', max_length = 200, truncation = True, return_tensors=\"pt\")[\"input_ids\"]", "\n", "# s_ids = tokenizer(s, padding = 'max_length', max_length = 200, truncation = True, return_tensors=\"pt\")[\"input_ids\"]", "\n", "\n", "return", "x", ",", "s", ",", "y_a", ",", "y_b", "", "", ""]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data_xlnet.collate_fn_mix": [[5, 23], ["len", "torch.randperm", "torch.LongTensor", "tokenizer", "tokenizer", "range", "range"], "function", ["None"], ["def", "collate_fn_mix", "(", "batch", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "perm_index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "y_a", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ")", "\n", "# print(y_a)", "\n", "# print(batch)", "\n", "y_b", "=", "y_a", "[", "perm_index", "]", "\n", "x", "=", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", "\n", "# x_perm = [x[perm_index[i]] for i in range(batch_size)]", "\n", "# s = [summarize(x[i]) for i in range(batch_size)]", "\n", "s", "=", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", "\n", "s_perm", "=", "[", "s", "[", "perm_index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "s_mix", "=", "[", "s", "[", "i", "]", "+", "\"\\n\"", "+", "s_perm", "[", "i", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "x_ids", "=", "tokenizer", "(", "x", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "200", ",", "truncation", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "[", "\"input_ids\"", "]", "\n", "s_mix_ids", "=", "tokenizer", "(", "s_mix", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "200", ",", "truncation", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "[", "\"input_ids\"", "]", "\n", "\n", "return", "x_ids", ",", "s_mix_ids", ",", "y_a", ",", "y_b", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.data_xlnet.collate_fn": [[24, 42], ["len", "torch.randperm", "torch.LongTensor", "tokenizer", "tokenizer"], "function", ["None"], ["", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "perm_index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "y_a", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ")", "\n", "# print(y_a)", "\n", "# print(batch)", "\n", "y_b", "=", "y_a", "[", "perm_index", "]", "\n", "x", "=", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", "\n", "# x_perm = [x[perm_index[i]] for i in range(batch_size)]", "\n", "# s = [summarize(x[i]) for i in range(batch_size)]", "\n", "s", "=", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", "\n", "# s_perm = [s[perm_index[i]] for i in range(batch_size)]", "\n", "# s_mix = [s[i] + \"\\n\" + s_perm[i] for i in range(batch_size)]", "\n", "\n", "x_ids", "=", "tokenizer", "(", "x", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "200", ",", "truncation", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "[", "\"input_ids\"", "]", "\n", "s_ids", "=", "tokenizer", "(", "s", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "200", ",", "truncation", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "[", "\"input_ids\"", "]", "\n", "\n", "return", "x_ids", ",", "s_ids", ",", "y_a", ",", "y_b", "", "", ""]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.ClassificationHead.__init__": [[52, 57], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.ClassificationHead.forward": [[58, 66], ["model.ClassificationHead.dropout", "model.ClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "model.ClassificationHead.dropout", "model.ClassificationHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "features", "[", ":", ",", "0", ",", ":", "]", "# take <s> token (equiv. to [CLS])", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Roberta.__init__": [[68, 85], ["torch.Module.__init__", "model.ClassificationHead", "model.ClassificationHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "transformers.RobertaModel", "supConloss.SupConLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "model.scl_model_Roberta.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.__init__", "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "device", ",", "pretrained_model", ",", "with_semi", "=", "True", ",", "with_sum", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_x", "=", "ClassificationHead", "(", "config", ")", "\n", "self", ".", "cls_s", "=", "ClassificationHead", "(", "config", ")", "\n", "self", ".", "mlp_x", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "256", ")", ")", "\n", "self", ".", "mlp_s", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "256", ")", ")", "\n", "\n", "self", ".", "f", "=", "RobertaModel", "(", "config", ",", "add_pooling_layer", "=", "False", ")", "\n", "self", ".", "scl_criterion", "=", "SupConLoss", "(", "temperature", "=", "0.3", ",", "base_temperature", "=", "0.3", ")", "\n", "self", ".", "ce_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "# self.f = copy.deepcopy(pretrained_enc)", "\n", "\n", "# self.f = RobertaModel(config)", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "init_weights", "(", "pretrained_model", ")", "\n", "self", ".", "with_semi", "=", "with_semi", "\n", "self", ".", "with_sum", "=", "with_sum", "\n", "", "def", "init_weights", "(", "self", ",", "pretrained_model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Roberta.init_weights": [[85, 98], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model.scl_model_Roberta.mlp_x.parameters", "model.scl_model_Roberta.mlp_s.parameters", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained_model", ")", ":", "\n", "        ", "self", ".", "cls_x", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "classifier", ")", "\n", "self", ".", "cls_s", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "classifier", ")", "\n", "self", ".", "f", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "roberta", ")", "\n", "for", "p", "in", "self", ".", "mlp_x", ".", "parameters", "(", ")", ":", "\n", "# if p.dim() > 2:", "\n", "# torch.nn.init.xavier_normal_(p)", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "self", ".", "mlp_s", ".", "parameters", "(", ")", ":", "\n", "# if p.dim() > 2:", "\n", "# torch.nn.init.xavier_normal_(p)", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Roberta.predict": [[99, 103], ["model.scl_model_Roberta.cls_x", "model.scl_model_Roberta.f"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_x", "=", "self", ".", "f", "(", "x", ")", "[", "0", "]", "\n", "score", "=", "self", ".", "cls_x", "(", "f_x", ")", "\n", "return", "score", "\n", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Roberta.forward": [[103, 140], ["model.scl_model_Roberta.cls_x", "model.scl_model_Roberta.cls_x", "model.scl_model_Roberta.ce_criterion", "model.scl_model_Roberta.mlp_x().unsqueeze", "model.scl_model_Roberta.mlp_x().unsqueeze", "item.to", "model.scl_model_Roberta.f", "model.scl_model_Roberta.f", "model.scl_model_Roberta.ce_criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.scl_model_Roberta.scl_criterion", "model.scl_model_Roberta.mlp_x", "model.scl_model_Roberta.mlp_x", "model.scl_model_Roberta.ce_criterion", "model.scl_model_Roberta.ce_criterion", "model.scl_model_Roberta.scl_criterion", "model.scl_model_Roberta.scl_criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "x", ",", "s_mix", ",", "y_a", ",", "y_b", "=", "[", "item", ".", "to", "(", "self", ".", "device", ")", "for", "item", "in", "batch", "]", "\n", "f_x", "=", "self", ".", "f", "(", "x", ")", "[", "0", "]", "\n", "f_s", "=", "self", ".", "f", "(", "s_mix", ")", "[", "0", "]", "\n", "\n", "p_x", "=", "self", ".", "cls_x", "(", "f_x", ")", "\n", "# p_s = self.cls_s(f_s)", "\n", "p_s", "=", "self", ".", "cls_x", "(", "f_s", ")", "\n", "\n", "# print(p_x.shape)", "\n", "# print(y_a.shape)", "\n", "\n", "ce_loss_x", "=", "self", ".", "ce_criterion", "(", "p_x", ",", "y_a", ")", "\n", "if", "self", ".", "with_semi", ":", "\n", "            ", "ce_loss_s", "=", "(", "self", ".", "ce_criterion", "(", "p_s", ",", "y_a", ")", "+", "self", ".", "ce_criterion", "(", "p_s", ",", "y_b", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "ce_loss_s", "=", "self", ".", "ce_criterion", "(", "p_s", ",", "y_a", ")", "\n", "\n", "", "z_x", "=", "self", ".", "mlp_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# z_x = f_x[:,0,:].unsqueeze(1)", "\n", "# z_s = self.mlp_s(f_s[:,0,:]).unsqueeze(1)", "\n", "z_s", "=", "self", ".", "mlp_x", "(", "f_s", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# z_s = f_s[:,0,:].unsqueeze(1)", "\n", "if", "self", ".", "with_sum", ":", "\n", "          ", "z", "=", "torch", ".", "cat", "(", "[", "z_x", ",", "z_s", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "          ", "z", "=", "z_x", "\n", "\n", "", "if", "self", ".", "with_semi", ":", "\n", "            ", "scl_loss", "=", "(", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_a", ")", "+", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_b", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "scl_loss", "=", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_a", ")", "\n", "\n", "\n", "\n", "", "return", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", "\n", "", "def", "forward_feature_mix", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Roberta.forward_feature_mix": [[140, 170], ["model.scl_model_Roberta.cls_x", "model.scl_model_Roberta.cls_x", "model.scl_model_Roberta.mlp_x().unsqueeze", "model.scl_model_Roberta.mlp_x().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "item.to", "model.scl_model_Roberta.ce_criterion", "model.scl_model_Roberta.ce_criterion", "model.scl_model_Roberta.ce_criterion", "model.scl_model_Roberta.ce_criterion", "model.scl_model_Roberta.mlp_x", "model.scl_model_Roberta.mlp_x", "model.scl_model_Roberta.scl_criterion", "model.scl_model_Roberta.scl_criterion", "model.scl_model_Roberta.f", "model.scl_model_Roberta.f", "model.scl_model_Roberta.f", "model.scl_model_Roberta.f"], "methods", ["None"], ["", "def", "forward_feature_mix", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "x", ",", "x_perm", ",", "s", ",", "s_perm", ",", "y_a", ",", "y_b", "=", "[", "item", ".", "to", "(", "self", ".", "device", ")", "for", "item", "in", "batch", "]", "\n", "f_x", "=", "0.5", "*", "self", ".", "f", "(", "x", ")", "[", "0", "]", "+", "0.5", "*", "self", ".", "f", "(", "x_perm", ")", "[", "0", "]", "\n", "f_s", "=", "0.5", "*", "self", ".", "f", "(", "s", ")", "[", "0", "]", "+", "0.5", "*", "self", ".", "f", "(", "s_perm", ")", "[", "0", "]", "\n", "\n", "p_x", "=", "self", ".", "cls_x", "(", "f_x", ")", "\n", "# p_s = self.cls_s(f_s)", "\n", "p_s", "=", "self", ".", "cls_x", "(", "f_s", ")", "\n", "\n", "# print(p_x.shape)", "\n", "# print(y_a.shape)", "\n", "\n", "\n", "ce_loss_s", "=", "(", "self", ".", "ce_criterion", "(", "p_s", ",", "y_a", ")", "+", "self", ".", "ce_criterion", "(", "p_s", ",", "y_b", ")", ")", "/", "2", "\n", "ce_loss_x", "=", "(", "self", ".", "ce_criterion", "(", "p_x", ",", "y_a", ")", "+", "self", ".", "ce_criterion", "(", "p_x", ",", "y_b", ")", ")", "/", "2", "\n", "\n", "z_x", "=", "self", ".", "mlp_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# z_x = f_x[:,0,:].unsqueeze(1)", "\n", "# z_s = self.mlp_s(f_s[:,0,:]).unsqueeze(1)", "\n", "z_s", "=", "self", ".", "mlp_x", "(", "f_s", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# z_s = f_s[:,0,:].unsqueeze(1)", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z_x", ",", "z_s", "]", ",", "dim", "=", "1", ")", "\n", "\n", "scl_loss", "=", "(", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_a", ")", "+", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_b", ")", ")", "/", "2", "\n", "\n", "\n", "\n", "return", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Xlnet.__init__": [[174, 191], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "transformers.XLNetModel", "supConloss.SupConLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "model.scl_model_Xlnet.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.__init__", "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "device", ",", "pretrained_model", ",", "with_semi", "=", "True", ",", "with_sum", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_x", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "num_labels", ")", "\n", "self", ".", "cls_s", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "num_labels", ")", "\n", "self", ".", "mlp_x", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "256", ")", ")", "\n", "self", ".", "mlp_s", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "256", ")", ")", "\n", "\n", "self", ".", "f", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "scl_criterion", "=", "SupConLoss", "(", "temperature", "=", "0.3", ",", "base_temperature", "=", "0.3", ")", "\n", "self", ".", "ce_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "# self.f = copy.deepcopy(pretrained_enc)", "\n", "\n", "# self.f = RobertaModel(config)", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "init_weights", "(", "pretrained_model", ")", "\n", "self", ".", "with_semi", "=", "with_semi", "\n", "self", ".", "with_sum", "=", "with_sum", "\n", "", "def", "init_weights", "(", "self", ",", "pretrained_model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Xlnet.init_weights": [[191, 201], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model.scl_model_Xlnet.mlp_x.parameters", "model.scl_model_Xlnet.mlp_s.parameters", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained_model", ")", ":", "\n", "        ", "self", ".", "cls_x", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "logits_proj", ")", "\n", "self", ".", "cls_s", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "logits_proj", ")", "\n", "self", ".", "f", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "transformer", ")", "\n", "\n", "for", "p", "in", "self", ".", "mlp_x", ".", "parameters", "(", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "self", ".", "mlp_s", ".", "parameters", "(", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Xlnet.predict": [[202, 206], ["model.scl_model_Xlnet.cls_x", "model.scl_model_Xlnet.f"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_x", "=", "self", ".", "f", "(", "x", ")", "[", "0", "]", "\n", "score", "=", "self", ".", "cls_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "return", "score", "\n", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Xlnet.forward": [[206, 242], ["model.scl_model_Xlnet.cls_x", "model.scl_model_Xlnet.cls_x", "model.scl_model_Xlnet.ce_criterion", "model.scl_model_Xlnet.mlp_x().unsqueeze", "model.scl_model_Xlnet.mlp_x().unsqueeze", "item.to", "model.scl_model_Xlnet.f", "model.scl_model_Xlnet.f", "model.scl_model_Xlnet.ce_criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.scl_model_Xlnet.scl_criterion", "model.scl_model_Xlnet.mlp_x", "model.scl_model_Xlnet.mlp_x", "model.scl_model_Xlnet.ce_criterion", "model.scl_model_Xlnet.ce_criterion", "model.scl_model_Xlnet.scl_criterion", "model.scl_model_Xlnet.scl_criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "x", ",", "s_mix", ",", "y_a", ",", "y_b", "=", "[", "item", ".", "to", "(", "self", ".", "device", ")", "for", "item", "in", "batch", "]", "\n", "f_x", "=", "self", ".", "f", "(", "x", ")", "[", "0", "]", "\n", "f_s", "=", "self", ".", "f", "(", "s_mix", ")", "[", "0", "]", "\n", "\n", "p_x", "=", "self", ".", "cls_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "# p_s = self.cls_s(f_s)", "\n", "p_s", "=", "self", ".", "cls_x", "(", "f_s", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "# print(p_x.shape)", "\n", "# print(y_a.shape)", "\n", "ce_loss_x", "=", "self", ".", "ce_criterion", "(", "p_x", ",", "y_a", ")", "\n", "if", "self", ".", "with_semi", ":", "\n", "            ", "ce_loss_s", "=", "(", "self", ".", "ce_criterion", "(", "p_s", ",", "y_a", ")", "+", "self", ".", "ce_criterion", "(", "p_s", ",", "y_b", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "ce_loss_s", "=", "self", ".", "ce_criterion", "(", "p_s", ",", "y_a", ")", "\n", "\n", "", "z_x", "=", "self", ".", "mlp_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# z_x = f_x[:,0,:].unsqueeze(1)", "\n", "# z_s = self.mlp_s(f_s[:,0,:]).unsqueeze(1)", "\n", "z_s", "=", "self", ".", "mlp_x", "(", "f_s", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# z_s = f_s[:,0,:].unsqueeze(1)", "\n", "if", "self", ".", "with_sum", ":", "\n", "          ", "z", "=", "torch", ".", "cat", "(", "[", "z_x", ",", "z_s", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "          ", "z", "=", "z_x", "\n", "\n", "", "if", "self", ".", "with_semi", ":", "\n", "            ", "scl_loss", "=", "(", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_a", ")", "+", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_b", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "scl_loss", "=", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_a", ")", "\n", "\n", "\n", "\n", "", "return", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.__init__": [[245, 266], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "transformers.BertModel", "supConloss.SupConLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "model.scl_model_Bert.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.__init__", "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "device", ",", "pretrained_model", ",", "with_semi", "=", "True", ",", "with_sum", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_x", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "self", ".", "cls_s", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "dropout_x", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "dropout_s", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "self", ".", "mlp_x", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "256", ")", ")", "\n", "self", ".", "mlp_s", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "256", ")", ")", "\n", "\n", "self", ".", "f", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "scl_criterion", "=", "SupConLoss", "(", "temperature", "=", "0.3", ",", "base_temperature", "=", "0.3", ")", "\n", "self", ".", "ce_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "# self.f = copy.deepcopy(pretrained_enc)", "\n", "\n", "# self.f = RobertaModel(config)", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "init_weights", "(", "pretrained_model", ")", "\n", "self", ".", "with_semi", "=", "with_semi", "\n", "self", ".", "with_sum", "=", "with_sum", "\n", "", "def", "init_weights", "(", "self", ",", "pretrained_model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.init_weights": [[266, 276], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model.scl_model_Bert.mlp_x.parameters", "model.scl_model_Bert.mlp_s.parameters", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained_model", ")", ":", "\n", "        ", "self", ".", "cls_x", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "classifier", ")", "\n", "self", ".", "cls_s", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "classifier", ")", "\n", "self", ".", "f", "=", "copy", ".", "deepcopy", "(", "pretrained_model", ".", "bert", ")", "\n", "\n", "for", "p", "in", "self", ".", "mlp_x", ".", "parameters", "(", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "self", ".", "mlp_s", ".", "parameters", "(", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.predict": [[277, 281], ["model.scl_model_Bert.cls_x", "model.scl_model_Bert.f"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_x", "=", "self", ".", "f", "(", "x", ")", "[", "0", "]", "\n", "score", "=", "self", ".", "cls_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "return", "score", "\n", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.scl_model_Bert.forward": [[281, 322], ["model.scl_model_Bert.cls_x", "model.scl_model_Bert.cls_x", "model.scl_model_Bert.ce_criterion", "model.scl_model_Bert.mlp_x().unsqueeze", "model.scl_model_Bert.mlp_x().unsqueeze", "item.to", "model.scl_model_Bert.f", "model.scl_model_Bert.f", "model.scl_model_Bert.ce_criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.scl_model_Bert.scl_criterion", "model.scl_model_Bert.mlp_x", "model.scl_model_Bert.mlp_x", "model.scl_model_Bert.ce_criterion", "model.scl_model_Bert.ce_criterion", "model.scl_model_Bert.scl_criterion", "model.scl_model_Bert.scl_criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "x", ",", "s_mix", ",", "y_a", ",", "y_b", "=", "[", "item", ".", "to", "(", "self", ".", "device", ")", "for", "item", "in", "batch", "]", "\n", "f_x", "=", "self", ".", "f", "(", "x", ")", "[", "0", "]", "\n", "f_s", "=", "self", ".", "f", "(", "s_mix", ")", "[", "0", "]", "\n", "\n", "p_x", "=", "self", ".", "cls_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "# p_s = self.cls_s(f_s)", "\n", "p_s", "=", "self", ".", "cls_x", "(", "f_s", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "# print(p_x.shape)", "\n", "# print(y_a.shape)", "\n", "\n", "ce_loss_x", "=", "self", ".", "ce_criterion", "(", "p_x", ",", "y_a", ")", "\n", "if", "self", ".", "with_semi", ":", "\n", "            ", "ce_loss_s", "=", "(", "self", ".", "ce_criterion", "(", "p_s", ",", "y_a", ")", "+", "self", ".", "ce_criterion", "(", "p_s", ",", "y_b", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "ce_loss_s", "=", "self", ".", "ce_criterion", "(", "p_s", ",", "y_a", ")", "\n", "\n", "", "z_x", "=", "self", ".", "mlp_x", "(", "f_x", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# z_x = f_x[:,0,:].unsqueeze(1)", "\n", "# z_s = self.mlp_s(f_s[:,0,:]).unsqueeze(1)", "\n", "z_s", "=", "self", ".", "mlp_x", "(", "f_s", "[", ":", ",", "0", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# z_s = f_s[:,0,:].unsqueeze(1)", "\n", "if", "self", ".", "with_sum", ":", "\n", "          ", "z", "=", "torch", ".", "cat", "(", "[", "z_x", ",", "z_s", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "          ", "z", "=", "z_x", "\n", "\n", "", "if", "self", ".", "with_semi", ":", "\n", "            ", "scl_loss", "=", "(", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_a", ")", "+", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_b", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "scl_loss", "=", "self", ".", "scl_criterion", "(", "z", ",", "labels", "=", "y_a", ")", "\n", "\n", "\n", "\n", "", "return", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", "\n", "\n", "\n", "\n", "return", "ce_loss_x", ",", "ce_loss_s", ",", "scl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.model.make_model": [[11, 47], ["transformers.RobertaConfig.from_pretrained", "transformers.RobertaForSequenceClassification.from_pretrained", "model.scl_model_Roberta", "transformers.BertConfig.from_pretrained", "transformers.BertForSequenceClassification.from_pretrained", "model.scl_model_Bert", "transformers.XLNetConfig.from_pretrained", "transformers.XLNetForSequenceClassification.from_pretrained", "model.scl_model_Xlnet"], "function", ["None"], ["def", "make_model", "(", "args", ",", "device", ")", ":", "\n", "  ", "if", "args", ".", "model", "==", "\"roberta\"", ":", "\n", "    ", "config", "=", "RobertaConfig", ".", "from_pretrained", "(", "\"roberta-base\"", ")", "\n", "config", ".", "num_labels", "=", "5", "\n", "if", "args", ".", "dataset", "==", "\"imdb\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "2", "\n", "", "if", "args", ".", "dataset", "==", "\"ag_news\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "4", "\n", "", "if", "args", ".", "dataset", "==", "\"yahoo\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "10", "\n", "", "pretrained_model", "=", "RobertaForSequenceClassification", ".", "from_pretrained", "(", "\"roberta-base\"", ",", "config", "=", "config", ")", "\n", "return", "scl_model_Roberta", "(", "config", ",", "device", ",", "pretrained_model", ",", "with_semi", "=", "args", ".", "with_mix", ",", "with_sum", "=", "args", ".", "with_summary", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "\"bert\"", ":", "\n", "    ", "config", "=", "BertConfig", ".", "from_pretrained", "(", "\"bert-base-uncased\"", ")", "\n", "config", ".", "num_labels", "=", "5", "\n", "if", "args", ".", "dataset", "==", "\"imdb\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "2", "\n", "", "if", "args", ".", "dataset", "==", "\"ag_news\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "4", "\n", "", "if", "args", ".", "dataset", "==", "\"yahoo\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "10", "\n", "", "pretrained_model", "=", "BertForSequenceClassification", ".", "from_pretrained", "(", "\"bert-base-uncased\"", ",", "config", "=", "config", ")", "\n", "return", "scl_model_Bert", "(", "config", ",", "device", ",", "pretrained_model", ",", "with_semi", "=", "args", ".", "with_mix", ",", "with_sum", "=", "args", ".", "with_summary", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "\"xlnet\"", ":", "\n", "    ", "config", "=", "XLNetConfig", ".", "from_pretrained", "(", "\"xlnet-base-cased\"", ")", "\n", "config", ".", "num_labels", "=", "5", "\n", "if", "args", ".", "dataset", "==", "\"imdb\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "2", "\n", "", "if", "args", ".", "dataset", "==", "\"ag_news\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "4", "\n", "", "if", "args", ".", "dataset", "==", "\"yahoo\"", ":", "\n", "      ", "config", ".", "num_labels", "=", "10", "\n", "", "pretrained_model", "=", "XLNetForSequenceClassification", ".", "from_pretrained", "(", "\"xlnet-base-cased\"", ",", "config", "=", "config", ")", "\n", "return", "scl_model_Xlnet", "(", "config", ",", "device", ",", "pretrained_model", ",", "with_semi", "=", "args", ".", "with_mix", ",", "with_sum", "=", "args", ".", "with_summary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chesterdu_contrastive_summary.src.summarizer.summarize": [[13, 20], ["sumy.parsers.plaintext.PlaintextParser.from_string", "summarizer", "out.strip", "sumy.nlp.tokenizers.Tokenizer", "int", "str", "len"], "function", ["None"], ["def", "summarize", "(", "x", ")", ":", "\n", "    ", "parser", "=", "PlaintextParser", ".", "from_string", "(", "x", ",", "Tokenizer", "(", "LANGUAGE", ")", ")", "\n", "sentence_count", "=", "int", "(", "len", "(", "parser", ".", "document", ".", "sentences", ")", "/", "5.1", ")", "+", "1", "\n", "out", "=", "\"\"", "\n", "for", "sentence", "in", "summarizer", "(", "parser", ".", "document", ",", "sentence_count", ")", ":", "\n", "        ", "out", "+=", "str", "(", "sentence", ")", "+", "' '", "\n", "", "return", "out", ".", "strip", "(", ")", "\n", "", ""]]}