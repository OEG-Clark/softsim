{"home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.find_nearest.ImagePatch.__init__": [[29, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "patch", ",", "label", ",", "distance", ",", "\n", "original_img", "=", "None", ",", "act_pattern", "=", "None", ",", "patch_indices", "=", "None", ")", ":", "\n", "        ", "self", ".", "patch", "=", "patch", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "negative_distance", "=", "-", "distance", "\n", "\n", "self", ".", "original_img", "=", "original_img", "\n", "self", ".", "act_pattern", "=", "act_pattern", "\n", "self", ".", "patch_indices", "=", "patch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.find_nearest.ImagePatch.__lt__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "negative_distance", "<", "other", ".", "negative_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.find_nearest.ImagePatchInfo.__init__": [[45, 48], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "label", ",", "distance", ")", ":", "\n", "        ", "self", ".", "label", "=", "label", "\n", "self", ".", "negative_distance", "=", "-", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.find_nearest.ImagePatchInfo.__lt__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "negative_distance", "<", "other", ".", "negative_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.find_nearest.imsave_with_bbox": [[16, 26], ["cv2.cvtColor", "cv2.rectangle", "matplotlib.imsave", "numpy.uint8", "numpy.float32"], "function", ["None"], ["def", "imsave_with_bbox", "(", "fname", ",", "img_rgb", ",", "bbox_height_start", ",", "bbox_height_end", ",", "\n", "bbox_width_start", ",", "bbox_width_end", ",", "color", "=", "(", "0", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "img_bgr_uint8", "=", "cv2", ".", "cvtColor", "(", "np", ".", "uint8", "(", "255", "*", "img_rgb", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "rectangle", "(", "img_bgr_uint8", ",", "(", "bbox_width_start", ",", "bbox_height_start", ")", ",", "(", "bbox_width_end", "-", "1", ",", "bbox_height_end", "-", "1", ")", ",", "\n", "color", ",", "thickness", "=", "2", ")", "\n", "img_rgb_uint8", "=", "img_bgr_uint8", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "img_rgb_float", "=", "np", ".", "float32", "(", "img_rgb_uint8", ")", "/", "255", "\n", "#plt.imshow(img_rgb_float)", "\n", "#plt.axis('off')", "\n", "plt", ".", "imsave", "(", "fname", ",", "img_rgb_float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.find_nearest.find_k_nearest_patches_to_prototypes": [[54, 256], ["prototype_network_parallel.eval", "log", "time.time", "range", "enumerate", "range", "numpy.array", "time.time", "log", "heaps.append", "print", "numpy.copy", "enumerate", "heaps[].sort", "numpy.save", "preprocess_input_function", "torch.no_grad", "search_batch.cuda.cuda", "prototype_network_parallel.module.push_forward", "proto_dist_torch.detach().cpu().numpy", "range", "os.path.join", "helpers.makedir", "enumerate", "numpy.array", "numpy.save", "os.path.join", "numpy.amin", "str", "numpy.save", "matplotlib.imsave", "cv2.resize", "cv2.applyColorMap", "matplotlib.imsave", "helpers.find_high_activation_crop", "numpy.save", "matplotlib.imsave", "find_nearest.imsave_with_bbox", "os.path.join", "range", "proto_dist_torch.detach().cpu", "list", "receptive_field.compute_rf_prototype", "ImagePatchInfo.numpy", "numpy.transpose", "search_batch_input[].numpy", "numpy.transpose", "find_nearest.ImagePatch", "find_nearest.ImagePatchInfo", "len", "heapq.heappush", "heapq.heappushpop", "os.path.join", "numpy.amin", "numpy.amax", "numpy.uint8", "numpy.float32", "numpy.save", "matplotlib.imsave", "matplotlib.imsave", "os.path.join", "numpy.unravel_index", "search_batch.cuda.size", "numpy.log", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "proto_dist_torch.detach", "numpy.argmin", "prototype_activation_function_in_numpy", "os.path.join", "os.path.join", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.preprocess_input_function", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.push_forward", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.preprocessing.create_modified_datasets.makedir", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.find_high_activation_crop", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.local_analysis.imsave_with_bbox", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_rf_prototype"], ["", "", "def", "find_k_nearest_patches_to_prototypes", "(", "dataloader", ",", "# pytorch dataloader (must be unnormalized in [0,1])", "\n", "prototype_network_parallel", ",", "# pytorch network with prototype_vectors", "\n", "k", "=", "5", ",", "\n", "preprocess_input_function", "=", "None", ",", "# normalize if needed", "\n", "full_save", "=", "False", ",", "# save all the images", "\n", "root_dir_for_saving_images", "=", "'./nearest'", ",", "\n", "log", "=", "print", ",", "\n", "prototype_activation_function_in_numpy", "=", "None", ")", ":", "\n", "    ", "prototype_network_parallel", ".", "eval", "(", ")", "\n", "'''\n    full_save=False will only return the class identity of the closest\n    patches, but it will not save anything.\n    '''", "\n", "log", "(", "'find nearest patches'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "n_prototypes", "=", "prototype_network_parallel", ".", "module", ".", "num_prototypes", "\n", "\n", "prototype_shape", "=", "prototype_network_parallel", ".", "module", ".", "prototype_shape", "\n", "max_dist", "=", "prototype_shape", "[", "1", "]", "*", "prototype_shape", "[", "2", "]", "*", "prototype_shape", "[", "3", "]", "\n", "\n", "protoL_rf_info", "=", "prototype_network_parallel", ".", "module", ".", "proto_layer_rf_info", "\n", "\n", "heaps", "=", "[", "]", "\n", "# allocate an array of n_prototypes number of heaps", "\n", "for", "_", "in", "range", "(", "n_prototypes", ")", ":", "\n", "# a heap in python is just a maintained list", "\n", "        ", "heaps", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "for", "idx", ",", "(", "search_batch_input", ",", "search_y", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "print", "(", "'batch {}'", ".", "format", "(", "idx", ")", ")", "\n", "if", "preprocess_input_function", "is", "not", "None", ":", "\n", "# print('preprocessing input for pushing ...')", "\n", "# search_batch = copy.deepcopy(search_batch_input)", "\n", "            ", "search_batch", "=", "preprocess_input_function", "(", "search_batch_input", ")", "\n", "\n", "", "else", ":", "\n", "            ", "search_batch", "=", "search_batch_input", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "search_batch", "=", "search_batch", ".", "cuda", "(", ")", "\n", "protoL_input_torch", ",", "proto_dist_torch", "=", "prototype_network_parallel", ".", "module", ".", "push_forward", "(", "search_batch", ")", "\n", "\n", "#protoL_input_ = np.copy(protoL_input_torch.detach().cpu().numpy())", "\n", "", "proto_dist_", "=", "np", ".", "copy", "(", "proto_dist_torch", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "for", "img_idx", ",", "distance_map", "in", "enumerate", "(", "proto_dist_", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n_prototypes", ")", ":", "\n", "# find the closest patches in this batch to prototype j", "\n", "\n", "                ", "closest_patch_distance_to_prototype_j", "=", "np", ".", "amin", "(", "distance_map", "[", "j", "]", ")", "\n", "\n", "if", "full_save", ":", "\n", "                    ", "closest_patch_indices_in_distance_map_j", "=", "list", "(", "np", ".", "unravel_index", "(", "np", ".", "argmin", "(", "distance_map", "[", "j", "]", ",", "axis", "=", "None", ")", ",", "\n", "distance_map", "[", "j", "]", ".", "shape", ")", ")", "\n", "closest_patch_indices_in_distance_map_j", "=", "[", "0", "]", "+", "closest_patch_indices_in_distance_map_j", "\n", "closest_patch_indices_in_img", "=", "compute_rf_prototype", "(", "search_batch", ".", "size", "(", "2", ")", ",", "\n", "closest_patch_indices_in_distance_map_j", ",", "\n", "protoL_rf_info", ")", "\n", "closest_patch", "=", "search_batch_input", "[", "img_idx", ",", ":", ",", "\n", "closest_patch_indices_in_img", "[", "1", "]", ":", "closest_patch_indices_in_img", "[", "2", "]", ",", "\n", "closest_patch_indices_in_img", "[", "3", "]", ":", "closest_patch_indices_in_img", "[", "4", "]", "]", "\n", "closest_patch", "=", "closest_patch", ".", "numpy", "(", ")", "\n", "closest_patch", "=", "np", ".", "transpose", "(", "closest_patch", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "original_img", "=", "search_batch_input", "[", "img_idx", "]", ".", "numpy", "(", ")", "\n", "original_img", "=", "np", ".", "transpose", "(", "original_img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "if", "prototype_network_parallel", ".", "module", ".", "prototype_activation_function", "==", "'log'", ":", "\n", "                        ", "act_pattern", "=", "np", ".", "log", "(", "(", "distance_map", "[", "j", "]", "+", "1", ")", "/", "(", "distance_map", "[", "j", "]", "+", "prototype_network_parallel", ".", "module", ".", "epsilon", ")", ")", "\n", "", "elif", "prototype_network_parallel", ".", "module", ".", "prototype_activation_function", "==", "'linear'", ":", "\n", "                        ", "act_pattern", "=", "max_dist", "-", "distance_map", "[", "j", "]", "\n", "", "else", ":", "\n", "                        ", "act_pattern", "=", "prototype_activation_function_in_numpy", "(", "distance_map", "[", "j", "]", ")", "\n", "\n", "# 4 numbers: height_start, height_end, width_start, width_end", "\n", "", "patch_indices", "=", "closest_patch_indices_in_img", "[", "1", ":", "5", "]", "\n", "\n", "# construct the closest patch object", "\n", "closest_patch", "=", "ImagePatch", "(", "patch", "=", "closest_patch", ",", "\n", "label", "=", "search_y", "[", "img_idx", "]", ",", "\n", "distance", "=", "closest_patch_distance_to_prototype_j", ",", "\n", "original_img", "=", "original_img", ",", "\n", "act_pattern", "=", "act_pattern", ",", "\n", "patch_indices", "=", "patch_indices", ")", "\n", "", "else", ":", "\n", "                    ", "closest_patch", "=", "ImagePatchInfo", "(", "label", "=", "search_y", "[", "img_idx", "]", ",", "\n", "distance", "=", "closest_patch_distance_to_prototype_j", ")", "\n", "\n", "\n", "# add to the j-th heap", "\n", "", "if", "len", "(", "heaps", "[", "j", "]", ")", "<", "k", ":", "\n", "                    ", "heapq", ".", "heappush", "(", "heaps", "[", "j", "]", ",", "closest_patch", ")", "\n", "", "else", ":", "\n", "# heappushpop runs more efficiently than heappush", "\n", "# followed by heappop", "\n", "                    ", "heapq", ".", "heappushpop", "(", "heaps", "[", "j", "]", ",", "closest_patch", ")", "\n", "\n", "# after looping through the dataset every heap will", "\n", "# have the k closest prototypes", "\n", "", "", "", "", "for", "j", "in", "range", "(", "n_prototypes", ")", ":", "\n", "# finally sort the heap; the heap only contains the k closest", "\n", "# but they are not ranked yet", "\n", "        ", "heaps", "[", "j", "]", ".", "sort", "(", ")", "\n", "heaps", "[", "j", "]", "=", "heaps", "[", "j", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "if", "full_save", ":", "\n", "\n", "            ", "dir_for_saving_images", "=", "os", ".", "path", ".", "join", "(", "root_dir_for_saving_images", ",", "\n", "str", "(", "j", ")", ")", "\n", "makedir", "(", "dir_for_saving_images", ")", "\n", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "i", ",", "patch", "in", "enumerate", "(", "heaps", "[", "j", "]", ")", ":", "\n", "# save the activation pattern of the original image where the patch comes from", "\n", "                ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_act.npy'", ")", ",", "\n", "patch", ".", "act_pattern", ")", "\n", "\n", "# save the original image where the patch comes from", "\n", "plt", ".", "imsave", "(", "fname", "=", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_original.png'", ")", ",", "\n", "arr", "=", "patch", ".", "original_img", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "\n", "# overlay (upsampled) activation on original image and save the result", "\n", "img_size", "=", "patch", ".", "original_img", ".", "shape", "[", "0", "]", "\n", "upsampled_act_pattern", "=", "cv2", ".", "resize", "(", "patch", ".", "act_pattern", ",", "\n", "dsize", "=", "(", "img_size", ",", "img_size", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "rescaled_act_pattern", "=", "upsampled_act_pattern", "-", "np", ".", "amin", "(", "upsampled_act_pattern", ")", "\n", "rescaled_act_pattern", "=", "rescaled_act_pattern", "/", "np", ".", "amax", "(", "rescaled_act_pattern", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "rescaled_act_pattern", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap", "=", "np", ".", "float32", "(", "heatmap", ")", "/", "255", "\n", "heatmap", "=", "heatmap", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "overlayed_original_img", "=", "0.5", "*", "patch", ".", "original_img", "+", "0.3", "*", "heatmap", "\n", "plt", ".", "imsave", "(", "fname", "=", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_original_with_heatmap.png'", ")", ",", "\n", "arr", "=", "overlayed_original_img", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "\n", "# if different from original image, save the patch (i.e. receptive field)", "\n", "if", "patch", ".", "patch", ".", "shape", "[", "0", "]", "!=", "img_size", "or", "patch", ".", "patch", ".", "shape", "[", "1", "]", "!=", "img_size", ":", "\n", "                    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_receptive_field_indices.npy'", ")", ",", "\n", "patch", ".", "patch_indices", ")", "\n", "plt", ".", "imsave", "(", "fname", "=", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_receptive_field.png'", ")", ",", "\n", "arr", "=", "patch", ".", "patch", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "# save the receptive field patch with heatmap", "\n", "overlayed_patch", "=", "overlayed_original_img", "[", "patch", ".", "patch_indices", "[", "0", "]", ":", "patch", ".", "patch_indices", "[", "1", "]", ",", "\n", "patch", ".", "patch_indices", "[", "2", "]", ":", "patch", ".", "patch_indices", "[", "3", "]", ",", ":", "]", "\n", "plt", ".", "imsave", "(", "fname", "=", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_receptive_field_with_heatmap.png'", ")", ",", "\n", "arr", "=", "overlayed_patch", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "\n", "# save the highly activated patch    ", "\n", "", "high_act_patch_indices", "=", "find_high_activation_crop", "(", "upsampled_act_pattern", ")", "\n", "high_act_patch", "=", "patch", ".", "original_img", "[", "high_act_patch_indices", "[", "0", "]", ":", "high_act_patch_indices", "[", "1", "]", ",", "\n", "high_act_patch_indices", "[", "2", "]", ":", "high_act_patch_indices", "[", "3", "]", ",", ":", "]", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_high_act_patch_indices.npy'", ")", ",", "\n", "high_act_patch_indices", ")", "\n", "plt", ".", "imsave", "(", "fname", "=", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_high_act_patch.png'", ")", ",", "\n", "arr", "=", "high_act_patch", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "# save the original image with bounding box showing high activation patch", "\n", "imsave_with_bbox", "(", "fname", "=", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "\n", "'nearest-'", "+", "str", "(", "i", "+", "1", ")", "+", "'_high_act_patch_in_original_img.png'", ")", ",", "\n", "img_rgb", "=", "patch", ".", "original_img", ",", "\n", "bbox_height_start", "=", "high_act_patch_indices", "[", "0", "]", ",", "\n", "bbox_height_end", "=", "high_act_patch_indices", "[", "1", "]", ",", "\n", "bbox_width_start", "=", "high_act_patch_indices", "[", "2", "]", ",", "\n", "bbox_width_end", "=", "high_act_patch_indices", "[", "3", "]", ",", "color", "=", "(", "0", ",", "255", ",", "255", ")", ")", "\n", "\n", "", "labels", "=", "np", ".", "array", "(", "[", "patch", ".", "label", "for", "patch", "in", "heaps", "[", "j", "]", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_images", ",", "'class_id.npy'", ")", ",", "\n", "labels", ")", "\n", "\n", "\n", "", "", "labels_all_prototype", "=", "np", ".", "array", "(", "[", "[", "patch", ".", "label", "for", "patch", "in", "heaps", "[", "j", "]", "]", "for", "j", "in", "range", "(", "n_prototypes", ")", "]", ")", "\n", "\n", "if", "full_save", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "root_dir_for_saving_images", ",", "'full_class_id.npy'", ")", ",", "\n", "labels_all_prototype", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "log", "(", "'\\tfind nearest patches time: \\t{0}'", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n", "return", "labels_all_prototype", "\n", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.img_aug.makedir": [[3, 9], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "makedir", "(", "path", ")", ":", "\n", "    ", "'''\n    if path does not exist in the file system, create it\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.global_analysis.save_prototype_original_img_with_bbox": [[86, 97], ["cv2.imread", "cv2.rectangle", "matplotlib.imsave", "os.path.join", "numpy.float32", "str", "str"], "function", ["None"], ["def", "save_prototype_original_img_with_bbox", "(", "fname", ",", "epoch", ",", "index", ",", "\n", "bbox_height_start", ",", "bbox_height_end", ",", "\n", "bbox_width_start", ",", "bbox_width_end", ",", "color", "=", "(", "0", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "p_img_bgr", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "load_img_dir", ",", "'epoch-'", "+", "str", "(", "epoch", ")", ",", "'prototype-img-original'", "+", "str", "(", "index", ")", "+", "'.png'", ")", ")", "\n", "cv2", ".", "rectangle", "(", "p_img_bgr", ",", "(", "bbox_width_start", ",", "bbox_height_start", ")", ",", "(", "bbox_width_end", "-", "1", ",", "bbox_height_end", "-", "1", ")", ",", "\n", "color", ",", "thickness", "=", "2", ")", "\n", "p_img_rgb", "=", "p_img_bgr", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "p_img_rgb", "=", "np", ".", "float32", "(", "p_img_rgb", ")", "/", "255", "\n", "#plt.imshow(p_img_rgb)", "\n", "#plt.axis('off')", "\n", "plt", ".", "imsave", "(", "fname", ",", "p_img_rgb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.local_analysis.save_preprocessed_img": [[127, 137], ["copy.deepcopy", "preprocess.undo_preprocess_input_function", "print", "np.transpose.detach().cpu().numpy", "numpy.transpose", "matplotlib.imsave", "np.transpose.detach().cpu", "np.transpose.detach"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.undo_preprocess_input_function"], ["", "def", "save_preprocessed_img", "(", "fname", ",", "preprocessed_imgs", ",", "index", "=", "0", ")", ":", "\n", "    ", "img_copy", "=", "copy", ".", "deepcopy", "(", "preprocessed_imgs", "[", "index", ":", "index", "+", "1", "]", ")", "\n", "undo_preprocessed_img", "=", "undo_preprocess_input_function", "(", "img_copy", ")", "\n", "print", "(", "'image index {0} in batch'", ".", "format", "(", "index", ")", ")", "\n", "undo_preprocessed_img", "=", "undo_preprocessed_img", "[", "0", "]", "\n", "undo_preprocessed_img", "=", "undo_preprocessed_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "undo_preprocessed_img", "=", "np", ".", "transpose", "(", "undo_preprocessed_img", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n", "plt", ".", "imsave", "(", "fname", ",", "undo_preprocessed_img", ")", "\n", "return", "undo_preprocessed_img", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.local_analysis.save_prototype": [[138, 142], ["matplotlib.imread", "matplotlib.imsave", "os.path.join", "str", "str"], "function", ["None"], ["", "def", "save_prototype", "(", "fname", ",", "epoch", ",", "index", ")", ":", "\n", "    ", "p_img", "=", "plt", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "load_img_dir", ",", "'epoch-'", "+", "str", "(", "epoch", ")", ",", "'prototype-img'", "+", "str", "(", "index", ")", "+", "'.png'", ")", ")", "\n", "#plt.axis('off')", "\n", "plt", ".", "imsave", "(", "fname", ",", "p_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.local_analysis.save_prototype_self_activation": [[143, 148], ["matplotlib.imread", "matplotlib.imsave", "os.path.join", "str", "str"], "function", ["None"], ["", "def", "save_prototype_self_activation", "(", "fname", ",", "epoch", ",", "index", ")", ":", "\n", "    ", "p_img", "=", "plt", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "load_img_dir", ",", "'epoch-'", "+", "str", "(", "epoch", ")", ",", "\n", "'prototype-img-original_with_self_act'", "+", "str", "(", "index", ")", "+", "'.png'", ")", ")", "\n", "#plt.axis('off')", "\n", "plt", ".", "imsave", "(", "fname", ",", "p_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.local_analysis.save_prototype_original_img_with_bbox": [[149, 160], ["cv2.imread", "cv2.rectangle", "matplotlib.imsave", "os.path.join", "numpy.float32", "str", "str"], "function", ["None"], ["", "def", "save_prototype_original_img_with_bbox", "(", "fname", ",", "epoch", ",", "index", ",", "\n", "bbox_height_start", ",", "bbox_height_end", ",", "\n", "bbox_width_start", ",", "bbox_width_end", ",", "color", "=", "(", "0", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "p_img_bgr", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "load_img_dir", ",", "'epoch-'", "+", "str", "(", "epoch", ")", ",", "'prototype-img-original'", "+", "str", "(", "index", ")", "+", "'.png'", ")", ")", "\n", "cv2", ".", "rectangle", "(", "p_img_bgr", ",", "(", "bbox_width_start", ",", "bbox_height_start", ")", ",", "(", "bbox_width_end", "-", "1", ",", "bbox_height_end", "-", "1", ")", ",", "\n", "color", ",", "thickness", "=", "2", ")", "\n", "p_img_rgb", "=", "p_img_bgr", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "p_img_rgb", "=", "np", ".", "float32", "(", "p_img_rgb", ")", "/", "255", "\n", "#plt.imshow(p_img_rgb)", "\n", "#plt.axis('off')", "\n", "plt", ".", "imsave", "(", "fname", ",", "p_img_rgb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.local_analysis.imsave_with_bbox": [[161, 171], ["cv2.cvtColor", "cv2.rectangle", "matplotlib.imsave", "numpy.uint8", "numpy.float32"], "function", ["None"], ["", "def", "imsave_with_bbox", "(", "fname", ",", "img_rgb", ",", "bbox_height_start", ",", "bbox_height_end", ",", "\n", "bbox_width_start", ",", "bbox_width_end", ",", "color", "=", "(", "0", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "img_bgr_uint8", "=", "cv2", ".", "cvtColor", "(", "np", ".", "uint8", "(", "255", "*", "img_rgb", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "rectangle", "(", "img_bgr_uint8", ",", "(", "bbox_width_start", ",", "bbox_height_start", ")", ",", "(", "bbox_width_end", "-", "1", ",", "bbox_height_end", "-", "1", ")", ",", "\n", "color", ",", "thickness", "=", "2", ")", "\n", "img_rgb_uint8", "=", "img_bgr_uint8", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "img_rgb_float", "=", "np", ".", "float32", "(", "img_rgb_uint8", ")", "/", "255", "\n", "#plt.imshow(img_rgb_float)", "\n", "#plt.axis('off')", "\n", "plt", ".", "imsave", "(", "fname", ",", "img_rgb_float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_layer_rf_info": [[3, 34], ["math.floor", "math.ceil", "max", "max", "math.ceil", "float", "float", "math.floor", "math.floor", "float", "float", "math.floor"], "function", ["None"], ["def", "compute_layer_rf_info", "(", "layer_filter_size", ",", "layer_stride", ",", "layer_padding", ",", "\n", "previous_layer_rf_info", ")", ":", "\n", "    ", "n_in", "=", "previous_layer_rf_info", "[", "0", "]", "# input size", "\n", "j_in", "=", "previous_layer_rf_info", "[", "1", "]", "# receptive field jump of input layer", "\n", "r_in", "=", "previous_layer_rf_info", "[", "2", "]", "# receptive field size of input layer", "\n", "start_in", "=", "previous_layer_rf_info", "[", "3", "]", "# center of receptive field of input layer", "\n", "\n", "if", "layer_padding", "==", "'SAME'", ":", "\n", "        ", "n_out", "=", "math", ".", "ceil", "(", "float", "(", "n_in", ")", "/", "float", "(", "layer_stride", ")", ")", "\n", "if", "(", "n_in", "%", "layer_stride", "==", "0", ")", ":", "\n", "            ", "pad", "=", "max", "(", "layer_filter_size", "-", "layer_stride", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "pad", "=", "max", "(", "layer_filter_size", "-", "(", "n_in", "%", "layer_stride", ")", ",", "0", ")", "\n", "", "assert", "(", "n_out", "==", "math", ".", "floor", "(", "(", "n_in", "-", "layer_filter_size", "+", "pad", ")", "/", "layer_stride", ")", "+", "1", ")", "# sanity check", "\n", "assert", "(", "pad", "==", "(", "n_out", "-", "1", ")", "*", "layer_stride", "-", "n_in", "+", "layer_filter_size", ")", "# sanity check", "\n", "", "elif", "layer_padding", "==", "'VALID'", ":", "\n", "        ", "n_out", "=", "math", ".", "ceil", "(", "float", "(", "n_in", "-", "layer_filter_size", "+", "1", ")", "/", "float", "(", "layer_stride", ")", ")", "\n", "pad", "=", "0", "\n", "assert", "(", "n_out", "==", "math", ".", "floor", "(", "(", "n_in", "-", "layer_filter_size", "+", "pad", ")", "/", "layer_stride", ")", "+", "1", ")", "# sanity check", "\n", "assert", "(", "pad", "==", "(", "n_out", "-", "1", ")", "*", "layer_stride", "-", "n_in", "+", "layer_filter_size", ")", "# sanity check", "\n", "", "else", ":", "\n", "# layer_padding is an int that is the amount of padding on one side", "\n", "        ", "pad", "=", "layer_padding", "*", "2", "\n", "n_out", "=", "math", ".", "floor", "(", "(", "n_in", "-", "layer_filter_size", "+", "pad", ")", "/", "layer_stride", ")", "+", "1", "\n", "\n", "", "pL", "=", "math", ".", "floor", "(", "pad", "/", "2", ")", "\n", "\n", "j_out", "=", "j_in", "*", "layer_stride", "\n", "r_out", "=", "r_in", "+", "(", "layer_filter_size", "-", "1", ")", "*", "j_in", "\n", "start_out", "=", "start_in", "+", "(", "(", "layer_filter_size", "-", "1", ")", "/", "2", "-", "pL", ")", "*", "j_in", "\n", "return", "[", "n_out", ",", "j_out", ",", "r_out", ",", "start_out", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_rf_protoL_at_spatial_location": [[35, 54], ["max", "min", "max", "min", "int", "int", "int", "int"], "function", ["None"], ["", "def", "compute_rf_protoL_at_spatial_location", "(", "img_size", ",", "height_index", ",", "width_index", ",", "protoL_rf_info", ")", ":", "\n", "    ", "n", "=", "protoL_rf_info", "[", "0", "]", "\n", "j", "=", "protoL_rf_info", "[", "1", "]", "\n", "r", "=", "protoL_rf_info", "[", "2", "]", "\n", "start", "=", "protoL_rf_info", "[", "3", "]", "\n", "assert", "(", "height_index", "<", "n", ")", "\n", "assert", "(", "width_index", "<", "n", ")", "\n", "\n", "center_h", "=", "start", "+", "(", "height_index", "*", "j", ")", "\n", "center_w", "=", "start", "+", "(", "width_index", "*", "j", ")", "\n", "\n", "rf_start_height_index", "=", "max", "(", "int", "(", "center_h", "-", "(", "r", "/", "2", ")", ")", ",", "0", ")", "\n", "rf_end_height_index", "=", "min", "(", "int", "(", "center_h", "+", "(", "r", "/", "2", ")", ")", ",", "img_size", ")", "\n", "\n", "rf_start_width_index", "=", "max", "(", "int", "(", "center_w", "-", "(", "r", "/", "2", ")", ")", ",", "0", ")", "\n", "rf_end_width_index", "=", "min", "(", "int", "(", "center_w", "+", "(", "r", "/", "2", ")", ")", ",", "img_size", ")", "\n", "\n", "return", "[", "rf_start_height_index", ",", "rf_end_height_index", ",", "\n", "rf_start_width_index", ",", "rf_end_width_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_rf_prototype": [[55, 65], ["receptive_field.compute_rf_protoL_at_spatial_location"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_rf_protoL_at_spatial_location"], ["", "def", "compute_rf_prototype", "(", "img_size", ",", "prototype_patch_index", ",", "protoL_rf_info", ")", ":", "\n", "    ", "img_index", "=", "prototype_patch_index", "[", "0", "]", "\n", "height_index", "=", "prototype_patch_index", "[", "1", "]", "\n", "width_index", "=", "prototype_patch_index", "[", "2", "]", "\n", "rf_indices", "=", "compute_rf_protoL_at_spatial_location", "(", "img_size", ",", "\n", "height_index", ",", "\n", "width_index", ",", "\n", "protoL_rf_info", ")", "\n", "return", "[", "img_index", ",", "rf_indices", "[", "0", "]", ",", "rf_indices", "[", "1", "]", ",", "\n", "rf_indices", "[", "2", "]", ",", "rf_indices", "[", "3", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_rf_prototypes": [[66, 79], ["receptive_field.compute_rf_protoL_at_spatial_location", "rf_prototypes.append"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_rf_protoL_at_spatial_location"], ["", "def", "compute_rf_prototypes", "(", "img_size", ",", "prototype_patch_indices", ",", "protoL_rf_info", ")", ":", "\n", "    ", "rf_prototypes", "=", "[", "]", "\n", "for", "prototype_patch_index", "in", "prototype_patch_indices", ":", "\n", "        ", "img_index", "=", "prototype_patch_index", "[", "0", "]", "\n", "height_index", "=", "prototype_patch_index", "[", "1", "]", "\n", "width_index", "=", "prototype_patch_index", "[", "2", "]", "\n", "rf_indices", "=", "compute_rf_protoL_at_spatial_location", "(", "img_size", ",", "\n", "height_index", ",", "\n", "width_index", ",", "\n", "protoL_rf_info", ")", "\n", "rf_prototypes", ".", "append", "(", "[", "img_index", ",", "rf_indices", "[", "0", "]", ",", "rf_indices", "[", "1", "]", ",", "\n", "rf_indices", "[", "2", "]", ",", "rf_indices", "[", "3", "]", "]", ")", "\n", "", "return", "rf_prototypes", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_proto_layer_rf_info": [[80, 101], ["receptive_field.compute_layer_rf_info", "receptive_field.compute_layer_rf_info", "receptive_field.compute_layer_rf_info"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_layer_rf_info", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_layer_rf_info", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_layer_rf_info"], ["", "def", "compute_proto_layer_rf_info", "(", "img_size", ",", "cfg", ",", "prototype_kernel_size", ")", ":", "\n", "    ", "rf_info", "=", "[", "img_size", ",", "1", ",", "1", ",", "0.5", "]", "\n", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "rf_info", "=", "compute_layer_rf_info", "(", "layer_filter_size", "=", "2", ",", "\n", "layer_stride", "=", "2", ",", "\n", "layer_padding", "=", "'SAME'", ",", "\n", "previous_layer_rf_info", "=", "rf_info", ")", "\n", "", "else", ":", "\n", "            ", "rf_info", "=", "compute_layer_rf_info", "(", "layer_filter_size", "=", "3", ",", "\n", "layer_stride", "=", "1", ",", "\n", "layer_padding", "=", "'SAME'", ",", "\n", "previous_layer_rf_info", "=", "rf_info", ")", "\n", "\n", "", "", "proto_layer_rf_info", "=", "compute_layer_rf_info", "(", "layer_filter_size", "=", "prototype_kernel_size", ",", "\n", "layer_stride", "=", "1", ",", "\n", "layer_padding", "=", "'VALID'", ",", "\n", "previous_layer_rf_info", "=", "rf_info", ")", "\n", "\n", "return", "proto_layer_rf_info", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_proto_layer_rf_info_v2": [[102, 125], ["range", "receptive_field.compute_layer_rf_info", "len", "len", "len", "len", "len", "receptive_field.compute_layer_rf_info"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_layer_rf_info", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_layer_rf_info"], ["", "def", "compute_proto_layer_rf_info_v2", "(", "img_size", ",", "layer_filter_sizes", ",", "layer_strides", ",", "layer_paddings", ",", "prototype_kernel_size", ")", ":", "\n", "\n", "    ", "assert", "(", "len", "(", "layer_filter_sizes", ")", "==", "len", "(", "layer_strides", ")", ")", "\n", "assert", "(", "len", "(", "layer_filter_sizes", ")", "==", "len", "(", "layer_paddings", ")", ")", "\n", "\n", "rf_info", "=", "[", "img_size", ",", "1", ",", "1", ",", "0.5", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "layer_filter_sizes", ")", ")", ":", "\n", "        ", "filter_size", "=", "layer_filter_sizes", "[", "i", "]", "\n", "stride_size", "=", "layer_strides", "[", "i", "]", "\n", "padding_size", "=", "layer_paddings", "[", "i", "]", "\n", "\n", "rf_info", "=", "compute_layer_rf_info", "(", "layer_filter_size", "=", "filter_size", ",", "\n", "layer_stride", "=", "stride_size", ",", "\n", "layer_padding", "=", "padding_size", ",", "\n", "previous_layer_rf_info", "=", "rf_info", ")", "\n", "\n", "", "proto_layer_rf_info", "=", "compute_layer_rf_info", "(", "layer_filter_size", "=", "prototype_kernel_size", ",", "\n", "layer_stride", "=", "1", ",", "\n", "layer_padding", "=", "'VALID'", ",", "\n", "previous_layer_rf_info", "=", "rf_info", ")", "\n", "\n", "return", "proto_layer_rf_info", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.push.push_prototypes": [[13, 113], ["prototype_network_parallel.eval", "log", "time.time", "numpy.full", "numpy.zeros", "enumerate", "log", "numpy.reshape", "prototype_network_parallel.module.prototype_vectors.data.copy_", "time.time", "log", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "push.update_prototypes_on_batch", "numpy.save", "numpy.save", "tuple", "torch.tensor().cuda", "os.path.join", "helpers.makedir", "os.path.join", "os.path.join", "torch.tensor", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.push.update_prototypes_on_batch", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.preprocessing.create_modified_datasets.makedir"], ["def", "push_prototypes", "(", "dataloader", ",", "# pytorch dataloader (must be unnormalized in [0,1])", "\n", "prototype_network_parallel", ",", "# pytorch network with prototype_vectors", "\n", "class_specific", "=", "True", ",", "\n", "preprocess_input_function", "=", "None", ",", "# normalize if needed", "\n", "prototype_layer_stride", "=", "1", ",", "\n", "root_dir_for_saving_prototypes", "=", "None", ",", "# if not None, prototypes will be saved here", "\n", "epoch_number", "=", "None", ",", "# if not provided, prototypes saved previously will be overwritten", "\n", "prototype_img_filename_prefix", "=", "None", ",", "\n", "prototype_self_act_filename_prefix", "=", "None", ",", "\n", "proto_bound_boxes_filename_prefix", "=", "None", ",", "\n", "save_prototype_class_identity", "=", "True", ",", "# which class the prototype image comes from", "\n", "log", "=", "print", ",", "\n", "prototype_activation_function_in_numpy", "=", "None", ")", ":", "\n", "\n", "    ", "prototype_network_parallel", ".", "eval", "(", ")", "\n", "log", "(", "'\\tpush'", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "prototype_shape", "=", "prototype_network_parallel", ".", "module", ".", "prototype_shape", "\n", "n_prototypes", "=", "prototype_network_parallel", ".", "module", ".", "num_prototypes", "\n", "# saves the closest distance seen so far", "\n", "global_min_proto_dist", "=", "np", ".", "full", "(", "n_prototypes", ",", "np", ".", "inf", ")", "\n", "# saves the patch representation that gives the current smallest distance", "\n", "global_min_fmap_patches", "=", "np", ".", "zeros", "(", "\n", "[", "n_prototypes", ",", "\n", "prototype_shape", "[", "1", "]", ",", "\n", "prototype_shape", "[", "2", "]", ",", "\n", "prototype_shape", "[", "3", "]", "]", ")", "\n", "\n", "'''\n    proto_rf_boxes and proto_bound_boxes column:\n    0: image index in the entire dataset\n    1: height start index\n    2: height end index\n    3: width start index\n    4: width end index\n    5: (optional) class identity\n    '''", "\n", "if", "save_prototype_class_identity", ":", "\n", "        ", "proto_rf_boxes", "=", "np", ".", "full", "(", "shape", "=", "[", "n_prototypes", ",", "6", "]", ",", "\n", "fill_value", "=", "-", "1", ")", "\n", "proto_bound_boxes", "=", "np", ".", "full", "(", "shape", "=", "[", "n_prototypes", ",", "6", "]", ",", "\n", "fill_value", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "proto_rf_boxes", "=", "np", ".", "full", "(", "shape", "=", "[", "n_prototypes", ",", "5", "]", ",", "\n", "fill_value", "=", "-", "1", ")", "\n", "proto_bound_boxes", "=", "np", ".", "full", "(", "shape", "=", "[", "n_prototypes", ",", "5", "]", ",", "\n", "fill_value", "=", "-", "1", ")", "\n", "\n", "", "if", "root_dir_for_saving_prototypes", "!=", "None", ":", "\n", "        ", "if", "epoch_number", "!=", "None", ":", "\n", "            ", "proto_epoch_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir_for_saving_prototypes", ",", "\n", "'epoch-'", "+", "str", "(", "epoch_number", ")", ")", "\n", "makedir", "(", "proto_epoch_dir", ")", "\n", "", "else", ":", "\n", "            ", "proto_epoch_dir", "=", "root_dir_for_saving_prototypes", "\n", "", "", "else", ":", "\n", "        ", "proto_epoch_dir", "=", "None", "\n", "\n", "", "search_batch_size", "=", "dataloader", ".", "batch_size", "\n", "\n", "num_classes", "=", "prototype_network_parallel", ".", "module", ".", "num_classes", "\n", "\n", "for", "push_iter", ",", "(", "search_batch_input", ",", "search_y", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "'''\n        start_index_of_search keeps track of the index of the image\n        assigned to serve as prototype\n        '''", "\n", "start_index_of_search_batch", "=", "push_iter", "*", "search_batch_size", "\n", "\n", "update_prototypes_on_batch", "(", "search_batch_input", ",", "\n", "start_index_of_search_batch", ",", "\n", "prototype_network_parallel", ",", "\n", "global_min_proto_dist", ",", "\n", "global_min_fmap_patches", ",", "\n", "proto_rf_boxes", ",", "\n", "proto_bound_boxes", ",", "\n", "class_specific", "=", "class_specific", ",", "\n", "search_y", "=", "search_y", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "preprocess_input_function", "=", "preprocess_input_function", ",", "\n", "prototype_layer_stride", "=", "prototype_layer_stride", ",", "\n", "dir_for_saving_prototypes", "=", "proto_epoch_dir", ",", "\n", "prototype_img_filename_prefix", "=", "prototype_img_filename_prefix", ",", "\n", "prototype_self_act_filename_prefix", "=", "prototype_self_act_filename_prefix", ",", "\n", "prototype_activation_function_in_numpy", "=", "prototype_activation_function_in_numpy", ")", "\n", "\n", "", "if", "proto_epoch_dir", "!=", "None", "and", "proto_bound_boxes_filename_prefix", "!=", "None", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "proto_epoch_dir", ",", "proto_bound_boxes_filename_prefix", "+", "'-receptive_field'", "+", "str", "(", "epoch_number", ")", "+", "'.npy'", ")", ",", "\n", "proto_rf_boxes", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "proto_epoch_dir", ",", "proto_bound_boxes_filename_prefix", "+", "str", "(", "epoch_number", ")", "+", "'.npy'", ")", ",", "\n", "proto_bound_boxes", ")", "\n", "\n", "", "log", "(", "'\\tExecuting push ...'", ")", "\n", "prototype_update", "=", "np", ".", "reshape", "(", "global_min_fmap_patches", ",", "\n", "tuple", "(", "prototype_shape", ")", ")", "\n", "prototype_network_parallel", ".", "module", ".", "prototype_vectors", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "prototype_update", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", ")", "\n", "# prototype_network_parallel.cuda()", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "log", "(", "'\\tpush time: \\t{0}'", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.push.update_prototypes_on_batch": [[115, 306], ["prototype_network_parallel.eval", "numpy.copy", "numpy.copy", "range", "preprocess_input_function", "torch.no_grad", "search_batch.cuda.cuda", "prototype_network_parallel.module.push_forward", "protoL_input_torch.detach().cpu().numpy", "proto_dist_torch.detach().cpu().numpy", "enumerate", "numpy.amin", "img_y.item", "class_to_img_index_dict[].append", "torch.argmax().item", "list", "receptive_field.compute_rf_prototype", "np.transpose.numpy", "numpy.transpose", "cv2.resize", "helpers.find_high_activation_crop", "protoL_input_torch.detach().cpu", "proto_dist_torch.detach().cpu", "range", "len", "numpy.unravel_index", "search_batch.cuda.size", "search_y[].item", "numpy.log", "search_y[].item", "torch.argmax", "numpy.argmin", "prototype_activation_function_in_numpy", "numpy.save", "matplotlib.imsave", "cv2.applyColorMap", "matplotlib.imsave", "matplotlib.imsave", "protoL_input_torch.detach", "proto_dist_torch.detach", "os.path.join", "os.path.join", "numpy.amin", "numpy.amax", "numpy.uint8", "numpy.float32", "os.path.join", "matplotlib.imsave", "matplotlib.imsave", "os.path.join", "os.path.join", "os.path.join", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.preprocess_input_function", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.push_forward", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_rf_prototype", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.find_high_activation_crop"], ["", "def", "update_prototypes_on_batch", "(", "search_batch_input", ",", "\n", "start_index_of_search_batch", ",", "\n", "prototype_network_parallel", ",", "\n", "global_min_proto_dist", ",", "# this will be updated", "\n", "global_min_fmap_patches", ",", "# this will be updated", "\n", "proto_rf_boxes", ",", "# this will be updated", "\n", "proto_bound_boxes", ",", "# this will be updated", "\n", "class_specific", "=", "True", ",", "\n", "search_y", "=", "None", ",", "# required if class_specific == True", "\n", "num_classes", "=", "None", ",", "# required if class_specific == True", "\n", "preprocess_input_function", "=", "None", ",", "\n", "prototype_layer_stride", "=", "1", ",", "\n", "dir_for_saving_prototypes", "=", "None", ",", "\n", "prototype_img_filename_prefix", "=", "None", ",", "\n", "prototype_self_act_filename_prefix", "=", "None", ",", "\n", "prototype_activation_function_in_numpy", "=", "None", ")", ":", "\n", "\n", "    ", "prototype_network_parallel", ".", "eval", "(", ")", "\n", "\n", "if", "preprocess_input_function", "is", "not", "None", ":", "\n", "# print('preprocessing input for pushing ...')", "\n", "# search_batch = copy.deepcopy(search_batch_input)", "\n", "        ", "search_batch", "=", "preprocess_input_function", "(", "search_batch_input", ")", "\n", "\n", "", "else", ":", "\n", "        ", "search_batch", "=", "search_batch_input", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "search_batch", "=", "search_batch", ".", "cuda", "(", ")", "\n", "# this computation currently is not parallelized", "\n", "protoL_input_torch", ",", "proto_dist_torch", "=", "prototype_network_parallel", ".", "module", ".", "push_forward", "(", "search_batch", ")", "\n", "\n", "", "protoL_input_", "=", "np", ".", "copy", "(", "protoL_input_torch", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "proto_dist_", "=", "np", ".", "copy", "(", "proto_dist_torch", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "del", "protoL_input_torch", ",", "proto_dist_torch", "\n", "\n", "if", "class_specific", ":", "\n", "        ", "class_to_img_index_dict", "=", "{", "key", ":", "[", "]", "for", "key", "in", "range", "(", "num_classes", ")", "}", "\n", "# img_y is the image's integer label", "\n", "for", "img_index", ",", "img_y", "in", "enumerate", "(", "search_y", ")", ":", "\n", "            ", "img_label", "=", "img_y", ".", "item", "(", ")", "\n", "class_to_img_index_dict", "[", "img_label", "]", ".", "append", "(", "img_index", ")", "\n", "\n", "", "", "prototype_shape", "=", "prototype_network_parallel", ".", "module", ".", "prototype_shape", "\n", "n_prototypes", "=", "prototype_shape", "[", "0", "]", "\n", "proto_h", "=", "prototype_shape", "[", "2", "]", "\n", "proto_w", "=", "prototype_shape", "[", "3", "]", "\n", "max_dist", "=", "prototype_shape", "[", "1", "]", "*", "prototype_shape", "[", "2", "]", "*", "prototype_shape", "[", "3", "]", "\n", "\n", "for", "j", "in", "range", "(", "n_prototypes", ")", ":", "\n", "#if n_prototypes_per_class != None:", "\n", "        ", "if", "class_specific", ":", "\n", "# target_class is the class of the class_specific prototype", "\n", "            ", "target_class", "=", "torch", ".", "argmax", "(", "prototype_network_parallel", ".", "module", ".", "prototype_class_identity", "[", "j", "]", ")", ".", "item", "(", ")", "\n", "# if there is not images of the target_class from this batch", "\n", "# we go on to the next prototype", "\n", "if", "len", "(", "class_to_img_index_dict", "[", "target_class", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "proto_dist_j", "=", "proto_dist_", "[", "class_to_img_index_dict", "[", "target_class", "]", "]", "[", ":", ",", "j", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "# if it is not class specific, then we will search through", "\n", "# every example", "\n", "            ", "proto_dist_j", "=", "proto_dist_", "[", ":", ",", "j", ",", ":", ",", ":", "]", "\n", "\n", "", "batch_min_proto_dist_j", "=", "np", ".", "amin", "(", "proto_dist_j", ")", "\n", "if", "batch_min_proto_dist_j", "<", "global_min_proto_dist", "[", "j", "]", ":", "\n", "            ", "batch_argmin_proto_dist_j", "=", "list", "(", "np", ".", "unravel_index", "(", "np", ".", "argmin", "(", "proto_dist_j", ",", "axis", "=", "None", ")", ",", "\n", "proto_dist_j", ".", "shape", ")", ")", "\n", "if", "class_specific", ":", "\n", "                ", "'''\n                change the argmin index from the index among\n                images of the target class to the index in the entire search\n                batch\n                '''", "\n", "batch_argmin_proto_dist_j", "[", "0", "]", "=", "class_to_img_index_dict", "[", "target_class", "]", "[", "batch_argmin_proto_dist_j", "[", "0", "]", "]", "\n", "\n", "# retrieve the corresponding feature map patch", "\n", "", "img_index_in_batch", "=", "batch_argmin_proto_dist_j", "[", "0", "]", "\n", "fmap_height_start_index", "=", "batch_argmin_proto_dist_j", "[", "1", "]", "*", "prototype_layer_stride", "\n", "fmap_height_end_index", "=", "fmap_height_start_index", "+", "proto_h", "\n", "fmap_width_start_index", "=", "batch_argmin_proto_dist_j", "[", "2", "]", "*", "prototype_layer_stride", "\n", "fmap_width_end_index", "=", "fmap_width_start_index", "+", "proto_w", "\n", "\n", "batch_min_fmap_patch_j", "=", "protoL_input_", "[", "img_index_in_batch", ",", "\n", ":", ",", "\n", "fmap_height_start_index", ":", "fmap_height_end_index", ",", "\n", "fmap_width_start_index", ":", "fmap_width_end_index", "]", "\n", "\n", "global_min_proto_dist", "[", "j", "]", "=", "batch_min_proto_dist_j", "\n", "global_min_fmap_patches", "[", "j", "]", "=", "batch_min_fmap_patch_j", "\n", "\n", "# get the receptive field boundary of the image patch", "\n", "# that generates the representation", "\n", "protoL_rf_info", "=", "prototype_network_parallel", ".", "module", ".", "proto_layer_rf_info", "\n", "rf_prototype_j", "=", "compute_rf_prototype", "(", "search_batch", ".", "size", "(", "2", ")", ",", "batch_argmin_proto_dist_j", ",", "protoL_rf_info", ")", "\n", "\n", "# get the whole image", "\n", "original_img_j", "=", "search_batch_input", "[", "rf_prototype_j", "[", "0", "]", "]", "\n", "original_img_j", "=", "original_img_j", ".", "numpy", "(", ")", "\n", "original_img_j", "=", "np", ".", "transpose", "(", "original_img_j", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "original_img_size", "=", "original_img_j", ".", "shape", "[", "0", "]", "\n", "\n", "# crop out the receptive field", "\n", "rf_img_j", "=", "original_img_j", "[", "rf_prototype_j", "[", "1", "]", ":", "rf_prototype_j", "[", "2", "]", ",", "\n", "rf_prototype_j", "[", "3", "]", ":", "rf_prototype_j", "[", "4", "]", ",", ":", "]", "\n", "\n", "# save the prototype receptive field information", "\n", "proto_rf_boxes", "[", "j", ",", "0", "]", "=", "rf_prototype_j", "[", "0", "]", "+", "start_index_of_search_batch", "\n", "proto_rf_boxes", "[", "j", ",", "1", "]", "=", "rf_prototype_j", "[", "1", "]", "\n", "proto_rf_boxes", "[", "j", ",", "2", "]", "=", "rf_prototype_j", "[", "2", "]", "\n", "proto_rf_boxes", "[", "j", ",", "3", "]", "=", "rf_prototype_j", "[", "3", "]", "\n", "proto_rf_boxes", "[", "j", ",", "4", "]", "=", "rf_prototype_j", "[", "4", "]", "\n", "if", "proto_rf_boxes", ".", "shape", "[", "1", "]", "==", "6", "and", "search_y", "is", "not", "None", ":", "\n", "                ", "proto_rf_boxes", "[", "j", ",", "5", "]", "=", "search_y", "[", "rf_prototype_j", "[", "0", "]", "]", ".", "item", "(", ")", "\n", "\n", "# find the highly activated region of the original image", "\n", "", "proto_dist_img_j", "=", "proto_dist_", "[", "img_index_in_batch", ",", "j", ",", ":", ",", ":", "]", "\n", "if", "prototype_network_parallel", ".", "module", ".", "prototype_activation_function", "==", "'log'", ":", "\n", "                ", "proto_act_img_j", "=", "np", ".", "log", "(", "(", "proto_dist_img_j", "+", "1", ")", "/", "(", "proto_dist_img_j", "+", "prototype_network_parallel", ".", "module", ".", "epsilon", ")", ")", "\n", "", "elif", "prototype_network_parallel", ".", "module", ".", "prototype_activation_function", "==", "'linear'", ":", "\n", "                ", "proto_act_img_j", "=", "max_dist", "-", "proto_dist_img_j", "\n", "", "else", ":", "\n", "                ", "proto_act_img_j", "=", "prototype_activation_function_in_numpy", "(", "proto_dist_img_j", ")", "\n", "", "upsampled_act_img_j", "=", "cv2", ".", "resize", "(", "proto_act_img_j", ",", "dsize", "=", "(", "original_img_size", ",", "original_img_size", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "proto_bound_j", "=", "find_high_activation_crop", "(", "upsampled_act_img_j", ")", "\n", "# crop out the image patch with high activation as prototype image", "\n", "proto_img_j", "=", "original_img_j", "[", "proto_bound_j", "[", "0", "]", ":", "proto_bound_j", "[", "1", "]", ",", "\n", "proto_bound_j", "[", "2", "]", ":", "proto_bound_j", "[", "3", "]", ",", ":", "]", "\n", "\n", "# save the prototype boundary (rectangular boundary of highly activated region)", "\n", "proto_bound_boxes", "[", "j", ",", "0", "]", "=", "proto_rf_boxes", "[", "j", ",", "0", "]", "\n", "proto_bound_boxes", "[", "j", ",", "1", "]", "=", "proto_bound_j", "[", "0", "]", "\n", "proto_bound_boxes", "[", "j", ",", "2", "]", "=", "proto_bound_j", "[", "1", "]", "\n", "proto_bound_boxes", "[", "j", ",", "3", "]", "=", "proto_bound_j", "[", "2", "]", "\n", "proto_bound_boxes", "[", "j", ",", "4", "]", "=", "proto_bound_j", "[", "3", "]", "\n", "if", "proto_bound_boxes", ".", "shape", "[", "1", "]", "==", "6", "and", "search_y", "is", "not", "None", ":", "\n", "                ", "proto_bound_boxes", "[", "j", ",", "5", "]", "=", "search_y", "[", "rf_prototype_j", "[", "0", "]", "]", ".", "item", "(", ")", "\n", "\n", "", "if", "dir_for_saving_prototypes", "is", "not", "None", ":", "\n", "                ", "if", "prototype_self_act_filename_prefix", "is", "not", "None", ":", "\n", "# save the numpy array of the prototype self activation", "\n", "                    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_prototypes", ",", "\n", "prototype_self_act_filename_prefix", "+", "str", "(", "j", ")", "+", "'.npy'", ")", ",", "\n", "proto_act_img_j", ")", "\n", "", "if", "prototype_img_filename_prefix", "is", "not", "None", ":", "\n", "# save the whole image containing the prototype as png", "\n", "                    ", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_prototypes", ",", "\n", "prototype_img_filename_prefix", "+", "'-original'", "+", "str", "(", "j", ")", "+", "'.png'", ")", ",", "\n", "original_img_j", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "# overlay (upsampled) self activation on original image and save the result", "\n", "rescaled_act_img_j", "=", "upsampled_act_img_j", "-", "np", ".", "amin", "(", "upsampled_act_img_j", ")", "\n", "rescaled_act_img_j", "=", "rescaled_act_img_j", "/", "np", ".", "amax", "(", "rescaled_act_img_j", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "rescaled_act_img_j", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap", "=", "np", ".", "float32", "(", "heatmap", ")", "/", "255", "\n", "heatmap", "=", "heatmap", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "overlayed_original_img_j", "=", "0.5", "*", "original_img_j", "+", "0.3", "*", "heatmap", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_prototypes", ",", "\n", "prototype_img_filename_prefix", "+", "'-original_with_self_act'", "+", "str", "(", "j", ")", "+", "'.png'", ")", ",", "\n", "overlayed_original_img_j", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "\n", "# if different from the original (whole) image, save the prototype receptive field as png", "\n", "if", "rf_img_j", ".", "shape", "[", "0", "]", "!=", "original_img_size", "or", "rf_img_j", ".", "shape", "[", "1", "]", "!=", "original_img_size", ":", "\n", "                        ", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_prototypes", ",", "\n", "prototype_img_filename_prefix", "+", "'-receptive_field'", "+", "str", "(", "j", ")", "+", "'.png'", ")", ",", "\n", "rf_img_j", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "overlayed_rf_img_j", "=", "overlayed_original_img_j", "[", "rf_prototype_j", "[", "1", "]", ":", "rf_prototype_j", "[", "2", "]", ",", "\n", "rf_prototype_j", "[", "3", "]", ":", "rf_prototype_j", "[", "4", "]", "]", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_prototypes", ",", "\n", "prototype_img_filename_prefix", "+", "'-receptive_field_with_self_act'", "+", "str", "(", "j", ")", "+", "'.png'", ")", ",", "\n", "overlayed_rf_img_j", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "\n", "# save the prototype image (highly activated region of the whole image)", "\n", "", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "dir_for_saving_prototypes", ",", "\n", "prototype_img_filename_prefix", "+", "str", "(", "j", ")", "+", "'.png'", ")", ",", "\n", "proto_img_j", ",", "\n", "vmin", "=", "0.0", ",", "\n", "vmax", "=", "1.0", ")", "\n", "\n", "", "", "", "", "if", "class_specific", ":", "\n", "        ", "del", "class_to_img_index_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.preprocess": [[6, 12], ["torch.zeros_like", "range", "x.size"], "function", ["None"], ["def", "preprocess", "(", "x", ",", "mean", ",", "std", ")", ":", "\n", "    ", "assert", "x", ".", "size", "(", "1", ")", "==", "3", "\n", "y", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "y", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", "]", "-", "mean", "[", "i", "]", ")", "/", "std", "[", "i", "]", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.preprocess_input_function": [[14, 20], ["preprocess.preprocess"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.preprocess"], ["", "def", "preprocess_input_function", "(", "x", ")", ":", "\n", "    ", "'''\n    allocate new tensor like x and apply the normalization used in the\n    pretrained model\n    '''", "\n", "return", "preprocess", "(", "x", ",", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.undo_preprocess": [[21, 27], ["torch.zeros_like", "range", "x.size"], "function", ["None"], ["", "def", "undo_preprocess", "(", "x", ",", "mean", ",", "std", ")", ":", "\n", "    ", "assert", "x", ".", "size", "(", "1", ")", "==", "3", "\n", "y", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "y", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "std", "[", "i", "]", "+", "mean", "[", "i", "]", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.undo_preprocess_input_function": [[28, 34], ["preprocess.undo_preprocess"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.preprocess.undo_preprocess"], ["", "def", "undo_preprocess_input_function", "(", "x", ")", ":", "\n", "    ", "'''\n    allocate new tensor like x and undo the normalization used in the\n    pretrained model\n    '''", "\n", "return", "undo_preprocess", "(", "x", ",", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.save.save_model_w_condition": [[4, 12], ["log", "torch.save", "os.path.join"], "function", ["None"], ["def", "save_model_w_condition", "(", "model", ",", "model_dir", ",", "model_name", ",", "accu", ",", "target_accu", ",", "log", "=", "print", ")", ":", "\n", "    ", "'''\n    model: this is not the multigpu model\n    '''", "\n", "if", "accu", ">", "target_accu", ":", "\n", "        ", "log", "(", "'\\tabove {0:.2f}%'", ".", "format", "(", "target_accu", "*", "100", ")", ")", "\n", "# torch.save(obj=model.state_dict(), f=os.path.join(model_dir, (model_name + '{0:.4f}.pth').format(accu)))", "\n", "torch", ".", "save", "(", "obj", "=", "model", ",", "f", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "(", "model_name", "+", "'{0:.4f}.pth'", ")", ".", "format", "(", "accu", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.prune.prune_prototypes": [[10, 100], ["find_nearest.find_k_nearest_patches_to_prototypes", "range", "log", "log", "torch.argmax().numpy().reshape", "numpy.array().reshape", "numpy.hstack", "helpers.makedir", "numpy.save", "prototype_network_parallel.module.prune_prototypes", "torch.argmax().item", "collections.Counter", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "helpers.makedir", "list", "range", "prototypes_to_prune.append", "len", "torch.argmax().numpy", "numpy.array", "len", "shutil.copyfile", "shutil.copyfile", "shutil.copyfile", "shutil.copyfile", "numpy.load", "numpy.save", "numpy.load", "numpy.save", "torch.argmax", "set", "set", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.argmax", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.find_nearest.find_k_nearest_patches_to_prototypes", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.preprocessing.create_modified_datasets.makedir", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.prune_prototypes", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.preprocessing.create_modified_datasets.makedir"], ["def", "prune_prototypes", "(", "dataloader", ",", "\n", "prototype_network_parallel", ",", "\n", "k", ",", "\n", "prune_threshold", ",", "\n", "preprocess_input_function", ",", "\n", "original_model_dir", ",", "\n", "epoch_number", ",", "\n", "#model_name=None,", "\n", "log", "=", "print", ",", "\n", "copy_prototype_imgs", "=", "True", ")", ":", "\n", "### run global analysis", "\n", "    ", "nearest_train_patch_class_ids", "=", "find_nearest", ".", "find_k_nearest_patches_to_prototypes", "(", "dataloader", "=", "dataloader", ",", "\n", "prototype_network_parallel", "=", "prototype_network_parallel", ",", "\n", "k", "=", "k", ",", "\n", "preprocess_input_function", "=", "preprocess_input_function", ",", "\n", "full_save", "=", "False", ",", "\n", "log", "=", "log", ")", "\n", "\n", "### find prototypes to prune", "\n", "original_num_prototypes", "=", "prototype_network_parallel", ".", "module", ".", "num_prototypes", "\n", "\n", "prototypes_to_prune", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "prototype_network_parallel", ".", "module", ".", "num_prototypes", ")", ":", "\n", "        ", "class_j", "=", "torch", ".", "argmax", "(", "prototype_network_parallel", ".", "module", ".", "prototype_class_identity", "[", "j", "]", ")", ".", "item", "(", ")", "\n", "nearest_train_patch_class_counts_j", "=", "Counter", "(", "nearest_train_patch_class_ids", "[", "j", "]", ")", "\n", "# if no such element is in Counter, it will return 0", "\n", "if", "nearest_train_patch_class_counts_j", "[", "class_j", "]", "<", "prune_threshold", ":", "\n", "            ", "prototypes_to_prune", ".", "append", "(", "j", ")", "\n", "\n", "", "", "log", "(", "'k = {}, prune_threshold = {}'", ".", "format", "(", "k", ",", "prune_threshold", ")", ")", "\n", "log", "(", "'{} prototypes will be pruned'", ".", "format", "(", "len", "(", "prototypes_to_prune", ")", ")", ")", "\n", "\n", "### bookkeeping of prototypes to be pruned", "\n", "class_of_prototypes_to_prune", "=", "torch", ".", "argmax", "(", "\n", "prototype_network_parallel", ".", "module", ".", "prototype_class_identity", "[", "prototypes_to_prune", "]", ",", "\n", "dim", "=", "1", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "prototypes_to_prune_np", "=", "np", ".", "array", "(", "prototypes_to_prune", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "prune_info", "=", "np", ".", "hstack", "(", "(", "prototypes_to_prune_np", ",", "class_of_prototypes_to_prune", ")", ")", "\n", "makedir", "(", "os", ".", "path", ".", "join", "(", "original_model_dir", ",", "'pruned_prototypes_epoch{}_k{}_pt{}'", ".", "format", "(", "epoch_number", ",", "\n", "k", ",", "\n", "prune_threshold", ")", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "original_model_dir", ",", "'pruned_prototypes_epoch{}_k{}_pt{}'", ".", "format", "(", "epoch_number", ",", "\n", "k", ",", "\n", "prune_threshold", ")", ",", "'prune_info.npy'", ")", ",", "\n", "prune_info", ")", "\n", "\n", "### prune prototypes", "\n", "prototype_network_parallel", ".", "module", ".", "prune_prototypes", "(", "prototypes_to_prune", ")", "\n", "#torch.save(obj=prototype_network_parallel.module,", "\n", "#           f=os.path.join(original_model_dir, 'pruned_prototypes_epoch{}_k{}_pt{}'.format(epoch_number,", "\n", "#                                              k,", "\n", "#                                              prune_threshold),", "\n", "#                          model_name + '-pruned.pth'))", "\n", "if", "copy_prototype_imgs", ":", "\n", "        ", "original_img_dir", "=", "os", ".", "path", ".", "join", "(", "original_model_dir", ",", "'img'", ",", "'epoch-%d'", "%", "epoch_number", ")", "\n", "dst_img_dir", "=", "os", ".", "path", ".", "join", "(", "original_model_dir", ",", "\n", "'pruned_prototypes_epoch{}_k{}_pt{}'", ".", "format", "(", "epoch_number", ",", "\n", "k", ",", "\n", "prune_threshold", ")", ",", "\n", "'img'", ",", "'epoch-%d'", "%", "epoch_number", ")", "\n", "makedir", "(", "dst_img_dir", ")", "\n", "prototypes_to_keep", "=", "list", "(", "set", "(", "range", "(", "original_num_prototypes", ")", ")", "-", "set", "(", "prototypes_to_prune", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "prototypes_to_keep", ")", ")", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "src", "=", "os", ".", "path", ".", "join", "(", "original_img_dir", ",", "'prototype-img%d.png'", "%", "prototypes_to_keep", "[", "idx", "]", ")", ",", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dst_img_dir", ",", "'prototype-img%d.png'", "%", "idx", ")", ")", "\n", "\n", "shutil", ".", "copyfile", "(", "src", "=", "os", ".", "path", ".", "join", "(", "original_img_dir", ",", "'prototype-img-original%d.png'", "%", "prototypes_to_keep", "[", "idx", "]", ")", ",", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dst_img_dir", ",", "'prototype-img-original%d.png'", "%", "idx", ")", ")", "\n", "\n", "shutil", ".", "copyfile", "(", "src", "=", "os", ".", "path", ".", "join", "(", "original_img_dir", ",", "'prototype-img-original_with_self_act%d.png'", "%", "prototypes_to_keep", "[", "idx", "]", ")", ",", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dst_img_dir", ",", "'prototype-img-original_with_self_act%d.png'", "%", "idx", ")", ")", "\n", "\n", "shutil", ".", "copyfile", "(", "src", "=", "os", ".", "path", ".", "join", "(", "original_img_dir", ",", "'prototype-self-act%d.npy'", "%", "prototypes_to_keep", "[", "idx", "]", ")", ",", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dst_img_dir", ",", "'prototype-self-act%d.npy'", "%", "idx", ")", ")", "\n", "\n", "\n", "bb", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "original_img_dir", ",", "'bb%d.npy'", "%", "epoch_number", ")", ")", "\n", "bb", "=", "bb", "[", "prototypes_to_keep", "]", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst_img_dir", ",", "'bb%d.npy'", "%", "epoch_number", ")", ",", "\n", "bb", ")", "\n", "\n", "bb_rf", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "original_img_dir", ",", "'bb-receptive_field%d.npy'", "%", "epoch_number", ")", ")", "\n", "bb_rf", "=", "bb_rf", "[", "prototypes_to_keep", "]", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst_img_dir", ",", "'bb-receptive_field%d.npy'", "%", "epoch_number", ")", ",", "\n", "bb_rf", ")", "\n", "\n", "", "", "return", "prune_info", "\n", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.__init__": [[33, 118], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "str().upper", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "str().upper.startswith", "str().upper.startswith", "str().upper.startswith", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.PPNet._initialize_weights", "str", "Exception", "max", "add_on_layers.append", "add_on_layers.append", "add_on_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "add_on_layers.append", "add_on_layers.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "features.modules", "isinstance", "features.modules", "isinstance"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "img_size", ",", "prototype_shape", ",", "\n", "proto_layer_rf_info", ",", "num_classes", ",", "init_weights", "=", "True", ",", "\n", "prototype_activation_function", "=", "'log'", ",", "\n", "add_on_layers_type", "=", "'bottleneck'", ")", ":", "\n", "\n", "        ", "super", "(", "PPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "prototype_shape", "=", "prototype_shape", "\n", "self", ".", "num_prototypes", "=", "prototype_shape", "[", "0", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "1e-4", "\n", "\n", "# prototype_activation_function could be 'log', 'linear',", "\n", "# or a generic function that converts distance to similarity score", "\n", "self", ".", "prototype_activation_function", "=", "prototype_activation_function", "\n", "\n", "'''\n        Here we are initializing the class identities of the prototypes\n        Without domain specific knowledge we allocate the same number of\n        prototypes for each class\n        '''", "\n", "assert", "(", "self", ".", "num_prototypes", "%", "self", ".", "num_classes", "==", "0", ")", "\n", "# a onehot indication matrix for each prototype's class identity", "\n", "self", ".", "prototype_class_identity", "=", "torch", ".", "zeros", "(", "self", ".", "num_prototypes", ",", "\n", "self", ".", "num_classes", ")", "\n", "\n", "num_prototypes_per_class", "=", "self", ".", "num_prototypes", "//", "self", ".", "num_classes", "\n", "for", "j", "in", "range", "(", "self", ".", "num_prototypes", ")", ":", "\n", "            ", "self", ".", "prototype_class_identity", "[", "j", ",", "j", "//", "num_prototypes_per_class", "]", "=", "1", "\n", "\n", "", "self", ".", "proto_layer_rf_info", "=", "proto_layer_rf_info", "\n", "\n", "# this has to be named features to allow the precise loading", "\n", "self", ".", "features", "=", "features", "\n", "\n", "features_name", "=", "str", "(", "self", ".", "features", ")", ".", "upper", "(", ")", "\n", "if", "features_name", ".", "startswith", "(", "'VGG'", ")", "or", "features_name", ".", "startswith", "(", "'RES'", ")", ":", "\n", "            ", "first_add_on_layer_in_channels", "=", "[", "i", "for", "i", "in", "features", ".", "modules", "(", ")", "if", "isinstance", "(", "i", ",", "nn", ".", "Conv2d", ")", "]", "[", "-", "1", "]", ".", "out_channels", "\n", "", "elif", "features_name", ".", "startswith", "(", "'DENSE'", ")", ":", "\n", "            ", "first_add_on_layer_in_channels", "=", "[", "i", "for", "i", "in", "features", ".", "modules", "(", ")", "if", "isinstance", "(", "i", ",", "nn", ".", "BatchNorm2d", ")", "]", "[", "-", "1", "]", ".", "num_features", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'other base base_architecture NOT implemented'", ")", "\n", "\n", "", "if", "add_on_layers_type", "==", "'bottleneck'", ":", "\n", "            ", "add_on_layers", "=", "[", "]", "\n", "current_in_channels", "=", "first_add_on_layer_in_channels", "\n", "while", "(", "current_in_channels", ">", "self", ".", "prototype_shape", "[", "1", "]", ")", "or", "(", "len", "(", "add_on_layers", ")", "==", "0", ")", ":", "\n", "                ", "current_out_channels", "=", "max", "(", "self", ".", "prototype_shape", "[", "1", "]", ",", "(", "current_in_channels", "//", "2", ")", ")", "\n", "add_on_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "current_in_channels", ",", "\n", "out_channels", "=", "current_out_channels", ",", "\n", "kernel_size", "=", "1", ")", ")", "\n", "add_on_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "add_on_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "current_out_channels", ",", "\n", "out_channels", "=", "current_out_channels", ",", "\n", "kernel_size", "=", "1", ")", ")", "\n", "if", "current_out_channels", ">", "self", ".", "prototype_shape", "[", "1", "]", ":", "\n", "                    ", "add_on_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "current_out_channels", "==", "self", ".", "prototype_shape", "[", "1", "]", ")", "\n", "add_on_layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "current_in_channels", "=", "current_in_channels", "//", "2", "\n", "", "self", ".", "add_on_layers", "=", "nn", ".", "Sequential", "(", "*", "add_on_layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_on_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "first_add_on_layer_in_channels", ",", "out_channels", "=", "self", ".", "prototype_shape", "[", "1", "]", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "prototype_shape", "[", "1", "]", ",", "out_channels", "=", "self", ".", "prototype_shape", "[", "1", "]", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "self", ".", "prototype_vectors", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "self", ".", "prototype_shape", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "# do not make this just a tensor,", "\n", "# since it will not be moved automatically to gpu", "\n", "self", ".", "ones", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "prototype_shape", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "last_layer", "=", "nn", ".", "Linear", "(", "self", ".", "num_prototypes", ",", "self", ".", "num_classes", ",", "\n", "bias", "=", "False", ")", "# do not use bias", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.conv_features": [[119, 126], ["model.PPNet.features", "model.PPNet.add_on_layers"], "methods", ["None"], ["", "", "def", "conv_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        the feature input to prototype layer\n        '''", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "add_on_layers", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet._weighted_l2_convolution": [[127, 152], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_weighted_l2_convolution", "(", "input", ",", "filter", ",", "weights", ")", ":", "\n", "        ", "'''\n        input of shape N * c * h * w\n        filter of shape P * c * h1 * w1\n        weight of shape P * c * h1 * w1\n        '''", "\n", "input2", "=", "input", "**", "2", "\n", "input_patch_weighted_norm2", "=", "F", ".", "conv2d", "(", "input", "=", "input2", ",", "weight", "=", "weights", ")", "\n", "\n", "filter2", "=", "filter", "**", "2", "\n", "weighted_filter2", "=", "filter2", "*", "weights", "\n", "filter_weighted_norm2", "=", "torch", ".", "sum", "(", "weighted_filter2", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "filter_weighted_norm2_reshape", "=", "filter_weighted_norm2", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "weighted_filter", "=", "filter", "*", "weights", "\n", "weighted_inner_product", "=", "F", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weighted_filter", ")", "\n", "\n", "# use broadcast", "\n", "intermediate_result", "=", "-", "2", "*", "weighted_inner_product", "+", "filter_weighted_norm2_reshape", "\n", "# x2_patch_sum and intermediate_result are of the same shape", "\n", "distances", "=", "F", ".", "relu", "(", "input_patch_weighted_norm2", "+", "intermediate_result", ")", "\n", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet._l2_convolution": [[153, 172], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "_l2_convolution", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        apply self.prototype_vectors as l2-convolution filters on input x\n        '''", "\n", "x2", "=", "x", "**", "2", "\n", "x2_patch_sum", "=", "F", ".", "conv2d", "(", "input", "=", "x2", ",", "weight", "=", "self", ".", "ones", ")", "\n", "\n", "p2", "=", "self", ".", "prototype_vectors", "**", "2", "\n", "p2", "=", "torch", ".", "sum", "(", "p2", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "# p2 is a vector of shape (num_prototypes,)", "\n", "# then we reshape it to (num_prototypes, 1, 1)", "\n", "p2_reshape", "=", "p2", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "xp", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "self", ".", "prototype_vectors", ")", "\n", "intermediate_result", "=", "-", "2", "*", "xp", "+", "p2_reshape", "# use broadcast", "\n", "# x2_patch_sum and intermediate_result are of the same shape", "\n", "distances", "=", "F", ".", "relu", "(", "x2_patch_sum", "+", "intermediate_result", ")", "\n", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.prototype_distances": [[173, 180], ["model.PPNet.conv_features", "model.PPNet._l2_convolution"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.conv_features", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet._l2_convolution"], ["", "def", "prototype_distances", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        x is the raw input\n        '''", "\n", "conv_features", "=", "self", ".", "conv_features", "(", "x", ")", "\n", "distances", "=", "self", ".", "_l2_convolution", "(", "conv_features", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.distance_2_similarity": [[181, 188], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "model.PPNet.prototype_activation_function"], "methods", ["None"], ["", "def", "distance_2_similarity", "(", "self", ",", "distances", ")", ":", "\n", "        ", "if", "self", ".", "prototype_activation_function", "==", "'log'", ":", "\n", "            ", "return", "torch", ".", "log", "(", "(", "distances", "+", "1", ")", "/", "(", "distances", "+", "self", ".", "epsilon", ")", ")", "\n", "", "elif", "self", ".", "prototype_activation_function", "==", "'linear'", ":", "\n", "            ", "return", "-", "distances", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "prototype_activation_function", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.forward": [[189, 203], ["model.PPNet.prototype_distances", "min_distances.view.view.view", "model.PPNet.distance_2_similarity", "model.PPNet.last_layer", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "model.PPNet.size", "model.PPNet.size"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.prototype_distances", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.distance_2_similarity"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "distances", "=", "self", ".", "prototype_distances", "(", "x", ")", "\n", "'''\n        we cannot refactor the lines below for similarity scores\n        because we need to return min_distances\n        '''", "\n", "# global min pooling", "\n", "min_distances", "=", "-", "F", ".", "max_pool2d", "(", "-", "distances", ",", "\n", "kernel_size", "=", "(", "distances", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "distances", ".", "size", "(", ")", "[", "3", "]", ")", ")", "\n", "min_distances", "=", "min_distances", ".", "view", "(", "-", "1", ",", "self", ".", "num_prototypes", ")", "\n", "prototype_activations", "=", "self", ".", "distance_2_similarity", "(", "min_distances", ")", "\n", "logits", "=", "self", ".", "last_layer", "(", "prototype_activations", ")", "\n", "return", "logits", ",", "min_distances", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.push_forward": [[204, 209], ["model.PPNet.conv_features", "model.PPNet._l2_convolution"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.conv_features", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet._l2_convolution"], ["", "def", "push_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''this method is needed for the pushing operation'''", "\n", "conv_output", "=", "self", ".", "conv_features", "(", "x", ")", "\n", "distances", "=", "self", ".", "_l2_convolution", "(", "conv_output", ")", "\n", "return", "conv_output", ",", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.prune_prototypes": [[210, 236], ["list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model.PPNet.prototype_vectors.size", "set", "set", "range"], "methods", ["None"], ["", "def", "prune_prototypes", "(", "self", ",", "prototypes_to_prune", ")", ":", "\n", "        ", "'''\n        prototypes_to_prune: a list of indices each in\n        [0, current number of prototypes - 1] that indicates the prototypes to\n        be removed\n        '''", "\n", "prototypes_to_keep", "=", "list", "(", "set", "(", "range", "(", "self", ".", "num_prototypes", ")", ")", "-", "set", "(", "prototypes_to_prune", ")", ")", "\n", "\n", "self", ".", "prototype_vectors", "=", "nn", ".", "Parameter", "(", "self", ".", "prototype_vectors", ".", "data", "[", "prototypes_to_keep", ",", "...", "]", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "prototype_shape", "=", "list", "(", "self", ".", "prototype_vectors", ".", "size", "(", ")", ")", "\n", "self", ".", "num_prototypes", "=", "self", ".", "prototype_shape", "[", "0", "]", "\n", "\n", "# changing self.last_layer in place", "\n", "# changing in_features and out_features make sure the numbers are consistent", "\n", "self", ".", "last_layer", ".", "in_features", "=", "self", ".", "num_prototypes", "\n", "self", ".", "last_layer", ".", "out_features", "=", "self", ".", "num_classes", "\n", "self", ".", "last_layer", ".", "weight", ".", "data", "=", "self", ".", "last_layer", ".", "weight", ".", "data", "[", ":", ",", "prototypes_to_keep", "]", "\n", "\n", "# self.ones is nn.Parameter", "\n", "self", ".", "ones", "=", "nn", ".", "Parameter", "(", "self", ".", "ones", ".", "data", "[", "prototypes_to_keep", ",", "...", "]", ",", "\n", "requires_grad", "=", "False", ")", "\n", "# self.prototype_class_identity is torch tensor", "\n", "# so it does not need .data access for value update", "\n", "self", ".", "prototype_class_identity", "=", "self", ".", "prototype_class_identity", "[", "prototypes_to_keep", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.__repr__": [[237, 257], ["rep.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "# PPNet(self, features, img_size, prototype_shape,", "\n", "# proto_layer_rf_info, num_classes, init_weights=True):", "\n", "        ", "rep", "=", "(", "\n", "'PPNet(\\n'", "\n", "'\\tfeatures: {},\\n'", "\n", "'\\timg_size: {},\\n'", "\n", "'\\tprototype_shape: {},\\n'", "\n", "'\\tproto_layer_rf_info: {},\\n'", "\n", "'\\tnum_classes: {},\\n'", "\n", "'\\tepsilon: {}\\n'", "\n", "')'", "\n", ")", "\n", "\n", "return", "rep", ".", "format", "(", "self", ".", "features", ",", "\n", "self", ".", "img_size", ",", "\n", "self", ".", "prototype_shape", ",", "\n", "self", ".", "proto_layer_rf_info", ",", "\n", "self", ".", "num_classes", ",", "\n", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.set_last_layer_incorrect_connection": [[258, 270], ["torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "model.PPNet.last_layer.weight.data.copy_"], "methods", ["None"], ["", "def", "set_last_layer_incorrect_connection", "(", "self", ",", "incorrect_strength", ")", ":", "\n", "        ", "'''\n        the incorrect strength will be actual strength if -0.5 then input -0.5\n        '''", "\n", "positive_one_weights_locations", "=", "torch", ".", "t", "(", "self", ".", "prototype_class_identity", ")", "\n", "negative_one_weights_locations", "=", "1", "-", "positive_one_weights_locations", "\n", "\n", "correct_class_connection", "=", "1", "\n", "incorrect_class_connection", "=", "incorrect_strength", "\n", "self", ".", "last_layer", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "correct_class_connection", "*", "positive_one_weights_locations", "\n", "+", "incorrect_class_connection", "*", "negative_one_weights_locations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet._initialize_weights": [[271, 285], ["model.PPNet.add_on_layers.modules", "model.PPNet.set_last_layer_incorrect_connection", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.set_last_layer_incorrect_connection"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "add_on_layers", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# every init technique has an underscore _ in the name", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "self", ".", "set_last_layer_incorrect_connection", "(", "incorrect_strength", "=", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.construct_PPNet": [[288, 307], ["features.conv_info", "receptive_field.compute_proto_layer_rf_info_v2", "model.PPNet"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.conv_info", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.receptive_field.compute_proto_layer_rf_info_v2"], ["", "", "def", "construct_PPNet", "(", "base_architecture", ",", "pretrained", "=", "True", ",", "img_size", "=", "224", ",", "\n", "prototype_shape", "=", "(", "2000", ",", "512", ",", "1", ",", "1", ")", ",", "num_classes", "=", "200", ",", "\n", "prototype_activation_function", "=", "'log'", ",", "\n", "add_on_layers_type", "=", "'bottleneck'", ")", ":", "\n", "    ", "features", "=", "base_architecture_to_features", "[", "base_architecture", "]", "(", "pretrained", "=", "pretrained", ")", "\n", "layer_filter_sizes", ",", "layer_strides", ",", "layer_paddings", "=", "features", ".", "conv_info", "(", ")", "\n", "proto_layer_rf_info", "=", "compute_proto_layer_rf_info_v2", "(", "img_size", "=", "img_size", ",", "\n", "layer_filter_sizes", "=", "layer_filter_sizes", ",", "\n", "layer_strides", "=", "layer_strides", ",", "\n", "layer_paddings", "=", "layer_paddings", ",", "\n", "prototype_kernel_size", "=", "prototype_shape", "[", "2", "]", ")", "\n", "return", "PPNet", "(", "features", "=", "features", ",", "\n", "img_size", "=", "img_size", ",", "\n", "prototype_shape", "=", "prototype_shape", ",", "\n", "proto_layer_rf_info", "=", "proto_layer_rf_info", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "init_weights", "=", "True", ",", "\n", "prototype_activation_function", "=", "prototype_activation_function", ",", "\n", "add_on_layers_type", "=", "add_on_layers_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.list_of_distances": [[5, 7], ["torch.sum", "torch.unsqueeze", "torch.unsqueeze", "Y.t"], "function", ["None"], ["def", "list_of_distances", "(", "X", ",", "Y", ")", ":", "\n", "    ", "return", "torch", ".", "sum", "(", "(", "torch", ".", "unsqueeze", "(", "X", ",", "dim", "=", "2", ")", "-", "torch", ".", "unsqueeze", "(", "Y", ".", "t", "(", ")", ",", "dim", "=", "0", ")", ")", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.make_one_hot": [[8, 12], ["target.view.view", "target_one_hot.zero_", "target_one_hot.scatter_"], "function", ["None"], ["", "def", "make_one_hot", "(", "target", ",", "target_one_hot", ")", ":", "\n", "    ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "target_one_hot", ".", "zero_", "(", ")", "\n", "target_one_hot", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "target", ",", "value", "=", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.makedir": [[13, 19], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "makedir", "(", "path", ")", ":", "\n", "    ", "'''\n    if path does not exist in the file system, create it\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.print_and_write": [[20, 23], ["print", "file.write"], "function", ["None"], ["", "", "def", "print_and_write", "(", "str", ",", "file", ")", ":", "\n", "    ", "print", "(", "str", ")", "\n", "file", ".", "write", "(", "str", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.find_high_activation_crop": [[24, 46], ["numpy.percentile", "numpy.ones", "range", "reversed", "range", "reversed", "range", "range", "numpy.amax", "numpy.amax", "numpy.amax", "numpy.amax"], "function", ["None"], ["", "def", "find_high_activation_crop", "(", "activation_map", ",", "percentile", "=", "95", ")", ":", "\n", "    ", "threshold", "=", "np", ".", "percentile", "(", "activation_map", ",", "percentile", ")", "\n", "mask", "=", "np", ".", "ones", "(", "activation_map", ".", "shape", ")", "\n", "mask", "[", "activation_map", "<", "threshold", "]", "=", "0", "\n", "lower_y", ",", "upper_y", ",", "lower_x", ",", "upper_x", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "np", ".", "amax", "(", "mask", "[", "i", "]", ")", ">", "0.5", ":", "\n", "            ", "lower_y", "=", "i", "\n", "break", "\n", "", "", "for", "i", "in", "reversed", "(", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "np", ".", "amax", "(", "mask", "[", "i", "]", ")", ">", "0.5", ":", "\n", "            ", "upper_y", "=", "i", "\n", "break", "\n", "", "", "for", "j", "in", "range", "(", "mask", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "np", ".", "amax", "(", "mask", "[", ":", ",", "j", "]", ")", ">", "0.5", ":", "\n", "            ", "lower_x", "=", "j", "\n", "break", "\n", "", "", "for", "j", "in", "reversed", "(", "range", "(", "mask", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "if", "np", ".", "amax", "(", "mask", "[", ":", ",", "j", "]", ")", ">", "0.5", ":", "\n", "            ", "upper_x", "=", "j", "\n", "break", "\n", "", "", "return", "lower_y", ",", "upper_y", "+", "1", ",", "lower_x", ",", "upper_x", "+", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.BasicBlock.__init__": [[31, 43], ["torch.Module.__init__", "resnet_features.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_features.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv3x3", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# only conv with possibly not 1 stride", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "# if stride is not 1 then self.downsample cannot be None", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.BasicBlock.forward": [[44, 62], ["resnet_features.BasicBlock.conv1", "resnet_features.BasicBlock.bn1", "resnet_features.BasicBlock.relu", "resnet_features.BasicBlock.conv2", "resnet_features.BasicBlock.bn2", "resnet_features.BasicBlock.relu", "resnet_features.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "# the residual connection", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.BasicBlock.block_conv_info": [[63, 69], ["None"], "methods", ["None"], ["", "def", "block_conv_info", "(", "self", ")", ":", "\n", "        ", "block_kernel_sizes", "=", "[", "3", ",", "3", "]", "\n", "block_strides", "=", "[", "self", ".", "stride", ",", "1", "]", "\n", "block_paddings", "=", "[", "1", ",", "1", "]", "\n", "\n", "return", "block_kernel_sizes", ",", "block_strides", ",", "block_paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.Bottleneck.__init__": [[76, 90], ["torch.Module.__init__", "resnet_features.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_features.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_features.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv1x1", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv3x3", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# only conv with possibly not 1 stride", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# if stride is not 1 then self.downsample cannot be None", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.Bottleneck.forward": [[91, 112], ["resnet_features.Bottleneck.conv1", "resnet_features.Bottleneck.bn1", "resnet_features.Bottleneck.relu", "resnet_features.Bottleneck.conv2", "resnet_features.Bottleneck.bn2", "resnet_features.Bottleneck.relu", "resnet_features.Bottleneck.conv3", "resnet_features.Bottleneck.bn3", "resnet_features.Bottleneck.relu", "resnet_features.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.Bottleneck.block_conv_info": [[113, 119], ["None"], "methods", ["None"], ["", "def", "block_conv_info", "(", "self", ")", ":", "\n", "        ", "block_kernel_sizes", "=", "[", "1", ",", "3", ",", "1", "]", "\n", "block_strides", "=", "[", "1", ",", "self", ".", "stride", ",", "1", "]", "\n", "block_paddings", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "\n", "return", "block_kernel_sizes", ",", "block_strides", ",", "block_paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features.__init__": [[127, 168], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_features.ResNet_features._make_layer", "resnet_features.ResNet_features._make_layer", "resnet_features.ResNet_features._make_layer", "resnet_features.ResNet_features._make_layer", "resnet_features.ResNet_features.modules", "isinstance", "resnet_features.ResNet_features.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features._make_layer", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features._make_layer", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features._make_layer", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet_features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "# the first convolutional layer before the structured sequence of blocks", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# comes from the first conv and the following max pool", "\n", "self", ".", "kernel_sizes", "=", "[", "7", ",", "3", "]", "\n", "self", ".", "strides", "=", "[", "2", ",", "2", "]", "\n", "self", ".", "paddings", "=", "[", "3", ",", "1", "]", "\n", "\n", "# the following layers, each layer is a sequence of blocks", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", "=", "block", ",", "planes", "=", "64", ",", "num_blocks", "=", "self", ".", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", "=", "block", ",", "planes", "=", "128", ",", "num_blocks", "=", "self", ".", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", "=", "block", ",", "planes", "=", "256", ",", "num_blocks", "=", "self", ".", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", "=", "block", ",", "planes", "=", "512", ",", "num_blocks", "=", "self", ".", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "# initialize the parameters", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features._make_layer": [[169, 193], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "each_block.block_conv_info", "resnet_features.ResNet_features.kernel_sizes.extend", "resnet_features.ResNet_features.strides.extend", "resnet_features.ResNet_features.paddings.extend", "resnet_features.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._Transition.block_conv_info", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "# only the first block has downsample that is possibly not None", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "# keep track of every block's conv size, stride size, and padding size", "\n", "", "for", "each_block", "in", "layers", ":", "\n", "            ", "block_kernel_sizes", ",", "block_strides", ",", "block_paddings", "=", "each_block", ".", "block_conv_info", "(", ")", "\n", "self", ".", "kernel_sizes", ".", "extend", "(", "block_kernel_sizes", ")", "\n", "self", ".", "strides", ".", "extend", "(", "block_strides", ")", "\n", "self", ".", "paddings", ".", "extend", "(", "block_paddings", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features.forward": [[194, 206], ["resnet_features.ResNet_features.conv1", "resnet_features.ResNet_features.bn1", "resnet_features.ResNet_features.relu", "resnet_features.ResNet_features.maxpool", "resnet_features.ResNet_features.layer1", "resnet_features.ResNet_features.layer2", "resnet_features.ResNet_features.layer3", "resnet_features.ResNet_features.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features.conv_info": [[207, 209], ["None"], "methods", ["None"], ["", "def", "conv_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kernel_sizes", ",", "self", ".", "strides", ",", "self", ".", "paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features.num_layers": [[210, 221], ["None"], "methods", ["None"], ["", "def", "num_layers", "(", "self", ")", ":", "\n", "        ", "'''\n        the number of conv layers in the network, not counting the number\n        of bypass layers\n        '''", "\n", "\n", "return", "(", "self", ".", "block", ".", "num_layers", "*", "self", ".", "layers", "[", "0", "]", "\n", "+", "self", ".", "block", ".", "num_layers", "*", "self", ".", "layers", "[", "1", "]", "\n", "+", "self", ".", "block", ".", "num_layers", "*", "self", ".", "layers", "[", "2", "]", "\n", "+", "self", ".", "block", ".", "num_layers", "*", "self", ".", "layers", "[", "3", "]", "\n", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.ResNet_features.__repr__": [[223, 226], ["template.format", "resnet_features.ResNet_features.num_layers"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.num_layers"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "template", "=", "'resnet{}_features'", "\n", "return", "template", ".", "format", "(", "self", ".", "num_layers", "(", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv3x3": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.conv1x1": [[21, 24], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.resnet18_features": [[227, 239], ["resnet_features.ResNet_features", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "ResNet_features.load_state_dict"], "function", ["None"], ["", "", "def", "resnet18_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_features", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "my_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "my_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.resnet34_features": [[241, 253], ["resnet_features.ResNet_features", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "ResNet_features.load_state_dict"], "function", ["None"], ["", "def", "resnet34_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_features", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "my_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "my_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.resnet50_features": [[255, 267], ["resnet_features.ResNet_features", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "ResNet_features.load_state_dict"], "function", ["None"], ["", "def", "resnet50_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_features", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "my_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "my_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.resnet101_features": [[269, 281], ["resnet_features.ResNet_features", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "ResNet_features.load_state_dict"], "function", ["None"], ["", "def", "resnet101_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_features", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "my_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "my_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.resnet_features.resnet152_features": [[283, 295], ["resnet_features.ResNet_features", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "ResNet_features.load_state_dict"], "function", ["None"], ["", "def", "resnet152_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_features", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "my_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "my_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.prototype_activation.weighted_mean": [[24, 26], ["pandas.Series", "x.orig_similarity.sum"], "function", ["None"], ["def", "weighted_mean", "(", "x", ")", ":", "\n", "    ", "return", "pd", ".", "Series", "(", "{", "'weighted_delta'", ":", "(", "x", ".", "delta", "*", "x", ".", "orig_similarity", ")", ".", "sum", "(", ")", "/", "x", ".", "orig_similarity", ".", "sum", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.prototype_activation.forward_get_patch_index": [[27, 39], ["ppnet.prototype_distances", "torch.max_pool2d", "nearest_patch_indices.view.view", "ppnet.distance_2_similarity", "ppnet.last_layer", "min_distances.view", "ppnet.prototype_distances.size", "ppnet.prototype_distances.size"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.prototype_distances", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.distance_2_similarity"], ["", "def", "forward_get_patch_index", "(", "ppnet", ",", "x", ")", ":", "\n", "    ", "distances", "=", "ppnet", ".", "prototype_distances", "(", "x", ")", "\n", "\n", "# global min pooling", "\n", "min_distances", ",", "nearest_patch_indices", "=", "F", ".", "max_pool2d", "(", "-", "distances", ",", "\n", "kernel_size", "=", "(", "distances", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "distances", ".", "size", "(", ")", "[", "3", "]", ")", ",", "return_indices", "=", "True", ")", "\n", "min_distances", "=", "-", "min_distances", ".", "view", "(", "-", "1", ",", "ppnet", ".", "num_prototypes", ")", "#shape (bs, 2000)", "\n", "nearest_patch_indices", "=", "nearest_patch_indices", ".", "view", "(", "ppnet", ".", "num_prototypes", ")", "\n", "prototype_similarities", "=", "ppnet", ".", "distance_2_similarity", "(", "min_distances", ")", "#shape (1,2000)", "\n", "logits", "=", "ppnet", ".", "last_layer", "(", "prototype_similarities", ")", "#shape(1,200)", "\n", "return", "logits", ",", "min_distances", ",", "prototype_similarities", ",", "nearest_patch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.prototype_activation.forward_particular_patch": [[40, 46], ["ppnet.prototype_distances", "ppnet.distance_2_similarity", "ppnet.last_layer", "ppnet.prototype_distances.view", "range"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.prototype_distances", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.model.PPNet.distance_2_similarity"], ["", "def", "forward_particular_patch", "(", "ppnet", ",", "x", ",", "nearest_patch_indices", ")", ":", "\n", "    ", "distances", "=", "ppnet", ".", "prototype_distances", "(", "x", ")", "#shape (5,2000,7,7)", "\n", "patch_distances", "=", "distances", ".", "view", "(", "-", "1", ",", "ppnet", ".", "num_prototypes", ",", "distances", ".", "shape", "[", "2", "]", "*", "distances", ".", "shape", "[", "3", "]", ")", "[", ":", ",", "range", "(", "distances", ".", "shape", "[", "1", "]", ")", ",", "nearest_patch_indices", "]", "#shape (5,2000)", "\n", "prototype_similarities", "=", "ppnet", ".", "distance_2_similarity", "(", "patch_distances", ")", "\n", "logits", "=", "ppnet", ".", "last_layer", "(", "prototype_similarities", ")", "\n", "return", "logits", ",", "patch_distances", ",", "prototype_similarities", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.log.create_logger": [[2, 16], ["open", "open.write", "print", "open.flush", "os.fsync", "open.fileno"], "function", ["None"], ["def", "create_logger", "(", "log_filename", ",", "display", "=", "True", ")", ":", "\n", "    ", "f", "=", "open", "(", "log_filename", ",", "'a'", ")", "\n", "counter", "=", "[", "0", "]", "\n", "# this function will still have access to f after create_logger terminates", "\n", "def", "logger", "(", "text", ")", ":", "\n", "        ", "if", "display", ":", "\n", "            ", "print", "(", "text", ")", "\n", "", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "\n", "counter", "[", "0", "]", "+=", "1", "\n", "if", "counter", "[", "0", "]", "%", "10", "==", "0", ":", "\n", "            ", "f", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "f", ".", "fileno", "(", ")", ")", "\n", "# Question: do we need to flush()", "\n", "", "", "return", "logger", ",", "f", ".", "close", "\n", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test._train_or_test": [[6, 125], ["time.time", "enumerate", "time.time", "log", "log", "log", "log", "log", "model.module.prototype_vectors.view().cpu", "log", "image.cuda", "label.cuda", "log", "log", "torch.no_grad", "torch.mean", "torch.enable_grad", "torch.no_grad", "model", "torch.nn.functional.cross_entropy", "torch.max", "label.cuda.size", "torch.nn.functional.cross_entropy.item", "torch.mean.item", "torch.mean.item", "torch.mean.item", "optimizer.zero_grad", "loss.backward", "optimizer.step", "model.module.last_layer.weight.norm().item", "model.module.prototype_vectors.view", "helpers.list_of_distances", "torch.mean.item", "torch.t().cuda", "torch.max", "torch.mean", "torch.max", "torch.mean", "torch.mean", "torch.min", "torch.mean", "model.module.last_layer.weight.norm", "torch.sum", "torch.sum", "model.module.last_layer.weight.norm", "model.module.last_layer.weight.norm", "torch.t", "torch.t().cuda", "torch.t"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.helpers.list_of_distances"], ["def", "_train_or_test", "(", "model", ",", "dataloader", ",", "optimizer", "=", "None", ",", "class_specific", "=", "True", ",", "use_l1_mask", "=", "True", ",", "\n", "coefs", "=", "None", ",", "log", "=", "print", ")", ":", "\n", "    ", "'''\n    model: the multi-gpu model\n    dataloader:\n    optimizer: if None, will be test evaluation\n    '''", "\n", "is_train", "=", "optimizer", "is", "not", "None", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "n_examples", "=", "0", "\n", "n_correct", "=", "0", "\n", "n_batches", "=", "0", "\n", "total_cross_entropy", "=", "0", "\n", "total_cluster_cost", "=", "0", "\n", "# separation cost is meaningful only for class_specific", "\n", "total_separation_cost", "=", "0", "\n", "total_avg_separation_cost", "=", "0", "\n", "\n", "for", "i", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "input", "=", "image", ".", "cuda", "(", ")", "\n", "target", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "# torch.enable_grad() has no effect outside of no_grad()", "\n", "grad_req", "=", "torch", ".", "enable_grad", "(", ")", "if", "is_train", "else", "torch", ".", "no_grad", "(", ")", "\n", "with", "grad_req", ":", "\n", "# nn.Module has implemented __call__() function", "\n", "# so no need to call .forward", "\n", "            ", "output", ",", "min_distances", "=", "model", "(", "input", ")", "\n", "\n", "# compute loss", "\n", "cross_entropy", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "\n", "if", "class_specific", ":", "\n", "                ", "max_dist", "=", "(", "model", ".", "module", ".", "prototype_shape", "[", "1", "]", "\n", "*", "model", ".", "module", ".", "prototype_shape", "[", "2", "]", "\n", "*", "model", ".", "module", ".", "prototype_shape", "[", "3", "]", ")", "\n", "\n", "# prototypes_of_correct_class is a tensor of shape batch_size * num_prototypes", "\n", "# calculate cluster cost", "\n", "prototypes_of_correct_class", "=", "torch", ".", "t", "(", "model", ".", "module", ".", "prototype_class_identity", "[", ":", ",", "label", "]", ")", ".", "cuda", "(", ")", "\n", "inverted_distances", ",", "_", "=", "torch", ".", "max", "(", "(", "max_dist", "-", "min_distances", ")", "*", "prototypes_of_correct_class", ",", "dim", "=", "1", ")", "\n", "cluster_cost", "=", "torch", ".", "mean", "(", "max_dist", "-", "inverted_distances", ")", "\n", "\n", "# calculate separation cost", "\n", "prototypes_of_wrong_class", "=", "1", "-", "prototypes_of_correct_class", "\n", "inverted_distances_to_nontarget_prototypes", ",", "_", "=", "torch", ".", "max", "(", "(", "max_dist", "-", "min_distances", ")", "*", "prototypes_of_wrong_class", ",", "dim", "=", "1", ")", "\n", "separation_cost", "=", "torch", ".", "mean", "(", "max_dist", "-", "inverted_distances_to_nontarget_prototypes", ")", "\n", "\n", "# calculate avg cluster cost", "\n", "avg_separation_cost", "=", "torch", ".", "sum", "(", "min_distances", "*", "prototypes_of_wrong_class", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "prototypes_of_wrong_class", ",", "dim", "=", "1", ")", "\n", "avg_separation_cost", "=", "torch", ".", "mean", "(", "avg_separation_cost", ")", "\n", "\n", "if", "use_l1_mask", ":", "\n", "                    ", "l1_mask", "=", "1", "-", "torch", ".", "t", "(", "model", ".", "module", ".", "prototype_class_identity", ")", ".", "cuda", "(", ")", "\n", "l1", "=", "(", "model", ".", "module", ".", "last_layer", ".", "weight", "*", "l1_mask", ")", ".", "norm", "(", "p", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "l1", "=", "model", ".", "module", ".", "last_layer", ".", "weight", ".", "norm", "(", "p", "=", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "min_distance", ",", "_", "=", "torch", ".", "min", "(", "min_distances", ",", "dim", "=", "1", ")", "\n", "cluster_cost", "=", "torch", ".", "mean", "(", "min_distance", ")", "\n", "l1", "=", "model", ".", "module", ".", "last_layer", ".", "weight", ".", "norm", "(", "p", "=", "1", ")", "\n", "\n", "# evaluation statistics", "\n", "", "_", ",", "predicted", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "\n", "n_examples", "+=", "target", ".", "size", "(", "0", ")", "\n", "n_correct", "+=", "(", "predicted", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "n_batches", "+=", "1", "\n", "total_cross_entropy", "+=", "cross_entropy", ".", "item", "(", ")", "\n", "total_cluster_cost", "+=", "cluster_cost", ".", "item", "(", ")", "\n", "total_separation_cost", "+=", "separation_cost", ".", "item", "(", ")", "\n", "total_avg_separation_cost", "+=", "avg_separation_cost", ".", "item", "(", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "if", "is_train", ":", "\n", "            ", "if", "class_specific", ":", "\n", "                ", "if", "coefs", "is", "not", "None", ":", "\n", "                    ", "loss", "=", "(", "coefs", "[", "'crs_ent'", "]", "*", "cross_entropy", "\n", "+", "coefs", "[", "'clst'", "]", "*", "cluster_cost", "\n", "+", "coefs", "[", "'sep'", "]", "*", "separation_cost", "\n", "+", "coefs", "[", "'l1'", "]", "*", "l1", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "cross_entropy", "+", "0.8", "*", "cluster_cost", "-", "0.08", "*", "separation_cost", "+", "1e-4", "*", "l1", "\n", "", "", "else", ":", "\n", "                ", "if", "coefs", "is", "not", "None", ":", "\n", "                    ", "loss", "=", "(", "coefs", "[", "'crs_ent'", "]", "*", "cross_entropy", "\n", "+", "coefs", "[", "'clst'", "]", "*", "cluster_cost", "\n", "+", "coefs", "[", "'l1'", "]", "*", "l1", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "cross_entropy", "+", "0.8", "*", "cluster_cost", "+", "1e-4", "*", "l1", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "del", "input", "\n", "del", "target", "\n", "del", "output", "\n", "del", "predicted", "\n", "del", "min_distances", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "log", "(", "'\\ttime: \\t{0}'", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "log", "(", "'\\tcross ent: \\t{0}'", ".", "format", "(", "total_cross_entropy", "/", "n_batches", ")", ")", "\n", "log", "(", "'\\tcluster: \\t{0}'", ".", "format", "(", "total_cluster_cost", "/", "n_batches", ")", ")", "\n", "if", "class_specific", ":", "\n", "        ", "log", "(", "'\\tseparation:\\t{0}'", ".", "format", "(", "total_separation_cost", "/", "n_batches", ")", ")", "\n", "log", "(", "'\\tavg separation:\\t{0}'", ".", "format", "(", "total_avg_separation_cost", "/", "n_batches", ")", ")", "\n", "", "log", "(", "'\\taccu: \\t\\t{0}%'", ".", "format", "(", "n_correct", "/", "n_examples", "*", "100", ")", ")", "\n", "log", "(", "'\\tl1: \\t\\t{0}'", ".", "format", "(", "model", ".", "module", ".", "last_layer", ".", "weight", ".", "norm", "(", "p", "=", "1", ")", ".", "item", "(", ")", ")", ")", "\n", "p", "=", "model", ".", "module", ".", "prototype_vectors", ".", "view", "(", "model", ".", "module", ".", "num_prototypes", ",", "-", "1", ")", ".", "cpu", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "p_avg_pair_dist", "=", "torch", ".", "mean", "(", "list_of_distances", "(", "p", ",", "p", ")", ")", "\n", "", "log", "(", "'\\tp dist pair: \\t{0}'", ".", "format", "(", "p_avg_pair_dist", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "n_correct", "/", "n_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test.train": [[127, 134], ["log", "model.train", "train_and_test._train_or_test"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test.train", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test._train_or_test"], ["", "def", "train", "(", "model", ",", "dataloader", ",", "optimizer", ",", "class_specific", "=", "False", ",", "coefs", "=", "None", ",", "log", "=", "print", ")", ":", "\n", "    ", "assert", "(", "optimizer", "is", "not", "None", ")", "\n", "\n", "log", "(", "'\\ttrain'", ")", "\n", "model", ".", "train", "(", ")", "\n", "return", "_train_or_test", "(", "model", "=", "model", ",", "dataloader", "=", "dataloader", ",", "optimizer", "=", "optimizer", ",", "\n", "class_specific", "=", "class_specific", ",", "coefs", "=", "coefs", ",", "log", "=", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test.test": [[136, 141], ["log", "model.eval", "train_and_test._train_or_test"], "function", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test._train_or_test"], ["", "def", "test", "(", "model", ",", "dataloader", ",", "class_specific", "=", "False", ",", "log", "=", "print", ")", ":", "\n", "    ", "log", "(", "'\\ttest'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "_train_or_test", "(", "model", "=", "model", ",", "dataloader", "=", "dataloader", ",", "optimizer", "=", "None", ",", "\n", "class_specific", "=", "class_specific", ",", "log", "=", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test.last_only": [[143, 153], ["model.module.features.parameters", "model.module.add_on_layers.parameters", "model.module.last_layer.parameters", "log"], "function", ["None"], ["", "def", "last_only", "(", "model", ",", "log", "=", "print", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "module", ".", "features", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "model", ".", "module", ".", "add_on_layers", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "module", ".", "prototype_vectors", ".", "requires_grad", "=", "False", "\n", "for", "p", "in", "model", ".", "module", ".", "last_layer", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "", "log", "(", "'\\tlast layer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test.warm_only": [[155, 165], ["model.module.features.parameters", "model.module.add_on_layers.parameters", "model.module.last_layer.parameters", "log"], "function", ["None"], ["", "def", "warm_only", "(", "model", ",", "log", "=", "print", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "module", ".", "features", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "model", ".", "module", ".", "add_on_layers", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "", "model", ".", "module", ".", "prototype_vectors", ".", "requires_grad", "=", "True", "\n", "for", "p", "in", "model", ".", "module", ".", "last_layer", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "", "log", "(", "'\\twarm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.train_and_test.joint": [[167, 177], ["model.module.features.parameters", "model.module.add_on_layers.parameters", "model.module.last_layer.parameters", "log"], "function", ["None"], ["", "def", "joint", "(", "model", ",", "log", "=", "print", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "module", ".", "features", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "", "for", "p", "in", "model", ".", "module", ".", "add_on_layers", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "", "model", ".", "module", ".", "prototype_vectors", ".", "requires_grad", "=", "True", "\n", "for", "p", "in", "model", ".", "module", ".", "last_layer", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "", "log", "(", "'\\tjoint'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features.__init__": [[26, 39], ["torch.Module.__init__", "vgg_features.VGG_features._make_layers", "vgg_features.VGG_features._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features._make_layers", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "batch_norm", "=", "False", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG_features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "kernel_sizes", "=", "[", "]", "\n", "self", ".", "strides", "=", "[", "]", "\n", "self", ".", "paddings", "=", "[", "]", "\n", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", ",", "batch_norm", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features.forward": [[40, 43], ["vgg_features.VGG_features.features"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features._initialize_weights": [[44, 56], ["vgg_features.VGG_features.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features._make_layers": [[57, 87], ["torch.Sequential", "torch.Sequential", "vgg_features.VGG_features.kernel_sizes.append", "vgg_features.VGG_features.strides.append", "vgg_features.VGG_features.paddings.append", "torch.Conv2d", "torch.Conv2d", "vgg_features.VGG_features.kernel_sizes.append", "vgg_features.VGG_features.strides.append", "vgg_features.VGG_features.paddings.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "", "def", "_make_layers", "(", "self", ",", "cfg", ",", "batch_norm", ")", ":", "\n", "\n", "        ", "self", ".", "n_layers", "=", "0", "\n", "\n", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "            ", "if", "v", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "\n", "self", ".", "kernel_sizes", ".", "append", "(", "2", ")", "\n", "self", ".", "strides", ".", "append", "(", "2", ")", "\n", "self", ".", "paddings", ".", "append", "(", "0", ")", "\n", "\n", "", "else", ":", "\n", "                ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "", "self", ".", "n_layers", "+=", "1", "\n", "\n", "self", ".", "kernel_sizes", ".", "append", "(", "3", ")", "\n", "self", ".", "strides", ".", "append", "(", "1", ")", "\n", "self", ".", "paddings", ".", "append", "(", "1", ")", "\n", "\n", "in_channels", "=", "v", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features.conv_info": [[88, 90], ["None"], "methods", ["None"], ["", "def", "conv_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kernel_sizes", ",", "self", ".", "strides", ",", "self", ".", "paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features.num_layers": [[91, 96], ["None"], "methods", ["None"], ["", "def", "num_layers", "(", "self", ")", ":", "\n", "        ", "'''\n        the number of conv layers in the network\n        '''", "\n", "return", "self", ".", "n_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.VGG_features.__repr__": [[97, 101], ["template.format", "vgg_features.VGG_features.num_layers"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.num_layers"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "template", "=", "'VGG{}, batch_norm={}'", "\n", "return", "template", ".", "format", "(", "self", ".", "num_layers", "(", ")", "+", "3", ",", "\n", "self", ".", "batch_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg11_features": [[104, 123], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "", "def", "vgg11_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg11'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg11_bn_features": [[125, 144], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "def", "vgg11_bn_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg11_bn'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg13_features": [[146, 165], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "def", "vgg13_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg13'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg13_bn_features": [[167, 186], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "def", "vgg13_bn_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg13_bn'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg16_features": [[188, 207], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "def", "vgg16_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg16'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg16_bn_features": [[209, 228], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "def", "vgg16_bn_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg16_bn'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg19_features": [[230, 249], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "def", "vgg19_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg19'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.vgg_features.vgg19_bn_features": [[251, 270], ["vgg_features.VGG_features", "torch.load_url", "set", "VGG_features.load_state_dict", "key.startswith", "set.add"], "function", ["None"], ["", "def", "vgg19_bn_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG_features", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "my_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg19_bn'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "keys_to_remove", "=", "set", "(", ")", "\n", "for", "key", "in", "my_dict", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "keys_to_remove", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_remove", ":", "\n", "            ", "del", "my_dict", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "my_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._DenseLayer.__init__": [[22, 33], ["torch.Sequential.__init__", "densenet_features._DenseLayer.add_module", "densenet_features._DenseLayer.add_module", "densenet_features._DenseLayer.add_module", "densenet_features._DenseLayer.add_module", "densenet_features._DenseLayer.add_module", "densenet_features._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__"], ["def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._DenseLayer.forward": [[34, 41], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# channelwise concatenation", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._DenseLayer.layer_conv_info": [[42, 48], ["None"], "methods", ["None"], ["", "def", "layer_conv_info", "(", "self", ")", ":", "\n", "        ", "layer_kernel_sizes", "=", "[", "1", ",", "3", "]", "\n", "layer_strides", "=", "[", "1", ",", "1", "]", "\n", "layer_paddings", "=", "[", "0", ",", "1", "]", "\n", "\n", "return", "layer_kernel_sizes", ",", "layer_strides", ",", "layer_paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._DenseBlock.__init__": [[51, 66], ["torch.Sequential.__init__", "range", "densenet_features._DenseLayer", "densenet_features._DenseLayer.layer_conv_info", "densenet_features._DenseBlock.block_kernel_sizes.extend", "densenet_features._DenseBlock.block_strides.extend", "densenet_features._DenseBlock.block_paddings.extend", "densenet_features._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._DenseLayer.layer_conv_info"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block_kernel_sizes", "=", "[", "]", "\n", "self", ".", "block_strides", "=", "[", "]", "\n", "self", ".", "block_paddings", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", "\n", "layer_kernel_sizes", ",", "layer_strides", ",", "layer_paddings", "=", "layer", ".", "layer_conv_info", "(", ")", "\n", "self", ".", "block_kernel_sizes", ".", "extend", "(", "layer_kernel_sizes", ")", "\n", "self", ".", "block_strides", ".", "extend", "(", "layer_strides", ")", "\n", "self", ".", "block_paddings", ".", "extend", "(", "layer_paddings", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n", "", "self", ".", "num_layers", "=", "_DenseLayer", ".", "num_layers", "*", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._DenseBlock.block_conv_info": [[67, 69], ["None"], "methods", ["None"], ["", "def", "block_conv_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "block_kernel_sizes", ",", "self", ".", "block_strides", ",", "self", ".", "block_paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._Transition.__init__": [[75, 82], ["torch.Sequential.__init__", "densenet_features._Transition.add_module", "densenet_features._Transition.add_module", "densenet_features._Transition.add_module", "densenet_features._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__"], ["def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "# AvgPool2d has no padding", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._Transition.block_conv_info": [[83, 85], ["None"], "methods", ["None"], ["", "def", "block_conv_info", "(", "self", ")", ":", "\n", "        ", "return", "[", "1", ",", "2", "]", ",", "[", "1", ",", "2", "]", ",", "[", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__": [[101, 163], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "densenet_features.DenseNet_features.kernel_sizes.extend", "densenet_features.DenseNet_features.strides.extend", "densenet_features.DenseNet_features.paddings.extend", "enumerate", "densenet_features.DenseNet_features.features.add_module", "densenet_features.DenseNet_features.features.add_module", "densenet_features.DenseNet_features.modules", "collections.OrderedDict", "densenet_features._DenseBlock", "densenet_features._DenseBlock.block_conv_info", "densenet_features.DenseNet_features.kernel_sizes.extend", "densenet_features.DenseNet_features.strides.extend", "densenet_features.DenseNet_features.paddings.extend", "densenet_features.DenseNet_features.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "densenet_features._Transition", "densenet_features._Transition.block_conv_info", "densenet_features.DenseNet_features.kernel_sizes.extend", "densenet_features.DenseNet_features.strides.extend", "densenet_features.DenseNet_features.paddings.extend", "densenet_features.DenseNet_features.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__init__", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._Transition.block_conv_info", "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features._Transition.block_conv_info"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet_features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_sizes", "=", "[", "]", "\n", "self", ".", "strides", "=", "[", "]", "\n", "self", ".", "paddings", "=", "[", "]", "\n", "\n", "self", ".", "n_layers", "=", "0", "\n", "\n", "# First convolution", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "self", ".", "kernel_sizes", ".", "extend", "(", "[", "7", ",", "3", "]", ")", "\n", "self", ".", "strides", ".", "extend", "(", "[", "2", ",", "2", "]", ")", "\n", "self", ".", "paddings", ".", "extend", "(", "[", "3", ",", "1", "]", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "n_layers", "+=", "block", ".", "num_layers", "\n", "\n", "block_kernel_sizes", ",", "block_strides", ",", "block_paddings", "=", "block", ".", "block_conv_info", "(", ")", "\n", "self", ".", "kernel_sizes", ".", "extend", "(", "block_kernel_sizes", ")", "\n", "self", ".", "strides", ".", "extend", "(", "block_strides", ")", "\n", "self", ".", "paddings", ".", "extend", "(", "block_paddings", ")", "\n", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "\n", "self", ".", "n_layers", "+=", "trans", ".", "num_layers", "\n", "\n", "block_kernel_sizes", ",", "block_strides", ",", "block_paddings", "=", "trans", ".", "block_conv_info", "(", ")", "\n", "self", ".", "kernel_sizes", ".", "extend", "(", "block_kernel_sizes", ")", "\n", "self", ".", "strides", ".", "extend", "(", "block_strides", ")", "\n", "self", ".", "paddings", ".", "extend", "(", "block_paddings", ")", "\n", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'final_relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.forward": [[164, 166], ["densenet_features.DenseNet_features.features"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.conv_info": [[167, 169], ["None"], "methods", ["None"], ["", "def", "conv_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kernel_sizes", ",", "self", ".", "strides", ",", "self", ".", "paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.num_layers": [[170, 172], ["None"], "methods", ["None"], ["", "def", "num_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.__repr__": [[173, 176], ["template.format", "densenet_features.DenseNet_features.num_layers"], "methods", ["home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.DenseNet_features.num_layers"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "template", "=", "'densenet{}_features'", "\n", "return", "template", ".", "format", "(", "(", "self", ".", "num_layers", "(", ")", "+", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.densenet121_features": [[178, 213], ["densenet_features.DenseNet_features", "re.compile", "torch.load_url", "list", "DenseNet_features.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "", "def", "densenet121_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet_features", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'densenet121'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "'''\n            example\n            key 'features.denseblock4.denselayer24.norm.2.running_var'\n            res.group(1) 'features.denseblock4.denselayer24.norm'\n            res.group(2) '2.running_var'\n            new_key 'features.denseblock4.denselayer24.norm2.running_var'\n            '''", "\n", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "del", "state_dict", "[", "'classifier.weight'", "]", "\n", "del", "state_dict", "[", "'classifier.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.densenet169_features": [[215, 250], ["densenet_features.DenseNet_features", "re.compile", "torch.load_url", "list", "DenseNet_features.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "def", "densenet169_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet_features", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'densenet169'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "'''\n            example\n            key 'features.denseblock4.denselayer24.norm.2.running_var'\n            res.group(1) 'features.denseblock4.denselayer24.norm'\n            res.group(2) '2.running_var'\n            new_key 'features.denseblock4.denselayer24.norm2.running_var'\n            '''", "\n", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "del", "state_dict", "[", "'classifier.weight'", "]", "\n", "del", "state_dict", "[", "'classifier.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.densenet201_features": [[252, 288], ["densenet_features.DenseNet_features", "re.compile", "torch.load_url", "list", "DenseNet_features.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "def", "densenet201_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet_features", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'densenet201'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "'''\n            example\n            key 'features.denseblock4.denselayer24.norm.2.running_var'\n            res.group(1) 'features.denseblock4.denselayer24.norm'\n            res.group(2) '2.running_var'\n            new_key 'features.denseblock4.denselayer24.norm2.running_var'\n            '''", "\n", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "del", "state_dict", "[", "'classifier.weight'", "]", "\n", "del", "state_dict", "[", "'classifier.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.None.densenet_features.densenet161_features": [[290, 329], ["densenet_features.DenseNet_features", "re.compile", "torch.load_url", "list", "DenseNet_features.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "def", "densenet161_features", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet_features", "(", "num_init_features", "=", "96", ",", "growth_rate", "=", "48", ",", "block_config", "=", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "\n", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'densenet161'", "]", ",", "model_dir", "=", "model_dir", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "'''\n            example\n            key 'features.denseblock4.denselayer24.norm.2.running_var'\n            res.group(1) 'features.denseblock4.denselayer24.norm'\n            res.group(2) '2.running_var'\n            new_key 'features.denseblock4.denselayer24.norm2.running_var'\n            '''", "\n", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "\n", "\n", "", "", "del", "state_dict", "[", "'classifier.weight'", "]", "\n", "del", "state_dict", "[", "'classifier.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.preprocessing.crop_images.makedir": [[13, 16], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "makedir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.preprocessing.create_modified_datasets.modify_shape": [[20, 37], ["range", "range", "numpy.roll", "numpy.roll", "numpy.sin", "int", "int", "shift", "shift"], "function", ["None"], ["def", "modify_shape", "(", "img", ",", "A", ",", "w", ")", ":", "\n", "# thickness = int(img.shape[0]/nr_bars)", "\n", "# for i in range(nr_bars+1):", "\n", "#     selected_indices = range(thickness*i,min(thickness*i + random.randint(int(thickness/2),thickness), img.shape[0]))", "\n", "#     selected = img[selected_indices,:,:]", "\n", "#     if (i % 2) == 0:", "\n", "#         translated_selected = np.roll(selected,random.randint(5,10),axis=1)", "\n", "#     else:", "\n", "#         translated_selected = np.roll(selected,random.randint(-10,-5),axis=1)", "\n", "#     img[selected_indices,:,:] = translated_selected", "\n", "    ", "shift", "=", "lambda", "x", ":", "A", "*", "np", ".", "sin", "(", "np", ".", "pi", "*", "x", "*", "w", ")", "\n", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img", "[", "i", ",", ":", ",", ":", "]", "=", "np", ".", "roll", "(", "img", "[", "i", ",", ":", ",", ":", "]", ",", "int", "(", "shift", "(", "i", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "img", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "roll", "(", "img", "[", ":", ",", "i", ",", ":", "]", ",", "int", "(", "shift", "(", "i", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.M-Nauta_Explaining_Prototypes.preprocessing.create_modified_datasets.makedir": [[59, 62], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "makedir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]]}