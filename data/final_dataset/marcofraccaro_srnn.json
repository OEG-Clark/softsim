{"home.repos.pwc.inspect_result.marcofraccaro_srnn.None.MainSRNN_midi.Settings_SRNN.__init__": [[147, 207], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'muse'", ",", "nonlinearity_encoder", "=", "'clipped_very_leaky_rectify'", ",", "\n", "nonlinearity_decoder", "=", "'clipped_very_leaky_rectify'", ",", "range_nonlin", "=", "2.0", ",", "num_hidden_mlp", "=", "500", ",", "num_layers_mlp", "=", "1", ",", "\n", "latent_size_d", "=", "300", ",", "latent_size_z", "=", "100", ",", "latent_size_a", "=", "300", ",", "sequence_length", "=", "100", ",", "output_dim", "=", "88", ",", "smoothing", "=", "1", ",", "\n", "use_mu_residual", "=", "1", ",", "p_d_drop", "=", "0.0", ",", "p_z_drop", "=", "0.0", ",", "p_emb_u_drop", "=", "0.0", ",", "p_emb_x_drop", "=", "0.0", ",", "optimizer", "=", "'adam'", ",", "\n", "batch_size", "=", "16", ",", "log10_lr", "=", "-", "2.5", ",", "momentum", "=", "0.9", ",", "decay_type", "=", "'exponential'", ",", "decay", "=", "1.3", ",", "\n", "scale_decay", "=", "1.0", ",", "no_decay_epochs", "=", "25", ",", "init_mlp", "=", "'normal'", ",", "init_rnn", "=", "'orthogonal'", ",", "init_range", "=", "0.05", ",", "\n", "tempKL_type", "=", "'linear'", ",", "tempKL_start", "=", "0.2", ",", "tempKL_epochs", "=", "20", ",", "tempKL_decay", "=", "1.02", ",", "max_grad_norm", "=", "1.0", ",", "\n", "clip_gradients", "=", "10.0", ",", "max_num_epochs", "=", "50", ",", "eval_epoch", "=", "2", ",", "random_seed", "=", "123", ",", "batch_size_test", "=", "32", ",", "unroll_scan", "=", "False", ",", "\n", "tolerance_softmax", "=", "1e-7", ",", "cons", "=", "-", "6.0", ")", ":", "\n", "# MODEL SETTINGS", "\n", "        ", "self", ".", "dataset", "=", "dataset", "# muse, piano, jsb or nottingham", "\n", "\n", "self", ".", "nonlinearity_encoder", "=", "nonlinearity_encoder", "# Nonlinearities to be used in the encoding networks", "\n", "self", ".", "nonlinearity_decoder", "=", "nonlinearity_decoder", "# Nonlinearities to be used in the decoding networks", "\n", "self", ".", "range_nonlin", "=", "range_nonlin", "# Range when clipping the nonlinearity", "\n", "self", ".", "latent_size_d", "=", "latent_size_d", "# Size of the deterministic latent vectors", "\n", "self", ".", "latent_size_z", "=", "latent_size_z", "# Size of the stochastic latent vectors", "\n", "self", ".", "num_hidden_mlp", "=", "num_hidden_mlp", "# Number of neurons in each layer of the neural networks", "\n", "self", ".", "num_layers_mlp", "=", "num_layers_mlp", "# Number of layers of the neural networks", "\n", "self", ".", "latent_size_a", "=", "latent_size_a", "# Size of the deterministic latent vectors in the q model", "\n", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "use_mu_residual", "=", "use_mu_residual", "\n", "\n", "self", ".", "sequence_length", "=", "sequence_length", "# how many steps to unroll", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "p_d_drop", "=", "p_d_drop", "# Dropout probability fot the deterministic states in the non-recurrent connections", "\n", "self", ".", "p_z_drop", "=", "p_z_drop", "# Dropout probability fot the stochastic states in the non-recurrent connections", "\n", "self", ".", "p_emb_u_drop", "=", "p_emb_u_drop", "# Dropout probability for the embeddings of u", "\n", "self", ".", "p_emb_x_drop", "=", "p_emb_x_drop", "# Dropout probability for the embeddings of x", "\n", "\n", "#  TRAINING SETTINGS", "\n", "self", ".", "optimizer", "=", "optimizer", "# Optimizer to be used", "\n", "self", ".", "batch_size", "=", "batch_size", "# batch size", "\n", "self", ".", "log10_lr", "=", "log10_lr", "# learning rate", "\n", "self", ".", "momentum", "=", "momentum", "# for nesterov_momentum", "\n", "\n", "self", ".", "decay_type", "=", "decay_type", "# decay type", "\n", "self", ".", "decay", "=", "decay", "# decay factor", "\n", "self", ".", "scale_decay", "=", "scale_decay", "# scale for the decay factor, only used with PowerDecaySchedule", "\n", "self", ".", "no_decay_epochs", "=", "no_decay_epochs", "# run this many epochs before first decay", "\n", "\n", "self", ".", "init_mlp", "=", "init_mlp", "# Weight initializer (uniform or normal)", "\n", "self", ".", "init_rnn", "=", "init_rnn", "# Weight initializer for rnn (uniform or orthogonal)", "\n", "self", ".", "init_range", "=", "init_range", "# Parameters are initialized as Unif(-init_range,init_range)", "\n", "\n", "self", ".", "tempKL_type", "=", "tempKL_type", "# schedule for the KL term", "\n", "self", ".", "tempKL_start", "=", "tempKL_start", "# starting point for the temperature (set to 1 no to use temperature)", "\n", "self", ".", "tempKL_epochs", "=", "tempKL_epochs", "# Number  of epochs to arrive to temperature 1", "\n", "self", ".", "tempKL_decay", "=", "tempKL_decay", "# decay factor for the chosen schedule", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "# scale steps if norm is above this value", "\n", "self", ".", "clip_gradients", "=", "clip_gradients", "# Gradient clipping", "\n", "self", ".", "max_num_epochs", "=", "max_num_epochs", "# Number of epochs to run", "\n", "self", ".", "batch_size_test", "=", "batch_size_test", "# batch size for validation/test set", "\n", "self", ".", "eval_epoch", "=", "eval_epoch", "# epochs between evaluation of test performance", "\n", "self", ".", "unroll_scan", "=", "unroll_scan", "\n", "self", ".", "tolerance_softmax", "=", "tolerance_softmax", "# numerial stability for softmax", "\n", "self", ".", "cons", "=", "cons", "# numerial stability for lognormal, kl", "\n", "self", ".", "random_seed", "=", "random_seed", "# random seed for numpy", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.None.MainSRNN_midi.run": [[18, 144], ["os.path.join", "os.path.join", "np.random.seed", "print", "ml.data.timit_data.TimitData", "Settings_SRNN.load_settings.settings_info", "Settings_SRNN.load_settings.print_csv", "ml.models.SRNN_midi.SRNN_midi", "ml.models.SRNN_midi.SRNN_midi.model_info", "ml.models.SRNN_midi.SRNN_midi.initialize_computation_graph", "TrainSRNN_midi.load_train.train_model", "print", "os.path.join", "os.path.exists", "os.makedirs", "datetime.datetime.fromtimestamp().strftime", "MainSRNN_midi.Settings_SRNN", "ml.training.train_srnn_midi.TrainSRNN_midi", "os.path.join", "Settings_SRNN.load_settings.decay_type.lower", "ml.training.decay.PowerDecaySchedule", "float", "Settings_SRNN.load_settings.tempKL_type.lower", "ml.training.decay.PowerDecaySchedule", "open", "print", "cPickle.load", "Settings_SRNN.load_settings", "ml.training.train_srnn_midi.TrainSRNN_midi.load_train", "Settings_SRNN.load_settings.decay_type.lower", "ml.training.decay.ExponentialDecaySchedule", "ValueError", "Settings_SRNN.load_settings.tempKL_type.lower", "ml.training.decay.ExponentialDecaySchedule", "datetime.datetime.fromtimestamp", "Settings_SRNN.load_settings.tempKL_type.lower", "ml.training.decay.LinearDecaySchedule", "ValueError", "time.time"], "function", ["home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.train_model", "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.load_train"], ["def", "run", "(", "dataset", "=", "'muse'", ",", "nonlinearity_encoder", "=", "'clipped_very_leaky_rectify'", ",", "\n", "nonlinearity_decoder", "=", "'clipped_very_leaky_rectify'", ",", "range_nonlin", "=", "3.0", ",", "num_hidden_mlp", "=", "500", ",", "num_layers_mlp", "=", "1", ",", "\n", "latent_size_d", "=", "300", ",", "latent_size_z", "=", "100", ",", "latent_size_a", "=", "300", ",", "sequence_length", "=", "100", ",", "output_dim", "=", "88", ",", "smoothing", "=", "1", ",", "\n", "use_mu_residual", "=", "1", ",", "p_d_drop", "=", "0.0", ",", "p_z_drop", "=", "0.0", ",", "p_emb_u_drop", "=", "0.0", ",", "p_emb_x_drop", "=", "0.0", ",", "optimizer", "=", "'adam'", ",", "\n", "batch_size", "=", "16", ",", "log10_lr", "=", "-", "3.0", ",", "momentum", "=", "0.9", ",", "decay_type", "=", "'exponential'", ",", "decay", "=", "1.2", ",", "\n", "scale_decay", "=", "1.0", ",", "no_decay_epochs", "=", "20", ",", "init_mlp", "=", "'normal'", ",", "init_rnn", "=", "'orthogonal'", ",", "init_range", "=", "0.05", ",", "\n", "tempKL_type", "=", "'linear'", ",", "tempKL_start", "=", "0.2", ",", "tempKL_epochs", "=", "20", ",", "tempKL_decay", "=", "1.02", ",", "max_grad_norm", "=", "1.0", ",", "\n", "clip_gradients", "=", "10.0", ",", "max_num_epochs", "=", "50", ",", "eval_epoch", "=", "2", ",", "random_seed", "=", "123", ",", "batch_size_test", "=", "32", ",", "unroll_scan", "=", "False", ",", "\n", "tolerance_softmax", "=", "1e-7", ",", "cons", "=", "-", "6.0", ",", "output_folder", "=", "None", ",", "run_name", "=", "None", ",", "writeLog", "=", "True", ",", "load_pickled_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function to define and train the SRNN on the MIDI Data\n    \"\"\"", "\n", "\n", "# Output folder for pickled files", "\n", "if", "output_folder", "is", "None", ":", "\n", "        ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "srnn_folder", ",", "'output'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "\n", "# Name of this simulation (for pickle)", "\n", "", "if", "run_name", "is", "None", ":", "\n", "# Str containing the current time in the format YYYYMMDD_HHMMSS e.g. 20160112_154201", "\n", "        ", "str_time", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "time", ".", "time", "(", ")", ")", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ")", "\n", "run_name", "=", "\"SRNNmidi_\"", "+", "str_time", "\n", "\n", "# Path for pickle file, set to None if you don't want to pickle", "\n", "", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "run_name", "+", "\".pickle\"", ")", "\n", "plot_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "run_name", "+", "\"-plot\"", ")", "\n", "\n", "if", "load_pickled_file", "is", "None", ":", "\n", "        ", "settings", "=", "Settings_SRNN", "(", "dataset", "=", "dataset", ",", "\n", "nonlinearity_encoder", "=", "nonlinearity_encoder", ",", "\n", "nonlinearity_decoder", "=", "nonlinearity_decoder", ",", "range_nonlin", "=", "range_nonlin", ",", "\n", "num_hidden_mlp", "=", "num_hidden_mlp", ",", "num_layers_mlp", "=", "num_layers_mlp", ",", "\n", "latent_size_d", "=", "latent_size_d", ",", "\n", "latent_size_z", "=", "latent_size_z", ",", "\n", "latent_size_a", "=", "latent_size_a", ",", "\n", "sequence_length", "=", "sequence_length", ",", "output_dim", "=", "output_dim", ",", "\n", "smoothing", "=", "smoothing", ",", "use_mu_residual", "=", "use_mu_residual", ",", "\n", "p_d_drop", "=", "p_d_drop", ",", "p_z_drop", "=", "p_z_drop", ",", "\n", "p_emb_u_drop", "=", "p_emb_u_drop", ",", "p_emb_x_drop", "=", "p_emb_x_drop", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "batch_size", "=", "batch_size", ",", "log10_lr", "=", "log10_lr", ",", "momentum", "=", "momentum", ",", "decay_type", "=", "decay_type", ",", "\n", "decay", "=", "decay", ",", "scale_decay", "=", "scale_decay", ",", "no_decay_epochs", "=", "no_decay_epochs", ",", "\n", "init_rnn", "=", "init_rnn", ",", "init_range", "=", "init_range", ",", "\n", "init_mlp", "=", "init_mlp", ",", "\n", "tempKL_type", "=", "tempKL_type", ",", "\n", "tempKL_start", "=", "tempKL_start", ",", "tempKL_epochs", "=", "tempKL_epochs", ",", "tempKL_decay", "=", "tempKL_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "clip_gradients", "=", "clip_gradients", ",", "\n", "max_num_epochs", "=", "max_num_epochs", ",", "eval_epoch", "=", "eval_epoch", ",", "random_seed", "=", "random_seed", ",", "\n", "batch_size_test", "=", "batch_size_test", ",", "unroll_scan", "=", "unroll_scan", ",", "\n", "tolerance_softmax", "=", "tolerance_softmax", ",", "cons", "=", "cons", ")", "\n", "\n", "# Initialize training object", "\n", "train", "=", "TrainSRNN_midi", "(", ")", "\n", "\n", "", "else", ":", "\n", "# Load pickled settings. The model weights are not loaded now as we first need the pickled settings to construct", "\n", "# it. Once the model is defined, we can assign the pickled weights (this is done in the training file).", "\n", "        ", "with", "open", "(", "load_pickled_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "print", "(", "\"Loading pickled settings and train from %s\"", "%", "load_pickled_file", ")", "\n", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "settings", "=", "Settings_SRNN", ".", "load_settings", "(", "f", ")", "\n", "train", "=", "TrainSRNN_midi", ".", "load_train", "(", "f", ")", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "settings", ".", "random_seed", ")", "\n", "# Get data object", "\n", "file_midi", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "'%s_raw_batchsize%i_seqlen100.npz'", ")", "%", "(", "settings", ".", "dataset", ",", "settings", ".", "batch_size", ")", "\n", "print", "(", "\"Loading midi from %s\"", "%", "file_midi", ")", "\n", "midi_data", "=", "TimitData", "(", "file_midi", ",", "batch_size", "=", "settings", ".", "batch_size", ")", "\n", "\n", "# Print data and settings info", "\n", "settings", ".", "settings_info", "(", ")", "\n", "settings", ".", "print_csv", "(", ")", "\n", "\n", "# Initialize SRNN model", "\n", "srnn_midi", "=", "SRNN_midi", "(", "settings", ")", "\n", "srnn_midi", ".", "model_info", "(", ")", "\n", "\n", "# Compile training/evaluation functions", "\n", "f_train", ",", "f_valid", "=", "srnn_midi", ".", "initialize_computation_graph", "(", "midi_data", ",", "settings", ")", "\n", "\n", "# Choose learning rate decay schedule", "\n", "if", "settings", ".", "decay_type", ".", "lower", "(", ")", "==", "'power'", ":", "\n", "        ", "decay_learning_rate", "=", "PowerDecaySchedule", "(", "settings", ".", "decay", ",", "settings", ".", "scale_decay", ",", "settings", ".", "max_num_epochs", ",", "\n", "settings", ".", "no_decay_epochs", ")", "\n", "", "elif", "settings", ".", "decay_type", ".", "lower", "(", ")", "==", "'exponential'", ":", "\n", "        ", "decay_learning_rate", "=", "ExponentialDecaySchedule", "(", "settings", ".", "decay", ",", "settings", ".", "max_num_epochs", ",", "\n", "settings", ".", "no_decay_epochs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid decay_type \\''", "+", "settings", ".", "decay_type", "+", "'\\''", ")", "\n", "\n", "# Choose temperature schedule for the KL term", "\n", "# We change the KL divergence slightly after every batch, e.g. with temperature linearly increasing from 0.2 to 1", "\n", "", "n_batches_train", "=", "midi_data", ".", "n_train", "//", "settings", ".", "batch_size", "\n", "max_decay_iters_KL", "=", "np", ".", "inf", "\n", "max_num_iters_KL", "=", "settings", ".", "max_num_epochs", "*", "n_batches_train", "\n", "no_decay_iters_KL", "=", "max_num_iters_KL", "-", "settings", ".", "tempKL_epochs", "*", "n_batches_train", "\n", "y_range_KL", "=", "(", "float", "(", "settings", ".", "tempKL_start", ")", ",", "1.0", ")", "\n", "reverse_KL", "=", "True", "\n", "if", "settings", ".", "tempKL_type", ".", "lower", "(", ")", "==", "'power'", ":", "\n", "        ", "temperature_KL", "=", "PowerDecaySchedule", "(", "settings", ".", "tempKL_decay", ",", "scale_decay", "=", "1.0", ",", "max_num_epochs", "=", "max_num_iters_KL", ",", "\n", "no_decay_epochs", "=", "no_decay_iters_KL", ",", "max_decay_epochs", "=", "max_decay_iters_KL", ",", "\n", "reverse", "=", "reverse_KL", ",", "y_range", "=", "y_range_KL", ")", "\n", "", "elif", "settings", ".", "tempKL_type", ".", "lower", "(", ")", "==", "'exponential'", ":", "\n", "        ", "temperature_KL", "=", "ExponentialDecaySchedule", "(", "settings", ".", "tempKL_decay", ",", "max_num_epochs", "=", "max_num_iters_KL", ",", "\n", "no_decay_epochs", "=", "no_decay_iters_KL", ",", "\n", "max_decay_epochs", "=", "max_decay_iters_KL", ",", "reverse", "=", "reverse_KL", ",", "\n", "y_range", "=", "y_range_KL", ")", "\n", "", "elif", "settings", ".", "tempKL_type", ".", "lower", "(", ")", "==", "'linear'", ":", "\n", "# in this case settings.tempKL_decay is useless as we are also passing y_range_KL", "\n", "        ", "temperature_KL", "=", "LinearDecaySchedule", "(", "settings", ".", "tempKL_decay", ",", "max_num_epochs", "=", "max_num_iters_KL", ",", "\n", "no_decay_epochs", "=", "no_decay_iters_KL", ",", "max_decay_epochs", "=", "max_decay_iters_KL", ",", "\n", "reverse", "=", "reverse_KL", ",", "y_range", "=", "y_range_KL", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid tempKL_type \\''", "+", "settings", ".", "tempKL_type", "+", "'\\''", ")", "\n", "\n", "# Train the model", "\n", "", "elbo_valid", "=", "train", ".", "train_model", "(", "midi_data", ",", "srnn_midi", ",", "f_train", ",", "f_valid", ",", "\n", "decay_learning_rate", ",", "temperature_KL", ",", "settings", ",", "pickle_path", ",", "\n", "load_pickled_file", ",", "plot_path", ")", "\n", "\n", "neg_elbo_valid", "=", "-", "elbo_valid", "\n", "print", "(", "\"Negative ELBO valid: %s\"", "%", "neg_elbo_valid", ")", "\n", "\n", "return", "neg_elbo_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.None.MainSRNN_timit.Settings_SRNN.__init__": [[146, 207], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nonlinearity_encoder", "=", "'clipped_very_leaky_rectify'", ",", "\n", "nonlinearity_decoder", "=", "'clipped_very_leaky_rectify'", ",", "\n", "range_nonlin", "=", "3.0", ",", "num_hidden_mlp", "=", "512", ",", "num_layers_mlp", "=", "2", ",", "latent_size_d", "=", "1024", ",", "latent_size_z", "=", "256", ",", "\n", "latent_size_a", "=", "1024", ",", "sequence_length", "=", "40", ",", "output_dim", "=", "200", ",", "smoothing", "=", "1", ",", "use_mu_residual", "=", "1", ",", "\n", "p_d_drop", "=", "0.0", ",", "p_z_drop", "=", "0.0", ",", "p_emb_u_drop", "=", "0.0", ",", "p_emb_x_drop", "=", "0.0", ",", "optimizer", "=", "'adam'", ",", "batch_size", "=", "64", ",", "\n", "log10_lr", "=", "-", "3.0", ",", "momentum", "=", "0.9", ",", "decay_type", "=", "'exponential'", ",", "decay", "=", "1.1", ",", "scale_decay", "=", "1.0", ",", "no_decay_epochs", "=", "15", ",", "\n", "init_mlp", "=", "'normal'", ",", "init_rnn", "=", "'orthogonal'", ",", "init_range", "=", "0.001", ",", "tempKL_type", "=", "'linear'", ",", "tempKL_start", "=", "0.0", ",", "\n", "tempKL_epochs", "=", "20", ",", "tempKL_decay", "=", "1.02", ",", "max_grad_norm", "=", "3000.0", ",", "clip_gradients", "=", "1000.0", ",", "max_num_epochs", "=", "50", ",", "\n", "eval_epoch", "=", "1", ",", "random_seed", "=", "1234", ",", "batch_size_test", "=", "32", ",", "unroll_scan", "=", "False", ",", "tolerance_softmax", "=", "1e-10", ",", "\n", "cons", "=", "-", "6.0", ")", ":", "\n", "\n", "# MODEL SETTINGS", "\n", "        ", "self", ".", "nonlinearity_encoder", "=", "nonlinearity_encoder", "# Nonlinearities to be used in the encoding networks", "\n", "self", ".", "nonlinearity_decoder", "=", "nonlinearity_decoder", "# Nonlinearities to be used in the decoding networks", "\n", "self", ".", "range_nonlin", "=", "range_nonlin", "# Range when clipping the nonlinearity", "\n", "self", ".", "latent_size_d", "=", "latent_size_d", "# Size of the deterministic latent vectors", "\n", "self", ".", "latent_size_z", "=", "latent_size_z", "# Size of the stochastic latent vectors", "\n", "self", ".", "num_hidden_mlp", "=", "num_hidden_mlp", "# Number of neurons in each layer of the neural networks", "\n", "self", ".", "num_layers_mlp", "=", "num_layers_mlp", "# Number of layers of the neural networks", "\n", "self", ".", "latent_size_a", "=", "latent_size_a", "# Size of the deterministic latent vectors", "\n", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "use_mu_residual", "=", "use_mu_residual", "\n", "\n", "self", ".", "sequence_length", "=", "sequence_length", "# how many steps to unroll", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "p_d_drop", "=", "p_d_drop", "# Dropout probability fot the deterministic states in the non-recurrent connections", "\n", "self", ".", "p_z_drop", "=", "p_z_drop", "# Dropout probability fot the stochastic states in the non-recurrent connections", "\n", "self", ".", "p_emb_u_drop", "=", "p_emb_u_drop", "# Dropout probability for the embeddings of u", "\n", "self", ".", "p_emb_x_drop", "=", "p_emb_x_drop", "# Dropout probability for the embeddings of x", "\n", "\n", "#  TRAINING SETTINGS", "\n", "self", ".", "optimizer", "=", "optimizer", "# Optimizer to be used", "\n", "self", ".", "batch_size", "=", "batch_size", "# batch size", "\n", "self", ".", "log10_lr", "=", "log10_lr", "# learning rate", "\n", "self", ".", "momentum", "=", "momentum", "# for nesterov_momentum", "\n", "\n", "self", ".", "decay_type", "=", "decay_type", "# decay type", "\n", "self", ".", "decay", "=", "decay", "# decay factor", "\n", "self", ".", "scale_decay", "=", "scale_decay", "# scale for the decay factor, only used with PowerDecaySchedule", "\n", "self", ".", "no_decay_epochs", "=", "no_decay_epochs", "# run this many epochs before first decay", "\n", "\n", "self", ".", "init_mlp", "=", "init_mlp", "# Weight initializer (uniform or normal)", "\n", "self", ".", "init_rnn", "=", "init_rnn", "# Weight initializer for rnn (uniform or orthogonal)", "\n", "self", ".", "init_range", "=", "init_range", "# Parameters are initialized as Unif(-init_range,init_range)", "\n", "\n", "self", ".", "tempKL_type", "=", "tempKL_type", "# schedule for the KL term", "\n", "self", ".", "tempKL_start", "=", "tempKL_start", "# starting point for the temperature (set to 1 no to use temperature)", "\n", "self", ".", "tempKL_epochs", "=", "tempKL_epochs", "# Number  of epochs to arrive to temperature 1", "\n", "self", ".", "tempKL_decay", "=", "tempKL_decay", "# decay factor for the chosen schedule", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "# scale steps if norm is above this value", "\n", "self", ".", "clip_gradients", "=", "clip_gradients", "# Gradient clipping", "\n", "self", ".", "max_num_epochs", "=", "max_num_epochs", "# Number of epochs to run", "\n", "self", ".", "batch_size_test", "=", "batch_size_test", "# batch size for validation/test set", "\n", "self", ".", "eval_epoch", "=", "eval_epoch", "# epochs between evaluation of test performance", "\n", "self", ".", "unroll_scan", "=", "unroll_scan", "\n", "self", ".", "tolerance_softmax", "=", "tolerance_softmax", "# numerial stability for softmax", "\n", "self", ".", "cons", "=", "cons", "# numerial stability for lognormal, kl", "\n", "self", ".", "random_seed", "=", "random_seed", "# random seed for numpy", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.None.MainSRNN_timit.run": [[18, 143], ["os.path.join", "os.path.join", "np.random.seed", "ml.data.timit_data.TimitData", "Settings_SRNN.load_settings.settings_info", "Settings_SRNN.load_settings.print_csv", "ml.models.SRNN_timit.SRNN_timit", "ml.models.SRNN_timit.SRNN_timit.model_info", "ml.models.SRNN_timit.SRNN_timit.initialize_computation_graph", "TrainSRNN_timit.load_train.train_model", "print", "os.path.join", "os.path.exists", "os.makedirs", "datetime.datetime.fromtimestamp().strftime", "MainSRNN_timit.Settings_SRNN", "ml.training.train_srnn_timit.TrainSRNN_timit", "Settings_SRNN.load_settings.decay_type.lower", "ml.training.decay.PowerDecaySchedule", "float", "Settings_SRNN.load_settings.tempKL_type.lower", "ml.training.decay.PowerDecaySchedule", "open", "print", "cPickle.load", "Settings_SRNN.load_settings", "ml.training.train_srnn_timit.TrainSRNN_timit.load_train", "os.path.join", "Settings_SRNN.load_settings.decay_type.lower", "ml.training.decay.ExponentialDecaySchedule", "ValueError", "Settings_SRNN.load_settings.tempKL_type.lower", "ml.training.decay.ExponentialDecaySchedule", "datetime.datetime.fromtimestamp", "Settings_SRNN.load_settings.tempKL_type.lower", "ml.training.decay.LinearDecaySchedule", "ValueError", "time.time"], "function", ["home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.train_model", "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.load_train"], ["def", "run", "(", "nonlinearity_encoder", "=", "'clipped_very_leaky_rectify'", ",", "nonlinearity_decoder", "=", "'clipped_very_leaky_rectify'", ",", "\n", "range_nonlin", "=", "3.0", ",", "num_hidden_mlp", "=", "512", ",", "num_layers_mlp", "=", "2", ",", "latent_size_d", "=", "1024", ",", "latent_size_z", "=", "256", ",", "\n", "latent_size_a", "=", "1024", ",", "sequence_length", "=", "40", ",", "output_dim", "=", "200", ",", "smoothing", "=", "1", ",", "use_mu_residual", "=", "1", ",", "\n", "p_d_drop", "=", "0.0", ",", "p_z_drop", "=", "0.0", ",", "p_emb_u_drop", "=", "0.0", ",", "p_emb_x_drop", "=", "0.0", ",", "optimizer", "=", "'adam'", ",", "batch_size", "=", "64", ",", "\n", "log10_lr", "=", "-", "3.0", ",", "momentum", "=", "0.9", ",", "decay_type", "=", "'exponential'", ",", "decay", "=", "1.1", ",", "scale_decay", "=", "1.0", ",", "no_decay_epochs", "=", "15", ",", "\n", "init_mlp", "=", "'normal'", ",", "init_rnn", "=", "'orthogonal'", ",", "init_range", "=", "0.001", ",", "tempKL_type", "=", "'linear'", ",", "tempKL_start", "=", "0.0", ",", "\n", "tempKL_epochs", "=", "20", ",", "tempKL_decay", "=", "1.02", ",", "max_grad_norm", "=", "3000.0", ",", "clip_gradients", "=", "1000.0", ",", "max_num_epochs", "=", "50", ",", "\n", "eval_epoch", "=", "1", ",", "random_seed", "=", "1234", ",", "batch_size_test", "=", "32", ",", "unroll_scan", "=", "False", ",", "tolerance_softmax", "=", "1e-10", ",", "cons", "=", "-", "6.0", ",", "\n", "output_folder", "=", "None", ",", "run_name", "=", "None", ",", "writeLog", "=", "True", ",", "load_pickled_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function to define and train the SRNN on Timit Data\n    \"\"\"", "\n", "\n", "# Output folder for log file and pickle", "\n", "if", "output_folder", "is", "None", ":", "\n", "        ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "srnn_folder", ",", "'output'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "\n", "# Name of this simulation (for log file and pickle)", "\n", "", "if", "run_name", "is", "None", ":", "\n", "# Str containing the current time in the format YYYYMMDD_HHMMSS e.g. 20160112_154201", "\n", "        ", "str_time", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "time", ".", "time", "(", ")", ")", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ")", "\n", "run_name", "=", "\"SRNNtimit_\"", "+", "str_time", "\n", "\n", "# Path for pickle file, set to None if you don't want to pickle", "\n", "", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "run_name", "+", "\".pickle\"", ")", "\n", "plot_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "run_name", "+", "\"-plot\"", ")", "\n", "\n", "if", "load_pickled_file", "is", "None", ":", "\n", "        ", "settings", "=", "Settings_SRNN", "(", "nonlinearity_encoder", "=", "nonlinearity_encoder", ",", "\n", "nonlinearity_decoder", "=", "nonlinearity_decoder", ",", "\n", "range_nonlin", "=", "range_nonlin", ",", "\n", "num_hidden_mlp", "=", "num_hidden_mlp", ",", "num_layers_mlp", "=", "num_layers_mlp", ",", "\n", "latent_size_d", "=", "latent_size_d", ",", "\n", "latent_size_z", "=", "latent_size_z", ",", "\n", "latent_size_a", "=", "latent_size_a", ",", "\n", "sequence_length", "=", "sequence_length", ",", "output_dim", "=", "output_dim", ",", "\n", "smoothing", "=", "smoothing", ",", "use_mu_residual", "=", "use_mu_residual", ",", "\n", "p_d_drop", "=", "p_d_drop", ",", "p_z_drop", "=", "p_z_drop", ",", "\n", "p_emb_u_drop", "=", "p_emb_u_drop", ",", "p_emb_x_drop", "=", "p_emb_x_drop", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "batch_size", "=", "batch_size", ",", "log10_lr", "=", "log10_lr", ",", "momentum", "=", "momentum", ",", "decay_type", "=", "decay_type", ",", "\n", "decay", "=", "decay", ",", "scale_decay", "=", "scale_decay", ",", "no_decay_epochs", "=", "no_decay_epochs", ",", "\n", "init_rnn", "=", "init_rnn", ",", "init_range", "=", "init_range", ",", "\n", "init_mlp", "=", "init_mlp", ",", "\n", "tempKL_type", "=", "tempKL_type", ",", "\n", "tempKL_start", "=", "tempKL_start", ",", "tempKL_epochs", "=", "tempKL_epochs", ",", "tempKL_decay", "=", "tempKL_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "clip_gradients", "=", "clip_gradients", ",", "\n", "max_num_epochs", "=", "max_num_epochs", ",", "eval_epoch", "=", "eval_epoch", ",", "random_seed", "=", "random_seed", ",", "\n", "batch_size_test", "=", "batch_size_test", ",", "unroll_scan", "=", "unroll_scan", ",", "\n", "tolerance_softmax", "=", "tolerance_softmax", ",", "cons", "=", "cons", ")", "\n", "\n", "# Initialize training object", "\n", "train", "=", "TrainSRNN_timit", "(", ")", "\n", "\n", "", "else", ":", "\n", "# Load pickled settings. The model weights are not loaded now as we first need the pickled settings to construct", "\n", "# it. Once the model is defined, we can assign the pickled weights (this is done in the training file).", "\n", "        ", "with", "open", "(", "load_pickled_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "print", "(", "\"Loading pickled settings and train from %s\"", "%", "load_pickled_file", ")", "\n", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "settings", "=", "Settings_SRNN", ".", "load_settings", "(", "f", ")", "\n", "train", "=", "TrainSRNN_timit", ".", "load_train", "(", "f", ")", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "settings", ".", "random_seed", ")", "\n", "# Get data object", "\n", "timit_data", "=", "TimitData", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "'timit_raw_batchsize%i_seqlen40.npz'", ")", "%", "settings", ".", "batch_size", ",", "\n", "batch_size", "=", "settings", ".", "batch_size", ")", "\n", "\n", "# Print data and settings info", "\n", "settings", ".", "settings_info", "(", ")", "\n", "settings", ".", "print_csv", "(", ")", "\n", "\n", "# Initialize SRNN model", "\n", "srnn_timit", "=", "SRNN_timit", "(", "settings", ")", "\n", "srnn_timit", ".", "model_info", "(", ")", "\n", "\n", "# Compile training/evaluation functions", "\n", "f_train", ",", "f_valid", "=", "srnn_timit", ".", "initialize_computation_graph", "(", "timit_data", ",", "settings", ")", "\n", "\n", "# Choose learning rate decay schedule", "\n", "if", "settings", ".", "decay_type", ".", "lower", "(", ")", "==", "'power'", ":", "\n", "        ", "decay_learning_rate", "=", "PowerDecaySchedule", "(", "settings", ".", "decay", ",", "settings", ".", "scale_decay", ",", "settings", ".", "max_num_epochs", ",", "\n", "settings", ".", "no_decay_epochs", ")", "\n", "", "elif", "settings", ".", "decay_type", ".", "lower", "(", ")", "==", "'exponential'", ":", "\n", "        ", "decay_learning_rate", "=", "ExponentialDecaySchedule", "(", "settings", ".", "decay", ",", "settings", ".", "max_num_epochs", ",", "\n", "settings", ".", "no_decay_epochs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid decay_type \\''", "+", "settings", ".", "decay_type", "+", "'\\''", ")", "\n", "\n", "# Choose temperature schedule for the KL term", "\n", "# We change the KL divergence slightly after every batch, e.g. with temperature linearly increasing from 0.2 to 1", "\n", "", "n_batches_train", "=", "timit_data", ".", "n_train", "//", "settings", ".", "batch_size", "\n", "max_decay_iters_KL", "=", "np", ".", "inf", "\n", "max_num_iters_KL", "=", "settings", ".", "max_num_epochs", "*", "n_batches_train", "\n", "no_decay_iters_KL", "=", "max_num_iters_KL", "-", "settings", ".", "tempKL_epochs", "*", "n_batches_train", "\n", "y_range_KL", "=", "(", "float", "(", "settings", ".", "tempKL_start", ")", ",", "1.0", ")", "\n", "reverse_KL", "=", "True", "\n", "if", "settings", ".", "tempKL_type", ".", "lower", "(", ")", "==", "'power'", ":", "\n", "        ", "temperature_KL", "=", "PowerDecaySchedule", "(", "settings", ".", "tempKL_decay", ",", "scale_decay", "=", "1.0", ",", "max_num_epochs", "=", "max_num_iters_KL", ",", "\n", "no_decay_epochs", "=", "no_decay_iters_KL", ",", "max_decay_epochs", "=", "max_decay_iters_KL", ",", "\n", "reverse", "=", "reverse_KL", ",", "y_range", "=", "y_range_KL", ")", "\n", "", "elif", "settings", ".", "tempKL_type", ".", "lower", "(", ")", "==", "'exponential'", ":", "\n", "        ", "temperature_KL", "=", "ExponentialDecaySchedule", "(", "settings", ".", "tempKL_decay", ",", "max_num_epochs", "=", "max_num_iters_KL", ",", "\n", "no_decay_epochs", "=", "no_decay_iters_KL", ",", "\n", "max_decay_epochs", "=", "max_decay_iters_KL", ",", "reverse", "=", "reverse_KL", ",", "\n", "y_range", "=", "y_range_KL", ")", "\n", "", "elif", "settings", ".", "tempKL_type", ".", "lower", "(", ")", "==", "'linear'", ":", "\n", "# in this case settings.tempKL_decay is useless as we are also passing y_range_KL", "\n", "        ", "temperature_KL", "=", "LinearDecaySchedule", "(", "settings", ".", "tempKL_decay", ",", "max_num_epochs", "=", "max_num_iters_KL", ",", "\n", "no_decay_epochs", "=", "no_decay_iters_KL", ",", "max_decay_epochs", "=", "max_decay_iters_KL", ",", "\n", "reverse", "=", "reverse_KL", ",", "y_range", "=", "y_range_KL", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid tempKL_type \\''", "+", "settings", ".", "tempKL_type", "+", "'\\''", ")", "\n", "\n", "# Train the model", "\n", "", "elbo_valid", "=", "train", ".", "train_model", "(", "timit_data", ",", "srnn_timit", ",", "f_train", ",", "f_valid", ",", "\n", "decay_learning_rate", ",", "temperature_KL", ",", "settings", ",", "pickle_path", ",", "\n", "load_pickled_file", ",", "plot_path", ")", "\n", "\n", "neg_elbo_valid", "=", "-", "elbo_valid", "\n", "print", "(", "\"Negative ELBO valid: %s\"", "%", "neg_elbo_valid", ")", "\n", "\n", "return", "neg_elbo_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.DecaySchedule.__init__": [[19, 41], ["decay.DecaySchedule.compute_decay_schedule", "numpy.min", "numpy.max", "warnings.warn", "numpy.min", "numpy.max", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.DecaySchedule.compute_decay_schedule"], ["def", "__init__", "(", "self", ",", "max_num_epochs", "=", "np", ".", "inf", ",", "no_decay_epochs", "=", "0", ",", "max_decay_epochs", "=", "np", ".", "inf", ",", "reverse", "=", "False", ",", "\n", "increasing", "=", "False", ",", "y_range", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialization of the parameters of the decay schedule\n        \"\"\"", "\n", "self", ".", "no_decay_epochs", "=", "no_decay_epochs", "# Number of epochs before we start with the decay", "\n", "self", ".", "max_decay_epochs", "=", "max_decay_epochs", "# Number of epochs before we start with the decay", "\n", "self", ".", "max_num_epochs", "=", "max_num_epochs", "# Max number of epochs", "\n", "self", ".", "decay_schedule", "=", "self", ".", "compute_decay_schedule", "(", ")", "# The actual decay schedule we will use (plot it!)", "\n", "if", "reverse", ":", "\n", "            ", "self", ".", "decay_schedule", "=", "self", ".", "decay_schedule", "[", ":", ":", "-", "1", "]", "\n", "", "if", "increasing", ":", "\n", "            ", "self", ".", "decay_schedule", "=", "[", "-", "x", "for", "x", "in", "self", ".", "decay_schedule", "]", "\n", "# Scale between y_range[0] and y_range[1]", "\n", "", "if", "y_range", "is", "not", "None", ":", "\n", "            ", "tmp", "=", "self", ".", "decay_schedule", "\n", "if", "np", ".", "min", "(", "tmp", ")", "<", "np", ".", "max", "(", "tmp", ")", ":", "\n", "                ", "tmp", "=", "(", "tmp", "-", "np", ".", "min", "(", "tmp", ")", ")", "/", "(", "np", ".", "max", "(", "tmp", ")", "-", "np", ".", "min", "(", "tmp", ")", ")", "\n", "self", ".", "decay_schedule", "=", "tmp", "*", "(", "y_range", "[", "1", "]", "-", "y_range", "[", "0", "]", ")", "+", "y_range", "[", "0", "]", "\n", "", "else", ":", "\n", "#TODO: in this case we could want decay_schedule to be either y_range[1] or y_range[0]", "\n", "                ", "warnings", ".", "warn", "(", "'The decay_schedule is constant: not using y_range'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.DecaySchedule.get_decay": [[42, 44], ["None"], "methods", ["None"], ["", "", "", "def", "get_decay", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "self", ".", "decay_schedule", "[", "epoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.DecaySchedule.compute_decay_factor": [[45, 47], ["None"], "methods", ["None"], ["", "def", "compute_decay_factor", "(", "self", ",", "t", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.DecaySchedule.compute_decay_schedule": [[48, 57], ["range", "decay_schedule.append", "float", "decay.DecaySchedule.compute_decay_factor"], "methods", ["home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.PowerDecaySchedule.compute_decay_factor"], ["", "def", "compute_decay_schedule", "(", "self", ")", ":", "\n", "        ", "decay_schedule", "=", "[", "]", "\n", "decay_factor", "=", "1.0", "\n", "for", "i", "in", "range", "(", "self", ".", "max_num_epochs", ")", ":", "\n", "            ", "if", "i", ">=", "self", ".", "no_decay_epochs", "and", "i", "<=", "self", ".", "max_decay_epochs", ":", "# epoch starts from 0", "\n", "                ", "t", "=", "float", "(", "i", "-", "self", ".", "no_decay_epochs", "+", "1", ")", "# t>=1", "\n", "decay_factor", "=", "self", ".", "compute_decay_factor", "(", "t", ")", "\n", "", "decay_schedule", ".", "append", "(", "decay_factor", ")", "\n", "", "return", "decay_schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.DecaySchedule.plot_decay_schedule": [[58, 60], ["matplotlib.plot"], "methods", ["None"], ["", "def", "plot_decay_schedule", "(", "self", ",", "marker", "=", "'-b.'", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "self", ".", "decay_schedule", ",", "marker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.LinearDecaySchedule.__init__": [[70, 75], ["float", "decay.DecaySchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.__init__"], ["def", "__init__", "(", "self", ",", "decay", ",", "max_num_epochs", "=", "np", ".", "inf", ",", "no_decay_epochs", "=", "0", ",", "max_decay_epochs", "=", "np", ".", "inf", ",", "reverse", "=", "False", ",", "\n", "increasing", "=", "False", ",", "y_range", "=", "None", ")", ":", "\n", "        ", "self", ".", "decay", "=", "float", "(", "decay", ")", "\n", "super", "(", "LinearDecaySchedule", ",", "self", ")", ".", "__init__", "(", "max_num_epochs", ",", "no_decay_epochs", ",", "max_decay_epochs", ",", "reverse", ",", "\n", "increasing", ",", "y_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.LinearDecaySchedule.compute_decay_factor": [[76, 79], ["None"], "methods", ["None"], ["", "def", "compute_decay_factor", "(", "self", ",", "t", ")", ":", "\n", "        ", "decay_factor", "=", "-", "(", "1.0", "/", "self", ".", "decay", ")", "*", "t", "+", "1.0", "\n", "return", "decay_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.ExponentialDecaySchedule.__init__": [[89, 94], ["float", "decay.DecaySchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.__init__"], ["def", "__init__", "(", "self", ",", "decay", ",", "max_num_epochs", "=", "np", ".", "inf", ",", "no_decay_epochs", "=", "0", ",", "max_decay_epochs", "=", "np", ".", "inf", ",", "reverse", "=", "False", ",", "\n", "increasing", "=", "False", ",", "y_range", "=", "None", ")", ":", "\n", "        ", "self", ".", "decay", "=", "float", "(", "decay", ")", "\n", "super", "(", "ExponentialDecaySchedule", ",", "self", ")", ".", "__init__", "(", "max_num_epochs", ",", "no_decay_epochs", ",", "max_decay_epochs", ",", "reverse", ",", "\n", "increasing", ",", "y_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.ExponentialDecaySchedule.compute_decay_factor": [[95, 98], ["None"], "methods", ["None"], ["", "def", "compute_decay_factor", "(", "self", ",", "t", ")", ":", "\n", "        ", "decay_factor", "=", "(", "1.0", "/", "self", ".", "decay", ")", "**", "t", "\n", "return", "decay_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.PowerDecaySchedule.__init__": [[108, 114], ["float", "float", "decay.DecaySchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.__init__"], ["def", "__init__", "(", "self", ",", "decay", ",", "scale_decay", "=", "1.0", ",", "max_num_epochs", "=", "np", ".", "inf", ",", "no_decay_epochs", "=", "0", ",", "max_decay_epochs", "=", "np", ".", "inf", ",", "\n", "reverse", "=", "False", ",", "increasing", "=", "False", ",", "y_range", "=", "None", ")", ":", "\n", "        ", "self", ".", "decay", "=", "float", "(", "decay", ")", "\n", "self", ".", "scale_decay", "=", "float", "(", "scale_decay", ")", "\n", "super", "(", "PowerDecaySchedule", ",", "self", ")", ".", "__init__", "(", "max_num_epochs", ",", "no_decay_epochs", ",", "max_decay_epochs", ",", "reverse", ",", "\n", "increasing", ",", "y_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.decay.PowerDecaySchedule.compute_decay_factor": [[115, 118], ["None"], "methods", ["None"], ["", "def", "compute_decay_factor", "(", "self", ",", "t", ")", ":", "\n", "        ", "decay_factor", "=", "(", "1.0", "+", "t", "/", "self", ".", "scale_decay", ")", "**", "-", "self", ".", "decay", "\n", "return", "decay_factor", "", "", "", ""]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.__init__": [[10, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialisation of the basic architecture and programmatic settings of any training procedure.\n        This method should be called from any subsequent inheriting training procedure.\n        :param model: The model to train on.\n\n        \"\"\"", "\n", "self", ".", "epoch", "=", "0", "# Current epoch", "\n", "self", ".", "epochs_eval", "=", "[", "]", "# List containing the epochs in which we run the evaluation (test). Used for plotting", "\n", "self", ".", "time_epoch_all", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.train_model": [[21, 26], ["None"], "methods", ["None"], ["", "def", "train_model", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        This is where the training of the model is performed.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.print_training_info": [[27, 29], ["None"], "methods", ["None"], ["", "def", "print_training_info", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.dump_train": [[30, 32], ["cPickle.dump"], "methods", ["None"], ["", "def", "dump_train", "(", "self", ",", "f", ")", ":", "\n", "        ", "pkl", ".", "dump", "(", "self", ",", "f", ",", "pkl", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.load_train": [[33, 37], ["cPickle.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "# Load a pickled instance of Train", "\n", "def", "load_train", "(", "f", ")", ":", "\n", "        ", "return", "pkl", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marcofraccaro_srnn.training.base.Train.plot_results": [[38, 40], ["None"], "methods", ["None"], ["", "def", "plot_results", "(", "self", ",", "plot_path", "=", "None", ",", "ylim", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "", "", "", ""]]}