{"home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNModel.__init__": [[13, 58], ["tensorflow.get_default_session", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.placeholder", "tensorflow.squared_difference", "tensorflow.train.AdamOptimizer", "ddrqn.DDRQNModel.optimizer.minimize", "tensorflow.train.Saver", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.identity", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.contrib.rnn.BasicLSTMCell", "ddrqn.DDRQNModel.rnn_cell.zero_state", "tensorflow.nn.dynamic_rnn", "tensorflow.reshape", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_collection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "state_size", ",", "action_size", ",", "scope", "=", "'DQN_model'", ",", "sess", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "self", ".", "state_size", "=", "state_size", "\n", "self", ".", "action_size", "=", "action_size", "\n", "self", ".", "learning_rate", "=", "0.001", "\n", "self", ".", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "self", ".", "local_map", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "5", ",", "625", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'local_map'", ")", "\n", "\n", "self", ".", "dense1", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "local_map", ",", "num_outputs", "=", "100", ")", "\n", "self", ".", "dense2", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "dense1", ",", "num_outputs", "=", "100", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "self", ".", "state", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "state_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'state'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "state", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "5", ",", "self", ".", "state_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'state'", ")", "\n", "\n", "", "self", ".", "dense3", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "state", ",", "num_outputs", "=", "64", ")", "\n", "self", ".", "dense4", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "dense3", ",", "num_outputs", "=", "10", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "self", ".", "final_state", "=", "tf", ".", "identity", "(", "self", ".", "dense4", ")", "\n", "self", ".", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "final_state", ",", "num_outputs", "=", "self", ".", "action_size", ",", "activation_fn", "=", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "final_state", "=", "tf", ".", "concat", "(", "[", "self", ".", "dense4", ",", "self", ".", "dense2", "]", ",", "axis", "=", "2", ")", "\n", "\n", "self", ".", "rnn_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "110", ")", "\n", "self", ".", "initial_state", "=", "self", ".", "rnn_cell", ".", "zero_state", "(", "batch_size", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "rnn_outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "rnn_cell", ",", "self", ".", "final_state", ",", "\n", "initial_state", "=", "self", ".", "initial_state", ")", "\n", "self", ".", "rnn_outputs", "=", "tf", ".", "reshape", "(", "self", ".", "rnn_outputs", ",", "[", "-", "1", ",", "5", "*", "110", "]", ")", "\n", "\n", "self", ".", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "rnn_outputs", ",", "num_outputs", "=", "self", ".", "action_size", ",", "activation_fn", "=", "None", ")", "\n", "\n", "", "self", ".", "target", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "action_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'target'", ")", "\n", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "squared_difference", "(", "self", ".", "output", ",", "self", ".", "target", ")", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "learning_rate", ")", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "scope", ")", ",", "max_to_keep", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNModel.predict": [[63, 73], ["tensorflow.get_default_session", "sess.run", "sess.run"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "state", ",", "local_maps", "=", "None", ",", "sess", "=", "None", ")", ":", "\n", "        ", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "or", "self", ".", "sess", "\n", "if", "local_maps", "is", "not", "None", ":", "\n", "            ", "action_values", "=", "sess", ".", "run", "(", "self", ".", "output", ",", "{", "self", ".", "state", ":", "state", ",", "self", ".", "local_map", ":", "local_maps", "}", ")", "\n", "", "else", ":", "\n", "            ", "action_values", "=", "sess", ".", "run", "(", "self", ".", "output", ",", "{", "self", ".", "state", ":", "state", "}", ")", "\n", "\n", "#print(action_values)", "\n", "\n", "", "return", "action_values", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNModel.fit": [[74, 83], ["sess.run", "tensorflow.get_default_session"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "state", ",", "target", ",", "local_maps", "=", "None", ",", "sess", "=", "None", ")", ":", "\n", "        ", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "or", "self", ".", "sess", "\n", "if", "local_maps", "is", "not", "None", ":", "\n", "            ", "feed_dict", "=", "{", "self", ".", "state", ":", "state", ",", "self", ".", "target", ":", "target", ",", "self", ".", "local_map", ":", "local_maps", "}", "\n", "", "else", ":", "\n", "            ", "feed_dict", "=", "{", "self", ".", "state", ":", "state", ",", "self", ".", "target", ":", "target", "}", "\n", "\n", "", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNModel.load_weights": [[85, 87], ["ddrqn.DDRQNModel.saver.restore"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "name", ",", "sess", ")", ":", "\n", "        ", "self", ".", "saver", ".", "restore", "(", "sess", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNModel.save_weights": [[89, 91], ["ddrqn.DDRQNModel.saver.save"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.save"], ["", "def", "save_weights", "(", "self", ",", "name", ",", "sess", ",", "episode", "=", "None", ")", ":", "\n", "        ", "self", ".", "saver", ".", "save", "(", "sess", ",", "name", ",", "global_step", "=", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.__init__": [[94, 125], ["ddrqn.DDRQNModel", "ddrqn.DDRQNModel", "collections.deque", "ddrqn.DDRQNAgent.sess.run", "ddrqn.DDRQNAgent.make_dirs", "ddrqn.DDRQNAgent.update_target_model", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.make_dirs", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.update_target_model"], ["    ", "def", "__init__", "(", "self", ",", "state_size", ",", "action_size", ",", "scope", ",", "session", ",", "target", "=", "None", ")", ":", "\n", "        ", "self", ".", "scope", "=", "scope", "\n", "self", ".", "model", "=", "DDRQNModel", "(", "state_size", ",", "action_size", ",", "scope", "+", "\"_model\"", ",", "session", ",", "target", ")", "\n", "self", ".", "target_model", "=", "DDRQNModel", "(", "state_size", ",", "action_size", ",", "scope", "+", "\"_target\"", ",", "session", ",", "target", ")", "\n", "self", ".", "action_size", "=", "action_size", "\n", "self", ".", "memory", "=", "deque", "(", "maxlen", "=", "2000", ")", "\n", "self", ".", "gamma", "=", "0.95", "# discount rate", "\n", "self", ".", "epsilon", "=", "0.01", "# exploration rate", "\n", "self", ".", "epsilon_min", "=", "0.01", "\n", "self", ".", "epsilon_decay", "=", "0.99", "\n", "self", ".", "sess", "=", "session", "\n", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "self", ".", "load_weight_dir", "=", "\"Weights/\"", "\n", "self", ".", "save_weight_dir", "=", "\"Weights_full/\"", "\n", "self", ".", "temp_weight_dir", "=", "\"Weights_temp/\"", "\n", "\n", "self", ".", "make_dirs", "(", ")", "\n", "\n", "self", ".", "update_target_model", "(", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "if", "target", "is", "None", ":", "\n", "            ", "self", ".", "isTarget", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "isTarget", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.update_target_model": [[127, 137], ["tensorflow.get_collection", "tensorflow.get_collection", "ddrqn.DDRQNAgent.sess.run", "v_t.assign", "zip"], "methods", ["None"], ["", "", "def", "update_target_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        trainable = tf.trainable_variables()\n        for i in range(len(trainable) // 2):\n            assign_op = trainable[i+len(trainable)//2].assign(trainable[i])\n            self.sess.run(assign_op)\n        \"\"\"", "\n", "q_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "\"_model\"", ")", "\n", "q_target_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "\"_target\"", ")", "\n", "self", ".", "sess", ".", "run", "(", "[", "v_t", ".", "assign", "(", "v", ")", "for", "v_t", ",", "v", "in", "zip", "(", "q_target_vars", ",", "q_vars", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.replay": [[138, 170], ["random.sample", "ddrqn.DDRQNAgent.model.predict", "ddrqn.DDRQNAgent.model.predict", "ddrqn.DDRQNAgent.target_model.predict", "ddrqn.DDRQNAgent.model.fit", "ddrqn.DDRQNAgent.model.predict", "ddrqn.DDRQNAgent.model.predict", "ddrqn.DDRQNAgent.target_model.predict", "ddrqn.DDRQNAgent.model.fit", "numpy.argmax", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNModel.fit", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNModel.fit"], ["", "def", "replay", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "minibatch", "=", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "if", "self", ".", "isTarget", ":", "\n", "            ", "for", "state", ",", "local_map", ",", "action", ",", "reward", ",", "next_state", ",", "next_local_map", ",", "done", "in", "minibatch", ":", "\n", "                ", "target", "=", "self", ".", "model", ".", "predict", "(", "state", ")", "\n", "target_next", "=", "self", ".", "model", ".", "predict", "(", "next_state", ")", "\n", "target_val", "=", "self", ".", "target_model", ".", "predict", "(", "next_state", ")", "\n", "if", "done", ":", "\n", "                    ", "target", "[", "0", "]", "[", "action", "]", "=", "reward", "\n", "", "else", ":", "\n", "                    ", "a", "=", "np", ".", "argmax", "(", "target_next", "[", "0", "]", ")", "\n", "target", "[", "0", "]", "[", "action", "]", "=", "reward", "+", "self", ".", "gamma", "*", "target_val", "[", "0", "]", "[", "a", "]", "\n", "\n", "", "self", ".", "model", ".", "fit", "(", "state", ",", "target", ")", "\n", "", "if", "self", ".", "epsilon", ">", "self", ".", "epsilon_min", ":", "\n", "                ", "self", ".", "epsilon", "*=", "self", ".", "epsilon_decay", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "for", "state", ",", "local_map", ",", "action", ",", "reward", ",", "next_state", ",", "next_local_map", ",", "done", "in", "minibatch", ":", "\n", "                ", "target", "=", "self", ".", "model", ".", "predict", "(", "state", ",", "local_map", ")", "\n", "target_next", "=", "self", ".", "model", ".", "predict", "(", "next_state", ",", "next_local_map", ")", "\n", "target_val", "=", "self", ".", "target_model", ".", "predict", "(", "next_state", ",", "next_local_map", ")", "\n", "if", "done", ":", "\n", "                    ", "target", "[", "0", "]", "[", "action", "]", "=", "reward", "\n", "", "else", ":", "\n", "                    ", "a", "=", "np", ".", "argmax", "(", "target_next", "[", "0", "]", ")", "\n", "target", "[", "0", "]", "[", "action", "]", "=", "reward", "+", "self", ".", "gamma", "*", "target_val", "[", "0", "]", "[", "a", "]", "\n", "\n", "", "self", ".", "model", ".", "fit", "(", "state", ",", "target", ",", "local_map", ")", "\n", "", "if", "self", ".", "epsilon", ">", "self", ".", "epsilon_min", ":", "\n", "                ", "self", ".", "epsilon", "*=", "self", ".", "epsilon_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.act": [[171, 176], ["ddrqn.DDRQNAgent.model.predict", "numpy.argmax", "numpy.random.rand", "random.randrange"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict"], ["", "", "", "def", "act", "(", "self", ",", "state", ",", "local_maps", "=", "None", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "epsilon", ":", "\n", "            ", "return", "random", ".", "randrange", "(", "self", ".", "action_size", ")", "\n", "", "act_values", "=", "self", ".", "model", ".", "predict", "(", "state", ",", "local_maps", ")", "\n", "return", "np", ".", "argmax", "(", "act_values", "[", "0", "]", ")", "# returns action", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.memorize": [[177, 179], ["ddrqn.DDRQNAgent.memory.append"], "methods", ["None"], ["", "def", "memorize", "(", "self", ",", "state", ",", "local_map", ",", "action", ",", "reward", ",", "next_state", ",", "next_local_map", ",", "done", ")", ":", "\n", "        ", "self", ".", "memory", ".", "append", "(", "(", "state", ",", "local_map", ",", "action", ",", "reward", ",", "next_state", ",", "next_local_map", ",", "done", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.make_dirs": [[180, 189], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "make_dirs", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "load_weight_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "load_weight_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_weight_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_weight_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "temp_weight_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "temp_weight_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.load": [[190, 193], ["ddrqn.DDRQNAgent.model.load_weights", "ddrqn.DDRQNAgent.target_model.load_weights"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.load_weights", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.load_weights"], ["", "", "def", "load", "(", "self", ",", "name", ",", "name2", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_weights", "(", "self", ".", "load_weight_dir", "+", "name", ",", "self", ".", "sess", ")", "\n", "self", ".", "target_model", ".", "load_weights", "(", "self", ".", "load_weight_dir", "+", "name2", ",", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ddrqn.DDRQNAgent.save": [[194, 197], ["ddrqn.DDRQNAgent.model.save_weights", "ddrqn.DDRQNAgent.target_model.save_weights"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.save_weights", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.save_weights"], ["", "def", "save", "(", "self", ",", "name", ",", "name2", ",", "episode", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", ".", "save_weights", "(", "self", ".", "save_weight_dir", "+", "name", ",", "self", ".", "sess", ",", "episode", ")", "\n", "self", ".", "target_model", ".", "save_weights", "(", "self", ".", "save_weight_dir", "+", "name2", ",", "self", ".", "sess", ",", "episode", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.PolicyEstimator_RNN.__init__": [[14, 64], ["tensorflow.get_default_session", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.placeholder", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.rnn.BasicLSTMCell", "A2C.PolicyEstimator_RNN.rnn_cell.zero_state", "tensorflow.nn.dynamic_rnn", "tensorflow.reshape", "tensorflow.contrib.layers.fully_connected", "tensorflow.squeeze", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.gather", "tensorflow.cond", "tensorflow.train.AdamOptimizer", "A2C.PolicyEstimator_RNN.optimizer.minimize", "tensorflow.train.Saver", "tensorflow.identity", "tensorflow.concat", "tensorflow.nn.softmax", "tensorflow.get_collection", "tensorflow.constant", "tensorflow.identity", "tensorflow.log"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "state_size", ",", "action_size", ",", "scope", "=", "'RNN_model_policy'", ",", "sess", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "self", ".", "state_size", "=", "state_size", "\n", "self", ".", "action_size", "=", "action_size", "\n", "self", ".", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "self", ".", "local_map", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "5", ",", "625", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'local_map'", ")", "\n", "\n", "self", ".", "dense1", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "local_map", ",", "num_outputs", "=", "100", ")", "\n", "self", ".", "dense2", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "dense1", ",", "num_outputs", "=", "100", ")", "\n", "\n", "self", ".", "state", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "5", ",", "self", ".", "state_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'state'", ")", "\n", "\n", "self", ".", "dense3", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "state", ",", "num_outputs", "=", "64", ")", "\n", "#self.dense3_5 = tf.contrib.layers.fully_connected(inputs=self.state, num_outputs=64)", "\n", "self", ".", "dense4", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "dense3", ",", "num_outputs", "=", "10", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "self", ".", "final_state", "=", "tf", ".", "identity", "(", "self", ".", "dense4", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "final_state", "=", "tf", ".", "concat", "(", "[", "self", ".", "dense4", ",", "self", ".", "dense2", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "self", ".", "rnn_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "110", ")", "\n", "self", ".", "initial_state", "=", "self", ".", "rnn_cell", ".", "zero_state", "(", "batch_size", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "rnn_outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "rnn_cell", ",", "self", ".", "final_state", ",", "initial_state", "=", "self", ".", "initial_state", ")", "\n", "self", ".", "rnn_outputs", "=", "tf", ".", "reshape", "(", "self", ".", "rnn_outputs", ",", "[", "-", "1", ",", "5", "*", "110", "]", ")", "\n", "\n", "#self.dense6 = tf.contrib.layers.fully_connected(inputs=self.rnn_outputs, num_outputs=64)", "\n", "\n", "self", ".", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "rnn_outputs", ",", "num_outputs", "=", "4", ")", "\n", "\n", "\n", "self", ".", "action_probs", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "output", ")", ")", "\n", "#End of predict step", "\n", "\n", "#Start of update step", "\n", "self", ".", "action", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'action'", ")", "\n", "self", ".", "target", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'target'", ")", "\n", "\n", "self", ".", "picked_action_prob", "=", "tf", ".", "gather", "(", "self", ".", "action_probs", ",", "self", ".", "action", ")", "\n", "self", ".", "picked_action_prob", "=", "tf", ".", "cond", "(", "self", ".", "picked_action_prob", "<", "1e-30", ",", "lambda", ":", "tf", ".", "constant", "(", "1e-30", ")", ",", "lambda", ":", "tf", ".", "identity", "(", "self", ".", "picked_action_prob", ")", ")", "\n", "\n", "self", ".", "loss", "=", "-", "tf", ".", "log", "(", "self", ".", "picked_action_prob", ")", "*", "self", ".", "target", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "0.00001", ")", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "scope", ")", ",", "max_to_keep", "=", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.PolicyEstimator_RNN.predict": [[71, 74], ["sess.run", "tensorflow.get_default_session"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "states", ",", "local_map", ",", "sess", "=", "None", ")", ":", "\n", "        ", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "or", "self", ".", "sess", "\n", "return", "sess", ".", "run", "(", "self", ".", "action_probs", ",", "{", "self", ".", "state", ":", "states", ",", "self", ".", "local_map", ":", "local_map", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.PolicyEstimator_RNN.update": [[75, 83], ["sess.run", "tensorflow.get_default_session"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "states", ",", "target", ",", "action", ",", "local_map", ",", "sess", "=", "None", ")", ":", "\n", "        ", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "or", "self", ".", "sess", "\n", "\n", "feed_dict", "=", "{", "self", ".", "state", ":", "states", ",", "self", ".", "action", ":", "action", ",", "self", ".", "target", ":", "target", ",", "self", ".", "local_map", ":", "local_map", "}", "\n", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.PolicyEstimator_RNN.load_weights": [[84, 86], ["A2C.PolicyEstimator_RNN.saver.restore"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "name", ",", "sess", ")", ":", "\n", "        ", "self", ".", "saver", ".", "restore", "(", "sess", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.PolicyEstimator_RNN.save_weights": [[87, 89], ["A2C.PolicyEstimator_RNN.saver.save"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.save"], ["", "def", "save_weights", "(", "self", ",", "name", ",", "sess", ",", "episode", "=", "None", ")", ":", "\n", "        ", "self", ".", "saver", ".", "save", "(", "sess", ",", "name", ",", "global_step", "=", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.__init__": [[93, 135], ["tensorflow.get_default_session", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.placeholder", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.rnn.BasicLSTMCell", "A2C.ValueEstimator_RNN.rnn_cell.zero_state", "tensorflow.nn.dynamic_rnn", "tensorflow.reshape", "tensorflow.contrib.layers.fully_connected", "tensorflow.squeeze", "tensorflow.placeholder", "tensorflow.squared_difference", "tensorflow.train.AdamOptimizer", "A2C.ValueEstimator_RNN.optimizer.minimize", "tensorflow.train.Saver", "tensorflow.identity", "tensorflow.concat", "tensorflow.get_collection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "state_size", ",", "action_size", ",", "scope", "=", "'RNN_model_value'", ",", "sess", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "self", ".", "state_size", "=", "state_size", "\n", "self", ".", "action_size", "=", "action_size", "\n", "self", ".", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "self", ".", "local_map", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "5", ",", "625", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'local_map'", ")", "\n", "\n", "self", ".", "dense1", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "local_map", ",", "num_outputs", "=", "100", ")", "\n", "self", ".", "dense2", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "dense1", ",", "num_outputs", "=", "100", ")", "\n", "\n", "self", ".", "state", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "5", ",", "self", ".", "state_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'state'", ")", "\n", "self", ".", "dense3", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "state", ",", "num_outputs", "=", "64", ")", "\n", "#self.dense3_5 = tf.contrib.layers.fully_connected(inputs=self.state, num_outputs=64)", "\n", "self", ".", "dense4", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "dense3", ",", "num_outputs", "=", "10", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "self", ".", "final_state", "=", "tf", ".", "identity", "(", "self", ".", "dense4", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "final_state", "=", "tf", ".", "concat", "(", "[", "self", ".", "dense4", ",", "self", ".", "dense2", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "self", ".", "rnn_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "110", ")", "\n", "self", ".", "initial_state", "=", "self", ".", "rnn_cell", ".", "zero_state", "(", "batch_size", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "rnn_outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "rnn_cell", ",", "self", ".", "final_state", ",", "initial_state", "=", "self", ".", "initial_state", ")", "\n", "self", ".", "rnn_outputs", "=", "tf", ".", "reshape", "(", "self", ".", "rnn_outputs", ",", "[", "-", "1", ",", "5", "*", "110", "]", ")", "\n", "\n", "#self.dense6 = tf.contrib.layers.fully_connected(inputs=self.rnn_outputs, num_outputs=64)", "\n", "\n", "self", ".", "output", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "inputs", "=", "self", ".", "rnn_outputs", ",", "num_outputs", "=", "1", ")", "\n", "\n", "self", ".", "value_estimate", "=", "tf", ".", "squeeze", "(", "self", ".", "output", ")", "\n", "#End of predict step", "\n", "\n", "#Start of update step", "\n", "self", ".", "target", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'target'", ")", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "squared_difference", "(", "self", ".", "value_estimate", ",", "self", ".", "target", ")", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "0.00001", ")", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "scope", ")", ",", "max_to_keep", "=", "10", ")", "\n", "#if self.args.test:", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict": [[138, 141], ["sess.run", "tensorflow.get_default_session"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "states", ",", "local_maps", ",", "sess", "=", "None", ")", ":", "\n", "        ", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "or", "self", ".", "sess", "\n", "return", "sess", ".", "run", "(", "self", ".", "value_estimate", ",", "{", "self", ".", "state", ":", "states", ",", "self", ".", "local_map", ":", "local_maps", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.update": [[142, 148], ["sess.run", "tensorflow.get_default_session"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "states", ",", "target", ",", "local_maps", ",", "sess", "=", "None", ")", ":", "\n", "        ", "sess", "=", "sess", "or", "tf", ".", "get_default_session", "(", ")", "or", "self", ".", "sess", "\n", "feed_dict", "=", "{", "self", ".", "state", ":", "states", ",", "self", ".", "target", ":", "target", ",", "self", ".", "local_map", ":", "local_maps", "}", "\n", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.load_weights": [[149, 151], ["A2C.ValueEstimator_RNN.saver.restore"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "name", ",", "sess", ")", ":", "\n", "        ", "self", ".", "saver", ".", "restore", "(", "sess", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.save_weights": [[152, 154], ["A2C.ValueEstimator_RNN.saver.save"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.save"], ["", "def", "save_weights", "(", "self", ",", "name", ",", "sess", ",", "episode", "=", "None", ")", ":", "\n", "        ", "self", ".", "saver", ".", "save", "(", "sess", ",", "name", ",", "global_step", "=", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.__init__": [[156, 164], ["A2C.PolicyEstimator_RNN", "A2C.ValueEstimator_RNN", "collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "state_size", ",", "action_size", ",", "scope", ",", "session", ",", "target", "=", "None", ")", ":", "\n", "        ", "self", ".", "state_size", "=", "state_size", "\n", "self", ".", "policy", "=", "PolicyEstimator_RNN", "(", "state_size", ",", "action_size", ",", "scope", "+", "'_policy'", ",", "session", ",", "target", ")", "\n", "self", ".", "value", "=", "ValueEstimator_RNN", "(", "state_size", ",", "action_size", ",", "scope", "+", "'_value'", ",", "session", ",", "target", ")", "\n", "self", ".", "sess", "=", "session", "\n", "self", ".", "memory", "=", "deque", "(", "maxlen", "=", "2000", ")", "\n", "self", ".", "load_weight_dir", "=", "'Weights/'", "\n", "self", ".", "save_weight_dir", "=", "'Weights_save/'", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.act": [[165, 169], ["A2C.A2CAgent.policy.predict", "numpy.random.choice", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.predict"], ["", "def", "act", "(", "self", ",", "state", ",", "local_map", ")", ":", "\n", "        ", "action_probs", "=", "self", ".", "policy", ".", "predict", "(", "state", ",", "local_map", ",", "self", ".", "sess", ")", "\n", "action", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "action_probs", ")", ")", ",", "p", "=", "action_probs", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.memorize": [[170, 172], ["A2C.A2CAgent.memory.append"], "methods", ["None"], ["", "def", "memorize", "(", "self", ",", "state", ",", "local_map", ",", "action", ",", "reward", ",", "next_state", ",", "next_local_map", ",", "done", ")", ":", "\n", "        ", "self", ".", "memory", ".", "append", "(", "(", "state", ",", "local_map", ",", "action", ",", "reward", ",", "next_state", ",", "next_local_map", ",", "done", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.update": [[173, 176], ["A2C.A2CAgent.policy.update", "A2C.A2CAgent.value.update"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.update", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.update"], ["", "def", "update", "(", "self", ",", "states", ",", "local_maps", ",", "pol_target", ",", "val_target", ",", "action", ")", ":", "\n", "        ", "self", ".", "policy", ".", "update", "(", "states", ",", "pol_target", ",", "action", ",", "local_maps", ")", "\n", "self", ".", "value", ".", "update", "(", "states", ",", "val_target", ",", "local_maps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.load": [[177, 180], ["A2C.A2CAgent.policy.load_weights", "A2C.A2CAgent.value.load_weights"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.load_weights", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.load_weights"], ["", "def", "load", "(", "self", ",", "name", ",", "name2", ")", ":", "\n", "        ", "self", ".", "policy", ".", "load_weights", "(", "self", ".", "load_weight_dir", "+", "name", ",", "self", ".", "sess", ")", "\n", "self", ".", "value", ".", "load_weights", "(", "self", ".", "load_weight_dir", "+", "name2", ",", "self", ".", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.save": [[181, 184], ["A2C.A2CAgent.policy.save_weights", "A2C.A2CAgent.value.save_weights"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.save_weights", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.ValueEstimator_RNN.save_weights"], ["", "def", "save", "(", "self", ",", "name", ",", "name2", ",", "episode", "=", "None", ")", ":", "\n", "        ", "self", ".", "policy", ".", "save_weights", "(", "self", ".", "save_weight_dir", "+", "name", ",", "self", ".", "sess", ",", "episode", ")", "\n", "self", ".", "value", ".", "save_weights", "(", "self", ".", "save_weight_dir", "+", "name2", ",", "self", ".", "sess", ",", "episode", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.__init__": [[24, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "imageName", ")", ":", "\n", "        ", "self", ".", "imgName", "=", "imageName", "\n", "self", ".", "classLabels", "=", "[", "]", "# List of the labels for each class", "\n", "self", ".", "binaryImgs", "=", "[", "]", "# List of binary images, one for each class", "\n", "self", ".", "interestValues", "=", "[", "]", "# List of interest values, one for each class", "\n", "self", ".", "mapSize", "=", "{", "'rows'", ":", "0", ",", "'cols'", ":", "0", "}", "# Size of the classification map", "\n", "self", ".", "droneImgSize", "=", "{", "'rows'", ":", "0", ",", "'cols'", ":", "0", "}", "# Size in elements in the map of a drone image", "\n", "self", ".", "img", "=", "None", "# Image object", "\n", "self", ".", "ICRSmap", "=", "None", "# Overall classification map", "\n", "self", ".", "navigationMap", "=", "None", "# Map of positions where the drone can be", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.loadImage": [[36, 43], ["cv2.imread", "print", "str", "str"], "methods", ["None"], ["", "def", "loadImage", "(", "self", ")", ":", "\n", "        ", "self", ".", "img", "=", "cv2", ".", "imread", "(", "self", ".", "imgName", ")", "\n", "if", "self", ".", "img", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Loaded image of rows x cols = \"", "+", "str", "(", "self", ".", "img", ".", "shape", "[", "0", "]", ")", "+", "\" x \"", "+", "str", "(", "self", ".", "img", ".", "shape", "[", "1", "]", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.getSimulationImageSize": [[44, 46], ["None"], "methods", ["None"], ["", "", "def", "getSimulationImageSize", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.classify": [[50, 56], ["cv2.inRange", "ICRSsimulator.ICRSsimulator.binaryImgs.append", "ICRSsimulator.ICRSsimulator.interestValues.append", "ICRSsimulator.ICRSsimulator.classLabels.append"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "label", ",", "lower", ",", "upper", ",", "interestValue", ")", ":", "\n", "# cv2.inRange returns 0 (black or 255 (white)", "\n", "        ", "binmap", "=", "cv2", ".", "inRange", "(", "self", ".", "img", ",", "lower", ",", "upper", ")", "\n", "self", ".", "binaryImgs", ".", "append", "(", "binmap", ")", "\n", "self", ".", "interestValues", ".", "append", "(", "interestValue", ")", "\n", "self", ".", "classLabels", ".", "append", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.numberOfClasses": [[58, 60], ["len"], "methods", ["None"], ["", "def", "numberOfClasses", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "binaryImgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.setMapSize": [[63, 66], ["None"], "methods", ["None"], ["", "def", "setMapSize", "(", "self", ",", "rows", ",", "cols", ")", ":", "\n", "        ", "self", ".", "mapSize", "[", "'rows'", "]", "=", "rows", "\n", "self", ".", "mapSize", "[", "'cols'", "]", "=", "cols", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.setDroneImgSize": [[69, 72], ["None"], "methods", ["None"], ["", "def", "setDroneImgSize", "(", "self", ",", "rows", ",", "cols", ")", ":", "\n", "        ", "self", ".", "droneImgSize", "[", "'rows'", "]", "=", "rows", "\n", "self", ".", "droneImgSize", "[", "'cols'", "]", "=", "cols", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.setNavigationMap": [[76, 83], ["numpy.zeros"], "methods", ["None"], ["", "def", "setNavigationMap", "(", "self", ")", ":", "\n", "        ", "rows", "=", "self", ".", "mapSize", "[", "'rows'", "]", "\n", "cols", "=", "self", ".", "mapSize", "[", "'cols'", "]", "\n", "dImgrows", "=", "self", ".", "droneImgSize", "[", "'rows'", "]", "\n", "dImgcols", "=", "self", ".", "droneImgSize", "[", "'cols'", "]", "\n", "self", ".", "navigationMap", "=", "np", ".", "zeros", "(", "(", "rows", "-", "dImgrows", ",", "cols", "-", "dImgcols", ")", ")", "\n", "return", "self", ".", "navigationMap", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.createMap": [[85, 139], ["numpy.zeros", "range", "len", "range", "len", "range", "box.reshape.reshape.reshape", "sum", "sum"], "methods", ["None"], ["", "def", "createMap", "(", "self", ")", ":", "\n", "        ", "rows", "=", "self", ".", "mapSize", "[", "'rows'", "]", "\n", "cols", "=", "self", ".", "mapSize", "[", "'cols'", "]", "\n", "# DEBUG: print(\"rows, cols = \" + str(rows) + \", \" + str(cols))", "\n", "# number of pixels per box in the map", "\n", "pixelsPerRow", "=", "self", ".", "img", ".", "shape", "[", "0", "]", "//", "rows", "# Note: // means integer division", "\n", "pixelsPerCol", "=", "self", ".", "img", ".", "shape", "[", "1", "]", "//", "cols", "\n", "# DEBUG: print(\"ppr, ppc = \" + str(pixelsPerRow) + \", \" + str(pixelsPerCol))", "\n", "# The overall map will be stored in a 3D numpy array of dim: rows x cols x num of classes", "\n", "self", ".", "ICRSmap", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ",", "len", "(", "self", ".", "binaryImgs", ")", ")", ")", "\n", "\n", "# Simulate classification of object class k for each box of the ICRSmap", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "self", ".", "binaryImgs", ")", ")", ":", "# for each class type", "\n", "# number of remaining pixels per row and column left over if rows and cols", "\n", "# don't divide evenly the image height and width, respectively", "\n", "            ", "rem_pixelsPerRow", "=", "self", ".", "img", ".", "shape", "[", "0", "]", "%", "rows", "\n", "rem_pixelsPerCol", "=", "self", ".", "img", ".", "shape", "[", "1", "]", "%", "cols", "\n", "# DEBUG: print(\"rem_ppr, rem_ppc = \" + str(rem_pixelsPerRow) + \", \" + str(rem_pixelsPerCol))", "\n", "\n", "binImg", "=", "self", ".", "binaryImgs", "[", "k", "]", "\n", "startingRow", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "rows", ")", ":", "# rows go with height", "\n", "# increase pixelsPerRow by 1 if there are still remaining row pixels", "\n", "                ", "actualPixelsPerRow", "=", "pixelsPerRow", "\n", "if", "rem_pixelsPerRow", ">", "0", ":", "\n", "                    ", "actualPixelsPerRow", "=", "actualPixelsPerRow", "+", "1", "\n", "rem_pixelsPerRow", "=", "rem_pixelsPerRow", "-", "1", "\n", "\n", "", "startingCol", "=", "0", "\n", "rem_pixelsPerCol", "=", "self", ".", "img", ".", "shape", "[", "1", "]", "%", "cols", "\n", "for", "j", "in", "range", "(", "0", ",", "cols", ")", ":", "# cols go with width", "\n", "# increase pixelsPerCol by 1 if there are still remaining col pixels", "\n", "                    ", "actualPixelsPerCol", "=", "pixelsPerCol", "\n", "if", "rem_pixelsPerCol", ">", "0", ":", "\n", "                        ", "actualPixelsPerCol", "=", "actualPixelsPerCol", "+", "1", "\n", "rem_pixelsPerCol", "=", "rem_pixelsPerCol", "-", "1", "\n", "", "actualNumPixelsPerBox", "=", "actualPixelsPerCol", "*", "actualPixelsPerRow", "\n", "# extract a box and compute likelihood of finding object k in it", "\n", "box", "=", "binImg", "[", "startingRow", ":", "startingRow", "+", "actualPixelsPerRow", ",", "\n", "startingCol", ":", "startingCol", "+", "actualPixelsPerCol", "]", "\n", "# box = binImg[ i * actualPixelsPerRow : (i + 1) * actualPixelsPerRow,\\", "\n", "#\tj * actualPixelsPerCol : (j + 1) * actualPixelsPerCol ]", "\n", "\n", "box", "=", "box", ".", "reshape", "(", "actualNumPixelsPerBox", ",", "1", ")", "\n", "white", "=", "sum", "(", "sum", "(", "box", "==", "255", ")", ")", "\n", "\n", "self", ".", "ICRSmap", "[", "i", ",", "j", ",", "k", "]", "=", "white", "/", "(", "actualNumPixelsPerBox", ")", "\n", "startingCol", "=", "startingCol", "+", "actualPixelsPerCol", "\n", "\n", "# DEBUG: print(\"i, j, actual_ppr, rem_ppr, actual_ppc, rem_ppc = \" + str(i) + \", \" + str(j) + \", \"", "\n", "# DEBUG: + str(actualPixelsPerRow) + \", \" + str(rem_pixelsPerRow) + \", \" + str(actualPixelsPerCol) + \",\"", "\n", "# DEBUG: + str(rem_pixelsPerCol))", "\n", "\n", "", "startingRow", "=", "startingRow", "+", "actualPixelsPerRow", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.getMapElement": [[141, 143], ["None"], "methods", ["None"], ["", "", "", "def", "getMapElement", "(", "self", ",", "row", ",", "col", ")", ":", "\n", "        ", "return", "self", ".", "ICRSmap", "[", "row", ",", "col", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.getClassifiedDroneImageAt": [[145, 157], ["None"], "methods", ["None"], ["", "def", "getClassifiedDroneImageAt", "(", "self", ",", "row", ",", "col", ")", ":", "\n", "        ", "\"\"\"\n        This function should be re-written for implementation in the field.\n        Instead of retrieving the 5x5 map from the ICRS map, it should retrieve it from the\n        image taken by the drone's camera\n        :param row: drone's current row position\n        :param col: drone's current col position\n        :return: a 5x5 map of mining probabilities\n        \"\"\"", "\n", "self", ".", "navigationMap", "[", "row", ",", "col", "]", "=", "self", ".", "navigationMap", "[", "row", ",", "col", "]", "+", "1", "\n", "return", "self", ".", "ICRSmap", "[", "row", "-", "self", ".", "droneImgSize", "[", "'rows'", "]", ":", "row", "+", "self", ".", "droneImgSize", "[", "'rows'", "]", "+", "1", ",", "\n", "col", "-", "self", ".", "droneImgSize", "[", "'cols'", "]", ":", "col", "+", "self", ".", "droneImgSize", "[", "'cols'", "]", "+", "1", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.showMap": [[159, 181], ["matplotlib.pyplot.subplots", "fig.suptitle", "cv2.split", "cv2.merge", "axs[].imshow", "axs[].set_title", "range", "matplotlib.pyplot.show", "matplotlib.pyplot.clf", "matplotlib.pyplot.imshow", "matplotlib.pyplot.savefig", "len", "axs[].imshow", "axs[].set_title", "len"], "methods", ["None"], ["", "def", "showMap", "(", "self", ")", ":", "\n", "        ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "len", "(", "self", ".", "binaryImgs", ")", "+", "1", ")", "\n", "fig", ".", "suptitle", "(", "'Classification maps for each object'", ")", "\n", "# First show the original image and original binary maps", "\n", "# Note that cv2 uess BGR format which needs to be converted to RGB for Matplotlib", "\n", "b", ",", "g", ",", "r", "=", "cv2", ".", "split", "(", "self", ".", "img", ")", "\n", "rgb_img", "=", "cv2", ".", "merge", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "axs", "[", "0", "]", ".", "imshow", "(", "rgb_img", ",", "interpolation", "=", "'none'", ")", "\n", "axs", "[", "0", "]", ".", "set_title", "(", "'Original Image'", ")", "\n", "# DEBUG: Show original binary maps in first column", "\n", "# for k in range(0, len(self.binaryImgs)):", "\n", "#\taxs[0, k+1].imshow(self.binaryImgs[k], cmap = 'gray', interpolation = 'none')", "\n", "#\taxs[0, k+1].set_title(self.classLabels[k])", "\n", "# Now show the binary classification maps for the given map size", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "self", ".", "binaryImgs", ")", ")", ":", "\n", "            ", "axs", "[", "k", "+", "1", "]", ".", "imshow", "(", "self", ".", "ICRSmap", "[", ":", ",", ":", ",", "k", "]", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "axs", "[", "k", "+", "1", "]", ".", "set_title", "(", "self", ".", "classLabels", "[", "k", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "plt", ".", "imshow", "(", "self", ".", "ICRSmap", "[", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "savefig", "(", "'mining.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.full_testing.test_full_model": [[17, 185], ["Visited", "Map", "Search", "Trace", "SelectTarget", "tf.Session", "DDRQNAgent", "A2CAgent", "tf.Session.run", "deque", "deque", "range", "tf.global_variables_initializer", "DDRQNAgent.load", "A2CAgent.load", "Search.reset_env", "Trace.reset_env", "SelectTarget.reset_env", "total_steps.append", "print", "print", "print", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.savefig", "plt.clf", "SelectTarget.calculate_covered", "SelectTarget.calculate_covered", "print", "mining_coverage.append", "print", "search_episode", "search_rewards.append", "search_covered.append", "search_steps.append", "deque.append", "print", "Trace.update_visited", "Trace.transfer_map", "SelectTarget.update_visited", "SelectTarget.transfer_map", "trace_episode", "trace_rewards.append", "trace_covered.append", "trace_steps.append", "deque.append", "print", "Search.update_visited", "Search.transfer_map", "SelectTarget.update_visited", "SelectTarget.transfer_map", "SelectTarget.select_next_target", "Search.update_target", "Trace.update_target", "SelectTarget.update_target", "print", "Search.calculate_covered", "range", "search_average_rewards.append", "search_average_rewards.append", "save_plots", "Trace.calculate_covered", "range", "trace_average_rewards.append", "trace_average_rewards.append", "save_plots", "SelectTarget.calculate_covered", "SelectTarget.calculate_covered", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.load", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.load", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.reset_env", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.reset_env", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.reset_env", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.search_episode", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_visited", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.transfer_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_visited", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.transfer_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.trace_episode", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_visited", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.transfer_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_visited", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.transfer_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.select_next_target", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_target", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_target", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_target", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.save_plots", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.save_plots", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered"], ["def", "test_full_model", "(", "target_cost", "=", "False", ",", "search_weights", "=", "None", ",", "trace_weights", "=", "None", ",", "target_weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This is our function which tests the performance of the fully-trained drone. It runs a number of episodes\n    (specified in config), where each episode consists of the drone starting in a randomized location within the\n    first target (top left), and repeating the process - target selection, search, trace - until at least .7\n    of the total mining in the map has been covered. We find that on randomly generated maps, the drone can cover\n    this amount of area of interest in ~15000 avg steps, as opposed to the baseline of ~23000 when focusing solely\n    on coverage.\n\n    :param target_cost:\n    :param search_weights:\n    :param trace_weights:\n    :param target_weights:\n    :return:\n    \"\"\"", "\n", "# Initialize environment and ddrqn agents", "\n", "visited", "=", "Visited", "(", "config", ".", "total_rows", ",", "config", ".", "total_cols", ")", "\n", "map_obj", "=", "Map", "(", "config", ".", "total_rows", ",", "config", ".", "total_cols", ")", "\n", "search", "=", "Search", "(", "visited", ",", "map_obj", ")", "\n", "trace", "=", "Trace", "(", "visited", ",", "map_obj", ")", "\n", "target", "=", "SelectTarget", "(", "visited", ")", "\n", "action_size", "=", "search", ".", "num_actions", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "searching_agent", "=", "DDRQNAgent", "(", "search", ".", "vision_size", "+", "6", ",", "action_size", ",", "'Search'", ",", "sess", ")", "\n", "\n", "\n", "tracing_agent", "=", "A2CAgent", "(", "trace", ".", "vision_size", "+", "4", ",", "action_size", ",", "'Trace'", ",", "sess", ")", "\n", "\n", "#initialize tensorflow parameters to be loaded", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "#These functions load our saved weights in the folder 'Weights'", "\n", "if", "search_weights", "is", "not", "None", ":", "\n", "        ", "searching_agent", ".", "load", "(", "search_weights", "+", "'_model'", ",", "search_weights", "+", "'_target'", ")", "\n", "", "if", "trace_weights", "is", "not", "None", ":", "\n", "        ", "tracing_agent", ".", "load", "(", "trace_weights", "+", "'_policy'", ",", "trace_weights", "+", "'_value'", ")", "\n", "\n", "\n", "", "done", "=", "False", "\n", "\n", "# Initialize episode logging", "\n", "search_rewards", "=", "[", "]", "\n", "search_covered", "=", "[", "]", "\n", "search_steps", "=", "[", "]", "\n", "average_over", "=", "10", "\n", "search_average_rewards", "=", "[", "]", "\n", "search_average_r", "=", "deque", "(", "maxlen", "=", "average_over", ")", "\n", "search_episode_num", "=", "0", "\n", "\n", "trace_rewards", "=", "[", "]", "\n", "trace_covered", "=", "[", "]", "\n", "trace_steps", "=", "[", "]", "\n", "trace_average_rewards", "=", "[", "]", "\n", "trace_average_r", "=", "deque", "(", "maxlen", "=", "average_over", ")", "\n", "trace_episode_num", "=", "0", "\n", "\n", "total_steps", "=", "[", "]", "\n", "\n", "\n", "for", "e", "in", "range", "(", "config", ".", "num_episodes", ")", ":", "\n", "        ", "mining_coverage", "=", "[", "]", "\n", "search", ".", "reset_env", "(", "visited", ",", "map_obj", ")", "\n", "trace", ".", "reset_env", "(", "visited", ",", "map_obj", ")", "\n", "target", ".", "reset_env", "(", "visited", ",", "map_obj", ")", "\n", "t", "=", "0", "\n", "\n", "#Episode ends when we reach .7 mining coverage", "\n", "while", "target", ".", "calculate_covered", "(", "'mining'", ")", "<", ".7", ":", "\n", "            ", "mining", "=", "target", ".", "calculate_covered", "(", "'mining'", ")", "\n", "print", "(", "'Mining Coverage:'", ",", "mining", ")", "\n", "mining_coverage", ".", "append", "(", "mining", ")", "\n", "print", "(", "'Total Steps:'", ",", "t", ")", "\n", "\n", "# Complete one searching episode", "\n", "reward", ",", "steps", ",", "row_position", ",", "col_position", "=", "search_episode", "(", "search", ",", "searching_agent", ",", "\n", "trace", ".", "row_position", ",", "trace", ".", "col_position", ")", "\n", "search_rewards", ".", "append", "(", "reward", ")", "\n", "search_covered", ".", "append", "(", "search", ".", "calculate_covered", "(", "'mining'", ")", ")", "\n", "search_steps", ".", "append", "(", "steps", ")", "\n", "\n", "search_average_r", ".", "append", "(", "reward", ")", "\n", "\n", "if", "search_episode_num", "<", "average_over", ":", "\n", "                ", "r", "=", "0", "\n", "for", "i", "in", "range", "(", "search_episode_num", ")", ":", "\n", "                    ", "r", "+=", "search_average_r", "[", "i", "]", "\n", "", "r", "/=", "(", "search_episode_num", "+", "1", ")", "\n", "search_average_rewards", ".", "append", "(", "r", ")", "\n", "", "else", ":", "\n", "                ", "search_average_rewards", ".", "append", "(", "sum", "(", "search_average_r", ")", "/", "average_over", ")", "\n", "\n", "", "if", "search_episode_num", "%", "average_over", "==", "0", ":", "\n", "                ", "save_plots", "(", "e", "+", "1", ",", "search", ",", "'Search'", ",", "search_average_rewards", ",", "search_rewards", ",", "\n", "mining_coverage", "=", "search_covered", ",", "map_obj", "=", "map_obj", ")", "\n", "\n", "#save_plots(e, search, 'Search')", "\n", "", "print", "(", "\"search episode: {} - {}, reward: {}, mining covered: {}, start position: {},{}, number of steps: {}\"", "\n", ".", "format", "(", "(", "search_episode_num", "+", "1", "%", "(", "e", "+", "1", ")", ")", ",", "e", "+", "1", ",", "reward", ",", "search_covered", "[", "search_episode_num", "]", ",", "\n", "trace", ".", "row_position", ",", "trace", ".", "col_position", ",", "steps", ")", ")", "\n", "\n", "search_episode_num", "+=", "1", "\n", "t", "+=", "steps", "\n", "\n", "# Update all environments with the new information after the search episode", "\n", "trace", ".", "update_visited", "(", "search", ".", "visited", ")", "\n", "trace", ".", "transfer_map", "(", "search", ".", "map", ")", "\n", "target", ".", "update_visited", "(", "search", ".", "visited", ")", "\n", "target", ".", "transfer_map", "(", "search", ".", "map", ")", "\n", "\n", "# Complete one tracing episode", "\n", "reward", ",", "steps", ",", "row_position", ",", "col_position", "=", "trace_episode", "(", "trace", ",", "tracing_agent", ",", "\n", "search", ".", "row_position", ",", "search", ".", "col_position", ",", "target", ")", "\n", "trace_rewards", ".", "append", "(", "reward", ")", "\n", "trace_covered", ".", "append", "(", "trace", ".", "calculate_covered", "(", "'mining'", ")", ")", "\n", "trace_steps", ".", "append", "(", "steps", ")", "\n", "\n", "trace_average_r", ".", "append", "(", "reward", ")", "\n", "\n", "if", "trace_episode_num", "<", "average_over", ":", "\n", "                ", "r", "=", "0", "\n", "for", "i", "in", "range", "(", "trace_episode_num", ")", ":", "\n", "                    ", "r", "+=", "trace_average_r", "[", "i", "]", "\n", "", "r", "/=", "(", "trace_episode_num", "+", "1", ")", "\n", "trace_average_rewards", ".", "append", "(", "r", ")", "\n", "", "else", ":", "\n", "                ", "trace_average_rewards", ".", "append", "(", "sum", "(", "trace_average_r", ")", "/", "average_over", ")", "\n", "\n", "", "if", "trace_episode_num", "%", "average_over", "==", "0", ":", "\n", "                ", "save_plots", "(", "e", "+", "1", ",", "trace", ",", "'Trace'", ",", "trace_average_rewards", ",", "trace_rewards", ",", "\n", "mining_coverage", "=", "trace_covered", ",", "map_obj", "=", "map_obj", ")", "\n", "\n", "#save_plots(e, trace, 'Trace')", "\n", "", "print", "(", "\"trace episode: {} - {}, reward: {}, mining covered: {}, start position: {},{}, number of steps: {}\"", "\n", ".", "format", "(", "(", "trace_episode_num", "+", "1", "%", "(", "e", "+", "1", ")", ")", ",", "e", "+", "1", ",", "reward", ",", "trace_covered", "[", "trace_episode_num", "]", ",", "\n", "search", ".", "row_position", ",", "search", ".", "col_position", ",", "steps", ")", ")", "\n", "\n", "trace_episode_num", "+=", "1", "\n", "t", "+=", "steps", "\n", "\n", "# Update all environments with the new information after the trace episode", "\n", "search", ".", "update_visited", "(", "trace", ".", "visited", ")", "\n", "search", ".", "transfer_map", "(", "trace", ".", "map", ")", "\n", "target", ".", "update_visited", "(", "trace", ".", "visited", ")", "\n", "target", ".", "transfer_map", "(", "trace", ".", "map", ")", "\n", "\n", "#Pick a new target", "\n", "next_target", "=", "target", ".", "select_next_target", "(", "trace", ".", "row_position", ",", "trace", ".", "col_position", ")", "\n", "\n", "\n", "\n", "# Update all environments with the new target", "\n", "search", ".", "update_target", "(", "next_target", ")", "\n", "trace", ".", "update_target", "(", "next_target", ")", "\n", "target", ".", "update_target", "(", "next_target", ")", "\n", "print", "(", "\"Next target:\"", ",", "next_target", ")", "\n", "\n", "\n", "", "total_steps", ".", "append", "(", "t", ")", "\n", "print", "(", "'***********'", ")", "\n", "print", "(", "\"EPISODE {} COMPLETE: Steps -- {}, Mining Coverage -- {}, Total Coverage: {}\"", "\n", ".", "format", "(", "e", "+", "1", ",", "t", ",", "target", ".", "calculate_covered", "(", "'mining'", ")", ",", "target", ".", "calculate_covered", "(", "'map'", ")", ")", ")", "\n", "print", "(", "'***********'", ")", "\n", "\n", "plt", ".", "plot", "(", "total_steps", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "plt", ".", "ylabel", "(", "'Total Steps Taken'", ")", "\n", "plt", ".", "savefig", "(", "'Testing_results/steps.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.search_episode": [[7, 53], ["collections.namedtuple", "search.reset_search", "range", "search.step", "episode.append", "numpy.random.randint", "testing_helper.get_last_t_states", "searching_agent.act", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.reset_search", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.step", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.get_last_t_states", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.act"], ["def", "search_episode", "(", "search", ",", "searching_agent", ",", "row_position", ",", "col_position", ")", ":", "\n", "    ", "\"\"\"\n    This function implements one episode of the search agent. The goal of this agent is to reach\n    the specified target, out of the 9 region targets, which was picked by the target_selector_env\n    It uses the last five \"states\" to make decisions on its actions. Refer to the search_env file for more\n    information on these states\n\n    :param search: object of search environment\n    :param searching_agent: object of search RL agent\n    :param row_position: starting row position of agent\n    :param col_position: starting col position of agent\n    :return: episode reward, number of steps taken, ending row position, ending col position\n    \"\"\"", "\n", "Transition", "=", "collections", ".", "namedtuple", "(", "\"Transition\"", ",", "\n", "[", "\"state\"", ",", "\"local_map\"", ",", "\"action\"", ",", "\"reward\"", ",", "\"next_state\"", ",", "\"next_local_map\"", ",", "\n", "\"done\"", "]", ")", "\n", "episode", "=", "[", "]", "\n", "total_reward", "=", "0", "\n", "t", "=", "0", "\n", "state", ",", "local_map", "=", "search", ".", "reset_search", "(", "row_position", ",", "col_position", ")", "\n", "\n", "\n", "for", "time", "in", "range", "(", "config", ".", "max_steps_search", ")", ":", "\n", "        ", "if", "time", "<", "5", ":", "\n", "            ", "action", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "5", ")", "\n", "", "else", ":", "\n", "            ", "states", ",", "local_maps", "=", "get_last_t_states", "(", "5", ",", "episode", ",", "search", ".", "vision_size", "+", "6", ")", "\n", "action", "=", "searching_agent", ".", "act", "(", "states", ",", "local_maps", ")", "\n", "\n", "", "next_state", ",", "next_local_map", ",", "reward", ",", "done", "=", "search", ".", "step", "(", "action", ",", "time", ")", "\n", "\n", "total_reward", "+=", "reward", "\n", "\n", "episode", ".", "append", "(", "Transition", "(", "\n", "state", "=", "state", ",", "local_map", "=", "local_map", ",", "action", "=", "action", ",", "reward", "=", "reward", ",", "next_state", "=", "next_state", ",", "\n", "next_local_map", "=", "next_local_map", ",", "done", "=", "done", ")", ")", "\n", "\n", "state", "=", "next_state", "\n", "local_map", "=", "next_local_map", "\n", "\n", "if", "done", ":", "\n", "            ", "break", "\n", "\n", "", "t", "=", "time", "\n", "\n", "", "return", "total_reward", ",", "t", ",", "search", ".", "row_position", ",", "search", ".", "col_position", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.trace_episode": [[55, 114], ["collections.namedtuple", "trace.reset_tracing", "trace.calculate_covered", "range", "trace.step", "episode.append", "numpy.random.randint", "testing_helper.get_last_t_states", "tracing_agent.act", "collections.namedtuple.", "trace.calculate_covered", "target.select_next_target"], "function", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.step", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.get_last_t_states", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.A2C.A2CAgent.act", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.select_next_target"], ["", "def", "trace_episode", "(", "trace", ",", "tracing_agent", ",", "row_position", ",", "col_position", ",", "target", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function implements a single episode of trace. After reaching the target from search, an episode of trace\n    is run, where the drone uses information it has gathered during search, and new information it encounters,\n    to locate and cover areas of interest. If it finds little in its immediate area, we pick a new target and\n    repeat the search-trace process\n\n    :param trace: object of trace environment\n    :param tracing_agent: object of trace RL agent\n    :param row_position: starting row position of trace agent\n    :param col_position: starting col position of trace agent\n    :param target: object of target selection env. This should always be passed in testing\n    :return: episode reward, time steps taken, ending row position, ending col position\n    \"\"\"", "\n", "Transition", "=", "collections", ".", "namedtuple", "(", "\"Transition\"", ",", "\n", "[", "\"state\"", ",", "\"local_map\"", ",", "\"action\"", ",", "\"reward\"", ",", "\"next_state\"", ",", "\"next_local_map\"", ",", "\n", "\"done\"", "]", ")", "\n", "episode", "=", "[", "]", "\n", "total_reward", "=", "0", "\n", "t", "=", "0", "\n", "state", ",", "local_map", "=", "trace", ".", "reset_tracing", "(", "row_position", ",", "col_position", ")", "\n", "coverage", "=", "trace", ".", "calculate_covered", "(", "'mining'", ")", "\n", "\n", "#print(\"Start Trace: {}\".format(np.sum(trace.visited)))", "\n", "\n", "for", "time", "in", "range", "(", "config", ".", "max_steps_trace", ")", ":", "\n", "        ", "if", "time", "<", "5", ":", "\n", "            ", "action", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "5", ")", "\n", "", "else", ":", "\n", "            ", "states", ",", "local_maps", "=", "get_last_t_states", "(", "5", ",", "episode", ",", "trace", ".", "vision_size", "+", "4", ")", "\n", "action", "=", "tracing_agent", ".", "act", "(", "states", ",", "local_maps", ")", "\n", "\n", "", "next_state", ",", "next_local_map", ",", "reward", ",", "done", "=", "trace", ".", "step", "(", "action", ",", "time", ")", "\n", "total_reward", "+=", "reward", "\n", "\n", "episode", ".", "append", "(", "Transition", "(", "\n", "state", "=", "state", ",", "local_map", "=", "local_map", ",", "action", "=", "action", ",", "reward", "=", "reward", ",", "next_state", "=", "next_state", ",", "\n", "next_local_map", "=", "next_local_map", ",", "done", "=", "done", ")", ")", "\n", "\n", "state", "=", "next_state", "\n", "local_map", "=", "next_local_map", "\n", "\n", "if", "done", ":", "\n", "            ", "break", "\n", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "            ", "if", "(", "time", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "                ", "new_coverage", "=", "trace", ".", "calculate_covered", "(", "'mining'", ")", "\n", "if", "new_coverage", "-", "coverage", "<", ".005", ":", "\n", "                    ", "next_target", "=", "target", ".", "select_next_target", "(", "trace", ".", "row_position", ",", "trace", ".", "col_position", ")", "\n", "if", "next_target", "!=", "trace", ".", "current_target_index", ":", "\n", "                        ", "break", "\n", "", "", "coverage", "=", "new_coverage", "\n", "\n", "", "", "t", "=", "time", "\n", "\n", "#print(\"End Trace: {}\".format(np.sum(trace.visited)))", "\n", "\n", "", "return", "total_reward", ",", "t", ",", "trace", ".", "row_position", ",", "trace", ".", "col_position", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.get_last_t_states": [[116, 130], ["enumerate", "numpy.asarray", "numpy.reshape", "numpy.asarray", "numpy.reshape", "np.reshape.append", "np.reshape.append"], "function", ["None"], ["", "def", "get_last_t_states", "(", "t", ",", "episode", ",", "size", ")", ":", "\n", "    ", "states", "=", "[", "]", "\n", "maps", "=", "[", "]", "\n", "for", "i", ",", "transition", "in", "enumerate", "(", "episode", "[", "-", "t", ":", "]", ")", ":", "\n", "        ", "states", ".", "append", "(", "transition", ".", "state", ")", "\n", "maps", ".", "append", "(", "transition", ".", "local_map", ")", "\n", "\n", "", "states", "=", "np", ".", "asarray", "(", "states", ")", "\n", "states", "=", "np", ".", "reshape", "(", "states", ",", "[", "1", ",", "t", ",", "size", "]", ")", "\n", "\n", "maps", "=", "np", ".", "asarray", "(", "maps", ")", "\n", "maps", "=", "np", ".", "reshape", "(", "maps", ",", "[", "1", ",", "t", ",", "25", "*", "25", "]", ")", "\n", "\n", "return", "states", ",", "maps", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Testing.testing_helper.save_plots": [[131, 163], ["agent.save_local_map", "agent.plot_path", "agent.save_map", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.clf", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.clf", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.clf", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.clf", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.save_local_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.plot_path", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.save_map"], ["", "def", "save_plots", "(", "num", ",", "agent", ",", "folder", ",", "average_rewards", "=", "None", ",", "episode_rewards", "=", "None", ",", "episode_covered", "=", "None", ",", "mining_coverage", "=", "None", ",", "map_obj", "=", "None", ")", ":", "\n", "    ", "agent", ".", "save_local_map", "(", "'Testing_results/ddrqn_local_map'", "+", "str", "(", "num", ")", "+", "'.jpg'", ")", "\n", "agent", ".", "plot_path", "(", "'Testing_results/ddrqn_drone_path'", "+", "str", "(", "num", ")", "+", "'.jpg'", ")", "\n", "agent", ".", "save_map", "(", "'Testing_results/ddrqn_map'", "+", "str", "(", "num", ")", "+", "'.jpg'", ",", "map_obj", ")", "\n", "\n", "if", "average_rewards", "is", "not", "None", ":", "\n", "        ", "plt", ".", "plot", "(", "average_rewards", ")", "\n", "plt", ".", "ylabel", "(", "'Averaged Episode reward'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "plt", ".", "savefig", "(", "'Testing_results/'", "+", "str", "(", "folder", ")", "+", "'/ddrqn_average_reward.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "", "if", "episode_rewards", "is", "not", "None", ":", "\n", "        ", "plt", ".", "plot", "(", "episode_rewards", ")", "\n", "plt", ".", "ylabel", "(", "'Episode reward'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "plt", ".", "savefig", "(", "'Testing_results/'", "+", "str", "(", "folder", ")", "+", "'/ddrqn_reward.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "", "if", "episode_covered", "is", "not", "None", ":", "\n", "        ", "plt", ".", "plot", "(", "episode_covered", ")", "\n", "plt", ".", "ylabel", "(", "'Percent Covered'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "plt", ".", "savefig", "(", "'Testing_results/ddrqn_coverage.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "", "if", "mining_coverage", "is", "not", "None", ":", "\n", "        ", "plt", ".", "plot", "(", "mining_coverage", ")", "\n", "plt", ".", "xlabel", "(", "'Iteration'", ")", "\n", "plt", ".", "ylabel", "(", "'Episode Mining Coverage'", ")", "\n", "plt", ".", "savefig", "(", "'Testing_results/mining_coverage.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.visited.Visited.__init__": [[13, 18], ["numpy.ones", "numpy.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "numRows", ",", "numCols", ")", ":", "\n", "        ", "self", ".", "rows", "=", "numRows", "\n", "self", ".", "cols", "=", "numCols", "\n", "self", ".", "visited", "=", "np", ".", "ones", "(", "[", "numRows", ",", "numCols", "]", ")", "\n", "self", ".", "search_visited", "=", "np", ".", "ones", "(", "[", "numRows", ",", "numCols", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.visited.Visited.reset_visited": [[19, 21], ["numpy.ones"], "methods", ["None"], ["", "def", "reset_visited", "(", "self", ")", ":", "\n", "        ", "self", ".", "visited", "=", "np", ".", "ones", "(", "[", "self", ".", "rows", ",", "self", ".", "cols", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.visited.Visited.reset_search_visited": [[22, 24], ["numpy.ones"], "methods", ["None"], ["", "def", "reset_search_visited", "(", "self", ")", ":", "\n", "        ", "self", ".", "search_visited", "=", "np", ".", "ones", "(", "[", "self", ".", "rows", ",", "self", ".", "cols", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.visited.Visited.visited_position": [[25, 29], ["None"], "methods", ["None"], ["", "def", "visited_position", "(", "self", ",", "row", ",", "col", ",", "search", "=", "False", ")", ":", "\n", "        ", "self", ".", "visited", "[", "row", ",", "col", "]", "=", "0", "\n", "if", "search", ":", "\n", "            ", "self", ".", "search_visited", "[", "row", ",", "col", "]", "=", "0", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.map.Map.__init__": [[18, 24], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "numRows", ",", "numCols", ")", ":", "\n", "        ", "self", ".", "rows", "=", "numRows", "\n", "self", ".", "cols", "=", "numCols", "\n", "self", ".", "map", "=", "np", ".", "zeros", "(", "[", "self", ".", "rows", ",", "self", ".", "cols", "]", ")", "\n", "self", ".", "search_map", "=", "np", ".", "zeros", "(", "[", "self", ".", "rows", ",", "self", ".", "cols", "]", ")", "\n", "self", ".", "sight_distance", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.map.Map.reset_map": [[26, 28], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset_map", "(", "self", ")", ":", "\n", "        ", "self", ".", "map", "=", "np", ".", "zeros", "(", "[", "self", ".", "rows", ",", "self", ".", "cols", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.map.Map.reset_search_map": [[29, 31], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset_search_map", "(", "self", ")", ":", "\n", "        ", "self", ".", "search_map", "=", "np", ".", "zeros", "(", "[", "self", ".", "rows", ",", "self", ".", "cols", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.map.Map.update_map": [[32, 46], ["range", "range"], "methods", ["None"], ["", "def", "update_map", "(", "self", ",", "image", ",", "row", ",", "col", ",", "search", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param image: the 5x5 image the drone sees\n        :param row: drone's row position\n        :param col: drone's col position\n        :param search: whether this update is for a search episode (true) or trace episode (false)\n        :return:\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "sight_distance", "*", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "sight_distance", "*", "2", ")", ":", "\n", "                ", "self", ".", "map", "[", "row", "+", "i", "-", "self", ".", "sight_distance", ",", "col", "+", "j", "-", "self", ".", "sight_distance", "]", "=", "image", "[", "i", ",", "j", "]", "\n", "if", "search", ":", "\n", "                    ", "self", ".", "search_map", "[", "row", "+", "i", "-", "self", ".", "sight_distance", ",", "col", "+", "j", "-", "self", ".", "sight_distance", "]", "=", "image", "[", "i", ",", "j", "]", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.reset_env": [[78, 107], ["maps.reset_map", "visits.reset_visited", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.map.Map.reset_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.visited.Visited.reset_visited"], ["def", "reset_env", "(", "self", ",", "visits", ",", "maps", ")", ":", "\n", "        ", "\"\"\"\n        This function is run at the start of each episode. It resets the whole environment, so that the drone\n        starts back in the top left and all of its map info it has gathered is wiped\n        :param visits: visited.py object for keeping track of visited areas\n        :param maps: map.py object for keeping track of the information map\n        :return:\n        \"\"\"", "\n", "# Initialize tracking", "\n", "#self.__class__.map = np.zeros([self.totalRows, self.totalCols])", "\n", "#self.__class__.visited = np.ones([self.totalRows, self.totalCols])", "\n", "maps", ".", "reset_map", "(", ")", "\n", "self", ".", "__class__", ".", "map", "=", "maps", ".", "map", "\n", "visits", ".", "reset_visited", "(", ")", "\n", "self", ".", "__class__", ".", "visited", "=", "visits", ".", "visited", "\n", "\n", "# Reset env parameters", "\n", "self", ".", "start_row", "=", "random", ".", "randint", "(", "12", ",", "47", ")", "#was 47 - 167 for full random", "\n", "self", ".", "start_col", "=", "random", ".", "randint", "(", "12", ",", "47", ")", "\n", "\"\"\"\n        #This set of code for full random start\n        for region_index in range(9):\n            if self.regions[region_index][0] < self.start_row < self.regions[region_index][0]+60 and self.regions[region_index][1] \\\n                    < self.start_col < self.regions[region_index][1]+60:\n                self.__class__.current_target_index = region_index\n        \"\"\"", "\n", "self", ".", "__class__", ".", "current_target_index", "=", "0", "\n", "self", ".", "__class__", ".", "row_position", "=", "self", ".", "start_row", "\n", "self", ".", "__class__", ".", "col_position", "=", "self", ".", "start_col", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.get_classified_drone_image": [[108, 119], ["base_env.Env.sim.setDroneImgSize", "base_env.Env.sim.setNavigationMap", "base_env.Env.sim.getClassifiedDroneImageAt"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.setDroneImgSize", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.setNavigationMap", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.getClassifiedDroneImageAt"], ["", "def", "get_classified_drone_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function returns an image which is the 5x5 vision with mining probabilities\n        For the field, this should be replaced with whatever method is used to retrieve the mining probabilities\n        directly from the drone's camera\n        :return: mining probability for each cell within the drone's current vision\n        \"\"\"", "\n", "self", ".", "sim", ".", "setDroneImgSize", "(", "self", ".", "sight_distance", ",", "self", ".", "sight_distance", ")", "\n", "self", ".", "sim", ".", "setNavigationMap", "(", ")", "\n", "image", "=", "self", ".", "sim", ".", "getClassifiedDroneImageAt", "(", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.visited_position": [[120, 126], ["None"], "methods", ["None"], ["", "def", "visited_position", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Updates array that keeps track of the previous cells visited by the drone (doesn't consider peripheral vision)\n        :return: void\n        \"\"\"", "\n", "self", ".", "__class__", ".", "visited", "[", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_visited": [[132, 137], ["range", "range"], "methods", ["None"], ["def", "update_visited", "(", "self", ",", "visited", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "totalRows", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "totalCols", ")", ":", "\n", "                ", "if", "visited", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                    ", "self", ".", "__class__", ".", "visited", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.transfer_map": [[138, 143], ["range", "range"], "methods", ["None"], ["", "", "", "", "def", "transfer_map", "(", "self", ",", "map", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "totalRows", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "totalCols", ")", ":", "\n", "                ", "if", "map", "[", "i", "]", "[", "j", "]", ">", "0", ":", "\n", "                    ", "self", ".", "__class__", ".", "map", "[", "i", "]", "[", "j", "]", "=", "map", "[", "i", "]", "[", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_map": [[144, 153], ["range", "range"], "methods", ["None"], ["", "", "", "", "def", "update_map", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Adds new state information to the map of the entire region\n        :param image: 2d array of mining probabilities within the drone's vision (5x5)\n        :return: void\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "sight_distance", "*", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "sight_distance", "*", "2", ")", ":", "\n", "                ", "self", ".", "__class__", ".", "map", "[", "self", ".", "__class__", ".", "row_position", "+", "i", "-", "self", ".", "sight_distance", ",", "self", ".", "__class__", ".", "col_position", "+", "j", "-", "self", ".", "sight_distance", "]", "=", "image", "[", "i", ",", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.save_local_map": [[154, 165], ["plt.imshow", "plt.title", "plt.savefig", "plt.clf"], "methods", ["None"], ["", "", "", "def", "save_local_map", "(", "self", ",", "fname", ")", ":", "\n", "        ", "\"\"\"\n        Saves the current local map of the drone to an image file\n        :param fname: name of image to save\n        :return: void\n        \"\"\"", "\n", "plt", ".", "imshow", "(", "self", ".", "local_map", "[", ":", ",", ":", "]", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "title", "(", "\"Local Map\"", ")", "\n", "plt", ".", "savefig", "(", "fname", ")", "\n", "# plt.show()", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.save_map": [[166, 176], ["plt.imshow", "plt.title", "plt.savefig", "plt.clf"], "methods", ["None"], ["", "def", "save_map", "(", "self", ",", "fname", ",", "map_obj", ")", ":", "\n", "        ", "\"\"\"\n        Saves the current region map of the drone to an image file\n        :param fname: name of image to save\n        :return: void\n        \"\"\"", "\n", "plt", ".", "imshow", "(", "map_obj", ".", "map", "[", ":", ",", ":", "]", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "title", "(", "\"Region Map\"", ")", "\n", "plt", ".", "savefig", "(", "fname", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.plot_path": [[177, 187], ["plt.imshow", "plt.title", "plt.savefig", "plt.clf"], "methods", ["None"], ["", "def", "plot_path", "(", "self", ",", "fname", ")", ":", "\n", "        ", "\"\"\"\n        Saves the current path of the drone to an image file\n        :param fname: name of image to save\n        :return: void\n        \"\"\"", "\n", "plt", ".", "imshow", "(", "self", ".", "__class__", ".", "visited", "[", ":", ",", ":", "]", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "title", "(", "\"Drone Path\"", ")", "\n", "plt", ".", "savefig", "(", "fname", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.calculate_covered": [[188, 234], ["range", "range", "range", "int", "range", "range", "range", "int", "int", "range", "range", "int"], "methods", ["None"], ["", "def", "calculate_covered", "(", "self", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n        This function is used for us to observe performance via amount of area of interest covered.\n        In the field, this function will not be very helpful because we calculate the percent by using\n        the ground-truth data from ICRSsimulator.py. However, a similar function should probably be created as\n        a metric of field-performance\n        :param size: used to specify what kind of coverage we are calculating\n        :return: percent covered of 'size' coverage\n        \"\"\"", "\n", "covered", "=", "0", "\n", "\n", "if", "size", "==", "'local'", ":", "\n", "            ", "for", "i", "in", "range", "(", "25", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "25", ")", ":", "\n", "                    ", "if", "self", ".", "__class__", ".", "visited", "[", "i", "]", "[", "j", "]", "<", "1", ":", "\n", "                        ", "covered", "+=", "1", "\n", "\n", "", "", "", "percent_covered", "=", "covered", "/", "(", "25", "*", "25", ")", "\n", "\n", "", "elif", "size", "==", "'region'", ":", "\n", "            ", "for", "i", "in", "range", "(", "int", "(", "self", ".", "totalRows", "/", "3", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "int", "(", "self", ".", "totalCols", "/", "3", ")", ")", ":", "\n", "                    ", "if", "self", ".", "__class__", ".", "visited", "[", "i", "+", "self", ".", "regions", "[", "self", ".", "current_target_index", "]", "[", "0", "]", "]", "[", "j", "+", "self", ".", "regions", "[", "self", ".", "current_target_index", "]", "[", "1", "]", "]", "<", "1", ":", "\n", "                        ", "covered", "+=", "1", "\n", "\n", "", "", "", "percent_covered", "=", "covered", "/", "(", "self", ".", "totalRows", "/", "3", ")", "**", "2", "\n", "\n", "", "elif", "size", "==", "'mining'", ":", "\n", "            ", "mining", "=", "0", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "totalRows", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "int", "(", "self", ".", "totalCols", ")", ")", ":", "\n", "                    ", "if", "self", ".", "sim", ".", "ICRSmap", "[", "i", ",", "j", ",", "0", "]", ">", "0", ":", "\n", "                        ", "if", "self", ".", "__class__", ".", "map", "[", "i", "]", "[", "j", "]", ">", "0", ":", "\n", "                            ", "covered", "+=", "self", ".", "sim", ".", "ICRSmap", "[", "i", ",", "j", ",", "0", "]", "\n", "", "mining", "+=", "self", ".", "sim", ".", "ICRSmap", "[", "i", ",", "j", ",", "0", "]", "\n", "", "", "", "percent_covered", "=", "covered", "/", "mining", "\n", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "totalRows", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "totalCols", ")", ":", "\n", "                    ", "if", "self", ".", "__class__", ".", "visited", "[", "i", "]", "[", "j", "]", "<", "1", ":", "\n", "                        ", "covered", "+=", "1", "\n", "\n", "", "", "", "percent_covered", "=", "covered", "/", "(", "self", ".", "totalCols", "*", "self", ".", "totalRows", ")", "\n", "\n", "", "return", "percent_covered", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_target": [[235, 242], ["None"], "methods", ["None"], ["", "def", "update_target", "(", "self", ",", "next_target", ")", ":", "\n", "        ", "\"\"\"\n        Sets the drone's current target equal to the one the target selector chooses\n        :param next_target: whichever target is outputted by the target selector\n        :return:\n        \"\"\"", "\n", "self", ".", "__class__", ".", "current_target_index", "=", "next_target", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.set_simulation_map": [[243, 263], ["numpy.array", "numpy.array", "base_env.Env.sim.classify", "base_env.Env.sim.setMapSize", "base_env.Env.sim.createMap"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.classify", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.setMapSize", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.None.ICRSsimulator.ICRSsimulator.createMap"], ["", "def", "set_simulation_map", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        sets the pixel value thresholds for ICRS classification\n        :return: void\n        \"\"\"", "\n", "# Simulate classification of areas of interest", "\n", "lower", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "230", "]", ")", "#Was 0, 0, 230 for new maps (0, 0, 70) for old maps", "\n", "upper", "=", "np", ".", "array", "(", "[", "160", ",", "160", ",", "400", "]", ")", "\n", "interest_value", "=", "1", "# Mark these areas as being of highest interest", "\n", "self", ".", "sim", ".", "classify", "(", "'Area of Interest'", ",", "lower", ",", "upper", ",", "interest_value", ")", "\n", "\"\"\"\n        # Simulate classification of obstacles\n        lower = np.array([200, 50, 50])\n        upper = np.array([400, 200, 200])\n        interest_value = 0  # Mark these areas as being of no interest\n        self.sim.classify('Obstacle', lower, upper, interest_value)\n        \"\"\"", "\n", "\n", "self", ".", "sim", ".", "setMapSize", "(", "self", ".", "totalRows", ",", "self", ".", "totalCols", ")", "\n", "self", ".", "sim", ".", "createMap", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.__init__": [[11, 31], ["target_selector_env.SelectTarget.set_simulation_map", "np.zeros"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.set_simulation_map"], ["def", "__init__", "(", "self", ",", "visits", ")", ":", "\n", "# Set simulation", "\n", "        ", "self", ".", "set_simulation_map", "(", ")", "\n", "\n", "self", ".", "visits", "=", "visits", "\n", "# Define initial targets", "\n", "self", ".", "__class__", ".", "current_target_index", "=", "0", "\n", "self", ".", "current_target", "=", "self", ".", "targets", "[", "self", ".", "__class__", ".", "current_target_index", "]", "\n", "\n", "# Set task-specific parameters", "\n", "self", ".", "num_actions", "=", "9", "\n", "self", ".", "region_values", "=", "np", ".", "zeros", "(", "[", "9", ",", "3", "]", ")", "\n", "\n", "# Set reward values", "\n", "self", ".", "MINING_REWARD", "=", "100", "\n", "self", ".", "DISTANCE_PENALTY", "=", "-", "2", "\n", "self", ".", "COVERED_PENALTY", "=", "-", "1500", "\n", "self", ".", "HOVER_PENALTY", "=", "-", "100", "\n", "\n", "self", ".", "correct_target", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.set_target": [[32, 56], ["target_selector_env.SelectTarget.update_regions", "target_selector_env.SelectTarget.get_reward", "target_selector_env.SelectTarget.region_values.reshape"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.update_regions", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_reward"], ["", "def", "set_target", "(", "self", ",", "next_target", ",", "row", ",", "col", ")", ":", "\n", "        ", "\"\"\"\n        This function sets the chosen target as the current_target_index for the search and trace environments\n        :param next_target: The chosen target\n        :param row: current row position\n        :param col: current col position\n        :return:\n        \"\"\"", "\n", "self", ".", "__class__", ".", "row_position", "=", "row", "\n", "self", ".", "__class__", ".", "col_position", "=", "col", "\n", "\n", "self", ".", "current_target", "=", "self", ".", "targets", "[", "next_target", "]", "\n", "\n", "self", ".", "update_regions", "(", ")", "\n", "\n", "#The reward was mostly used for when we were trying to train this as an RL agent. Since we found it", "\n", "#works better as an equation, the reward is now only for monitoring performance", "\n", "reward", "=", "self", ".", "get_reward", "(", "next_target", ")", "\n", "\n", "self", ".", "__class__", ".", "current_target_index", "=", "next_target", "\n", "\n", "state", "=", "self", ".", "region_values", ".", "reshape", "(", "1", ",", "27", ")", "\n", "\n", "return", "next_target", ",", "state", ",", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_reward": [[57, 67], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "next_target", ")", ":", "\n", "\n", "        ", "hover", "=", "False", "\n", "if", "next_target", "==", "self", ".", "__class__", ".", "current_target_index", ":", "\n", "            ", "hover", "=", "True", "\n", "\n", "", "reward", "=", "self", ".", "region_values", "[", "next_target", ",", "0", "]", "*", "self", ".", "MINING_REWARD", "+", "self", ".", "region_values", "[", "next_target", ",", "1", "]", "*", "self", ".", "COVERED_PENALTY", "+", "self", ".", "region_values", "[", "next_target", ",", "2", "]", "*", "self", ".", "DISTANCE_PENALTY", "+", "hover", "*", "self", ".", "HOVER_PENALTY", "\n", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_state": [[68, 72], ["target_selector_env.SelectTarget.update_regions", "target_selector_env.SelectTarget.region_values.reshape"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.update_regions"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "update_regions", "(", ")", "\n", "state", "=", "self", ".", "region_values", ".", "reshape", "(", "1", ",", "27", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.update_regions": [[73, 82], ["target_selector_env.SelectTarget.get_mining", "target_selector_env.SelectTarget.get_covered", "target_selector_env.SelectTarget.get_distance"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_mining", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_covered", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_distance"], ["", "def", "update_regions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function calculates the mining and coverage that we found/covered from search and trace episodes,\n        and updates self.region_values to include that information\n        :return:\n        \"\"\"", "\n", "self", ".", "region_values", "[", ":", ",", "0", "]", "=", "self", ".", "get_mining", "(", ")", "\n", "self", ".", "region_values", "[", ":", ",", "1", "]", "=", "self", ".", "get_covered", "(", ")", "\n", "self", ".", "region_values", "[", ":", ",", "2", "]", "=", "self", ".", "get_distance", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_mining": [[83, 103], ["np.zeros", "range", "range", "int", "range", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_mining", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the percent of the region, out of what has been seen, that has been mining. We define mining\n        as a probability >0, since our images are precise, but in the field this value should be higher, since most\n        cells will not have exactly 0 probability of mining\n        :return: num cells with >0 mining divided by the num cells that have been covered, for each region (array of length 9)\n        \"\"\"", "\n", "mining", "=", "np", ".", "zeros", "(", "9", ")", "\n", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "v", "=", "0", "\n", "for", "j", "in", "range", "(", "int", "(", "self", ".", "totalRows", "/", "3", ")", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "int", "(", "self", ".", "totalCols", "/", "3", ")", ")", ":", "\n", "                    ", "if", "self", ".", "map", "[", "int", "(", "j", "+", "self", ".", "regions", "[", "i", "]", "[", "0", "]", ")", ",", "int", "(", "k", "+", "self", ".", "regions", "[", "i", "]", "[", "1", "]", ")", "]", ">", "0", ":", "\n", "                        ", "mining", "[", "i", "]", "+=", "1", "\n", "", "if", "self", ".", "visited", "[", "int", "(", "j", "+", "self", ".", "regions", "[", "i", "]", "[", "0", "]", ")", ",", "int", "(", "k", "+", "self", ".", "regions", "[", "i", "]", "[", "1", "]", ")", "]", "<", "1", ":", "\n", "                        ", "v", "+=", "1", "\n", "", "", "", "mining", "[", "i", "]", "/=", "v", "+", "1", "\n", "\n", "", "return", "mining", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_covered": [[104, 118], ["np.zeros", "range", "range", "int", "range", "int", "int", "int"], "methods", ["None"], ["", "def", "get_covered", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: the percentage of each region that the drone has flown over (array of length 9)\n        \"\"\"", "\n", "covered", "=", "np", ".", "zeros", "(", "9", ")", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "int", "(", "self", ".", "totalRows", "/", "3", ")", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "int", "(", "self", ".", "totalRows", "/", "3", ")", ")", ":", "\n", "                    ", "if", "self", ".", "visited", "[", "int", "(", "j", "+", "self", ".", "regions", "[", "i", "]", "[", "0", "]", ")", ",", "int", "(", "k", "+", "self", ".", "regions", "[", "i", "]", "[", "1", "]", ")", "]", "<", "1", ":", "\n", "                        ", "covered", "[", "i", "]", "+=", "1", "\n", "", "", "", "covered", "[", "i", "]", "=", "covered", "[", "i", "]", "/", "(", "(", "self", ".", "totalRows", "/", "3", ")", "**", "2", ")", "\n", "\n", "", "return", "covered", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.get_distance": [[119, 130], ["np.zeros", "range", "math.sqrt"], "methods", ["None"], ["", "def", "get_distance", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: euclidean distance from current position to position of each target (array of length 9)\n        \"\"\"", "\n", "distance", "=", "np", ".", "zeros", "(", "9", ")", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "distance", "[", "i", "]", "=", "math", ".", "sqrt", "(", "(", "self", ".", "__class__", ".", "row_position", "-", "self", ".", "targets", "[", "i", "]", "[", "0", "]", ")", "**", "2", "+", "\n", "(", "self", ".", "__class__", ".", "col_position", "-", "self", ".", "targets", "[", "i", "]", "[", "1", "]", ")", "**", "2", ")", "\n", "\n", "", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.select_next_target": [[131, 152], ["target_selector_env.SelectTarget.update_regions", "np.zeros", "range", "np.amax", "np.argmax"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.update_regions"], ["", "def", "select_next_target", "(", "self", ",", "row", ",", "col", ")", ":", "\n", "        ", "\"\"\"\n        This function is the formula for picking the next target. We use a weighted sum of mining, coverage, and distance,\n        and pick the target for which that value is the highest\n        :param row: current row position\n        :param col: current col position\n        :return: index of chosen target\n        \"\"\"", "\n", "self", ".", "__class__", ".", "row_position", "=", "row", "\n", "self", ".", "__class__", ".", "col_position", "=", "col", "\n", "self", ".", "update_regions", "(", ")", "\n", "next_targets", "=", "np", ".", "zeros", "(", "9", ")", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "next_targets", "[", "i", "]", "=", "self", ".", "region_values", "[", "i", ",", "0", "]", "*", "self", ".", "MINING_REWARD", "+", "self", ".", "region_values", "[", "i", ",", "1", "]", "*", "self", ".", "COVERED_PENALTY", "+", "self", ".", "region_values", "[", "i", ",", "2", "]", "*", "self", ".", "DISTANCE_PENALTY", "\n", "if", "i", "==", "self", ".", "current_target_index", ":", "\n", "                ", "next_targets", "[", "i", "]", "+=", "self", ".", "HOVER_PENALTY", "\n", "\n", "# print(self.region_values)", "\n", "", "", "self", ".", "target_value", "=", "np", ".", "amax", "(", "next_targets", ")", "\n", "return", "np", ".", "argmax", "(", "next_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.target_selector_env.SelectTarget.simple_select": [[153, 156], ["None"], "methods", ["None"], ["", "def", "simple_select", "(", "self", ")", ":", "\n", "        ", "next_target", "=", "self", ".", "current_target_index", "+", "1", "\n", "return", "next_target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.__init__": [[13, 34], ["search_env.Search.set_simulation_map"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.set_simulation_map"], ["def", "__init__", "(", "self", ",", "visits", ",", "map_obj", ")", ":", "\n", "# Define initial targets", "\n", "        ", "self", ".", "local_target", "=", "[", "24", ",", "24", "]", "\n", "self", ".", "__class__", ".", "current_target_index", "=", "0", "\n", "self", ".", "current_target", "=", "self", ".", "targets", "[", "self", ".", "__class__", ".", "current_target_index", "]", "\n", "\n", "self", ".", "map_obj", "=", "map_obj", "\n", "self", ".", "visits", "=", "visits", "\n", "# Set simulation", "\n", "self", ".", "set_simulation_map", "(", ")", "\n", "#self.sim.showMap()", "\n", "\n", "# Set task-specific parameters", "\n", "self", ".", "num_actions", "=", "5", "\n", "\n", "# Set reward values", "\n", "self", ".", "MINING_REWARD", "=", "100", "\n", "self", ".", "TARGET_REWARD", "=", "700", "\n", "self", ".", "END_REWARD", "=", "100", "\n", "self", ".", "VISITED_PENALTY", "=", "-", "25", "\n", "self", ".", "HOVER_PENALTY", "=", "-", "25", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.reset_search": [[35, 70], ["search_env.Search.visits.reset_search_visited", "search_env.Search.map_obj.reset_search_map", "print", "search_env.Search.next_local_map", "search_env.Search.get_local_map", "search_env.Search.local_map.reshape", "search_env.Search.get_classified_drone_image", "search_env.Search.flatten_state", "np.append", "np.append", "np.append", "np.append", "np.append", "np.append", "np.reshape"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.visited.Visited.reset_search_visited", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.map.Map.reset_search_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.next_local_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_local_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.get_classified_drone_image", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.flatten_state"], ["", "def", "reset_search", "(", "self", ",", "row", ",", "col", ")", ":", "\n", "        ", "\"\"\"\n        This function resets the search environment, and is called at the start of each search episode\n        :param row: current row position\n        :param col: current col position\n        :return:\n        \"\"\"", "\n", "self", ".", "visits", ".", "reset_search_visited", "(", ")", "\n", "self", ".", "visited", "=", "self", ".", "visits", ".", "search_visited", "\n", "self", ".", "map_obj", ".", "reset_search_map", "(", ")", "\n", "self", ".", "__class__", ".", "row_position", "=", "row", "\n", "self", ".", "__class__", ".", "col_position", "=", "col", "\n", "self", ".", "current_target", "=", "self", ".", "targets", "[", "self", ".", "__class__", ".", "current_target_index", "]", "\n", "print", "(", "self", ".", "current_target", ")", "\n", "\n", "# Get new local map", "\n", "self", ".", "next_local_map", "(", ")", "\n", "self", ".", "local_map", "=", "self", ".", "get_local_map", "(", ")", "\n", "flattened_local_map", "=", "self", ".", "local_map", ".", "reshape", "(", "1", ",", "1", ",", "625", ")", "\n", "\n", "\n", "#Get new drone state", "\n", "\n", "state", "=", "self", ".", "get_classified_drone_image", "(", ")", "\n", "state", "=", "self", ".", "flatten_state", "(", "state", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "1", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "1", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "1", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "1", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "local_target", "[", "0", "]", "-", "self", ".", "__class__", ".", "row_position", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "local_target", "[", "1", "]", "-", "self", ".", "__class__", ".", "col_position", ")", "\n", "#state = np.append(state, self.calculate_covered('region'))", "\n", "state", "=", "np", ".", "reshape", "(", "state", ",", "[", "1", ",", "1", ",", "self", ".", "vision_size", "+", "6", "]", ")", "\n", "\n", "return", "state", ",", "flattened_local_map", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.step": [[71, 162], ["search_env.Search.get_classified_drone_image", "search_env.Search.get_reward", "search_env.Search.visited_position", "search_env.Search.map_obj.update_map", "search_env.Search.local_target_reached", "search_env.Search.get_local_map", "search_env.Search.local_map.reshape", "search_env.Search.flatten_state", "np.append", "np.append", "np.append", "np.append", "np.append", "np.append", "np.reshape", "search_env.Search.target_reached", "search_env.Search.next_local_map"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.get_classified_drone_image", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_reward", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.visited_position", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.base_env.Env.update_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.local_target_reached", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_local_map", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.flatten_state", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.target_reached", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.next_local_map"], ["", "def", "step", "(", "self", ",", "action", ",", "time", ")", ":", "\n", "        ", "self", ".", "done", "=", "False", "\n", "next_row", "=", "self", ".", "__class__", ".", "row_position", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "\n", "\n", "# Drone not allowed to move outside of the current local map (updates when target is reached)", "\n", "if", "action", "==", "0", ":", "\n", "            ", "if", "self", ".", "__class__", ".", "row_position", "<", "self", ".", "local_map_upper_row", "and", "self", ".", "__class__", ".", "row_position", "<", "(", "\n", "self", ".", "totalRows", "-", "self", ".", "sight_distance", "-", "1", ")", ":", "# Forward one grid", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "+", "1", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "\n", "", "else", ":", "\n", "                ", "action", "=", "5", "\n", "", "", "elif", "action", "==", "1", ":", "\n", "            ", "if", "self", ".", "__class__", ".", "col_position", "<", "self", ".", "local_map_upper_col", "and", "self", ".", "__class__", ".", "col_position", "<", "(", "\n", "self", ".", "totalCols", "-", "self", ".", "sight_distance", "-", "1", ")", ":", "# right one grid", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "+", "1", "\n", "", "else", ":", "\n", "                ", "action", "=", "5", "\n", "", "", "elif", "action", "==", "2", ":", "\n", "            ", "if", "self", ".", "__class__", ".", "row_position", ">", "self", ".", "local_map_lower_row", "and", "self", ".", "__class__", ".", "row_position", ">", "self", ".", "sight_distance", "+", "1", ":", "# back one grid", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "-", "1", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "\n", "", "else", ":", "\n", "                ", "action", "=", "5", "\n", "", "", "elif", "action", "==", "3", ":", "\n", "            ", "if", "self", ".", "__class__", ".", "col_position", ">", "self", ".", "local_map_lower_col", "and", "self", ".", "__class__", ".", "col_position", ">", "self", ".", "sight_distance", "+", "1", ":", "# left one grid", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "-", "1", "\n", "", "else", ":", "\n", "                ", "action", "=", "5", "\n", "", "", "if", "action", "==", "5", "or", "action", "==", "4", ":", "# This hardcodes the drone to move towards the target if it tries to take an invalid action", "\n", "            ", "if", "self", ".", "__class__", ".", "row_position", "<", "self", ".", "local_map_upper_row", "and", "self", ".", "__class__", ".", "row_position", "<", "(", "\n", "self", ".", "totalRows", "-", "self", ".", "sight_distance", "-", "1", ")", "and", "self", ".", "__class__", ".", "row_position", "<", "self", ".", "local_target", "[", "0", "]", ":", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "+", "1", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "\n", "", "elif", "self", ".", "__class__", ".", "col_position", "<", "self", ".", "local_map_upper_col", "and", "self", ".", "__class__", ".", "col_position", "<", "(", "\n", "self", ".", "totalCols", "-", "self", ".", "sight_distance", "-", "1", ")", "and", "self", ".", "__class__", ".", "col_position", "<", "self", ".", "local_target", "[", "1", "]", ":", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "+", "1", "\n", "", "elif", "self", ".", "__class__", ".", "row_position", ">", "self", ".", "local_map_lower_row", "and", "self", ".", "__class__", ".", "row_position", ">", "self", ".", "sight_distance", "+", "1", "and", "self", ".", "__class__", ".", "row_position", ">", "self", ".", "local_target", "[", "0", "]", ":", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "-", "1", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "\n", "", "elif", "self", ".", "__class__", ".", "col_position", ">", "self", ".", "local_map_lower_col", "and", "self", ".", "__class__", ".", "col_position", ">", "self", ".", "sight_distance", "+", "1", "and", "self", ".", "__class__", ".", "col_position", ">", "self", ".", "local_target", "[", "1", "]", ":", "\n", "                ", "next_row", "=", "self", ".", "__class__", ".", "row_position", "\n", "next_col", "=", "self", ".", "__class__", ".", "col_position", "-", "1", "\n", "\n", "", "", "self", ".", "__class__", ".", "row_position", "=", "next_row", "\n", "self", ".", "__class__", ".", "col_position", "=", "next_col", "\n", "#print(self.row_position, self.col_position)", "\n", "#print(self.local_target)", "\n", "\n", "image", "=", "self", ".", "get_classified_drone_image", "(", ")", "\n", "\n", "reward", "=", "self", ".", "get_reward", "(", "image", ",", "action", ")", "\n", "\n", "self", ".", "visited_position", "(", ")", "\n", "self", ".", "map_obj", ".", "update_map", "(", "image", ",", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", ",", "True", ")", "\n", "self", ".", "__class__", ".", "map", "=", "self", ".", "map_obj", ".", "map", "\n", "#self.update_map(image)", "\n", "\n", "if", "time", ">", "self", ".", "config", ".", "max_steps_search", "or", "self", ".", "target_reached", "(", ")", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "\n", "", "if", "self", ".", "local_target_reached", "(", ")", ":", "\n", "#Chooses a new local map if it has reached the local target, centered on the drone", "\n", "            ", "self", ".", "next_local_map", "(", ")", "\n", "\n", "", "\"\"\"\n        #Get new drone state\n        State consists of 5x5 image of mining probabilities, flattened to be 1x25, and then appends\n        the visited information for the cell above, to the right, below, and to the left of it\n        It also appends the row distance and column distance to the local target\n        \"\"\"", "\n", "\n", "self", ".", "local_map", "=", "self", ".", "get_local_map", "(", ")", "\n", "flattened_local_map", "=", "self", ".", "local_map", ".", "reshape", "(", "1", ",", "1", ",", "625", ")", "\n", "\n", "state", "=", "self", ".", "flatten_state", "(", "image", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "visited", "[", "self", ".", "__class__", ".", "row_position", "+", "1", ",", "self", ".", "__class__", ".", "col_position", "]", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "visited", "[", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", "+", "1", "]", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "visited", "[", "self", ".", "__class__", ".", "row_position", "-", "1", ",", "self", ".", "__class__", ".", "col_position", "]", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "visited", "[", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", "+", "1", "]", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "local_target", "[", "0", "]", "-", "self", ".", "__class__", ".", "row_position", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "local_target", "[", "1", "]", "-", "self", ".", "__class__", ".", "col_position", ")", "\n", "state", "=", "np", ".", "reshape", "(", "state", ",", "[", "1", ",", "1", ",", "self", ".", "vision_size", "+", "6", "]", ")", "\n", "\n", "return", "state", ",", "flattened_local_map", ",", "reward", ",", "self", ".", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_reward": [[163, 182], ["search_env.Search.local_target_reached", "search_env.Search.target_reached"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.local_target_reached", "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.target_reached"], ["", "def", "get_reward", "(", "self", ",", "image", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Calculates reward based on target, mining seen, and whether the current state has already been visited\n        This is for the purpose of training the search network. Reward should not be used in the field unless it\n        is to monitor performance\n        :param image: 2d array of mining probabilities within the drone's vision\n        :return: reward value\n        \"\"\"", "\n", "mining_prob", "=", "image", "[", "self", ".", "sight_distance", ",", "self", ".", "sight_distance", "]", "\n", "\n", "reward", "=", "mining_prob", "*", "self", ".", "MINING_REWARD", "*", "self", ".", "visited", "[", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", "]", "\n", "reward", "+=", "self", ".", "local_target_reached", "(", ")", "*", "self", ".", "TARGET_REWARD", "+", "self", ".", "target_reached", "(", ")", "*", "self", ".", "END_REWARD", "\n", "\n", "if", "action", "==", "4", "or", "action", "==", "5", ":", "\n", "            ", "reward", "+=", "self", ".", "HOVER_PENALTY", "\n", "\n", "", "if", "self", ".", "visited", "[", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", "]", "==", "0", ":", "\n", "            ", "reward", "+=", "self", ".", "VISITED_PENALTY", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_local_map": [[183, 193], ["deepcopy"], "methods", ["None"], ["", "def", "get_local_map", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Creates local map (shape: 25x25) of mining areas from the region map\n        :return: local_map\n        \"\"\"", "\n", "local_map", "=", "deepcopy", "(", "self", ".", "map_obj", ".", "search_map", "[", "self", ".", "local_map_lower_row", ":", "self", ".", "local_map_upper_row", "+", "1", ",", "\n", "self", ".", "local_map_lower_col", ":", "self", ".", "local_map_upper_col", "+", "1", "]", ")", "\n", "#local_map = deepcopy(self.__class__.map[self.local_map_lower_row:self.local_map_upper_row+1, self.local_map_lower_col:self.local_map_upper_col+1])", "\n", "local_map", "[", "(", "self", ".", "local_target", "[", "0", "]", "-", "self", ".", "local_map_lower_row", ")", ",", "(", "self", ".", "local_target", "[", "1", "]", "-", "self", ".", "local_map_lower_col", ")", "]", "=", "1", "\n", "return", "local_map", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.next_local_map": [[194, 219], ["search_env.Search.get_local_target"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_local_target"], ["", "def", "next_local_map", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Sets boundaries on local map, placing the drone at the center of the new map\n        :return: void\n        \"\"\"", "\n", "self", ".", "local_map_lower_row", "=", "self", ".", "__class__", ".", "row_position", "-", "12", "\n", "self", ".", "local_map_upper_row", "=", "self", ".", "__class__", ".", "row_position", "+", "12", "\n", "self", ".", "local_map_lower_col", "=", "self", ".", "__class__", ".", "col_position", "-", "12", "\n", "self", ".", "local_map_upper_col", "=", "self", ".", "__class__", ".", "col_position", "+", "12", "\n", "\n", "# Corrects for indexing error if drone is too close to a border", "\n", "if", "self", ".", "local_map_lower_row", "<", "0", ":", "\n", "            ", "self", ".", "local_map_lower_row", "=", "0", "\n", "self", ".", "local_map_upper_row", "=", "24", "\n", "", "if", "self", ".", "local_map_lower_col", "<", "0", ":", "\n", "            ", "self", ".", "local_map_lower_col", "=", "0", "\n", "self", ".", "local_map_upper_col", "=", "24", "\n", "", "if", "self", ".", "local_map_upper_row", ">=", "180", ":", "\n", "            ", "self", ".", "local_map_upper_row", "=", "179", "\n", "self", ".", "local_map_lower_row", "=", "155", "\n", "", "if", "self", ".", "local_map_upper_col", ">=", "180", ":", "\n", "            ", "self", ".", "local_map_upper_col", "=", "179", "\n", "self", ".", "local_map_lower_col", "=", "155", "\n", "\n", "", "self", ".", "get_local_target", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.target_reached": [[220, 241], ["print"], "methods", ["None"], ["", "def", "target_reached", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: boolean, true if drone is at the target position\n        \"\"\"", "\n", "target", "=", "False", "\n", "row", "=", "False", "\n", "col", "=", "False", "\n", "\n", "if", "self", ".", "current_target", "[", "0", "]", "-", "self", ".", "sight_distance", "<=", "self", ".", "__class__", ".", "row_position", "<=", "self", ".", "current_target", "[", "0", "]", "+", "self", ".", "sight_distance", ":", "\n", "            ", "row", "=", "True", "\n", "\n", "", "if", "self", ".", "current_target", "[", "1", "]", "-", "self", ".", "sight_distance", "<=", "self", ".", "__class__", ".", "col_position", "<=", "self", ".", "current_target", "[", "1", "]", "+", "self", ".", "sight_distance", ":", "\n", "            ", "col", "=", "True", "\n", "\n", "\n", "\n", "", "if", "row", "and", "col", ":", "\n", "            ", "target", "=", "True", "\n", "print", "(", "self", ".", "current_target", ",", "'reached'", ")", "\n", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.local_target_reached": [[242, 267], ["None"], "methods", ["None"], ["", "def", "local_target_reached", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: boolean, true if drone is at the local target position\n        \"\"\"", "\n", "target", "=", "False", "\n", "\"\"\"\n        row = False\n        col = False\n\n        if self.local_target[0] - self.sight_distance <= self.__class__.row_position <= self.local_target[\n            0] + self.sight_distance:\n            row = True\n\n        if self.local_target[1] - self.sight_distance <= self.__class__.col_position <= self.local_target[\n            1] + self.sight_distance:\n            col = True\n\n        if row and col:\n            target = True\n\n        \"\"\"", "\n", "if", "self", ".", "__class__", ".", "row_position", "==", "self", ".", "local_target", "[", "0", "]", "and", "self", ".", "__class__", ".", "col_position", "==", "self", ".", "local_target", "[", "1", "]", ":", "\n", "            ", "target", "=", "True", "\n", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.get_local_target": [[268, 305], ["int", "int"], "methods", ["None"], ["", "def", "get_local_target", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Sets the local map target based on where the drone is located in relation to the main target\n        :param target: current target position (x, y)\n        :return: row and col of the local map target\n        \"\"\"", "\n", "target", "=", "self", ".", "current_target", "\n", "row", "=", "0", "\n", "col", "=", "0", "\n", "#print('target:', target)", "\n", "if", "self", ".", "__class__", ".", "row_position", "==", "target", "[", "0", "]", ":", "\n", "            ", "row", "=", "self", ".", "__class__", ".", "row_position", "-", "self", ".", "local_map_lower_row", "\n", "", "elif", "self", ".", "__class__", ".", "row_position", ">", "target", "[", "0", "]", ":", "\n", "            ", "if", "self", ".", "__class__", ".", "row_position", "-", "target", "[", "0", "]", ">", "12", ":", "\n", "                ", "row", "=", "0", "\n", "", "else", ":", "\n", "                ", "row", "=", "target", "[", "0", "]", "-", "self", ".", "__class__", ".", "row_position", "+", "12", "\n", "", "", "elif", "self", ".", "__class__", ".", "row_position", "<", "target", "[", "0", "]", ":", "\n", "            ", "if", "target", "[", "0", "]", "-", "self", ".", "__class__", ".", "row_position", ">", "12", ":", "\n", "                ", "row", "=", "24", "\n", "", "else", ":", "\n", "                ", "row", "=", "target", "[", "0", "]", "-", "self", ".", "__class__", ".", "row_position", "+", "12", "\n", "", "", "if", "self", ".", "__class__", ".", "col_position", "==", "target", "[", "1", "]", ":", "\n", "            ", "col", "=", "self", ".", "__class__", ".", "col_position", "-", "self", ".", "local_map_lower_col", "\n", "", "elif", "self", ".", "__class__", ".", "col_position", ">", "target", "[", "1", "]", ":", "\n", "            ", "if", "self", ".", "__class__", ".", "col_position", "-", "target", "[", "1", "]", ">", "12", ":", "\n", "                ", "col", "=", "0", "\n", "", "else", ":", "\n", "                ", "col", "=", "target", "[", "1", "]", "-", "self", ".", "__class__", ".", "col_position", "+", "12", "\n", "", "", "elif", "self", ".", "__class__", ".", "col_position", "<", "target", "[", "1", "]", ":", "\n", "            ", "if", "target", "[", "1", "]", "-", "self", ".", "__class__", ".", "col_position", ">", "12", ":", "\n", "                ", "col", "=", "24", "\n", "", "else", ":", "\n", "                ", "col", "=", "target", "[", "1", "]", "-", "self", ".", "__class__", ".", "col_position", "+", "12", "\n", "", "", "row", "=", "int", "(", "row", "+", "self", ".", "local_map_lower_row", ")", "\n", "col", "=", "int", "(", "col", "+", "self", ".", "local_map_lower_col", ")", "\n", "self", ".", "local_target", "=", "[", "row", ",", "col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.flatten_state": [[306, 313], ["state.reshape"], "methods", ["None"], ["", "def", "flatten_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"\n        :param state: 2d array of mining probabilities within the drone's vision\n        :return: one dimensional array of the state information\n        \"\"\"", "\n", "flat_state", "=", "state", ".", "reshape", "(", "1", ",", "self", ".", "vision_size", ")", "\n", "return", "flat_state", "\n", "\n"]], "home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.visited_position": [[314, 317], ["search_env.Search.visits.visited_position"], "methods", ["home.repos.pwc.inspect_result.RL-WFU_Drone_field.Environment.search_env.Search.visited_position"], ["", "def", "visited_position", "(", "self", ")", ":", "\n", "        ", "self", ".", "visits", ".", "visited_position", "(", "self", ".", "__class__", ".", "row_position", ",", "self", ".", "__class__", ".", "col_position", ",", "True", ")", "\n", "self", ".", "visited", "=", "self", ".", "visits", ".", "search_visited", "\n", "#self.__class__.visited[self.__class__.row_position, self.__class__.col_position] = 0", "\n"]]}