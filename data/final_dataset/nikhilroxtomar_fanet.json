{"home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.train.DATASET.__init__": [[24, 31], ["torch.utils.data.Dataset.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images_path", ",", "masks_path", ",", "size", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "images_path", "=", "images_path", "\n", "self", ".", "masks_path", "=", "masks_path", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "n_samples", "=", "len", "(", "images_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.train.DATASET.__getitem__": [[32, 54], ["cv2.imread", "cv2.imread", "cv2.resize", "numpy.transpose", "image.astype.astype.astype", "cv2.resize", "numpy.expand_dims", "mask.astype.astype.astype", "train.DATASET.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" Image \"\"\"", "\n", "image", "=", "cv2", ".", "imread", "(", "self", ".", "images_path", "[", "index", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "self", ".", "masks_path", "[", "index", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "augmentations", "=", "self", ".", "transform", "(", "image", "=", "image", ",", "mask", "=", "mask", ")", "\n", "image", "=", "augmentations", "[", "\"image\"", "]", "\n", "mask", "=", "augmentations", "[", "\"mask\"", "]", "\n", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "size", ")", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "image", "=", "image", "/", "255.0", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "size", ")", "\n", "mask", "=", "np", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "\n", "mask", "=", "mask", "/", "255.0", "\n", "mask", "=", "mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.train.DATASET.__len__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.train.train": [[58, 102], ["model.train", "enumerate", "x.to.to", "y.to.to", "numpy.array", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "m.to.to", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "optimizer.step", "loss_fn.item", "len", "str", "utils.rle_decode", "numpy.expand_dims", "m.to.append", "torch.no_grad", "torch.no_grad", "torch.sigmoid", "torch.sigmoid", "y_pred.cpu().numpy.cpu().numpy", "numpy.squeeze", "numpy.array", "utils.rle_encode", "return_mask.append", "str", "y_pred.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.train.train", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.rle_decode", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.rle_encode"], ["", "", "def", "train", "(", "model", ",", "loader", ",", "mask", ",", "optimizer", ",", "loss_fn", ",", "device", ")", ":", "\n", "    ", "epoch_loss", "=", "0", "\n", "return_mask", "=", "[", "]", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "x", "=", "x", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "y", ".", "shape", "\n", "m", "=", "[", "]", "\n", "for", "edata", "in", "mask", "[", "i", "*", "b", ":", "i", "*", "b", "+", "b", "]", ":", "\n", "            ", "edata", "=", "\" \"", ".", "join", "(", "str", "(", "d", ")", "for", "d", "in", "edata", ")", "\n", "edata", "=", "str", "(", "edata", ")", "\n", "edata", "=", "rle_decode", "(", "edata", ",", "size", ")", "\n", "edata", "=", "np", ".", "expand_dims", "(", "edata", ",", "axis", "=", "0", ")", "\n", "m", ".", "append", "(", "edata", ")", "\n", "\n", "", "m", "=", "np", ".", "array", "(", "m", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "m", "=", "np", ".", "transpose", "(", "m", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "m", "=", "torch", ".", "from_numpy", "(", "m", ")", "\n", "m", "=", "m", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "y_pred", "=", "model", "(", "[", "x", ",", "m", "]", ")", "\n", "loss", "=", "loss_fn", "(", "y_pred", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_pred", "=", "torch", ".", "sigmoid", "(", "y_pred", ")", "\n", "y_pred", "=", "y_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "py", "in", "y_pred", ":", "\n", "                ", "py", "=", "np", ".", "squeeze", "(", "py", ",", "axis", "=", "0", ")", "\n", "py", "=", "py", ">", "0.5", "\n", "py", "=", "np", ".", "array", "(", "py", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "py", "=", "rle_encode", "(", "py", ")", "\n", "return_mask", ".", "append", "(", "py", ")", "\n", "\n", "", "", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "epoch_loss", "=", "epoch_loss", "/", "len", "(", "loader", ")", "\n", "return", "epoch_loss", ",", "return_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.train.evaluate": [[103, 144], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "len", "x.to.to", "y.to.to", "numpy.array", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "m.to.to", "model", "loss_fn", "loss_fn.item", "torch.sigmoid", "torch.sigmoid", "y_pred.cpu().numpy.cpu().numpy", "str", "utils.rle_decode", "numpy.expand_dims", "m.to.append", "numpy.squeeze", "numpy.array", "utils.rle_encode", "return_mask.append", "y_pred.cpu().numpy.cpu", "str"], "function", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.rle_decode", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.rle_encode"], ["", "def", "evaluate", "(", "model", ",", "loader", ",", "mask", ",", "loss_fn", ",", "device", ")", ":", "\n", "    ", "epoch_loss", "=", "0", "\n", "return_mask", "=", "[", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "y", ".", "shape", "\n", "m", "=", "[", "]", "\n", "for", "edata", "in", "mask", "[", "i", "*", "b", ":", "i", "*", "b", "+", "b", "]", ":", "\n", "                ", "edata", "=", "\" \"", ".", "join", "(", "str", "(", "d", ")", "for", "d", "in", "edata", ")", "\n", "edata", "=", "str", "(", "edata", ")", "\n", "edata", "=", "rle_decode", "(", "edata", ",", "size", ")", "\n", "edata", "=", "np", ".", "expand_dims", "(", "edata", ",", "axis", "=", "0", ")", "\n", "m", ".", "append", "(", "edata", ")", "\n", "\n", "", "m", "=", "np", ".", "array", "(", "m", ")", "\n", "m", "=", "np", ".", "transpose", "(", "m", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "m", "=", "torch", ".", "from_numpy", "(", "m", ")", "\n", "m", "=", "m", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "\n", "y_pred", "=", "model", "(", "[", "x", ",", "m", "]", ")", "\n", "loss", "=", "loss_fn", "(", "y_pred", ",", "y", ")", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "y_pred", "=", "torch", ".", "sigmoid", "(", "y_pred", ")", "\n", "y_pred", "=", "y_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "py", "in", "y_pred", ":", "\n", "                ", "py", "=", "np", ".", "squeeze", "(", "py", ",", "axis", "=", "0", ")", "\n", "py", "=", "py", ">", "0.5", "\n", "py", "=", "np", ".", "array", "(", "py", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "py", "=", "rle_encode", "(", "py", ")", "\n", "return_mask", ".", "append", "(", "py", ")", "\n", "\n", "", "", "", "epoch_loss", "=", "epoch_loss", "/", "len", "(", "loader", ")", "\n", "return", "epoch_loss", ",", "return_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.blocks.SELayer.__init__": [[6, 14], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.blocks.SELayer.forward": [[16, 21], ["x.size", "blocks.SELayer.avg_pool().view", "blocks.SELayer.fc().view", "blocks.SELayer.expand_as", "blocks.SELayer.avg_pool", "blocks.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.blocks.ResidualBlock.__init__": [[24, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "blocks.SELayer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_c", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_c", ",", "out_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_c", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_c", ")", "\n", "\n", "self", ".", "se", "=", "SELayer", "(", "out_c", ",", "out_c", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.blocks.ResidualBlock.forward": [[39, 55], ["blocks.ResidualBlock.conv1", "blocks.ResidualBlock.bn1", "blocks.ResidualBlock.relu", "blocks.ResidualBlock.conv2", "blocks.ResidualBlock.bn2", "blocks.ResidualBlock.conv3", "blocks.ResidualBlock.bn3", "blocks.ResidualBlock.se", "blocks.ResidualBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu", "(", "x1", ")", "\n", "\n", "x2", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "x3", "=", "self", ".", "se", "(", "x3", ")", "\n", "\n", "x4", "=", "x2", "+", "x3", "\n", "x4", "=", "self", ".", "relu", "(", "x4", ")", "\n", "\n", "return", "x4", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.blocks.MixPool.__init__": [[58, 79], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ")", ":", "\n", "        ", "super", "(", "MixPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fmask", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_c", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_c", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_c", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_c", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.blocks.MixPool.forward": [[81, 89], ["blocks.MixPool.conv1", "blocks.MixPool.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.MaxPool2d", "torch.MaxPool2d", "torch.logical_or().type", "torch.logical_or().type", "torch.logical_or().type", "torch.logical_or().type", "blocks.MixPool.fmask", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "m", ")", ":", "\n", "        ", "fmask", "=", "(", "self", ".", "fmask", "(", "x", ")", ">", "0.5", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "m", "=", "nn", ".", "MaxPool2d", "(", "(", "m", ".", "shape", "[", "2", "]", "//", "x", ".", "shape", "[", "2", "]", ",", "m", ".", "shape", "[", "3", "]", "//", "x", ".", "shape", "[", "3", "]", ")", ")", "(", "m", ")", "\n", "x1", "=", "x", "*", "torch", ".", "logical_or", "(", "fmask", ",", "m", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "axis", "=", "1", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.loss.DiceLoss.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.loss.DiceLoss.forward": [[9, 22], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view", "inputs.view.view.sum", "targets.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "\n", "#comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "torch", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "#flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "dice", "=", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "\n", "return", "1", "-", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.loss.DiceBCELoss.__init__": [[24, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiceBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.loss.DiceBCELoss.forward": [[27, 42], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "inputs.view.view.sum", "targets.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "\n", "#comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "torch", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "#flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "dice_loss", "=", "1", "-", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "BCE", "=", "F", ".", "binary_cross_entropy", "(", "inputs", ",", "targets", ",", "reduction", "=", "'mean'", ")", "\n", "Dice_BCE", "=", "(", "0.5", "*", "BCE", ")", "+", "(", "0.5", "*", "dice_loss", ")", "\n", "\n", "return", "Dice_BCE", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.CustomDataParallel.gather": [[71, 74], ["sum"], "methods", ["None"], ["def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "# Note that I don't actually want to convert everything to the output_device", "\n", "\t\t", "return", "sum", "(", "outputs", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.precision_score": [[14, 17], ["y_pred.sum"], "function", ["None"], ["def", "precision_score", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "intersection", "=", "(", "y_true", "*", "y_pred", ")", ".", "sum", "(", ")", "\n", "return", "(", "intersection", "+", "1e-15", ")", "/", "(", "y_pred", ".", "sum", "(", ")", "+", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.recall_score": [[18, 21], ["y_true.sum"], "function", ["None"], ["", "def", "recall_score", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "intersection", "=", "(", "y_true", "*", "y_pred", ")", ".", "sum", "(", ")", "\n", "return", "(", "intersection", "+", "1e-15", ")", "/", "(", "y_true", ".", "sum", "(", ")", "+", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.F2_score": [[22, 26], ["test.precision_score", "test.recall_score", "float"], "function", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.precision_score", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.recall_score"], ["", "def", "F2_score", "(", "y_true", ",", "y_pred", ",", "beta", "=", "2", ")", ":", "\n", "    ", "p", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "r", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "(", "1", "+", "beta", "**", "2.", ")", "*", "(", "p", "*", "r", ")", "/", "float", "(", "beta", "**", "2", "*", "p", "+", "r", "+", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.dice_score": [[27, 29], ["y_true.sum", "y_pred.sum"], "function", ["None"], ["", "def", "dice_score", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "(", "2", "*", "(", "y_true", "*", "y_pred", ")", ".", "sum", "(", ")", "+", "1e-15", ")", "/", "(", "y_true", ".", "sum", "(", ")", "+", "y_pred", ".", "sum", "(", ")", "+", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.jac_score": [[30, 34], ["y_true.sum", "y_pred.sum"], "function", ["None"], ["", "def", "jac_score", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "intersection", "=", "(", "y_true", "*", "y_pred", ")", ".", "sum", "(", ")", "\n", "union", "=", "y_true", ".", "sum", "(", ")", "+", "y_pred", ".", "sum", "(", ")", "-", "intersection", "\n", "return", "(", "intersection", "+", "1e-15", ")", "/", "(", "union", "+", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.calculate_metrics": [[35, 62], ["y_true.astype.cpu().numpy", "y_pred.astype.cpu().numpy", "y_pred.astype.reshape", "y_pred.astype.astype", "y_true.astype.reshape", "y_true.astype.astype", "test.jac_score", "test.dice_score", "test.recall_score", "test.precision_score", "test.F2_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.confusion_matrix", "float", "y_true.astype.cpu", "y_pred.astype.cpu", "float", "float"], "function", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.jac_score", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.dice_score", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.recall_score", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.precision_score", "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.F2_score"], ["", "def", "calculate_metrics", "(", "y_true", ",", "y_pred", ",", "img", ")", ":", "\n", "    ", "y_true", "=", "y_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "y_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "y_pred", "=", "y_pred", ">", "0.5", "\n", "y_pred", "=", "y_pred", ".", "reshape", "(", "-", "1", ")", "\n", "y_pred", "=", "y_pred", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "y_true", "=", "y_true", ">", "0.5", "\n", "y_true", "=", "y_true", ".", "reshape", "(", "-", "1", ")", "\n", "y_true", "=", "y_true", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "## Score", "\n", "score_jaccard", "=", "jac_score", "(", "y_true", ",", "y_pred", ")", "\n", "score_f1", "=", "dice_score", "(", "y_true", ",", "y_pred", ")", "\n", "score_recall", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "score_precision", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "score_fbeta", "=", "F2_score", "(", "y_true", ",", "y_pred", ")", "\n", "score_acc", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "confusion", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", "\n", "if", "float", "(", "confusion", "[", "0", ",", "0", "]", "+", "confusion", "[", "0", ",", "1", "]", ")", "!=", "0", ":", "\n", "        ", "score_specificity", "=", "float", "(", "confusion", "[", "0", ",", "0", "]", ")", "/", "float", "(", "confusion", "[", "0", ",", "0", "]", "+", "confusion", "[", "0", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "score_specificity", "=", "0.0", "\n", "\n", "", "return", "[", "score_jaccard", ",", "score_f1", ",", "score_recall", ",", "score_precision", ",", "score_specificity", ",", "score_acc", ",", "score_fbeta", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.test.mask_parse": [[63, 68], ["numpy.squeeze", "numpy.transpose"], "function", ["None"], ["", "def", "mask_parse", "(", "mask", ")", ":", "\n", "    ", "mask", "=", "np", ".", "squeeze", "(", "mask", ")", "\n", "mask", "=", "[", "mask", ",", "mask", ",", "mask", "]", "\n", "mask", "=", "np", ".", "transpose", "(", "mask", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.EncoderBlock.__init__": [[6, 14], ["torch.Module.__init__", "blocks.ResidualBlock", "blocks.ResidualBlock", "blocks.MixPool", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "EncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "r1", "=", "ResidualBlock", "(", "in_c", ",", "out_c", ")", "\n", "self", ".", "r2", "=", "ResidualBlock", "(", "out_c", ",", "out_c", ")", "\n", "self", ".", "p1", "=", "MixPool", "(", "out_c", ",", "out_c", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.EncoderBlock.forward": [[15, 21], ["model.EncoderBlock.r1", "model.EncoderBlock.r2", "model.EncoderBlock.p1", "model.EncoderBlock.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "self", ".", "r1", "(", "inputs", ")", "\n", "x", "=", "self", ".", "r2", "(", "x", ")", "\n", "p", "=", "self", ".", "p1", "(", "x", ",", "masks", ")", "\n", "o", "=", "self", ".", "pool", "(", "p", ")", "\n", "return", "o", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.DecoderBlock.__init__": [[23, 30], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "blocks.ResidualBlock", "blocks.ResidualBlock", "blocks.MixPool"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "DecoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "ConvTranspose2d", "(", "in_c", ",", "in_c", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "r1", "=", "ResidualBlock", "(", "in_c", "+", "in_c", ",", "out_c", ")", "\n", "self", ".", "r2", "=", "ResidualBlock", "(", "out_c", ",", "out_c", ")", "\n", "self", ".", "p1", "=", "MixPool", "(", "out_c", ",", "out_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.DecoderBlock.forward": [[31, 38], ["model.DecoderBlock.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DecoderBlock.r1", "model.DecoderBlock.r2", "model.DecoderBlock.p1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "skip", ",", "masks", ")", ":", "\n", "        ", "x", "=", "self", ".", "upsample", "(", "inputs", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "skip", "]", ",", "axis", "=", "1", ")", "\n", "x", "=", "self", ".", "r1", "(", "x", ")", "\n", "x", "=", "self", ".", "r2", "(", "x", ")", "\n", "p", "=", "self", ".", "p1", "(", "x", ",", "masks", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__": [[40, 54], ["torch.Module.__init__", "model.EncoderBlock", "model.EncoderBlock", "model.EncoderBlock", "model.EncoderBlock", "model.DecoderBlock", "model.DecoderBlock", "model.DecoderBlock", "model.DecoderBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FANet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "e1", "=", "EncoderBlock", "(", "3", ",", "32", ")", "\n", "self", ".", "e2", "=", "EncoderBlock", "(", "32", ",", "64", ")", "\n", "self", ".", "e3", "=", "EncoderBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "e4", "=", "EncoderBlock", "(", "128", ",", "256", ")", "\n", "\n", "self", ".", "d1", "=", "DecoderBlock", "(", "256", ",", "128", ")", "\n", "self", ".", "d2", "=", "DecoderBlock", "(", "128", ",", "64", ")", "\n", "self", ".", "d3", "=", "DecoderBlock", "(", "64", ",", "32", ")", "\n", "self", ".", "d4", "=", "DecoderBlock", "(", "32", ",", "16", ")", "\n", "\n", "self", ".", "output", "=", "nn", ".", "Conv2d", "(", "16", "+", "1", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.model.FANet.forward": [[55, 72], ["model.FANet.e1", "model.FANet.e2", "model.FANet.e3", "model.FANet.e4", "model.FANet.d1", "model.FANet.d2", "model.FANet.d3", "model.FANet.d4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.FANet.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "inputs", ",", "masks", "=", "x", "[", "0", "]", ",", "x", "[", "1", "]", "\n", "\n", "p1", ",", "s1", "=", "self", ".", "e1", "(", "inputs", ",", "masks", ")", "\n", "p2", ",", "s2", "=", "self", ".", "e2", "(", "p1", ",", "masks", ")", "\n", "p3", ",", "s3", "=", "self", ".", "e3", "(", "p2", ",", "masks", ")", "\n", "p4", ",", "s4", "=", "self", ".", "e4", "(", "p3", ",", "masks", ")", "\n", "\n", "d1", "=", "self", ".", "d1", "(", "p4", ",", "s4", ",", "masks", ")", "\n", "d2", "=", "self", ".", "d2", "(", "d1", ",", "s3", ",", "masks", ")", "\n", "d3", "=", "self", ".", "d3", "(", "d2", ",", "s2", ",", "masks", ")", "\n", "d4", "=", "self", ".", "d4", "(", "d3", ",", "s1", ",", "masks", ")", "\n", "\n", "d5", "=", "torch", ".", "cat", "(", "[", "d4", ",", "masks", "]", ",", "axis", "=", "1", ")", "\n", "output", "=", "self", ".", "output", "(", "d5", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.seeding": [[12, 19], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "seeding", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "\"PYTHONHASHSEED\"", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.create_dir": [[21, 24], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "create_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.load_data": [[26, 41], ["utils.load_data.load_names"], "function", ["None"], ["def", "load_data", "(", "path", ")", ":", "\n", "    ", "def", "load_names", "(", "path", ",", "file_path", ")", ":", "\n", "        ", "f", "=", "open", "(", "file_path", ",", "\"r\"", ")", "\n", "data", "=", "f", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", ":", "-", "1", "]", "\n", "images", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "\"images\"", ",", "name", ")", "+", "\".jpg\"", "for", "name", "in", "data", "]", "\n", "masks", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "\"masks\"", ",", "name", ")", "+", "\".jpg\"", "for", "name", "in", "data", "]", "\n", "return", "images", ",", "masks", "\n", "\n", "", "train_names_path", "=", "f\"{path}/train.txt\"", "\n", "valid_names_path", "=", "f\"{path}/val.txt\"", "\n", "\n", "train_x", ",", "train_y", "=", "load_names", "(", "path", ",", "train_names_path", ")", "\n", "valid_x", ",", "valid_y", "=", "load_names", "(", "path", ",", "valid_names_path", ")", "\n", "\n", "return", "(", "train_x", ",", "train_y", ")", ",", "(", "valid_x", ",", "valid_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.shuffling": [[43, 46], ["sklearn.utils.shuffle"], "function", ["None"], ["def", "shuffling", "(", "x", ",", "y", ")", ":", "\n", "    ", "x", ",", "y", "=", "shuffle", "(", "x", ",", "y", ",", "random_state", "=", "42", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.epoch_time": [[47, 52], ["int", "int"], "function", ["None"], ["", "def", "epoch_time", "(", "start_time", ",", "end_time", ")", ":", "\n", "    ", "elapsed_time", "=", "end_time", "-", "start_time", "\n", "elapsed_mins", "=", "int", "(", "elapsed_time", "/", "60", ")", "\n", "elapsed_secs", "=", "int", "(", "elapsed_time", "-", "(", "elapsed_mins", "*", "60", ")", ")", "\n", "return", "elapsed_mins", ",", "elapsed_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.print_and_save": [[53, 58], ["print", "open", "file.write", "file.write"], "function", ["None"], ["", "def", "print_and_save", "(", "file_path", ",", "data_str", ")", ":", "\n", "    ", "print", "(", "data_str", ")", "\n", "with", "open", "(", "file_path", ",", "\"a\"", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "data_str", ")", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.rle_encode": [[59, 72], ["numpy.where", "run_lengths.extend", "x.T.flatten"], "function", ["None"], ["", "", "def", "rle_encode", "(", "x", ")", ":", "\n", "    ", "'''\n    x: numpy array of shape (height, width), 1 - mask, 0 - background\n    Returns run length as list\n    '''", "\n", "dots", "=", "np", ".", "where", "(", "x", ".", "T", ".", "flatten", "(", ")", "==", "1", ")", "[", "0", "]", "# .T sets Fortran order down-then-right", "\n", "run_lengths", "=", "[", "]", "\n", "prev", "=", "-", "2", "\n", "for", "b", "in", "dots", ":", "\n", "        ", "if", "(", "b", ">", "prev", "+", "1", ")", ":", "run_lengths", ".", "extend", "(", "(", "b", "+", "1", ",", "0", ")", ")", "\n", "run_lengths", "[", "-", "1", "]", "+=", "1", "\n", "prev", "=", "b", "\n", "", "return", "run_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.rle_decode": [[73, 88], ["mask_rle.split", "numpy.zeros", "zip", "np.zeros.reshape", "numpy.asarray"], "function", ["None"], ["", "def", "rle_decode", "(", "mask_rle", ",", "shape", ")", ":", "\n", "    ", "'''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return\n    Returns numpy array, 1 - mask, 0 - background\n\n    '''", "\n", "s", "=", "mask_rle", ".", "split", "(", ")", "\n", "starts", ",", "lengths", "=", "[", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "int", ")", "for", "x", "in", "(", "s", "[", "0", ":", "]", "[", ":", ":", "2", "]", ",", "s", "[", "1", ":", "]", "[", ":", ":", "2", "]", ")", "]", "\n", "starts", "-=", "1", "\n", "ends", "=", "starts", "+", "lengths", "\n", "img", "=", "np", ".", "zeros", "(", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "lo", ",", "hi", "in", "zip", "(", "starts", ",", "ends", ")", ":", "\n", "        ", "img", "[", "lo", ":", "hi", "]", "=", "1", "\n", "", "return", "img", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilroxtomar_fanet.None.utils.init_mask": [[90, 111], ["tqdm.tqdm", "cv2.imread", "cv2.resize", "cv2.GaussianBlur", "cv2.threshold", "th.astype.astype", "th.astype.astype", "utils.init_mask.otsu_mask"], "function", ["None"], ["def", "init_mask", "(", "images", ",", "size", ")", ":", "\n", "    ", "def", "otsu_mask", "(", "image", ",", "size", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "image", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "size", ")", "\n", "blur", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "5", ",", "5", ")", ",", "0", ")", "\n", "ret", ",", "th", "=", "cv2", ".", "threshold", "(", "blur", ",", "0", ",", "255", ",", "cv2", ".", "THRESH_BINARY", "+", "cv2", ".", "THRESH_OTSU", ")", "\n", "th", "=", "th", ".", "astype", "(", "np", ".", "int32", ")", "\n", "th", "=", "th", "/", "255.0", "\n", "th", "=", "th", ">", "0.5", "\n", "th", "=", "th", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "img", ",", "th", "\n", "\n", "", "mask", "=", "[", "]", "\n", "for", "image", "in", "tqdm", "(", "images", ",", "total", "=", "len", "(", "images", ")", ")", ":", "\n", "        ", "name", "=", "image", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "i", ",", "m", "=", "otsu_mask", "(", "image", ",", "size", ")", "\n", "# cv2.imwrite(f\"mask/{name}\", np.concatenate([i, m*255], axis=1))", "\n", "m", "=", "rle_encode", "(", "m", ")", "\n", "mask", ".", "append", "(", "m", ")", "\n", "\n", "", "return", "mask", "\n", "", ""]]}