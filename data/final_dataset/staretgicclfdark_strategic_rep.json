{"home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.get_datasets_and_f_grade": [[11, 22], ["utills_and_consts.get_data_with_right_size", "pd.read_csv", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.f_svm.predict", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.f_svm.predict", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.f_hardt.predict", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.f_hardt.predict"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.get_data_with_right_size", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["    ", "def", "get_datasets_and_f_grade", "(", "self", ",", "test_size", ":", "int", ")", ":", "\n", "        ", "'''\n\n        :Sets in class field that contains datasets of train+validation and test with the loan status label\n        '''", "\n", "self", ".", "test_f_star", "=", "get_data_with_right_size", "(", "real_test_f_star_loan_status_path", ",", "test_size", ")", "\n", "self", ".", "train_val_f_star", "=", "pd", ".", "read_csv", "(", "real_train_val_f_star_loan_status_path", ")", "\n", "self", ".", "train_val_svm_loan_status", "=", "self", ".", "f_svm", ".", "predict", "(", "self", ".", "train_val_f_star", "[", "self", ".", "feature_list_to_use", "]", ")", "\n", "self", ".", "test_svm_loan_status", "=", "self", ".", "f_svm", ".", "predict", "(", "self", ".", "test_f_star", "[", "self", ".", "feature_list_to_use", "]", ")", "\n", "self", ".", "train_val_hardt_loan_status", "=", "self", ".", "f_hardt", ".", "predict", "(", "self", ".", "train_val_f_star", "[", "self", ".", "feature_list_to_use", "]", ")", "\n", "self", ".", "test_hardt_loan_status", "=", "self", ".", "f_hardt", ".", "predict", "(", "self", ".", "test_f_star", "[", "self", ".", "feature_list_to_use", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.create_paths_and_dirs_for_random_friends_experiment": [[23, 30], ["os.makedirs", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder"], ["", "def", "create_paths_and_dirs_for_random_friends_experiment", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_folder_path", ",", "exist_ok", "=", "True", ")", "\n", "path_to_parent_folder", "=", "safe_create_folder", "(", "result_folder_path", ",", "self", ".", "experiment", ")", "\n", "self", ".", "path_to_base_output", "=", "safe_create_folder", "(", "path_to_parent_folder", ",", "f'cost_factor={self.cost_factor}_epsilon={self.epsilon}'", ")", "\n", "self", ".", "friends_dict_dir_path", "=", "safe_create_folder", "(", "self", ".", "path_to_base_output", ",", "'friends_dict'", ")", "\n", "self", ".", "svm_folder", "=", "safe_create_folder", "(", "self", ".", "path_to_base_output", ",", "'svm_results'", ")", "\n", "self", ".", "hardt_folder", "=", "safe_create_folder", "(", "self", ".", "path_to_base_output", ",", "'hardt_results'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.get_models": [[31, 38], ["strategic_players.get_hardt_model", "loan_status_model_trainer.get_svm_loan_return_model", "np.append", "np.append"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_hardt_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.loan_status_model_trainer.get_svm_loan_return_model"], ["", "def", "get_models", "(", "self", ",", "force_train_hadart", ",", "force_train_loan_model", ",", "feature_list_to_use", ",", "use_cv", ",", "train_size", ")", ":", "\n", "        ", "self", ".", "feature_list_to_use", "=", "feature_list_to_use", "\n", "self", ".", "f_hardt", "=", "get_hardt_model", "(", "self", ".", "cost_factor", ",", "real_train_val_f_star_loan_status_path", ",", "force_train_hadart", ",", "train_size", "=", "train_size", ")", "\n", "self", ".", "f_svm", "=", "get_svm_loan_return_model", "(", "svm_model_loan_returned_path", ",", "feature_list_to_use", ",", "\n", "force_train_loan_model", ",", "use_cv", "=", "use_cv", ")", "\n", "self", ".", "f_svm_vec", "=", "np", ".", "append", "(", "self", ".", "f_svm", ".", "coef_", "[", "0", "]", ",", "self", ".", "f_svm", ".", "intercept_", ")", "\n", "self", ".", "f_hardt_vec", "=", "np", ".", "append", "(", "self", ".", "f_hardt", ".", "coef_", "[", "0", "]", ",", "self", ".", "f_hardt", ".", "intercept_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.__init__": [[39, 50], ["strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.create_paths_and_dirs_for_random_friends_experiment", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.get_models", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.get_datasets_and_f_grade"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.create_paths_and_dirs_for_random_friends_experiment", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.get_models", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.get_datasets_and_f_grade"], ["", "def", "__init__", "(", "self", ",", "number_of_friends_to_learn_list", ":", "list", ",", "cost_factor", ":", "float", ",", "epsilon", ":", "float", ",", "feature_list_to_use", ":", "list", ",", "\n", "force_train_hadart", ":", "bool", ",", "force_train_svm_loan_model", ":", "bool", ",", "spare_cost", ":", "float", ",", "use_cv", ":", "bool", ",", "\n", "train_size", ":", "int", ",", "test_size", ":", "int", ")", ":", "\n", "        ", "self", ".", "m_list", "=", "number_of_friends_to_learn_list", "\n", "self", ".", "cost_factor", "=", "cost_factor", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "spare_cost", "=", "spare_cost", "\n", "self", ".", "experiment", "=", "'dark_exp'", "\n", "self", ".", "create_paths_and_dirs_for_random_friends_experiment", "(", ")", "\n", "self", ".", "get_models", "(", "force_train_hadart", ",", "force_train_svm_loan_model", ",", "feature_list_to_use", ",", "use_cv", "=", "use_cv", ",", "train_size", "=", "train_size", ")", "\n", "self", ".", "get_datasets_and_f_grade", "(", "test_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.run_strategic_random_exp_for_clf": [[51, 81], ["os.path.join", "friends_dict_creator.get_member_friends_dict", "cost_functions.MixWeightedLinearSumSquareCostFunction", "strategic_players.strategic_modify_learn_from_friends", "list"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.friends_dict_creator.get_member_friends_dict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.strategic_modify_learn_from_friends"], ["", "def", "run_strategic_random_exp_for_clf", "(", "self", ",", "num_friend", ":", "int", ",", "clf_name", ":", "str", ",", "train_val_model_loan_status", ",", "\n", "clf", ",", "clf_folder", ":", "str", ",", "show_flag", ":", "bool", ",", "save_flag", ":", "bool", ",", "test_size", ":", "int", ")", ":", "\n", "        ", "'''\n\n        :param num_friend: Number of samples that each instance can learn from in this experiment.\n        :param clf_name: Name of the model\n        :param train_val_model_loan_status: Data frame column for the loan status\n        :param clf: The classifier for prediction that the experiment run on.\n        :param clf_folder: Folder where results are stored\n        :param show_flag: If it 1 the visualization is plotted.\n        :param save_flag: If it 1 Extra data about the experiment is saved\n        :param test_size: Number of example in the test set that tries to achieve positive score on the model\n        :return:\n        '''", "\n", "member_friend_dict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "friends_dict_dir_path", ",", "f'random_{num_friend}friends_for_{clf_name}.json'", ")", "\n", "member_dict", "=", "get_member_friends_dict", "(", "num_friend", ",", "test_size", ",", "train_val_model_loan_status", ",", "\n", "list", "(", "self", ".", "test_f_star", "[", "'MemberKey'", "]", ")", ",", "member_friend_dict_path", ",", "test_size", ")", "\n", "\n", "cost_func_for_gaming", "=", "MixWeightedLinearSumSquareCostFunction", "(", "a", ",", "epsilon", "=", "self", ".", "epsilon", ",", "\n", "cost_factor", "=", "self", ".", "cost_factor", ",", "\n", "spare_cost", "=", "self", ".", "spare_cost", ")", "\n", "\n", "friends_modify_on_svm_strategic_data", ",", "data_svm_res_dict", "=", "strategic_modify_learn_from_friends", "(", "\n", "clf_name", ",", "self", ".", "test_f_star", ",", "self", ".", "train_val_f_star", ",", "\n", "clf", ",", "self", ".", "feature_list_to_use", ",", "cost_func_for_gaming", ",", "\n", "member_dict", "=", "member_dict", ",", "f_vec", "=", "self", ".", "f_svm_vec", ",", "dir_name_for_result", "=", "clf_folder", ",", "\n", "title_for_visualization", "=", "f'Movement in the dark m = {num_friend}'", ",", "\n", "num_friends", "=", "num_friend", ",", "show_flag", "=", "show_flag", ",", "save_flag", "=", "save_flag", "\n", ")", "\n", "return", "friends_modify_on_svm_strategic_data", ",", "data_svm_res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.execute_strategic_random_friends_exp": [[82, 94], ["result_exp_container.ResultExpContainer", "result_exp_container.ResultExpContainer.plot_pop_graph", "os.path.join", "result_exp_container.ResultExpContainer.plot_social_inequality_graph", "print", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.run_strategic_random_exp_for_clf", "strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.run_strategic_random_exp_for_clf", "result_exp_container.ResultExpContainer.update_dict_result"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.plot_pop_graph", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.plot_social_inequality_graph", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.run_strategic_random_exp_for_clf", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_random_friends_info_experiment.StrategicRandomFriendsRunner.run_strategic_random_exp_for_clf", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.update_dict_result"], ["", "def", "execute_strategic_random_friends_exp", "(", "self", ",", "show_flag", ",", "save_flag", ",", "test_size", ")", ":", "\n", "        ", "result_exp", "=", "ResultExpContainer", "(", "self", ".", "m_list", ",", "self", ".", "feature_list_to_use", ",", "self", ".", "f_svm", ",", "self", ".", "f_hardt", ",", "self", ".", "path_to_base_output", ")", "\n", "for", "num_friend", "in", "self", ".", "m_list", ":", "\n", "            ", "print", "(", "num_friend", ")", "\n", "friends_modify_on_svm_strategic_data", ",", "data_svm_res_dict", "=", "self", ".", "run_strategic_random_exp_for_clf", "(", "num_friend", ",", "'SVM'", ",", "self", ".", "train_val_svm_loan_status", ",", "self", ".", "f_svm", ",", "self", ".", "svm_folder", ",", "show_flag", ",", "save_flag", ",", "test_size", ")", "\n", "friends_modify_on_hardt_strategic_data", ",", "data_hardt_res_dict", "=", "self", ".", "run_strategic_random_exp_for_clf", "(", "num_friend", ",", "'Hardt'", ",", "self", ".", "train_val_hardt_loan_status", ",", "self", ".", "f_hardt", ",", "self", ".", "hardt_folder", ",", "show_flag", ",", "save_flag", ",", "test_size", ")", "\n", "result_exp", ".", "update_dict_result", "(", "data_svm_res_dict", ",", "data_hardt_res_dict", ",", "\n", "friends_modify_on_svm_strategic_data", ",", "friends_modify_on_hardt_strategic_data", ")", "\n", "", "result_exp", ".", "plot_pop_graph", "(", "self", ".", "test_f_star", ",", "self", ".", "spare_cost", ")", "\n", "modified_data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "hardt_folder", ",", "'modified_data'", ")", "\n", "result_exp", ".", "plot_social_inequality_graph", "(", "modified_data_folder", ",", "self", ".", "spare_cost", ",", "test_size", ")", "\n", "return", "result_exp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_main_run.create_main_folders": [[8, 11], ["os.makedirs", "os.makedirs"], "function", ["None"], ["def", "create_main_folders", "(", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "result_folder_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "models_folder_path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_main_run.create_args_parser": [[12, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "create_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--full_info_exp\"", ",", "help", "=", "\"Run full info experiment\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dark_exp\"", ",", "help", "=", "\"Run dark experiment\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--synthetic_exp\"", ",", "help", "=", "\"Run synthetic 1D gaussian experiment\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "help", "=", "\"This is the scale of the cost Contestant pays for movement\"", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"-e\"", ",", "help", "=", "\"This is epsilon the weight of the l2 cost function in the total cost constant has to pay for movement.\"", "\n", "\" default value is 0.2. Only relevant in the full information and dark experiment.\"", ",", "\n", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "help", "=", "\"The safety that player takes in order to ensure that it gets positive classification.\"", "\n", "\" Used only in dark experiment default value is 0\"", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"-th\"", ",", "help", "=", "\"If set hardt model will train again\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ts\"", ",", "help", "=", "\"Train svm loan return model. Only relevant in the full information and dark \"", "\n", "\"experiment.\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cv\"", ",", "help", "=", "\"Only if train svm loan is set\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--list\"", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ",", "help", "=", "\"List of the the numbers examples the Contestants can \"", "\n", "\"learn from. Only relevant in experiments dark and \"", "\n", "\"synthetic 1 dimension gaussian. In the dark experimant\"", "\n", "\"the list must contain at least 3 numbers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ns\"", ",", "help", "=", "\"Number of Hardt model to use in the synthetic experiment\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"-rp\"", ",", "help", "=", "\"Number to repeat the synthetic experiment\"", ",", "default", "=", "200", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"-trs\"", ",", "help", "=", "\"Number of example to train the Hardt model. If this number is greater than the \"", "\n", "\"train set we use all the train set (in the synthetic experiment there is no \"", "\n", "\"limitation on the number of examples to train).\"", "\n", "\" train).\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "# -1 means no limits", "\n", "parser", ".", "add_argument", "(", "\"-tes\"", ",", "help", "=", "\"Number of example in the test set that tries to achieve positive score on the model.\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "# -1 means no limits", "\n", "parser", ".", "add_argument", "(", "\"-mp\"", ",", "help", "=", "\"Shows the plot of Contestant movements\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "help", "=", "\"save some information about Contestant trained model. The data of this experiment is saved in:\"", "\n", "\"result/dark_exp/cost_factor={cost_factor}_epsilon={epsilon}. please note that it might take a lot of space but\"", "\n", "\"some of the data might speed up the next dark experiment. also note that if you change epsilon or cost\"", "\n", "\"factor you must delete two folders one is svm_result/f_hat_result folder and the other is hardt_results/f_hat_result_folder.\"", ",", "\n", "action", "=", "\"store_true\"", "\n", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.from_numpy_to_panda_df": [[13, 17], ["pandas.DataFrame", "range", "str", "range"], "function", ["None"], ["def", "from_numpy_to_panda_df", "(", "data", ")", ":", "\n", "    ", "data", "=", "pd", ".", "DataFrame", "(", "data", "=", "data", "[", "0", ":", ",", "0", ":", "]", ",", "index", "=", "[", "i", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", "]", ",", "\n", "columns", "=", "[", "'f'", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.create_dataset": [[19, 35], ["numpy.zeros", "numpy.random.multivariate_normal", "synthetic_hardt_experiment.from_numpy_to_panda_df", "from_numpy_to_panda_df.insert", "list", "from_numpy_to_panda_df.insert", "numpy.eye", "len", "from_numpy_to_panda_df.sum().apply", "len", "range", "from_numpy_to_panda_df.sum"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.from_numpy_to_panda_df"], ["", "def", "create_dataset", "(", "data_size", ",", "covariance", "=", "None", ",", "d", "=", "1", ")", ":", "\n", "    ", "def", "map_sum_one_minus_one", "(", "sum_value", ")", ":", "\n", "        ", "return", "1", "if", "sum_value", ">=", "0", "else", "-", "1", "\n", "\n", "", "if", "covariance", "is", "None", ":", "\n", "        ", "covariance", "=", "np", ".", "eye", "(", "d", ")", "\n", "", "means", "=", "np", ".", "zeros", "(", "shape", "=", "d", ")", "\n", "data", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "means", ",", "cov", "=", "covariance", ",", "size", "=", "data_size", ")", "\n", "data", "=", "from_numpy_to_panda_df", "(", "data", ")", "\n", "# memberkeys:", "\n", "member_keys", "=", "[", "f's{i}'", "for", "i", "in", "range", "(", "data_size", ")", "]", "\n", "data", ".", "insert", "(", "len", "(", "data", ".", "columns", ")", ",", "'MemberKey'", ",", "member_keys", ",", "allow_duplicates", "=", "True", ")", "\n", "labels", "=", "list", "(", "data", ".", "sum", "(", "axis", "=", "1", ")", ".", "apply", "(", "map_sum_one_minus_one", ")", ")", "\n", "# using LoanStatus as label to prevent bugs", "\n", "data", ".", "insert", "(", "len", "(", "data", ".", "columns", ")", ",", "'LoanStatus'", ",", "labels", ",", "allow_duplicates", "=", "True", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.change_test_datasets_f_info": [[37, 44], ["list", "zip", "cost_functions.MixWeightedLinearSumSquareCostFunction", "list.append", "strategic_players.strategic_modify_using_known_clf"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.strategic_modify_using_known_clf"], ["", "def", "change_test_datasets_f_info", "(", "f_model_list", ",", "test_lists", ",", "feature_list", ",", "epsilon", ",", "cost_factor", ",", "a_tag", ",", "spare_cost", "=", "0", ")", ":", "\n", "    ", "strategic_modify_tests_list", "=", "list", "(", ")", "\n", "for", "(", "test_set", ",", "f_model", ")", "in", "zip", "(", "test_lists", ",", "f_model_list", ")", ":", "\n", "        ", "cost_func_for_gaming", "=", "MixWeightedLinearSumSquareCostFunction", "(", "a_tag", ",", "epsilon", "=", "epsilon", ",", "cost_factor", "=", "cost_factor", ",", "\n", "spare_cost", "=", "spare_cost", ")", "\n", "strategic_modify_tests_list", ".", "append", "(", "strategic_modify_using_known_clf", "(", "test_set", ",", "f_model", ",", "feature_list", ",", "cost_func_for_gaming", ")", ")", "\n", "", "return", "strategic_modify_tests_list", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.get_test_data_sets": [[47, 50], ["numpy.random.seed", "synthetic_hardt_experiment.create_dataset", "range"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.create_dataset"], ["", "def", "get_test_data_sets", "(", "test_size", ",", "num_data_sets_to_create", ",", "covariance", "=", "None", ",", "d", "=", "1", ",", "seed", "=", "42", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "return", "[", "create_dataset", "(", "test_size", ",", "covariance", ",", "d", "=", "d", ")", "for", "_", "in", "range", "(", "num_data_sets_to_create", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.create_firends_data_set": [[52, 70], ["set", "len", "synthetic_hardt_experiment.create_dataset", "f.predict", "set", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.create_dataset", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "create_firends_data_set", "(", "m", ":", "int", ",", "f", ",", "feature_list", ":", "list", ",", "covariance", "=", "None", ",", "d", ":", "int", "=", "1", ")", ":", "\n", "    ", "'''\n\n    :param m: Number of friends\n    :param f: The classifier\n    :param feature_list: List of the features that are used for predictions\n    :param covariance: Covariance matrix if more than one dimension experiments.\n    :param d: The dimension of the sample in the experiments\n    :return:\n    '''", "\n", "friends_set", ",", "hardt_label_friends", "=", "None", ",", "None", "\n", "friends_label", "=", "set", "(", ")", "\n", "f_labels_friends", "=", "None", "\n", "while", "len", "(", "friends_label", ")", "!=", "2", ":", "\n", "        ", "friends_set", "=", "create_dataset", "(", "m", ",", "covariance", "=", "covariance", ",", "d", "=", "d", ")", "\n", "f_labels_friends", "=", "f", ".", "predict", "(", "pd", ".", "DataFrame", "(", "friends_set", "[", "feature_list", "]", ")", ")", "\n", "friends_label", "=", "set", "(", "f_labels_friends", ")", "\n", "", "return", "friends_set", ",", "f_labels_friends", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.get_trained_hardt_models": [[72, 100], ["utills_and_consts.safe_create_folder", "list", "range", "os.path.join", "list.append", "print", "synthetic_hardt_experiment.create_dataset", "model.HardtAlgo", "utills_and_consts.load_model.fit", "utills_and_consts.save_model", "utills_and_consts.load_model", "range", "os.path.exists", "cost_functions.WeightedLinearCostFunction", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.create_dataset", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.save_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.load_model"], ["", "def", "get_trained_hardt_models", "(", "train_size", ":", "int", ",", "exp_path", ":", "str", ",", "num_to_train", ":", "int", ",", "a_tag", ",", "cost_factor", ":", "float", ",", "covariance", "=", "None", ",", "d", ":", "int", "=", "1", ",", "force_to_create", ":", "bool", "=", "False", ")", ":", "\n", "    ", "'''\n\n    :param train_size: The number of training example to use in each training\n    :param exp_path: Base path for this experiment\n    :param num_to_train: The number of models to train\n    :param a_tag:\n    :param cost_factor: Parameter that determines the scale of the cost function.\n    :param covariance: Covariance matrix if more than one dimension experiments.\n    :param d: The dimension of the sample in the experiments\n    :param force_to_create: Whatever to train all models or use those who exists.\n    :return:\n    '''", "\n", "hardt_models_dir", "=", "safe_create_folder", "(", "exp_path", ",", "'hardt_models'", ")", "\n", "hardt_models_to_return", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "num_to_train", ")", ":", "\n", "        ", "feature_list", "=", "[", "f'f{i}'", "for", "i", "in", "range", "(", "d", ")", "]", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "hardt_models_dir", ",", "f'hardt_{i}'", ")", "\n", "if", "force_to_create", "or", "os", ".", "path", ".", "exists", "(", "model_path", ")", "is", "False", ":", "\n", "            ", "print", "(", "f' training hardt number: {i}'", ")", "\n", "train_set", "=", "create_dataset", "(", "train_size", ",", "covariance", ",", "d", "=", "d", ")", "\n", "hardt_model", "=", "HardtAlgo", "(", "WeightedLinearCostFunction", "(", "a_tag", ",", "cost_factor", ")", ")", "\n", "hardt_model", ".", "fit", "(", "pd", ".", "DataFrame", "(", "train_set", "[", "feature_list", "]", ")", ",", "train_set", "[", "'LoanStatus'", "]", ")", "\n", "save_model", "(", "hardt_model", ",", "model_path", ")", "\n", "", "else", ":", "\n", "            ", "hardt_model", "=", "load_model", "(", "model_path", ")", "\n", "", "hardt_models_to_return", ".", "append", "(", "hardt_model", ")", "\n", "", "return", "hardt_models_to_return", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.run_synthetic_hardt_exp": [[102, 168], ["numpy.random.seed", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder", "numpy.array", "synthetic_hardt_experiment.get_trained_hardt_models", "synthetic_hardt_experiment.get_test_data_sets", "synthetic_hardt_experiment.change_test_datasets_f_info", "os.path.join", "os.path.join", "utills_and_consts.plot_graph", "utills_and_consts.evaluate_model_on_test_set", "f.predict", "list", "list", "list", "list", "range", "f_hat_ne_f_err_list.append", "f_hat_ne_f_err_var_list.append", "pop_list.append", "pop_var_list.append", "open", "dict", "json.dump", "zip", "pandas.DataFrame", "zip", "list", "list", "print", "range", "synthetic_hardt_experiment.create_firends_data_set", "sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC.fit", "sklearn.svm.LinearSVC.predict", "f_hat_ne_f_err_split_list.append", "cost_functions.MixWeightedLinearSumSquareCostFunction", "strategic_players.strategic_modify_using_known_clf", "utills_and_consts.evaluate_model_on_test_set", "splits_pop_list.append", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "pandas.DataFrame", "pandas.DataFrame", "numpy.sum().item", "len", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.get_trained_hardt_models", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.get_test_data_sets", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.change_test_datasets_f_info", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.plot_graph", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.synthetic_hardt_experiment.create_firends_data_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.strategic_modify_using_known_clf", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set"], ["", "def", "run_synthetic_hardt_exp", "(", "m_list", ",", "num_splits", ",", "repeat_on_same_model_exp", ",", "train_size", ",", "test_size", ",", "force_to_create", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "base_folder", "=", "safe_create_folder", "(", "result_folder_path", ",", "'oneD_synthetic_hardt_exp'", ")", "\n", "m_exp_path", "=", "safe_create_folder", "(", "base_folder", ",", "'m_exp'", ")", "\n", "\n", "\n", "# m_list = [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]", "\n", "a_tag", "=", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "epsilon", "=", "0.0000001", "\n", "cost_factor", "=", "1", "\n", "# test_size = 100", "\n", "# train_size = 4000", "\n", "# num_splits = 10", "\n", "# repeat_on_same_model_exp = 200", "\n", "if", "train_size", "==", "-", "1", ":", "\n", "        ", "train_size", "=", "4000", "\n", "", "if", "test_size", "==", "-", "1", ":", "\n", "        ", "test_size", "=", "100", "\n", "", "f_models_list", "=", "get_trained_hardt_models", "(", "train_size", ",", "m_exp_path", ",", "num_splits", ",", "a_tag", ",", "cost_factor", ",", "force_to_create", "=", "force_to_create", ")", "\n", "test_data_sets_list", "=", "get_test_data_sets", "(", "test_size", ",", "num_splits", ")", "\n", "tests_full_info_changed", "=", "change_test_datasets_f_info", "(", "f_models_list", ",", "test_data_sets_list", ",", "[", "'f0'", "]", ",", "epsilon", ",", "cost_factor", ",", "a_tag", ")", "\n", "err_f_on_x_f_list", "=", "[", "evaluate_model_on_test_set", "(", "test", ",", "f", ",", "[", "'f0'", "]", ")", "for", "(", "f", ",", "test", ")", "in", "zip", "(", "f_models_list", ",", "tests_full_info_changed", ")", "]", "\n", "test_f_pred_no_change", "=", "[", "f", ".", "predict", "(", "pd", ".", "DataFrame", "(", "test", "[", "'f0'", "]", ")", ")", "for", "(", "f", ",", "test", ")", "in", "zip", "(", "f_models_list", ",", "test_data_sets_list", ")", "]", "\n", "f_hat_ne_f_err_list", ",", "f_hat_ne_f_err_var_list", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "pop_list", ",", "pop_var_list", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "for", "m", "in", "m_list", ":", "\n", "        ", "splits_pop_list", ",", "f_hat_ne_f_err_split_list", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "# for each split the test is fixed and f is fixed", "\n", "for", "i", "in", "range", "(", "num_splits", ")", ":", "\n", "            ", "print", "(", "f' m: {m} split number: {i}'", ")", "\n", "f_model", ",", "test_set", "=", "f_models_list", "[", "i", "]", ",", "test_data_sets_list", "[", "i", "]", "\n", "err_f_on_x_f", "=", "err_f_on_x_f_list", "[", "i", "]", "\n", "\n", "for", "_", "in", "range", "(", "repeat_on_same_model_exp", ")", ":", "\n", "                ", "friends_set", ",", "friends_hardt_labels", "=", "create_firends_data_set", "(", "m", ",", "f_model", ",", "[", "'f0'", "]", ")", "\n", "f_hat", "=", "LinearSVC", "(", "C", "=", "1000", ",", "random_state", "=", "42", ",", "max_iter", "=", "100000", ")", "\n", "f_hat", ".", "fit", "(", "pd", ".", "DataFrame", "(", "friends_set", "[", "'f0'", "]", ")", ",", "friends_hardt_labels", ")", "\n", "test_f_hat_pred", "=", "f_hat", ".", "predict", "(", "pd", ".", "DataFrame", "(", "test_set", "[", "'f0'", "]", ")", ")", "\n", "f_hat_ne_f_err_split_list", ".", "append", "(", "np", ".", "sum", "(", "test_f_hat_pred", "!=", "test_f_pred_no_change", "[", "i", "]", ")", ".", "item", "(", ")", "/", "len", "(", "test_set", ")", ")", "\n", "cost_func_for_gaming", "=", "MixWeightedLinearSumSquareCostFunction", "(", "a_tag", ",", "epsilon", "=", "epsilon", ",", "\n", "cost_factor", "=", "cost_factor", ",", "\n", "spare_cost", "=", "0", ")", "\n", "test_known_f_hat_changed", "=", "strategic_modify_using_known_clf", "(", "test_set", ",", "f_hat", ",", "[", "'f0'", "]", ",", "cost_func_for_gaming", ")", "\n", "err_f_on_x_f_hat", "=", "evaluate_model_on_test_set", "(", "test_known_f_hat_changed", ",", "f_model", ",", "[", "'f0'", "]", ")", "\n", "splits_pop_list", ".", "append", "(", "(", "err_f_on_x_f_hat", "-", "err_f_on_x_f", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "", "f_hat_ne_f_err_list", ".", "append", "(", "sum", "(", "f_hat_ne_f_err_split_list", ")", "/", "len", "(", "f_hat_ne_f_err_split_list", ")", ")", "\n", "f_hat_ne_f_err_var_list", ".", "append", "(", "sum", "(", "[", "(", "f_hat_ne_f_err_val", "-", "f_hat_ne_f_err_list", "[", "-", "1", "]", ")", "**", "2", "for", "f_hat_ne_f_err_val", "in", "f_hat_ne_f_err_list", "]", ")", "/", "len", "(", "f_hat_ne_f_err_list", ")", ")", "\n", "pop_list", ".", "append", "(", "sum", "(", "splits_pop_list", ")", "/", "len", "(", "splits_pop_list", ")", ")", "\n", "pop_var_list", ".", "append", "(", "sum", "(", "[", "(", "pop_val", "-", "pop_list", "[", "-", "1", "]", ")", "**", "2", "for", "pop_val", "in", "pop_list", "]", ")", "/", "len", "(", "pop_list", ")", ")", "\n", "\n", "\n", "", "data_graph_path", "=", "os", ".", "path", ".", "join", "(", "m_exp_path", ",", "'m_graph_data.json'", ")", "\n", "with", "open", "(", "data_graph_path", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'f_hat_ne_f_err_list'", "]", "=", "f_hat_ne_f_err_list", "\n", "data", "[", "'f_hat_ne_f_err_var_list'", "]", "=", "f_hat_ne_f_err_var_list", "\n", "data", "[", "'pop_list'", "]", "=", "pop_list", "\n", "data", "[", "'pop_var_list'", "]", "=", "pop_var_list", "\n", "json", ".", "dump", "(", "data", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "saving_path", "=", "os", ".", "path", ".", "join", "(", "m_exp_path", ",", "'m_graph.png'", ")", "\n", "plot_graph", "(", "title", "=", "'err vs m'", ",", "x_label", "=", "'m'", ",", "y_label", "=", "'err'", ",", "x_data_list", "=", "[", "m_list", ",", "m_list", "]", ",", "\n", "y_data_list", "=", "[", "f_hat_ne_f_err_list", ",", "pop_list", "]", ",", "saving_path", "=", "saving_path", ",", "\n", "graph_label_list", "=", "[", "r'$E[1\\{f(x) \\neq \\^{f}\\}]$'", ",", "'POP'", "]", ",", "var_lists", "=", "[", "f_hat_ne_f_err_list", ",", "pop_var_list", "]", ",", "SE", "=", "True", ",", "num_samples", "=", "num_splits", "*", "repeat_on_same_model_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder": [[8, 12], ["os.path.join", "os.makedirs"], "function", ["None"], ["def", "safe_create_folder", "(", "parent_folder_path", ",", "folder_name", ")", ":", "\n", "    ", "path_folder", "=", "os", ".", "path", ".", "join", "(", "parent_folder_path", ",", "folder_name", ")", "\n", "os", ".", "makedirs", "(", "path_folder", ",", "exist_ok", "=", "True", ")", "\n", "return", "path_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.plot_variance_line": [[14, 22], ["matplotlib.fill_between", "zip", "zip", "numpy.sqrt().item", "zip", "numpy.sqrt().item", "zip", "numpy.sqrt().item", "numpy.sqrt", "numpy.sqrt().item", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "plot_variance_line", "(", "x_data", ",", "y_data", ",", "var_list", ",", "color", ",", "SE", ",", "num_samples", ")", ":", "\n", "    ", "if", "SE", ":", "\n", "        ", "var_below", "=", "[", "y", "-", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "/", "np", ".", "sqrt", "(", "num_samples", ")", "for", "y", ",", "var", "in", "zip", "(", "y_data", ",", "var_list", ")", "]", "\n", "var_above", "=", "[", "y", "+", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "/", "np", ".", "sqrt", "(", "num_samples", ")", "for", "y", ",", "var", "in", "zip", "(", "y_data", ",", "var_list", ")", "]", "\n", "", "else", ":", "\n", "        ", "var_below", "=", "[", "y", "-", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "for", "y", ",", "var", "in", "zip", "(", "y_data", ",", "var_list", ")", "]", "\n", "var_above", "=", "[", "y", "+", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "for", "y", ",", "var", "in", "zip", "(", "y_data", ",", "var_list", ")", "]", "\n", "", "plt", ".", "fill_between", "(", "x_data", ",", "var_below", ",", "var_above", ",", "edgecolor", "=", "color", ",", "alpha", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.plot_graph": [[24, 48], ["matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.show", "matplotlib.xscale", "range", "matplotlib.legend", "range", "len", "matplotlib.plot", "len", "matplotlib.plot", "utills_and_consts.plot_variance_line", "utills_and_consts.plot_variance_line"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.plot_variance_line", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.plot_variance_line"], ["", "def", "plot_graph", "(", "title", ":", "str", ",", "x_label", ":", "str", ",", "y_label", ":", "str", ",", "x_data_list", ":", "list", ",", "y_data_list", ":", "list", ",", "saving_path", ":", "str", ",", "\n", "graph_label_list", "=", "None", ",", "symlog_scale", "=", "True", ",", "var_lists", "=", "None", ",", "title_size", "=", "9", ",", "SE", "=", "False", ",", "num_samples", "=", "0", ",", "\n", "x_fontsize", "=", "18", ",", "y_fontsize", "=", "18", ")", ":", "\n", "\n", "    ", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ")", "\n", "plt", ".", "xlabel", "(", "x_label", ",", "fontsize", "=", "x_fontsize", ")", "\n", "if", "symlog_scale", ":", "\n", "        ", "plt", ".", "xscale", "(", "'log'", ")", "\n", "", "plt", ".", "ylabel", "(", "y_label", ",", "fontsize", "=", "y_fontsize", ")", "\n", "color_list", "=", "[", "'b'", ",", "'r'", ",", "'g'", ",", "'y'", ",", "'gray'", ",", "'k'", ",", "'m'", ",", "'c'", "]", "\n", "if", "graph_label_list", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "x_data_list", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "x_data_list", "[", "i", "]", ",", "y_data_list", "[", "i", "]", ",", "color_list", "[", "i", "]", ",", "label", "=", "graph_label_list", "[", "i", "]", ")", "\n", "if", "var_lists", "is", "not", "None", ":", "\n", "                ", "plot_variance_line", "(", "x_data_list", "[", "i", "]", ",", "y_data_list", "[", "i", "]", ",", "var_lists", "[", "i", "]", ",", "color_list", "[", "i", "]", ",", "SE", ",", "num_samples", ")", "\n", "", "", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "x_data_list", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "x_data_list", "[", "i", "]", ",", "y_data_list", "[", "i", "]", ",", "color_list", "[", "i", "]", ")", "\n", "if", "var_lists", "is", "not", "None", ":", "\n", "                ", "plot_variance_line", "(", "x_data_list", "[", "i", "]", ",", "y_data_list", "[", "i", "]", ",", "var_lists", "[", "i", "]", ",", "color_list", "[", "i", "]", ",", "SE", ",", "num_samples", ")", "\n", "\n", "", "", "", "plt", ".", "savefig", "(", "saving_path", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set": [[50, 54], ["model.predict", "pandas.DataFrame", "numpy.sum", "len"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "evaluate_model_on_test_set", "(", "test_set", ",", "model", ",", "feature_list_to_predict", ",", "orig_df_f_loan_status", "=", "None", ",", "target_label", "=", "'LoanStatus'", ")", ":", "\n", "    ", "test_labels", "=", "test_set", "[", "target_label", "]", "if", "orig_df_f_loan_status", "is", "None", "else", "orig_df_f_loan_status", "\n", "will_loan_returned_pred", "=", "model", ".", "predict", "(", "pd", ".", "DataFrame", "(", "test_set", "[", "feature_list_to_predict", "]", ")", ")", "\n", "return", "1", "-", "np", ".", "sum", "(", "will_loan_returned_pred", "==", "test_labels", ")", "/", "len", "(", "will_loan_returned_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.load_model": [[56, 58], ["pickle.load", "open"], "function", ["None"], ["", "def", "load_model", "(", "path", ":", "str", ")", ":", "\n", "    ", "return", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.save_model": [[60, 62], ["pickle.dump", "open"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "pickle", ".", "dump", "(", "model", ",", "open", "(", "model_path", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.get_data_with_right_size": [[64, 69], ["pandas.read_csv", "min", "len"], "function", ["None"], ["", "def", "get_data_with_right_size", "(", "data_path", ":", "str", ",", "data_size", ":", "int", ")", ":", "\n", "    ", "data_df", "=", "pd", ".", "read_csv", "(", "data_path", ")", "\n", "if", "data_size", ">", "0", ":", "\n", "        ", "data_df", "=", "data_df", "[", ":", "min", "(", "data_size", ",", "len", "(", "data_df", ")", ")", "]", "\n", "", "return", "data_df", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.friends_dict_creator.sample_all_classes_in_list": [[6, 26], ["list", "set", "len", "random.sample", "set", "range", "len"], "function", ["None"], ["def", "sample_all_classes_in_list", "(", "labels_friends", ":", "pd", ".", "Series", ",", "num_friends", ":", "int", ",", "num_class", ":", "int", "=", "2", ",", "\n", "use_all_classes", ":", "bool", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param labels_friends: The labels of the the examples in the df we sample friends from.\n    :param num_friends: The number of friends that every instance has. Here we consider friend as single instance.\n    It means every sample can learn from num_friends examples. We sample examples not friend key. If two\n    examples shares the same mem_key they are not sampled together.\n    :param num_class: Number of different classes that the instances in the returned list have. \n    :param use_all_classes: Whatever to ensure all class in the list.\n    :return: List of indexes that sampled from labels_friends.\n    '''", "\n", "index_friends_list", "=", "list", "(", ")", "\n", "classes_set", "=", "set", "(", ")", "\n", "while", "len", "(", "classes_set", ")", "<", "num_class", ":", "\n", "        ", "index_friends_list", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "labels_friends", ")", ")", ",", "num_friends", ")", "\n", "classes_set", "=", "set", "(", "labels_friends", "[", "index_friends_list", "]", ")", "\n", "if", "not", "use_all_classes", ":", "\n", "            ", "break", "\n", "", "", "return", "index_friends_list", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.friends_dict_creator.get_member_friends_dict": [[28, 60], ["dict", "random.seed", "os.path.exists", "friends_dict_creator.sample_all_classes_in_list", "open", "json.load", "len", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.friends_dict_creator.sample_all_classes_in_list"], ["", "def", "get_member_friends_dict", "(", "num_friends", ":", "int", ",", "test_size", ":", "int", ",", "label_friends", ":", "pd", ".", "Series", ",", "mem_keys_to_create_list_friend_for", ":", "list", ",", "\n", "member_dict_path", ":", "str", "=", "None", ",", "force_to_crate", ":", "bool", "=", "False", ",", "use_all_classes", ":", "bool", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param num_friends: The number of friends that every instance has. Here we consider friend as single instance.\n    It means every sample can learn from num_friends examples. We sample examples not friend key. If two\n    examples shares the same mem_key they are not sampled together.\n    :param test_size:\n    :param label_friends: The labels of the the examples in the df we sample friends from.\n    :param mem_keys_to_create_list_friend_for: List of member keys of dataset we create friends list for.\n    :param member_dict_path: Path to load or save the member dict. If this is none create the dictionary and\n    dont save it.\n    :param force_to_crate: Whatever we have to create new dictionary.\n    :param use_all_classes: If this is False the returned dictionary may consist only one class.\n    :return: Dictionary that his keys are member_key and value is list of sample indexes in the friends df.\n    '''", "\n", "if", "not", "force_to_crate", "and", "os", ".", "path", ".", "exists", "(", "member_dict_path", ")", ":", "\n", "        ", "with", "open", "(", "member_dict_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "member_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "test_size", "<=", "len", "(", "member_dict", ".", "keys", ")", ":", "\n", "            ", "return", "member_dict", "\n", "\n", "", "", "member_dict", "=", "dict", "(", ")", "\n", "random", ".", "seed", "(", "8", ")", "\n", "for", "mem_key", "in", "mem_keys_to_create_list_friend_for", ":", "\n", "        ", "index_friends_list", "=", "sample_all_classes_in_list", "(", "label_friends", ",", "num_friends", ",", "use_all_classes", "=", "use_all_classes", ")", "\n", "member_dict", "[", "mem_key", "]", "=", "{", "\"friends with credit data\"", ":", "index_friends_list", "}", "\n", "", "if", "member_dict_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "member_dict_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "member_dict", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "return", "member_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_hardt_model": [[10, 23], ["os.path.join", "print", "utills_and_consts.get_data_with_right_size", "model.HardtAlgo", "utills_and_consts.load_model.fit", "utills_and_consts.save_model", "utills_and_consts.load_model", "os.path.exists", "cost_functions.WeightedLinearCostFunction", "len"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.get_data_with_right_size", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.save_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.load_model"], ["def", "get_hardt_model", "(", "cost_factor", ",", "train_path", ",", "force_train_hardt", "=", "False", ",", "\n", "feature_list_to_use", "=", "six_most_significant_features", ",", "train_size", "=", "-", "1", ")", ":", "\n", "    ", "hardt_model_path", "=", "os", ".", "path", ".", "join", "(", "models_folder_path", ",", "f'Hardt_cost_factor={cost_factor}'", ")", "\n", "if", "force_train_hardt", "or", "os", ".", "path", ".", "exists", "(", "hardt_model_path", ")", "is", "False", ":", "\n", "        ", "print", "(", "f'training Hardt model'", ")", "\n", "train_df", "=", "get_data_with_right_size", "(", "train_path", ",", "train_size", ")", "\n", "hardt_algo", "=", "HardtAlgo", "(", "WeightedLinearCostFunction", "(", "a", "[", ":", "len", "(", "feature_list_to_use", ")", "]", ",", "cost_factor", ")", ")", "\n", "\n", "hardt_algo", ".", "fit", "(", "train_df", "[", "feature_list_to_use", "]", ",", "train_df", "[", "'LoanStatus'", "]", ")", "\n", "save_model", "(", "hardt_algo", ",", "hardt_model_path", ")", "\n", "", "else", ":", "\n", "        ", "hardt_algo", "=", "load_model", "(", "hardt_model_path", ")", "\n", "", "return", "hardt_algo", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_angle_between_two_vectors": [[25, 37], ["np.arccos().item", "np.arccos", "np.linalg.norm", "np.linalg.norm"], "function", ["None"], ["", "def", "get_angle_between_two_vectors", "(", "vec1", ":", "np", ".", "array", ",", "vec2", ":", "np", ".", "array", ",", "result_in_degree", ":", "bool", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param vec1: Vector1\n    :param vec2: Vector2\n    :param result_in_degree: Whatever angle should be in degree or radiant\n    :return: The angle between the two vectors\n    '''", "\n", "angle", "=", "np", ".", "arccos", "(", "vec1", "@", "vec2", "/", "(", "np", ".", "linalg", ".", "norm", "(", "vec1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "vec2", ")", ")", ")", ".", "item", "(", ")", "\n", "if", "result_in_degree", ":", "\n", "        ", "angle", "*=", "180", "/", "np", ".", "pi", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.strategic_modify_using_known_clf": [[39, 63], ["orig_df[].copy", "filter", "tqdm.tqdm", "orig_df[].iterrows", "orig_df[].copy.insert", "np.array", "t.update", "len", "len", "cost_func.maximize_features_against_binary_model", "f.predict", "np.array.reshape", "len", "len"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.maximize_features_against_binary_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "strategic_modify_using_known_clf", "(", "orig_df", ":", "pd", ".", "DataFrame", ",", "f", ",", "feature_list", ":", "list", ",", "cost_func", ":", "CostFunction", ")", ":", "\n", "    ", "'''\n\n    :param orig_df: Data frame before any change.\n    :param f: The model that players try to achieve positive score.\n    :param feature_list: Features that are used f to predict loan\n    :param cost_func: cost function to determine player payments\n    :return: The data after each player changed his features\n    '''", "\n", "modify_data", "=", "orig_df", "[", "feature_list", "]", ".", "copy", "(", ")", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "orig_df", ")", ")", "as", "t", ":", "\n", "        ", "for", "index", ",", "ex", "in", "orig_df", "[", "feature_list", "]", ".", "iterrows", "(", ")", ":", "\n", "            ", "x", "=", "np", ".", "array", "(", "ex", ")", "\n", "if", "f", ".", "predict", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "==", "-", "1", ":", "\n", "                ", "z", "=", "cost_func", ".", "maximize_features_against_binary_model", "(", "x", ",", "f", ")", "\n", "modify_data", ".", "loc", "[", "index", "]", "=", "z", "if", "len", "(", "z", ")", ">", "1", "else", "z", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "modify_data", ".", "loc", "[", "index", "]", "=", "x", "if", "len", "(", "x", ")", ">", "1", "else", "x", "[", "0", "]", "\n", "", "t", ".", "update", "(", "1", ")", "\n", "# insert other features that are not used for prediction but yet important:", "\n", "", "", "for", "col_name", "in", "filter", "(", "lambda", "c", ":", "c", "not", "in", "modify_data", ".", "columns", ",", "orig_df", ".", "columns", ")", ":", "\n", "        ", "modify_data", ".", "insert", "(", "len", "(", "modify_data", ".", "columns", ")", ",", "col_name", ",", "orig_df", "[", "col_name", "]", ",", "True", ")", "\n", "\n", "", "return", "modify_data", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.init_data_to_return_dict": [[65, 72], ["dict", "list", "list", "list"], "function", ["None"], ["", "def", "init_data_to_return_dict", "(", ")", ":", "\n", "    ", "data_to_return", "=", "dict", "(", ")", "\n", "data_to_return", "[", "'number_moved'", "]", "=", "0", "\n", "data_to_return", "[", "'err_list'", "]", "=", "list", "(", ")", "\n", "data_to_return", "[", "'l2_norm_list'", "]", "=", "list", "(", ")", "\n", "data_to_return", "[", "'angle_f_hat_f_list'", "]", "=", "list", "(", ")", "\n", "return", "data_to_return", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.update_dicts_for_f_hat_result": [[74, 92], ["dict", "os.path.join", "utills_and_consts.evaluate_model_on_test_set", "data_to_return[].append", "np.append", "np.linalg.norm().item", "data_to_return[].append", "strategic_players.get_angle_between_two_vectors", "data_to_return[].append", "utills_and_consts.save_model", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_angle_between_two_vectors", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.save_model"], ["", "def", "update_dicts_for_f_hat_result", "(", "f_hat_data_dict", ",", "data_to_return", ",", "member_key", ",", "orig_df", ",", "f_hat", ",", "feature_to_learn_list", ",", "orig_df_f_loan_status", ",", "\n", "models_f_hat_path", ",", "f_vec", ",", "did_changed", ",", "prediction_f_hat_on_x", ",", "save_flag", ")", ":", "\n", "    ", "f_hat_data_dict", "[", "member_key", "]", "=", "dict", "(", ")", "\n", "saving_model_path", "=", "os", ".", "path", ".", "join", "(", "models_f_hat_path", ",", "f'f_hat_{member_key}.sav'", ")", "\n", "if", "save_flag", ":", "\n", "        ", "save_model", "(", "f_hat", ",", "saving_model_path", ")", "\n", "", "f_hat_data_dict", "[", "member_key", "]", "[", "'saving model path'", "]", "=", "saving_model_path", "\n", "f_hat_data_dict", "[", "member_key", "]", "[", "'err'", "]", "=", "evaluate_model_on_test_set", "(", "orig_df", ",", "f_hat", ",", "feature_to_learn_list", ",", "orig_df_f_loan_status", ")", "\n", "data_to_return", "[", "'err_list'", "]", ".", "append", "(", "f_hat_data_dict", "[", "member_key", "]", "[", "'err'", "]", ")", "\n", "f_hat_vec", "=", "np", ".", "append", "(", "f_hat", ".", "coef_", "[", "0", "]", ",", "f_hat", ".", "intercept_", ")", "\n", "f_hat_data_dict", "[", "member_key", "]", "[", "'||f_hat_vec - f_vec||_2'", "]", "=", "np", ".", "linalg", ".", "norm", "(", "f_hat_vec", "-", "f_vec", ")", ".", "item", "(", ")", "\n", "data_to_return", "[", "'l2_norm_list'", "]", ".", "append", "(", "f_hat_data_dict", "[", "member_key", "]", "[", "'||f_hat_vec - f_vec||_2'", "]", ")", "\n", "f_hat_data_dict", "[", "member_key", "]", "[", "'angle_f_hat_f'", "]", "=", "get_angle_between_two_vectors", "(", "f_hat_vec", ",", "f_vec", ")", "\n", "data_to_return", "[", "'angle_f_hat_f_list'", "]", ".", "append", "(", "f_hat_data_dict", "[", "member_key", "]", "[", "'angle_f_hat_f'", "]", ")", "\n", "f_hat_data_dict", "[", "member_key", "]", "[", "'prediction on f_hat'", "]", "=", "prediction_f_hat_on_x", "\n", "f_hat_data_dict", "[", "member_key", "]", "[", "'did changed'", "]", "=", "did_changed", "\n", "if", "did_changed", ":", "\n", "        ", "data_to_return", "[", "'number_moved'", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.finish_data_dicts_updates": [[94, 109], ["strategic_players.finish_data_dicts_updates.add_mean_and_var_for_key"], "function", ["None"], ["", "", "def", "finish_data_dicts_updates", "(", "data_to_return", ",", "f_hat_data_dict", ",", "f_hat_data_json_path", ",", "data_to_return_path", ",", "save_flag", ")", ":", "\n", "    ", "def", "add_mean_and_var_for_key", "(", "base_key_name", ":", "str", ")", ":", "\n", "        ", "key_list_name", "=", "base_key_name", "+", "'_list'", "\n", "mean", "=", "sum", "(", "data_to_return", "[", "key_list_name", "]", ")", "/", "len", "(", "data_to_return", "[", "key_list_name", "]", ")", "\n", "data_to_return", "[", "base_key_name", "+", "'_avg'", "]", "=", "mean", "\n", "data_to_return", "[", "base_key_name", "+", "'_var'", "]", "=", "sum", "(", "(", "val", "-", "mean", ")", "**", "2", "for", "val", "in", "data_to_return", "[", "key_list_name", "]", ")", "/", "len", "(", "data_to_return", "[", "key_list_name", "]", ")", "\n", "del", "data_to_return", "[", "key_list_name", "]", "\n", "\n", "", "for", "key", "in", "[", "'err'", ",", "'l2_norm'", ",", "'angle_f_hat_f'", "]", ":", "\n", "        ", "add_mean_and_var_for_key", "(", "key", ")", "\n", "", "if", "save_flag", ":", "\n", "        ", "with", "open", "(", "f_hat_data_json_path", ",", "'w+'", ")", "as", "json_file", ":", "\n", "            ", "json", ".", "dump", "(", "f_hat_data_dict", ",", "json_file", ",", "indent", "=", "4", ")", "\n", "", "with", "open", "(", "data_to_return_path", ",", "'w+'", ")", "as", "json_file", ":", "\n", "            ", "json", ".", "dump", "(", "data_to_return", ",", "json_file", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_paths_for_running": [[111, 125], ["os.path.join", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder", "os.path.join", "os.path.join", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder", "utills_and_consts.safe_create_folder"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.safe_create_folder"], ["", "", "", "def", "get_paths_for_running", "(", "dir_name_for_result", ",", "num_friends", ",", "save_flag", ")", ":", "\n", "    ", "data_modified_path", "=", "os", ".", "path", ".", "join", "(", "safe_create_folder", "(", "dir_name_for_result", ",", "'modified_data'", ")", ",", "\n", "f'modified_test_{num_friends}.csv'", ")", "\n", "models_f_hat_path", "=", "dir_name_for_result", "\n", "if", "save_flag", ":", "\n", "        ", "models_f_hat_path", "=", "safe_create_folder", "(", "safe_create_folder", "(", "dir_name_for_result", ",", "'f_hat_models'", ")", ",", "\n", "f'{num_friends} friends'", ")", "\n", "f_hat_data_json_path", "=", "os", ".", "path", ".", "join", "(", "safe_create_folder", "(", "dir_name_for_result", ",", "'f_hat_result'", ")", ",", "\n", "f'f_hat_results_{num_friends}.json'", ")", "\n", "data_to_return_path", "=", "os", ".", "path", ".", "join", "(", "safe_create_folder", "(", "dir_name_for_result", ",", "'run_summary_result'", ")", ",", "\n", "f'fsummary_results_{num_friends}_friends.json'", ")", "\n", "", "else", ":", "\n", "        ", "f_hat_data_json_path", ",", "data_to_return_path", "=", "None", ",", "None", "\n", "", "return", "models_f_hat_path", ",", "data_modified_path", ",", "f_hat_data_json_path", ",", "data_to_return_path", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_player_movements_and_update_modify_data_df": [[127, 147], ["cost_func.maximize_features_against_binary_model", "f_hat.predict", "cost_func.maximize_features_against_binary_model.reshape", "len", "len"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.maximize_features_against_binary_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "get_player_movements_and_update_modify_data_df", "(", "cost_func", ":", "MixWeightedLinearSumSquareCostFunction", ",", "\n", "modify_data", ":", "pd", ".", "DataFrame", ",", "index", ":", "int", ",", "f_hat", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "    ", "'''\n\n    :param cost_func: Cost function that detriments the payment of player move.\n    :param modify_data: The data frame to update x's movements\n    :param index: Index of the player after changed his features.\n    :param f_hat: Model trained on the friends of member_key\n    :param x: Vector features of player before he moved.\n    :return: bool whatever player changed his features and update modify_data in the new features of the player.\n    '''", "\n", "z", "=", "cost_func", ".", "maximize_features_against_binary_model", "(", "x", ",", "f_hat", ",", "use_spare_cost", "=", "True", ")", "\n", "modify_data", ".", "loc", "[", "index", "]", "=", "z", "\n", "if", "f_hat", ".", "predict", "(", "z", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "==", "1", ":", "\n", "        ", "did_move", "=", "True", "\n", "modify_data", ".", "loc", "[", "index", "]", "=", "z", "if", "len", "(", "z", ")", ">", "1", "else", "z", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "did_move", "=", "False", "\n", "modify_data", ".", "loc", "[", "index", "]", "=", "x", "if", "len", "(", "x", ")", ">", "1", "else", "x", "[", "0", "]", "\n", "", "return", "did_move", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.train_f_hat": [[149, 167], ["sklearn.svm.LinearSVC().fit", "len", "set", "sklearn.svm.LinearSVC"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit"], ["", "def", "train_f_hat", "(", "sample_friends_from_df", ":", "pd", ".", "DataFrame", ",", "sample_friends_f_loan_status", ":", "pd", ".", "Series", ",", "member_dict", ":", "dict", ",", "\n", "member_key", ":", "str", ",", "feature_to_learn_list", ":", "list", ")", ":", "\n", "    ", "'''\n\n    :param sample_friends_from_df: Data frame to sample example to learn from.\n    :param sample_friends_f_loan_status: Loan status according f model\n    :param member_dict: The friends that each sample in the test set has. It means\n    :param member_key: The key of the player who wants to change his features.\n    :param feature_to_learn_list:\n    :return: Model trained on the friends of member_key\n    '''", "\n", "friends_df", "=", "sample_friends_from_df", ".", "iloc", "[", "member_dict", "[", "member_key", "]", "[", "\"friends with credit data\"", "]", ",", ":", "]", "\n", "friends_labels", "=", "sample_friends_f_loan_status", "[", "member_dict", "[", "member_key", "]", "[", "\"friends with credit data\"", "]", "]", "\n", "if", "len", "(", "set", "(", "friends_labels", ")", ")", "<", "2", ":", "\n", "        ", "return", "None", "\n", "", "f_hat", "=", "LinearSVC", "(", "C", "=", "1000", ",", "penalty", "=", "'l2'", ",", "random_state", "=", "42", ",", "max_iter", "=", "100000000", ")", ".", "fit", "(", "\n", "friends_df", "[", "feature_to_learn_list", "]", ",", "friends_labels", ")", "\n", "return", "f_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.write_modify_data_with_all_columns": [[169, 173], ["filter", "modify_data.to_csv", "modify_data.insert", "len"], "function", ["None"], ["", "def", "write_modify_data_with_all_columns", "(", "modify_data", ",", "orig_df", ",", "data_modified_path", ")", ":", "\n", "    ", "for", "col_name", "in", "filter", "(", "lambda", "c", ":", "c", "not", "in", "modify_data", ".", "columns", ",", "orig_df", ".", "columns", ")", ":", "\n", "        ", "modify_data", ".", "insert", "(", "len", "(", "modify_data", ".", "columns", ")", ",", "col_name", ",", "orig_df", "[", "col_name", "]", ",", "True", ")", "\n", "", "modify_data", ".", "to_csv", "(", "data_modified_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.strategic_modify_learn_from_friends": [[175, 234], ["clf.predict", "clf.predict", "orig_df[].copy", "dict", "strategic_players.init_data_to_return_dict", "strategic_players.finish_data_dicts_updates", "strategic_players.write_modify_data_with_all_columns", "strategic_players.get_paths_for_running", "tqdm.tqdm", "zip", "projected_visualization.visualize_projected_changed_df", "orig_df[].iterrows", "os.path.exists", "dict", "np.array", "t.update", "len", "os.path.join", "utills_and_consts.load_model", "strategic_players.train_f_hat", "strategic_players.update_dicts_for_f_hat_result", "os.path.join", "train_f_hat.predict", "strategic_players.get_player_movements_and_update_modify_data_df", "prediction_f_hat_on_x.item", "np.array.reshape"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.init_data_to_return_dict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.finish_data_dicts_updates", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.write_modify_data_with_all_columns", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_paths_for_running", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.visualize_projected_changed_df", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.load_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.train_f_hat", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.update_dicts_for_f_hat_result", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_player_movements_and_update_modify_data_df"], ["", "def", "strategic_modify_learn_from_friends", "(", "clf_name", ",", "orig_df", ":", "pd", ".", "DataFrame", ",", "sample_friends_from_df", ":", "pd", ".", "DataFrame", ",", "clf", ",", "\n", "feature_to_learn_list", ",", "cost_func", ":", "CostFunction", ",", "member_dict", ":", "dict", ",", "f_vec", ",", "dir_name_for_result", ":", "str", "=", "None", ",", "\n", "title_for_visualization", ":", "str", "=", "None", ",", "visualization", "=", "True", ",", "num_friends", "=", "0", ",", "\n", "show_flag", "=", "True", ",", "save_flag", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param clf_name: The Name of the classifier\n    :param orig_df: Data frame that contains samples that strategically change their features\n    :param sample_friends_from_df: The data frame to sample friends from\n    :param clf: The model for predictions.\n    :param feature_to_learn_list: list of features that are used for predictions\n    :param cost_func: Cost function that detriments the payment of player move.\n    :param member_dict: Friends dictionary that player can learn from.\n    :param f_vec: The vector weights of the model.\n    :param dir_name_for_result: In this folder the result will be saved\n    :param title_for_visualization: Title of the player movement.\n    :param visualization: Whatever we plot the visualization\n    :param num_friends: Number of friends player learn from\n    :param show_flag: If it 1 the visualization is plotted.\n    :param save_flag: If it 1 Extra data about the experiment is saved\n    :return:\n    modify_data: Data after player moved\n    data_to_return: data represents some statistic to display in graph (we don't display all statistic in graphs).\n    '''", "\n", "\n", "orig_df_f_loan_status", "=", "clf", ".", "predict", "(", "orig_df", "[", "feature_to_learn_list", "]", ")", "\n", "sample_friends_f_loan_status", "=", "clf", ".", "predict", "(", "sample_friends_from_df", "[", "feature_to_learn_list", "]", ")", "\n", "modify_data", "=", "orig_df", "[", "feature_to_learn_list", "]", ".", "copy", "(", ")", "\n", "if", "dir_name_for_result", "is", "not", "None", ":", "\n", "        ", "models_f_hat_path", ",", "data_modified_path", ",", "f_hat_data_json_path", ",", "data_to_return_path", "=", "get_paths_for_running", "(", "dir_name_for_result", ",", "num_friends", ",", "save_flag", ")", "\n", "", "f_hat_data_dict", "=", "dict", "(", ")", "\n", "data_to_return", "=", "init_data_to_return_dict", "(", ")", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "orig_df", ")", ")", "as", "t", ":", "\n", "        ", "for", "(", "index", ",", "ex", ")", ",", "member_key", "in", "zip", "(", "orig_df", "[", "feature_to_learn_list", "]", ".", "iterrows", "(", ")", ",", "orig_df", "[", "'MemberKey'", "]", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "models_f_hat_path", ",", "f'f_hat_{member_key}.sav'", ")", ")", ":", "\n", "                ", "f_hat", "=", "load_model", "(", "os", ".", "path", ".", "join", "(", "models_f_hat_path", ",", "f'f_hat_{member_key}.sav'", ")", ")", "\n", "", "else", ":", "\n", "                ", "f_hat", "=", "train_f_hat", "(", "sample_friends_from_df", ",", "sample_friends_f_loan_status", ",", "member_dict", ",", "member_key", ",", "feature_to_learn_list", ")", "\n", "", "f_hat_data_dict", "[", "member_key", "]", "=", "dict", "(", ")", "\n", "\n", "x", "=", "np", ".", "array", "(", "ex", ")", "\n", "did_changed", "=", "False", "\n", "if", "f_hat", "is", "not", "None", ":", "\n", "                ", "prediction_f_hat_on_x", "=", "f_hat", ".", "predict", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "if", "prediction_f_hat_on_x", "==", "-", "1", ":", "\n", "                    ", "did_changed", "=", "get_player_movements_and_update_modify_data_df", "(", "cost_func", ",", "modify_data", ",", "index", ",", "f_hat", ",", "x", ")", "\n", "", "", "if", "f_hat", "is", "not", "None", ":", "\n", "                ", "update_dicts_for_f_hat_result", "(", "f_hat_data_dict", ",", "data_to_return", ",", "member_key", ",", "orig_df", ",", "f_hat", ",", "\n", "feature_to_learn_list", ",", "orig_df_f_loan_status", ",", "\n", "models_f_hat_path", ",", "f_vec", ",", "did_changed", ",", "prediction_f_hat_on_x", ".", "item", "(", ")", ",", "save_flag", ")", "\n", "", "t", ".", "update", "(", "1", ")", "\n", "", "", "finish_data_dicts_updates", "(", "data_to_return", ",", "f_hat_data_dict", ",", "f_hat_data_json_path", ",", "data_to_return_path", ",", "save_flag", ")", "\n", "\n", "write_modify_data_with_all_columns", "(", "modify_data", ",", "orig_df", ",", "data_modified_path", ")", "\n", "if", "visualization", ":", "\n", "        ", "visualize_projected_changed_df", "(", "clf_name", ",", "orig_df", ",", "modify_data", ",", "feature_to_learn_list", ",", "title_for_visualization", ",", "\n", "dir_name_for_saving_visualize", "=", "dir_name_for_result", ",", "f_weights", "=", "f_vec", "[", ":", "-", "1", "]", ",", "\n", "f_inter", "=", "f_vec", "[", "-", "1", "]", ",", "clf", "=", "clf", ",", "show_flag", "=", "show_flag", ")", "\n", "", "return", "modify_data", ",", "data_to_return", "\n", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.__init__": [[8, 16], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "number_of_friends_to_learn_list", ":", "list", ",", "feature_list_to_use", ":", "list", ",", "f_svm", ",", "hardt_f", ",", "base_output_path", ")", ":", "\n", "        ", "self", ".", "svm_f", "=", "f_svm", "\n", "self", ".", "hardt_f", "=", "hardt_f", "\n", "dict_result", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "m_list", "=", "number_of_friends_to_learn_list", "\n", "self", ".", "dict_result", "=", "dict_result", "\n", "self", ".", "feature_list_to_use", "=", "feature_list_to_use", "\n", "self", ".", "base_output_path", "=", "base_output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.dump_dict_result": [[17, 20], ["open", "json.dump", "os.path.join"], "methods", ["None"], ["", "def", "dump_dict_result", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "base_output_path", ",", "'final_random_friends_dict_result.json'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "dict_result", ",", "json_file", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.update_dict_result": [[21, 45], ["result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "result_exp_container.ResultExpContainer.dict_result[].append", "utills_and_consts.evaluate_model_on_test_set", "result_exp_container.ResultExpContainer.dict_result[].append", "print", "utills_and_consts.evaluate_model_on_test_set", "print", "result_exp_container.ResultExpContainer.dict_result[].append"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set"], ["", "", "def", "update_dict_result", "(", "self", ",", "data_svm_res_dict", ",", "data_hardt_res_dict", ",", "friends_modify_on_svm_strategic_data", ",", "friends_modify_on_hardt_strategic_data", ")", ":", "\n", "        ", "self", ".", "dict_result", "[", "'avg_angel_svm_f_hat'", "]", ".", "append", "(", "data_svm_res_dict", "[", "'angle_f_hat_f_avg'", "]", ")", "\n", "self", ".", "dict_result", "[", "'avg_angle_hardt_f_hat'", "]", ".", "append", "(", "data_hardt_res_dict", "[", "'angle_f_hat_f_avg'", "]", ")", "\n", "self", ".", "dict_result", "[", "'l2 f_hat svm dist'", "]", ".", "append", "(", "data_svm_res_dict", "[", "'l2_norm_avg'", "]", ")", "\n", "self", ".", "dict_result", "[", "'l2 f_hat hardt dist'", "]", ".", "append", "(", "data_hardt_res_dict", "[", "'l2_norm_avg'", "]", ")", "\n", "\n", "self", ".", "dict_result", "[", "'avg err f_hat svm'", "]", ".", "append", "(", "data_svm_res_dict", "[", "'err_avg'", "]", ")", "\n", "self", ".", "dict_result", "[", "'avg err f_hat hardt'", "]", ".", "append", "(", "data_hardt_res_dict", "[", "'err_avg'", "]", ")", "\n", "\n", "self", ".", "dict_result", "[", "'var err f_hat svm'", "]", ".", "append", "(", "data_svm_res_dict", "[", "'err_var'", "]", ")", "\n", "self", ".", "dict_result", "[", "'var err f_hat hardt'", "]", ".", "append", "(", "data_hardt_res_dict", "[", "'err_var'", "]", ")", "\n", "self", ".", "dict_result", "[", "'var_angel_svm_f_hat'", "]", ".", "append", "(", "data_svm_res_dict", "[", "'angle_f_hat_f_var'", "]", ")", "\n", "self", ".", "dict_result", "[", "'var_angel_hardt_f_hat'", "]", ".", "append", "(", "data_hardt_res_dict", "[", "'angle_f_hat_f_var'", "]", ")", "\n", "self", ".", "dict_result", "[", "'var l2 f_hat svm dist'", "]", ".", "append", "(", "data_svm_res_dict", "[", "'l2_norm_var'", "]", ")", "\n", "self", ".", "dict_result", "[", "'var l2 f_hat hardt dist'", "]", ".", "append", "(", "data_hardt_res_dict", "[", "'l2_norm_var'", "]", ")", "\n", "\n", "f_err", "=", "evaluate_model_on_test_set", "(", "friends_modify_on_svm_strategic_data", ",", "self", ".", "svm_f", ",", "self", ".", "feature_list_to_use", ")", "\n", "self", ".", "dict_result", "[", "'svm_model_friends_err_list'", "]", ".", "append", "(", "f_err", ")", "\n", "print", "(", "f'svm err: {f_err}'", ")", "\n", "\n", "hardt_err", "=", "evaluate_model_on_test_set", "(", "friends_modify_on_hardt_strategic_data", ",", "self", ".", "hardt_f", ",", "self", ".", "feature_list_to_use", ")", "\n", "\n", "print", "(", "f'hardt err: {hardt_err}'", ")", "\n", "self", ".", "dict_result", "[", "'hardt_friends_err_list'", "]", ".", "append", "(", "hardt_err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.get_err_list_for_pop_graph": [[46, 71], ["pd.read_csv", "pd.read_csv", "utills_and_consts.evaluate_model_on_test_set", "utills_and_consts.evaluate_model_on_test_set", "utills_and_consts.evaluate_model_on_test_set", "utills_and_consts.evaluate_model_on_test_set"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set"], ["", "def", "get_err_list_for_pop_graph", "(", "self", ",", "test_f_star", ":", "pd", ".", "DataFrame", ")", ":", "\n", "        ", "'''\n\n        :param test_f_star: Test set with loan status\n        :return: List of list errors graph for pop ploting\n        '''", "\n", "svm_err_random_sample_list", "=", "[", "err", "for", "err", "in", "self", ".", "dict_result", "[", "'svm_model_friends_err_list'", "]", "]", "\n", "hardt_err_random_sample_list", "=", "[", "err", "for", "err", "in", "self", ".", "dict_result", "[", "'hardt_friends_err_list'", "]", "]", "\n", "full_info_modify_svm_df", "=", "pd", ".", "read_csv", "(", "svm_modify_full_information_real_test_path", ")", "\n", "full_info_modify_hardt_df", "=", "pd", ".", "read_csv", "(", "hardt_modify_full_information_real_test_path", ")", "\n", "svm_full_info_err", "=", "evaluate_model_on_test_set", "(", "full_info_modify_svm_df", ",", "self", ".", "svm_f", ",", "self", ".", "feature_list_to_use", ")", "\n", "hardt_full_info_err", "=", "evaluate_model_on_test_set", "(", "full_info_modify_hardt_df", ",", "self", ".", "hardt_f", ",", "self", ".", "feature_list_to_use", ")", "\n", "svm_full_info_err_list", "=", "[", "svm_full_info_err", "for", "_", "in", "self", ".", "m_list", "]", "\n", "hardt_full_info_err_list", "=", "[", "hardt_full_info_err", "for", "_", "in", "self", ".", "m_list", "]", "\n", "svm_no_change_err", "=", "evaluate_model_on_test_set", "(", "test_f_star", ",", "self", ".", "svm_f", ",", "self", ".", "feature_list_to_use", ")", "\n", "svm_no_change_err_list", "=", "[", "svm_no_change_err", "for", "_", "in", "self", ".", "m_list", "]", "\n", "hardt_no_change_err", "=", "evaluate_model_on_test_set", "(", "test_f_star", ",", "self", ".", "hardt_f", ",", "self", ".", "feature_list_to_use", ")", "\n", "hardt_no_change_err_list", "=", "[", "hardt_no_change_err", "for", "_", "in", "self", ".", "m_list", "]", "\n", "y_data_list", "=", "[", "svm_err_random_sample_list", ",", "\n", "hardt_err_random_sample_list", ",", "\n", "svm_full_info_err_list", ",", "\n", "hardt_full_info_err_list", ",", "\n", "svm_no_change_err_list", ",", "\n", "hardt_no_change_err_list", "]", "\n", "return", "y_data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.plot_pop_graph": [[72, 144], ["os.path.join", "result_exp_container.ResultExpContainer.get_err_list_for_pop_graph", "plt.subplots", "plt.xlim", "plt.title", "plt.xlabel", "plt.xscale", "plt.ylabel", "range", "fig.add_axes", "fig.add_axes.plot", "fig.add_axes.fill_between", "fig.add_axes.plot", "fig.add_axes.fill_between", "fig.add_axes.set_xscale", "fig.add_axes.set_ylabel", "fig.add_axes.set_xlabel", "fig.add_axes.legend", "ax1.fill_between", "ax1.arrow", "ax1.arrow", "ax1.text", "plt.savefig", "plt.show", "zip", "len", "ax1.plot", "plt.legend", "print", "np.sqrt().item", "zip", "np.sqrt().item", "zip", "np.sqrt().item", "zip", "np.sqrt().item", "zip", "np.sqrt", "np.sqrt", "np.sqrt", "np.sqrt"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.get_err_list_for_pop_graph"], ["", "def", "plot_pop_graph", "(", "self", ",", "test_f_star", ",", "spare_cost", ")", ":", "\n", "        ", "'''\n\n        :param test_f_star: Test set with loan status\n        :return: Plot the pop graph according the experiment result\n        '''", "\n", "figsize_movements_plot", "=", "(", "8.5", ",", "4.8", ")", "\n", "saving_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_output_path", ",", "'number_that_moved_vs_num_friends.png'", ")", "\n", "err_f_hat_hardt_list", "=", "[", "err", "for", "err", "in", "self", ".", "dict_result", "[", "'avg err f_hat hardt'", "]", "]", "\n", "err_f_hat_svm_list", "=", "[", "err", "for", "err", "in", "self", ".", "dict_result", "[", "'avg err f_hat svm'", "]", "]", "\n", "var_err_f_fhat_svm_list", "=", "self", ".", "dict_result", "[", "'var err f_hat svm'", "]", "\n", "var_err_f_fhat_hardt_list", "=", "self", ".", "dict_result", "[", "'var err f_hat hardt'", "]", "\n", "y_data_list", "=", "self", ".", "get_err_list_for_pop_graph", "(", "test_f_star", ")", "\n", "graph_label_list", "=", "[", "'SVM(in the dark)'", ",", "'HMPW(in the dark)'", ",", "'SVM(fully-informed)'", ",", "\n", "'HMPW(fully-informed)'", ",", "'SVM(non-strategic)'", ",", "'HMPW(non-strategic)'", "]", "\n", "safety_str", "=", "''", "\n", "if", "spare_cost", "!=", "0", ":", "\n", "            ", "safety_str", "=", "f' (safety={spare_cost})'", "\n", "", "title", "=", "'POP in Prosper.com loans data'", "+", "safety_str", "\n", "color_list", "=", "[", "'orange'", ",", "'blue'", ",", "'orange'", ",", "'blue'", ",", "'orange'", ",", "'blue'", ",", "'m'", ",", "'c'", "]", "\n", "alpha_list", "=", "[", "1", ",", "1", ",", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", "]", "\n", "ls_list", "=", "[", "'solid'", ",", "'solid'", ",", "'--'", ",", "'--'", ",", "'dotted'", ",", "'dotted'", "]", "\n", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "figsize_movements_plot", ")", "\n", "plt", ".", "xlim", "(", "[", "4", ",", "8192", "]", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "xlabel", "(", "'m'", ",", "fontsize", "=", "15", ")", "\n", "\n", "plt", ".", "xscale", "(", "'log'", ")", "\n", "plt", ".", "ylabel", "(", "'error'", ",", "fontsize", "=", "15", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "y_data_list", ")", ")", ":", "\n", "            ", "ax1", ".", "plot", "(", "self", ".", "m_list", ",", "y_data_list", "[", "i", "]", ",", "color_list", "[", "i", "]", ",", "label", "=", "graph_label_list", "[", "i", "]", ",", "ls", "=", "ls_list", "[", "i", "]", ",", "\n", "alpha", "=", "alpha_list", "[", "i", "]", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"lower center\"", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "0.8", ")", ",", "ncol", "=", "3", ",", "prop", "=", "{", "'size'", ":", "10", "}", ")", "\n", "\n", "", "ax2", "=", "fig", ".", "add_axes", "(", "[", "0.5", ",", "0.55", ",", "0.4", ",", "0.18", "]", ")", "\n", "ax2", ".", "plot", "(", "self", ".", "m_list", ",", "err_f_hat_svm_list", ",", "'darkorange'", ",", "label", "=", "r'SVM'", ")", "\n", "var_below", "=", "[", "y", "-", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "for", "y", ",", "var", "in", "zip", "(", "err_f_hat_svm_list", ",", "var_err_f_fhat_svm_list", ")", "]", "\n", "var_above", "=", "[", "y", "+", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "for", "y", ",", "var", "in", "zip", "(", "err_f_hat_svm_list", ",", "var_err_f_fhat_svm_list", ")", "]", "\n", "ax2", ".", "fill_between", "(", "self", ".", "m_list", ",", "var_below", ",", "var_above", ",", "edgecolor", "=", "'orange'", ",", "alpha", "=", "0.2", ")", "\n", "ax2", ".", "plot", "(", "self", ".", "m_list", ",", "err_f_hat_hardt_list", ",", "'b'", ",", "label", "=", "r'HARDT'", ")", "\n", "var_below", "=", "[", "y", "-", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "for", "y", ",", "var", "in", "zip", "(", "err_f_hat_hardt_list", ",", "var_err_f_fhat_hardt_list", ")", "]", "\n", "var_above", "=", "[", "y", "+", "np", ".", "sqrt", "(", "var", ")", ".", "item", "(", ")", "for", "y", ",", "var", "in", "zip", "(", "err_f_hat_hardt_list", ",", "var_err_f_fhat_hardt_list", ")", "]", "\n", "ax2", ".", "fill_between", "(", "self", ".", "m_list", ",", "var_below", ",", "var_above", ",", "edgecolor", "=", "'b'", ",", "alpha", "=", "0.2", ")", "\n", "ax2", ".", "set_xscale", "(", "'log'", ")", "\n", "ax2", ".", "set_ylabel", "(", "r'$\\varepsilon_2$'", ",", "fontsize", "=", "15", ")", "\n", "ax2", ".", "set_xlabel", "(", "'m'", ",", "fontsize", "=", "15", ")", "\n", "\n", "ax2", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "\n", "#### finish", "\n", "hardt_full_info_err_list", ",", "hardt_err_random_sample_list", "=", "y_data_list", "[", "3", "]", ",", "y_data_list", "[", "1", "]", "\n", "ax1", ".", "fill_between", "(", "self", ".", "m_list", ",", "hardt_full_info_err_list", ",", "hardt_err_random_sample_list", ",", "alpha", "=", "0.2", ",", "\n", "color", "=", "'lightgray'", ",", "hatch", "=", "\"\\\\\\\\\\\\\\\\\"", ")", "\n", "m_to_write_arrow", "=", "self", ".", "m_list", "[", "2", "]", "\n", "ax1", ".", "arrow", "(", "m_to_write_arrow", ",", "hardt_full_info_err_list", "[", "2", "]", ",", "0", ",", "\n", "hardt_err_random_sample_list", "[", "2", "]", "-", "hardt_full_info_err_list", "[", "2", "]", ",", "\n", "shape", "=", "'full'", ",", "color", "=", "'black'", ",", "length_includes_head", "=", "True", ",", "\n", "zorder", "=", "0", ",", "head_length", "=", "0.01", ",", "head_width", "=", "2", ")", "\n", "ax1", ".", "arrow", "(", "m_to_write_arrow", ",", "hardt_err_random_sample_list", "[", "2", "]", ",", "0", ",", "\n", "hardt_full_info_err_list", "[", "2", "]", "-", "hardt_err_random_sample_list", "[", "2", "]", ",", "\n", "shape", "=", "'full'", ",", "color", "=", "'black'", ",", "length_includes_head", "=", "True", ",", "\n", "zorder", "=", "0", ",", "head_length", "=", "0.01", ",", "head_width", "=", "2", ")", "\n", "\n", "ax1", ".", "text", "(", "m_to_write_arrow", "-", "10", ",", "(", "hardt_full_info_err_list", "[", "2", "]", "+", "hardt_err_random_sample_list", "[", "2", "]", ")", "/", "2", ",", "r'POP'", ",", "\n", "fontsize", "=", "15", ")", "\n", "plt", ".", "savefig", "(", "saving_path", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "for", "(", "m", ",", "err", ")", "in", "zip", "(", "self", ".", "m_list", ",", "hardt_err_random_sample_list", ")", ":", "\n", "            ", "pop", "=", "err", "-", "hardt_full_info_err_list", "[", "0", "]", "# note that hardt_full_info_err_list is the same value for all list.", "\n", "print", "(", "f'number of friends: {m} and pop:{pop} err: {err}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.get_percent_f_on_delta_fhat_minus_1_list": [[145, 155], ["list", "os.path.join", "pd.read_csv", "len", "list.append", "len", "result_exp_container.ResultExpContainer.hardt_f.predict", "result_exp_container.ResultExpContainer.hardt_f.predict"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "", "def", "get_percent_f_on_delta_fhat_minus_1_list", "(", "self", ",", "m_list", ",", "modified_data_folder", ",", "test_changed_on_hardt", ",", "y_1_and_f_delta_f_1", ")", ":", "\n", "        ", "percent_f_on_delta_fhat_minus_1_list", "=", "list", "(", ")", "\n", "for", "m", "in", "m_list", ":", "\n", "            ", "modified_by_f_hat_path", "=", "os", ".", "path", ".", "join", "(", "modified_data_folder", ",", "f'modified_test_{m}.csv'", ")", "\n", "modify_data_f_hat", "=", "pd", ".", "read_csv", "(", "modified_by_f_hat_path", ")", "\n", "num_f_on_delta_fhat_minus_1", "=", "len", "(", "modify_data_f_hat", "[", "\n", "(", "self", ".", "hardt_f", ".", "predict", "(", "modify_data_f_hat", "[", "self", ".", "feature_list_to_use", "]", ")", "==", "-", "1", ")", "\n", "&", "(", "modify_data_f_hat", "[", "'LoanStatus'", "]", "==", "1", ")", "&", "(", "self", ".", "hardt_f", ".", "predict", "(", "test_changed_on_hardt", "[", "self", ".", "feature_list_to_use", "]", ")", "==", "1", ")", "]", ")", "\n", "percent_f_on_delta_fhat_minus_1_list", ".", "append", "(", "100", "*", "num_f_on_delta_fhat_minus_1", "/", "len", "(", "y_1_and_f_delta_f_1", ")", ")", "\n", "", "return", "percent_f_on_delta_fhat_minus_1_list", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.plot_social_inequality_graph": [[156, 177], ["result_exp_container.ResultExpContainer.get_percent_f_on_delta_fhat_minus_1_list", "os.path.join", "plt.figure", "plt.ylim", "plt.xlim", "plt.grid", "utills_and_consts.plot_graph", "pd.read_csv", "result_exp_container.ResultExpContainer.hardt_f.predict"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.result_exp_container.ResultExpContainer.get_percent_f_on_delta_fhat_minus_1_list", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.plot_graph", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "plot_social_inequality_graph", "(", "self", ",", "modified_data_folder", ":", "str", ",", "spare_cost", ":", "float", ",", "test_size", ":", "int", ")", ":", "\n", "        ", "test_changed_on_hardt", "=", "pd", ".", "read_csv", "(", "hardt_modify_full_information_real_test_path", ")", "[", ":", "test_size", "]", "\n", "y_1_data_sets", "=", "test_changed_on_hardt", "[", "test_changed_on_hardt", "[", "'LoanStatus'", "]", "==", "1", "]", "\n", "y_1_and_f_delta_f_1", "=", "y_1_data_sets", "[", "self", ".", "hardt_f", ".", "predict", "(", "y_1_data_sets", "[", "self", ".", "feature_list_to_use", "]", ")", "==", "1", "]", "\n", "\n", "percent_f_on_delta_fhat_minus_1_list", "=", "self", ".", "get_percent_f_on_delta_fhat_minus_1_list", "(", "self", ".", "m_list", ",", "modified_data_folder", ",", "\n", "test_changed_on_hardt", ",", "y_1_and_f_delta_f_1", ")", "\n", "path_to_save", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_output_path", ",", "'fairness_graph.png'", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "5", ")", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "55", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "4", ",", "4096", "]", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "safety_str", "=", "''", "\n", "if", "spare_cost", "!=", "0", ":", "\n", "            ", "safety_str", "=", "f'safety={spare_cost}'", "\n", "", "plot_graph", "(", "title", "=", "'Social inequality '", "+", "r'($y=1$ and $f(\\Delta_f(x))=1$)'", "+", "'\\n'", "+", "safety_str", ",", "x_label", "=", "'m'", ",", "\n", "y_label", "=", "r'% classified correctly'", ",", "x_data_list", "=", "[", "self", ".", "m_list", "]", ",", "\n", "y_data_list", "=", "[", "percent_f_on_delta_fhat_minus_1_list", "]", ",", "saving_path", "=", "path_to_save", ",", "\n", "graph_label_list", "=", "[", "r'$f(\\Delta_{\\^{f}}(x))=-1$'", "]", ",", "symlog_scale", "=", "True", ",", "title_size", "=", "None", ",", "y_fontsize", "=", "None", ",", "\n", "x_fontsize", "=", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.loan_status_model_trainer.train_loan_status_model_with_cv": [[7, 40], ["len", "print", "sklearn.svm.LinearSVC().fit", "sklearn.model_selection.LeaveOneOut", "len", "sklearn.model_selection.KFold.split", "sklearn.model_selection.KFold", "sklearn.model_selection.KFold", "sklearn.svm.LinearSVC().fit", "sklearn.svm.LinearSVC", "np.sum", "len", "sklearn.svm.LinearSVC", "LinearSVC().fit.predict"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["def", "train_loan_status_model_with_cv", "(", "training_set", ":", "pd", ".", "DataFrame", ",", "training_labels", ":", "pd", ".", "Series", ")", ":", "\n", "    ", "'''\n\n    :param training_set: Data frame without the target label that the model is going to train about.\n    :param training_labels: The label column of the training set.\n    :return: The trained model with the best c param which found in cross validation.\n    '''", "\n", "\n", "num_samples", "=", "len", "(", "training_set", ")", "\n", "if", "num_samples", "<=", "10", ":", "\n", "        ", "splitter", "=", "LeaveOneOut", "(", ")", "\n", "k", "=", "len", "(", "training_set", ")", "\n", "", "elif", "num_samples", "<", "1000", ":", "\n", "        ", "k", "=", "10", "\n", "splitter", "=", "KFold", "(", "n_splits", "=", "k", ")", "\n", "", "else", ":", "\n", "        ", "k", "=", "3", "\n", "splitter", "=", "KFold", "(", "n_splits", "=", "k", ")", "\n", "\n", "", "c_valuse", "=", "[", "0.01", ",", "0.05", ",", "0.1", ",", "0.5", ",", "1", ",", "5", ",", "10", ",", "100", ",", "1000", "]", "\n", "best_c", ",", "best_acc", "=", "-", "1", ",", "-", "np", ".", "inf", "\n", "for", "c", "in", "c_valuse", ":", "\n", "        ", "sum_current_c_acc", "=", "0", "\n", "for", "train_index", ",", "test_index", "in", "splitter", ".", "split", "(", "training_set", ")", ":", "\n", "            ", "X_train", ",", "X_test", "=", "training_set", ".", "iloc", "[", "train_index", ",", ":", "]", ",", "training_set", ".", "iloc", "[", "test_index", ",", ":", "]", "\n", "y_train", ",", "y_test", "=", "training_labels", ".", "iloc", "[", "train_index", "]", ",", "training_labels", ".", "iloc", "[", "test_index", "]", "\n", "current_f", "=", "LinearSVC", "(", "C", "=", "c", ",", "random_state", "=", "42", ",", "max_iter", "=", "100000", ")", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "sum_current_c_acc", "+=", "np", ".", "sum", "(", "current_f", ".", "predict", "(", "X_test", ")", "==", "y_test", ")", "/", "len", "(", "y_test", ")", "\n", "", "if", "best_acc", "<", "sum_current_c_acc", "/", "k", ":", "\n", "            ", "best_acc", ",", "best_c", "=", "sum_current_c_acc", "/", "k", ",", "c", "\n", "", "", "print", "(", "f'picked C: {best_c} with cross validation'", ")", "\n", "f_hat", "=", "LinearSVC", "(", "C", "=", "best_c", ",", "random_state", "=", "42", ",", "max_iter", "=", "100000", ")", ".", "fit", "(", "training_set", ",", "training_labels", ")", "\n", "return", "f_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.loan_status_model_trainer.train_loan_return_svm_model": [[42, 64], ["create_synthetic_loan_status_data.get_f_star_loan_status_real_train_val_test_df", "utills_and_consts.evaluate_model_on_test_set", "print", "pickle.dump", "print", "loan_status_model_trainer.train_loan_status_model_with_cv", "sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC.fit", "open"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.get_f_star_loan_status_real_train_val_test_df", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.loan_status_model_trainer.train_loan_status_model_with_cv", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit"], ["", "def", "train_loan_return_svm_model", "(", "list_features_for_pred", ":", "list", ",", "trained_model_path", ":", "str", ",", "target_label", ":", "str", "=", "'LoanStatus'", ",", "\n", "use_cv", ":", "bool", "=", "False", ")", ":", "\n", "    ", "'''\n\n    :param list_features_for_pred: List of features that are used for predictions.\n    :param trained_model_path: The path to save the trained model.\n    :param target_label: The label to predict.\n    :param use_cv: Whatever we use cross validation\n    :return: The trained model.\n    '''", "\n", "\n", "train_df", ",", "val_df", ",", "test_df", ",", "train_val_df", "=", "get_f_star_loan_status_real_train_val_test_df", "(", ")", "\n", "if", "use_cv", ":", "\n", "        ", "print", "(", "'training loan return model using cross validation'", ")", "\n", "linear_model", "=", "train_loan_status_model_with_cv", "(", "train_val_df", "[", "list_features_for_pred", "]", ",", "train_val_df", "[", "target_label", "]", ")", "\n", "", "else", ":", "\n", "        ", "linear_model", "=", "LinearSVC", "(", "C", "=", "0.01", ",", "penalty", "=", "'l2'", ",", "random_state", "=", "42", ")", "\n", "linear_model", ".", "fit", "(", "train_val_df", "[", "list_features_for_pred", "]", ",", "train_val_df", "[", "target_label", "]", ")", "\n", "", "err", "=", "evaluate_model_on_test_set", "(", "test_df", ",", "linear_model", ",", "list_features_for_pred", ",", "target_label", "=", "target_label", ")", "\n", "print", "(", "f'err on not modify real test: {err}'", ")", "\n", "pickle", ".", "dump", "(", "linear_model", ",", "open", "(", "trained_model_path", ",", "'wb'", ")", ")", "\n", "return", "linear_model", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.loan_status_model_trainer.get_svm_loan_return_model": [[66, 86], ["loan_status_model_trainer.train_loan_return_svm_model", "utills_and_consts.load_model", "create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df", "utills_and_consts.evaluate_model_on_test_set", "print", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.loan_status_model_trainer.train_loan_return_svm_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.load_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set"], ["", "def", "get_svm_loan_return_model", "(", "model_loan_returned_path", ":", "str", ",", "features_to_use", ":", "list", ",", "force_train_loan_model", ":", "bool", "=", "False", ",", "\n", "use_cv", ":", "bool", "=", "False", ")", ":", "\n", "    ", "'''\n\n    :param model_loan_returned_path: Path to load or save the traine loan status model\n    :param features_to_use: list of features to use for predictions.\n    :param force_train_loan_model: Whatever train new model or load old one (if exist)\n    :param use_cv: Whatever we use cross validation\n    :return: Trained loan status model.\n    '''", "\n", "if", "force_train_loan_model", "or", "os", ".", "path", ".", "exists", "(", "model_loan_returned_path", ")", "is", "False", ":", "\n", "        ", "f", "=", "train_loan_return_svm_model", "(", "features_to_use", ",", "model_loan_returned_path", ",", "use_cv", "=", "use_cv", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "load_model", "(", "model_loan_returned_path", ")", "\n", "real_test_f_star_loan_status", "=", "get_real_f_star_loan_status_real_df", "(", "force_create", "=", "False", ",", "orig_df_path", "=", "real_test_path", ",", "\n", "orig_df_f_star_loan_status", "=", "real_test_f_star_loan_status_path", ")", "\n", "\n", "err_on_not_modify", "=", "evaluate_model_on_test_set", "(", "real_test_f_star_loan_status", ",", "f", ",", "features_to_use", ")", "\n", "print", "(", "f'err on not modify real test:{err_on_not_modify}'", ")", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.TrainModel.__call__": [[7, 13], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        :param X: Vector features to predict\n        :return: The prediction result\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.TrainModel.fit": [[14, 20], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        :param X: Data to learn from\n        :param y: True values\n        \"\"\"", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.TrainModel.predict": [[20, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        :param X: Data to predict\n        :return: The new model prediction\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.__init__": [[34, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "separable_cost", ":", "SeparableCost", ")", ":", "\n", "        ", "'''\n\n        :param separable_cost: The cost separable function.\n        '''", "\n", "self", ".", "min_si", "=", "None", "\n", "self", ".", "separable_cost", "=", "separable_cost", "\n", "self", ".", "coef_", "=", "(", "separable_cost", ".", "a", ",", "None", ")", "\n", "self", ".", "intercept_", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.__call__": [[44, 55], ["isinstance", "X.apply", "print", "np.apply_along_axis", "model.HardtAlgo.separable_cost.apply_cost2"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.WeightedLinearCostFunction.apply_cost2"], ["", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "        ", "def", "apply_single_prdictive", "(", "x", ")", ":", "\n", "            ", "return", "1", "if", "self", ".", "separable_cost", ".", "apply_cost2", "(", "x", ")", ">=", "self", ".", "min_si", "else", "-", "1", "\n", "\n", "", "if", "self", ".", "min_si", "is", "None", ":", "\n", "            ", "print", "(", "\"The model hasn't trained yet. please train first\"", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "np", ".", "apply_along_axis", "(", "apply_single_prdictive", ",", "1", ",", "X", ")", "\n", "", "return", "X", ".", "apply", "(", "apply_single_prdictive", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict": [[56, 58], ["model.HardtAlgo."], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.fit": [[60, 76], ["print", "X.apply", "tqdm.tqdm.tqdm", "enumerate", "t.update", "model.HardtAlgo.separable_cost.apply_cost1", "len", "np.sum", "len", "X.apply"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.WeightedLinearCostFunction.apply_cost1"], ["", "def", "fit", "(", "self", ",", "X", ":", "pd", ".", "DataFrame", ",", "y", ")", ":", "\n", "        ", "def", "apply_cost_with_thresh", "(", "x", ")", ":", "\n", "            ", "return", "1", "if", "self", ".", "separable_cost", ".", "apply_cost1", "(", "x", ")", ">=", "thresh", "else", "-", "1", "\n", "", "print", "(", "\"training hardt model it might take a while..\"", ")", "\n", "min_err_si", "=", "np", ".", "inf", "\n", "S", "=", "X", ".", "apply", "(", "self", ".", "separable_cost", ".", "apply_cost2", ",", "axis", "=", "1", ")", "+", "2", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "S", ")", ")", "as", "t", ":", "\n", "            ", "for", "i", ",", "s_i", "in", "enumerate", "(", "S", ")", ":", "\n", "                ", "thresh", "=", "s_i", "-", "2", "\n", "err_si", "=", "np", ".", "sum", "(", "y", "!=", "X", ".", "apply", "(", "apply_cost_with_thresh", ",", "axis", "=", "1", ")", ")", "/", "len", "(", "X", ")", "\n", "if", "min_err_si", ">", "err_si", ":", "\n", "                    ", "min_err_si", "=", "err_si", "\n", "self", ".", "min_si", "=", "s_i", "\n", "", "t", ".", "update", "(", "1", ")", "\n", "", "self", ".", "intercept_", "=", "-", "self", ".", "min_si", "/", "self", ".", "separable_cost", ".", "cost_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.CostFunction.__call__": [[7, 16], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "z", ":", "np", ".", "array", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "        ", "'''\n\n        :param z: Feature vector that player might want to have\n        :param x: Feature that player now has.\n        :return: the cost that player pays to become z\n        '''", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.CostFunction.maximize_features_against_binary_model": [[17, 26], ["None"], "methods", ["None"], ["", "def", "maximize_features_against_binary_model", "(", "self", ",", "x", ":", "np", ".", "array", ",", "trained_model", ",", "use_spare_cost", "=", "False", ")", ":", "\n", "        ", "'''\n\n        :param x: current vector features.\n        :param trained_model: binary model that is trained and player want to get positive score on it.\n        :param use_spare_cost: if we want to use some of the spare cost in order to improve player score on the trained model\n        :return: vector features  that has minimum cost and get positive score on trained_model.\n        '''", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.SeparableCost.apply_cost1": [[29, 32], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "apply_cost1", "(", "self", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.SeparableCost.apply_cost2": [[33, 36], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "apply_cost2", "(", "self", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.WeightedLinearCostFunction.__init__": [[44, 53], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weighted_vector", ":", "np", ".", "array", ",", "cost_factor", "=", "6", ")", ":", "\n", "        ", "'''\n        :param weighted_vector: Weights vector. Each entry i in the vector represents the payment of moving\n        one unit in the i'th feature.\n        :param cost_factor: This parameter determines the scale of the cost function. This is a const that\n        multiply the cost result.\n        '''", "\n", "self", ".", "a", "=", "weighted_vector", "\n", "self", ".", "cost_factor", "=", "cost_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.WeightedLinearCostFunction.__call__": [[54, 56], ["max"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "z", ":", "np", ".", "array", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "a", ".", "T", "@", "(", "z", "-", "x", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.WeightedLinearCostFunction.maximize_features_against_binary_model": [[57, 72], ["cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "cvxpy.Problem.solve", "cvxpy.maximum", "len", "cvxpy.maximum", "print", "trained_model.predict", "cvxpy.Variable.value.reshape"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "maximize_features_against_binary_model", "(", "self", ",", "x", ":", "np", ".", "array", ",", "trained_model", ",", "tolerance", "=", "1e-9", ")", ":", "\n", "        ", "x_tag", "=", "cp", ".", "Variable", "(", "len", "(", "x", ")", ")", "\n", "\n", "func_to_solve", "=", "cp", ".", "Minimize", "(", "cp", ".", "maximum", "(", "self", ".", "cost_factor", "*", "self", ".", "a", ".", "T", "@", "(", "x_tag", "-", "x", ")", ",", "0", ")", ")", "\n", "constrains", "=", "[", "x_tag", "@", "trained_model", ".", "coef_", "[", "0", "]", ">=", "-", "trained_model", ".", "intercept_", "+", "tolerance", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "func_to_solve", ",", "constrains", ")", "\n", "prob", ".", "solve", "(", ")", "\n", "cost_result", "=", "cp", ".", "maximum", "(", "self", ".", "cost_factor", "*", "self", ".", "a", ".", "T", "@", "(", "x_tag", ".", "value", "-", "x", ")", ",", "0", ")", "\n", "if", "x_tag", "is", "None", ":", "\n", "            ", "print", "(", "\"couldn't solve this problem\"", ")", "\n", "return", "\n", "", "if", "trained_model", ".", "predict", "(", "x_tag", ".", "value", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "==", "1", "and", "cost_result", ".", "value", "<", "2", ":", "\n", "            ", "return", "x_tag", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.WeightedLinearCostFunction.apply_cost1": [[73, 78], ["isinstance"], "methods", ["None"], ["", "", "def", "apply_cost1", "(", "self", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "float", ")", ":", "\n", "            ", "return", "self", ".", "cost_factor", "*", "self", ".", "a", ".", "T", "*", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "cost_factor", "*", "self", ".", "a", ".", "T", "@", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.WeightedLinearCostFunction.apply_cost2": [[79, 84], ["isinstance"], "methods", ["None"], ["", "", "def", "apply_cost2", "(", "self", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "float", ")", ":", "\n", "            ", "return", "self", ".", "cost_factor", "*", "self", ".", "a", ".", "T", "*", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "cost_factor", "*", "self", ".", "a", ".", "T", "@", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.__init__": [[94, 108], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weighted_vector", ":", "np", ".", "array", ",", "epsilon", "=", "0.3", ",", "cost_factor", "=", "7", ",", "spare_cost", "=", "0.2", ")", ":", "\n", "        ", "'''\n\n        :param weighted_vector: Weights vector. Each entry i in the vector represents the payment of moving\n        one unit in the i'th feature.\n        :param epsilon: The weight of the l2 cost function.\n        :param cost_factor: This parameter determines the scale of the cost function. This is a const that\n        multiply the cost result.\n        :param spare_cost: How much palyer agree to pay more in order to be beyond the classifier bound.\n        '''", "\n", "self", ".", "a", "=", "weighted_vector", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "cost_factor", "=", "cost_factor", "\n", "self", ".", "spare_cost", "=", "spare_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.__call__": [[109, 112], ["max", "numpy.sum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "z", ":", "np", ".", "array", ",", "x", ":", "np", ".", "array", ")", ":", "\n", "        ", "cost_value", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "self", ".", "a", ".", "T", "@", "(", "z", "-", "x", ")", "+", "self", ".", "epsilon", "*", "np", ".", "sum", "(", "(", "z", "-", "x", ")", "**", "2", ")", "\n", "return", "max", "(", "self", ".", "cost_factor", "*", "cost_value", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.solve_problem_min_cost_s_t_model": [[113, 142], ["cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "len", "cvxpy.Problem.solve", "print", "cvxpy.maximum", "print", "cvxpy.maximum", "cvxpy.sum", "cvxpy.sum"], "methods", ["None"], ["", "def", "solve_problem_min_cost_s_t_model", "(", "self", ",", "model", ",", "x", ",", "tol", ")", ":", "\n", "        ", "'''\n        Fucntion solve the optimization problem find the x' that minimize the cost function with constrain of\n        the model predict x' as positive.\n        :param model: The model that the player wants to get positive prediction.\n        :param x: Current player's vector features.\n        :param tol: Small tolerance for optimization needs. That indicates how much x' should be above the model\n        intercept.\n        :return: Tuple: (x', cost(x, x')).\n        '''", "\n", "x_t", "=", "cp", ".", "Variable", "(", "len", "(", "x", ")", ")", "\n", "func_to_solve", "=", "cp", ".", "Minimize", "(", "\n", "self", ".", "cost_factor", "*", "(", "cp", ".", "maximum", "(", "(", "1", "-", "self", ".", "epsilon", ")", "*", "self", ".", "a", ".", "T", "@", "(", "x_t", "-", "x", ")", ",", "0", ")", "+", "self", ".", "epsilon", "*", "\n", "cp", ".", "sum", "(", "(", "x_t", "-", "x", ")", "**", "2", ")", ")", ")", "\n", "constrains", "=", "[", "x_t", "@", "model", ".", "coef_", "[", "0", "]", ">=", "-", "model", ".", "intercept_", "+", "tol", "]", "\n", "\n", "prob", "=", "cp", ".", "Problem", "(", "func_to_solve", ",", "constrains", ")", "\n", "try", ":", "\n", "            ", "prob", ".", "solve", "(", ")", "\n", "if", "x_t", "is", "None", ":", "\n", "                ", "print", "(", "\"couldn't solve this problem\"", ")", "\n", "return", "\n", "", "cost", "=", "cp", ".", "maximum", "(", "(", "1", "-", "self", ".", "epsilon", ")", "*", "self", ".", "a", ".", "T", "@", "(", "x_t", "-", "x", ")", ",", "0", ")", "+", "self", ".", "epsilon", "*", "cp", ".", "sum", "(", "\n", "(", "x_t", "-", "x", ")", "**", "2", ")", "\n", "cost", "*=", "self", ".", "cost_factor", "\n", "return", "x_t", ",", "cost", "\n", "", "except", ":", "\n", "            ", "print", "(", "'solver failed'", ")", "\n", "return", "x", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.solve_problem_max_model_s_t_cost": [[143, 159], ["cvxpy.Variable", "cvxpy.Maximize", "cvxpy.Problem", "cvxpy.Problem.solve", "len", "print", "cvxpy.maximum", "cvxpy.sum", "cvxpy.maximum", "cvxpy.sum"], "methods", ["None"], ["", "", "def", "solve_problem_max_model_s_t_cost", "(", "self", ",", "model", ",", "x", ",", "spare_cost", ",", "tol", "=", "0.00001", ")", ":", "\n", "        ", "x_t", "=", "cp", ".", "Variable", "(", "len", "(", "x", ")", ")", "\n", "func_to_solve", "=", "cp", ".", "Maximize", "(", "\n", "x_t", "@", "model", ".", "coef_", "[", "0", "]", "+", "model", ".", "intercept_", ")", "\n", "\n", "constrains", "=", "[", "self", ".", "cost_factor", "*", "(", "cp", ".", "maximum", "(", "(", "1", "-", "self", ".", "epsilon", ")", "*", "self", ".", "a", ".", "T", "@", "(", "x_t", "-", "x", ")", ",", "0", ")", "+", "self", ".", "epsilon", "*", "\n", "cp", ".", "sum", "(", "(", "x_t", "-", "x", ")", "**", "2", ")", ")", "<=", "spare_cost", "-", "tol", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "func_to_solve", ",", "constrains", ")", "\n", "prob", ".", "solve", "(", ")", "\n", "if", "x_t", ".", "value", "is", "None", ":", "\n", "            ", "print", "(", "\"couldn't solve this problem\"", ")", "\n", "return", "None", "\n", "", "cost", "=", "cp", ".", "maximum", "(", "(", "1", "-", "self", ".", "epsilon", ")", "*", "self", ".", "a", ".", "T", "@", "(", "x_t", "-", "x", ")", ",", "0", ")", "+", "self", ".", "epsilon", "*", "cp", ".", "sum", "(", "\n", "(", "x_t", "-", "x", ")", "**", "2", ")", "\n", "cost", "*=", "self", ".", "cost_factor", "\n", "return", "x_t", ",", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.check_change_condition": [[161, 163], ["trained_model.predict", "x_tag.value.reshape"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "check_change_condition", "(", "self", ",", "trained_model", ",", "x_tag", ",", "cost_result", ")", ":", "\n", "        ", "return", "trained_model", ".", "predict", "(", "x_tag", ".", "value", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "==", "1", "and", "cost_result", ".", "value", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.maximize_features_against_binary_model": [[164, 179], ["cost_functions.MixWeightedLinearSumSquareCostFunction.solve_problem_min_cost_s_t_model", "cost_functions.MixWeightedLinearSumSquareCostFunction.check_change_condition", "cost_functions.MixWeightedLinearSumSquareCostFunction.check_change_condition", "min", "cost_functions.MixWeightedLinearSumSquareCostFunction.solve_problem_max_model_s_t_cost"], "methods", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.solve_problem_min_cost_s_t_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.check_change_condition", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.check_change_condition", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.cost_functions.MixWeightedLinearSumSquareCostFunction.solve_problem_max_model_s_t_cost"], ["", "def", "maximize_features_against_binary_model", "(", "self", ",", "x", ":", "np", ".", "array", ",", "trained_model", ",", "tolerance", "=", "0.00001", ",", "\n", "use_spare_cost", "=", "False", ")", ":", "\n", "        ", "x_tag", ",", "cost_result", "=", "self", ".", "solve_problem_min_cost_s_t_model", "(", "trained_model", ",", "x", ",", "tolerance", ")", "\n", "if", "cost_result", "is", "None", ":", "\n", "            ", "return", "x_tag", "\n", "", "if", "use_spare_cost", "and", "self", ".", "spare_cost", "!=", "0", ":", "\n", "            ", "if", "self", ".", "check_change_condition", "(", "trained_model", ",", "x_tag", ",", "cost_result", ")", ":", "\n", "                ", "spare_cost", "=", "min", "(", "self", ".", "spare_cost", "+", "cost_result", ".", "value", ",", "2", ")", "\n", "x_cost_tup", "=", "self", ".", "solve_problem_max_model_s_t_cost", "(", "trained_model", ",", "x", ",", "spare_cost", ")", "\n", "if", "x_cost_tup", "is", "not", "None", ":", "\n", "                    ", "x_tag", ",", "cost_result", "=", "x_cost_tup", "\n", "", "", "", "if", "self", ".", "check_change_condition", "(", "trained_model", ",", "x_tag", ",", "cost_result", ")", ":", "\n", "            ", "return", "x_tag", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.apply_transform_creditgrade_loan_returned": [[6, 9], ["None"], "function", ["None"], ["def", "apply_transform_creditgrade_loan_returned", "(", "credit_grade", ")", ":", "\n", "    ", "loan_tresh", "=", "4", "\n", "return", "1", "if", "credit_grade", ">=", "loan_tresh", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df": [[11, 19], ["pandas.read_csv", "orig_real_df[].apply", "pd.read_csv.to_csv", "pandas.read_csv", "os.path.exists"], "function", ["None"], ["", "def", "get_real_f_star_loan_status_real_df", "(", "force_create", ",", "orig_df_path", ",", "orig_df_f_star_loan_status", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "orig_df_f_star_loan_status", ")", "or", "force_create", ":", "\n", "        ", "orig_real_df", "=", "pd", ".", "read_csv", "(", "orig_df_path", ")", "\n", "orig_real_df", "[", "'LoanStatus'", "]", "=", "orig_real_df", "[", "'CreditGrade'", "]", ".", "apply", "(", "apply_transform_creditgrade_loan_returned", ")", "\n", "orig_real_df", ".", "to_csv", "(", "orig_df_f_star_loan_status", ")", "\n", "", "else", ":", "\n", "        ", "orig_real_df", "=", "pd", ".", "read_csv", "(", "orig_df_f_star_loan_status", ")", "\n", "", "return", "orig_real_df", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.get_f_star_loan_status_real_train_val_test_df": [[21, 39], ["create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df", "create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df", "create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df", "pandas.concat", "pd.concat.to_csv"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.create_synthetic_loan_status_data.get_real_f_star_loan_status_real_df"], ["", "def", "get_f_star_loan_status_real_train_val_test_df", "(", "force_create_train", "=", "True", ",", "force_create_val", "=", "True", ",", "\n", "force_create_test", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param force_create_train: Whatever we should create new train set or load the old set\n    :param force_create_val: Whatever we should create new train set or load the old set\n    :param force_create_test: Whatever we should create new train set or load the old set\n    :return: The three datasets with the loan status.\n    '''", "\n", "train_df", "=", "get_real_f_star_loan_status_real_df", "(", "force_create_train", ",", "real_train_path", ",", "\n", "real_train_f_star_loan_status_path", ")", "\n", "val_df", "=", "get_real_f_star_loan_status_real_df", "(", "force_create_val", ",", "real_val_path", ",", "\n", "real_val_f_star_loan_status_path", ")", "\n", "test_df", "=", "get_real_f_star_loan_status_real_df", "(", "force_create_test", ",", "real_test_path", ",", "\n", "real_test_f_star_loan_status_path", ")", "\n", "train_val_df", "=", "pd", ".", "concat", "(", "[", "train_df", ",", "val_df", "]", ",", "ignore_index", "=", "True", ")", "\n", "train_val_df", ".", "to_csv", "(", "real_train_val_f_star_loan_status_path", ")", "\n", "return", "train_df", ",", "val_df", ",", "test_df", ",", "train_val_df", "\n", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.apply_transform_for_2D": [[7, 17], ["numpy.array"], "function", ["None"], ["def", "apply_transform_for_2D", "(", "df", ":", "pd", ".", "DataFrame", ",", "f_weights", ")", ":", "\n", "    ", "'''\n\n    :param df: Data frame to project\n    :param f_weights: The weights of the model to project according to it.\n    :return: The projected data frame\n    '''", "\n", "transform_matrix", "=", "np", ".", "array", "(", "[", "[", "f_weights", "[", "0", "]", ",", "0", "]", ",", "[", "f_weights", "[", "1", "]", ",", "0", "]", ",", "[", "f_weights", "[", "2", "]", ",", "0", "]", ",", "\n", "[", "0.5", "*", "f_weights", "[", "3", "]", ",", "0.5", "*", "f_weights", "[", "3", "]", "]", ",", "[", "0", ",", "f_weights", "[", "4", "]", "]", ",", "[", "0", ",", "f_weights", "[", "5", "]", "]", "]", ")", "\n", "return", "df", "@", "transform_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.get_plot_figure_bounds_and_arrows_param": [[19, 36], ["None"], "function", ["None"], ["", "def", "get_plot_figure_bounds_and_arrows_param", "(", "clf_name", ":", "str", ")", ":", "\n", "    ", "'''\n\n    :param clf_name: Name of the classifier to project according to it.\n    :return: Bounds of the figure and arrows size.\n    '''", "\n", "if", "clf_name", "==", "'SVM'", ":", "\n", "        ", "left_bound", ",", "right_bound", "=", "1", ",", "3", "\n", "bottom_bound", ",", "up_bound", "=", "0.2", ",", "1.4", "\n", "", "elif", "clf_name", "==", "'Hardt'", ":", "\n", "        ", "left_bound", ",", "right_bound", "=", "0.5", ",", "2.5", "\n", "bottom_bound", ",", "up_bound", "=", "0", ",", "1.2", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "", "head_length", "=", "0.03", "\n", "head_width", "=", "0.02", "\n", "return", "left_bound", ",", "right_bound", ",", "bottom_bound", ",", "up_bound", ",", "head_length", ",", "head_width", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.get_head_arrow_size": [[38, 52], ["numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "get_head_arrow_size", "(", "after_row", ",", "before_row", ")", ":", "\n", "    ", "'''\n\n    :param after_row: The row player changed his features\n    :param before_row: The row player after he changed his features\n    :return: head_length and head_width\n    '''", "\n", "if", "np", ".", "abs", "(", "after_row", "[", "0", "]", "-", "before_row", "[", "0", "]", ")", ">", "0.05", "or", "np", ".", "abs", "(", "after_row", "[", "1", "]", "-", "before_row", "[", "1", "]", ")", ">", "0.05", ":", "\n", "        ", "head_length", "=", "0.03", "\n", "head_width", "=", "0.02", "\n", "", "else", ":", "\n", "        ", "head_length", "=", "0.01", "\n", "head_width", "=", "0.01", "\n", "", "return", "head_length", ",", "head_width", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.plot_dot_and_arrows": [[54, 106], ["enumerate", "zip", "projected_df_before.iterrows", "projected_df_after.iterrows", "after_change_df.iterrows", "ax.scatter", "projected_visualization.get_head_arrow_size", "matplotlib.arrow", "ax.scatter", "ax.scatter", "ax.scatter", "numpy.abs", "clf.predict", "numpy.array().reshape", "numpy.array"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.get_head_arrow_size", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.model.HardtAlgo.predict"], ["", "def", "plot_dot_and_arrows", "(", "projected_df_before", ":", "pd", ".", "DataFrame", ",", "projected_df_after", ":", "pd", ".", "DataFrame", ",", "after_change_df", ":", "pd", ".", "DataFrame", "\n", ",", "df_before", ":", "pd", ".", "DataFrame", ",", "df_after", ":", "pd", ".", "DataFrame", ",", "features_to_project", ":", "list", ",", "clf", ",", "ax", ",", "num_point_to_plot", ":", "int", ")", ":", "\n", "    ", "'''\n\n    :param projected_df_before: The data frame before movement projected to 2D\n    :param projected_df_after:  The data frame after movement projected to 2D\n    :param after_change_df: The data frame after the change all features\n    :param df_before: Data frame before change only the relevant features for projection here.\n    :param df_after: Data frame after change only the relevant features for projection here\n    :param features_to_project: Features for projection\n    :param clf: Model for prediction\n    :param ax: ax to plot on\n    :param num_point_to_plot: Number of points that can be in the plot.\n    '''", "\n", "done_orange", ",", "done_green", ",", "done_red", "=", "False", ",", "False", ",", "False", "\n", "for", "i", ",", "(", "before_row_tup", ",", "after_row_tup", ",", "after_full", ")", "in", "enumerate", "(", "\n", "zip", "(", "projected_df_before", ".", "iterrows", "(", ")", ",", "projected_df_after", ".", "iterrows", "(", ")", ",", "after_change_df", ".", "iterrows", "(", ")", ")", ")", ":", "\n", "\n", "        ", "if", "(", "np", ".", "abs", "(", "df_before", ".", "iloc", "[", "i", "]", "-", "df_after", ".", "iloc", "[", "i", "]", ")", ">", "0.00001", ")", ".", "any", "(", ")", ":", "\n", "            ", "if", "clf", "is", "None", "or", "1", "==", "clf", ".", "predict", "(", "np", ".", "array", "(", "after_full", "[", "1", "]", "[", "features_to_project", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", ":", "\n", "                ", "color", "=", "'green'", "\n", "if", "not", "done_green", ":", "\n", "                    ", "label", "=", "r'$\\Delta_{\\hat{f}}(x)$'", "+", "'(approved)'", "\n", "done_green", "=", "True", "\n", "", "else", ":", "\n", "                    ", "label", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "color", "=", "'red'", "\n", "if", "not", "done_red", ":", "\n", "                    ", "label", "=", "r'$\\Delta_{\\hat{f}}(x)$'", "+", "'(denied)'", "\n", "done_red", "=", "True", "\n", "", "else", ":", "\n", "                    ", "label", "=", "None", "\n", "", "", "if", "not", "done_orange", ":", "\n", "                ", "ax", ".", "scatter", "(", "projected_df_before", ".", "iloc", "[", "i", "]", "[", "0", "]", ",", "projected_df_before", ".", "iloc", "[", "i", "]", "[", "1", "]", ",", "s", "=", "10", ",", "color", "=", "'orange'", ",", "\n", "zorder", "=", "1", ",", "label", "=", "r'$x$'", ")", "\n", "done_orange", "=", "True", "\n", "", "else", ":", "\n", "                ", "ax", ".", "scatter", "(", "projected_df_before", ".", "iloc", "[", "i", "]", "[", "0", "]", ",", "projected_df_before", ".", "iloc", "[", "i", "]", "[", "1", "]", ",", "s", "=", "10", ",", "color", "=", "'orange'", ",", "\n", "zorder", "=", "1", ")", "\n", "\n", "", "ax", ".", "scatter", "(", "projected_df_after", ".", "iloc", "[", "i", "]", "[", "0", "]", ",", "projected_df_after", ".", "iloc", "[", "i", "]", "[", "1", "]", ",", "s", "=", "10", ",", "color", "=", "color", ",", "zorder", "=", "1", ",", "\n", "label", "=", "label", ")", "\n", "before_row", ",", "after_row", "=", "before_row_tup", "[", "1", "]", ",", "after_row_tup", "[", "1", "]", "\n", "head_length", ",", "head_width", "=", "get_head_arrow_size", "(", "after_row", ",", "before_row", ")", "\n", "plt", ".", "arrow", "(", "before_row", "[", "0", "]", ",", "before_row", "[", "1", "]", ",", "after_row", "[", "0", "]", "-", "before_row", "[", "0", "]", ",", "after_row", "[", "1", "]", "-", "before_row", "[", "1", "]", ",", "\n", "shape", "=", "'full'", ",", "color", "=", "'black'", ",", "length_includes_head", "=", "True", ",", "\n", "zorder", "=", "0", ",", "head_length", "=", "head_length", ",", "head_width", "=", "head_width", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "scatter", "(", "projected_df_before", ".", "iloc", "[", "i", "]", "[", "0", "]", ",", "projected_df_before", ".", "iloc", "[", "i", "]", "[", "1", "]", ",", "s", "=", "10", ",", "color", "=", "'gray'", ",", "zorder", "=", "1", ")", "\n", "", "if", "i", ">", "num_point_to_plot", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.visualize_projected_changed_df": [[108, 163], ["os.makedirs", "os.path.join", "matplotlib.subplots", "ax.scatter", "ax.scatter", "projected_visualization.get_plot_figure_bounds_and_arrows_param", "projected_visualization.plot_dot_and_arrows", "numpy.arange", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.title", "matplotlib.legend", "matplotlib.close", "projected_visualization.apply_transform_for_2D", "projected_visualization.apply_transform_for_2D", "print", "os.path.join", "os.makedirs", "matplotlib.savefig", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.get_plot_figure_bounds_and_arrows_param", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.plot_dot_and_arrows", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.apply_transform_for_2D", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.apply_transform_for_2D"], ["", "", "", "def", "visualize_projected_changed_df", "(", "clf_name", ":", "str", ",", "before_change_df", ":", "pd", ".", "DataFrame", ",", "after_change_df", ":", "pd", ".", "DataFrame", ",", "\n", "features_to_project", ":", "list", ",", "title", ":", "str", ",", "f_weights", ",", "f_inter", ",", "\n", "label", ":", "str", "=", "'LoanStatus'", ",", "num_point_to_plot", ":", "int", "=", "100", ",", "\n", "dir_for_projection_images", ":", "str", "=", "'2D_projection_images'", ",", "to_save", ":", "bool", "=", "True", ",", "\n", "dir_name_for_saving_visualize", ":", "str", "=", "None", ",", "clf", "=", "None", ",", "show_flag", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param clf_name: Name of the classifier to project according to it.\n    :param before_change_df: Data frame before some samples changed their features.\n    :param after_change_df:  Data frame after some samples changed their features.\n    :param features_to_project: Features list that are used for predictions.\n    :param title: Title for the plot\n    :param f_weights: Weights of the classifier.\n    :param f_inter: Intercept of the classifier.\n    :param label: The target column for prediction\n    :param num_point_to_plot: Number of points that can be in the plot.\n    :param dir_for_projection_images:\n    :param to_save: Whatever to save the plot.\n    :param dir_name_for_saving_visualize: The name of directory to save the plot.\n    :param show_flag: If it 1 the visualization is plotted.\n    '''", "\n", "\n", "\n", "figsize_movements_plot", "=", "(", "8.5", ",", "4.8", ")", "\n", "plt", ".", "rcParams", "[", "'figure.figsize'", "]", "=", "figsize_movements_plot", "\n", "os", ".", "makedirs", "(", "dir_name_for_saving_visualize", ",", "exist_ok", "=", "True", ")", "\n", "dir_for_projection_images", "=", "os", ".", "path", ".", "join", "(", "dir_name_for_saving_visualize", ",", "dir_for_projection_images", ")", "\n", "df_before_loan_status", ",", "df_before", "=", "before_change_df", "[", "label", "]", ",", "before_change_df", "[", "features_to_project", "]", "\n", "df_after", "=", "after_change_df", "[", "features_to_project", "]", "\n", "projected_df_before", ",", "projected_df_after", "=", "apply_transform_for_2D", "(", "df_before", ",", "f_weights", ")", ",", "apply_transform_for_2D", "(", "df_after", ",", "f_weights", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "ax", ".", "scatter", "(", "projected_df_before", "[", "0", "]", "[", ":", "num_point_to_plot", "]", ",", "projected_df_before", "[", "1", "]", "[", ":", "num_point_to_plot", "]", ",", "s", "=", "10", ")", "\n", "ax", ".", "scatter", "(", "projected_df_after", "[", "0", "]", "[", ":", "num_point_to_plot", "]", ",", "projected_df_after", "[", "1", "]", "[", ":", "num_point_to_plot", "]", ",", "s", "=", "10", ")", "\n", "\n", "plot_figure_data", "=", "get_plot_figure_bounds_and_arrows_param", "(", "clf_name", ")", "\n", "if", "plot_figure_data", "is", "None", ":", "\n", "        ", "print", "(", "'clf_name should be Hardt or SVM returning without plot'", ")", "\n", "return", "\n", "", "left_bound", ",", "right_bound", ",", "bottom_bound", ",", "up_bound", ",", "head_length", ",", "head_width", "=", "plot_figure_data", "\n", "plot_dot_and_arrows", "(", "projected_df_before", ",", "projected_df_after", ",", "after_change_df", ",", "df_before", ",", "df_after", ",", "features_to_project", ",", "clf", ",", "ax", ",", "num_point_to_plot", ")", "\n", "t", "=", "np", ".", "arange", "(", "left_bound", ",", "right_bound", ",", "0.2", ")", "\n", "plt", ".", "plot", "(", "t", ",", "-", "t", "-", "f_inter", ",", "color", "=", "'blue'", ",", "zorder", "=", "0", ",", "label", "=", "r'$f(x)$'", ")", "\n", "plt", ".", "xlim", "(", "[", "left_bound", ",", "right_bound", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "bottom_bound", ",", "up_bound", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ",", "prop", "=", "{", "'size'", ":", "8", "}", ")", "\n", "if", "to_save", ":", "\n", "        ", "saving_path", "=", "os", ".", "path", ".", "join", "(", "dir_for_projection_images", ",", "title", "+", "'.png'", ")", "\n", "os", ".", "makedirs", "(", "dir_for_projection_images", ",", "exist_ok", "=", "True", ")", "\n", "# plt.rcParams['figure.figsize'] = figsize_movements_plot", "\n", "plt", ".", "savefig", "(", "saving_path", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "", "if", "show_flag", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_full_info_experiment.print_evaluation_on_modify_test": [[9, 22], ["utills_and_consts.evaluate_model_on_test_set", "print"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.evaluate_model_on_test_set"], ["def", "print_evaluation_on_modify_test", "(", "modify_test", ":", "pd", ".", "DataFrame", ",", "clf", ",", "feature_list_to_use", ":", "list", ",", "clf_name", ":", "str", ")", ":", "\n", "    ", "'''\n\n    :param modify_test: The test to evaluate the model on.\n    :param clf: Trained model\n    :param feature_list_to_use: List of features that the clf model uses for prediction\n    :param clf_name: The name of the classifier\n    :return: Prints the model error on the modify test.\n    '''", "\n", "err_modify_full_information_test_modify", "=", "evaluate_model_on_test_set", "(", "modify_test", ",", "clf", ",", "\n", "feature_list_to_use", ")", "\n", "print", "(", "\n", "f'The error on the test set when it clf is {clf_name} trained on not modify train but the test did strategic'", "\n", "f'modify {err_modify_full_information_test_modify}'", ")", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_full_info_experiment.create_strategic_data_sets_using_known_clf": [[25, 55], ["utills_and_consts.get_data_with_right_size", "cost_functions.MixWeightedLinearSumSquareCostFunction", "strategic_players.strategic_modify_using_known_clf", "strategic_players.visualize_projected_changed_df"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.utills_and_consts.get_data_with_right_size", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.strategic_modify_using_known_clf", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.projected_visualization.visualize_projected_changed_df"], ["", "def", "create_strategic_data_sets_using_known_clf", "(", "dir_name_for_saving_visualization", ":", "str", ",", "cost_factor", ":", "float", ",", "epsilon", ":", "float", ",", "\n", "f", ",", "save_visualization_projected_changed", ":", "bool", "=", "True", ",", "clf_name", ":", "str", "=", "''", ",", "\n", "features_to_use", ":", "list", "=", "six_most_significant_features", ",", "test_size", "=", "-", "1", ",", "\n", "show_flag", ":", "bool", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param dir_name_for_saving_visualization: Path to save the projection visualization\n    :param cost_factor: Parameter that determines the scale of the cost function.\n    :param epsilon: The weight of the l2 cost function.\n    :param f: The model that player wants to achieve positive score.\n    :param save_visualization_projected_changed: Whatever to save the projected visualization image\n    :param clf_name: The name of the classifier. This will be printed on the projected visualization image\n    :param features_to_use: list of features to use for predictions\n    :param test_size: The number of Constants.\n    :param show_flag: If it 1 the visualization is plotted.\n    :return: Strategic modify dataset of the test set according to classifier f.\n    '''", "\n", "real_test_f_star_loan_status", "=", "get_data_with_right_size", "(", "real_test_f_star_loan_status_path", ",", "test_size", ")", "\n", "f_weights", ",", "f_inter", "=", "f", ".", "coef_", "[", "0", "]", ",", "f", ".", "intercept_", "\n", "\n", "weighted_linear_cost", "=", "MixWeightedLinearSumSquareCostFunction", "(", "a", ",", "cost_factor", "=", "cost_factor", ",", "epsilon", "=", "epsilon", ")", "\n", "modify_full_information_test", "=", "strategic_modify_using_known_clf", "(", "real_test_f_star_loan_status", ",", "f", ",", "features_to_use", ",", "\n", "weighted_linear_cost", ")", "\n", "\n", "visualize_projected_changed_df", "(", "clf_name", ",", "real_test_f_star_loan_status", ",", "modify_full_information_test", ",", "features_to_use", ",", "\n", "f'real test learned known on {clf_name}'", ",", "\n", "to_save", "=", "save_visualization_projected_changed", ",", "\n", "dir_name_for_saving_visualize", "=", "dir_name_for_saving_visualization", ",", "f_weights", "=", "f_weights", ",", "\n", "f_inter", "=", "f_inter", ",", "show_flag", "=", "show_flag", ")", "\n", "return", "modify_full_information_test", "\n", "\n"]], "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_full_info_experiment.run_strategic_full_info": [[57, 93], ["os.path.join", "os.makedirs", "loan_status_model_trainer.get_svm_loan_return_model", "strategic_full_info_experiment.create_strategic_data_sets_using_known_clf", "create_strategic_data_sets_using_known_clf.to_csv", "strategic_full_info_experiment.print_evaluation_on_modify_test", "strategic_players.get_hardt_model", "strategic_full_info_experiment.create_strategic_data_sets_using_known_clf", "strategic_full_info_experiment.print_evaluation_on_modify_test", "create_strategic_data_sets_using_known_clf.to_csv", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.loan_status_model_trainer.get_svm_loan_return_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_full_info_experiment.create_strategic_data_sets_using_known_clf", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_full_info_experiment.print_evaluation_on_modify_test", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_players.get_hardt_model", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_full_info_experiment.create_strategic_data_sets_using_known_clf", "home.repos.pwc.inspect_result.staretgicclfdark_strategic_rep.None.strategic_full_info_experiment.print_evaluation_on_modify_test"], ["", "def", "run_strategic_full_info", "(", "train_hardt", "=", "False", ",", "cost_factor", "=", "5", ",", "epsilon", "=", "0.2", ",", "\n", "feature_list_to_use", "=", "six_most_significant_features", ",", "force_train_loan_model", "=", "False", ",", "use_cv", "=", "False", ",", "\n", "train_size", "=", "-", "1", ",", "test_size", "=", "-", "1", ",", "show_flag", "=", "True", ")", ":", "\n", "    ", "'''\n\n    :param train_hardt: Whatever retrain Hardt model (If it exists)\n    :param cost_factor: Parameter that determines the scale of the cost function.\n    :param epsilon: The weight of the l2 cost function in the total cost constant has to pay for movement.\n    :param feature_list_to_use: List of features to use for predictions\n    :param force_train_loan_model: Whatever retrain loan model (If it exists)\n    :param use_cv: Whatever we use cross validation\n    :param train_size: The size of the training set to train Hardt model (svm always trains on all train set)\n    :param test_size: The number of Constants.\n    :param show_flag: If it 1 the visualization is plotted.\n    :return:\n    '''", "\n", "dir_name_for_saving_visualize", "=", "os", ".", "path", ".", "join", "(", "result_folder_path", ",", "'full_information_strategic'", ")", "\n", "os", ".", "makedirs", "(", "dir_name_for_saving_visualize", ",", "exist_ok", "=", "True", ")", "\n", "\n", "svm_clf", "=", "get_svm_loan_return_model", "(", "svm_model_loan_returned_path", ",", "feature_list_to_use", ",", "force_train_loan_model", ",", "use_cv", ")", "\n", "modify_svm_full_information_test", "=", "create_strategic_data_sets_using_known_clf", "(", "dir_name_for_saving_visualize", ",", "\n", "cost_factor", "=", "cost_factor", ",", "epsilon", "=", "epsilon", ",", "\n", "f", "=", "svm_clf", ",", "clf_name", "=", "'SVM'", ",", "test_size", "=", "test_size", ",", "\n", "show_flag", "=", "show_flag", ")", "\n", "\n", "modify_svm_full_information_test", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "dir_name_for_saving_visualize", ",", "'modify_on_svm_test_df.csv'", ")", ")", "\n", "print_evaluation_on_modify_test", "(", "modify_svm_full_information_test", ",", "svm_clf", ",", "feature_list_to_use", ",", "'SVM'", ")", "\n", "\n", "hardt_model", "=", "get_hardt_model", "(", "cost_factor", ",", "train_path", "=", "real_train_val_f_star_loan_status_path", ",", "\n", "force_train_hardt", "=", "train_hardt", ",", "train_size", "=", "train_size", ")", "\n", "modify_hardt_test_df", "=", "create_strategic_data_sets_using_known_clf", "(", "dir_name_for_saving_visualize", ",", "\n", "cost_factor", "=", "cost_factor", ",", "epsilon", "=", "epsilon", ",", "\n", "f", "=", "hardt_model", ",", "clf_name", "=", "'Hardt'", ",", "\n", "test_size", "=", "test_size", ",", "show_flag", "=", "show_flag", ")", "\n", "print_evaluation_on_modify_test", "(", "modify_hardt_test_df", ",", "hardt_model", ",", "feature_list_to_use", ",", "'Hardt'", ")", "\n", "modify_hardt_test_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "dir_name_for_saving_visualize", ",", "'modify_on_hardt_test_df.csv'", ")", ")", "\n", "", ""]]}