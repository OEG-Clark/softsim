{"home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.__init__": [[26, 33], ["logging.debug", "sick.SICKRelatednessEval.loadFile", "sick.SICKRelatednessEval.loadFile", "sick.SICKRelatednessEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SICK-Relatedness*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_train.txt'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_trial.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_test_annotated.txt'", ")", ")", "\n", "self", ".", "sick_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.do_prepare": [[34, 41], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "sick_data", "[", "'train'", "]", "[", "'X_A'", "]", "+", "self", ".", "sick_data", "[", "'train'", "]", "[", "'X_B'", "]", "+", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'X_A'", "]", "+", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'X_B'", "]", "+", "self", ".", "sick_data", "[", "'test'", "]", "[", "'X_A'", "]", "+", "self", ".", "sick_data", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.loadFile": [[42, 57], ["io.open", "float", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "skipFirstLine", "=", "True", "\n", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "skipFirstLine", ":", "\n", "                    ", "skipFirstLine", "=", "False", "\n", "", "else", ":", "\n", "                    ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "1", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "2", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "3", "]", ")", "\n", "\n", "", "", "", "sick_data", "[", "'y'", "]", "=", "[", "float", "(", "s", ")", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "return", "sick_data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.run": [[58, 122], ["sick.SICKRelatednessEval.encode_labels", "sick.SICKRelatednessEval.encode_labels", "sick.SICKRelatednessEval.encode_labels", "senteval.tools.relatedness.RelatednessPytorch", "senteval.tools.relatedness.RelatednessPytorch.run", "sklearn.metrics.mean_squared_error", "logging.debug", "logging.debug", "logging.info", "sorted", "numpy.array", "logging.info", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "len", "len", "zip", "range", "numpy.vstack", "len", "batcher", "[].append", "numpy.abs", "numpy.abs", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.encode_labels", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.encode_labels", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.encode_labels", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "sick_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "sick_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", "=", "[", "x", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", "=", "[", "y", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", "=", "[", "z", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "\n", "for", "txt_type", "in", "[", "'X_A'", ",", "'X_B'", "]", ":", "\n", "                ", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                    ", "batch", "=", "self", ".", "sick_data", "[", "key", "]", "[", "txt_type", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ".", "append", "(", "embeddings", ")", "\n", "", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "np", ".", "vstack", "(", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ")", "\n", "", "sick_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Train", "\n", "", "trainA", "=", "sick_embed", "[", "'train'", "]", "[", "'X_A'", "]", "\n", "trainB", "=", "sick_embed", "[", "'train'", "]", "[", "'X_B'", "]", "\n", "trainF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "trainA", "-", "trainB", ")", ",", "trainA", "*", "trainB", "]", "\n", "trainY", "=", "self", ".", "encode_labels", "(", "self", ".", "sick_data", "[", "'train'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Dev", "\n", "devA", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_A'", "]", "\n", "devB", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_B'", "]", "\n", "devF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "devA", "-", "devB", ")", ",", "devA", "*", "devB", "]", "\n", "devY", "=", "self", ".", "encode_labels", "(", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Test", "\n", "testA", "=", "sick_embed", "[", "'test'", "]", "[", "'X_A'", "]", "\n", "testB", "=", "sick_embed", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "testF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "testA", "-", "testB", ")", ",", "testA", "*", "testB", "]", "\n", "testY", "=", "self", ".", "encode_labels", "(", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "\n", "\n", "config", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'nclasses'", ":", "5", "}", "\n", "clf", "=", "RelatednessPytorch", "(", "train", "=", "{", "'X'", ":", "trainF", ",", "'y'", ":", "trainY", "}", ",", "\n", "valid", "=", "{", "'X'", ":", "devF", ",", "'y'", ":", "devY", "}", ",", "\n", "test", "=", "{", "'X'", ":", "testF", ",", "'y'", ":", "testY", "}", ",", "\n", "devscores", "=", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "config", "=", "config", ")", "\n", "\n", "devpr", ",", "yhat", "=", "clf", ".", "run", "(", ")", "\n", "\n", "pr", "=", "pearsonr", "(", "yhat", ",", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "[", "0", "]", "\n", "sr", "=", "spearmanr", "(", "yhat", ",", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "[", "0", "]", "\n", "pr", "=", "0", "if", "pr", "!=", "pr", "else", "pr", "\n", "sr", "=", "0", "if", "sr", "!=", "sr", "else", "sr", "\n", "se", "=", "mean_squared_error", "(", "yhat", ",", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "\n", "logging", ".", "debug", "(", "'Dev : Pearson {0}'", ".", "format", "(", "devpr", ")", ")", "\n", "logging", ".", "debug", "(", "'Test : Pearson {0} Spearman {1} MSE {2} \\\n                       for SICK Relatedness\\n'", ".", "format", "(", "pr", ",", "sr", ",", "se", ")", ")", "\n", "\n", "return", "{", "'devpearson'", ":", "devpr", ",", "'pearson'", ":", "pr", ",", "'spearman'", ":", "sr", ",", "'mse'", ":", "se", ",", "\n", "'yhat'", ":", "yhat", ",", "'ndev'", ":", "len", "(", "devA", ")", ",", "'ntest'", ":", "len", "(", "testA", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKRelatednessEval.encode_labels": [[123, 135], ["numpy.zeros().astype", "enumerate", "range", "numpy.zeros", "numpy.floor", "len", "numpy.floor", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "encode_labels", "(", "self", ",", "labels", ",", "nclass", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        Label encoding from Tree LSTM paper (Tai, Socher, Manning)\n        \"\"\"", "\n", "Y", "=", "np", ".", "zeros", "(", "(", "len", "(", "labels", ")", ",", "nclass", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "j", ",", "y", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "                ", "if", "i", "+", "1", "==", "np", ".", "floor", "(", "y", ")", "+", "1", ":", "\n", "                    ", "Y", "[", "j", ",", "i", "]", "=", "y", "-", "np", ".", "floor", "(", "y", ")", "\n", "", "if", "i", "+", "1", "==", "np", ".", "floor", "(", "y", ")", ":", "\n", "                    ", "Y", "[", "j", ",", "i", "]", "=", "np", ".", "floor", "(", "y", ")", "-", "y", "+", "1", "\n", "", "", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKEntailmentEval.__init__": [[138, 145], ["logging.debug", "sick.SICKEntailmentEval.loadFile", "sick.SICKEntailmentEval.loadFile", "sick.SICKEntailmentEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SICK-Entailment*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_train.txt'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_trial.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'SICK_test_annotated.txt'", ")", ")", "\n", "self", ".", "sick_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKEntailmentEval.loadFile": [[146, 161], ["io.open", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "label2id", "=", "{", "'CONTRADICTION'", ":", "0", ",", "'NEUTRAL'", ":", "1", ",", "'ENTAILMENT'", ":", "2", "}", "\n", "skipFirstLine", "=", "True", "\n", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "skipFirstLine", ":", "\n", "                    ", "skipFirstLine", "=", "False", "\n", "", "else", ":", "\n", "                    ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "1", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "2", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "4", "]", ")", "\n", "", "", "", "sick_data", "[", "'y'", "]", "=", "[", "label2id", "[", "s", "]", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "return", "sick_data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sick.SICKEntailmentEval.run": [[162, 218], ["numpy.array", "numpy.array", "numpy.array", "senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "logging.info", "sorted", "logging.info", "len", "len", "zip", "range", "numpy.vstack", "len", "batcher", "[].append", "numpy.abs", "numpy.abs", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "sick_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "sick_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", ",", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_A'", "]", "=", "[", "x", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'X_B'", "]", "=", "[", "y", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", "=", "[", "z", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "\n", "for", "txt_type", "in", "[", "'X_A'", ",", "'X_B'", "]", ":", "\n", "                ", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sick_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                    ", "batch", "=", "self", ".", "sick_data", "[", "key", "]", "[", "txt_type", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ".", "append", "(", "embeddings", ")", "\n", "", "sick_embed", "[", "key", "]", "[", "txt_type", "]", "=", "np", ".", "vstack", "(", "sick_embed", "[", "key", "]", "[", "txt_type", "]", ")", "\n", "", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Train", "\n", "", "trainA", "=", "sick_embed", "[", "'train'", "]", "[", "'X_A'", "]", "\n", "trainB", "=", "sick_embed", "[", "'train'", "]", "[", "'X_B'", "]", "\n", "trainF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "trainA", "-", "trainB", ")", ",", "trainA", "*", "trainB", "]", "\n", "trainY", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "'train'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Dev", "\n", "devA", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_A'", "]", "\n", "devB", "=", "sick_embed", "[", "'dev'", "]", "[", "'X_B'", "]", "\n", "devF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "devA", "-", "devB", ")", ",", "devA", "*", "devB", "]", "\n", "devY", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "'dev'", "]", "[", "'y'", "]", ")", "\n", "\n", "# Test", "\n", "testA", "=", "sick_embed", "[", "'test'", "]", "[", "'X_A'", "]", "\n", "testB", "=", "sick_embed", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "testF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "testA", "-", "testB", ")", ",", "testA", "*", "testB", "]", "\n", "testY", "=", "np", ".", "array", "(", "self", ".", "sick_data", "[", "'test'", "]", "[", "'y'", "]", ")", "\n", "\n", "config", "=", "{", "'nclasses'", ":", "3", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'nhid'", ":", "params", ".", "nhid", "}", "\n", "clf", "=", "SplitClassifier", "(", "X", "=", "{", "'train'", ":", "trainF", ",", "'valid'", ":", "devF", ",", "'test'", ":", "testF", "}", ",", "\n", "y", "=", "{", "'train'", ":", "trainY", ",", "'valid'", ":", "devY", ",", "'test'", ":", "testY", "}", ",", "\n", "config", "=", "config", ")", "\n", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : {0} Test acc : {1} for \\\n                       SICK entailment\\n'", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "devA", ")", ",", "'ntest'", ":", "len", "(", "testA", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.__init__": [[27, 55], ["senteval.utils.dotdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "batcher", ",", "prepare", "=", "None", ")", ":", "\n", "# parameters", "\n", "        ", "params", "=", "utils", ".", "dotdict", "(", "params", ")", "\n", "params", ".", "usepytorch", "=", "True", "if", "'usepytorch'", "not", "in", "params", "else", "params", ".", "usepytorch", "\n", "params", ".", "seed", "=", "1111", "if", "'seed'", "not", "in", "params", "else", "params", ".", "seed", "\n", "\n", "params", ".", "batch_size", "=", "128", "if", "'batch_size'", "not", "in", "params", "else", "params", ".", "batch_size", "\n", "params", ".", "nhid", "=", "0", "if", "'nhid'", "not", "in", "params", "else", "params", ".", "nhid", "\n", "params", ".", "kfold", "=", "5", "if", "'kfold'", "not", "in", "params", "else", "params", ".", "kfold", "\n", "\n", "if", "'classifier'", "not", "in", "params", "or", "not", "params", "[", "'classifier'", "]", ":", "\n", "            ", "params", ".", "classifier", "=", "{", "'nhid'", ":", "0", "}", "\n", "\n", "", "assert", "'nhid'", "in", "params", ".", "classifier", ",", "'Set number of hidden units in classifier config!!'", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "# batcher and prepare", "\n", "self", ".", "batcher", "=", "batcher", "\n", "self", ".", "prepare", "=", "prepare", "if", "prepare", "else", "lambda", "x", ",", "y", ":", "None", "\n", "\n", "self", ".", "list_tasks", "=", "[", "'CR'", ",", "'MR'", ",", "'MPQA'", ",", "'SUBJ'", ",", "'SST2'", ",", "'SST5'", ",", "'TREC'", ",", "'MRPC'", ",", "\n", "'SICKRelatedness'", ",", "'SICKEntailment'", ",", "'STSBenchmark'", ",", "\n", "'SNLI'", ",", "'ImageCaptionRetrieval'", ",", "'STS12'", ",", "'STS13'", ",", "\n", "'STS14'", ",", "'STS15'", ",", "'STS16'", ",", "\n", "'Length'", ",", "'WordContent'", ",", "'Depth'", ",", "'TopConstituents'", ",", "\n", "'BigramShift'", ",", "'Tense'", ",", "'SubjNumber'", ",", "'ObjNumber'", ",", "\n", "'OddManOut'", ",", "'CoordinationInversion'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.eval": [[56, 124], ["isinstance", "engine.SE.evaluation.do_prepare", "engine.SE.evaluation.run", "str", "senteval.binary.CREval", "engine.SE.eval", "str", "senteval.binary.MREval", "senteval.binary.MPQAEval", "senteval.binary.SUBJEval", "senteval.sst.SSTEval", "senteval.sst.SSTEval", "senteval.trec.TRECEval", "senteval.mrpc.MRPCEval", "senteval.sick.SICKRelatednessEval", "senteval.sts.STSBenchmarkEval", "senteval.sick.SICKEntailmentEval", "senteval.snli.SNLIEval", "engine.SE.eval"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSEval.do_prepare", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.eval", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.eval"], ["", "def", "eval", "(", "self", ",", "name", ")", ":", "\n", "# evaluate on evaluation [name], either takes string or list of strings", "\n", "        ", "if", "(", "isinstance", "(", "name", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "results", "=", "{", "x", ":", "self", ".", "eval", "(", "x", ")", "for", "x", "in", "name", "}", "\n", "return", "self", ".", "results", "\n", "\n", "", "tpath", "=", "self", ".", "params", ".", "task_path", "\n", "assert", "name", "in", "self", ".", "list_tasks", ",", "str", "(", "name", ")", "+", "' not in '", "+", "str", "(", "self", ".", "list_tasks", ")", "\n", "\n", "# Original SentEval tasks", "\n", "if", "name", "==", "'CR'", ":", "\n", "            ", "self", ".", "evaluation", "=", "CREval", "(", "tpath", "+", "'/downstream/CR'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'MR'", ":", "\n", "            ", "self", ".", "evaluation", "=", "MREval", "(", "tpath", "+", "'/downstream/MR'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'MPQA'", ":", "\n", "            ", "self", ".", "evaluation", "=", "MPQAEval", "(", "tpath", "+", "'/downstream/MPQA'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SUBJ'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SUBJEval", "(", "tpath", "+", "'/downstream/SUBJ'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SST2'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SSTEval", "(", "tpath", "+", "'/downstream/SST/binary'", ",", "nclasses", "=", "2", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SST5'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SSTEval", "(", "tpath", "+", "'/downstream/SST/fine'", ",", "nclasses", "=", "5", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'TREC'", ":", "\n", "            ", "self", ".", "evaluation", "=", "TRECEval", "(", "tpath", "+", "'/downstream/TREC'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'MRPC'", ":", "\n", "            ", "self", ".", "evaluation", "=", "MRPCEval", "(", "tpath", "+", "'/downstream/MRPC'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SICKRelatedness'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SICKRelatednessEval", "(", "tpath", "+", "'/downstream/SICK'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'STSBenchmark'", ":", "\n", "            ", "self", ".", "evaluation", "=", "STSBenchmarkEval", "(", "tpath", "+", "'/downstream/STS/STSBenchmark'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SICKEntailment'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SICKEntailmentEval", "(", "tpath", "+", "'/downstream/SICK'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SNLI'", ":", "\n", "            ", "self", ".", "evaluation", "=", "SNLIEval", "(", "tpath", "+", "'/downstream/SNLI'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "in", "[", "'STS12'", ",", "'STS13'", ",", "'STS14'", ",", "'STS15'", ",", "'STS16'", "]", ":", "\n", "            ", "fpath", "=", "name", "+", "'-en-test'", "\n", "self", ".", "evaluation", "=", "eval", "(", "name", "+", "'Eval'", ")", "(", "tpath", "+", "'/downstream/STS/'", "+", "fpath", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'ImageCaptionRetrieval'", ":", "\n", "            ", "self", ".", "evaluation", "=", "ImageCaptionRetrievalEval", "(", "tpath", "+", "'/downstream/COCO'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "\n", "# Probing Tasks", "\n", "", "elif", "name", "==", "'Length'", ":", "\n", "                ", "self", ".", "evaluation", "=", "LengthEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'WordContent'", ":", "\n", "                ", "self", ".", "evaluation", "=", "WordContentEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'Depth'", ":", "\n", "                ", "self", ".", "evaluation", "=", "DepthEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'TopConstituents'", ":", "\n", "                ", "self", ".", "evaluation", "=", "TopConstituentsEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'BigramShift'", ":", "\n", "                ", "self", ".", "evaluation", "=", "BigramShiftEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'Tense'", ":", "\n", "                ", "self", ".", "evaluation", "=", "TenseEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'SubjNumber'", ":", "\n", "                ", "self", ".", "evaluation", "=", "SubjNumberEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'ObjNumber'", ":", "\n", "                ", "self", ".", "evaluation", "=", "ObjNumberEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'OddManOut'", ":", "\n", "                ", "self", ".", "evaluation", "=", "OddManOutEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'CoordinationInversion'", ":", "\n", "                ", "self", ".", "evaluation", "=", "CoordinationInversionEval", "(", "tpath", "+", "'/probing'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "\n", "", "self", ".", "params", ".", "current_task", "=", "name", "\n", "self", ".", "evaluation", ".", "do_prepare", "(", "self", ".", "params", ",", "self", ".", "prepare", ")", "\n", "\n", "self", ".", "results", "=", "self", ".", "evaluation", ".", "run", "(", "self", ".", "params", ",", "self", ".", "batcher", ")", "\n", "\n", "return", "self", ".", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.trec.TRECEval.__init__": [[23, 28], ["logging.info", "trec.TRECEval.loadFile", "trec.TRECEval.loadFile", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'***** Transfer task : TREC *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'train_5500.label'", ")", ")", "\n", "self", ".", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'TREC_10.label'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.trec.TRECEval.do_prepare": [[29, 32], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "train", "[", "'X'", "]", "+", "self", ".", "test", "[", "'X'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.trec.TRECEval.loadFile": [[33, 45], ["io.open", "line.strip().split", "[].split", "trec_data[].append", "trec_data[].append", "line.strip", "[].split.split"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "trec_data", "=", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "tgt2idx", "=", "{", "'ABBR'", ":", "0", ",", "'DESC'", ":", "1", ",", "'ENTY'", ":", "2", ",", "\n", "'HUM'", ":", "3", ",", "'LOC'", ":", "4", ",", "'NUM'", ":", "5", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'latin-1'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "target", ",", "sample", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "':'", ",", "1", ")", "\n", "sample", "=", "sample", ".", "split", "(", "' '", ",", "1", ")", "[", "1", "]", ".", "split", "(", ")", "\n", "assert", "target", "in", "tgt2idx", ",", "target", "\n", "trec_data", "[", "'X'", "]", ".", "append", "(", "sample", ")", "\n", "trec_data", "[", "'y'", "]", ".", "append", "(", "tgt2idx", "[", "target", "]", ")", "\n", "", "", "return", "trec_data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.trec.TRECEval.run": [[46, 90], ["sorted", "sorted", "range", "numpy.vstack", "logging.info", "range", "numpy.vstack", "logging.info", "senteval.tools.validation.KFoldClassifier", "senteval.tools.validation.KFoldClassifier.run", "logging.debug", "zip", "zip", "len", "batcher", "numpy.vstack.append", "len", "batcher", "numpy.vstack.append", "len", "len", "numpy.array", "numpy.array", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "train_embeddings", ",", "test_embeddings", "=", "[", "]", ",", "[", "]", "\n", "\n", "# Sort to reduce padding", "\n", "sorted_corpus_train", "=", "sorted", "(", "zip", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "train_samples", "=", "[", "x", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_train", "]", "\n", "train_labels", "=", "[", "y", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_train", "]", "\n", "\n", "sorted_corpus_test", "=", "sorted", "(", "zip", "(", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "test_samples", "=", "[", "x", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_test", "]", "\n", "test_labels", "=", "[", "y", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus_test", "]", "\n", "\n", "# Get train embeddings", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "train_labels", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "train_samples", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "train_embeddings", ".", "append", "(", "embeddings", ")", "\n", "", "train_embeddings", "=", "np", ".", "vstack", "(", "train_embeddings", ")", "\n", "logging", ".", "info", "(", "'Computed train embeddings'", ")", "\n", "\n", "# Get test embeddings", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "test_labels", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "test_samples", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "test_embeddings", ".", "append", "(", "embeddings", ")", "\n", "", "test_embeddings", "=", "np", ".", "vstack", "(", "test_embeddings", ")", "\n", "logging", ".", "info", "(", "'Computed test embeddings'", ")", "\n", "\n", "config_classifier", "=", "{", "'nclasses'", ":", "6", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'kfold'", ":", "params", ".", "kfold", "}", "\n", "clf", "=", "KFoldClassifier", "(", "{", "'X'", ":", "train_embeddings", ",", "\n", "'y'", ":", "np", ".", "array", "(", "train_labels", ")", "}", ",", "\n", "{", "'X'", ":", "test_embeddings", ",", "\n", "'y'", ":", "np", ".", "array", "(", "test_labels", ")", "}", ",", "\n", "config_classifier", ")", "\n", "devacc", ",", "testacc", ",", "_", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : {0} Test acc : {1} \\\n            for TREC\\n'", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "train", "[", "'X'", "]", ")", ",", "'ntest'", ":", "len", "(", "self", ".", "test", "[", "'X'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sst.SSTEval.__init__": [[23, 36], ["logging.debug", "sst.SSTEval.loadFile", "sst.SSTEval.loadFile", "sst.SSTEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "nclasses", "=", "2", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "\n", "# binary of fine-grained", "\n", "assert", "nclasses", "in", "[", "2", ",", "5", "]", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "task_name", "=", "'Binary'", "if", "self", ".", "nclasses", "==", "2", "else", "'Fine-Grained'", "\n", "logging", ".", "debug", "(", "'***** Transfer task : SST %s classification *****\\n\\n'", ",", "self", ".", "task_name", ")", "\n", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentiment-train'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentiment-dev'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentiment-test'", ")", ")", "\n", "self", ".", "sst_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sst.SSTEval.do_prepare": [[37, 41], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "sst_data", "[", "'train'", "]", "[", "'X'", "]", "+", "self", ".", "sst_data", "[", "'dev'", "]", "[", "'X'", "]", "+", "self", ".", "sst_data", "[", "'test'", "]", "[", "'X'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sst.SSTEval.loadFile": [[42, 56], ["io.open", "max", "line.strip().split", "sst_data[].append", "sst_data[].append", "int", "sample[].split", "line.strip().split", "sst_data[].append", "sst_data[].append", "line.strip", "int", "sample[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "sst_data", "=", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "self", ".", "nclasses", "==", "2", ":", "\n", "                    ", "sample", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sst_data", "[", "'y'", "]", ".", "append", "(", "int", "(", "sample", "[", "1", "]", ")", ")", "\n", "sst_data", "[", "'X'", "]", ".", "append", "(", "sample", "[", "0", "]", ".", "split", "(", ")", ")", "\n", "", "elif", "self", ".", "nclasses", "==", "5", ":", "\n", "                    ", "sample", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "sst_data", "[", "'y'", "]", ".", "append", "(", "int", "(", "sample", "[", "0", "]", ")", ")", "\n", "sst_data", "[", "'X'", "]", ".", "append", "(", "sample", "[", "1", "]", ".", "split", "(", ")", ")", "\n", "", "", "", "assert", "max", "(", "sst_data", "[", "'y'", "]", ")", "==", "self", ".", "nclasses", "-", "1", "\n", "return", "sst_data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sst.SSTEval.run": [[57, 97], ["senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "logging.info", "sorted", "map", "range", "numpy.vstack", "numpy.array", "logging.info", "len", "len", "zip", "zip", "len", "batcher", "[].append", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "sst_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "sst_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "sorted_data", "=", "sorted", "(", "zip", "(", "self", ".", "sst_data", "[", "key", "]", "[", "'X'", "]", ",", "\n", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "self", ".", "sst_data", "[", "key", "]", "[", "'X'", "]", ",", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_data", ")", ")", "\n", "\n", "sst_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                ", "batch", "=", "self", ".", "sst_data", "[", "key", "]", "[", "'X'", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "sst_embed", "[", "key", "]", "[", "'X'", "]", ".", "append", "(", "embeddings", ")", "\n", "", "sst_embed", "[", "key", "]", "[", "'X'", "]", "=", "np", ".", "vstack", "(", "sst_embed", "[", "key", "]", "[", "'X'", "]", ")", "\n", "sst_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "self", ".", "sst_data", "[", "key", "]", "[", "'y'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "config_classifier", "=", "{", "'nclasses'", ":", "self", ".", "nclasses", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", "}", "\n", "\n", "clf", "=", "SplitClassifier", "(", "X", "=", "{", "'train'", ":", "sst_embed", "[", "'train'", "]", "[", "'X'", "]", ",", "\n", "'valid'", ":", "sst_embed", "[", "'dev'", "]", "[", "'X'", "]", ",", "\n", "'test'", ":", "sst_embed", "[", "'test'", "]", "[", "'X'", "]", "}", ",", "\n", "y", "=", "{", "'train'", ":", "sst_embed", "[", "'train'", "]", "[", "'y'", "]", ",", "\n", "'valid'", ":", "sst_embed", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "'test'", ":", "sst_embed", "[", "'test'", "]", "[", "'y'", "]", "}", ",", "\n", "config", "=", "config_classifier", ")", "\n", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : {0} Test acc : {1} for \\\n            SST {2} classification\\n'", ".", "format", "(", "devacc", ",", "testacc", ",", "self", ".", "task_name", ")", ")", "\n", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "sst_embed", "[", "'dev'", "]", "[", "'X'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "sst_embed", "[", "'test'", "]", "[", "'X'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.rank.ImageCaptionRetrievalEval.__init__": [[27, 34], ["logging.debug", "rank.ImageCaptionRetrievalEval.loadFile"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task: Image Caption Retrieval *****\\n\\n'", ")", "\n", "\n", "# Get captions and image features", "\n", "self", ".", "seed", "=", "seed", "\n", "train", ",", "dev", ",", "test", "=", "self", ".", "loadFile", "(", "task_path", ")", "\n", "self", ".", "coco_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.rank.ImageCaptionRetrievalEval.do_prepare": [[35, 40], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "coco_data", "[", "'train'", "]", "[", "'sent'", "]", "+", "self", ".", "coco_data", "[", "'dev'", "]", "[", "'sent'", "]", "+", "self", ".", "coco_data", "[", "'test'", "]", "[", "'sent'", "]", "\n", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.rank.ImageCaptionRetrievalEval.loadFile": [[41, 67], ["range", "numpy.array().astype", "len", "open", "pickle.load", "open", "pickle.load", "len", "list_sent.append", "numpy.array().astype.append", "len", "len", "numpy.array", "os.path.join", "os.path.join", "sent.encode().split", "len", "sent.encode"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "coco", "=", "{", "}", "\n", "\n", "for", "split", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "list_sent", "=", "[", "]", "\n", "list_img_feat", "=", "[", "]", "\n", "if", "sys", ".", "version_info", "<", "(", "3", ",", "0", ")", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ",", "split", "+", "'.pkl'", ")", ")", "as", "f", ":", "\n", "                    ", "cocodata", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ",", "split", "+", "'.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "cocodata", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "", "for", "imgkey", "in", "range", "(", "len", "(", "cocodata", "[", "'features'", "]", ")", ")", ":", "\n", "                ", "assert", "len", "(", "cocodata", "[", "'image_to_caption_ids'", "]", "[", "imgkey", "]", ")", ">=", "5", ",", "cocodata", "[", "'image_to_caption_ids'", "]", "[", "imgkey", "]", "\n", "for", "captkey", "in", "cocodata", "[", "'image_to_caption_ids'", "]", "[", "imgkey", "]", "[", "0", ":", "5", "]", ":", "\n", "                    ", "sent", "=", "cocodata", "[", "'captions'", "]", "[", "captkey", "]", "[", "'cleaned_caption'", "]", "\n", "sent", "+=", "' .'", "# add punctuation to end of sentence in COCO", "\n", "list_sent", ".", "append", "(", "sent", ".", "encode", "(", "'utf-8'", ")", ".", "split", "(", ")", ")", "\n", "list_img_feat", ".", "append", "(", "cocodata", "[", "'features'", "]", "[", "imgkey", "]", ")", "\n", "", "", "assert", "len", "(", "list_sent", ")", "==", "len", "(", "list_img_feat", ")", "and", "len", "(", "list_sent", ")", "%", "5", "==", "0", "\n", "list_img_feat", "=", "np", ".", "array", "(", "list_img_feat", ")", ".", "astype", "(", "'float32'", ")", "\n", "coco", "[", "split", "]", "=", "{", "'sent'", ":", "list_sent", ",", "'imgfeat'", ":", "list_img_feat", "}", "\n", "", "return", "coco", "[", "'train'", "]", ",", "coco", "[", "'valid'", "]", ",", "coco", "[", "'test'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.rank.ImageCaptionRetrievalEval.run": [[68, 109], ["senteval.tools.ranking.ImageSentenceRankingPytorch", "senteval.tools.ranking.ImageSentenceRankingPytorch.run", "logging.debug", "logging.debug", "logging.info", "numpy.array", "numpy.argsort", "len", "range", "numpy.array", "logging.info", "len", "len", "numpy.sort", "numpy.argsort", "batcher", "[].append", "numpy.vstack"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "coco_embed", "=", "{", "'train'", ":", "{", "'sentfeat'", ":", "[", "]", ",", "'imgfeat'", ":", "[", "]", "}", ",", "\n", "'dev'", ":", "{", "'sentfeat'", ":", "[", "]", ",", "'imgfeat'", ":", "[", "]", "}", ",", "\n", "'test'", ":", "{", "'sentfeat'", ":", "[", "]", ",", "'imgfeat'", ":", "[", "]", "}", "}", "\n", "\n", "for", "key", "in", "self", ".", "coco_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", "=", "np", ".", "array", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", "\n", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ",", "idx_sort", "=", "np", ".", "sort", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", ",", "np", ".", "argsort", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", "\n", "idx_unsort", "=", "np", ".", "argsort", "(", "idx_sort", ")", "\n", "\n", "coco_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "nsent", "=", "len", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "nsent", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch", "=", "self", ".", "coco_data", "[", "key", "]", "[", "'sent'", "]", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "coco_embed", "[", "key", "]", "[", "'sentfeat'", "]", ".", "append", "(", "embeddings", ")", "\n", "", "coco_embed", "[", "key", "]", "[", "'sentfeat'", "]", "=", "np", ".", "vstack", "(", "coco_embed", "[", "key", "]", "[", "'sentfeat'", "]", ")", "[", "idx_unsort", "]", "\n", "coco_embed", "[", "key", "]", "[", "'imgfeat'", "]", "=", "np", ".", "array", "(", "self", ".", "coco_data", "[", "key", "]", "[", "'imgfeat'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "config", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'projdim'", ":", "1000", ",", "'margin'", ":", "0.2", "}", "\n", "clf", "=", "ImageSentenceRankingPytorch", "(", "train", "=", "coco_embed", "[", "'train'", "]", ",", "\n", "valid", "=", "coco_embed", "[", "'dev'", "]", ",", "\n", "test", "=", "coco_embed", "[", "'test'", "]", ",", "\n", "config", "=", "config", ")", "\n", "\n", "bestdevscore", ",", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ",", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "clf", ".", "run", "(", ")", "\n", "\n", "logging", ".", "debug", "(", "\"\\nTest scores | Image to text: \\\n            {0}, {1}, {2}, {3}\"", ".", "format", "(", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "logging", ".", "debug", "(", "\"Test scores | Text to image: \\\n            {0}, {1}, {2}, {3}\\n\"", ".", "format", "(", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "\n", "return", "{", "'devacc'", ":", "bestdevscore", ",", "\n", "'acc'", ":", "[", "(", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ",", "\n", "(", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", "]", ",", "\n", "'ndev'", ":", "len", "(", "coco_embed", "[", "'dev'", "]", "[", "'sentfeat'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "coco_embed", "[", "'test'", "]", "[", "'sentfeat'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.snli.SNLIEval.__init__": [[24, 60], ["logging.debug", "snli.SNLIEval.loadFile", "snli.SNLIEval.loadFile", "io.open().read().splitlines", "snli.SNLIEval.loadFile", "snli.SNLIEval.loadFile", "io.open().read().splitlines", "snli.SNLIEval.loadFile", "snli.SNLIEval.loadFile", "io.open().read().splitlines", "sorted", "map", "sorted", "map", "sorted", "map", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "zip", "zip", "zip", "zip", "zip", "zip", "io.open().read", "io.open().read", "io.open().read", "io.open", "io.open", "io.open", "len", "len", "len", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SNLI Entailment*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train1", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s1.train'", ")", ")", "\n", "train2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s2.train'", ")", ")", "\n", "\n", "trainlabels", "=", "io", ".", "open", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'labels.train'", ")", ",", "\n", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "valid1", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s1.dev'", ")", ")", "\n", "valid2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s2.dev'", ")", ")", "\n", "validlabels", "=", "io", ".", "open", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'labels.dev'", ")", ",", "\n", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "test1", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s1.test'", ")", ")", "\n", "test2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'s2.test'", ")", ")", "\n", "testlabels", "=", "io", ".", "open", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'labels.test'", ")", ",", "\n", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "# sort data (by s2 first) to reduce padding", "\n", "sorted_train", "=", "sorted", "(", "zip", "(", "train2", ",", "train1", ",", "trainlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "train2", ",", "train1", ",", "trainlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_train", ")", ")", "\n", "\n", "sorted_valid", "=", "sorted", "(", "zip", "(", "valid2", ",", "valid1", ",", "validlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "valid2", ",", "valid1", ",", "validlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_valid", ")", ")", "\n", "\n", "sorted_test", "=", "sorted", "(", "zip", "(", "test2", ",", "test1", ",", "testlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "test2", ",", "test1", ",", "testlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_test", ")", ")", "\n", "\n", "self", ".", "samples", "=", "train1", "+", "train2", "+", "valid1", "+", "valid2", "+", "test1", "+", "test2", "\n", "self", ".", "data", "=", "{", "'train'", ":", "(", "train1", ",", "train2", ",", "trainlabels", ")", ",", "\n", "'valid'", ":", "(", "valid1", ",", "valid2", ",", "validlabels", ")", ",", "\n", "'test'", ":", "(", "test1", ",", "test2", ",", "testlabels", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.snli.SNLIEval.do_prepare": [[62, 64], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.snli.SNLIEval.loadFile": [[65, 69], ["codecs.open", "line.split", "f.read().splitlines", "f.read"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "fpath", ",", "'rb'", ",", "'latin-1'", ")", "as", "f", ":", "\n", "            ", "return", "[", "line", ".", "split", "(", ")", "for", "line", "in", "\n", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.snli.SNLIEval.run": [[70, 114], ["copy.deepcopy", "senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "len", "range", "numpy.vstack", "len", "len", "batcher", "batcher", "enc_input.append", "logging.info", "len", "len", "len", "numpy.hstack", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "{", "}", ",", "{", "}", "\n", "dico_label", "=", "{", "'entailment'", ":", "0", ",", "'neutral'", ":", "1", ",", "'contradiction'", ":", "2", "}", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "X", ":", "\n", "                ", "self", ".", "X", "[", "key", "]", "=", "[", "]", "\n", "", "if", "key", "not", "in", "self", ".", "y", ":", "\n", "                ", "self", ".", "y", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "input1", ",", "input2", ",", "mylabels", "=", "self", ".", "data", "[", "key", "]", "\n", "enc_input", "=", "[", "]", "\n", "n_labels", "=", "len", "(", "mylabels", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_labels", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch1", "=", "input1", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "batch2", "=", "input2", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "\n", "if", "len", "(", "batch1", ")", "==", "len", "(", "batch2", ")", "and", "len", "(", "batch1", ")", ">", "0", ":", "\n", "                    ", "enc1", "=", "batcher", "(", "params", ",", "batch1", ")", "\n", "enc2", "=", "batcher", "(", "params", ",", "batch2", ")", "\n", "enc_input", ".", "append", "(", "np", ".", "hstack", "(", "(", "enc1", ",", "enc2", ",", "enc1", "*", "enc2", ",", "\n", "np", ".", "abs", "(", "enc1", "-", "enc2", ")", ")", ")", ")", "\n", "", "if", "(", "ii", "*", "params", ".", "batch_size", ")", "%", "(", "20000", "*", "params", ".", "batch_size", ")", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "\"PROGRESS (encoding): %.2f%%\"", "%", "\n", "(", "100", "*", "ii", "/", "n_labels", ")", ")", "\n", "", "", "self", ".", "X", "[", "key", "]", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "self", ".", "y", "[", "key", "]", "=", "[", "dico_label", "[", "y", "]", "for", "y", "in", "mylabels", "]", "\n", "\n", "", "config", "=", "{", "'nclasses'", ":", "3", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'cudaEfficient'", ":", "True", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'noreg'", ":", "True", "}", "\n", "\n", "config_classifier", "=", "copy", ".", "deepcopy", "(", "params", ".", "classifier", ")", "\n", "config_classifier", "[", "'max_epoch'", "]", "=", "15", "\n", "config_classifier", "[", "'epoch_size'", "]", "=", "1", "\n", "config", "[", "'classifier'", "]", "=", "config_classifier", "\n", "\n", "clf", "=", "SplitClassifier", "(", "self", ".", "X", ",", "self", ".", "y", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1} for SNLI\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "data", "[", "'valid'", "]", "[", "0", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "self", ".", "data", "[", "'test'", "]", "[", "0", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.mrpc.MRPCEval.__init__": [[24, 32], ["logging.info", "mrpc.MRPCEval.loadFile", "mrpc.MRPCEval.loadFile", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'***** Transfer task : MRPC *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "\n", "'msr_paraphrase_train.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "\n", "'msr_paraphrase_test.txt'", ")", ")", "\n", "self", ".", "mrpc_data", "=", "{", "'train'", ":", "train", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.mrpc.MRPCEval.do_prepare": [[33, 39], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "# TODO : Should we separate samples in \"train, test\"?", "\n", "        ", "samples", "=", "self", ".", "mrpc_data", "[", "'train'", "]", "[", "'X_A'", "]", "+", "self", ".", "mrpc_data", "[", "'train'", "]", "[", "'X_B'", "]", "+", "self", ".", "mrpc_data", "[", "'test'", "]", "[", "'X_A'", "]", "+", "self", ".", "mrpc_data", "[", "'test'", "]", "[", "'X_B'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.mrpc.MRPCEval.loadFile": [[40, 53], ["io.open", "int", "line.strip().split", "mrpc_data[].append", "mrpc_data[].append", "mrpc_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "mrpc_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "mrpc_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "3", "]", ".", "split", "(", ")", ")", "\n", "mrpc_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "4", "]", ".", "split", "(", ")", ")", "\n", "mrpc_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "0", "]", ")", "\n", "\n", "", "", "mrpc_data", "[", "'X_A'", "]", "=", "mrpc_data", "[", "'X_A'", "]", "[", "1", ":", "]", "\n", "mrpc_data", "[", "'X_B'", "]", "=", "mrpc_data", "[", "'X_B'", "]", "[", "1", ":", "]", "\n", "mrpc_data", "[", "'y'", "]", "=", "[", "int", "(", "s", ")", "for", "s", "in", "mrpc_data", "[", "'y'", "]", "[", "1", ":", "]", "]", "\n", "return", "mrpc_data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.mrpc.MRPCEval.run": [[54, 105], ["senteval.tools.validation.KFoldClassifier", "senteval.tools.validation.KFoldClassifier.run", "round", "logging.debug", "logging.info", "sorted", "numpy.array", "logging.info", "len", "len", "zip", "range", "numpy.vstack", "sklearn.metrics.f1_score", "len", "batcher", "[].append", "numpy.abs", "numpy.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "mrpc_embed", "=", "{", "'train'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "\n", "for", "key", "in", "self", ".", "mrpc_data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "# Sort to reduce padding", "\n", "text_data", "=", "{", "}", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "mrpc_data", "[", "key", "]", "[", "'X_A'", "]", ",", "\n", "self", ".", "mrpc_data", "[", "key", "]", "[", "'X_B'", "]", ",", "\n", "self", ".", "mrpc_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "\n", "text_data", "[", "'A'", "]", "=", "[", "x", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "text_data", "[", "'B'", "]", "=", "[", "y", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "text_data", "[", "'y'", "]", "=", "[", "z", "for", "(", "x", ",", "y", ",", "z", ")", "in", "sorted_corpus", "]", "\n", "\n", "for", "txt_type", "in", "[", "'A'", ",", "'B'", "]", ":", "\n", "                ", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "text_data", "[", "'y'", "]", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "                    ", "batch", "=", "text_data", "[", "txt_type", "]", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", ".", "append", "(", "embeddings", ")", "\n", "", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", "=", "np", ".", "vstack", "(", "mrpc_embed", "[", "key", "]", "[", "txt_type", "]", ")", "\n", "", "mrpc_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "text_data", "[", "'y'", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Train", "\n", "", "trainA", "=", "mrpc_embed", "[", "'train'", "]", "[", "'A'", "]", "\n", "trainB", "=", "mrpc_embed", "[", "'train'", "]", "[", "'B'", "]", "\n", "trainF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "trainA", "-", "trainB", ")", ",", "trainA", "*", "trainB", "]", "\n", "trainY", "=", "mrpc_embed", "[", "'train'", "]", "[", "'y'", "]", "\n", "\n", "# Test", "\n", "testA", "=", "mrpc_embed", "[", "'test'", "]", "[", "'A'", "]", "\n", "testB", "=", "mrpc_embed", "[", "'test'", "]", "[", "'B'", "]", "\n", "testF", "=", "np", ".", "c_", "[", "np", ".", "abs", "(", "testA", "-", "testB", ")", ",", "testA", "*", "testB", "]", "\n", "testY", "=", "mrpc_embed", "[", "'test'", "]", "[", "'y'", "]", "\n", "\n", "config", "=", "{", "'nclasses'", ":", "2", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'kfold'", ":", "params", ".", "kfold", "}", "\n", "clf", "=", "KFoldClassifier", "(", "train", "=", "{", "'X'", ":", "trainF", ",", "'y'", ":", "trainY", "}", ",", "\n", "test", "=", "{", "'X'", ":", "testF", ",", "'y'", ":", "testY", "}", ",", "config", "=", "config", ")", "\n", "\n", "devacc", ",", "testacc", ",", "yhat", "=", "clf", ".", "run", "(", ")", "\n", "testf1", "=", "round", "(", "100", "*", "f1_score", "(", "testY", ",", "yhat", ")", ",", "2", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc {1}; Test F1 {2} for MRPC.\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ",", "testf1", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "'f1'", ":", "testf1", ",", "\n", "'ndev'", ":", "len", "(", "trainA", ")", ",", "'ntest'", ":", "len", "(", "testA", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.PROBINGEval.__init__": [[24, 35], ["logging.debug", "probing.PROBINGEval.loadFile", "logging.info", "probing.PROBINGEval.task.upper", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "self", ".", "task", "=", "task", "\n", "logging", ".", "debug", "(", "'***** (Probing) Transfer task : %s classification *****'", ",", "self", ".", "task", ".", "upper", "(", ")", ")", "\n", "self", ".", "task_data", "=", "{", "'train'", ":", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "\n", "'dev'", ":", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "\n", "'test'", ":", "{", "'X'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "}", "\n", "self", ".", "loadFile", "(", "task_path", ")", "\n", "logging", ".", "info", "(", "'Loaded %s train - %s dev - %s test for %s'", "%", "\n", "(", "len", "(", "self", ".", "task_data", "[", "'train'", "]", "[", "'y'", "]", ")", ",", "len", "(", "self", ".", "task_data", "[", "'dev'", "]", "[", "'y'", "]", ")", ",", "\n", "len", "(", "self", ".", "task_data", "[", "'test'", "]", "[", "'y'", "]", ")", ",", "self", ".", "task", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.PROBINGEval.do_prepare": [[36, 40], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "samples", "=", "self", ".", "task_data", "[", "'train'", "]", "[", "'X'", "]", "+", "self", ".", "task_data", "[", "'dev'", "]", "[", "'X'", "]", "+", "self", ".", "task_data", "[", "'test'", "]", "[", "'X'", "]", "\n", "return", "prepare", "(", "params", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.PROBINGEval.loadFile": [[41, 56], ["sorted", "dict", "len", "io.open", "numpy.unique", "zip", "enumerate", "line.rstrip().split.rstrip().split.rstrip().split", "[].append", "[].append", "range", "line[].split", "len", "line.rstrip().split.rstrip().split.rstrip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "self", ".", "tok2split", "=", "{", "'tr'", ":", "'train'", ",", "'va'", ":", "'dev'", ",", "'te'", ":", "'test'", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "task_data", "[", "self", ".", "tok2split", "[", "line", "[", "0", "]", "]", "]", "[", "'X'", "]", ".", "append", "(", "line", "[", "-", "1", "]", ".", "split", "(", ")", ")", "\n", "self", ".", "task_data", "[", "self", ".", "tok2split", "[", "line", "[", "0", "]", "]", "]", "[", "'y'", "]", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "\n", "", "", "labels", "=", "sorted", "(", "np", ".", "unique", "(", "self", ".", "task_data", "[", "'train'", "]", "[", "'y'", "]", ")", ")", "\n", "self", ".", "tok2label", "=", "dict", "(", "zip", "(", "labels", ",", "range", "(", "len", "(", "labels", ")", ")", ")", ")", "\n", "self", ".", "nclasses", "=", "len", "(", "self", ".", "tok2label", ")", "\n", "\n", "for", "split", "in", "self", ".", "task_data", ":", "\n", "            ", "for", "i", ",", "y", "in", "enumerate", "(", "self", ".", "task_data", "[", "split", "]", "[", "'y'", "]", ")", ":", "\n", "                ", "self", ".", "task_data", "[", "split", "]", "[", "'y'", "]", "[", "i", "]", "=", "self", ".", "tok2label", "[", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.PROBINGEval.run": [[57, 100], ["logging.info", "logging.info", "senteval.tools.validation.SplitClassifier", "senteval.tools.validation.SplitClassifier.run", "logging.debug", "sorted", "map", "range", "numpy.vstack", "numpy.array", "copy.deepcopy", "print", "len", "len", "zip", "zip", "len", "batcher", "[].append", "probing.PROBINGEval.task.upper", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "", "", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "task_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "logging", ".", "info", "(", "'Computing embeddings for train/dev/test'", ")", "\n", "for", "key", "in", "self", ".", "task_data", ":", "\n", "# Sort to reduce padding", "\n", "            ", "sorted_data", "=", "sorted", "(", "zip", "(", "self", ".", "task_data", "[", "key", "]", "[", "'X'", "]", ",", "\n", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "self", ".", "task_data", "[", "key", "]", "[", "'X'", "]", ",", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_data", ")", ")", "\n", "\n", "task_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", ")", ",", "bsize", ")", ":", "\n", "                ", "batch", "=", "self", ".", "task_data", "[", "key", "]", "[", "'X'", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "task_embed", "[", "key", "]", "[", "'X'", "]", ".", "append", "(", "embeddings", ")", "\n", "", "task_embed", "[", "key", "]", "[", "'X'", "]", "=", "np", ".", "vstack", "(", "task_embed", "[", "key", "]", "[", "'X'", "]", ")", "\n", "task_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "self", ".", "task_data", "[", "key", "]", "[", "'y'", "]", ")", "\n", "", "logging", ".", "info", "(", "'Computed embeddings'", ")", "\n", "\n", "config_classifier", "=", "{", "'nclasses'", ":", "self", ".", "nclasses", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", "}", "\n", "\n", "if", "self", ".", "task", "==", "\"WordContent\"", "and", "params", ".", "classifier", "[", "'nhid'", "]", ">", "0", ":", "\n", "            ", "config_classifier", "=", "copy", ".", "deepcopy", "(", "config_classifier", ")", "\n", "config_classifier", "[", "'classifier'", "]", "[", "'nhid'", "]", "=", "0", "\n", "print", "(", "params", ".", "classifier", "[", "'nhid'", "]", ")", "\n", "\n", "", "clf", "=", "SplitClassifier", "(", "X", "=", "{", "'train'", ":", "task_embed", "[", "'train'", "]", "[", "'X'", "]", ",", "\n", "'valid'", ":", "task_embed", "[", "'dev'", "]", "[", "'X'", "]", ",", "\n", "'test'", ":", "task_embed", "[", "'test'", "]", "[", "'X'", "]", "}", ",", "\n", "y", "=", "{", "'train'", ":", "task_embed", "[", "'train'", "]", "[", "'y'", "]", ",", "\n", "'valid'", ":", "task_embed", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "'test'", ":", "task_embed", "[", "'test'", "]", "[", "'y'", "]", "}", ",", "\n", "config", "=", "config_classifier", ")", "\n", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : %.1f Test acc : %.1f for %s classification\\n'", "%", "(", "devacc", ",", "testacc", ",", "self", ".", "task", ".", "upper", "(", ")", ")", ")", "\n", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "task_embed", "[", "'dev'", "]", "[", "'X'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "task_embed", "[", "'test'", "]", "[", "'X'", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.LengthEval.__init__": [[105, 109], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sentence_length.txt'", ")", "\n", "# labels: bins", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'Length'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.WordContentEval.__init__": [[111, 115], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'word_content.txt'", ")", "\n", "# labels: 200 target words", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'WordContent'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.DepthEval.__init__": [[120, 124], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'tree_depth.txt'", ")", "\n", "# labels: bins", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'Depth'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.TopConstituentsEval.__init__": [[126, 130], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'top_constituents.txt'", ")", "\n", "# labels: 'PP_NP_VP_.' .. (20 classes)", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'TopConstituents'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.BigramShiftEval.__init__": [[132, 136], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'bigram_shift.txt'", ")", "\n", "# labels: 0 or 1", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'BigramShift'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.TenseEval.__init__": [[144, 148], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'past_present.txt'", ")", "\n", "# labels: 'PRES', 'PAST'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'Tense'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.SubjNumberEval.__init__": [[150, 154], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'subj_number.txt'", ")", "\n", "# labels: 'NN', 'NNS'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'SubjNumber'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.ObjNumberEval.__init__": [[156, 160], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'obj_number.txt'", ")", "\n", "# labels: 'NN', 'NNS'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'ObjNumber'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.OddManOutEval.__init__": [[162, 166], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'odd_man_out.txt'", ")", "\n", "# labels: 'O', 'C'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'OddManOut'", ",", "task_path", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.probing.CoordinationInversionEval.__init__": [[168, 172], ["os.path.join", "probing.PROBINGEval.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "task_path", "=", "os", ".", "path", ".", "join", "(", "task_path", ",", "'coordination_inversion.txt'", ")", "\n", "# labels: 'O', 'I'", "\n", "PROBINGEval", ".", "__init__", "(", "self", ",", "'CoordinationInversion'", ",", "task_path", ",", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.BinaryClassifierEval.__init__": [[22, 26], ["len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pos", ",", "neg", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "self", ".", "samples", ",", "self", ".", "labels", "=", "pos", "+", "neg", ",", "[", "1", "]", "*", "len", "(", "pos", ")", "+", "[", "0", "]", "*", "len", "(", "neg", ")", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.BinaryClassifierEval.do_prepare": [[27, 30], ["prepare"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "# prepare is given the whole text", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "# prepare puts everything it outputs in \"params\" : params.word2id etc", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.BinaryClassifierEval.loadFile": [[33, 36], ["io.open", "line.split", "f.read().splitlines", "f.read"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'latin-1'", ")", "as", "f", ":", "\n", "            ", "return", "[", "line", ".", "split", "(", ")", "for", "line", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.BinaryClassifierEval.run": [[37, 61], ["sorted", "logging.info", "range", "numpy.vstack", "logging.info", "senteval.tools.validation.InnerKFoldClassifier", "senteval.tools.validation.InnerKFoldClassifier.run", "logging.debug", "zip", "batcher", "numpy.vstack.append", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "enc_input", "=", "[", "]", "\n", "# Sort to reduce padding", "\n", "sorted_corpus", "=", "sorted", "(", "zip", "(", "self", ".", "samples", ",", "self", ".", "labels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "z", "[", "1", "]", ")", ")", "\n", "sorted_samples", "=", "[", "x", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus", "]", "\n", "sorted_labels", "=", "[", "y", "for", "(", "x", ",", "y", ")", "in", "sorted_corpus", "]", "\n", "logging", ".", "info", "(", "'Generating sentence embeddings'", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "self", ".", "n_samples", ",", "params", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "sorted_samples", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "enc_input", ".", "append", "(", "embeddings", ")", "\n", "", "enc_input", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "logging", ".", "info", "(", "'Generated sentence embeddings'", ")", "\n", "\n", "config", "=", "{", "'nclasses'", ":", "2", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'kfold'", ":", "params", ".", "kfold", "}", "\n", "clf", "=", "InnerKFoldClassifier", "(", "enc_input", ",", "np", ".", "array", "(", "sorted_labels", ")", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1}\\n'", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "'ndev'", ":", "self", ".", "n_samples", ",", "\n", "'ntest'", ":", "self", ".", "n_samples", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.CREval.__init__": [[64, 69], ["logging.debug", "binary.CREval.loadFile", "binary.CREval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : CR *****\\n\\n'", ")", "\n", "pos", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'custrev.pos'", ")", ")", "\n", "neg", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'custrev.neg'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "pos", ",", "neg", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.MREval.__init__": [[72, 77], ["logging.debug", "binary.MREval.loadFile", "binary.MREval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : MR *****\\n\\n'", ")", "\n", "pos", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'rt-polarity.pos'", ")", ")", "\n", "neg", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'rt-polarity.neg'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "pos", ",", "neg", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.SUBJEval.__init__": [[80, 85], ["logging.debug", "binary.SUBJEval.loadFile", "binary.SUBJEval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : SUBJ *****\\n\\n'", ")", "\n", "obj", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'subj.objective'", ")", ")", "\n", "subj", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'subj.subjective'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "obj", ",", "subj", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.binary.MPQAEval.__init__": [[88, 93], ["logging.debug", "binary.MPQAEval.loadFile", "binary.MPQAEval.loadFile", "binary.BinaryClassifierEval.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : MPQA *****\\n\\n'", ")", "\n", "pos", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'mpqa.pos'", ")", ")", "\n", "neg", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'mpqa.neg'", ")", ")", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "pos", ",", "neg", ",", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSEval.loadFile": [[27, 51], ["zip", "numpy.array", "sorted", "map", "float", "numpy.array", "numpy.array", "zip", "zip", "l.split", "io.open().read().splitlines", "s.split", "s.split", "io.open().read().splitlines", "len", "len", "io.open().read", "io.open().read", "io.open", "io.open"], "methods", ["None"], ["    ", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "samples", "=", "[", "]", "\n", "\n", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "sent1", ",", "sent2", "=", "zip", "(", "*", "[", "l", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "\n", "io", ".", "open", "(", "fpath", "+", "'/STS.input.%s.txt'", "%", "dataset", ",", "\n", "encoding", "=", "'utf8'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", ")", "\n", "raw_scores", "=", "np", ".", "array", "(", "[", "x", "for", "x", "in", "\n", "io", ".", "open", "(", "fpath", "+", "'/STS.gs.%s.txt'", "%", "dataset", ",", "\n", "encoding", "=", "'utf8'", ")", "\n", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", ")", "\n", "not_empty_idx", "=", "raw_scores", "!=", "''", "\n", "\n", "gs_scores", "=", "[", "float", "(", "x", ")", "for", "x", "in", "raw_scores", "[", "not_empty_idx", "]", "]", "\n", "sent1", "=", "np", ".", "array", "(", "[", "s", ".", "split", "(", ")", "for", "s", "in", "sent1", "]", ")", "[", "not_empty_idx", "]", "\n", "sent2", "=", "np", ".", "array", "(", "[", "s", ".", "split", "(", ")", "for", "s", "in", "sent2", "]", ")", "[", "not_empty_idx", "]", "\n", "# sort data by length to minimize padding in batcher", "\n", "sorted_data", "=", "sorted", "(", "zip", "(", "sent1", ",", "sent2", ",", "gs_scores", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "sent1", ",", "sent2", ",", "gs_scores", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_data", ")", ")", "\n", "\n", "self", ".", "data", "[", "dataset", "]", "=", "(", "sent1", ",", "sent2", ",", "gs_scores", ")", "\n", "self", ".", "samples", "+=", "sent1", "+", "sent2", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSEval.do_prepare": [[52, 58], ["prepare", "numpy.nan_to_num", "senteval.utils.cosine", "numpy.nan_to_num", "numpy.nan_to_num"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.utils.cosine"], ["", "", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "if", "'similarity'", "in", "params", ":", "\n", "            ", "self", ".", "similarity", "=", "params", ".", "similarity", "\n", "", "else", ":", "# Default similarity is cosine", "\n", "            ", "self", ".", "similarity", "=", "lambda", "s1", ",", "s2", ":", "np", ".", "nan_to_num", "(", "cosine", "(", "np", ".", "nan_to_num", "(", "s1", ")", ",", "np", ".", "nan_to_num", "(", "s2", ")", ")", ")", "\n", "", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSEval.run": [[59, 105], ["numpy.array", "numpy.array", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "logging.debug", "logging.debug", "range", "logging.debug", "len", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "len", "results.keys", "batcher", "batcher", "range", "results.keys", "results.keys", "len", "len", "len", "sts.STSEval.similarity", "sys_scores.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "sys_scores", "=", "[", "]", "\n", "input1", ",", "input2", ",", "gs_scores", "=", "self", ".", "data", "[", "dataset", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "gs_scores", ")", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch1", "=", "input1", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "batch2", "=", "input2", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "\n", "# we assume get_batch already throws out the faulty ones", "\n", "if", "len", "(", "batch1", ")", "==", "len", "(", "batch2", ")", "and", "len", "(", "batch1", ")", ">", "0", ":", "\n", "                    ", "enc1", "=", "batcher", "(", "params", ",", "batch1", ")", "\n", "enc2", "=", "batcher", "(", "params", ",", "batch2", ")", "\n", "\n", "for", "kk", "in", "range", "(", "enc2", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "sys_score", "=", "self", ".", "similarity", "(", "enc1", "[", "kk", "]", ",", "enc2", "[", "kk", "]", ")", "\n", "sys_scores", ".", "append", "(", "sys_score", ")", "\n", "\n", "", "", "", "results", "[", "dataset", "]", "=", "{", "'pearson'", ":", "pearsonr", "(", "sys_scores", ",", "gs_scores", ")", ",", "\n", "'spearman'", ":", "spearmanr", "(", "sys_scores", ",", "gs_scores", ")", ",", "\n", "'nsamples'", ":", "len", "(", "sys_scores", ")", "}", "\n", "logging", ".", "debug", "(", "'%s : pearson = %.4f, spearman = %.4f'", "%", "\n", "(", "dataset", ",", "results", "[", "dataset", "]", "[", "'pearson'", "]", "[", "0", "]", ",", "\n", "results", "[", "dataset", "]", "[", "'spearman'", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "weights", "=", "[", "results", "[", "dset", "]", "[", "'nsamples'", "]", "for", "dset", "in", "results", ".", "keys", "(", ")", "]", "\n", "list_prs", "=", "np", ".", "array", "(", "[", "results", "[", "dset", "]", "[", "'pearson'", "]", "[", "0", "]", "for", "\n", "dset", "in", "results", ".", "keys", "(", ")", "]", ")", "\n", "list_spr", "=", "np", ".", "array", "(", "[", "results", "[", "dset", "]", "[", "'spearman'", "]", "[", "0", "]", "for", "\n", "dset", "in", "results", ".", "keys", "(", ")", "]", ")", "\n", "\n", "avg_pearson", "=", "np", ".", "average", "(", "list_prs", ")", "\n", "avg_spearman", "=", "np", ".", "average", "(", "list_spr", ")", "\n", "wavg_pearson", "=", "np", ".", "average", "(", "list_prs", ",", "weights", "=", "weights", ")", "\n", "wavg_spearman", "=", "np", ".", "average", "(", "list_spr", ",", "weights", "=", "weights", ")", "\n", "\n", "results", "[", "'all'", "]", "=", "{", "'pearson'", ":", "{", "'mean'", ":", "avg_pearson", ",", "\n", "'wmean'", ":", "wavg_pearson", "}", ",", "\n", "'spearman'", ":", "{", "'mean'", ":", "avg_spearman", ",", "\n", "'wmean'", ":", "wavg_spearman", "}", "}", "\n", "logging", ".", "debug", "(", "'ALL (weighted average) : Pearson = %.4f, \\\n            Spearman = %.4f'", "%", "(", "wavg_pearson", ",", "wavg_spearman", ")", ")", "\n", "logging", ".", "debug", "(", "'ALL (average) : Pearson = %.4f, \\\n            Spearman = %.4f\\n'", "%", "(", "avg_pearson", ",", "avg_spearman", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STS12Eval.__init__": [[108, 114], ["logging.debug", "sts.STS12Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS12 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'MSRpar'", ",", "'MSRvid'", ",", "'SMTeuroparl'", ",", "\n", "'surprise.OnWN'", ",", "'surprise.SMTnews'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STS13Eval.__init__": [[118, 123], ["logging.debug", "sts.STS13Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS13 (-SMT) *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'FNWN'", ",", "'headlines'", ",", "'OnWN'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STS14Eval.__init__": [[126, 132], ["logging.debug", "sts.STS14Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS14 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'deft-forum'", ",", "'deft-news'", ",", "'headlines'", ",", "\n", "'images'", ",", "'OnWN'", ",", "'tweet-news'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STS15Eval.__init__": [[135, 141], ["logging.debug", "sts.STS15Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS15 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'answers-forums'", ",", "'answers-students'", ",", "\n", "'belief'", ",", "'headlines'", ",", "'images'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STS16Eval.__init__": [[144, 150], ["logging.debug", "sts.STS16Eval.loadFile"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : STS16 *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "datasets", "=", "[", "'answer-answer'", ",", "'headlines'", ",", "'plagiarism'", ",", "\n", "'postediting'", ",", "'question-question'", "]", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.__init__": [[153, 160], ["logging.debug", "sts.STSBenchmarkEval.loadFile", "sts.STSBenchmarkEval.loadFile", "sts.STSBenchmarkEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'\\n\\n***** Transfer task : STSBenchmark*****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-train.csv'", ")", ")", "\n", "dev", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-dev.csv'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'sts-test.csv'", ")", ")", "\n", "self", ".", "sick_data", "=", "{", "'train'", ":", "train", ",", "'dev'", ":", "dev", ",", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.sts.STSBenchmarkEval.loadFile": [[161, 172], ["io.open", "float", "line.strip().split", "sick_data[].append", "sick_data[].append", "sick_data[].append", "text[].split", "text[].split", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "sick_data", "=", "{", "'X_A'", ":", "[", "]", ",", "'X_B'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "text", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sick_data", "[", "'X_A'", "]", ".", "append", "(", "text", "[", "5", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'X_B'", "]", ".", "append", "(", "text", "[", "6", "]", ".", "split", "(", ")", ")", "\n", "sick_data", "[", "'y'", "]", ".", "append", "(", "text", "[", "4", "]", ")", "\n", "\n", "", "", "sick_data", "[", "'y'", "]", "=", "[", "float", "(", "s", ")", "for", "s", "in", "sick_data", "[", "'y'", "]", "]", "\n", "return", "sick_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.utils.create_dictionary": [[16, 36], ["sorted", "enumerate", "words.items", "id2word.append"], "function", ["None"], ["def", "create_dictionary", "(", "sentences", ")", ":", "\n", "    ", "words", "=", "{", "}", "\n", "for", "s", "in", "sentences", ":", "\n", "        ", "for", "word", "in", "s", ":", "\n", "            ", "if", "word", "in", "words", ":", "\n", "                ", "words", "[", "word", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "words", "[", "word", "]", "=", "1", "\n", "", "", "", "words", "[", "'<s>'", "]", "=", "1e9", "+", "4", "\n", "words", "[", "'</s>'", "]", "=", "1e9", "+", "3", "\n", "words", "[", "'<p>'", "]", "=", "1e9", "+", "2", "\n", "# words['<UNK>'] = 1e9 + 1", "\n", "sorted_words", "=", "sorted", "(", "words", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "# inverse sort", "\n", "id2word", "=", "[", "]", "\n", "word2id", "=", "{", "}", "\n", "for", "i", ",", "(", "w", ",", "_", ")", "in", "enumerate", "(", "sorted_words", ")", ":", "\n", "        ", "id2word", ".", "append", "(", "w", ")", "\n", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "", "return", "id2word", ",", "word2id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.utils.cosine": [[38, 40], ["numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine", "(", "u", ",", "v", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "u", ",", "v", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "u", ")", "*", "np", ".", "linalg", ".", "norm", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.utils.get_optimizer": [[49, 96], ["s[].split", "inspect.getargspec", "all", "Exception", "x.split", "float", "s.find", "len", "re.match", "optim_params.keys", "str", "str", "optim_params.keys", "s.find", "Exception"], "function", ["None"], ["", "def", "get_optimizer", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    Parse optimizer parameters.\n    Input should be of the form:\n        - \"sgd,lr=0.01\"\n        - \"adagrad,lr=0.1,lr_decay=0.05\"\n    \"\"\"", "\n", "if", "\",\"", "in", "s", ":", "\n", "        ", "method", "=", "s", "[", ":", "s", ".", "find", "(", "','", ")", "]", "\n", "optim_params", "=", "{", "}", "\n", "for", "x", "in", "s", "[", "s", ".", "find", "(", "','", ")", "+", "1", ":", "]", ".", "split", "(", "','", ")", ":", "\n", "            ", "split", "=", "x", ".", "split", "(", "'='", ")", "\n", "assert", "len", "(", "split", ")", "==", "2", "\n", "assert", "re", ".", "match", "(", "\"^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)$\"", ",", "split", "[", "1", "]", ")", "is", "not", "None", "\n", "optim_params", "[", "split", "[", "0", "]", "]", "=", "float", "(", "split", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "method", "=", "s", "\n", "optim_params", "=", "{", "}", "\n", "\n", "", "if", "method", "==", "'adadelta'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adadelta", "\n", "", "elif", "method", "==", "'adagrad'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adagrad", "\n", "", "elif", "method", "==", "'adam'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adam", "\n", "", "elif", "method", "==", "'adamax'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adamax", "\n", "", "elif", "method", "==", "'asgd'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "ASGD", "\n", "", "elif", "method", "==", "'rmsprop'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "RMSprop", "\n", "", "elif", "method", "==", "'rprop'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Rprop", "\n", "", "elif", "method", "==", "'sgd'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "SGD", "\n", "assert", "'lr'", "in", "optim_params", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown optimization method: \"%s\"'", "%", "method", ")", "\n", "\n", "# check that we give good parameters to the optimizer", "\n", "", "expected_args", "=", "inspect", ".", "getargspec", "(", "optim_fn", ".", "__init__", ")", "[", "0", "]", "\n", "assert", "expected_args", "[", ":", "2", "]", "==", "[", "'self'", ",", "'params'", "]", "\n", "if", "not", "all", "(", "k", "in", "expected_args", "[", "2", ":", "]", "for", "k", "in", "optim_params", ".", "keys", "(", ")", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Unexpected parameters: expected \"%s\", got \"%s\"'", "%", "(", "\n", "str", "(", "expected_args", "[", "2", ":", "]", ")", ",", "str", "(", "optim_params", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "return", "optim_fn", ",", "optim_params", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.__init__": [[24, 34], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "COCOProjNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "imgdim", "=", "config", "[", "'imgdim'", "]", "\n", "self", ".", "sentdim", "=", "config", "[", "'sentdim'", "]", "\n", "self", ".", "projdim", "=", "config", "[", "'projdim'", "]", "\n", "self", ".", "imgproj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "imgdim", ",", "self", ".", "projdim", ")", ",", "\n", ")", "\n", "self", ".", "sentproj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "sentdim", ",", "self", ".", "projdim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.forward": [[36, 65], ["img.view.view.unsqueeze().expand_as().contiguous", "img.view.view.view", "imgc.view.view.view", "sent.view.view.unsqueeze().expand_as().contiguous", "sent.view.view.view", "sentc.view.view.view", "ranking.COCOProjNet.imgproj", "ranking.COCOProjNet.imgproj", "ranking.COCOProjNet.sentproj", "ranking.COCOProjNet.sentproj", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "img.view.view.unsqueeze().expand_as", "sent.view.view.unsqueeze().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "img.view.view.unsqueeze", "sent.view.view.unsqueeze", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "sent", ",", "imgc", ",", "sentc", ")", ":", "\n", "# imgc : (bsize, ncontrast, imgdim)", "\n", "# sentc : (bsize, ncontrast, sentdim)", "\n", "# img : (bsize, imgdim)", "\n", "# sent : (bsize, sentdim)", "\n", "        ", "img", "=", "img", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "imgc", ")", ".", "contiguous", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "-", "1", ",", "self", ".", "imgdim", ")", "\n", "imgc", "=", "imgc", ".", "view", "(", "-", "1", ",", "self", ".", "imgdim", ")", "\n", "sent", "=", "sent", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sentc", ")", ".", "contiguous", "(", ")", "\n", "sent", "=", "sent", ".", "view", "(", "-", "1", ",", "self", ".", "sentdim", ")", "\n", "sentc", "=", "sentc", ".", "view", "(", "-", "1", ",", "self", ".", "sentdim", ")", "\n", "\n", "imgproj", "=", "self", ".", "imgproj", "(", "img", ")", "\n", "imgproj", "=", "imgproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "imgproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "imgproj", ")", "\n", "imgcproj", "=", "self", ".", "imgproj", "(", "imgc", ")", "\n", "imgcproj", "=", "imgcproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "imgcproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "imgcproj", ")", "\n", "sentproj", "=", "self", ".", "sentproj", "(", "sent", ")", "\n", "sentproj", "=", "sentproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "sentproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "sentproj", ")", "\n", "sentcproj", "=", "self", ".", "sentproj", "(", "sentc", ")", "\n", "sentcproj", "=", "sentcproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "sentcproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "sentcproj", ")", "\n", "# (bsize*ncontrast, projdim)", "\n", "\n", "anchor1", "=", "torch", ".", "sum", "(", "(", "imgproj", "*", "sentproj", ")", ",", "1", ")", "\n", "anchor2", "=", "torch", ".", "sum", "(", "(", "sentproj", "*", "imgproj", ")", ",", "1", ")", "\n", "img_sentc", "=", "torch", ".", "sum", "(", "(", "imgproj", "*", "sentcproj", ")", ",", "1", ")", "\n", "sent_imgc", "=", "torch", ".", "sum", "(", "(", "sentproj", "*", "imgcproj", ")", ",", "1", ")", "\n", "\n", "# (bsize*ncontrast)", "\n", "return", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.proj_sentence": [[66, 70], ["ranking.COCOProjNet.sentproj", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "proj_sentence", "(", "self", ",", "sent", ")", ":", "\n", "        ", "output", "=", "self", ".", "sentproj", "(", "sent", ")", "\n", "output", "=", "output", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "output", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "output", ")", "\n", "return", "output", "# (bsize, projdim)", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.proj_image": [[71, 75], ["ranking.COCOProjNet.imgproj", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "proj_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "output", "=", "self", ".", "imgproj", "(", "img", ")", "\n", "output", "=", "output", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "output", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "output", ")", "\n", "return", "output", "# (bsize, projdim)", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.PairwiseRankingLoss.__init__": [[81, 84], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__"], ["def", "__init__", "(", "self", ",", "margin", ")", ":", "\n", "        ", "super", "(", "PairwiseRankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.PairwiseRankingLoss.forward": [[85, 93], ["torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", ")", ":", "\n", "\n", "        ", "cost_sent", "=", "torch", ".", "clamp", "(", "self", ".", "margin", "-", "anchor1", "+", "img_sentc", ",", "\n", "min", "=", "0.0", ")", ".", "sum", "(", ")", "\n", "cost_img", "=", "torch", ".", "clamp", "(", "self", ".", "margin", "-", "anchor2", "+", "sent_imgc", ",", "\n", "min", "=", "0.0", ")", ".", "sum", "(", ")", "\n", "loss", "=", "cost_sent", "+", "cost_img", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.__init__": [[97, 125], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "COCOProjNet().cuda", "PairwiseRankingLoss().cuda", "torch.Adam", "torch.Adam", "ranking.ImageSentenceRankingPytorch.model.parameters", "ranking.COCOProjNet", "ranking.PairwiseRankingLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "valid", ",", "test", ",", "config", ")", ":", "\n", "# fix seed", "\n", "        ", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "valid", "=", "valid", "\n", "self", ".", "test", "=", "test", "\n", "\n", "self", ".", "imgdim", "=", "len", "(", "train", "[", "'imgfeat'", "]", "[", "0", "]", ")", "\n", "self", ".", "sentdim", "=", "len", "(", "train", "[", "'sentfeat'", "]", "[", "0", "]", ")", "\n", "self", ".", "projdim", "=", "config", "[", "'projdim'", "]", "\n", "self", ".", "margin", "=", "config", "[", "'margin'", "]", "\n", "\n", "self", ".", "batch_size", "=", "128", "\n", "self", ".", "ncontrast", "=", "30", "\n", "self", ".", "maxepoch", "=", "20", "\n", "self", ".", "early_stop", "=", "True", "\n", "\n", "config_model", "=", "{", "'imgdim'", ":", "self", ".", "imgdim", ",", "'sentdim'", ":", "self", ".", "sentdim", ",", "\n", "'projdim'", ":", "self", ".", "projdim", "}", "\n", "self", ".", "model", "=", "COCOProjNet", "(", "config_model", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "loss_fn", "=", "PairwiseRankingLoss", "(", "margin", "=", "self", ".", "margin", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.prepare_data": [[126, 136], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ",", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "\n", "testTxt", ",", "testImg", ")", ":", "\n", "        ", "trainTxt", "=", "torch", ".", "FloatTensor", "(", "trainTxt", ")", "\n", "trainImg", "=", "torch", ".", "FloatTensor", "(", "trainImg", ")", "\n", "devTxt", "=", "torch", ".", "FloatTensor", "(", "devTxt", ")", ".", "cuda", "(", ")", "\n", "devImg", "=", "torch", ".", "FloatTensor", "(", "devImg", ")", ".", "cuda", "(", ")", "\n", "testTxt", "=", "torch", ".", "FloatTensor", "(", "testTxt", ")", ".", "cuda", "(", ")", "\n", "testImg", "=", "torch", ".", "FloatTensor", "(", "testImg", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "testTxt", ",", "testImg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.run": [[137, 225], ["logging.info", "ranking.ImageSentenceRankingPytorch.prepare_data", "range", "logging.info", "ranking.ImageSentenceRankingPytorch.trainepoch", "logging.info", "range", "logging.info", "logging.info", "ranking.ImageSentenceRankingPytorch.i2t", "ranking.ImageSentenceRankingPytorch.t2i", "ranking.ImageSentenceRankingPytorch.i2t", "logging.info", "ranking.ImageSentenceRankingPytorch.t2i", "logging.info", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.relatedness.RelatednessPytorch.prepare_data", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.t2i", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.t2i"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestdevscore", "=", "-", "1", "\n", "early_stop_count", "=", "0", "\n", "stop_train", "=", "False", "\n", "\n", "# Preparing data", "\n", "logging", ".", "info", "(", "'prepare data'", ")", "\n", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "testTxt", ",", "testImg", "=", "self", ".", "prepare_data", "(", "self", ".", "train", "[", "'sentfeat'", "]", ",", "self", ".", "train", "[", "'imgfeat'", "]", ",", "\n", "self", ".", "valid", "[", "'sentfeat'", "]", ",", "self", ".", "valid", "[", "'imgfeat'", "]", ",", "\n", "self", ".", "test", "[", "'sentfeat'", "]", ",", "self", ".", "test", "[", "'imgfeat'", "]", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "maxepoch", ":", "\n", "            ", "logging", ".", "info", "(", "'start epoch'", ")", "\n", "self", ".", "trainepoch", "(", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "nepoches", "=", "1", ")", "\n", "logging", ".", "info", "(", "'Epoch {0} finished'", ".", "format", "(", "self", ".", "nepoch", ")", ")", "\n", "\n", "results", "=", "{", "'i2t'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'t2i'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'dev'", ":", "bestdevscore", "}", "\n", "score", "=", "0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "devTxt_i", "=", "devTxt", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "devImg_i", "=", "devImg", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "# Compute dev ranks img2txt", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "devImg_i", ",", "\n", "devTxt_i", ")", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", "+=", "r1_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r5'", "]", "+=", "r5_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", "+=", "r10_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'medr'", "]", "+=", "medr_i2t", "/", "5", "\n", "logging", ".", "info", "(", "\"Image to text: {0}, {1}, {2}, {3}\"", "\n", ".", "format", "(", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "# Compute dev ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "devImg_i", ",", "\n", "devTxt_i", ")", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", "+=", "r1_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r5'", "]", "+=", "r5_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", "+=", "r10_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "+=", "medr_t2i", "/", "5", "\n", "logging", ".", "info", "(", "\"Text to Image: {0}, {1}, {2}, {3}\"", "\n", ".", "format", "(", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "score", "+=", "(", "r1_i2t", "+", "r5_i2t", "+", "r10_i2t", "+", "\n", "r1_t2i", "+", "r5_t2i", "+", "r10_t2i", ")", "/", "5", "\n", "\n", "", "logging", ".", "info", "(", "\"Dev mean Text to Image: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r5'", "]", ",", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", ",", "results", "[", "'t2i'", "]", "[", "'medr'", "]", ")", ")", "\n", "logging", ".", "info", "(", "\"Dev mean Image to text: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r5'", "]", ",", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", ",", "results", "[", "'i2t'", "]", "[", "'medr'", "]", ")", ")", "\n", "\n", "# early stop on Pearson", "\n", "if", "score", ">", "bestdevscore", ":", "\n", "                ", "bestdevscore", "=", "score", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "self", ".", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "3", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "\n", "# Compute test for the 5 splits", "\n", "results", "=", "{", "'i2t'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'t2i'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'dev'", ":", "bestdevscore", "}", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "testTxt_i", "=", "testTxt", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "testImg_i", "=", "testImg", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "# Compute test ranks img2txt", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "testImg_i", ",", "testTxt_i", ")", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", "+=", "r1_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r5'", "]", "+=", "r5_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", "+=", "r10_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'medr'", "]", "+=", "medr_i2t", "/", "5", "\n", "# Compute test ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "testImg_i", ",", "testTxt_i", ")", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", "+=", "r1_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r5'", "]", "+=", "r5_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", "+=", "r10_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "+=", "medr_t2i", "/", "5", "\n", "\n", "", "return", "bestdevscore", ",", "results", "[", "'i2t'", "]", "[", "'r1'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r5'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r10'", "]", ",", "results", "[", "'i2t'", "]", "[", "'medr'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r1'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r5'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r10'", "]", ",", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.trainepoch": [[226, 273], ["ranking.ImageSentenceRankingPytorch.model.train", "range", "list", "range", "numpy.random.permutation", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "numpy.random.choice", "numpy.random.choice", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "ranking.ImageSentenceRankingPytorch.model", "ranking.ImageSentenceRankingPytorch.loss_fn", "all_costs.append", "ranking.ImageSentenceRankingPytorch.optimizer.zero_grad", "ranking.ImageSentenceRankingPytorch.backward", "ranking.ImageSentenceRankingPytorch.optimizer.step", "len", "logging.info", "ranking.ImageSentenceRankingPytorch.i2t", "logging.info", "ranking.ImageSentenceRankingPytorch.t2i", "logging.info", "ranking.ImageSentenceRankingPytorch.data.item", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "trainImg.index_select", "trainTxt.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainImg.index_select", "trainTxt.index_select"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.t2i"], ["", "def", "trainepoch", "(", "self", ",", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "nepoches", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "nepoches", ")", ":", "\n", "            ", "permutation", "=", "list", "(", "np", ".", "random", ".", "permutation", "(", "len", "(", "trainTxt", ")", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "trainTxt", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "if", "i", "%", "(", "self", ".", "batch_size", "*", "500", ")", "==", "0", "and", "i", ">", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "'samples : {0}'", ".", "format", "(", "i", ")", ")", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "devImg", ",", "\n", "devTxt", ")", "\n", "logging", ".", "info", "(", "\"Image to text: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "# Compute test ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "devImg", ",", "\n", "devTxt", ")", "\n", "logging", ".", "info", "(", "\"Text to Image: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "", "idx", "=", "torch", ".", "LongTensor", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", "\n", "imgbatch", "=", "Variable", "(", "trainImg", ".", "index_select", "(", "0", ",", "idx", ")", ")", ".", "cuda", "(", ")", "\n", "sentbatch", "=", "Variable", "(", "trainTxt", ".", "index_select", "(", "0", ",", "idx", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "idximgc", "=", "np", ".", "random", ".", "choice", "(", "permutation", "[", ":", "i", "]", "+", "\n", "permutation", "[", "i", "+", "self", ".", "batch_size", ":", "]", ",", "\n", "self", ".", "ncontrast", "*", "idx", ".", "size", "(", "0", ")", ")", "\n", "idxsentc", "=", "np", ".", "random", ".", "choice", "(", "permutation", "[", ":", "i", "]", "+", "\n", "permutation", "[", "i", "+", "self", ".", "batch_size", ":", "]", ",", "\n", "self", ".", "ncontrast", "*", "idx", ".", "size", "(", "0", ")", ")", "\n", "idximgc", "=", "torch", ".", "LongTensor", "(", "idximgc", ")", "\n", "idxsentc", "=", "torch", ".", "LongTensor", "(", "idxsentc", ")", "\n", "# Get indexes for contrastive images and sentences", "\n", "imgcbatch", "=", "Variable", "(", "trainImg", ".", "index_select", "(", "0", ",", "idximgc", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "ncontrast", ",", "self", ".", "imgdim", ")", ".", "cuda", "(", ")", "\n", "sentcbatch", "=", "Variable", "(", "trainTxt", ".", "index_select", "(", "0", ",", "idxsentc", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "ncontrast", ",", "self", ".", "sentdim", ")", ".", "cuda", "(", ")", "\n", "\n", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", "=", "self", ".", "model", "(", "\n", "imgbatch", ",", "sentbatch", ",", "imgcbatch", ",", "sentcbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "nepoches", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.t2i": [[274, 313], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "int", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "img_embed.index_select", "numpy.zeros", "range", "len", "img_embed.append", "sent_embed.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "numpy.zeros", "range", "len", "len", "len", "numpy.floor", "ranking.ImageSentenceRankingPytorch.model.proj_image", "ranking.ImageSentenceRankingPytorch.model.proj_sentence", "img_embed.size", "len", "len", "len", "len", "len", "numpy.median", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mm().cpu", "torch.mm().cpu", "torch.mm().cpu", "torch.mm().cpu", "numpy.argsort", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "img_embed.index_select.transpose"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.proj_image", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.proj_sentence"], ["", "def", "t2i", "(", "self", ",", "images", ",", "captions", ")", ":", "\n", "        ", "\"\"\"\n        Images: (5N, imgdim) matrix of images\n        Captions: (5N, sentdim) matrix of captions\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Project images and captions", "\n", "            ", "img_embed", ",", "sent_embed", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "images", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "img_embed", ".", "append", "(", "self", ".", "model", ".", "proj_image", "(", "\n", "Variable", "(", "images", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "sent_embed", ".", "append", "(", "self", ".", "model", ".", "proj_sentence", "(", "\n", "Variable", "(", "captions", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "", "img_embed", "=", "torch", ".", "cat", "(", "img_embed", ",", "0", ")", ".", "data", "\n", "sent_embed", "=", "torch", ".", "cat", "(", "sent_embed", ",", "0", ")", ".", "data", "\n", "\n", "npts", "=", "int", "(", "img_embed", ".", "size", "(", "0", ")", "/", "5", ")", "\n", "idxs", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "range", "(", "0", ",", "len", "(", "img_embed", ")", ",", "5", ")", ")", "\n", "ims", "=", "img_embed", ".", "index_select", "(", "0", ",", "idxs", ")", "\n", "\n", "ranks", "=", "np", ".", "zeros", "(", "5", "*", "npts", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "\n", "# Get query captions", "\n", "                ", "queries", "=", "sent_embed", "[", "5", "*", "index", ":", "5", "*", "index", "+", "5", "]", "\n", "\n", "# Compute scores", "\n", "scores", "=", "torch", ".", "mm", "(", "queries", ",", "ims", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inds", "=", "np", ".", "zeros", "(", "scores", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "inds", ")", ")", ":", "\n", "                    ", "inds", "[", "i", "]", "=", "np", ".", "argsort", "(", "scores", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "ranks", "[", "5", "*", "index", "+", "i", "]", "=", "np", ".", "where", "(", "inds", "[", "i", "]", "==", "index", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# Compute metrics", "\n", "", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.ImageSentenceRankingPytorch.i2t": [[314, 360], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "int", "numpy.zeros", "range", "len", "img_embed.append", "sent_embed.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "scores.cpu().numpy.cpu().numpy.cpu().numpy", "index_list.append", "range", "len", "len", "len", "numpy.floor", "ranking.ImageSentenceRankingPytorch.model.proj_image", "ranking.ImageSentenceRankingPytorch.model.proj_sentence", "img_embed.size", "numpy.argsort", "len", "len", "len", "numpy.median", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "scores.cpu().numpy.cpu().numpy.cpu", "query_img.view", "sent_embed.transpose", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.proj_image", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.ranking.COCOProjNet.proj_sentence"], ["", "", "def", "i2t", "(", "self", ",", "images", ",", "captions", ")", ":", "\n", "        ", "\"\"\"\n        Images: (5N, imgdim) matrix of images\n        Captions: (5N, sentdim) matrix of captions\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Project images and captions", "\n", "            ", "img_embed", ",", "sent_embed", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "images", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "img_embed", ".", "append", "(", "self", ".", "model", ".", "proj_image", "(", "\n", "Variable", "(", "images", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "sent_embed", ".", "append", "(", "self", ".", "model", ".", "proj_sentence", "(", "\n", "Variable", "(", "captions", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "", "img_embed", "=", "torch", ".", "cat", "(", "img_embed", ",", "0", ")", ".", "data", "\n", "sent_embed", "=", "torch", ".", "cat", "(", "sent_embed", ",", "0", ")", ".", "data", "\n", "\n", "npts", "=", "int", "(", "img_embed", ".", "size", "(", "0", ")", "/", "5", ")", "\n", "index_list", "=", "[", "]", "\n", "\n", "ranks", "=", "np", ".", "zeros", "(", "npts", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "\n", "# Get query image", "\n", "                ", "query_img", "=", "img_embed", "[", "5", "*", "index", "]", "\n", "\n", "# Compute scores", "\n", "scores", "=", "torch", ".", "mm", "(", "query_img", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "sent_embed", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "index_list", ".", "append", "(", "inds", "[", "0", "]", ")", "\n", "\n", "# Score", "\n", "rank", "=", "1e20", "\n", "for", "i", "in", "range", "(", "5", "*", "index", ",", "5", "*", "index", "+", "5", ",", "1", ")", ":", "\n", "                    ", "tmp", "=", "np", ".", "where", "(", "inds", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "tmp", "<", "rank", ":", "\n", "                        ", "rank", "=", "tmp", "\n", "", "", "ranks", "[", "index", "]", "=", "rank", "\n", "\n", "# Compute metrics", "\n", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.relatedness.RelatednessPytorch.__init__": [[25, 58], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Adam", "torch.Adam", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Softmax", "torch.nn.Softmax", "relatedness.RelatednessPytorch.model.cuda", "relatedness.RelatednessPytorch.loss_fn.cuda", "relatedness.RelatednessPytorch.model.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "valid", ",", "test", ",", "devscores", ",", "config", ")", ":", "\n", "# fix seed", "\n", "        ", "np", ".", "random", ".", "seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'torch.cuda required for Relatedness'", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "valid", "=", "valid", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "devscores", "=", "devscores", "\n", "\n", "self", ".", "inputdim", "=", "train", "[", "'X'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "l2reg", "=", "0.", "\n", "self", ".", "batch_size", "=", "64", "\n", "self", ".", "maxepoch", "=", "1000", "\n", "self", ".", "early_stop", "=", "True", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "self", ".", "nclasses", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ",", "\n", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", "=", "self", ".", "loss_fn", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "weight_decay", "=", "self", ".", "l2reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.relatedness.RelatednessPytorch.prepare_data": [[59, 69], ["torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ",", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", ")", ":", "\n", "# Transform probs to log-probs for KL-divergence", "\n", "        ", "trainX", "=", "torch", ".", "from_numpy", "(", "trainX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "trainy", "=", "torch", ".", "from_numpy", "(", "trainy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "devX", "=", "torch", ".", "from_numpy", "(", "devX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "devy", "=", "torch", ".", "from_numpy", "(", "devy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "testX", "=", "torch", ".", "from_numpy", "(", "testX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "testY", "=", "torch", ".", "from_numpy", "(", "testy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.relatedness.RelatednessPytorch.run": [[70, 102], ["numpy.arange", "relatedness.RelatednessPytorch.prepare_data", "numpy.dot", "relatedness.RelatednessPytorch.trainepoch", "numpy.dot", "relatedness.RelatednessPytorch.predict_proba", "relatedness.RelatednessPytorch.predict_proba", "scipy.stats.pearsonr", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.relatedness.RelatednessPytorch.prepare_data", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.predict_proba", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.predict_proba"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestpr", "=", "-", "1", "\n", "early_stop_count", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "1", ",", "6", ")", "\n", "stop_train", "=", "False", "\n", "\n", "# Preparing data", "\n", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", "=", "self", ".", "prepare_data", "(", "\n", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ",", "\n", "self", ".", "valid", "[", "'X'", "]", ",", "self", ".", "valid", "[", "'y'", "]", ",", "\n", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "maxepoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainy", ",", "nepoches", "=", "50", ")", "\n", "yhat", "=", "np", ".", "dot", "(", "self", ".", "predict_proba", "(", "devX", ")", ",", "r", ")", "\n", "pr", "=", "pearsonr", "(", "yhat", ",", "self", ".", "devscores", ")", "[", "0", "]", "\n", "pr", "=", "0", "if", "pr", "!=", "pr", "else", "pr", "# if NaN bc std=0", "\n", "# early stop on Pearson", "\n", "if", "pr", ">", "bestpr", ":", "\n", "                ", "bestpr", "=", "pr", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "self", ".", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "3", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "\n", "yhat", "=", "np", ".", "dot", "(", "self", ".", "predict_proba", "(", "testX", ")", ",", "r", ")", "\n", "\n", "return", "bestpr", ",", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.relatedness.RelatednessPytorch.trainepoch": [[103, 123], ["relatedness.RelatednessPytorch.model.train", "range", "numpy.random.permutation", "range", "len", "len", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "relatedness.RelatednessPytorch.model", "relatedness.RelatednessPytorch.loss_fn", "all_costs.append", "relatedness.RelatednessPytorch.optimizer.zero_grad", "relatedness.RelatednessPytorch.backward", "relatedness.RelatednessPytorch.optimizer.step", "relatedness.RelatednessPytorch.item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "trainepoch", "(", "self", ",", "X", ",", "y", ",", "nepoches", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "nepoches", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "torch", ".", "from_numpy", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "Xbatch", "=", "X", "[", "idx", "]", "\n", "ybatch", "=", "y", "[", "idx", "]", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "nepoches", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.relatedness.RelatednessPytorch.predict_proba": [[124, 135], ["relatedness.RelatednessPytorch.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "len", "relatedness.RelatednessPytorch.model().data.cpu().numpy", "numpy.concatenate", "relatedness.RelatednessPytorch.model().data.cpu", "relatedness.RelatednessPytorch.model().data.cpu().numpy", "relatedness.RelatednessPytorch.model().data.cpu", "relatedness.RelatednessPytorch.model", "relatedness.RelatednessPytorch.model"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.eval"], ["", "def", "predict_proba", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "probas", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "if", "len", "(", "probas", ")", "==", "0", ":", "\n", "                    ", "probas", "=", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "probas", "=", "np", ".", "concatenate", "(", "(", "probas", ",", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "probas", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.InnerKFoldClassifier.__init__": [[43, 56], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "config", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "featdim", "=", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "devresults", "=", "[", "]", "\n", "self", ".", "testresults", "=", "[", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "\n", "self", ".", "k", "=", "5", "if", "'kfold'", "not", "in", "config", "else", "config", "[", "'kfold'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.InnerKFoldClassifier.run": [[57, 108], ["logging.info", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "round", "round", "logging.info", "validation.InnerKFoldClassifier.devresults.append", "validation.InnerKFoldClassifier.testresults.append", "numpy.mean", "numpy.mean", "sklearn.model_selection.StratifiedKFold.split", "scores.append", "numpy.max", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "range", "range", "regscores.append", "round", "numpy.argmax", "numpy.max", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.score", "sklearn.linear_model.LogisticRegression.score", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with (inner) {1}-fold cross-validation'", "\n", ".", "format", "(", "self", ".", "modelname", ",", "self", ".", "k", ")", ")", "\n", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "2", ",", "4", ",", "1", ")", "]", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "random_state", "=", "1111", ")", "\n", "innerskf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "\n", "random_state", "=", "1111", ")", "\n", "count", "=", "0", "\n", "for", "train_idx", ",", "test_idx", "in", "skf", ".", "split", "(", "self", ".", "X", ",", "self", ".", "y", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "X_train", ",", "X_test", "=", "self", ".", "X", "[", "train_idx", "]", ",", "self", ".", "X", "[", "test_idx", "]", "\n", "y_train", ",", "y_test", "=", "self", ".", "y", "[", "train_idx", "]", ",", "self", ".", "y", "[", "test_idx", "]", "\n", "scores", "=", "[", "]", "\n", "for", "reg", "in", "regs", ":", "\n", "                ", "regscores", "=", "[", "]", "\n", "for", "inner_train_idx", ",", "inner_test_idx", "in", "innerskf", ".", "split", "(", "X_train", ",", "y_train", ")", ":", "\n", "                    ", "X_in_train", ",", "X_in_test", "=", "X_train", "[", "inner_train_idx", "]", ",", "X_train", "[", "inner_test_idx", "]", "\n", "y_in_train", ",", "y_in_test", "=", "y_train", "[", "inner_train_idx", "]", ",", "y_train", "[", "inner_test_idx", "]", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                        ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_in_train", ",", "y_in_train", ",", "\n", "validation_data", "=", "(", "X_in_test", ",", "y_in_test", ")", ")", "\n", "", "else", ":", "\n", "                        ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_in_train", ",", "y_in_train", ")", "\n", "", "regscores", ".", "append", "(", "clf", ".", "score", "(", "X_in_test", ",", "y_in_test", ")", ")", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "np", ".", "mean", "(", "regscores", ")", ",", "2", ")", ")", "\n", "", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "logging", ".", "info", "(", "'Best param found at split {0}: l2reg = {1} \\\n                with score {2}'", ".", "format", "(", "count", ",", "optreg", ",", "np", ".", "max", "(", "scores", ")", ")", ")", "\n", "self", ".", "devresults", ".", "append", "(", "np", ".", "max", "(", "scores", ")", ")", "\n", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ",", "validation_split", "=", "0.05", ")", "\n", "", "else", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "", "self", ".", "testresults", ".", "append", "(", "round", "(", "100", "*", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", ",", "2", ")", ")", "\n", "\n", "", "devaccuracy", "=", "round", "(", "np", ".", "mean", "(", "self", ".", "devresults", ")", ",", "2", ")", "\n", "testaccuracy", "=", "round", "(", "np", ".", "mean", "(", "self", ".", "testresults", ")", ",", "2", ")", "\n", "return", "devaccuracy", ",", "testaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.KFoldClassifier.__init__": [[114, 125], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "train", ",", "test", ",", "config", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "featdim", "=", "self", ".", "train", "[", "'X'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "\n", "self", ".", "k", "=", "5", "if", "'kfold'", "not", "in", "config", "else", "config", "[", "'kfold'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.KFoldClassifier.run": [[126, 182], ["logging.info", "sklearn.model_selection.StratifiedKFold", "logging.info", "numpy.max", "logging.info", "logging.info", "sklearn.linear_model.LogisticRegression.predict", "sklearn.linear_model.LogisticRegression.score", "round", "sklearn.model_selection.StratifiedKFold.split", "scores.append", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.score", "scanscores.append", "round", "numpy.argmax", "range", "range", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "range", "numpy.mean", "str", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.predict", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit"], ["", "def", "run", "(", "self", ")", ":", "\n", "# cross-validation", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with {1}-fold cross-validation'", "\n", ".", "format", "(", "self", ".", "modelname", ",", "self", ".", "k", ")", ")", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "1", ",", "6", ",", "1", ")", "]", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "reg", "in", "regs", ":", "\n", "            ", "scanscores", "=", "[", "]", "\n", "for", "train_idx", ",", "test_idx", "in", "skf", ".", "split", "(", "self", ".", "train", "[", "'X'", "]", ",", "\n", "self", ".", "train", "[", "'y'", "]", ")", ":", "\n", "# Split data", "\n", "                ", "X_train", ",", "y_train", "=", "self", ".", "train", "[", "'X'", "]", "[", "train_idx", "]", ",", "self", ".", "train", "[", "'y'", "]", "[", "train_idx", "]", "\n", "\n", "X_test", ",", "y_test", "=", "self", ".", "train", "[", "'X'", "]", "[", "test_idx", "]", ",", "self", ".", "train", "[", "'y'", "]", "[", "test_idx", "]", "\n", "\n", "# Train classifier", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                    ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ",", "validation_data", "=", "(", "X_test", ",", "y_test", ")", ")", "\n", "", "else", ":", "\n", "                    ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "", "score", "=", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", "\n", "scanscores", ".", "append", "(", "score", ")", "\n", "# Append mean score", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "np", ".", "mean", "(", "scanscores", ")", ",", "2", ")", ")", "\n", "\n", "# evaluation", "\n", "", "logging", ".", "info", "(", "[", "(", "'reg:'", "+", "str", "(", "regs", "[", "idx", "]", ")", ",", "scores", "[", "idx", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "scores", ")", ")", "]", ")", "\n", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "devaccuracy", "=", "np", ".", "max", "(", "scores", ")", "\n", "logging", ".", "info", "(", "'Cross-validation : best param found is reg = {0} \\\n            with score {1}'", ".", "format", "(", "optreg", ",", "devaccuracy", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'Evaluating...'", ")", "\n", "if", "self", ".", "usepytorch", ":", "\n", "            ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ",", "validation_split", "=", "0.05", ")", "\n", "", "else", ":", "\n", "            ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ")", "\n", "", "yhat", "=", "clf", ".", "predict", "(", "self", ".", "test", "[", "'X'", "]", ")", "\n", "\n", "testaccuracy", "=", "clf", ".", "score", "(", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", "\n", "testaccuracy", "=", "round", "(", "100", "*", "testaccuracy", ",", "2", ")", "\n", "\n", "return", "devaccuracy", ",", "testaccuracy", ",", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.__init__": [[188, 201], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "config", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "featdim", "=", "self", ".", "X", "[", "'train'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "cudaEfficient", "=", "False", "if", "'cudaEfficient'", "not", "in", "config", "else", "config", "[", "'cudaEfficient'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "self", ".", "noreg", "=", "False", "if", "'noreg'", "not", "in", "config", "else", "config", "[", "'noreg'", "]", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run": [[202, 247], ["logging.info", "logging.info", "numpy.max", "logging.info", "sklearn.linear_model.LogisticRegression", "logging.info", "sklearn.linear_model.LogisticRegression.score", "round", "scores.append", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "senteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "numpy.argmax", "range", "range", "range", "sklearn.linear_model.LogisticRegression.score", "str", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with standard validation..'", "\n", ".", "format", "(", "self", ".", "modelname", ")", ")", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "2", ",", "4", ",", "1", ")", "]", "\n", "if", "self", ".", "noreg", ":", "\n", "            ", "regs", "=", "[", "1e-9", "if", "self", ".", "usepytorch", "else", "1e9", "]", "\n", "", "scores", "=", "[", "]", "\n", "for", "reg", "in", "regs", ":", "\n", "            ", "if", "self", ".", "usepytorch", ":", "\n", "                ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ")", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "clf", ".", "score", "(", "self", ".", "X", "[", "'valid'", "]", ",", "\n", "self", ".", "y", "[", "'valid'", "]", ")", ",", "2", ")", ")", "\n", "", "logging", ".", "info", "(", "[", "(", "'reg:'", "+", "str", "(", "regs", "[", "idx", "]", ")", ",", "scores", "[", "idx", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "scores", ")", ")", "]", ")", "\n", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "devaccuracy", "=", "np", ".", "max", "(", "scores", ")", "\n", "logging", ".", "info", "(", "'Validation : best param found is reg = {0} with score \\\n            {1}'", ".", "format", "(", "optreg", ",", "devaccuracy", ")", ")", "\n", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'Evaluating...'", ")", "\n", "if", "self", ".", "usepytorch", ":", "\n", "            ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ")", "\n", "\n", "", "testaccuracy", "=", "clf", ".", "score", "(", "self", ".", "X", "[", "'test'", "]", ",", "self", ".", "y", "[", "'test'", "]", ")", "\n", "testaccuracy", "=", "round", "(", "100", "*", "testaccuracy", ",", "2", ")", "\n", "return", "devaccuracy", ",", "testaccuracy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.get_classif_name": [[28, 37], ["None"], "function", ["None"], ["def", "get_classif_name", "(", "classifier_config", ",", "usepytorch", ")", ":", "\n", "    ", "if", "not", "usepytorch", ":", "\n", "        ", "modelname", "=", "'sklearn-LogReg'", "\n", "", "else", ":", "\n", "        ", "nhid", "=", "classifier_config", "[", "'nhid'", "]", "\n", "optim", "=", "'adam'", "if", "'optim'", "not", "in", "classifier_config", "else", "classifier_config", "[", "'optim'", "]", "\n", "bs", "=", "64", "if", "'batch_size'", "not", "in", "classifier_config", "else", "classifier_config", "[", "'batch_size'", "]", "\n", "modelname", "=", "'pytorch-MLP-nhid%s-%s-bs%s'", "%", "(", "nhid", ",", "optim", ",", "bs", ")", "\n", "", "return", "modelname", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.__init__": [[25, 37], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "seed", "=", "1111", ",", "\n", "cudaEfficient", "=", "False", ")", ":", "\n", "# fix seed", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "self", ".", "inputdim", "=", "inputdim", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "l2reg", "=", "l2reg", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "cudaEfficient", "=", "cudaEfficient", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.prepare_split": [[38, 59], ["torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.random.permutation", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "int", "len", "len"], "methods", ["None"], ["", "def", "prepare_split", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ")", ":", "\n", "# Preparing validation data", "\n", "        ", "assert", "validation_split", "or", "validation_data", "\n", "if", "validation_data", "is", "not", "None", ":", "\n", "            ", "trainX", ",", "trainy", "=", "X", ",", "y", "\n", "devX", ",", "devy", "=", "validation_data", "\n", "", "else", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "trainidx", "=", "permutation", "[", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", ":", "]", "\n", "devidx", "=", "permutation", "[", "0", ":", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", "]", "\n", "trainX", ",", "trainy", "=", "X", "[", "trainidx", "]", ",", "y", "[", "trainidx", "]", "\n", "devX", ",", "devy", "=", "X", "[", "devidx", "]", ",", "y", "[", "devidx", "]", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "self", ".", "cudaEfficient", "else", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "trainX", "=", "torch", ".", "from_numpy", "(", "trainX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "trainy", "=", "torch", ".", "from_numpy", "(", "trainy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "devX", "=", "torch", ".", "from_numpy", "(", "devX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "devy", "=", "torch", ".", "from_numpy", "(", "devy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "trainX", ",", "trainy", ",", "devX", ",", "devy", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.fit": [[60, 84], ["classifier.PyTorchClassifier.prepare_split", "classifier.PyTorchClassifier.trainepoch", "classifier.PyTorchClassifier.score", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.prepare_split", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ",", "\n", "early_stop", "=", "True", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestaccuracy", "=", "-", "1", "\n", "stop_train", "=", "False", "\n", "early_stop_count", "=", "0", "\n", "\n", "# Preparing validation data", "\n", "trainX", ",", "trainy", ",", "devX", ",", "devy", "=", "self", ".", "prepare_split", "(", "X", ",", "y", ",", "validation_data", ",", "\n", "validation_split", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "max_epoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainy", ",", "epoch_size", "=", "self", ".", "epoch_size", ")", "\n", "accuracy", "=", "self", ".", "score", "(", "devX", ",", "devy", ")", "\n", "if", "accuracy", ">", "bestaccuracy", ":", "\n", "                ", "bestaccuracy", "=", "accuracy", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "self", ".", "tenacity", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "return", "bestaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.trainepoch": [[85, 110], ["classifier.PyTorchClassifier.model.train", "range", "numpy.random.permutation", "range", "len", "len", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "classifier.PyTorchClassifier.model", "classifier.PyTorchClassifier.loss_fn", "all_costs.append", "classifier.PyTorchClassifier.optimizer.zero_grad", "classifier.PyTorchClassifier.backward", "classifier.PyTorchClassifier.optimizer.step", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "classifier.PyTorchClassifier.data.item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "trainepoch", "(", "self", ",", "X", ",", "y", ",", "epoch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "epoch_size", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "torch", ".", "from_numpy", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ".", "long", "(", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "\n", "Xbatch", "=", "X", "[", "idx", "]", "\n", "ybatch", "=", "y", "[", "idx", "]", "\n", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.score": [[111, 129], ["classifier.PyTorchClassifier.model.eval", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "isinstance", "len", "classifier.PyTorchClassifier.model", "pred.long().eq().sum().item", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "classifier.PyTorchClassifier.data.max", "pred.long().eq().sum", "pred.long().eq", "ybatch.cuda.cuda.data.long", "pred.long"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.eval"], ["", "def", "score", "(", "self", ",", "devX", ",", "devy", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "or", "self", ".", "cudaEfficient", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "devy", "=", "torch", ".", "LongTensor", "(", "devy", ")", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "ybatch", "=", "devy", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "long", "(", ")", ".", "eq", "(", "ybatch", ".", "data", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "accuracy", "=", "1.0", "*", "correct", "/", "len", "(", "devX", ")", "\n", "", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.predict": [[130, 143], ["classifier.PyTorchClassifier.model.eval", "numpy.array", "numpy.vstack", "isinstance", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "classifier.PyTorchClassifier.model", "numpy.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].cpu().numpy", "[].cpu", "classifier.PyTorchClassifier.data.max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.eval"], ["", "def", "predict", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "", "yhat", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "yhat", "=", "np", ".", "append", "(", "yhat", ",", "\n", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "yhat", "=", "np", ".", "vstack", "(", "yhat", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.PyTorchClassifier.predict_proba": [[144, 156], ["classifier.PyTorchClassifier.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "torch.softmax", "torch.softmax", "classifier.PyTorchClassifier.model().data.cpu().numpy", "numpy.concatenate", "classifier.PyTorchClassifier.model().data.cpu", "classifier.PyTorchClassifier.model"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.engine.SE.eval"], ["", "def", "predict_proba", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "probas", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "vals", "=", "F", ".", "softmax", "(", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "not", "probas", ":", "\n", "                    ", "probas", "=", "vals", "\n", "", "else", ":", "\n", "                    ", "probas", "=", "np", ".", "concatenate", "(", "probas", ",", "vals", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "probas", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__": [[163, 203], ["classifier.PyTorchClassifier.__init__", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "senteval.utils.get_optimizer", "optim_fn", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "classifier.MLP.model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.classifier.MLP.__init__", "home.repos.pwc.inspect_result.facebookresearch_SentEval.senteval.utils.get_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "\n", "seed", "=", "1111", ",", "cudaEfficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "inputdim", ",", "nclasses", ",", "l2reg", ",", "\n", "batch_size", ",", "seed", ",", "cudaEfficient", ")", "\n", "\"\"\"\n        PARAMETERS:\n        -nhid:       number of hidden units (0: Logistic Regression)\n        -optim:      optimizer (\"sgd,lr=0.1\", \"adam\", \"rmsprop\" ..)\n        -tenacity:   how many times dev acc does not increase before stopping\n        -epoch_size: each epoch corresponds to epoch_size pass on the train set\n        -max_epoch:  max number of epoches\n        -dropout:    dropout for MLP\n        \"\"\"", "\n", "\n", "self", ".", "nhid", "=", "0", "if", "\"nhid\"", "not", "in", "params", "else", "params", "[", "\"nhid\"", "]", "\n", "self", ".", "optim", "=", "\"adam\"", "if", "\"optim\"", "not", "in", "params", "else", "params", "[", "\"optim\"", "]", "\n", "self", ".", "tenacity", "=", "5", "if", "\"tenacity\"", "not", "in", "params", "else", "params", "[", "\"tenacity\"", "]", "\n", "self", ".", "epoch_size", "=", "4", "if", "\"epoch_size\"", "not", "in", "params", "else", "params", "[", "\"epoch_size\"", "]", "\n", "self", ".", "max_epoch", "=", "200", "if", "\"max_epoch\"", "not", "in", "params", "else", "params", "[", "\"max_epoch\"", "]", "\n", "self", ".", "dropout", "=", "0.", "if", "\"dropout\"", "not", "in", "params", "else", "params", "[", "\"dropout\"", "]", "\n", "self", ".", "batch_size", "=", "64", "if", "\"batch_size\"", "not", "in", "params", "else", "params", "[", "\"batch_size\"", "]", "\n", "\n", "if", "params", "[", "\"nhid\"", "]", "==", "0", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "params", "[", "\"nhid\"", "]", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", "[", "\"nhid\"", "]", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "\n", "optim_fn", ",", "optim_params", "=", "utils", ".", "get_optimizer", "(", "self", ".", "optim", ")", "\n", "self", ".", "optimizer", "=", "optim_fn", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "**", "optim_params", ")", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'weight_decay'", "]", "=", "self", ".", "l2reg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.gensen.prepare": [[29, 31], ["None"], "function", ["None"], ["def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.gensen.batcher": [[32, 39], ["gensen.get_representation"], "function", ["None"], ["", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "    ", "batch", "=", "[", "' '", ".", "join", "(", "sent", ")", "if", "sent", "!=", "[", "]", "else", "'.'", "for", "sent", "in", "batch", "]", "\n", "_", ",", "reps_h_t", "=", "gensen", ".", "get_representation", "(", "\n", "sentences", ",", "pool", "=", "'last'", ",", "return_numpy", "=", "True", ",", "tokenize", "=", "True", "\n", ")", "\n", "embeddings", "=", "reps_h_t", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.infersent.prepare": [[37, 39], ["params.infersent.build_vocab"], "function", ["None"], ["def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "    ", "params", ".", "infersent", ".", "build_vocab", "(", "[", "' '", ".", "join", "(", "s", ")", "for", "s", "in", "samples", "]", ",", "tokenize", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.infersent.batcher": [[41, 45], ["params.infersent.encode"], "function", ["None"], ["", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "    ", "sentences", "=", "[", "' '", ".", "join", "(", "s", ")", "for", "s", "in", "batch", "]", "\n", "embeddings", "=", "params", ".", "infersent", ".", "encode", "(", "sentences", ",", "bsize", "=", "params", ".", "batch_size", ",", "tokenize", "=", "False", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.skipthought.prepare": [[32, 34], ["None"], "function", ["None"], ["def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.skipthought.batcher": [[35, 40], ["skipthoughts.encode", "str"], "function", ["None"], ["", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "    ", "batch", "=", "[", "str", "(", "' '", ".", "join", "(", "sent", ")", ",", "errors", "=", "\"ignore\"", ")", "if", "sent", "!=", "[", "]", "else", "'.'", "for", "sent", "in", "batch", "]", "\n", "embeddings", "=", "skipthoughts", ".", "encode", "(", "params", "[", "'encoder'", "]", ",", "batch", ",", "\n", "verbose", "=", "False", ",", "use_eos", "=", "True", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.bow.create_dictionary": [[28, 52], ["sorted", "enumerate", "words.items", "id2word.append", "words.get"], "function", ["None"], ["def", "create_dictionary", "(", "sentences", ",", "threshold", "=", "0", ")", ":", "\n", "    ", "words", "=", "{", "}", "\n", "for", "s", "in", "sentences", ":", "\n", "        ", "for", "word", "in", "s", ":", "\n", "            ", "words", "[", "word", "]", "=", "words", ".", "get", "(", "word", ",", "0", ")", "+", "1", "\n", "\n", "", "", "if", "threshold", ">", "0", ":", "\n", "        ", "newwords", "=", "{", "}", "\n", "for", "word", "in", "words", ":", "\n", "            ", "if", "words", "[", "word", "]", ">=", "threshold", ":", "\n", "                ", "newwords", "[", "word", "]", "=", "words", "[", "word", "]", "\n", "", "", "words", "=", "newwords", "\n", "", "words", "[", "'<s>'", "]", "=", "1e9", "+", "4", "\n", "words", "[", "'</s>'", "]", "=", "1e9", "+", "3", "\n", "words", "[", "'<p>'", "]", "=", "1e9", "+", "2", "\n", "\n", "sorted_words", "=", "sorted", "(", "words", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "# inverse sort", "\n", "id2word", "=", "[", "]", "\n", "word2id", "=", "{", "}", "\n", "for", "i", ",", "(", "w", ",", "_", ")", "in", "enumerate", "(", "sorted_words", ")", ":", "\n", "        ", "id2word", ".", "append", "(", "w", ")", "\n", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "", "return", "id2word", ",", "word2id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.bow.get_wordvec": [[54, 67], ["logging.info", "io.open", "line.split", "len", "len", "numpy.fromstring"], "function", ["None"], ["", "def", "get_wordvec", "(", "path_to_vec", ",", "word2id", ")", ":", "\n", "    ", "word_vec", "=", "{", "}", "\n", "\n", "with", "io", ".", "open", "(", "path_to_vec", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "# if word2vec or fasttext file : skip first line \"next(f)\"", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "word", ",", "vec", "=", "line", ".", "split", "(", "' '", ",", "1", ")", "\n", "if", "word", "in", "word2id", ":", "\n", "                ", "word_vec", "[", "word", "]", "=", "np", ".", "fromstring", "(", "vec", ",", "sep", "=", "' '", ")", "\n", "\n", "", "", "", "logging", ".", "info", "(", "'Found {0} words with word vectors, out of \\\n        {1} words'", ".", "format", "(", "len", "(", "word_vec", ")", ",", "len", "(", "word2id", ")", ")", ")", "\n", "return", "word_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.bow.prepare": [[70, 75], ["bow.create_dictionary", "bow.get_wordvec"], "function", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.bow.create_dictionary", "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.bow.get_wordvec"], ["", "def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "    ", "_", ",", "params", ".", "word2id", "=", "create_dictionary", "(", "samples", ")", "\n", "params", ".", "word_vec", "=", "get_wordvec", "(", "PATH_TO_VEC", ",", "params", ".", "word2id", ")", "\n", "params", ".", "wvec_dim", "=", "300", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.bow.batcher": [[76, 93], ["numpy.vstack", "numpy.mean", "np.vstack.append", "numpy.zeros", "np.mean.append", "np.mean.append"], "function", ["None"], ["", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "    ", "batch", "=", "[", "sent", "if", "sent", "!=", "[", "]", "else", "[", "'.'", "]", "for", "sent", "in", "batch", "]", "\n", "embeddings", "=", "[", "]", "\n", "\n", "for", "sent", "in", "batch", ":", "\n", "        ", "sentvec", "=", "[", "]", "\n", "for", "word", "in", "sent", ":", "\n", "            ", "if", "word", "in", "params", ".", "word_vec", ":", "\n", "                ", "sentvec", ".", "append", "(", "params", ".", "word_vec", "[", "word", "]", ")", "\n", "", "", "if", "not", "sentvec", ":", "\n", "            ", "vec", "=", "np", ".", "zeros", "(", "params", ".", "wvec_dim", ")", "\n", "sentvec", ".", "append", "(", "vec", ")", "\n", "", "sentvec", "=", "np", ".", "mean", "(", "sentvec", ",", "0", ")", "\n", "embeddings", ".", "append", "(", "sentvec", ")", "\n", "\n", "", "embeddings", "=", "np", ".", "vstack", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.prepare": [[30, 32], ["None"], "function", ["None"], ["def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.batcher": [[33, 37], ["None"], "function", ["None"], ["", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "    ", "batch", "=", "[", "' '", ".", "join", "(", "sent", ")", "if", "sent", "!=", "[", "]", "else", "'.'", "for", "sent", "in", "batch", "]", "\n", "embeddings", "=", "params", "[", "'google_use'", "]", "(", "batch", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_SentEval.examples.googleuse.make_embed_fn": [[38, 45], ["tensorflow.Graph().as_default", "tensorflow.placeholder", "tensorflow_hub.Module", "hub.Module.", "tensorflow.train.MonitoredSession", "tf.train.MonitoredSession.run", "tensorflow.Graph"], "function", ["home.repos.pwc.inspect_result.facebookresearch_SentEval.tools.validation.SplitClassifier.run"], ["", "def", "make_embed_fn", "(", "module", ")", ":", "\n", "  ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "    ", "sentences", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ")", "\n", "embed", "=", "hub", ".", "Module", "(", "module", ")", "\n", "embeddings", "=", "embed", "(", "sentences", ")", "\n", "session", "=", "tf", ".", "train", ".", "MonitoredSession", "(", ")", "\n", "", "return", "lambda", "x", ":", "session", ".", "run", "(", "embeddings", ",", "{", "sentences", ":", "x", "}", ")", "\n", "\n"]]}