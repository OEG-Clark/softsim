{"home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.normalize_answer": [[12, 28], ["evaluate.normalize_answer.white_space_fix"], "function", ["None"], ["def", "normalize_answer", "(", "s", ")", ":", "\n", "    ", "\"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"", "\n", "def", "remove_articles", "(", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'\\b(a|an|the)\\b'", ",", "' '", ",", "text", ")", "\n", "\n", "", "def", "white_space_fix", "(", "text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "\n", "", "def", "remove_punc", "(", "text", ")", ":", "\n", "        ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "\n", "", "def", "lower", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "\n", "", "return", "white_space_fix", "(", "remove_articles", "(", "remove_punc", "(", "lower", "(", "s", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.f1_score": [[30, 41], ["normalize_answer().split", "normalize_answer().split", "sum", "collections.Counter", "collections.Counter", "common.values", "len", "len", "evaluate.normalize_answer", "evaluate.normalize_answer"], "function", ["home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.normalize_answer", "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.normalize_answer"], ["", "def", "f1_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "prediction_tokens", "=", "normalize_answer", "(", "prediction", ")", ".", "split", "(", ")", "\n", "ground_truth_tokens", "=", "normalize_answer", "(", "ground_truth", ")", ".", "split", "(", ")", "\n", "common", "=", "Counter", "(", "prediction_tokens", ")", "&", "Counter", "(", "ground_truth_tokens", ")", "\n", "num_same", "=", "sum", "(", "common", ".", "values", "(", ")", ")", "\n", "if", "num_same", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "precision", "=", "1.0", "*", "num_same", "/", "len", "(", "prediction_tokens", ")", "\n", "recall", "=", "1.0", "*", "num_same", "/", "len", "(", "ground_truth_tokens", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.exact_match_score": [[43, 45], ["evaluate.normalize_answer", "evaluate.normalize_answer"], "function", ["home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.normalize_answer", "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.normalize_answer"], ["", "def", "exact_match_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "return", "(", "normalize_answer", "(", "prediction", ")", "==", "normalize_answer", "(", "ground_truth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.metric_max_over_ground_truths": [[47, 53], ["max", "scores_for_ground_truths.append", "evaluate.exact_match_score", "evaluate.f1_score"], "function", ["home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.exact_match_score", "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.f1_score"], ["", "def", "metric_max_over_ground_truths", "(", "metric_fn", ",", "prediction", ",", "ground_truths", ")", ":", "\n", "    ", "scores_for_ground_truths", "=", "[", "]", "\n", "for", "ground_truth", "in", "ground_truths", ":", "\n", "        ", "score", "=", "metric_fn", "(", "prediction", ",", "ground_truth", ")", "\n", "scores_for_ground_truths", ".", "append", "(", "score", ")", "\n", "", "return", "max", "(", "scores_for_ground_truths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.evaluate": [[55, 76], ["evaluate.metric_max_over_ground_truths", "evaluate.metric_max_over_ground_truths", "print", "len"], "function", ["home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.metric_max_over_ground_truths", "home.repos.pwc.inspect_result.duorc_duorc.None.evaluate.metric_max_over_ground_truths"], ["", "def", "evaluate", "(", "dataset", ",", "predictions", ")", ":", "\n", "    ", "f1", "=", "exact_match", "=", "total", "=", "0", "\n", "for", "dp", "in", "dataset", ":", "\n", "        ", "for", "qa", "in", "dp", "[", "'qa'", "]", ":", "\n", "            ", "total", "+=", "1", "\n", "if", "qa", "[", "'id'", "]", "not", "in", "predictions", ":", "\n", "                ", "message", "=", "'Question id '", "+", "qa", "[", "'id'", "]", "+", "' not present. Will receive score 0.'", "\n", "print", "(", "message", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "continue", "\n", "", "ground_truths", "=", "[", "'NA'", "]", "if", "len", "(", "qa", "[", "'answers'", "]", ")", "==", "0", "else", "qa", "[", "'answers'", "]", "\n", "prediction", "=", "predictions", "[", "qa", "[", "'id'", "]", "]", "\n", "exact_match", "+=", "metric_max_over_ground_truths", "(", "\n", "exact_match_score", ",", "prediction", ",", "ground_truths", ")", "\n", "f1", "+=", "metric_max_over_ground_truths", "(", "\n", "f1_score", ",", "prediction", ",", "ground_truths", ")", "\n", "\n", "", "", "exact_match", "=", "100.0", "*", "exact_match", "/", "total", "\n", "f1", "=", "100.0", "*", "f1", "/", "total", "\n", "\n", "return", "{", "'exact_match'", ":", "exact_match", ",", "'f1'", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.duorc_duorc.utils.nltk_ner.extract_entity_names": [[3, 16], ["nltk.sent_tokenize", "nltk.ne_chunk_sents", "nltk.word_tokenize", "nltk.pos_tag", "hasattr", "t.label", "entity_names.append", "entity_names.extend", "nltk_ner.extract_entity_names"], "function", ["home.repos.pwc.inspect_result.duorc_duorc.utils.nltk_ner.extract_entity_names"], ["def", "extract_entity_names", "(", "t", ")", ":", "\n", "    ", "sentences", "=", "nltk", ".", "sent_tokenize", "(", "t", ")", "\n", "tokenized_sentences", "=", "[", "nltk", ".", "word_tokenize", "(", "sentence", ")", "for", "sentence", "in", "sentences", "]", "\n", "tagged_sentences", "=", "[", "nltk", ".", "pos_tag", "(", "sentence", ")", "for", "sentence", "in", "tokenized_sentences", "]", "\n", "chunked_sentences", "=", "nltk", ".", "ne_chunk_sents", "(", "tagged_sentences", ",", "binary", "=", "True", ")", "\n", "entity_names", "=", "[", "]", "\n", "if", "hasattr", "(", "t", ",", "'label'", ")", "and", "t", ".", "label", ":", "\n", "        ", "if", "t", ".", "label", "(", ")", "==", "'NE'", ":", "\n", "            ", "entity_names", ".", "append", "(", "' '", ".", "join", "(", "[", "child", "[", "0", "]", "for", "child", "in", "t", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "child", "in", "t", ":", "\n", "                ", "entity_names", ".", "extend", "(", "extract_entity_names", "(", "child", ")", ")", "\n", "", "", "", "return", "entity_names", "\n", ""]], "home.repos.pwc.inspect_result.duorc_duorc.utils.words2number.text2int": [[3, 35], ["textnum.replace.replace", "textnum.replace.replace", "textnum.replace.split", "enumerate", "enumerate", "enumerate", "Exception"], "function", ["None"], ["def", "text2int", "(", "textnum", ",", "numwords", "=", "{", "}", ")", ":", "\n", "    ", "textnum", "=", "textnum", ".", "replace", "(", "','", ",", "''", ")", "\n", "textnum", "=", "textnum", ".", "replace", "(", "'-'", ",", "' '", ")", "\n", "\n", "if", "not", "numwords", ":", "\n", "      ", "units", "=", "[", "\n", "\"zero\"", ",", "\"one\"", ",", "\"two\"", ",", "\"three\"", ",", "\"four\"", ",", "\"five\"", ",", "\"six\"", ",", "\"seven\"", ",", "\"eight\"", ",", "\n", "\"nine\"", ",", "\"ten\"", ",", "\"eleven\"", ",", "\"twelve\"", ",", "\"thirteen\"", ",", "\"fourteen\"", ",", "\"fifteen\"", ",", "\n", "\"sixteen\"", ",", "\"seventeen\"", ",", "\"eighteen\"", ",", "\"nineteen\"", ",", "\n", "]", "\n", "\n", "tens", "=", "[", "\"\"", ",", "\"\"", ",", "\"twenty\"", ",", "\"thirty\"", ",", "\"forty\"", ",", "\"fifty\"", ",", "\"sixty\"", ",", "\"seventy\"", ",", "\"eighty\"", ",", "\"ninety\"", "]", "\n", "\n", "scales", "=", "[", "\"hundred\"", ",", "\"thousand\"", ",", "\"million\"", ",", "\"billion\"", ",", "\"trillion\"", "]", "\n", "\n", "numwords", "[", "\"and\"", "]", "=", "(", "1", ",", "0", ")", "\n", "for", "idx", ",", "word", "in", "enumerate", "(", "units", ")", ":", "numwords", "[", "word", "]", "=", "(", "1", ",", "idx", ")", "\n", "for", "idx", ",", "word", "in", "enumerate", "(", "tens", ")", ":", "numwords", "[", "word", "]", "=", "(", "1", ",", "idx", "*", "10", ")", "\n", "for", "idx", ",", "word", "in", "enumerate", "(", "scales", ")", ":", "numwords", "[", "word", "]", "=", "(", "10", "**", "(", "idx", "*", "3", "or", "2", ")", ",", "0", ")", "\n", "\n", "", "current", "=", "result", "=", "0", "\n", "for", "word", "in", "textnum", ".", "split", "(", ")", ":", "\n", "        ", "if", "word", "not", "in", "numwords", ":", "\n", "          ", "raise", "Exception", "(", "\"Illegal word: \"", "+", "word", ")", "\n", "\n", "", "scale", ",", "increment", "=", "numwords", "[", "word", "]", "\n", "current", "=", "current", "*", "scale", "+", "increment", "\n", "if", "scale", ">", "100", ":", "\n", "            ", "result", "+=", "current", "\n", "current", "=", "0", "\n", "\n", "", "", "return", "result", "+", "current", "\n", ""]], "home.repos.pwc.inspect_result.duorc_duorc.utils.clean_utils.read_file_as_set": [[5, 12], ["set", "open", "line.strip.strip", "set.add"], "function", ["None"], ["def", "read_file_as_set", "(", "input_path", ")", ":", "\n", "  ", "s", "=", "set", "(", ")", "\n", "with", "open", "(", "input_path", ")", "as", "input_file", ":", "\n", "    ", "for", "line", "in", "input_file", ":", "\n", "      ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "s", ".", "add", "(", "line", ")", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.duorc_duorc.utils.clean_utils.read_file_as_dict": [[13, 20], ["open", "csv.DictReader", "int"], "function", ["None"], ["", "def", "read_file_as_dict", "(", "input_path", ")", ":", "\n", "  ", "d", "=", "{", "}", "\n", "with", "open", "(", "input_path", ")", "as", "input_file", ":", "\n", "    ", "reader", "=", "csv", ".", "DictReader", "(", "input_file", ",", "delimiter", "=", "'\\t'", ",", "fieldnames", "=", "[", "'col1'", ",", "'col2'", "]", ")", "\n", "for", "row", "in", "reader", ":", "\n", "      ", "d", "[", "row", "[", "'col1'", "]", "]", "=", "int", "(", "row", "[", "'col2'", "]", ")", "\n", "", "", "return", "d", "", "", ""]]}