{"home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN.__init__": [[10, 24], ["super().__init__", "torch.ParameterList", "torch.ParameterList", "range", "models.Sp_GCN.w_list.append", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "utils.reset_param", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "utils.reset_param", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "num_layers", "=", "args", ".", "num_layers", "\n", "\n", "self", ".", "w_list", "=", "nn", ".", "ParameterList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "w_i", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "args", ".", "feats_per_node", ",", "args", ".", "layer_1_feats", ")", ")", "\n", "u", ".", "reset_param", "(", "w_i", ")", "\n", "", "else", ":", "\n", "                ", "w_i", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "args", ".", "layer_1_feats", ",", "args", ".", "layer_2_feats", ")", ")", "\n", "u", ".", "reset_param", "(", "w_i", ")", "\n", "", "self", ".", "w_list", ".", "append", "(", "w_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN.forward": [[26, 42], ["models.Sp_GCN.activation", "range", "Ahat.matmul", "models.Sp_GCN.activation", "node_feats.matmul", "Ahat.matmul", "models.Sp_GCN.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "A_list", ",", "Nodes_list", ",", "nodes_mask_list", ")", ":", "\n", "        ", "node_feats", "=", "Nodes_list", "[", "-", "1", "]", "\n", "#A_list: T, each element sparse tensor", "\n", "#take only last adj matrix in time", "\n", "Ahat", "=", "A_list", "[", "-", "1", "]", "\n", "#Ahat: NxN ~ 30k", "\n", "#sparse multiplication", "\n", "\n", "# Ahat NxN", "\n", "# self.node_embs = Nxk", "\n", "#", "\n", "# note(bwheatman, tfk): change order of matrix multiply", "\n", "last_l", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "node_feats", ".", "matmul", "(", "self", ".", "w_list", "[", "0", "]", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "last_l", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "last_l", ".", "matmul", "(", "self", ".", "w_list", "[", "i", "]", ")", ")", ")", "\n", "", "return", "last_l", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_Skip_GCN.__init__": [[45, 48], ["models.Sp_GCN.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "activation", ")", "\n", "self", ".", "W_feat", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "args", ".", "feats_per_node", ",", "args", ".", "layer_1_feats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_Skip_GCN.forward": [[49, 65], ["models.Sp_Skip_GCN.activation", "models.Sp_Skip_GCN.activation", "Ahat.matmul", "node_feats.matmul", "Ahat.matmul", "node_feats.matmul", "models.Sp_Skip_GCN.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "Nodes_list", "=", "None", ")", ":", "\n", "        ", "node_feats", "=", "Nodes_list", "[", "-", "1", "]", "\n", "#A_list: T, each element sparse tensor", "\n", "#take only last adj matrix in time", "\n", "Ahat", "=", "A_list", "[", "-", "1", "]", "\n", "#Ahat: NxN ~ 30k", "\n", "#sparse multiplication", "\n", "\n", "# Ahat NxN", "\n", "# self.node_feats = Nxk", "\n", "#", "\n", "# note(bwheatman, tfk): change order of matrix multiply", "\n", "l1", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "node_feats", ".", "matmul", "(", "self", ".", "W1", ")", ")", ")", "\n", "l2", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "l1", ".", "matmul", "(", "self", ".", "W2", ")", ")", "+", "(", "node_feats", ".", "matmul", "(", "self", ".", "W3", ")", ")", ")", "\n", "\n", "return", "l2", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_Skip_NodeFeats_GCN.__init__": [[67, 69], ["models.Sp_GCN.__init__"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_Skip_NodeFeats_GCN.forward": [[70, 78], ["models.Sp_Skip_NodeFeats_GCN.activation", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Ahat.matmul", "models.Sp_Skip_NodeFeats_GCN.activation", "node_feats.matmul", "Ahat.matmul", "models.Sp_Skip_NodeFeats_GCN.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "Nodes_list", "=", "None", ")", ":", "\n", "        ", "node_feats", "=", "Nodes_list", "[", "-", "1", "]", "\n", "Ahat", "=", "A_list", "[", "-", "1", "]", "\n", "last_l", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "node_feats", ".", "matmul", "(", "self", ".", "w_list", "[", "0", "]", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "last_l", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "last_l", ".", "matmul", "(", "self", ".", "w_list", "[", "i", "]", ")", ")", ")", "\n", "", "skip_last_l", "=", "torch", ".", "cat", "(", "(", "last_l", ",", "node_feats", ")", ",", "dim", "=", "1", ")", "# use node_feats.to_dense() if 2hot encoded input", "\n", "return", "skip_last_l", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN_LSTM_A.__init__": [[80, 86], ["models.Sp_GCN.__init__", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "activation", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "args", ".", "layer_2_feats", ",", "\n", "hidden_size", "=", "args", ".", "lstm_l2_feats", ",", "\n", "num_layers", "=", "args", ".", "lstm_l2_layers", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN_LSTM_A.forward": [[88, 103], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "models.Sp_GCN_LSTM_A.rnn", "models.Sp_GCN_LSTM_A.activation", "range", "torch.stack.append", "torch.stack.append", "Ahat.matmul", "models.Sp_GCN_LSTM_A.activation", "node_feats.matmul", "Ahat.matmul", "models.Sp_GCN_LSTM_A.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "Nodes_list", "=", "None", ",", "nodes_mask_list", "=", "None", ")", ":", "\n", "        ", "last_l_seq", "=", "[", "]", "\n", "for", "t", ",", "Ahat", "in", "enumerate", "(", "A_list", ")", ":", "\n", "            ", "node_feats", "=", "Nodes_list", "[", "t", "]", "\n", "#A_list: T, each element sparse tensor", "\n", "#note(bwheatman, tfk): change order of matrix multiply", "\n", "last_l", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "node_feats", ".", "matmul", "(", "self", ".", "w_list", "[", "0", "]", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "                ", "last_l", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "last_l", ".", "matmul", "(", "self", ".", "w_list", "[", "i", "]", ")", ")", ")", "\n", "", "last_l_seq", ".", "append", "(", "last_l", ")", "\n", "\n", "", "last_l_seq", "=", "torch", ".", "stack", "(", "last_l_seq", ")", "\n", "\n", "out", ",", "_", "=", "self", ".", "rnn", "(", "last_l_seq", ",", "None", ")", "\n", "return", "out", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN_GRU_A.__init__": [[106, 112], ["models.Sp_GCN_LSTM_A.__init__", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "activation", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "\n", "input_size", "=", "args", ".", "layer_2_feats", ",", "\n", "hidden_size", "=", "args", ".", "lstm_l2_feats", ",", "\n", "num_layers", "=", "args", ".", "lstm_l2_layers", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN_LSTM_B.__init__": [[115, 131], ["models.Sp_GCN.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "utils.reset_param", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "activation", ")", "\n", "assert", "args", ".", "num_layers", "==", "2", ",", "'GCN-LSTM and GCN-GRU requires 2 conv layers.'", "\n", "self", ".", "rnn_l1", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "args", ".", "layer_1_feats", ",", "\n", "hidden_size", "=", "args", ".", "lstm_l1_feats", ",", "\n", "num_layers", "=", "args", ".", "lstm_l1_layers", "\n", ")", "\n", "\n", "self", ".", "rnn_l2", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "args", ".", "layer_2_feats", ",", "\n", "hidden_size", "=", "args", ".", "lstm_l2_feats", ",", "\n", "num_layers", "=", "args", ".", "lstm_l2_layers", "\n", ")", "\n", "self", ".", "W2", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "args", ".", "lstm_l1_feats", ",", "args", ".", "layer_2_feats", ")", ")", "\n", "u", ".", "reset_param", "(", "self", ".", "W2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN_LSTM_B.forward": [[132, 155], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "models.Sp_GCN_LSTM_B.rnn_l1", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "models.Sp_GCN_LSTM_B.rnn_l2", "models.Sp_GCN_LSTM_B.activation", "torch.stack.append", "torch.stack.append", "len", "models.Sp_GCN_LSTM_B.activation", "torch.stack.append", "torch.stack.append", "Ahat.matmul", "Ahat.matmul().matmul", "node_feats.matmul", "Ahat.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "Nodes_list", "=", "None", ",", "nodes_mask_list", "=", "None", ")", ":", "\n", "        ", "l1_seq", "=", "[", "]", "\n", "l2_seq", "=", "[", "]", "\n", "for", "t", ",", "Ahat", "in", "enumerate", "(", "A_list", ")", ":", "\n", "            ", "node_feats", "=", "Nodes_list", "[", "t", "]", "\n", "l1", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "node_feats", ".", "matmul", "(", "self", ".", "w_list", "[", "0", "]", ")", ")", ")", "\n", "l1_seq", ".", "append", "(", "l1", ")", "\n", "\n", "", "l1_seq", "=", "torch", ".", "stack", "(", "l1_seq", ")", "\n", "\n", "out_l1", ",", "_", "=", "self", ".", "rnn_l1", "(", "l1_seq", ",", "None", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "A_list", ")", ")", ":", "\n", "            ", "Ahat", "=", "A_list", "[", "i", "]", "\n", "out_t_l1", "=", "out_l1", "[", "i", "]", "\n", "#A_list: T, each element sparse tensor", "\n", "l2", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "out_t_l1", ")", ".", "matmul", "(", "self", ".", "w_list", "[", "1", "]", ")", ")", "\n", "l2_seq", ".", "append", "(", "l2", ")", "\n", "\n", "", "l2_seq", "=", "torch", ".", "stack", "(", "l2_seq", ")", "\n", "\n", "out", ",", "_", "=", "self", ".", "rnn_l2", "(", "l2_seq", ",", "None", ")", "\n", "return", "out", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Sp_GCN_GRU_B.__init__": [[158, 170], ["models.Sp_GCN_LSTM_B.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "activation", ")", "\n", "self", ".", "rnn_l1", "=", "nn", ".", "GRU", "(", "\n", "input_size", "=", "args", ".", "layer_1_feats", ",", "\n", "hidden_size", "=", "args", ".", "lstm_l1_feats", ",", "\n", "num_layers", "=", "args", ".", "lstm_l1_layers", "\n", ")", "\n", "\n", "self", ".", "rnn_l2", "=", "nn", ".", "GRU", "(", "\n", "input_size", "=", "args", ".", "layer_2_feats", ",", "\n", "hidden_size", "=", "args", ".", "lstm_l2_feats", ",", "\n", "num_layers", "=", "args", ".", "lstm_l2_layers", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Classifier.__init__": [[173, 191], ["super().__init__", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "print", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "out_features", "=", "2", ",", "in_features", "=", "None", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "in_features", "is", "not", "None", ":", "\n", "            ", "num_feats", "=", "in_features", "\n", "", "elif", "args", ".", "experiment_type", "in", "[", "'sp_lstm_A_trainer'", ",", "'sp_lstm_B_trainer'", ",", "\n", "'sp_weighted_lstm_A'", ",", "'sp_weighted_lstm_B'", "]", ":", "\n", "            ", "num_feats", "=", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", "*", "2", "\n", "", "else", ":", "\n", "            ", "num_feats", "=", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", "*", "2", "\n", "", "print", "(", "'CLS num_feats'", ",", "num_feats", ")", "\n", "\n", "self", ".", "mlp", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "in_features", "=", "num_feats", ",", "\n", "out_features", "=", "args", ".", "gcn_parameters", "[", "'cls_feats'", "]", ")", ",", "\n", "activation", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", "=", "args", ".", "gcn_parameters", "[", "'cls_feats'", "]", ",", "\n", "out_features", "=", "out_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.models.Classifier.forward": [[192, 194], ["models.Classifier.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mlp", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.reddit_dl.Reddit_Dataset.__init__": [[7, 122], ["utils.Namespace", "utils.Namespace", "os.path.join", "torch.tensor", "torch.tensor.size", "reddit_dl.Reddit_Dataset.load_edges_from_file", "torch.LongTensor.extend", "reddit_dl.Reddit_Dataset.load_edges_from_file", "torch.LongTensor.extend", "torch.LongTensor", "utils.aggregate_by_time", "edges[].max", "edges[].t", "torch.sparse.LongTensor().coalesce", "torch.sparse.LongTensor().coalesce", "sp_edges._values", "torch.zeros", "torch.cat", "torch.tensor.size", "open", "file.read().splitlines.read().splitlines.read().splitlines", "line.split.split.split", "sp_edges._values.size", "ids_str_to_int.keys", "torch.tensor.append", "print", "Exception", "torch.sparse.LongTensor", "torch.sparse.LongTensor", "sp_edges._indices().t", "torch.zeros.view", "file.read().splitlines.read().splitlines.read", "float", "torch.Size", "torch.Size", "sp_edges._indices"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.reddit_dl.Reddit_Dataset.load_edges_from_file", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.reddit_dl.Reddit_Dataset.load_edges_from_file", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.aggregate_by_time"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "args", ".", "reddit_args", "=", "u", ".", "Namespace", "(", "args", ".", "reddit_args", ")", "\n", "folder", "=", "args", ".", "reddit_args", ".", "folder", "\n", "\n", "#load nodes", "\n", "cols", "=", "u", ".", "Namespace", "(", "{", "'id'", ":", "0", ",", "\n", "'feats'", ":", "1", "}", ")", "\n", "file", "=", "args", ".", "reddit_args", ".", "nodes_file", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "file", ")", "\n", "with", "open", "(", "file", ")", "as", "file", ":", "\n", "\t\t\t", "file", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "ids_str_to_int", "=", "{", "}", "\n", "id_counter", "=", "0", "\n", "\n", "feats", "=", "[", "]", "\n", "\n", "for", "line", "in", "file", ":", "\n", "\t\t\t", "line", "=", "line", ".", "split", "(", "','", ")", "\n", "#node id", "\n", "nd_id", "=", "line", "[", "0", "]", "\n", "if", "nd_id", "not", "in", "ids_str_to_int", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "ids_str_to_int", "[", "nd_id", "]", "=", "id_counter", "\n", "id_counter", "+=", "1", "\n", "nd_feats", "=", "[", "float", "(", "r", ")", "for", "r", "in", "line", "[", "1", ":", "]", "]", "\n", "feats", ".", "append", "(", "nd_feats", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "'duplicate id'", ",", "nd_id", ")", "\n", "raise", "Exception", "(", "'duplicate_id'", ")", "\n", "\n", "", "", "feats", "=", "torch", ".", "tensor", "(", "feats", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "num_nodes", "=", "feats", ".", "size", "(", "0", ")", "\n", "\n", "edges", "=", "[", "]", "\n", "not_found", "=", "0", "\n", "\n", "#load edges in title", "\n", "edges_tmp", ",", "not_found_tmp", "=", "self", ".", "load_edges_from_file", "(", "args", ".", "reddit_args", ".", "title_edges_file", ",", "\n", "folder", ",", "\n", "ids_str_to_int", ")", "\n", "edges", ".", "extend", "(", "edges_tmp", ")", "\n", "not_found", "+=", "not_found_tmp", "\n", "\n", "#load edges in bodies", "\n", "\n", "edges_tmp", ",", "not_found_tmp", "=", "self", ".", "load_edges_from_file", "(", "args", ".", "reddit_args", ".", "body_edges_file", ",", "\n", "folder", ",", "\n", "ids_str_to_int", ")", "\n", "edges", ".", "extend", "(", "edges_tmp", ")", "\n", "not_found", "+=", "not_found_tmp", "\n", "\n", "#min time should be 0 and time aggregation", "\n", "edges", "=", "torch", ".", "LongTensor", "(", "edges", ")", "\n", "edges", "[", ":", ",", "2", "]", "=", "u", ".", "aggregate_by_time", "(", "edges", "[", ":", ",", "2", "]", ",", "args", ".", "reddit_args", ".", "aggr_time", ")", "\n", "max_time", "=", "edges", "[", ":", ",", "2", "]", ".", "max", "(", ")", "\n", "\n", "#separate classes", "\n", "sp_indices", "=", "edges", "[", ":", ",", ":", "3", "]", ".", "t", "(", ")", "\n", "sp_values", "=", "edges", "[", ":", ",", "3", "]", "\n", "\n", "# sp_edges = torch.sparse.LongTensor(sp_indices", "\n", "# \t\t\t\t\t\t\t\t\t  ,sp_values,", "\n", "# \t\t\t\t\t\t\t\t\t  torch.Size([num_nodes,", "\n", "# \t\t\t\t\t\t\t\t\t  \t\t\t  num_nodes,", "\n", "# \t\t\t\t\t\t\t\t\t  \t\t\t  max_time+1])).coalesce()", "\n", "# vals = sp_edges._values()", "\n", "# print(vals[vals>0].sum() + vals[vals<0].sum()*-1)", "\n", "# asdf", "\n", "\n", "pos_mask", "=", "sp_values", "==", "1", "\n", "neg_mask", "=", "sp_values", "==", "-", "1", "\n", "\n", "neg_sp_indices", "=", "sp_indices", "[", ":", ",", "neg_mask", "]", "\n", "neg_sp_values", "=", "sp_values", "[", "neg_mask", "]", "\n", "neg_sp_edges", "=", "torch", ".", "sparse", ".", "LongTensor", "(", "neg_sp_indices", "\n", ",", "neg_sp_values", ",", "\n", "torch", ".", "Size", "(", "[", "num_nodes", ",", "\n", "num_nodes", ",", "\n", "max_time", "+", "1", "]", ")", ")", ".", "coalesce", "(", ")", "\n", "\n", "pos_sp_indices", "=", "sp_indices", "[", ":", ",", "pos_mask", "]", "\n", "pos_sp_values", "=", "sp_values", "[", "pos_mask", "]", "\n", "\n", "pos_sp_edges", "=", "torch", ".", "sparse", ".", "LongTensor", "(", "pos_sp_indices", "\n", ",", "pos_sp_values", ",", "\n", "torch", ".", "Size", "(", "[", "num_nodes", ",", "\n", "num_nodes", ",", "\n", "max_time", "+", "1", "]", ")", ")", ".", "coalesce", "(", ")", "\n", "\n", "#scale positive class to separate after adding", "\n", "pos_sp_edges", "*=", "1000", "\n", "\n", "sp_edges", "=", "(", "pos_sp_edges", "-", "neg_sp_edges", ")", ".", "coalesce", "(", ")", "\n", "\n", "#separating negs and positive edges per edge/timestamp", "\n", "vals", "=", "sp_edges", ".", "_values", "(", ")", "\n", "neg_vals", "=", "vals", "%", "1000", "\n", "pos_vals", "=", "vals", "//", "1000", "\n", "#vals is simply the number of edges between two nodes at the same time_step, regardless of the edge label", "\n", "vals", "=", "pos_vals", "-", "neg_vals", "\n", "\n", "#creating labels new_vals -> the label of the edges", "\n", "new_vals", "=", "torch", ".", "zeros", "(", "vals", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "new_vals", "[", "vals", ">", "0", "]", "=", "1", "\n", "new_vals", "[", "vals", "<=", "0", "]", "=", "0", "\n", "vals", "=", "pos_vals", "+", "neg_vals", "\n", "indices_labels", "=", "torch", ".", "cat", "(", "[", "sp_edges", ".", "_indices", "(", ")", ".", "t", "(", ")", ",", "new_vals", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "edges", "=", "{", "'idx'", ":", "indices_labels", ",", "'vals'", ":", "vals", "}", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "feats_per_node", "=", "feats", ".", "size", "(", "1", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "nodes_feats", "=", "feats", "\n", "self", ".", "max_time", "=", "max_time", "\n", "self", ".", "min_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.reddit_dl.Reddit_Dataset.prepare_node_feats": [[123, 126], ["None"], "methods", ["None"], ["", "def", "prepare_node_feats", "(", "self", ",", "node_feats", ")", ":", "\n", "\t\t", "node_feats", "=", "node_feats", "[", "0", "]", "\n", "return", "node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.reddit_dl.Reddit_Dataset.load_edges_from_file": [[128, 167], ["os.path.join", "utils.Namespace", "datetime.datetime.datetime.strptime", "open", "file.read().splitlines.read().splitlines.read().splitlines", "line.split", "datetime.datetime.datetime.strptime", "int", "edges.append", "edges.append", "file.read().splitlines.read().splitlines.read", "ids_str_to_int.keys", "ids_str_to_int.keys", "fields[].split"], "methods", ["None"], ["", "def", "load_edges_from_file", "(", "self", ",", "edges_file", ",", "folder", ",", "ids_str_to_int", ")", ":", "\n", "\t\t", "edges", "=", "[", "]", "\n", "not_found", "=", "0", "\n", "\n", "file", "=", "edges_file", "\n", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "file", ")", "\n", "with", "open", "(", "file", ")", "as", "file", ":", "\n", "\t\t\t", "file", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "cols", "=", "u", ".", "Namespace", "(", "{", "'source'", ":", "0", ",", "\n", "'target'", ":", "1", ",", "\n", "'time'", ":", "3", ",", "\n", "'label'", ":", "4", "}", ")", "\n", "\n", "base_time", "=", "datetime", ".", "strptime", "(", "\"19800101\"", ",", "'%Y%m%d'", ")", "\n", "\n", "\n", "for", "line", "in", "file", "[", "1", ":", "]", ":", "\n", "\t\t\t", "fields", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "sr", "=", "fields", "[", "cols", ".", "source", "]", "\n", "tg", "=", "fields", "[", "cols", ".", "target", "]", "\n", "\n", "if", "sr", "in", "ids_str_to_int", ".", "keys", "(", ")", "and", "tg", "in", "ids_str_to_int", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "sr", "=", "ids_str_to_int", "[", "sr", "]", "\n", "tg", "=", "ids_str_to_int", "[", "tg", "]", "\n", "\n", "time", "=", "fields", "[", "cols", ".", "time", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "time", "=", "datetime", ".", "strptime", "(", "time", ",", "'%Y-%m-%d'", ")", "\n", "time", "=", "(", "time", "-", "base_time", ")", ".", "days", "\n", "\n", "label", "=", "int", "(", "fields", "[", "cols", ".", "label", "]", ")", "\n", "edges", ".", "append", "(", "[", "sr", ",", "tg", ",", "time", ",", "label", "]", ")", "\n", "#add the other edge to make it undirected", "\n", "edges", ".", "append", "(", "[", "tg", ",", "sr", ",", "time", ",", "label", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "not_found", "+=", "1", "\n", "\n", "", "", "return", "edges", ",", "not_found", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Node_Cls_Tasker.__init__": [[6, 24], ["node_cls_tasker.Node_Cls_Tasker.build_get_node_feats", "node_cls_tasker.Node_Cls_Tasker.build_prepare_node_feats"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_get_node_feats", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_prepare_node_feats"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "self", ".", "data", "=", "dataset", "\n", "\n", "self", ".", "max_time", "=", "dataset", ".", "max_time", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n", "self", ".", "feats_per_node", "=", "dataset", ".", "feats_per_node", "\n", "\n", "self", ".", "nodes_labels_times", "=", "dataset", ".", "nodes_labels_times", "\n", "\n", "self", ".", "get_node_feats", "=", "self", ".", "build_get_node_feats", "(", "args", ",", "dataset", ")", "\n", "\n", "self", ".", "prepare_node_feats", "=", "self", ".", "build_prepare_node_feats", "(", "args", ",", "dataset", ")", "\n", "\n", "self", ".", "is_static", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Node_Cls_Tasker.build_get_node_feats": [[26, 47], ["taskers_utils.get_max_degs", "taskers_utils.get_2_hot_deg_feats", "taskers_utils.get_max_degs", "taskers_utils.get_1_hot_deg_feats"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_1_hot_deg_feats"], ["", "def", "build_get_node_feats", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "if", "args", ".", "use_2_hot_node_feats", ":", "\n", "\t\t\t", "max_deg_out", ",", "max_deg_in", "=", "tu", ".", "get_max_degs", "(", "args", ",", "dataset", ",", "all_window", "=", "True", ")", "\n", "self", ".", "feats_per_node", "=", "max_deg_out", "+", "max_deg_in", "\n", "def", "get_node_feats", "(", "i", ",", "adj", ")", ":", "\n", "\t\t\t\t", "return", "tu", ".", "get_2_hot_deg_feats", "(", "adj", ",", "\n", "max_deg_out", ",", "\n", "max_deg_in", ",", "\n", "dataset", ".", "num_nodes", ")", "\n", "", "", "elif", "args", ".", "use_1_hot_node_feats", ":", "\n", "\t\t\t", "max_deg", ",", "_", "=", "tu", ".", "get_max_degs", "(", "args", ",", "dataset", ")", "\n", "self", ".", "feats_per_node", "=", "max_deg", "\n", "def", "get_node_feats", "(", "i", ",", "adj", ")", ":", "\n", "\t\t\t\t", "return", "tu", ".", "get_1_hot_deg_feats", "(", "adj", ",", "\n", "max_deg", ",", "\n", "dataset", ".", "num_nodes", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "def", "get_node_feats", "(", "i", ",", "adj", ")", ":", "\n", "\t\t\t\t", "return", "dataset", ".", "nodes_feats", "#[i] I'm ignoring the index since the features for Elliptic are static", "\n", "\n", "", "", "return", "get_node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Node_Cls_Tasker.build_prepare_node_feats": [[48, 61], ["utils.sparse_prepare_tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sparse_prepare_tensor"], ["", "def", "build_prepare_node_feats", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "if", "args", ".", "use_2_hot_node_feats", "or", "args", ".", "use_1_hot_node_feats", ":", "\n", "\t\t\t", "def", "prepare_node_feats", "(", "node_feats", ")", ":", "\n", "\t\t\t\t", "return", "u", ".", "sparse_prepare_tensor", "(", "node_feats", ",", "\n", "torch_size", "=", "[", "dataset", ".", "num_nodes", ",", "\n", "self", ".", "feats_per_node", "]", ")", "\n", "# elif args.use_1_hot_node_feats:", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "def", "prepare_node_feats", "(", "node_feats", ")", ":", "\n", "\t\t\t\t", "return", "node_feats", "[", "0", "]", "#I'll have to check this up", "\n", "\n", "", "", "return", "prepare_node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Node_Cls_Tasker.get_sample": [[62, 91], ["range", "node_cls_tasker.Node_Cls_Tasker.get_node_labels", "taskers_utils.get_sp_adj", "taskers_utils.get_node_mask", "node_cls_tasker.Node_Cls_Tasker.get_node_feats", "taskers_utils.normalize_adj", "hist_adj_list.append", "hist_ndFeats_list.append", "hist_mask_list.append"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Node_Cls_Tasker.get_node_labels", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_node_mask", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.normalize_adj"], ["", "def", "get_sample", "(", "self", ",", "idx", ",", "test", ")", ":", "\n", "\t\t", "hist_adj_list", "=", "[", "]", "\n", "hist_ndFeats_list", "=", "[", "]", "\n", "hist_mask_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "idx", "-", "self", ".", "args", ".", "num_hist_steps", ",", "idx", "+", "1", ")", ":", "\n", "#all edgess included from the beginning", "\n", "\t\t\t", "cur_adj", "=", "tu", ".", "get_sp_adj", "(", "edges", "=", "self", ".", "data", ".", "edges", ",", "\n", "time", "=", "i", ",", "\n", "weighted", "=", "True", ",", "\n", "time_window", "=", "self", ".", "args", ".", "adj_mat_time_window", ")", "#changed this to keep only a time window", "\n", "\n", "node_mask", "=", "tu", ".", "get_node_mask", "(", "cur_adj", ",", "self", ".", "data", ".", "num_nodes", ")", "\n", "\n", "node_feats", "=", "self", ".", "get_node_feats", "(", "i", ",", "cur_adj", ")", "\n", "\n", "cur_adj", "=", "tu", ".", "normalize_adj", "(", "adj", "=", "cur_adj", ",", "num_nodes", "=", "self", ".", "data", ".", "num_nodes", ")", "\n", "\n", "hist_adj_list", ".", "append", "(", "cur_adj", ")", "\n", "hist_ndFeats_list", ".", "append", "(", "node_feats", ")", "\n", "hist_mask_list", ".", "append", "(", "node_mask", ")", "\n", "\n", "", "label_adj", "=", "self", ".", "get_node_labels", "(", "idx", ")", "\n", "\n", "return", "{", "'idx'", ":", "idx", ",", "\n", "'hist_adj_list'", ":", "hist_adj_list", ",", "\n", "'hist_ndFeats_list'", ":", "hist_ndFeats_list", ",", "\n", "'label_sp'", ":", "label_adj", ",", "\n", "'node_mask_list'", ":", "hist_mask_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Node_Cls_Tasker.get_node_labels": [[93, 119], ["None"], "methods", ["None"], ["", "def", "get_node_labels", "(", "self", ",", "idx", ")", ":", "\n", "# window_nodes = tu.get_sp_adj(edges = self.data.edges,", "\n", "# \t\t\t\t\t\t\t time = idx,", "\n", "# \t\t\t\t\t\t\t weighted = False,", "\n", "# \t\t\t\t\t\t\t time_window = self.args.adj_mat_time_window)", "\n", "\n", "# window_nodes = window_nodes['idx'].unique()", "\n", "\n", "# fraud_times = self.data.nodes_labels_times[window_nodes]", "\n", "\n", "# non_fraudulent = ((fraud_times > idx) + (fraud_times == -1))>0", "\n", "# non_fraudulent = window_nodes[non_fraudulent]", "\n", "\n", "# fraudulent = (fraud_times <= idx) * (fraud_times > max(idx -  self.args.adj_mat_time_window,0))", "\n", "# fraudulent = window_nodes[fraudulent]", "\n", "\n", "# label_idx = torch.cat([non_fraudulent,fraudulent]).view(-1,1)", "\n", "# label_vals = torch.cat([torch.zeros(non_fraudulent.size(0)),", "\n", "# \t\t\t\t\t    torch.ones(fraudulent.size(0))])", "\n", "\t\t", "node_labels", "=", "self", ".", "nodes_labels_times", "\n", "subset", "=", "node_labels", "[", ":", ",", "2", "]", "==", "idx", "\n", "label_idx", "=", "node_labels", "[", "subset", ",", "0", "]", "\n", "label_vals", "=", "node_labels", "[", "subset", ",", "1", "]", "\n", "\n", "return", "{", "'idx'", ":", "label_idx", ",", "\n", "'vals'", ":", "label_vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Static_Node_Cls_Tasker.__init__": [[124, 153], ["taskers_utils.get_static_sp_adj", "taskers_utils.normalize_adj", "taskers_utils.get_max_degs_static", "taskers_utils.get_2_hot_deg_feats", "utils.sparse_prepare_tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_static_sp_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.normalize_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs_static", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sparse_prepare_tensor"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "self", ".", "data", "=", "dataset", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n", "\n", "\n", "self", ".", "adj_matrix", "=", "tu", ".", "get_static_sp_adj", "(", "edges", "=", "self", ".", "data", ".", "edges", ",", "weighted", "=", "False", ")", "\n", "\n", "if", "args", ".", "use_2_hot_node_feats", ":", "\n", "\t\t\t", "max_deg_out", ",", "max_deg_in", "=", "tu", ".", "get_max_degs_static", "(", "self", ".", "data", ".", "num_nodes", ",", "self", ".", "adj_matrix", ")", "\n", "self", ".", "feats_per_node", "=", "max_deg_out", "+", "max_deg_in", "\n", "#print ('feats_per_node',self.feats_per_node ,max_deg_out, max_deg_in)", "\n", "self", ".", "nodes_feats", "=", "tu", ".", "get_2_hot_deg_feats", "(", "self", ".", "adj_matrix", ",", "\n", "max_deg_out", ",", "\n", "max_deg_in", ",", "\n", "dataset", ".", "num_nodes", ")", "\n", "\n", "#print('XXXX self.nodes_feats',self.nodes_feats)", "\n", "self", ".", "nodes_feats", "=", "u", ".", "sparse_prepare_tensor", "(", "self", ".", "nodes_feats", ",", "torch_size", "=", "[", "self", ".", "data", ".", "num_nodes", ",", "self", ".", "feats_per_node", "]", ",", "ignore_batch_dim", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "feats_per_node", "=", "dataset", ".", "feats_per_node", "\n", "self", ".", "nodes_feats", "=", "self", ".", "data", ".", "node_feats", "\n", "\n", "", "self", ".", "adj_matrix", "=", "tu", ".", "normalize_adj", "(", "adj", "=", "self", ".", "adj_matrix", ",", "num_nodes", "=", "self", ".", "data", ".", "num_nodes", ")", "\n", "self", ".", "is_static", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.node_cls_tasker.Static_Node_Cls_Tasker.get_sample": [[154, 165], ["int"], "methods", ["None"], ["", "def", "get_sample", "(", "self", ",", "idx", ",", "test", ")", ":", "\n", "#print ('self.adj_matrix',self.adj_matrix.size())", "\n", "\t\t", "idx", "=", "int", "(", "idx", ")", "\n", "#node_feats = self.data.node_feats_dict[idx]", "\n", "label", "=", "self", ".", "data", ".", "nodes_labels", "[", "idx", "]", "\n", "\n", "\n", "return", "{", "'idx'", ":", "idx", ",", "\n", "#'node_feats': self.data.node_feats,", "\n", "#'adj': self.adj_matrix,", "\n", "'label'", ":", "label", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.run_exp.random_param_value": [[36, 47], ["str", "str().lower", "random.randrange", "numpy.logspace", "random.uniform", "str", "numpy.log10", "numpy.log10", "numpy.random.choice"], "function", ["None"], ["def", "random_param_value", "(", "param", ",", "param_min", ",", "param_max", ",", "type", "=", "'int'", ")", ":", "\n", "\t", "if", "str", "(", "param", ")", "is", "None", "or", "str", "(", "param", ")", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "\t\t", "if", "type", "==", "'int'", ":", "\n", "\t\t\t", "return", "random", ".", "randrange", "(", "param_min", ",", "param_max", "+", "1", ")", "\n", "", "elif", "type", "==", "'logscale'", ":", "\n", "\t\t\t", "interval", "=", "np", ".", "logspace", "(", "np", ".", "log10", "(", "param_min", ")", ",", "np", ".", "log10", "(", "param_max", ")", ",", "num", "=", "100", ")", "\n", "return", "np", ".", "random", ".", "choice", "(", "interval", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "random", ".", "uniform", "(", "param_min", ",", "param_max", ")", "\n", "", "", "else", ":", "\n", "\t\t", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.run_exp.build_random_hyper_params": [[48, 87], ["run_exp.random_param_value", "run_exp.random_param_value", "run_exp.random_param_value", "run_exp.random_param_value", "run_exp.random_param_value", "run_exp.random_param_value", "run_exp.random_param_value", "run_exp.random_param_value", "args.gcn_parameters[].lower", "args.gcn_parameters[].lower"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value"], ["", "", "def", "build_random_hyper_params", "(", "args", ")", ":", "\n", "\t", "if", "args", ".", "model", "==", "'all'", ":", "\n", "\t\t", "model_types", "=", "[", "'gcn'", ",", "'egcn_o'", ",", "'egcn_h'", ",", "'gruA'", ",", "'gruB'", ",", "'egcn'", ",", "'lstmA'", ",", "'lstmB'", "]", "\n", "args", ".", "model", "=", "model_types", "[", "args", ".", "rank", "]", "\n", "", "elif", "args", ".", "model", "==", "'all_nogcn'", ":", "\n", "\t\t", "model_types", "=", "[", "'egcn_o'", ",", "'egcn_h'", ",", "'gruA'", ",", "'gruB'", ",", "'egcn'", ",", "'lstmA'", ",", "'lstmB'", "]", "\n", "args", ".", "model", "=", "model_types", "[", "args", ".", "rank", "]", "\n", "", "elif", "args", ".", "model", "==", "'all_noegcn3'", ":", "\n", "\t\t", "model_types", "=", "[", "'gcn'", ",", "'egcn_h'", ",", "'gruA'", ",", "'gruB'", ",", "'egcn'", ",", "'lstmA'", ",", "'lstmB'", "]", "\n", "args", ".", "model", "=", "model_types", "[", "args", ".", "rank", "]", "\n", "", "elif", "args", ".", "model", "==", "'all_nogruA'", ":", "\n", "\t\t", "model_types", "=", "[", "'gcn'", ",", "'egcn_o'", ",", "'egcn_h'", ",", "'gruB'", ",", "'egcn'", ",", "'lstmA'", ",", "'lstmB'", "]", "\n", "args", ".", "model", "=", "model_types", "[", "args", ".", "rank", "]", "\n", "args", ".", "model", "=", "model_types", "[", "args", ".", "rank", "]", "\n", "", "elif", "args", ".", "model", "==", "'saveembs'", ":", "\n", "\t\t", "model_types", "=", "[", "'gcn'", ",", "'gcn'", ",", "'skipgcn'", ",", "'skipgcn'", "]", "\n", "args", ".", "model", "=", "model_types", "[", "args", ".", "rank", "]", "\n", "\n", "", "args", ".", "learning_rate", "=", "random_param_value", "(", "args", ".", "learning_rate", ",", "args", ".", "learning_rate_min", ",", "args", ".", "learning_rate_max", ",", "type", "=", "'logscale'", ")", "\n", "# args.adj_mat_time_window = random_param_value(args.adj_mat_time_window, args.adj_mat_time_window_min, args.adj_mat_time_window_max, type='int')", "\n", "\n", "if", "args", ".", "model", "==", "'gcn'", ":", "\n", "\t\t", "args", ".", "num_hist_steps", "=", "0", "\n", "", "else", ":", "\n", "\t\t", "args", ".", "num_hist_steps", "=", "random_param_value", "(", "args", ".", "num_hist_steps", ",", "args", ".", "num_hist_steps_min", ",", "args", ".", "num_hist_steps_max", ",", "type", "=", "'int'", ")", "\n", "\n", "", "args", ".", "gcn_parameters", "[", "'feats_per_node'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'feats_per_node'", "]", ",", "args", ".", "gcn_parameters", "[", "'feats_per_node_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'feats_per_node_max'", "]", ",", "type", "=", "'int'", ")", "\n", "args", ".", "gcn_parameters", "[", "'layer_1_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'layer_1_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "if", "args", ".", "gcn_parameters", "[", "'layer_2_feats_same_as_l1'", "]", "or", "args", ".", "gcn_parameters", "[", "'layer_2_feats_same_as_l1'", "]", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "\t\t", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", "=", "args", ".", "gcn_parameters", "[", "'layer_1_feats'", "]", "\n", "", "else", ":", "\n", "\t\t", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "if", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats_same_as_l1'", "]", "or", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats_same_as_l1'", "]", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "\t\t", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", "=", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats'", "]", "\n", "", "else", ":", "\n", "\t\t", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "", "args", ".", "gcn_parameters", "[", "'cls_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'cls_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'cls_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'cls_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.run_exp.build_dataset": [[88, 119], ["bitcoin_dl.bitcoin_dataset", "aml.Aml_Dataset", "ell.Elliptic_Dataset", "elliptic_temporal_dl.Elliptic_Temporal_Dataset", "uc_irv_mess_dl.Uc_Irvine_Message_Dataset", "dbg.dbg_dataset", "cg.Colored_Graph", "auto_syst_dl.Autonomous_Systems_Dataset", "reddit_dl.Reddit_Dataset", "args.data.startswith", "sbm_dl.sbm_dataset", "NotImplementedError"], "function", ["None"], ["", "def", "build_dataset", "(", "args", ")", ":", "\n", "\t", "if", "args", ".", "data", "==", "'bitcoinotc'", "or", "args", ".", "data", "==", "'bitcoinalpha'", ":", "\n", "\t\t", "if", "args", ".", "data", "==", "'bitcoinotc'", ":", "\n", "\t\t\t", "args", ".", "bitcoin_args", "=", "args", ".", "bitcoinotc_args", "\n", "", "elif", "args", ".", "data", "==", "'bitcoinalpha'", ":", "\n", "\t\t\t", "args", ".", "bitcoin_args", "=", "args", ".", "bitcoinalpha_args", "\n", "", "return", "bc", ".", "bitcoin_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'aml_sim'", ":", "\n", "\t\t", "return", "aml", ".", "Aml_Dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'elliptic'", ":", "\n", "\t\t", "return", "ell", ".", "Elliptic_Dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'elliptic_temporal'", ":", "\n", "\t\t", "return", "ell_temp", ".", "Elliptic_Temporal_Dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'uc_irv_mess'", ":", "\n", "\t\t", "return", "ucim", ".", "Uc_Irvine_Message_Dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'dbg'", ":", "\n", "\t\t", "return", "dbg", ".", "dbg_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'colored_graph'", ":", "\n", "\t\t", "return", "cg", ".", "Colored_Graph", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'autonomous_syst'", ":", "\n", "\t\t", "return", "aus", ".", "Autonomous_Systems_Dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'reddit'", ":", "\n", "\t\t", "return", "rdt", ".", "Reddit_Dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "data", ".", "startswith", "(", "'sbm'", ")", ":", "\n", "\t\t", "if", "args", ".", "data", "==", "'sbm20'", ":", "\n", "\t\t\t", "args", ".", "sbm_args", "=", "args", ".", "sbm20_args", "\n", "", "elif", "args", ".", "data", "==", "'sbm50'", ":", "\n", "\t\t\t", "args", ".", "sbm_args", "=", "args", ".", "sbm50_args", "\n", "", "return", "sbm", ".", "sbm_dataset", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "'only arxiv has been implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.run_exp.build_tasker": [[120, 132], ["link_pred_tasker.Link_Pred_Tasker", "edge_cls_tasker.Edge_Cls_Tasker", "node_cls_tasker.Node_Cls_Tasker", "node_cls_tasker.Static_Node_Cls_Tasker", "NotImplementedError"], "function", ["None"], ["", "", "def", "build_tasker", "(", "args", ",", "dataset", ")", ":", "\n", "\t", "if", "args", ".", "task", "==", "'link_pred'", ":", "\n", "\t\t", "return", "lpt", ".", "Link_Pred_Tasker", "(", "args", ",", "dataset", ")", "\n", "", "elif", "args", ".", "task", "==", "'edge_cls'", ":", "\n", "\t\t", "return", "ect", ".", "Edge_Cls_Tasker", "(", "args", ",", "dataset", ")", "\n", "", "elif", "args", ".", "task", "==", "'node_cls'", ":", "\n", "\t\t", "return", "nct", ".", "Node_Cls_Tasker", "(", "args", ",", "dataset", ")", "\n", "", "elif", "args", ".", "task", "==", "'static_node_cls'", ":", "\n", "\t\t", "return", "nct", ".", "Static_Node_Cls_Tasker", "(", "args", ",", "dataset", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "'still need to implement the other tasks'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.run_exp.build_gcn": [[133, 162], ["utils.Namespace", "models.Sp_GCN().to", "models.Sp_Skip_GCN().to", "models.Sp_GCN", "models.Sp_Skip_NodeFeats_GCN().to", "models.Sp_Skip_GCN", "models.Sp_GCN_LSTM_A().to", "torch.nn.RReLU", "torch.nn.RReLU", "models.Sp_Skip_NodeFeats_GCN", "models.Sp_GCN_GRU_A().to", "torch.nn.RReLU", "torch.nn.RReLU", "models.Sp_GCN_LSTM_A", "models.Sp_GCN_LSTM_B().to", "torch.nn.RReLU", "torch.nn.RReLU", "models.Sp_GCN_GRU_A", "models.Sp_GCN_GRU_B().to", "torch.nn.RReLU", "torch.nn.RReLU", "models.Sp_GCN_LSTM_B", "egcn.EGCN().to", "torch.nn.RReLU", "torch.nn.RReLU", "models.Sp_GCN_GRU_B", "egcn_h.EGCN", "torch.nn.RReLU", "torch.nn.RReLU", "egcn.EGCN", "egcn_h.EGCN", "torch.nn.RReLU", "torch.nn.RReLU", "torch.nn.RReLU", "torch.nn.RReLU", "egcn_o.EGCN", "NotImplementedError", "torch.nn.RReLU", "torch.nn.RReLU", "torch.nn.RReLU", "torch.nn.RReLU", "torch.nn.RReLU", "torch.nn.RReLU"], "function", ["None"], ["", "", "def", "build_gcn", "(", "args", ",", "tasker", ")", ":", "\n", "\t", "gcn_args", "=", "u", ".", "Namespace", "(", "args", ".", "gcn_parameters", ")", "\n", "gcn_args", ".", "feats_per_node", "=", "tasker", ".", "feats_per_node", "\n", "if", "args", ".", "model", "==", "'gcn'", ":", "\n", "\t\t", "return", "mls", ".", "Sp_GCN", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'skipgcn'", ":", "\n", "\t\t", "return", "mls", ".", "Sp_Skip_GCN", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'skipfeatsgcn'", ":", "\n", "\t\t", "return", "mls", ".", "Sp_Skip_NodeFeats_GCN", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "\t\t", "assert", "args", ".", "num_hist_steps", ">", "0", ",", "'more than one step is necessary to train LSTM'", "\n", "if", "args", ".", "model", "==", "'lstmA'", ":", "\n", "\t\t\t", "return", "mls", ".", "Sp_GCN_LSTM_A", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'gruA'", ":", "\n", "\t\t\t", "return", "mls", ".", "Sp_GCN_GRU_A", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'lstmB'", ":", "\n", "\t\t\t", "return", "mls", ".", "Sp_GCN_LSTM_B", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'gruB'", ":", "\n", "\t\t\t", "return", "mls", ".", "Sp_GCN_GRU_B", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'egcn'", ":", "\n", "\t\t\t", "return", "egcn", ".", "EGCN", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'egcn_h'", ":", "\n", "\t\t\t", "return", "egcn_h", ".", "EGCN", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ",", "device", "=", "args", ".", "device", ")", "\n", "", "elif", "args", ".", "model", "==", "'skipfeatsegcn_h'", ":", "\n", "\t\t\t", "return", "egcn_h", ".", "EGCN", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ",", "device", "=", "args", ".", "device", ",", "skipfeats", "=", "True", ")", "\n", "", "elif", "args", ".", "model", "==", "'egcn_o'", ":", "\n", "\t\t\t", "return", "egcn_o", ".", "EGCN", "(", "gcn_args", ",", "activation", "=", "torch", ".", "nn", ".", "RReLU", "(", ")", ",", "device", "=", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "'need to finish modifying the models'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.run_exp.build_classifier": [[163, 176], ["models.Classifier().to", "models.Classifier"], "function", ["None"], ["", "", "", "def", "build_classifier", "(", "args", ",", "tasker", ")", ":", "\n", "\t", "if", "'node_cls'", "==", "args", ".", "task", "or", "'static_node_cls'", "==", "args", ".", "task", ":", "\n", "\t\t", "mult", "=", "1", "\n", "", "else", ":", "\n", "\t\t", "mult", "=", "2", "\n", "", "if", "'gru'", "in", "args", ".", "model", "or", "'lstm'", "in", "args", ".", "model", ":", "\n", "\t\t", "in_feats", "=", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", "*", "mult", "\n", "", "elif", "args", ".", "model", "==", "'skipfeatsgcn'", "or", "args", ".", "model", "==", "'skipfeatsegcn_h'", ":", "\n", "\t\t", "in_feats", "=", "(", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", "+", "args", ".", "gcn_parameters", "[", "'feats_per_node'", "]", ")", "*", "mult", "\n", "", "else", ":", "\n", "\t\t", "in_feats", "=", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", "*", "mult", "\n", "\n", "", "return", "mls", ".", "Classifier", "(", "args", ",", "in_features", "=", "in_feats", ",", "out_features", "=", "tasker", ".", "num_classes", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.uc_irv_mess_dl.Uc_Irvine_Message_Dataset.__init__": [[10, 17], ["utils.Namespace", "os.path.join", "tarfile.open", "uc_irv_mess_dl.Uc_Irvine_Message_Dataset.load_edges"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.load_edges"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "args", ".", "uc_irc_args", "=", "u", ".", "Namespace", "(", "args", ".", "uc_irc_args", ")", "\n", "\n", "tar_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "uc_irc_args", ".", "folder", ",", "args", ".", "uc_irc_args", ".", "tar_file", ")", "\n", "tar_archive", "=", "tarfile", ".", "open", "(", "tar_file", ",", "'r:bz2'", ")", "\n", "\n", "self", ".", "edges", "=", "self", ".", "load_edges", "(", "args", ",", "tar_archive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.uc_irv_mess_dl.Uc_Irvine_Message_Dataset.load_edges": [[18, 58], ["utils.load_data_from_tar", "utils.Namespace", "torch.cat.long", "int", "torch.cat", "utils.aggregate_by_time", "float", "data[].max", "data[].min", "data[].max", "torch.ones", "ids.unique().size", "idx.size", "ids.unique"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data_from_tar", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.aggregate_by_time"], ["", "def", "load_edges", "(", "self", ",", "args", ",", "tar_archive", ")", ":", "\n", "\t\t", "data", "=", "u", ".", "load_data_from_tar", "(", "args", ".", "uc_irc_args", ".", "edges_file", ",", "\n", "tar_archive", ",", "\n", "starting_line", "=", "2", ",", "\n", "sep", "=", "' '", ")", "\n", "cols", "=", "u", ".", "Namespace", "(", "{", "'source'", ":", "0", ",", "\n", "'target'", ":", "1", ",", "\n", "'weight'", ":", "2", ",", "\n", "'time'", ":", "3", "}", ")", "\n", "\n", "data", "=", "data", ".", "long", "(", ")", "\n", "\n", "self", ".", "num_nodes", "=", "int", "(", "data", "[", ":", ",", "[", "cols", ".", "source", ",", "cols", ".", "target", "]", "]", ".", "max", "(", ")", ")", "\n", "\n", "#first id should be 0 (they are already contiguous)", "\n", "data", "[", ":", ",", "[", "cols", ".", "source", ",", "cols", ".", "target", "]", "]", "-=", "1", "\n", "\n", "#add edges in the other direction (simmetric)", "\n", "data", "=", "torch", ".", "cat", "(", "[", "data", ",", "\n", "data", "[", ":", ",", "[", "cols", ".", "target", ",", "\n", "cols", ".", "source", ",", "\n", "cols", ".", "weight", ",", "\n", "cols", ".", "time", "]", "]", "]", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "data", "[", ":", ",", "cols", ".", "time", "]", "=", "u", ".", "aggregate_by_time", "(", "data", "[", ":", ",", "cols", ".", "time", "]", ",", "\n", "args", ".", "uc_irc_args", ".", "aggr_time", ")", "\n", "\n", "ids", "=", "data", "[", ":", ",", "cols", ".", "source", "]", "*", "self", ".", "num_nodes", "+", "data", "[", ":", ",", "cols", ".", "target", "]", "\n", "self", ".", "num_non_existing", "=", "float", "(", "self", ".", "num_nodes", "**", "2", "-", "ids", ".", "unique", "(", ")", ".", "size", "(", "0", ")", ")", "\n", "\n", "idx", "=", "data", "[", ":", ",", "[", "cols", ".", "source", ",", "\n", "cols", ".", "target", ",", "\n", "cols", ".", "time", "]", "]", "\n", "\n", "self", ".", "max_time", "=", "data", "[", ":", ",", "cols", ".", "time", "]", ".", "max", "(", ")", "\n", "self", ".", "min_time", "=", "data", "[", ":", ",", "cols", ".", "time", "]", ".", "min", "(", ")", "\n", "\n", "\n", "return", "{", "'idx'", ":", "idx", ",", "'vals'", ":", "torch", ".", "ones", "(", "idx", ".", "size", "(", "0", ")", ")", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.EGCN.__init__": [[9, 29], ["super().__init__", "utils.Namespace", "torch.ParameterList", "torch.ParameterList", "range", "len", "utils.Namespace", "egcn_o.GRCU", "egcn_o.EGCN.GRCU_layers.append", "egcn_o.EGCN._parameters.extend", "GRCU.to", "list", "egcn_o.EGCN.GRCU_layers[].parameters"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.EGCN.parameters"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ",", "device", "=", "'cpu'", ",", "skipfeats", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "GRCU_args", "=", "u", ".", "Namespace", "(", "{", "}", ")", "\n", "\n", "feats", "=", "[", "args", ".", "feats_per_node", ",", "\n", "args", ".", "layer_1_feats", ",", "\n", "args", ".", "layer_2_feats", "]", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "skipfeats", "=", "skipfeats", "\n", "self", ".", "GRCU_layers", "=", "[", "]", "\n", "self", ".", "_parameters", "=", "nn", ".", "ParameterList", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "feats", ")", ")", ":", "\n", "            ", "GRCU_args", "=", "u", ".", "Namespace", "(", "{", "'in_feats'", ":", "feats", "[", "i", "-", "1", "]", ",", "\n", "'out_feats'", ":", "feats", "[", "i", "]", ",", "\n", "'activation'", ":", "activation", "}", ")", "\n", "\n", "grcu_i", "=", "GRCU", "(", "GRCU_args", ")", "\n", "#print (i,'grcu_i', grcu_i)", "\n", "self", ".", "GRCU_layers", ".", "append", "(", "grcu_i", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "_parameters", ".", "extend", "(", "list", "(", "self", ".", "GRCU_layers", "[", "-", "1", "]", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.EGCN.parameters": [[30, 32], ["None"], "methods", ["None"], ["", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.EGCN.forward": [[33, 43], ["unit", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "Nodes_list", ",", "nodes_mask_list", ")", ":", "\n", "        ", "node_feats", "=", "Nodes_list", "[", "-", "1", "]", "\n", "\n", "for", "unit", "in", "self", ".", "GRCU_layers", ":", "\n", "            ", "Nodes_list", "=", "unit", "(", "A_list", ",", "Nodes_list", ")", "#,nodes_mask_list)", "\n", "\n", "", "out", "=", "Nodes_list", "[", "-", "1", "]", "\n", "if", "self", ".", "skipfeats", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "node_feats", ")", ",", "dim", "=", "1", ")", "# use node_feats.to_dense() if 2hot encoded input ", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.GRCU.__init__": [[46, 58], ["super().__init__", "utils.Namespace", "egcn_o.mat_GRU_cell", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_o.GRCU.reset_param", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "cell_args", "=", "u", ".", "Namespace", "(", "{", "}", ")", "\n", "cell_args", ".", "rows", "=", "args", ".", "in_feats", "\n", "cell_args", ".", "cols", "=", "args", ".", "out_feats", "\n", "\n", "self", ".", "evolve_weights", "=", "mat_GRU_cell", "(", "cell_args", ")", "\n", "\n", "self", ".", "activation", "=", "self", ".", "args", ".", "activation", "\n", "self", ".", "GCN_init_weights", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "args", ".", "in_feats", ",", "self", ".", "args", ".", "out_feats", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "GCN_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.GRCU.reset_param": [[59, 63], ["t.data.uniform_", "math.sqrt", "t.size"], "methods", ["None"], ["", "def", "reset_param", "(", "self", ",", "t", ")", ":", "\n", "#Initialize based on the number of columns", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "t", ".", "size", "(", "1", ")", ")", "\n", "t", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.GRCU.forward": [[64, 76], ["enumerate", "egcn_o.GRCU.evolve_weights", "egcn_o.GRCU.activation", "out_seq.append", "Ahat.matmul", "egcn_o.GRCU.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "node_embs_list", ")", ":", "#,mask_list):", "\n", "        ", "GCN_weights", "=", "self", ".", "GCN_init_weights", "\n", "out_seq", "=", "[", "]", "\n", "for", "t", ",", "Ahat", "in", "enumerate", "(", "A_list", ")", ":", "\n", "            ", "node_embs", "=", "node_embs_list", "[", "t", "]", "\n", "#first evolve the weights from the initial and use the new weights with the node_embs", "\n", "GCN_weights", "=", "self", ".", "evolve_weights", "(", "GCN_weights", ")", "#,node_embs,mask_list[t])", "\n", "node_embs", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "node_embs", ".", "matmul", "(", "GCN_weights", ")", ")", ")", "\n", "\n", "out_seq", ".", "append", "(", "node_embs", ")", "\n", "\n", "", "return", "out_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.mat_GRU_cell.__init__": [[78, 95], ["super().__init__", "egcn_o.mat_GRU_gate", "egcn_o.mat_GRU_gate", "egcn_o.mat_GRU_gate", "egcn_o.TopK", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "update", "=", "mat_GRU_gate", "(", "args", ".", "rows", ",", "\n", "args", ".", "cols", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "reset", "=", "mat_GRU_gate", "(", "args", ".", "rows", ",", "\n", "args", ".", "cols", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "htilda", "=", "mat_GRU_gate", "(", "args", ".", "rows", ",", "\n", "args", ".", "cols", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "choose_topk", "=", "TopK", "(", "feats", "=", "args", ".", "rows", ",", "\n", "k", "=", "args", ".", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.mat_GRU_cell.forward": [[96, 109], ["egcn_o.mat_GRU_cell.update", "egcn_o.mat_GRU_cell.reset", "egcn_o.mat_GRU_cell.htilda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev_Q", ")", ":", "#,prev_Z,mask):", "\n", "# z_topk = self.choose_topk(prev_Z,mask)", "\n", "        ", "z_topk", "=", "prev_Q", "\n", "\n", "update", "=", "self", ".", "update", "(", "z_topk", ",", "prev_Q", ")", "\n", "reset", "=", "self", ".", "reset", "(", "z_topk", ",", "prev_Q", ")", "\n", "\n", "h_cap", "=", "reset", "*", "prev_Q", "\n", "h_cap", "=", "self", ".", "htilda", "(", "z_topk", ",", "h_cap", ")", "\n", "\n", "new_Q", "=", "(", "1", "-", "update", ")", "*", "prev_Q", "+", "update", "*", "h_cap", "\n", "\n", "return", "new_Q", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.mat_GRU_gate.__init__": [[113, 124], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_o.mat_GRU_gate.reset_param", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_o.mat_GRU_gate.reset_param", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "rows", ",", "cols", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "#the k here should be in_feats which is actually the rows", "\n", "self", ".", "W", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "rows", ",", "rows", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "W", ")", "\n", "\n", "self", ".", "U", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "rows", ",", "rows", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "U", ")", "\n", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "rows", ",", "cols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.mat_GRU_gate.reset_param": [[125, 129], ["t.data.uniform_", "math.sqrt", "t.size"], "methods", ["None"], ["", "def", "reset_param", "(", "self", ",", "t", ")", ":", "\n", "#Initialize based on the number of columns", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "t", ".", "size", "(", "1", ")", ")", "\n", "t", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.mat_GRU_gate.forward": [[130, 136], ["egcn_o.mat_GRU_gate.activation", "egcn_o.mat_GRU_gate.W.matmul", "egcn_o.mat_GRU_gate.U.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "        ", "out", "=", "self", ".", "activation", "(", "self", ".", "W", ".", "matmul", "(", "x", ")", "+", "self", ".", "U", ".", "matmul", "(", "hidden", ")", "+", "self", ".", "bias", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.TopK.__init__": [[138, 144], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_o.TopK.reset_param", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "feats", ",", "k", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scorer", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "feats", ",", "1", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "scorer", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.TopK.reset_param": [[145, 149], ["t.data.uniform_", "math.sqrt", "t.size"], "methods", ["None"], ["", "def", "reset_param", "(", "self", ",", "t", ")", ":", "\n", "#Initialize based on the number of rows", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "t", ".", "size", "(", "0", ")", ")", "\n", "t", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_o.TopK.forward": [[150, 170], ["scores.view().topk", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "out.t", "node_embs.to_dense.to_dense.matmul", "egcn_o.TopK.scorer.norm", "utils.pad_with_last_val.size", "utils.pad_with_last_val", "isinstance", "isinstance", "node_embs.to_dense.to_dense.to_dense", "torch.nn.Tanh.", "torch.nn.Tanh.", "scores.view", "scores[].view", "float"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.pad_with_last_val"], ["", "def", "forward", "(", "self", ",", "node_embs", ",", "mask", ")", ":", "\n", "        ", "scores", "=", "node_embs", ".", "matmul", "(", "self", ".", "scorer", ")", "/", "self", ".", "scorer", ".", "norm", "(", ")", "\n", "scores", "=", "scores", "+", "mask", "\n", "\n", "vals", ",", "topk_indices", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "topk", "(", "self", ".", "k", ")", "\n", "topk_indices", "=", "topk_indices", "[", "vals", ">", "-", "float", "(", "\"Inf\"", ")", "]", "\n", "\n", "if", "topk_indices", ".", "size", "(", "0", ")", "<", "self", ".", "k", ":", "\n", "            ", "topk_indices", "=", "u", ".", "pad_with_last_val", "(", "topk_indices", ",", "self", ".", "k", ")", "\n", "\n", "", "tanh", "=", "torch", ".", "nn", ".", "Tanh", "(", ")", "\n", "\n", "if", "isinstance", "(", "node_embs", ",", "torch", ".", "sparse", ".", "FloatTensor", ")", "or", "isinstance", "(", "node_embs", ",", "torch", ".", "cuda", ".", "sparse", ".", "FloatTensor", ")", ":", "\n", "            ", "node_embs", "=", "node_embs", ".", "to_dense", "(", ")", "\n", "\n", "", "out", "=", "node_embs", "[", "topk_indices", "]", "*", "tanh", "(", "scores", "[", "topk_indices", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "#we need to transpose the output", "\n", "return", "out", ".", "t", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.splitter.splitter.__init__": [[13, 92], ["splitter.static_data_split", "torch.utils.data.DataLoader", "splitter.static_data_split", "torch.utils.data.DataLoader", "splitter.static_data_split", "torch.utils.data.DataLoader", "int", "splitter.data_split", "torch.utils.data.DataLoader", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.randperm", "print", "indexes.sort", "numpy.floor", "numpy.floor", "splitter.data_split", "splitter.data_split", "int", "splitter.data_split", "splitter.data_split", "len", "len", "len", "indexes.size", "indexes.size", "int", "int", "int", "int", "tasker.data.max_time.type", "tasker.data.max_time.type", "torch.randperm.size", "torch.randperm.size", "torch.randperm.size", "torch.randperm.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ",", "tasker", ")", ":", "\n", "\n", "\n", "        ", "if", "tasker", ".", "is_static", ":", "#### For static datsets", "\n", "            ", "assert", "args", ".", "train_proportion", "+", "args", ".", "dev_proportion", "<", "1", ",", "'there\\'s no space for test samples'", "\n", "#only the training one requires special handling on start, the others are fine with the split IDX.", "\n", "\n", "random_perm", "=", "False", "\n", "indexes", "=", "tasker", ".", "data", ".", "nodes_with_label", "\n", "\n", "if", "random_perm", ":", "\n", "                ", "perm_idx", "=", "torch", ".", "randperm", "(", "indexes", ".", "size", "(", "0", ")", ")", "\n", "perm_idx", "=", "indexes", "[", "perm_idx", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "'tasker.data.nodes'", ",", "indexes", ".", "size", "(", ")", ")", "\n", "perm_idx", ",", "_", "=", "indexes", ".", "sort", "(", ")", "\n", "#print ('perm_idx',perm_idx[:10])", "\n", "\n", "", "self", ".", "train_idx", "=", "perm_idx", "[", ":", "int", "(", "args", ".", "train_proportion", "*", "perm_idx", ".", "size", "(", "0", ")", ")", "]", "\n", "self", ".", "dev_idx", "=", "perm_idx", "[", "int", "(", "args", ".", "train_proportion", "*", "perm_idx", ".", "size", "(", "0", ")", ")", ":", "int", "(", "(", "args", ".", "train_proportion", "+", "args", ".", "dev_proportion", ")", "*", "perm_idx", ".", "size", "(", "0", ")", ")", "]", "\n", "self", ".", "test_idx", "=", "perm_idx", "[", "int", "(", "(", "args", ".", "train_proportion", "+", "args", ".", "dev_proportion", ")", "*", "perm_idx", ".", "size", "(", "0", ")", ")", ":", "]", "\n", "# print ('train,dev,test',self.train_idx.size(), self.dev_idx.size(), self.test_idx.size())", "\n", "\n", "train", "=", "static_data_split", "(", "tasker", ",", "self", ".", "train_idx", ",", "test", "=", "False", ")", "\n", "train", "=", "DataLoader", "(", "train", ",", "shuffle", "=", "True", ",", "**", "args", ".", "data_loading_params", ")", "\n", "\n", "dev", "=", "static_data_split", "(", "tasker", ",", "self", ".", "dev_idx", ",", "test", "=", "True", ")", "\n", "dev", "=", "DataLoader", "(", "dev", ",", "shuffle", "=", "False", ",", "**", "args", ".", "data_loading_params", ")", "\n", "\n", "test", "=", "static_data_split", "(", "tasker", ",", "self", ".", "test_idx", ",", "test", "=", "True", ")", "\n", "test", "=", "DataLoader", "(", "test", ",", "shuffle", "=", "False", ",", "**", "args", ".", "data_loading_params", ")", "\n", "\n", "self", ".", "tasker", "=", "tasker", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "dev", "=", "dev", "\n", "self", ".", "test", "=", "test", "\n", "\n", "\n", "", "else", ":", "#### For datsets with time", "\n", "            ", "assert", "args", ".", "train_proportion", "+", "args", ".", "dev_proportion", "<", "1", ",", "'there\\'s no space for test samples'", "\n", "#only the training one requires special handling on start, the others are fine with the split IDX.", "\n", "start", "=", "tasker", ".", "data", ".", "min_time", "+", "args", ".", "num_hist_steps", "#-1 + args.adj_mat_time_window", "\n", "end", "=", "args", ".", "train_proportion", "\n", "\n", "end", "=", "int", "(", "np", ".", "floor", "(", "tasker", ".", "data", ".", "max_time", ".", "type", "(", "torch", ".", "float", ")", "*", "end", ")", ")", "\n", "train", "=", "data_split", "(", "tasker", ",", "start", ",", "end", ",", "test", "=", "False", ")", "\n", "train", "=", "DataLoader", "(", "train", ",", "**", "args", ".", "data_loading_params", ")", "\n", "\n", "start", "=", "end", "\n", "end", "=", "args", ".", "dev_proportion", "+", "args", ".", "train_proportion", "\n", "end", "=", "int", "(", "np", ".", "floor", "(", "tasker", ".", "data", ".", "max_time", ".", "type", "(", "torch", ".", "float", ")", "*", "end", ")", ")", "\n", "if", "args", ".", "task", "==", "'link_pred'", ":", "\n", "                ", "dev", "=", "data_split", "(", "tasker", ",", "start", ",", "end", ",", "test", "=", "True", ",", "all_edges", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "dev", "=", "data_split", "(", "tasker", ",", "start", ",", "end", ",", "test", "=", "True", ")", "\n", "\n", "", "dev", "=", "DataLoader", "(", "dev", ",", "num_workers", "=", "args", ".", "data_loading_params", "[", "'num_workers'", "]", ")", "\n", "\n", "start", "=", "end", "\n", "\n", "#the +1 is because I assume that max_time exists in the dataset", "\n", "end", "=", "int", "(", "tasker", ".", "max_time", ")", "+", "1", "\n", "if", "args", ".", "task", "==", "'link_pred'", ":", "\n", "                ", "test", "=", "data_split", "(", "tasker", ",", "start", ",", "end", ",", "test", "=", "True", ",", "all_edges", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "test", "=", "data_split", "(", "tasker", ",", "start", ",", "end", ",", "test", "=", "True", ")", "\n", "\n", "", "test", "=", "DataLoader", "(", "test", ",", "num_workers", "=", "args", ".", "data_loading_params", "[", "'num_workers'", "]", ")", "\n", "\n", "print", "(", "'Dataset splits sizes:  train'", ",", "len", "(", "train", ")", ",", "'dev'", ",", "len", "(", "dev", ")", ",", "'test'", ",", "len", "(", "test", ")", ")", "\n", "\n", "\n", "\n", "self", ".", "tasker", "=", "tasker", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "dev", "=", "dev", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.splitter.data_split.__init__": [[96, 105], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tasker", ",", "start", ",", "end", ",", "test", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        start and end are indices indicating what items belong to this split\n        '''", "\n", "self", ".", "tasker", "=", "tasker", "\n", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.splitter.data_split.__len__": [[106, 108], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "end", "-", "self", ".", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.splitter.data_split.__getitem__": [[109, 113], ["splitter.data_split.tasker.get_sample"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "self", ".", "start", "+", "idx", "\n", "t", "=", "self", ".", "tasker", ".", "get_sample", "(", "idx", ",", "test", "=", "self", ".", "test", ",", "**", "self", ".", "kwargs", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.splitter.static_data_split.__init__": [[116, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tasker", ",", "indexes", ",", "test", ")", ":", "\n", "        ", "'''\n        start and end are indices indicating what items belong to this split\n        '''", "\n", "self", ".", "tasker", "=", "tasker", "\n", "self", ".", "indexes", "=", "indexes", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "adj_matrix", "=", "tasker", ".", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.splitter.static_data_split.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.splitter.static_data_split.__getitem__": [[128, 131], ["splitter.static_data_split.tasker.get_sample"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "self", ".", "indexes", "[", "idx", "]", "\n", "return", "self", ".", "tasker", ".", "get_sample", "(", "idx", ",", "test", "=", "self", ".", "test", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.__init__": [[9, 29], ["logger.Logger", "trainer.Trainer.init_optimizers", "utils.sparse_prepare_tensor", "trainer.Trainer.tasker.nodes_feats.float"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.init_optimizers", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sparse_prepare_tensor"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "splitter", ",", "gcn", ",", "classifier", ",", "comp_loss", ",", "dataset", ",", "num_classes", ")", ":", "\n", "\t\t", "self", ".", "args", "=", "args", "\n", "self", ".", "splitter", "=", "splitter", "\n", "self", ".", "tasker", "=", "splitter", ".", "tasker", "\n", "self", ".", "gcn", "=", "gcn", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "comp_loss", "=", "comp_loss", "\n", "\n", "self", ".", "num_nodes", "=", "dataset", ".", "num_nodes", "\n", "self", ".", "data", "=", "dataset", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "logger", "=", "logger", ".", "Logger", "(", "args", ",", "self", ".", "num_classes", ")", "\n", "\n", "self", ".", "init_optimizers", "(", "args", ")", "\n", "\n", "if", "self", ".", "tasker", ".", "is_static", ":", "\n", "\t\t\t", "adj_matrix", "=", "u", ".", "sparse_prepare_tensor", "(", "self", ".", "tasker", ".", "adj_matrix", ",", "torch_size", "=", "[", "self", ".", "num_nodes", "]", ",", "ignore_batch_dim", "=", "False", ")", "\n", "self", ".", "hist_adj_list", "=", "[", "adj_matrix", "]", "\n", "self", ".", "hist_ndFeats_list", "=", "[", "self", ".", "tasker", ".", "nodes_feats", ".", "float", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.init_optimizers": [[30, 37], ["trainer.Trainer.gcn.parameters", "torch.optim.Adam", "trainer.Trainer.classifier.parameters", "torch.optim.Adam", "trainer.Trainer.gcn_opt.zero_grad", "trainer.Trainer.classifier_opt.zero_grad"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.EGCN.parameters", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.EGCN.parameters"], ["", "", "def", "init_optimizers", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "params", "=", "self", ".", "gcn", ".", "parameters", "(", ")", "\n", "self", ".", "gcn_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "params", "=", "self", ".", "classifier", ".", "parameters", "(", ")", "\n", "self", ".", "classifier_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "self", ".", "gcn_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "classifier_opt", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.save_checkpoint": [[38, 40], ["torch.save"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "state", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "\t\t", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.load_checkpoint": [[41, 55], ["os.path.isfile", "print", "torch.load", "trainer.Trainer.gcn.load_state_dict", "trainer.Trainer.classifier.load_state_dict", "trainer.Trainer.gcn_opt.load_state_dict", "trainer.Trainer.classifier_opt.load_state_dict", "trainer.Trainer.logger.log_str", "trainer.Trainer.logger.log_str"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "filename", ",", "model", ")", ":", "\n", "\t\t", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "\t\t\t", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "gcn", ".", "load_state_dict", "(", "checkpoint", "[", "'gcn_dict'", "]", ")", "\n", "self", ".", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier_dict'", "]", ")", "\n", "self", ".", "gcn_opt", ".", "load_state_dict", "(", "checkpoint", "[", "'gcn_optimizer'", "]", ")", "\n", "self", ".", "classifier_opt", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier_optimizer'", "]", ")", "\n", "self", ".", "logger", ".", "log_str", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "filename", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "return", "epoch", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "log_str", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.train": [[56, 83], ["range", "trainer.Trainer.run_epoch", "trainer.Trainer.run_epoch", "trainer.Trainer.run_epoch", "len", "print", "len", "trainer.Trainer.save_node_embs_csv", "trainer.Trainer.save_node_embs_csv", "trainer.Trainer.save_node_embs_csv", "print", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.run_epoch", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.run_epoch", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.run_epoch", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.save_node_embs_csv", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.save_node_embs_csv", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.save_node_embs_csv"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "tr_step", "=", "0", "\n", "best_eval_valid", "=", "0", "\n", "eval_valid", "=", "0", "\n", "epochs_without_impr", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "self", ".", "args", ".", "num_epochs", ")", ":", "\n", "\t\t\t", "eval_train", ",", "nodes_embs", "=", "self", ".", "run_epoch", "(", "self", ".", "splitter", ".", "train", ",", "e", ",", "'TRAIN'", ",", "grad", "=", "True", ")", "\n", "if", "len", "(", "self", ".", "splitter", ".", "dev", ")", ">", "0", "and", "e", ">", "self", ".", "args", ".", "eval_after_epochs", ":", "\n", "\t\t\t\t", "eval_valid", ",", "_", "=", "self", ".", "run_epoch", "(", "self", ".", "splitter", ".", "dev", ",", "e", ",", "'VALID'", ",", "grad", "=", "False", ")", "\n", "if", "eval_valid", ">", "best_eval_valid", ":", "\n", "\t\t\t\t\t", "best_eval_valid", "=", "eval_valid", "\n", "epochs_without_impr", "=", "0", "\n", "print", "(", "'### w'", "+", "str", "(", "self", ".", "args", ".", "rank", ")", "+", "') ep '", "+", "str", "(", "e", ")", "+", "' - Best valid measure:'", "+", "str", "(", "eval_valid", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "epochs_without_impr", "+=", "1", "\n", "if", "epochs_without_impr", ">", "self", ".", "args", ".", "early_stop_patience", ":", "\n", "\t\t\t\t\t\t", "print", "(", "'### w'", "+", "str", "(", "self", ".", "args", ".", "rank", ")", "+", "') ep '", "+", "str", "(", "e", ")", "+", "' - Early stop.'", ")", "\n", "break", "\n", "\n", "", "", "", "if", "len", "(", "self", ".", "splitter", ".", "test", ")", ">", "0", "and", "eval_valid", "==", "best_eval_valid", "and", "e", ">", "self", ".", "args", ".", "eval_after_epochs", ":", "\n", "\t\t\t\t", "eval_test", ",", "_", "=", "self", ".", "run_epoch", "(", "self", ".", "splitter", ".", "test", ",", "e", ",", "'TEST'", ",", "grad", "=", "False", ")", "\n", "\n", "if", "self", ".", "args", ".", "save_node_embeddings", ":", "\n", "\t\t\t\t\t", "self", ".", "save_node_embs_csv", "(", "nodes_embs", ",", "self", ".", "splitter", ".", "train_idx", ",", "log_file", "+", "'_train_nodeembs.csv.gz'", ")", "\n", "self", ".", "save_node_embs_csv", "(", "nodes_embs", ",", "self", ".", "splitter", ".", "dev_idx", ",", "log_file", "+", "'_valid_nodeembs.csv.gz'", ")", "\n", "self", ".", "save_node_embs_csv", "(", "nodes_embs", ",", "self", ".", "splitter", ".", "test_idx", ",", "log_file", "+", "'_test_nodeembs.csv.gz'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.run_epoch": [[85, 117], ["time.time", "trainer.Trainer.logger.log_epoch_start", "torch.set_grad_enabled", "torch.set_grad_enabled", "trainer.Trainer.logger.log_epoch_done", "len", "trainer.Trainer.predict", "trainer.Trainer.comp_loss", "trainer.Trainer.prepare_static_sample", "trainer.Trainer.prepare_sample", "trainer.Trainer.logger.log_minibatch", "trainer.Trainer.logger.log_minibatch", "trainer.Trainer.optim_step", "trainer.Trainer.detach", "trainer.Trainer.detach"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.log_epoch_start", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.log_epoch_done", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.predict", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.prepare_static_sample", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.prepare_sample", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.log_minibatch", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.log_minibatch", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.optim_step"], ["", "", "", "", "def", "run_epoch", "(", "self", ",", "split", ",", "epoch", ",", "set_name", ",", "grad", ")", ":", "\n", "\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "log_interval", "=", "999", "\n", "if", "set_name", "==", "'TEST'", ":", "\n", "\t\t\t", "log_interval", "=", "1", "\n", "", "self", ".", "logger", ".", "log_epoch_start", "(", "epoch", ",", "len", "(", "split", ")", ",", "set_name", ",", "minibatch_log_interval", "=", "log_interval", ")", "\n", "\n", "torch", ".", "set_grad_enabled", "(", "grad", ")", "\n", "for", "s", "in", "split", ":", "\n", "\t\t\t", "if", "self", ".", "tasker", ".", "is_static", ":", "\n", "\t\t\t\t", "s", "=", "self", ".", "prepare_static_sample", "(", "s", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "s", "=", "self", ".", "prepare_sample", "(", "s", ")", "\n", "\n", "", "predictions", ",", "nodes_embs", "=", "self", ".", "predict", "(", "s", ".", "hist_adj_list", ",", "\n", "s", ".", "hist_ndFeats_list", ",", "\n", "s", ".", "label_sp", "[", "'idx'", "]", ",", "\n", "s", ".", "node_mask_list", ")", "\n", "\n", "loss", "=", "self", ".", "comp_loss", "(", "predictions", ",", "s", ".", "label_sp", "[", "'vals'", "]", ")", "\n", "# print(loss)", "\n", "if", "set_name", "in", "[", "'TEST'", ",", "'VALID'", "]", "and", "self", ".", "args", ".", "task", "==", "'link_pred'", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "log_minibatch", "(", "predictions", ",", "s", ".", "label_sp", "[", "'vals'", "]", ",", "loss", ".", "detach", "(", ")", ",", "adj", "=", "s", ".", "label_sp", "[", "'idx'", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "log_minibatch", "(", "predictions", ",", "s", ".", "label_sp", "[", "'vals'", "]", ",", "loss", ".", "detach", "(", ")", ")", "\n", "", "if", "grad", ":", "\n", "\t\t\t\t", "self", ".", "optim_step", "(", "loss", ")", "\n", "\n", "", "", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "eval_measure", "=", "self", ".", "logger", ".", "log_epoch_done", "(", ")", "\n", "\n", "return", "eval_measure", ",", "nodes_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.predict": [[118, 131], ["trainer.Trainer.gcn", "range", "torch.cat", "trainer.Trainer.gather_node_embs", "trainer.Trainer.classifier", "torch.cat.append", "node_indices.size"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.gather_node_embs"], ["", "def", "predict", "(", "self", ",", "hist_adj_list", ",", "hist_ndFeats_list", ",", "node_indices", ",", "mask_list", ")", ":", "\n", "\t\t", "nodes_embs", "=", "self", ".", "gcn", "(", "hist_adj_list", ",", "\n", "hist_ndFeats_list", ",", "\n", "mask_list", ")", "\n", "\n", "predict_batch_size", "=", "100000", "\n", "gather_predictions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", "+", "(", "node_indices", ".", "size", "(", "1", ")", "//", "predict_batch_size", ")", ")", ":", "\n", "\t\t\t", "cls_input", "=", "self", ".", "gather_node_embs", "(", "nodes_embs", ",", "node_indices", "[", ":", ",", "i", "*", "predict_batch_size", ":", "(", "i", "+", "1", ")", "*", "predict_batch_size", "]", ")", "\n", "predictions", "=", "self", ".", "classifier", "(", "cls_input", ")", "\n", "gather_predictions", ".", "append", "(", "predictions", ")", "\n", "", "gather_predictions", "=", "torch", ".", "cat", "(", "gather_predictions", ",", "dim", "=", "0", ")", "\n", "return", "gather_predictions", ",", "nodes_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.gather_node_embs": [[132, 138], ["torch.cat", "cls_input.append"], "methods", ["None"], ["", "def", "gather_node_embs", "(", "self", ",", "nodes_embs", ",", "node_indices", ")", ":", "\n", "\t\t", "cls_input", "=", "[", "]", "\n", "\n", "for", "node_set", "in", "node_indices", ":", "\n", "\t\t\t", "cls_input", ".", "append", "(", "nodes_embs", "[", "node_set", "]", ")", "\n", "", "return", "torch", ".", "cat", "(", "cls_input", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.optim_step": [[139, 149], ["loss.backward", "trainer.Trainer.gcn_opt.step", "trainer.Trainer.classifier_opt.step", "trainer.Trainer.gcn_opt.zero_grad", "trainer.Trainer.classifier_opt.zero_grad"], "methods", ["None"], ["", "def", "optim_step", "(", "self", ",", "loss", ")", ":", "\n", "\t\t", "self", ".", "tr_step", "+=", "1", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "tr_step", "%", "self", ".", "args", ".", "steps_accum_gradients", "==", "0", ":", "\n", "\t\t\t", "self", ".", "gcn_opt", ".", "step", "(", ")", "\n", "self", ".", "classifier_opt", ".", "step", "(", ")", "\n", "\n", "self", ".", "gcn_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "classifier_opt", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.prepare_sample": [[151, 174], ["utils.Namespace", "enumerate", "trainer.Trainer.ignore_batch_dim", "label_sp[].type().to", "utils.sparse_prepare_tensor", "utils.sparse_prepare_tensor.to", "trainer.Trainer.tasker.prepare_node_feats", "trainer.Trainer.to", "node_mask.to().t", "label_sp[].to().t", "label_sp[].to", "label_sp[].type", "node_mask.to", "label_sp[].to"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.ignore_batch_dim", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sparse_prepare_tensor", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.prepare_node_feats"], ["", "", "def", "prepare_sample", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "sample", "=", "u", ".", "Namespace", "(", "sample", ")", "\n", "for", "i", ",", "adj", "in", "enumerate", "(", "sample", ".", "hist_adj_list", ")", ":", "\n", "\t\t\t", "adj", "=", "u", ".", "sparse_prepare_tensor", "(", "adj", ",", "torch_size", "=", "[", "self", ".", "num_nodes", "]", ")", "\n", "sample", ".", "hist_adj_list", "[", "i", "]", "=", "adj", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "nodes", "=", "self", ".", "tasker", ".", "prepare_node_feats", "(", "sample", ".", "hist_ndFeats_list", "[", "i", "]", ")", "\n", "\n", "sample", ".", "hist_ndFeats_list", "[", "i", "]", "=", "nodes", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "node_mask", "=", "sample", ".", "node_mask_list", "[", "i", "]", "\n", "sample", ".", "node_mask_list", "[", "i", "]", "=", "node_mask", ".", "to", "(", "self", ".", "args", ".", "device", ")", ".", "t", "(", ")", "#transposed to have same dimensions as scorer", "\n", "\n", "", "label_sp", "=", "self", ".", "ignore_batch_dim", "(", "sample", ".", "label_sp", ")", "\n", "\n", "if", "self", ".", "args", ".", "task", "in", "[", "\"link_pred\"", ",", "\"edge_cls\"", "]", ":", "\n", "\t\t\t", "label_sp", "[", "'idx'", "]", "=", "label_sp", "[", "'idx'", "]", ".", "to", "(", "self", ".", "args", ".", "device", ")", ".", "t", "(", ")", "####### ALDO TO CHECK why there was the .t() -----> because I concatenate embeddings when there are pairs of them, the embeddings are row vectors after the transpose", "\n", "", "else", ":", "\n", "\t\t\t", "label_sp", "[", "'idx'", "]", "=", "label_sp", "[", "'idx'", "]", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "", "label_sp", "[", "'vals'", "]", "=", "label_sp", "[", "'vals'", "]", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "sample", ".", "label_sp", "=", "label_sp", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.prepare_static_sample": [[175, 188], ["utils.Namespace"], "methods", ["None"], ["", "def", "prepare_static_sample", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "sample", "=", "u", ".", "Namespace", "(", "sample", ")", "\n", "\n", "sample", ".", "hist_adj_list", "=", "self", ".", "hist_adj_list", "\n", "\n", "sample", ".", "hist_ndFeats_list", "=", "self", ".", "hist_ndFeats_list", "\n", "\n", "label_sp", "=", "{", "}", "\n", "label_sp", "[", "'idx'", "]", "=", "[", "sample", ".", "idx", "]", "\n", "label_sp", "[", "'vals'", "]", "=", "sample", ".", "label", "\n", "sample", ".", "label_sp", "=", "label_sp", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.ignore_batch_dim": [[189, 194], ["None"], "methods", ["None"], ["", "def", "ignore_batch_dim", "(", "self", ",", "adj", ")", ":", "\n", "\t\t", "if", "self", ".", "args", ".", "task", "in", "[", "\"link_pred\"", ",", "\"edge_cls\"", "]", ":", "\n", "\t\t\t", "adj", "[", "'idx'", "]", "=", "adj", "[", "'idx'", "]", "[", "0", "]", "\n", "", "adj", "[", "'vals'", "]", "=", "adj", "[", "'vals'", "]", "[", "0", "]", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.trainer.Trainer.save_node_embs_csv": [[195, 203], ["pandas.DataFrame().to_csv", "torch.DoubleTensor", "csv_node_embs.append", "torch.cat().detach().numpy", "pandas.DataFrame", "numpy.array", "torch.cat().detach", "torch.cat", "nodes_embs[].double"], "methods", ["None"], ["", "def", "save_node_embs_csv", "(", "self", ",", "nodes_embs", ",", "indexes", ",", "file_name", ")", ":", "\n", "\t\t", "csv_node_embs", "=", "[", "]", "\n", "for", "node_id", "in", "indexes", ":", "\n", "\t\t\t", "orig_ID", "=", "torch", ".", "DoubleTensor", "(", "[", "self", ".", "tasker", ".", "data", ".", "contID_to_origID", "[", "node_id", "]", "]", ")", "\n", "\n", "csv_node_embs", ".", "append", "(", "torch", ".", "cat", "(", "(", "orig_ID", ",", "nodes_embs", "[", "node_id", "]", ".", "double", "(", ")", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "csv_node_embs", ")", ")", ".", "to_csv", "(", "file_name", ",", "header", "=", "None", ",", "index", "=", "None", ",", "compression", "=", "'gzip'", ")", "\n", "#print ('Node embs saved in',file_name)", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.edge_cls_tasker.Edge_Cls_Tasker.__init__": [[7, 21], ["edge_cls_tasker.Edge_Cls_Tasker.build_get_node_feats", "edge_cls_tasker.Edge_Cls_Tasker.build_prepare_node_feats"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_get_node_feats", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_prepare_node_feats"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "self", ".", "data", "=", "dataset", "\n", "#max_time for link pred should be one before", "\n", "self", ".", "max_time", "=", "dataset", ".", "max_time", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_classes", "=", "dataset", ".", "num_classes", "\n", "\n", "if", "not", "args", ".", "use_1_hot_node_feats", ":", "\n", "\t\t\t", "self", ".", "feats_per_node", "=", "dataset", ".", "feats_per_node", "\n", "\n", "", "self", ".", "get_node_feats", "=", "self", ".", "build_get_node_feats", "(", "args", ",", "dataset", ")", "\n", "self", ".", "prepare_node_feats", "=", "self", ".", "build_prepare_node_feats", "(", "args", ",", "dataset", ")", "\n", "\n", "self", ".", "is_static", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.edge_cls_tasker.Edge_Cls_Tasker.build_prepare_node_feats": [[22, 32], ["utils.sparse_prepare_tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sparse_prepare_tensor"], ["", "def", "build_prepare_node_feats", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "if", "args", ".", "use_2_hot_node_feats", "or", "args", ".", "use_1_hot_node_feats", ":", "\n", "\t\t\t", "def", "prepare_node_feats", "(", "node_feats", ")", ":", "\n", "\t\t\t\t", "return", "u", ".", "sparse_prepare_tensor", "(", "node_feats", ",", "\n", "torch_size", "=", "[", "dataset", ".", "num_nodes", ",", "\n", "self", ".", "feats_per_node", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "prepare_node_feats", "=", "self", ".", "data", ".", "prepare_node_feats", "\n", "\n", "", "return", "prepare_node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.edge_cls_tasker.Edge_Cls_Tasker.build_get_node_feats": [[34, 55], ["taskers_utils.get_max_degs", "taskers_utils.get_2_hot_deg_feats", "taskers_utils.get_max_degs", "taskers_utils.get_1_hot_deg_feats"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_1_hot_deg_feats"], ["", "def", "build_get_node_feats", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "if", "args", ".", "use_2_hot_node_feats", ":", "\n", "\t\t\t", "max_deg_out", ",", "max_deg_in", "=", "tu", ".", "get_max_degs", "(", "args", ",", "dataset", ")", "\n", "self", ".", "feats_per_node", "=", "max_deg_out", "+", "max_deg_in", "\n", "def", "get_node_feats", "(", "adj", ")", ":", "\n", "\t\t\t\t", "return", "tu", ".", "get_2_hot_deg_feats", "(", "adj", ",", "\n", "max_deg_out", ",", "\n", "max_deg_in", ",", "\n", "dataset", ".", "num_nodes", ")", "\n", "", "", "elif", "args", ".", "use_1_hot_node_feats", ":", "\n", "\t\t\t", "max_deg", ",", "_", "=", "tu", ".", "get_max_degs", "(", "args", ",", "dataset", ")", "\n", "self", ".", "feats_per_node", "=", "max_deg", "\n", "def", "get_node_feats", "(", "adj", ")", ":", "\n", "\t\t\t\t", "return", "tu", ".", "get_1_hot_deg_feats", "(", "adj", ",", "\n", "max_deg", ",", "\n", "dataset", ".", "num_nodes", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "def", "get_node_feats", "(", "adj", ")", ":", "\n", "\t\t\t\t", "return", "dataset", ".", "nodes_feats", "\n", "\n", "", "", "return", "get_node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.edge_cls_tasker.Edge_Cls_Tasker.get_sample": [[57, 84], ["range", "taskers_utils.get_edge_labels", "taskers_utils.get_sp_adj", "taskers_utils.get_node_mask", "edge_cls_tasker.Edge_Cls_Tasker.get_node_feats", "taskers_utils.normalize_adj", "hist_adj_list.append", "hist_ndFeats_list.append", "hist_mask_list.append"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_edge_labels", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_node_mask", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.normalize_adj"], ["", "def", "get_sample", "(", "self", ",", "idx", ",", "test", ")", ":", "\n", "\t\t", "hist_adj_list", "=", "[", "]", "\n", "hist_ndFeats_list", "=", "[", "]", "\n", "hist_mask_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "idx", "-", "self", ".", "args", ".", "num_hist_steps", ",", "idx", "+", "1", ")", ":", "\n", "\t\t\t", "cur_adj", "=", "tu", ".", "get_sp_adj", "(", "edges", "=", "self", ".", "data", ".", "edges", ",", "\n", "time", "=", "i", ",", "\n", "weighted", "=", "True", ",", "\n", "time_window", "=", "self", ".", "args", ".", "adj_mat_time_window", ")", "\n", "node_mask", "=", "tu", ".", "get_node_mask", "(", "cur_adj", ",", "self", ".", "data", ".", "num_nodes", ")", "\n", "node_feats", "=", "self", ".", "get_node_feats", "(", "cur_adj", ")", "\n", "cur_adj", "=", "tu", ".", "normalize_adj", "(", "adj", "=", "cur_adj", ",", "num_nodes", "=", "self", ".", "data", ".", "num_nodes", ")", "\n", "\n", "hist_adj_list", ".", "append", "(", "cur_adj", ")", "\n", "hist_ndFeats_list", ".", "append", "(", "node_feats", ")", "\n", "hist_mask_list", ".", "append", "(", "node_mask", ")", "\n", "\n", "", "label_adj", "=", "tu", ".", "get_edge_labels", "(", "edges", "=", "self", ".", "data", ".", "edges", ",", "\n", "time", "=", "idx", ")", "\n", "\n", "\n", "return", "{", "'idx'", ":", "idx", ",", "\n", "'hist_adj_list'", ":", "hist_adj_list", ",", "\n", "'hist_ndFeats_list'", ":", "hist_ndFeats_list", ",", "\n", "'label_sp'", ":", "label_adj", ",", "\n", "'node_mask_list'", ":", "hist_mask_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.sbm_dl.sbm_dataset.__init__": [[6, 34], ["utils.Namespace", "utils.Namespace", "sbm_dl.sbm_dataset.load_edges", "utils.aggregate_by_time", "utils.aggregate_by_time.max", "utils.aggregate_by_time.min", "print", "sbm_dl.sbm_dataset.cluster_negs_and_positives", "edges[].unique().size", "sbm_dl.sbm_dataset.edges_to_sp_dict", "int", "torch.rand", "sbm_dl.sbm_dataset.get_num_nodes", "sbm_dl.sbm_dataset.size", "edges[].unique"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.load_edges", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.aggregate_by_time", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.cluster_negs_and_positives", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.edges_to_sp_dict", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.get_num_nodes"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "assert", "args", ".", "task", "in", "[", "'link_pred'", "]", ",", "'sbm only implements link_pred'", "\n", "self", ".", "ecols", "=", "u", ".", "Namespace", "(", "{", "'FromNodeId'", ":", "0", ",", "\n", "'ToNodeId'", ":", "1", ",", "\n", "'Weight'", ":", "2", ",", "\n", "'TimeStep'", ":", "3", "\n", "}", ")", "\n", "args", ".", "sbm_args", "=", "u", ".", "Namespace", "(", "args", ".", "sbm_args", ")", "\n", "\n", "#build edge data structure", "\n", "edges", "=", "self", ".", "load_edges", "(", "args", ".", "sbm_args", ")", "\n", "timesteps", "=", "u", ".", "aggregate_by_time", "(", "edges", "[", ":", ",", "self", ".", "ecols", ".", "TimeStep", "]", ",", "args", ".", "sbm_args", ".", "aggr_time", ")", "\n", "self", ".", "max_time", "=", "timesteps", ".", "max", "(", ")", "\n", "self", ".", "min_time", "=", "timesteps", ".", "min", "(", ")", "\n", "print", "(", "'TIME'", ",", "self", ".", "max_time", ",", "self", ".", "min_time", ")", "\n", "edges", "[", ":", ",", "self", ".", "ecols", ".", "TimeStep", "]", "=", "timesteps", "\n", "\n", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", "=", "self", ".", "cluster_negs_and_positives", "(", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", ")", "\n", "self", ".", "num_classes", "=", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "edges", "=", "self", ".", "edges_to_sp_dict", "(", "edges", ")", "\n", "\n", "#random node features", "\n", "self", ".", "num_nodes", "=", "int", "(", "self", ".", "get_num_nodes", "(", "edges", ")", ")", "\n", "self", ".", "feats_per_node", "=", "args", ".", "sbm_args", ".", "feats_per_node", "\n", "self", ".", "nodes_feats", "=", "torch", ".", "rand", "(", "(", "self", ".", "num_nodes", ",", "self", ".", "feats_per_node", ")", ")", "\n", "\n", "self", ".", "num_non_existing", "=", "self", ".", "num_nodes", "**", "2", "-", "edges", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.sbm_dl.sbm_dataset.cluster_negs_and_positives": [[35, 41], ["None"], "methods", ["None"], ["", "def", "cluster_negs_and_positives", "(", "self", ",", "ratings", ")", ":", "\n", "        ", "pos_indices", "=", "ratings", ">=", "0", "\n", "neg_indices", "=", "ratings", "<", "0", "\n", "ratings", "[", "pos_indices", "]", "=", "1", "\n", "ratings", "[", "neg_indices", "]", "=", "0", "\n", "return", "ratings", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.sbm_dl.sbm_dataset.prepare_node_feats": [[42, 45], ["None"], "methods", ["None"], ["", "def", "prepare_node_feats", "(", "self", ",", "node_feats", ")", ":", "\n", "        ", "node_feats", "=", "node_feats", "[", "0", "]", "\n", "return", "node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.sbm_dl.sbm_dataset.edges_to_sp_dict": [[46, 54], ["None"], "methods", ["None"], ["", "def", "edges_to_sp_dict", "(", "self", ",", "edges", ")", ":", "\n", "        ", "idx", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "\n", "self", ".", "ecols", ".", "ToNodeId", ",", "\n", "self", ".", "ecols", ".", "TimeStep", "]", "]", "\n", "\n", "vals", "=", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", "\n", "return", "{", "'idx'", ":", "idx", ",", "\n", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.sbm_dl.sbm_dataset.get_num_nodes": [[55, 59], ["all_ids.max"], "methods", ["None"], ["", "def", "get_num_nodes", "(", "self", ",", "edges", ")", ":", "\n", "        ", "all_ids", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "self", ".", "ecols", ".", "ToNodeId", "]", "]", "\n", "num_nodes", "=", "all_ids", ".", "max", "(", ")", "+", "1", "\n", "return", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.sbm_dl.sbm_dataset.load_edges": [[60, 67], ["os.path.join", "torch.tensor", "open", "f.read().splitlines", "float", "f.read", "row.split"], "methods", ["None"], ["", "def", "load_edges", "(", "self", ",", "sbm_args", ",", "starting_line", "=", "1", ")", ":", "\n", "        ", "file", "=", "os", ".", "path", ".", "join", "(", "sbm_args", ".", "folder", ",", "sbm_args", ".", "edges_file", ")", "\n", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "edges", "=", "[", "[", "float", "(", "r", ")", "for", "r", "in", "row", ".", "split", "(", "','", ")", "]", "for", "row", "in", "lines", "[", "starting_line", ":", "]", "]", "\n", "edges", "=", "torch", ".", "tensor", "(", "edges", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.sbm_dl.sbm_dataset.make_contigous_node_ids": [[68, 73], ["new_edges.unique"], "methods", ["None"], ["", "def", "make_contigous_node_ids", "(", "self", ",", "edges", ")", ":", "\n", "        ", "new_edges", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "self", ".", "ecols", ".", "ToNodeId", "]", "]", "\n", "_", ",", "new_edges", "=", "new_edges", ".", "unique", "(", "return_inverse", "=", "True", ")", "\n", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "self", ".", "ecols", ".", "ToNodeId", "]", "]", "=", "new_edges", "\n", "return", "edges", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.__init__": [[17, 41], ["str", "logging.info", "logging.info", "logging.info", "print", "logging.basicConfig", "datetime.datetime.today().strftime", "print", "logging.basicConfig", "print", "logging.basicConfig", "pprint.pformat", "str", "datetime.datetime.today"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "num_classes", ",", "minibatch_log_interval", "=", "10", ")", ":", "\n", "\n", "        ", "if", "args", "is", "not", "None", ":", "\n", "            ", "currdate", "=", "str", "(", "datetime", ".", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "'%Y%m%d%H%M%S'", ")", ")", "\n", "self", ".", "log_name", "=", "'log/log_'", "+", "args", ".", "data", "+", "'_'", "+", "args", ".", "task", "+", "'_'", "+", "args", ".", "model", "+", "'_'", "+", "currdate", "+", "'_r'", "+", "str", "(", "args", ".", "rank", ")", "+", "'.log'", "\n", "\n", "if", "args", ".", "use_logfile", ":", "\n", "                ", "print", "(", "\"Log file:\"", ",", "self", ".", "log_name", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "self", ".", "log_name", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Log: STDOUT\"", ")", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "", "logging", ".", "info", "(", "'*** PARAMETERS ***'", ")", "\n", "logging", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ".", "__dict__", ")", ")", "# displays the string", "\n", "logging", ".", "info", "(", "''", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Log: STDOUT\"", ")", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "minibatch_log_interval", "=", "minibatch_log_interval", "\n", "self", ".", "eval_k_list", "=", "[", "10", ",", "100", ",", "1000", "]", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.get_log_file_name": [[43, 45], ["None"], "methods", ["None"], ["", "def", "get_log_file_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_name", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.log_epoch_start": [[46, 93], ["range", "logging.info", "time.monotonic", "range", "str"], "methods", ["None"], ["", "def", "log_epoch_start", "(", "self", ",", "epoch", ",", "num_minibatches", ",", "set", ",", "minibatch_log_interval", "=", "None", ")", ":", "\n", "#ALDO", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "######", "\n", "self", ".", "set", "=", "set", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "errors", "=", "[", "]", "\n", "self", ".", "MRRs", "=", "[", "]", "\n", "self", ".", "MAPs", "=", "[", "]", "\n", "#self.time_step_sizes = []", "\n", "self", ".", "conf_mat_tp", "=", "{", "}", "\n", "self", ".", "conf_mat_fn", "=", "{", "}", "\n", "self", ".", "conf_mat_fp", "=", "{", "}", "\n", "self", ".", "conf_mat_tp_at_k", "=", "{", "}", "\n", "self", ".", "conf_mat_fn_at_k", "=", "{", "}", "\n", "self", ".", "conf_mat_fp_at_k", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "eval_k_list", ":", "\n", "            ", "self", ".", "conf_mat_tp_at_k", "[", "k", "]", "=", "{", "}", "\n", "self", ".", "conf_mat_fn_at_k", "[", "k", "]", "=", "{", "}", "\n", "self", ".", "conf_mat_fp_at_k", "[", "k", "]", "=", "{", "}", "\n", "\n", "", "for", "cl", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "conf_mat_tp", "[", "cl", "]", "=", "0", "\n", "self", ".", "conf_mat_fn", "[", "cl", "]", "=", "0", "\n", "self", ".", "conf_mat_fp", "[", "cl", "]", "=", "0", "\n", "for", "k", "in", "self", ".", "eval_k_list", ":", "\n", "                ", "self", ".", "conf_mat_tp_at_k", "[", "k", "]", "[", "cl", "]", "=", "0", "\n", "self", ".", "conf_mat_fn_at_k", "[", "k", "]", "[", "cl", "]", "=", "0", "\n", "self", ".", "conf_mat_fp_at_k", "[", "k", "]", "[", "cl", "]", "=", "0", "\n", "\n", "", "", "if", "self", ".", "set", "==", "\"TEST\"", ":", "\n", "            ", "self", ".", "conf_mat_tp_list", "=", "{", "}", "\n", "self", ".", "conf_mat_fn_list", "=", "{", "}", "\n", "self", ".", "conf_mat_fp_list", "=", "{", "}", "\n", "for", "cl", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "self", ".", "conf_mat_tp_list", "[", "cl", "]", "=", "[", "]", "\n", "self", ".", "conf_mat_fn_list", "[", "cl", "]", "=", "[", "]", "\n", "self", ".", "conf_mat_fp_list", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "batch_sizes", "=", "[", "]", "\n", "self", ".", "minibatch_done", "=", "0", "\n", "self", ".", "num_minibatches", "=", "num_minibatches", "\n", "if", "minibatch_log_interval", "is", "not", "None", ":", "\n", "            ", "self", ".", "minibatch_log_interval", "=", "minibatch_log_interval", "\n", "", "logging", ".", "info", "(", "'################ '", "+", "set", "+", "' epoch '", "+", "str", "(", "epoch", ")", "+", "' ###################'", ")", "\n", "self", ".", "lasttime", "=", "time", ".", "monotonic", "(", ")", "\n", "self", ".", "ep_time", "=", "self", ".", "lasttime", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.log_minibatch": [[94, 150], ["torch.tensor", "logger.Logger.eval_predicitions", "predictions.size", "logger.Logger.batch_sizes.append", "logger.Logger.losses.append", "logger.Logger.errors.append", "logger.Logger.MRRs.append", "logger.Logger.MAPs.append", "range", "time.monotonic", "torch.softmax", "logger.Logger.get_MRR", "torch.tensor", "logger.Logger.get_MAP", "logger.Logger.eval_predicitions_at_k", "logger.Logger.calc_epoch_metric", "logger.Logger.calc_epoch_metric", "logger.Logger.calc_epoch_metric", "torch.stack", "logging.info", "logging.info", "logger.Logger.calc_microavg_eval_measures", "logging.info", "range", "logging.info", "logger.Logger.conf_mat_tp_list[].append", "logger.Logger.conf_mat_fn_list[].append", "logger.Logger.conf_mat_fp_list[].append", "logger.Logger.calc_eval_measures_per_class", "logging.info", "torch.stack.mean", "time.monotonic"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.eval_predicitions", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.get_MRR", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.get_MAP", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.eval_predicitions_at_k", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_epoch_metric", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_epoch_metric", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_epoch_metric", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_microavg_eval_measures", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_eval_measures_per_class"], ["", "def", "log_minibatch", "(", "self", ",", "predictions", ",", "true_classes", ",", "loss", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "probs", "=", "torch", ".", "softmax", "(", "predictions", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "if", "self", ".", "set", "in", "[", "'TEST'", ",", "'VALID'", "]", "and", "self", ".", "args", ".", "task", "==", "'link_pred'", ":", "\n", "            ", "MRR", "=", "self", ".", "get_MRR", "(", "probs", ",", "true_classes", ",", "kwargs", "[", "'adj'", "]", ",", "do_softmax", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "MRR", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "\n", "", "MAP", "=", "torch", ".", "tensor", "(", "self", ".", "get_MAP", "(", "probs", ",", "true_classes", ",", "do_softmax", "=", "False", ")", ")", "\n", "\n", "error", ",", "conf_mat_per_class", "=", "self", ".", "eval_predicitions", "(", "predictions", ",", "true_classes", ",", "self", ".", "num_classes", ")", "\n", "conf_mat_per_class_at_k", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "eval_k_list", ":", "\n", "            ", "conf_mat_per_class_at_k", "[", "k", "]", "=", "self", ".", "eval_predicitions_at_k", "(", "predictions", ",", "true_classes", ",", "self", ".", "num_classes", ",", "k", ")", "\n", "\n", "", "batch_size", "=", "predictions", ".", "size", "(", "0", ")", "\n", "self", ".", "batch_sizes", ".", "append", "(", "batch_size", ")", "\n", "\n", "self", ".", "losses", ".", "append", "(", "loss", ")", "#loss.detach()", "\n", "self", ".", "errors", ".", "append", "(", "error", ")", "\n", "self", ".", "MRRs", ".", "append", "(", "MRR", ")", "\n", "self", ".", "MAPs", ".", "append", "(", "MAP", ")", "\n", "for", "cl", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "conf_mat_tp", "[", "cl", "]", "+=", "conf_mat_per_class", ".", "true_positives", "[", "cl", "]", "\n", "self", ".", "conf_mat_fn", "[", "cl", "]", "+=", "conf_mat_per_class", ".", "false_negatives", "[", "cl", "]", "\n", "self", ".", "conf_mat_fp", "[", "cl", "]", "+=", "conf_mat_per_class", ".", "false_positives", "[", "cl", "]", "\n", "for", "k", "in", "self", ".", "eval_k_list", ":", "\n", "                ", "self", ".", "conf_mat_tp_at_k", "[", "k", "]", "[", "cl", "]", "+=", "conf_mat_per_class_at_k", "[", "k", "]", ".", "true_positives", "[", "cl", "]", "\n", "self", ".", "conf_mat_fn_at_k", "[", "k", "]", "[", "cl", "]", "+=", "conf_mat_per_class_at_k", "[", "k", "]", ".", "false_negatives", "[", "cl", "]", "\n", "self", ".", "conf_mat_fp_at_k", "[", "k", "]", "[", "cl", "]", "+=", "conf_mat_per_class_at_k", "[", "k", "]", ".", "false_positives", "[", "cl", "]", "\n", "", "if", "self", ".", "set", "==", "\"TEST\"", ":", "\n", "                ", "self", ".", "conf_mat_tp_list", "[", "cl", "]", ".", "append", "(", "conf_mat_per_class", ".", "true_positives", "[", "cl", "]", ")", "\n", "self", ".", "conf_mat_fn_list", "[", "cl", "]", ".", "append", "(", "conf_mat_per_class", ".", "false_negatives", "[", "cl", "]", ")", "\n", "self", ".", "conf_mat_fp_list", "[", "cl", "]", ".", "append", "(", "conf_mat_per_class", ".", "false_positives", "[", "cl", "]", ")", "\n", "\n", "", "", "self", ".", "minibatch_done", "+=", "1", "\n", "if", "self", ".", "minibatch_done", "%", "self", ".", "minibatch_log_interval", "==", "0", ":", "\n", "            ", "mb_error", "=", "self", ".", "calc_epoch_metric", "(", "self", ".", "batch_sizes", ",", "self", ".", "errors", ")", "\n", "mb_MRR", "=", "self", ".", "calc_epoch_metric", "(", "self", ".", "batch_sizes", ",", "self", ".", "MRRs", ")", "\n", "mb_MAP", "=", "self", ".", "calc_epoch_metric", "(", "self", ".", "batch_sizes", ",", "self", ".", "MAPs", ")", "\n", "partial_losses", "=", "torch", ".", "stack", "(", "self", ".", "losses", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' batch %d / %d - partial error %0.4f - partial loss %0.4f - partial MRR  %0.4f - partial MAP %0.4f'", "%", "(", "self", ".", "minibatch_done", ",", "self", ".", "num_minibatches", ",", "mb_error", ",", "partial_losses", ".", "mean", "(", ")", ",", "mb_MRR", ",", "mb_MAP", ")", ")", "\n", "\n", "tp", "=", "conf_mat_per_class", ".", "true_positives", "\n", "fn", "=", "conf_mat_per_class", ".", "false_negatives", "\n", "fp", "=", "conf_mat_per_class", ".", "false_positives", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' batch %d / %d -  partial tp %s,fn %s,fp %s'", "%", "(", "self", ".", "minibatch_done", ",", "self", ".", "num_minibatches", ",", "tp", ",", "fn", ",", "fp", ")", ")", "\n", "precision", ",", "recall", ",", "f1", "=", "self", ".", "calc_microavg_eval_measures", "(", "tp", ",", "fn", ",", "fp", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' batch %d / %d - measures partial microavg - precision %0.4f - recall %0.4f - f1 %0.4f '", "%", "(", "self", ".", "minibatch_done", ",", "self", ".", "num_minibatches", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "for", "cl", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "cl_precision", ",", "cl_recall", ",", "cl_f1", "=", "self", ".", "calc_eval_measures_per_class", "(", "tp", ",", "fn", ",", "fp", ",", "cl", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' batch %d / %d - measures partial for class %d - precision %0.4f - recall %0.4f - f1 %0.4f '", "%", "(", "self", ".", "minibatch_done", ",", "self", ".", "num_minibatches", ",", "cl", ",", "cl_precision", ",", "cl_recall", ",", "cl_f1", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "self", ".", "set", "+", "' batch %d / %d - Batch time %d '", "%", "(", "self", ".", "minibatch_done", ",", "self", ".", "num_minibatches", ",", "(", "time", ".", "monotonic", "(", ")", "-", "self", ".", "lasttime", ")", ")", ")", "\n", "\n", "", "self", ".", "lasttime", "=", "time", ".", "monotonic", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.log_epoch_done": [[151, 205], ["torch.stack", "logging.info", "logger.Logger.calc_epoch_metric", "logging.info", "logger.Logger.calc_epoch_metric", "logger.Logger.calc_epoch_metric", "logging.info", "logging.info", "logger.Logger.calc_microavg_eval_measures", "logging.info", "range", "logging.info", "logger.Logger.losses.mean", "str", "logger.Logger.calc_eval_measures_per_class", "logging.info", "logger.Logger.calc_microavg_eval_measures", "logging.info", "range", "str", "str", "str", "str", "str", "logger.Logger.calc_eval_measures_per_class", "logging.info", "str", "logger.Logger.losses.mean", "str", "time.monotonic"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_epoch_metric", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_epoch_metric", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_epoch_metric", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_microavg_eval_measures", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_eval_measures_per_class", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_microavg_eval_measures", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_eval_measures_per_class"], ["", "def", "log_epoch_done", "(", "self", ")", ":", "\n", "        ", "eval_measure", "=", "0", "\n", "\n", "self", ".", "losses", "=", "torch", ".", "stack", "(", "self", ".", "losses", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' mean losses '", "+", "str", "(", "self", ".", "losses", ".", "mean", "(", ")", ")", ")", "\n", "if", "self", ".", "args", ".", "target_measure", "==", "'loss'", "or", "self", ".", "args", ".", "target_measure", "==", "'Loss'", ":", "\n", "            ", "eval_measure", "=", "self", ".", "losses", ".", "mean", "(", ")", "\n", "\n", "", "epoch_error", "=", "self", ".", "calc_epoch_metric", "(", "self", ".", "batch_sizes", ",", "self", ".", "errors", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' mean errors '", "+", "str", "(", "epoch_error", ")", ")", "\n", "\n", "epoch_MRR", "=", "self", ".", "calc_epoch_metric", "(", "self", ".", "batch_sizes", ",", "self", ".", "MRRs", ")", "\n", "epoch_MAP", "=", "self", ".", "calc_epoch_metric", "(", "self", ".", "batch_sizes", ",", "self", ".", "MAPs", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' mean MRR '", "+", "str", "(", "epoch_MRR", ")", "+", "' - mean MAP '", "+", "str", "(", "epoch_MAP", ")", ")", "\n", "if", "self", ".", "args", ".", "target_measure", "==", "'MRR'", "or", "self", ".", "args", ".", "target_measure", "==", "'mrr'", ":", "\n", "            ", "eval_measure", "=", "epoch_MRR", "\n", "", "if", "self", ".", "args", ".", "target_measure", "==", "'MAP'", "or", "self", ".", "args", ".", "target_measure", "==", "'map'", ":", "\n", "            ", "eval_measure", "=", "epoch_MAP", "\n", "\n", "", "logging", ".", "info", "(", "self", ".", "set", "+", "' tp %s,fn %s,fp %s'", "%", "(", "self", ".", "conf_mat_tp", ",", "self", ".", "conf_mat_fn", ",", "self", ".", "conf_mat_fp", ")", ")", "\n", "precision", ",", "recall", ",", "f1", "=", "self", ".", "calc_microavg_eval_measures", "(", "self", ".", "conf_mat_tp", ",", "self", ".", "conf_mat_fn", ",", "self", ".", "conf_mat_fp", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' measures microavg - precision %0.4f - recall %0.4f - f1 %0.4f '", "%", "(", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "if", "str", "(", "self", ".", "args", ".", "target_class", ")", "==", "'AVG'", ":", "\n", "            ", "if", "self", ".", "args", ".", "target_measure", "==", "'Precision'", "or", "self", ".", "args", ".", "target_measure", "==", "'prec'", ":", "\n", "                ", "eval_measure", "=", "precision", "\n", "", "elif", "self", ".", "args", ".", "target_measure", "==", "'Recall'", "or", "self", ".", "args", ".", "target_measure", "==", "'rec'", ":", "\n", "                ", "eval_measure", "=", "recall", "\n", "", "else", ":", "\n", "                ", "eval_measure", "=", "f1", "\n", "\n", "\n", "", "", "for", "cl", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "cl_precision", ",", "cl_recall", ",", "cl_f1", "=", "self", ".", "calc_eval_measures_per_class", "(", "self", ".", "conf_mat_tp", ",", "self", ".", "conf_mat_fn", ",", "self", ".", "conf_mat_fp", ",", "cl", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' measures for class %d - precision %0.4f - recall %0.4f - f1 %0.4f '", "%", "(", "cl", ",", "cl_precision", ",", "cl_recall", ",", "cl_f1", ")", ")", "\n", "if", "str", "(", "cl", ")", "==", "str", "(", "self", ".", "args", ".", "target_class", ")", ":", "\n", "                ", "if", "self", ".", "args", ".", "target_measure", "==", "'Precision'", "or", "self", ".", "args", ".", "target_measure", "==", "'prec'", ":", "\n", "                    ", "eval_measure", "=", "cl_precision", "\n", "", "elif", "self", ".", "args", ".", "target_measure", "==", "'Recall'", "or", "self", ".", "args", ".", "target_measure", "==", "'rec'", ":", "\n", "                    ", "eval_measure", "=", "cl_recall", "\n", "", "else", ":", "\n", "                    ", "eval_measure", "=", "cl_f1", "\n", "\n", "", "", "", "for", "k", "in", "self", ".", "eval_k_list", ":", "#logging.info(self.set+' @%d tp %s,fn %s,fp %s' % (k, self.conf_mat_tp_at_k[k], self.conf_mat_fn_at_k[k], self.conf_mat_fp_at_k[k]))", "\n", "            ", "precision", ",", "recall", ",", "f1", "=", "self", ".", "calc_microavg_eval_measures", "(", "self", ".", "conf_mat_tp_at_k", "[", "k", "]", ",", "self", ".", "conf_mat_fn_at_k", "[", "k", "]", ",", "self", ".", "conf_mat_fp_at_k", "[", "k", "]", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' measures@%d microavg - precision %0.4f - recall %0.4f - f1 %0.4f '", "%", "(", "k", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "\n", "for", "cl", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "cl_precision", ",", "cl_recall", ",", "cl_f1", "=", "self", ".", "calc_eval_measures_per_class", "(", "self", ".", "conf_mat_tp_at_k", "[", "k", "]", ",", "self", ".", "conf_mat_fn_at_k", "[", "k", "]", ",", "self", ".", "conf_mat_fp_at_k", "[", "k", "]", ",", "cl", ")", "\n", "logging", ".", "info", "(", "self", ".", "set", "+", "' measures@%d for class %d - precision %0.4f - recall %0.4f - f1 %0.4f '", "%", "(", "k", ",", "cl", ",", "cl_precision", ",", "cl_recall", ",", "cl_f1", ")", ")", "\n", "\n", "\n", "", "", "logging", ".", "info", "(", "self", ".", "set", "+", "' Total epoch time: '", "+", "str", "(", "(", "(", "time", ".", "monotonic", "(", ")", "-", "self", ".", "ep_time", ")", ")", ")", ")", "\n", "\n", "return", "eval_measure", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.get_MRR": [[206, 227], ["probs.cpu().numpy.cpu().numpy.cpu().numpy", "true_classes.cpu().numpy.cpu().numpy.cpu().numpy", "adj.cpu().numpy.cpu().numpy.cpu().numpy", "scipy.sparse.coo_matrix().toarray", "scipy.sparse.coo_matrix().toarray", "enumerate", "torch.tensor().mean", "numpy.isin", "torch.softmax", "probs.cpu().numpy.cpu().numpy.cpu", "true_classes.cpu().numpy.cpu().numpy.cpu", "adj.cpu().numpy.cpu().numpy.cpu", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "row_MRRs.append", "torch.tensor", "logger.Logger.get_row_MRR"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.get_row_MRR"], ["", "def", "get_MRR", "(", "self", ",", "predictions", ",", "true_classes", ",", "adj", ",", "do_softmax", "=", "False", ")", ":", "\n", "        ", "if", "do_softmax", ":", "\n", "            ", "probs", "=", "torch", ".", "softmax", "(", "predictions", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "probs", "=", "predictions", "\n", "\n", "", "probs", "=", "probs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_classes", "=", "true_classes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "adj", "=", "adj", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_matrix", "=", "coo_matrix", "(", "(", "probs", ",", "(", "adj", "[", "0", "]", ",", "adj", "[", "1", "]", ")", ")", ")", ".", "toarray", "(", ")", "\n", "true_matrix", "=", "coo_matrix", "(", "(", "true_classes", ",", "(", "adj", "[", "0", "]", ",", "adj", "[", "1", "]", ")", ")", ")", ".", "toarray", "(", ")", "\n", "\n", "row_MRRs", "=", "[", "]", "\n", "for", "i", ",", "pred_row", "in", "enumerate", "(", "pred_matrix", ")", ":", "\n", "#check if there are any existing edges", "\n", "            ", "if", "np", ".", "isin", "(", "1", ",", "true_matrix", "[", "i", "]", ")", ":", "\n", "                ", "row_MRRs", ".", "append", "(", "self", ".", "get_row_MRR", "(", "pred_row", ",", "true_matrix", "[", "i", "]", ")", ")", "\n", "\n", "", "", "avg_MRR", "=", "torch", ".", "tensor", "(", "row_MRRs", ")", ".", "mean", "(", ")", "\n", "return", "avg_MRR", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.get_row_MRR": [[228, 241], ["numpy.flip", "probs.argsort", "numpy.arange"], "methods", ["None"], ["", "def", "get_row_MRR", "(", "self", ",", "probs", ",", "true_classes", ")", ":", "\n", "        ", "existing_mask", "=", "true_classes", "==", "1", "\n", "#descending in probability", "\n", "ordered_indices", "=", "np", ".", "flip", "(", "probs", ".", "argsort", "(", ")", ")", "\n", "\n", "ordered_existing_mask", "=", "existing_mask", "[", "ordered_indices", "]", "\n", "\n", "existing_ranks", "=", "np", ".", "arange", "(", "1", ",", "\n", "true_classes", ".", "shape", "[", "0", "]", "+", "1", ",", "\n", "dtype", "=", "np", ".", "float", ")", "[", "ordered_existing_mask", "]", "\n", "\n", "MRR", "=", "(", "1", "/", "existing_ranks", ")", ".", "sum", "(", ")", "/", "existing_ranks", ".", "shape", "[", "0", "]", "\n", "return", "MRR", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.get_MAP": [[243, 253], ["probs.detach().cpu().numpy", "true_classes.detach().cpu().numpy", "sklearn.metrics.average_precision_score", "torch.softmax", "probs.detach().cpu", "true_classes.detach().cpu", "probs.detach", "true_classes.detach"], "methods", ["None"], ["", "def", "get_MAP", "(", "self", ",", "predictions", ",", "true_classes", ",", "do_softmax", "=", "False", ")", ":", "\n", "        ", "if", "do_softmax", ":", "\n", "            ", "probs", "=", "torch", ".", "softmax", "(", "predictions", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "probs", "=", "predictions", "\n", "\n", "", "predictions_np", "=", "probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_classes_np", "=", "true_classes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "average_precision_score", "(", "true_classes_np", ",", "predictions_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.eval_predicitions": [[254, 278], ["predictions.argmax", "utils.Namespace", "range", "predictions.size", "hits.sum", "hits.size", "pos.sum"], "methods", ["None"], ["", "def", "eval_predicitions", "(", "self", ",", "predictions", ",", "true_classes", ",", "num_classes", ")", ":", "\n", "        ", "predicted_classes", "=", "predictions", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "failures", "=", "(", "predicted_classes", "!=", "true_classes", ")", ".", "sum", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "error", "=", "failures", "/", "predictions", ".", "size", "(", "0", ")", "\n", "\n", "conf_mat_per_class", "=", "utils", ".", "Namespace", "(", "{", "}", ")", "\n", "conf_mat_per_class", ".", "true_positives", "=", "{", "}", "\n", "conf_mat_per_class", ".", "false_negatives", "=", "{", "}", "\n", "conf_mat_per_class", ".", "false_positives", "=", "{", "}", "\n", "\n", "for", "cl", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "cl_indices", "=", "true_classes", "==", "cl", "\n", "\n", "pos", "=", "predicted_classes", "==", "cl", "\n", "hits", "=", "(", "predicted_classes", "[", "cl_indices", "]", "==", "true_classes", "[", "cl_indices", "]", ")", "\n", "\n", "tp", "=", "hits", ".", "sum", "(", ")", "\n", "fn", "=", "hits", ".", "size", "(", "0", ")", "-", "tp", "\n", "fp", "=", "pos", ".", "sum", "(", ")", "-", "tp", "\n", "\n", "conf_mat_per_class", ".", "true_positives", "[", "cl", "]", "=", "tp", "\n", "conf_mat_per_class", ".", "false_negatives", "[", "cl", "]", "=", "fn", "\n", "conf_mat_per_class", ".", "false_positives", "[", "cl", "]", "=", "fp", "\n", "", "return", "error", ",", "conf_mat_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.eval_predicitions_at_k": [[280, 309], ["utils.Namespace", "range", "predictions.size", "predictions.size", "torch.topk", "predictions_at_k.argmax", "hits.sum", "true_classes[].size", "pos.sum"], "methods", ["None"], ["", "def", "eval_predicitions_at_k", "(", "self", ",", "predictions", ",", "true_classes", ",", "num_classes", ",", "k", ")", ":", "\n", "        ", "conf_mat_per_class", "=", "utils", ".", "Namespace", "(", "{", "}", ")", "\n", "conf_mat_per_class", ".", "true_positives", "=", "{", "}", "\n", "conf_mat_per_class", ".", "false_negatives", "=", "{", "}", "\n", "conf_mat_per_class", ".", "false_positives", "=", "{", "}", "\n", "\n", "if", "predictions", ".", "size", "(", "0", ")", "<", "k", ":", "\n", "            ", "k", "=", "predictions", ".", "size", "(", "0", ")", "\n", "\n", "", "for", "cl", "in", "range", "(", "num_classes", ")", ":", "\n", "# sort for prediction with higher score for target class (cl)", "\n", "            ", "_", ",", "idx_preds_at_k", "=", "torch", ".", "topk", "(", "predictions", "[", ":", ",", "cl", "]", ",", "k", ",", "dim", "=", "0", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "predictions_at_k", "=", "predictions", "[", "idx_preds_at_k", "]", "\n", "predicted_classes", "=", "predictions_at_k", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "cl_indices_at_k", "=", "true_classes", "[", "idx_preds_at_k", "]", "==", "cl", "\n", "cl_indices", "=", "true_classes", "==", "cl", "\n", "\n", "pos", "=", "predicted_classes", "==", "cl", "\n", "hits", "=", "(", "predicted_classes", "[", "cl_indices_at_k", "]", "==", "true_classes", "[", "idx_preds_at_k", "]", "[", "cl_indices_at_k", "]", ")", "\n", "\n", "tp", "=", "hits", ".", "sum", "(", ")", "\n", "fn", "=", "true_classes", "[", "cl_indices", "]", ".", "size", "(", "0", ")", "-", "tp", "# This only if we want to consider the size at K -> hits.size(0) - tp", "\n", "fp", "=", "pos", ".", "sum", "(", ")", "-", "tp", "\n", "\n", "conf_mat_per_class", ".", "true_positives", "[", "cl", "]", "=", "tp", "\n", "conf_mat_per_class", ".", "false_negatives", "[", "cl", "]", "=", "fn", "\n", "conf_mat_per_class", ".", "false_positives", "[", "cl", "]", "=", "fp", "\n", "", "return", "conf_mat_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_microavg_eval_measures": [[311, 323], ["sum().item", "sum().item", "sum().item", "sum", "sum", "sum", "tp.values", "fn.values", "fp.values"], "methods", ["None"], ["", "def", "calc_microavg_eval_measures", "(", "self", ",", "tp", ",", "fn", ",", "fp", ")", ":", "\n", "        ", "tp_sum", "=", "sum", "(", "tp", ".", "values", "(", ")", ")", ".", "item", "(", ")", "\n", "fn_sum", "=", "sum", "(", "fn", ".", "values", "(", ")", ")", ".", "item", "(", ")", "\n", "fp_sum", "=", "sum", "(", "fp", ".", "values", "(", ")", ")", ".", "item", "(", ")", "\n", "\n", "p", "=", "tp_sum", "*", "1.0", "/", "(", "tp_sum", "+", "fp_sum", ")", "\n", "r", "=", "tp_sum", "*", "1.0", "/", "(", "tp_sum", "+", "fn_sum", ")", "\n", "if", "(", "p", "+", "r", ")", ">", "0", ":", "\n", "            ", "f1", "=", "2.0", "*", "(", "p", "*", "r", ")", "/", "(", "p", "+", "r", ")", "\n", "", "else", ":", "\n", "            ", "f1", "=", "0", "\n", "", "return", "p", ",", "r", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_eval_measures_per_class": [[324, 345], ["type", "tp[].item", "fn[].item", "fp[].item", "tp.item", "fn.item", "fp.item"], "methods", ["None"], ["", "def", "calc_eval_measures_per_class", "(", "self", ",", "tp", ",", "fn", ",", "fp", ",", "class_id", ")", ":", "\n", "#ALDO", "\n", "        ", "if", "type", "(", "tp", ")", "is", "dict", ":", "\n", "            ", "tp_sum", "=", "tp", "[", "class_id", "]", ".", "item", "(", ")", "\n", "fn_sum", "=", "fn", "[", "class_id", "]", ".", "item", "(", ")", "\n", "fp_sum", "=", "fp", "[", "class_id", "]", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "tp_sum", "=", "tp", ".", "item", "(", ")", "\n", "fn_sum", "=", "fn", ".", "item", "(", ")", "\n", "fp_sum", "=", "fp", ".", "item", "(", ")", "\n", "########", "\n", "", "if", "tp_sum", "==", "0", ":", "\n", "            ", "return", "0", ",", "0", ",", "0", "\n", "\n", "", "p", "=", "tp_sum", "*", "1.0", "/", "(", "tp_sum", "+", "fp_sum", ")", "\n", "r", "=", "tp_sum", "*", "1.0", "/", "(", "tp_sum", "+", "fn_sum", ")", "\n", "if", "(", "p", "+", "r", ")", ">", "0", ":", "\n", "            ", "f1", "=", "2.0", "*", "(", "p", "*", "r", ")", "/", "(", "p", "+", "r", ")", "\n", "", "else", ":", "\n", "            ", "f1", "=", "0", "\n", "", "return", "p", ",", "r", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.logger.Logger.calc_epoch_metric": [[346, 352], ["torch.tensor", "epoch_metric_val.detach().item", "torch.stack().cpu", "epoch_metric_val.sum", "torch.tensor.sum", "epoch_metric_val.detach", "torch.stack"], "methods", ["None"], ["", "def", "calc_epoch_metric", "(", "self", ",", "batch_sizes", ",", "metric_val", ")", ":", "\n", "        ", "batch_sizes", "=", "torch", ".", "tensor", "(", "batch_sizes", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "epoch_metric_val", "=", "torch", ".", "stack", "(", "metric_val", ")", ".", "cpu", "(", ")", "*", "batch_sizes", "\n", "epoch_metric_val", "=", "epoch_metric_val", ".", "sum", "(", ")", "/", "batch_sizes", ".", "sum", "(", ")", "\n", "\n", "return", "epoch_metric_val", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.Cross_Entropy.Cross_Entropy.__init__": [[6, 11], ["super().__init__", "torch.tensor().to", "Cross_Entropy.Cross_Entropy.dyn_scale", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.Cross_Entropy.Cross_Entropy.dyn_scale"], ["def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "weights", "=", "torch", ".", "tensor", "(", "args", ".", "class_weights", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "self", ".", "weights", "=", "self", ".", "dyn_scale", "(", "args", ".", "task", ",", "dataset", ",", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.Cross_Entropy.Cross_Entropy.dyn_scale": [[13, 32], ["None"], "methods", ["None"], ["", "def", "dyn_scale", "(", "self", ",", "task", ",", "dataset", ",", "weights", ")", ":", "\n", "# if task == 'link_pred':  commented to have a 1:1 ratio", "\n", "\n", "#     '''", "\n", "#     when doing link prediction there is an extra weighting factor on the non-existing", "\n", "#     edges", "\n", "#     '''", "\n", "#     tot_neg = dataset.num_non_existing", "\n", "#     def scale(labels):", "\n", "#         cur_neg = (labels == 0).sum(dtype = torch.float)", "\n", "#         out = weights.clone()", "\n", "#         out[0] *= tot_neg/cur_neg", "\n", "#         return out", "\n", "# else:", "\n", "#     def scale(labels):", "\n", "#         return weights", "\n", "        ", "def", "scale", "(", "labels", ")", ":", "\n", "            ", "return", "weights", "\n", "", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.Cross_Entropy.Cross_Entropy.logsumexp": [[34, 39], ["torch.max", "m.view.view.view", "torch.sum", "torch.exp", "torch.log"], "methods", ["None"], ["", "def", "logsumexp", "(", "self", ",", "logits", ")", ":", "\n", "        ", "m", ",", "_", "=", "torch", ".", "max", "(", "logits", ",", "dim", "=", "1", ")", "\n", "m", "=", "m", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "sum_exp", "=", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "logits", "-", "m", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "m", "+", "torch", ".", "log", "(", "sum_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.Cross_Entropy.Cross_Entropy.forward": [[40, 50], ["labels.view.view.view", "[].view", "loss.mean", "Cross_Entropy.Cross_Entropy.logsumexp", "Cross_Entropy.Cross_Entropy.weights", "logits.gather"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.Cross_Entropy.Cross_Entropy.logsumexp"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "'''\n        logits is a matrix M by C where m is the number of classifications and C are the number of classes\n        labels is a integer tensor of size M where each element corresponds to the class that prediction i\n        should be matching to\n        '''", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "alpha", "=", "self", ".", "weights", "(", "labels", ")", "[", "labels", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "loss", "=", "alpha", "*", "(", "-", "logits", ".", "gather", "(", "-", "1", ",", "labels", ")", "+", "self", ".", "logsumexp", "(", "logits", ")", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.__init__": [[28, 70], ["link_pred_tasker.Link_Pred_Tasker.build_get_node_feats", "link_pred_tasker.Link_Pred_Tasker.build_prepare_node_feats"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_get_node_feats", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_prepare_node_feats"], ["def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "self", ".", "data", "=", "dataset", "\n", "#max_time for link pred should be one before", "\n", "self", ".", "max_time", "=", "dataset", ".", "max_time", "-", "1", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n", "if", "not", "(", "args", ".", "use_2_hot_node_feats", "or", "args", ".", "use_1_hot_node_feats", ")", ":", "\n", "\t\t\t", "self", ".", "feats_per_node", "=", "dataset", ".", "feats_per_node", "\n", "\n", "", "self", ".", "get_node_feats", "=", "self", ".", "build_get_node_feats", "(", "args", ",", "dataset", ")", "\n", "self", ".", "prepare_node_feats", "=", "self", ".", "build_prepare_node_feats", "(", "args", ",", "dataset", ")", "\n", "self", ".", "is_static", "=", "False", "\n", "\n", "'''TO CREATE THE CSV DATASET TO USE IN DynGEM\n\t\tprint ('min max time:', self.data.min_time, self.data.max_time)\n\t\tfile = open('data/autonomous_syst100_adj.csv','w')\n\t\tfile.write ('source,target,weight,time\\n')\n\t\tfor time in range(self.data.min_time, self.data.max_time):\n\t\t\tadj_t = tu.get_sp_adj(edges = self.data.edges,\n\t\t\t\t\t   time = time,\n\t\t\t\t\t   weighted = True,\n\t\t\t\t\t   time_window = 1)\n\t\t\t#node_feats = self.get_node_feats(adj_t)\n\t\t\tprint (time, len(adj_t))\n\t\t\tidx = adj_t['idx']\n\t\t\tvals = adj_t['vals']\n\t\t\tnum_nodes = self.data.num_nodes\n\t\t\tsp_tensor = torch.sparse.FloatTensor(idx.t(),vals.type(torch.float),torch.Size([num_nodes,num_nodes]))\n\t\t\tdense_tensor = sp_tensor.to_dense()\n\t\t\tidx = sp_tensor._indices()\n\t\t\tfor i in range(idx.size()[1]):\n\t\t\t\ti0=idx[0,i]\n\t\t\t\ti1=idx[1,i]\n\t\t\t\tw = dense_tensor[i0,i1]\n\t\t\t\tfile.write(str(i0.item())+','+str(i1.item())+','+str(w.item())+','+str(time)+'\\n')\n\n\t\t\t#for i, v in zip(idx, vals):\n\t\t\t#\tfile.write(str(i[0].item())+','+str(i[1].item())+','+str(v.item())+','+str(time)+'\\n')\n\n\t\tfile.close()\n\t\texit'''", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_prepare_node_feats": [[76, 86], ["utils.sparse_prepare_tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sparse_prepare_tensor"], ["", "def", "build_prepare_node_feats", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "if", "args", ".", "use_2_hot_node_feats", "or", "args", ".", "use_1_hot_node_feats", ":", "\n", "\t\t\t", "def", "prepare_node_feats", "(", "node_feats", ")", ":", "\n", "\t\t\t\t", "return", "u", ".", "sparse_prepare_tensor", "(", "node_feats", ",", "\n", "torch_size", "=", "[", "dataset", ".", "num_nodes", ",", "\n", "self", ".", "feats_per_node", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "prepare_node_feats", "=", "self", ".", "data", ".", "prepare_node_feats", "\n", "\n", "", "return", "prepare_node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.build_get_node_feats": [[88, 109], ["taskers_utils.get_max_degs", "taskers_utils.get_2_hot_deg_feats", "taskers_utils.get_max_degs", "taskers_utils.get_1_hot_deg_feats"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_1_hot_deg_feats"], ["", "def", "build_get_node_feats", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\t\t", "if", "args", ".", "use_2_hot_node_feats", ":", "\n", "\t\t\t", "max_deg_out", ",", "max_deg_in", "=", "tu", ".", "get_max_degs", "(", "args", ",", "dataset", ")", "\n", "self", ".", "feats_per_node", "=", "max_deg_out", "+", "max_deg_in", "\n", "def", "get_node_feats", "(", "adj", ")", ":", "\n", "\t\t\t\t", "return", "tu", ".", "get_2_hot_deg_feats", "(", "adj", ",", "\n", "max_deg_out", ",", "\n", "max_deg_in", ",", "\n", "dataset", ".", "num_nodes", ")", "\n", "", "", "elif", "args", ".", "use_1_hot_node_feats", ":", "\n", "\t\t\t", "max_deg", ",", "_", "=", "tu", ".", "get_max_degs", "(", "args", ",", "dataset", ")", "\n", "self", ".", "feats_per_node", "=", "max_deg", "\n", "def", "get_node_feats", "(", "adj", ")", ":", "\n", "\t\t\t\t", "return", "tu", ".", "get_1_hot_deg_feats", "(", "adj", ",", "\n", "max_deg", ",", "\n", "dataset", ".", "num_nodes", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "def", "get_node_feats", "(", "adj", ")", ":", "\n", "\t\t\t\t", "return", "dataset", ".", "nodes_feats", "\n", "\n", "", "", "return", "get_node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.link_pred_tasker.Link_Pred_Tasker.get_sample": [[111, 171], ["range", "taskers_utils.get_sp_adj", "torch.cat", "torch.cat", "taskers_utils.get_sp_adj", "taskers_utils.get_node_mask", "link_pred_tasker.Link_Pred_Tasker.get_node_feats", "taskers_utils.normalize_adj", "hist_adj_list.append", "hist_ndFeats_list.append", "hist_mask_list.append", "torch.cat", "taskers_utils.get_all_non_existing_edges", "taskers_utils.get_non_existing_edges", "torch.cat.append", "kwargs.keys", "cur_adj[].unique", "label_adj[].size"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_node_mask", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.normalize_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_all_non_existing_edges", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_non_existing_edges"], ["", "def", "get_sample", "(", "self", ",", "idx", ",", "test", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "hist_adj_list", "=", "[", "]", "\n", "hist_ndFeats_list", "=", "[", "]", "\n", "hist_mask_list", "=", "[", "]", "\n", "existing_nodes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "idx", "-", "self", ".", "args", ".", "num_hist_steps", ",", "idx", "+", "1", ")", ":", "\n", "\t\t\t", "cur_adj", "=", "tu", ".", "get_sp_adj", "(", "edges", "=", "self", ".", "data", ".", "edges", ",", "\n", "time", "=", "i", ",", "\n", "weighted", "=", "True", ",", "\n", "time_window", "=", "self", ".", "args", ".", "adj_mat_time_window", ")", "\n", "\n", "if", "self", ".", "args", ".", "smart_neg_sampling", ":", "\n", "\t\t\t\t", "existing_nodes", ".", "append", "(", "cur_adj", "[", "'idx'", "]", ".", "unique", "(", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "existing_nodes", "=", "None", "\n", "\n", "", "node_mask", "=", "tu", ".", "get_node_mask", "(", "cur_adj", ",", "self", ".", "data", ".", "num_nodes", ")", "\n", "\n", "node_feats", "=", "self", ".", "get_node_feats", "(", "cur_adj", ")", "\n", "\n", "cur_adj", "=", "tu", ".", "normalize_adj", "(", "adj", "=", "cur_adj", ",", "num_nodes", "=", "self", ".", "data", ".", "num_nodes", ")", "\n", "\n", "hist_adj_list", ".", "append", "(", "cur_adj", ")", "\n", "hist_ndFeats_list", ".", "append", "(", "node_feats", ")", "\n", "hist_mask_list", ".", "append", "(", "node_mask", ")", "\n", "\n", "# This would be if we were training on all the edges in the time_window", "\n", "", "label_adj", "=", "tu", ".", "get_sp_adj", "(", "edges", "=", "self", ".", "data", ".", "edges", ",", "\n", "time", "=", "idx", "+", "1", ",", "\n", "weighted", "=", "False", ",", "\n", "time_window", "=", "self", ".", "args", ".", "adj_mat_time_window", ")", "\n", "if", "test", ":", "\n", "\t\t\t", "neg_mult", "=", "self", ".", "args", ".", "negative_mult_test", "\n", "", "else", ":", "\n", "\t\t\t", "neg_mult", "=", "self", ".", "args", ".", "negative_mult_training", "\n", "\n", "", "if", "self", ".", "args", ".", "smart_neg_sampling", ":", "\n", "\t\t\t", "existing_nodes", "=", "torch", ".", "cat", "(", "existing_nodes", ")", "\n", "\n", "\n", "", "if", "'all_edges'", "in", "kwargs", ".", "keys", "(", ")", "and", "kwargs", "[", "'all_edges'", "]", "==", "True", ":", "\n", "\t\t\t", "non_exisiting_adj", "=", "tu", ".", "get_all_non_existing_edges", "(", "adj", "=", "label_adj", ",", "tot_nodes", "=", "self", ".", "data", ".", "num_nodes", ")", "\n", "", "else", ":", "\n", "\t\t\t", "non_exisiting_adj", "=", "tu", ".", "get_non_existing_edges", "(", "adj", "=", "label_adj", ",", "\n", "number", "=", "label_adj", "[", "'vals'", "]", ".", "size", "(", "0", ")", "*", "neg_mult", ",", "\n", "tot_nodes", "=", "self", ".", "data", ".", "num_nodes", ",", "\n", "smart_sampling", "=", "self", ".", "args", ".", "smart_neg_sampling", ",", "\n", "existing_nodes", "=", "existing_nodes", ")", "\n", "\n", "# label_adj = tu.get_sp_adj_only_new(edges = self.data.edges,", "\n", "# \t\t\t\t\t\t\t\t   weighted = False,", "\n", "# \t\t\t\t\t\t\t\t   time = idx)", "\n", "\n", "", "label_adj", "[", "'idx'", "]", "=", "torch", ".", "cat", "(", "[", "label_adj", "[", "'idx'", "]", ",", "non_exisiting_adj", "[", "'idx'", "]", "]", ")", "\n", "label_adj", "[", "'vals'", "]", "=", "torch", ".", "cat", "(", "[", "label_adj", "[", "'vals'", "]", ",", "non_exisiting_adj", "[", "'vals'", "]", "]", ")", "\n", "return", "{", "'idx'", ":", "idx", ",", "\n", "'hist_adj_list'", ":", "hist_adj_list", ",", "\n", "'hist_ndFeats_list'", ":", "hist_ndFeats_list", ",", "\n", "'label_sp'", ":", "label_adj", ",", "\n", "'node_mask_list'", ":", "hist_mask_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.elliptic_temporal_dl.Elliptic_Temporal_Dataset.__init__": [[12, 23], ["utils.Namespace", "os.path.join", "tarfile.open", "elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_node_labels", "elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_transactions", "elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_node_feats"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_node_labels", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_transactions", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_node_feats"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "args", ".", "elliptic_args", "=", "u", ".", "Namespace", "(", "args", ".", "elliptic_args", ")", "\n", "\n", "tar_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "elliptic_args", ".", "folder", ",", "args", ".", "elliptic_args", ".", "tar_file", ")", "\n", "tar_archive", "=", "tarfile", ".", "open", "(", "tar_file", ",", "'r:gz'", ")", "\n", "\n", "self", ".", "nodes_labels_times", "=", "self", ".", "load_node_labels", "(", "args", ".", "elliptic_args", ",", "tar_archive", ")", "\n", "\n", "self", ".", "edges", "=", "self", ".", "load_transactions", "(", "args", ".", "elliptic_args", ",", "tar_archive", ")", "\n", "\n", "self", ".", "nodes", ",", "self", ".", "nodes_feats", "=", "self", ".", "load_node_feats", "(", "args", ".", "elliptic_args", ",", "tar_archive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_node_feats": [[24, 35], ["utils.load_data_from_tar", "len", "utils.load_data_from_tar.size", "nodes_feats.float"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data_from_tar"], ["", "def", "load_node_feats", "(", "self", ",", "elliptic_args", ",", "tar_archive", ")", ":", "\n", "\t\t", "data", "=", "u", ".", "load_data_from_tar", "(", "elliptic_args", ".", "feats_file", ",", "tar_archive", ",", "starting_line", "=", "0", ")", "\n", "nodes", "=", "data", "\n", "\n", "nodes_feats", "=", "nodes", "[", ":", ",", "1", ":", "]", "\n", "\n", "\n", "self", ".", "num_nodes", "=", "len", "(", "nodes", ")", "\n", "self", ".", "feats_per_node", "=", "data", ".", "size", "(", "1", ")", "-", "1", "\n", "\n", "return", "nodes", ",", "nodes_feats", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_node_labels": [[37, 55], ["utils.load_data_from_tar().long", "utils.load_data_from_tar().long", "utils.Namespace", "utils.Namespace", "range", "torch.tensor", "len", "labels[].long", "utils.load_data_from_tar", "utils.load_data_from_tar", "labels[].long", "times[].long", "torch.tensor.append"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data_from_tar", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data_from_tar"], ["", "def", "load_node_labels", "(", "self", ",", "elliptic_args", ",", "tar_archive", ")", ":", "\n", "\t\t", "labels", "=", "u", ".", "load_data_from_tar", "(", "elliptic_args", ".", "classes_file", ",", "tar_archive", ",", "replace_unknow", "=", "True", ")", ".", "long", "(", ")", "\n", "times", "=", "u", ".", "load_data_from_tar", "(", "elliptic_args", ".", "times_file", ",", "tar_archive", ",", "replace_unknow", "=", "True", ")", ".", "long", "(", ")", "\n", "lcols", "=", "u", ".", "Namespace", "(", "{", "'nid'", ":", "0", ",", "\n", "'label'", ":", "1", "}", ")", "\n", "tcols", "=", "u", ".", "Namespace", "(", "{", "'nid'", ":", "0", ",", "'time'", ":", "1", "}", ")", "\n", "\n", "\n", "nodes_labels_times", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "\t\t\t", "label", "=", "labels", "[", "i", ",", "[", "lcols", ".", "label", "]", "]", ".", "long", "(", ")", "\n", "if", "label", ">=", "0", ":", "\n", "\t\t \t\t", "nid", "=", "labels", "[", "i", ",", "[", "lcols", ".", "nid", "]", "]", ".", "long", "(", ")", "\n", "time", "=", "times", "[", "nid", ",", "[", "tcols", ".", "time", "]", "]", ".", "long", "(", ")", "\n", "nodes_labels_times", ".", "append", "(", "[", "nid", ",", "label", ",", "time", "]", ")", "\n", "", "", "nodes_labels_times", "=", "torch", ".", "tensor", "(", "nodes_labels_times", ")", "\n", "\n", "return", "nodes_labels_times", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.elliptic_temporal_dl.Elliptic_Temporal_Dataset.load_transactions": [[57, 69], ["utils.load_data_from_tar", "utils.Namespace", "torch.cat", "data[].max", "data[].min", "torch.ones", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data_from_tar"], ["", "def", "load_transactions", "(", "self", ",", "elliptic_args", ",", "tar_archive", ")", ":", "\n", "\t\t", "data", "=", "u", ".", "load_data_from_tar", "(", "elliptic_args", ".", "edges_file", ",", "tar_archive", ",", "type_fn", "=", "float", ",", "tensor_const", "=", "torch", ".", "LongTensor", ")", "\n", "tcols", "=", "u", ".", "Namespace", "(", "{", "'source'", ":", "0", ",", "\n", "'target'", ":", "1", ",", "\n", "'time'", ":", "2", "}", ")", "\n", "\n", "data", "=", "torch", ".", "cat", "(", "[", "data", ",", "data", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "]", ")", "\n", "\n", "self", ".", "max_time", "=", "data", "[", ":", ",", "tcols", ".", "time", "]", ".", "max", "(", ")", "\n", "self", ".", "min_time", "=", "data", "[", ":", ",", "tcols", ".", "time", "]", ".", "min", "(", ")", "\n", "\n", "return", "{", "'idx'", ":", "data", ",", "'vals'", ":", "torch", ".", "ones", "(", "data", ".", "size", "(", "0", ")", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.EGCN.__init__": [[9, 29], ["super().__init__", "utils.Namespace", "torch.ParameterList", "torch.ParameterList", "range", "len", "utils.Namespace", "egcn_h.GRCU", "egcn_h.EGCN.GRCU_layers.append", "egcn_h.EGCN._parameters.extend", "GRCU.to", "list", "egcn_h.EGCN.GRCU_layers[].parameters"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.EGCN.parameters"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "activation", ",", "device", "=", "'cpu'", ",", "skipfeats", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "GRCU_args", "=", "u", ".", "Namespace", "(", "{", "}", ")", "\n", "\n", "feats", "=", "[", "args", ".", "feats_per_node", ",", "\n", "args", ".", "layer_1_feats", ",", "\n", "args", ".", "layer_2_feats", "]", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "skipfeats", "=", "skipfeats", "\n", "self", ".", "GRCU_layers", "=", "[", "]", "\n", "self", ".", "_parameters", "=", "nn", ".", "ParameterList", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "feats", ")", ")", ":", "\n", "            ", "GRCU_args", "=", "u", ".", "Namespace", "(", "{", "'in_feats'", ":", "feats", "[", "i", "-", "1", "]", ",", "\n", "'out_feats'", ":", "feats", "[", "i", "]", ",", "\n", "'activation'", ":", "activation", "}", ")", "\n", "\n", "grcu_i", "=", "GRCU", "(", "GRCU_args", ")", "\n", "#print (i,'grcu_i', grcu_i)", "\n", "self", ".", "GRCU_layers", ".", "append", "(", "grcu_i", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "_parameters", ".", "extend", "(", "list", "(", "self", ".", "GRCU_layers", "[", "-", "1", "]", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.EGCN.parameters": [[30, 32], ["None"], "methods", ["None"], ["", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.EGCN.forward": [[33, 43], ["unit", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "Nodes_list", ",", "nodes_mask_list", ")", ":", "\n", "        ", "node_feats", "=", "Nodes_list", "[", "-", "1", "]", "\n", "\n", "for", "unit", "in", "self", ".", "GRCU_layers", ":", "\n", "            ", "Nodes_list", "=", "unit", "(", "A_list", ",", "Nodes_list", ",", "nodes_mask_list", ")", "\n", "\n", "", "out", "=", "Nodes_list", "[", "-", "1", "]", "\n", "if", "self", ".", "skipfeats", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "node_feats", ")", ",", "dim", "=", "1", ")", "# use node_feats.to_dense() if 2hot encoded input ", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.GRCU.__init__": [[46, 58], ["super().__init__", "utils.Namespace", "egcn_h.mat_GRU_cell", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_h.GRCU.reset_param", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "cell_args", "=", "u", ".", "Namespace", "(", "{", "}", ")", "\n", "cell_args", ".", "rows", "=", "args", ".", "in_feats", "\n", "cell_args", ".", "cols", "=", "args", ".", "out_feats", "\n", "\n", "self", ".", "evolve_weights", "=", "mat_GRU_cell", "(", "cell_args", ")", "\n", "\n", "self", ".", "activation", "=", "self", ".", "args", ".", "activation", "\n", "self", ".", "GCN_init_weights", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "args", ".", "in_feats", ",", "self", ".", "args", ".", "out_feats", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "GCN_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.GRCU.reset_param": [[59, 63], ["t.data.uniform_", "math.sqrt", "t.size"], "methods", ["None"], ["", "def", "reset_param", "(", "self", ",", "t", ")", ":", "\n", "#Initialize based on the number of columns", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "t", ".", "size", "(", "1", ")", ")", "\n", "t", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.GRCU.forward": [[64, 76], ["enumerate", "egcn_h.GRCU.evolve_weights", "egcn_h.GRCU.activation", "out_seq.append", "Ahat.matmul", "egcn_h.GRCU.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A_list", ",", "node_embs_list", ",", "mask_list", ")", ":", "\n", "        ", "GCN_weights", "=", "self", ".", "GCN_init_weights", "\n", "out_seq", "=", "[", "]", "\n", "for", "t", ",", "Ahat", "in", "enumerate", "(", "A_list", ")", ":", "\n", "            ", "node_embs", "=", "node_embs_list", "[", "t", "]", "\n", "#first evolve the weights from the initial and use the new weights with the node_embs", "\n", "GCN_weights", "=", "self", ".", "evolve_weights", "(", "GCN_weights", ",", "node_embs", ",", "mask_list", "[", "t", "]", ")", "\n", "node_embs", "=", "self", ".", "activation", "(", "Ahat", ".", "matmul", "(", "node_embs", ".", "matmul", "(", "GCN_weights", ")", ")", ")", "\n", "\n", "out_seq", ".", "append", "(", "node_embs", ")", "\n", "\n", "", "return", "out_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.mat_GRU_cell.__init__": [[78, 95], ["super().__init__", "egcn_h.mat_GRU_gate", "egcn_h.mat_GRU_gate", "egcn_h.mat_GRU_gate", "egcn_h.TopK", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "update", "=", "mat_GRU_gate", "(", "args", ".", "rows", ",", "\n", "args", ".", "cols", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "reset", "=", "mat_GRU_gate", "(", "args", ".", "rows", ",", "\n", "args", ".", "cols", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "htilda", "=", "mat_GRU_gate", "(", "args", ".", "rows", ",", "\n", "args", ".", "cols", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "choose_topk", "=", "TopK", "(", "feats", "=", "args", ".", "rows", ",", "\n", "k", "=", "args", ".", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.mat_GRU_cell.forward": [[96, 108], ["egcn_h.mat_GRU_cell.choose_topk", "egcn_h.mat_GRU_cell.update", "egcn_h.mat_GRU_cell.reset", "egcn_h.mat_GRU_cell.htilda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev_Q", ",", "prev_Z", ",", "mask", ")", ":", "\n", "        ", "z_topk", "=", "self", ".", "choose_topk", "(", "prev_Z", ",", "mask", ")", "\n", "\n", "update", "=", "self", ".", "update", "(", "z_topk", ",", "prev_Q", ")", "\n", "reset", "=", "self", ".", "reset", "(", "z_topk", ",", "prev_Q", ")", "\n", "\n", "h_cap", "=", "reset", "*", "prev_Q", "\n", "h_cap", "=", "self", ".", "htilda", "(", "z_topk", ",", "h_cap", ")", "\n", "\n", "new_Q", "=", "(", "1", "-", "update", ")", "*", "prev_Q", "+", "update", "*", "h_cap", "\n", "\n", "return", "new_Q", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.mat_GRU_gate.__init__": [[112, 123], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_h.mat_GRU_gate.reset_param", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_h.mat_GRU_gate.reset_param", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "rows", ",", "cols", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "#the k here should be in_feats which is actually the rows", "\n", "self", ".", "W", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "rows", ",", "rows", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "W", ")", "\n", "\n", "self", ".", "U", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "rows", ",", "rows", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "U", ")", "\n", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "rows", ",", "cols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.mat_GRU_gate.reset_param": [[124, 128], ["t.data.uniform_", "math.sqrt", "t.size"], "methods", ["None"], ["", "def", "reset_param", "(", "self", ",", "t", ")", ":", "\n", "#Initialize based on the number of columns", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "t", ".", "size", "(", "1", ")", ")", "\n", "t", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.mat_GRU_gate.forward": [[129, 135], ["egcn_h.mat_GRU_gate.activation", "egcn_h.mat_GRU_gate.W.matmul", "egcn_h.mat_GRU_gate.U.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "        ", "out", "=", "self", ".", "activation", "(", "self", ".", "W", ".", "matmul", "(", "x", ")", "+", "self", ".", "U", ".", "matmul", "(", "hidden", ")", "+", "self", ".", "bias", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.TopK.__init__": [[137, 143], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "egcn_h.TopK.reset_param", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param"], ["    ", "def", "__init__", "(", "self", ",", "feats", ",", "k", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scorer", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "feats", ",", "1", ")", ")", "\n", "self", ".", "reset_param", "(", "self", ".", "scorer", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.TopK.reset_param": [[144, 148], ["t.data.uniform_", "math.sqrt", "t.size"], "methods", ["None"], ["", "def", "reset_param", "(", "self", ",", "t", ")", ":", "\n", "#Initialize based on the number of rows", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "t", ".", "size", "(", "0", ")", ")", "\n", "t", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.egcn_h.TopK.forward": [[149, 169], ["scores.view().topk", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "out.t", "node_embs.to_dense.to_dense.matmul", "egcn_h.TopK.scorer.norm", "utils.pad_with_last_val.size", "utils.pad_with_last_val", "isinstance", "isinstance", "node_embs.to_dense.to_dense.to_dense", "torch.nn.Tanh.", "torch.nn.Tanh.", "scores.view", "scores[].view", "float"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.pad_with_last_val"], ["", "def", "forward", "(", "self", ",", "node_embs", ",", "mask", ")", ":", "\n", "        ", "scores", "=", "node_embs", ".", "matmul", "(", "self", ".", "scorer", ")", "/", "self", ".", "scorer", ".", "norm", "(", ")", "\n", "scores", "=", "scores", "+", "mask", "\n", "\n", "vals", ",", "topk_indices", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "topk", "(", "self", ".", "k", ")", "\n", "topk_indices", "=", "topk_indices", "[", "vals", ">", "-", "float", "(", "\"Inf\"", ")", "]", "\n", "\n", "if", "topk_indices", ".", "size", "(", "0", ")", "<", "self", ".", "k", ":", "\n", "            ", "topk_indices", "=", "u", ".", "pad_with_last_val", "(", "topk_indices", ",", "self", ".", "k", ")", "\n", "\n", "", "tanh", "=", "torch", ".", "nn", ".", "Tanh", "(", ")", "\n", "\n", "if", "isinstance", "(", "node_embs", ",", "torch", ".", "sparse", ".", "FloatTensor", ")", "or", "isinstance", "(", "node_embs", ",", "torch", ".", "cuda", ".", "sparse", ".", "FloatTensor", ")", ":", "\n", "            ", "node_embs", "=", "node_embs", ".", "to_dense", "(", ")", "\n", "\n", "", "out", "=", "node_embs", "[", "topk_indices", "]", "*", "tanh", "(", "scores", "[", "topk_indices", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "#we need to transpose the output", "\n", "return", "out", ".", "t", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_1_hot_deg_feats": [[34, 50], ["torch.ones", "taskers_utils.get_degree_vects", "utils.make_sparse_tensor", "adj[].size", "torch.cat", "torch.ones", "u.make_sparse_tensor._indices().t", "u.make_sparse_tensor._values", "torch.arange().view", "u.make_sparse_tensor.view", "u.make_sparse_tensor._indices", "torch.arange"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_degree_vects", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.make_sparse_tensor"], ["def", "get_1_hot_deg_feats", "(", "adj", ",", "max_deg", ",", "num_nodes", ")", ":", "\n", "#For now it'll just return a 2-hot vector", "\n", "    ", "new_vals", "=", "torch", ".", "ones", "(", "adj", "[", "'idx'", "]", ".", "size", "(", "0", ")", ")", "\n", "new_adj", "=", "{", "'idx'", ":", "adj", "[", "'idx'", "]", ",", "'vals'", ":", "new_vals", "}", "\n", "degs_out", ",", "_", "=", "get_degree_vects", "(", "new_adj", ",", "num_nodes", ")", "\n", "\n", "degs_out", "=", "{", "'idx'", ":", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "num_nodes", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "degs_out", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", ",", "\n", "'vals'", ":", "torch", ".", "ones", "(", "num_nodes", ")", "}", "\n", "\n", "# print ('XXX degs_out',degs_out['idx'].size(),degs_out['vals'].size())", "\n", "degs_out", "=", "u", ".", "make_sparse_tensor", "(", "degs_out", ",", "'long'", ",", "[", "num_nodes", ",", "max_deg", "]", ")", "\n", "\n", "hot_1", "=", "{", "'idx'", ":", "degs_out", ".", "_indices", "(", ")", ".", "t", "(", ")", ",", "\n", "'vals'", ":", "degs_out", ".", "_values", "(", ")", "}", "\n", "return", "hot_1", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs": [[51, 77], ["range", "torch.stack().max", "torch.stack().max", "taskers_utils.get_sp_adj", "taskers_utils.get_degree_vects", "torch.stack().max.append", "torch.stack().max.append", "int", "int", "cur_out.max", "cur_in.max", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_degree_vects"], ["", "def", "get_max_degs", "(", "args", ",", "dataset", ",", "all_window", "=", "False", ")", ":", "\n", "    ", "max_deg_out", "=", "[", "]", "\n", "max_deg_in", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "dataset", ".", "min_time", ",", "dataset", ".", "max_time", ")", ":", "\n", "        ", "if", "all_window", ":", "\n", "            ", "window", "=", "t", "+", "1", "\n", "", "else", ":", "\n", "            ", "window", "=", "args", ".", "adj_mat_time_window", "\n", "\n", "", "cur_adj", "=", "get_sp_adj", "(", "edges", "=", "dataset", ".", "edges", ",", "\n", "time", "=", "t", ",", "\n", "weighted", "=", "False", ",", "\n", "time_window", "=", "window", ")", "\n", "# print(window)", "\n", "cur_out", ",", "cur_in", "=", "get_degree_vects", "(", "cur_adj", ",", "dataset", ".", "num_nodes", ")", "\n", "max_deg_out", ".", "append", "(", "cur_out", ".", "max", "(", ")", ")", "\n", "max_deg_in", ".", "append", "(", "cur_in", ".", "max", "(", ")", ")", "\n", "# max_deg_out = torch.stack([max_deg_out,cur_out.max()]).max()", "\n", "# max_deg_in = torch.stack([max_deg_in,cur_in.max()]).max()", "\n", "# exit()", "\n", "", "max_deg_out", "=", "torch", ".", "stack", "(", "max_deg_out", ")", ".", "max", "(", ")", "\n", "max_deg_in", "=", "torch", ".", "stack", "(", "max_deg_in", ")", ".", "max", "(", ")", "\n", "max_deg_out", "=", "int", "(", "max_deg_out", ")", "+", "1", "\n", "max_deg_in", "=", "int", "(", "max_deg_in", ")", "+", "1", "\n", "\n", "return", "max_deg_out", ",", "max_deg_in", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_max_degs_static": [[78, 84], ["taskers_utils.get_degree_vects", "int", "int", "cur_out.max().item", "cur_in.max().item", "cur_out.max", "cur_in.max"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_degree_vects"], ["", "def", "get_max_degs_static", "(", "num_nodes", ",", "adj_matrix", ")", ":", "\n", "    ", "cur_out", ",", "cur_in", "=", "get_degree_vects", "(", "adj_matrix", ",", "num_nodes", ")", "\n", "max_deg_out", "=", "int", "(", "cur_out", ".", "max", "(", ")", ".", "item", "(", ")", ")", "+", "1", "\n", "max_deg_in", "=", "int", "(", "cur_in", ".", "max", "(", ")", ".", "item", "(", ")", ")", "+", "1", "\n", "\n", "return", "max_deg_out", ",", "max_deg_in", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_degree_vects": [[86, 91], ["utils.make_sparse_tensor", "u.make_sparse_tensor.matmul", "u.make_sparse_tensor.t().matmul", "torch.ones", "torch.ones", "u.make_sparse_tensor.t"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.make_sparse_tensor"], ["", "def", "get_degree_vects", "(", "adj", ",", "num_nodes", ")", ":", "\n", "    ", "adj", "=", "u", ".", "make_sparse_tensor", "(", "adj", ",", "'long'", ",", "[", "num_nodes", "]", ")", "\n", "degs_out", "=", "adj", ".", "matmul", "(", "torch", ".", "ones", "(", "num_nodes", ",", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "degs_in", "=", "adj", ".", "t", "(", ")", ".", "matmul", "(", "torch", ".", "ones", "(", "num_nodes", ",", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "return", "degs_out", ",", "degs_in", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj": [[92, 108], ["torch.sparse.FloatTensor().coalesce", "torch.sparse.FloatTensor().coalesce._indices().t", "torch.sparse.FloatTensor().coalesce._values", "torch.ones", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor().coalesce._indices", "out._indices().t.size", "out._indices().t.t"], "function", ["None"], ["", "def", "get_sp_adj", "(", "edges", ",", "time", ",", "weighted", ",", "time_window", ")", ":", "\n", "    ", "idx", "=", "edges", "[", "'idx'", "]", "\n", "subset", "=", "idx", "[", ":", ",", "ECOLS", ".", "time", "]", "<=", "time", "\n", "subset", "=", "subset", "*", "(", "idx", "[", ":", ",", "ECOLS", ".", "time", "]", ">", "(", "time", "-", "time_window", ")", ")", "\n", "idx", "=", "edges", "[", "'idx'", "]", "[", "subset", "]", "[", ":", ",", "[", "ECOLS", ".", "source", ",", "ECOLS", ".", "target", "]", "]", "\n", "vals", "=", "edges", "[", "'vals'", "]", "[", "subset", "]", "\n", "out", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idx", ".", "t", "(", ")", ",", "vals", ")", ".", "coalesce", "(", ")", "\n", "\n", "\n", "idx", "=", "out", ".", "_indices", "(", ")", ".", "t", "(", ")", "\n", "if", "weighted", ":", "\n", "        ", "vals", "=", "out", ".", "_values", "(", ")", "\n", "", "else", ":", "\n", "        ", "vals", "=", "torch", ".", "ones", "(", "idx", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "return", "{", "'idx'", ":", "idx", ",", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_edge_labels": [[109, 116], ["None"], "function", ["None"], ["", "def", "get_edge_labels", "(", "edges", ",", "time", ")", ":", "\n", "    ", "idx", "=", "edges", "[", "'idx'", "]", "\n", "subset", "=", "idx", "[", ":", ",", "ECOLS", ".", "time", "]", "==", "time", "\n", "idx", "=", "edges", "[", "'idx'", "]", "[", "subset", "]", "[", ":", ",", "[", "ECOLS", ".", "source", ",", "ECOLS", ".", "target", "]", "]", "\n", "vals", "=", "edges", "[", "'idx'", "]", "[", "subset", "]", "[", ":", ",", "ECOLS", ".", "label", "]", "\n", "\n", "return", "{", "'idx'", ":", "idx", ",", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_node_mask": [[118, 125], ["cur_adj[].unique", "torch.zeros", "float"], "function", ["None"], ["", "def", "get_node_mask", "(", "cur_adj", ",", "num_nodes", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "num_nodes", ")", "-", "float", "(", "\"Inf\"", ")", "\n", "non_zero", "=", "cur_adj", "[", "'idx'", "]", ".", "unique", "(", ")", "\n", "\n", "mask", "[", "non_zero", "]", "=", "0", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_static_sp_adj": [[126, 138], ["torch.ones", "idx.size"], "function", ["None"], ["", "def", "get_static_sp_adj", "(", "edges", ",", "weighted", ")", ":", "\n", "    ", "idx", "=", "edges", "[", "'idx'", "]", "\n", "#subset = idx[:,ECOLS.time] <= time", "\n", "#subset = subset * (idx[:,ECOLS.time] > (time - time_window))", "\n", "\n", "#idx = edges['idx'][subset][:,[ECOLS.source, ECOLS.target]]  ", "\n", "if", "weighted", ":", "\n", "        ", "vals", "=", "edges", "[", "'vals'", "]", "[", "subset", "]", "\n", "", "else", ":", "\n", "        ", "vals", "=", "torch", ".", "ones", "(", "idx", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "return", "{", "'idx'", ":", "idx", ",", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj_only_new": [[139, 141], ["taskers_utils.get_sp_adj"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_sp_adj"], ["", "def", "get_sp_adj_only_new", "(", "edges", ",", "time", ",", "weighted", ")", ":", "\n", "    ", "return", "get_sp_adj", "(", "edges", ",", "time", ",", "weighted", ",", "time_window", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.normalize_adj": [[142, 168], ["torch.sparse.FloatTensor", "taskers_utils.make_sparse_eye", "torch.sparse.FloatTensor._indices", "torch.sparse.FloatTensor._values", "torch.sparse.sum().to_dense", "sp_tensor._indices.t", "sp_tensor._values.type", "torch.Size", "sp_tensor._indices.t", "torch.sparse.sum"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.make_sparse_eye"], ["", "def", "normalize_adj", "(", "adj", ",", "num_nodes", ")", ":", "\n", "    ", "'''\n    takes an adj matrix as a dict with idx and vals and normalize it by: \n        - adding an identity matrix, \n        - computing the degree vector\n        - multiplying each element of the adj matrix (aij) by (di*dj)^-1/2\n    '''", "\n", "idx", "=", "adj", "[", "'idx'", "]", "\n", "vals", "=", "adj", "[", "'vals'", "]", "\n", "\n", "\n", "sp_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idx", ".", "t", "(", ")", ",", "vals", ".", "type", "(", "torch", ".", "float", ")", ",", "torch", ".", "Size", "(", "[", "num_nodes", ",", "num_nodes", "]", ")", ")", "\n", "\n", "sparse_eye", "=", "make_sparse_eye", "(", "num_nodes", ")", "\n", "sp_tensor", "=", "sparse_eye", "+", "sp_tensor", "\n", "\n", "idx", "=", "sp_tensor", ".", "_indices", "(", ")", "\n", "vals", "=", "sp_tensor", ".", "_values", "(", ")", "\n", "\n", "degree", "=", "torch", ".", "sparse", ".", "sum", "(", "sp_tensor", ",", "dim", "=", "1", ")", ".", "to_dense", "(", ")", "\n", "di", "=", "degree", "[", "idx", "[", "0", "]", "]", "\n", "dj", "=", "degree", "[", "idx", "[", "1", "]", "]", "\n", "\n", "vals", "=", "vals", "*", "(", "(", "di", "*", "dj", ")", "**", "-", "0.5", ")", "\n", "\n", "return", "{", "'idx'", ":", "idx", ".", "t", "(", ")", ",", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.make_sparse_eye": [[169, 175], ["torch.arange", "torch.stack().t", "torch.ones", "torch.sparse.FloatTensor", "torch.Size", "torch.stack"], "function", ["None"], ["", "def", "make_sparse_eye", "(", "size", ")", ":", "\n", "    ", "eye_idx", "=", "torch", ".", "arange", "(", "size", ")", "\n", "eye_idx", "=", "torch", ".", "stack", "(", "[", "eye_idx", ",", "eye_idx", "]", ",", "dim", "=", "1", ")", ".", "t", "(", ")", "\n", "vals", "=", "torch", ".", "ones", "(", "size", ")", "\n", "eye", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "eye_idx", ",", "vals", ",", "torch", ".", "Size", "(", "[", "size", ",", "size", "]", ")", ")", "\n", "return", "eye", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_all_non_existing_edges": [[176, 193], ["adj[].t().numpy", "taskers_utils.get_edges_ids", "numpy.arange", "numpy.array().reshape", "taskers_utils.get_edges_ids", "numpy.logical_not", "torch.tensor().t", "torch.zeros", "numpy.isin", "torch.tensor().t.size", "adj[].t", "numpy.array", "torch.tensor", "numpy.meshgrid"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_edges_ids", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_edges_ids"], ["", "def", "get_all_non_existing_edges", "(", "adj", ",", "tot_nodes", ")", ":", "\n", "    ", "true_ids", "=", "adj", "[", "'idx'", "]", ".", "t", "(", ")", ".", "numpy", "(", ")", "\n", "true_ids", "=", "get_edges_ids", "(", "true_ids", ",", "tot_nodes", ")", "\n", "\n", "all_edges_idx", "=", "np", ".", "arange", "(", "tot_nodes", ")", "\n", "all_edges_idx", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "all_edges_idx", ",", "\n", "all_edges_idx", ")", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", "\n", "\n", "all_edges_ids", "=", "get_edges_ids", "(", "all_edges_idx", ",", "tot_nodes", ")", "\n", "\n", "#only edges that are not in the true_ids should keep here", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "isin", "(", "all_edges_ids", ",", "true_ids", ")", ")", "\n", "\n", "non_existing_edges_idx", "=", "all_edges_idx", "[", ":", ",", "mask", "]", "\n", "edges", "=", "torch", ".", "tensor", "(", "non_existing_edges_idx", ")", ".", "t", "(", ")", "\n", "vals", "=", "torch", ".", "zeros", "(", "edges", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "{", "'idx'", ":", "edges", ",", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_non_existing_edges": [[195, 253], ["time.time", "adj[].t().numpy", "taskers_utils.get_edges_ids", "set", "min", "taskers_utils.get_non_existing_edges.sample_edges"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_edges_ids"], ["", "def", "get_non_existing_edges", "(", "adj", ",", "number", ",", "tot_nodes", ",", "smart_sampling", ",", "existing_nodes", "=", "None", ")", ":", "\n", "# print('----------')", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "idx", "=", "adj", "[", "'idx'", "]", ".", "t", "(", ")", ".", "numpy", "(", ")", "\n", "true_ids", "=", "get_edges_ids", "(", "idx", ",", "tot_nodes", ")", "\n", "\n", "true_ids", "=", "set", "(", "true_ids", ")", "\n", "\n", "#the maximum of edges would be all edges that don't exist between nodes that have edges", "\n", "num_edges", "=", "min", "(", "number", ",", "idx", ".", "shape", "[", "1", "]", "*", "(", "idx", ".", "shape", "[", "1", "]", "-", "1", ")", "-", "len", "(", "true_ids", ")", ")", "\n", "\n", "if", "smart_sampling", ":", "\n", "#existing_nodes = existing_nodes.numpy()", "\n", "        ", "def", "sample_edges", "(", "num_edges", ")", ":", "\n", "# print('smart_sampling')", "\n", "            ", "from_id", "=", "np", ".", "random", ".", "choice", "(", "idx", "[", "0", "]", ",", "size", "=", "num_edges", ",", "replace", "=", "True", ")", "\n", "to_id", "=", "np", ".", "random", ".", "choice", "(", "existing_nodes", ",", "size", "=", "num_edges", ",", "replace", "=", "True", ")", "\n", "#print ('smart_sampling', from_id, to_id)", "\n", "\n", "if", "num_edges", ">", "1", ":", "\n", "                ", "edges", "=", "np", ".", "stack", "(", "[", "from_id", ",", "to_id", "]", ")", "\n", "", "else", ":", "\n", "                ", "edges", "=", "np", ".", "concatenate", "(", "[", "from_id", ",", "to_id", "]", ")", "\n", "", "return", "edges", "\n", "", "", "else", ":", "\n", "        ", "def", "sample_edges", "(", "num_edges", ")", ":", "\n", "            ", "if", "num_edges", ">", "1", ":", "\n", "                ", "edges", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "tot_nodes", ",", "(", "2", ",", "num_edges", ")", ")", "\n", "", "else", ":", "\n", "                ", "edges", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "tot_nodes", ",", "(", "2", ",", ")", ")", "\n", "", "return", "edges", "\n", "\n", "", "", "edges", "=", "sample_edges", "(", "num_edges", "*", "4", ")", "\n", "\n", "edge_ids", "=", "edges", "[", "0", "]", "*", "tot_nodes", "+", "edges", "[", "1", "]", "\n", "\n", "out_ids", "=", "set", "(", ")", "\n", "num_sampled", "=", "0", "\n", "sampled_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_edges", "*", "4", ")", ":", "\n", "        ", "eid", "=", "edge_ids", "[", "i", "]", "\n", "#ignore if any of these conditions happen", "\n", "if", "eid", "in", "out_ids", "or", "edges", "[", "0", ",", "i", "]", "==", "edges", "[", "1", ",", "i", "]", "or", "eid", "in", "true_ids", ":", "\n", "            ", "continue", "\n", "\n", "#add the eid and the index to a list", "\n", "", "out_ids", ".", "add", "(", "eid", ")", "\n", "sampled_indices", ".", "append", "(", "i", ")", "\n", "num_sampled", "+=", "1", "\n", "\n", "#if we have sampled enough edges break", "\n", "if", "num_sampled", ">=", "num_edges", ":", "\n", "            ", "break", "\n", "\n", "", "", "edges", "=", "edges", "[", ":", ",", "sampled_indices", "]", "\n", "edges", "=", "torch", ".", "tensor", "(", "edges", ")", ".", "t", "(", ")", "\n", "vals", "=", "torch", ".", "zeros", "(", "edges", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "{", "'idx'", ":", "edges", ",", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.taskers_utils.get_edges_ids": [[254, 259], ["None"], "function", ["None"], ["", "def", "get_edges_ids", "(", "sp_idx", ",", "tot_nodes", ")", ":", "\n", "# print(sp_idx)", "\n", "# print(tot_nodes)", "\n", "# print(sp_idx[0]*tot_nodes)", "\n", "    ", "return", "sp_idx", "[", "0", "]", "*", "tot_nodes", "+", "sp_idx", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.auto_syst_dl.Autonomous_Systems_Dataset.__init__": [[12, 19], ["utils.Namespace", "os.path.join", "tarfile.open", "auto_syst_dl.Autonomous_Systems_Dataset.load_edges"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.load_edges"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "args", ".", "aut_sys_args", "=", "u", ".", "Namespace", "(", "args", ".", "aut_sys_args", ")", "\n", "\n", "tar_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "aut_sys_args", ".", "folder", ",", "args", ".", "aut_sys_args", ".", "tar_file", ")", "\n", "tar_archive", "=", "tarfile", ".", "open", "(", "tar_file", ",", "'r:gz'", ")", "\n", "\n", "self", ".", "edges", "=", "self", ".", "load_edges", "(", "args", ",", "tar_archive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.auto_syst_dl.Autonomous_Systems_Dataset.load_edges": [[20, 71], ["tar_archive.getnames", "auto_syst_dl.Autonomous_Systems_Dataset.times_from_names", "utils.Namespace", "torch.cat", "edges[].unique", "utils.aggregate_by_time", "int", "float", "edges[].max", "edges[].min", "utils.load_data_from_tar", "torch.cat", "torch.cat", "torch.cat.append", "torch.ones", "torch.zeros", "edges[].max", "ids.unique().size", "torch.cat.size", "torch.cat.size", "ids.unique"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.auto_syst_dl.Autonomous_Systems_Dataset.times_from_names", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.aggregate_by_time", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data_from_tar"], ["", "def", "load_edges", "(", "self", ",", "args", ",", "tar_archive", ")", ":", "\n", "\t\t", "files", "=", "tar_archive", ".", "getnames", "(", ")", "\n", "\n", "cont_files2times", "=", "self", ".", "times_from_names", "(", "files", ")", "\n", "\n", "edges", "=", "[", "]", "\n", "cols", "=", "u", ".", "Namespace", "(", "{", "'source'", ":", "0", ",", "\n", "'target'", ":", "1", ",", "\n", "'time'", ":", "2", "}", ")", "\n", "for", "file", "in", "files", ":", "\n", "\t\t\t", "data", "=", "u", ".", "load_data_from_tar", "(", "file", ",", "\n", "tar_archive", ",", "\n", "starting_line", "=", "4", ",", "\n", "sep", "=", "'\\t'", ",", "\n", "type_fn", "=", "int", ",", "\n", "tensor_const", "=", "torch", ".", "LongTensor", ")", "\n", "\n", "time_col", "=", "torch", ".", "zeros", "(", "data", ".", "size", "(", "0", ")", ",", "1", ",", "dtype", "=", "torch", ".", "long", ")", "+", "cont_files2times", "[", "file", "]", "\n", "\n", "data", "=", "torch", ".", "cat", "(", "[", "data", ",", "time_col", "]", ",", "dim", "=", "1", ")", "\n", "\n", "data", "=", "torch", ".", "cat", "(", "[", "data", ",", "data", "[", ":", ",", "[", "cols", ".", "target", ",", "\n", "cols", ".", "source", ",", "\n", "cols", ".", "time", "]", "]", "]", ")", "\n", "\n", "edges", ".", "append", "(", "data", ")", "\n", "\n", "", "edges", "=", "torch", ".", "cat", "(", "edges", ")", "\n", "\n", "\n", "_", ",", "edges", "[", ":", ",", "[", "cols", ".", "source", ",", "cols", ".", "target", "]", "]", "=", "edges", "[", ":", ",", "[", "cols", ".", "source", ",", "cols", ".", "target", "]", "]", ".", "unique", "(", "return_inverse", "=", "True", ")", "\n", "\n", "\n", "#use only first X time steps", "\n", "indices", "=", "edges", "[", ":", ",", "cols", ".", "time", "]", "<", "args", ".", "aut_sys_args", ".", "steps_accounted", "\n", "edges", "=", "edges", "[", "indices", ",", ":", "]", "\n", "\n", "#time aggregation", "\n", "edges", "[", ":", ",", "cols", ".", "time", "]", "=", "u", ".", "aggregate_by_time", "(", "edges", "[", ":", ",", "cols", ".", "time", "]", ",", "args", ".", "aut_sys_args", ".", "aggr_time", ")", "\n", "\n", "self", ".", "num_nodes", "=", "int", "(", "edges", "[", ":", ",", "[", "cols", ".", "source", ",", "cols", ".", "target", "]", "]", ".", "max", "(", ")", "+", "1", ")", "\n", "\n", "\n", "ids", "=", "edges", "[", ":", ",", "cols", ".", "source", "]", "*", "self", ".", "num_nodes", "+", "edges", "[", ":", ",", "cols", ".", "target", "]", "\n", "self", ".", "num_non_existing", "=", "float", "(", "self", ".", "num_nodes", "**", "2", "-", "ids", ".", "unique", "(", ")", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "self", ".", "max_time", "=", "edges", "[", ":", ",", "cols", ".", "time", "]", ".", "max", "(", ")", "\n", "self", ".", "min_time", "=", "edges", "[", ":", ",", "cols", ".", "time", "]", ".", "min", "(", ")", "\n", "\n", "return", "{", "'idx'", ":", "edges", ",", "'vals'", ":", "torch", ".", "ones", "(", "edges", ".", "size", "(", "0", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.auto_syst_dl.Autonomous_Systems_Dataset.times_from_names": [[72, 97], ["datetime.datetime.datetime.strptime", "sorted", "files2times.values", "datetime.datetime.datetime.strptime"], "methods", ["None"], ["", "def", "times_from_names", "(", "self", ",", "files", ")", ":", "\n", "\t\t", "files2times", "=", "{", "}", "\n", "times2files", "=", "{", "}", "\n", "\n", "base", "=", "datetime", ".", "strptime", "(", "\"19800101\"", ",", "'%Y%m%d'", ")", "\n", "for", "file", "in", "files", ":", "\n", "\t\t\t", "delta", "=", "(", "datetime", ".", "strptime", "(", "file", "[", "2", ":", "-", "4", "]", ",", "'%Y%m%d'", ")", "-", "base", ")", ".", "days", "\n", "\n", "files2times", "[", "file", "]", "=", "delta", "\n", "times2files", "[", "delta", "]", "=", "file", "\n", "\n", "\n", "", "cont_files2times", "=", "{", "}", "\n", "\n", "sorted_times", "=", "sorted", "(", "files2times", ".", "values", "(", ")", ")", "\n", "new_t", "=", "0", "\n", "\n", "for", "t", "in", "sorted_times", ":", "\n", "\n", "\t\t\t", "file", "=", "times2files", "[", "t", "]", "\n", "\n", "cont_files2times", "[", "file", "]", "=", "new_t", "\n", "\n", "new_t", "+=", "1", "\n", "", "return", "cont_files2times", "", "", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.Namespace.__init__": [[83, 85], ["utils.Namespace.__dict__.update"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "adict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "adict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.pad_with_last_col": [[9, 14], ["out.extend", "torch.cat", "matrix.size"], "function", ["None"], ["def", "pad_with_last_col", "(", "matrix", ",", "cols", ")", ":", "\n", "    ", "out", "=", "[", "matrix", "]", "\n", "pad", "=", "[", "matrix", "[", ":", ",", "[", "-", "1", "]", "]", "]", "*", "(", "cols", "-", "matrix", ".", "size", "(", "1", ")", ")", "\n", "out", ".", "extend", "(", "pad", ")", "\n", "return", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.pad_with_last_val": [[15, 22], ["torch.cat", "torch.ones", "torch.cat.size"], "function", ["None"], ["", "def", "pad_with_last_val", "(", "vect", ",", "k", ")", ":", "\n", "    ", "device", "=", "'cuda'", "if", "vect", ".", "is_cuda", "else", "'cpu'", "\n", "pad", "=", "torch", ".", "ones", "(", "k", "-", "vect", ".", "size", "(", "0", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "*", "vect", "[", "-", "1", "]", "\n", "vect", "=", "torch", ".", "cat", "(", "[", "vect", ",", "pad", "]", ")", "\n", "return", "vect", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sparse_prepare_tensor": [[25, 32], ["utils.make_sparse_tensor", "utils.sp_ignore_batch_dim"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.make_sparse_tensor", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sp_ignore_batch_dim"], ["", "def", "sparse_prepare_tensor", "(", "tensor", ",", "torch_size", ",", "ignore_batch_dim", "=", "True", ")", ":", "\n", "    ", "if", "ignore_batch_dim", ":", "\n", "        ", "tensor", "=", "sp_ignore_batch_dim", "(", "tensor", ")", "\n", "", "tensor", "=", "make_sparse_tensor", "(", "tensor", ",", "\n", "tensor_type", "=", "'float'", ",", "\n", "torch_size", "=", "torch_size", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sp_ignore_batch_dim": [[33, 37], ["None"], "function", ["None"], ["", "def", "sp_ignore_batch_dim", "(", "tensor_dict", ")", ":", "\n", "    ", "tensor_dict", "[", "'idx'", "]", "=", "tensor_dict", "[", "'idx'", "]", "[", "0", "]", "\n", "tensor_dict", "[", "'vals'", "]", "=", "tensor_dict", "[", "'vals'", "]", "[", "0", "]", "\n", "return", "tensor_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.aggregate_by_time": [[38, 42], ["time_vector.min"], "function", ["None"], ["", "def", "aggregate_by_time", "(", "time_vector", ",", "time_win_aggr", ")", ":", "\n", "        ", "time_vector", "=", "time_vector", "-", "time_vector", ".", "min", "(", ")", "\n", "time_vector", "=", "time_vector", "//", "time_win_aggr", "\n", "return", "time_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sort_by_time": [[43, 47], ["torch.sort"], "function", ["None"], ["", "def", "sort_by_time", "(", "data", ",", "time_col", ")", ":", "\n", "        ", "_", ",", "sort", "=", "torch", ".", "sort", "(", "data", "[", ":", ",", "time_col", "]", ")", "\n", "data", "=", "data", "[", "sort", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.print_sp_tensor": [[48, 50], ["print", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor", "sp_tensor[].t", "torch.Size"], "function", ["None"], ["", "def", "print_sp_tensor", "(", "sp_tensor", ",", "size", ")", ":", "\n", "    ", "print", "(", "torch", ".", "sparse", ".", "FloatTensor", "(", "sp_tensor", "[", "'idx'", "]", ".", "t", "(", ")", ",", "sp_tensor", "[", "'vals'", "]", ",", "torch", ".", "Size", "(", "[", "size", ",", "size", "]", ")", ")", ".", "to_dense", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.reset_param": [[51, 54], ["t.data.uniform_", "math.sqrt", "t.size"], "function", ["None"], ["", "def", "reset_param", "(", "t", ")", ":", "\n", "    ", "stdv", "=", "2.", "/", "math", ".", "sqrt", "(", "t", ".", "size", "(", "0", ")", ")", "\n", "t", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.make_sparse_tensor": [[55, 74], ["len", "torch.Size", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "len", "torch.Size", "adj[].t", "adj[].type", "adj[].t", "adj[].type", "torch.sparse.LongTensor", "NotImplementedError", "adj[].t", "adj[].type"], "function", ["None"], ["", "def", "make_sparse_tensor", "(", "adj", ",", "tensor_type", ",", "torch_size", ")", ":", "\n", "    ", "if", "len", "(", "torch_size", ")", "==", "2", ":", "\n", "        ", "tensor_size", "=", "torch", ".", "Size", "(", "torch_size", ")", "\n", "", "elif", "len", "(", "torch_size", ")", "==", "1", ":", "\n", "        ", "tensor_size", "=", "torch", ".", "Size", "(", "torch_size", "*", "2", ")", "\n", "\n", "", "if", "tensor_type", "==", "'float'", ":", "\n", "        ", "test", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "adj", "[", "'idx'", "]", ".", "t", "(", ")", ",", "\n", "adj", "[", "'vals'", "]", ".", "type", "(", "torch", ".", "float", ")", ",", "\n", "tensor_size", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "adj", "[", "'idx'", "]", ".", "t", "(", ")", ",", "\n", "adj", "[", "'vals'", "]", ".", "type", "(", "torch", ".", "float", ")", ",", "\n", "tensor_size", ")", "\n", "", "elif", "tensor_type", "==", "'long'", ":", "\n", "        ", "return", "torch", ".", "sparse", ".", "LongTensor", "(", "adj", "[", "'idx'", "]", ".", "t", "(", ")", ",", "\n", "adj", "[", "'vals'", "]", ".", "type", "(", "torch", ".", "long", ")", ",", "\n", "tensor_size", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'only make floats or long sparse tensors'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.sp_to_dict": [[75, 78], ["sp_tensor._indices().t", "sp_tensor._values", "sp_tensor._indices"], "function", ["None"], ["", "", "def", "sp_to_dict", "(", "sp_tensor", ")", ":", "\n", "    ", "return", "{", "'idx'", ":", "sp_tensor", ".", "_indices", "(", ")", ".", "t", "(", ")", ",", "\n", "'vals'", ":", "sp_tensor", ".", "_values", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.set_seeds": [[86, 93], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "int", "time.time"], "function", ["None"], ["", "", "def", "set_seeds", "(", "rank", ")", ":", "\n", "    ", "seed", "=", "int", "(", "time", ".", "time", "(", ")", ")", "+", "rank", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value": [[95, 106], ["str", "str().lower", "random.randrange", "numpy.logspace", "random.uniform", "str", "numpy.log10", "numpy.log10", "numpy.random.choice"], "function", ["None"], ["", "def", "random_param_value", "(", "param", ",", "param_min", ",", "param_max", ",", "type", "=", "'int'", ")", ":", "\n", "    ", "if", "str", "(", "param", ")", "is", "None", "or", "str", "(", "param", ")", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "        ", "if", "type", "==", "'int'", ":", "\n", "            ", "return", "random", ".", "randrange", "(", "param_min", ",", "param_max", "+", "1", ")", "\n", "", "elif", "type", "==", "'logscale'", ":", "\n", "            ", "interval", "=", "np", ".", "logspace", "(", "np", ".", "log10", "(", "param_min", ")", ",", "np", ".", "log10", "(", "param_max", ")", ",", "num", "=", "100", ")", "\n", "return", "np", ".", "random", ".", "choice", "(", "interval", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "random", ".", "uniform", "(", "param_min", ",", "param_max", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data": [[107, 112], ["torch.tensor", "open", "file.read().splitlines.read().splitlines", "file.read().splitlines.read", "float", "row.split"], "function", ["None"], ["", "", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "file", ":", "\n", "        ", "file", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "data", "=", "torch", ".", "tensor", "(", "[", "[", "float", "(", "r", ")", "for", "r", "in", "row", ".", "split", "(", "','", ")", "]", "for", "row", "in", "file", "[", "1", ":", "]", "]", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.load_data_from_tar": [[113, 127], ["tar_archive.extractfile", "tar_archive.extractfile.read", "lines.replace.decode", "lines.replace.splitlines", "tensor_const", "lines.replace.replace", "lines.replace.replace", "type_fn", "row.split"], "function", ["None"], ["", "def", "load_data_from_tar", "(", "file", ",", "tar_archive", ",", "replace_unknow", "=", "False", ",", "starting_line", "=", "1", ",", "sep", "=", "','", ",", "type_fn", "=", "float", ",", "tensor_const", "=", "torch", ".", "DoubleTensor", ")", ":", "\n", "    ", "f", "=", "tar_archive", ".", "extractfile", "(", "file", ")", "\n", "lines", "=", "f", ".", "read", "(", ")", "#", "\n", "lines", "=", "lines", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "replace_unknow", ":", "\n", "        ", "lines", "=", "lines", ".", "replace", "(", "'unknow'", ",", "'-1'", ")", "\n", "lines", "=", "lines", ".", "replace", "(", "'-1n'", ",", "'-1'", ")", "\n", "\n", "", "lines", "=", "lines", ".", "splitlines", "(", ")", "\n", "\n", "data", "=", "[", "[", "type_fn", "(", "r", ")", "for", "r", "in", "row", ".", "split", "(", "sep", ")", "]", "for", "row", "in", "lines", "[", "starting_line", ":", "]", "]", "\n", "data", "=", "tensor_const", "(", "data", ")", "\n", "#print (file,'data size', data.size())", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.create_parser": [[128, 132], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.FileType"], "function", ["None"], ["", "def", "create_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--config_file'", ",", "default", "=", "'experiments/parameters_example.yaml'", ",", "type", "=", "argparse", ".", "FileType", "(", "mode", "=", "'r'", ")", ",", "help", "=", "'optional, yaml file containing parameters to be used, overrides command line parameters'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.parse_args": [[133, 160], ["parser.parse_args", "utils.random_param_value", "utils.random_param_value", "utils.random_param_value", "utils.random_param_value", "utils.random_param_value", "utils.random_param_value", "yaml.load", "delattr", "yaml.load.items", "utils.random_param_value", "utils.random_param_value", "parser.parse_args.gcn_parameters[].lower", "parser.parse_args.gcn_parameters[].lower"], "function", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.parse_args", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.random_param_value"], ["", "def", "parse_args", "(", "parser", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "config_file", ":", "\n", "        ", "data", "=", "yaml", ".", "load", "(", "args", ".", "config_file", ")", "\n", "delattr", "(", "args", ",", "'config_file'", ")", "\n", "# print(data)", "\n", "arg_dict", "=", "args", ".", "__dict__", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "arg_dict", "[", "key", "]", "=", "value", "\n", "\n", "", "", "args", ".", "learning_rate", "=", "random_param_value", "(", "args", ".", "learning_rate", ",", "args", ".", "learning_rate_min", ",", "args", ".", "learning_rate_max", ",", "type", "=", "'logscale'", ")", "\n", "# args.adj_mat_time_window = random_param_value(args.adj_mat_time_window, args.adj_mat_time_window_min, args.adj_mat_time_window_max, type='int')", "\n", "args", ".", "num_hist_steps", "=", "random_param_value", "(", "args", ".", "num_hist_steps", ",", "args", ".", "num_hist_steps_min", ",", "args", ".", "num_hist_steps_max", ",", "type", "=", "'int'", ")", "\n", "args", ".", "gcn_parameters", "[", "'feats_per_node'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'feats_per_node'", "]", ",", "args", ".", "gcn_parameters", "[", "'feats_per_node_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'feats_per_node_max'", "]", ",", "type", "=", "'int'", ")", "\n", "args", ".", "gcn_parameters", "[", "'layer_1_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'layer_1_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "if", "args", ".", "gcn_parameters", "[", "'layer_2_feats_same_as_l1'", "]", "or", "args", ".", "gcn_parameters", "[", "'layer_2_feats_same_as_l1'", "]", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "        ", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", "=", "args", ".", "gcn_parameters", "[", "'layer_1_feats'", "]", "\n", "", "else", ":", "\n", "        ", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'layer_2_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'layer_1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "if", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats_same_as_l1'", "]", "or", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats_same_as_l1'", "]", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "        ", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", "=", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats'", "]", "\n", "", "else", ":", "\n", "        ", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'lstm_l2_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'lstm_l1_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "", "args", ".", "gcn_parameters", "[", "'cls_feats'", "]", "=", "random_param_value", "(", "args", ".", "gcn_parameters", "[", "'cls_feats'", "]", ",", "args", ".", "gcn_parameters", "[", "'cls_feats_min'", "]", ",", "args", ".", "gcn_parameters", "[", "'cls_feats_max'", "]", ",", "type", "=", "'int'", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.__init__": [[6, 89], ["utils.Namespace", "utils.Namespace", "bitcoin_dl.bitcoin_dataset.load_edges", "bitcoin_dl.bitcoin_dataset.make_contigous_node_ids", "edges[].unique().size", "utils.aggregate_by_time", "utils.aggregate_by_time.max", "utils.aggregate_by_time.min", "bitcoin_dl.bitcoin_dataset.cluster_negs_and_positives", "torch.cat", "edges[].t", "torch.sparse.LongTensor().coalesce", "torch.sparse.LongTensor().coalesce", "sp_edges._values", "torch.zeros", "torch.cat", "sp_edges._values.size", "edges[].unique", "torch.sparse.LongTensor", "torch.sparse.LongTensor", "sp_edges._indices().t", "torch.zeros.view", "torch.Size", "torch.Size", "sp_edges._indices"], "methods", ["home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.load_edges", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.make_contigous_node_ids", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.utils.aggregate_by_time", "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.cluster_negs_and_positives"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "assert", "args", ".", "task", "in", "[", "'link_pred'", ",", "'edge_cls'", "]", ",", "'bitcoin only implements link_pred or edge_cls'", "\n", "self", ".", "ecols", "=", "u", ".", "Namespace", "(", "{", "'FromNodeId'", ":", "0", ",", "\n", "'ToNodeId'", ":", "1", ",", "\n", "'Weight'", ":", "2", ",", "\n", "'TimeStep'", ":", "3", "\n", "}", ")", "\n", "args", ".", "bitcoin_args", "=", "u", ".", "Namespace", "(", "args", ".", "bitcoin_args", ")", "\n", "\n", "#build edge data structure", "\n", "edges", "=", "self", ".", "load_edges", "(", "args", ".", "bitcoin_args", ")", "\n", "\n", "edges", "=", "self", ".", "make_contigous_node_ids", "(", "edges", ")", "\n", "num_nodes", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "\n", "self", ".", "ecols", ".", "ToNodeId", "]", "]", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "\n", "timesteps", "=", "u", ".", "aggregate_by_time", "(", "edges", "[", ":", ",", "self", ".", "ecols", ".", "TimeStep", "]", ",", "args", ".", "bitcoin_args", ".", "aggr_time", ")", "\n", "self", ".", "max_time", "=", "timesteps", ".", "max", "(", ")", "\n", "self", ".", "min_time", "=", "timesteps", ".", "min", "(", ")", "\n", "edges", "[", ":", ",", "self", ".", "ecols", ".", "TimeStep", "]", "=", "timesteps", "\n", "\n", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", "=", "self", ".", "cluster_negs_and_positives", "(", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", ")", "\n", "\n", "\n", "#add the reversed link to make the graph undirected", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "edges", ",", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "ToNodeId", ",", "\n", "self", ".", "ecols", ".", "FromNodeId", ",", "\n", "self", ".", "ecols", ".", "Weight", ",", "\n", "self", ".", "ecols", ".", "TimeStep", "]", "]", "]", ")", "\n", "\n", "#separate classes", "\n", "sp_indices", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "\n", "self", ".", "ecols", ".", "ToNodeId", ",", "\n", "self", ".", "ecols", ".", "TimeStep", "]", "]", ".", "t", "(", ")", "\n", "sp_values", "=", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", "\n", "\n", "\n", "neg_mask", "=", "sp_values", "==", "-", "1", "\n", "\n", "neg_sp_indices", "=", "sp_indices", "[", ":", ",", "neg_mask", "]", "\n", "neg_sp_values", "=", "sp_values", "[", "neg_mask", "]", "\n", "neg_sp_edges", "=", "torch", ".", "sparse", ".", "LongTensor", "(", "neg_sp_indices", "\n", ",", "neg_sp_values", ",", "\n", "torch", ".", "Size", "(", "[", "num_nodes", ",", "\n", "num_nodes", ",", "\n", "self", ".", "max_time", "+", "1", "]", ")", ")", ".", "coalesce", "(", ")", "\n", "\n", "pos_mask", "=", "sp_values", "==", "1", "\n", "\n", "pos_sp_indices", "=", "sp_indices", "[", ":", ",", "pos_mask", "]", "\n", "pos_sp_values", "=", "sp_values", "[", "pos_mask", "]", "\n", "\n", "pos_sp_edges", "=", "torch", ".", "sparse", ".", "LongTensor", "(", "pos_sp_indices", "\n", ",", "pos_sp_values", ",", "\n", "torch", ".", "Size", "(", "[", "num_nodes", ",", "\n", "num_nodes", ",", "\n", "self", ".", "max_time", "+", "1", "]", ")", ")", ".", "coalesce", "(", ")", "\n", "\n", "#scale positive class to separate after adding", "\n", "pos_sp_edges", "*=", "1000", "\n", "\n", "#we substract the neg_sp_edges to make the values positive", "\n", "sp_edges", "=", "(", "pos_sp_edges", "-", "neg_sp_edges", ")", ".", "coalesce", "(", ")", "\n", "\n", "#separating negs and positive edges per edge/timestamp", "\n", "vals", "=", "sp_edges", ".", "_values", "(", ")", "\n", "neg_vals", "=", "vals", "%", "1000", "\n", "pos_vals", "=", "vals", "//", "1000", "\n", "#We add the negative and positive scores and do majority voting", "\n", "vals", "=", "pos_vals", "-", "neg_vals", "\n", "#creating labels new_vals -> the label of the edges", "\n", "new_vals", "=", "torch", ".", "zeros", "(", "vals", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "new_vals", "[", "vals", ">", "0", "]", "=", "1", "\n", "new_vals", "[", "vals", "<=", "0", "]", "=", "0", "\n", "indices_labels", "=", "torch", ".", "cat", "(", "[", "sp_edges", ".", "_indices", "(", ")", ".", "t", "(", ")", ",", "new_vals", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "#the weight of the edges (vals), is simply the number of edges between two entities at each time_step", "\n", "vals", "=", "pos_vals", "+", "neg_vals", "\n", "\n", "\n", "self", ".", "edges", "=", "{", "'idx'", ":", "indices_labels", ",", "'vals'", ":", "vals", "}", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.cluster_negs_and_positives": [[91, 97], ["None"], "methods", ["None"], ["", "def", "cluster_negs_and_positives", "(", "self", ",", "ratings", ")", ":", "\n", "        ", "pos_indices", "=", "ratings", ">", "0", "\n", "neg_indices", "=", "ratings", "<=", "0", "\n", "ratings", "[", "pos_indices", "]", "=", "1", "\n", "ratings", "[", "neg_indices", "]", "=", "-", "1", "\n", "return", "ratings", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.prepare_node_feats": [[98, 101], ["None"], "methods", ["None"], ["", "def", "prepare_node_feats", "(", "self", ",", "node_feats", ")", ":", "\n", "        ", "node_feats", "=", "node_feats", "[", "0", "]", "\n", "return", "node_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.edges_to_sp_dict": [[102, 110], ["None"], "methods", ["None"], ["", "def", "edges_to_sp_dict", "(", "self", ",", "edges", ")", ":", "\n", "        ", "idx", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "\n", "self", ".", "ecols", ".", "ToNodeId", ",", "\n", "self", ".", "ecols", ".", "TimeStep", "]", "]", "\n", "\n", "vals", "=", "edges", "[", ":", ",", "self", ".", "ecols", ".", "Weight", "]", "\n", "return", "{", "'idx'", ":", "idx", ",", "\n", "'vals'", ":", "vals", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.get_num_nodes": [[111, 115], ["all_ids.max"], "methods", ["None"], ["", "def", "get_num_nodes", "(", "self", ",", "edges", ")", ":", "\n", "        ", "all_ids", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "self", ".", "ecols", ".", "ToNodeId", "]", "]", "\n", "num_nodes", "=", "all_ids", ".", "max", "(", ")", "+", "1", "\n", "return", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.load_edges": [[116, 123], ["os.path.join", "torch.tensor", "open", "f.read().splitlines", "float", "f.read", "row.split"], "methods", ["None"], ["", "def", "load_edges", "(", "self", ",", "bitcoin_args", ")", ":", "\n", "        ", "file", "=", "os", ".", "path", ".", "join", "(", "bitcoin_args", ".", "folder", ",", "bitcoin_args", ".", "edges_file", ")", "\n", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "edges", "=", "[", "[", "float", "(", "r", ")", "for", "r", "in", "row", ".", "split", "(", "','", ")", "]", "for", "row", "in", "lines", "]", "\n", "edges", "=", "torch", ".", "tensor", "(", "edges", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_EvolveGCN.None.bitcoin_dl.bitcoin_dataset.make_contigous_node_ids": [[124, 129], ["new_edges.unique"], "methods", ["None"], ["", "def", "make_contigous_node_ids", "(", "self", ",", "edges", ")", ":", "\n", "        ", "new_edges", "=", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "self", ".", "ecols", ".", "ToNodeId", "]", "]", "\n", "_", ",", "new_edges", "=", "new_edges", ".", "unique", "(", "return_inverse", "=", "True", ")", "\n", "edges", "[", ":", ",", "[", "self", ".", "ecols", ".", "FromNodeId", ",", "self", ".", "ecols", ".", "ToNodeId", "]", "]", "=", "new_edges", "\n", "return", "edges", "\n", "", "", ""]]}