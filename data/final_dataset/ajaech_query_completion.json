{"home.repos.pwc.inspect_result.ajaech_query_completion.code.factorcell.FactorCell.Lock": [[7, 27], ["tensorflow.group", "tensorflow.no_op", "tensorflow.squeeze", "tensorflow.squeeze", "lock_ops.append", "lock_ops.append", "tensorflow.squeeze", "lock_ops.append", "lock_ops.append", "tensorflow.matmul", "factorcell.FactorCell.lockedW.assign", "factorcell.FactorCell.lockedW.assign", "factorcell.FactorCell.lockedBias.assign", "factorcell.FactorCell.lockedBias.assign"], "methods", ["None"], ["def", "Lock", "(", "self", ")", ":", "\n", "    ", "\"\"\"Used to lock in the personalization.\"\"\"", "\n", "lock_ops", "=", "[", "tf", ".", "no_op", "(", ")", "]", "\n", "\n", "if", "self", ".", "lowrank_adaptation", ":", "\n", "# compute the new W", "\n", "      ", "left_adapt", "=", "tf", ".", "squeeze", "(", "self", ".", "left_adapt", ")", "\n", "right_adapt", "=", "tf", ".", "squeeze", "(", "self", ".", "right_adapt", ")", "\n", "final_w", "=", "self", ".", "W", "+", "tf", ".", "matmul", "(", "left_adapt", ",", "right_adapt", ")", "\n", "lock_ops", ".", "append", "(", "self", ".", "lockedW", ".", "assign", "(", "final_w", ")", ")", "\n", "", "else", ":", "\n", "      ", "lock_ops", ".", "append", "(", "self", ".", "lockedW", ".", "assign", "(", "self", ".", "W", ")", ")", "\n", "\n", "", "if", "self", ".", "mikolov_adapt", ":", "\n", "      ", "final_bias", "=", "tf", ".", "squeeze", "(", "self", ".", "bias", "+", "self", ".", "delta", ")", "\n", "lock_ops", ".", "append", "(", "self", ".", "lockedBias", ".", "assign", "(", "final_bias", ")", ")", "\n", "", "else", ":", "\n", "      ", "lock_ops", ".", "append", "(", "self", ".", "lockedBias", ".", "assign", "(", "self", ".", "bias", ")", ")", "\n", "\n", "", "self", ".", "lock_op", "=", "tf", ".", "group", "(", "*", "lock_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.factorcell.FactorCell.__init__": [[29, 87], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "factorcell.FactorCell.Lock", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.constant_initializer", "factorcell.FactorCell.gammas.append", "factorcell.FactorCell.betas.append", "tensorflow.get_variable", "tensorflow.get_variable", "context_embed.get_shape", "context_embed.get_shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.Lock"], ["", "def", "__init__", "(", "self", ",", "num_units", ",", "embedding_size", ",", "context_embed", ",", "\n", "bias_adaptation", "=", "False", ",", "lowrank_adaptation", "=", "False", ",", "\n", "rank", "=", "10", ",", "layer_norm", "=", "False", ",", "dropout_keep_prob", "=", "None", ")", ":", "\n", "    ", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_forget_bias", "=", "1.0", "\n", "self", ".", "_activation", "=", "tf", ".", "tanh", "\n", "self", ".", "mikolov_adapt", "=", "bias_adaptation", "\n", "self", ".", "lowrank_adaptation", "=", "lowrank_adaptation", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "self", ".", "_keep_prob", "=", "dropout_keep_prob", "\n", "\n", "input_size", "=", "num_units", "+", "embedding_size", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'factor_cell'", ")", ":", "\n", "      ", "self", ".", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "[", "input_size", ",", "3", "*", "self", ".", "_num_units", "]", ")", "\n", "self", ".", "lockedW", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "self", ".", "W", ")", ",", "name", "=", "'lockedW'", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "LOCAL_VARIABLES", "]", ",", "\n", "trainable", "=", "False", ")", "\n", "\n", "self", ".", "bias", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "[", "3", "*", "self", ".", "_num_units", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ",", "tf", ".", "float32", ")", ")", "\n", "self", ".", "lockedBias", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "self", ".", "bias", ")", ",", "name", "=", "'lockedBias'", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "LOCAL_VARIABLES", "]", ",", "\n", "trainable", "=", "False", ")", "\n", "\n", "if", "self", ".", "layer_norm", ":", "\n", "        ", "self", ".", "gammas", "=", "[", "]", "\n", "self", ".", "betas", "=", "[", "]", "\n", "for", "gate", "in", "[", "'j'", ",", "'f'", ",", "'o'", "]", ":", "\n", "          ", "self", ".", "gammas", ".", "append", "(", "\n", "tf", ".", "get_variable", "(", "'gamma_'", "+", "gate", ",", "shape", "=", "[", "num_units", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", ")", "\n", "self", ".", "betas", ".", "append", "(", "\n", "tf", ".", "get_variable", "(", "'beta_'", "+", "gate", ",", "shape", "=", "[", "num_units", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", ")", "\n", "\n", "", "", "if", "self", ".", "lowrank_adaptation", ":", "\n", "        ", "context_embed_size", "=", "context_embed", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "left_adapt_generator", "=", "tf", ".", "get_variable", "(", "\n", "'left_generator'", ",", "[", "context_embed_size", ",", "input_size", "*", "rank", "]", ")", "\n", "left_adapt_unshaped", "=", "tf", ".", "matmul", "(", "context_embed", ",", "left_adapt_generator", ",", "\n", "name", "=", "'left_matmul'", ")", "\n", "self", ".", "left_adapt", "=", "tf", ".", "reshape", "(", "\n", "left_adapt_unshaped", ",", "[", "-", "1", ",", "input_size", ",", "rank", "]", ")", "\n", "\n", "right_adapt_generator", "=", "tf", ".", "get_variable", "(", "\n", "'right_generator'", ",", "[", "context_embed_size", ",", "3", "*", "num_units", "*", "rank", "]", ")", "\n", "right_adapt_unshaped", "=", "tf", ".", "matmul", "(", "context_embed", ",", "right_adapt_generator", ",", "\n", "name", "=", "'right_matmul'", ")", "\n", "self", ".", "right_adapt", "=", "tf", ".", "reshape", "(", "\n", "right_adapt_unshaped", ",", "[", "-", "1", ",", "rank", ",", "3", "*", "num_units", "]", ")", "\n", "\n", "", "if", "self", ".", "mikolov_adapt", ":", "\n", "        ", "context_embed_size", "=", "context_embed", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "self", ".", "biases", "=", "tf", ".", "get_variable", "(", "\n", "'mikolov_biases'", ",", "[", "context_embed_size", ",", "3", "*", "self", ".", "_num_units", "]", ")", "\n", "self", ".", "delta", "=", "tf", ".", "matmul", "(", "context_embed", ",", "self", ".", "biases", ")", "\n", "", "self", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.factorcell.FactorCell.__str__": [[88, 90], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "'factor cell of size {0}'", ".", "format", "(", "self", ".", "_num_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.factorcell.FactorCell.state_size": [[91, 94], ["tensorflow.nn.rnn_cell.LSTMStateTuple"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "self", ".", "_num_units", ",", "self", ".", "_num_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.factorcell.FactorCell.output_size": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.factorcell.FactorCell.__call__": [[99, 150], ["tensorflow.variable_scope", "tensorflow.concat", "tensorflow.split", "factorcell.FactorCell._activation", "tensorflow.sigmoid", "tensorflow.nn.rnn_cell.LSTMStateTuple", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.nn.moments", "factorcell.FactorCell.__call__.Norm"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ",", "reuse", "=", "None", ",", "use_locked", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"hyper_lstm_cell\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Parameters of gates are concatenated into one multiply for efficiency.", "\n", "      ", "c", ",", "h", "=", "state", "\n", "the_input", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "inputs", ",", "h", "]", ")", "\n", "\n", "if", "use_locked", ":", "\n", "        ", "result", "=", "tf", ".", "matmul", "(", "the_input", ",", "self", ".", "lockedW", ")", "\n", "", "else", ":", "\n", "        ", "result", "=", "tf", ".", "matmul", "(", "the_input", ",", "self", ".", "W", ")", "\n", "\n", "", "if", "self", ".", "lowrank_adaptation", "and", "not", "use_locked", ":", "\n", "        ", "input_expanded", "=", "tf", ".", "expand_dims", "(", "the_input", ",", "1", ")", "\n", "intermediate", "=", "tf", ".", "matmul", "(", "input_expanded", ",", "self", ".", "left_adapt", ")", "\n", "final", "=", "tf", ".", "matmul", "(", "intermediate", ",", "self", ".", "right_adapt", ")", "\n", "result", "+=", "tf", ".", "squeeze", "(", "final", ")", "\n", "", "if", "self", ".", "mikolov_adapt", "and", "not", "use_locked", ":", "\n", "        ", "result", "+=", "self", ".", "delta", "\n", "\n", "", "if", "use_locked", ":", "\n", "        ", "result", "+=", "self", ".", "lockedBias", "\n", "", "else", ":", "\n", "        ", "result", "+=", "self", ".", "bias", "\n", "\n", "# j = new_input, f = forget_gate, o = output_gate", "\n", "", "j", ",", "f", ",", "o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "result", ")", "\n", "\n", "def", "Norm", "(", "inputs", ",", "gamma", ",", "beta", ")", ":", "\n", "        ", "m", ",", "v", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "normalized_input", "=", "(", "inputs", "-", "m", ")", "/", "tf", ".", "sqrt", "(", "v", "+", "1e-5", ")", "\n", "return", "normalized_input", "*", "gamma", "+", "beta", "\n", "\n", "", "if", "self", ".", "layer_norm", ":", "\n", "        ", "j", "=", "Norm", "(", "j", ",", "self", ".", "gammas", "[", "0", "]", ",", "self", ".", "betas", "[", "0", "]", ")", "\n", "f", "=", "Norm", "(", "f", ",", "self", ".", "gammas", "[", "1", "]", ",", "self", ".", "betas", "[", "1", "]", ")", "\n", "o", "=", "Norm", "(", "o", ",", "self", ".", "gammas", "[", "2", "]", ",", "self", ".", "betas", "[", "2", "]", ")", "\n", "\n", "", "g", "=", "self", ".", "_activation", "(", "j", ")", "\n", "\n", "# recurrent dropout without memory loss", "\n", "if", "(", "not", "isinstance", "(", "self", ".", "_keep_prob", ",", "float", ")", ")", "or", "self", ".", "_keep_prob", "<", "1", ":", "\n", "        ", "g", "=", "tf", ".", "nn", ".", "dropout", "(", "g", ",", "self", ".", "_keep_prob", ")", "\n", "\n", "", "forget_gate", "=", "tf", ".", "sigmoid", "(", "f", "+", "self", ".", "_forget_bias", ")", "\n", "input_gate", "=", "1.0", "-", "forget_gate", "# input and forget gates are coupled", "\n", "\n", "new_c", "=", "(", "c", "*", "forget_gate", "+", "input_gate", "*", "g", ")", "\n", "new_h", "=", "self", ".", "_activation", "(", "new_c", ")", "*", "tf", ".", "sigmoid", "(", "o", ")", "\n", "\n", "new_state", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "new_c", ",", "new_h", ")", "\n", "return", "new_h", ",", "new_state", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamItem.__init__": [[28, 35], ["type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prev_word", ",", "prev_hidden", ",", "log_prob", "=", "0.0", ")", ":", "\n", "    ", "self", ".", "log_probs", "=", "log_prob", "\n", "if", "type", "(", "prev_word", ")", "==", "list", ":", "\n", "      ", "self", ".", "words", "=", "prev_word", "\n", "", "else", ":", "\n", "      ", "self", ".", "words", "=", "[", "prev_word", "]", "\n", "", "self", ".", "prev_hidden", "=", "prev_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamItem.__le__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "log_probs", "<=", "other", ".", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamItem.__lt__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "log_probs", "<", "other", ".", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamItem.__ge__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "log_probs", ">=", "other", ".", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamItem.__gt__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "log_probs", ">", "other", ".", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamItem.__eq__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "log_probs", "==", "other", ".", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamItem.__str__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "'beam {0:.3f}: '", ".", "format", "(", "self", ".", "log_probs", ")", "+", "''", ".", "join", "(", "self", ".", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.__init__": [[58, 63], ["queue.PriorityQueue"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_size", "=", "10", ")", ":", "\n", "    ", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "size", "=", "0", "\n", "self", ".", "bound", "=", "None", "\n", "self", ".", "q", "=", "PriorityQueue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.Insert": [[64, 69], ["beam.BeamQueue.q.put", "beam.BeamQueue.Eject"], "methods", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.Eject"], ["", "def", "Insert", "(", "self", ",", "item", ")", ":", "\n", "    ", "self", ".", "size", "+=", "1", "\n", "self", ".", "q", ".", "put", "(", "(", "-", "item", ".", "log_probs", ",", "item", ")", ")", "\n", "if", "self", ".", "size", ">", "self", ".", "max_size", ":", "\n", "      ", "self", ".", "Eject", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.CheckBound": [[70, 75], ["None"], "methods", ["None"], ["", "", "def", "CheckBound", "(", "self", ",", "val", ")", ":", "\n", "# If the queue is full then we know that there is no chance of a new item", "\n", "# being accepted if it's priority is worse than the last thing that got", "\n", "# ejected.", "\n", "    ", "return", "self", ".", "size", "<", "self", ".", "max_size", "or", "self", ".", "bound", "is", "None", "or", "val", "<", "self", ".", "bound", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.Eject": [[76, 80], ["beam.BeamQueue.q.get"], "methods", ["None"], ["", "def", "Eject", "(", "self", ")", ":", "\n", "    ", "score", ",", "_", "=", "self", ".", "q", ".", "get", "(", ")", "\n", "self", ".", "bound", "=", "-", "score", "\n", "self", ".", "size", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.__iter__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.__next__": [[84, 89], ["beam.BeamQueue.q.empty", "beam.BeamQueue.q.get"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "q", ".", "empty", "(", ")", ":", "\n", "      ", "_", ",", "item", "=", "self", ".", "q", ".", "get", "(", ")", "\n", "return", "item", "\n", "", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.next": [[90, 92], ["beam.BeamQueue.__next__"], "methods", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.__next__"], ["", "def", "next", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.InitBeam": [[7, 19], ["numpy.zeros", "m.session.run"], "function", ["None"], ["def", "InitBeam", "(", "phrase", ",", "user_id", ",", "m", ")", ":", "\n", "# Need to find the hidden state for the last char in the prefix.", "\n", "  ", "prev_hidden", "=", "np", ".", "zeros", "(", "(", "1", ",", "2", "*", "m", ".", "params", ".", "num_units", ")", ")", "\n", "for", "word", "in", "phrase", "[", ":", "-", "1", "]", ":", "\n", "    ", "feed_dict", "=", "{", "\n", "m", ".", "model", ".", "prev_hidden_state", ":", "prev_hidden", ",", "\n", "m", ".", "model", ".", "prev_word", ":", "[", "m", ".", "char_vocab", "[", "word", "]", "]", ",", "\n", "m", ".", "model", ".", "beam_size", ":", "4", "\n", "}", "\n", "prev_hidden", "=", "m", ".", "session", ".", "run", "(", "m", ".", "model", ".", "next_hidden_state", ",", "feed_dict", ")", "\n", "\n", "", "return", "prev_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.GetCompletions": [[94, 136], ["m.Lock", "beam.InitBeam", "range", "beam.BeamItem", "beam.BeamQueue", "numpy.vstack", "numpy.array", "m.session.run", "enumerate", "len", "zip", "beam.BeamQueue.Insert", "current_nodes.append", "beam.BeamQueue.CheckBound", "beam.BeamItem", "beam.BeamQueue.Insert"], "function", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.Lock", "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.InitBeam", "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.Insert", "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.CheckBound", "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.BeamQueue.Insert"], ["", "", "def", "GetCompletions", "(", "prefix", ",", "user_id", ",", "m", ",", "branching_factor", "=", "8", ",", "beam_size", "=", "300", ",", "\n", "stop", "=", "'</S>'", ")", ":", "\n", "  ", "\"\"\" Find top completions for a given prefix, user and model.\"\"\"", "\n", "m", ".", "Lock", "(", "user_id", ")", "# pre-compute the adaptive recurrent matrix", "\n", "\n", "prev_state", "=", "InitBeam", "(", "prefix", ",", "user_id", ",", "m", ")", "\n", "nodes", "=", "[", "BeamItem", "(", "prefix", ",", "prev_state", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "36", ")", ":", "\n", "    ", "new_nodes", "=", "BeamQueue", "(", "max_size", "=", "beam_size", ")", "\n", "current_nodes", "=", "[", "]", "\n", "for", "node", "in", "nodes", ":", "\n", "      ", "if", "i", ">", "0", "and", "node", ".", "words", "[", "-", "1", "]", "==", "stop", ":", "# don't extend past the stop token", "\n", "        ", "new_nodes", ".", "Insert", "(", "node", ")", "# copy over finished beams", "\n", "", "else", ":", "\n", "        ", "current_nodes", ".", "append", "(", "node", ")", "# these ones will get extended", "\n", "", "", "if", "len", "(", "current_nodes", ")", "==", "0", ":", "\n", "      ", "return", "new_nodes", "# all beams have finished", "\n", "\n", "# group together all the nodes in the queue for efficient computation", "\n", "", "prev_hidden", "=", "np", ".", "vstack", "(", "[", "item", ".", "prev_hidden", "for", "item", "in", "current_nodes", "]", ")", "\n", "prev_words", "=", "np", ".", "array", "(", "[", "m", ".", "char_vocab", "[", "item", ".", "words", "[", "-", "1", "]", "]", "for", "item", "in", "current_nodes", "]", ")", "\n", "\n", "feed_dict", "=", "{", "\n", "m", ".", "model", ".", "prev_word", ":", "prev_words", ",", "\n", "m", ".", "model", ".", "prev_hidden_state", ":", "prev_hidden", ",", "\n", "m", ".", "model", ".", "beam_size", ":", "branching_factor", "\n", "}", "\n", "\n", "current_char", ",", "current_char_p", ",", "prev_hidden", "=", "m", ".", "session", ".", "run", "(", "\n", "[", "m", ".", "beam_chars", ",", "m", ".", "model", ".", "selected_p", ",", "m", ".", "model", ".", "next_hidden_state", "]", ",", "\n", "feed_dict", ")", "\n", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "current_nodes", ")", ":", "\n", "      ", "for", "new_word", ",", "top_value", "in", "zip", "(", "current_char", "[", "i", ",", ":", "]", ",", "current_char_p", "[", "i", ",", ":", "]", ")", ":", "\n", "        ", "new_cost", "=", "top_value", "+", "node", ".", "log_probs", "\n", "if", "new_nodes", ".", "CheckBound", "(", "new_cost", ")", ":", "# only create a new object if it fits in beam", "\n", "          ", "new_beam", "=", "BeamItem", "(", "node", ".", "words", "+", "[", "new_word", "]", ",", "prev_hidden", "[", "i", ",", ":", "]", ",", "\n", "log_prob", "=", "new_cost", ")", "\n", "new_nodes", ".", "Insert", "(", "new_beam", ")", "\n", "", "", "", "nodes", "=", "new_nodes", "\n", "", "return", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.FirstNonMatch": [[138, 145], ["min", "xrange", "len", "len"], "function", ["None"], ["", "def", "FirstNonMatch", "(", "s1", ",", "s2", ",", "start", "=", "0", ")", ":", "\n", "# returns the position of the first non-matching character", "\n", "  ", "min_len", "=", "min", "(", "len", "(", "s1", ")", ",", "len", "(", "s2", ")", ")", "\n", "for", "i", "in", "xrange", "(", "start", ",", "min_len", ")", ":", "\n", "    ", "if", "s1", "[", "i", "]", "!=", "s2", "[", "i", "]", ":", "\n", "      ", "return", "i", "\n", "", "", "return", "min_len", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.GetSavedKeystrokes": [[147, 166], ["len", "beam.GetCompletions", "list", "list"], "function", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.beam.GetCompletions"], ["", "def", "GetSavedKeystrokes", "(", "m", ",", "query", ",", "branching_factor", "=", "4", ",", "beam_size", "=", "100", ")", ":", "\n", "  ", "\"\"\"Find the shortest prefix that gets the right completion.\n\n  Uses binary search.\n  \"\"\"", "\n", "left", "=", "1", "\n", "right", "=", "len", "(", "query", ")", "\n", "while", "left", "<=", "right", ":", "\n", "    ", "midpoint", "=", "(", "left", "+", "right", ")", "/", "2", "\n", "prefix", "=", "[", "'<S>'", "]", "+", "list", "(", "query", "[", ":", "midpoint", "]", ")", "\n", "completions", "=", "GetCompletions", "(", "\n", "prefix", ",", "0", ",", "m", ",", "branching_factor", "=", "branching_factor", ",", "beam_size", "=", "beam_size", ")", "\n", "top_completion", "=", "list", "(", "completions", ")", "[", "-", "1", "]", "\n", "top_completion", "=", "''", ".", "join", "(", "top_completion", ".", "words", "[", "1", ":", "-", "1", "]", ")", "\n", "if", "top_completion", "==", "query", ":", "\n", "      ", "right", "=", "midpoint", "-", "1", "\n", "", "else", ":", "\n", "      ", "left", "=", "midpoint", "+", "1", "\n", "", "", "return", "left", "\n", "", ""]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.metrics.MovingAvg.__init__": [[9, 13], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "p", ",", "burn_in", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "None", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "burn_in", "=", "burn_in", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.metrics.MovingAvg.Update": [[14, 24], ["None"], "methods", ["None"], ["", "def", "Update", "(", "self", ",", "v", ")", ":", "\n", "    ", "if", "self", ".", "burn_in", ">", "0", ":", "\n", "      ", "self", ".", "burn_in", "-=", "1", "\n", "return", "v", "\n", "\n", "", "if", "self", ".", "val", "is", "None", ":", "\n", "      ", "self", ".", "val", "=", "v", "\n", "return", "v", "\n", "", "self", ".", "val", "=", "self", ".", "p", "*", "self", ".", "val", "+", "(", "1.0", "-", "self", ".", "p", ")", "*", "v", "\n", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.metrics.PrintParams": [[26, 45], ["handle", "tensorflow.trainable_variables", "handle", "handle", "handle", "p.get_shape", "handle", "fmt_str.format", "sys.stdout.flush", "fmt_str.format", "numpy.prod", "str", "numpy.prod"], "function", ["None"], ["", "", "def", "PrintParams", "(", "handle", "=", "sys", ".", "stdout", ".", "write", ")", ":", "\n", "  ", "\"\"\"Print the names of the parameters and their sizes. \n\n  Args:\n    handle: where to write the param sizes to\n  \"\"\"", "\n", "handle", "(", "'NETWORK SIZE REPORT\\n'", ")", "\n", "param_count", "=", "0", "\n", "fmt_str", "=", "'{0: <25}\\t{1: >12}\\t{2: >12,}\\n'", "\n", "for", "p", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "    ", "shape", "=", "p", ".", "get_shape", "(", ")", "\n", "shape_str", "=", "'x'", ".", "join", "(", "[", "str", "(", "x", ".", "value", ")", "for", "x", "in", "shape", "]", ")", "\n", "handle", "(", "fmt_str", ".", "format", "(", "p", ".", "name", ",", "shape_str", ",", "np", ".", "prod", "(", "shape", ")", ".", "value", ")", ")", "\n", "param_count", "+=", "np", ".", "prod", "(", "shape", ")", ".", "value", "\n", "", "handle", "(", "''", ".", "join", "(", "[", "'-'", "]", "*", "60", ")", ")", "\n", "handle", "(", "'\\n'", ")", "\n", "handle", "(", "fmt_str", ".", "format", "(", "'total'", ",", "''", ",", "param_count", ")", ")", "\n", "if", "handle", "==", "sys", ".", "stdout", ".", "write", ":", "\n", "    ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.metrics.GetRankInList": [[46, 51], ["qlist.index"], "function", ["None"], ["", "", "def", "GetRankInList", "(", "query", ",", "qlist", ")", ":", "\n", "# returns the inverse rank of the item in the list", "\n", "  ", "if", "query", "not", "in", "qlist", ":", "\n", "    ", "return", "0", "\n", "", "return", "1.0", "/", "(", "1.0", "+", "qlist", ".", "index", "(", "query", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.dataset.Dataset.__init__": [[33, 43], ["df.sample", "dataset.Dataset.df.query_.apply", "min", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "df", ",", "char_vocab", ",", "user_vocab", ",", "batch_size", "=", "24", ",", "max_len", "=", "60", ")", ":", "\n", "        ", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "char_vocab", "=", "char_vocab", "\n", "self", ".", "user_vocab", "=", "user_vocab", "\n", "self", ".", "df", "=", "df", ".", "sample", "(", "frac", "=", "1", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "current_idx", "=", "0", "\n", "\n", "self", ".", "df", "[", "'lengths'", "]", "=", "self", ".", "df", ".", "query_", ".", "apply", "(", "\n", "lambda", "x", ":", "min", "(", "self", ".", "max_len", ",", "len", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.dataset.Dataset.GetFeedDict": [[44, 70], ["range", "numpy.zeros", "numpy.zeros", "xrange", "len", "len", "range"], "methods", ["None"], ["", "def", "GetFeedDict", "(", "self", ",", "model", ")", ":", "\n", "        ", "if", "self", ".", "current_idx", "+", "self", ".", "batch_size", ">", "len", "(", "self", ".", "df", ")", ":", "\n", "            ", "self", ".", "current_idx", "=", "0", "\n", "\n", "", "idx", "=", "range", "(", "self", ".", "current_idx", ",", "self", ".", "current_idx", "+", "self", ".", "batch_size", ")", "\n", "self", ".", "current_idx", "+=", "self", ".", "batch_size", "\n", "\n", "grp", "=", "self", ".", "df", ".", "iloc", "[", "idx", "]", "\n", "\n", "f1", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "max_len", ")", ")", "\n", "user_ids", "=", "np", ".", "zeros", "(", "self", ".", "batch_size", ")", "\n", "feed_dict", "=", "{", "\n", "model", ".", "queries", ":", "f1", ",", "\n", "model", ".", "query_lengths", ":", "grp", ".", "lengths", ".", "values", ",", "\n", "model", ".", "user_ids", ":", "user_ids", ",", "\n", "}", "\n", "if", "model", ".", "use_time_features", ":", "\n", "          ", "feed_dict", "[", "model", ".", "dayofweek", "]", "=", "grp", ".", "dayofweek", ".", "values", ",", "\n", "feed_dict", "[", "model", ".", "hourofday", "]", "=", "grp", ".", "hourofday", ".", "values", "\n", "", "for", "i", "in", "xrange", "(", "len", "(", "grp", ")", ")", ":", "\n", "            ", "row", "=", "grp", ".", "iloc", "[", "i", "]", "\n", "user_ids", "[", "i", "]", "=", "self", ".", "user_vocab", "[", "row", ".", "user", "]", "\n", "for", "j", "in", "range", "(", "row", ".", "lengths", ")", ":", "\n", "                ", "f1", "[", "i", ",", "j", "]", "=", "self", ".", "char_vocab", "[", "row", ".", "query_", "[", "j", "]", "]", "\n", "\n", "", "", "return", "feed_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.dataset.LoadData": [[7, 29], ["pandas.concat", "str", "pandas.read_csv", "pandas.read_csv.user.apply", "pandas.read_csv.date.apply", "dfs.append", "pandas.read_csv.query_.apply", "list", "datetime.datetime.strptime", "str"], "function", ["None"], ["def", "LoadData", "(", "filenames", ",", "split", "=", "True", ")", ":", "\n", "  ", "\"\"\"Load a bunch of files as a pandas dataframe.\n\n  Input files should have three columns for userid, query, and date.\n  \"\"\"", "\n", "def", "Prepare", "(", "s", ")", ":", "\n", "    ", "s", "=", "str", "(", "s", ")", "\n", "return", "[", "'<S>'", "]", "+", "list", "(", "s", ")", "+", "[", "'</S>'", "]", "\n", "\n", "", "dfs", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "    ", "df", "=", "pandas", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "compression", "=", "'gzip'", ",", "header", "=", "None", ")", "\n", "df", ".", "columns", "=", "[", "'user'", ",", "'query_'", ",", "'date'", "]", "\n", "if", "split", ":", "\n", "      ", "df", "[", "'query_'", "]", "=", "df", ".", "query_", ".", "apply", "(", "Prepare", ")", "\n", "", "df", "[", "'user'", "]", "=", "df", ".", "user", ".", "apply", "(", "lambda", "x", ":", "'s'", "+", "str", "(", "x", ")", ")", "\n", "\n", "dates", "=", "df", ".", "date", ".", "apply", "(", "lambda", "x", ":", "datetime", ".", "datetime", ".", "strptime", "(", "x", ",", "'%Y-%m-%d %H:%M:%S'", ")", ")", "\n", "df", "[", "'hourofday'", "]", "=", "[", "d", ".", "hour", "for", "d", "in", "dates", "]", "\n", "df", "[", "'dayofweek'", "]", "=", "[", "d", ".", "dayofweek", "for", "d", "in", "dates", "]", "\n", "dfs", ".", "append", "(", "df", ")", "\n", "", "return", "pandas", ".", "concat", "(", "dfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.helper.GetPrefixLen": [[7, 17], ["hashlib.md5", "hashlib.md5.update", "hashlib.md5.update", "hashlib.md5.update", "int", "str", "hashlib.md5.hexdigest", "len"], "function", ["None"], ["def", "GetPrefixLen", "(", "user", ",", "query", ",", "n", "=", "None", ")", ":", "\n", "# choose a random prefix length", "\n", "  ", "hasher", "=", "hashlib", ".", "md5", "(", ")", "\n", "hasher", ".", "update", "(", "user", ")", "\n", "hasher", ".", "update", "(", "''", ".", "join", "(", "query", ")", ")", "\n", "if", "n", ":", "\n", "    ", "hasher", ".", "update", "(", "str", "(", "n", ")", ")", "\n", "", "prefix_len", "=", "int", "(", "hasher", ".", "hexdigest", "(", ")", ",", "16", ")", "%", "(", "len", "(", "query", ")", "-", "1", ")", "\n", "prefix_len", "+=", "1", "# always have at least a single character prefix", "\n", "return", "prefix_len", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.helper.GetParams": [[19, 31], ["os.path.join", "open", "json.load", "bunch.Bunch", "open", "json.dump", "open", "bunch.Bunch", "json.load"], "function", ["None"], ["", "def", "GetParams", "(", "filename", ",", "mode", ",", "expdir", ")", ":", "\n", "  ", "param_filename", "=", "os", ".", "path", ".", "join", "(", "expdir", ",", "'params.json'", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "param_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "params", "=", "bunch", ".", "Bunch", "(", "param_dict", ")", "\n", "", "with", "open", "(", "param_filename", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "param_dict", ",", "f", ")", "\n", "", "", "else", ":", "\n", "    ", "with", "open", "(", "param_filename", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "params", "=", "bunch", ".", "Bunch", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.mpc_baseline.GetTopK": [[28, 35], ["query_trie.items", "zip", "sorted"], "function", ["None"], ["def", "GetTopK", "(", "prefix", ",", "k", "=", "100", ")", ":", "\n", "    ", "if", "prefix", "in", "cache", ":", "\n", "        ", "return", "cache", "[", "prefix", "]", "\n", "", "results", "=", "query_trie", ".", "items", "(", "prefix", ")", "\n", "queries", ",", "counts", "=", "zip", "(", "*", "sorted", "(", "results", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", ")", "\n", "cache", "[", "prefix", "]", "=", "queries", "[", ":", "k", "]", "\n", "return", "queries", "[", ":", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.mpc_baseline.GetRankInList": [[37, 41], ["qlist.index"], "function", ["None"], ["", "def", "GetRankInList", "(", "query", ",", "qlist", ")", ":", "\n", "  ", "if", "query", "not", "in", "qlist", ":", "\n", "    ", "return", "0", "\n", "", "return", "1.0", "/", "(", "1.0", "+", "qlist", ".", "index", "(", "query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.mpc_baseline.FastLoadDynamic": [[45, 66], ["pandas.DataFrame", "gzip.open", "len", "dynamic_df[].astype", "regex_eval.finditer", "dict", "pandas.DataFrame.cost.astype", "dynamic_df[].astype", "type", "line.decode.decode", "len", "rows.append", "print", "print", "m.groups"], "function", ["None"], ["def", "FastLoadDynamic", "(", "filename", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "with", "gzip", ".", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "for", "line", "in", "f", ":", "\n", "        ", "if", "type", "(", "line", ")", "!=", "str", ":", "\n", "          ", "line", "=", "line", ".", "decode", "(", "'utf8'", ")", "# for python3 compatibility", "\n", "", "matches", "=", "regex_eval", ".", "finditer", "(", "line", ")", "\n", "d", "=", "dict", "(", "[", "m", ".", "groups", "(", ")", "for", "m", "in", "matches", "]", ")", "\n", "if", "len", "(", "d", ")", ">", "0", ":", "\n", "          ", "rows", ".", "append", "(", "d", ")", "\n", "", "else", ":", "\n", "          ", "print", "(", "'bad line'", ")", "\n", "print", "(", "line", ")", "\n", "", "", "", "dynamic_df", "=", "pandas", ".", "DataFrame", "(", "rows", ")", "\n", "if", "len", "(", "dynamic_df", ")", ">", "0", ":", "\n", "        ", "if", "'cost'", "in", "dynamic_df", ".", "columns", ":", "\n", "            ", "dynamic_df", "[", "'cost'", "]", "=", "dynamic_df", ".", "cost", ".", "astype", "(", "float", ")", "\n", "", "if", "'length'", "in", "dynamic_df", ".", "columns", ":", "\n", "            ", "dynamic_df", "[", "'length'", "]", "=", "dynamic_df", "[", "'length'", "]", ".", "astype", "(", "float", ")", "\n", "", "dynamic_df", "[", "'score'", "]", "=", "dynamic_df", "[", "'score'", "]", ".", "astype", "(", "float", ")", "\n", "", "return", "dynamic_df", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.dynamic.DynamicModel.__init__": [[37, 65], ["model.MetaModel.__init__", "dynamic.DynamicModel.MakeSessionAndRestore", "dynamic.DynamicModel.graph.as_default", "tensorflow.scatter_update", "dynamic.DynamicModel.session.run", "tensorflow.get_collection", "len", "dynamic.DynamicModel.model.user_embed_mat.eval", "numpy.expand_dims", "tensorflow.variable_scope", "tensorflow.no_op", "tensorflow.group", "optimizer().minimize", "tensorflow.variables_initializer", "optimizer"], "methods", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.model.Model.__init__", "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.MakeSessionAndRestore"], ["  ", "def", "__init__", "(", "self", ",", "expdir", ",", "learning_rate", "=", "None", ",", "threads", "=", "8", ",", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", ")", ":", "\n", "    ", "super", "(", "DynamicModel", ",", "self", ")", ".", "__init__", "(", "expdir", ")", "\n", "\n", "if", "learning_rate", "is", "None", ":", "# set the default learning rates", "\n", "      ", "if", "self", ".", "params", ".", "use_lowrank_adaptation", ":", "\n", "        ", "learning_rate", "=", "0.15", "\n", "", "else", ":", "\n", "        ", "learning_rate", "=", "0.925", "\n", "\n", "", "", "self", ".", "MakeSessionAndRestore", "(", "threads", ")", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "# add some nodes to the tensorflow graph", "\n", "      ", "unk_embed", "=", "self", ".", "model", ".", "user_embed_mat", ".", "eval", "(", "\n", "session", "=", "self", ".", "session", ")", "[", "self", ".", "user_vocab", "[", "'<UNK>'", "]", "]", "\n", "self", ".", "reset_user_embed", "=", "tf", ".", "scatter_update", "(", "\n", "self", ".", "model", ".", "user_embed_mat", ",", "[", "0", "]", ",", "np", ".", "expand_dims", "(", "unk_embed", ",", "0", ")", ")", "\n", "self", ".", "session", ".", "run", "(", "self", ".", "reset_user_embed", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ")", ":", "\n", "        ", "self", ".", "train_op", "=", "tf", ".", "no_op", "(", ")", "\n", "if", "(", "self", ".", "params", ".", "use_lowrank_adaptation", "or", "\n", "self", ".", "params", ".", "use_mikolov_adaptation", ")", ":", "\n", "          ", "self", ".", "train_op", "=", "optimizer", "(", "learning_rate", ")", ".", "minimize", "(", "\n", "self", ".", "model", ".", "avg_loss", ",", "var_list", "=", "[", "self", ".", "model", ".", "user_embed_mat", "]", ")", "\n", "", "", "opt_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\"optimizer\"", ")", "\n", "if", "len", "(", "opt_vars", ")", ":", "# check if optimzer state needs resetting", "\n", "        ", "self", ".", "reset_user_embed", "=", "tf", ".", "group", "(", "self", ".", "reset_user_embed", ",", "\n", "tf", ".", "variables_initializer", "(", "opt_vars", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.dynamic.DynamicModel.Train": [[66, 87], ["numpy.zeros", "range", "min", "numpy.array", "numpy.array", "dynamic.DynamicModel.session.run", "dynamic.DynamicModel.session.run", "len", "len"], "methods", ["None"], ["", "", "", "def", "Train", "(", "self", ",", "query", ",", "train", "=", "True", ")", ":", "\n", "# If train is false then it will just do the forward pass", "\n", "    ", "qIds", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "params", ".", "max_len", ")", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "params", ".", "max_len", ",", "len", "(", "query", ")", ")", ")", ":", "\n", "      ", "qIds", "[", "0", ",", "i", "]", "=", "self", ".", "char_vocab", "[", "query", "[", "i", "]", "]", "\n", "\n", "", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "user_ids", ":", "np", ".", "array", "(", "[", "0", "]", ")", ",", "\n", "self", ".", "model", ".", "query_lengths", ":", "np", ".", "array", "(", "[", "len", "(", "query", ")", "]", ")", ",", "\n", "self", ".", "model", ".", "queries", ":", "qIds", "\n", "}", "\n", "\n", "if", "train", ":", "\n", "      ", "c", ",", "words_in_batch", ",", "_", "=", "self", ".", "session", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "avg_loss", ",", "self", ".", "model", ".", "words_in_batch", ",", "self", ".", "train_op", "]", ",", "\n", "feed_dict", ")", "\n", "return", "c", ",", "words_in_batch", "\n", "", "else", ":", "\n", "# just compute the forward pass", "\n", "      ", "return", "self", ".", "session", ".", "run", "(", "[", "self", ".", "model", ".", "avg_loss", ",", "self", ".", "model", ".", "words_in_batch", "]", ",", "\n", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.__init__": [[11, 28], ["helper.GetParams", "vocab.Vocab.Load", "vocab.Vocab.Load", "len", "len", "tensorflow.Graph", "os.path.join", "os.path.join", "os.path.join", "model.MetaModel.graph.as_default", "model.Model", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "model.MetaModel.char_vocab.GetWords"], "methods", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.helper.GetParams"], ["def", "__init__", "(", "self", ",", "expdir", ")", ":", "\n", "    ", "self", ".", "expdir", "=", "expdir", "\n", "self", ".", "params", "=", "helper", ".", "GetParams", "(", "os", ".", "path", ".", "join", "(", "expdir", ",", "'char_vocab.pickle'", ")", ",", "'eval'", ",", "\n", "expdir", ")", "\n", "# mapping of characters to indices", "\n", "self", ".", "char_vocab", "=", "Vocab", ".", "Load", "(", "os", ".", "path", ".", "join", "(", "expdir", ",", "'char_vocab.pickle'", ")", ")", "\n", "# mapping of user ids to indices", "\n", "self", ".", "user_vocab", "=", "Vocab", ".", "Load", "(", "os", ".", "path", ".", "join", "(", "expdir", ",", "'user_vocab.pickle'", ")", ")", "\n", "self", ".", "params", ".", "vocab_size", "=", "len", "(", "self", ".", "char_vocab", ")", "\n", "self", ".", "params", ".", "user_vocab_size", "=", "len", "(", "self", ".", "user_vocab", ")", "\n", "\n", "# construct the tensorflow graph", "\n", "self", ".", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "      ", "self", ".", "model", "=", "Model", "(", "self", ".", "params", ",", "training_mode", "=", "False", ")", "\n", "self", ".", "char_tensor", "=", "tf", ".", "constant", "(", "self", ".", "char_vocab", ".", "GetWords", "(", ")", ",", "name", "=", "'char_tensor'", ")", "\n", "self", ".", "beam_chars", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_tensor", ",", "self", ".", "model", ".", "selected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.Lock": [[29, 33], ["model.MetaModel.session.run"], "methods", ["None"], ["", "", "def", "Lock", "(", "self", ",", "user_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"Locking precomputes the adaptation for a given user.\"\"\"", "\n", "self", ".", "session", ".", "run", "(", "self", ".", "model", ".", "decoder_cell", ".", "lock_op", ",", "\n", "{", "self", ".", "model", ".", "user_ids", ":", "[", "user_id", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.MakeSession": [[34, 40], ["tensorflow.ConfigProto", "model.MetaModel.graph.as_default", "tensorflow.Session"], "methods", ["None"], ["", "def", "MakeSession", "(", "self", ",", "threads", "=", "8", ")", ":", "\n", "    ", "\"\"\"Create the session with the given number of threads.\"\"\"", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "inter_op_parallelism_threads", "=", "threads", ",", "\n", "intra_op_parallelism_threads", "=", "threads", ")", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "      ", "self", ".", "session", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.Restore": [[41, 47], ["model.MetaModel.graph.as_default", "tensorflow.train.Saver", "model.MetaModel.session.run", "tensorflow.train.Saver.restore", "tensorflow.trainable_variables", "tensorflow.global_variables_initializer", "os.path.join"], "methods", ["None"], ["", "", "def", "Restore", "(", "self", ")", ":", "\n", "    ", "\"\"\"Initialize all variables and restore model from disk.\"\"\"", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "      ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "self", ".", "session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "saver", ".", "restore", "(", "self", ".", "session", ",", "os", ".", "path", ".", "join", "(", "self", ".", "expdir", ",", "'model.bin'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.MakeSessionAndRestore": [[48, 51], ["model.MetaModel.MakeSession", "model.MetaModel.Restore"], "methods", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.MakeSession", "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.MetaModel.Restore"], ["", "", "def", "MakeSessionAndRestore", "(", "self", ",", "threads", "=", "8", ")", ":", "\n", "    ", "self", ".", "MakeSession", "(", "threads", ")", "\n", "self", ".", "Restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.Model.__init__": [[56, 63], ["optimizer", "model.Model.BuildGraph", "model.Model.BuildDecoderGraph"], "methods", ["home.repos.pwc.inspect_result.ajaech_query_completion.code.model.Model.BuildGraph", "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.Model.BuildDecoderGraph"], ["def", "__init__", "(", "self", ",", "params", ",", "training_mode", "=", "True", ",", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", ",", "\n", "learning_rate", "=", "0.001", ")", ":", "\n", "    ", "self", ".", "params", "=", "params", "\n", "opt", "=", "optimizer", "(", "learning_rate", ")", "\n", "self", ".", "BuildGraph", "(", "params", ",", "training_mode", "=", "training_mode", ",", "optimizer", "=", "opt", ")", "\n", "if", "not", "training_mode", ":", "\n", "      ", "self", ".", "BuildDecoderGraph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.Model.BuildGraph": [[64, 140], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.sequence_mask", "tensorflow.where", "tensorflow.placeholder_with_default", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.multiply", "tensorflow.reshape", "tensorflow.div", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.ones_like", "tensorflow.zeros_like", "hasattr", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.variable_scope", "factorcell.FactorCell", "tensorflow.nn.dynamic_rnn", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.shape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "optimizer.minimize", "tensorflow.matmul"], "methods", ["None"], ["", "", "def", "BuildGraph", "(", "self", ",", "params", ",", "training_mode", "=", "True", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "self", ".", "queries", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "params", ".", "max_len", "]", ",", "name", "=", "'queries'", ")", "\n", "self", ".", "query_lengths", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'query_lengths'", ")", "\n", "self", ".", "user_ids", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'user_ids'", ")", "\n", "\n", "x", "=", "self", ".", "queries", "[", ":", ",", ":", "-", "1", "]", "# strip off the end of query token", "\n", "y", "=", "self", ".", "queries", "[", ":", ",", "1", ":", "]", "# need to predict y from x", "\n", "\n", "self", ".", "char_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "'char_embeddings'", ",", "[", "params", ".", "vocab_size", ",", "params", ".", "char_embed_size", "]", ")", "\n", "self", ".", "char_bias", "=", "tf", ".", "get_variable", "(", "'char_bias'", ",", "[", "params", ".", "vocab_size", "]", ")", "\n", "self", ".", "user_embed_mat", "=", "tf", ".", "get_variable", "(", "# this defines the user embeddings", "\n", "'user_embed_mat'", ",", "[", "params", ".", "user_vocab_size", ",", "params", ".", "user_embed_size", "]", ")", "\n", "\n", "inputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_embeddings", ",", "x", ")", "\n", "\n", "# create a mask to zero out the loss for the padding tokens", "\n", "indicator", "=", "tf", ".", "sequence_mask", "(", "self", ".", "query_lengths", "-", "1", ",", "params", ".", "max_len", "-", "1", ")", "\n", "_mask", "=", "tf", ".", "where", "(", "indicator", ",", "tf", ".", "ones_like", "(", "x", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "zeros_like", "(", "x", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder_with_default", "(", "1.0", ",", "(", ")", ",", "name", "=", "'keep_prob'", ")", "\n", "\n", "user_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embed_mat", ",", "self", ".", "user_ids", ")", "\n", "\n", "self", ".", "use_time_features", "=", "False", "\n", "if", "hasattr", "(", "params", ",", "'use_time_features'", ")", "and", "params", ".", "use_time_features", ":", "\n", "      ", "self", ".", "use_time_features", "=", "True", "\n", "self", ".", "dayofweek", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'dayofweek'", ")", "\n", "self", ".", "hourofday", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'hourofday'", ")", "\n", "self", ".", "day_embed_mat", "=", "tf", ".", "get_variable", "(", "'day_embed_mat'", ",", "[", "7", ",", "2", "]", ")", "\n", "self", ".", "hour_embed_mat", "=", "tf", ".", "get_variable", "(", "'hour_embed_mat'", ",", "[", "24", ",", "3", "]", ")", "\n", "\n", "hour_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "hour_embed_mat", ",", "self", ".", "hourofday", ")", "\n", "day_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "day_embed_mat", ",", "self", ".", "dayofweek", ")", "\n", "\n", "user_embeddings", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "user_embeddings", ",", "hour_embeds", ",", "day_embeds", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'rnn'", ")", ":", "\n", "      ", "self", ".", "decoder_cell", "=", "FactorCell", "(", "params", ".", "num_units", ",", "params", ".", "char_embed_size", ",", "\n", "user_embeddings", ",", "\n", "bias_adaptation", "=", "params", ".", "use_mikolov_adaptation", ",", "\n", "lowrank_adaptation", "=", "params", ".", "use_lowrank_adaptation", ",", "\n", "rank", "=", "params", ".", "rank", ",", "\n", "layer_norm", "=", "params", ".", "use_layer_norm", ",", "\n", "dropout_keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "outputs", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "decoder_cell", ",", "inputs", ",", "\n", "sequence_length", "=", "self", ".", "query_lengths", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "# reshape outputs to 2d before passing to the output layer", "\n", "reshaped_outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "-", "1", ",", "params", ".", "num_units", "]", ")", "\n", "projected_outputs", "=", "tf", ".", "layers", ".", "dense", "(", "reshaped_outputs", ",", "params", ".", "char_embed_size", ",", "\n", "name", "=", "'proj'", ")", "\n", "reshaped_logits", "=", "tf", ".", "matmul", "(", "projected_outputs", ",", "self", ".", "char_embeddings", ",", "\n", "transpose_b", "=", "True", ")", "+", "self", ".", "char_bias", "\n", "\n", "", "reshaped_labels", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", "]", ")", "\n", "reshaped_mask", "=", "tf", ".", "reshape", "(", "_mask", ",", "[", "-", "1", "]", ")", "\n", "\n", "reshaped_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "reshaped_logits", ",", "labels", "=", "reshaped_labels", ")", "\n", "masked_loss", "=", "tf", ".", "multiply", "(", "reshaped_loss", ",", "reshaped_mask", ")", "\n", "\n", "# reshape the loss back to the input size in order to compute", "\n", "# the per sentence loss", "\n", "self", ".", "per_word_loss", "=", "tf", ".", "reshape", "(", "masked_loss", ",", "tf", ".", "shape", "(", "x", ")", ")", "\n", "self", ".", "per_sentence_loss", "=", "tf", ".", "div", "(", "tf", ".", "reduce_sum", "(", "self", ".", "per_word_loss", ",", "1", ")", ",", "\n", "tf", ".", "reduce_sum", "(", "_mask", ",", "1", ")", ")", "\n", "self", ".", "per_sentence_loss", "=", "tf", ".", "reduce_sum", "(", "self", ".", "per_word_loss", ",", "1", ")", "\n", "\n", "total_loss", "=", "tf", ".", "reduce_sum", "(", "masked_loss", ")", "\n", "self", ".", "words_in_batch", "=", "tf", ".", "to_float", "(", "tf", ".", "reduce_sum", "(", "self", ".", "query_lengths", "-", "1", ")", ")", "\n", "self", ".", "avg_loss", "=", "total_loss", "/", "self", ".", "words_in_batch", "\n", "\n", "if", "training_mode", ":", "\n", "      ", "self", ".", "train_op", "=", "optimizer", ".", "minimize", "(", "self", ".", "avg_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajaech_query_completion.code.model.Model.BuildDecoderGraph": [[141, 175], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.nn.embedding_lookup", "tensorflow.nn.rnn_cell.LSTMStateTuple", "model.Model.decoder_cell", "tensorflow.concat", "tensorflow.one_hot", "tensorflow.nn.softmax", "tensorflow.nn.log_softmax", "tensorflow.placeholder_with_default", "tensorflow.nn.top_k", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.matmul"], "methods", ["None"], ["", "", "def", "BuildDecoderGraph", "(", "self", ")", ":", "\n", "    ", "\"\"\"This part of the graph is only used for evaluation.\n    \n    It computes just a single step of the LSTM.\n    \"\"\"", "\n", "self", ".", "prev_word", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'prev_word'", ")", "\n", "self", ".", "prev_hidden_state", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "[", "None", ",", "2", "*", "self", ".", "params", ".", "num_units", "]", ",", "name", "=", "'prev_hidden_state'", ")", "\n", "prev_c", "=", "self", ".", "prev_hidden_state", "[", ":", ",", ":", "self", ".", "params", ".", "num_units", "]", "\n", "prev_h", "=", "self", ".", "prev_hidden_state", "[", ":", ",", "self", ".", "params", ".", "num_units", ":", "]", "\n", "\n", "# temperature can be used to tune diversity of the decoding", "\n", "self", ".", "temperature", "=", "tf", ".", "placeholder_with_default", "(", "[", "1.0", "]", ",", "[", "1", "]", ")", "\n", "\n", "prev_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_embeddings", ",", "self", ".", "prev_word", ")", "\n", "\n", "state", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "prev_c", ",", "prev_h", ")", "\n", "result", ",", "(", "next_c", ",", "next_h", ")", "=", "self", ".", "decoder_cell", "(", "\n", "prev_embed", ",", "state", ",", "use_locked", "=", "True", ")", "\n", "self", ".", "next_hidden_state", "=", "tf", ".", "concat", "(", "[", "next_c", ",", "next_h", "]", ",", "1", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'rnn'", ",", "reuse", "=", "True", ")", ":", "\n", "      ", "proj_result", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "result", ",", "self", ".", "params", ".", "char_embed_size", ",", "reuse", "=", "True", ",", "name", "=", "'proj'", ")", "\n", "", "logits", "=", "tf", ".", "matmul", "(", "proj_result", ",", "self", ".", "char_embeddings", ",", "\n", "transpose_b", "=", "True", ")", "+", "self", ".", "char_bias", "\n", "prevent_unk", "=", "tf", ".", "one_hot", "(", "[", "0", "]", ",", "self", ".", "params", ".", "vocab_size", ",", "-", "30.0", ")", "\n", "self", ".", "next_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "prevent_unk", "+", "logits", "/", "self", ".", "temperature", ")", "\n", "self", ".", "next_log_prob", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", "/", "self", ".", "temperature", ")", "\n", "\n", "# return the top `beam_size` number of characters for use in decoding", "\n", "self", ".", "beam_size", "=", "tf", ".", "placeholder_with_default", "(", "1", ",", "(", ")", ",", "name", "=", "'beam_size'", ")", "\n", "log_probs", ",", "self", ".", "selected", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "next_log_prob", ",", "self", ".", "beam_size", ")", "\n", "self", ".", "selected_p", "=", "-", "log_probs", "# cost is the negative log likelihood", "\n", "", "", ""]]}