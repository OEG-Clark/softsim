{"home.repos.pwc.inspect_result.holms-ur_fine-tuning.retinanet.predict.predict": [[24, 56], ["keras_retinanet.utils.image.read_image_bgr", "np.expand_dims.copy", "keras_retinanet.utils.image.preprocess_image", "keras_retinanet.utils.image.resize_image", "numpy.expand_dims", "model.predict_on_batch", "zip", "cv2.imwrite", "box.astype.astype", "cv2.rectangle", "cv2.putText"], "function", ["None"], ["def", "predict", "(", "imagePath", ")", ":", "\n", "# load the input image (in BGR order), clone it, and preprocess it", "\n", "\t", "image", "=", "read_image_bgr", "(", "imagePath", ")", "\n", "output", "=", "image", ".", "copy", "(", ")", "\n", "image", "=", "preprocess_image", "(", "image", ")", "\n", "(", "image", ",", "scale", ")", "=", "resize_image", "(", "image", ")", "\n", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "\n", "# detect objects in the input image and correct for the image scale", "\n", "(", "boxes", ",", "scores", ",", "labels", ")", "=", "model", ".", "predict_on_batch", "(", "image", ")", "\n", "boxes", "/=", "scale", "\n", "\n", "# loop over the detections", "\n", "for", "(", "box", ",", "score", ",", "label", ")", "in", "zip", "(", "boxes", "[", "0", "]", ",", "scores", "[", "0", "]", ",", "labels", "[", "0", "]", ")", ":", "\n", "# filter out weak detections", "\n", "\t\t", "if", "score", "<", "0.5", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# convert the bounding box coordinates from floats to integers", "\n", "", "box", "=", "box", ".", "astype", "(", "\"int\"", ")", "\n", "\n", "# build the label and draw the label + bounding box on the output", "\n", "# image", "\n", "label", "=", "\"{}: {:.2f}\"", ".", "format", "(", "LABELS", "[", "label", "]", ",", "score", ")", "\n", "cv2", ".", "rectangle", "(", "output", ",", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ")", ",", "(", "box", "[", "2", "]", ",", "box", "[", "3", "]", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "output", ",", "label", ",", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", "-", "10", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "\n", "# show the output image", "\n", "", "cv2", ".", "imwrite", "(", "\"prediction.jpg\"", ",", "output", ")", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.retinanet.predict.showImage": [[58, 67], ["len", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["", "def", "showImage", "(", "image", ")", ":", "\n", "    ", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "        ", "img2", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "plt", ".", "imshow", "(", "img2", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "img2", "=", "image", "\n", "plt", ".", "imshow", "(", "img2", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.mask-rcnn.predict.predict": [[29, 45], ["keras.preprocessing.image.load_img", "keras.preprocessing.image.img_to_array", "keras.preprocessing.image.img_to_array.copy", "rcnn.detect", "zip", "cv2.imwrite", "cv2.rectangle", "cv2.putText"], "function", ["None"], ["(", "image", ",", "scale", ")", "=", "resize_image", "(", "image", ")", "\n", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "\n", "# detect objects in the input image and correct for the image scale", "\n", "(", "boxes", ",", "scores", ",", "labels", ")", "=", "model", ".", "predict_on_batch", "(", "image", ")", "\n", "boxes", "/=", "scale", "\n", "\n", "# loop over the detections", "\n", "for", "(", "box", ",", "score", ",", "label", ")", "in", "zip", "(", "boxes", "[", "0", "]", ",", "scores", "[", "0", "]", ",", "labels", "[", "0", "]", ")", ":", "\n", "# filter out weak detections", "\n", "\t\t", "if", "score", "<", "0.5", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# convert the bounding box coordinates from floats to integers", "\n", "", "box", "=", "box", ".", "astype", "(", "\"int\"", ")", "\n", "\n", "# build the label and draw the label + bounding box on the output", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.mask-rcnn.predict.showImage": [[50, 59], ["len", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["cv2", ".", "putText", "(", "output", ",", "label", ",", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", "-", "10", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "\n", "# show the output image", "\n", "", "cv2", ".", "imwrite", "(", "\"prediction.jpg\"", ",", "output", ")", "\n", "return", "boxes", "\n", "\n", "\n", "", "def", "showImage", "(", "image", ")", ":", "\n", "    ", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.mask-rcnn.template.TableBankDataset.load_dataset": [[12, 35], ["template.TableBankDataset.add_class", "os.listdir", "template.TableBankDataset.add_image"], "methods", ["None"], ["\t", "def", "load_dataset", "(", "self", ",", "dataset_dir", ",", "is_train", "=", "True", ")", ":", "\n", "# define one class", "\n", "\t\t", "self", ".", "add_class", "(", "\"dataset\"", ",", "1", ",", "\"table\"", ")", "\n", "# define data locations", "\n", "images_dir", "=", "dataset_dir", "+", "'/images/'", "\n", "annotations_dir", "=", "dataset_dir", "+", "'/annots/'", "\n", "# find all images", "\n", "for", "filename", "in", "listdir", "(", "images_dir", ")", ":", "\n", "# extract image id", "\n", "\t\t\t", "image_id", "=", "filename", "[", ":", "-", "4", "]", "\n", "# skip bad images", "\n", "#if image_id in ['00090']:", "\n", "#\tcontinue", "\n", "# skip all images after 150 if we are building the train set", "\n", "#if is_train and int(image_id) >= 150:", "\n", "#\tcontinue", "\n", "# skip all images before 150 if we are building the test/val set", "\n", "#if not is_train and int(image_id) < 150:", "\n", "#\tcontinue", "\n", "img_path", "=", "images_dir", "+", "filename", "\n", "ann_path", "=", "annotations_dir", "+", "image_id", "+", "'.xml'", "\n", "# add to dataset", "\n", "self", ".", "add_image", "(", "'dataset'", ",", "image_id", "=", "image_id", ",", "path", "=", "img_path", ",", "annotation", "=", "ann_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.mask-rcnn.template.TableBankDataset.extract_boxes": [[37, 55], ["xml.etree.ElementTree.parse", "xml.etree.ElementTree.parse.getroot", "list", "ElementTree.parse.getroot.findall", "int", "int", "int", "int", "int", "int", "list.append", "ElementTree.parse.getroot.find", "ElementTree.parse.getroot.find", "box.find", "box.find", "box.find", "box.find"], "methods", ["None"], ["", "", "def", "extract_boxes", "(", "self", ",", "filename", ")", ":", "\n", "# load and parse the file", "\n", "\t\t", "tree", "=", "ElementTree", ".", "parse", "(", "filename", ")", "\n", "# get the root of the document", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "# extract each bounding box", "\n", "boxes", "=", "list", "(", ")", "\n", "for", "box", "in", "root", ".", "findall", "(", "'.//bndbox'", ")", ":", "\n", "\t\t\t", "xmin", "=", "int", "(", "box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "\n", "ymin", "=", "int", "(", "box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "\n", "xmax", "=", "int", "(", "box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "\n", "ymax", "=", "int", "(", "box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "\n", "coors", "=", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", "\n", "boxes", ".", "append", "(", "coors", ")", "\n", "# extract image dimensions", "\n", "", "width", "=", "int", "(", "root", ".", "find", "(", "'.//size/width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "root", ".", "find", "(", "'.//size/height'", ")", ".", "text", ")", "\n", "return", "boxes", ",", "width", ",", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.mask-rcnn.template.TableBankDataset.load_mask": [[57, 75], ["template.TableBankDataset.extract_boxes", "numpy.zeros", "list", "range", "len", "list.append", "numpy.asarray", "len", "template.TableBankDataset.class_names.index"], "methods", ["home.repos.pwc.inspect_result.holms-ur_fine-tuning.mask-rcnn.template.TableBankDataset.extract_boxes"], ["", "def", "load_mask", "(", "self", ",", "image_id", ")", ":", "\n", "# get details of image", "\n", "\t\t", "info", "=", "self", ".", "image_info", "[", "image_id", "]", "\n", "# define box file location", "\n", "path", "=", "info", "[", "'annotation'", "]", "\n", "# load XML", "\n", "boxes", ",", "w", ",", "h", "=", "self", ".", "extract_boxes", "(", "path", ")", "\n", "# create one array for all masks, each on a different channel", "\n", "masks", "=", "zeros", "(", "[", "h", ",", "w", ",", "len", "(", "boxes", ")", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "# create masks", "\n", "class_ids", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "\t\t\t", "box", "=", "boxes", "[", "i", "]", "\n", "row_s", ",", "row_e", "=", "box", "[", "1", "]", ",", "box", "[", "3", "]", "\n", "col_s", ",", "col_e", "=", "box", "[", "0", "]", ",", "box", "[", "2", "]", "\n", "masks", "[", "row_s", ":", "row_e", ",", "col_s", ":", "col_e", ",", "i", "]", "=", "1", "\n", "class_ids", ".", "append", "(", "self", ".", "class_names", ".", "index", "(", "'table'", ")", ")", "\n", "", "return", "masks", ",", "asarray", "(", "class_ids", ",", "dtype", "=", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.mask-rcnn.template.TableBankDataset.image_reference": [[77, 80], ["None"], "methods", ["None"], ["", "def", "image_reference", "(", "self", ",", "image_id", ")", ":", "\n", "\t\t", "info", "=", "self", ".", "image_info", "[", "image_id", "]", "\n", "return", "info", "[", "'path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.getOutputsNames": [[31, 38], ["net.getLayerNames", "net.getUnconnectedOutLayers"], "function", ["None"], ["\n", "# detect objects in the input image and correct for the image scale", "\n", "(", "boxes", ",", "scores", ",", "labels", ")", "=", "model", ".", "predict_on_batch", "(", "image", ")", "\n", "boxes", "/=", "scale", "\n", "\n", "# loop over the detections", "\n", "for", "(", "box", ",", "score", ",", "label", ")", "in", "zip", "(", "boxes", "[", "0", "]", ",", "scores", "[", "0", "]", ",", "labels", "[", "0", "]", ")", ":", "\n", "# filter out weak detections", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.drawPred": [[40, 56], ["cv2.rectangle", "cv2.getTextSize", "max", "cv2.putText", "len"], "function", ["None"], ["\t\t\t", "continue", "\n", "\n", "# convert the bounding box coordinates from floats to integers", "\n", "", "box", "=", "box", ".", "astype", "(", "\"int\"", ")", "\n", "\n", "# build the label and draw the label + bounding box on the output", "\n", "# image", "\n", "label", "=", "\"{}: {:.2f}\"", ".", "format", "(", "LABELS", "[", "label", "]", ",", "score", ")", "\n", "cv2", ".", "rectangle", "(", "output", ",", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ")", ",", "(", "box", "[", "2", "]", ",", "box", "[", "3", "]", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "output", ",", "label", ",", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", "-", "10", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "\n", "# show the output image", "\n", "", "cv2", ".", "imwrite", "(", "\"prediction.jpg\"", ",", "output", ")", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.postprocess": [[58, 98], ["cv2.dnn.NMSBoxes", "predict.drawPred", "numpy.argmax", "int", "int", "int", "int", "int", "int", "classIds.append", "confidences.append", "boxes.append", "float"], "function", ["home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.drawPred"], ["", "def", "showImage", "(", "image", ")", ":", "\n", "    ", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "        ", "img2", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "plt", ".", "imshow", "(", "img2", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "img2", "=", "image", "\n", "plt", ".", "imshow", "(", "img2", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.predict": [[152, 171], ["cv2.imread", "cv2.dnn.blobFromImage", "net.setInput", "net.forward", "predict.postprocess", "net.getPerfProfile", "cv2.imwrite", "predict.getOutputsNames"], "function", ["home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.postprocess", "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.getOutputsNames"], []], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.predict.showImage": [[176, 185], ["len", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], []], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.pascal2yolo_1class.boxesFromPascalVOC": [[30, 46], ["xml.parse", "ET.parse.getroot", "tree.getroot.findall", "len", "object.find", "int", "int", "boxes.append", "object.find", "int", "int", "object.find.find", "object.find.find", "object.find.find", "object.find.find"], "function", ["None"], ["def", "boxesFromPascalVOC", "(", "labelPath", ")", ":", "\n", "    ", "tree", "=", "ET", ".", "parse", "(", "labelPath", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "objects", "=", "root", ".", "findall", "(", "'object'", ")", "\n", "if", "(", "len", "(", "objects", ")", "<", "1", ")", ":", "\n", "        ", "return", "None", "\n", "", "boxes", "=", "[", "]", "\n", "for", "object", "in", "objects", ":", "\n", "        ", "category", "=", "object", ".", "find", "(", "'name'", ")", ".", "text", "\n", "bndbox", "=", "object", ".", "find", "(", "'bndbox'", ")", "\n", "x", "=", "int", "(", "bndbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "\n", "y", "=", "int", "(", "bndbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "\n", "h", "=", "int", "(", "bndbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "y", "\n", "w", "=", "int", "(", "bndbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "x", "\n", "boxes", ".", "append", "(", "(", "category", ",", "(", "x", ",", "y", ",", "w", ",", "h", ")", ")", ")", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.pascal2yolo_1class.transformPascalVOCBox2YOLO": [[53, 61], ["float", "float", "float", "float"], "function", ["None"], ["", "def", "transformPascalVOCBox2YOLO", "(", "wI", ",", "hI", ",", "box", ")", ":", "\n", "    ", "objectClass", "=", "0", "\n", "(", "_", ",", "(", "x", ",", "y", ",", "w", ",", "h", ")", ")", "=", "box", "\n", "x", "=", "float", "(", "x", ")", "\n", "y", "=", "float", "(", "y", ")", "\n", "w", "=", "float", "(", "w", ")", "\n", "h", "=", "float", "(", "h", ")", "\n", "return", "(", "objectClass", ",", "(", "x", "+", "w", "/", "2", ")", "/", "wI", ",", "(", "y", "+", "h", "/", "2", ")", "/", "hI", ",", "w", "/", "wI", ",", "h", "/", "hI", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.pascal2yolo_1class.transformPascalVOCFile2YOLO": [[68, 84], ["cv2.imread", "pascal2yolo_1class.boxesFromPascalVOC", "open", "open.close", "open.write", "imagePath.rfind", "pascal2yolo_1class.transformPascalVOCBox2YOLO", "open.write", "imagePath.rfind", "imagePath.rfind", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.pascal2yolo_1class.boxesFromPascalVOC", "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.pascal2yolo_1class.transformPascalVOCBox2YOLO"], ["", "def", "transformPascalVOCFile2YOLO", "(", "imagePath", ",", "outputPath", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "imagePath", ")", "\n", "filename", "=", "imagePath", "[", "imagePath", ".", "rfind", "(", "\"/\"", ")", "+", "1", ":", "imagePath", ".", "rfind", "(", "\".\"", ")", "]", "\n", "labelPath", "=", "imagePath", "[", "0", ":", "imagePath", ".", "rfind", "(", "\".\"", ")", "]", "+", "\".xml\"", "\n", "(", "H", ",", "W", ")", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "boxes", "=", "boxesFromPascalVOC", "(", "labelPath", ")", "\n", "imagePathsFileName", "=", "outputPath", "+", "filename", "+", "\".txt\"", "\n", "imagePathsFile", "=", "open", "(", "imagePathsFileName", ",", "\"w\"", ")", "\n", "if", "boxes", "is", "None", ":", "\n", "        ", "imagePathsFile", ".", "write", "(", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "        ", "for", "box", "in", "boxes", ":", "\n", "            ", "newbox", "=", "transformPascalVOCBox2YOLO", "(", "W", ",", "H", ",", "box", ")", "\n", "(", "c", ",", "x", ",", "y", ",", "w", ",", "h", ")", "=", "newbox", "\n", "imagePathsFile", ".", "write", "(", "str", "(", "c", ")", "+", "\" \"", "+", "str", "(", "x", ")", "+", "\" \"", "+", "str", "(", "y", ")", "+", "\" \"", "+", "str", "(", "w", ")", "+", "\" \"", "+", "str", "(", "h", ")", "+", "\"\\n\"", ")", "\n", "", "", "imagePathsFile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.yolo.pascal2yolo_1class.generateImagesFile": [[91, 99], ["open", "list", "open.close", "imutils.paths.list_files", "open.write", "open.write", "datasetPath.rfind"], "function", ["None"], ["", "def", "generateImagesFile", "(", "datasetPath", ")", ":", "\n", "    ", "imagePathsFileName", "=", "datasetPath", "[", "0", ":", "datasetPath", ".", "rfind", "(", "\"/\"", ")", "+", "1", "]", "+", "\"images.txt\"", "\n", "imagePathsFile", "=", "open", "(", "imagePathsFileName", ",", "\"w\"", ")", "\n", "img_files", "=", "list", "(", "paths", ".", "list_files", "(", "datasetPath", ",", "validExts", "=", "(", "\".jpg\"", ",", "\".jpeg\"", ",", "\".png\"", ",", "\".bmp\"", ",", "\".tiff\"", ",", "\".tif\"", ")", ")", ")", "\n", "for", "img_file", "in", "img_files", ":", "\n", "        ", "imagePathsFile", ".", "write", "(", "img_file", ")", "\n", "imagePathsFile", ".", "write", "(", "\"\\n\"", ")", "\n", "", "imagePathsFile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.ssd.predict.predict": [[14, 26], ["cv2.imread", "cv2.imread.copy", "gluoncv.data.transforms.presets.ssd.load_test", "net", "zip", "cv2.imwrite", "min", "cv2.rectangle", "max", "box[].asscalar", "box[].asscalar", "box[].asscalar", "box[].asscalar"], "function", ["None"], ["\n", "\n", "\n", "# load the class label mappings", "\n", "LABELS", "=", "open", "(", "\"retinanet_classes.csv\"", ")", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "LABELS", "=", "{", "int", "(", "L", ".", "split", "(", "\",\"", ")", "[", "1", "]", ")", ":", "L", ".", "split", "(", "\",\"", ")", "[", "0", "]", "for", "L", "in", "LABELS", "}", "\n", "\n", "# load the model from disk", "\n", "model", "=", "models", ".", "load_model", "(", "\"output.h5\"", ",", "backbone_name", "=", "\"resnet50\"", ")", "\n", "\n", "def", "predict", "(", "imagePath", ")", ":", "\n", "# load the input image (in BGR order), clone it, and preprocess it", "\n", "\t", "image", "=", "read_image_bgr", "(", "imagePath", ")", "\n"]], "home.repos.pwc.inspect_result.holms-ur_fine-tuning.ssd.predict.showImage": [[31, 40], ["len", "matplotlib.pyplot.imshow", "matplotlib.pyplot.show", "matplotlib.pyplot.imshow", "matplotlib.pyplot.show"], "function", ["None"], ["\n", "# detect objects in the input image and correct for the image scale", "\n", "(", "boxes", ",", "scores", ",", "labels", ")", "=", "model", ".", "predict_on_batch", "(", "image", ")", "\n", "boxes", "/=", "scale", "\n", "\n", "# loop over the detections", "\n", "for", "(", "box", ",", "score", ",", "label", ")", "in", "zip", "(", "boxes", "[", "0", "]", ",", "scores", "[", "0", "]", ",", "labels", "[", "0", "]", ")", ":", "\n", "# filter out weak detections", "\n", "\t\t", "if", "score", "<", "0.5", ":", "\n", "\t\t\t", "continue", "\n"]]}