{"home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.gen_base_adv.normalize": [[36, 40], ["tensor.mul().add.mul().add", "tensor.mul().add.mul"], "function", ["None"], ["def", "normalize", "(", "tensor", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "mul", "(", "attackers", ".", "torch_std_cuda", ")", ".", "add", "(", "attackers", ".", "torch_mean_cuda", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.gen_base_adv.new_model": [[41, 46], ["model"], "function", ["None"], ["", "def", "new_model", "(", "model", ")", ":", "\n", "    ", "def", "func", "(", "input", ")", ":", "\n", "        ", "return", "model", "(", "input", ")", "\n", "# return model.get_feature_attack", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.gen_base_adv.run": [[47, 206], ["saver.Saver", "logging.info", "datasets.get_dataloader", "saver.Saver.load_model", "network.infer_Cls_Net_resnet.eval", "network.infer_Cls_Net_resnet.cuda", "dict", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "dict", "list", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "list", "enumerate", "dict.items", "numpy.concatenate", "os.path.join", "numpy.save", "numpy.concatenate", "numpy.save", "numpy.concatenate", "numpy.save", "diff.reshape.reshape", "print", "print", "print", "type", "network.infer_Cls_Net_vgg", "dict", "numpy.array", "numpy.array", "dict", "list", "list", "list", "torch.nn.CrossEntropyLoss.", "name.split", "print", "tqdm.tqdm", "np.concatenate.append", "dict.items", "sklearn.metrics.accuracy_score", "print", "os.getcwd", "os.path.isdir", "os.mkdir", "numpy.abs", "network.infer_Cls_Net_resnet", "gen_base_adv.new_model", "images.cuda.cpu().numpy", "images.cuda.cuda", "target.cuda.cuda", "attacker.perturb", "network.infer_Cls_Net_resnet.argmax().detach().cpu().numpy", "[].append", "target.cuda.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "float", "numpy.sqrt", "attacker.perturb.cpu().numpy", "network.infer_Cls_Net_resnet.feature_list", "diff.reshape.max", "numpy.sqrt().mean", "images.cuda.cpu", "network.infer_Cls_Net_resnet.argmax().detach().cpu", "target.cuda.detach().cpu", "name.split", "attacker.perturb.cpu", "numpy.sqrt", "[].view", "[].view", "network.infer_Cls_Net_resnet.argmax().detach", "target.cuda.detach", "diff.reshape.sum", "network.infer_Cls_Net_resnet.argmax", "datasets.get_dataloader.dataset.__getitem__", "datasets.get_dataloader.dataset.__getitem__", "network.infer_Cls_Net_resnet."], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.load_model", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.base_adv_attack.new_model", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__getitem__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__getitem__"], ["", "def", "run", "(", "args", ",", "default_victims", ",", "attack_methods", ")", ":", "\n", "    ", "assert", "(", "type", "(", "attack_methods", ")", "==", "str", ")", "\n", "attack_methods", "=", "[", "attack_methods", "]", "\n", "layer_index", "=", "args", ".", "layer_index", "\n", "is_targeted", "=", "False", "\n", "saver", "=", "Saver", "(", "args", ".", "arch", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "logging", ".", "info", "(", "f'Attacking {default_victims} by {args.arch}'", ")", "\n", "\n", "# # # load models", "\n", "# # victim_models = dict()", "\n", "# # for key, value in default_victims.items():", "\n", "# #     model = Cls_Net(5, value, load_pretrain=False)", "\n", "# #     model = saver.load_model(model, key)", "\n", "# #     model.eval()", "\n", "# #     victim_models[key] = model", "\n", "\n", "test_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "arch", "=", "args", ".", "arch", ",", "mode", "=", "'test'", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "num_fold", "=", "args", ".", "num_fold", ",", "targeted", "=", "is_targeted", ",", "rand_pairs", "=", "'targeted_attack'", ")", "\n", "\n", "if", "'vgg16'", "in", "args", ".", "arch", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_vgg", "(", "test_loader", ".", "dataset", ".", "num_classes", ")", "\n", "", "elif", "'resnet50'", "in", "args", ".", "arch", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_resnet", "(", "test_loader", ".", "dataset", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "# src_model = Cls_Net(2, 'resnet50', load_pretrain=False)", "\n", "", "src_model", "=", "saver", ".", "load_model", "(", "src_model", ",", "args", ".", "arch", ")", "\n", "src_model", ".", "eval", "(", ")", "\n", "src_model", "=", "src_model", ".", "cuda", "(", ")", "\n", "\n", "# Great Metric Savers", "\n", "metric_counter", "=", "dict", "(", ")", "\n", "for", "attacker_name", "in", "attack_methods", ":", "\n", "        ", "metric_counter", "[", "attacker_name", "]", "=", "dict", "(", ")", "\n", "gt", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "metric_counter", "[", "attacker_name", "]", "=", "dict", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "=", "gt", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", "=", "pred", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", "=", "list", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'mse'", "]", "=", "list", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'mse_raw'", "]", "=", "list", "(", ")", "\n", "\n", "", "bce_loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "def", "loss_fn_maha", "(", "feature", ",", "item", ")", ":", "\n", "\n", "        ", "logits", "=", "feature", "\n", "target", "=", "item", "[", "0", "]", "\n", "bce_loss", "=", "bce_loss_fn", "(", "logits", ",", "target", ")", "\n", "final_loss", "=", "bce_loss", "\n", "return", "final_loss", "\n", "\n", "", "loss_fn", "=", "loss_fn_maha", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "# Gen pertubations via attack methods", "\n", "attacker_dict", "=", "dict", "(", ")", "\n", "for", "name", "in", "attack_methods", ":", "\n", "        ", "splits", "=", "name", ".", "split", "(", "'_'", ")", "\n", "attacker_name", "=", "(", "'_'", ")", ".", "join", "(", "splits", "[", ":", "-", "1", "]", ")", "\n", "epsilon", "=", "2", "*", "float", "(", "name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "/", "255", "\n", "# L2 constrain epsilon * sqrt(c * w * h)", "\n", "print", "(", "f'Attack by Constrain: {255 * epsilon / 2}'", ")", "\n", "if", "'L2'", "in", "name", ":", "\n", "            ", "epsilon", "=", "epsilon", "*", "np", ".", "sqrt", "(", "test_loader", ".", "dataset", ".", "__getitem__", "(", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "'L1'", "in", "name", ":", "\n", "            ", "epsilon", "=", "epsilon", "*", "test_loader", ".", "dataset", ".", "__getitem__", "(", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "# 'Linf'", "\n", "            ", "pass", "\n", "\n", "", "kwargs", "=", "{", "\n", "'predict'", ":", "new_model", "(", "src_model", ")", ",", "\n", "'loss_fn'", ":", "loss_fn", ",", "\n", "'eps'", ":", "epsilon", ",", "\n", "'clip_min'", ":", "-", "1", ",", "\n", "'clip_max'", ":", "1", ",", "\n", "'targeted'", ":", "True", ",", "}", "\n", "\n", "if", "attacker_name", "==", "'FGSM_Linf'", "or", "attacker_name", "==", "'FGSM_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "1", "\n", "", "elif", "attacker_name", "==", "'M_FGSM_L2'", "or", "attacker_name", "==", "'MI_FGSM_Linf'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "10", "\n", "# elif attacker_name == 'D_M_FGSM_L2' or attacker_name == 'DI_MI_FGSM_Linf':", "\n", "#     kwargs['momentum'] = 1", "\n", "#     kwargs['diversity_prob'] = 0.5", "\n", "", "elif", "attacker_name", "==", "'PGD_Linf'", "or", "attacker_name", "==", "'PGD_L2'", ":", "\n", "            ", "kwargs", "[", "'rand_init'", "]", "=", "True", "\n", "kwargs", "[", "'nb_iter'", "]", "=", "10", "\n", "", "elif", "attacker_name", "==", "'Noise_Linf'", "or", "attacker_name", "==", "'Noise_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "0", "\n", "kwargs", "[", "'rand_init'", "]", "=", "True", "\n", "", "elif", "attacker_name", "==", "'CW_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "100", "\n", "", "elif", "attacker_name", "==", "'EAD_L1'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "30", "\n", "kwargs", "[", "'const_L1'", "]", "=", "0.01", "\n", "", "else", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "10", "\n", "# BIM Default kwargs", "\n", "pass", "\n", "", "kwargs", "[", "'eps_iter'", "]", "=", "2", "*", "epsilon", "/", "(", "kwargs", "[", "'nb_iter'", "]", "+", "1e-7", ")", "\n", "\n", "attacker", "=", "attackers", ".", "__dict__", "[", "attacker_name", "]", "(", "**", "kwargs", ")", "\n", "attacker_dict", "[", "name", "]", "=", "attacker", "\n", "\n", "", "total_labels_list", "=", "list", "(", ")", "\n", "loss_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "# Start to attack", "\n", "\n", "clean_images", "=", "list", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "# if i > 2: break", "\n", "        ", "clean_images", ".", "append", "(", "images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "True", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "# false_images = false_images.cuda()", "\n", "\n", "", "for", "attacker_name", ",", "attacker", "in", "attacker_dict", ".", "items", "(", ")", ":", "\n", "\n", "            ", "adv_images", "=", "attacker", ".", "perturb", "(", "images", ",", "[", "target", ",", "[", "]", "]", ")", "\n", "\n", "output", "=", "src_model", "(", "adv_images", ")", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", ".", "append", "(", "adv_images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gt_concatnate", "=", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "=", "np", ".", "concatenate", "(", "[", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", ",", "gt_concatnate", "]", ",", "axis", "=", "0", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", "=", "np", ".", "concatenate", "(", "[", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", ",", "output", "]", ",", "axis", "=", "0", ")", "\n", "adv_feature_list", "=", "src_model", ".", "feature_list", "(", "adv_images", ")", "[", "1", "]", "\n", "total_labels_list", ".", "append", "(", "gt_concatnate", ")", "\n", "\n", "# call metrics", "\n", "", "", "for", "attacker_name", ",", "attacker", "in", "attacker_dict", ".", "items", "(", ")", ":", "\n", "        ", "metric_counter", "[", "attacker_name", "]", "[", "'acc'", "]", "=", "accuracy_score", "(", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", ",", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", ",", "normalize", "=", "True", ")", "\n", "print", "(", "\"Acc {:.3f} Using {}\"", ".", "format", "(", "metric_counter", "[", "attacker_name", "]", "[", "'acc'", "]", ",", "attacker_name", ")", ")", "\n", "\n", "", "save_imgs", "=", "np", ".", "concatenate", "(", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", ",", "axis", "=", "0", ")", "\n", "base_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f'runs_{args.dataset}'", ",", "args", ".", "arch", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "base_dir", ")", ":", "os", ".", "mkdir", "(", "base_dir", ")", "\n", "np", ".", "save", "(", "f'{base_dir}/{args.attack}.npy'", ",", "save_imgs", ")", "\n", "\n", "total_labels_list", "=", "np", ".", "concatenate", "(", "total_labels_list", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "f'{base_dir}/gt.npy'", ",", "total_labels_list", ")", "\n", "clean_images", "=", "np", ".", "concatenate", "(", "clean_images", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "f'{base_dir}/clean.npy'", ",", "clean_images", ")", "\n", "diff", "=", "np", ".", "abs", "(", "clean_images", "-", "save_imgs", ")", "/", "2", "\n", "diff", "=", "diff", ".", "reshape", "(", "diff", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "num_dims", "=", "diff", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f'L inf max {diff.max()}'", ")", "\n", "print", "(", "f'L 2 {(np.sqrt((diff * diff).sum(-1) / num_dims)).mean()}'", ")", "\n", "print", "(", "f'L 1 {(diff.sum(-1) / num_dims).mean()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.gmm_attack.normalize": [[38, 42], ["tensor.mul().add.mul().add", "tensor.mul().add.mul"], "function", ["None"], ["def", "normalize", "(", "tensor", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "mul", "(", "attackers", ".", "torch_std_cuda", ")", ".", "add", "(", "attackers", ".", "torch_mean_cuda", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.gmm_attack.new_model": [[43, 49], ["model.feature_list", "model"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["", "def", "new_model", "(", "model", ")", ":", "\n", "    ", "def", "func", "(", "input", ")", ":", "\n", "# input : [image, index]", "\n", "        ", "return", "model", ".", "feature_list", "(", "input", ")", ",", "model", "(", "input", ")", "\n", "# return model.get_feature_attack", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.gmm_attack.run": [[50, 339], ["saver.Saver", "datasets.get_dataloader", "saver.Saver.load_model", "network.infer_Cls_Net_resnet.eval", "network.infer_Cls_Net_resnet.cuda", "dict", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "dict", "dict", "dict", "range", "list", "list", "os.path.join", "print", "range", "dict.items", "numpy.concatenate", "os.path.join", "numpy.save", "Feature_Detector", "numpy.concatenate", "range", "numpy.save", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "Feature_Detector.eval_patch", "numpy.concatenate", "diff.reshape.reshape", "print", "print", "print", "len", "network.infer_Cls_Net_vgg", "dict", "numpy.array", "numpy.array", "dict", "list", "list", "list", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "one_hot.scatter.scatter", "torch.nn.CrossEntropyLoss.", "range", "name.split", "print", "print", "list", "list", "os.getcwd", "datasets.get_dataloader", "range", "enumerate", "sklearn.metrics.accuracy_score", "print", "os.getcwd", "os.path.isdir", "os.mkdir", "numpy.concatenate", "network.infer_Cls_Net_resnet", "target.cuda.view", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "weights[].log", "feature[].view().mean", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "gmm_attack.new_model", "range", "numpy.load", "mean_list.append", "pre_chol_list.append", "weight_list.append", "tqdm.tqdm", "dict.items", "os.path.join", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.abs", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "feature[].view().mean.unsqueeze().repeat", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "range", "torch.zeros().float().cuda.argmax", "float", "numpy.sqrt", "os.path.join", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "images.cuda.cuda", "np.concatenate.append", "target.cuda.cuda", "attacker.perturb", "network.infer_Cls_Net_resnet.argmax().detach().cpu().numpy", "[].append", "target.cuda.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "enumerate", "np.concatenate.append", "os.getcwd", "diff.reshape.max", "numpy.sqrt().mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "feature[].view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "int", "images.cuda.cpu().numpy", "attacker.perturb.cpu().numpy", "network.infer_Cls_Net_resnet.feature_list", "item.view().mean().detach().cpu().numpy", "total_feature_list[].append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "feature[].size", "feature[].size", "feature[].view().mean.unsqueeze", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "hfc_score.sum", "std[].diag().log().sum", "zero_f.unsqueeze", "name.split", "int", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "network.infer_Cls_Net_resnet.argmax().detach().cpu", "target.cuda.detach().cpu", "numpy.sqrt", "[].view", "[].view", "images.cuda.cpu", "attacker.perturb.cpu", "item.view().mean().detach().cpu", "diff.reshape.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "std[].diag().log", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "network.infer_Cls_Net_resnet.argmax().detach", "target.cuda.detach", "int", "item.view().mean().detach", "std[].diag", "datasets.get_dataloader.dataset.__getitem__", "datasets.get_dataloader.dataset.__getitem__", "network.infer_Cls_Net_resnet.argmax", "item.view().mean", "network.infer_Cls_Net_resnet.", "item.view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.load_model", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.eval.Feature_Detector.eval_patch", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.base_adv_attack.new_model", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__getitem__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__getitem__"], ["", "def", "run", "(", "args", ",", "attack_methods", ")", ":", "\n", "    ", "assert", "(", "len", "(", "attack_methods", ")", "==", "1", ")", "\n", "num_component_gmm", "=", "args", ".", "num_component", "\n", "\n", "is_targeted", "=", "False", "\n", "saver", "=", "Saver", "(", "args", ".", "arch", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "\n", "test_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "arch", "=", "args", ".", "arch", ",", "mode", "=", "'test'", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "num_fold", "=", "args", ".", "num_fold", ",", "targeted", "=", "is_targeted", ")", "\n", "num_classes", "=", "test_loader", ".", "dataset", ".", "num_classes", "\n", "\n", "if", "args", ".", "arch", "==", "'vgg16'", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_vgg", "(", "num_classes", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_resnet", "(", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "src_model", "=", "saver", ".", "load_model", "(", "src_model", ",", "args", ".", "arch", ")", "\n", "src_model", ".", "eval", "(", ")", "\n", "src_model", "=", "src_model", ".", "cuda", "(", ")", "\n", "\n", "num_layers", "=", "src_model", ".", "num_feature", "\n", "num_cnn_layers", "=", "src_model", ".", "num_cnn", "\n", "\n", "# Great Metric Savers", "\n", "metric_counter", "=", "dict", "(", ")", "\n", "for", "attacker_name", "in", "attack_methods", ":", "\n", "        ", "metric_counter", "[", "attacker_name", "]", "=", "dict", "(", ")", "\n", "gt", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "metric_counter", "[", "attacker_name", "]", "=", "dict", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "=", "gt", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", "=", "pred", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", "=", "list", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'mse'", "]", "=", "list", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'mse_raw'", "]", "=", "list", "(", ")", "\n", "\n", "", "loss_fn", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "bce_loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "def", "fn_cw_loss", "(", "logits", ",", "target", ",", "get_scaler", "=", "True", ")", ":", "\n", "        ", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", "=", "one_hot", ".", "scatter", "(", "1", ",", "target", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "target_logits", "=", "(", "one_hot", "*", "logits", ")", ".", "sum", "(", "-", "1", ")", "\n", "remaining_logits_max", "=", "(", "(", "1", "-", "one_hot", ")", "*", "logits", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "if", "get_scaler", ":", "\n", "            ", "cw_loss", "=", "torch", ".", "clamp", "(", "remaining_logits_max", "-", "target_logits", "+", "10", ",", "min", "=", "0.", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "cw_loss", "=", "torch", ".", "clamp", "(", "remaining_logits_max", "-", "target_logits", "+", "10", ",", "min", "=", "0.", ")", "\n", "# print('wtf')", "\n", "", "return", "cw_loss", "\n", "", "if", "'CW'", "in", "attack_methods", "[", "0", "]", ":", "\n", "        ", "bce_loss_fn", "=", "fn_cw_loss", "\n", "\n", "", "def", "loss_fn_", "(", "feature", ",", "item", ")", ":", "\n", "\n", "        ", "feature", ",", "logits", "=", "feature", "\n", "feature", "=", "feature", "[", "1", "]", "\n", "target", "=", "item", "[", "0", "]", "\n", "bce_loss", "=", "bce_loss_fn", "(", "logits", ",", "target", ")", "\n", "final_loss", "=", "bce_loss", "\n", "mean_list", ",", "std_list", ",", "weights", "=", "item", "[", "1", "]", "\n", "\n", "# temp_mean = mean.index_select(0, target)", "\n", "for", "id_layer", "in", "range", "(", "num_cnn_layers", ")", ":", "\n", "            ", "temp_mean", "=", "mean_list", "[", "id_layer", "]", "\n", "std", "=", "std_list", "[", "id_layer", "]", "\n", "weight", "=", "weights", "[", "id_layer", "]", ".", "log", "(", ")", "\n", "\n", "# Compute mean and prob to n_conponent", "\n", "shape", "=", "feature", "[", "id_layer", "]", ".", "shape", "\n", "if", "shape", "[", "1", "]", ">", "512", ":", "continue", "\n", "mean_feature", "=", "feature", "[", "id_layer", "]", ".", "view", "(", "feature", "[", "id_layer", "]", ".", "size", "(", "0", ")", ",", "feature", "[", "id_layer", "]", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "num_component", "=", "temp_mean", ".", "shape", "[", "0", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "select_featue", "=", "mean_feature", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "(", "1", ",", "num_component", ",", "1", ")", ")", "\n", "# mean : [batch, n_comp, n_fea] == zero_f", "\n", "zero_f", "=", "select_featue", "-", "temp_mean", "\n", "scores", "=", "torch", ".", "zeros", "(", "[", "zero_f", ".", "shape", "[", "0", "]", ",", "zero_f", ".", "shape", "[", "1", "]", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "for", "id_comp", "in", "range", "(", "num_component", ")", ":", "\n", "                    ", "id_mean", "=", "zero_f", "[", ":", ",", "id_comp", ",", ":", "]", "\n", "hfc_score", "=", "torch", ".", "mm", "(", "id_mean", ",", "std", "[", "id_comp", "]", ")", "*", "torch", ".", "mm", "(", "id_mean", ",", "std", "[", "id_comp", "]", ")", "\n", "score", "=", "-", "0.5", "*", "hfc_score", ".", "sum", "(", "-", "1", ")", "\n", "score", "=", "score", "+", "std", "[", "id_comp", "]", ".", "diag", "(", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "scores", "[", ":", ",", "id_comp", "]", "=", "score", "\n", "", "scores", "+=", "weight", "\n", "selected_comp", "=", "scores", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "", "zero_f", "=", "mean_feature", "-", "temp_mean", "[", "selected_comp", "]", "\n", "tmp", "=", "torch", ".", "bmm", "(", "zero_f", ".", "unsqueeze", "(", "1", ")", ",", "std", "[", "selected_comp", "]", ")", ".", "squeeze", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "hfc_loss", "=", "(", "tmp", "*", "tmp", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", ")", "\n", "final_loss", "=", "args", ".", "lamda", "*", "hfc_loss", "+", "final_loss", "\n", "# print('bce {:.3f} final {:.3f}'.format(bce_loss, final_loss))", "\n", "", "return", "final_loss", "\n", "", "loss_fn", "=", "loss_fn_", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "\n", "# Gen pertubations via attack methods", "\n", "attacker_dict", "=", "dict", "(", ")", "\n", "for", "name", "in", "attack_methods", ":", "\n", "        ", "splits", "=", "name", ".", "split", "(", "'_'", ")", "\n", "attacker_name", "=", "(", "'_'", ")", ".", "join", "(", "splits", "[", ":", "-", "1", "]", ")", "\n", "epsilon", "=", "2", "*", "float", "(", "name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "/", "256", "\n", "# L2 constrain epsilon * sqrt(c * w * h)", "\n", "print", "(", "f'Attack by Constrain: {255 * epsilon / 2}'", ")", "\n", "if", "'L2'", "in", "name", ":", "\n", "            ", "epsilon", "=", "epsilon", "*", "np", ".", "sqrt", "(", "test_loader", ".", "dataset", ".", "__getitem__", "(", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "'L1'", "in", "name", ":", "\n", "            ", "epsilon", "=", "epsilon", "*", "test_loader", ".", "dataset", ".", "__getitem__", "(", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "# 'Linf'", "\n", "            ", "pass", "\n", "# if 'CW' in attacker_name:", "\n", "#     loss_fn = loss_fn_cw", "\n", "", "kwargs", "=", "{", "\n", "'predict'", ":", "new_model", "(", "src_model", ")", ",", "\n", "'loss_fn'", ":", "loss_fn", ",", "\n", "'eps'", ":", "epsilon", ",", "\n", "'clip_min'", ":", "-", "1", ",", "\n", "'clip_max'", ":", "1", ",", "\n", "'targeted'", ":", "True", ",", "}", "\n", "\n", "if", "args", ".", "dataset", "==", "'APTOS'", "and", "args", ".", "arch", "==", "'vgg16'", ":", "\n", "            ", "kwargs", "[", "'eps_iter'", "]", "=", "2", "*", "2", "*", "2", "/", "256", "/", "20", "\n", "", "elif", "args", ".", "dataset", "==", "'APTOS'", "and", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "            ", "kwargs", "[", "'eps_iter'", "]", "=", "2", "*", "2", "*", "0.5", "/", "256", "/", "20", "\n", "", "elif", "args", ".", "dataset", "==", "'CXR'", "and", "args", ".", "arch", "==", "'vgg16'", ":", "\n", "            ", "kwargs", "[", "'eps_iter'", "]", "=", "2", "*", "2", "*", "2", "/", "256", "/", "50", "\n", "", "elif", "args", ".", "dataset", "==", "'CXR'", "and", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "            ", "kwargs", "[", "'eps_iter'", "]", "=", "2", "*", "2", "*", "0.5", "/", "256", "/", "50", "\n", "", "elif", "args", ".", "dataset", "==", "'Cifar'", "and", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "            ", "kwargs", "[", "'eps_iter'", "]", "=", "2", "*", "2", "*", "0.5", "/", "256", "/", "10", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "attacker_name", "==", "'FGSM_Linf'", "or", "attacker_name", "==", "'FGSM_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "1", "\n", "kwargs", "[", "'eps_iter'", "]", "=", "epsilon", "\n", "", "elif", "attacker_name", "==", "'M_FGSM_L2'", "or", "attacker_name", "==", "'MI_FGSM_Linf'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "2", "*", "int", "(", "epsilon", "/", "kwargs", "[", "'eps_iter'", "]", ")", "\n", "# elif attacker_name == 'D_M_FGSM_L2' or attacker_name == 'DI_MI_FGSM_Linf':", "\n", "#     kwargs['momentum'] = 1", "\n", "#     kwargs['diversity_prob'] = 0.5", "\n", "", "elif", "attacker_name", "==", "'PGD_Linf'", "or", "attacker_name", "==", "'PGD_L2'", ":", "\n", "            ", "kwargs", "[", "'rand_init'", "]", "=", "True", "\n", "kwargs", "[", "'nb_iter'", "]", "=", "2", "*", "int", "(", "epsilon", "/", "kwargs", "[", "'eps_iter'", "]", ")", "\n", "", "elif", "attacker_name", "==", "'Noise_Linf'", "or", "attacker_name", "==", "'Noise_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "0", "\n", "kwargs", "[", "'rand_init'", "]", "=", "True", "\n", "", "elif", "attacker_name", "==", "'CW_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "100", "\n", "if", "args", ".", "lamda", ":", "kwargs", "[", "'initial_const'", "]", "=", "0.001", "\n", "else", ":", "kwargs", "[", "'initial_const'", "]", "=", "0.1", "\n", "", "elif", "attacker_name", "==", "'EAD_L1'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "100", "\n", "kwargs", "[", "'const_L1'", "]", "=", "0.01", "\n", "", "else", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "2", "*", "int", "(", "epsilon", "/", "kwargs", "[", "'eps_iter'", "]", ")", "\n", "# BIM Default kwargs", "\n", "pass", "\n", "", "print", "(", "'Iteration: {}'", ".", "format", "(", "kwargs", "[", "'nb_iter'", "]", ")", ")", "\n", "\n", "attacker", "=", "attackers", ".", "__dict__", "[", "attacker_name", "]", "(", "**", "kwargs", ")", "\n", "attacker_dict", "[", "name", "]", "=", "attacker", "\n", "\n", "", "clean_feature_dict", "=", "dict", "(", ")", "\n", "adv_feature_dict", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "clean_feature_dict", "[", "i", "]", "=", "list", "(", ")", "\n", "adv_feature_dict", "[", "i", "]", "=", "list", "(", ")", "\n", "\n", "", "total_feature_list", "=", "{", "item", ":", "[", "]", "for", "item", "in", "range", "(", "num_layers", ")", "}", "\n", "total_pred_list", "=", "list", "(", ")", "\n", "clean_images", "=", "list", "(", ")", "\n", "root_gmm", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f'runs_{args.dataset}'", ",", "args", ".", "arch", ",", "f'GMM_{num_component_gmm}'", ")", "\n", "print", "(", "f'load GMM from {root_gmm}'", ")", "\n", "# Start to attack", "\n", "for", "id_class", "in", "range", "(", "2", ")", ":", "\n", "        ", "test_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "arch", "=", "args", ".", "arch", ",", "mode", "=", "'adv_test'", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "num_fold", "=", "args", ".", "num_fold", ",", "targeted", "=", "is_targeted", ",", "rand_pairs", "=", "'specific'", ",", "target_class", "=", "id_class", ")", "\n", "\n", "mean_list", ",", "pre_chol_list", ",", "weight_list", ",", "scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "id_layer", "in", "range", "(", "num_cnn_layers", ")", ":", "\n", "            ", "gmm_model", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root_gmm", ",", "f'Layer_{id_layer}_class_{id_class}.npz'", ")", ")", "\n", "# Here precision is a metric with shape [n_components, n_featues, n_featues]", "\n", "# gmm.means_ shape [n_components, n_features]", "\n", "# precision[i] = covirence[i].inverse() (ni ju zhen)", "\n", "# precision cholesky is the cholesky decomposition of precision (for better computing only)", "\n", "mean_list", ".", "append", "(", "torch", ".", "from_numpy", "(", "gmm_model", "[", "'means_'", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", ")", "\n", "pre_chol_list", ".", "append", "(", "torch", ".", "from_numpy", "(", "gmm_model", "[", "'precision_cholesky_'", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", ")", "\n", "weight_list", ".", "append", "(", "torch", ".", "from_numpy", "(", "gmm_model", "[", "'weights_'", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", ")", "\n", "\n", "", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "test_loader", ",", "desc", "=", "f'Class {id_class}'", ")", ")", ":", "\n", "# if i > 2: break", "\n", "            ", "if", "True", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "clean_images", ".", "append", "(", "images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "# false_images = false_images.cuda()", "\n", "\n", "", "for", "attacker_name", ",", "attacker", "in", "attacker_dict", ".", "items", "(", ")", ":", "\n", "                ", "adv_images", "=", "attacker", ".", "perturb", "(", "images", ",", "[", "target", ",", "[", "mean_list", ",", "pre_chol_list", ",", "weight_list", "]", "]", ")", "\n", "# pertubation = (normalize(adv_images) - normalize(images))", "\n", "\n", "output", "=", "src_model", "(", "adv_images", ")", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", ".", "append", "(", "adv_images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gt_concatnate", "=", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "=", "np", ".", "concatenate", "(", "[", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", ",", "gt_concatnate", "]", ",", "axis", "=", "0", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", "=", "np", ".", "concatenate", "(", "[", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", ",", "output", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# # Get feature distribution", "\n", "# for j in range(images.shape[0]):", "\n", "#     real_feature = src_model.get_feature(images, 7)[j].detach()", "\n", "#     adv_feature = src_model.get_feature(adv_images, 7)[j].detach()", "\n", "#     num_channel = real_feature.shape[0]", "\n", "#     real_feature = real_feature.view(num_channel, -1).mean(-1).cpu().unsqueeze(0).numpy()", "\n", "#     adv_feature = adv_feature.view(num_channel, -1).mean(-1).cpu().unsqueeze(0).numpy()", "\n", "#     clean_feature_dict[target[j].item()].append(real_feature)", "\n", "#     adv_feature_dict[output[j]].append(adv_feature)", "\n", "\n", "adv_feature_list", "=", "src_model", ".", "feature_list", "(", "adv_images", ")", "[", "1", "]", "\n", "for", "id_layer", ",", "item", "in", "enumerate", "(", "adv_feature_list", ")", ":", "\n", "                    ", "temp", "=", "item", ".", "view", "(", "item", ".", "shape", "[", "0", "]", ",", "item", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "total_feature_list", "[", "id_layer", "]", ".", "append", "(", "temp", ")", "\n", "", "total_pred_list", ".", "append", "(", "output", ")", "\n", "\n", "# # import ipdb; ipdb.set_trace()    ", "\n", "# clean_0 = np.array(clean_feature_dict[0]).transpose()", "\n", "# np.save(os.path.join(save_root, 'clean_0.npy'), clean_0)", "\n", "# clean_1 = np.array(clean_feature_dict[1]).transpose()", "\n", "# np.save(os.path.join(save_root, 'clean_1.npy'), clean_1)", "\n", "# adv_0 = np.array(adv_feature_dict[0]).transpose()", "\n", "# np.save(os.path.join(save_root, 'adv_0.npy'), adv_0)", "\n", "# adv_1 = np.array(adv_feature_dict[1]).transpose()", "\n", "# np.save(os.path.join(save_root, 'adv_1.npy'), adv_1)", "\n", "\n", "\n", "# call metrics", "\n", "", "", "", "for", "attacker_name", ",", "attacker", "in", "attacker_dict", ".", "items", "(", ")", ":", "\n", "        ", "metric_counter", "[", "attacker_name", "]", "[", "'acc'", "]", "=", "accuracy_score", "(", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", ",", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", ",", "normalize", "=", "True", ")", "\n", "print", "(", "\"Acc {:.3f} Using {}\"", ".", "format", "(", "metric_counter", "[", "attacker_name", "]", "[", "'acc'", "]", ",", "attacker_name", ")", ")", "\n", "\n", "", "save_imgs", "=", "np", ".", "concatenate", "(", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", ",", "axis", "=", "0", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f'runs_{args.dataset}'", ",", "args", ".", "arch", ",", "args", ".", "attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "np", ".", "save", "(", "f'{save_dir}/GMM_{num_component_gmm}.npy'", ",", "save_imgs", ")", "\n", "\n", "from", "eval", "import", "Feature_Detector", "\n", "detector", "=", "Feature_Detector", "(", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f'runs_{args.dataset}'", ",", "args", ".", "arch", ",", "args", ".", "detector", ")", ",", "num_classes", "=", "num_classes", ",", "num_layers", "=", "num_layers", ",", "num_cnn_layers", "=", "num_cnn_layers", ")", "\n", "# detector = Feature_Detector(temp_dir=\\", "\n", "#     f'/apdcephfs/share_1290796/qingsongyao/temp/{args.dataset}/{args.arch}/I_FGSM_Linf_2',\\", "\n", "#         num_classes=num_classes, num_layers=num_layers, num_cnn_layers=num_cnn_layers)", "\n", "total_pred_list", "=", "np", ".", "concatenate", "(", "total_pred_list", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "total_feature_list", "[", "i", "]", "=", "np", ".", "concatenate", "(", "total_feature_list", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "", "np", ".", "save", "(", "f'{save_dir}/GMM_{num_component_gmm}_pred.npy'", ",", "total_pred_list", ")", "\n", "\n", "adv_data", "=", "torch", ".", "from_numpy", "(", "save_imgs", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "bingo", "=", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "==", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", "\n", "correct_image", "=", "adv_data", "[", "bingo", "]", "\n", "labels", "=", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "[", "bingo", "]", "\n", "if", "labels", ".", "shape", "[", "0", "]", "%", "100", "==", "1", ":", "\n", "        ", "correct_image", "=", "correct_image", "[", ":", "100", "*", "(", "labels", ".", "shape", "[", "0", "]", "/", "100", ")", "]", "\n", "labels", "=", "labels", "[", ":", "100", "*", "(", "labels", ".", "shape", "[", "0", "]", "/", "100", ")", "]", "\n", "", "detector", ".", "eval_patch", "(", "correct_image", ",", "src_model", ",", "labels", ")", "\n", "\n", "clean_images", "=", "np", ".", "concatenate", "(", "clean_images", ",", "axis", "=", "0", ")", "\n", "diff", "=", "np", ".", "abs", "(", "clean_images", "-", "save_imgs", ")", "*", "255", "/", "2", "\n", "diff", "=", "diff", ".", "reshape", "(", "diff", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "num_dims", "=", "diff", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f'L inf max {diff.max()}'", ")", "\n", "print", "(", "f'L 2 {(np.sqrt((diff * diff).sum(-1) / num_dims)).mean()}'", ")", "\n", "print", "(", "f'L 1 {(diff.sum(-1) / num_dims).mean()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.VGG.__init__": [[26, 43], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "utils.my_sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "vgg.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "7", ",", "7", ")", ")", "\n", "self", ".", "classifier", "=", "my_sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "", "self", ".", "num_feature", "=", "features", ".", "num_feature", "+", "self", ".", "classifier", ".", "num_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.VGG.forward": [[44, 50], ["vgg.VGG.features", "vgg.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "vgg.VGG.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.VGG.feature_forward": [[51, 60], ["vgg.VGG.features", "features.extend", "vgg.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "vgg.VGG.classifier", "features.extend"], "methods", ["None"], ["", "def", "feature_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "x", ",", "feature", "=", "self", ".", "features", "(", "x", ",", "get_features", "=", "True", ")", "\n", "features", ".", "extend", "(", "feature", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", ",", "feature", "=", "self", ".", "classifier", "(", "x", ",", "get_features", "=", "True", ")", "\n", "features", ".", "extend", "(", "feature", ")", "\n", "return", "x", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.VGG.get_feature": [[61, 72], ["features.extend", "vgg.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "vgg.VGG.classifier", "vgg.VGG.features", "vgg.VGG.features"], "methods", ["None"], ["", "def", "get_feature", "(", "self", ",", "x", ",", "feature_index", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "if", "feature_index", "<", "self", ".", "features", ".", "num_feature", ":", "\n", "            ", "return", "self", ".", "features", "(", "x", ",", "get_features", "=", "True", ",", "return_index", "=", "feature_index", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "feature", "=", "self", ".", "features", "(", "x", ",", "get_features", "=", "True", ")", "\n", "", "features", ".", "extend", "(", "feature", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ",", "get_features", "=", "True", ",", "return_index", "=", "feature_index", "-", "self", ".", "features", ".", "num_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.VGG._initialize_weights": [[73, 85], ["vgg.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.Test_CLS.__init__": [[204, 208], ["super().__init__", "vgg.vgg16"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg16"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "arch", ",", "load_pretrain", "=", "True", ")", ":", "\n", "        ", "super", "(", "Test_CLS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "vgg16", "(", "num_classes", "=", "2", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.Test_CLS.forward": [[209, 214], ["vgg.Test_CLS.model", "vgg.Test_CLS.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ")", ":", "\n", "        ", "if", "get_features", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.make_layers": [[87, 101], ["utils.my_sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "my_sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg": [[110, 114], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.make_layers"], ["def", "_vgg", "(", "arch", ",", "cfg", ",", "batch_norm", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg11": [[116, 125], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg11", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") from\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11'", ",", "'A'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg11_bn": [[127, 136], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg11_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11_bn'", ",", "'A'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg13": [[138, 147], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg13", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13'", ",", "'B'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg13_bn": [[149, 158], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg13_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13_bn'", ",", "'B'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg16": [[160, 169], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg16", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16'", ",", "'D'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg16_bn": [[171, 180], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg16_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16_bn'", ",", "'D'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg19": [[182, 191], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg19", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration \"E\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19'", ",", "'E'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg19_bn": [[193, 202], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg._vgg"], ["", "def", "vgg19_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19_bn'", ",", "'E'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.eval.Feature_Detector.__init__": [[44, 105], ["os.path.isdir", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "numpy.load().items", "numpy.load().items", "numpy.load", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "temp_dir", ",", "num_classes", ",", "num_layers", ",", "num_cnn_layers", ")", ":", "\n", "        ", "assert", "(", "os", ".", "path", ".", "isdir", "(", "temp_dir", ")", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_cnn_layers", "=", "num_cnn_layers", "\n", "print", "(", "f\"******** Load recorders from {temp_dir}\"", ")", "\n", "\n", "# Load MAHA estimator and clean scores", "\n", "save_estimator_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'estimator'", ")", "\n", "precision_pth", "=", "os", ".", "path", ".", "join", "(", "save_estimator_pth", ",", "'precision.npz'", ")", "\n", "mean_pth", "=", "os", ".", "path", ".", "join", "(", "save_estimator_pth", ",", "'mean.npz'", ")", "\n", "self", ".", "mean", "=", "[", "array", "for", "key", ",", "array", "in", "np", ".", "load", "(", "mean_pth", ")", ".", "items", "(", ")", "]", "\n", "self", ".", "precision", "=", "[", "array", "for", "key", ",", "array", "in", "np", ".", "load", "(", "precision_pth", ")", ".", "items", "(", ")", "]", "\n", "save_maha_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'maha.pkl'", ")", "\n", "with", "open", "(", "save_maha_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "maha_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "save_maha_lr_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'maha_lr.pkl'", ")", "\n", "with", "open", "(", "save_maha_lr_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "maha_lr", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Load LID recorder and clean scores", "\n", "", "save_lid_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'lid.pkl'", ")", "\n", "with", "open", "(", "save_lid_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "LID_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "save_lid_lr_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'lid_lr.pkl'", ")", "\n", "with", "open", "(", "save_lid_lr_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "lid_lr", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Load SVM recorder", "\n", "", "save_svm_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'svm.pkl'", ")", "\n", "with", "open", "(", "save_svm_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "SVM_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Load DNN recorder", "\n", "", "save_dnn_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'dnn.pkl'", ")", "\n", "with", "open", "(", "save_dnn_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "DNN_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# # Load DkNN recorder", "\n", "# save_dknn_pth = os.path.join(temp_dir, 'dknn.pkl')", "\n", "# with open(save_dknn_pth, 'rb') as f:", "\n", "#     self.DkNN_recorder = pickle.load(f)", "\n", "\n", "# Load BU recorder", "\n", "", "save_bu_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'bu.pkl'", ")", "\n", "with", "open", "(", "save_bu_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "BU_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# # Load GMM recorder", "\n", "# save_gmm_pth = os.path.join(temp_dir, 'gmm.pkl')", "\n", "# with open(save_gmm_pth, 'rb') as f:", "\n", "#     self.GMM_recorder = pickle.load(f)", "\n", "\n", "# Load KD estimator and clean scores", "\n", "", "save_kd_estimator_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'kd_estimator.pkl'", ")", "\n", "with", "open", "(", "save_kd_estimator_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "kd_estimator", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "save_kd_pth", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'kd.pkl'", ")", "\n", "with", "open", "(", "save_kd_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "kd_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "clean_kde", "=", "kd_estimator", "[", "'clean'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.eval.Feature_Detector.eval_patch": [[107, 316], ["numpy.ceil().astype", "list", "list", "list", "list", "list", "list", "range", "numpy.concatenate", "range", "numpy.concatenate().transpose", "numpy.concatenate().transpose", "numpy.concatenate", "utils.logits_regression_infer", "utils.logits_regression_infer_raw", "print", "utils.logits_regression_infer", "utils.logits_regression_infer_raw", "print", "utils.get_pairs_auc", "utils.get_pairs_auc", "print", "numpy.stack().mean", "numpy.stack().mean", "numpy.stack().mean", "numpy.stack().mean", "utils.get_pairs_auc", "utils.get_pairs_auc", "print", "numpy.concatenate", "utils.get_pairs_auc", "utils.get_pairs_auc", "print", "numpy.concatenate.append", "print", "src_model.eval", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.stack().mean.append", "range", "numpy.array", "numpy.concatenate", "numpy.concatenate", "utils.get_pairs_auc", "utils.get_pairs_auc", "utils.get_pairs_auc", "utils.get_pairs_auc", "utils.get_pairs_auc", "utils.get_pairs_auc", "print", "numpy.concatenate().transpose.append", "numpy.concatenate().transpose.append", "eval.Feature_Detector.DNN_recorder.keys", "numpy.ceil", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "src_model().argmax().cpu().numpy", "[].infer_array", "utils.get_pairs_auc", "src_model.get_feature.view().mean().cpu().numpy", "range", "adv_detectors.mle_batch", "numpy.concatenate.append", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.concatenate.append", "numpy.expand_dims", "numpy.expand_dims", "utils.get_pairs_auc", "utils.get_pairs_auc", "print", "numpy.concatenate", "numpy.concatenate", "numpy.stack", "range", "numpy.stack", "range", "numpy.stack", "range", "numpy.stack", "min", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "src_model.get_feature", "src_model().argmax().cpu().numpy", "numpy.array.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "SVM_result.append", "src_model.set_dropout", "list", "numpy.concatenate().std", "numpy.concatenate.append", "src_model.set_dropout", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "src_model().argmax().cpu", "min", "src_model.get_feature.view().mean().cpu", "[].score_samples", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "eval.Feature_Detector.SVM_recorder[].predict_proba().transpose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "src_model().argmax().cpu", "test_feature[].reshape", "[].detach().cpu().numpy", "numpy.concatenate().std.append", "numpy.concatenate", "src_model().argmax", "src_model.get_feature.view().mean", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "eval.Feature_Detector.SVM_recorder[].predict_proba", "src_model().argmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.from_numpy.t", "torch.from_numpy.t", "torch.from_numpy.t", "torch.from_numpy.t", "torch.from_numpy.t", "torch.from_numpy.t", "torch.from_numpy.t", "torch.from_numpy.t", "torch.from_numpy.t", "[].detach().cpu", "src_model", "src_model.get_feature.view", "src_model", "[].detach", "src_model"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_infer", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_infer_raw", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_infer", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_infer_raw", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_array", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.mle_batch", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.set_dropout", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.set_dropout"], ["", "def", "eval_patch", "(", "self", ",", "data", ",", "src_model", ",", "label", "=", "None", ")", ":", "\n", "        ", "keys", "=", "[", "*", "self", ".", "DNN_recorder", ".", "keys", "(", ")", "]", "\n", "key_clean", ",", "key_noise", ",", "key_adv", "=", "keys", "[", "0", "]", ",", "keys", "[", "2", "]", ",", "keys", "[", "1", "]", "\n", "batch_size", "=", "100", "\n", "num_batches", "=", "np", ".", "ceil", "(", "data", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ".", "astype", "(", "int", ")", "\n", "full_lid", "=", "list", "(", ")", "\n", "full_maha", "=", "list", "(", ")", "\n", "full_dnn", "=", "list", "(", ")", "\n", "full_dknn", "=", "list", "(", ")", "\n", "full_bu", "=", "list", "(", ")", "\n", "pred_list", "=", "list", "(", ")", "\n", "data_len", "=", "data", ".", "shape", "[", "0", "]", "\n", "for", "index", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "input_patch", "=", "data", "[", "index", "*", "batch_size", ":", "min", "(", "data_len", ",", "(", "index", "+", "1", ")", "*", "batch_size", ")", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "src_model", "(", "input_patch", ")", ".", "argmax", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "pred_list", "=", "np", ".", "concatenate", "(", "pred_list", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "# if label.shape != ", "\n", "            ", "bingo", "=", "(", "pred_list", "==", "label", ")", ".", "astype", "(", "np", ".", "float", ")", ".", "mean", "(", ")", "\n", "print", "(", "f\" Attack Acc {bingo}\"", ")", "\n", "\n", "", "for", "layer_index", "in", "range", "(", "0", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "src_model", ".", "eval", "(", ")", "\n", "kd_result", "=", "[", "]", "\n", "maha_result", "=", "[", "]", "\n", "LID_result", "=", "[", "]", "\n", "SVM_result", "=", "[", "]", "\n", "dknn_result", "=", "[", "]", "\n", "gmm_result", "=", "[", "]", "\n", "maha_mean", "=", "np", ".", "array", "(", "self", ".", "mean", "[", "layer_index", "]", ")", "\n", "maha_precision", "=", "torch", ".", "from_numpy", "(", "self", ".", "precision", "[", "layer_index", "]", ")", "\n", "\n", "# DNN evaluate", "\n", "if", "layer_index", "<", "self", ".", "num_cnn_layers", ":", "\n", "                ", "dnn_pred", "=", "self", ".", "DNN_recorder", "[", "layer_index", "]", "[", "'model'", "]", ".", "infer_array", "(", "data", ",", "src_model", ")", "\n", "dnn_auc", "=", "get_pairs_auc", "(", "self", ".", "DNN_recorder", "[", "layer_index", "]", "[", "'clean_pred'", "]", ",", "\n", "self", ".", "DNN_recorder", "[", "layer_index", "]", "[", "'noise_pred'", "]", ",", "dnn_pred", ",", "adv_test", "=", "True", ",", "negative", "=", "False", ")", "\n", "raw_dnn_auc", "=", "self", ".", "DNN_recorder", "[", "layer_index", "]", "[", "'auc'", "]", "\n", "", "else", ":", "\n", "                ", "dnn_auc", "=", "-", "1", "\n", "raw_dnn_auc", "=", "-", "1", "\n", "", "full_dnn", ".", "append", "(", "dnn_pred", ")", "\n", "\n", "for", "index", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "data_len", "=", "data", ".", "shape", "[", "0", "]", "\n", "input_patch", "=", "data", "[", "index", "*", "batch_size", ":", "min", "(", "data_len", ",", "(", "index", "+", "1", ")", "*", "batch_size", ")", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "test_feature", "=", "src_model", ".", "get_feature", "(", "input_patch", ",", "layer_index", ")", "\n", "pred", "=", "src_model", "(", "input_patch", ")", ".", "argmax", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "n", ",", "c", "=", "test_feature", ".", "shape", "[", "0", "]", ",", "test_feature", ".", "shape", "[", "1", "]", "\n", "test_feature", "=", "test_feature", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# pred = labels[index * batch_size: (index + 1) * batch_size]", "\n", "# KD evaluate", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "kd_score", "=", "self", ".", "clean_kde", "[", "pred", "[", "i", "]", "]", "[", "layer_index", "]", ".", "score_samples", "(", "test_feature", "[", "i", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "kd_result", ".", "append", "(", "kd_score", ")", "\n", "# if i == 0 and layer_index>=48 and index == 1:", "\n", "#     print(kd_score)", "\n", "#     print(test_feature[i])", "\n", "#     import ipdb; ipdb.set_trace()", "\n", "\n", "# LID evaluate", "\n", "", "clean_batch", "=", "self", ".", "LID_recorder", "[", "'clean'", "]", "[", "'features'", "]", "[", "layer_index", "]", "[", "index", "]", "\n", "lid_score", "=", "mle_batch", "(", "clean_batch", ",", "test_feature", ",", "k", "=", "20", ")", "\n", "# lid_score_clean = mle_batch_test(clean_batch, test_feature, clean_batch, k = 20)", "\n", "LID_result", ".", "append", "(", "lid_score", ")", "\n", "\n", "# MAHA evaluate", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                    ", "batch_sample_mean", "=", "maha_mean", "[", "i", "]", "\n", "zero_f", "=", "torch", ".", "from_numpy", "(", "test_feature", "-", "batch_sample_mean", ")", "\n", "term_gau", "=", "-", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "maha_precision", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "noise_gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                        ", "noise_gaussian_score", "=", "torch", ".", "cat", "(", "(", "noise_gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "", "", "noise_gaussian_score", ",", "_", "=", "torch", ".", "max", "(", "noise_gaussian_score", ",", "dim", "=", "1", ")", "\n", "maha_result", ".", "append", "(", "noise_gaussian_score", ".", "numpy", "(", ")", ")", "\n", "\n", "# SVM evaluate", "\n", "if", "layer_index", "==", "self", ".", "num_layers", "-", "1", ":", "\n", "                    ", "svm_scores", "=", "self", ".", "SVM_recorder", "[", "'model'", "]", ".", "predict_proba", "(", "test_feature", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "SVM_result", ".", "append", "(", "svm_scores", ")", "\n", "\n", "# BU evaluate", "\n", "", "if", "layer_index", "==", "self", ".", "num_layers", "-", "1", ":", "\n", "                    ", "src_model", ".", "set_dropout", "(", "True", ")", "\n", "bu_temp", "=", "list", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "                            ", "output", "=", "src_model", "(", "input_patch", ")", "[", ":", ",", "0", ":", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "bu_temp", ".", "append", "(", "output", ")", "\n", "", "", "bu_temp", "=", "np", ".", "concatenate", "(", "bu_temp", ",", "-", "1", ")", ".", "std", "(", "-", "1", ")", "\n", "full_bu", ".", "append", "(", "bu_temp", ")", "\n", "src_model", ".", "set_dropout", "(", "False", ")", "\n", "\n", "# # GMM evaluate", "\n", "# scores = self.GMM_recorder[layer_index]['model'].score_samples(test_feature)", "\n", "# gmm_result.append(scores)", "\n", "\n", "# # DkNN evaluate", "\n", "# temp = self.DkNN_recorder[layer_index]['model'].kneighbors(test_feature)[1]", "\n", "# temp_classes = self.DkNN_recorder['labels'][temp]", "\n", "# temp_correct = (temp_classes.transpose() == pred).transpose()", "\n", "# dknn_scores = temp_correct.sum(-1) / 5", "\n", "# dknn_result.append(dknn_scores)", "\n", "\n", "# Compute AUCs", "\n", "", "", "kd_result", "=", "np", ".", "array", "(", "kd_result", ")", "\n", "maha_result", "=", "np", ".", "concatenate", "(", "maha_result", ",", "axis", "=", "0", ")", "\n", "LID_result", "=", "np", ".", "concatenate", "(", "LID_result", ",", "axis", "=", "0", ")", "\n", "# dknn_result = np.concatenate(dknn_result, axis=0)", "\n", "# gmm_result = np.concatenate(gmm_result, axis=0)", "\n", "# full_dknn.append(np.expand_dims(dknn_result, -1))", "\n", "\n", "kd_auc", "=", "get_pairs_auc", "(", "self", ".", "kd_recorder", "[", "key_clean", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "kd_recorder", "[", "key_noise", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "kd_result", ",", "adv_test", "=", "True", ")", "\n", "LID_auc", "=", "get_pairs_auc", "(", "self", ".", "LID_recorder", "[", "key_clean", "]", "[", "20", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "LID_recorder", "[", "key_noise", "]", "[", "20", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "LID_result", ",", "adv_test", "=", "True", ")", "\n", "MAHA_auc", "=", "get_pairs_auc", "(", "self", ".", "maha_recorder", "[", "key_clean", "]", "[", "0.0005", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "maha_recorder", "[", "key_noise", "]", "[", "0.0005", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "maha_result", ",", "adv_test", "=", "True", ")", "\n", "raw_kd_auc", "=", "get_pairs_auc", "(", "self", ".", "kd_recorder", "[", "key_clean", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "kd_recorder", "[", "key_noise", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "kd_recorder", "[", "key_adv", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ")", "\n", "raw_LID_auc", "=", "get_pairs_auc", "(", "self", ".", "LID_recorder", "[", "key_clean", "]", "[", "20", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "LID_recorder", "[", "key_noise", "]", "[", "20", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "LID_recorder", "[", "key_adv", "]", "[", "20", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ")", "\n", "raw_MAHA_auc", "=", "get_pairs_auc", "(", "self", ".", "maha_recorder", "[", "key_clean", "]", "[", "0.0005", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "maha_recorder", "[", "key_noise", "]", "[", "0.0005", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "maha_recorder", "[", "key_adv", "]", "[", "0.0005", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ")", "\n", "# dknn_auc = get_pairs_auc(self.DkNN_recorder[layer_index][key_clean],", "\n", "# self.DkNN_recorder[layer_index][key_noise], dknn_result, adv_test=True, negative=False)", "\n", "# GMM_auc = get_pairs_auc(self.GMM_recorder[layer_index][key_clean],", "\n", "#             self.GMM_recorder[layer_index][key_noise], gmm_result, adv_test=True, negative=False)", "\n", "\n", "print", "(", "'Layer {} \\t KD {:.3f}/{:.3f} \\t LID {:.3f}/{:.3f} \\t MAHA {:.3f}/{:.3f} \\t DNN {:.3f}/{:.3f} \\t'", ".", "format", "(", "layer_index", ",", "raw_kd_auc", ",", "kd_auc", ",", "raw_LID_auc", ",", "LID_auc", ",", "raw_MAHA_auc", ",", "MAHA_auc", ",", "raw_dnn_auc", ",", "dnn_auc", ")", ")", "\n", "\n", "full_lid", ".", "append", "(", "np", ".", "expand_dims", "(", "LID_result", ",", "0", ")", ")", "\n", "full_maha", ".", "append", "(", "np", ".", "expand_dims", "(", "maha_result", ",", "0", ")", ")", "\n", "\n", "if", "layer_index", "==", "self", ".", "num_layers", "-", "1", ":", "\n", "                ", "kd_auc", ",", "kd_rate", "=", "get_pairs_auc", "(", "self", ".", "kd_recorder", "[", "key_clean", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "kd_recorder", "[", "key_noise", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "kd_result", ",", "adv_test", "=", "True", ",", "get_rate", "=", "True", ")", "\n", "raw_kd_auc", ",", "raw_kd_rate", "=", "get_pairs_auc", "(", "self", ".", "kd_recorder", "[", "key_clean", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "kd_recorder", "[", "key_noise", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "\n", "self", ".", "kd_recorder", "[", "key_adv", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "get_rate", "=", "True", ")", "\n", "print", "(", "'Final KD AUC {:.3f}/{:.3f} TNR at 90 {:.3f}/{:.3f}'", ".", "format", "(", "raw_kd_auc", ",", "kd_auc", ",", "raw_kd_rate", ",", "kd_rate", ")", ")", "\n", "\n", "", "", "full_lid", "=", "np", ".", "concatenate", "(", "full_lid", ",", "0", ")", ".", "transpose", "(", ")", "\n", "full_maha", "=", "np", ".", "concatenate", "(", "full_maha", ",", "0", ")", ".", "transpose", "(", ")", "\n", "full_svm", "=", "np", ".", "concatenate", "(", "SVM_result", ")", "\n", "# full_dknn = np.concatenate(full_dknn, -1).sum(-1)", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "final_maha_auc", ",", "maha_rate", "=", "logits_regression_infer", "(", "self", ".", "maha_recorder", "[", "key_clean", "]", "[", "0.0005", "]", ",", "self", ".", "maha_recorder", "[", "key_noise", "]", "[", "0.0005", "]", ",", "full_maha", ",", "self", ".", "maha_lr", ",", "get_rate", "=", "True", ")", "\n", "final_raw_maha_auc", ",", "raw_maha_rate", "=", "logits_regression_infer_raw", "(", "self", ".", "maha_recorder", "[", "key_clean", "]", "[", "0.0005", "]", ",", "self", ".", "maha_recorder", "[", "key_noise", "]", "[", "0.0005", "]", ",", "self", ".", "maha_recorder", "[", "key_adv", "]", "[", "0.0005", "]", ",", "self", ".", "maha_lr", ",", "get_rate", "=", "True", ")", "\n", "print", "(", "'Final MAHA AUC {:.3f}/{:.3f} TNR at 90 {:.3f}/{:.3f}'", ".", "format", "(", "final_raw_maha_auc", ",", "final_maha_auc", ",", "raw_maha_rate", ",", "maha_rate", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "final_lid_auc", ",", "lid_rate", "=", "logits_regression_infer", "(", "self", ".", "LID_recorder", "[", "key_clean", "]", "[", "20", "]", ",", "self", ".", "LID_recorder", "[", "key_noise", "]", "[", "20", "]", ",", "full_lid", ",", "self", ".", "lid_lr", ",", "get_rate", "=", "True", ")", "\n", "final_raw_lid_auc", ",", "raw_lid_rate", "=", "logits_regression_infer_raw", "(", "self", ".", "LID_recorder", "[", "key_clean", "]", "[", "20", "]", ",", "self", ".", "LID_recorder", "[", "key_noise", "]", "[", "20", "]", ",", "self", ".", "LID_recorder", "[", "key_adv", "]", "[", "20", "]", ",", "self", ".", "lid_lr", ",", "get_rate", "=", "True", ")", "\n", "print", "(", "'Final LID AUC {:.3f}/{:.3f} TNR at 90 {:.3f}/{:.3f}'", ".", "format", "(", "final_raw_lid_auc", ",", "final_lid_auc", ",", "raw_lid_rate", ",", "lid_rate", ")", ")", "\n", "\n", "final_svm_auc", ",", "svm_rate", "=", "get_pairs_auc", "(", "self", ".", "SVM_recorder", "[", "key_clean", "]", "[", "'scores'", "]", ",", "self", ".", "SVM_recorder", "[", "key_noise", "]", "[", "'scores'", "]", ",", "full_svm", ",", "adv_test", "=", "True", ",", "negative", "=", "False", ",", "get_rate", "=", "True", ")", "\n", "final_raw_svm_auc", ",", "raw_svm_rate", "=", "get_pairs_auc", "(", "self", ".", "SVM_recorder", "[", "key_clean", "]", "[", "'scores'", "]", ",", "self", ".", "SVM_recorder", "[", "key_noise", "]", "[", "'scores'", "]", ",", "\n", "self", ".", "SVM_recorder", "[", "key_adv", "]", "[", "'scores'", "]", ",", "negative", "=", "False", ",", "get_rate", "=", "True", ")", "\n", "print", "(", "'Final SVM AUC {:.3f}/{:.3f} TNR at 90 {:.3f}/{:.3f}'", ".", "format", "(", "final_raw_svm_auc", ",", "final_svm_auc", ",", "raw_svm_rate", ",", "svm_rate", ")", ")", "\n", "\n", "full_dnn", "=", "np", ".", "stack", "(", "full_dnn", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "ensamble_clean", "=", "[", "self", ".", "DNN_recorder", "[", "id", "]", "[", "'clean_pred'", "]", "for", "id", "in", "range", "(", "self", ".", "num_cnn_layers", ")", "]", "\n", "ensamble_clean", "=", "np", ".", "stack", "(", "ensamble_clean", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "ensamble_noise", "=", "[", "self", ".", "DNN_recorder", "[", "id", "]", "[", "'noise_pred'", "]", "for", "id", "in", "range", "(", "self", ".", "num_cnn_layers", ")", "]", "\n", "ensamble_noise", "=", "np", ".", "stack", "(", "ensamble_noise", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "ensamble_adv", "=", "[", "self", ".", "DNN_recorder", "[", "id", "]", "[", "'adv_pred'", "]", "for", "id", "in", "range", "(", "self", ".", "num_cnn_layers", ")", "]", "\n", "ensamble_adv", "=", "np", ".", "stack", "(", "ensamble_adv", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "final_dnn_auc", ",", "dnn_rate", "=", "get_pairs_auc", "(", "ensamble_clean", ",", "ensamble_noise", ",", "full_dnn", ",", "adv_test", "=", "True", ",", "negative", "=", "False", ",", "get_rate", "=", "True", ")", "\n", "final_raw_dnn_auc", ",", "raw_dnn_rate", "=", "get_pairs_auc", "(", "ensamble_clean", ",", "ensamble_noise", ",", "ensamble_adv", ",", "negative", "=", "False", ",", "get_rate", "=", "True", ")", "\n", "print", "(", "'Final DNN AUC {:.3f}/{:.3f} (After ensamlbe)  TNR at 90 {:.3f}/{:.3f}'", ".", "format", "(", "final_raw_dnn_auc", ",", "final_dnn_auc", ",", "raw_dnn_rate", ",", "dnn_rate", ")", ")", "\n", "\n", "# final_dknn_auc = get_pairs_auc(self.DkNN_recorder[key_clean]['score'],\\", "\n", "#     self.DkNN_recorder[key_noise]['score'], full_dknn, adv_test=True, negative=False)", "\n", "# print('Final DkNN AUC {:.3f}'.format(final_dknn_auc))", "\n", "\n", "full_bu", "=", "np", ".", "concatenate", "(", "full_bu", ")", "\n", "final_bu_auc", ",", "bu_rate", "=", "get_pairs_auc", "(", "self", ".", "BU_recorder", "[", "key_clean", "]", "[", "'scores'", "]", ",", "self", ".", "BU_recorder", "[", "key_noise", "]", "[", "'scores'", "]", ",", "full_bu", ",", "adv_test", "=", "True", ",", "get_rate", "=", "True", ")", "\n", "final_raw_bu_auc", ",", "raw_bu_rate", "=", "get_pairs_auc", "(", "self", ".", "BU_recorder", "[", "key_clean", "]", "[", "'scores'", "]", ",", "self", ".", "BU_recorder", "[", "key_noise", "]", "[", "'scores'", "]", ",", "self", ".", "BU_recorder", "[", "key_adv", "]", "[", "'scores'", "]", ",", "get_rate", "=", "True", ")", "\n", "print", "(", "'Final BU AUC {:.3f}/{:.3f} TNR at 90 {:.3f}/{:.3f}'", ".", "format", "(", "final_raw_bu_auc", ",", "final_bu_auc", ",", "raw_bu_rate", ",", "bu_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.extract_features.plot_fig": [[41, 47], ["matplotlib.scatter", "matplotlib.title", "matplotlib.savefig", "matplotlib.cla", "scipy.stats.pearsonr", "os.path.join"], "function", ["None"], ["def", "plot_fig", "(", "key", ",", "mse_raw", ",", "array", ",", "temp_dir", ")", ":", "\n", "    ", "pearsonr_value", "=", "pearsonr", "(", "mse_raw", ",", "array", ")", "[", "0", "]", "\n", "plt", ".", "scatter", "(", "mse_raw", ",", "array", ")", "\n", "plt", ".", "title", "(", "f'Correlation between {key} and mse_raw (of 7-th feature) : {pearsonr_value}'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "key", ")", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.extract_features.get_pearsonr_mse": [[48, 59], ["os.path.join", "extract_features.plot_fig", "extract_features.plot_fig", "extract_features.plot_fig", "extract_features.plot_fig", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "[].transpose", "[].transpose", "[].transpose"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.extract_features.plot_fig", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.extract_features.plot_fig", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.extract_features.plot_fig", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.extract_features.plot_fig"], ["", "def", "get_pearsonr_mse", "(", "kd", ",", "lid", ",", "maha", ",", "src_model", ",", "temp_dir", ")", ":", "\n", "    ", "key", "=", "'try_ex1_layer7_Linf_4'", "\n", "layer_index", "=", "7", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "key", ")", "\n", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "f'{key}.npy'", ")", ")", "[", ":", "700", "]", "\n", "mse", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "key", ",", "'mse.npy'", ")", ")", "[", ":", "700", "]", "\n", "mse_raw", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "key", ",", "'mse_raw.npy'", ")", ")", "[", ":", "700", "]", "\n", "plot_fig", "(", "'mse'", ",", "mse_raw", ",", "mse", ",", "save_dir", ")", "\n", "plot_fig", "(", "'KD'", ",", "mse_raw", ",", "kd", "[", "key", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "save_dir", ")", "\n", "plot_fig", "(", "'LID'", ",", "mse_raw", ",", "lid", "[", "key", "]", "[", "20", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "save_dir", ")", "\n", "plot_fig", "(", "'MAHA'", ",", "mse_raw", ",", "maha", "[", "key", "]", "[", "0.0005", "]", ".", "transpose", "(", ")", "[", "layer_index", "]", ",", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.extract_features.run": [[60, 422], ["print", "os.path.join", "print", "os.path.join", "saver.Saver", "logging.info", "datasets.get_dataloader", "saver.Saver.load_model", "network.infer_Cls_Net_resnet.eval", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "len", "numpy.empty", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.get_pairs_auc", "print", "print", "print", "range", "utils.logits_regression_auc", "print", "print", "print", "os.getcwd", "os.path.isdir", "os.mkdir", "network.infer_Cls_Net_vgg", "network.infer_Cls_Net_resnet.feature_list", "out.size", "str", "numpy.load", "utils.check_adv_samples", "os.path.isdir", "os.mkdir", "sample_estimator", "logging.info", "numpy.savez", "logging.info", "numpy.savez", "logging.info", "dict", "numpy.load", "get_LID", "pickle.load.items", "logging.info", "logging.info", "dict", "numpy.load", "get_svm_score", "print", "pickle.load.items", "logging.info", "logging.info", "dict", "numpy.load", "train_DNN_classifier", "logging.info", "logging.info", "open", "pickle.dump", "dict", "numpy.load", "get_Mahalanobis_score_adv", "pickle.load.items", "logging.info", "logging.info", "dict", "kd_estimator", "logging.info", "logging.info", "dict", "numpy.load", "get_kd_score", "pickle.load.items", "logging.info", "logging.info", "dict", "numpy.load", "get_bu_scores", "pickle.load.items", "logging.info", "logging.info", "open", "pickle.dump", "utils.get_pairs_auc", "print", "print", "range", "utils.logits_regression_auc", "print", "os.path.join", "print", "range", "utils.logits_regression_auc", "print", "os.path.join", "network.infer_Cls_Net_resnet", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "list", "numpy.load", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.join", "dict", "numpy.load", "open", "pickle.dump", "open", "pickle.load", "os.path.isfile", "os.path.join", "dict", "numpy.load", "open", "pickle.dump", "open", "pickle.load", "os.path.isfile", "os.path.join", "dict", "numpy.load", "open", "pickle.dump", "open", "pickle.load", "[].infer_array", "os.path.isfile", "os.path.join", "dict", "numpy.load", "open", "pickle.dump", "open", "pickle.load", "os.path.isfile", "dict", "open", "pickle.dump", "open", "pickle.load", "os.path.isfile", "os.path.join", "dict", "list", "numpy.load", "open", "pickle.dump", "open", "pickle.load", "os.path.isfile", "os.path.join", "dict", "numpy.load", "open", "pickle.dump", "open", "pickle.load", "utils.get_pairs_auc", "print", "open", "pickle.dump", "utils.get_pairs_auc", "print", "open", "pickle.dump", "range", "os.path.join", "numpy.load().items", "numpy.load().items", "os.path.join", "os.path.join", "os.path.join", "DNN_recorder[].keys", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "os.path.join", "os.path.join", "os.path.join", "[].transpose", "[].transpose", "[].transpose", "str", "str", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "[].transpose", "enumerate", "enumerate", "numpy.load", "numpy.load", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.load_model", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.check_adv_samples", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.sample_estimator", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_LID", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_svm_score", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.train_DNN_classifier", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_Mahalanobis_score_adv", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.kd_estimator", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_kd_score", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_bu_scores", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_array", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc"], ["", "def", "run", "(", "args", ",", "default_victims", ")", ":", "\n", "\n", "    ", "key_clean", "=", "'clean'", "\n", "key_attack", "=", "args", ".", "attack", "\n", "# key_attack = 'try_ex3_layer7_Linf_4'", "\n", "# key_attack = 'try_ex1_layer7_Linf_4'", "\n", "# key_attack = 'try_ex1_layer14_Linf_4'", "\n", "# key_attack = 'try_ex1_layer2_Linf_4'", "\n", "key_noise", "=", "args", ".", "noise", "\n", "attack_methods", "=", "[", "key_clean", ",", "key_attack", ",", "key_noise", "]", "\n", "print", "(", "f\"Extract features for attack: {key_attack}\"", ")", "\n", "\n", "rewrite_all", "=", "False", "\n", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f'runs_{args.dataset}'", ",", "args", ".", "arch", ")", "\n", "print", "(", "f'temp dir {temp_dir}'", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "key_attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "saver", "=", "Saver", "(", "args", ".", "arch", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "logging", ".", "info", "(", "f'Attacking {default_victims} by {args.arch}'", ")", "\n", "\n", "train_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "mode", "=", "'train'", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "num_fold", "=", "args", ".", "num_fold", ",", "targeted", "=", "False", ")", "\n", "num_classes", "=", "train_loader", ".", "dataset", ".", "num_classes", "\n", "num_classes_selected", "=", "train_loader", ".", "dataset", ".", "num_classes_selected", "\n", "\n", "# Load models", "\n", "if", "'vgg16'", "in", "args", ".", "arch", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_vgg", "(", "num_classes", ")", "\n", "", "elif", "'resnet50'", "in", "args", ".", "arch", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_resnet", "(", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "src_model", "=", "saver", ".", "load_model", "(", "src_model", ",", "args", ".", "arch", ")", "\n", "src_model", ".", "eval", "(", ")", "\n", "\n", "# Feature num", "\n", "temp_tensor", "=", "torch", ".", "rand", "(", "2", ",", "3", ",", "299", ",", "299", ")", ".", "cuda", "(", ")", "\n", "temp_list", "=", "src_model", ".", "feature_list", "(", "temp_tensor", ")", "[", "1", "]", "\n", "num_features", "=", "len", "(", "temp_list", ")", "\n", "num_cnn_layer", "=", "src_model", ".", "num_cnn", "\n", "\n", "feature_list", "=", "np", ".", "empty", "(", "num_features", ")", "\n", "count", "=", "0", "\n", "for", "out", "in", "temp_list", ":", "\n", "        ", "feature_list", "[", "count", "]", "=", "out", ".", "size", "(", "1", ")", "\n", "count", "+=", "1", "\n", "", "str_index_layers", "=", "[", "str", "(", "i", ")", "for", "i", "in", "list", "(", "range", "(", "num_features", ")", ")", "]", "\n", "\n", "# Check data", "\n", "check_data", "=", "True", "\n", "if", "check_data", ":", "\n", "        ", "data_dict", "=", "{", "key", ":", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "key", "+", "'.npy'", ")", ")", "for", "key", "in", "attack_methods", "}", "\n", "gt_label", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'gt'", "+", "'.npy'", ")", ")", "\n", "check_adv_samples", "(", "data_dict", ",", "src_model", ",", "gt_label", ")", "\n", "\n", "# record estimator for MAHA", "\n", "", "from", "adv_detectors", "import", "sample_estimator", "\n", "rewrite_maha_estimator", "=", "False", "or", "rewrite_all", "\n", "save_estimator_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'estimator'", ")", "\n", "precision_pth", "=", "os", ".", "path", ".", "join", "(", "save_estimator_pth", ",", "'precision.npz'", ")", "\n", "mean_pth", "=", "os", ".", "path", ".", "join", "(", "save_estimator_pth", ",", "'mean.npz'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_estimator_pth", ")", ":", "os", ".", "mkdir", "(", "save_estimator_pth", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "precision_pth", ")", "or", "rewrite_maha_estimator", ":", "\n", "        ", "mean", ",", "precision", "=", "sample_estimator", "(", "src_model", ",", "num_classes_selected", ",", "feature_list", ",", "train_loader", ")", "\n", "logging", ".", "info", "(", "f\"Save mean of estimator to {mean_pth}\"", ")", "\n", "np", ".", "savez", "(", "mean_pth", ",", "**", "{", "str", "(", "i", ")", ":", "array", "for", "i", ",", "array", "in", "enumerate", "(", "mean", ")", "}", ")", "\n", "logging", ".", "info", "(", "f\"Save precision of estimator to {precision_pth}\"", ")", "\n", "np", ".", "savez", "(", "precision_pth", ",", "**", "{", "str", "(", "i", ")", ":", "array", "for", "i", ",", "array", "in", "enumerate", "(", "precision", ")", "}", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load mean and precision from {save_estimator_pth}\"", ")", "\n", "mean", "=", "[", "array", "for", "key", ",", "array", "in", "np", ".", "load", "(", "mean_pth", ")", ".", "items", "(", ")", "]", "\n", "precision", "=", "[", "array", "for", "key", ",", "array", "in", "np", ".", "load", "(", "precision_pth", ")", ".", "items", "(", ")", "]", "\n", "\n", "# Record LID", "\n", "", "save_lid_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'lid.pkl'", ")", "\n", "rewrite_lid", "=", "False", "or", "rewrite_all", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_lid_pth", ")", "or", "rewrite_lid", ":", "\n", "        ", "LID_recorder", "=", "dict", "(", ")", "\n", "label", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'gt'", "+", "'.npy'", ")", ")", "\n", "for", "attack_name", "in", "attack_methods", ":", "\n", "            ", "LID_recorder", "[", "attack_name", "]", "=", "dict", "(", ")", "\n", "LID_recorder", "[", "attack_name", "]", "[", "'data'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "attack_name", "+", "'.npy'", ")", ")", "\n", "", "from", "adv_detectors", "import", "get_LID", "\n", "get_LID", "(", "src_model", ",", "LID_recorder", ",", "label", ",", "num_features", ")", "\n", "for", "key", ",", "value", "in", "LID_recorder", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "!=", "'clean'", ":", "\n", "                ", "del", "value", "[", "'features'", "]", "\n", "", "del", "value", "[", "'data'", "]", "\n", "", "logging", ".", "info", "(", "f\"Save LID scores to {save_lid_pth}\"", ")", "\n", "with", "open", "(", "save_lid_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "LID_recorder", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load LID scores from {save_lid_pth}\"", ")", "\n", "with", "open", "(", "save_lid_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "LID_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Record SVM", "\n", "", "", "save_svm_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'svm.pkl'", ")", "\n", "rewrite_svm", "=", "False", "or", "rewrite_all", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_svm_pth", ")", "or", "rewrite_svm", ":", "\n", "        ", "SVM_recorder", "=", "dict", "(", ")", "\n", "label", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'gt'", "+", "'.npy'", ")", ")", "\n", "for", "attack_name", "in", "attack_methods", ":", "\n", "            ", "SVM_recorder", "[", "attack_name", "]", "=", "dict", "(", ")", "\n", "SVM_recorder", "[", "attack_name", "]", "[", "'data'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "attack_name", "+", "'.npy'", ")", ")", "\n", "", "from", "adv_detectors", "import", "get_svm_score", "\n", "svm_auc", "=", "get_svm_score", "(", "src_model", ",", "SVM_recorder", ")", "\n", "print", "(", "f'SVM score: {svm_auc}'", ")", "\n", "for", "key", ",", "value", "in", "SVM_recorder", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "!=", "'model'", ":", "\n", "                ", "del", "value", "[", "'feature'", "]", "\n", "del", "value", "[", "'data'", "]", "\n", "", "", "logging", ".", "info", "(", "f\"Save SVM scores to {save_svm_pth}\"", ")", "\n", "with", "open", "(", "save_svm_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "SVM_recorder", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load SVM scores from {save_svm_pth}\"", ")", "\n", "with", "open", "(", "save_svm_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "SVM_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Record DNN", "\n", "", "", "save_dnn_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'dnn.pkl'", ")", "\n", "rewrite_dnn", "=", "False", "or", "rewrite_all", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_dnn_pth", ")", "or", "rewrite_dnn", ":", "\n", "        ", "DNN_recorder", "=", "dict", "(", ")", "\n", "label", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'gt'", "+", "'.npy'", ")", ")", "\n", "for", "attack_name", "in", "attack_methods", ":", "\n", "            ", "DNN_recorder", "[", "attack_name", "]", "=", "dict", "(", ")", "\n", "DNN_recorder", "[", "attack_name", "]", "[", "'data'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "attack_name", "+", "'.npy'", ")", ")", "\n", "", "from", "adv_detectors", "import", "train_DNN_classifier", "\n", "train_DNN_classifier", "(", "src_model", ",", "DNN_recorder", ",", "num_cnn_layer", "=", "num_cnn_layer", ")", "\n", "logging", ".", "info", "(", "f\"Save DNN scores to {save_dnn_pth}\"", ")", "\n", "with", "open", "(", "save_dnn_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "DNN_recorder", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load DNN scores from {save_dnn_pth}\"", ")", "\n", "with", "open", "(", "save_dnn_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "DNN_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "for", "i", "in", "range", "(", "num_cnn_layer", ")", ":", "\n", "        ", "if", "not", "'adv_pred'", "in", "DNN_recorder", "[", "i", "]", ".", "keys", "(", ")", ":", "\n", "            ", "DNN_recorder", "[", "i", "]", "[", "'adv_pred'", "]", "=", "DNN_recorder", "[", "i", "]", "[", "'model'", "]", ".", "infer_array", "(", "torch", ".", "from_numpy", "(", "DNN_recorder", "[", "key_attack", "]", "[", "'data'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "src_model", ")", "\n", "", "", "with", "open", "(", "save_dnn_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "DNN_recorder", ",", "f", ")", "\n", "\n", "# # Record GMM", "\n", "# save_gmm_pth = os.path.join(save_dir, 'gmm.pkl')", "\n", "# rewrite_gmm = False or rewrite_all", "\n", "# if not os.path.isfile(save_gmm_pth) or rewrite_gmm:", "\n", "#     GMM_recorder = dict()", "\n", "#     label = np.load(os.path.join(temp_dir, 'gt' + '.npy'))", "\n", "#     for attack_name in attack_methods:", "\n", "#         GMM_recorder[attack_name] = dict()", "\n", "#         GMM_recorder[attack_name]['data'] = \\", "\n", "#             np.load(os.path.join(temp_dir, attack_name + '.npy'))", "\n", "#     from adv_detectors import get_GMM_scores", "\n", "#     get_GMM_scores(src_model, GMM_recorder, temp_dir, num_features, num_classes_selected)", "\n", "#     logging.info(f\"Save GMM scores to {save_gmm_pth}\")", "\n", "#     with open(save_gmm_pth, 'wb') as f:", "\n", "#         pickle.dump(GMM_recorder, f)", "\n", "# else:", "\n", "#     logging.info(f\"Load GMM scores from {save_gmm_pth}\")", "\n", "#     with open(save_gmm_pth, 'rb') as f:", "\n", "#         GMM_recorder = pickle.load(f)", "\n", "# print('\\n Layer ID: {} '.format('\\t'.join(str_index_layers)), end='')", "\n", "# print(f'\\n GMM score :')", "\n", "# for index_layer in range(num_features):", "\n", "#     temp_aucroc = get_pairs_auc(GMM_recorder[index_layer][key_clean],", "\n", "#                     GMM_recorder[index_layer][key_noise],", "\n", "#                     GMM_recorder[index_layer][key_attack], negative=False)", "\n", "#     print('{:.3f}'.format(temp_aucroc), end='\\t')", "\n", "# print('\\n')", "\n", "\n", "# # Record DkNN", "\n", "# save_dknn_pth = os.path.join(save_dir, 'dknn.pkl')", "\n", "# rewrite_dknn = False or rewrite_all", "\n", "# if not os.path.isfile(save_dknn_pth) or rewrite_dknn:", "\n", "#     DkNN_recorder = dict()", "\n", "#     label = np.load(os.path.join(temp_dir, 'gt' + '.npy'))", "\n", "#     for attack_name in attack_methods:", "\n", "#         DkNN_recorder[attack_name] = dict()", "\n", "#         DkNN_recorder[attack_name]['data'] = \\", "\n", "#             np.load(os.path.join(temp_dir, attack_name + '.npy'))", "\n", "#     from adv_detectors import build_dknn", "\n", "#     build_dknn(src_model, DkNN_recorder, train_loader, label, num_features=num_features)", "\n", "#     logging.info(f\"Save DkNN scores to {save_dknn_pth}\")", "\n", "#     with open(save_dknn_pth, 'wb') as f:", "\n", "#         pickle.dump(DkNN_recorder, f)", "\n", "# else:", "\n", "#     logging.info(f\"Load DkNN scores from {save_dknn_pth}\")", "\n", "#     with open(save_dknn_pth, 'rb') as f:", "\n", "#         DkNN_recorder = pickle.load(f) ", "\n", "# print('\\n Layer ID: {} Logits_Regression'.format('\\t'.join(str_index_layers)), end='')", "\n", "# print(f'DkNN score :\\n ')", "\n", "# for index_layer in range(num_features):", "\n", "#     temp_aucroc = get_pairs_auc(DkNN_recorder[index_layer][key_clean],", "\n", "#                     DkNN_recorder[index_layer][key_noise],", "\n", "#                     DkNN_recorder[index_layer][key_attack], negative=False)", "\n", "#     print('{:.3f}'.format(temp_aucroc), end='\\t')", "\n", "# final_aucroc = get_pairs_auc(DkNN_recorder[key_clean]['score'],", "\n", "#                 DkNN_recorder[key_noise]['score'],", "\n", "#                 DkNN_recorder[key_attack]['score'], negative=False)", "\n", "# print(f'DkNN score: {final_aucroc}')", "\n", "\n", "# Record MAHA", "\n", "", "save_maha_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'maha.pkl'", ")", "\n", "rewrite_maha", "=", "False", "or", "rewrite_all", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_maha_pth", ")", "or", "rewrite_maha", ":", "\n", "        ", "maha_recorder", "=", "dict", "(", ")", "\n", "label", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'gt'", "+", "'.npy'", ")", ")", "\n", "for", "attack_name", "in", "attack_methods", ":", "\n", "            ", "maha_recorder", "[", "attack_name", "]", "=", "dict", "(", ")", "\n", "maha_recorder", "[", "attack_name", "]", "[", "'data'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "attack_name", "+", "'.npy'", ")", ")", "\n", "", "from", "adv_detectors", "import", "get_Mahalanobis_score_adv", "\n", "get_Mahalanobis_score_adv", "(", "src_model", ",", "maha_recorder", ",", "label", ",", "num_features", ",", "mean", ",", "precision", ")", "\n", "for", "key", ",", "value", "in", "maha_recorder", ".", "items", "(", ")", ":", "\n", "            ", "del", "value", "[", "'data'", "]", "\n", "", "logging", ".", "info", "(", "f\"Save MAHA scores to {save_maha_pth}\"", ")", "\n", "with", "open", "(", "save_maha_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "maha_recorder", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load MAHA scores from {save_maha_pth}\"", ")", "\n", "with", "open", "(", "save_maha_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "maha_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Recored KD estimator", "\n", "", "", "save_kd_estimator_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'kd_estimator.pkl'", ")", "\n", "rewrite_kd_estimator", "=", "False", "or", "rewrite_all", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_kd_estimator_pth", ")", "or", "rewrite_kd_estimator", ":", "\n", "        ", "kd_estimator_record", "=", "dict", "(", ")", "\n", "for", "attack_name", "in", "attack_methods", ":", "\n", "            ", "kd_estimator_record", "[", "attack_name", "]", "=", "dict", "(", ")", "\n", "", "from", "adv_detectors", "import", "kd_estimator", "\n", "kd_estimator", "(", "src_model", ",", "kd_estimator_record", ",", "train_loader", ",", "num_classes_selected", ",", "num_features", ")", "\n", "logging", ".", "info", "(", "f\"Save KD estimator to {save_kd_estimator_pth}\"", ")", "\n", "with", "open", "(", "save_kd_estimator_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "kd_estimator_record", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load KD estimator from {save_kd_estimator_pth}\"", ")", "\n", "with", "open", "(", "save_kd_estimator_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "kd_estimator_record", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Record KD score", "\n", "", "", "save_kd_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'kd.pkl'", ")", "\n", "rewrite_kd", "=", "False", "or", "rewrite_all", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_kd_pth", ")", "or", "rewrite_kd", ":", "\n", "        ", "kd_recorder", "=", "dict", "(", ")", "\n", "label", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'gt'", "+", "'.npy'", ")", ")", "\n", "for", "attack_name", "in", "attack_methods", ":", "\n", "            ", "kd_recorder", "[", "attack_name", "]", "=", "dict", "(", ")", "\n", "kd_recorder", "[", "attack_name", "]", "[", "'kd_score'", "]", "=", "list", "(", ")", "\n", "kd_recorder", "[", "attack_name", "]", "[", "'data'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "attack_name", "+", "'.npy'", ")", ")", "\n", "", "from", "adv_detectors", "import", "get_kd_score", "\n", "get_kd_score", "(", "src_model", ",", "kd_recorder", ",", "label", ",", "num_classes_selected", ",", "kd_estimator_record", ",", "num_features", ")", "\n", "for", "key", ",", "value", "in", "kd_recorder", ".", "items", "(", ")", ":", "\n", "            ", "del", "value", "[", "'data'", "]", "\n", "", "logging", ".", "info", "(", "f\"Save KD scores to {save_kd_pth}\"", ")", "\n", "with", "open", "(", "save_kd_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "kd_recorder", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load KD scores from {save_kd_pth}\"", ")", "\n", "with", "open", "(", "save_kd_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "kd_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Record BU score", "\n", "", "", "save_bu_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'bu.pkl'", ")", "\n", "rewrite_bu", "=", "True", "or", "rewrite_all", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_bu_pth", ")", "or", "rewrite_bu", ":", "\n", "        ", "bu_recorder", "=", "dict", "(", ")", "\n", "label", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'gt'", "+", "'.npy'", ")", ")", "\n", "for", "attack_name", "in", "attack_methods", ":", "\n", "            ", "bu_recorder", "[", "attack_name", "]", "=", "dict", "(", ")", "\n", "bu_recorder", "[", "attack_name", "]", "[", "'data'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "attack_name", "+", "'.npy'", ")", ")", "\n", "", "from", "adv_detectors", "import", "get_bu_scores", "\n", "get_bu_scores", "(", "src_model", ",", "bu_recorder", ")", "\n", "for", "key", ",", "value", "in", "bu_recorder", ".", "items", "(", ")", ":", "\n", "            ", "del", "value", "[", "'data'", "]", "\n", "", "logging", ".", "info", "(", "f\"Save bu scores to {save_bu_pth}\"", ")", "\n", "with", "open", "(", "save_bu_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "bu_recorder", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Load bu scores from {save_bu_pth}\"", ")", "\n", "with", "open", "(", "save_bu_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bu_recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "final_aucroc", "=", "get_pairs_auc", "(", "bu_recorder", "[", "key_clean", "]", "[", "'scores'", "]", ",", "\n", "bu_recorder", "[", "key_noise", "]", "[", "'scores'", "]", ",", "\n", "bu_recorder", "[", "key_attack", "]", "[", "'scores'", "]", ",", "negative", "=", "True", ")", "\n", "print", "(", "f'BU score: {final_aucroc}'", ")", "\n", "# clean_score = np.stack((bu_recorder[key_clean]['scores'], kd_recorder[key_clean]['kd_score'].transpose()[num_features-1]), axis=-1)", "\n", "# noise_score = np.stack((bu_recorder[key_noise]['scores'], kd_recorder[key_noise]['kd_score'].transpose()[num_features-1]), axis=-1)", "\n", "# attack_score = np.stack((bu_recorder[key_attack]['scores'], kd_recorder[key_attack]['kd_score'].transpose()[num_features-1]), axis=-1)", "\n", "# logits_aucroc, model_lr = logits_regression_auc(clean_score, noise_score, attack_score)", "\n", "# print(f'KD_BU score: {logits_aucroc}')", "\n", "# bu_recorder['kd_bu_lr'] = model_lr", "\n", "# bu_recorder['kd_bu_clean'] = clean_score", "\n", "# bu_recorder['kd_bu_noise'] = noise_score", "\n", "# bu_recorder['kd_bu_attack'] = attack_score", "\n", "with", "open", "(", "save_bu_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "bu_recorder", ",", "f", ")", "\n", "\n", "# Compute ROC amd LogitsRegression", "\n", "# KD AUCROC", "\n", "", "print", "(", "'\\n Layer ID: {} Logits_Regression'", ".", "format", "(", "'\\t'", ".", "join", "(", "str_index_layers", ")", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "f'\\n KD score:'", ")", "\n", "for", "index_layer", "in", "range", "(", "num_features", ")", ":", "\n", "        ", "temp_aucroc", "=", "get_pairs_auc", "(", "kd_recorder", "[", "key_clean", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ",", "\n", "kd_recorder", "[", "key_noise", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ",", "\n", "kd_recorder", "[", "key_attack", "]", "[", "'kd_score'", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ")", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "temp_aucroc", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "logits_aucroc", ",", "model_lr", "=", "logits_regression_auc", "(", "kd_recorder", "[", "key_clean", "]", "[", "'kd_score'", "]", ",", "\n", "kd_recorder", "[", "key_noise", "]", "[", "'kd_score'", "]", ",", "\n", "kd_recorder", "[", "key_attack", "]", "[", "'kd_score'", "]", ")", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "logits_aucroc", ")", ",", "end", "=", "'\\t'", ")", "\n", "\n", "# kd_aucroc = get_pairs_auc(kd_recorder[key_clean]['kd_score'],", "\n", "#                        kd_recorder[key_noise]['kd_score'],", "\n", "#                        kd_recorder[key_attack]['kd_score'])", "\n", "# print(\"KD AUC Score {}\".format(kd_aucroc))", "\n", "\n", "# LID AUCROC", "\n", "overlap_list", "=", "LID_recorder", "[", "'clean'", "]", "[", "'overlaps'", "]", "\n", "print", "(", "'\\n Layer ID: {} Logits_Regression'", ".", "format", "(", "'\\t'", ".", "join", "(", "str_index_layers", ")", ")", ",", "end", "=", "''", ")", "\n", "for", "overlap", "in", "overlap_list", ":", "\n", "        ", "print", "(", "f'\\n LID score Overlap: {overlap}'", ")", "\n", "for", "index_layer", "in", "range", "(", "num_features", ")", ":", "\n", "            ", "temp_aucroc", "=", "get_pairs_auc", "(", "LID_recorder", "[", "key_clean", "]", "[", "overlap", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ",", "\n", "LID_recorder", "[", "key_noise", "]", "[", "overlap", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ",", "\n", "LID_recorder", "[", "key_attack", "]", "[", "overlap", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ")", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "temp_aucroc", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "logits_aucroc", ",", "lid_model_lr", "=", "logits_regression_auc", "(", "LID_recorder", "[", "key_clean", "]", "[", "overlap", "]", ",", "\n", "LID_recorder", "[", "key_noise", "]", "[", "overlap", "]", ",", "\n", "LID_recorder", "[", "key_attack", "]", "[", "overlap", "]", ")", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "logits_aucroc", ")", ",", "end", "=", "'\\t'", ")", "\n", "save_lid_lr_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'lid_lr.pkl'", ")", "\n", "with", "open", "(", "save_lid_lr_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "lid_model_lr", ",", "f", ")", "\n", "\n", "# MAHA AUCROC", "\n", "", "", "m_list", "=", "maha_recorder", "[", "'clean'", "]", "[", "'magnitude'", "]", "\n", "print", "(", "'\\n Layer ID: {} Logits_Regression'", ".", "format", "(", "'\\t'", ".", "join", "(", "str_index_layers", ")", ")", ",", "end", "=", "''", ")", "\n", "for", "magnitude", "in", "m_list", ":", "\n", "        ", "print", "(", "f'\\n MAHA score magnitude: {magnitude}'", ")", "\n", "for", "index_layer", "in", "range", "(", "num_features", ")", ":", "\n", "            ", "temp_aucroc", "=", "get_pairs_auc", "(", "maha_recorder", "[", "key_clean", "]", "[", "magnitude", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ",", "\n", "maha_recorder", "[", "key_noise", "]", "[", "magnitude", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ",", "\n", "maha_recorder", "[", "key_attack", "]", "[", "magnitude", "]", ".", "transpose", "(", ")", "[", "index_layer", "]", ")", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "temp_aucroc", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "logits_aucroc", ",", "maha_model_lr", "=", "logits_regression_auc", "(", "maha_recorder", "[", "key_clean", "]", "[", "magnitude", "]", ",", "\n", "maha_recorder", "[", "key_noise", "]", "[", "magnitude", "]", ",", "\n", "maha_recorder", "[", "key_attack", "]", "[", "magnitude", "]", ")", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "logits_aucroc", ")", ",", "end", "=", "'\\t'", ")", "\n", "save_maha_lr_pth", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'maha_lr.pkl'", ")", "\n", "with", "open", "(", "save_maha_lr_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "maha_model_lr", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.base_adv_attack.defend_reduce": [[32, 39], ["arr.cpu().detach().numpy.cpu().detach().numpy", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "arr.cpu().detach().numpy.astype", "arr.cpu().detach().numpy.cpu().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "arr.cpu().detach().numpy.cpu"], "function", ["None"], ["def", "defend_reduce", "(", "arr", ",", "depth", "=", "1", ")", ":", "\n", "    ", "arr", "=", "arr", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "arr", "=", "(", "arr", "*", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "shift", "=", "8", "-", "depth", "\n", "arr", "=", "(", "arr", ">>", "shift", ")", "<<", "shift", "\n", "arr", "=", "arr", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "return", "torch", ".", "from_numpy", "(", "arr", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.base_adv_attack.defend_jpeg": [[40, 47], ["input_array.cpu().detach().numpy.cpu().detach().numpy", "PIL.Image.fromarray", "io.BytesIO", "PIL.Image.fromarray.save", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.asarray().astype", "input_array.cpu().detach().numpy.cpu().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "input_array.cpu().detach().numpy.cpu", "PIL.Image.open"], "function", ["None"], ["", "def", "defend_jpeg", "(", "input_array", ")", ":", "\n", "    ", "input_array", "=", "input_array", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pil_image", "=", "PIL", ".", "Image", ".", "fromarray", "(", "(", "input_array", "*", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "f", "=", "BytesIO", "(", ")", "\n", "pil_image", ".", "save", "(", "f", ",", "format", "=", "'jpeg'", ",", "quality", "=", "50", ")", "# quality level specified in paper", "\n", "jpeg_image", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "f", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "return", "torch", ".", "from_numpy", "(", "jpeg_image", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.base_adv_attack.normalize": [[49, 53], ["tensor.mul().add.mul().add", "tensor.mul().add.mul"], "function", ["None"], ["", "def", "normalize", "(", "tensor", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "mul", "(", "attackers", ".", "torch_std_cuda", ")", ".", "add", "(", "attackers", ".", "torch_mean_cuda", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.base_adv_attack.new_model": [[54, 59], ["model"], "function", ["None"], ["", "def", "new_model", "(", "model", ")", ":", "\n", "    ", "def", "func", "(", "input", ")", ":", "\n", "        ", "return", "model", "(", "input", ")", "\n", "# return model.get_feature_attack", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.base_adv_attack.adv_attack_run": [[60, 159], ["dict", "dict", "list", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "list", "enumerate", "dict.items", "dict", "numpy.array", "numpy.array", "dict", "list", "name.split", "list.append", "dict.items", "sklearn.metrics.accuracy_score", "print", "float", "images.cuda.cpu().numpy", "images.cuda.cuda", "target.cuda.cuda", "attacker.perturb", "model().argmax().detach().cpu().numpy", "[].append", "target.cuda.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "list.append", "numpy.sqrt", "math.ceil", "attacker.perturb.cpu().numpy", "name.split", "math.ceil", "images.cuda.cpu", "model().argmax().detach().cpu", "target.cuda.detach().cpu", "attacker.perturb.cpu", "[].view", "[].view", "model().argmax().detach", "target.cuda.detach", "math.ceil", "model().argmax", "dataloader.dataset.__getitem__", "dataloader.dataset.__getitem__", "model"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__getitem__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__getitem__"], ["", "def", "adv_attack_run", "(", "loss_fn", ",", "model", ",", "dataloader", ",", "attack_methods", ")", ":", "\n", "\n", "# Great Metric Savers", "\n", "    ", "metric_counter", "=", "dict", "(", ")", "\n", "for", "attacker_name", "in", "attack_methods", ":", "\n", "        ", "metric_counter", "[", "attacker_name", "]", "=", "dict", "(", ")", "\n", "gt", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "metric_counter", "[", "attacker_name", "]", "=", "dict", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "=", "gt", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", "=", "pred", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", "=", "list", "(", ")", "\n", "\n", "\n", "# Gen pertubations via attack methods", "\n", "", "attacker_dict", "=", "dict", "(", ")", "\n", "for", "name", "in", "attack_methods", ":", "\n", "        ", "splits", "=", "name", ".", "split", "(", "'_'", ")", "\n", "attacker_name", "=", "(", "'_'", ")", ".", "join", "(", "splits", "[", ":", "-", "1", "]", ")", "\n", "epsilon", "=", "float", "(", "name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "/", "255", "\n", "# L2 constrain epsilon * sqrt(c * w * h)", "\n", "# print(f'Attack by Constrain: {255 * epsilon}')", "\n", "if", "'L2'", "in", "name", ":", "\n", "            ", "epsilon", "=", "epsilon", "*", "np", ".", "sqrt", "(", "dataloader", ".", "dataset", ".", "__getitem__", "(", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "'L1'", "in", "name", ":", "\n", "            ", "epsilon", "=", "epsilon", "*", "dataloader", ".", "dataset", ".", "__getitem__", "(", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "# 'Linf'", "\n", "            ", "pass", "\n", "\n", "", "kwargs", "=", "{", "\n", "'predict'", ":", "model", ",", "\n", "'loss_fn'", ":", "loss_fn", ",", "\n", "'eps'", ":", "epsilon", ",", "\n", "'clip_min'", ":", "0", ",", "\n", "'clip_max'", ":", "1", ",", "\n", "'targeted'", ":", "False", ",", "}", "\n", "\n", "kwargs", "[", "'eps_iter'", "]", "=", "2", "/", "5", "/", "255", "\n", "if", "attacker_name", "==", "'FGSM_Linf'", "or", "attacker_name", "==", "'FGSM_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "1", "\n", "", "elif", "attacker_name", "==", "'M_FGSM_L2'", "or", "attacker_name", "==", "'MI_FGSM_Linf'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "math", ".", "ceil", "(", "2", "*", "epsilon", "/", "kwargs", "[", "'eps_iter'", "]", ")", "\n", "# elif attacker_name == 'D_M_FGSM_L2' or attacker_name == 'DI_MI_FGSM_Linf':", "\n", "#     kwargs['momentum'] = 1", "\n", "#     kwargs['diversity_prob'] = 0.5", "\n", "", "elif", "attacker_name", "==", "'PGD_Linf'", "or", "attacker_name", "==", "'PGD_L2'", ":", "\n", "            ", "kwargs", "[", "'rand_init'", "]", "=", "True", "\n", "kwargs", "[", "'nb_iter'", "]", "=", "math", ".", "ceil", "(", "2", "*", "epsilon", "/", "kwargs", "[", "'eps_iter'", "]", ")", "\n", "", "elif", "attacker_name", "==", "'Noise_Linf'", "or", "attacker_name", "==", "'Noise_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "0", "\n", "kwargs", "[", "'rand_init'", "]", "=", "True", "\n", "", "elif", "attacker_name", "==", "'CW_L2'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "100", "\n", "", "elif", "attacker_name", "==", "'EAD_L1'", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "30", "\n", "kwargs", "[", "'const_L1'", "]", "=", "0.01", "\n", "", "else", ":", "\n", "            ", "kwargs", "[", "'nb_iter'", "]", "=", "math", ".", "ceil", "(", "2", "*", "epsilon", "/", "kwargs", "[", "'eps_iter'", "]", ")", "\n", "# BIM Default kwargs", "\n", "pass", "\n", "", "attacker", "=", "attackers", ".", "__dict__", "[", "attacker_name", "]", "(", "**", "kwargs", ")", "\n", "attacker_dict", "[", "name", "]", "=", "attacker", "\n", "\n", "", "total_labels_list", "=", "list", "(", ")", "\n", "loss_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "# Start to attack", "\n", "\n", "clean_images", "=", "list", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "# if i > 2: break", "\n", "        ", "clean_images", ".", "append", "(", "images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "True", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "# false_images = false_images.cuda()", "\n", "\n", "", "for", "attacker_name", ",", "attacker", "in", "attacker_dict", ".", "items", "(", ")", ":", "\n", "            ", "adv_images", "=", "attacker", ".", "perturb", "(", "images", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# pertubation = (normalize(adv_images) - normalize(images))", "\n", "\n", "output", "=", "model", "(", "adv_images", ")", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'data'", "]", ".", "append", "(", "adv_images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gt_concatnate", "=", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", "=", "np", ".", "concatenate", "(", "[", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", ",", "gt_concatnate", "]", ",", "axis", "=", "0", ")", "\n", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", "=", "np", ".", "concatenate", "(", "[", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", ",", "output", "]", ",", "axis", "=", "0", ")", "\n", "total_labels_list", ".", "append", "(", "gt_concatnate", ")", "\n", "\n", "# call metrics", "\n", "", "", "for", "attacker_name", ",", "attacker", "in", "attacker_dict", ".", "items", "(", ")", ":", "\n", "        ", "metric_counter", "[", "attacker_name", "]", "[", "'acc'", "]", "=", "accuracy_score", "(", "metric_counter", "[", "attacker_name", "]", "[", "'gt'", "]", ",", "metric_counter", "[", "attacker_name", "]", "[", "'pred'", "]", ",", "normalize", "=", "True", ")", "\n", "print", "(", "\"Adv Acc {:.3f} Using {}\"", ".", "format", "(", "metric_counter", "[", "attacker_name", "]", "[", "'acc'", "]", ",", "attacker_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.Cls_Net.__init__": [[27, 40], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "arch", ",", "load_pretrain", "=", "True", ",", "keep_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Cls_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "arch", "]", "(", "pretrained", "=", "load_pretrain", ")", "\n", "\n", "if", "not", "keep_last", ":", "\n", "# Linear layer", "\n", "            ", "if", "'resnet'", "in", "arch", "or", "'inception'", "in", "arch", "or", "'googlenet'", "in", "arch", ":", "\n", "                ", "num_feature", "=", "model", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_feature", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "num_feature", "=", "model", ".", "classifier", "[", "-", "1", "]", ".", "weight", ".", "shape", "[", "1", "]", "\n", "model", ".", "classifier", "[", "-", "1", "]", "=", "nn", ".", "Linear", "(", "num_feature", ",", "num_classes", ")", "\n", "", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.Cls_Net.forward": [[41, 46], ["network.Cls_Net.model", "network.Cls_Net.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ")", ":", "\n", "        ", "if", "get_features", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_resnet.__init__": [[48, 55], ["super().__init__", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "infer_Cls_Net_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "resnet50", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "num_feature", "=", "18", "\n", "self", ".", "num_cnn", "=", "17", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_resnet.forward": [[56, 61], ["network.infer_Cls_Net_resnet.model", "network.infer_Cls_Net_resnet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ")", ":", "\n", "        ", "if", "get_features", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_resnet.feature_list": [[62, 64], ["network.infer_Cls_Net_resnet.model.feature_forward"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet.feature_forward"], ["", "", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "feature_forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_resnet.get_feature": [[65, 67], ["network.infer_Cls_Net_resnet.model.feature_forward"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet.feature_forward"], ["", "def", "get_feature", "(", "self", ",", "x", ",", "feature_index", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "feature_forward", "(", "x", ")", "[", "1", "]", "[", "feature_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_resnet.set_dropout": [[68, 73], ["network.infer_Cls_Net_resnet.model.dropout.train", "network.infer_Cls_Net_resnet.model.dropout.eval"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.train", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval"], ["", "def", "set_dropout", "(", "self", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "if", "is_train", ":", "\n", "            ", "self", ".", "model", ".", "dropout", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "dropout", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.__init__": [[75, 84], ["super().__init__", "vgg.vgg16"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.vgg.vgg16"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "infer_Cls_Net_vgg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "vgg16", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "num_feature", "=", "model", ".", "num_feature", "\n", "\n", "self", ".", "num_feature", "=", "15", "\n", "self", ".", "num_cnn", "=", "13", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.forward": [[85, 90], ["network.infer_Cls_Net_vgg.model", "network.infer_Cls_Net_vgg.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ")", ":", "\n", "        ", "if", "get_features", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list": [[91, 93], ["network.infer_Cls_Net_vgg.model.feature_forward"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet.feature_forward"], ["", "", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "feature_forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature": [[94, 96], ["network.infer_Cls_Net_vgg.model.get_feature"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature"], ["", "def", "get_feature", "(", "self", ",", "x", ",", "feature_index", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "get_feature", "(", "x", ",", "feature_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature_attack": [[97, 101], ["network.infer_Cls_Net_vgg.model.get_feature", "len"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature"], ["", "def", "get_feature_attack", "(", "self", ",", "input", ")", ":", "\n", "        ", "assert", "(", "len", "(", "input", ")", "==", "2", ")", "\n", "x", ",", "feature_index", "=", "input", "\n", "return", "self", ".", "model", ".", "get_feature", "(", "x", ",", "feature_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.set_dropout": [[102, 107], ["network.infer_Cls_Net_vgg.train", "network.infer_Cls_Net_vgg.eval"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.train", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval"], ["", "def", "set_dropout", "(", "self", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "if", "is_train", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.linfball_proj": [[43, 47], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["def", "linfball_proj", "(", "center", ",", "radius", ",", "t", ",", "in_place", "=", "True", ")", ":", "\n", "    ", "noise", "=", "center", "-", "t", "\n", "noise", "=", "torch", ".", "clamp", "(", "noise", ",", "min", "=", "-", "radius", ",", "max", "=", "radius", ")", "\n", "return", "center", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.train": [[49, 82], ["utils.AverageMeter", "utils.AverageMeter", "utils.ProgressMeter", "model.train", "enumerate", "print", "len", "tqdm.tqdm", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "images.cuda.cuda", "target.cuda.cuda", "type", "type", "criterion.item", "images.cuda.size", "acc1[].item", "images.cuda.size", "len"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.train", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.accuracy", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "losses", ",", "top1", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "train_loader", ",", "desc", "=", "f\"Train epoch {epoch}\"", ")", ")", ":", "\n", "        ", "if", "args", ".", "gpu", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "if", "type", "(", "output", ")", "==", "InceptionOutputs", ":", "output", "=", "output", "[", "0", "]", "\n", "if", "type", "(", "output", ")", "==", "GoogLeNetOutputs", ":", "output", "=", "output", "[", "0", "]", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "print", "(", "'Train Epoch [{}][{}] Acc@1 {top1.avg:.3f} Loss {loss.avg:.3f}, Lr {lr:.9f}'", "\n", ".", "format", "(", "epoch", ",", "len", "(", "train_loader", ")", ",", "top1", "=", "top1", ",", "loss", "=", "losses", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval": [[83, 129], ["utils.AverageMeter", "utils.ProgressMeter", "model.eval", "numpy.array", "numpy.array", "numpy.array", "enumerate", "sklearn.metrics.accuracy_score", "print", "len", "tqdm.tqdm", "criterion", "utils.AverageMeter.update", "numpy.concatenate", "model.argmax().detach().cpu().numpy", "numpy.concatenate", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "numpy.concatenate", "images.cuda.cuda", "target.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "type", "criterion.item", "images.cuda.size", "len", "target.cuda.detach().cpu().numpy", "model.argmax().detach().cpu", "[].detach().cpu().numpy", "target.cuda.detach().cpu", "model.argmax().detach", "[].detach().cpu", "target.cuda.detach", "model.argmax", "[].detach", "model.transpose"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.update"], ["", "def", "eval", "(", "test_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "saver", "=", "None", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", "'Loss Eval'", ",", "':.4e'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "test_loader", ")", ",", "\n", "[", "losses", "]", ",", "\n", "prefix", "=", "\"Epoch Eval: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "gt", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "logits", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "test_loader", ",", "desc", "=", "f\"Test epoch {epoch}\"", ")", ")", ":", "\n", "        ", "if", "args", ".", "gpu", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "images", ")", "\n", "", "if", "type", "(", "output", ")", "==", "InceptionOutputs", ":", "output", "=", "output", "[", "0", "]", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Record GT and Pred", "\n", "gt", "=", "np", ".", "concatenate", "(", "[", "gt", ",", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "output_argmax", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "concatenate", "(", "[", "pred", ",", "output_argmax", "]", ",", "axis", "=", "0", ")", "\n", "\n", "output", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "logits", "=", "np", ".", "concatenate", "(", "[", "logits", ",", "output", ".", "transpose", "(", "1", ",", "0", ")", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "acc", "=", "accuracy_score", "(", "gt", ",", "pred", ",", "normalize", "=", "True", ")", "\n", "# mf1 = f1_score(gt, pred, average='macro')", "\n", "# kappa = cohen_kappa_score(gt, pred, weights='quadratic')", "\n", "# kappa = roc_auc_score(gt, logits)", "\n", "\n", "print", "(", "'Eval Epoch [{}][{}] Acc {acc:.5f} loss {loss.avg:.3f}'", "\n", ".", "format", "(", "epoch", ",", "len", "(", "test_loader", ")", ",", "acc", "=", "acc", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "# if saver is not None:", "\n", "#     saver.save_metrics(acc=acc, loss=losses.avg)", "\n", "\n", "return", "losses", ".", "avg", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.run": [[130, 172], ["saver.Saver", "print", "datasets.get_dataloader", "datasets.get_dataloader", "network.Cls_Net", "torch.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "range", "train.eval", "print", "model.cuda.cuda", "criterion.cuda.cuda", "model.cuda.parameters", "train.train", "train.eval", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "saver.Saver.save_current_model", "saver.Saver.save_best_model"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.train", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_current_model", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_best_model"], ["", "def", "run", "(", "args", ")", ":", "\n", "    ", "saver", "=", "Saver", "(", "args", ".", "run_name", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "print", "(", "f\"********** Start training {args.run_name} backbone {args.arch} dataset {args.dataset} *******\"", ")", "\n", "# # test models", "\n", "# for item in ['vgg16_bn','resnet101','alexnet','inception_v3']:", "\n", "#     model = Cls_Net(5, item)", "\n", "\n", "train_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "mode", "=", "'train'", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "num_fold", "=", "args", ".", "num_fold", ")", "\n", "test_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "mode", "=", "'test'", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "num_fold", "=", "args", ".", "num_fold", ")", "\n", "\n", "model", "=", "Cls_Net", "(", "train_loader", ".", "dataset", ".", "num_classes", ",", "args", ".", "arch", ")", "\n", "if", "args", ".", "gpu", ":", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "args", ".", "gpu", ":", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "'min'", ",", "patience", "=", "2", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "best_loss", "=", "100000", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "<", "1e-7", ":", "\n", "            ", "break", "\n", "\n", "", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "epoch", "%", "1", "==", "0", ":", "\n", "            ", "val_loss", ",", "val_acc", "=", "eval", "(", "test_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "scheduler", ".", "step", "(", "val_loss", ")", "\n", "saver", ".", "save_current_model", "(", "model", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# saver.save_best_model(model)", "\n", "\n", "if", "best_loss", ">", "val_loss", ":", "\n", "                ", "best_loss", "=", "val_loss", "\n", "saver", ".", "save_best_model", "(", "model", ")", "\n", "", "", "", "eval", "(", "test_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "saver", ")", "\n", "print", "(", "\"Training Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.get_GMM.run": [[39, 91], ["os.path.join", "saver.Saver", "logging.info", "datasets.get_dataloader", "saver.Saver.load_model", "network.infer_Cls_Net_resnet.eval", "network.infer_Cls_Net_resnet.cuda", "range", "os.getcwd", "os.path.isdir", "os.mkdir", "network.infer_Cls_Net_vgg", "print", "sklearn.mixture.BayesianGaussianMixture", "sklearn.mixture.BayesianGaussianMixture.fit", "os.path.join", "numpy.savez", "print", "datasets.get_dataloader", "list", "range", "range", "range", "network.infer_Cls_Net_resnet", "enumerate", "numpy.concatenate", "get_GMM.run.fit"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.load_model", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader"], ["def", "run", "(", "args", ",", "default_victims", ")", ":", "\n", "# root_dir = f'/apdcephfs/share_1290796/qingsongyao/temp/{args.dataset}/{args.arch}/new_GMM_{args.num_component}'", "\n", "    ", "root_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f'runs_{args.dataset}'", ",", "args", ".", "arch", ",", "f'GMM_{args.num_component}'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "root_dir", ")", ":", "os", ".", "mkdir", "(", "root_dir", ")", "\n", "layer_index", "=", "args", ".", "layer_index", "\n", "is_targeted", "=", "False", "\n", "saver", "=", "Saver", "(", "args", ".", "arch", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "logging", ".", "info", "(", "f'Attacking {default_victims} by {args.arch}'", ")", "\n", "\n", "test_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "mode", "=", "'train'", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "num_fold", "=", "args", ".", "num_fold", ",", "targeted", "=", "is_targeted", ")", "\n", "\n", "if", "args", ".", "arch", "==", "'vgg16'", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_vgg", "(", "test_loader", ".", "dataset", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "        ", "src_model", "=", "infer_Cls_Net_resnet", "(", "test_loader", ".", "dataset", ".", "num_classes", ")", "\n", "", "src_model", "=", "saver", ".", "load_model", "(", "src_model", ",", "args", ".", "arch", ")", "\n", "src_model", ".", "eval", "(", ")", "\n", "src_model", "=", "src_model", ".", "cuda", "(", ")", "\n", "\n", "\n", "def", "fit", "(", "id_class", ",", "id_layer", ",", "features", ")", ":", "\n", "        ", "print", "(", "f'Start to fit {id_class} on layer {id_layer}'", ")", "\n", "gmm_model", "=", "BayesianGaussianMixture", "(", "n_components", "=", "args", ".", "num_component", ",", "n_init", "=", "2", ",", "max_iter", "=", "1000", ")", "\n", "gmm_model", ".", "fit", "(", "features", ")", "\n", "npz_name", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "f'Layer_{id_layer}_class_{id_class}.npz'", ")", "\n", "np", ".", "savez", "(", "npz_name", ",", "means_", "=", "gmm_model", ".", "means_", ",", "precision_cholesky_", "=", "gmm_model", ".", "precisions_cholesky_", ",", "weights_", "=", "gmm_model", ".", "weights_", ")", "\n", "print", "(", "f'Fit {id_class} on layer {id_layer} done save as {npz_name}'", ")", "\n", "\n", "", "from", "multiprocessing", "import", "Process", "\n", "for", "id_class", "in", "range", "(", "0", ",", "test_loader", ".", "dataset", ".", "num_classes_selected", ")", ":", "\n", "        ", "features_layer", "=", "{", "id", ":", "[", "]", "for", "id", "in", "range", "(", "0", ",", "src_model", ".", "num_cnn", ")", "}", "\n", "test_loader", "=", "get_dataloader", "(", "dataset", "=", "args", ".", "dataset", ",", "mode", "=", "'train'", ",", "batch_size", "=", "32", ",", "num_workers", "=", "args", ".", "workers", ",", "rand_pairs", "=", "'train_single_class'", ",", "target_class", "=", "id_class", ")", "\n", "feature_list", "=", "list", "(", ")", "\n", "# for i, (images, target) in enumerate(test_loader):", "\n", "for", "repeat", "in", "range", "(", "1", ")", ":", "\n", "            ", "for", "i", ",", "(", "images", ",", "target", ",", "target_data", ")", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "target_feature", "=", "src_model", ".", "feature_list", "(", "images", ")", "[", "1", "]", "\n", "for", "id", "in", "range", "(", "0", ",", "src_model", ".", "num_cnn", ")", ":", "\n", "                        ", "features_layer", "[", "id", "]", ".", "append", "(", "target_feature", "[", "id", "]", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "", "", "for", "id", "in", "range", "(", "0", ",", "src_model", ".", "num_cnn", ")", ":", "\n", "            ", "features_layer", "[", "id", "]", "=", "np", ".", "concatenate", "(", "features_layer", "[", "id", "]", ")", "\n", "\n", "", "for", "id_layer", "in", "range", "(", "0", ",", "src_model", ".", "num_cnn", ")", ":", "\n", "            ", "fit", "(", "id_class", ",", "id_layer", ",", "features_layer", "[", "id_layer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.my_sequential.__init__": [[24, 32], ["torch.Module.__init__", "enumerate", "setattr", "str", "type"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "layers", ")", ":", "\n", "        ", "super", "(", "my_sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_feature", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "str", "(", "i", ")", ",", "layer", ")", "\n", "if", "type", "(", "layer", ")", "==", "torch", ".", "nn", ".", "ReLU", ":", "\n", "                ", "self", ".", "num_feature", "+=", "1", "\n", "", "", "self", ".", "num_layers", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.my_sequential.forward": [[33, 46], ["range", "features.append", "type", "getattr", "features.extend", "getattr", "str", "type", "getattr", "getattr", "str", "getattr", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "if", "get_features", "and", "type", "(", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", ")", "==", "torch", ".", "nn", ".", "ReLU", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "", "elif", "get_features", "and", "type", "(", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", ")", "==", "Bottleneck", ":", "\n", "                ", "x", ",", "feature", "=", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", "(", "x", ",", "True", ")", "\n", "features", ".", "extend", "(", "feature", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "if", "get_features", ":", "return", "x", ",", "features", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.BasicBlock.__init__": [[62, 79], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv3x3", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.BasicBlock.forward": [[80, 97], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.Bottleneck.__init__": [[103, 119], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv1x1", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv3x3", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.Bottleneck.forward": [[120, 143], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "features.append", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "features", ".", "append", "(", "out", ")", "\n", "if", "get_features", ":", "return", "out", ",", "features", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet.__init__": [[146, 199], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "denoise_feature", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "denoise_feature", "=", "denoise_feature", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.3", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet._make_layer": [[200, 226], ["layers.append", "range", "resnet.my_sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "# if self.denoise_feature:", "\n", "#     layers.append(NLBlockND(self.inplanes))", "\n", "\n", "", "return", "my_sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet.forward": [[227, 245], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.dropout", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.ResNet.feature_forward": [[246, 271], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "features.append", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "features.extend", "resnet.ResNet.layer2", "features.extend", "resnet.ResNet.layer3", "features.extend", "resnet.ResNet.layer4", "features.extend", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "features.append", "resnet.ResNet.dropout", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "feature_forward", "(", "self", ",", "x", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "features", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", ",", "feature", "=", "self", ".", "layer1", "(", "x", ",", "get_features", "=", "True", ")", "\n", "features", ".", "extend", "(", "feature", ")", "\n", "x", ",", "feature", "=", "self", ".", "layer2", "(", "x", ",", "get_features", "=", "True", ")", "\n", "features", ".", "extend", "(", "feature", ")", "\n", "x", ",", "feature", "=", "self", ".", "layer3", "(", "x", ",", "get_features", "=", "True", ")", "\n", "features", ".", "extend", "(", "feature", ")", "\n", "x", ",", "feature", "=", "self", ".", "layer4", "(", "x", ",", "get_features", "=", "True", ")", "\n", "features", ".", "extend", "(", "feature", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.NLBlockND.__init__": [[277, 348], ["torch.Module.__init__", "ValueError", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "conv_nd", "conv_nd", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "mode", "=", "'gaussian'", ",", "\n", "dimension", "=", "2", ",", "bn_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"Implementation of Non-Local Block with 4 different pairwise functions but doesn't include subsampling trick\n        args:\n            in_channels: original channel size (1024 in the paper)\n            inter_channels: channel size inside the block if not specifed reduced to half (512 in the paper)\n            mode: supports Gaussian, Embedded Gaussian, Dot Product, and Concatenation\n            dimension: can be 1 (temporal), 2 (spatial), 3 (spatiotemporal)\n            bn_layer: whether to add batch norm\n        \"\"\"", "\n", "super", "(", "NLBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "if", "mode", "not", "in", "[", "'gaussian'", ",", "'embedded'", ",", "'dot'", ",", "'concatenate'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'`mode` must be one of `gaussian`, `embedded`, `dot` or `concatenate`'", ")", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "dimension", "=", "dimension", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "# the channel size is reduced to half inside the block", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "# assign appropriate convolutional, max pool, and batch norm layers for different dimensions", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "# function g in the paper which goes through conv. with kernel size 1", "\n", "# self.g = conv_nd(in_channels=self.in_channels, out_channels=self.inter_channels, kernel_size=1)", "\n", "\n", "# add BatchNorm layer after the last conv layer", "\n", "# if bn_layer:", "\n", "#     self.W_z = nn.Sequential(", "\n", "#             conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1),", "\n", "#             bn(self.in_channels)", "\n", "#         )", "\n", "#     # from section 4.1 of the paper, initializing params of BN ensures that the initial state of non-local block is identity mapping", "\n", "#     nn.init.constant_(self.W_z[1].weight, 0)", "\n", "#     nn.init.constant_(self.W_z[1].bias, 0)", "\n", "# else:", "\n", "#     self.W_z = conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1)", "\n", "\n", "#     # from section 3.3 of the paper by initializing Wz to 0, this block can be inserted to any existing architecture", "\n", "#     nn.init.constant_(self.W_z.weight, 0)", "\n", "#     nn.init.constant_(self.W_z.bias, 0)", "\n", "\n", "# define theta and phi for all operations except gaussian", "\n", "", "if", "self", ".", "mode", "==", "\"embedded\"", "or", "self", ".", "mode", "==", "\"dot\"", "or", "self", ".", "mode", "==", "\"concatenate\"", ":", "\n", "            ", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"concatenate\"", ":", "\n", "            ", "self", ".", "W_f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inter_channels", "*", "2", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.NLBlockND.forward": [[350, 407], ["x.size", "x.view", "g_x.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "x.view", "x.view", "theta_x.repeat.repeat.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "resnet.NLBlockND.theta().view", "resnet.NLBlockND.phi().view", "theta_x.repeat.repeat.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "f.view.view.size", "y.view.view.permute", "resnet.NLBlockND.theta().view", "resnet.NLBlockND.phi().view", "theta_x.repeat.repeat.size", "phi_x.repeat.repeat.size", "theta_x.repeat.repeat.repeat", "phi_x.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet.NLBlockND.W_f", "f.view.view.view", "x.size", "resnet.NLBlockND.theta", "resnet.NLBlockND.phi", "f.view.view.size", "f.view.view.size", "f.view.view.size", "resnet.NLBlockND.theta", "resnet.NLBlockND.phi"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        args\n            x: (N, C, T, H, W) for dimension=3; (N, C, H, W) for dimension 2; (N, C, T) for dimension 1\n        \"\"\"", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# (N, C, THW)", "\n", "# this reshaping and permutation is from the spacetime_nonlocal function in the original Caffe2 implementation", "\n", "# import ipdb; ipdb.set_trace()", "\n", "g_x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"gaussian\"", ":", "\n", "            ", "theta_x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "phi_x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"embedded\"", "or", "self", ".", "mode", "==", "\"dot\"", ":", "\n", "            ", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"concatenate\"", ":", "\n", "            ", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "1", ",", "-", "1", ")", "\n", "\n", "h", "=", "theta_x", ".", "size", "(", "2", ")", "\n", "w", "=", "phi_x", ".", "size", "(", "3", ")", "\n", "theta_x", "=", "theta_x", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "w", ")", "\n", "phi_x", "=", "phi_x", ".", "repeat", "(", "1", ",", "1", ",", "h", ",", "1", ")", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "theta_x", ",", "phi_x", "]", ",", "dim", "=", "1", ")", "\n", "f", "=", "self", ".", "W_f", "(", "concat", ")", "\n", "f", "=", "f", ".", "view", "(", "f", ".", "size", "(", "0", ")", ",", "f", ".", "size", "(", "2", ")", ",", "f", ".", "size", "(", "3", ")", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"gaussian\"", "or", "self", ".", "mode", "==", "\"embedded\"", ":", "\n", "            ", "f_div_C", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"dot\"", "or", "self", ".", "mode", "==", "\"concatenate\"", ":", "\n", "            ", "N", "=", "f", ".", "size", "(", "-", "1", ")", "# number of position in x", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "\n", "# contiguous here just allocates contiguous chunk of memory", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "# W_y = self.W_z(y)", "\n", "W_y", "=", "y", "\n", "# residual connection", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv3x3": [[47, 51], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.conv1x1": [[53, 56], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet": [[410, 417], ["resnet.ResNet", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnet18": [[419, 429], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnet34": [[431, 441], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnet50": [[443, 453], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnet101": [[455, 465], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnet152": [[467, 477], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnext50_32x4d": [[479, 491], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.resnext101_32x8d": [[493, 505], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.wide_resnet50_2": [[507, 523], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet.wide_resnet101_2": [[525, 541], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.__init__": [[32, 51], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logging.basicConfig", "os.getcwd", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dataset", "=", "'APTOS'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f'runs_{dataset}'", ")", "\n", "self", ".", "root_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "name", ")", "\n", "self", ".", "ckpt_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_pth", ",", "'checkpoints'", ")", "\n", "self", ".", "visual_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_pth", ",", "'visual'", ")", "\n", "self", ".", "attack_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_pth", ",", "'attack'", ")", "\n", "self", ".", "attack_visual_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "attack_pth", ",", "'visual'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "root_pth", ")", ":", "os", ".", "mkdir", "(", "self", ".", "root_pth", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "ckpt_pth", ")", ":", "os", ".", "mkdir", "(", "self", ".", "ckpt_pth", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "visual_pth", ")", ":", "os", ".", "mkdir", "(", "self", ".", "visual_pth", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "attack_pth", ")", ":", "os", ".", "mkdir", "(", "self", ".", "attack_pth", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "attack_visual_pth", ")", ":", "os", ".", "mkdir", "(", "self", ".", "attack_visual_pth", ")", "\n", "\n", "log_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_pth", ",", "'log.log'", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_pth", ",", "filemode", "=", "\"a\"", ",", "format", "=", "\"%(asctime)s %(name)s:%(levelname)s:%(message)s\"", ",", "datefmt", "=", "\"%d-%M-%Y %H:%M:%S\"", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir": [[52, 56], ["os.path.join", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir"], ["", "def", "mkdir", "(", "self", ",", "name", ")", ":", "\n", "        ", "pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_pth", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pth", ")", ":", "os", ".", "mkdir", "(", "pth", ")", "\n", "return", "pth", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_best_model": [[57, 60], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict"], "methods", ["None"], ["", "def", "save_best_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "ckpt_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_pth", ",", "'best_model.pth'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_pth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_current_model": [[61, 64], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict"], "methods", ["None"], ["", "def", "save_current_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "ckpt_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_pth", ",", "'current_model.pth'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_pth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_epoch_model": [[65, 68], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict"], "methods", ["None"], ["", "def", "save_epoch_model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "ckpt_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_pth", ",", "f'{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_pth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.load_epoch_model": [[69, 75], ["os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print"], "methods", ["None"], ["", "def", "load_epoch_model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "ckpt_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_pth", ",", "f'{epoch}.pth'", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_pth", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", ")", "\n", "print", "(", "f\"Load {ckpt_pth}\"", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_metrics": [[76, 83], ["os.path.join", "print", "open", "f.write", "kwargs.items", "f.write"], "methods", ["None"], ["", "def", "save_metrics", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "result_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_pth", ",", "'results.txt'", ")", "\n", "with", "open", "(", "result_pth", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f'Results for {self.name}: \\n'", ")", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "f", ".", "write", "(", "f'{key}:{value}\\n'", ")", "\n", "", "", "print", "(", "f\"{self.name}: Save Test results to {result_pth}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.load_model": [[84, 94], ["os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.cuda.load_state_dict", "print", "model.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "model", ",", "run_name", ",", "is_gpu", "=", "True", ",", "is_current", "=", "False", ",", "get_ckpt", "=", "False", ")", ":", "\n", "        ", "ckpt_name", "=", "'best_model.pth'", "if", "not", "is_current", "else", "'current_model.pth'", "\n", "ckpt_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "run_name", ",", "'checkpoints'", ",", "ckpt_name", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_pth", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", ")", "\n", "if", "is_gpu", ":", "\n", "            ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "print", "(", "f\"Load {ckpt_pth}\"", ")", "\n", "if", "get_ckpt", ":", "return", "model", ",", "ckpt", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.get_ckpt_pth": [[95, 97], ["os.path.join"], "methods", ["None"], ["", "def", "get_ckpt_pth", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "name", ",", "'checkpoints'", ",", "'best_model.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_attack_counter": [[98, 102], ["os.path.join", "open", "pickle.dump"], "methods", ["None"], ["", "def", "save_attack_counter", "(", "self", ",", "counter", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "attack_pth", ",", "'attack_metrics.pkl'", ")", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "counter", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_attack_visual": [[103, 113], ["min", "list", "range", "os.path.join", "torchvision.utils.save_image", "list.append", "list.append", "saver.normalize", "saver.normalize", "int"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize"], ["", "", "def", "save_attack_visual", "(", "self", ",", "images", ",", "adv_images", ",", "attack_name", ")", ":", "\n", "        ", "len_visual", "=", "min", "(", "images", ".", "shape", "[", "0", "]", ",", "8", ")", "\n", "output", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len_visual", ")", ":", "\n", "            ", "output", ".", "append", "(", "normalize", "(", "images", "[", "i", "]", ")", ")", "\n", "output", ".", "append", "(", "normalize", "(", "adv_images", "[", "i", "]", ")", ")", "\n", "", "temp_visual_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_pth", ",", "f'{attack_name}_adervsarial_temp.png'", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "output", ",", "temp_visual_path", ",", "nrow", "=", "int", "(", "4", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.save_gradients": [[115, 128], ["bp.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "guided_bp.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "range", "os.path.join", "saver.norm_01", "saver.norm_01", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "bp.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "guided_bp.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "saver.norm_pertubation", "numpy.concatenate", "PIL.Image.fromarray.astype().transpose", "bp.detach().cpu().numpy.detach().cpu().numpy.detach", "guided_bp.detach().cpu().numpy.detach().cpu().numpy.detach", "str", "PIL.Image.fromarray.astype", "normalize().detach().cpu().numpy", "normalize().detach().cpu", "normalize().detach", "saver.normalize"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.norm_01", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.norm_01", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.norm_pertubation", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize"], ["", "def", "save_gradients", "(", "self", ",", "images", ",", "bp", ",", "guided_bp", ",", "pertubations", ")", ":", "\n", "        ", "bp", "=", "bp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "guided_bp", "=", "guided_bp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "attack_pth", ",", "f'{str(i)}_grad.png'", ")", "\n", "bp_out", "=", "norm_01", "(", "bp", "[", "i", "]", ")", "\n", "guided_bp_out", "=", "norm_01", "(", "guided_bp", "[", "i", "]", ")", "\n", "pertubations_i", "=", "[", "norm_pertubation", "(", "item", "[", "i", "]", ")", "for", "item", "in", "pertubations", "]", "\n", "save", "=", "np", ".", "concatenate", "(", "[", "normalize", "(", "images", "[", "i", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "bp_out", ",", "guided_bp_out", "]", "+", "pertubations_i", ",", "axis", "=", "-", "1", ")", "*", "255", "\n", "save", "=", "Image", ".", "fromarray", "(", "save", ".", "astype", "(", "np", ".", "uint8", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "save", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.print_features": [[129, 143], ["len", "range", "list", "range", "os.path.join", "torchvision.utils.save_image", "min", "range", "list.append", "int", "saver.clip_01"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.clip_01"], ["", "", "def", "print_features", "(", "self", ",", "features", ")", ":", "\n", "# print #3 features", "\n", "        ", "num_features", "=", "len", "(", "features", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "results", "=", "list", "(", ")", "\n", "len_feature", "=", "features", "[", "0", "]", "[", "i", "]", "[", "3", "]", ".", "shape", "[", "0", "]", "\n", "for", "k", "in", "range", "(", "min", "(", "len_feature", ",", "100", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_features", ")", ":", "\n", "                    ", "results", ".", "append", "(", "clip_01", "(", "features", "[", "j", "]", "[", "i", "]", "[", "3", "]", "[", "k", "]", ")", ")", "\n", "", "", "feature_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "attack_visual_pth", ",", "f'feature_{i}.png'", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "results", ",", "\n", "feature_pth", ",", "\n", "nrow", "=", "int", "(", "num_features", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.show_explaination": [[145, 199], ["print", "range", "ipdb.set_trace", "saver.normalize", "saver.normalize", "os.path.join", "os.path.join", "victim_models.items", "str", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "images[].unsqueeze", "adv_images[].unsqueeze", "utils.gen_results_strings", "model", "model", "torchvision.utils.save_image", "pertubations.abs().max", "os.path.exists", "os.mkdir", "model", "model", "open", "f.write", "range", "os.path.join", "os.path.join", "os.path.join", "list", "range", "torchvision.utils.save_image", "saver.normalize", "saver.normalize", "int", "pertubations.abs", "list.append", "list.append", "saver.clip_01", "saver.clip_01", "int"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.gen_results_strings", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.clip_01", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.clip_01"], ["", "", "def", "show_explaination", "(", "self", ",", "images", ",", "adv_images", ",", "label", ",", "attack_name", ",", "victim_models", ")", ":", "\n", "        ", "norm_img", "=", "normalize", "(", "images", ")", "*", "255", "\n", "norm_adv", "=", "normalize", "(", "adv_images", ")", "*", "255", "\n", "pertubations", "=", "norm_img", "-", "norm_adv", "\n", "print", "(", "f\"{attack_name}: Max pertubation {pertubations.abs().max()}\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Creat Dir for each image", "\n", "            ", "img_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "attack_visual_pth", ",", "str", "(", "i", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_pth", ")", ":", "os", ".", "mkdir", "(", "img_pth", ")", "\n", "\n", "# Creat Dir for attack and victim models", "\n", "attack_pth", "=", "os", ".", "path", ".", "join", "(", "img_pth", ",", "attack_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "attack_pth", ")", ":", "os", ".", "mkdir", "(", "attack_pth", ")", "\n", "\n", "for", "victim_name", ",", "model", "in", "victim_models", ".", "items", "(", ")", ":", "\n", "                ", "model_pth", "=", "os", ".", "path", ".", "join", "(", "attack_pth", ",", "victim_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_pth", ")", ":", "os", ".", "mkdir", "(", "model_pth", ")", "\n", "\n", "img", "=", "images", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "adv_img", "=", "adv_images", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "result_raw", "=", "model", "(", "img", ")", "[", "0", "]", "\n", "result_adv", "=", "model", "(", "adv_img", ")", "[", "0", "]", "\n", "\n", "# Save prob.txt for each img and each model", "\n", "string", "=", "gen_results_strings", "(", "label", "[", "i", "]", ",", "result_raw", ",", "result_adv", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_pth", ",", "'prob.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "string", ")", "\n", "\n", "# Save features maps", "\n", "", "out", ",", "features", "=", "model", "(", "img", ",", "get_features", "=", "True", ")", "\n", "out", ",", "features_adv", "=", "model", "(", "adv_img", ",", "get_features", "=", "True", ")", "\n", "\n", "if", "i", "==", "3", ":", "\n", "                    ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                        ", "fea_i", ",", "fea_i_adv", "=", "features", "[", "i", "]", "[", "0", "]", ",", "features_adv", "[", "i", "]", "[", "0", "]", "\n", "feature_pth", "=", "os", ".", "path", ".", "join", "(", "model_pth", ",", "f'feature_{i}.png'", ")", "\n", "result", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "fea_i", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "result", ".", "append", "(", "clip_01", "(", "fea_i", "[", "j", "]", ")", ")", "\n", "result", ".", "append", "(", "clip_01", "(", "fea_i_adv", "[", "j", "]", ")", ")", "\n", "", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "result", ",", "\n", "feature_pth", ",", "\n", "nrow", "=", "int", "(", "16", ")", "\n", ")", "\n", "\n", "", "", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "[", "normalize", "(", "img", "[", "0", "]", ")", ",", "normalize", "(", "adv_img", "[", "0", "]", ")", "]", ",", "\n", "os", ".", "path", ".", "join", "(", "model_pth", ",", "'imgs.png'", ")", ",", "\n", "nrow", "=", "int", "(", "2", ")", "\n", ")", "\n", "", "", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.normalize": [[14, 18], ["tensor.mul().add.mul().add", "tensor.mul().add.mul"], "function", ["None"], ["def", "normalize", "(", "tensor", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "mul", "(", "attackers", ".", "torch_std_cuda", ")", ".", "add", "(", "attackers", ".", "torch_mean_cuda", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.clip_01": [[19, 21], ["torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp", "torch.clamp"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "clip_01", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "clamp", "(", "tensor", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.norm_01": [[22, 25], ["numpy.clip"], "function", ["None"], ["", "def", "norm_01", "(", "tensor", ")", ":", "\n", "    ", "out", "=", "np", ".", "clip", "(", "tensor", ",", "-", "1", ",", "1", ")", "\n", "return", "(", "out", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.norm_pertubation": [[26, 30], ["None"], "function", ["None"], ["", "def", "norm_pertubation", "(", "tensor", ")", ":", "\n", "    ", "tensor", "=", "tensor", "*", "(", "64", "/", "1", ")", "\n", "tensor", "=", "tensor", "+", "0.5", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.__init__": [[588, 632], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "adv_detectors.DNN_CNN_Feature.model.cuda", "adv_detectors.DNN_CNN_Feature.model.train", "infer_model.cuda.cuda.cuda", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "tqdm.tqdm.tqdm", "adv_detectors.DNN_CNN_Feature.infer_auc", "adv_detectors.DNN_CNN_Feature.infer_array", "adv_detectors.DNN_CNN_Feature.infer_array", "adv_detectors.DNN_CNN_Feature.infer_array", "adv_detectors.DNN_CNN_Feature.model.cpu", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "adv_detectors.DNN_CNN_Feature.model.parameters", "list", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "adv_detectors.DNN_CNN_Feature.model().squeeze", "torch.nn.BCELoss.", "torch.nn.BCELoss.", "torch.nn.BCELoss.", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.nn.BCELoss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "infer_model.cuda.cuda.get_feature", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "adv_detectors.DNN_CNN_Feature.model"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.train", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_auc", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_array", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_array", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_array", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature"], ["    ", "def", "__init__", "(", "self", ",", "num_channel", ",", "train_data", ",", "train_label", ",", "infer_model", ",", "id_layer", ",", "test_set", ",", "clean_data", ",", "noise_data", ",", "adv_data", ")", ":", "\n", "        ", "super", "(", "DNN_CNN_Feature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channel", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "id_layer", "=", "id_layer", "\n", "infer_model", "=", "infer_model", ".", "cuda", "(", ")", "\n", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "1e-3", ",", "\n", "weight_decay", "=", "1e-4", ")", "\n", "\n", "# for i in range(500):", "\n", "for", "i", "in", "tqdm", "(", "list", "(", "range", "(", "200", ")", ")", ",", "desc", "=", "f'Training DNN for layer {id_layer}'", ")", ":", "\n", "            ", "ids", "=", "torch", ".", "randint", "(", "train_data", ".", "shape", "[", "0", "]", ",", "(", "64", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "patch_data", ",", "patch_label", "=", "train_data", "[", "ids", "]", ",", "train_label", "[", "ids", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_feature", "=", "infer_model", ".", "get_feature", "(", "patch_data", ",", "id_layer", ")", "\n", "", "pred", "=", "self", ".", "model", "(", "input_feature", ")", ".", "squeeze", "(", ")", "\n", "loss_bce", "=", "loss_fn", "(", "pred", ",", "patch_label", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_bce", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# if (i + 1) % 100 == 0:", "\n", "#     print(self.infer_auc(test_set, infer_model))", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "", "self", ".", "final_auc", "=", "self", ".", "infer_auc", "(", "test_set", ",", "infer_model", ")", "\n", "self", ".", "clean_pred", "=", "self", ".", "infer_array", "(", "clean_data", ",", "infer_model", ")", "\n", "self", ".", "noise_pred", "=", "self", ".", "infer_array", "(", "noise_data", ",", "infer_model", ")", "\n", "self", ".", "adv_pred", "=", "self", ".", "infer_array", "(", "adv_data", ",", "infer_model", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cpu", "(", ")", "\n", "print", "(", "'DNN Cls Layer {} AUC {:.3f}'", ".", "format", "(", "id_layer", ",", "self", ".", "final_auc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_auc": [[633, 647], ["list", "adv_detectors.DNN_CNN_Feature.model.eval", "range", "numpy.concatenate", "sklearn.metrics.roc_auc_score", "numpy.concatenate.append", "test_set[].cpu().int().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "infer_model.get_feature", "adv_detectors.DNN_CNN_Feature.model().squeeze", "adv_detectors.DNN_CNN_Feature.cpu().numpy", "min", "test_set[].cpu().int", "adv_detectors.DNN_CNN_Feature.model", "adv_detectors.DNN_CNN_Feature.cpu", "test_set[].cpu"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature"], ["", "def", "infer_auc", "(", "self", ",", "test_set", ",", "infer_model", ")", ":", "\n", "        ", "batch_size", "=", "100", "\n", "num_data", "=", "test_set", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "num_batch", "=", "num_data", "//", "batch_size", "\n", "infer_out", "=", "list", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "index", "in", "range", "(", "num_batch", "+", "1", ")", ":", "\n", "            ", "batch_data", "=", "test_set", "[", "0", "]", "[", "index", "*", "batch_size", ":", "min", "(", "num_data", ",", "(", "index", "+", "1", ")", "*", "batch_size", ")", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_feature", "=", "infer_model", ".", "get_feature", "(", "batch_data", ",", "self", ".", "id_layer", ")", "\n", "pred", "=", "self", ".", "model", "(", "batch_feature", ")", ".", "squeeze", "(", ")", "\n", "", "infer_out", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "infer_out", "=", "np", ".", "concatenate", "(", "infer_out", ")", "\n", "return", "roc_auc_score", "(", "test_set", "[", "1", "]", ".", "cpu", "(", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", ",", "infer_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.DNN_CNN_Feature.infer_array": [[648, 663], ["list", "adv_detectors.DNN_CNN_Feature.model.eval", "adv_detectors.DNN_CNN_Feature.model.cuda", "range", "numpy.concatenate", "numpy.concatenate.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "infer_model.get_feature", "adv_detectors.DNN_CNN_Feature.model().squeeze", "adv_detectors.DNN_CNN_Feature.cpu().numpy", "min", "adv_detectors.DNN_CNN_Feature.model", "adv_detectors.DNN_CNN_Feature.cpu"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature"], ["", "def", "infer_array", "(", "self", ",", "input_array", ",", "infer_model", ")", ":", "\n", "        ", "batch_size", "=", "100", "\n", "num_data", "=", "input_array", ".", "shape", "[", "0", "]", "\n", "num_batch", "=", "num_data", "//", "batch_size", "\n", "infer_out", "=", "list", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "for", "index", "in", "range", "(", "num_batch", "+", "1", ")", ":", "\n", "            ", "batch_data", "=", "input_array", "[", "index", "*", "batch_size", ":", "min", "(", "num_data", ",", "(", "index", "+", "1", ")", "*", "batch_size", ")", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_feature", "=", "infer_model", ".", "get_feature", "(", "batch_data", ",", "self", ".", "id_layer", ")", "\n", "pred", "=", "self", ".", "model", "(", "batch_feature", ")", ".", "squeeze", "(", ")", "\n", "", "infer_out", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "infer_out", "=", "np", ".", "concatenate", "(", "infer_out", ")", "\n", "return", "infer_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.test_one": [[12, 17], ["ipdb.set_trace", "scipy.spatial.distance.cdist", "numpy.argpartition", "numpy.expand_dims"], "function", ["None"], ["def", "test_one", "(", "batch", ",", "array", ")", ":", "\n", "    ", "temp", "=", "cdist", "(", "batch", ",", "np", ".", "expand_dims", "(", "array", ",", "0", ")", ")", "[", ":", ",", "0", "]", "\n", "idx", "=", "np", ".", "argpartition", "(", "temp", ",", "21", ")", "[", "1", ":", "21", "]", "\n", "idx_batch", "=", "batch", "[", "idx", "]", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "# lid of a batch of query points X", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.mle_batch_test": [[18, 40], ["numpy.asarray", "numpy.asarray", "min", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "numpy.apply_along_axis", "numpy.apply_along_axis", "numpy.argmax", "print", "adv_detectors.test_one", "ipdb.set_trace", "numpy.apply_along_axis", "numpy.apply_along_axis", "len", "numpy.sum", "numpy.log"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.test_one"], ["", "def", "mle_batch_test", "(", "data", ",", "batch", ",", "real_batch", ",", "k", ")", ":", "\n", "    ", "'''\n    commpute lid score using data & batch with k-neighbors\n    return: a: computed LID score\n    '''", "\n", "data", "=", "np", ".", "asarray", "(", "data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "=", "np", ".", "asarray", "(", "batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "k", "=", "min", "(", "k", ",", "len", "(", "data", ")", "-", "1", ")", "\n", "f", "=", "lambda", "v", ":", "-", "k", "/", "np", ".", "sum", "(", "np", ".", "log", "(", "v", "/", "v", "[", "-", "1", "]", ")", ")", "\n", "# f = lambda v: v.mean()", "\n", "adv", "=", "cdist", "(", "batch", ",", "data", ")", "\n", "adv", "=", "np", ".", "apply_along_axis", "(", "np", ".", "sort", ",", "axis", "=", "1", ",", "arr", "=", "adv", ")", "[", ":", ",", "1", ":", "k", "+", "1", "]", "\n", "real", "=", "cdist", "(", "real_batch", ",", "data", ")", "\n", "real", "=", "np", ".", "apply_along_axis", "(", "np", ".", "sort", ",", "axis", "=", "1", ",", "arr", "=", "real", ")", "[", ":", ",", "1", ":", "k", "+", "1", "]", "\n", "adv_lid", "=", "np", ".", "apply_along_axis", "(", "f", ",", "axis", "=", "1", ",", "arr", "=", "adv", ")", "\n", "real_lid", "=", "np", ".", "apply_along_axis", "(", "f", ",", "axis", "=", "1", ",", "arr", "=", "real", ")", "\n", "max_lid", "=", "np", ".", "argmax", "(", "adv_lid", ")", "\n", "print", "(", "adv_lid", "[", "max_lid", "]", ")", "\n", "test_one", "(", "batch", ",", "data", "[", "max_lid", "]", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.mle_batch": [[42, 58], ["numpy.asarray", "numpy.asarray", "min", "scipy.spatial.distance.cdist", "numpy.apply_along_axis", "numpy.apply_along_axis", "len", "numpy.sum", "numpy.log"], "function", ["None"], ["", "def", "mle_batch", "(", "data", ",", "batch", ",", "k", ")", ":", "\n", "    ", "'''\n    commpute lid score using data & batch with k-neighbors\n    return: a: computed LID score\n    '''", "\n", "data", "=", "np", ".", "asarray", "(", "data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "=", "np", ".", "asarray", "(", "batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "k", "=", "min", "(", "k", ",", "len", "(", "data", ")", "-", "1", ")", "\n", "f", "=", "lambda", "v", ":", "-", "k", "/", "np", ".", "sum", "(", "np", ".", "log", "(", "v", "/", "v", "[", "-", "1", "]", ")", ")", "\n", "# f = lambda v: v.mean()", "\n", "a", "=", "cdist", "(", "batch", ",", "data", ")", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "np", ".", "sort", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "[", ":", ",", "1", ":", "k", "+", "1", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "f", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.merge_and_generate_labels": [[60, 77], ["numpy.asarray", "X_pos.reshape.reshape", "numpy.asarray", "X_neg.reshape.reshape", "numpy.concatenate", "numpy.concatenate", "y.reshape.reshape", "numpy.ones", "numpy.zeros"], "function", ["None"], ["", "def", "merge_and_generate_labels", "(", "X_pos", ",", "X_neg", ")", ":", "\n", "    ", "\"\"\"\n    merge positve and nagative artifact and generate labels\n    return: X: merged samples, 2D ndarray\n             y: generated labels (0/1): 2D ndarray same size as X\n    \"\"\"", "\n", "X_pos", "=", "np", ".", "asarray", "(", "X_pos", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "X_pos", "=", "X_pos", ".", "reshape", "(", "(", "X_pos", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "X_neg", "=", "np", ".", "asarray", "(", "X_neg", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "X_neg", "=", "X_neg", ".", "reshape", "(", "(", "X_neg", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "X", "=", "np", ".", "concatenate", "(", "(", "X_pos", ",", "X_neg", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "np", ".", "ones", "(", "X_pos", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "X_neg", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.sample_estimator": [[78, 163], ["model.eval", "sklearn.covariance.EmpiricalCovariance", "len", "numpy.empty", "np.empty.fill", "range", "tqdm.tqdm", "range", "print", "range", "range", "list_features.append", "data.cuda.size", "data.cuda.cuda", "range", "pred.eq().cpu", "pred.eq().cpu.sum", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "range", "sample_class_mean.append", "range", "sklearn.covariance.EmpiricalCovariance.fit", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "precision.append", "len", "sample_class_mean[].cpu().numpy", "precision[].cpu().numpy", "torch.Tensor().cuda.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.feature_list", "out_features[].view", "torch.mean", "torch.mean", "torch.mean", "output.data.max", "data.cuda.size", "torch.mean", "torch.mean", "torch.mean", "torch.cat.cpu().numpy", "out_features[].size", "out_features[].size", "pred.eq", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "sample_class_mean[].cpu", "precision[].cpu", "target.cuda", "out[].view", "torch.cat", "torch.cat", "torch.cat", "int", "torch.cat.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "out[].view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["", "def", "sample_estimator", "(", "model", ",", "num_classes", ",", "feature_list", ",", "train_loader", ")", ":", "\n", "    ", "\"\"\"\n    compute sample mean and precision (inverse of covariance)\n    return: sample_class_mean: list of class mean\n             precision: list of precisions\n    \"\"\"", "\n", "import", "sklearn", ".", "covariance", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "group_lasso", "=", "sklearn", ".", "covariance", ".", "EmpiricalCovariance", "(", "assume_centered", "=", "False", ")", "\n", "correct", ",", "total", "=", "0", ",", "0", "\n", "num_output", "=", "len", "(", "feature_list", ")", "\n", "num_sample_per_class", "=", "np", ".", "empty", "(", "num_classes", ")", "\n", "num_sample_per_class", ".", "fill", "(", "0", ")", "\n", "list_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "temp_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", ".", "append", "(", "0", ")", "\n", "", "list_features", ".", "append", "(", "temp_list", ")", "\n", "\n", "", "from", "tqdm", "import", "tqdm", "\n", "for", "data", ",", "target", "in", "tqdm", "(", "train_loader", ",", "desc", "=", "'Record train features'", ")", ":", "\n", "        ", "total", "+=", "data", ".", "size", "(", "0", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "out_features", "=", "model", ".", "feature_list", "(", "data", ")", "\n", "\n", "# get hidden features", "\n", "", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "out_features", "[", "i", "]", "=", "out_features", "[", "i", "]", ".", "view", "(", "out_features", "[", "i", "]", ".", "size", "(", "0", ")", ",", "out_features", "[", "i", "]", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "[", "i", "]", "=", "torch", ".", "mean", "(", "out_features", "[", "i", "]", ".", "data", ",", "2", ")", "\n", "\n", "# compute the accuracy", "\n", "", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "equal_flag", "=", "pred", ".", "eq", "(", "target", ".", "cuda", "(", ")", ")", ".", "cpu", "(", ")", "\n", "correct", "+=", "equal_flag", ".", "sum", "(", ")", "\n", "\n", "# construct the sample matrix", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "label", "=", "target", "[", "i", "]", "\n", "if", "num_sample_per_class", "[", "label", "]", "==", "0", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "out_count", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "torch", ".", "cat", "(", "(", "list_features", "[", "out_count", "]", "[", "label", "]", ",", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "0", ")", "\n", "out_count", "+=", "1", "\n", "", "", "num_sample_per_class", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "sample_class_mean", "=", "[", "]", "\n", "out_count", "=", "0", "\n", "for", "num_feature", "in", "feature_list", ":", "\n", "        ", "temp_list", "=", "torch", ".", "Tensor", "(", "num_classes", ",", "int", "(", "num_feature", ")", ")", ".", "cuda", "(", ")", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", "[", "j", "]", "=", "torch", ".", "mean", "(", "list_features", "[", "out_count", "]", "[", "j", "]", ",", "0", ")", "\n", "", "sample_class_mean", ".", "append", "(", "temp_list", ")", "\n", "out_count", "+=", "1", "\n", "\n", "", "precision", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "X", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "X", "=", "list_features", "[", "k", "]", "[", "i", "]", "-", "sample_class_mean", "[", "k", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "X", "=", "torch", ".", "cat", "(", "(", "X", ",", "list_features", "[", "k", "]", "[", "i", "]", "-", "sample_class_mean", "[", "k", "]", "[", "i", "]", ")", ",", "0", ")", "\n", "\n", "# find inverse            ", "\n", "", "", "group_lasso", ".", "fit", "(", "X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "temp_precision", "=", "group_lasso", ".", "precision_", "\n", "temp_precision", "=", "torch", ".", "from_numpy", "(", "temp_precision", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "precision", ".", "append", "(", "temp_precision", ")", "\n", "\n", "", "print", "(", "'\\n Training Accuracy:({:.2f}%)\\n'", ".", "format", "(", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "sample_class_mean", ")", ")", ":", "\n", "        ", "sample_class_mean", "[", "i", "]", "=", "sample_class_mean", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "precision", "[", "i", "]", "=", "precision", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "sample_class_mean", ",", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_Mahalanobis_score": [[164, 240], ["model.eval", "open", "open.close", "model.intermediate_forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "range", "sample_mean[].index_select", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "torch.ge", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.add", "model.intermediate_forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "range", "torch.max", "torch.max", "torch.max", "Mahalanobis.extend", "range", "data.cuda", "target.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean.size", "torch.mean.size", "torch.cat.max", "torch.autograd.Variable", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.autograd.Variable", "torch.mean.size", "torch.mean.size", "torch.cat.cpu().numpy", "data.size", "open.write", "str", "str", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.ge.float", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.ge.index_select", "torch.ge.index_select", "torch.ge.index_select", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.cat.cpu", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.ge.index_select", "torch.ge.index_select", "torch.ge.index_select", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward"], ["", "def", "get_Mahalanobis_score", "(", "model", ",", "test_loader", ",", "num_classes", ",", "outf", ",", "out_flag", ",", "net_type", ",", "sample_mean", ",", "precision", ",", "layer_index", ",", "magnitude", ")", ":", "\n", "    ", "'''\n    Compute the proposed Mahalanobis confidence score on input dataset\n    return: Mahalanobis score from layer_index\n    '''", "\n", "model", ".", "eval", "(", ")", "\n", "Mahalanobis", "=", "[", "]", "\n", "\n", "if", "out_flag", "==", "True", ":", "\n", "        ", "temp_file_name", "=", "'%s/confidence_Ga%s_In.txt'", "%", "(", "outf", ",", "str", "(", "layer_index", ")", ")", "\n", "", "else", ":", "\n", "        ", "temp_file_name", "=", "'%s/confidence_Ga%s_Out.txt'", "%", "(", "outf", ",", "str", "(", "layer_index", ")", ")", "\n", "\n", "", "g", "=", "open", "(", "temp_file_name", ",", "'w'", ")", "\n", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "\n", "        ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "data", ",", "target", "=", "Variable", "(", "data", ",", "requires_grad", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "\n", "out_features", "=", "model", ".", "intermediate_forward", "(", "data", ",", "layer_index", ")", "\n", "out_features", "=", "out_features", ".", "view", "(", "out_features", ".", "size", "(", "0", ")", ",", "out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "=", "torch", ".", "mean", "(", "out_features", ",", "2", ")", "\n", "\n", "# compute Mahalanobis score", "\n", "gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "gaussian_score", "=", "torch", ".", "cat", "(", "(", "gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "# Input_processing", "\n", "", "", "sample_pred", "=", "gaussian_score", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", ".", "index_select", "(", "0", ",", "sample_pred", ")", "\n", "zero_f", "=", "out_features", "-", "Variable", "(", "batch_sample_mean", ")", "\n", "pure_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "Variable", "(", "precision", "[", "layer_index", "]", ")", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "-", "pure_gau", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "gradient", "=", "torch", ".", "ge", "(", "data", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "if", "net_type", "==", "'densenet'", ":", "\n", "            ", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "63.0", "/", "255.0", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "62.1", "/", "255.0", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "66.7", "/", "255.0", ")", ")", "\n", "", "elif", "net_type", "==", "'resnet'", ":", "\n", "            ", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "0.2023", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "0.1994", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "0.2010", ")", ")", "\n", "", "tempInputs", "=", "torch", ".", "add", "(", "data", ".", "data", ",", "-", "magnitude", ",", "gradient", ")", "\n", "\n", "noise_out_features", "=", "model", ".", "intermediate_forward", "(", "Variable", "(", "tempInputs", ",", "volatile", "=", "True", ")", ",", "layer_index", ")", "\n", "noise_out_features", "=", "noise_out_features", ".", "view", "(", "noise_out_features", ".", "size", "(", "0", ")", ",", "noise_out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "noise_out_features", "=", "torch", ".", "mean", "(", "noise_out_features", ",", "2", ")", "\n", "noise_gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "noise_out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "noise_gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "noise_gaussian_score", "=", "torch", ".", "cat", "(", "(", "noise_gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "", "noise_gaussian_score", ",", "_", "=", "torch", ".", "max", "(", "noise_gaussian_score", ",", "dim", "=", "1", ")", "\n", "Mahalanobis", ".", "extend", "(", "noise_gaussian_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "g", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "noise_gaussian_score", "[", "i", "]", ")", ")", "\n", "", "", "g", ".", "close", "(", ")", "\n", "\n", "return", "Mahalanobis", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_posterior": [[241, 298], ["torch.CrossEntropyLoss", "model.eval", "open", "open", "open.close", "open.close", "torch.autograd.Variable.size", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "model", "torch.autograd.Variable", "nn.CrossEntropyLoss.", "criterion.backward", "torch.ge", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.add", "model", "torch.softmax", "torch.max", "torch.max", "torch.max", "range", "model.data.max", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.autograd.Variable", "torch.autograd.Variable.size", "torch.ge.float", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.ge.index_copy_", "open.write", "open.write", "torch.ge.index_select", "torch.ge.index_select", "torch.ge.index_select", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.ge.index_select", "torch.ge.index_select", "torch.ge.index_select", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward"], ["", "def", "get_posterior", "(", "model", ",", "net_type", ",", "test_loader", ",", "magnitude", ",", "temperature", ",", "outf", ",", "out_flag", ")", ":", "\n", "    ", "'''\n    Compute the maximum value of (processed) posterior distribution - ODIN\n    return: null\n    '''", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "total", "=", "0", "\n", "if", "out_flag", "==", "True", ":", "\n", "        ", "temp_file_name_val", "=", "'%s/confidence_PoV_In.txt'", "%", "(", "outf", ")", "\n", "temp_file_name_test", "=", "'%s/confidence_PoT_In.txt'", "%", "(", "outf", ")", "\n", "", "else", ":", "\n", "        ", "temp_file_name_val", "=", "'%s/confidence_PoV_Out.txt'", "%", "(", "outf", ")", "\n", "temp_file_name_test", "=", "'%s/confidence_PoT_Out.txt'", "%", "(", "outf", ")", "\n", "\n", "", "g", "=", "open", "(", "temp_file_name_val", ",", "'w'", ")", "\n", "f", "=", "open", "(", "temp_file_name_test", ",", "'w'", ")", "\n", "\n", "for", "data", ",", "_", "in", "test_loader", ":", "\n", "        ", "total", "+=", "data", ".", "size", "(", "0", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "data", "=", "Variable", "(", "data", ",", "requires_grad", "=", "True", ")", "\n", "batch_output", "=", "model", "(", "data", ")", "\n", "\n", "# temperature scaling", "\n", "outputs", "=", "batch_output", "/", "temperature", "\n", "labels", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "labels", "=", "Variable", "(", "labels", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Normalizing the gradient to binary in {0, 1}", "\n", "gradient", "=", "torch", ".", "ge", "(", "data", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "if", "net_type", "==", "'densenet'", ":", "\n", "            ", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "63.0", "/", "255.0", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "62.1", "/", "255.0", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "66.7", "/", "255.0", ")", ")", "\n", "", "elif", "net_type", "==", "'resnet'", ":", "\n", "            ", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "0.2023", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "0.1994", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "0.2010", ")", ")", "\n", "\n", "", "tempInputs", "=", "torch", ".", "add", "(", "data", ".", "data", ",", "-", "magnitude", ",", "gradient", ")", "\n", "outputs", "=", "model", "(", "Variable", "(", "tempInputs", ",", "volatile", "=", "True", ")", ")", "\n", "outputs", "=", "outputs", "/", "temperature", "\n", "soft_out", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "soft_out", ",", "_", "=", "torch", ".", "max", "(", "soft_out", ".", "data", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "total", "<=", "1000", ":", "\n", "                ", "g", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "soft_out", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "f", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "soft_out", "[", "i", "]", ")", ")", "\n", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "g", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_Mahalanobis_score_adv": [[302, 405], ["model.eval", "range", "range", "m_list.sort", "maha_recorder.items", "maha_recorder.items", "len", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "len", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "dict", "tqdm.tqdm", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "range", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "model.get_feature.view", "torch.mean", "torch.mean", "torch.mean", "range", "mean[].index_select", "model.get_feature", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "target_features.view().mean.view().mean", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "numpy.expand_dims", "range", "numpy.ceil", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.get_feature", "model.get_feature.size", "model.get_feature.size", "torch.cat.max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.from_numpy().cuda().float.grad.sign", "gradient.permute().div().permute.permute().div().permute", "range", "torch.max", "torch.max", "torch.max", "[].append", "numpy.concatenate", "range", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "target_features.view().mean.view", "torch.mm", "torch.mm", "torch.mm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.get_feature", "target_features.view().mean.view().mean", "torch.cat.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "gradient.permute().div().permute.permute().div", "torch.zeros_like.float", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "min", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "target_features.view().mean.view", "torch.cat.cpu", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "gradient.permute().div().permute.permute", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "min", "torch.mm", "torch.mm", "torch.mm", "zero_f.t"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.get_feature"], ["def", "get_Mahalanobis_score_adv", "(", "model", ",", "maha_recorder", ",", "test_label", ",", "num_output", ",", "mean", ",", "precision", ")", ":", "\n", "    ", "'''\n    Compute the proposed Mahalanobis confidence score on adversarial samples\n    # num_output : layer_index\n    '''", "\n", "model", ".", "eval", "(", ")", "\n", "Mahalanobis", "=", "[", "]", "\n", "batch_size", "=", "100", "\n", "total", "=", "0", "\n", "num_classes", "=", "mean", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "data_len", "=", "maha_recorder", "[", "'clean'", "]", "[", "'data'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# Convert to tensor cuda", "\n", "for", "i", "in", "range", "(", "len", "(", "mean", ")", ")", ":", "\n", "        ", "mean", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "mean", "[", "i", "]", ")", ".", "cuda", "(", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "precision", ")", ")", ":", "\n", "        ", "precision", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "precision", "[", "i", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "# m_list = [0.0, 0.01, 0.005, 0.002, 0.0014, 0.001, 0.0005]", "\n", "", "m_list", "=", "[", "0.0005", "]", "\n", "m_list", ".", "sort", "(", ")", "\n", "for", "key", ",", "value", "in", "maha_recorder", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "m_list", ":", "\n", "            ", "maha_recorder", "[", "key", "]", "[", "i", "]", "=", "{", "layer_index", ":", "[", "]", "for", "layer_index", "in", "range", "(", "num_output", ")", "}", "\n", "", "maha_recorder", "[", "key", "]", "[", "'magnitude'", "]", "=", "m_list", "\n", "\n", "", "for", "key", ",", "value", "in", "maha_recorder", ".", "items", "(", ")", ":", "\n", "\n", "        ", "value", "[", "'guassian_scores'", "]", "=", "dict", "(", ")", "\n", "# for i in range(num_output):", "\n", "#     value['guassian_scores'][i] = list()", "\n", "\n", "# Store features", "\n", "total", "=", "0", "\n", "for", "data_index", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ",", "desc", "=", "f\"Get MAHA for {key}\"", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "value", "[", "'data'", "]", "[", "total", ":", "min", "(", "total", "+", "batch_size", ",", "data_len", ")", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", ".", "requires_grad", "=", "True", "\n", "target", "=", "torch", ".", "from_numpy", "(", "test_label", "[", "total", ":", "min", "(", "total", "+", "batch_size", ",", "data_len", ")", "]", ")", ".", "cuda", "(", ")", "\n", "total", "+=", "batch_size", "\n", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_features", "=", "model", ".", "get_feature", "(", "data", ",", "i", ")", "\n", "\n", "# i: Layer index", "\n", "", "out_features", "=", "out_features", ".", "view", "(", "out_features", ".", "size", "(", "0", ")", ",", "out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "=", "torch", ".", "mean", "(", "out_features", ".", "data", ",", "2", ")", "\n", "\n", "# Get pred", "\n", "gaussian_score", "=", "0", "\n", "for", "id_class", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "batch_sample_mean", "=", "mean", "[", "i", "]", "[", "id_class", "]", "\n", "zero_f", "=", "out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "i", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "id_class", "==", "0", ":", "\n", "                        ", "gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                        ", "gaussian_score", "=", "torch", ".", "cat", "(", "(", "gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "", "", "sample_pred", "=", "gaussian_score", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "bingo", "=", "(", "target", "==", "sample_pred", ")", ".", "sum", "(", ")", "\n", "\n", "batch_sample_mean", "=", "mean", "[", "i", "]", ".", "index_select", "(", "0", ",", "sample_pred", ")", "\n", "# get target feature", "\n", "data", ".", "grad", "=", "None", "\n", "del", "out_features", "\n", "target_features", "=", "model", ".", "get_feature", "(", "data", ",", "i", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "target_features", "=", "target_features", ".", "view", "(", "target_features", ".", "shape", "[", "0", "]", ",", "target_features", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "zero_f", "=", "target_features", "-", "batch_sample_mean", "\n", "pure_gau", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "i", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "pure_gau", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# add sign grad", "\n", "for", "magnitude", "in", "m_list", ":", "\n", "                    ", "new_data", "=", "torch", ".", "zeros_like", "(", "data", ")", "\n", "gradient", "=", "data", ".", "grad", ".", "sign", "(", ")", "\n", "gradient", "=", "gradient", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "div", "(", "image_net_std", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "new_data", "=", "data", ".", "data", "+", "magnitude", "*", "gradient", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "target_features", "=", "model", ".", "get_feature", "(", "new_data", ".", "float", "(", ")", ",", "i", ")", "\n", "target_features", "=", "target_features", ".", "view", "(", "target_features", ".", "shape", "[", "0", "]", ",", "target_features", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "", "noise_gaussian_score", "=", "0", "\n", "for", "id_class", "in", "range", "(", "num_classes", ")", ":", "\n", "                        ", "batch_sample_mean", "=", "mean", "[", "i", "]", "[", "id_class", "]", "\n", "zero_f", "=", "target_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "i", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "id_class", "==", "0", ":", "\n", "                            ", "noise_gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                            ", "noise_gaussian_score", "=", "torch", ".", "cat", "(", "(", "noise_gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "", "", "noise_gaussian_score", ",", "_", "=", "torch", ".", "max", "(", "noise_gaussian_score", ",", "dim", "=", "1", ")", "\n", "value", "[", "magnitude", "]", "[", "i", "]", ".", "append", "(", "noise_gaussian_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "for", "key", "in", "m_list", ":", "\n", "            ", "item", "=", "value", "[", "key", "]", "\n", "# multi layer, each layer: arrays", "\n", "layers_maha", "=", "[", "np", ".", "expand_dims", "(", "np", ".", "concatenate", "(", "item", "[", "i", "]", ",", "axis", "=", "-", "1", ")", ",", "-", "1", ")", "for", "i", "in", "range", "(", "num_output", ")", "]", "\n", "value", "[", "key", "]", "=", "np", ".", "concatenate", "(", "layers_maha", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_LID": [[407, 459], ["model.eval", "LID_recorder.items", "LID_recorder.items", "dict", "range", "tqdm.tqdm", "list", "list", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "range", "list", "range", "numpy.concatenate", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.feature_list", "out_features[].view", "torch.mean", "torch.mean", "torch.mean", "out_features[].cpu().numpy", "[].append", "list", "enumerate", "numpy.concatenate", "list.append", "numpy.ceil", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "out_features[].size", "out_features[].size", "numpy.asarray().reshape", "adv_detectors.mle_batch", "lid_score.reshape.reshape", "np.concatenate.append", "out_features[].cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "min", "min"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.mle_batch"], ["", "", "", "def", "get_LID", "(", "model", ",", "LID_recorder", ",", "test_label", ",", "num_output", ")", ":", "\n", "    ", "'''\n    Compute LID score on adversarial samples\n    return: LID score\n    '''", "\n", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "100", "\n", "\n", "# overlap_list = [10, 20, 30, 40, 50, 60, 70, 80, 90]", "\n", "overlap_list", "=", "[", "20", "]", "\n", "for", "key", ",", "value", "in", "LID_recorder", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "overlap_list", ":", "\n", "            ", "LID_recorder", "[", "key", "]", "[", "i", "]", "=", "list", "(", ")", "\n", "", "LID_recorder", "[", "key", "]", "[", "'overlaps'", "]", "=", "overlap_list", "\n", "\n", "", "for", "key", ",", "value", "in", "LID_recorder", ".", "items", "(", ")", ":", "\n", "\n", "        ", "value", "[", "'features'", "]", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "value", "[", "'features'", "]", "[", "i", "]", "=", "list", "(", ")", "\n", "\n", "# Store features", "\n", "", "total", "=", "0", "\n", "data_len", "=", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "\n", "for", "data_index", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ",", "desc", "=", "f\"Get LID for {key}\"", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "value", "[", "'data'", "]", "[", "total", ":", "min", "(", "data_len", ",", "total", "+", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "test_label", "[", "total", ":", "min", "(", "data_len", ",", "total", "+", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "total", "+=", "batch_size", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", ",", "out_features", "=", "model", ".", "feature_list", "(", "data", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "                ", "out_features", "[", "i", "]", "=", "out_features", "[", "i", "]", ".", "view", "(", "out_features", "[", "i", "]", ".", "size", "(", "0", ")", ",", "out_features", "[", "i", "]", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "[", "i", "]", "=", "torch", ".", "mean", "(", "out_features", "[", "i", "]", ".", "data", ",", "2", ")", "\n", "out_features", "[", "i", "]", "=", "out_features", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "value", "[", "'features'", "]", "[", "i", "]", ".", "append", "(", "np", ".", "asarray", "(", "out_features", "[", "i", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "out_features", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", "\n", "\n", "# Get LID scores for each layer", "\n", "", "", "for", "overlap", "in", "overlap_list", ":", "\n", "            ", "temp", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "                ", "temp_layer", "=", "list", "(", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "value", "[", "'features'", "]", "[", "i", "]", ")", ":", "\n", "                    ", "clean_batch", "=", "LID_recorder", "[", "'clean'", "]", "[", "'features'", "]", "[", "i", "]", "[", "0", "]", "\n", "target_batch", "=", "item", "\n", "lid_score", "=", "mle_batch", "(", "clean_batch", ",", "target_batch", ",", "k", "=", "overlap", ")", "\n", "lid_score", "=", "lid_score", ".", "reshape", "(", "(", "lid_score", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "temp_layer", ".", "append", "(", "lid_score", ")", "\n", "", "temp_layer", "=", "np", ".", "concatenate", "(", "temp_layer", ",", "axis", "=", "0", ")", "\n", "temp", ".", "append", "(", "temp_layer", ")", "\n", "", "value", "[", "overlap", "]", "=", "np", ".", "concatenate", "(", "temp", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.kd_estimator": [[461, 492], ["model.eval", "range", "tqdm.tqdm", "range", "data.cuda.size", "data.cuda.cuda", "range", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.feature_list", "range", "numpy.concatenate", "sklearn.neighbors.KernelDensity().fit", "range", "[].view().mean", "[].append", "[].view().mean.unsqueeze().cpu().numpy", "sklearn.neighbors.KernelDensity", "[].view", "[].view().mean.unsqueeze().cpu", "target[].item", "[].view().mean.unsqueeze"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["def", "kd_estimator", "(", "model", ",", "kd_estimator_record", ",", "train_loader", ",", "num_classes", ",", "num_output", ")", ":", "\n", "# Expand original KD to multi-layer KD", "\n", "# Also, follow code of MAHA use mean value for each featuremap", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "value", "=", "kd_estimator_record", "[", "'clean'", "]", "\n", "for", "id_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "value", "[", "id_class", "]", "=", "{", "i", ":", "[", "]", "for", "i", "in", "range", "(", "num_output", ")", "}", "\n", "\n", "# Store features", "\n", "", "total", "=", "0", "\n", "for", "data", ",", "target", "in", "tqdm", "(", "train_loader", ",", "desc", "=", "f\"Get KD estimetor\"", ")", ":", "\n", "        ", "total", "+=", "data", ".", "size", "(", "0", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "out_features", "=", "model", ".", "feature_list", "(", "data", ")", "\n", "", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "layer_index", "in", "range", "(", "num_output", ")", ":", "\n", "                ", "c", "=", "out_features", "[", "layer_index", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "tmp_feature", "=", "out_features", "[", "layer_index", "]", "[", "i", "]", ".", "view", "(", "c", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "value", "[", "target", "[", "i", "]", ".", "item", "(", ")", "]", "[", "layer_index", "]", ".", "append", "(", "tmp_feature", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "for", "layer_index", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "features", "=", "np", ".", "concatenate", "(", "value", "[", "i", "]", "[", "layer_index", "]", ",", "0", ")", "\n", "kde", "=", "KernelDensity", "(", ")", ".", "fit", "(", "features", ")", "\n", "\n", "value", "[", "i", "]", "[", "layer_index", "]", "=", "kde", "\n", "\n", "", "", "value", "[", "'num_classes'", "]", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_kd_score": [[493, 528], ["model.eval", "KD_recorder.items", "KD_recorder.items", "range", "tqdm.tqdm", "list", "range", "numpy.concatenate", "list", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.array", "list.append", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.feature_list", "range", "numpy.expand_dims", "numpy.ceil", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "output.argmax().detach().cpu().numpy", "out_features[].view().mean().cpu().numpy", "range", "value[].append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "output.argmax().detach().cpu", "out_features[].view().mean().cpu", "[].score_samples", "min", "tmp_feature[].reshape", "output.argmax().detach", "out_features[].view().mean", "min", "output.argmax", "out_features[].view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["", "def", "get_kd_score", "(", "model", ",", "KD_recorder", ",", "test_label", ",", "num_classes", ",", "kd_estimator_record", ",", "num_output", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "100", "\n", "clean_kdes", "=", "kd_estimator_record", "[", "'clean'", "]", "\n", "\n", "for", "key", ",", "value", "in", "KD_recorder", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "value", "[", "i", "]", "=", "list", "(", ")", "\n", "\n", "", "", "for", "key", ",", "value", "in", "KD_recorder", ".", "items", "(", ")", ":", "\n", "        ", "total", "=", "0", "\n", "data_len", "=", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "\n", "for", "data_index", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ",", "desc", "=", "f\"Get KD for {key}\"", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "value", "[", "'data'", "]", "[", "total", ":", "min", "(", "data_len", ",", "total", "+", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", ".", "requires_grad", "=", "True", "\n", "target", "=", "torch", ".", "from_numpy", "(", "test_label", "[", "total", ":", "min", "(", "data_len", ",", "total", "+", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "total", "+=", "batch_size", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", ",", "out_features", "=", "model", ".", "feature_list", "(", "data", ")", "\n", "for", "layer_index", "in", "range", "(", "num_output", ")", ":", "\n", "                    ", "output_id", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n", ",", "c", "=", "out_features", "[", "layer_index", "]", ".", "shape", "[", "0", "]", ",", "out_features", "[", "layer_index", "]", ".", "shape", "[", "1", "]", "\n", "tmp_feature", "=", "out_features", "[", "layer_index", "]", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "id", "in", "range", "(", "n", ")", ":", "\n", "                        ", "kd_score", "=", "clean_kdes", "[", "output_id", "[", "id", "]", "]", "[", "layer_index", "]", ".", "score_samples", "(", "tmp_feature", "[", "id", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "value", "[", "layer_index", "]", ".", "append", "(", "kd_score", ")", "\n", "\n", "", "", "", "", "result_scores", "=", "list", "(", ")", "\n", "for", "layer_index", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "value", "[", "layer_index", "]", "=", "np", ".", "array", "(", "value", "[", "layer_index", "]", ")", "\n", "result_scores", ".", "append", "(", "np", ".", "expand_dims", "(", "value", "[", "layer_index", "]", ",", "-", "1", ")", ")", "\n", "", "value", "[", "'kd_score'", "]", "=", "np", ".", "concatenate", "(", "result_scores", ",", "-", "1", ")", "\n", "# print(value['kd_score'].mean())", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_svm_score": [[530, 584], ["model.eval", "svm_recorder.items", "svm_recorder.items", "int", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "SVC", "SVC.fit", "sklearn.metrics.roc_auc_score", "svm_recorder.items", "list", "list", "tqdm.tqdm", "numpy.concatenate", "SVC.predict_proba().transpose", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "svm_recorder.keys", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.zeros", "SVC.predict_proba().transpose", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.feature_list", "out_features[].detach().cpu().numpy", "value[].append", "SVC.predict_proba", "numpy.ceil", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "SVC.predict_proba", "out_features[].detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "out_features[].detach", "min"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["", "", "def", "get_svm_score", "(", "model", ",", "svm_recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "100", "\n", "split", "=", "0.3", "\n", "\n", "for", "key", ",", "value", "in", "svm_recorder", ".", "items", "(", ")", ":", "\n", "        ", "value", "[", "'scores'", "]", "=", "list", "(", ")", "\n", "value", "[", "'feature'", "]", "=", "list", "(", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "svm_recorder", ".", "items", "(", ")", ":", "\n", "        ", "total", "=", "0", "\n", "data_len", "=", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "\n", "for", "data_index", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ",", "desc", "=", "f\"Get SVM for {key}\"", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "value", "[", "'data'", "]", "[", "total", ":", "min", "(", "data_len", ",", "total", "+", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", ".", "requires_grad", "=", "True", "\n", "total", "+=", "batch_size", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", ",", "out_features", "=", "model", ".", "feature_list", "(", "data", ")", "\n", "last_feature", "=", "out_features", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "value", "[", "'feature'", "]", ".", "append", "(", "last_feature", ")", "\n", "\n", "", "", "value", "[", "'feature'", "]", "=", "np", ".", "concatenate", "(", "value", "[", "'feature'", "]", ")", "\n", "\n", "", "keys", "=", "[", "*", "svm_recorder", ".", "keys", "(", ")", "]", "\n", "key_clean", ",", "key_noise", ",", "key_adv", "=", "keys", "[", "0", "]", ",", "keys", "[", "2", "]", ",", "keys", "[", "1", "]", "\n", "num_test", "=", "int", "(", "value", "[", "'feature'", "]", ".", "shape", "[", "0", "]", "*", "split", ")", "\n", "total_num", "=", "value", "[", "'feature'", "]", ".", "shape", "[", "0", "]", "\n", "num_train", "=", "total_num", "-", "num_test", "\n", "\n", "X_train", "=", "np", ".", "concatenate", "(", "[", "svm_recorder", "[", "key_clean", "]", "[", "'feature'", "]", "[", ":", "-", "num_test", "]", ",", "svm_recorder", "[", "key_noise", "]", "[", "'feature'", "]", "[", ":", "-", "num_test", "]", ",", "svm_recorder", "[", "key_adv", "]", "[", "'feature'", "]", "[", ":", "-", "num_test", "]", "]", ")", "\n", "Y_train", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "num_train", ")", ",", "np", ".", "ones", "(", "num_train", ")", ",", "np", ".", "zeros", "(", "num_train", ")", "]", ")", "\n", "\n", "X_test", "=", "np", ".", "concatenate", "(", "[", "svm_recorder", "[", "key_clean", "]", "[", "'feature'", "]", "[", "-", "num_test", ":", "]", ",", "svm_recorder", "[", "key_noise", "]", "[", "'feature'", "]", "[", "-", "num_test", ":", "]", ",", "svm_recorder", "[", "key_adv", "]", "[", "'feature'", "]", "[", "-", "num_test", ":", "]", "]", ")", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "num_test", ")", ",", "np", ".", "ones", "(", "num_test", ")", ",", "np", ".", "zeros", "(", "num_test", ")", "]", ")", "\n", "\n", "# Train RBF-SVM", "\n", "from", "sklearn", ".", "svm", "import", "SVC", "\n", "rbf_svc", "=", "SVC", "(", "kernel", "=", "'rbf'", ",", "probability", "=", "True", ")", "\n", "rbf_svc", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "\n", "prediction", "=", "rbf_svc", ".", "predict_proba", "(", "X_test", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "from", "sklearn", ".", "metrics", "import", "roc_auc_score", "\n", "svm_auc", "=", "roc_auc_score", "(", "Y_test", ",", "prediction", ")", "\n", "for", "key", ",", "value", "in", "svm_recorder", ".", "items", "(", ")", ":", "\n", "        ", "value", "[", "'scores'", "]", "=", "rbf_svc", ".", "predict_proba", "(", "value", "[", "'feature'", "]", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "\n", "", "svm_recorder", "[", "'model'", "]", "=", "rbf_svc", "\n", "\n", "return", "svm_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.train_DNN_classifier": [[664, 714], ["model.cuda.cuda", "model.cuda.eval", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "int", "int", "int", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "range", "adv_detectors.DNN_CNN_Feature", "dict", "DNN_recorder.keys", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model.cuda.feature_list", "numpy.ones", "numpy.ones", "numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.ones", "numpy.ones", "numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["", "", "def", "train_DNN_classifier", "(", "model", ",", "DNN_recorder", ",", "num_cnn_layer", "=", "13", ")", ":", "\n", "    ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "keys", "=", "[", "*", "DNN_recorder", ".", "keys", "(", ")", "]", "\n", "key_clean", ",", "key_noise", ",", "key_adv", "=", "keys", "[", "0", "]", ",", "keys", "[", "2", "]", ",", "keys", "[", "1", "]", "\n", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "DNN_recorder", "[", "key_clean", "]", "[", "'data'", "]", "[", ":", "2", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "test_features", "=", "model", ".", "feature_list", "(", "test_data", ")", "[", "1", "]", "[", ":", "num_cnn_layer", "]", "\n", "num_channels", "=", "[", "feature", ".", "shape", "[", "1", "]", "for", "feature", "in", "test_features", "]", "\n", "DNN_recorder", "[", "'num_cnn_layer'", "]", "=", "num_cnn_layer", "\n", "\n", "num_train_clean", "=", "int", "(", "DNN_recorder", "[", "key_clean", "]", "[", "'data'", "]", ".", "shape", "[", "0", "]", "*", "0.7", ")", "\n", "num_train_noise", "=", "int", "(", "DNN_recorder", "[", "key_noise", "]", "[", "'data'", "]", ".", "shape", "[", "0", "]", "*", "0.7", ")", "\n", "num_train_adv", "=", "int", "(", "DNN_recorder", "[", "key_adv", "]", "[", "'data'", "]", ".", "shape", "[", "0", "]", "*", "0.7", ")", "\n", "num_test_clean", "=", "DNN_recorder", "[", "key_clean", "]", "[", "'data'", "]", ".", "shape", "[", "0", "]", "-", "num_train_clean", "\n", "num_test_noise", "=", "DNN_recorder", "[", "key_noise", "]", "[", "'data'", "]", ".", "shape", "[", "0", "]", "-", "num_train_noise", "\n", "num_test_adv", "=", "DNN_recorder", "[", "key_adv", "]", "[", "'data'", "]", ".", "shape", "[", "0", "]", "-", "num_train_adv", "\n", "\n", "train_data", "=", "np", ".", "concatenate", "(", "[", "DNN_recorder", "[", "key_clean", "]", "[", "'data'", "]", "[", ":", "num_train_clean", "]", ",", "\n", "DNN_recorder", "[", "key_noise", "]", "[", "'data'", "]", "[", ":", "num_train_noise", "]", ",", "\n", "DNN_recorder", "[", "key_adv", "]", "[", "'data'", "]", "[", ":", "num_train_adv", "]", "]", ")", "\n", "train_label", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "num_train_clean", ")", ",", "\n", "np", ".", "ones", "(", "num_train_noise", ")", ",", "\n", "np", ".", "zeros", "(", "num_train_adv", ")", "]", ")", "\n", "train_data", "=", "torch", ".", "from_numpy", "(", "train_data", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "train_label", "=", "torch", ".", "from_numpy", "(", "train_label", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "test_data", "=", "np", ".", "concatenate", "(", "[", "DNN_recorder", "[", "key_clean", "]", "[", "'data'", "]", "[", "num_train_clean", ":", "]", ",", "\n", "DNN_recorder", "[", "key_noise", "]", "[", "'data'", "]", "[", "num_train_noise", ":", "]", ",", "\n", "DNN_recorder", "[", "key_adv", "]", "[", "'data'", "]", "[", "num_train_adv", ":", "]", "]", ")", "\n", "test_label", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "num_test_clean", ")", ",", "\n", "np", ".", "ones", "(", "num_test_noise", ")", ",", "\n", "np", ".", "zeros", "(", "num_test_adv", ")", "]", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "test_label", "=", "torch", ".", "from_numpy", "(", "test_label", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "id_layer", "in", "range", "(", "0", ",", "num_cnn_layer", ")", ":", "\n", "        ", "cls_model", "=", "DNN_CNN_Feature", "(", "num_channels", "[", "id_layer", "]", ",", "train_data", ",", "train_label", ",", "model", ",", "id_layer", ",", "[", "test_data", ",", "test_label", "]", ",", "torch", ".", "from_numpy", "(", "DNN_recorder", "[", "key_clean", "]", "[", "'data'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "DNN_recorder", "[", "key_noise", "]", "[", "'data'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "DNN_recorder", "[", "key_adv", "]", "[", "'data'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "\n", "DNN_recorder", "[", "id_layer", "]", "=", "dict", "(", ")", "\n", "DNN_recorder", "[", "id_layer", "]", "[", "'model'", "]", "=", "cls_model", "\n", "DNN_recorder", "[", "id_layer", "]", "[", "'auc'", "]", "=", "cls_model", ".", "final_auc", "\n", "DNN_recorder", "[", "id_layer", "]", "[", "'clean_pred'", "]", "=", "cls_model", ".", "clean_pred", "\n", "DNN_recorder", "[", "id_layer", "]", "[", "'noise_pred'", "]", "=", "cls_model", ".", "noise_pred", "\n", "DNN_recorder", "[", "id_layer", "]", "[", "'adv_pred'", "]", "=", "cls_model", ".", "adv_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.build_dknn": [[716, 770], ["tqdm.tqdm", "numpy.concatenate", "enumerate", "enumerate", "enumerate", "torch.from_numpy().float().cuda.cuda", "np.concatenate.append", "numpy.concatenate", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "int", "list", "numpy.concatenate", "sklearn.neighbors.NearestNeighbors().fit", "dict", "enumerate", "list", "enumerate", "numpy.concatenate().sum", "DkNN_recorder.keys", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "scr_model.feature_list", "enumerate", "range", "range", "range", "enumerate", "preds[].append", "numpy.concatenate", "np.concatenate().sum.append", "features[].append", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "scr_model.feature_list", "[].append", "pred.argmax().detach().cpu().numpy", "sklearn.neighbors.NearestNeighbors", "NearestNeighbors().fit.kneighbors", "neighbors_correct.sum", "numpy.expand_dims", "numpy.concatenate", "item.view().mean().detach().cpu().numpy", "item.view().mean().detach().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pred.argmax().detach().cpu", "neighbors_classes.transpose", "item.view().mean().detach().cpu", "item.view().mean().detach().cpu", "pred.argmax().detach", "item.view().mean().detach", "item.view().mean().detach", "pred.argmax", "item.view().mean", "item.view().mean", "item.view", "item.view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["def", "build_dknn", "(", "scr_model", ",", "DkNN_recorder", ",", "train_loader", ",", "label", ",", "num_k", "=", "5", ",", "num_features", "=", "15", ")", ":", "\n", "    ", "keys", "=", "[", "*", "DkNN_recorder", ".", "keys", "(", ")", "]", "\n", "key_clean", ",", "key_noise", ",", "key_adv", "=", "keys", "[", "0", "]", ",", "keys", "[", "2", "]", ",", "keys", "[", "1", "]", "\n", "from", "tqdm", "import", "tqdm", "\n", "features", "=", "[", "[", "]", "for", "i", "in", "range", "(", "num_features", ")", "]", "\n", "targets", "=", "[", "]", "\n", "for", "data", ",", "target", "in", "tqdm", "(", "train_loader", ",", "desc", "=", "'Record train features'", ")", ":", "\n", "        ", "data", "=", "data", ".", "cuda", "(", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "out_features", "=", "scr_model", ".", "feature_list", "(", "data", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "out_features", ")", ":", "\n", "                ", "features", "[", "index", "]", ".", "append", "(", "item", ".", "view", "(", "item", ".", "shape", "[", "0", "]", ",", "item", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "", "features", "=", "[", "np", ".", "concatenate", "(", "item", ")", "for", "item", "in", "features", "]", "\n", "targets", "=", "np", ".", "concatenate", "(", "targets", ")", "\n", "DkNN_recorder", "[", "'labels'", "]", "=", "targets", "\n", "\n", "infer_features", "=", "[", "[", "[", "]", "for", "i", "in", "range", "(", "num_features", ")", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "preds", "=", "[", "[", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "for", "index", ",", "key", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "batch_size", "=", "100", "\n", "data", "=", "torch", ".", "from_numpy", "(", "DkNN_recorder", "[", "key", "]", "[", "'data'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "num_batches", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "//", "batch_size", ")", "\n", "for", "id_batch", "in", "list", "(", "range", "(", "num_batches", ")", ")", ":", "\n", "            ", "input_patch", "=", "data", "[", "id_batch", "*", "batch_size", ":", "(", "id_batch", "+", "1", ")", "*", "batch_size", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", ",", "test_feature", "=", "scr_model", ".", "feature_list", "(", "input_patch", ")", "\n", "", "for", "id_layer", ",", "item", "in", "enumerate", "(", "test_feature", ")", ":", "\n", "                ", "infer_features", "[", "index", "]", "[", "id_layer", "]", ".", "append", "(", "item", ".", "view", "(", "item", ".", "shape", "[", "0", "]", ",", "item", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "preds", "[", "index", "]", ".", "append", "(", "pred", ".", "argmax", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "infer_features", "[", "index", "]", "=", "[", "np", ".", "concatenate", "(", "item", ")", "for", "item", "in", "infer_features", "[", "index", "]", "]", "\n", "preds", "[", "index", "]", "=", "np", ".", "concatenate", "(", "preds", "[", "index", "]", ")", "\n", "\n", "", "for", "id_layer", ",", "item", "in", "enumerate", "(", "features", ")", ":", "\n", "# if id_layer == 0 or id_layer == 14:", "\n", "#     import ipdb; ipdb.set_trace()", "\n", "        ", "knn_model", "=", "NearestNeighbors", "(", "n_neighbors", "=", "num_k", ",", "metric", "=", "'cosine'", ")", ".", "fit", "(", "item", ")", "\n", "DkNN_recorder", "[", "id_layer", "]", "=", "dict", "(", ")", "\n", "DkNN_recorder", "[", "id_layer", "]", "[", "'model'", "]", "=", "knn_model", "\n", "for", "id_key", ",", "key", "in", "enumerate", "(", "keys", ")", ":", "\n", "            ", "neighbors", "=", "knn_model", ".", "kneighbors", "(", "infer_features", "[", "id_key", "]", "[", "id_layer", "]", ")", "[", "1", "]", "\n", "neighbors_classes", "=", "targets", "[", "neighbors", "]", "\n", "neighbors_correct", "=", "(", "neighbors_classes", ".", "transpose", "(", ")", "==", "preds", "[", "id_key", "]", ")", ".", "transpose", "(", ")", "\n", "dknn_scores", "=", "neighbors_correct", ".", "sum", "(", "-", "1", ")", "/", "num_k", "\n", "DkNN_recorder", "[", "id_layer", "]", "[", "key", "]", "=", "dknn_scores", "\n", "\n", "", "", "for", "id_key", ",", "key", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "ensamble", "=", "list", "(", ")", "\n", "for", "id_layer", ",", "item", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "ensamble", ".", "append", "(", "np", ".", "expand_dims", "(", "DkNN_recorder", "[", "id_layer", "]", "[", "key", "]", ",", "-", "1", ")", ")", "\n", "", "ensamble", "=", "np", ".", "concatenate", "(", "ensamble", ",", "axis", "=", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "DkNN_recorder", "[", "key", "]", "[", "'score'", "]", "=", "ensamble", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_bu_scores": [[771, 794], ["scr_model.set_dropout", "bu_recorder.items", "bu_recorder.items", "list", "tqdm.tqdm", "numpy.concatenate", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "value[].append", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "list", "range", "numpy.concatenate", "np.concatenate.std", "numpy.ceil", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "scr_model", "np.concatenate.append", "output[].detach().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "output[].detach().cpu", "min", "output[].detach"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.set_dropout"], ["", "", "def", "get_bu_scores", "(", "scr_model", ",", "bu_recorder", ")", ":", "\n", "    ", "scr_model", ".", "set_dropout", "(", "True", ")", "\n", "batch_size", "=", "100", "\n", "\n", "for", "key", ",", "value", "in", "bu_recorder", ".", "items", "(", ")", ":", "\n", "        ", "value", "[", "'scores'", "]", "=", "list", "(", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "bu_recorder", ".", "items", "(", ")", ":", "\n", "        ", "total", "=", "0", "\n", "data_len", "=", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "\n", "for", "data_index", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ",", "desc", "=", "f\"Get BU for {key}\"", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "value", "[", "'data'", "]", "[", "total", ":", "min", "(", "data_len", ",", "total", "+", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "total", "+=", "batch_size", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "results", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "                    ", "output", "=", "scr_model", "(", "data", ")", "\n", "# output = torch.nn.functional.softmax(output, -1)", "\n", "results", ".", "append", "(", "output", "[", ":", ",", "0", ":", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "results", "=", "np", ".", "concatenate", "(", "results", ",", "-", "1", ")", "\n", "", "value", "[", "'scores'", "]", ".", "append", "(", "results", ".", "std", "(", "-", "1", ")", ")", "\n", "", "value", "[", "'scores'", "]", "=", "np", ".", "concatenate", "(", "value", "[", "'scores'", "]", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.adv_detectors.get_GMM_scores": [[797, 838], ["scr_model.cuda.cuda", "scr_model.cuda.eval", "range", "os.path.join", "range", "dict", "range", "tqdm.tqdm", "range", "GMM_recorder.keys", "list", "range", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "numpy.concatenate", "open", "pickle.load", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "scr_model.cuda.feature_list", "range", "os.path.join", "numpy.ceil", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "features[].view().mean().cpu().numpy", "[].score_samples", "[].append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "features[].view().mean().cpu", "features[].view().mean", "min", "features[].view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["def", "get_GMM_scores", "(", "scr_model", ",", "GMM_recorder", ",", "root_dir", ",", "num_layers", "=", "15", ",", "num_classes", "=", "2", ")", ":", "\n", "# Need to gemm GMM models first in gen_GMM.py", "\n", "\n", "    ", "scr_model", "=", "scr_model", ".", "cuda", "(", ")", "\n", "scr_model", ".", "eval", "(", ")", "\n", "\n", "keys", "=", "[", "*", "GMM_recorder", ".", "keys", "(", ")", "]", "\n", "key_clean", ",", "key_noise", ",", "key_adv", "=", "keys", "[", "0", "]", ",", "keys", "[", "2", "]", ",", "keys", "[", "1", "]", "\n", "\n", "for", "_", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "GMM_recorder", "[", "_", "]", "=", "dict", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "GMM_recorder", "[", "_", "]", "[", "key", "]", "=", "list", "(", ")", "\n", "\n", "", "", "gmm_model_pth", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'GMM'", ")", "\n", "for", "id_layer", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "for", "id_class", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "gmm_model_pth", ",", "f'Layer_{id_layer}_class_{id_class}.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "gmm_model", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "GMM_recorder", "[", "id_layer", "]", "[", "'model'", "]", "=", "gmm_model", "\n", "\n", "", "", "batch_size", "=", "100", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "value", "=", "GMM_recorder", "[", "key", "]", "\n", "total", "=", "0", "\n", "data_len", "=", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "\n", "for", "data_index", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "value", "[", "'data'", "]", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ",", "desc", "=", "f\"Get GMM for {key}\"", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "value", "[", "'data'", "]", "[", "total", ":", "min", "(", "data_len", ",", "total", "+", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "total", "+=", "batch_size", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_", ",", "features", "=", "scr_model", ".", "feature_list", "(", "data", ")", "\n", "for", "id_layer", "in", "range", "(", "num_layers", ")", ":", "\n", "                    ", "n", ",", "c", "=", "features", "[", "id_layer", "]", ".", "shape", "[", "0", "]", ",", "features", "[", "id_layer", "]", ".", "shape", "[", "1", "]", "\n", "temp", "=", "features", "[", "id_layer", "]", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "GMM_recorder", "[", "id_layer", "]", "[", "'model'", "]", ".", "score_samples", "(", "temp", ")", "\n", "# probs = GMM_recorder[id_layer]['model'].predict_proba(temp)", "\n", "# import ipdb; ipdb.set_trace()", "\n", "GMM_recorder", "[", "id_layer", "]", "[", "key", "]", ".", "append", "(", "scores", ")", "\n", "", "", "", "for", "id_layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "GMM_recorder", "[", "id_layer", "]", "[", "key", "]", "=", "np", ".", "concatenate", "(", "GMM_recorder", "[", "id_layer", "]", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.my_sequential.__init__": [[12, 20], ["torch.Module.__init__", "enumerate", "setattr", "str", "type"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "layers", ")", ":", "\n", "        ", "super", "(", "my_sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_feature", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "str", "(", "i", ")", ",", "layer", ")", "\n", "if", "type", "(", "layer", ")", "==", "torch", ".", "nn", ".", "ReLU", ":", "\n", "                ", "self", ".", "num_feature", "+=", "1", "\n", "", "", "self", ".", "num_layers", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.my_sequential.forward": [[21, 30], ["range", "getattr", "feature.append", "str", "type", "getattr", "len", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ",", "return_index", "=", "None", ")", ":", "\n", "        ", "feature", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "if", "get_features", "and", "type", "(", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", ")", "==", "torch", ".", "nn", ".", "ReLU", ":", "\n", "                ", "feature", ".", "append", "(", "x", ")", "\n", "if", "len", "(", "feature", ")", "-", "1", "==", "return_index", ":", "return", "feature", "[", "-", "1", "]", "\n", "", "", "if", "get_features", ":", "return", "x", ",", "feature", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.__init__": [[49, 53], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.reset": [[54, 59], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.update": [[60, 65], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.__str__": [[66, 69], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.ProgressMeter.__init__": [[71, 75], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.ProgressMeter.display": [[76, 80], ["logging.info", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "logging", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.ProgressMeter._get_batch_fmtstr": [[81, 85], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.accuracy": [[31, 46], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.gen_results_strings": [[86, 95], ["range", "range"], "function", ["None"], ["", "", "def", "gen_results_strings", "(", "label", ",", "results_raw", ",", "results_adv", ")", ":", "\n", "    ", "out_string", "=", "f\"Label {label} \\n\"", "\n", "raw_str", "=", "\"Before Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_raw", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "raw_str", "+=", "f\"Class: {i} Prob: {results_raw[i]} \\n\"", "\n", "", "adv_str", "=", "\"After Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_adv", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adv_str", "+=", "f\"Class: {i} Prob: {results_adv[i]} \\n\"", "\n", "", "return", "out_string", "+", "raw_str", "+", "adv_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_TPR_at_TNR": [[96, 101], ["numpy.percentile"], "function", ["None"], ["", "def", "get_TPR_at_TNR", "(", "X_data", ",", "num_normal", ",", "rate", "=", "10", ")", ":", "\n", "    ", "normal_data", "=", "X_data", "[", ":", "num_normal", "]", "\n", "adv_data", "=", "X_data", "[", "num_normal", ":", "]", "\n", "threshold", "=", "np", ".", "percentile", "(", "normal_data", ",", "rate", ",", "0", ")", "\n", "return", "1", "-", "(", "adv_data", ">", "threshold", ")", ".", "sum", "(", ")", "/", "adv_data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.check_adv_samples": [[103, 116], ["model.eval", "data_dict.items", "range", "print", "int", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "[].argmax", "numpy.floor", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "float", "model.feature_list", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.network.infer_Cls_Net_vgg.feature_list"], ["def", "check_adv_samples", "(", "data_dict", ",", "model", ",", "label", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "key", ",", "data", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "batch_size", "=", "100", "\n", "total", "=", "0", "\n", "bingo", "=", "0", "\n", "for", "data_index", "in", "range", "(", "int", "(", "np", ".", "floor", "(", "data", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "data_dict", "[", "key", "]", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", "\n", "total", "+=", "batch_size", "\n", "output", "=", "model", ".", "feature_list", "(", "data", ")", "[", "0", "]", ".", "argmax", "(", "1", ")", "\n", "bingo", "+=", "(", "target", "==", "output", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'Check data: {key} ACC {float(bingo / total)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_pairs_auc": [[117, 143], ["int", "sklearn.metrics.roc_auc_score", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.mean", "utils.get_TPR_at_TNR", "numpy.ones_like", "numpy.ones_like", "numpy.zeros_like", "numpy.ones_like", "numpy.ones_like", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_TPR_at_TNR"], ["", "", "def", "get_pairs_auc", "(", "normal", ",", "noise", ",", "adv", ",", "split", "=", "0.3", ",", "adv_test", "=", "False", ",", "negative", "=", "True", ",", "get_rate", "=", "False", ")", ":", "\n", "# Gen train test pairs and compute auc", "\n", "# Input [num_data] output auc score", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "if", "not", "adv_test", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "]", ")", "\n", "\n", "# They are all < 0", "\n", "", "if", "X_data", ".", "mean", "(", ")", ">", "0", "and", "negative", ":", "X_data", "=", "-", "X_data", "\n", "# Z_score", "\n", "# X_data = scale(X_data)", "\n", "\n", "if", "not", "adv_test", ":", "\n", "        ", "Y_data", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "zeros_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "Y_data", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "zeros_like", "(", "adv", ")", "]", ")", "\n", "# if normal.mean() < adv.mean():", "\n", "#     Y_data = 1 - Y_data", "\n", "", "aucroc", "=", "roc_auc_score", "(", "Y_data", ",", "X_data", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "X_data", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_auc": [[144, 171], ["numpy.concatenate", "sklearn.preprocessing.StandardScaler().fit", "StandardScaler().fit.transform", "int", "numpy.concatenate", "numpy.concatenate", "sklearn.linear_model.LogisticRegression().fit", "numpy.concatenate", "numpy.concatenate", "LogisticRegression().fit.predict_proba().transpose", "sklearn.metrics.roc_auc_score", "sklearn.preprocessing.StandardScaler", "numpy.ones", "numpy.ones", "numpy.zeros", "sklearn.linear_model.LogisticRegression", "numpy.ones", "numpy.ones", "numpy.zeros", "LogisticRegression().fit.predict_proba"], "function", ["None"], ["", "def", "logits_regression_auc", "(", "normal", ",", "noise", ",", "adv", ",", "split", "=", "0.3", ")", ":", "\n", "# Input [num_data, num_features] ", "\n", "# MinMaxScale", "\n", "# Train logits regression and eval", "\n", "# finally output auc score", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", ",", "noise", ",", "adv", "]", ")", "\n", "scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "X_total", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "normal", "=", "X_total", "[", ":", "num_data", "]", "\n", "noise", "=", "X_total", "[", "num_data", ":", "2", "*", "num_data", "]", "\n", "adv", "=", "X_total", "[", "2", "*", "num_data", ":", "]", "\n", "\n", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "X_train", "=", "np", ".", "concatenate", "(", "[", "normal", "[", ":", "-", "num_test", "]", ",", "noise", "[", ":", "-", "num_test", "]", ",", "adv", "[", ":", "-", "num_test", "]", "]", ")", "\n", "Y_train", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "lr", "=", "LogisticRegression", "(", "n_jobs", "=", "-", "1", ",", "max_iter", "=", "500", ",", "solver", "=", "'lbfgs'", ")", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "X_test", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "pred_prob", "=", "lr", ".", "predict_proba", "(", "X_test", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "return", "roc_auc_score", "(", "Y_test", ",", "pred_prob", ")", ",", "[", "lr", ",", "scaler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_infer": [[172, 187], ["int", "numpy.concatenate", "scaler.transform", "numpy.concatenate", "sklearn.metrics.roc_auc_score", "lr.predict_proba().transpose", "numpy.ones", "numpy.ones", "numpy.zeros", "utils.get_TPR_at_TNR", "lr.predict_proba"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_TPR_at_TNR"], ["", "def", "logits_regression_infer", "(", "normal", ",", "noise", ",", "adv", ",", "lr", ",", "split", "=", "0.3", ",", "get_rate", "=", "False", ")", ":", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "lr", ",", "scaler", "=", "lr", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "]", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "adv", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "pred_prob", "=", "lr", ".", "predict_proba", "(", "X_total", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "\n", "aucroc", "=", "roc_auc_score", "(", "Y_test", ",", "pred_prob", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "pred_prob", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.logits_regression_infer_raw": [[188, 203], ["int", "numpy.concatenate", "scaler.transform", "numpy.concatenate", "sklearn.metrics.roc_auc_score", "lr.predict_proba().transpose", "numpy.ones", "numpy.ones", "numpy.zeros", "utils.get_TPR_at_TNR", "lr.predict_proba"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.get_TPR_at_TNR"], ["", "def", "logits_regression_infer_raw", "(", "normal", ",", "noise", ",", "adv", ",", "lr", ",", "split", "=", "0.3", ",", "get_rate", "=", "False", ")", ":", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "lr", ",", "scaler", "=", "lr", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "adv", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "pred_prob", "=", "lr", ".", "predict_proba", "(", "X_total", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "\n", "aucroc", "=", "roc_auc_score", "(", "Y_test", ",", "pred_prob", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "pred_prob", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__init__": [[394, 545], ["list", "list.append", "list.append", "list.append", "torchvision.Compose", "os.path.join", "os.path.join", "list", "os.path.join", "os.path.join", "dict", "range", "os.path.join", "datasets.APTOS.target_class_list.keys", "torchvision.Resize", "list.append", "list.append", "list.append", "list.append", "torchvision.ToTensor", "torchvision.Normalize", "os.path.exists", "os.mkdir", "os.listdir", "tqdm.tqdm.tqdm", "open", "csv.reader", "os.path.exists", "logging.warning", "open", "logging.info", "list", "int", "datasets.APTOS.class_dict[].append", "list", "torch.cat", "list", "list", "datasets.APTOS.target_class_list[].remove", "print", "open", "logging.info", "pickle.load", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomVerticalFlip", "torchvision.CenterCrop", "PIL.Image.open", "numpy.array().transpose", "datasets.generate_spatial_bounding_box", "PIL.Image.fromarray().resize", "PIL.Image.fromarray().resize.save", "datasets.APTOS.image_list.append", "open", "list", "random.shuffle", "numpy.array", "sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "pickle.dump", "pickle.load", "len", "int", "os.path.join", "datasets.APTOS.transform", "datasets.APTOS.target_image_patch.append", "range", "range", "os.path.exists", "open", "list", "pickle.dump", "os.path.join", "os.path.join", "dict", "datasets.APTOS.image_list[].tolist", "datasets.APTOS.image_list[].tolist", "list.append", "int", "PIL.Image.open().convert", "datasets.APTOS.unsqueeze", "int", "random.choice", "datasets.APTOS.attack_list.append", "datasets.APTOS.class_selected_list[].append", "datasets.APTOS.temp_list.append", "numpy.array", "PIL.Image.fromarray", "range", "numpy.array().transpose.transpose", "PIL.Image.open", "int"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.saver.Saver.mkdir", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.generate_spatial_bounding_box"], ["    ", "def", "__init__", "(", "self", ",", "root_pth", "=", "'/home1/qsyao/dataset/APTOS/'", ",", "mode", "=", "'train'", ",", "num_fold", "=", "0", ",", "targeted", "=", "False", ",", "rand_pairs", "=", "False", ",", "target_class", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "num_classes_selected", "=", "2", "\n", "# Fixed : targeted attack:", "\n", "# rand_pairs control mode", "\n", "targeted", "=", "False", "\n", "\n", "transform_list", "=", "list", "(", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "280", ")", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "256", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomVerticalFlip", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "256", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "## Resize the large images", "\n", "self", ".", "raw_dir_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'train_images'", ")", "\n", "self", ".", "img_dir_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'processed_images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir_pth", ")", ":", "\n", "# if True:", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "img_dir_pth", ")", "\n", "files", "=", "os", ".", "listdir", "(", "self", ".", "raw_dir_pth", ")", "\n", "for", "name", "in", "tqdm", "(", "files", ",", "desc", "=", "'Preprocess Resize'", ")", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_dir_pth", ",", "name", ")", ")", "\n", "array", "=", "np", ".", "array", "(", "image", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "bbox_start", ",", "bbox_end", "=", "generate_spatial_bounding_box", "(", "array", ")", "\n", "array", "=", "array", "[", ":", ",", "bbox_start", "[", "0", "]", ":", "bbox_end", "[", "0", "]", ",", "bbox_start", "[", "1", "]", ":", "bbox_end", "[", "1", "]", "]", "\n", "image", "=", "Image", ".", "fromarray", "(", "array", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", ".", "resize", "(", "[", "256", ",", "256", "]", ")", "\n", "image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir_pth", ",", "name", ")", ")", "\n", "\n", "", "", "self", ".", "image_list", "=", "list", "(", ")", "\n", "\n", "self", ".", "train_csv_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'train.csv'", ")", "\n", "\n", "with", "open", "(", "self", ".", "train_csv_pth", ",", "'r'", ")", "as", "csv_file", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "csv_file", ")", "\n", "\n", "for", "item", "in", "reader", ":", "\n", "                ", "if", "reader", ".", "line_num", "==", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "self", ".", "image_list", ".", "append", "(", "[", "item", "[", "0", "]", ",", "item", "[", "1", "]", "]", ")", "\n", "\n", "# Creat 2-8 split", "\n", "", "", "import", "random", "\n", "pickle_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'plan.pkl'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pickle_pth", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "\"Generate 8-2 split to {}\"", ".", "format", "(", "pickle_pth", ")", ")", "\n", "with", "open", "(", "pickle_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "split_5_folds", "=", "list", "(", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "image_list", ")", "\n", "self", ".", "image_list", "=", "np", ".", "array", "(", "self", ".", "image_list", ")", "\n", "kl_fold", "=", "KFold", "(", ")", "\n", "splits", "=", "kl_fold", ".", "split", "(", "self", ".", "image_list", ")", "\n", "for", "train_index", ",", "test_index", "in", "splits", ":", "\n", "                    ", "k_split", "=", "dict", "(", ")", "\n", "train_list", "=", "self", ".", "image_list", "[", "train_index", "]", ".", "tolist", "(", ")", "\n", "test_list", "=", "self", ".", "image_list", "[", "test_index", "]", ".", "tolist", "(", ")", "\n", "k_split", "[", "'train_list'", "]", "=", "train_list", "\n", "k_split", "[", "'test_list'", "]", "=", "test_list", "\n", "split_5_folds", ".", "append", "(", "k_split", ")", "\n", "", "pickle", ".", "dump", "(", "split_5_folds", ",", "f", ")", "\n", "\n", "", "", "with", "open", "(", "pickle_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "logging", ".", "info", "(", "\"Load 8-2 split from {}\"", ".", "format", "(", "pickle_pth", ")", ")", "\n", "split_file", "=", "pickle", ".", "load", "(", "f", ")", "[", "num_fold", "]", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "image_list", "=", "split_file", "[", "'train_list'", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "image_list", "=", "split_file", "[", "'test_list'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_list", "=", "split_file", "[", "'test_list'", "]", "\n", "len_image_list", "=", "len", "(", "self", ".", "image_list", ")", "\n", "split_fold", "=", "0.3", "\n", "split_flag", "=", "int", "(", "len_image_list", "*", "(", "1", "-", "split_fold", ")", ")", "\n", "if", "mode", "==", "'adv_train'", ":", "\n", "                ", "self", ".", "image_list", "=", "self", ".", "image_list", "[", ":", "split_flag", "]", "\n", "", "elif", "mode", "==", "'adv_test'", ":", "\n", "                ", "self", ".", "image_list", "=", "self", ".", "image_list", "[", "split_flag", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Only for try_random_pairs experiments", "\n", "", "", "self", ".", "rand_pairs", "=", "rand_pairs", "\n", "self", ".", "class_dict", "=", "dict", "(", ")", "\n", "# 2 classes", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "class_dict", "[", "i", "]", "=", "list", "(", ")", "\n", "", "for", "item", "in", "split_file", "[", "'train_list'", "]", ":", "\n", "            ", "label", "=", "int", "(", "int", "(", "item", "[", "1", "]", ")", ">", "0", ")", "\n", "self", ".", "class_dict", "[", "label", "]", ".", "append", "(", "[", "item", "[", "0", "]", ",", "label", "]", ")", "\n", "", "if", "rand_pairs", "==", "'train_single_class'", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "class_dict", "[", "target_class", "]", "\n", "mode", "=", "'test'", "\n", "self", ".", "target_image_patch", "=", "list", "(", ")", "\n", "for", "item", "in", "self", ".", "class_dict", "[", "target_class", "]", ":", "\n", "                ", "img_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir_pth", ",", "item", "[", "0", "]", "+", "'.png'", ")", "\n", "img_data", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "img_pth", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "self", ".", "target_image_patch", ".", "append", "(", "img_data", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "self", ".", "target_image_patch", "=", "torch", ".", "cat", "(", "self", ".", "target_image_patch", ")", "\n", "\n", "", "pickle_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'target_class.pkl'", ")", "\n", "self", ".", "target_class_list", "=", "{", "id_class", ":", "list", "(", ")", "for", "id_class", "in", "range", "(", "self", ".", "num_classes", ")", "}", "\n", "for", "key", "in", "self", ".", "target_class_list", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "target_class_list", "[", "key", "]", "=", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", "\n", "self", ".", "target_class_list", "[", "key", "]", ".", "remove", "(", "key", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "pickle_pth", ")", "or", "False", ":", "\n", "# assert(mode == 'test' and rand_pairs == 'targeted_attack')", "\n", "            ", "print", "(", "\"Set target class to {}\"", ".", "format", "(", "pickle_pth", ")", ")", "\n", "with", "open", "(", "pickle_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "attack_list", "=", "list", "(", ")", "\n", "self", ".", "class_selected_list", "=", "{", "_", ":", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", ")", "}", "\n", "for", "item", "in", "split_file", "[", "'test_list'", "]", ":", "\n", "                    ", "id_class", "=", "int", "(", "int", "(", "item", "[", "1", "]", ")", ">", "0", ")", "\n", "rand_class", "=", "random", ".", "choice", "(", "self", ".", "target_class_list", "[", "id_class", "]", ")", "\n", "self", ".", "attack_list", ".", "append", "(", "[", "item", "[", "0", "]", ",", "rand_class", "]", ")", "\n", "self", ".", "class_selected_list", "[", "rand_class", "]", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "", "pickle", ".", "dump", "(", "[", "self", ".", "attack_list", ",", "self", ".", "class_selected_list", "]", ",", "f", ")", "\n", "\n", "", "", "with", "open", "(", "pickle_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "logging", ".", "info", "(", "\"Load attack list and target class list from {}\"", ".", "format", "(", "pickle_pth", ")", ")", "\n", "self", ".", "attack_list", ",", "self", ".", "class_selected_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Get class_spcific", "\n", "", "if", "rand_pairs", "==", "'specific'", ":", "\n", "            ", "assert", "(", "mode", "!=", "'train'", ")", "\n", "self", ".", "target_class", "=", "target_class", "\n", "# self.temp_list = [[item, target_class] for item in self.class_selected_list[target_class]]", "\n", "self", ".", "temp_list", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "image_list", ":", "\n", "                ", "if", "item", "[", "0", "]", "in", "self", ".", "class_selected_list", "[", "target_class", "]", ":", "\n", "                    ", "self", ".", "temp_list", ".", "append", "(", "[", "item", "[", "0", "]", ",", "target_class", "]", ")", "\n", "", "", "self", ".", "image_list", "=", "self", ".", "temp_list", "\n", "\n", "", "if", "rand_pairs", "==", "'targeted_attack'", ":", "\n", "            ", "assert", "(", "mode", "!=", "'train'", ")", "\n", "self", ".", "image_list", "=", "self", ".", "attack_list", "\n", "\n", "", "self", ".", "rand_pairs", "=", "rand_pairs", "\n", "self", ".", "target_class", "=", "target_class", "\n", "\n", "self", ".", "targeted", "=", "targeted", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.get_target_one": [[546, 551], ["random.choice", "os.path.join", "datasets.APTOS.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_target_one", "(", "self", ",", "id_class", ")", ":", "\n", "        ", "item", "=", "random", ".", "choice", "(", "self", ".", "class_dict", "[", "id_class", "]", ")", "\n", "img_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir_pth", ",", "item", "[", "0", "]", "+", "'.png'", ")", "\n", "img_data", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "img_pth", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "return", "img_data", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.get_target_batch": [[552, 561], ["list", "range", "torch.cat", "random.choice", "os.path.join", "datasets.APTOS.transform", "torch.cat.append", "PIL.Image.open().convert", "datasets.APTOS.unsqueeze", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_target_batch", "(", "self", ",", "id_class", ",", "size", ")", ":", "\n", "        ", "res", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "item", "=", "random", ".", "choice", "(", "self", ".", "class_dict", "[", "id_class", "]", ")", "\n", "img_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir_pth", ",", "item", "[", "0", "]", "+", "'.png'", ")", "\n", "img_data", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "img_pth", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "res", ".", "append", "(", "img_data", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.get_random_feature": [[562, 569], ["random.shuffle", "torch.cat", "datasets.APTOS.transform().cuda().unsqueeze", "range", "datasets.APTOS.transform().cuda", "datasets.APTOS.transform", "PIL.Image.open().convert", "PIL.Image.open", "os.path.join"], "methods", ["None"], ["", "def", "get_random_feature", "(", "self", ",", "id_class", ",", "num_samples", "=", "100", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "class_dict", "[", "id_class", "]", ")", "\n", "target_list", "=", "self", ".", "class_dict", "[", "id_class", "]", "[", ":", "num_samples", "]", "\n", "target_images", "=", "[", "self", ".", "transform", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir_pth", ",", "target_list", "[", "i", "]", "[", "0", "]", "+", "'.png'", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "return", "torch", ".", "cat", "(", "target_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__len__": [[570, 572], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.APTOS.__getitem__": [[573, 587], ["os.path.join", "datasets.APTOS.transform", "int", "numpy.random.randint", "PIL.Image.open().convert", "len", "int", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "rand_pairs", "==", "'train_single_class'", ":", "\n", "            ", "img_data", "=", "self", ".", "target_image_patch", "[", "index", "]", "\n", "id_target", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "target_image_patch", ")", ")", "\n", "target_data", "=", "self", ".", "target_image_patch", "[", "id_target", "]", "\n", "return", "img_data", ",", "self", ".", "target_class", ",", "target_data", "\n", "", "item", "=", "self", ".", "image_list", "[", "index", "]", "\n", "\n", "img_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir_pth", ",", "item", "[", "0", "]", "+", "'.png'", ")", "\n", "img_data", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "img_pth", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "label", "=", "int", "(", "int", "(", "item", "[", "1", "]", ")", ">", "0", ")", "\n", "\n", "return", "img_data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.generate_spatial_bounding_box": [[28, 41], ["isinstance", "numpy.zeros_like().astype", "img.mean", "cv2.medianBlur", "numpy.nonzero", "list", "list", "range", "cv2.medianBlur.astype", "list.append", "list.append", "numpy.zeros_like", "len", "max", "min", "numpy.min", "numpy.max"], "function", ["None"], ["def", "generate_spatial_bounding_box", "(", "img", ",", "channel_indexes", "=", "None", ",", "margin", "=", "0", ")", ":", "\n", "    ", "assert", "isinstance", "(", "margin", ",", "int", ")", ",", "\"margin must be int type.\"", "\n", "temp", "=", "np", ".", "zeros_like", "(", "img", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "temp", "=", "img", ".", "mean", "(", "axis", "=", "0", ")", "\n", "temp", "=", "cv2", ".", "medianBlur", "(", "temp", ".", "astype", "(", "np", ".", "uint8", ")", ",", "9", ")", "\n", "nonzero_idx", "=", "np", ".", "nonzero", "(", "temp", ">", "5", ")", "\n", "box_start", "=", "list", "(", ")", "\n", "box_end", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "temp", ".", "ndim", ")", ":", "\n", "        ", "assert", "len", "(", "nonzero_idx", "[", "i", "]", ")", ">", "0", ",", "f\"did not find nonzero index at spatial dim {i}\"", "\n", "box_start", ".", "append", "(", "max", "(", "0", ",", "np", ".", "min", "(", "nonzero_idx", "[", "i", "]", ")", "-", "margin", ")", ")", "\n", "box_end", ".", "append", "(", "min", "(", "temp", ".", "shape", "[", "i", "]", ",", "np", ".", "max", "(", "nonzero_idx", "[", "i", "]", ")", "+", "margin", "+", "1", ")", ")", "\n", "", "return", "box_start", ",", "box_end", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.unpack": [[42, 392], ["list", "os.path.join", "os.path.join", "list", "list.append", "list.append", "list.append", "torchvision.Compose", "dict", "range", "os.path.join", "datasets..target_class_list.keys", "random.choice", "datasets..transform", "random.shuffle", "torch.cat", "len", "datasets..transform", "range", "open", "pickle.load", "torchvision.Resize", "list.append", "list.append", "list.append", "list.append", "torchvision.ToTensor", "torchvision.Normalize", "list", "datasets..class_dict[].append", "list", "torch.cat", "list", "list", "datasets..target_class_list[].remove", "print", "open", "logging.info", "pickle.load", "PIL.Image.open().convert", "datasets..transform().cuda().unsqueeze", "numpy.random.randint", "PIL.Image.open().convert", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomVerticalFlip", "torchvision.CenterCrop", "len", "numpy.load", "print", "len", "int", "datasets..transform", "datasets..target_image_patch.append", "range", "range", "os.path.exists", "open", "list", "pickle.dump", "range", "len", "len", "numpy.load", "print", "os.path.join", "PIL.Image.open().convert", "datasets..unsqueeze", "int", "random.choice", "datasets..attack_list.append", "datasets..class_selected_list[].append", "datasets..temp_list.append", "PIL.Image.open", "datasets..transform().cuda", "PIL.Image.open", "os.path.join", "range", "range", "range", "PIL.Image.open", "int", "datasets..transform", "len", "PIL.Image.open().convert", "len", "PIL.Image.open"], "function", ["None"], ["", "def", "unpack", "(", "array", ")", ":", "\n", "    ", "lenth", "=", "array", "[", "'img'", "]", ".", "shape", "[", "0", "]", "\n", "ret", "=", "[", "[", "id", ",", "array", "[", "'label'", "]", "[", "id", "]", "]", "for", "id", "in", "range", "(", "lenth", ")", "]", "\n", "return", "ret", "\n", "\n", "# class Cifar(Dataset):", "\n", "#     def __init__(self, root_pth='/apdcephfs/share_1290796/qingsongyao/SecureMedIA/dataset/cifar/',\\", "\n", "#         mode='train', num_fold=0, targeted=False, rand_pairs=False, target_class=0, arch=None):", "\n", "#         self.num_classes = 10", "\n", "#         self.num_classes_selected = 10", "\n", "#         self.root_pth = root_pth", "\n", "#         transform_list = list()", "\n", "#         transform_list.append(transforms.Resize(32))", "\n", "#         if mode == 'train':", "\n", "#             transform_list.append(transforms.RandomCrop(32))", "\n", "#             transform_list.append(transforms.RandomHorizontalFlip())", "\n", "#             transform_list.append(transforms.RandomVerticalFlip())", "\n", "#         else:", "\n", "#             transform_list.append(transforms.CenterCrop(32))", "\n", "#         transform_list.append(transforms.ToTensor())", "\n", "#         transform_list.append(transforms.Normalize(mean=[0.5, 0.5, 0.5],\\", "\n", "#                                     std=[0.5, 0.5, 0.5]))", "\n", "#         self.transform = transforms.Compose(transform_list)", "\n", "\n", "#         if mode == 'train':", "\n", "#             self.array = np.load(os.path.join(root_pth, 'train.npz'))", "\n", "#             self.image_list = unpack(self.array)", "\n", "#             self.array = self.array['img']", "\n", "#         elif mode == 'test':", "\n", "#             self.array = np.load(os.path.join(root_pth, 'test.npz'))", "\n", "#             self.image_list = unpack(self.array)", "\n", "#             self.array = self.array['img']", "\n", "#             bingo = np.load(os.path.join(f'/apdcephfs/share_1290796/qingsongyao/SecureMedIA/runs_Cifar/vgg16/correct_predicts.npy'))", "\n", "#             len_raw = len(self.image_list)", "\n", "#             self.image_list = [self.image_list[i] for i in range(bingo.shape[0]) if bingo[i]]", "\n", "#             print(f\"Drop {len_raw - len(self.image_list)} samples from test set from {len_raw}\")", "\n", "#         else:", "\n", "#             self.array = np.load(os.path.join(root_pth, 'test.npz'))", "\n", "#             self.image_list = unpack(self.array)", "\n", "#             self.array = self.array['img']", "\n", "#             bingo = np.load(os.path.join(f'/apdcephfs/share_1290796/qingsongyao/SecureMedIA/runs_Cifar/vgg16/correct_predicts.npy'))", "\n", "#             len_raw = len(self.image_list)", "\n", "#             self.image_list = [self.image_list[i] for i in range(bingo.shape[0]) if bingo[i]]", "\n", "#             print(f\"Drop {len_raw - len(self.image_list)} samples from test set from {len_raw}\")", "\n", "#             len_image_list = len(self.image_list)", "\n", "#             split_fold = 0.310", "\n", "#             split_flag = int(len_image_list * (1 - split_fold))", "\n", "#             if mode == 'adv_train':", "\n", "#                 self.image_list = self.image_list[:split_flag]", "\n", "#             elif mode == 'adv_test':", "\n", "#                 self.image_list = self.image_list[split_flag:]", "\n", "#             else:", "\n", "#                 raise NotImplementedError   ", "\n", "\n", "#         # Prepare to get one target sample from train set", "\n", "#         self.rand_pairs = rand_pairs", "\n", "#         self.class_dict = dict()", "\n", "#         for i in range(self.num_classes):", "\n", "#             self.class_dict[i] = list()", "\n", "#         for item in self.image_list:", "\n", "#             label = item[1]", "\n", "#             self.class_dict[label].append([item[0], label])", "\n", "#         if rand_pairs == 'train_single_class':", "\n", "#             self.image_list = self.class_dict[target_class]", "\n", "#             mode = 'test'", "\n", "#             self.target_image_patch = list()", "\n", "#             for item in self.class_dict[target_class]:", "\n", "#                 img_pth = item[0]", "\n", "#                 img_data = self.transform(Image.fromarray(self.array[img_pth]))", "\n", "#                 self.target_image_patch.append(img_data.unsqueeze(0))", "\n", "#             self.target_image_patch = torch.cat(self.target_image_patch)", "\n", "\n", "#         pickle_pth = os.path.join(root_pth, 'target_class.pkl')", "\n", "#         self.target_class_list = {id_class:list() for id_class in range(self.num_classes)}", "\n", "#         for key in self.target_class_list.keys():", "\n", "#             self.target_class_list[key] = list(range(self.num_classes))", "\n", "#             self.target_class_list[key].remove(key)", "\n", "\n", "#         if not os.path.exists(pickle_pth) or False:", "\n", "#             assert(mode == 'test' and rand_pairs == 'targeted_attack')", "\n", "#             print(\"Set target class to {}\".format(pickle_pth))", "\n", "#             with open(pickle_pth, 'wb') as f:", "\n", "#                 self.attack_list = list()", "\n", "#                 self.class_selected_list = {_:[] for _ in range(self.num_classes)}", "\n", "#                 for item in self.image_list:", "\n", "#                     id_class = item[1]", "\n", "#                     rand_class = random.choice(self.target_class_list[id_class])", "\n", "#                     self.attack_list.append([item[0], rand_class])", "\n", "#                     self.class_selected_list[rand_class].append(item[0])", "\n", "#                 pickle.dump([self.attack_list, self.class_selected_list], f)", "\n", "#         with open(pickle_pth, 'rb') as f:", "\n", "#             logging.info(\"Load attack list and target class list from {}\".format(pickle_pth))", "\n", "#             self.attack_list, self.class_selected_list = pickle.load(f)", "\n", "\n", "#         # Get class_spcific", "\n", "#         if rand_pairs == 'specific':", "\n", "#             assert(mode != 'train')", "\n", "#             self.target_class = target_class", "\n", "#             # self.temp_list = [[item, target_class] for item in self.class_selected_list[target_class]]", "\n", "#             self.temp_list = []", "\n", "#             for item in self.image_list:", "\n", "#                 if item[0] in self.class_selected_list[target_class]:", "\n", "#                     self.temp_list.append([item[0], target_class])", "\n", "#             self.image_list = self.temp_list", "\n", "\n", "#         if rand_pairs == 'targeted_attack':", "\n", "#             assert(mode != 'train')", "\n", "#             self.image_list = self.attack_list", "\n", "\n", "#         self.rand_pairs = rand_pairs", "\n", "\n", "#         self.targeted = targeted", "\n", "#         self.target_class = target_class", "\n", "\n", "#     def __len__(self):", "\n", "#         return len(self.image_list)", "\n", "\n", "#     def __getitem__(self, index):", "\n", "#         if self.rand_pairs == 'train_single_class':", "\n", "#             img_data = self.target_image_patch[index]", "\n", "#             id_target = np.random.randint(0, len(self.target_image_patch))", "\n", "#             target_data = self.target_image_patch[id_target]", "\n", "#             return img_data, self.target_class, target_data", "\n", "#         item = self.image_list[index]", "\n", "\n", "#         img_pth = item[0]", "\n", "#         img_data = self.transform(Image.fromarray(self.array[img_pth]))", "\n", "\n", "#         label = item[1]", "\n", "#         return img_data, torch.tensor(label).long()", "\n", "\n", "#     def __init__(self, root_pth='/apdcephfs/share_1290796/qingsongyao/ImageNet/',\\", "\n", "#         mode='train', num_fold=0, targeted=False, rand_pairs=False, target_class=0, arch=None):", "\n", "#         self.num_classes = 1000", "\n", "\n", "#         self.plan_pkl_pth = os.path.join(root_pth, 'plans.pkl')", "\n", "#         self.train_folder = os.path.join(root_pth, 'ImageNet', '292_tiger')", "\n", "#         self.test_folder = os.path.join(root_pth, 'eval')", "\n", "#         with open(self.plan_pkl_pth, 'rb') as f:", "\n", "#             self.plan = pickle.load(f)", "\n", "#         # train_lists = [[os.path.join(self.train_folder, item), 292] for item in os.listdir(self.train_folder)]", "\n", "#         # test_lists = [[os.path.join(self.test_folder, item), 292] for item in os.listdir(self.test_folder)][:1010]", "\n", "#         # self.plan = dict()", "\n", "#         # self.plan['test'] = test_lists", "\n", "#         # self.plan['train'] = train_lists", "\n", "#         # with open(os.path.join(root_pth, 'plans.pkl'), 'wb') as f:", "\n", "#         #     pickle.dump(self.plan, f)", "\n", "#         # import ipdb; ipdb.set_trace()", "\n", "\n", "#         transform_list = list()", "\n", "#         transform_list.append(transforms.Resize(344))", "\n", "#         if mode == 'train':", "\n", "#             transform_list.append(transforms.RandomCrop(299))", "\n", "#             transform_list.append(transforms.RandomHorizontalFlip())", "\n", "#             transform_list.append(transforms.RandomVerticalFlip())", "\n", "#         else:", "\n", "#             transform_list.append(transforms.CenterCrop(299))", "\n", "#         transform_list.append(transforms.ToTensor())", "\n", "#         transform_list.append(transforms.Normalize(mean=[0.5, 0.5, 0.5],\\", "\n", "#                                     std=[0.5, 0.5, 0.5]))", "\n", "#         self.transform = transforms.Compose(transform_list)", "\n", "\n", "#         # No training ", "\n", "#         # Both targeted_attack", "\n", "#         if mode == 'train':", "\n", "#             self.image_list = self.plan['train']", "\n", "#         elif mode == 'test':", "\n", "#             self.image_list = self.plan['test']", "\n", "\n", "#     def __len__(self):", "\n", "#         return len(self.image_list)", "\n", "\n", "#     def __getitem__(self, index):", "\n", "#         item = self.image_list[index]", "\n", "#         label = int(item[1])", "\n", "#         img_pth = item[0]", "\n", "#         img_data = self.transform(Image.open(img_pth).convert('RGB'))", "\n", "\n", "#         return img_data, label", "\n", "\n", "# class CXR(Dataset):", "\n", "def", "__init__", "(", "self", ",", "root_pth", "=", "'/apdcephfs/share_1290796/qingsongyao/SecureMedIA/dataset/cxr/'", ",", "mode", "=", "'train'", ",", "num_fold", "=", "0", ",", "targeted", "=", "False", ",", "rand_pairs", "=", "False", ",", "target_class", "=", "0", ",", "arch", "=", "'vgg16'", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "num_classes_selected", "=", "2", "\n", "targeted", "=", "False", "\n", "\n", "self", ".", "image_list", "=", "list", "(", ")", "\n", "self", ".", "plan_pkl_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'plans.pkl'", ")", "\n", "with", "open", "(", "self", ".", "plan_pkl_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "plan", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# train_folder_h = os.path.join(root_pth, 'train', 'NORMAL')", "\n", "# train_healthy = [[os.path.join(train_folder_h, item), 0] for item in os.listdir(train_folder_h)]", "\n", "# test_folder_h = os.path.join(root_pth, 'test', 'NORMAL')", "\n", "# test_healthy = [[os.path.join(test_folder_h, item), 0] for item in os.listdir(test_folder_h)]", "\n", "# train_folder_p = os.path.join(root_pth, 'train', 'PNEUMONIA')", "\n", "# train_pneumonia = [[os.path.join(train_folder_p, item), 1] for item in os.listdir(train_folder_p)]", "\n", "# test_folder_p = os.path.join(root_pth, 'test', 'PNEUMONIA')", "\n", "# test_pneumonia = [[os.path.join(test_folder_p, item), 1] for item in os.listdir(test_folder_p)]", "\n", "# train_healthy.extend(train_pneumonia)", "\n", "# test_healthy.extend(test_pneumonia)", "\n", "# random.shuffle(train_healthy)", "\n", "# random.shuffle(test_healthy)", "\n", "# test_healthy.extend(train_healthy[-550:])", "\n", "# train_healthy = train_healthy[:-550]", "\n", "# self.plan = dict()", "\n", "# self.plan['test'] = test_healthy", "\n", "# self.plan['train'] = train_healthy", "\n", "# with open(os.path.join(root_pth, 'plans.pkl'), 'wb') as f:", "\n", "#     pickle.dump(self.plan, f)", "\n", "# # import ipdb; ipdb.set_trace()        ", "\n", "", "self", ".", "img_dir_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'images'", ")", "\n", "# print(len(self.plan['test']))", "\n", "# print(len(self.plan['train']))", "\n", "\n", "transform_list", "=", "list", "(", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "330", ")", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "299", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomVerticalFlip", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "299", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# # resize ", "\n", "# images = os.listdir(self.img_dir_pth)", "\n", "# for item in tqdm(images):", "\n", "#     image = Image.open(os.path.join(self.img_dir_pth, item)).resize([330, 330])", "\n", "#     image.save(os.path.join(self.img_dir_pth, item))", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "plan", "[", "'train'", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "plan", "[", "'test'", "]", "\n", "if", "rand_pairs", "is", "not", "None", ":", "\n", "                ", "len_raw", "=", "len", "(", "self", ".", "image_list", ")", "\n", "bingo", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "f'/apdcephfs/share_1290796/qingsongyao/SecureMedIA/runs_CXR/{arch}/correct_predicts.npy'", ")", ")", "\n", "self", ".", "image_list", "=", "[", "self", ".", "image_list", "[", "i", "]", "for", "i", "in", "range", "(", "bingo", ".", "shape", "[", "0", "]", ")", "if", "bingo", "[", "i", "]", "]", "\n", "print", "(", "f\"Drop {len_raw - len(self.image_list)} samples from test set from {len_raw}\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "plan", "[", "'test'", "]", "\n", "len_raw", "=", "len", "(", "self", ".", "image_list", ")", "\n", "bingo", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "f'/apdcephfs/share_1290796/qingsongyao/SecureMedIA/runs_CXR/{arch}/correct_predicts.npy'", ")", ")", "\n", "self", ".", "image_list", "=", "[", "self", ".", "image_list", "[", "i", "]", "for", "i", "in", "range", "(", "bingo", ".", "shape", "[", "0", "]", ")", "if", "bingo", "[", "i", "]", "]", "\n", "print", "(", "f\"Drop {len_raw - len(self.image_list)} samples from test set from {len_raw}\"", ")", "\n", "len_image_list", "=", "len", "(", "self", ".", "image_list", ")", "\n", "split_fold", "=", "0.3", "\n", "split_flag", "=", "int", "(", "len_image_list", "*", "(", "1", "-", "split_fold", ")", ")", "\n", "if", "mode", "==", "'adv_train'", ":", "\n", "                ", "self", ".", "image_list", "=", "self", ".", "image_list", "[", ":", "split_flag", "]", "\n", "", "elif", "mode", "==", "'adv_test'", ":", "\n", "                ", "self", ".", "image_list", "=", "self", ".", "image_list", "[", "split_flag", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Prepare to get one target sample from train set", "\n", "", "", "self", ".", "rand_pairs", "=", "rand_pairs", "\n", "self", ".", "class_dict", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "class_dict", "[", "i", "]", "=", "list", "(", ")", "\n", "", "for", "item", "in", "self", ".", "plan", "[", "'train'", "]", ":", "\n", "            ", "label", "=", "item", "[", "1", "]", "\n", "self", ".", "class_dict", "[", "label", "]", ".", "append", "(", "[", "item", "[", "0", "]", ",", "label", "]", ")", "\n", "", "if", "rand_pairs", "==", "'train_single_class'", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "class_dict", "[", "target_class", "]", "\n", "mode", "=", "'test'", "\n", "self", ".", "target_image_patch", "=", "list", "(", ")", "\n", "for", "item", "in", "self", ".", "class_dict", "[", "target_class", "]", ":", "\n", "                ", "img_pth", "=", "item", "[", "0", "]", "\n", "img_data", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "img_pth", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "self", ".", "target_image_patch", ".", "append", "(", "img_data", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "self", ".", "target_image_patch", "=", "torch", ".", "cat", "(", "self", ".", "target_image_patch", ")", "\n", "\n", "", "pickle_pth", "=", "os", ".", "path", ".", "join", "(", "root_pth", ",", "'target_class.pkl'", ")", "\n", "self", ".", "target_class_list", "=", "{", "id_class", ":", "list", "(", ")", "for", "id_class", "in", "range", "(", "self", ".", "num_classes", ")", "}", "\n", "for", "key", "in", "self", ".", "target_class_list", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "target_class_list", "[", "key", "]", "=", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", "\n", "self", ".", "target_class_list", "[", "key", "]", ".", "remove", "(", "key", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "pickle_pth", ")", "or", "False", ":", "\n", "            ", "assert", "(", "mode", "==", "'test'", "and", "rand_pairs", "==", "'targeted_attack'", ")", "\n", "print", "(", "\"Set target class to {}\"", ".", "format", "(", "pickle_pth", ")", ")", "\n", "with", "open", "(", "pickle_pth", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "attack_list", "=", "list", "(", ")", "\n", "self", ".", "class_selected_list", "=", "{", "_", ":", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", ")", "}", "\n", "for", "item", "in", "self", ".", "image_list", ":", "\n", "                    ", "id_class", "=", "int", "(", "int", "(", "item", "[", "1", "]", ")", ">", "0", ")", "\n", "rand_class", "=", "random", ".", "choice", "(", "self", ".", "target_class_list", "[", "id_class", "]", ")", "\n", "self", ".", "attack_list", ".", "append", "(", "[", "item", "[", "0", "]", ",", "rand_class", "]", ")", "\n", "self", ".", "class_selected_list", "[", "rand_class", "]", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "", "pickle", ".", "dump", "(", "[", "self", ".", "attack_list", ",", "self", ".", "class_selected_list", "]", ",", "f", ")", "\n", "\n", "", "", "with", "open", "(", "pickle_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "logging", ".", "info", "(", "\"Load attack list and target class list from {}\"", ".", "format", "(", "pickle_pth", ")", ")", "\n", "self", ".", "attack_list", ",", "self", ".", "class_selected_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Get class_spcific", "\n", "", "if", "rand_pairs", "==", "'specific'", ":", "\n", "            ", "assert", "(", "mode", "!=", "'train'", ")", "\n", "self", ".", "target_class", "=", "target_class", "\n", "# self.temp_list = [[item, target_class] for item in self.class_selected_list[target_class]]", "\n", "self", ".", "temp_list", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "image_list", ":", "\n", "                ", "if", "item", "[", "0", "]", "in", "self", ".", "class_selected_list", "[", "target_class", "]", ":", "\n", "                    ", "self", ".", "temp_list", ".", "append", "(", "[", "item", "[", "0", "]", ",", "target_class", "]", ")", "\n", "", "", "self", ".", "image_list", "=", "self", ".", "temp_list", "\n", "\n", "", "if", "rand_pairs", "==", "'targeted_attack'", ":", "\n", "            ", "assert", "(", "mode", "!=", "'train'", ")", "\n", "self", ".", "image_list", "=", "self", ".", "attack_list", "\n", "\n", "", "self", ".", "rand_pairs", "=", "rand_pairs", "\n", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "target_class", "=", "target_class", "\n", "\n", "", "def", "get_target_one", "(", "self", ",", "id_class", ")", ":", "\n", "        ", "item", "=", "random", ".", "choice", "(", "self", ".", "class_dict", "[", "id_class", "]", ")", "\n", "img_pth", "=", "item", "[", "0", "]", "\n", "img_data", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "img_pth", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "return", "img_data", "\n", "\n", "", "def", "get_random_feature", "(", "self", ",", "id_class", ",", "num_samples", "=", "100", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "class_dict", "[", "id_class", "]", ")", "\n", "target_list", "=", "self", ".", "class_dict", "[", "id_class", "]", "[", ":", "num_samples", "]", "\n", "target_images", "=", "[", "self", ".", "transform", "(", "Image", ".", "open", "(", "target_list", "[", "i", "]", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "return", "torch", ".", "cat", "(", "target_images", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "rand_pairs", "==", "'train_single_class'", ":", "\n", "            ", "img_data", "=", "self", ".", "target_image_patch", "[", "index", "]", "\n", "id_target", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "target_image_patch", ")", ")", "\n", "target_data", "=", "self", ".", "target_image_patch", "[", "id_target", "]", "\n", "return", "img_data", ",", "self", ".", "target_class", ",", "target_data", "\n", "", "item", "=", "self", ".", "image_list", "[", "index", "]", "\n", "\n", "img_pth", "=", "item", "[", "0", "]", "\n", "img_data", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "img_pth", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "label", "=", "item", "[", "1", "]", "\n", "\n", "return", "img_data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.datasets.get_dataloader": [[588, 613], ["torch.utils.data.DataLoader", "arch.split", "datasets.APTOS", "CXR", "Cifar"], "function", ["None"], ["", "", "def", "get_dataloader", "(", "dataset", "=", "'APTOS'", ",", "mode", "=", "'train'", ",", "batch_size", "=", "64", ",", "num_workers", "=", "16", ",", "num_fold", "=", "0", ",", "targeted", "=", "False", ",", "rand_pairs", "=", "False", ",", "target_class", "=", "0", ",", "arch", "=", "'vgg16'", ")", ":", "\n", "    ", "arch", "=", "arch", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "# Now: Default : targeted = True", "\n", "num_workers", "=", "24", "\n", "is_train", "=", "mode", "==", "'train'", "\n", "if", "dataset", "==", "'APTOS'", ":", "\n", "        ", "dataset", "=", "APTOS", "(", "mode", "=", "mode", ",", "num_fold", "=", "num_fold", ",", "targeted", "=", "targeted", ",", "rand_pairs", "=", "rand_pairs", ",", "target_class", "=", "target_class", ")", "\n", "", "elif", "dataset", "==", "'CXR'", ":", "\n", "        ", "dataset", "=", "CXR", "(", "mode", "=", "mode", ",", "num_fold", "=", "num_fold", ",", "targeted", "=", "targeted", ",", "rand_pairs", "=", "rand_pairs", ",", "target_class", "=", "target_class", ",", "arch", "=", "'vgg16'", ")", "\n", "", "elif", "dataset", "==", "'Cifar'", ":", "\n", "        ", "dataset", "=", "Cifar", "(", "mode", "=", "mode", ",", "num_fold", "=", "num_fold", ",", "targeted", "=", "targeted", ",", "rand_pairs", "=", "rand_pairs", ",", "target_class", "=", "target_class", ",", "arch", "=", "'vgg16'", ")", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "drop_last", "=", "is_train", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "is_train", "\n", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.ctx_noparamgrad.__init__": [[12, 16], ["context.get_param_grad_state", "context.set_param_grad_off"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.get_param_grad_state", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_param_grad_off"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "prev_grad_state", "=", "get_param_grad_state", "(", "module", ")", "\n", "self", ".", "module", "=", "module", "\n", "set_param_grad_off", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.ctx_noparamgrad.__enter__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.ctx_noparamgrad.__exit__": [[20, 23], ["context.set_param_grad_state"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_param_grad_state"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "set_param_grad_state", "(", "self", ".", "module", ",", "self", ".", "prev_grad_state", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.ctx_eval.__init__": [[26, 30], ["context.get_module_training_state", "context.set_module_training_off"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.get_module_training_state", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_module_training_off"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "prev_training_state", "=", "get_module_training_state", "(", "module", ")", "\n", "self", ".", "module", "=", "module", "\n", "set_module_training_off", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.ctx_eval.__enter__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.ctx_eval.__exit__": [[34, 37], ["context.set_module_training_state"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_module_training_state"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "set_module_training_state", "(", "self", ".", "module", ",", "self", ".", "prev_training_state", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.ctx_noparamgrad_and_eval": [[39, 43], ["context.ctx_noparamgrad", "context.ctx_eval"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "ctx_noparamgrad_and_eval", "(", "module", ")", ":", "\n", "    ", "with", "ctx_noparamgrad", "(", "module", ")", "as", "a", ",", "ctx_eval", "(", "module", ")", "as", "b", ":", "\n", "        ", "yield", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.get_module_training_state": [[45, 47], ["module.modules"], "function", ["None"], ["", "", "def", "get_module_training_state", "(", "module", ")", ":", "\n", "    ", "return", "{", "mod", ":", "mod", ".", "training", "for", "mod", "in", "module", ".", "modules", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_module_training_state": [[49, 52], ["module.modules"], "function", ["None"], ["", "def", "set_module_training_state", "(", "module", ",", "training_state", ")", ":", "\n", "    ", "for", "mod", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "mod", ".", "training", "=", "training_state", "[", "mod", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_module_training_off": [[54, 57], ["module.modules"], "function", ["None"], ["", "", "def", "set_module_training_off", "(", "module", ")", ":", "\n", "    ", "for", "mod", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "mod", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.get_param_grad_state": [[59, 61], ["module.parameters"], "function", ["None"], ["", "", "def", "get_param_grad_state", "(", "module", ")", ":", "\n", "    ", "return", "{", "param", ":", "param", ".", "requires_grad", "for", "param", "in", "module", ".", "parameters", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_param_grad_state": [[63, 66], ["module.parameters"], "function", ["None"], ["", "def", "set_param_grad_state", "(", "module", ",", "grad_state", ")", ":", "\n", "    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "grad_state", "[", "param", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.context.set_param_grad_off": [[68, 71], ["module.parameters"], "function", ["None"], ["", "", "def", "set_param_grad_off", "(", "module", ")", ":", "\n", "    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.FunctionWrapper.__init__": [[25, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "func", ")", ":", "\n", "        ", "\"\"\"Wraps the provided function `func`.\n\n        :param func: the `torch.autograd.Function` to be wrapped.\n        \"\"\"", "\n", "super", "(", "FunctionWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "func", "=", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.FunctionWrapper.forward": [[33, 36], ["bpda.FunctionWrapper.func.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"Wraps the `forward` method of `func`.\"\"\"", "\n", "return", "self", ".", "func", ".", "apply", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper.__init__": [[61, 64], ["bpda.BPDAWrapper._create_func", "bpda.FunctionWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "forward", ",", "forwardsub", "=", "None", ",", "backward", "=", "None", ")", ":", "\n", "        ", "func", "=", "self", ".", "_create_func", "(", "forward", ",", "backward", ",", "forwardsub", ")", "\n", "super", "(", "BPDAWrapper", ",", "self", ")", ".", "__init__", "(", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func": [[65, 74], ["cls._create_func_forward_only", "cls._create_func_backward", "cls._create_func_forwardsub"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func_forward_only", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func_backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func_forwardsub"], ["", "@", "classmethod", "\n", "def", "_create_func", "(", "cls", ",", "forward_fn", ",", "backward_fn", ",", "forwardsub_fn", ")", ":", "\n", "        ", "if", "backward_fn", "is", "not", "None", ":", "\n", "            ", "return", "cls", ".", "_create_func_backward", "(", "forward_fn", ",", "backward_fn", ")", "\n", "\n", "", "if", "forwardsub_fn", "is", "not", "None", ":", "\n", "            ", "return", "cls", ".", "_create_func_forwardsub", "(", "forward_fn", ",", "forwardsub_fn", ")", "\n", "\n", "", "return", "cls", ".", "_create_func_forward_only", "(", "forward_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func_forward_only": [[75, 100], ["ctx.save_for_backward", "forward_fn", "ValueError", "len", "len", "len", "tuple", "len", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_func_forward_only", "(", "cls", ",", "forward_fn", ")", ":", "\n", "        ", "\"\"\"Creates a differentiable `Function` given the forward function,\n        and the identity as backward function.\"\"\"", "\n", "\n", "class", "Func", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "\n", "            ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "                ", "ctx", ".", "save_for_backward", "(", "*", "inputs", ")", "\n", "return", "forward_fn", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grad_outputs", ")", ":", "\n", "                ", "inputs", "=", "ctx", ".", "saved_tensors", "\n", "if", "len", "(", "grad_outputs", ")", "==", "len", "(", "inputs", ")", ":", "\n", "                    ", "return", "grad_outputs", "\n", "", "elif", "len", "(", "grad_outputs", ")", "==", "1", ":", "\n", "                    ", "return", "tuple", "(", "[", "grad_outputs", "[", "0", "]", "for", "_", "in", "inputs", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Expected %d gradients but got %d\"", "%", "\n", "(", "len", "(", "inputs", ")", ",", "len", "(", "grad_outputs", ")", ")", ")", "\n", "\n", "\n", "", "", "return", "Func", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func_forwardsub": [[101, 126], ["torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "ctx.save_for_backward", "forward_fn", "forwardsub_fn", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "x.detach().clone().requires_grad_", "x.detach().clone", "x.detach"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_func_forwardsub", "(", "cls", ",", "forward_fn", ",", "forwardsub_fn", ")", ":", "\n", "        ", "\"\"\"Creates a differentiable `Function` given the forward function,\n        and a substitute forward function.\n\n        The substitute forward function is used to approximate the gradients\n        in the backward pass.\n        \"\"\"", "\n", "\n", "class", "Func", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "\n", "            ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "                ", "ctx", ".", "save_for_backward", "(", "*", "inputs", ")", "\n", "return", "forward_fn", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "staticmethod", "\n", "@", "torch", ".", "enable_grad", "(", ")", "# enables grad in the method's scope", "\n", "def", "backward", "(", "ctx", ",", "*", "grad_outputs", ")", ":", "\n", "                ", "inputs", "=", "ctx", ".", "saved_tensors", "\n", "inputs", "=", "[", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "for", "x", "in", "inputs", "]", "\n", "outputs", "=", "forwardsub_fn", "(", "*", "inputs", ")", "\n", "return", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inputs", ",", "grad_outputs", ")", "\n", "\n", "", "", "return", "Func", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.bpda.BPDAWrapper._create_func_backward": [[127, 145], ["ctx.save_for_backward", "forward_fn", "backward_fn"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_func_backward", "(", "cls", ",", "forward_fn", ",", "backward_fn", ")", ":", "\n", "        ", "\"\"\"Creates a differentiable `Function` given the forward and backward\n        functions.\"\"\"", "\n", "\n", "class", "Func", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "\n", "            ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "                ", "ctx", ".", "save_for_backward", "(", "*", "inputs", ")", "\n", "return", "forward_fn", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grad_outputs", ")", ":", "\n", "                ", "inputs", "=", "ctx", ".", "saved_tensors", "\n", "return", "backward_fn", "(", "inputs", ",", "grad_outputs", ")", "\n", "\n", "", "", "return", "Func", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.ZeroOneLoss.__init__": [[9, 12], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "\n", "reduction", "=", "'elementwise_mean'", ")", ":", "\n", "        ", "super", "(", "ZeroOneLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.ZeroOneLoss.forward": [[13, 15], ["loss.logit_margin_loss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.logit_margin_loss"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "logit_margin_loss", "(", "input", ",", "target", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.LogitMarginLoss.__init__": [[21, 25], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "\n", "reduction", "=", "'elementwise_mean'", ",", "offset", "=", "0.", ")", ":", "\n", "        ", "super", "(", "LogitMarginLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "self", ".", "offset", "=", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.LogitMarginLoss.forward": [[26, 29], ["loss.logit_margin_loss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.logit_margin_loss"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "logit_margin_loss", "(", "\n", "input", ",", "target", ",", "reduction", "=", "self", ".", "reduction", ",", "offset", "=", "self", ".", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.CWLoss.__init__": [[35, 38], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "\n", "reduction", "=", "'elementwise_mean'", ")", ":", "\n", "        ", "super", "(", "CWLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.CWLoss.forward": [[39, 41], ["loss.cw_loss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.cw_loss"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "cw_loss", "(", "input", ",", "target", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.SoftLogitMarginLoss.__init__": [[46, 51], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "\n", "reduction", "=", "'elementwise_mean'", ",", "offset", "=", "0.", ")", ":", "\n", "        ", "super", "(", "SoftLogitMarginLoss", ",", "self", ")", ".", "__init__", "(", "\n", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "self", ".", "offset", "=", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.SoftLogitMarginLoss.forward": [[52, 55], ["loss.soft_logit_margin_loss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.soft_logit_margin_loss"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "return", "soft_logit_margin_loss", "(", "\n", "logits", ",", "targets", ",", "reduction", "=", "self", ".", "reduction", ",", "offset", "=", "self", ".", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.zero_one_loss": [[57, 60], ["loss._reduce_loss"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss._reduce_loss"], ["", "", "def", "zero_one_loss", "(", "input", ",", "target", ",", "reduction", "=", "'elementwise_mean'", ")", ":", "\n", "    ", "loss", "=", "(", "input", "!=", "target", ")", "\n", "return", "_reduce_loss", "(", "loss", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.elementwise_margin": [[62, 68], ["logits.size", "logits.topk", "torch.arange"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk"], ["", "def", "elementwise_margin", "(", "logits", ",", "label", ")", ":", "\n", "    ", "batch_size", "=", "logits", ".", "size", "(", "0", ")", "\n", "topval", ",", "topidx", "=", "logits", ".", "topk", "(", "2", ",", "dim", "=", "1", ")", "\n", "maxelse", "=", "(", "(", "label", "!=", "topidx", "[", ":", ",", "0", "]", ")", ".", "float", "(", ")", "*", "topval", "[", ":", ",", "0", "]", "\n", "+", "(", "label", "==", "topidx", "[", ":", ",", "0", "]", ")", ".", "float", "(", ")", "*", "topval", "[", ":", ",", "1", "]", ")", "\n", "return", "maxelse", "-", "logits", "[", "torch", ".", "arange", "(", "batch_size", ")", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.logit_margin_loss": [[70, 73], ["loss.elementwise_margin", "loss._reduce_loss"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.elementwise_margin", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss._reduce_loss"], ["", "def", "logit_margin_loss", "(", "input", ",", "target", ",", "reduction", "=", "'elementwise_mean'", ",", "offset", "=", "0.", ")", ":", "\n", "    ", "loss", "=", "elementwise_margin", "(", "input", ",", "target", ")", "\n", "return", "_reduce_loss", "(", "loss", ",", "reduction", ")", "+", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.cw_loss": [[75, 78], ["advertorch.utils.clamp", "loss._reduce_loss", "loss.elementwise_margin"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss._reduce_loss", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.elementwise_margin"], ["", "def", "cw_loss", "(", "input", ",", "target", ",", "reduction", "=", "'elementwise_mean'", ")", ":", "\n", "    ", "loss", "=", "clamp", "(", "elementwise_margin", "(", "input", ",", "target", ")", "+", "50", ",", "0.", ")", "\n", "return", "_reduce_loss", "(", "loss", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss._reduce_loss": [[80, 89], ["loss.mean", "loss.sum", "ValueError"], "function", ["None"], ["", "def", "_reduce_loss", "(", "loss", ",", "reduction", ")", ":", "\n", "    ", "if", "reduction", "==", "'none'", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction", "==", "'elementwise_mean'", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "reduction", "+", "\" is not valid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss.soft_logit_margin_loss": [[91, 103], ["logits.size", "logits.size", "torch.ones_like().byte", "logits[].reshape", "torch.logsumexp", "loss._reduce_loss", "torch.ones_like", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.loss._reduce_loss"], ["", "", "def", "soft_logit_margin_loss", "(", "\n", "logits", ",", "targets", ",", "reduction", "=", "'elementwise_mean'", ",", "offset", "=", "0.", ")", ":", "\n", "    ", "batch_size", "=", "logits", ".", "size", "(", "0", ")", "\n", "num_class", "=", "logits", ".", "size", "(", "1", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "logits", ")", ".", "byte", "(", ")", "\n", "# TODO: need to cover different versions of torch", "\n", "# mask = torch.ones_like(logits).bool()", "\n", "mask", "[", "torch", ".", "arange", "(", "batch_size", ")", ",", "targets", "]", "=", "0", "\n", "logits_true_label", "=", "logits", "[", "torch", ".", "arange", "(", "batch_size", ")", ",", "targets", "]", "\n", "logits_other_label", "=", "logits", "[", "mask", "]", ".", "reshape", "(", "batch_size", ",", "num_class", "-", "1", ")", "\n", "loss", "=", "torch", ".", "logsumexp", "(", "logits_other_label", ",", "dim", "=", "1", ")", "-", "logits_true_label", "\n", "return", "_reduce_loss", "(", "loss", ",", "reduction", ")", "+", "offset", "\n", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.SimpleModel.__init__": [[55, 59], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", "=", "DIM_INPUT", ",", "num_classes", "=", "NUM_CLASS", ")", ":", "\n", "        ", "super", "(", "SimpleModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "dim_input", ",", "10", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "10", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.SimpleModel.forward": [[60, 65], ["test_utils.SimpleModel.fc1", "torch.relu", "torch.relu", "torch.relu", "test_utils.SimpleModel.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.SimpleImageModel.__init__": [[69, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "NUM_CLASS", ")", ":", "\n", "        ", "super", "(", "SimpleImageModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "NUM_CLASS", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "COLOR_CHANNEL", ",", "8", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "4", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "8", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.SimpleImageModel.forward": [[78, 83], ["test_utils.SimpleImageModel.maxpool1", "test_utils.SimpleImageModel.view", "test_utils.SimpleImageModel.linear1", "test_utils.SimpleImageModel.relu1", "test_utils.SimpleImageModel.size", "test_utils.SimpleImageModel.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "maxpool1", "(", "self", ".", "relu1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear1", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.LeNet5.__init__": [[87, 98], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "64", ",", "200", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "200", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.LeNet5.forward": [[99, 106], ["test_utils.LeNet5.maxpool1", "test_utils.LeNet5.maxpool2", "test_utils.LeNet5.view", "test_utils.LeNet5.relu3", "test_utils.LeNet5.linear2", "test_utils.LeNet5.relu1", "test_utils.LeNet5.relu2", "test_utils.LeNet5.size", "test_utils.LeNet5.linear1", "test_utils.LeNet5.conv1", "test_utils.LeNet5.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "maxpool1", "(", "self", ".", "relu1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "maxpool2", "(", "self", ".", "relu2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "relu3", "(", "self", ".", "linear1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "linear2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.MLP.__init__": [[111, 118], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "28", "*", "28", ",", "300", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "300", ",", "100", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "100", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.MLP.forward": [[119, 127], ["x.view", "test_utils.MLP.linear1", "test_utils.MLP.relu1", "test_utils.MLP.linear2", "test_utils.MLP.relu2", "test_utils.MLP.linear3", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "linear2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "out", "=", "self", ".", "linear3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.generate_random_toy_data": [[133, 137], ["torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "", "def", "generate_random_toy_data", "(", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ")", ":", "\n", "    ", "data", "=", "torch", ".", "Tensor", "(", "BATCH_SIZE", ",", "DIM_INPUT", ")", ".", "uniform_", "(", "clip_min", ",", "clip_max", ")", "\n", "label", "=", "torch", ".", "LongTensor", "(", "BATCH_SIZE", ")", ".", "random_", "(", "NUM_CLASS", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.generate_random_image_toy_data": [[139, 144], ["torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "generate_random_image_toy_data", "(", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ")", ":", "\n", "    ", "data", "=", "torch", ".", "Tensor", "(", "BATCH_SIZE", ",", "3", ",", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ".", "uniform_", "(", "\n", "clip_min", ",", "clip_max", ")", "\n", "label", "=", "torch", ".", "LongTensor", "(", "BATCH_SIZE", ")", ".", "random_", "(", "NUM_CLASS", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.generate_data_model_on_vec": [[146, 151], ["test_utils.generate_random_toy_data", "test_utils.SimpleModel", "SimpleModel.eval"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.generate_random_toy_data", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval"], ["", "def", "generate_data_model_on_vec", "(", ")", ":", "\n", "    ", "data", ",", "label", "=", "generate_random_toy_data", "(", ")", "\n", "model", "=", "SimpleModel", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "data", ",", "label", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.generate_data_model_on_img": [[153, 158], ["test_utils.generate_random_image_toy_data", "test_utils.SimpleImageModel", "SimpleImageModel.eval"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.generate_random_image_toy_data", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.train.eval"], ["", "def", "generate_data_model_on_img", "(", ")", ":", "\n", "    ", "data", ",", "label", "=", "generate_random_image_toy_data", "(", ")", "\n", "model", "=", "SimpleImageModel", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "data", ",", "label", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.test_utils.merge2dicts": [[316, 320], ["x.copy", "x.copy.update"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.update"], ["def", "merge2dicts", "(", "x", ",", "y", ")", ":", "\n", "    ", "z", "=", "x", ".", "copy", "(", ")", "\n", "z", ".", "update", "(", "y", ")", "\n", "return", "z", "\n", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.FloatToIntSqueezing.forward": [[22, 28], ["torch.round"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "max_int", ",", "vmin", ",", "vmax", ")", ":", "\n", "# here assuming 0 =< x =< 1", "\n", "        ", "x", "=", "(", "x", "-", "vmin", ")", "/", "(", "vmax", "-", "vmin", ")", "\n", "x", "=", "torch", ".", "round", "(", "x", "*", "max_int", ")", "/", "max_int", "\n", "return", "x", "*", "(", "vmax", "-", "vmin", ")", "+", "vmin", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.FloatToIntSqueezing.backward": [[29, 33], ["NotImplementedError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"backward not implemented\"", ",", "FloatToIntSqueezing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.forward": [[37, 46], ["x.new_tensor", "_to_pil_image", "BytesIO", "_to_pil_image.save", "lst_img.append", "torch.stack", "_to_pil_image.detach().clone().cpu", "_to_tensor", "PIL.Image.open", "_to_pil_image.detach().clone", "_to_pil_image.detach"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "quality", ")", ":", "\n", "        ", "lst_img", "=", "[", "]", "\n", "for", "img", "in", "x", ":", "\n", "            ", "img", "=", "_to_pil_image", "(", "img", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ")", "\n", "virtualpath", "=", "BytesIO", "(", ")", "\n", "img", ".", "save", "(", "virtualpath", ",", "'JPEG'", ",", "quality", "=", "quality", ")", "\n", "lst_img", ".", "append", "(", "_to_tensor", "(", "Image", ".", "open", "(", "virtualpath", ")", ")", ")", "\n", "", "return", "x", ".", "new_tensor", "(", "torch", ".", "stack", "(", "lst_img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward": [[47, 51], ["NotImplementedError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"backward not implemented\"", ",", "JPEGEncodingDecoding", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.CarliniWagnerLoss.__init__": [[133, 135], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["        ", "Y_data", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "zeros_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", "]", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.CarliniWagnerLoss.forward": [[136, 148], ["input.size", "to_one_hot().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu().sum", "torch.relu().sum", "torch.relu().sum", "utils.to_one_hot", "torch.relu", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.to_one_hot"], ["        ", "Y_data", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "zeros_like", "(", "adv", ")", "]", ")", "\n", "# if normal.mean() < adv.mean():", "\n", "#     Y_data = 1 - Y_data", "\n", "", "aucroc", "=", "roc_auc_score", "(", "Y_data", ",", "X_data", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "X_data", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n", "\n", "", "def", "logits_regression_auc", "(", "normal", ",", "noise", ",", "adv", ",", "split", "=", "0.3", ")", ":", "\n", "# Input [num_data, num_features] ", "\n", "# MinMaxScale", "\n", "# Train logits regression and eval", "\n", "# finally output auc score", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.NormalizeByChannelMeanStd.__init__": [[323, 331], ["torch.Module.__init__", "utils.NormalizeByChannelMeanStd.register_buffer", "utils.NormalizeByChannelMeanStd.register_buffer", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.NormalizeByChannelMeanStd.forward": [[332, 334], ["utils.normalize_fn"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_fn"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.NormalizeByChannelMeanStd.extra_repr": [[335, 337], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.PerImageStandardize.__init__": [[363, 365], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.PerImageStandardize.forward": [[366, 368], ["utils.batch_per_image_standardization"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_per_image_standardization"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.torch_allclose": [[19, 41], ["np.allclose", "x.detach().cpu().numpy", "y.detach().cpu().numpy", "x.detach().cpu", "y.detach().cpu", "x.detach", "y.detach"], "function", ["None"], ["", "", "self", ".", "num_layers", "=", "i", "+", "1", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ",", "return_index", "=", "None", ")", ":", "\n", "        ", "feature", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "if", "get_features", "and", "type", "(", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", ")", "==", "torch", ".", "nn", ".", "ReLU", ":", "\n", "                ", "feature", ".", "append", "(", "x", ")", "\n", "if", "len", "(", "feature", ")", "-", "1", "==", "return_index", ":", "return", "feature", "[", "-", "1", "]", "\n", "", "", "if", "get_features", ":", "return", "x", ",", "feature", "\n", "return", "x", "\n", "\n", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.single_dim_flip": [[43, 50], ["torch.arange", "torch.arange", "torch.arange", "x.index_select", "x.dim", "x.size"], "function", ["None"], ["            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n", "", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.torch_flip": [[52, 56], ["utils.single_dim_flip"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.single_dim_flip"], ["self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input": [[58, 60], ["x.detach().clone", "x.detach"], "function", ["None"], ["self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input_withgrad": [[62, 64], ["x.detach().clone().requires_grad_", "x.detach().clone", "x.detach"], "function", ["None"], ["self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l2distsq": [[66, 69], ["d.view().sum", "d.view"], "function", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l1dist": [[71, 74], ["torch.abs", "torch.abs", "torch.abs", "torch.abs.view().sum", "torch.abs.view"], "function", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.tanh_rescale": [[76, 78], ["torch.tanh", "torch.tanh", "torch.tanh"], "function", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.torch_arctanh": [[80, 82], ["torch.log", "torch.log", "torch.log"], "function", ["None"], ["\n", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp": [[84, 112], ["torch.min.ndimension", "isinstance", "isinstance", "torch.clamp", "torch.clamp", "torch.clamp", "isinstance", "torch.clamp", "torch.clamp", "torch.clamp", "isinstance", "ValueError", "ValueError", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "min.ndimension", "min.view", "max.ndimension", "max.view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n", "", "", "def", "gen_results_strings", "(", "label", ",", "results_raw", ",", "results_adv", ")", ":", "\n", "    ", "out_string", "=", "f\"Label {label} \\n\"", "\n", "raw_str", "=", "\"Before Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_raw", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "raw_str", "+=", "f\"Class: {i} Prob: {results_raw[i]} \\n\"", "\n", "", "adv_str", "=", "\"After Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_adv", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adv_str", "+=", "f\"Class: {i} Prob: {results_adv[i]} \\n\"", "\n", "", "return", "out_string", "+", "raw_str", "+", "adv_str", "\n", "\n", "", "def", "get_TPR_at_TNR", "(", "X_data", ",", "num_normal", ",", "rate", "=", "10", ")", ":", "\n", "    ", "normal_data", "=", "X_data", "[", ":", "num_normal", "]", "\n", "adv_data", "=", "X_data", "[", "num_normal", ":", "]", "\n", "threshold", "=", "np", ".", "percentile", "(", "normal_data", ",", "rate", ",", "0", ")", "\n", "return", "1", "-", "(", "adv_data", ">", "threshold", ")", ".", "sum", "(", ")", "/", "adv_data", ".", "shape", "[", "0", "]", "\n", "\n", "", "from", "tqdm", "import", "tqdm", "\n", "def", "check_adv_samples", "(", "data_dict", ",", "model", ",", "label", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "key", ",", "data", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "batch_size", "=", "100", "\n", "total", "=", "0", "\n", "bingo", "=", "0", "\n", "for", "data_index", "in", "range", "(", "int", "(", "np", ".", "floor", "(", "data", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "data_dict", "[", "key", "]", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", "\n", "total", "+=", "batch_size", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.to_one_hot": [[116, 125], ["replicate_input().view", "replicate_input().view.new_zeros().scatter_", "utils.replicate_input", "replicate_input().view.new_zeros", "replicate_input().view.size"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input"], ["\n", "", "", "def", "get_pairs_auc", "(", "normal", ",", "noise", ",", "adv", ",", "split", "=", "0.3", ",", "adv_test", "=", "False", ",", "negative", "=", "True", ",", "get_rate", "=", "False", ")", ":", "\n", "# Gen train test pairs and compute auc", "\n", "# Input [num_data] output auc score", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "if", "not", "adv_test", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._batch_multiply_tensor_by_vector": [[150, 158], ["batch_tensor.transpose"], "function", ["None"], ["\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", ",", "noise", ",", "adv", "]", ")", "\n", "scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "X_total", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "normal", "=", "X_total", "[", ":", "num_data", "]", "\n", "noise", "=", "X_total", "[", "num_data", ":", "2", "*", "num_data", "]", "\n", "adv", "=", "X_total", "[", "2", "*", "num_data", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._batch_clamp_tensor_by_vector": [[160, 169], ["torch.min().transpose().contiguous", "torch.min().transpose().contiguous", "torch.min().transpose().contiguous", "torch.min().transpose", "torch.min().transpose", "torch.min().transpose", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "batch_tensor.transpose"], "function", ["None"], ["num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "X_train", "=", "np", ".", "concatenate", "(", "[", "normal", "[", ":", "-", "num_test", "]", ",", "noise", "[", ":", "-", "num_test", "]", ",", "adv", "[", ":", "-", "num_test", "]", "]", ")", "\n", "Y_train", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "lr", "=", "LogisticRegression", "(", "n_jobs", "=", "-", "1", ",", "max_iter", "=", "500", ",", "solver", "=", "'lbfgs'", ")", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "X_test", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "pred_prob", "=", "lr", ".", "predict_proba", "(", "X_test", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply": [[171, 180], ["isinstance", "utils._batch_multiply_tensor_by_vector", "isinstance", "len", "len", "TypeError"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._batch_multiply_tensor_by_vector"], ["\n", "", "def", "logits_regression_infer", "(", "normal", ",", "noise", ",", "adv", ",", "lr", ",", "split", "=", "0.3", ",", "get_rate", "=", "False", ")", ":", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "lr", ",", "scaler", "=", "lr", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "]", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ","]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_clamp": [[182, 192], ["isinstance", "utils._batch_clamp_tensor_by_vector", "isinstance", "len", "len", "utils.clamp", "TypeError"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._batch_clamp_tensor_by_vector", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["pred_prob", "=", "lr", ".", "predict_proba", "(", "X_total", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "\n", "aucroc", "=", "roc_auc_score", "(", "Y_test", ",", "pred_prob", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "pred_prob", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n", "\n", "", "def", "logits_regression_infer_raw", "(", "normal", ",", "noise", ",", "adv", ",", "lr", ",", "split", "=", "0.3", ",", "get_rate", "=", "False", ")", ":", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "lr", ",", "scaler", "=", "lr", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._get_norm_batch": [[194, 197], ["x.size", "x.abs().pow().view().sum().pow", "x.abs().pow().view().sum", "x.abs().pow().view", "x.abs().pow", "x.abs"], "function", ["None"], ["X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "adv", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._thresh_by_magnitude": [[199, 201], ["torch.relu", "torch.relu", "torch.relu", "x.sign", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["\n", "aucroc", "=", "roc_auc_score", "(", "Y_test", ",", "pred_prob", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "pred_prob", ",", "2", "*", "num_test", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_l1_proj_flat": [[203, 252], ["torch.abs", "torch.abs", "torch.abs", "v.sum.sum", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "isinstance", "x_b.size", "view.size", "torch.arange().float().to", "torch.arange().float().to", "torch.arange().float().to", "st.gather", "utils._thresh_by_magnitude", "x.detach().clone", "view.abs().sort", "u.dtype.__str__", "rho.unsqueeze", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.arange().float", "torch.arange().float", "torch.arange().float", "mu.cumsum", "x.detach", "view.abs", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._thresh_by_magnitude", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.None.utils.AverageMeter.__str__"], ["", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_l1_proj": [[254, 259], ["x.size", "x.view", "utils.batch_l1_proj_flat", "batch_l1_proj_flat.view_as"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_l1_proj_flat"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp_by_pnorm": [[261, 270], ["utils._get_norm_batch", "isinstance", "torch.min", "torch.min", "torch.min", "utils.batch_multiply", "isinstance", "isinstance", "isinstance", "torch.ones_like", "torch.ones_like", "torch.ones_like", "_get_norm_batch.size", "r.size"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._get_norm_batch", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.is_float_or_torch_tensor": [[272, 274], ["isinstance", "isinstance"], "function", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm": [[276, 293], ["utils._get_norm_batch", "torch.max", "torch.max", "torch.max", "utils.batch_multiply", "isinstance", "isinstance", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._get_norm_batch", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.jacobian": [[295, 313], ["utils.replicate_input_withgrad", "model", "torch.sum().backward", "torch.sum().backward", "torch.sum().backward", "replicate_input_withgrad.grad.detach().clone", "torch.sum", "torch.sum", "torch.sum", "replicate_input_withgrad.grad.detach"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input_withgrad", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_fn": [[339, 345], ["tensor.sub().div", "tensor.sub"], "function", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_per_image_standardization": [[347, 353], ["imgs.view().mean().view", "imgs.ndimension", "utils.batch_adjusted_stddev", "imgs.view().mean", "imgs.view"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_adjusted_stddev"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_adjusted_stddev": [[355, 360], ["imgs.view().std().view", "torch.max", "torch.max", "torch.max", "imgs.new_tensor().prod().float().sqrt", "imgs.view().std", "imgs.new_tensor().prod().float", "imgs.view", "imgs.new_tensor().prod", "imgs.new_tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.predict_from_logits": [[370, 372], ["logits.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.get_accuracy": [[374, 376], ["pred.eq().float().mean().item", "pred.eq().float().mean", "pred.eq().float", "pred.eq"], "function", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.set_torch_deterministic": [[378, 382], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.set_seed": [[384, 392], ["np.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.lbfgs.LBFGSAttack.__init__": [[47, 60], ["base.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "num_classes", ",", "batch_size", "=", "1", ",", "\n", "binary_search_steps", "=", "9", ",", "max_iterations", "=", "100", ",", "\n", "initial_const", "=", "1e-2", ",", "\n", "clip_min", "=", "0", ",", "clip_max", "=", "1", ",", "loss_fn", "=", "None", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "super", "(", "LBFGSAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "# XXX: should combine the input loss function with other things", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "binary_search_steps", "=", "binary_search_steps", "\n", "self", ".", "max_iterations", "=", "max_iterations", "\n", "self", ".", "initial_const", "=", "initial_const", "\n", "self", ".", "targeted", "=", "targeted", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.lbfgs.LBFGSAttack._update_if_better": [[62, 75], ["range", "torch.max", "torch.max", "torch.max", "torch.max", "output_label.item"], "methods", ["None"], ["", "def", "_update_if_better", "(", "\n", "self", ",", "adv_img", ",", "labs", ",", "output", ",", "dist", ",", "batch_size", ",", "\n", "final_l2dists", ",", "final_labels", ",", "final_advs", ")", ":", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "target_label", "=", "labs", "[", "ii", "]", "\n", "output_logits", "=", "output", "[", "ii", "]", "\n", "_", ",", "output_label", "=", "torch", ".", "max", "(", "output_logits", ",", "0", ")", "\n", "di", "=", "dist", "[", "ii", "]", "\n", "if", "(", "di", "<", "final_l2dists", "[", "ii", "]", "and", "\n", "output_label", ".", "item", "(", ")", "==", "target_label", ")", ":", "\n", "                ", "final_l2dists", "[", "ii", "]", "=", "di", "\n", "final_labels", "[", "ii", "]", "=", "output_label", "\n", "final_advs", "[", "ii", "]", "=", "adv_img", "[", "ii", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.lbfgs.LBFGSAttack._update_loss_coeffs": [[77, 97], ["range", "torch.max", "torch.max", "torch.max", "torch.max", "cur_label.item", "int", "min", "max"], "methods", ["None"], ["", "", "", "def", "_update_loss_coeffs", "(", "\n", "self", ",", "labs", ",", "batch_size", ",", "\n", "loss_coeffs", ",", "coeff_upper_bound", ",", "coeff_lower_bound", ",", "output", ")", ":", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "_", ",", "cur_label", "=", "torch", ".", "max", "(", "output", "[", "ii", "]", ",", "0", ")", "\n", "if", "cur_label", ".", "item", "(", ")", "==", "int", "(", "labs", "[", "ii", "]", ")", ":", "\n", "                ", "coeff_upper_bound", "[", "ii", "]", "=", "min", "(", "\n", "coeff_upper_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "", "else", ":", "\n", "                ", "coeff_lower_bound", "[", "ii", "]", "=", "max", "(", "\n", "coeff_lower_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "*=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.lbfgs.LBFGSAttack.perturb": [[99, 152], ["lbfgs.LBFGSAttack._verify_and_process_inputs", "len", "x.new_zeros", "x.clone", "list", "range", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "lbfgs.LBFGSAttack.predict", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.data.cpu().numpy().flatten().astype.data.cpu().numpy().flatten().astype.backward", "torch.from_numpy().float().to.grad.data.cpu().numpy().flatten().astype", "torch.from_numpy().float().to.grad.data.cpu().numpy().flatten().astype", "loss.data.cpu().numpy().flatten().astype.data.cpu().numpy().flatten().astype.data.cpu().numpy().flatten().astype", "x.new_ones", "x.new_ones", "numpy.ones().astype", "numpy.ones().astype", "zip", "x.clone().cpu().numpy().flatten().astype", "fmin_l_bfgs_b", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "advertorch.utils.calc_l2distsq", "lbfgs.LBFGSAttack.predict", "lbfgs.LBFGSAttack._update_if_better", "lbfgs.LBFGSAttack._update_loss_coeffs", "clip_min.flatten", "clip_max.flatten", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to.grad.data.cpu().numpy().flatten", "torch.from_numpy().float().to.grad.data.cpu().numpy().flatten", "loss.data.cpu().numpy().flatten().astype.data.cpu().numpy().flatten().astype.data.cpu().numpy().flatten", "numpy.ones", "numpy.ones", "x.clone().cpu().numpy().flatten", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "x.clone", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float().to.grad.data.cpu().numpy", "torch.from_numpy().float().to.grad.data.cpu().numpy", "loss.data.cpu().numpy().flatten().astype.data.cpu().numpy().flatten().astype.data.cpu().numpy", "x.clone().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float().to.reshape", "torch.from_numpy().float().to.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float().to.grad.data.cpu", "torch.from_numpy().float().to.grad.data.cpu", "loss.data.cpu().numpy().flatten().astype.data.cpu().numpy().flatten().astype.data.cpu", "x.clone().cpu", "adv_x_np.reshape", "x.clone"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l2distsq", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spatial.SpatialTransformAttack._update_if_better", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._update_loss_coeffs"], ["", "", "", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "\n", "        ", "from", "scipy", ".", "optimize", "import", "fmin_l_bfgs_b", "\n", "\n", "def", "_loss_fn", "(", "adv_x_np", ",", "self", ",", "x", ",", "target", ",", "const", ")", ":", "\n", "            ", "adv_x", "=", "torch", ".", "from_numpy", "(", "\n", "adv_x_np", ".", "reshape", "(", "x", ".", "shape", ")", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "x", ".", "device", ")", ".", "requires_grad_", "(", ")", "\n", "output", "=", "self", ".", "predict", "(", "adv_x", ")", "\n", "loss2", "=", "torch", ".", "sum", "(", "(", "x", "-", "adv_x", ")", "**", "2", ")", "\n", "loss_fn", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "loss1", "=", "torch", ".", "sum", "(", "const", "*", "loss_fn", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_ret", "=", "adv_x", ".", "grad", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", "\n", "loss", "=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", "\n", "if", "not", "self", ".", "targeted", ":", "\n", "                ", "loss", "=", "-", "loss", "\n", "", "return", "loss", ",", "grad_ret", "\n", "\n", "", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "batch_size", "=", "len", "(", "x", ")", "\n", "coeff_lower_bound", "=", "x", ".", "new_zeros", "(", "batch_size", ")", "\n", "coeff_upper_bound", "=", "x", ".", "new_ones", "(", "batch_size", ")", "*", "COEFF_UPPER", "\n", "loss_coeffs", "=", "x", ".", "new_ones", "(", "batch_size", ")", "*", "self", ".", "initial_const", "\n", "final_l2dists", "=", "[", "L2DIST_UPPER", "]", "*", "batch_size", "\n", "final_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "final_advs", "=", "x", ".", "clone", "(", ")", "\n", "clip_min", "=", "self", ".", "clip_min", "*", "np", ".", "ones", "(", "x", ".", "shape", "[", ":", "]", ")", ".", "astype", "(", "float", ")", "\n", "clip_max", "=", "self", ".", "clip_max", "*", "np", ".", "ones", "(", "x", ".", "shape", "[", ":", "]", ")", ".", "astype", "(", "float", ")", "\n", "clip_bound", "=", "list", "(", "zip", "(", "clip_min", ".", "flatten", "(", ")", ",", "clip_max", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "for", "outer_step", "in", "range", "(", "self", ".", "binary_search_steps", ")", ":", "\n", "            ", "init_guess", "=", "x", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", "\n", "adv_x", ",", "f", ",", "_", "=", "fmin_l_bfgs_b", "(", "_loss_fn", ",", "\n", "init_guess", ",", "\n", "args", "=", "(", "self", ",", "x", ".", "clone", "(", ")", ",", "y", ",", "loss_coeffs", ")", ",", "\n", "bounds", "=", "clip_bound", ",", "\n", "maxiter", "=", "self", ".", "max_iterations", ",", "\n", "iprint", "=", "0", ")", "\n", "\n", "adv_x", "=", "torch", ".", "from_numpy", "(", "\n", "adv_x", ".", "reshape", "(", "x", ".", "shape", ")", ")", ".", "float", "(", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "l2s", "=", "calc_l2distsq", "(", "x", ",", "adv_x", ")", "\n", "output", "=", "self", ".", "predict", "(", "adv_x", ")", "\n", "self", ".", "_update_if_better", "(", "\n", "adv_x", ",", "y", ",", "output", ".", "data", ",", "l2s", ",", "batch_size", ",", "\n", "final_l2dists", ",", "final_labels", ",", "final_advs", ")", "\n", "self", ".", "_update_loss_coeffs", "(", "\n", "y", ",", "batch_size", ",", "\n", "loss_coeffs", ",", "coeff_upper_bound", ",", "coeff_lower_bound", ",", "\n", "output", ".", "data", ")", "\n", "", "return", "final_advs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack.__init__": [[38, 48], ["base.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "num_classes", ",", "\n", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ",", "loss_fn", "=", "None", ",", "\n", "theta", "=", "1.0", ",", "gamma", "=", "1.0", ",", "comply_cleverhans", "=", "False", ")", ":", "\n", "        ", "super", "(", "JacobianSaliencyMapAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "comply_cleverhans", "=", "comply_cleverhans", "\n", "self", ".", "targeted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._compute_forward_derivative": [[50, 57], ["torch.stack", "torch.stack.view", "torch.stack.view.sum", "advertorch.utils.jacobian", "range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.jacobian"], ["", "def", "_compute_forward_derivative", "(", "self", ",", "xadv", ",", "y", ")", ":", "\n", "        ", "jacobians", "=", "torch", ".", "stack", "(", "[", "jacobian", "(", "self", ".", "predict", ",", "xadv", ",", "yadv", ")", "\n", "for", "yadv", "in", "range", "(", "self", ".", "num_classes", ")", "]", ")", "\n", "grads", "=", "jacobians", ".", "view", "(", "(", "jacobians", ".", "shape", "[", "0", "]", ",", "jacobians", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "grads_target", "=", "grads", "[", "y", ",", "range", "(", "len", "(", "y", ")", ")", ",", ":", "]", "\n", "grads_other", "=", "grads", ".", "sum", "(", "dim", "=", "0", ")", "-", "grads_target", "\n", "return", "grads_target", ",", "grads_other", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._sum_pair": [[59, 61], ["grads.view", "grads.view"], "methods", ["None"], ["", "def", "_sum_pair", "(", "self", ",", "grads", ",", "dim_x", ")", ":", "\n", "        ", "return", "grads", ".", "view", "(", "-", "1", ",", "dim_x", ",", "1", ")", "+", "grads", ".", "view", "(", "-", "1", ",", "1", ",", "dim_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._and_pair": [[62, 64], ["cond.view", "cond.view"], "methods", ["None"], ["", "def", "_and_pair", "(", "self", ",", "cond", ",", "dim_x", ")", ":", "\n", "        ", "return", "cond", ".", "view", "(", "-", "1", ",", "dim_x", ",", "1", ")", "&", "cond", ".", "view", "(", "-", "1", ",", "1", ",", "dim_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._saliency_map": [[65, 94], ["jsma.JacobianSaliencyMapAttack._sum_pair", "jsma.JacobianSaliencyMapAttack._sum_pair", "jsma.JacobianSaliencyMapAttack._and_pair", "torch.remainder", "search_space.ne", "torch.ones().byte", "scores_mask.view().any", "scores_mask.float", "torch.max", "torch.gt", "torch.lt", "torch.lt", "torch.gt", "scores.view", "range", "range", "torch.ones", "scores_mask.view"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._sum_pair", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._sum_pair", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._and_pair"], ["", "def", "_saliency_map", "(", "self", ",", "search_space", ",", "grads_target", ",", "grads_other", ",", "y", ")", ":", "\n", "\n", "        ", "dim_x", "=", "search_space", ".", "shape", "[", "1", "]", "\n", "\n", "# alpha in Algorithm 3 line 2", "\n", "gradsum_target", "=", "self", ".", "_sum_pair", "(", "grads_target", ",", "dim_x", ")", "\n", "# alpha in Algorithm 3 line 3", "\n", "gradsum_other", "=", "self", ".", "_sum_pair", "(", "grads_other", ",", "dim_x", ")", "\n", "\n", "if", "self", ".", "theta", ">", "0", ":", "\n", "            ", "scores_mask", "=", "(", "\n", "torch", ".", "gt", "(", "gradsum_target", ",", "0", ")", "&", "torch", ".", "lt", "(", "gradsum_other", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "scores_mask", "=", "(", "\n", "torch", ".", "lt", "(", "gradsum_target", ",", "0", ")", "&", "torch", ".", "gt", "(", "gradsum_other", ",", "0", ")", ")", "\n", "\n", "", "scores_mask", "&=", "self", ".", "_and_pair", "(", "search_space", ".", "ne", "(", "0", ")", ",", "dim_x", ")", "\n", "scores_mask", "[", ":", ",", "range", "(", "dim_x", ")", ",", "range", "(", "dim_x", ")", "]", "=", "0", "\n", "\n", "if", "self", ".", "comply_cleverhans", ":", "\n", "            ", "valid", "=", "torch", ".", "ones", "(", "scores_mask", ".", "shape", "[", "0", "]", ")", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "            ", "valid", "=", "scores_mask", ".", "view", "(", "-", "1", ",", "dim_x", "*", "dim_x", ")", ".", "any", "(", "dim", "=", "1", ")", "\n", "\n", "", "scores", "=", "scores_mask", ".", "float", "(", ")", "*", "(", "-", "gradsum_target", "*", "gradsum_other", ")", "\n", "best", "=", "torch", ".", "max", "(", "scores", ".", "view", "(", "-", "1", ",", "dim_x", "*", "dim_x", ")", ",", "1", ")", "[", "1", "]", "\n", "p1", "=", "torch", ".", "remainder", "(", "best", ",", "dim_x", ")", "\n", "p2", "=", "(", "best", "/", "dim_x", ")", ".", "long", "(", ")", "\n", "return", "p1", ",", "p2", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._modify_xadv": [[95, 105], ["xadv.view.view.view", "range", "advertorch.utils.clamp", "xadv.view.view.view"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "_modify_xadv", "(", "self", ",", "xadv", ",", "batch_size", ",", "cond", ",", "p1", ",", "p2", ")", ":", "\n", "        ", "ori_shape", "=", "xadv", ".", "shape", "\n", "xadv", "=", "xadv", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "for", "idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "cond", "[", "idx", "]", "!=", "0", ":", "\n", "                ", "xadv", "[", "idx", ",", "p1", "[", "idx", "]", "]", "+=", "self", ".", "theta", "\n", "xadv", "[", "idx", ",", "p2", "[", "idx", "]", "]", "+=", "self", ".", "theta", "\n", "", "", "xadv", "=", "clamp", "(", "xadv", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "\n", "xadv", "=", "xadv", ".", "view", "(", "ori_shape", ")", "\n", "return", "xadv", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._update_search_space": [[106, 111], ["range", "len"], "methods", ["None"], ["", "def", "_update_search_space", "(", "self", ",", "search_space", ",", "p1", ",", "p2", ",", "cond", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "cond", ")", ")", ":", "\n", "            ", "if", "cond", "[", "idx", "]", "!=", "0", ":", "\n", "                ", "search_space", "[", "idx", ",", "p1", "[", "idx", "]", "]", "-=", "1", "\n", "search_space", "[", "idx", ",", "p2", "[", "idx", "]", "]", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack.perturb": [[112, 143], ["jsma.JacobianSaliencyMapAttack._verify_and_process_inputs", "int", "int", "x.new_ones().int", "jsma.JacobianSaliencyMapAttack._get_predicted_label", "advertorch.utils.clamp", "numpy.prod", "jsma.JacobianSaliencyMapAttack._compute_forward_derivative", "jsma.JacobianSaliencyMapAttack._saliency_map", "jsma.JacobianSaliencyMapAttack._update_search_space", "jsma.JacobianSaliencyMapAttack._modify_xadv", "jsma.JacobianSaliencyMapAttack._get_predicted_label", "x.new_ones"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._compute_forward_derivative", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._saliency_map", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._update_search_space", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.jsma.JacobianSaliencyMapAttack._modify_xadv", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label"], ["", "", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "xadv", "=", "x", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "dim_x", "=", "int", "(", "np", ".", "prod", "(", "x", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "max_iters", "=", "int", "(", "dim_x", "*", "self", ".", "gamma", "/", "2", ")", "\n", "search_space", "=", "x", ".", "new_ones", "(", "batch_size", ",", "dim_x", ")", ".", "int", "(", ")", "\n", "curr_step", "=", "0", "\n", "yadv", "=", "self", ".", "_get_predicted_label", "(", "xadv", ")", "\n", "\n", "# Algorithm 1", "\n", "while", "(", "(", "y", "!=", "yadv", ")", ".", "any", "(", ")", "and", "curr_step", "<", "max_iters", ")", ":", "\n", "\n", "            ", "grads_target", ",", "grads_other", "=", "self", ".", "_compute_forward_derivative", "(", "\n", "xadv", ",", "y", ")", "\n", "\n", "# Algorithm 3", "\n", "p1", ",", "p2", ",", "valid", "=", "self", ".", "_saliency_map", "(", "\n", "search_space", ",", "grads_target", ",", "grads_other", ",", "y", ")", "\n", "\n", "cond", "=", "(", "y", "!=", "yadv", ")", "&", "valid", "\n", "\n", "self", ".", "_update_search_space", "(", "search_space", ",", "p1", ",", "p2", ",", "cond", ")", "\n", "\n", "xadv", "=", "self", ".", "_modify_xadv", "(", "xadv", ",", "batch_size", ",", "cond", ",", "p1", ",", "p2", ")", "\n", "yadv", "=", "self", ".", "_get_predicted_label", "(", "xadv", ")", "\n", "\n", "curr_step", "+=", "1", "\n", "\n", "", "xadv", "=", "clamp", "(", "xadv", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "\n", "return", "xadv", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spatial.SpatialTransformAttack.__init__": [[49, 63], ["base.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "num_classes", ",", "confidence", "=", "0", ",", "\n", "initial_const", "=", "1", ",", "max_iterations", "=", "1000", ",", "\n", "search_steps", "=", "1", ",", "loss_fn", "=", "None", ",", "\n", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ",", "\n", "abort_early", "=", "True", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatialTransformAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "confidence", "=", "confidence", "\n", "self", ".", "initial_const", "=", "initial_const", "\n", "self", ".", "max_iterations", "=", "max_iterations", "\n", "self", ".", "search_steps", "=", "search_steps", "\n", "self", ".", "abort_early", "=", "abort_early", "\n", "self", ".", "targeted", "=", "targeted", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spatial.SpatialTransformAttack._loss_fn_spatial": [[64, 92], ["x.clone", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.from_numpy().float().to().requires_grad_", "torch.grid_sample", "torch.grid_sample", "spatial.SpatialTransformAttack.predict", "loss.backward", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu().numpy().flatten().astype", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu().numpy().flatten().astype", "torch.from_numpy().float().to().requires_grad_.grad.data.zero_", "torch.from_numpy().float().to().requires_grad_.grad.data.zero_", "advertorch.utils.clamp", "advertorch.utils.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.data.cpu().numpy().astype", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu().numpy().flatten", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu().numpy().flatten", "loss.data.cpu().numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu().numpy", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu().numpy", "loss.data.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu", "torch.from_numpy().float().to().requires_grad_.grad.data.cpu", "torch.from_numpy().float().to().requires_grad_.reshape", "torch.from_numpy().float().to().requires_grad_.reshape"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "_loss_fn_spatial", "(", "self", ",", "grid", ",", "x", ",", "y", ",", "const", ",", "grid_ori", ")", ":", "\n", "        ", "imgs", "=", "x", ".", "clone", "(", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "\n", "grid", ".", "reshape", "(", "grid_ori", ".", "shape", ")", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "x", ".", "device", ")", ".", "requires_grad_", "(", ")", "\n", "delta", "=", "grid_ori", "-", "grid", "\n", "\n", "adv_img", "=", "F", ".", "grid_sample", "(", "imgs", ",", "grid", ")", "\n", "output", "=", "self", ".", "predict", "(", "adv_img", ")", "\n", "real", "=", "(", "y", "*", "output", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "other", "=", "(", "\n", "(", "1.0", "-", "y", ")", "*", "output", "-", "(", "y", "*", "TARGET_MULT", ")", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "if", "self", ".", "targeted", ":", "\n", "            ", "loss1", "=", "clamp", "(", "other", "-", "real", "+", "self", ".", "confidence", ",", "min", "=", "0.", ")", "\n", "", "else", ":", "\n", "            ", "loss1", "=", "clamp", "(", "real", "-", "other", "+", "self", ".", "confidence", ",", "min", "=", "0.", ")", "\n", "", "loss2", "=", "self", ".", "initial_const", "*", "(", "\n", "torch", ".", "sqrt", "(", "(", "(", "(", "\n", "delta", "[", ":", ",", ":", ",", "1", ":", "]", "-", "delta", "[", ":", ",", ":", ",", ":", "-", "1", "]", "+", "1e-10", ")", "**", "2", ")", ")", ".", "view", "(", "\n", "delta", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ")", "+", "\n", "torch", ".", "sqrt", "(", "(", "(", "\n", "delta", "[", ":", ",", "1", ":", ",", ":", "]", "-", "delta", "[", ":", ",", ":", "-", "1", ",", ":", "]", "+", "1e-10", ")", "**", "2", ")", ".", "view", "(", "\n", "delta", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ")", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss1", ")", "+", "torch", ".", "sum", "(", "loss2", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_ret", "=", "grid", ".", "grad", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", "\n", "grid", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "return", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "float", ")", ",", "grad_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spatial.SpatialTransformAttack._update_if_better": [[93, 110], ["range", "torch.max", "torch.max", "torch.max", "torch.max", "utils.is_successful", "int", "int", "output_label.item"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.is_successful"], ["", "def", "_update_if_better", "(", "\n", "self", ",", "adv_img", ",", "labs", ",", "output", ",", "dist", ",", "batch_size", ",", "\n", "final_l2dists", ",", "final_labels", ",", "final_advs", ",", "step", ",", "final_step", ")", ":", "\n", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "target_label", "=", "labs", "[", "ii", "]", "\n", "output_logits", "=", "output", "[", "ii", "]", "\n", "_", ",", "output_label", "=", "torch", ".", "max", "(", "output_logits", ",", "0", ")", "\n", "di", "=", "dist", "[", "ii", "]", "\n", "if", "(", "di", "<", "final_l2dists", "[", "ii", "]", "and", "\n", "is_successful", "(", "\n", "int", "(", "output_label", ".", "item", "(", ")", ")", ",", "int", "(", "target_label", ")", ",", "\n", "self", ".", "targeted", ")", ")", ":", "\n", "                ", "final_l2dists", "[", "ii", "]", "=", "di", "\n", "final_labels", "[", "ii", "]", "=", "output_label", "\n", "final_advs", "[", "ii", "]", "=", "adv_img", "[", "ii", "]", "\n", "final_step", "[", "ii", "]", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spatial.SpatialTransformAttack.perturb": [[111, 160], ["spatial.SpatialTransformAttack._verify_and_process_inputs", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "theta.repeat.repeat.repeat", "torch.affine_grid", "torch.affine_grid", "torch.from_numpy().float().to.clone", "torch.from_numpy().float().to.clone", "advertorch.utils.to_one_hot().float", "list", "torch.from_numpy().float().to.clone().data.cpu().numpy().flatten().astype", "torch.from_numpy().float().to.clone().data.cpu().numpy().flatten().astype", "range", "x.new_ones", "x.size", "numpy.ones", "numpy.ones", "zip", "fmin_l_bfgs_b", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.grid_sample", "torch.grid_sample", "advertorch.utils.calc_l2distsq", "spatial.SpatialTransformAttack.predict", "spatial.SpatialTransformAttack._update_if_better", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "advertorch.utils.to_one_hot", "clip_min.flatten", "clip_max.flatten", "torch.from_numpy().float().to.clone().data.cpu().numpy().flatten", "torch.from_numpy().float().to.clone().data.cpu().numpy().flatten", "x.clone", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float().to.clone().data.cpu().numpy", "torch.from_numpy().float().to.clone().data.cpu().numpy", "x.clone().detach", "torch.from_numpy().float().to.clone.clone().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float().to.clone().data.cpu", "torch.from_numpy().float().to.clone().data.cpu", "x.clone", "torch.from_numpy().float().to.clone.clone", "torch.from_numpy().float().to.clone().data.cpu().numpy().flatten().astype.reshape", "torch.from_numpy().float().to.clone", "torch.from_numpy().float().to.clone"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l2distsq", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spatial.SpatialTransformAttack._update_if_better", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.to_one_hot"], ["", "", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "batch_size", "=", "len", "(", "x", ")", "\n", "loss_coeffs", "=", "x", ".", "new_ones", "(", "batch_size", ")", "*", "self", ".", "initial_const", "\n", "final_l2dists", "=", "[", "L2DIST_UPPER", "]", "*", "batch_size", "\n", "final_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "final_step", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "final_advs", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "# TODO: refactor the theta generation", "\n", "theta", "=", "torch", ".", "tensor", "(", "[", "[", "[", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "0.", "]", "]", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "theta", "=", "theta", ".", "repeat", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "\n", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "x", ".", "size", "(", ")", ")", "\n", "\n", "grid_ori", "=", "grid", ".", "clone", "(", ")", "\n", "y_onehot", "=", "to_one_hot", "(", "y", ",", "self", ".", "num_classes", ")", ".", "float", "(", ")", "\n", "\n", "clip_min", "=", "np", ".", "ones", "(", "grid_ori", ".", "shape", "[", ":", "]", ")", "*", "-", "1", "\n", "clip_max", "=", "np", ".", "ones", "(", "grid_ori", ".", "shape", "[", ":", "]", ")", "*", "1", "\n", "clip_bound", "=", "list", "(", "zip", "(", "clip_min", ".", "flatten", "(", ")", ",", "clip_max", ".", "flatten", "(", ")", ")", ")", "\n", "grid_ret", "=", "grid", ".", "clone", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", "\n", "from", "scipy", ".", "optimize", "import", "fmin_l_bfgs_b", "\n", "for", "outer_step", "in", "range", "(", "self", ".", "search_steps", ")", ":", "\n", "            ", "grid_ret", ",", "f", ",", "d", "=", "fmin_l_bfgs_b", "(", "\n", "self", ".", "_loss_fn_spatial", ",", "\n", "grid_ret", ",", "\n", "args", "=", "(", "\n", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "\n", "y_onehot", ",", "loss_coeffs", ",", "\n", "grid_ori", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", ",", "\n", "maxiter", "=", "self", ".", "max_iterations", ",", "\n", "bounds", "=", "clip_bound", ",", "\n", "iprint", "=", "0", ",", "\n", "maxls", "=", "100", ",", "\n", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "\n", "grid_ret", ".", "reshape", "(", "grid_ori", ".", "shape", ")", ")", ".", "float", "(", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "adv_x", "=", "F", ".", "grid_sample", "(", "x", ".", "clone", "(", ")", ",", "grid", ")", "\n", "l2s", "=", "calc_l2distsq", "(", "grid", ".", "data", ",", "grid_ori", ".", "data", ")", "\n", "output", "=", "self", ".", "predict", "(", "adv_x", ")", "\n", "self", ".", "_update_if_better", "(", "\n", "adv_x", ".", "data", ",", "y", ",", "output", ".", "data", ",", "l2s", ",", "batch_size", ",", "\n", "final_l2dists", ",", "final_labels", ",", "final_advs", ",", "\n", "outer_step", ",", "final_step", ")", "\n", "\n", "", "return", "final_advs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.Attack.__init__": [[28, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", ":", "\n", "        ", "\"\"\"Create an Attack instance.\"\"\"", "\n", "self", ".", "predict", "=", "predict", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "clip_min", "=", "clip_min", "\n", "self", ".", "clip_max", "=", "clip_max", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.Attack.perturb": [[35, 44], ["NotImplementedError"], "methods", ["None"], ["", "def", "perturb", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Virtual method for generating the adversarial examples.\n\n        :param x: the model's input tensor.\n        :param **kwargs: optional parameters used by child classes.\n        :return: adversarial examples.\n        \"\"\"", "\n", "error", "=", "\"Sub-classes must implement perturb.\"", "\n", "raise", "NotImplementedError", "(", "error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.Attack.__call__": [[45, 47], ["base.Attack.perturb"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "perturb", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label": [[50, 62], ["torch.max", "torch.no_grad", "base.LabelMixin.predict"], "methods", ["None"], ["    ", "def", "_get_predicted_label", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Compute predicted labels given x. Used to prevent label leaking\n        during adversarial training.\n\n        :param x: the model's input tensor.\n        :return: tensor containing predicted labels.\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "predict", "(", "x", ")", "\n", "", "_", ",", "y", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs": [[63, 74], ["base.LabelMixin._get_predicted_label"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label"], ["", "def", "_verify_and_process_inputs", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "targeted", ":", "\n", "            ", "assert", "y", "is", "not", "None", "\n", "\n", "", "if", "not", "self", ".", "targeted", ":", "\n", "            ", "if", "y", "is", "None", ":", "\n", "                ", "y", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "\n", "# x = replicate_input(x)", "\n", "# y = replicate_input(y)", "\n", "", "", "return", "x", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.decoupled_direction_norm.DDNL2Attack.__init__": [[39, 64], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "base.Attack.__init__", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "nb_iter", "=", "100", ",", "gamma", "=", "0.05", ",", "init_norm", "=", "1.", ",", "\n", "quantize", "=", "True", ",", "levels", "=", "256", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "targeted", "=", "False", ",", "loss_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Decoupled Direction and Norm L2 Attack implementation in pytorch.\n        \"\"\"", "\n", "if", "loss_fn", "is", "not", "None", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\n", "\"This Attack currently does not support a different loss\"", "\n", "\" function other than the default. Setting loss_fn manually\"", "\n", "\" is not effective.\"", "\n", ")", "\n", "\n", "", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n", "super", "(", "DDNL2Attack", ",", "self", ")", ".", "__init__", "(", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "init_norm", "=", "init_norm", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "levels", "=", "levels", "\n", "self", ".", "targeted", "=", "targeted", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.decoupled_direction_norm.DDNL2Attack.perturb": [[65, 138], ["decoupled_direction_norm.DDNL2Attack._verify_and_process_inputs", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.max().flatten().norm", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.max().flatten().norm.clone", "torch.max().flatten().norm.clone", "torch.max().flatten().norm.clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.lr_scheduler.CosineAnnealingLR.step", "torch.zeros_like.data.flatten().norm", "torch.zeros_like.data.flatten().norm", "torch.zeros_like.data.flatten().norm", "decoupled_direction_norm.DDNL2Attack.predict", "decoupled_direction_norm.DDNL2Attack.argmax", "decoupled_direction_norm.DDNL2Attack.loss_fn", "torch.SGD.zero_grad", "loss.backward", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.SGD.step", "torch.full.mul_", "torch.full.mul_", "torch.full.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "x.dim", "torch.max().flatten", "torch.max().flatten", "torch.max().flatten", "torch.max().flatten", "torch.max().flatten", "torch.max().flatten", "torch.max().flatten", "torch.max().flatten", "torch.max().flatten", "torch.zeros_like.grad.flatten().norm", "torch.zeros_like.grad.flatten().norm", "torch.zeros_like.grad.flatten().norm", "grad_norms.view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.zeros_like.data.sub_().div_", "torch.zeros_like.data.sub_().div_", "torch.zeros_like.data.sub_().div_", "torch.zeros_like.data.mul_().round_().div_", "torch.zeros_like.data.mul_().round_().div_", "torch.zeros_like.data.mul_().round_().div_", "torch.zeros_like.data.mul_().add_", "torch.zeros_like.data.mul_().add_", "torch.zeros_like.data.mul_().add_", "torch.zeros_like.data.flatten", "torch.zeros_like.data.flatten", "torch.zeros_like.data.flatten", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros_like.grad.flatten", "torch.zeros_like.grad.flatten", "torch.zeros_like.grad.flatten", "torch.zeros_like.data.sub_", "torch.zeros_like.data.sub_", "torch.zeros_like.data.sub_", "torch.zeros_like.data.mul_().round_", "torch.zeros_like.data.mul_().round_", "torch.zeros_like.data.mul_().round_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.flatten().norm", "torch.zeros_like.data.flatten().norm", "torch.zeros_like.data.flatten().norm", "is_adv.float", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.flatten", "torch.zeros_like.data.flatten", "torch.zeros_like.data.flatten"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with\n        an attack length of eps.\n\n        :param x: input tensor.\n        :param y: label tensor.\n                  - if None and self.targeted=False, compute y as predicted\n                    labels.\n                  - if self.targeted=True, then y must be the targeted labels.\n        :return: tensor containing perturbed inputs.\n        \"\"\"", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "s", "=", "self", ".", "clip_max", "-", "self", ".", "clip_min", "\n", "multiplier", "=", "1", "if", "self", ".", "targeted", "else", "-", "1", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "data_dims", "=", "(", "1", ",", ")", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "s", "*", "self", ".", "init_norm", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "worst_norm", "=", "torch", ".", "max", "(", "\n", "x", "-", "self", ".", "clip_min", ",", "self", ".", "clip_max", "-", "x", ")", ".", "flatten", "(", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# setup variable and optimizer", "\n", "delta", "=", "torch", ".", "zeros_like", "(", "x", ",", "requires_grad", "=", "True", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "delta", "]", ",", "lr", "=", "1", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "T_max", "=", "self", ".", "nb_iter", ",", "eta_min", "=", "0.01", ")", "\n", "\n", "best_l2", "=", "worst_norm", ".", "clone", "(", ")", "\n", "best_delta", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nb_iter", ")", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "l2", "=", "delta", ".", "data", ".", "flatten", "(", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "logits", "=", "self", ".", "predict", "(", "x", "+", "delta", ")", "\n", "pred_labels", "=", "logits", ".", "argmax", "(", "1", ")", "\n", "ce_loss", "=", "self", ".", "loss_fn", "(", "logits", ",", "y", ")", "\n", "loss", "=", "multiplier", "*", "ce_loss", "\n", "\n", "is_adv", "=", "(", "pred_labels", "==", "y", ")", "if", "self", ".", "targeted", "else", "(", "\n", "pred_labels", "!=", "y", ")", "\n", "is_smaller", "=", "l2", "<", "best_l2", "\n", "is_both", "=", "is_adv", "*", "is_smaller", "\n", "best_l2", "[", "is_both", "]", "=", "l2", "[", "is_both", "]", "\n", "best_delta", "[", "is_both", "]", "=", "delta", ".", "data", "[", "is_both", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# renorming gradient", "\n", "grad_norms", "=", "s", "*", "delta", ".", "grad", ".", "flatten", "(", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "delta", ".", "grad", ".", "div_", "(", "grad_norms", ".", "view", "(", "-", "1", ",", "*", "data_dims", ")", ")", "\n", "# avoid nan or inf if gradient is 0", "\n", "if", "(", "grad_norms", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                ", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", "=", "torch", ".", "randn_like", "(", "\n", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "norm", ".", "mul_", "(", "1", "-", "(", "2", "*", "is_adv", ".", "float", "(", ")", "-", "1", ")", "*", "self", ".", "gamma", ")", "\n", "\n", "delta", ".", "data", ".", "mul_", "(", "(", "norm", "/", "delta", ".", "data", ".", "flatten", "(", "1", ")", ".", "norm", "(", "\n", "p", "=", "2", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "-", "1", ",", "*", "data_dims", ")", ")", "\n", "delta", ".", "data", ".", "add_", "(", "x", ")", "\n", "if", "self", ".", "quantize", ":", "\n", "                ", "delta", ".", "data", ".", "sub_", "(", "self", ".", "clip_min", ")", ".", "div_", "(", "s", ")", "\n", "delta", ".", "data", ".", "mul_", "(", "self", ".", "levels", "-", "1", ")", ".", "round_", "(", ")", ".", "div_", "(", "self", ".", "levels", "-", "1", ")", "\n", "delta", ".", "data", ".", "mul_", "(", "s", ")", ".", "add_", "(", "self", ".", "clip_min", ")", "\n", "", "delta", ".", "data", ".", "clamp_", "(", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", ".", "sub_", "(", "x", ")", "\n", "\n", "", "return", "x", "+", "best_delta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack.__init__": [[60, 81], ["base.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", ",", "confidence", "=", "0", ",", "\n", "targeted", "=", "False", ",", "learning_rate", "=", "0.01", ",", "\n", "binary_search_steps", "=", "9", ",", "nb_iter", "=", "100", ",", "\n", "abort_early", "=", "True", ",", "initial_const", "=", "1e-1", ",", "const_L1", "=", "0", ",", "\n", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "eps", "=", "None", ",", "eps_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Carlini Wagner L2 Attack implementation in pytorch.\"\"\"", "\n", "\n", "super", "(", "CarliniWagnerL2Attack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "binary_search_steps", "=", "binary_search_steps", "\n", "self", ".", "abort_early", "=", "abort_early", "\n", "self", ".", "confidence", "=", "confidence", "\n", "self", ".", "initial_const", "=", "initial_const", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "# The last iteration (if we run many steps) repeat the search once.", "\n", "self", ".", "repeat", "=", "binary_search_steps", ">=", "REPEAT_STEP", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "const_L1", "=", "const_L1", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._loss_fn": [[82, 101], ["carlini_wagner.CarliniWagnerL2Attack.loss_fn", "carlini_wagner.CarliniWagnerL2Attack.mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss.mean"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "_loss_fn", "(", "self", ",", "output", ",", "y_onehot", ",", "l2distsq", ",", "l1dist", ",", "const", ")", ":", "\n", "# TODO: move this out of the class and make this the default loss_fn", "\n", "#   after having targeted tests implemented", "\n", "        ", "loss1", "=", "self", ".", "loss_fn", "(", "output", ",", "y_onehot", ")", "\n", "loss2", "=", "(", "l2distsq", ")", "\n", "raw_loss1", "=", "loss1", ".", "mean", "(", ")", "\n", "const", "=", "torch", ".", "clamp", "(", "loss1", ",", "min", "=", "0.1", ",", "max", "=", "0.1", ")", "\n", "# if loss1.mean() < 5:", "\n", "#     const = 0.001", "\n", "# else:", "\n", "#     const = 0.1", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# print(const)", "\n", "loss", "=", "const", "*", "loss1", "+", "loss2", "+", "l1dist", "*", "self", ".", "const_L1", "\n", "# loss1 = (const * loss1).mean()", "\n", "# # loss = loss1 + loss2", "\n", "# print(f'loss L2 {loss2.mean()} loss fn {raw_loss1}')", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._is_successful": [[102, 121], ["utils.is_successful", "output.detach().clone.detach().clone.detach().clone", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax.new_zeros().byte", "torch.argmax.new_zeros().byte", "torch.argmax.new_zeros().byte", "output.detach().clone.detach().clone.detach", "torch.argmax.new_zeros", "torch.argmax.new_zeros", "torch.argmax.new_zeros", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.is_successful"], ["", "def", "_is_successful", "(", "self", ",", "output", ",", "label", ",", "is_logits", ")", ":", "\n", "# determine success, see if confidence-adjusted logits give the right", "\n", "#   label", "\n", "\n", "        ", "if", "is_logits", ":", "\n", "            ", "output", "=", "output", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "                ", "output", "[", "torch", ".", "arange", "(", "len", "(", "label", ")", ")", ".", "long", "(", ")", ",", "\n", "label", "]", "-=", "self", ".", "confidence", "\n", "", "else", ":", "\n", "                ", "output", "[", "torch", ".", "arange", "(", "len", "(", "label", ")", ")", ".", "long", "(", ")", ",", "\n", "label", "]", "+=", "self", ".", "confidence", "\n", "", "pred", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "pred", "=", "output", "\n", "if", "pred", "==", "INVALID_LABEL", ":", "\n", "                ", "return", "pred", ".", "new_zeros", "(", "pred", ".", "shape", ")", ".", "byte", "(", ")", "\n", "\n", "", "", "return", "is_successful", "(", "pred", ",", "label", ",", "self", ".", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._forward_and_update_delta": [[123, 140], ["optimizer.zero_grad", "advertorch.utils.tanh_rescale", "advertorch.utils.tanh_rescale", "carlini_wagner.CarliniWagnerL2Attack.predict", "advertorch.utils.calc_l2distsq", "advertorch.utils.calc_l1dist", "carlini_wagner.CarliniWagnerL2Attack._loss_fn", "carlini_wagner.CarliniWagnerL2Attack.backward", "optimizer.step", "type", "carlini_wagner.CarliniWagnerL2Attack.item"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.tanh_rescale", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.tanh_rescale", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l2distsq", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l1dist", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._loss_fn", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward"], ["", "def", "_forward_and_update_delta", "(", "\n", "self", ",", "optimizer", ",", "x_atanh", ",", "delta", ",", "y", ",", "loss_coeffs", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "adv", "=", "tanh_rescale", "(", "delta", "+", "x_atanh", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "transimgs_rescale", "=", "tanh_rescale", "(", "x_atanh", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "output", "=", "self", ".", "predict", "(", "adv", ")", "\n", "l2distsq", "=", "calc_l2distsq", "(", "adv", ",", "transimgs_rescale", ")", "\n", "l1dist", "=", "calc_l1dist", "(", "adv", ",", "transimgs_rescale", ")", "\n", "loss", "=", "self", ".", "_loss_fn", "(", "output", ",", "y", ",", "l2distsq", ",", "l1dist", ",", "loss_coeffs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "type", "(", "output", ")", "==", "tuple", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "            ", "output", "=", "output", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "return", "loss", ".", "item", "(", ")", ",", "l2distsq", ".", "data", ",", "output", ".", "data", ",", "adv", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._get_arctanh_x": [[142, 146], ["advertorch.utils.torch_arctanh", "advertorch.utils.clamp"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.torch_arctanh", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "_get_arctanh_x", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "clamp", "(", "(", "x", "-", "self", ".", "clip_min", ")", "/", "(", "self", ".", "clip_max", "-", "self", ".", "clip_min", ")", ",", "\n", "min", "=", "0.", ",", "max", "=", "1.", ")", "*", "2", "-", "1", "\n", "return", "torch_arctanh", "(", "result", "*", "ONE_MINUS_EPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._update_if_smaller_dist_succeed": [[147, 165], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "_update_if_smaller_dist_succeed", "(", "\n", "self", ",", "adv_img", ",", "labs", ",", "output", ",", "l2distsq", ",", "batch_size", ",", "\n", "cur_l2distsqs", ",", "cur_labels", ",", "\n", "final_l2distsqs", ",", "final_labels", ",", "final_advs", ")", ":", "\n", "\n", "        ", "target_label", "=", "labs", "\n", "output_logits", "=", "output", "\n", "_", ",", "output_label", "=", "torch", ".", "max", "(", "output_logits", ",", "1", ")", "\n", "\n", "mask", "=", "(", "l2distsq", "<", "cur_l2distsqs", ")", "\n", "\n", "cur_l2distsqs", "[", "mask", "]", "=", "l2distsq", "[", "mask", "]", "# redundant", "\n", "cur_labels", "[", "mask", "]", "=", "output_label", "[", "mask", "]", "\n", "\n", "mask", "=", "(", "l2distsq", "<", "final_l2distsqs", ")", "\n", "final_l2distsqs", "[", "mask", "]", "=", "l2distsq", "[", "mask", "]", "\n", "final_labels", "[", "mask", "]", "=", "output_label", "[", "mask", "]", "\n", "final_advs", "[", "mask", "]", "=", "adv_img", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._update_loss_coeffs": [[166, 189], ["range", "int", "carlini_wagner.CarliniWagnerL2Attack._is_successful", "min", "max"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._is_successful"], ["", "def", "_update_loss_coeffs", "(", "\n", "self", ",", "labs", ",", "cur_labels", ",", "batch_size", ",", "loss_coeffs", ",", "\n", "coeff_upper_bound", ",", "coeff_lower_bound", ")", ":", "\n", "\n", "# TODO: remove for loop, not significant, since only called during each", "\n", "# binary search step", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_labels", "[", "ii", "]", "=", "int", "(", "cur_labels", "[", "ii", "]", ")", "\n", "if", "self", ".", "_is_successful", "(", "cur_labels", "[", "ii", "]", ",", "labs", "[", "ii", "]", ",", "False", ")", ":", "\n", "                ", "coeff_upper_bound", "[", "ii", "]", "=", "min", "(", "\n", "coeff_upper_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "", "else", ":", "\n", "                ", "coeff_lower_bound", "[", "ii", "]", "=", "max", "(", "\n", "coeff_lower_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "*=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack.perturb": [[190, 238], ["carlini_wagner.CarliniWagnerL2Attack._verify_and_process_inputs", "advertorch.utils.replicate_input", "len", "advertorch.utils.replicate_input.new_zeros", "carlini_wagner.CarliniWagnerL2Attack._get_arctanh_x", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Adam", "torch.Adam", "torch.Adam", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "advertorch.utils.replicate_input.new_ones", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "carlini_wagner.CarliniWagnerL2Attack._forward_and_update_delta", "carlini_wagner.CarliniWagnerL2Attack._update_if_smaller_dist_succeed", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._get_arctanh_x", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.carlini_wagner.CarliniWagnerL2Attack._forward_and_update_delta", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._update_if_smaller_dist_succeed"], ["", "", "", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "# # Initialization", "\n", "# if y is None:", "\n", "#     y = self._get_predicted_label(x)", "\n", "x", "=", "replicate_input", "(", "x", ")", "\n", "batch_size", "=", "len", "(", "x", ")", "\n", "coeff_lower_bound", "=", "x", ".", "new_zeros", "(", "batch_size", ")", "\n", "coeff_upper_bound", "=", "x", ".", "new_ones", "(", "batch_size", ")", "*", "CARLINI_COEFF_UPPER", "\n", "loss_coeffs", "=", "torch", ".", "ones_like", "(", "y", "[", "0", "]", ")", ".", "float", "(", ")", "*", "self", ".", "initial_const", "\n", "final_l2distsqs", "=", "[", "CARLINI_L2DIST_UPPER", "]", "*", "batch_size", "\n", "final_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "final_advs", "=", "x", "\n", "x_atanh", "=", "self", ".", "_get_arctanh_x", "(", "x", ")", "\n", "\n", "final_l2distsqs", "=", "torch", ".", "FloatTensor", "(", "final_l2distsqs", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "final_labels", "=", "torch", ".", "LongTensor", "(", "final_labels", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "# Start binary search", "\n", "delta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros_like", "(", "x", ")", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "delta", "]", ",", "lr", "=", "self", ".", "learning_rate", ")", "\n", "cur_l2distsqs", "=", "[", "CARLINI_L2DIST_UPPER", "]", "*", "batch_size", "\n", "cur_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "cur_l2distsqs", "=", "torch", ".", "FloatTensor", "(", "cur_l2distsqs", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "cur_labels", "=", "torch", ".", "LongTensor", "(", "cur_labels", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "prevloss", "=", "PREV_LOSS_INIT", "\n", "\n", "for", "ii", "in", "range", "(", "self", ".", "nb_iter", ")", ":", "\n", "            ", "loss", ",", "l2distsq", ",", "output", ",", "adv_img", "=", "self", ".", "_forward_and_update_delta", "(", "\n", "optimizer", ",", "x_atanh", ",", "delta", ",", "y", ",", "loss_coeffs", ")", "\n", "# if self.abort_early:", "\n", "#     if ii % (self.nb_iter // NUM_CHECKS or 1) == 0:", "\n", "#         if loss > prevloss * ONE_MINUS_EPS:", "\n", "#             break", "\n", "#         prevloss = loss", "\n", "\n", "self", ".", "_update_if_smaller_dist_succeed", "(", "\n", "adv_img", ",", "y", ",", "output", ",", "l2distsq", ",", "batch_size", ",", "\n", "cur_l2distsqs", ",", "cur_labels", ",", "\n", "final_l2distsqs", ",", "final_labels", ",", "final_advs", ")", "\n", "\n", "# self._update_loss_coeffs(", "\n", "#     y, cur_labels, batch_size,", "\n", "#     loss_coeffs, coeff_upper_bound, coeff_lower_bound)", "\n", "\n", "", "return", "adv_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.one_step_gradient.GradientSignAttack.__init__": [[36, 48], ["base.Attack.__init__", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "clip_min", "=", "0.", ",", "\n", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Create an instance of the GradientSignAttack.\n        \"\"\"", "\n", "super", "(", "GradientSignAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "targeted", "=", "targeted", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.one_step_gradient.GradientSignAttack.perturb": [[49, 77], ["one_step_gradient.GradientSignAttack._verify_and_process_inputs", "x.requires_grad_", "one_step_gradient.GradientSignAttack.predict", "one_step_gradient.GradientSignAttack.loss_fn", "one_step_gradient.GradientSignAttack.backward", "advertorch.utils.clamp.grad.detach().sign", "advertorch.utils.clamp", "advertorch.utils.clamp.detach", "advertorch.utils.batch_multiply", "advertorch.utils.clamp.grad.detach"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply"], ["", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with\n        an attack length of eps.\n\n        :param x: input tensor.\n        :param y: label tensor.\n                  - if None and self.targeted=False, compute y as predicted\n                    labels.\n                  - if self.targeted=True, then y must be the targeted labels.\n        :return: tensor containing perturbed inputs.\n        \"\"\"", "\n", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "xadv", "=", "x", ".", "requires_grad_", "(", ")", "\n", "outputs", "=", "self", ".", "predict", "(", "xadv", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "outputs", ",", "y", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "            ", "loss", "=", "-", "loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "grad_sign", "=", "xadv", ".", "grad", ".", "detach", "(", ")", ".", "sign", "(", ")", "\n", "\n", "xadv", "=", "xadv", "+", "batch_multiply", "(", "self", ".", "eps", ",", "grad_sign", ")", "\n", "\n", "xadv", "=", "clamp", "(", "xadv", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "xadv", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.one_step_gradient.GradientAttack.__init__": [[95, 107], ["base.Attack.__init__", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "\n", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Create an instance of the GradientAttack.\n        \"\"\"", "\n", "super", "(", "GradientAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "targeted", "=", "targeted", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.one_step_gradient.GradientAttack.perturb": [[108, 133], ["one_step_gradient.GradientAttack._verify_and_process_inputs", "x.requires_grad_", "one_step_gradient.GradientAttack.predict", "one_step_gradient.GradientAttack.loss_fn", "one_step_gradient.GradientAttack.backward", "advertorch.utils.normalize_by_pnorm", "advertorch.utils.clamp", "advertorch.utils.clamp.detach", "advertorch.utils.batch_multiply"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply"], ["", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with\n        an attack length of eps.\n\n        :param x: input tensor.\n        :param y: label tensor.\n                  - if None and self.targeted=False, compute y as predicted\n                    labels.\n                  - if self.targeted=True, then y must be the targeted labels.\n        :return: tensor containing perturbed inputs.\n        \"\"\"", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "xadv", "=", "x", ".", "requires_grad_", "(", ")", "\n", "outputs", "=", "self", ".", "predict", "(", "xadv", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "outputs", ",", "y", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "            ", "loss", "=", "-", "loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "normalize_by_pnorm", "(", "xadv", ".", "grad", ")", "\n", "xadv", "=", "xadv", "+", "batch_multiply", "(", "self", ".", "eps", ",", "grad", ")", "\n", "xadv", "=", "clamp", "(", "xadv", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "xadv", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.PGDAttack.__init__": [[139, 160], ["base.Attack.__init__", "advertorch.utils.is_float_or_torch_tensor", "advertorch.utils.is_float_or_torch_tensor", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.is_float_or_torch_tensor", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.is_float_or_torch_tensor"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "\n", "eps_iter", "=", "0.01", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "ord", "=", "np", ".", "inf", ",", "l1_sparsity", "=", "None", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Create an instance of the PGDAttack.\n\n        \"\"\"", "\n", "super", "(", "PGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "eps_iter", "=", "eps_iter", "\n", "self", ".", "rand_init", "=", "rand_init", "\n", "self", ".", "ord", "=", "ord", "\n", "self", ".", "targeted", "=", "targeted", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "", "self", ".", "l1_sparsity", "=", "l1_sparsity", "\n", "assert", "is_float_or_torch_tensor", "(", "self", ".", "eps_iter", ")", "\n", "assert", "is_float_or_torch_tensor", "(", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.PGDAttack.perturb": [[161, 193], ["iterative_projected_gradient.PGDAttack._verify_and_process_inputs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.Parameter", "torch.Parameter", "iterative_projected_gradient.perturb_iterative", "utils.rand_init_delta", "advertorch.utils.clamp"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.perturb_iterative", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.rand_init_delta", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with\n        an attack length of eps.\n\n        :param x: input tensor.\n        :param y: label tensor.\n                  - if None and self.targeted=False, compute y as predicted\n                    labels.\n                  - if self.targeted=True, then y must be the targeted labels.\n        :return: tensor containing perturbed inputs.\n        \"\"\"", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "delta", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "delta", "=", "nn", ".", "Parameter", "(", "delta", ")", "\n", "if", "self", ".", "rand_init", ":", "\n", "            ", "rand_init_delta", "(", "\n", "delta", ",", "x", ",", "self", ".", "ord", ",", "self", ".", "eps", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "\n", "x", "+", "delta", ".", "data", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "-", "x", "\n", "\n", "", "rval", "=", "perturb_iterative", "(", "\n", "x", ",", "y", ",", "self", ".", "predict", ",", "nb_iter", "=", "self", ".", "nb_iter", ",", "\n", "eps", "=", "self", ".", "eps", ",", "eps_iter", "=", "self", ".", "eps_iter", ",", "\n", "loss_fn", "=", "self", ".", "loss_fn", ",", "minimize", "=", "self", ".", "targeted", ",", "\n", "ord", "=", "self", ".", "ord", ",", "clip_min", "=", "self", ".", "clip_min", ",", "\n", "clip_max", "=", "self", ".", "clip_max", ",", "delta_init", "=", "delta", ",", "\n", "l1_sparsity", "=", "self", ".", "l1_sparsity", ",", "\n", ")", "\n", "\n", "return", "rval", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.LinfPGDAttack.__init__": [[210, 220], ["iterative_projected_gradient.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "\n", "eps_iter", "=", "0.01", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "targeted", "=", "False", ")", ":", "\n", "        ", "ord", "=", "np", ".", "inf", "\n", "super", "(", "LinfPGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "\n", "eps_iter", "=", "eps_iter", ",", "rand_init", "=", "rand_init", ",", "clip_min", "=", "clip_min", ",", "\n", "clip_max", "=", "clip_max", ",", "targeted", "=", "targeted", ",", "\n", "ord", "=", "ord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.L2PGDAttack.__init__": [[237, 247], ["iterative_projected_gradient.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "\n", "eps_iter", "=", "0.01", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "targeted", "=", "False", ")", ":", "\n", "        ", "ord", "=", "2", "\n", "super", "(", "L2PGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "\n", "eps_iter", "=", "eps_iter", ",", "rand_init", "=", "rand_init", ",", "clip_min", "=", "clip_min", ",", "\n", "clip_max", "=", "clip_max", ",", "targeted", "=", "targeted", ",", "\n", "ord", "=", "ord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.L1PGDAttack.__init__": [[264, 274], ["iterative_projected_gradient.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "10.", ",", "nb_iter", "=", "40", ",", "\n", "eps_iter", "=", "0.01", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "targeted", "=", "False", ")", ":", "\n", "        ", "ord", "=", "1", "\n", "super", "(", "L1PGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "\n", "eps_iter", "=", "eps_iter", ",", "rand_init", "=", "rand_init", ",", "clip_min", "=", "clip_min", ",", "\n", "clip_max", "=", "clip_max", ",", "targeted", "=", "targeted", ",", "\n", "ord", "=", "ord", ",", "l1_sparsity", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.SparseL1DescentAttack.__init__": [[292, 302], ["iterative_projected_gradient.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "\n", "eps_iter", "=", "0.01", ",", "rand_init", "=", "False", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "l1_sparsity", "=", "0.95", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "ord", "=", "1", "\n", "super", "(", "SparseL1DescentAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "\n", "eps_iter", "=", "eps_iter", ",", "rand_init", "=", "rand_init", ",", "clip_min", "=", "clip_min", ",", "\n", "clip_max", "=", "clip_max", ",", "targeted", "=", "targeted", ",", "\n", "ord", "=", "ord", ",", "l1_sparsity", "=", "l1_sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.L2BasicIterativeAttack.__init__": [[317, 325], ["iterative_projected_gradient.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.1", ",", "nb_iter", "=", "10", ",", "\n", "eps_iter", "=", "0.05", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "ord", "=", "2", "\n", "rand_init", "=", "False", "\n", "l1_sparsity", "=", "None", "\n", "super", "(", "L2BasicIterativeAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "eps", ",", "nb_iter", ",", "eps_iter", ",", "rand_init", ",", "\n", "clip_min", ",", "clip_max", ",", "ord", ",", "l1_sparsity", ",", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.LinfBasicIterativeAttack.__init__": [[344, 352], ["iterative_projected_gradient.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.1", ",", "nb_iter", "=", "10", ",", "\n", "eps_iter", "=", "0.05", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "ord", "=", "np", ".", "inf", "\n", "rand_init", "=", "False", "\n", "l1_sparsity", "=", "None", "\n", "super", "(", "LinfBasicIterativeAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "eps", ",", "nb_iter", ",", "eps_iter", ",", "rand_init", ",", "\n", "clip_min", ",", "clip_max", ",", "ord", ",", "l1_sparsity", ",", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.MomentumIterativeAttack.__init__": [[375, 390], ["base.Attack.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "decay_factor", "=", "1.", ",", "\n", "eps_iter", "=", "0.01", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ",", "\n", "ord", "=", "np", ".", "inf", ")", ":", "\n", "        ", "\"\"\"Create an instance of the MomentumIterativeAttack.\"\"\"", "\n", "super", "(", "MomentumIterativeAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "decay_factor", "=", "decay_factor", "\n", "self", ".", "eps_iter", "=", "eps_iter", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "ord", "=", "ord", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.MomentumIterativeAttack.perturb": [[391, 447], ["iterative_projected_gradient.MomentumIterativeAttack._verify_and_process_inputs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.Parameter", "torch.Parameter", "range", "iterative_projected_gradient.MomentumIterativeAttack.predict", "iterative_projected_gradient.MomentumIterativeAttack.loss_fn", "iterative_projected_gradient.MomentumIterativeAttack.backward", "torch.Parameter.grad.detach_", "torch.Parameter.grad.zero_", "advertorch.utils.normalize_by_pnorm", "advertorch.utils.batch_multiply", "advertorch.utils.batch_clamp", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "advertorch.utils.clamp", "advertorch.utils.clamp", "NotImplementedError", "advertorch.utils.normalize_by_pnorm", "advertorch.utils.clamp", "advertorch.utils.normalize_by_pnorm"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm"], ["", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with\n        an attack length of eps.\n\n        :param x: input tensor.\n        :param y: label tensor.\n                  - if None and self.targeted=False, compute y as predicted\n                    labels.\n                  - if self.targeted=True, then y must be the targeted labels.\n        :return: tensor containing perturbed inputs.\n        \"\"\"", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "delta", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "g", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "delta", "=", "nn", ".", "Parameter", "(", "delta", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nb_iter", ")", ":", "\n", "\n", "            ", "if", "delta", ".", "grad", "is", "not", "None", ":", "\n", "                ", "delta", ".", "grad", ".", "detach_", "(", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "", "imgadv", "=", "x", "+", "delta", "\n", "outputs", "=", "self", ".", "predict", "(", "imgadv", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "outputs", ",", "y", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "                ", "loss", "=", "-", "loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "g", "=", "self", ".", "decay_factor", "*", "g", "+", "normalize_by_pnorm", "(", "\n", "delta", ".", "grad", ".", "data", ",", "p", "=", "1", ")", "\n", "# according to the paper it should be .sum(), but in their", "\n", "#   implementations (both cleverhans and the link from the paper)", "\n", "#   it is .mean(), but actually it shouldn't matter", "\n", "if", "self", ".", "ord", "==", "np", ".", "inf", ":", "\n", "                ", "delta", ".", "data", "+=", "batch_multiply", "(", "self", ".", "eps_iter", ",", "torch", ".", "sign", "(", "g", ")", ")", "\n", "delta", ".", "data", "=", "batch_clamp", "(", "self", ".", "eps", ",", "delta", ".", "data", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "\n", "x", "+", "delta", ".", "data", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "-", "x", "\n", "", "elif", "self", ".", "ord", "==", "2", ":", "\n", "                ", "delta", ".", "data", "+=", "self", ".", "eps_iter", "*", "normalize_by_pnorm", "(", "g", ",", "p", "=", "2", ")", "\n", "delta", ".", "data", "*=", "clamp", "(", "\n", "(", "self", ".", "eps", "*", "normalize_by_pnorm", "(", "delta", ".", "data", ",", "p", "=", "2", ")", "/", "\n", "delta", ".", "data", ")", ",", "\n", "max", "=", "1.", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "\n", "x", "+", "delta", ".", "data", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "-", "x", "\n", "", "else", ":", "\n", "                ", "error", "=", "\"Only ord = inf and ord = 2 have been implemented\"", "\n", "raise", "NotImplementedError", "(", "error", ")", "\n", "\n", "", "", "rval", "=", "x", "+", "delta", ".", "data", "\n", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.L2MomentumIterativeAttack.__init__": [[465, 473], ["iterative_projected_gradient.MomentumIterativeAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "decay_factor", "=", "1.", ",", "\n", "eps_iter", "=", "0.01", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create an instance of the MomentumIterativeAttack.\"\"\"", "\n", "ord", "=", "2", "\n", "super", "(", "L2MomentumIterativeAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "eps", ",", "nb_iter", ",", "decay_factor", ",", "\n", "eps_iter", ",", "clip_min", ",", "clip_max", ",", "targeted", ",", "ord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.LinfMomentumIterativeAttack.__init__": [[491, 499], ["iterative_projected_gradient.MomentumIterativeAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "decay_factor", "=", "1.", ",", "\n", "eps_iter", "=", "0.01", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create an instance of the MomentumIterativeAttack.\"\"\"", "\n", "ord", "=", "np", ".", "inf", "\n", "super", "(", "LinfMomentumIterativeAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "eps", ",", "nb_iter", ",", "decay_factor", ",", "\n", "eps_iter", ",", "clip_min", ",", "clip_max", ",", "targeted", ",", "ord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.FastFeatureAttack.__init__": [[516, 529], ["base.Attack.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "eps_iter", "=", "0.05", ",", "\n", "nb_iter", "=", "10", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ")", ":", "\n", "        ", "\"\"\"Create an instance of the FastFeatureAttack.\"\"\"", "\n", "super", "(", "FastFeatureAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "eps_iter", "=", "eps_iter", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "rand_init", "=", "rand_init", "\n", "self", ".", "clip_min", "=", "clip_min", "\n", "self", ".", "clip_max", "=", "clip_max", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.FastFeatureAttack.perturb": [[530, 565], ["delta.uniform_.uniform_.requires_grad_", "advertorch.utils.replicate_input", "advertorch.utils.replicate_input", "iterative_projected_gradient.FastFeatureAttack.predict().detach", "iterative_projected_gradient.perturb_iterative", "advertorch.utils.clamp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "delta.uniform_.uniform_.detach", "delta.uniform_.uniform_.uniform_", "iterative_projected_gradient.FastFeatureAttack.predict"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.perturb_iterative", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "", "def", "perturb", "(", "self", ",", "source", ",", "guide", ",", "delta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given source, returns their adversarial counterparts\n        with representations close to that of the guide.\n\n        :param source: input tensor which we want to perturb.\n        :param guide: targeted input.\n        :param delta: tensor contains the random initialization.\n        :return: tensor containing perturbed inputs.\n        \"\"\"", "\n", "# Initialization", "\n", "if", "delta", "is", "None", ":", "\n", "            ", "delta", "=", "torch", ".", "zeros_like", "(", "source", ")", "\n", "if", "self", ".", "rand_init", ":", "\n", "                ", "delta", "=", "delta", ".", "uniform_", "(", "-", "self", ".", "eps", ",", "self", ".", "eps", ")", "\n", "", "", "else", ":", "\n", "            ", "delta", "=", "delta", ".", "detach", "(", ")", "\n", "\n", "", "delta", ".", "requires_grad_", "(", ")", "\n", "\n", "source", "=", "replicate_input", "(", "source", ")", "\n", "guide", "=", "replicate_input", "(", "guide", ")", "\n", "guide_ftr", "=", "self", ".", "predict", "(", "guide", ")", ".", "detach", "(", ")", "\n", "\n", "xadv", "=", "perturb_iterative", "(", "source", ",", "guide_ftr", ",", "self", ".", "predict", ",", "\n", "self", ".", "nb_iter", ",", "eps_iter", "=", "self", ".", "eps_iter", ",", "\n", "loss_fn", "=", "self", ".", "loss_fn", ",", "minimize", "=", "True", ",", "\n", "ord", "=", "np", ".", "inf", ",", "eps", "=", "self", ".", "eps", ",", "\n", "clip_min", "=", "self", ".", "clip_min", ",", "\n", "clip_max", "=", "self", ".", "clip_max", ",", "\n", "delta_init", "=", "delta", ")", "\n", "\n", "xadv", "=", "clamp", "(", "xadv", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "xadv", ".", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.iterative_projected_gradient.perturb_iterative": [[32, 118], ["torch.zeros_like.requires_grad_", "range", "advertorch.utils.clamp", "torch.zeros_like", "torch.zeros_like", "predict", "loss_fn", "loss_fn.backward", "torch.zeros_like.grad.data.zero_", "torch.zeros_like.grad.data.sign", "advertorch.utils.batch_clamp", "advertorch.utils.batch_multiply", "advertorch.utils.clamp", "advertorch.utils.normalize_by_pnorm", "advertorch.utils.batch_multiply", "advertorch.utils.clamp", "advertorch.utils.clamp_by_pnorm", "torch.abs", "torch.abs", "advertorch.utils.normalize_by_pnorm.size", "torch.abs.view", "abs_grad.view.size", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "out.view_as.view_as", "advertorch.utils.normalize_by_pnorm", "advertorch.utils.batch_l1_proj", "NotImplementedError", "abs_grad.view.topk", "abs_grad.view.topk", "advertorch.utils.normalize_by_pnorm.sign", "advertorch.utils.batch_multiply", "torch.zeros_like.data.cpu", "torch.zeros_like.data.cuda", "advertorch.utils.clamp", "int", "torch.zeros_like", "torch.zeros_like", "numpy.round"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_l1_proj", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["def", "perturb_iterative", "(", "xvar", ",", "yvar", ",", "predict", ",", "nb_iter", ",", "eps", ",", "eps_iter", ",", "loss_fn", ",", "\n", "delta_init", "=", "None", ",", "minimize", "=", "False", ",", "ord", "=", "np", ".", "inf", ",", "\n", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ",", "\n", "l1_sparsity", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Iteratively maximize the loss over the input. It is a shared method for\n    iterative attacks including IterativeGradientSign, LinfPGD, etc.\n\n    :param xvar: input data.\n    :param yvar: input labels.\n    :param predict: forward pass function.\n    :param nb_iter: number of iterations.\n    :param eps: maximum distortion.\n    :param eps_iter: attack step size.\n    :param loss_fn: loss function.\n    :param delta_init: (optional) tensor contains the random initialization.\n    :param minimize: (optional bool) whether to minimize or maximize the loss.\n    :param ord: (optional) the order of maximum distortion (inf or 2).\n    :param clip_min: mininum value per input dimension.\n    :param clip_max: maximum value per input dimension.\n    :param l1_sparsity: sparsity value for L1 projection.\n                  - if None, then perform regular L1 projection.\n                  - if float value, then perform sparse L1 descent from\n                    Algorithm 1 in https://arxiv.org/pdf/1904.13000v1.pdf\n    :return: tensor containing the perturbed input.\n    \"\"\"", "\n", "if", "delta_init", "is", "not", "None", ":", "\n", "        ", "delta", "=", "delta_init", "\n", "", "else", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros_like", "(", "xvar", ")", "\n", "\n", "", "delta", ".", "requires_grad_", "(", ")", "\n", "for", "ii", "in", "range", "(", "nb_iter", ")", ":", "\n", "        ", "outputs", "=", "predict", "(", "xvar", "+", "delta", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "yvar", ")", "\n", "if", "minimize", ":", "\n", "            ", "loss", "=", "-", "loss", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "ord", "==", "np", ".", "inf", ":", "\n", "            ", "grad_sign", "=", "delta", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "batch_multiply", "(", "eps_iter", ",", "grad_sign", ")", "\n", "delta", ".", "data", "=", "batch_clamp", "(", "eps", ",", "delta", ".", "data", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "xvar", ".", "data", "+", "delta", ".", "data", ",", "clip_min", ",", "clip_max", "\n", ")", "-", "xvar", ".", "data", "\n", "\n", "", "elif", "ord", "==", "2", ":", "\n", "            ", "grad", "=", "delta", ".", "grad", ".", "data", "\n", "grad", "=", "normalize_by_pnorm", "(", "grad", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "batch_multiply", "(", "eps_iter", ",", "grad", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "xvar", ".", "data", "+", "delta", ".", "data", ",", "clip_min", ",", "clip_max", "\n", ")", "-", "xvar", ".", "data", "\n", "if", "eps", "is", "not", "None", ":", "\n", "                ", "delta", ".", "data", "=", "clamp_by_pnorm", "(", "delta", ".", "data", ",", "ord", ",", "eps", ")", "\n", "\n", "", "", "elif", "ord", "==", "1", ":", "\n", "            ", "grad", "=", "delta", ".", "grad", ".", "data", "\n", "abs_grad", "=", "torch", ".", "abs", "(", "grad", ")", "\n", "\n", "batch_size", "=", "grad", ".", "size", "(", "0", ")", "\n", "view", "=", "abs_grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "view_size", "=", "view", ".", "size", "(", "1", ")", "\n", "if", "l1_sparsity", "is", "None", ":", "\n", "                ", "vals", ",", "idx", "=", "view", ".", "topk", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "vals", ",", "idx", "=", "view", ".", "topk", "(", "\n", "int", "(", "np", ".", "round", "(", "(", "1", "-", "l1_sparsity", ")", "*", "view_size", ")", ")", ")", "\n", "\n", "", "out", "=", "torch", ".", "zeros_like", "(", "view", ")", ".", "scatter_", "(", "1", ",", "idx", ",", "vals", ")", "\n", "out", "=", "out", ".", "view_as", "(", "grad", ")", "\n", "grad", "=", "grad", ".", "sign", "(", ")", "*", "(", "out", ">", "0", ")", ".", "float", "(", ")", "\n", "grad", "=", "normalize_by_pnorm", "(", "grad", ",", "p", "=", "1", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "batch_multiply", "(", "eps_iter", ",", "grad", ")", "\n", "\n", "delta", ".", "data", "=", "batch_l1_proj", "(", "delta", ".", "data", ".", "cpu", "(", ")", ",", "eps", ")", "\n", "if", "xvar", ".", "is_cuda", ":", "\n", "                ", "delta", ".", "data", "=", "delta", ".", "data", ".", "cuda", "(", ")", "\n", "", "delta", ".", "data", "=", "clamp", "(", "xvar", ".", "data", "+", "delta", ".", "data", ",", "clip_min", ",", "clip_max", "\n", ")", "-", "xvar", ".", "data", "\n", "", "else", ":", "\n", "            ", "error", "=", "\"Only ord = inf, ord = 1 and ord = 2 have been implemented\"", "\n", "raise", "NotImplementedError", "(", "error", ")", "\n", "", "delta", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "x_adv", "=", "clamp", "(", "xvar", "+", "delta", ",", "clip_min", ",", "clip_max", ")", "\n", "return", "x_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.SinglePixelAttack.__init__": [[38, 49], ["base.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "max_pixels", "=", "100", ",", "clip_min", "=", "0.", ",", "\n", "loss_fn", "=", "None", ",", "clip_max", "=", "1.", ",", "comply_with_foolbox", "=", "False", ",", "\n", "targeted", "=", "False", ")", ":", "\n", "        ", "super", "(", "SinglePixelAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "None", ",", "\n", "clip_min", "=", "clip_min", ",", "clip_max", "=", "clip_max", ")", "\n", "self", ".", "max_pixels", "=", "max_pixels", "\n", "self", ".", "clip_min", "=", "clip_min", "\n", "self", ".", "clip_max", "=", "clip_max", "\n", "self", ".", "comply_with_foolbox", "=", "comply_with_foolbox", "\n", "self", ".", "targeted", "=", "targeted", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.SinglePixelAttack.perturb_single": [[51, 76], ["torch.randperm.to", "torch.randperm.to", "range", "numpy.random.seed", "numpy.random.permutation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "advertorch.utils.replicate_input", "range", "localsearch.SinglePixelAttack._get_predicted_label", "advertorch.utils.replicate_input.unsqueeze", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label"], ["", "def", "perturb_single", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x shape [C * H * W]", "\n", "        ", "if", "self", ".", "comply_with_foolbox", "is", "True", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "233333", ")", "\n", "rand_np", "=", "np", ".", "random", ".", "permutation", "(", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ")", "\n", "pixels", "=", "torch", ".", "from_numpy", "(", "rand_np", ")", "\n", "", "else", ":", "\n", "            ", "pixels", "=", "torch", ".", "randperm", "(", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ")", "\n", "", "pixels", "=", "pixels", ".", "to", "(", "x", ".", "device", ")", "\n", "pixels", "=", "pixels", "[", ":", "self", ".", "max_pixels", "]", "\n", "for", "ii", "in", "range", "(", "self", ".", "max_pixels", ")", ":", "\n", "            ", "row", "=", "pixels", "[", "ii", "]", "%", "x", ".", "shape", "[", "2", "]", "\n", "col", "=", "pixels", "[", "ii", "]", "//", "x", ".", "shape", "[", "2", "]", "\n", "for", "val", "in", "[", "self", ".", "clip_min", ",", "self", ".", "clip_max", "]", ":", "\n", "                ", "adv", "=", "replicate_input", "(", "x", ")", "\n", "for", "mm", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "adv", "[", "mm", ",", "row", ",", "col", "]", "=", "val", "\n", "", "out_label", "=", "self", ".", "_get_predicted_label", "(", "adv", ".", "unsqueeze", "(", "0", ")", ")", "\n", "if", "self", ".", "targeted", "is", "True", ":", "\n", "                    ", "if", "int", "(", "out_label", "[", "0", "]", ")", "==", "int", "(", "y", ")", ":", "\n", "                        ", "return", "adv", "\n", "", "", "else", ":", "\n", "                    ", "if", "int", "(", "out_label", "[", "0", "]", ")", "!=", "int", "(", "y", ")", ":", "\n", "                        ", "return", "adv", "\n", "", "", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.SinglePixelAttack.perturb": [[77, 80], ["localsearch.SinglePixelAttack._verify_and_process_inputs", "localsearch._perturb_batch"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch._perturb_batch"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "return", "_perturb_batch", "(", "self", ".", "perturb_single", ",", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack.__init__": [[99, 120], ["base.Attack.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "p", "=", "1.", ",", "r", "=", "1.5", ",", "\n", "loss_fn", "=", "None", ",", "d", "=", "5", ",", "t", "=", "5", ",", "k", "=", "1", ",", "round_ub", "=", "10", ",", "seed_ratio", "=", "0.1", ",", "\n", "max_nb_seeds", "=", "128", ",", "comply_with_foolbox", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "super", "(", "LocalSearchAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "clip_max", "=", "clip_max", ",", "\n", "clip_min", "=", "clip_min", ",", "loss_fn", "=", "None", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "round_ub", "=", "round_ub", "\n", "self", ".", "seed_ratio", "=", "seed_ratio", "\n", "self", ".", "max_nb_seeds", "=", "max_nb_seeds", "\n", "self", ".", "comply_with_foolbox", "=", "comply_with_foolbox", "\n", "self", ".", "targeted", "=", "targeted", "\n", "\n", "if", "clip_min", "is", "None", "or", "clip_max", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} {}\"", ".", "format", "(", "\n", "LocalSearchAttack", ",", "\n", "\"must have clip_min and clip_max specified as scalar values.\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack.perturb_single": [[121, 196], ["advertorch.utils.replicate_input", "localsearch.LocalSearchAttack._rescale_to_m0d5_to_0d5", "localsearch.LocalSearchAttack._random_sample_seeds", "torch.FloatTensor.to", "torch.FloatTensor.to", "numpy.random.seed", "numpy.random.permutation", "localsearch.LocalSearchAttack._rescale_x_score", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "localsearch.LocalSearchAttack._revert_rescale", "localsearch.LocalSearchAttack._get_predicted_label", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "list", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "advertorch.utils.replicate_input", "localsearch.LocalSearchAttack._perturb_seed_pixel", "range", "localsearch.LocalSearchAttack.unsqueeze", "utils.is_successful", "utils.is_successful", "set", "numpy.random.permutation", "int", "int", "indices.data.cpu", "localsearch.LocalSearchAttack._cyclic", "int", "range", "range", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "int", "int", "len", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._rescale_to_m0d5_to_0d5", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._random_sample_seeds", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._rescale_x_score", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._revert_rescale", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._perturb_seed_pixel", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.is_successful", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.is_successful", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._cyclic"], ["", "", "def", "perturb_single", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x shape C * H * W", "\n", "        ", "rescaled_x", "=", "replicate_input", "(", "x", ")", "\n", "best_img", "=", "None", "\n", "best_dist", "=", "np", ".", "inf", "\n", "rescaled_x", ",", "lb", ",", "ub", "=", "self", ".", "_rescale_to_m0d5_to_0d5", "(", "\n", "rescaled_x", ",", "vmin", "=", "self", ".", "clip_min", ",", "vmax", "=", "self", ".", "clip_max", ")", "\n", "\n", "if", "self", ".", "comply_with_foolbox", "is", "True", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "233333", ")", "\n", "init_rand", "=", "np", ".", "random", ".", "permutation", "(", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "init_rand", "=", "None", "\n", "\n", "# Algorithm 3 in v1", "\n", "\n", "", "pxy", "=", "self", ".", "_random_sample_seeds", "(", "\n", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "seed_ratio", "=", "self", ".", "seed_ratio", ",", "\n", "max_nb_seeds", "=", "self", ".", "max_nb_seeds", ",", "init_rand", "=", "init_rand", ")", "\n", "pxy", "=", "pxy", ".", "to", "(", "x", ".", "device", ")", "\n", "ii", "=", "0", "\n", "if", "self", ".", "comply_with_foolbox", ":", "\n", "            ", "adv", "=", "rescaled_x", "\n", "", "while", "ii", "<", "self", ".", "round_ub", ":", "\n", "            ", "if", "not", "self", ".", "comply_with_foolbox", ":", "\n", "                ", "adv", "=", "replicate_input", "(", "rescaled_x", ")", "\n", "# Computing the function g using the neighbourhood", "\n", "", "if", "self", ".", "comply_with_foolbox", ":", "\n", "                ", "rand_np", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "pxy", ")", ")", "[", ":", "self", ".", "max_nb_seeds", "]", "\n", "pxy", "=", "pxy", "[", "torch", ".", "from_numpy", "(", "rand_np", ")", "]", "\n", "", "else", ":", "\n", "                ", "pxy", "=", "pxy", "[", "torch", ".", "randperm", "(", "len", "(", "pxy", ")", ")", "[", ":", "self", ".", "max_nb_seeds", "]", "]", "\n", "\n", "", "pert_lst", "=", "[", "\n", "self", ".", "_perturb_seed_pixel", "(", "\n", "adv", ",", "self", ".", "p", ",", "int", "(", "row", ")", ",", "int", "(", "col", ")", ")", "for", "row", ",", "col", "in", "pxy", "]", "\n", "# Compute the score for each pert in the list", "\n", "scores", ",", "curr_best_img", ",", "curr_best_dist", "=", "self", ".", "_rescale_x_score", "(", "\n", "self", ".", "predict", ",", "pert_lst", ",", "y", ",", "x", ",", "best_dist", ")", "\n", "if", "curr_best_img", "is", "not", "None", ":", "\n", "                ", "best_img", "=", "curr_best_img", "\n", "best_dist", "=", "curr_best_dist", "\n", "", "_", ",", "indices", "=", "torch", ".", "sort", "(", "scores", ")", "\n", "indices", "=", "indices", "[", ":", "self", ".", "t", "]", "\n", "pxy_star", "=", "pxy", "[", "indices", ".", "data", ".", "cpu", "(", ")", "]", "\n", "# Generation of the perturbed image adv", "\n", "for", "row", ",", "col", "in", "pxy_star", ":", "\n", "                ", "for", "b", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "adv", "[", "b", ",", "int", "(", "row", ")", ",", "int", "(", "col", ")", "]", "=", "self", ".", "_cyclic", "(", "\n", "self", ".", "r", ",", "lb", ",", "ub", ",", "adv", "[", "b", ",", "int", "(", "row", ")", ",", "int", "(", "col", ")", "]", ")", "\n", "# Check whether the perturbed image is an adversarial image", "\n", "", "", "revert_adv", "=", "self", ".", "_revert_rescale", "(", "adv", ")", "\n", "curr_lb", "=", "self", ".", "_get_predicted_label", "(", "revert_adv", ".", "unsqueeze", "(", "0", ")", ")", "\n", "curr_dist", "=", "torch", ".", "sum", "(", "(", "x", "-", "revert_adv", ")", "**", "2", ")", "\n", "if", "(", "is_successful", "(", "int", "(", "curr_lb", ")", ",", "y", ",", "self", ".", "targeted", ")", "and", "\n", "curr_dist", "<", "best_dist", ")", ":", "\n", "                ", "best_img", "=", "revert_adv", "\n", "best_dist", "=", "curr_dist", "\n", "return", "best_img", "\n", "", "elif", "is_successful", "(", "curr_lb", ",", "y", ",", "self", ".", "targeted", ")", ":", "\n", "                ", "return", "best_img", "\n", "", "pxy", "=", "[", "\n", "(", "row", ",", "col", ")", "\n", "for", "rowcenter", ",", "colcenter", "in", "pxy_star", "\n", "for", "row", "in", "range", "(", "\n", "int", "(", "rowcenter", ")", "-", "self", ".", "d", ",", "int", "(", "rowcenter", ")", "+", "self", ".", "d", "+", "1", ")", "\n", "for", "col", "in", "range", "(", "\n", "int", "(", "colcenter", ")", "-", "self", ".", "d", ",", "int", "(", "colcenter", ")", "+", "self", ".", "d", "+", "1", ")", "]", "\n", "pxy", "=", "list", "(", "set", "(", "(", "row", ",", "col", ")", "for", "row", ",", "col", "in", "pxy", "if", "(", "\n", "0", "<=", "row", "<", "x", ".", "shape", "[", "2", "]", "and", "0", "<=", "col", "<", "x", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "pxy", "=", "torch", ".", "FloatTensor", "(", "pxy", ")", "\n", "ii", "+=", "1", "\n", "", "if", "best_img", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "return", "best_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack.perturb": [[197, 200], ["localsearch.LocalSearchAttack._verify_and_process_inputs", "localsearch._perturb_batch"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch._perturb_batch"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "return", "_perturb_batch", "(", "self", ".", "perturb_single", ",", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._rescale_to_m0d5_to_0d5": [[201, 205], ["None"], "methods", ["None"], ["", "def", "_rescale_to_m0d5_to_0d5", "(", "self", ",", "x", ",", "vmin", "=", "0.", ",", "vmax", "=", "1.", ")", ":", "\n", "        ", "x", "=", "x", "-", "(", "vmin", "+", "vmax", ")", "/", "2", "\n", "x", "=", "x", "/", "(", "vmax", "-", "vmin", ")", "\n", "return", "x", ",", "-", "0.5", ",", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._revert_rescale": [[207, 212], ["x.clone"], "methods", ["None"], ["", "def", "_revert_rescale", "(", "self", ",", "x", ",", "vmin", "=", "0.", ",", "vmax", "=", "1.", ")", ":", "\n", "        ", "x_revert", "=", "x", ".", "clone", "(", ")", "\n", "x_revert", "=", "x_revert", "*", "(", "vmax", "-", "vmin", ")", "\n", "x_revert", "=", "x_revert", "+", "(", "vmin", "+", "vmax", ")", "/", "2", "\n", "return", "x_revert", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._random_sample_seeds": [[214, 226], ["int", "min", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "locations.int", "locations.int", "zip", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "_random_sample_seeds", "(", "self", ",", "h", ",", "w", ",", "seed_ratio", ",", "max_nb_seeds", ",", "init_rand", ")", ":", "\n", "        ", "n", "=", "int", "(", "seed_ratio", "*", "h", "*", "w", ")", "\n", "n", "=", "min", "(", "n", ",", "max_nb_seeds", ")", "\n", "if", "init_rand", "is", "not", "None", ":", "\n", "            ", "locations", "=", "torch", ".", "from_numpy", "(", "init_rand", ")", "[", ":", "n", "]", "\n", "", "else", ":", "\n", "            ", "locations", "=", "torch", ".", "randperm", "(", "h", "*", "w", ")", "[", ":", "n", "]", "\n", "", "p_x", "=", "locations", ".", "int", "(", ")", "%", "w", "\n", "p_y", "=", "locations", ".", "int", "(", ")", "/", "w", "\n", "pxy", "=", "list", "(", "zip", "(", "p_x", ",", "p_y", ")", ")", "\n", "pxy", "=", "torch", ".", "Tensor", "(", "pxy", ")", "\n", "return", "pxy", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._perturb_seed_pixel": [[228, 238], ["advertorch.utils.replicate_input", "range"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input"], ["", "def", "_perturb_seed_pixel", "(", "self", ",", "x", ",", "p", ",", "row", ",", "col", ")", ":", "\n", "        ", "x_pert", "=", "replicate_input", "(", "x", ")", "\n", "for", "ii", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "x", "[", "ii", ",", "row", ",", "col", "]", ">", "0", ":", "\n", "                ", "x_pert", "[", "ii", ",", "row", ",", "col", "]", "=", "p", "\n", "", "elif", "x", "[", "ii", ",", "row", ",", "col", "]", "<", "0", ":", "\n", "                ", "x_pert", "[", "ii", ",", "row", ",", "col", "]", "=", "-", "1", "*", "p", "\n", "", "else", ":", "\n", "                ", "x_pert", "[", "ii", ",", "row", ",", "col", "]", "=", "0", "\n", "", "", "return", "x_pert", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._cyclic": [[240, 248], ["None"], "methods", ["None"], ["", "def", "_cyclic", "(", "self", ",", "r", ",", "lower_bound", ",", "upper_bound", ",", "i_bxy", ")", ":", "\n", "# Algorithm 2 in v1", "\n", "        ", "result", "=", "r", "*", "i_bxy", "\n", "if", "result", "<", "lower_bound", ":", "\n", "            ", "result", "=", "result", "+", "(", "upper_bound", "-", "lower_bound", ")", "\n", "", "elif", "result", ">", "upper_bound", ":", "\n", "            ", "result", "=", "result", "-", "(", "upper_bound", "-", "lower_bound", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._rescale_x_score": [[250, 272], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "localsearch.LocalSearchAttack._revert_rescale", "predict", "torch.max", "torch.max", "torch.max", "torch.max", "range", "advertorch.utils.clamp", "predict", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Softmax", "torch.Softmax", "utils.is_successful", "torch.Softmax", "torch.Softmax", "int"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack._revert_rescale", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.is_successful"], ["", "def", "_rescale_x_score", "(", "self", ",", "predict", ",", "x", ",", "y", ",", "ori", ",", "best_dist", ")", ":", "\n", "        ", "x", "=", "torch", ".", "stack", "(", "x", ")", "\n", "x", "=", "self", ".", "_revert_rescale", "(", "x", ")", "\n", "\n", "batch_logits", "=", "predict", "(", "x", ")", "\n", "scores", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "batch_logits", ")", "[", ":", ",", "y", "]", "\n", "\n", "if", "not", "self", ".", "comply_with_foolbox", ":", "\n", "            ", "x", "=", "clamp", "(", "x", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "batch_logits", "=", "predict", "(", "x", ")", "\n", "\n", "", "_", ",", "bests", "=", "torch", ".", "max", "(", "batch_logits", ",", "dim", "=", "1", ")", "\n", "best_img", "=", "None", "\n", "for", "ii", "in", "range", "(", "len", "(", "bests", ")", ")", ":", "\n", "            ", "curr_dist", "=", "torch", ".", "sum", "(", "(", "x", "[", "ii", "]", "-", "ori", ")", "**", "2", ")", "\n", "if", "(", "is_successful", "(", "\n", "int", "(", "bests", "[", "ii", "]", ")", ",", "y", ",", "self", ".", "targeted", ")", "and", "\n", "curr_dist", "<", "best_dist", ")", ":", "\n", "                ", "best_img", "=", "x", "[", "ii", "]", "\n", "best_dist", "=", "curr_dist", "\n", "", "", "scores", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "batch_logits", ")", "[", ":", ",", "y", "]", "\n", "return", "scores", ",", "best_img", ",", "best_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch._perturb_batch": [[274, 282], ["range", "len", "perturb_single", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.localsearch.LocalSearchAttack.perturb_single"], ["", "", "def", "_perturb_batch", "(", "perturb_single", ",", "x", ",", "y", ")", ":", "\n", "    ", "for", "ii", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "        ", "temp", "=", "perturb_single", "(", "x", "[", "ii", "]", ",", "y", "[", "ii", "]", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "if", "ii", "==", "0", ":", "\n", "            ", "result", "=", "temp", "\n", "", "else", ":", "\n", "            ", "result", "=", "torch", ".", "cat", "(", "(", "result", ",", "temp", ")", ")", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack.__init__": [[62, 95], ["base.Attack.__init__", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "num_classes", ",", "confidence", "=", "0", ",", "\n", "targeted", "=", "False", ",", "learning_rate", "=", "1e-2", ",", "\n", "binary_search_steps", "=", "9", ",", "max_iterations", "=", "10000", ",", "\n", "abort_early", "=", "False", ",", "initial_const", "=", "1e-3", ",", "\n", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "beta", "=", "1e-2", ",", "decision_rule", "=", "'EN'", ",", "\n", "loss_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"ElasticNet L1 Attack implementation in pytorch.\"\"\"", "\n", "if", "loss_fn", "is", "not", "None", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\n", "\"This Attack currently do not support a different loss\"", "\n", "\" function other than the default. Setting loss_fn manually\"", "\n", "\" is not effective.\"", "\n", ")", "\n", "\n", "", "loss_fn", "=", "None", "\n", "\n", "super", "(", "ElasticNetL1Attack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "init_learning_rate", "=", "learning_rate", "\n", "self", ".", "max_iterations", "=", "max_iterations", "\n", "self", ".", "binary_search_steps", "=", "binary_search_steps", "\n", "self", ".", "abort_early", "=", "abort_early", "\n", "self", ".", "confidence", "=", "confidence", "\n", "self", ".", "initial_const", "=", "initial_const", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "beta", "=", "beta", "\n", "# The last iteration (if we run many steps) repeat the search once.", "\n", "self", ".", "repeat", "=", "binary_search_steps", ">=", "REPEAT_STEP", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "decision_rule", "=", "decision_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._loss_fn": [[97, 117], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "l2distsq.sum", "advertorch.utils.clamp", "advertorch.utils.clamp", "l1dist.sum"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "_loss_fn", "(", "self", ",", "output", ",", "y_onehot", ",", "l1dist", ",", "l2distsq", ",", "const", ",", "opt", "=", "False", ")", ":", "\n", "\n", "        ", "real", "=", "(", "y_onehot", "*", "output", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "other", "=", "(", "(", "1.0", "-", "y_onehot", ")", "*", "output", "-", "\n", "(", "y_onehot", "*", "TARGET_MULT", ")", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "targeted", ":", "\n", "            ", "loss_logits", "=", "clamp", "(", "other", "-", "real", "+", "self", ".", "confidence", ",", "min", "=", "0.", ")", "\n", "", "else", ":", "\n", "            ", "loss_logits", "=", "clamp", "(", "real", "-", "other", "+", "self", ".", "confidence", ",", "min", "=", "0.", ")", "\n", "", "loss_logits", "=", "torch", ".", "sum", "(", "const", "*", "loss_logits", ")", "\n", "\n", "loss_l2", "=", "l2distsq", ".", "sum", "(", ")", "\n", "\n", "if", "opt", ":", "\n", "            ", "loss", "=", "loss_logits", "+", "loss_l2", "\n", "", "else", ":", "\n", "            ", "loss_l1", "=", "self", ".", "beta", "*", "l1dist", ".", "sum", "(", ")", "\n", "loss", "=", "loss_logits", "+", "loss_l2", "+", "loss_l1", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._is_successful": [[119, 137], ["utils.is_successful", "output.detach().clone.detach().clone.detach().clone", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax.new_zeros().byte", "torch.argmax.new_zeros().byte", "output.detach().clone.detach().clone.detach", "torch.argmax.new_zeros", "torch.argmax.new_zeros", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.is_successful"], ["", "def", "_is_successful", "(", "self", ",", "output", ",", "label", ",", "is_logits", ")", ":", "\n", "# determine success, see if confidence-adjusted logits give the right", "\n", "#   label", "\n", "        ", "if", "is_logits", ":", "\n", "            ", "output", "=", "output", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "                ", "output", "[", "torch", ".", "arange", "(", "len", "(", "label", ")", ")", ".", "long", "(", ")", ",", "\n", "label", "]", "-=", "self", ".", "confidence", "\n", "", "else", ":", "\n", "                ", "output", "[", "torch", ".", "arange", "(", "len", "(", "label", ")", ")", ".", "long", "(", ")", ",", "\n", "label", "]", "+=", "self", ".", "confidence", "\n", "", "pred", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "pred", "=", "output", "\n", "if", "pred", "==", "INVALID_LABEL", ":", "\n", "                ", "return", "pred", ".", "new_zeros", "(", "pred", ".", "shape", ")", ".", "byte", "(", ")", "\n", "\n", "", "", "return", "is_successful", "(", "pred", ",", "label", ",", "self", ".", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._fast_iterative_shrinkage_thresholding": [[139, 154], ["advertorch.utils.clamp", "advertorch.utils.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "def", "_fast_iterative_shrinkage_thresholding", "(", "self", ",", "x", ",", "yy_k", ",", "xx_k", ")", ":", "\n", "\n", "        ", "zt", "=", "self", ".", "global_step", "/", "(", "self", ".", "global_step", "+", "3", ")", "\n", "\n", "upper", "=", "clamp", "(", "yy_k", "-", "self", ".", "beta", ",", "max", "=", "self", ".", "clip_max", ")", "\n", "lower", "=", "clamp", "(", "yy_k", "+", "self", ".", "beta", ",", "min", "=", "self", ".", "clip_min", ")", "\n", "\n", "diff", "=", "yy_k", "-", "x", "\n", "cond1", "=", "(", "diff", ">", "self", ".", "beta", ")", ".", "float", "(", ")", "\n", "cond2", "=", "(", "torch", ".", "abs", "(", "diff", ")", "<=", "self", ".", "beta", ")", ".", "float", "(", ")", "\n", "cond3", "=", "(", "diff", "<", "-", "self", ".", "beta", ")", ".", "float", "(", ")", "\n", "\n", "xx_k_p_1", "=", "(", "cond1", "*", "upper", ")", "+", "(", "cond2", "*", "x", ")", "+", "(", "cond3", "*", "lower", ")", "\n", "yy_k", ".", "data", "=", "xx_k_p_1", "+", "(", "zt", "*", "(", "xx_k_p_1", "-", "xx_k", ")", ")", "\n", "return", "yy_k", ",", "xx_k_p_1", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._update_if_smaller_dist_succeed": [[156, 176], ["torch.max", "torch.max", "torch.max", "torch.max", "ead.ElasticNetL1Attack._is_successful", "ead.ElasticNetL1Attack._is_successful"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._is_successful", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._is_successful"], ["", "def", "_update_if_smaller_dist_succeed", "(", "\n", "self", ",", "adv_img", ",", "labs", ",", "output", ",", "dist", ",", "batch_size", ",", "\n", "cur_dist", ",", "cur_labels", ",", "\n", "final_dist", ",", "final_labels", ",", "final_advs", ")", ":", "\n", "\n", "        ", "target_label", "=", "labs", "\n", "output_logits", "=", "output", "\n", "_", ",", "output_label", "=", "torch", ".", "max", "(", "output_logits", ",", "1", ")", "\n", "\n", "mask", "=", "(", "dist", "<", "cur_dist", ")", "&", "self", ".", "_is_successful", "(", "\n", "output_logits", ",", "target_label", ",", "True", ")", "\n", "\n", "cur_dist", "[", "mask", "]", "=", "dist", "[", "mask", "]", "# redundant", "\n", "cur_labels", "[", "mask", "]", "=", "output_label", "[", "mask", "]", "\n", "\n", "mask", "=", "(", "dist", "<", "final_dist", ")", "&", "self", ".", "_is_successful", "(", "\n", "output_logits", ",", "target_label", ",", "True", ")", "\n", "final_dist", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "final_labels", "[", "mask", "]", "=", "output_label", "[", "mask", "]", "\n", "final_advs", "[", "mask", "]", "=", "adv_img", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._update_loss_coeffs": [[178, 201], ["range", "int", "ead.ElasticNetL1Attack._is_successful", "min", "max"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._is_successful"], ["", "def", "_update_loss_coeffs", "(", "\n", "self", ",", "labs", ",", "cur_labels", ",", "batch_size", ",", "loss_coeffs", ",", "\n", "coeff_upper_bound", ",", "coeff_lower_bound", ")", ":", "\n", "\n", "# TODO: remove for loop, not significant, since only called during each", "\n", "# binary search step", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_labels", "[", "ii", "]", "=", "int", "(", "cur_labels", "[", "ii", "]", ")", "\n", "if", "self", ".", "_is_successful", "(", "cur_labels", "[", "ii", "]", ",", "labs", "[", "ii", "]", ",", "False", ")", ":", "\n", "                ", "coeff_upper_bound", "[", "ii", "]", "=", "min", "(", "\n", "coeff_upper_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "", "else", ":", "\n", "                ", "coeff_lower_bound", "[", "ii", "]", "=", "max", "(", "\n", "coeff_lower_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "*=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack.perturb": [[203, 303], ["ead.ElasticNetL1Attack._verify_and_process_inputs", "advertorch.utils.replicate_input", "len", "advertorch.utils.replicate_input.new_zeros", "advertorch.utils.replicate_input.clone", "advertorch.utils.to_one_hot().float", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "ead.ElasticNetL1Attack._get_predicted_label", "advertorch.utils.replicate_input.new_ones", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.Parameter", "torch.Parameter", "advertorch.utils.replicate_input.clone", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "ead.ElasticNetL1Attack._update_loss_coeffs", "advertorch.utils.to_one_hot", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "advertorch.utils.replicate_input.clone", "ead.ElasticNetL1Attack.predict", "advertorch.utils.calc_l2distsq", "ead.ElasticNetL1Attack._loss_fn", "ead.ElasticNetL1Attack.backward", "torch.Parameter.data.add_", "ead.ElasticNetL1Attack._fast_iterative_shrinkage_thresholding", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Parameter.grad.detach_", "torch.Parameter.grad.zero_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ead.ElasticNetL1Attack.predict", "advertorch.utils.calc_l2distsq", "advertorch.utils.calc_l1dist", "ead.ElasticNetL1Attack._loss_fn", "ead.ElasticNetL1Attack._update_if_smaller_dist_succeed"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._update_loss_coeffs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.to_one_hot", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l2distsq", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._loss_fn", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._fast_iterative_shrinkage_thresholding", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l2distsq", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.calc_l1dist", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._loss_fn", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.ead.ElasticNetL1Attack._update_if_smaller_dist_succeed"], ["", "", "", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "\n", "        ", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "# Initialization", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "\n", "", "x", "=", "replicate_input", "(", "x", ")", "\n", "batch_size", "=", "len", "(", "x", ")", "\n", "coeff_lower_bound", "=", "x", ".", "new_zeros", "(", "batch_size", ")", "\n", "coeff_upper_bound", "=", "x", ".", "new_ones", "(", "batch_size", ")", "*", "COEFF_UPPER", "\n", "loss_coeffs", "=", "torch", ".", "ones_like", "(", "y", ")", ".", "float", "(", ")", "*", "self", ".", "initial_const", "\n", "\n", "final_dist", "=", "[", "DIST_UPPER", "]", "*", "batch_size", "\n", "final_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "\n", "final_advs", "=", "x", ".", "clone", "(", ")", "\n", "y_onehot", "=", "to_one_hot", "(", "y", ",", "self", ".", "num_classes", ")", ".", "float", "(", ")", "\n", "\n", "final_dist", "=", "torch", ".", "FloatTensor", "(", "final_dist", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "final_labels", "=", "torch", ".", "LongTensor", "(", "final_labels", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "# Start binary search", "\n", "for", "outer_step", "in", "range", "(", "self", ".", "binary_search_steps", ")", ":", "\n", "\n", "            ", "self", ".", "global_step", "=", "0", "\n", "\n", "# slack vector from the paper", "\n", "yy_k", "=", "nn", ".", "Parameter", "(", "x", ".", "clone", "(", ")", ")", "\n", "xx_k", "=", "x", ".", "clone", "(", ")", "\n", "\n", "cur_dist", "=", "[", "DIST_UPPER", "]", "*", "batch_size", "\n", "cur_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "\n", "cur_dist", "=", "torch", ".", "FloatTensor", "(", "cur_dist", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "cur_labels", "=", "torch", ".", "LongTensor", "(", "cur_labels", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "prevloss", "=", "PREV_LOSS_INIT", "\n", "\n", "if", "(", "self", ".", "repeat", "and", "outer_step", "==", "(", "self", ".", "binary_search_steps", "-", "1", ")", ")", ":", "\n", "                ", "loss_coeffs", "=", "coeff_upper_bound", "\n", "\n", "", "lr", "=", "self", ".", "learning_rate", "\n", "\n", "for", "ii", "in", "range", "(", "self", ".", "max_iterations", ")", ":", "\n", "\n", "# reset gradient", "\n", "                ", "if", "yy_k", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "yy_k", ".", "grad", ".", "detach_", "(", ")", "\n", "yy_k", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "# loss over yy_k with only L2 same as C&W", "\n", "# we don't update L1 loss with SGD because we use ISTA", "\n", "", "output", "=", "self", ".", "predict", "(", "yy_k", ")", "\n", "l2distsq", "=", "calc_l2distsq", "(", "yy_k", ",", "x", ")", "\n", "loss_opt", "=", "self", ".", "_loss_fn", "(", "\n", "output", ",", "y_onehot", ",", "None", ",", "l2distsq", ",", "loss_coeffs", ",", "opt", "=", "True", ")", "\n", "loss_opt", ".", "backward", "(", ")", "\n", "\n", "# gradient step", "\n", "yy_k", ".", "data", ".", "add_", "(", "-", "lr", ",", "yy_k", ".", "grad", ".", "data", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n", "# ploynomial decay of learning rate", "\n", "lr", "=", "self", ".", "init_learning_rate", "*", "(", "1", "-", "self", ".", "global_step", "/", "self", ".", "max_iterations", ")", "**", "0.5", "\n", "\n", "yy_k", ",", "xx_k", "=", "self", ".", "_fast_iterative_shrinkage_thresholding", "(", "\n", "x", ",", "yy_k", ",", "xx_k", ")", "\n", "\n", "# loss ElasticNet or L1 over xx_k", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "self", ".", "predict", "(", "xx_k", ")", "\n", "l2distsq", "=", "calc_l2distsq", "(", "xx_k", ",", "x", ")", "\n", "l1dist", "=", "calc_l1dist", "(", "xx_k", ",", "x", ")", "\n", "\n", "if", "self", ".", "decision_rule", "==", "'EN'", ":", "\n", "                        ", "dist", "=", "l2distsq", "+", "(", "l1dist", "*", "self", ".", "beta", ")", "\n", "", "elif", "self", ".", "decision_rule", "==", "'L1'", ":", "\n", "                        ", "dist", "=", "l1dist", "\n", "", "loss", "=", "self", ".", "_loss_fn", "(", "\n", "output", ",", "y_onehot", ",", "l1dist", ",", "l2distsq", ",", "loss_coeffs", ")", "\n", "\n", "if", "self", ".", "abort_early", ":", "\n", "                        ", "if", "ii", "%", "(", "self", ".", "max_iterations", "//", "NUM_CHECKS", "or", "1", ")", "==", "0", ":", "\n", "                            ", "if", "loss", ">", "prevloss", "*", "ONE_MINUS_EPS", ":", "\n", "                                ", "break", "\n", "", "prevloss", "=", "loss", "\n", "\n", "", "", "self", ".", "_update_if_smaller_dist_succeed", "(", "\n", "xx_k", ".", "data", ",", "y", ",", "output", ",", "dist", ",", "batch_size", ",", "\n", "cur_dist", ",", "cur_labels", ",", "\n", "final_dist", ",", "final_labels", ",", "final_advs", ")", "\n", "\n", "", "", "self", ".", "_update_loss_coeffs", "(", "\n", "y", ",", "cur_labels", ",", "batch_size", ",", "\n", "loss_coeffs", ",", "coeff_upper_bound", ",", "coeff_lower_bound", ")", "\n", "\n", "", "return", "final_advs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.__init__": [[46, 73], ["base.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "norm", "=", "'Linf'", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\" FAB-attack implementation in pytorch \"\"\"", "\n", "\n", "super", "(", "FABAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", "=", "None", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ")", "\n", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "if", "eps", "is", "not", "None", "else", "DEFAULT_EPS_DICT_BY_NORM", "[", "norm", "]", "\n", "self", ".", "alpha_max", "=", "alpha_max", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "targeted", "=", "False", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape": [[74, 76], ["x.unsqueeze", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.get_diff_logits_grads_batch": [[77, 98], ["imgs.clone().requires_grad_", "torch.zeros().to", "torch.zeros_like", "range", "torch.transpose().detach", "fast_adaptive_boundary.FABAttack.predict().detach", "torch.enable_grad", "fast_adaptive_boundary.FABAttack.predict", "torch.autograd.gradcheck.zero_gradients", "fast_adaptive_boundary.FABAttack.backward", "y2[].unsqueeze", "g2[].unsqueeze", "imgs.clone", "torch.zeros", "torch.transpose", "fast_adaptive_boundary.FABAttack.predict", "torch.arange", "imgs.size", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward"], ["", "def", "get_diff_logits_grads_batch", "(", "self", ",", "imgs", ",", "la", ")", ":", "\n", "        ", "im", "=", "imgs", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "y", "=", "self", ".", "predict", "(", "im", ")", "\n", "\n", "", "g2", "=", "torch", ".", "zeros", "(", "[", "y", ".", "shape", "[", "-", "1", "]", ",", "*", "imgs", ".", "size", "(", ")", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "y", ")", "\n", "for", "counter", "in", "range", "(", "y", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "zero_gradients", "(", "im", ")", "\n", "grad_mask", "[", ":", ",", "counter", "]", "=", "1.0", "\n", "y", ".", "backward", "(", "grad_mask", ",", "retain_graph", "=", "True", ")", "\n", "grad_mask", "[", ":", ",", "counter", "]", "=", "0.0", "\n", "g2", "[", "counter", "]", "=", "im", ".", "grad", ".", "data", "\n", "\n", "", "g2", "=", "torch", ".", "transpose", "(", "g2", ",", "0", ",", "1", ")", ".", "detach", "(", ")", "\n", "y2", "=", "self", ".", "predict", "(", "imgs", ")", ".", "detach", "(", ")", "\n", "df", "=", "y2", "-", "y2", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", ".", "unsqueeze", "(", "1", ")", "\n", "dg", "=", "g2", "-", "g2", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", ".", "unsqueeze", "(", "1", ")", "\n", "df", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", "=", "1e10", "\n", "\n", "return", "df", ",", "dg", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.projection_linf": [[99, 172], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fast_adaptive_boundary.FABAttack.check_shape", "torch.ones().to", "torch.sort", "b0.clone", "flip().squeeze", "torch.arange", "torch.cumsum", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.max().unsqueeze", "ws.abs", "torch.cumsum", "b0.unsqueeze", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c.nonzero().squeeze", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.nelement", "torch.max().unsqueeze", "torch.ones", "torch.ones().to", "flip", "torch.tensor().float", "torch.zeros", "torch.max", "torch.min", "torch.max", "indp.unsqueeze", "torch.arange.unsqueeze", "c.nonzero", "torch.max", "torch.zeros().to", "torch.ones", "torch.arange.unsqueeze", "torch.tensor", "torch.zeros().to", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape"], ["", "def", "projection_linf", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "ind2", "=", "(", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "b", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "c5", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "a", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "=", "(", "a", "*", "c5", "-", "t", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "a", "-=", "a", "*", "(", "1", "-", "c5", ")", "\n", "\n", "p", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "*", "c5", "-", "t", "*", "(", "2", "*", "c5", "-", "1", ")", "\n", "_", ",", "indp", "=", "torch", ".", "sort", "(", "p", ",", "dim", "=", "1", ")", "\n", "\n", "b", "=", "b", "-", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "\n", "b0", "=", "(", "w", "*", "d", ")", ".", "sum", "(", "1", ")", "\n", "b1", "=", "b0", ".", "clone", "(", ")", "\n", "\n", "counter", "=", "0", "\n", "indp2", "=", "flip", "(", "indp", ".", "unsqueeze", "(", "-", "1", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", "\n", "ws", "=", "w", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "bs2", "=", "-", "ws", "*", "d", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "\n", "s", "=", "torch", ".", "cumsum", "(", "ws", ".", "abs", "(", ")", ",", "dim", "=", "1", ")", "\n", "sb", "=", "torch", ".", "cumsum", "(", "bs2", ",", "dim", "=", "1", ")", "+", "b0", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "c", "=", "b", "-", "b1", ">", "0", "\n", "b2", "=", "sb", "[", "u", ",", "-", "1", "]", "-", "s", "[", "u", ",", "-", "1", "]", "*", "p", "[", "u", ",", "indp", "[", "u", ",", "0", "]", "]", "\n", "c_l", "=", "(", "b", "-", "b2", ">", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "b", "-", "b1", ">", "0", ")", "*", "(", "b", "-", "b2", "<=", "0", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c_l", "=", "self", ".", "check_shape", "(", "c_l", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "indcurr", "=", "indp", "[", "c2", ",", "-", "counter2", "-", "1", "]", "\n", "b2", "=", "sb", "[", "c2", ",", "counter2", "]", "-", "s", "[", "c2", ",", "counter2", "]", "*", "p", "[", "c2", ",", "indcurr", "]", "\n", "c", "=", "b", "[", "c2", "]", "-", "b2", ">", "0", "\n", "ind3", "=", "c", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "counter2", "=", "0", "\n", "\n", "if", "c_l", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c_l", "]", "-", "sb", "[", "c_l", ",", "-", "1", "]", ")", "/", "(", "-", "s", "[", "c_l", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c_l", ",", "-", "1", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c_l", "]", "=", "(", "2", "*", "a", "[", "c_l", "]", "-", "1", ")", "*", "lmbd_opt", "\n", "\n", "", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c2", "]", "-", "sb", "[", "c2", ",", "lb", "]", ")", "/", "(", "-", "s", "[", "c2", ",", "lb", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c2", ",", "lb", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c2", "]", "=", "torch", ".", "min", "(", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "c5", "[", "c2", "]", "+", "torch", ".", "max", "(", "-", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "(", "1", "-", "c5", "[", "c2", "]", ")", "\n", "\n", "return", "d", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.projection_l2": [[173, 250], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fast_adaptive_boundary.FABAttack.check_shape", "torch.arange().unsqueeze", "torch.max", "torch.ones().to", "torch.min", "torch.max", "torch.sort", "torch.cat", "w3s.sum", "torch.cat", "c4.nonzero().squeeze", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.zeros", "torch.cumsum", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.nelement", "fast_adaptive_boundary.FABAttack.nelement", "torch.arange", "torch.ones", "torch.zeros().to", "c4.nonzero", "torch.tensor().float", "torch.zeros", "w5[].squeeze", "torch.sum", "fast_adaptive_boundary.FABAttack.check_shape", "w_hyperplane.clone.abs", "torch.cumsum", "c3.nonzero", "torch.zeros.unsqueeze", "torch.zeros", "w_hyperplane.clone.abs", "rs[].unsqueeze", "torch.tensor", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "w_hyperplane.clone.abs", "w3s.sum.squeeze", "c4.float", "c3.float"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape"], ["", "def", "projection_l2", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "r", "=", "torch", ".", "max", "(", "t", "/", "w", ",", "(", "t", "-", "1", ")", "/", "w", ")", "\n", "u2", "=", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "u2", ")", "\n", "r", "=", "torch", ".", "max", "(", "r", ",", "-", "1e12", "*", "u2", ")", "\n", "r", "[", "w", ".", "abs", "(", ")", "<", "1e-8", "]", "=", "1e12", "\n", "r", "[", "r", "==", "-", "1e12", "]", "=", "-", "r", "[", "r", "==", "-", "1e12", "]", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "rs2", "=", "torch", ".", "cat", "(", "(", "rs", "[", ":", ",", "1", ":", "]", ",", "\n", "torch", ".", "zeros", "(", "rs", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", ",", "1", ")", "\n", "rs", "[", "rs", "==", "1e12", "]", "=", "0", "\n", "rs2", "[", "rs2", "==", "1e12", "]", "=", "0", "\n", "\n", "w3", "=", "w", "**", "2", "\n", "w3s", "=", "w3", "[", "u", ",", "indr", "]", "\n", "w5", "=", "w3s", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ws", "=", "w5", "-", "torch", ".", "cumsum", "(", "w3s", ",", "dim", "=", "1", ")", "\n", "d", "=", "-", "(", "r", "*", "w", ")", ".", "clone", "(", ")", "\n", "d", "=", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "s", "=", "torch", ".", "cat", "(", "(", "(", "-", "w5", ".", "squeeze", "(", ")", "*", "rs", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "cumsum", "(", "(", "-", "rs2", "+", "rs", ")", "*", "ws", ",", "dim", "=", "1", ")", "-", "\n", "w5", "*", "rs", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "1", ")", "\n", "\n", "c4", "=", "(", "s", "[", ":", ",", "0", "]", "+", "c", "<", "0", ")", "\n", "c3", "=", "(", "(", "d", "*", "w", ")", ".", "sum", "(", "dim", "=", "1", ")", "+", "c", ">", "0", ")", "\n", "c6", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "1", "-", "c4", ".", "float", "(", ")", ")", "*", "(", "1", "-", "c3", ".", "float", "(", ")", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c6", "=", "self", ".", "check_shape", "(", "c6", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", "+", "c", "[", "c2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "alpha", "=", "torch", ".", "zeros", "(", "[", "1", "]", ")", "\n", "\n", "if", "c6", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "c", "[", "c6", "]", "/", "w5", "[", "c6", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "d", "[", "c6", "]", "=", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c6", "]", "\n", "\n", "", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "(", "s", "[", "c2", ",", "lb", "]", "+", "c", "[", "c2", "]", ")", "/", "ws", "[", "c2", ",", "lb", "]", "+", "rs", "[", "c2", ",", "lb", "]", "\n", "if", "torch", ".", "sum", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ">", "0", ":", "\n", "                ", "ind", "=", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "ind", "=", "self", ".", "check_shape", "(", "ind", ")", "\n", "alpha", "[", "ind", "]", "=", "0", "\n", "", "c5", "=", "(", "alpha", ".", "unsqueeze", "(", "-", "1", ")", ">", "r", "[", "c2", "]", ")", ".", "float", "(", ")", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "c5", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c2", "]", "*", "(", "1", "-", "c5", ")", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.projection_l1": [[251, 308], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fast_adaptive_boundary.FABAttack.check_shape", "torch.max", "torch.min", "torch.sort", "torch.sort", "torch.arange().unsqueeze", "torch.arange().repeat", "torch.min", "torch.cat", "torch.cumsum", "c4.nonzero().squeeze", "fast_adaptive_boundary.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "torch.zeros.long", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.nelement", "torch.ones().to", "torch.arange", "torch.arange", "c.unsqueeze", "c4.nonzero", "torch.tensor().float", "torch.zeros", "u2[].float", "torch.zeros.unsqueeze().float", "u3.float().to", "c3.nonzero", "torch.ones", "torch.tensor", "torch.zeros.unsqueeze", "u3.float", "w_hyperplane.clone.abs"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape"], ["", "def", "projection_l1", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "r", "=", "torch", ".", "max", "(", "1", "/", "w", ",", "-", "1", "/", "w", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "_", ",", "indr_rev", "=", "torch", ".", "sort", "(", "indr", ")", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "u2", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "1", "]", ")", ".", "repeat", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "c6", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "d", "=", "(", "-", "t", "+", "c6", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "d2", "=", "torch", ".", "min", "(", "-", "w", "*", "t", ",", "w", "*", "(", "1", "-", "t", ")", ")", "\n", "ds", "=", "d2", "[", "u", ",", "indr", "]", "\n", "ds2", "=", "torch", ".", "cat", "(", "(", "c", ".", "unsqueeze", "(", "-", "1", ")", ",", "ds", ")", ",", "1", ")", "\n", "s", "=", "torch", ".", "cumsum", "(", "ds2", ",", "dim", "=", "1", ")", "\n", "\n", "c4", "=", "s", "[", ":", ",", "-", "1", "]", "<", "0", "\n", "c2", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "s", ".", "shape", "[", "1", "]", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "s", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb2", "=", "lb", ".", "long", "(", ")", "\n", "\n", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "-", "s", "[", "c2", ",", "lb2", "]", "/", "w", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "\n", "c5", "=", "u2", "[", "c2", "]", ".", "float", "(", ")", "<", "lb", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "u3", "=", "c5", "[", "u", "[", ":", "c5", ".", "shape", "[", "0", "]", "]", ",", "indr_rev", "[", "c2", "]", "]", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "u3", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "=", "alpha", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.perturb": [[309, 489], ["list", "len", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float().to", "fast_adaptive_boundary.FABAttack._get_predicted_label", "fast_adaptive_boundary.FABAttack.float().sum", "fast_adaptive_boundary.FABAttack.check_shape", "time.time", "advertorch.utils.replicate_input", "advertorch.utils.replicate_input", "torch.arange", "im2.unsqueeze.unsqueeze.clone", "x.detach().clone().float().to.detach().clone().float().to.clone", "torch.zeros().to", "im2.unsqueeze.unsqueeze.clone", "im2.unsqueeze.unsqueeze.clone().reshape", "fast_adaptive_boundary.FABAttack.check_shape", "adv[].clone", "fast_adaptive_boundary.FABAttack.detach().clone().long().to", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long().to", "print", "fast_adaptive_boundary.FABAttack.sum", "fast_adaptive_boundary.FABAttack.nonzero().squeeze", "len", "im2.unsqueeze.unsqueeze.unsqueeze", "torch.ones().to", "print", "fast_adaptive_boundary.FABAttack.nonzero().squeeze", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float", "fast_adaptive_boundary.FABAttack.float", "torch.zeros", "im2.unsqueeze.unsqueeze.clone", "x1.clamp.clamp.clamp", "fast_adaptive_boundary.FABAttack.float", "fast_adaptive_boundary.FABAttack.detach().clone().long", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long", "fast_adaptive_boundary.FABAttack.float().mean", "fast_adaptive_boundary.FABAttack.nonzero", "torch.ones", "torch.no_grad", "fast_adaptive_boundary.FABAttack.get_diff_logits_grads_batch", "dg2.reshape", "torch.reshape", "torch.reshape", "torch.max", "torch.min", "fast_adaptive_boundary.FABAttack.float", "fast_adaptive_boundary.FABAttack.nonzero", "x.detach().clone().float().to.detach().clone().float().to.detach().clone", "torch.randn().to", "dist1.min", "fast_adaptive_boundary.FABAttack.projection_linf", "[].view", "fast_adaptive_boundary.FABAttack._get_predicted_label", "is_adv.sum", "is_adv.nonzero().squeeze", "fast_adaptive_boundary.FABAttack.check_shape", "fast_adaptive_boundary.FABAttack.float().sum", "fast_adaptive_boundary.FABAttack.detach().clone", "y.detach().clone().long().to.detach().clone().long().to.detach().clone", "fast_adaptive_boundary.FABAttack.float", "torch.rand().to", "torch.randn().to", "df.abs", "torch.cat", "torch.cat", "torch.cat", "fast_adaptive_boundary.FABAttack.projection_l2", "torch.ones().to", "torch.max", "torch.ones().to", "time.time", "x.detach().clone().float().to.detach().clone().float().to.detach", "[].reshape", "torch.randn", "dg.abs().view().sum", "df.abs", "ValueError", "torch.cat", "torch.cat", "torch.cat", "fast_adaptive_boundary.FABAttack.projection_l1", "fast_adaptive_boundary.FABAttack.abs().sum().view", "torch.zeros().to", "is_adv.nonzero", "fast_adaptive_boundary.FABAttack.float", "fast_adaptive_boundary.FABAttack.detach", "y.detach().clone().long().to.detach().clone().long().to.detach", "torch.rand", "torch.min().reshape", "torch.randn", "df.abs", "x1.clamp.clamp.reshape", "torch.cat", "torch.cat", "torch.cat", "fast_adaptive_boundary.FABAttack.abs().max", "torch.ones", "torch.ones", "torch.min().reshape", "torch.randn().to.abs().view().sum().view", "dg.abs().view", "x1.clamp.clamp.reshape", "fast_adaptive_boundary.FABAttack.abs().sum", "torch.zeros", "torch.min", "torch.randn().to.reshape().abs().max", "torch.min().reshape", "dg.abs().reshape().max", "x1.clamp.clamp.reshape", "fast_adaptive_boundary.FABAttack.abs", "torch.min", "torch.randn().to.abs().view().sum", "dg.abs", "fast_adaptive_boundary.FABAttack.abs", "torch.ones().to", "torch.randn().to.reshape().abs", "torch.min", "dg.abs().reshape", "torch.ones().to", "torch.randn().to.abs().view", "torch.ones", "torch.randn().to.reshape", "torch.ones().to", "dg.abs", "torch.ones", "torch.randn().to.abs", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.replicate_input", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.get_diff_logits_grads_batch", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.projection_linf", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._get_predicted_label", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.check_shape", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.projection_l2", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.FABAttack.projection_l1"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param x:    clean images\n        :param y:    clean labels, if None we use the predicted labels\n        \"\"\"", "\n", "\n", "self", ".", "device", "=", "x", ".", "device", "\n", "self", ".", "orig_dim", "=", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "ndims", "=", "len", "(", "self", ".", "orig_dim", ")", "\n", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# assert next(self.predict.parameters()).device == x.device", "\n", "\n", "y_pred", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "y_pred", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "pred", "=", "y_pred", "==", "y", "\n", "corr_classified", "=", "pred", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Clean accuracy: {:.2%}'", ".", "format", "(", "pred", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "if", "pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "pred", "=", "self", ".", "check_shape", "(", "pred", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "# runs the attack only on correctly classified points", "\n", "im2", "=", "replicate_input", "(", "x", "[", "pred", "]", ")", "\n", "la2", "=", "replicate_input", "(", "y", "[", "pred", "]", ")", "\n", "if", "len", "(", "im2", ".", "shape", ")", "==", "self", ".", "ndims", ":", "\n", "            ", "im2", "=", "im2", ".", "unsqueeze", "(", "0", ")", "\n", "", "bs", "=", "im2", ".", "shape", "[", "0", "]", "\n", "u1", "=", "torch", ".", "arange", "(", "bs", ")", "\n", "adv", "=", "im2", ".", "clone", "(", ")", "\n", "adv_c", "=", "x", ".", "clone", "(", ")", "\n", "res2", "=", "1e10", "*", "torch", ".", "ones", "(", "[", "bs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "res_c", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", ".", "clone", "(", ")", "\n", "x0", "=", "im2", ".", "clone", "(", ")", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "counter_restarts", "=", "0", "\n", "\n", "while", "counter_restarts", "<", "self", ".", "n_restarts", ":", "\n", "            ", "if", "counter_restarts", ">", "0", ":", "\n", "                ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "-", "1", "\n", "x1", "=", "im2", "+", "(", "\n", "torch", ".", "min", "(", "\n", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", "\n", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", ".", "reshape", "(", "[", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", "]", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "\n", "torch", ".", "min", "(", "\n", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", "]", ")", "\n", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "\n", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "abs", "(", ")", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", ")", "/", "2", "\n", "\n", "", "x1", "=", "x1", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "", "counter_iter", "=", "0", "\n", "while", "counter_iter", "<", "self", ".", "n_iter", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "df", ",", "dg", "=", "self", ".", "get_diff_logits_grads_batch", "(", "x1", ",", "la2", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "\n", "dg", ".", "abs", "(", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "(", "dg", "**", "2", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "dg", ".", "abs", "(", ")", ".", "reshape", "(", "\n", "[", "df", ".", "shape", "[", "0", "]", ",", "df", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'norm not supported'", ")", "\n", "", "ind", "=", "dist1", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "dg2", "=", "dg", "[", "u1", ",", "ind", "]", "\n", "b", "=", "(", "-", "df", "[", "u1", ",", "ind", "]", "+", "\n", "(", "dg2", "*", "x1", ")", ".", "view", "(", "x1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "w", "=", "dg2", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_linf", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l2", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l1", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "d1", "=", "torch", ".", "reshape", "(", "d3", "[", ":", "bs", "]", ",", "x1", ".", "shape", ")", "\n", "d2", "=", "torch", ".", "reshape", "(", "d3", "[", "-", "bs", ":", "]", ",", "x1", ".", "shape", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "a0", "=", "(", "d3", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "\n", "", "a0", "=", "torch", ".", "max", "(", "a0", ",", "1e-8", "*", "torch", ".", "ones", "(", "\n", "a0", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "a1", "=", "a0", "[", ":", "bs", "]", "\n", "a2", "=", "a0", "[", "-", "bs", ":", "]", "\n", "alpha", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "a1", "/", "(", "a1", "+", "a2", ")", ",", "\n", "torch", ".", "zeros", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ",", "\n", "self", ".", "alpha_max", "*", "torch", ".", "ones", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x1", "=", "(", "(", "x1", "+", "self", ".", "eta", "*", "d1", ")", "*", "(", "1", "-", "alpha", ")", "+", "\n", "(", "im2", "+", "d2", "*", "self", ".", "eta", ")", "*", "alpha", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "is_adv", "=", "self", ".", "_get_predicted_label", "(", "x1", ")", "!=", "la2", "\n", "\n", "if", "is_adv", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "ind_adv", "=", "is_adv", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind_adv", "=", "self", ".", "check_shape", "(", "ind_adv", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "reshape", "(", "\n", "[", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "t", "=", "(", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "**", "2", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "abs", "(", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "adv", "[", "ind_adv", "]", "=", "x1", "[", "ind_adv", "]", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", "]", ")", "+", "adv", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", "]", ")", "\n", "res2", "[", "ind_adv", "]", "=", "t", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "+", "res2", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "\n", "x1", "[", "ind_adv", "]", "=", "im2", "[", "ind_adv", "]", "+", "(", "\n", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "*", "self", ".", "beta", "\n", "\n", "", "counter_iter", "+=", "1", "\n", "\n", "", "", "counter_restarts", "+=", "1", "\n", "\n", "", "ind_succ", "=", "res2", "<", "1e10", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'success rate: {:.0f}/{:.0f}'", "\n", ".", "format", "(", "ind_succ", ".", "float", "(", ")", ".", "sum", "(", ")", ",", "corr_classified", ")", "+", "\n", "' (on correctly classified points) in {:.1f} s'", "\n", ".", "format", "(", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "res_c", "[", "pred", "]", "=", "res2", "*", "ind_succ", ".", "float", "(", ")", "+", "1e10", "*", "(", "1", "-", "ind_succ", ".", "float", "(", ")", ")", "\n", "ind_succ", "=", "self", ".", "check_shape", "(", "ind_succ", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "adv_c", "[", "pred", "[", "ind_succ", "]", "]", "=", "adv", "[", "ind_succ", "]", ".", "clone", "(", ")", "\n", "\n", "return", "adv_c", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.LinfFABAttack.__init__": [[506, 523], ["fast_adaptive_boundary.FABAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "norm", "=", "'Linf'", "\n", "super", "(", "LinfFABAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "norm", "=", "norm", ",", "n_restarts", "=", "n_restarts", ",", "\n", "n_iter", "=", "n_iter", ",", "eps", "=", "eps", ",", "alpha_max", "=", "alpha_max", ",", "eta", "=", "eta", ",", "beta", "=", "beta", ",", "\n", "loss_fn", "=", "loss_fn", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.L2FABAttack.__init__": [[540, 557], ["fast_adaptive_boundary.FABAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "norm", "=", "'L2'", "\n", "super", "(", "L2FABAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "norm", "=", "norm", ",", "n_restarts", "=", "n_restarts", ",", "\n", "n_iter", "=", "n_iter", ",", "eps", "=", "eps", ",", "alpha_max", "=", "alpha_max", ",", "eta", "=", "eta", ",", "beta", "=", "beta", ",", "\n", "loss_fn", "=", "loss_fn", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.fast_adaptive_boundary.L1FABAttack.__init__": [[574, 591], ["fast_adaptive_boundary.FABAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "norm", "=", "'L1'", "\n", "super", "(", "L1FABAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "norm", "=", "norm", ",", "n_restarts", "=", "n_restarts", ",", "\n", "n_iter", "=", "n_iter", ",", "eps", "=", "eps", ",", "alpha_max", "=", "alpha_max", ",", "eta", "=", "eta", ",", "beta", "=", "beta", ",", "\n", "loss_fn", "=", "loss_fn", ",", "verbose", "=", "verbose", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.AttackConfig.__init__": [[81, 93], ["reversed"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n", "", "", "def", "gen_results_strings", "(", "label", ",", "results_raw", ",", "results_adv", ")", ":", "\n", "    ", "out_string", "=", "f\"Label {label} \\n\"", "\n", "raw_str", "=", "\"Before Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_raw", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "raw_str", "+=", "f\"Class: {i} Prob: {results_raw[i]} \\n\"", "\n", "", "adv_str", "=", "\"After Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_adv", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adv_str", "+=", "f\"Class: {i} Prob: {results_adv[i]} \\n\"", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.AttackConfig.__call__": [[94, 98], ["utils.AttackConfig.AttackClass", "print"], "methods", ["None"], ["", "return", "out_string", "+", "raw_str", "+", "adv_str", "\n", "\n", "", "def", "get_TPR_at_TNR", "(", "X_data", ",", "num_normal", ",", "rate", "=", "10", ")", ":", "\n", "    ", "normal_data", "=", "X_data", "[", ":", "num_normal", "]", "\n", "adv_data", "=", "X_data", "[", "num_normal", ":", "]", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.MarginalLoss.forward": [[148, 169], ["torch.topk", "torch.where", "loss.mean.mean.sum", "torch.arange", "loss.mean.mean.mean", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk"], ["# finally output auc score", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", ",", "noise", ",", "adv", "]", ")", "\n", "scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "X_total", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "normal", "=", "X_total", "[", ":", "num_data", "]", "\n", "noise", "=", "X_total", "[", "num_data", ":", "2", "*", "num_data", "]", "\n", "adv", "=", "X_total", "[", "2", "*", "num_data", ":", "]", "\n", "\n", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "X_train", "=", "np", ".", "concatenate", "(", "[", "normal", "[", ":", "-", "num_test", "]", ",", "noise", "[", ":", "-", "num_test", "]", ",", "adv", "[", ":", "-", "num_test", "]", "]", ")", "\n", "Y_train", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "normal", "[", ":", "-", "num_test", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "lr", "=", "LogisticRegression", "(", "n_jobs", "=", "-", "1", ",", "max_iter", "=", "500", ",", "solver", "=", "'lbfgs'", ")", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "X_test", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "pred_prob", "=", "lr", ".", "predict_proba", "(", "X_test", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.ChooseBestAttack.__init__": [[172, 186], ["advertorch.loss.ZeroOneLoss"], "methods", ["None"], ["", "def", "logits_regression_infer", "(", "normal", ",", "noise", ",", "adv", ",", "lr", ",", "split", "=", "0.3", ",", "get_rate", "=", "False", ")", ":", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "lr", ",", "scaler", "=", "lr", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "]", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "adv", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "pred_prob", "=", "lr", ".", "predict_proba", "(", "X_total", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "\n", "aucroc", "=", "roc_auc_score", "(", "Y_test", ",", "pred_prob", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "pred_prob", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.ChooseBestAttack.perturb": [[187, 203], ["utils.ChooseBestAttack._verify_and_process_inputs", "torch.zeros_like", "torch.no_grad", "utils.ChooseBestAttack.loss_fn", "adversary.perturb", "utils.ChooseBestAttack.loss_fn", "utils.ChooseBestAttack.predict", "utils.ChooseBestAttack.predict"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb"], ["\n", "", "def", "logits_regression_infer_raw", "(", "normal", ",", "noise", ",", "adv", ",", "lr", ",", "split", "=", "0.3", ",", "get_rate", "=", "False", ")", ":", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "lr", ",", "scaler", "=", "lr", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "\n", "X_total", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "X_total", "=", "scaler", ".", "transform", "(", "X_total", ")", "\n", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "ones", "(", "normal", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "adv", "[", "-", "num_test", ":", "]", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "pred_prob", "=", "lr", ".", "predict_proba", "(", "X_total", ")", ".", "transpose", "(", ")", "[", "1", "]", "\n", "\n", "aucroc", "=", "roc_auc_score", "(", "Y_test", ",", "pred_prob", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "pred_prob", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.rand_init_delta": [[31, 69], ["isinstance", "delta.data.uniform_", "advertorch.utils.batch_multiply", "advertorch.utils.clamp", "len", "len", "delta.data.uniform_", "advertorch.utils.clamp_by_pnorm", "torch.distributions.laplace.Laplace", "laplace.Laplace.sample", "advertorch.utils.normalize_by_pnorm", "torch.distributions.uniform.Uniform().sample", "NotImplementedError", "advertorch.utils.clamp", "delta.new_tensor", "delta.new_tensor", "torch.distributions.uniform.Uniform"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_multiply", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n", "", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.is_successful": [[71, 76], ["None"], "function", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n", "", "def", "display", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.multiple_mini_batch_attack": [[100, 143], ["adversary.perturb", "advertorch.utils.predict_from_logits", "advertorch.utils.predict_from_logits", "lst_label.append", "lst_pred.append", "lst_advpred.append", "torch.cat", "torch.cat", "torch.cat", "data.to", "label.to", "adversary.predict", "adversary.predict", "lst_dist.append", "torch.cat", "_get_norm_batch", "utils.multiple_mini_batch_attack.dist_func"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.predict_from_logits", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.predict_from_logits", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils._get_norm_batch"], ["return", "1", "-", "(", "adv_data", ">", "threshold", ")", ".", "sum", "(", ")", "/", "adv_data", ".", "shape", "[", "0", "]", "\n", "\n", "", "from", "tqdm", "import", "tqdm", "\n", "def", "check_adv_samples", "(", "data_dict", ",", "model", ",", "label", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "key", ",", "data", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "batch_size", "=", "100", "\n", "total", "=", "0", "\n", "bingo", "=", "0", "\n", "for", "data_index", "in", "range", "(", "int", "(", "np", ".", "floor", "(", "data", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "data_dict", "[", "key", "]", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", "\n", "total", "+=", "batch_size", "\n", "output", "=", "model", ".", "feature_list", "(", "data", ")", "[", "0", "]", ".", "argmax", "(", "1", ")", "\n", "bingo", "+=", "(", "target", "==", "output", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'Check data: {key} ACC {float(bingo / total)}'", ")", "\n", "\n", "", "", "def", "get_pairs_auc", "(", "normal", ",", "noise", ",", "adv", ",", "split", "=", "0.3", ",", "adv_test", "=", "False", ",", "negative", "=", "True", ",", "get_rate", "=", "False", ")", ":", "\n", "# Gen train test pairs and compute auc", "\n", "# Input [num_data] output auc score", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "if", "not", "adv_test", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "]", ")", "\n", "\n", "# They are all < 0", "\n", "", "if", "X_data", ".", "mean", "(", ")", ">", "0", "and", "negative", ":", "X_data", "=", "-", "X_data", "\n", "# Z_score", "\n", "# X_data = scale(X_data)", "\n", "\n", "if", "not", "adv_test", ":", "\n", "        ", "Y_data", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "zeros_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "Y_data", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "ones_like", "(", "normal", "[", "-", "num_test", ":", "]", ")", ",", "np", ".", "zeros_like", "(", "adv", ")", "]", ")", "\n", "# if normal.mean() < adv.mean():", "\n", "#     Y_data = 1 - Y_data", "\n", "", "aucroc", "=", "roc_auc_score", "(", "Y_data", ",", "X_data", ")", "\n", "if", "get_rate", ":", "return", "aucroc", ",", "get_TPR_at_TNR", "(", "X_data", ",", "2", "*", "num_test", ")", "\n", "return", "aucroc", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.utils.attack_whole_dataset": [[205, 221], ["advertorch.utils.predict_from_logits", "adversary.perturb", "advertorch.utils.predict_from_logits", "lst_label.append", "lst_pred.append", "lst_advpred.append", "lst_adv.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.to", "label.to", "adversary.predict", "adversary.predict"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.predict_from_logits", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.predict_from_logits"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.__init__": [[158, 183], ["base.Attack.__init__", "utils.is_float_or_torch_tensor", "utils.is_float_or_torch_tensor", "utils.is_float_or_torch_tensor", "float", "float", "float", "int", "int", "int", "bool", "utils.MarginalLoss", "hasattr", "warnings.warn", "getattr"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.is_float_or_torch_tensor", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.is_float_or_torch_tensor", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.is_float_or_torch_tensor"], ["def", "__init__", "(", "self", ",", "predict", ",", "eps", ",", "delta", "=", "0.01", ",", "lr", "=", "0.01", ",", "nb_iter", "=", "1", ",", "\n", "nb_sample", "=", "128", ",", "max_batch_size", "=", "64", ",", "targeted", "=", "False", ",", "\n", "loss_fn", "=", "None", ",", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ")", ":", "\n", "\n", "        ", "if", "loss_fn", "is", "None", ":", "\n", "            ", "loss_fn", "=", "MarginalLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "", "elif", "hasattr", "(", "loss_fn", ",", "\"reduction\"", ")", "and", "getattr", "(", "loss_fn", ",", "\"reduction\"", ")", "!=", "\"none\"", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"`loss_fn` is recommended to have \"", "\n", "\"reduction='none' when used in SPSA attack\"", ")", "\n", "\n", "", "super", "(", "LinfSPSAAttack", ",", "self", ")", ".", "__init__", "(", "predict", ",", "loss_fn", ",", "\n", "clip_min", ",", "clip_max", ")", "\n", "\n", "assert", "is_float_or_torch_tensor", "(", "eps", ")", "\n", "assert", "is_float_or_torch_tensor", "(", "delta", ")", "\n", "assert", "is_float_or_torch_tensor", "(", "lr", ")", "\n", "\n", "self", ".", "eps", "=", "float", "(", "eps", ")", "\n", "self", ".", "delta", "=", "float", "(", "delta", ")", "\n", "self", ".", "lr", "=", "float", "(", "lr", ")", "\n", "self", ".", "nb_iter", "=", "int", "(", "nb_iter", ")", "\n", "self", ".", "nb_sample", "=", "int", "(", "nb_sample", ")", "\n", "self", ".", "max_batch_size", "=", "int", "(", "max_batch_size", ")", "\n", "self", ".", "targeted", "=", "bool", "(", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.LinfSPSAAttack.perturb": [[184, 209], ["spsa.LinfSPSAAttack._verify_and_process_inputs", "spsa.spsa_perturb", "spsa.LinfSPSAAttack.loss_fn", "spsa.LinfSPSAAttack.loss_fn"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.spsa_perturb"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "\"\"\"Perturbs the input `x` based on SPSA attack.\n\n        :param x: input tensor.\n        :param y: label tensor (default=`None`). if `self.targeted` is `False`,\n                  `y` is the ground-truth label. if it's `None`, then `y` is\n                  computed as the predicted label of `x`.\n                  if `self.targeted` is `True`, `y` is the target label.\n\n        :return: the perturbated input.\n        \"\"\"", "\n", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "if", "self", ".", "targeted", ":", "\n", "            ", "def", "loss_fn", "(", "*", "args", ")", ":", "\n", "                ", "return", "self", ".", "loss_fn", "(", "*", "args", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "def", "loss_fn", "(", "*", "args", ")", ":", "\n", "                ", "return", "-", "self", ".", "loss_fn", "(", "*", "args", ")", "\n", "\n", "", "", "return", "spsa_perturb", "(", "self", ".", "predict", ",", "loss_fn", ",", "x", ",", "y", ",", "self", ".", "eps", ",", "self", ".", "delta", ",", "\n", "self", ".", "lr", ",", "self", ".", "nb_iter", ",", "self", ".", "nb_sample", ",", "\n", "self", ".", "max_batch_size", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.linf_clamp_": [[25, 48], ["utils.batch_clamp", "utils.clamp"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.batch_clamp", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.utils.clamp"], ["def", "linf_clamp_", "(", "dx", ",", "x", ",", "eps", ",", "clip_min", ",", "clip_max", ")", ":", "\n", "    ", "\"\"\"Clamps perturbation `dx` to fit L_inf norm and image bounds.\n\n    Limit the L_inf norm of `dx` to be <= `eps`, and the bounds of `x + dx`\n    to be in `[clip_min, clip_max]`.\n\n    :param dx: perturbation to be clamped (inplace).\n    :param x: the image.\n    :param eps: maximum possible L_inf.\n    :param clip_min: upper bound of image values.\n    :param clip_max: lower bound of image values.\n\n    :return: the clamped perturbation `dx`.\n    \"\"\"", "\n", "\n", "dx_clamped", "=", "batch_clamp", "(", "eps", ",", "dx", ")", "\n", "x_adv", "=", "clamp", "(", "x", "+", "dx_clamped", ",", "clip_min", ",", "clip_max", ")", "\n", "# `dx` is changed *inplace* so the optimizer will keep", "\n", "# tracking it. the simplest mechanism for inplace was", "\n", "# adding the difference between the new value `x_adv - x`", "\n", "# and the old value `dx`.", "\n", "dx", "+=", "x_adv", "-", "x", "-", "dx", "\n", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa._get_batch_sizes": [[50, 55], ["batches.append", "range"], "function", ["None"], ["", "def", "_get_batch_sizes", "(", "n", ",", "max_batch_size", ")", ":", "\n", "    ", "batches", "=", "[", "max_batch_size", "for", "_", "in", "range", "(", "n", "//", "max_batch_size", ")", "]", "\n", "if", "n", "%", "max_batch_size", ">", "0", ":", "\n", "        ", "batches", ".", "append", "(", "n", "%", "max_batch_size", ")", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.spsa_grad": [[57, 105], ["torch.no_grad", "torch.zeros_like", "x.expand().contiguous.unsqueeze", "y.expand().contiguous.unsqueeze", "x.expand().contiguous.expand().contiguous", "y.expand().contiguous.expand().contiguous", "torch.empty_like", "spsa._get_batch_sizes", "loss_fn", "vb.bernoulli_().mul_().sub_.bernoulli_().mul_().sub_", "vb.bernoulli_().mul_().sub_.expand_as().contiguous", "x_.view.view", "y_.view.view", "v_.view.view", "df.view.view", "grad_.sum.view", "grad_.sum.sum", "predict", "x.expand().contiguous.expand", "y.expand().contiguous.expand", "spsa.spsa_grad.f"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa._get_batch_sizes"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "spsa_grad", "(", "predict", ",", "loss_fn", ",", "x", ",", "y", ",", "delta", ",", "nb_sample", ",", "max_batch_size", ")", ":", "\n", "    ", "\"\"\"Uses SPSA method to apprixmate gradient w.r.t `x`.\n\n    Use the SPSA method to approximate the gradient of `loss_fn(predict(x), y)`\n    with respect to `x`, based on the nonce `v`.\n\n    :param predict: predict function (single argument: input).\n    :param loss_fn: loss function (dual arguments: output, target).\n    :param x: input argument for function `predict`.\n    :param y: target argument for function `loss_fn`.\n    :param v: perturbations of `x`.\n    :param delta: scaling parameter of SPSA.\n    :param reduction: how to reduce the gradients of the different samples.\n\n    :return: return the approximated gradient of `loss_fn(predict(x), y)`\n             with respect to `x`.\n    \"\"\"", "\n", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "def", "f", "(", "xvar", ",", "yvar", ")", ":", "\n", "        ", "return", "loss_fn", "(", "predict", "(", "xvar", ")", ",", "yvar", ")", "\n", "", "x", "=", "x", ".", "expand", "(", "max_batch_size", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "expand", "(", "max_batch_size", ",", "*", "y", ".", "shape", "[", "1", ":", "]", ")", ".", "contiguous", "(", ")", "\n", "v", "=", "torch", ".", "empty_like", "(", "x", "[", ":", ",", ":", "1", ",", "...", "]", ")", "\n", "\n", "for", "batch_size", "in", "_get_batch_sizes", "(", "nb_sample", ",", "max_batch_size", ")", ":", "\n", "        ", "x_", "=", "x", "[", ":", "batch_size", "]", "\n", "y_", "=", "y", "[", ":", "batch_size", "]", "\n", "vb", "=", "v", "[", ":", "batch_size", "]", "\n", "vb", "=", "vb", ".", "bernoulli_", "(", ")", ".", "mul_", "(", "2.0", ")", ".", "sub_", "(", "1.0", ")", "\n", "v_", "=", "vb", ".", "expand_as", "(", "x_", ")", ".", "contiguous", "(", ")", "\n", "x_shape", "=", "x_", ".", "shape", "\n", "x_", "=", "x_", ".", "view", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "y_", "=", "y_", ".", "view", "(", "-", "1", ",", "*", "y", ".", "shape", "[", "2", ":", "]", ")", "\n", "v_", "=", "v_", ".", "view", "(", "-", "1", ",", "*", "v", ".", "shape", "[", "2", ":", "]", ")", "\n", "df", "=", "f", "(", "x_", "+", "delta", "*", "v_", ",", "y_", ")", "-", "f", "(", "x_", "-", "delta", "*", "v_", ",", "y_", ")", "\n", "df", "=", "df", ".", "view", "(", "-", "1", ",", "*", "[", "1", "for", "_", "in", "v_", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "grad_", "=", "df", "/", "(", "2.", "*", "delta", "*", "v_", ")", "\n", "grad_", "=", "grad_", ".", "view", "(", "x_shape", ")", "\n", "grad_", "=", "grad_", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "grad", "+=", "grad_", "\n", "", "grad", "/=", "nb_sample", "\n", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.spsa_perturb": [[107, 139], ["torch.zeros_like", "torch.zeros_like", "torch.optim.Adam", "range", "torch.optim.Adam.zero_grad", "spsa.spsa_grad", "torch.optim.Adam.step", "spsa.linf_clamp_"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.spsa_grad", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacks.spsa.linf_clamp_"], ["", "def", "spsa_perturb", "(", "predict", ",", "loss_fn", ",", "x", ",", "y", ",", "eps", ",", "delta", ",", "lr", ",", "nb_iter", ",", "\n", "nb_sample", ",", "max_batch_size", ",", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Perturbs the input `x` based on SPSA attack.\n\n    :param predict: predict function (single argument: input).\n    :param loss_fn: loss function (dual arguments: output, target).\n    :param x: input argument for function `predict`.\n    :param y: target argument for function `loss_fn`.\n    :param eps: the L_inf budget of the attack.\n    :param delta: scaling parameter of SPSA.\n    :param lr: the learning rate of the `Adam` optimizer.\n    :param nb_iter: number of iterations of the attack.\n    :param nb_sample: number of samples for the SPSA gradient approximation.\n    :param max_batch_size: maximum batch size to be evaluated at once.\n    :param clip_min: upper bound of image values.\n    :param clip_max: lower bound of image values.\n\n    :return: the perturbated input.\n    \"\"\"", "\n", "\n", "dx", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "dx", ".", "grad", "=", "torch", ".", "zeros_like", "(", "dx", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "dx", "]", ",", "lr", "=", "lr", ")", "\n", "for", "_", "in", "range", "(", "nb_iter", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "dx", ".", "grad", "=", "spsa_grad", "(", "\n", "predict", ",", "loss_fn", ",", "x", "+", "dx", ",", "y", ",", "delta", ",", "nb_sample", ",", "max_batch_size", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "dx", "=", "linf_clamp_", "(", "dx", ",", "x", ",", "eps", ",", "clip_min", ",", "clip_max", ")", "\n", "", "x_adv", "=", "x", "+", "dx", "\n", "\n", "return", "x_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.base.Processor.__init__": [[14, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["\n", "class", "Attack", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.base.Processor.forward": [[17, 19], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.base.Processor.extra_repr": [[20, 22], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.bitsqueezing.BitSqueezing.__init__": [[22, 29], ["base.Processor.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "bit_depth", ",", "vmin", "=", "0.", ",", "vmax", "=", "1.", ")", ":", "\n", "        ", "super", "(", "BitSqueezing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bit_depth", "=", "bit_depth", "\n", "self", ".", "max_int", "=", "2", "**", "self", ".", "bit_depth", "-", "1", "\n", "self", ".", "vmin", "=", "vmin", "\n", "self", ".", "vmax", "=", "vmax", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.bitsqueezing.BitSqueezing.forward": [[31, 34], ["advertorch.functional.FloatToIntSqueezing.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "FloatToIntSqueezing", ".", "apply", "(", "\n", "x", ",", "self", ".", "max_int", ",", "self", ".", "vmin", ",", "self", ".", "vmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.bitsqueezing.BinaryFilter.__init__": [[44, 46], ["bitsqueezing.BitSqueezing.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "vmin", "=", "0.", ",", "vmax", "=", "1.", ")", ":", "\n", "        ", "super", "(", "BinaryFilter", ",", "self", ")", ".", "__init__", "(", "bit_depth", "=", "1", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.jpeg.JPEGFilter.__init__": [[19, 22], ["base.Processor.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "quality", "=", "75", ")", ":", "\n", "        ", "super", "(", "JPEGFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quality", "=", "quality", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.jpeg.JPEGFilter.forward": [[23, 25], ["advertorch.functional.JPEGEncodingDecoding.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "JPEGEncodingDecoding", ".", "apply", "(", "x", ",", "self", ".", "quality", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing.MedianSmoothing2D.__init__": [[26, 37], ["base.Processor.__init__", "smoothing._is_even", "int", "torch.nn.modules.utils._quadruple", "torch.nn.modules.utils._quadruple", "torch.nn.modules.utils._quadruple"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._is_even"], ["def", "__init__", "(", "self", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "MedianSmoothing2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "padding", "=", "int", "(", "kernel_size", ")", "//", "2", "\n", "if", "_is_even", "(", "kernel_size", ")", ":", "\n", "# both ways of padding should be fine here", "\n", "# self.padding = (padding, 0, padding, 0)", "\n", "            ", "self", ".", "padding", "=", "(", "0", ",", "padding", ",", "0", ",", "padding", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "_quadruple", "(", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing.MedianSmoothing2D.forward": [[39, 45], ["torch.pad", "torch.pad", "torch.pad", "x.unfold.unfold.unfold", "x.unfold.unfold.unfold", "x.unfold.unfold.contiguous().view().median", "x.unfold.unfold.contiguous().view", "x.unfold.unfold.contiguous"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", "=", "self", ".", "padding", ",", "mode", "=", "\"reflect\"", ")", "\n", "x", "=", "x", ".", "unfold", "(", "2", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "x", "=", "x", ".", "unfold", "(", "3", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "shape", "[", ":", "4", "]", "+", "(", "-", "1", ",", ")", ")", ".", "median", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing.ConvSmoothing2D.__init__": [[54, 57], ["base.Processor.__init__", "smoothing._generate_conv2d_from_smoothing_kernel"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._generate_conv2d_from_smoothing_kernel"], ["def", "__init__", "(", "self", ",", "kernel", ")", ":", "\n", "        ", "super", "(", "ConvSmoothing2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter", "=", "_generate_conv2d_from_smoothing_kernel", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing.ConvSmoothing2D.forward": [[58, 60], ["smoothing.ConvSmoothing2D.filter"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "filter", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing.GaussianSmoothing2D.__init__": [[71, 74], ["smoothing._generate_gaussian_kernel", "smoothing.ConvSmoothing2D.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._generate_gaussian_kernel", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "sigma", ",", "channels", ",", "kernel_size", "=", "None", ")", ":", "\n", "        ", "kernel", "=", "_generate_gaussian_kernel", "(", "sigma", ",", "channels", ",", "kernel_size", ")", "\n", "super", "(", "GaussianSmoothing2D", ",", "self", ")", ".", "__init__", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing.AverageSmoothing2D.__init__": [[84, 88], ["smoothing.ConvSmoothing2D.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ")", ":", "\n", "        ", "kernel", "=", "torch", ".", "ones", "(", "(", "channels", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", ")", "/", "(", "\n", "kernel_size", "*", "kernel_size", ")", "\n", "super", "(", "AverageSmoothing2D", ",", "self", ")", ".", "__init__", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._generate_conv2d_from_smoothing_kernel": [[90, 106], ["smoothing._is_even", "torch.Conv2d", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._is_even"], ["", "", "def", "_generate_conv2d_from_smoothing_kernel", "(", "kernel", ")", ":", "\n", "    ", "channels", "=", "kernel", ".", "shape", "[", "0", "]", "\n", "kernel_size", "=", "kernel", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "_is_even", "(", "kernel_size", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Even number kernel size not supported yet, kernel_size={}\"", ".", "format", "(", "\n", "kernel_size", ")", ")", "\n", "\n", "", "filter_", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "groups", "=", "channels", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n", "filter_", ".", "weight", ".", "data", "=", "kernel", "\n", "filter_", ".", "weight", ".", "requires_grad", "=", "False", "\n", "return", "filter_", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._generate_gaussian_kernel": [[108, 129], ["torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "smoothing._meshgrid", "torch.sum", "torch.sum", "torch.sum", "gaussian_kernel.repeat.repeat", "smoothing._round_to_odd", "torch.exp", "torch.exp", "torch.exp", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._meshgrid", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._round_to_odd"], ["", "def", "_generate_gaussian_kernel", "(", "sigma", ",", "channels", ",", "kernel_size", "=", "None", ")", ":", "\n", "\n", "    ", "if", "kernel_size", "is", "None", ":", "\n", "        ", "kernel_size", "=", "_round_to_odd", "(", "2", "*", "2", "*", "sigma", ")", "\n", "\n", "", "vecx", "=", "torch", ".", "arange", "(", "kernel_size", ")", ".", "float", "(", ")", "\n", "vecy", "=", "torch", ".", "arange", "(", "kernel_size", ")", ".", "float", "(", ")", "\n", "gridxy", "=", "_meshgrid", "(", "vecx", ",", "vecy", ")", "\n", "mean", "=", "(", "kernel_size", "-", "1", ")", "/", "2.", "\n", "var", "=", "sigma", "**", "2", "\n", "\n", "gaussian_kernel", "=", "(", "\n", "1.", "/", "(", "2.", "*", "math", ".", "pi", "*", "var", ")", "*", "\n", "torch", ".", "exp", "(", "-", "(", "gridxy", "-", "mean", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "0", ")", "/", "(", "2", "*", "var", ")", ")", "\n", ")", "\n", "\n", "gaussian_kernel", "/=", "torch", ".", "sum", "(", "gaussian_kernel", ")", "\n", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "repeat", "(", "channels", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "gaussian_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._round_to_odd": [[131, 133], ["math.ceil"], "function", ["None"], ["", "def", "_round_to_odd", "(", "f", ")", ":", "\n", "    ", "return", "math", ".", "ceil", "(", "f", ")", "//", "2", "*", "2", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._meshgrid": [[135, 139], ["vecx.repeat", "vecy.repeat().t", "torch.stack", "torch.stack", "torch.stack", "len", "vecy.repeat", "len"], "function", ["None"], ["", "def", "_meshgrid", "(", "vecx", ",", "vecy", ")", ":", "\n", "    ", "gridx", "=", "vecx", ".", "repeat", "(", "len", "(", "vecy", ")", ",", "1", ")", "\n", "gridy", "=", "vecy", ".", "repeat", "(", "len", "(", "vecx", ")", ",", "1", ")", ".", "t", "(", ")", "\n", "return", "torch", ".", "stack", "(", "[", "gridx", ",", "gridy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.defenses.smoothing._is_even": [[141, 143], ["int"], "function", ["None"], ["", "def", "_is_even", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "x", ")", "%", "2", "==", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.__init__": [[39, 43], ["None"], "methods", ["None"], ["correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.get_top1": [[45, 48], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array"], "methods", ["None"], ["", "return", "res", "\n", "\n", "", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.get_top5": [[49, 52], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.add_batch": [[54, 63], ["utils.Evaluator.topk", "utils.Evaluator.top1.append", "utils.Evaluator.top5.append", "utils.Evaluator.batch_sizes.append"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.reset": [[64, 68], ["None"], "methods", ["None"], ["self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk": [[69, 87], ["max", "logits.topk", "preds.t.t.t", "preds.t.t.eq", "labels.view().expand_as", "correct[].view().float().sum", "correct[].view().float().sum.mul_", "res.append", "labels.view", "correct[].view().float", "correct[].view"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.topk"], ["\n", "", "", "class", "ProgressMeter", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n", "", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "logging", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n", "", "", "def", "gen_results_strings", "(", "label", ",", "results_raw", ",", "results_adv", ")", ":", "\n", "    ", "out_string", "=", "f\"Label {label} \\n\"", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.save_images": [[9, 32], ["torch.Tensor().reshape", "torch.Tensor().reshape", "images.astype.permute", "images.astype.detach().cpu().numpy", "images.astype.astype", "zip", "mean.cuda.cuda", "std.cuda.cuda", "os.path.exists", "os.makedirs", "range", "PIL.Image.fromarray().save", "torch.Tensor", "torch.Tensor", "images.astype.detach().cpu", "os.path.join", "PIL.Image.fromarray", "images.astype.detach"], "function", ["None"], ["from", "sklearn", ".", "linear_model", "import", "LogisticRegression", "\n", "\n", "class", "my_sequential", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "layers", ")", ":", "\n", "        ", "super", "(", "my_sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_feature", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "str", "(", "i", ")", ",", "layer", ")", "\n", "if", "type", "(", "layer", ")", "==", "torch", ".", "nn", ".", "ReLU", ":", "\n", "                ", "self", ".", "num_feature", "+=", "1", "\n", "", "", "self", ".", "num_layers", "=", "i", "+", "1", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ",", "return_index", "=", "None", ")", ":", "\n", "        ", "feature", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "if", "get_features", "and", "type", "(", "getattr", "(", "self", ",", "str", "(", "i", ")", ")", ")", "==", "torch", ".", "nn", ".", "ReLU", ":", "\n", "                ", "feature", ".", "append", "(", "x", ")", "\n", "if", "len", "(", "feature", ")", "-", "1", "==", "return_index", ":", "return", "feature", "[", "-", "1", "]", "\n", "", "", "if", "get_features", ":", "return", "x", ",", "feature", "\n", "return", "x", "\n", "\n", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.calc_max_norm": [[88, 108], ["torch.Tensor().reshape", "torch.Tensor().reshape", "mean.cuda.cuda", "std.cuda.cuda", "torch.Tensor", "torch.Tensor", "torch.max", "torch.reshape", "torch.max", "torch.norm", "torch.reshape"], "function", ["None"], ["raw_str", "=", "\"Before Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_raw", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "raw_str", "+=", "f\"Class: {i} Prob: {results_raw[i]} \\n\"", "\n", "", "adv_str", "=", "\"After Attack : \\n\"", "\n", "for", "i", "in", "range", "(", "results_adv", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adv_str", "+=", "f\"Class: {i} Prob: {results_adv[i]} \\n\"", "\n", "", "return", "out_string", "+", "raw_str", "+", "adv_str", "\n", "\n", "", "def", "get_TPR_at_TNR", "(", "X_data", ",", "num_normal", ",", "rate", "=", "10", ")", ":", "\n", "    ", "normal_data", "=", "X_data", "[", ":", "num_normal", "]", "\n", "adv_data", "=", "X_data", "[", "num_normal", ":", "]", "\n", "threshold", "=", "np", ".", "percentile", "(", "normal_data", ",", "rate", ",", "0", ")", "\n", "return", "1", "-", "(", "adv_data", ">", "threshold", ")", ".", "sum", "(", ")", "/", "adv_data", ".", "shape", "[", "0", "]", "\n", "\n", "", "from", "tqdm", "import", "tqdm", "\n", "def", "check_adv_samples", "(", "data_dict", ",", "model", ",", "label", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "key", ",", "data", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "batch_size", "=", "100", "\n", "total", "=", "0", "\n", "bingo", "=", "0", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.calc_average_norm": [[109, 129], ["torch.Tensor().reshape", "torch.Tensor().reshape", "mean.cuda.cuda", "std.cuda.cuda", "torch.Tensor", "torch.Tensor", "torch.mean", "torch.reshape", "torch.mean", "torch.norm", "torch.reshape"], "function", ["None"], ["for", "data_index", "in", "range", "(", "int", "(", "np", ".", "floor", "(", "data", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", ":", "\n", "            ", "data", "=", "torch", ".", "from_numpy", "(", "data_dict", "[", "key", "]", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "label", "[", "total", ":", "total", "+", "batch_size", "]", ")", ".", "cuda", "(", ")", "\n", "total", "+=", "batch_size", "\n", "output", "=", "model", ".", "feature_list", "(", "data", ")", "[", "0", "]", ".", "argmax", "(", "1", ")", "\n", "bingo", "+=", "(", "target", "==", "output", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'Check data: {key} ACC {float(bingo / total)}'", ")", "\n", "\n", "", "", "def", "get_pairs_auc", "(", "normal", ",", "noise", ",", "adv", ",", "split", "=", "0.3", ",", "adv_test", "=", "False", ",", "negative", "=", "True", ",", "get_rate", "=", "False", ")", ":", "\n", "# Gen train test pairs and compute auc", "\n", "# Input [num_data] output auc score", "\n", "    ", "num_data", "=", "normal", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "int", "(", "num_data", "*", "split", ")", "\n", "if", "not", "adv_test", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "[", "-", "num_test", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "X_data", "=", "np", ".", "concatenate", "(", "[", "normal", "[", "-", "num_test", ":", "]", ",", "noise", "[", "-", "num_test", ":", "]", ",", "adv", "]", ")", "\n", "\n", "# They are all < 0", "\n", "", "if", "X_data", ".", "mean", "(", ")", ">", "0", "and", "negative", ":", "X_data", "=", "-", "X_data", "\n", "# Z_score", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.FastGradientMethod_L2.__init__": [[223, 228], ["base_attack.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "4.0", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "norm_type", "=", "'l2'", "\n", "super", "(", "FastGradientMethod_L2", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "2", "*", "self", ".", "expand_max_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.FastGradientMethod_L2.attack": [[229, 241], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "num_iter", "=", "1", "\n", "momentum", "=", "0.0", "\n", "diversity_resize_rate", "=", "1.10", "\n", "diversity_prob", "=", "0.0", "\n", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "num_iter", ",", "momentum", ",", "\n", "diversity_resize_rate", ",", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.FastGradientMethod_LInf.__init__": [[244, 249], ["base_attack.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "0.1", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ",", "num_iter", "=", "1", ")", ":", "\n", "        ", "norm_type", "=", "'linf'", "\n", "super", "(", "FastGradientMethod_LInf", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "self", ".", "expand_max_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.FastGradientMethod_LInf.attack": [[250, 262], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "num_iter", "=", "1", "\n", "momentum", "=", "0.0", "\n", "diversity_resize_rate", "=", "1.10", "\n", "diversity_prob", "=", "0.0", "\n", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "num_iter", ",", "momentum", ",", "\n", "diversity_resize_rate", ",", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.IterativeFastGradientMethod_L2.__init__": [[267, 273], ["base_attack.Attack.__init__", "max"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "4.0", ",", "num_iter", "=", "10", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "norm_type", "=", "'l2'", "\n", "super", "(", "IterativeFastGradientMethod_L2", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "2", "*", "self", ".", "expand_max_norm", "/", "max", "(", "self", ".", "num_iter", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.IterativeFastGradientMethod_L2.attack": [[274, 285], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "momentum", "=", "0.0", "\n", "diversity_resize_rate", "=", "1.10", "\n", "diversity_prob", "=", "0.0", "\n", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "self", ".", "num_iter", ",", "momentum", ",", "\n", "diversity_resize_rate", ",", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.IterativeFastGradientMethod_LInf.__init__": [[287, 293], ["base_attack.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "0.1", ",", "num_iter", "=", "10", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "norm_type", "=", "'linf'", "\n", "super", "(", "IterativeFastGradientMethod_LInf", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "self", ".", "expand_max_norm", "/", "self", ".", "num_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.IterativeFastGradientMethod_LInf.attack": [[294, 305], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "momentum", "=", "0.0", "\n", "diversity_resize_rate", "=", "1.10", "\n", "diversity_prob", "=", "0.0", "\n", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "self", ".", "num_iter", ",", "momentum", ",", "\n", "diversity_resize_rate", ",", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumIterativeFastGradientMethod_L2.__init__": [[308, 315], ["base_attack.Attack.__init__", "max"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "4.0", ",", "num_iter", "=", "10", ",", "momentum", "=", "0.9", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "norm_type", "=", "'l2'", "\n", "super", "(", "MomentumIterativeFastGradientMethod_L2", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "2", "*", "self", ".", "expand_max_norm", "/", "max", "(", "self", ".", "num_iter", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumIterativeFastGradientMethod_L2.attack": [[316, 326], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "diversity_resize_rate", "=", "1.10", "\n", "diversity_prob", "=", "0.0", "\n", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "self", ".", "num_iter", ",", "self", ".", "momentum", ",", "\n", "diversity_resize_rate", ",", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumIterativeFastGradientMethod_LInf.__init__": [[329, 336], ["base_attack.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "0.1", ",", "num_iter", "=", "10", ",", "momentum", "=", "0.9", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "norm_type", "=", "'linf'", "\n", "super", "(", "MomentumIterativeFastGradientMethod_LInf", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "self", ".", "expand_max_norm", "/", "self", ".", "num_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumIterativeFastGradientMethod_LInf.attack": [[337, 347], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "diversity_resize_rate", "=", "1.10", "\n", "diversity_prob", "=", "0.0", "\n", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "self", ".", "num_iter", ",", "self", ".", "momentum", ",", "\n", "diversity_resize_rate", ",", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumDiversityIterativeFastGradientMethod_L2.__init__": [[351, 362], ["base_attack.Attack.__init__", "max"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "4.0", ",", "num_iter", "=", "10", ",", "momentum", "=", "0.9", ",", "\n", "diversity_resize_rate", "=", "1.10", ",", "diversity_prob", "=", "0.3", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "\n", "        ", "norm_type", "=", "'l2'", "\n", "super", "(", "MomentumDiversityIterativeFastGradientMethod_L2", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "diversity_resize_rate", "=", "diversity_resize_rate", "\n", "self", ".", "diversity_prob", "=", "diversity_prob", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "2", "*", "self", ".", "expand_max_norm", "/", "max", "(", "self", ".", "num_iter", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumDiversityIterativeFastGradientMethod_L2.attack": [[363, 371], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "self", ".", "num_iter", ",", "self", ".", "momentum", ",", "\n", "self", ".", "diversity_resize_rate", ",", "self", ".", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumDiversityIterativeFastGradientMethod_LInf.__init__": [[373, 383], ["base_attack.Attack.__init__"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "max_norm", "=", "4.0", ",", "num_iter", "=", "10", ",", "momentum", "=", "0.9", ",", "\n", "diversity_resize_rate", "=", "1.10", ",", "diversity_prob", "=", "0.3", ",", "random_init", "=", "False", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "norm_type", "=", "'linf'", "\n", "super", "(", "MomentumDiversityIterativeFastGradientMethod_LInf", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", ")", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "diversity_resize_rate", "=", "diversity_resize_rate", "\n", "self", ".", "diversity_prob", "=", "diversity_prob", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "norm_per_iter", "=", "self", ".", "expand_max_norm", "/", "self", ".", "num_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.MomentumDiversityIterativeFastGradientMethod_LInf.attack": [[384, 392], ["iterative_gradient_attack.iterative_gradient_attack"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "delta", "=", "iterative_gradient_attack", "(", "self", ".", "model", ",", "self", ".", "loss_fn", ",", "self", ".", "targeted", ",", "\n", "x", ",", "y", ",", "self", ".", "norm_type", ",", "self", ".", "expand_max_norm", ",", "\n", "self", ".", "norm_per_iter", ",", "self", ".", "num_iter", ",", "self", ".", "momentum", ",", "\n", "self", ".", "diversity_resize_rate", ",", "self", ".", "diversity_prob", ",", "\n", "self", ".", "random_init", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.input_diversity": [[16, 36], ["int", "torch.randint", "torch.randint", "torch.randint", "torch.interpolate", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.pad", "h_rem.item", "w_rem.item", "torch.randint.item", "pad_right.item", "torch.randint.item", "pad_bottom.item", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["def", "input_diversity", "(", "x", ",", "resize_rate", "=", "1.10", ",", "diversity_prob", "=", "0.3", ")", ":", "\n", "    ", "assert", "resize_rate", ">=", "1.0", "\n", "assert", "diversity_prob", ">=", "0.0", "and", "diversity_prob", "<=", "1.0", "\n", "\n", "img_size", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "img_resize", "=", "int", "(", "img_size", "*", "resize_rate", ")", "\n", "# print(img_size, img_resize, resize_rate)", "\n", "rnd", "=", "torch", ".", "randint", "(", "low", "=", "img_size", ",", "high", "=", "img_resize", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "rescaled", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "[", "rnd", ",", "rnd", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "h_rem", "=", "img_resize", "-", "rnd", "\n", "w_rem", "=", "img_resize", "-", "rnd", "\n", "pad_top", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "h_rem", ".", "item", "(", ")", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "pad_bottom", "=", "h_rem", "-", "pad_top", "\n", "pad_left", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "w_rem", ".", "item", "(", ")", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "pad_right", "=", "w_rem", "-", "pad_left", "\n", "\n", "padded", "=", "F", ".", "pad", "(", "rescaled", ",", "[", "pad_left", ".", "item", "(", ")", ",", "pad_right", ".", "item", "(", ")", ",", "pad_top", ".", "item", "(", ")", ",", "pad_bottom", ".", "item", "(", ")", "]", ",", "value", "=", "0", ")", "\n", "\n", "ret", "=", "padded", "if", "torch", ".", "rand", "(", "1", ")", "<", "diversity_prob", "else", "x", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.random_init_delta": [[37, 57], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.data.uniform_", "iterative_gradient_attack.clamp_by_l2_norm", "torch.zeros_like.data.uniform_"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.clamp_by_l2_norm"], ["", "def", "random_init_delta", "(", "x", ",", "norm_type", ",", "max_norm", ",", "mean", ",", "std", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "# mean = torch.Tensor(mean).reshape([3, 1, 1]).cuda()", "\n", "# std = torch.Tensor(std).reshape([3, 1, 1]).cuda()", "\n", "# mean = torch.Tensor(mean).reshape([3, 1, 1])", "\n", "# std = torch.Tensor(std).reshape([3, 1, 1])", "\n", "\n", "if", "norm_type", "==", "'l1'", ":", "\n", "        ", "pass", "\n", "", "elif", "norm_type", "==", "'l2'", ":", "\n", "        ", "delta", ".", "data", ".", "uniform_", "(", "-", "1.0", ",", "1.0", ")", "\n", "delta", ".", "data", "=", "(", "delta", ".", "data", "-", "mean", ")", "/", "std", "\n", "delta", ".", "data", "=", "delta", ".", "data", "-", "x", "\n", "delta", ".", "data", "=", "clamp_by_l2_norm", "(", "delta", ".", "data", ",", "max_norm", ")", "\n", "", "elif", "norm_type", "==", "'linf'", ":", "\n", "        ", "delta", ".", "data", ".", "uniform_", "(", "-", "1.0", ",", "1.0", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "*", "max_norm", "\n", "\n", "", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.clamp_by_l2_norm": [[58, 65], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.min", "torch.min", "torch.min", "torch.norm", "torch.norm", "torch.norm", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.reshape", "torch.reshape", "torch.reshape"], "function", ["None"], ["", "def", "clamp_by_l2_norm", "(", "delta", ",", "max_norm", ")", ":", "\n", "    ", "batch_size", "=", "delta", ".", "shape", "[", "0", "]", "\n", "norm", "=", "torch", ".", "reshape", "(", "torch", ".", "norm", "(", "torch", ".", "reshape", "(", "delta", ",", "shape", "=", "[", "batch_size", ",", "-", "1", "]", ")", ",", "dim", "=", "1", ")", ",", "shape", "=", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "# if max_norm > norm, mean current l2 norm of delta statisfy the constraint, no need the rescale", "\n", "factor", "=", "torch", ".", "min", "(", "max_norm", "/", "norm", ",", "torch", ".", "ones_like", "(", "norm", ")", ")", "\n", "delta", "=", "delta", "*", "factor", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.iterative_gradient_attack": [[67, 173], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "type", "iterative_gradient_attack.random_init_delta", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model", "torch.max.detach", "iterative_gradient_attack.input_diversity", "model", "loss.backward", "model.max", "loss_fn", "iterative_gradient_attack.clamp_by_l2_norm", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.sign", "torch.sign", "torch.sign", "torch.max", "torch.max", "torch.max", "NotImplementedError", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.min", "torch.min", "torch.min"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.random_init_delta", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.input_diversity", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.advertorch.functional.JPEGEncodingDecoding.backward", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.iterative_gradient_attack.clamp_by_l2_norm"], ["", "def", "iterative_gradient_attack", "(", "model", ",", "loss_fn", ",", "targeted", ",", "x", ",", "y", ",", "\n", "norm_type", ",", "max_norm", ",", "max_norm_per_iter", ",", "\n", "num_iter", ",", "momentum", ",", "\n", "diversity_resize_rate", ",", "diversity_prob", ",", "random_init", ",", "\n", "mean", ",", "std", ",", "clip_min", ",", "clip_max", ",", ")", ":", "\n", "    ", "'''\n        Explaining and harnessing adversarial examples. Goodfellow, Ian J., Jonathon Shlens, and Christian Szegedy. ICLR(Poster) 2015.\n        Adversarial examples in the physical world. Kurakin, Alexey, Ian Goodfellow, and Samy Bengio. ICLR(Workshop) 2017.\n        Boosting Adversarial Attacks with Momentum. Dong Y , Liao F , Pang T , et al. CVPR 2017.\n        Improving Transferability of Adversarial Examples with Input Diversity. Xie, Cihang, et al. CVPR 2019.\n\n\n        model                   : classification model you want to fool\n        loss_fn                 : loss function you want to maxmize or minimize for specific class y(see below)\n        targeted                : targeted attack or non-targeted attack\n        x                       : input images you want to attack\n        y                       : you want to maxmize or minimize loss for specific class y.\n                                  For non-targeted attack, maxmize the loss for class y.\n                                  For targeted attack, minimize the loss for class y\n        norm_type               : l1, l2, linf norm, you can the pertubation satisfy the max norm constratint\n        max_norm                : the max norm constarint of the pertubation\n        max_norm_per_iter       : the max norm change in each iteration\n        num_iter                : number of the iteration attacks\n        momentum                : momentum\n        diversity_resize_rate   : image rezie rate\n        diversity_prob          : probability for using input diversity\n        random_init             : random init the init pertubation\n        mean                    : mean for dataset\n        std                     : std for dataset\n        clip_min                : clip min\n        ckip_max                : clip max\n    '''", "\n", "# print('max_norm : ' , max_norm)", "\n", "# print('mean : ', mean)", "\n", "# print('std : ', std)", "\n", "if", "type", "(", "x", ")", "==", "list", ":", "\n", "        ", "index_id", "=", "x", "[", "1", "]", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "else", ":", "index_id", "=", "None", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "random_init", ":", "\n", "        ", "delta", "=", "random_init_delta", "(", "x", ",", "norm_type", ",", "max_norm", ",", "mean", ",", "std", ")", "\n", "", "else", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "", "if", "y", "is", "None", ":", "\n", "        ", "logits", "=", "model", "(", "x", ")", "\n", "y", "=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "\n", "", "if", "targeted", ":", "\n", "        ", "scaler", "=", "-", "1", "\n", "", "else", ":", "\n", "        ", "scaler", "=", "1", "\n", "\n", "", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "# print(num_iter)", "\n", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "        ", "delta", "=", "delta", ".", "detach", "(", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "\n", "x_diversity", "=", "input_diversity", "(", "delta", "+", "x", ",", "diversity_resize_rate", ",", "diversity_prob", "=", "diversity_prob", ")", "\n", "if", "index_id", "==", "None", ":", "\n", "            ", "input_data", "=", "x_diversity", "\n", "", "else", ":", "\n", "            ", "input_data", "=", "[", "x_diversity", ",", "index_id", "]", "\n", "", "logits", "=", "model", "(", "input_data", ")", "\n", "loss", "=", "scaler", "*", "loss_fn", "(", "logits", ",", "y", ")", "\n", "# print(loss*scaler)", "\n", "# import ipdb; ipdb.set_trace()", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "noise", "=", "delta", ".", "grad", "\n", "\n", "if", "norm_type", "==", "'l1'", ":", "\n", "            ", "pass", "\n", "", "elif", "norm_type", "==", "'l2'", ":", "\n", "# noise = noise / torch.reshape(torch.mean(torch.abs(torch.reshape(noise, shape=[batch_size, -1])), dim=1), shape=[batch_size, 1, 1, 1])", "\n", "# noise = noise / torch.reshape(torch.std(torch.reshape(noise, shape=[batch_size, -1]), dim=1), shape=[batch_size, 1, 1, 1])", "\n", "            ", "noise", "=", "noise", "/", "torch", ".", "reshape", "(", "torch", ".", "norm", "(", "torch", ".", "reshape", "(", "noise", ",", "shape", "=", "[", "batch_size", ",", "-", "1", "]", ")", ",", "dim", "=", "1", ")", ",", "shape", "=", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "grad", "=", "grad", "*", "momentum", "+", "noise", "\n", "# noise = noise / torch.reshape(torch.std(torch.reshape(noise, shape=[batch_size, -1]), dim=1), shape=[batch_size, 1, 1, 1])", "\n", "noise", "=", "grad", "/", "torch", ".", "reshape", "(", "torch", ".", "norm", "(", "torch", ".", "reshape", "(", "grad", ",", "shape", "=", "[", "batch_size", ",", "-", "1", "]", ")", ",", "dim", "=", "1", ")", ",", "shape", "=", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "# constraint1 : force to satisfy the max norm constaint", "\n", "# delta = delta + max_norm_per_iter * noise", "\n", "delta", "=", "delta", "+", "2", "*", "max_norm_per_iter", "*", "noise", "\n", "# constarint2 : force ot satisfy the image range constaint", "\n", "delta", "=", "clamp_by_l2_norm", "(", "delta", ",", "max_norm", ")", "\n", "\n", "", "elif", "norm_type", "==", "'linf'", ":", "\n", "\n", "            ", "grad", "=", "grad", "*", "momentum", "+", "noise", "\n", "noise", "=", "torch", ".", "sign", "(", "grad", ")", "\n", "# noise = grad / grad.abs().max()", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# constraint1 : force to satisfy the max norm constaint", "\n", "delta", "=", "delta", ".", "data", "+", "max_norm_per_iter", "*", "noise", "\n", "delta", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "delta", ",", "max_norm", ")", ",", "-", "max_norm", ")", "# if use random init, then need this to enforce satisfy the constraint1", "\n", "# constarint2 : force ot satisfy the image range constaint", "\n", "delta", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "delta", "+", "x", ",", "clip_max", ")", ",", "clip_min", ")", "-", "x", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'norm_type only can be l1, l2, linf...'", ")", "\n", "\n", "", "", "return", "delta", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__": [[9, 43], ["object.__init__", "numpy.array", "numpy.array", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "mean.cuda.cuda.cuda", "std.cuda.cuda.cuda", "clip_min.cuda.cuda.cuda", "clip_max.cuda.cuda.cuda", "expand_max_norm.cuda.cuda.cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", ",", "mean", ",", "std", ",", "norm_type", ",", "max_norm", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "mean", "=", "np", ".", "array", "(", "mean", ")", "\n", "std", "=", "np", ".", "array", "(", "std", ")", "\n", "clip_min", "=", "(", "0", "-", "mean", ")", "/", "std", "\n", "clip_max", "=", "(", "1", "-", "mean", ")", "/", "std", "\n", "\n", "channel", "=", "mean", ".", "shape", "[", "0", "]", "\n", "\n", "mean", "=", "torch", ".", "Tensor", "(", "mean", ")", ".", "reshape", "(", "[", "channel", ",", "1", ",", "1", "]", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "std", ")", ".", "reshape", "(", "[", "channel", ",", "1", ",", "1", "]", ")", "\n", "clip_min", "=", "torch", ".", "Tensor", "(", "clip_min", ")", ".", "reshape", "(", "[", "channel", ",", "1", ",", "1", "]", ")", "\n", "clip_max", "=", "torch", ".", "Tensor", "(", "clip_max", ")", ".", "reshape", "(", "[", "channel", ",", "1", ",", "1", "]", ")", "\n", "expand_max_norm", "=", "max_norm", "/", "std", "\n", "\n", "if", "True", ":", "\n", "            ", "mean", "=", "mean", ".", "cuda", "(", ")", "\n", "std", "=", "std", ".", "cuda", "(", ")", "\n", "clip_min", "=", "clip_min", ".", "cuda", "(", ")", "\n", "clip_max", "=", "clip_max", ".", "cuda", "(", ")", "\n", "expand_max_norm", "=", "expand_max_norm", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "clip_min", "=", "clip_min", "\n", "self", ".", "clip_max", "=", "clip_max", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "self", ".", "max_norm", "=", "max_norm", "\n", "self", ".", "expand_max_norm", "=", "expand_max_norm", "\n", "self", ".", "targeted", "=", "targeted", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.attack": [[45, 49], ["NotImplementedError"], "methods", ["None"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "\n", "        ", "error", "=", "\"Sub-classes must implement perturb.\"", "\n", "raise", "NotImplementedError", "(", "error", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.load_all_models": [[50, 75], ["model_class_map.keys", "os.path.join", "Model", "torch.load", "torch.load", "model.to.load_state_dict", "model.to.to", "models.append", "os.path.exists", "print", "sys.exit", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["None"], ["def", "load_all_models", "(", ")", ":", "\n", "    ", "models", "=", "[", "]", "\n", "for", "model_name", "in", "model_class_map", ".", "keys", "(", ")", ":", "\n", "\n", "        ", "Model", "=", "model_class_map", "[", "model_name", "]", "[", "0", "]", "\n", "ckpt_path", "=", "model_class_map", "[", "model_name", "]", "[", "1", "]", "\n", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "sys", ".", "path", "[", "0", "]", ",", "ckpt_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_path", ")", ":", "\n", "            ", "print", "(", "\"%s doesn't exists...\"", "%", "ckpt_path", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "0", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "model", "=", "Model", "(", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "models", ".", "append", "(", "(", "model_name", ",", "model", ")", ")", "\n", "\n", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result": [[76, 158], ["dataloader.cifar10.get_train_loader", "dataloader.cifar10.get_val_loader", "tqdm.tqdm", "zip", "torchadver.utils.Evaluator", "torchadver.utils.Evaluator", "sample[].to", "sample[].to", "adversary.attack", "zip", "print", "ori_evaluator.get_top1", "ori_evaluator.get_top5", "adv_evaluator.get_top1", "adv_evaluator.get_top5", "print", "print", "results.append", "range", "range", "defense_model", "defense_model", "ori_evaluator.add_batch", "adv_evaluator.add_batch", "len", "len"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.dataloader.cifar10.get_train_loader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.dataloader.cifar10.get_val_loader", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.attacker.base_attack.Attack.attack", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.get_top1", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.get_top5", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.get_top1", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.get_top5", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.add_batch", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.torchadver.utils.Evaluator.add_batch"], ["", "def", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", ":", "\n", "\n", "\n", "# define dataloader", "\n", "    ", "batch_size", "=", "32", "\n", "num_workers", "=", "32", "\n", "train_loader", "=", "cifar10", ".", "get_train_loader", "(", "batch_size", ",", "num_workers", ",", "shuffle", "=", "False", ")", "\n", "val_loader", "=", "cifar10", ".", "get_val_loader", "(", "batch_size", ",", "num_workers", ")", "\n", "\n", "\n", "defense_ori_evaluators", "=", "[", "Evaluator", "(", ")", "for", "i", "in", "range", "(", "len", "(", "defense_models", ")", ")", "]", "\n", "defense_adv_evaluators", "=", "[", "Evaluator", "(", ")", "for", "i", "in", "range", "(", "len", "(", "defense_models", ")", ")", "]", "\n", "\n", "# tbar = tqdm(train_loader)", "\n", "tbar", "=", "tqdm", "(", "val_loader", ")", "\n", "for", "sample", "in", "tbar", ":", "\n", "\n", "        ", "images", "=", "sample", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "sample", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "\n", "# attack", "\n", "adv_images", "=", "adversary", ".", "attack", "(", "images", ",", "labels", ")", "\n", "# adv_images = adversary.attack(images)", "\n", "\n", "# defense", "\n", "for", "ori_evaluator", ",", "adv_evaluator", ",", "defense_model_tuple", "in", "zip", "(", "defense_ori_evaluators", ",", "defense_adv_evaluators", ",", "defense_models", ")", ":", "\n", "            ", "defense_model_name", "=", "defense_model_tuple", "[", "0", "]", "\n", "defense_model", "=", "defense_model_tuple", "[", "1", "]", "\n", "logits", "=", "defense_model", "(", "images", ")", "\n", "adv_logits", "=", "defense_model", "(", "adv_images", ")", "\n", "\n", "ori_evaluator", ".", "add_batch", "(", "logits", ",", "labels", ")", "\n", "adv_evaluator", ".", "add_batch", "(", "adv_logits", ",", "labels", ")", "\n", "\n", "\n", "# step9 : save the adversarial images", "\n", "# filenames = [ '%05d.png' % (tot + i) for i in range(batch_size) ]", "\n", "# save_images(adv_images, mean, std, filenames, './adv_images')", "\n", "# batch_size = images.shape[0]", "\n", "# tot += batch_size", "\n", "\n", "\n", "# (optimal step) : print the attack result by per-batch", "\n", "# ori_top1 = ori_evaluator.get_top1()", "\n", "# ori_top5 = ori_evaluator.get_top5()", "\n", "# adv_top1 = adv_evaluator.get_top1()", "\n", "# adv_top5 = adv_evaluator.get_top5()", "\n", "# print('Before attack | top1 : %.4f, top5 : %.4f' % (ori_top1, ori_top5))", "\n", "# print('After attack  | top1 : %.4f, top5 : %.4f' % (adv_top1, adv_top5))", "\n", "\n", "\n", "# (optimal step) : check dose the norm satisfy the max norm constraint", "\n", "# max_l2_norm = calc_max_norm(images, adv_images, mean, std, 'l2')", "\n", "# max_linf_norm = calc_max_norm(images, adv_images, mean, std, 'linf')", "\n", "# print('max l2 norm   : ', max_l2_norm.item())", "\n", "# print('max linf norm : ', max_linf_norm.item())", "\n", "\n", "# (optimal step) : print the ave change between images and adv_images", "\n", "# ave_l2_norm = calc_average_norm(images, adv_images, mean, std, 'l2')", "\n", "# ave_linf_norm = calc_average_norm(images, adv_images, mean, std, 'linf')", "\n", "# print('ave l2 norm   : ', max_l2_norm.item())", "\n", "# print('ave linf norm : ', max_linf_norm.item())", "\n", "\n", "\n", "", "", "results", "=", "[", "]", "\n", "for", "ori_evaluator", ",", "adv_evaluator", ",", "defense_model_tuple", "in", "zip", "(", "defense_ori_evaluators", ",", "defense_adv_evaluators", ",", "defense_models", ")", ":", "\n", "        ", "defense_model_name", "=", "defense_model_tuple", "[", "0", "]", "\n", "\n", "print", "(", "'Defense model : '", ",", "defense_model_name", ")", "\n", "# print the comparison result", "\n", "ori_top1", "=", "ori_evaluator", ".", "get_top1", "(", ")", "\n", "ori_top5", "=", "ori_evaluator", ".", "get_top5", "(", ")", "\n", "adv_top1", "=", "adv_evaluator", ".", "get_top1", "(", ")", "\n", "adv_top5", "=", "adv_evaluator", ".", "get_top5", "(", ")", "\n", "print", "(", "'Before attack | top1 : %.4f, top5 : %.4f'", "%", "(", "ori_top1", ",", "ori_top5", ")", ")", "\n", "print", "(", "'After attack  | top1 : %.4f, top5 : %.4f'", "%", "(", "adv_top1", ",", "adv_top5", ")", ")", "\n", "\n", "result", "=", "(", "defense_model_name", ",", "(", "ori_top1", ",", "ori_top5", ",", "adv_top1", ",", "adv_top5", ")", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_random_init": [[163, 218], ["next", "torch.device", "torch.device", "torch.device", "torch.device", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_l2_bound.append", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_linf_bound.append", "target_model.parameters", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result"], ["", "def", "_experiment_random_init", "(", "target_model_name", ",", "target_model", ",", "defense_models", ")", ":", "\n", "\n", "    ", "if", "next", "(", "target_model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "0", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "\n", "", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "\n", "experiment_setup_for_l2_bound", "=", "[", "\n", "(", "'FGM_L2 with random init'", ",", "FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'FGM_L2 without random_init'", ",", "FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "(", "'I_FGM_L2 with radnom init'", ",", "I_FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'I_FGM_L2 without radnom init'", ",", "I_FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "(", "'MI_FGM_L2 with radnom init'", ",", "MI_FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'MI_FGM_L2 without radnom init'", ",", "MI_FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "(", "'M_DI_FGM_L2 with radnom init'", ",", "M_DI_FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'M_DI_FGM_L2 without radnom init'", ",", "M_DI_FGM_L2", ",", "{", "'max_norm'", ":", "4.0", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "]", "\n", "\n", "\n", "experiment_setup_for_linf_bound", "=", "[", "\n", "(", "'FGM_LInf with random init'", ",", "FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'FGM_LInf without random_init'", ",", "FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "(", "'I_FGM_LInf with radnom init'", ",", "I_FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'I_FGM_LInf without radnom init'", ",", "I_FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "(", "'MI_FGM_LInf with radnom init'", ",", "MI_FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'MI_FGM_LInf without radnom init'", ",", "MI_FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "(", "'M_DI_FGM_LInf with radnom init'", ",", "M_DI_FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "True", "}", ")", ",", "\n", "(", "'M_DI_FGM_LInf without radnom init'", ",", "M_DI_FGM_LInf", ",", "{", "'max_norm'", ":", "0.1", ",", "'random_init'", ":", "False", "}", ")", ",", "\n", "]", "\n", "\n", "experiment_results_for_l2_bound", "=", "[", "]", "\n", "\n", "for", "experiment_name", ",", "Attacker", ",", "params", "in", "experiment_setup_for_l2_bound", ":", "\n", "        ", "print", "(", "experiment_name", "+", "'...'", ")", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_l2_bound", ".", "append", "(", "(", "experiment_name", ",", "results", ")", ")", "\n", "\n", "\n", "", "experiment_results_for_linf_bound", "=", "[", "]", "\n", "\n", "for", "experiment_name", ",", "Attacker", ",", "params", "in", "experiment_setup_for_linf_bound", ":", "\n", "        ", "print", "(", "experiment_name", "+", "'...'", ")", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_linf_bound", ".", "append", "(", "(", "experiment_name", ",", "results", ")", ")", "\n", "\n", "", "return", "(", "'l2_bound'", ",", "experiment_results_for_l2_bound", ")", ",", "(", "'linf_bound'", ",", "experiment_results_for_linf_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.experiment_random_init": [[220, 227], ["experiments.load_all_models", "print", "experiments._experiment_random_init", "print"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.load_all_models", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_random_init"], ["", "def", "experiment_random_init", "(", ")", ":", "\n", "    ", "models", "=", "load_all_models", "(", ")", "\n", "\n", "for", "target_model_name", ",", "target_model", "in", "models", ":", "\n", "        ", "print", "(", "'Target model : '", ",", "target_model_name", ")", "\n", "experiment_results", "=", "_experiment_random_init", "(", "target_model_name", ",", "target_model", ",", "models", ")", "\n", "print", "(", "experiment_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_max_norm": [[229, 277], ["next", "torch.device", "torch.device", "torch.device", "torch.device", "target_model.parameters", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_l2_bound.append", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_linf_bound.append", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result"], ["", "", "def", "_experiment_different_max_norm", "(", "target_model_name", ",", "target_model", ",", "defense_models", ")", ":", "\n", "\n", "    ", "if", "next", "(", "target_model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "0", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "\n", "\n", "experiment_setup_for_l2_bound", "=", "[", "\n", "(", "'FGM_L2'", ",", "FGM_L2", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.1", ",", "stop", "=", "5.0", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "(", "'I_FGM_L2'", ",", "I_FGM_L2", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.1", ",", "stop", "=", "5.0", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "(", "'MI_FGM_L2'", ",", "MI_FGM_L2", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.1", ",", "stop", "=", "5.0", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "(", "'M_DIFGM_L2'", ",", "M_DI_FGM_L2", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.1", ",", "stop", "=", "5.0", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "]", "\n", "experiment_setup_for_linf_bound", "=", "[", "\n", "(", "'FGM_LInf'", ",", "FGM_LInf", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.01", ",", "stop", "=", "0.1", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "(", "'I_FGM_LInf'", ",", "I_FGM_LInf", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.01", ",", "stop", "=", "0.1", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "(", "'MI_FGM_LInf'", ",", "MI_FGM_LInf", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.01", ",", "stop", "=", "0.1", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "(", "'M_DIFGM_LInf'", ",", "M_DI_FGM_LInf", ",", "[", "{", "'max_norm'", ":", "max_norm", ",", "'random_init'", ":", "True", "}", "for", "max_norm", "in", "np", ".", "linspace", "(", "start", "=", "0.01", ",", "stop", "=", "0.1", ",", "num", "=", "19", ")", "]", ")", ",", "\n", "]", "\n", "\n", "experiment_results_for_l2_bound", "=", "[", "]", "\n", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_l2_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with max_l2_norm = %.3f'", "%", "(", "experiment_name", ",", "params", "[", "'max_norm'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_l2_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "experiment_results_for_linf_bound", "=", "[", "]", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_linf_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with max_linf_norm = %.3f'", "%", "(", "experiment_name", ",", "params", "[", "'max_norm'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_linf_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "return", "(", "'l2_bound'", ",", "experiment_results_for_l2_bound", ")", ",", "(", "'linf_bound'", ",", "experiment_results_for_linf_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.experiment_different_max_norm": [[280, 287], ["experiments.load_all_models", "print", "experiments._experiment_different_max_norm", "print"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.load_all_models", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_max_norm"], ["", "def", "experiment_different_max_norm", "(", ")", ":", "\n", "    ", "models", "=", "load_all_models", "(", ")", "\n", "\n", "for", "target_model_name", ",", "target_model", "in", "models", ":", "\n", "        ", "print", "(", "'Target model : '", ",", "target_model_name", ")", "\n", "experiment_results", "=", "_experiment_different_max_norm", "(", "target_model_name", ",", "target_model", ",", "models", ")", "\n", "print", "(", "experiment_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_num_iter": [[289, 331], ["next", "torch.device", "torch.device", "torch.device", "torch.device", "target_model.parameters", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_l2_bound.append", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_l2_bound.append", "range", "range", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result"], ["", "", "def", "_experiment_different_num_iter", "(", "target_model_name", ",", "target_model", ",", "defense_models", ")", ":", "\n", "\n", "    ", "if", "next", "(", "target_model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "0", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "\n", "\n", "experiment_setup_for_l2_bound", "=", "[", "\n", "(", "'I_FGM_L2'", ",", "I_FGM_L2", ",", "[", "{", "'max_norm'", ":", "4.0", ",", "'num_iter'", ":", "num_iter", ",", "'random_init'", ":", "True", "}", "for", "num_iter", "in", "range", "(", "1", ",", "16", ")", "]", ")", ",", "\n", "]", "\n", "experiment_setup_for_linf_bound", "=", "[", "\n", "(", "'I_FGM_LInf'", ",", "I_FGM_LInf", ",", "[", "{", "'max_norm'", ":", "0.1", ",", "'num_iter'", ":", "num_iter", ",", "'random_init'", ":", "True", "}", "for", "num_iter", "in", "range", "(", "1", ",", "16", ")", "]", ")", ",", "\n", "]", "\n", "\n", "experiment_results_for_l2_bound", "=", "[", "]", "\n", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_l2_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with num_iter = %d'", "%", "(", "experiment_name", ",", "params", "[", "'num_iter'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_l2_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "experiment_results_for_linf_bound", "=", "[", "]", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_linf_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with num_iter = %d'", "%", "(", "experiment_name", ",", "params", "[", "'num_iter'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_l2_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "return", "(", "'l2_bound'", ",", "experiment_results_for_l2_bound", ")", ",", "(", "'linf_bound'", ",", "experiment_results_for_linf_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.experiment_different_num_iter": [[332, 339], ["experiments.load_all_models", "print", "experiments._experiment_different_num_iter", "print"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.load_all_models", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_num_iter"], ["", "def", "experiment_different_num_iter", "(", ")", ":", "\n", "    ", "models", "=", "load_all_models", "(", ")", "\n", "\n", "for", "target_model_name", ",", "target_model", "in", "models", ":", "\n", "        ", "print", "(", "'Target model : '", ",", "target_model_name", ")", "\n", "experiment_results", "=", "_experiment_different_num_iter", "(", "target_model_name", ",", "target_model", ",", "models", ")", "\n", "print", "(", "experiment_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_momentum": [[341, 385], ["next", "torch.device", "torch.device", "torch.device", "torch.device", "target_model.parameters", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_l2_bound.append", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_l2_bound.append", "numpy.linspace", "numpy.linspace", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result"], ["", "", "def", "_experiment_different_momentum", "(", "target_model_name", ",", "target_model", ",", "defense_models", ")", ":", "\n", "\n", "    ", "if", "next", "(", "target_model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "0", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "\n", "\n", "experiment_setup_for_l2_bound", "=", "[", "\n", "(", "'MI_FGM_L2'", ",", "MI_FGM_L2", ",", "[", "{", "'max_norm'", ":", "4.0", ",", "'num_iter'", ":", "10", ",", "'momentum'", ":", "momentum", ",", "'random_init'", ":", "True", "}", "\n", "for", "momentum", "in", "np", ".", "linspace", "(", "start", "=", "0", ",", "stop", "=", "1.0", ",", "num", "=", "11", ")", "]", ")", ",", "\n", "]", "\n", "experiment_setup_for_linf_bound", "=", "[", "\n", "(", "'MI_FGM_LInf'", ",", "MI_FGM_LInf", ",", "[", "{", "'max_norm'", ":", "0.1", ",", "'num_iter'", ":", "10", ",", "'momentum'", ":", "momentum", ",", "'random_init'", ":", "True", "}", "\n", "for", "momentum", "in", "np", ".", "linspace", "(", "start", "=", "0", ",", "stop", "=", "1.0", ",", "num", "=", "11", ")", "]", ")", ",", "\n", "]", "\n", "\n", "experiment_results_for_l2_bound", "=", "[", "]", "\n", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_l2_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with momentum = %.2f'", "%", "(", "experiment_name", ",", "params", "[", "'momentum'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_l2_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "experiment_results_for_linf_bound", "=", "[", "]", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_linf_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with momentum = %.2f'", "%", "(", "experiment_name", ",", "params", "[", "'momentum'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_l2_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "return", "(", "'l2_bound'", ",", "experiment_results_for_l2_bound", ")", ",", "(", "'linf_bound'", ",", "experiment_results_for_linf_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.experiment_different_momentum": [[386, 393], ["experiments.load_all_models", "print", "experiments._experiment_different_momentum", "print"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.load_all_models", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_momentum"], ["", "def", "experiment_different_momentum", "(", ")", ":", "\n", "    ", "models", "=", "load_all_models", "(", ")", "\n", "\n", "for", "target_model_name", ",", "target_model", "in", "models", ":", "\n", "        ", "print", "(", "'Target model : '", ",", "target_model_name", ")", "\n", "experiment_results", "=", "_experiment_different_momentum", "(", "target_model_name", ",", "target_model", ",", "models", ")", "\n", "print", "(", "experiment_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_diversity_prob": [[396, 441], ["next", "torch.device", "torch.device", "torch.device", "torch.device", "target_model.parameters", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_l2_bound.append", "print", "Attacker", "experiments.get_attack_result", "experiment_results_for_linf_bound.append", "numpy.linspace", "numpy.linspace", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.get_attack_result"], ["", "", "def", "_experiment_different_diversity_prob", "(", "target_model_name", ",", "target_model", ",", "defense_models", ")", ":", "\n", "    ", "if", "next", "(", "target_model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "0", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "\n", "\n", "experiment_setup_for_l2_bound", "=", "[", "\n", "(", "'M_DI_FGM_L2'", ",", "M_DI_FGM_L2", ",", "[", "{", "'max_norm'", ":", "4.0", ",", "'num_iter'", ":", "10", ",", "'momentum'", ":", "0.9", ",", "\n", "'diversity_prob'", ":", "diversity_prob", ",", "'random_init'", ":", "True", "}", "\n", "for", "diversity_prob", "in", "np", ".", "linspace", "(", "start", "=", "0", ",", "stop", "=", "1.0", ",", "num", "=", "11", ")", "]", ")", ",", "\n", "]", "\n", "experiment_setup_for_linf_bound", "=", "[", "\n", "(", "'M_DI_FGM_LInf'", ",", "M_DI_FGM_LInf", ",", "[", "{", "'max_norm'", ":", "0.1", ",", "'num_iter'", ":", "10", ",", "'momentum'", ":", "0.9", ",", "\n", "'diversity_prob'", ":", "diversity_prob", ",", "'random_init'", ":", "True", "}", "\n", "for", "diversity_prob", "in", "np", ".", "linspace", "(", "start", "=", "0", ",", "stop", "=", "1.0", ",", "num", "=", "11", ")", "]", ")", ",", "\n", "]", "\n", "\n", "experiment_results_for_l2_bound", "=", "[", "]", "\n", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_l2_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with diversity_prob = %.2f'", "%", "(", "experiment_name", ",", "params", "[", "'diversity_prob'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_l2_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "experiment_results_for_linf_bound", "=", "[", "]", "\n", "for", "experiment_name", ",", "Attacker", ",", "multi_params", "in", "experiment_setup_for_linf_bound", ":", "\n", "        ", "for", "params", "in", "multi_params", ":", "\n", "            ", "current_experiment_name", "=", "'%s with diversity_prob = %.2f'", "%", "(", "experiment_name", ",", "params", "[", "'diversity_prob'", "]", ")", "\n", "print", "(", "current_experiment_name", ")", "\n", "\n", "adversary", "=", "Attacker", "(", "target_model", ",", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "**", "params", ")", "\n", "results", "=", "get_attack_result", "(", "target_model_name", ",", "target_model", ",", "defense_models", ",", "device", ",", "adversary", ",", "mean", ",", "std", ")", "\n", "\n", "experiment_results_for_linf_bound", ".", "append", "(", "(", "current_experiment_name", ",", "results", ")", ")", "\n", "\n", "", "", "return", "(", "'l2_bound'", ",", "experiment_results_for_l2_bound", ")", ",", "(", "'linf_bound'", ",", "experiment_results_for_linf_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.experiment_different_diversity_prob": [[442, 449], ["experiments.load_all_models", "print", "experiments._experiment_different_diversity_prob", "print"], "function", ["home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments.load_all_models", "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.examples.experiments._experiment_different_diversity_prob"], ["", "def", "experiment_different_diversity_prob", "(", ")", ":", "\n", "    ", "models", "=", "load_all_models", "(", ")", "\n", "\n", "for", "target_model_name", ",", "target_model", "in", "models", ":", "\n", "        ", "print", "(", "'Target model : '", ",", "target_model_name", ")", "\n", "experiment_results", "=", "_experiment_different_diversity_prob", "(", "target_model_name", ",", "target_model", ",", "models", ")", "\n", "print", "(", "experiment_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.dataloader.cifar10.get_train_loader": [[9, 23], ["torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["def", "get_train_loader", "(", "batch_size", "=", "128", ",", "num_workers", "=", "8", ",", "transform", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "# transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])", "\n", "]", ")", "\n", "\n", "", "cifar10_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data/'", ",", "train", "=", "True", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "cifar10_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ICT-MIRACLE-lab_Hierarchical_Feature_Constraint.dataloader.cifar10.get_val_loader": [[25, 38], ["torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_val_loader", "(", "batch_size", "=", "128", ",", "num_workers", "=", "8", ",", "transform", "=", "None", ")", ":", "\n", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "# transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])", "\n", "]", ")", "\n", "\n", "", "cifar10_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data/'", ",", "train", "=", "False", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "cifar10_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "loader", "\n", "\n"]]}